
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00013c90  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  08013f30  08013f30  00023f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080141b4  080141b4  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  080141b4  080141b4  000241b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080141bc  080141bc  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080141bc  080141bc  000241bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080141c0  080141c0  000241c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  080141c4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00041884  240001d0  08014390  000301d0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  24041a54  08014390  00031a54  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003bd17  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006342  00000000  00000000  0006bf11  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ef8  00000000  00000000  00072258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c88  00000000  00000000  00074150  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003ef99  00000000  00000000  00075dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00020810  00000000  00000000  000b4d71  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016f5b0  00000000  00000000  000d5581  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00244b31  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085bc  00000000  00000000  00244bac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001d0 	.word	0x240001d0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08013f18 	.word	0x08013f18

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001d4 	.word	0x240001d4
 80002dc:	08013f18 	.word	0x08013f18

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000690:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000692:	f2ad 4de4 	subw	sp, sp, #1252	; 0x4e4
 8000696:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000698:	f001 f834 	bl	8001704 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800069c:	f000 f900 	bl	80008a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006a0:	f000 fbec 	bl	8000e7c <MX_GPIO_Init>
  MX_DMA_Init();
 80006a4:	f000 fbca 	bl	8000e3c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80006a8:	f000 fab8 	bl	8000c1c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80006ac:	f00c ff06 	bl	800d4bc <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80006b0:	f012 faea 	bl	8012c88 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80006b4:	f000 f9ea 	bl	8000a8c <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80006b8:	f000 fa4c 	bl	8000b54 <MX_FDCAN2_Init>
  MX_UART8_Init();
 80006bc:	f000 fb26 	bl	8000d0c <MX_UART8_Init>
  MX_USART3_UART_Init();
 80006c0:	f000 fb70 	bl	8000da4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80006c4:	f000 facc 	bl	8000c60 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 80006c8:	2201      	movs	r2, #1
 80006ca:	4967      	ldr	r1, [pc, #412]	; (8000868 <main+0x1d8>)
 80006cc:	4867      	ldr	r0, [pc, #412]	; (800086c <main+0x1dc>)
 80006ce:	f011 fd1f 	bl	8012110 <f_mount>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	f040 80be 	bne.w	8000856 <main+0x1c6>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char myPath[] = "one.csv\0";
 80006da:	4a65      	ldr	r2, [pc, #404]	; (8000870 <main+0x1e0>)
 80006dc:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80006e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80006e2:	c303      	stmia	r3!, {r0, r1}
 80006e4:	701a      	strb	r2, [r3, #0]
      char ConfigPath[] ="Config.csv\0";
 80006e6:	4a63      	ldr	r2, [pc, #396]	; (8000874 <main+0x1e4>)
 80006e8:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80006ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80006ee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80006f2:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 80006f6:	2201      	movs	r2, #1
 80006f8:	4619      	mov	r1, r3
 80006fa:	485f      	ldr	r0, [pc, #380]	; (8000878 <main+0x1e8>)
 80006fc:	f011 fd4e 	bl	801219c <f_open>
 8000700:	4603      	mov	r3, r0
 8000702:	2b04      	cmp	r3, #4
 8000704:	d144      	bne.n	8000790 <main+0x100>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 8000706:	f207 43b4 	addw	r3, r7, #1204	; 0x4b4
 800070a:	220a      	movs	r2, #10
 800070c:	4619      	mov	r1, r3
 800070e:	485a      	ldr	r0, [pc, #360]	; (8000878 <main+0x1e8>)
 8000710:	f011 fd44 	bl	801219c <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 8000714:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000718:	4a58      	ldr	r2, [pc, #352]	; (800087c <main+0x1ec>)
 800071a:	461c      	mov	r4, r3
 800071c:	4615      	mov	r5, r2
 800071e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000720:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000724:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000726:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800072a:	c403      	stmia	r4!, {r0, r1}
 800072c:	8022      	strh	r2, [r4, #0]
 800072e:	3402      	adds	r4, #2
 8000730:	0c13      	lsrs	r3, r2, #16
 8000732:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 8000734:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fdd1 	bl	80002e0 <strlen>
 800073e:	4602      	mov	r2, r0
 8000740:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000744:	4413      	add	r3, r2
 8000746:	4a4e      	ldr	r2, [pc, #312]	; (8000880 <main+0x1f0>)
 8000748:	4614      	mov	r4, r2
 800074a:	469c      	mov	ip, r3
 800074c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8000750:	4665      	mov	r5, ip
 8000752:	4626      	mov	r6, r4
 8000754:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8000756:	6028      	str	r0, [r5, #0]
 8000758:	6069      	str	r1, [r5, #4]
 800075a:	60aa      	str	r2, [r5, #8]
 800075c:	60eb      	str	r3, [r5, #12]
 800075e:	3410      	adds	r4, #16
 8000760:	f10c 0c10 	add.w	ip, ip, #16
 8000764:	4574      	cmp	r4, lr
 8000766:	d1f3      	bne.n	8000750 <main+0xc0>
 8000768:	4662      	mov	r2, ip
 800076a:	4623      	mov	r3, r4
 800076c:	cb03      	ldmia	r3!, {r0, r1}
 800076e:	6010      	str	r0, [r2, #0]
 8000770:	6051      	str	r1, [r2, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 8000776:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800077a:	4618      	mov	r0, r3
 800077c:	f7ff fdb0 	bl	80002e0 <strlen>
 8000780:	4602      	mov	r2, r0
 8000782:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <main+0x1f4>)
 8000788:	483b      	ldr	r0, [pc, #236]	; (8000878 <main+0x1e8>)
 800078a:	f012 f804 	bl	8012796 <f_write>
 800078e:	e00b      	b.n	80007a8 <main+0x118>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8000790:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000794:	4618      	mov	r0, r3
 8000796:	f7ff fda3 	bl	80002e0 <strlen>
 800079a:	4602      	mov	r2, r0
 800079c:	f107 01cc 	add.w	r1, r7, #204	; 0xcc
 80007a0:	4b39      	ldr	r3, [pc, #228]	; (8000888 <main+0x1f8>)
 80007a2:	4835      	ldr	r0, [pc, #212]	; (8000878 <main+0x1e8>)
 80007a4:	f011 feb8 	bl	8012518 <f_read>
      }
      f_close(&Config);
 80007a8:	4833      	ldr	r0, [pc, #204]	; (8000878 <main+0x1e8>)
 80007aa:	f012 f9e7 	bl	8012b7c <f_close>
  	  f_open(&myFILE, myPath, FA_WRITE | FA_CREATE_ALWAYS);
 80007ae:	f507 6398 	add.w	r3, r7, #1216	; 0x4c0
 80007b2:	220a      	movs	r2, #10
 80007b4:	4619      	mov	r1, r3
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <main+0x1fc>)
 80007b8:	f011 fcf0 	bl	801219c <f_open>

  	  //write speed test
  	  	for(int i = 0; i<131072; i++){
 80007bc:	2300      	movs	r3, #0
 80007be:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 80007c2:	e00a      	b.n	80007da <main+0x14a>
  		    DataBuffer.Data.DataBuff1[i] = 'A';
 80007c4:	4a32      	ldr	r2, [pc, #200]	; (8000890 <main+0x200>)
 80007c6:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80007ca:	4413      	add	r3, r2
 80007cc:	2241      	movs	r2, #65	; 0x41
 80007ce:	701a      	strb	r2, [r3, #0]
  	  	for(int i = 0; i<131072; i++){
 80007d0:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80007d4:	3301      	adds	r3, #1
 80007d6:	f8c7 34dc 	str.w	r3, [r7, #1244]	; 0x4dc
 80007da:	f8d7 34dc 	ldr.w	r3, [r7, #1244]	; 0x4dc
 80007de:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80007e2:	dbef      	blt.n	80007c4 <main+0x134>
  	    }
  	    int start = HAL_GetTick();
 80007e4:	f001 f814 	bl	8001810 <HAL_GetTick>
 80007e8:	4603      	mov	r3, r0
 80007ea:	f8c7 34d4 	str.w	r3, [r7, #1236]	; 0x4d4
  	    for(int i = 0; i<1; i++){
 80007ee:	2300      	movs	r3, #0
 80007f0:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 80007f4:	e00b      	b.n	800080e <main+0x17e>
  		f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte);
 80007f6:	4b27      	ldr	r3, [pc, #156]	; (8000894 <main+0x204>)
 80007f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80007fc:	4924      	ldr	r1, [pc, #144]	; (8000890 <main+0x200>)
 80007fe:	4823      	ldr	r0, [pc, #140]	; (800088c <main+0x1fc>)
 8000800:	f011 ffc9 	bl	8012796 <f_write>
  	    for(int i = 0; i<1; i++){
 8000804:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000808:	3301      	adds	r3, #1
 800080a:	f8c7 34d8 	str.w	r3, [r7, #1240]	; 0x4d8
 800080e:	f8d7 34d8 	ldr.w	r3, [r7, #1240]	; 0x4d8
 8000812:	2b00      	cmp	r3, #0
 8000814:	ddef      	ble.n	80007f6 <main+0x166>
        }
  	    int end = HAL_GetTick();
 8000816:	f000 fffb 	bl	8001810 <HAL_GetTick>
 800081a:	4603      	mov	r3, r0
 800081c:	f8c7 34d0 	str.w	r3, [r7, #1232]	; 0x4d0
  	    int duration = end - start;
 8000820:	f8d7 24d0 	ldr.w	r2, [r7, #1232]	; 0x4d0
 8000824:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	; 0x4d4
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	f8c7 34cc 	str.w	r3, [r7, #1228]	; 0x4cc
  	    char myTime[200];
  	    sprintf(myTime, "\r%i", duration);
 800082e:	1d3b      	adds	r3, r7, #4
 8000830:	f8d7 24cc 	ldr.w	r2, [r7, #1228]	; 0x4cc
 8000834:	4918      	ldr	r1, [pc, #96]	; (8000898 <main+0x208>)
 8000836:	4618      	mov	r0, r3
 8000838:	f013 f82a 	bl	8013890 <siprintf>
  	    f_write(&myFILE, myTime, strlen(myTime), &testByte);
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	4618      	mov	r0, r3
 8000840:	f7ff fd4e 	bl	80002e0 <strlen>
 8000844:	4602      	mov	r2, r0
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	4b12      	ldr	r3, [pc, #72]	; (8000894 <main+0x204>)
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <main+0x1fc>)
 800084c:	f011 ffa3 	bl	8012796 <f_write>
      f_close(&myFILE);
 8000850:	480e      	ldr	r0, [pc, #56]	; (800088c <main+0x1fc>)
 8000852:	f012 f993 	bl	8012b7c <f_close>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000856:	2101      	movs	r1, #1
 8000858:	4810      	ldr	r0, [pc, #64]	; (800089c <main+0x20c>)
 800085a:	f003 fb16 	bl	8003e8a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800085e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000862:	f000 ffe1 	bl	8001828 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000866:	e7f6      	b.n	8000856 <main+0x1c6>
 8000868:	24040d14 	.word	0x24040d14
 800086c:	240407b0 	.word	0x240407b0
 8000870:	08013f9c 	.word	0x08013f9c
 8000874:	08013fa8 	.word	0x08013fa8
 8000878:	24040adc 	.word	0x24040adc
 800087c:	08013f30 	.word	0x08013f30
 8000880:	08013f5c 	.word	0x08013f5c
 8000884:	24040724 	.word	0x24040724
 8000888:	240405f4 	.word	0x240405f4
 800088c:	24040344 	.word	0x24040344
 8000890:	240001ec 	.word	0x240001ec
 8000894:	24040ad8 	.word	0x24040ad8
 8000898:	08013f98 	.word	0x08013f98
 800089c:	58020400 	.word	0x58020400

080008a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b0cc      	sub	sp, #304	; 0x130
 80008a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80008aa:	224c      	movs	r2, #76	; 0x4c
 80008ac:	2100      	movs	r1, #0
 80008ae:	4618      	mov	r0, r3
 80008b0:	f012 ff2d 	bl	801370e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80008b8:	2220      	movs	r2, #32
 80008ba:	2100      	movs	r1, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f012 ff26 	bl	801370e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008c2:	f107 0308 	add.w	r3, r7, #8
 80008c6:	4618      	mov	r0, r3
 80008c8:	23bc      	movs	r3, #188	; 0xbc
 80008ca:	461a      	mov	r2, r3
 80008cc:	2100      	movs	r1, #0
 80008ce:	f012 ff1e 	bl	801370e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80008d2:	2002      	movs	r0, #2
 80008d4:	f004 fcfc 	bl	80052d0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008d8:	1d3b      	adds	r3, r7, #4
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	4b67      	ldr	r3, [pc, #412]	; (8000a7c <SystemClock_Config+0x1dc>)
 80008e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008e2:	4a66      	ldr	r2, [pc, #408]	; (8000a7c <SystemClock_Config+0x1dc>)
 80008e4:	f023 0301 	bic.w	r3, r3, #1
 80008e8:	62d3      	str	r3, [r2, #44]	; 0x2c
 80008ea:	4b64      	ldr	r3, [pc, #400]	; (8000a7c <SystemClock_Config+0x1dc>)
 80008ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80008ee:	f003 0201 	and.w	r2, r3, #1
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	601a      	str	r2, [r3, #0]
 80008f6:	4b62      	ldr	r3, [pc, #392]	; (8000a80 <SystemClock_Config+0x1e0>)
 80008f8:	699b      	ldr	r3, [r3, #24]
 80008fa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008fe:	4a60      	ldr	r2, [pc, #384]	; (8000a80 <SystemClock_Config+0x1e0>)
 8000900:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000904:	6193      	str	r3, [r2, #24]
 8000906:	4b5e      	ldr	r3, [pc, #376]	; (8000a80 <SystemClock_Config+0x1e0>)
 8000908:	699b      	ldr	r3, [r3, #24]
 800090a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000916:	bf00      	nop
 8000918:	4b59      	ldr	r3, [pc, #356]	; (8000a80 <SystemClock_Config+0x1e0>)
 800091a:	699b      	ldr	r3, [r3, #24]
 800091c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000920:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000924:	d1f8      	bne.n	8000918 <SystemClock_Config+0x78>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000926:	4b57      	ldr	r3, [pc, #348]	; (8000a84 <SystemClock_Config+0x1e4>)
 8000928:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800092a:	f023 0303 	bic.w	r3, r3, #3
 800092e:	4a55      	ldr	r2, [pc, #340]	; (8000a84 <SystemClock_Config+0x1e4>)
 8000930:	f043 0302 	orr.w	r3, r3, #2
 8000934:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000936:	2321      	movs	r3, #33	; 0x21
 8000938:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800093c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000940:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000944:	2301      	movs	r3, #1
 8000946:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800094a:	2302      	movs	r3, #2
 800094c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000950:	2302      	movs	r3, #2
 8000952:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000956:	2302      	movs	r3, #2
 8000958:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 38;
 800095c:	2326      	movs	r3, #38	; 0x26
 800095e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 84;
 8000968:	2354      	movs	r3, #84	; 0x54
 800096a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096e:	2302      	movs	r3, #2
 8000970:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000974:	230c      	movs	r3, #12
 8000976:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800097a:	2300      	movs	r3, #0
 800097c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000986:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800098a:	4618      	mov	r0, r3
 800098c:	f004 fcea 	bl	8005364 <HAL_RCC_OscConfig>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d001      	beq.n	800099a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000996:	f000 fb5b 	bl	8001050 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099a:	233f      	movs	r3, #63	; 0x3f
 800099c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009a0:	2303      	movs	r3, #3
 80009a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009ac:	2308      	movs	r3, #8
 80009ae:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009b2:	2300      	movs	r3, #0
 80009b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009b8:	2300      	movs	r3, #0
 80009ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009be:	2300      	movs	r3, #0
 80009c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009ca:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80009ce:	2101      	movs	r1, #1
 80009d0:	4618      	mov	r0, r3
 80009d2:	f005 f8d7 	bl	8005b84 <HAL_RCC_ClockConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x140>
  {
    Error_Handler();
 80009dc:	f000 fb38 	bl	8001050 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 80009e0:	f107 0308 	add.w	r3, r7, #8
 80009e4:	4a28      	ldr	r2, [pc, #160]	; (8000a88 <SystemClock_Config+0x1e8>)
 80009e6:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 80009e8:	f107 0308 	add.w	r3, r7, #8
 80009ec:	2202      	movs	r2, #2
 80009ee:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 80009f0:	f107 0308 	add.w	r3, r7, #8
 80009f4:	220c      	movs	r2, #12
 80009f6:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 80009f8:	f107 0308 	add.w	r3, r7, #8
 80009fc:	2202      	movs	r2, #2
 80009fe:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a00:	f107 0308 	add.w	r3, r7, #8
 8000a04:	2202      	movs	r2, #2
 8000a06:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8000a08:	f107 0308 	add.w	r3, r7, #8
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000a10:	f107 0308 	add.w	r3, r7, #8
 8000a14:	22c0      	movs	r2, #192	; 0xc0
 8000a16:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000a18:	f107 0308 	add.w	r3, r7, #8
 8000a1c:	2220      	movs	r2, #32
 8000a1e:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000a20:	f107 0308 	add.w	r3, r7, #8
 8000a24:	2200      	movs	r2, #0
 8000a26:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a30:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000a32:	f107 0308 	add.w	r3, r7, #8
 8000a36:	2200      	movs	r2, #0
 8000a38:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000a3a:	f107 0308 	add.w	r3, r7, #8
 8000a3e:	2200      	movs	r2, #0
 8000a40:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2200      	movs	r2, #0
 8000a48:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000a4a:	f107 0308 	add.w	r3, r7, #8
 8000a4e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8000a52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a56:	f107 0308 	add.w	r3, r7, #8
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f005 fc42 	bl	80062e4 <HAL_RCCEx_PeriphCLKConfig>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x1ca>
  {
    Error_Handler();
 8000a66:	f000 faf3 	bl	8001050 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a6a:	f005 fa41 	bl	8005ef0 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8000a6e:	f004 fc69 	bl	8005344 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8000a72:	bf00      	nop
 8000a74:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8000a78:	46bd      	mov	sp, r7
 8000a7a:	bd80      	pop	{r7, pc}
 8000a7c:	58000400 	.word	0x58000400
 8000a80:	58024800 	.word	0x58024800
 8000a84:	58024400 	.word	0x58024400
 8000a88:	00059002 	.word	0x00059002

08000a8c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000a90:	4b2e      	ldr	r3, [pc, #184]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000a92:	4a2f      	ldr	r2, [pc, #188]	; (8000b50 <MX_FDCAN1_Init+0xc4>)
 8000a94:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000a96:	4b2d      	ldr	r3, [pc, #180]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000a9c:	4b2b      	ldr	r3, [pc, #172]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000aa2:	4b2a      	ldr	r3, [pc, #168]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000aa8:	4b28      	ldr	r3, [pc, #160]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000aae:	4b27      	ldr	r3, [pc, #156]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000ab4:	4b25      	ldr	r3, [pc, #148]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ab6:	2201      	movs	r2, #1
 8000ab8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000aba:	4b24      	ldr	r3, [pc, #144]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000ac0:	4b22      	ldr	r3, [pc, #136]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000ac6:	4b21      	ldr	r3, [pc, #132]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ac8:	2202      	movs	r2, #2
 8000aca:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000acc:	4b1f      	ldr	r3, [pc, #124]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000ad2:	4b1e      	ldr	r3, [pc, #120]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ad4:	2201      	movs	r2, #1
 8000ad6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000ad8:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ada:	2201      	movs	r2, #1
 8000adc:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000ade:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ae0:	2201      	movs	r2, #1
 8000ae2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000ae4:	4b19      	ldr	r3, [pc, #100]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 8000aea:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000af0:	4b16      	ldr	r3, [pc, #88]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000af6:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000afc:	4b13      	ldr	r3, [pc, #76]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000afe:	2204      	movs	r2, #4
 8000b00:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000b02:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000b08:	4b10      	ldr	r3, [pc, #64]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b0a:	2204      	movs	r2, #4
 8000b0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8000b0e:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000b14:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b16:	2204      	movs	r2, #4
 8000b18:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000b1a:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000b20:	4b0a      	ldr	r3, [pc, #40]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000b26:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b34:	2204      	movs	r2, #4
 8000b36:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_FDCAN1_Init+0xc0>)
 8000b3a:	f002 fc75 	bl	8003428 <HAL_FDCAN_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000b44:	f000 fa84 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	240405f8 	.word	0x240405f8
 8000b50:	4000a000 	.word	0x4000a000

08000b54 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000b58:	4b2e      	ldr	r3, [pc, #184]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b5a:	4a2f      	ldr	r2, [pc, #188]	; (8000c18 <MX_FDCAN2_Init+0xc4>)
 8000b5c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000b5e:	4b2d      	ldr	r3, [pc, #180]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000b64:	4b2b      	ldr	r3, [pc, #172]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8000b6a:	4b2a      	ldr	r3, [pc, #168]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8000b70:	4b28      	ldr	r3, [pc, #160]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8000b76:	4b27      	ldr	r3, [pc, #156]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8000b7c:	4b25      	ldr	r3, [pc, #148]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b7e:	2201      	movs	r2, #1
 8000b80:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8000b82:	4b24      	ldr	r3, [pc, #144]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8000b88:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b8a:	2202      	movs	r2, #2
 8000b8c:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8000b8e:	4b21      	ldr	r3, [pc, #132]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b90:	2202      	movs	r2, #2
 8000b92:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8000b94:	4b1f      	ldr	r3, [pc, #124]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b96:	2201      	movs	r2, #1
 8000b98:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8000b9a:	4b1e      	ldr	r3, [pc, #120]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8000ba0:	4b1c      	ldr	r3, [pc, #112]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8000ba6:	4b1b      	ldr	r3, [pc, #108]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000ba8:	2201      	movs	r2, #1
 8000baa:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8000bac:	4b19      	ldr	r3, [pc, #100]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8000bb2:	4b18      	ldr	r3, [pc, #96]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8000bb8:	4b16      	ldr	r3, [pc, #88]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8000bbe:	4b15      	ldr	r3, [pc, #84]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000bc4:	4b13      	ldr	r3, [pc, #76]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bc6:	2204      	movs	r2, #4
 8000bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8000bca:	4b12      	ldr	r3, [pc, #72]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000bd0:	4b10      	ldr	r3, [pc, #64]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000bdc:	4b0d      	ldr	r3, [pc, #52]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000be8:	4b0a      	ldr	r3, [pc, #40]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8000bee:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000bf4:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000bfc:	2204      	movs	r2, #4
 8000bfe:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000c00:	4804      	ldr	r0, [pc, #16]	; (8000c14 <MX_FDCAN2_Init+0xc0>)
 8000c02:	f002 fc11 	bl	8003428 <HAL_FDCAN_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8000c0c:	f000 fa20 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	24040a28 	.word	0x24040a28
 8000c18:	4000a400 	.word	0x4000a400

08000c1c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000c20:	4b0d      	ldr	r3, [pc, #52]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c22:	4a0e      	ldr	r2, [pc, #56]	; (8000c5c <MX_SDMMC1_SD_Init+0x40>)
 8000c24:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000c26:	4b0c      	ldr	r3, [pc, #48]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8000c2c:	4b0a      	ldr	r3, [pc, #40]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000c32:	4b09      	ldr	r3, [pc, #36]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c34:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c38:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8000c3a:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c3c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c40:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000c42:	4b05      	ldr	r3, [pc, #20]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000c48:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <MX_SDMMC1_SD_Init+0x3c>)
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr
 8000c58:	24040574 	.word	0x24040574
 8000c5c:	52007000 	.word	0x52007000

08000c60 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c64:	4b27      	ldr	r3, [pc, #156]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c66:	4a28      	ldr	r2, [pc, #160]	; (8000d08 <MX_SPI1_Init+0xa8>)
 8000c68:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c6a:	4b26      	ldr	r3, [pc, #152]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c6c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c70:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c72:	4b24      	ldr	r3, [pc, #144]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c7a:	2207      	movs	r2, #7
 8000c7c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c7e:	4b21      	ldr	r3, [pc, #132]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c8a:	4b1e      	ldr	r3, [pc, #120]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c8c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c90:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000c92:	4b1c      	ldr	r3, [pc, #112]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c98:	4b1a      	ldr	r3, [pc, #104]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c9e:	4b19      	ldr	r3, [pc, #100]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ca4:	4b17      	ldr	r3, [pc, #92]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000caa:	4b16      	ldr	r3, [pc, #88]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cb0:	4b14      	ldr	r3, [pc, #80]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cb2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cb6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000cb8:	4b12      	ldr	r3, [pc, #72]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000cbe:	4b11      	ldr	r3, [pc, #68]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000cca:	4b0e      	ldr	r3, [pc, #56]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000cd0:	4b0c      	ldr	r3, [pc, #48]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000cd6:	4b0b      	ldr	r3, [pc, #44]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000cdc:	4b09      	ldr	r3, [pc, #36]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000ce2:	4b08      	ldr	r3, [pc, #32]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cee:	4805      	ldr	r0, [pc, #20]	; (8000d04 <MX_SPI1_Init+0xa4>)
 8000cf0:	f009 f940 	bl	8009f74 <HAL_SPI_Init>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000cfa:	f000 f9a9 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cfe:	bf00      	nop
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	24040728 	.word	0x24040728
 8000d08:	40013000 	.word	0x40013000

08000d0c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000d10:	4b22      	ldr	r3, [pc, #136]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d12:	4a23      	ldr	r2, [pc, #140]	; (8000da0 <MX_UART8_Init+0x94>)
 8000d14:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000d16:	4b21      	ldr	r3, [pc, #132]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d1c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000d1e:	4b1f      	ldr	r3, [pc, #124]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000d24:	4b1d      	ldr	r3, [pc, #116]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000d2a:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000d30:	4b1a      	ldr	r3, [pc, #104]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d32:	220c      	movs	r2, #12
 8000d34:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d36:	4b19      	ldr	r3, [pc, #100]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d3c:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d42:	4b16      	ldr	r3, [pc, #88]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d4e:	4b13      	ldr	r3, [pc, #76]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000d54:	4811      	ldr	r0, [pc, #68]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d56:	f009 fa20 	bl	800a19a <HAL_UART_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000d60:	f000 f976 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d64:	2100      	movs	r1, #0
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d68:	f00a f9bb 	bl	800b0e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000d72:	f000 f96d 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d76:	2100      	movs	r1, #0
 8000d78:	4808      	ldr	r0, [pc, #32]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d7a:	f00a f9f0 	bl	800b15e <HAL_UARTEx_SetRxFifoThreshold>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000d84:	f000 f964 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000d88:	4804      	ldr	r0, [pc, #16]	; (8000d9c <MX_UART8_Init+0x90>)
 8000d8a:	f00a f971 	bl	800b070 <HAL_UARTEx_DisableFifoMode>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000d94:	f000 f95c 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	24040698 	.word	0x24040698
 8000da0:	40007c00 	.word	0x40007c00

08000da4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000da8:	4b22      	ldr	r3, [pc, #136]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000daa:	4a23      	ldr	r2, [pc, #140]	; (8000e38 <MX_USART3_UART_Init+0x94>)
 8000dac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000dae:	4b21      	ldr	r3, [pc, #132]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000db4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dca:	220c      	movs	r2, #12
 8000dcc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dce:	4b19      	ldr	r3, [pc, #100]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000de0:	4b14      	ldr	r3, [pc, #80]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000de6:	4b13      	ldr	r3, [pc, #76]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dec:	4811      	ldr	r0, [pc, #68]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000dee:	f009 f9d4 	bl	800a19a <HAL_UART_Init>
 8000df2:	4603      	mov	r3, r0
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d001      	beq.n	8000dfc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000df8:	f000 f92a 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	480d      	ldr	r0, [pc, #52]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e00:	f00a f96f 	bl	800b0e2 <HAL_UARTEx_SetTxFifoThreshold>
 8000e04:	4603      	mov	r3, r0
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d001      	beq.n	8000e0e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000e0a:	f000 f921 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000e0e:	2100      	movs	r1, #0
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e12:	f00a f9a4 	bl	800b15e <HAL_UARTEx_SetRxFifoThreshold>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e1c:	f000 f918 	bl	8001050 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e20:	4804      	ldr	r0, [pc, #16]	; (8000e34 <MX_USART3_UART_Init+0x90>)
 8000e22:	f00a f925 	bl	800b070 <HAL_UARTEx_DisableFifoMode>
 8000e26:	4603      	mov	r3, r0
 8000e28:	2b00      	cmp	r3, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e2c:	f000 f910 	bl	8001050 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e30:	bf00      	nop
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	240402b8 	.word	0x240402b8
 8000e38:	40004800 	.word	0x40004800

08000e3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	4a0b      	ldr	r2, [pc, #44]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e4a:	f043 0301 	orr.w	r3, r3, #1
 8000e4e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e52:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_DMA_Init+0x3c>)
 8000e54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e58:	f003 0301 	and.w	r3, r3, #1
 8000e5c:	607b      	str	r3, [r7, #4]
 8000e5e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e60:	2200      	movs	r2, #0
 8000e62:	2100      	movs	r1, #0
 8000e64:	200b      	movs	r0, #11
 8000e66:	f000 fde8 	bl	8001a3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e6a:	200b      	movs	r0, #11
 8000e6c:	f000 fdff 	bl	8001a6e <HAL_NVIC_EnableIRQ>

}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	58024400 	.word	0x58024400

08000e7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	; 0x30
 8000e80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e82:	f107 031c 	add.w	r3, r7, #28
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
 8000e8a:	605a      	str	r2, [r3, #4]
 8000e8c:	609a      	str	r2, [r3, #8]
 8000e8e:	60da      	str	r2, [r3, #12]
 8000e90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e92:	4b69      	ldr	r3, [pc, #420]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e98:	4a67      	ldr	r2, [pc, #412]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000e9a:	f043 0310 	orr.w	r3, r3, #16
 8000e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ea2:	4b65      	ldr	r3, [pc, #404]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea8:	f003 0310 	and.w	r3, r3, #16
 8000eac:	61bb      	str	r3, [r7, #24]
 8000eae:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eb0:	4b61      	ldr	r3, [pc, #388]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb6:	4a60      	ldr	r2, [pc, #384]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000eb8:	f043 0304 	orr.w	r3, r3, #4
 8000ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ec0:	4b5d      	ldr	r3, [pc, #372]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec6:	f003 0304 	and.w	r3, r3, #4
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ece:	4b5a      	ldr	r3, [pc, #360]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ed4:	4a58      	ldr	r2, [pc, #352]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ede:	4b56      	ldr	r3, [pc, #344]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ee8:	613b      	str	r3, [r7, #16]
 8000eea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eec:	4b52      	ldr	r3, [pc, #328]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ef2:	4a51      	ldr	r2, [pc, #324]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000ef4:	f043 0301 	orr.w	r3, r3, #1
 8000ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000efc:	4b4e      	ldr	r3, [pc, #312]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f02:	f003 0301 	and.w	r3, r3, #1
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0a:	4b4b      	ldr	r3, [pc, #300]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f10:	4a49      	ldr	r2, [pc, #292]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f12:	f043 0302 	orr.w	r3, r3, #2
 8000f16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f20:	f003 0302 	and.w	r3, r3, #2
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f28:	4b43      	ldr	r3, [pc, #268]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2e:	4a42      	ldr	r2, [pc, #264]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f30:	f043 0308 	orr.w	r3, r3, #8
 8000f34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f38:	4b3f      	ldr	r3, [pc, #252]	; (8001038 <MX_GPIO_Init+0x1bc>)
 8000f3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3e:	f003 0308 	and.w	r3, r3, #8
 8000f42:	607b      	str	r3, [r7, #4]
 8000f44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000f46:	2200      	movs	r2, #0
 8000f48:	210c      	movs	r1, #12
 8000f4a:	483c      	ldr	r0, [pc, #240]	; (800103c <MX_GPIO_Init+0x1c0>)
 8000f4c:	f002 ff84 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000f50:	2200      	movs	r2, #0
 8000f52:	2103      	movs	r1, #3
 8000f54:	483a      	ldr	r0, [pc, #232]	; (8001040 <MX_GPIO_Init+0x1c4>)
 8000f56:	f002 ff7f 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2101      	movs	r1, #1
 8000f5e:	4839      	ldr	r0, [pc, #228]	; (8001044 <MX_GPIO_Init+0x1c8>)
 8000f60:	f002 ff7a 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000f64:	2200      	movs	r2, #0
 8000f66:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f6a:	4837      	ldr	r0, [pc, #220]	; (8001048 <MX_GPIO_Init+0x1cc>)
 8000f6c:	f002 ff74 	bl	8003e58 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000f70:	230c      	movs	r3, #12
 8000f72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	482d      	ldr	r0, [pc, #180]	; (800103c <MX_GPIO_Init+0x1c0>)
 8000f88:	f002 fdb6 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	2301      	movs	r3, #1
 8000f92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9c:	f107 031c 	add.w	r3, r7, #28
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4827      	ldr	r0, [pc, #156]	; (8001040 <MX_GPIO_Init+0x1c4>)
 8000fa4:	f002 fda8 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fac:	4b27      	ldr	r3, [pc, #156]	; (800104c <MX_GPIO_Init+0x1d0>)
 8000fae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000fb4:	f107 031c 	add.w	r3, r7, #28
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4821      	ldr	r0, [pc, #132]	; (8001040 <MX_GPIO_Init+0x1c4>)
 8000fbc:	f002 fd9c 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000fd0:	f107 031c 	add.w	r3, r7, #28
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	481b      	ldr	r0, [pc, #108]	; (8001044 <MX_GPIO_Init+0x1c8>)
 8000fd8:	f002 fd8e 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000fdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe2:	4b1a      	ldr	r3, [pc, #104]	; (800104c <MX_GPIO_Init+0x1d0>)
 8000fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 031c 	add.w	r3, r7, #28
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4812      	ldr	r0, [pc, #72]	; (800103c <MX_GPIO_Init+0x1c0>)
 8000ff2:	f002 fd81 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001004:	2300      	movs	r3, #0
 8001006:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8001008:	f107 031c 	add.w	r3, r7, #28
 800100c:	4619      	mov	r1, r3
 800100e:	480e      	ldr	r0, [pc, #56]	; (8001048 <MX_GPIO_Init+0x1cc>)
 8001010:	f002 fd72 	bl	8003af8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8001014:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001018:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	4619      	mov	r1, r3
 8001028:	4805      	ldr	r0, [pc, #20]	; (8001040 <MX_GPIO_Init+0x1c4>)
 800102a:	f002 fd65 	bl	8003af8 <HAL_GPIO_Init>

}
 800102e:	bf00      	nop
 8001030:	3730      	adds	r7, #48	; 0x30
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	58024400 	.word	0x58024400
 800103c:	58021000 	.word	0x58021000
 8001040:	58020000 	.word	0x58020000
 8001044:	58020400 	.word	0x58020400
 8001048:	58020c00 	.word	0x58020c00
 800104c:	11110000 	.word	0x11110000

08001050 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001054:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001056:	e7fe      	b.n	8001056 <Error_Handler+0x6>

08001058 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800105e:	4b0a      	ldr	r3, [pc, #40]	; (8001088 <HAL_MspInit+0x30>)
 8001060:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001064:	4a08      	ldr	r2, [pc, #32]	; (8001088 <HAL_MspInit+0x30>)
 8001066:	f043 0302 	orr.w	r3, r3, #2
 800106a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_MspInit+0x30>)
 8001070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001074:	f003 0302 	and.w	r3, r3, #2
 8001078:	607b      	str	r3, [r7, #4]
 800107a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107c:	bf00      	nop
 800107e:	370c      	adds	r7, #12
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr
 8001088:	58024400 	.word	0x58024400

0800108c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b08c      	sub	sp, #48	; 0x30
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001094:	f107 031c 	add.w	r3, r7, #28
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a3d      	ldr	r2, [pc, #244]	; (80011a0 <HAL_FDCAN_MspInit+0x114>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d138      	bne.n	8001120 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80010ae:	4b3d      	ldr	r3, [pc, #244]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	3301      	adds	r3, #1
 80010b4:	4a3b      	ldr	r2, [pc, #236]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 80010b6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 80010b8:	4b3a      	ldr	r3, [pc, #232]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d10e      	bne.n	80010de <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 80010c0:	4b39      	ldr	r3, [pc, #228]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010c2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010c6:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010cc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80010d0:	4b35      	ldr	r3, [pc, #212]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010d2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80010d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010da:	61bb      	str	r3, [r7, #24]
 80010dc:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010de:	4b32      	ldr	r3, [pc, #200]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e4:	4a30      	ldr	r2, [pc, #192]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010e6:	f043 0302 	orr.w	r3, r3, #2
 80010ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 80010f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	617b      	str	r3, [r7, #20]
 80010fa:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010fc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800110e:	2309      	movs	r3, #9
 8001110:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001112:	f107 031c 	add.w	r3, r7, #28
 8001116:	4619      	mov	r1, r3
 8001118:	4824      	ldr	r0, [pc, #144]	; (80011ac <HAL_FDCAN_MspInit+0x120>)
 800111a:	f002 fced 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 800111e:	e03b      	b.n	8001198 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a22      	ldr	r2, [pc, #136]	; (80011b0 <HAL_FDCAN_MspInit+0x124>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d136      	bne.n	8001198 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800112a:	4b1e      	ldr	r3, [pc, #120]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	3301      	adds	r3, #1
 8001130:	4a1c      	ldr	r2, [pc, #112]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 8001132:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8001134:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_FDCAN_MspInit+0x118>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d10e      	bne.n	800115a <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 800113e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001142:	4a19      	ldr	r2, [pc, #100]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 8001144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001148:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800114c:	4b16      	ldr	r3, [pc, #88]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 800114e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	4b13      	ldr	r3, [pc, #76]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001160:	4a11      	ldr	r2, [pc, #68]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800116a:	4b0f      	ldr	r3, [pc, #60]	; (80011a8 <HAL_FDCAN_MspInit+0x11c>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	60fb      	str	r3, [r7, #12]
 8001176:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001178:	2360      	movs	r3, #96	; 0x60
 800117a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117c:	2302      	movs	r3, #2
 800117e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001184:	2300      	movs	r3, #0
 8001186:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8001188:	2309      	movs	r3, #9
 800118a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 031c 	add.w	r3, r7, #28
 8001190:	4619      	mov	r1, r3
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <HAL_FDCAN_MspInit+0x120>)
 8001194:	f002 fcb0 	bl	8003af8 <HAL_GPIO_Init>
}
 8001198:	bf00      	nop
 800119a:	3730      	adds	r7, #48	; 0x30
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	4000a000 	.word	0x4000a000
 80011a4:	240401f0 	.word	0x240401f0
 80011a8:	58024400 	.word	0x58024400
 80011ac:	58020400 	.word	0x58020400
 80011b0:	4000a400 	.word	0x4000a400

080011b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	; 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a2e      	ldr	r2, [pc, #184]	; (800128c <HAL_SD_MspInit+0xd8>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d155      	bne.n	8001282 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80011d6:	4b2e      	ldr	r3, [pc, #184]	; (8001290 <HAL_SD_MspInit+0xdc>)
 80011d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011dc:	4a2c      	ldr	r2, [pc, #176]	; (8001290 <HAL_SD_MspInit+0xdc>)
 80011de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_SD_MspInit+0xdc>)
 80011e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80011ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f4:	4b26      	ldr	r3, [pc, #152]	; (8001290 <HAL_SD_MspInit+0xdc>)
 80011f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011fa:	4a25      	ldr	r2, [pc, #148]	; (8001290 <HAL_SD_MspInit+0xdc>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <HAL_SD_MspInit+0xdc>)
 8001206:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800120a:	f003 0304 	and.w	r3, r3, #4
 800120e:	60fb      	str	r3, [r7, #12]
 8001210:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001212:	4b1f      	ldr	r3, [pc, #124]	; (8001290 <HAL_SD_MspInit+0xdc>)
 8001214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001218:	4a1d      	ldr	r2, [pc, #116]	; (8001290 <HAL_SD_MspInit+0xdc>)
 800121a:	f043 0308 	orr.w	r3, r3, #8
 800121e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001222:	4b1b      	ldr	r3, [pc, #108]	; (8001290 <HAL_SD_MspInit+0xdc>)
 8001224:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001228:	f003 0308 	and.w	r3, r3, #8
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8001230:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001234:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001242:	230c      	movs	r3, #12
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001246:	f107 0314 	add.w	r3, r7, #20
 800124a:	4619      	mov	r1, r3
 800124c:	4811      	ldr	r0, [pc, #68]	; (8001294 <HAL_SD_MspInit+0xe0>)
 800124e:	f002 fc53 	bl	8003af8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001252:	2304      	movs	r3, #4
 8001254:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001256:	2302      	movs	r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	2303      	movs	r3, #3
 8001260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8001262:	230c      	movs	r3, #12
 8001264:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001266:	f107 0314 	add.w	r3, r7, #20
 800126a:	4619      	mov	r1, r3
 800126c:	480a      	ldr	r0, [pc, #40]	; (8001298 <HAL_SD_MspInit+0xe4>)
 800126e:	f002 fc43 	bl	8003af8 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2031      	movs	r0, #49	; 0x31
 8001278:	f000 fbdf 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800127c:	2031      	movs	r0, #49	; 0x31
 800127e:	f000 fbf6 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001282:	bf00      	nop
 8001284:	3728      	adds	r7, #40	; 0x28
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	52007000 	.word	0x52007000
 8001290:	58024400 	.word	0x58024400
 8001294:	58020800 	.word	0x58020800
 8001298:	58020c00 	.word	0x58020c00

0800129c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a4:	f107 0314 	add.w	r3, r7, #20
 80012a8:	2200      	movs	r2, #0
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	605a      	str	r2, [r3, #4]
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	60da      	str	r2, [r3, #12]
 80012b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a1a      	ldr	r2, [pc, #104]	; (8001324 <HAL_SPI_MspInit+0x88>)
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d12d      	bne.n	800131a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012be:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012c4:	4a18      	ldr	r2, [pc, #96]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80012ce:	4b16      	ldr	r3, [pc, #88]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80012d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e2:	4a11      	ldr	r2, [pc, #68]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012e4:	f043 0301 	orr.w	r3, r3, #1
 80012e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012ec:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <HAL_SPI_MspInit+0x8c>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60fb      	str	r3, [r7, #12]
 80012f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80012fa:	23e0      	movs	r3, #224	; 0xe0
 80012fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800130a:	2305      	movs	r3, #5
 800130c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800130e:	f107 0314 	add.w	r3, r7, #20
 8001312:	4619      	mov	r1, r3
 8001314:	4805      	ldr	r0, [pc, #20]	; (800132c <HAL_SPI_MspInit+0x90>)
 8001316:	f002 fbef 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800131a:	bf00      	nop
 800131c:	3728      	adds	r7, #40	; 0x28
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	40013000 	.word	0x40013000
 8001328:	58024400 	.word	0x58024400
 800132c:	58020000 	.word	0x58020000

08001330 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	f107 031c 	add.w	r3, r7, #28
 800133c:	2200      	movs	r2, #0
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	605a      	str	r2, [r3, #4]
 8001342:	609a      	str	r2, [r3, #8]
 8001344:	60da      	str	r2, [r3, #12]
 8001346:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a4b      	ldr	r2, [pc, #300]	; (800147c <HAL_UART_MspInit+0x14c>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d12e      	bne.n	80013b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001352:	4b4b      	ldr	r3, [pc, #300]	; (8001480 <HAL_UART_MspInit+0x150>)
 8001354:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001358:	4a49      	ldr	r2, [pc, #292]	; (8001480 <HAL_UART_MspInit+0x150>)
 800135a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800135e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001362:	4b47      	ldr	r3, [pc, #284]	; (8001480 <HAL_UART_MspInit+0x150>)
 8001364:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001368:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001370:	4b43      	ldr	r3, [pc, #268]	; (8001480 <HAL_UART_MspInit+0x150>)
 8001372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001376:	4a42      	ldr	r2, [pc, #264]	; (8001480 <HAL_UART_MspInit+0x150>)
 8001378:	f043 0310 	orr.w	r3, r3, #16
 800137c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001380:	4b3f      	ldr	r3, [pc, #252]	; (8001480 <HAL_UART_MspInit+0x150>)
 8001382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001386:	f003 0310 	and.w	r3, r3, #16
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800138e:	2303      	movs	r3, #3
 8001390:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800139e:	2308      	movs	r3, #8
 80013a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	4619      	mov	r1, r3
 80013a8:	4836      	ldr	r0, [pc, #216]	; (8001484 <HAL_UART_MspInit+0x154>)
 80013aa:	f002 fba5 	bl	8003af8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80013ae:	e061      	b.n	8001474 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a34      	ldr	r2, [pc, #208]	; (8001488 <HAL_UART_MspInit+0x158>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d15c      	bne.n	8001474 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013ba:	4b31      	ldr	r3, [pc, #196]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013c0:	4a2f      	ldr	r2, [pc, #188]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80013ca:	4b2d      	ldr	r3, [pc, #180]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80013d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013d4:	613b      	str	r3, [r7, #16]
 80013d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013d8:	4b29      	ldr	r3, [pc, #164]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	4a28      	ldr	r2, [pc, #160]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013e0:	f043 0308 	orr.w	r3, r3, #8
 80013e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e8:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_UART_MspInit+0x150>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ee:	f003 0308 	and.w	r3, r3, #8
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80013f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013fc:	2302      	movs	r3, #2
 80013fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	2300      	movs	r3, #0
 8001406:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001408:	2307      	movs	r3, #7
 800140a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140c:	f107 031c 	add.w	r3, r7, #28
 8001410:	4619      	mov	r1, r3
 8001412:	481e      	ldr	r0, [pc, #120]	; (800148c <HAL_UART_MspInit+0x15c>)
 8001414:	f002 fb70 	bl	8003af8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <HAL_UART_MspInit+0x160>)
 800141a:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_UART_MspInit+0x164>)
 800141c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800141e:	4b1c      	ldr	r3, [pc, #112]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001420:	222d      	movs	r2, #45	; 0x2d
 8001422:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001424:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800142a:	4b19      	ldr	r3, [pc, #100]	; (8001490 <HAL_UART_MspInit+0x160>)
 800142c:	2200      	movs	r2, #0
 800142e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001430:	4b17      	ldr	r3, [pc, #92]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001432:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001436:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001438:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UART_MspInit+0x160>)
 800143a:	2200      	movs	r2, #0
 800143c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800143e:	4b14      	ldr	r3, [pc, #80]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001440:	2200      	movs	r2, #0
 8001442:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001446:	f44f 7280 	mov.w	r2, #256	; 0x100
 800144a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800144c:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_UART_MspInit+0x160>)
 800144e:	2200      	movs	r2, #0
 8001450:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001452:	4b0f      	ldr	r3, [pc, #60]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001454:	2200      	movs	r2, #0
 8001456:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001458:	480d      	ldr	r0, [pc, #52]	; (8001490 <HAL_UART_MspInit+0x160>)
 800145a:	f000 fb23 	bl	8001aa4 <HAL_DMA_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001464:	f7ff fdf4 	bl	8001050 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a09      	ldr	r2, [pc, #36]	; (8001490 <HAL_UART_MspInit+0x160>)
 800146c:	679a      	str	r2, [r3, #120]	; 0x78
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <HAL_UART_MspInit+0x160>)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001474:	bf00      	nop
 8001476:	3730      	adds	r7, #48	; 0x30
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	40007c00 	.word	0x40007c00
 8001480:	58024400 	.word	0x58024400
 8001484:	58021000 	.word	0x58021000
 8001488:	40004800 	.word	0x40004800
 800148c:	58020c00 	.word	0x58020c00
 8001490:	24040240 	.word	0x24040240
 8001494:	40020010 	.word	0x40020010

08001498 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800149c:	f004 ff06 	bl	80062ac <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a0:	e7fe      	b.n	80014a0 <NMI_Handler+0x8>

080014a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a2:	b480      	push	{r7}
 80014a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014a6:	e7fe      	b.n	80014a6 <HardFault_Handler+0x4>

080014a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014ac:	e7fe      	b.n	80014ac <MemManage_Handler+0x4>

080014ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014ae:	b480      	push	{r7}
 80014b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b2:	e7fe      	b.n	80014b2 <BusFault_Handler+0x4>

080014b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014b8:	e7fe      	b.n	80014b8 <UsageFault_Handler+0x4>

080014ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014ba:	b480      	push	{r7}
 80014bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014be:	bf00      	nop
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr

080014c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr

080014d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014d6:	b480      	push	{r7}
 80014d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014e8:	f000 f97e 	bl	80017e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014ec:	bf00      	nop
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80014f4:	4802      	ldr	r0, [pc, #8]	; (8001500 <DMA1_Stream0_IRQHandler+0x10>)
 80014f6:	f000 fe31 	bl	800215c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	24040240 	.word	0x24040240

08001504 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8001508:	4802      	ldr	r0, [pc, #8]	; (8001514 <SDMMC1_IRQHandler+0x10>)
 800150a:	f007 fb3b 	bl	8008b84 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	24040574 	.word	0x24040574

08001518 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800151c:	4802      	ldr	r0, [pc, #8]	; (8001528 <OTG_FS_IRQHandler+0x10>)
 800151e:	f002 fe26 	bl	800416e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	24041648 	.word	0x24041648

0800152c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <_sbrk+0x5c>)
 8001536:	4b15      	ldr	r3, [pc, #84]	; (800158c <_sbrk+0x60>)
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001540:	4b13      	ldr	r3, [pc, #76]	; (8001590 <_sbrk+0x64>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d102      	bne.n	800154e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001548:	4b11      	ldr	r3, [pc, #68]	; (8001590 <_sbrk+0x64>)
 800154a:	4a12      	ldr	r2, [pc, #72]	; (8001594 <_sbrk+0x68>)
 800154c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800154e:	4b10      	ldr	r3, [pc, #64]	; (8001590 <_sbrk+0x64>)
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4413      	add	r3, r2
 8001556:	693a      	ldr	r2, [r7, #16]
 8001558:	429a      	cmp	r2, r3
 800155a:	d207      	bcs.n	800156c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800155c:	f012 f892 	bl	8013684 <__errno>
 8001560:	4602      	mov	r2, r0
 8001562:	230c      	movs	r3, #12
 8001564:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001566:	f04f 33ff 	mov.w	r3, #4294967295
 800156a:	e009      	b.n	8001580 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800156c:	4b08      	ldr	r3, [pc, #32]	; (8001590 <_sbrk+0x64>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <_sbrk+0x64>)
 8001574:	681a      	ldr	r2, [r3, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4413      	add	r3, r2
 800157a:	4a05      	ldr	r2, [pc, #20]	; (8001590 <_sbrk+0x64>)
 800157c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800157e:	68fb      	ldr	r3, [r7, #12]
}
 8001580:	4618      	mov	r0, r3
 8001582:	3718      	adds	r7, #24
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	24080000 	.word	0x24080000
 800158c:	00000400 	.word	0x00000400
 8001590:	240401f4 	.word	0x240401f4
 8001594:	24041a58 	.word	0x24041a58

08001598 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800159c:	4b39      	ldr	r3, [pc, #228]	; (8001684 <SystemInit+0xec>)
 800159e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015a2:	4a38      	ldr	r2, [pc, #224]	; (8001684 <SystemInit+0xec>)
 80015a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015ac:	4b36      	ldr	r3, [pc, #216]	; (8001688 <SystemInit+0xf0>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 030f 	and.w	r3, r3, #15
 80015b4:	2b06      	cmp	r3, #6
 80015b6:	d807      	bhi.n	80015c8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015b8:	4b33      	ldr	r3, [pc, #204]	; (8001688 <SystemInit+0xf0>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f023 030f 	bic.w	r3, r3, #15
 80015c0:	4a31      	ldr	r2, [pc, #196]	; (8001688 <SystemInit+0xf0>)
 80015c2:	f043 0307 	orr.w	r3, r3, #7
 80015c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80015c8:	4b30      	ldr	r3, [pc, #192]	; (800168c <SystemInit+0xf4>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a2f      	ldr	r2, [pc, #188]	; (800168c <SystemInit+0xf4>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80015d4:	4b2d      	ldr	r3, [pc, #180]	; (800168c <SystemInit+0xf4>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80015da:	4b2c      	ldr	r3, [pc, #176]	; (800168c <SystemInit+0xf4>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	492b      	ldr	r1, [pc, #172]	; (800168c <SystemInit+0xf4>)
 80015e0:	4b2b      	ldr	r3, [pc, #172]	; (8001690 <SystemInit+0xf8>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80015e6:	4b28      	ldr	r3, [pc, #160]	; (8001688 <SystemInit+0xf0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 030f 	and.w	r3, r3, #15
 80015ee:	2b07      	cmp	r3, #7
 80015f0:	d907      	bls.n	8001602 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80015f2:	4b25      	ldr	r3, [pc, #148]	; (8001688 <SystemInit+0xf0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 030f 	bic.w	r3, r3, #15
 80015fa:	4a23      	ldr	r2, [pc, #140]	; (8001688 <SystemInit+0xf0>)
 80015fc:	f043 0307 	orr.w	r3, r3, #7
 8001600:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001602:	4b22      	ldr	r3, [pc, #136]	; (800168c <SystemInit+0xf4>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001608:	4b20      	ldr	r3, [pc, #128]	; (800168c <SystemInit+0xf4>)
 800160a:	2200      	movs	r2, #0
 800160c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800160e:	4b1f      	ldr	r3, [pc, #124]	; (800168c <SystemInit+0xf4>)
 8001610:	2200      	movs	r2, #0
 8001612:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001614:	4b1d      	ldr	r3, [pc, #116]	; (800168c <SystemInit+0xf4>)
 8001616:	4a1f      	ldr	r2, [pc, #124]	; (8001694 <SystemInit+0xfc>)
 8001618:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800161a:	4b1c      	ldr	r3, [pc, #112]	; (800168c <SystemInit+0xf4>)
 800161c:	4a1e      	ldr	r2, [pc, #120]	; (8001698 <SystemInit+0x100>)
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001620:	4b1a      	ldr	r3, [pc, #104]	; (800168c <SystemInit+0xf4>)
 8001622:	4a1e      	ldr	r2, [pc, #120]	; (800169c <SystemInit+0x104>)
 8001624:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001626:	4b19      	ldr	r3, [pc, #100]	; (800168c <SystemInit+0xf4>)
 8001628:	2200      	movs	r2, #0
 800162a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800162c:	4b17      	ldr	r3, [pc, #92]	; (800168c <SystemInit+0xf4>)
 800162e:	4a1b      	ldr	r2, [pc, #108]	; (800169c <SystemInit+0x104>)
 8001630:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001632:	4b16      	ldr	r3, [pc, #88]	; (800168c <SystemInit+0xf4>)
 8001634:	2200      	movs	r2, #0
 8001636:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001638:	4b14      	ldr	r3, [pc, #80]	; (800168c <SystemInit+0xf4>)
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <SystemInit+0x104>)
 800163c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800163e:	4b13      	ldr	r3, [pc, #76]	; (800168c <SystemInit+0xf4>)
 8001640:	2200      	movs	r2, #0
 8001642:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <SystemInit+0xf4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a10      	ldr	r2, [pc, #64]	; (800168c <SystemInit+0xf4>)
 800164a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800164e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001650:	4b0e      	ldr	r3, [pc, #56]	; (800168c <SystemInit+0xf4>)
 8001652:	2200      	movs	r2, #0
 8001654:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <SystemInit+0x108>)
 8001658:	681a      	ldr	r2, [r3, #0]
 800165a:	4b12      	ldr	r3, [pc, #72]	; (80016a4 <SystemInit+0x10c>)
 800165c:	4013      	ands	r3, r2
 800165e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001662:	d202      	bcs.n	800166a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001664:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <SystemInit+0x110>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <SystemInit+0x114>)
 800166c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001670:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001672:	4b04      	ldr	r3, [pc, #16]	; (8001684 <SystemInit+0xec>)
 8001674:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001678:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	e000ed00 	.word	0xe000ed00
 8001688:	52002000 	.word	0x52002000
 800168c:	58024400 	.word	0x58024400
 8001690:	eaf6ed7f 	.word	0xeaf6ed7f
 8001694:	02020200 	.word	0x02020200
 8001698:	01ff0000 	.word	0x01ff0000
 800169c:	01010280 	.word	0x01010280
 80016a0:	5c001000 	.word	0x5c001000
 80016a4:	ffff0000 	.word	0xffff0000
 80016a8:	51008108 	.word	0x51008108
 80016ac:	52004000 	.word	0x52004000

080016b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e8 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80016b4:	f7ff ff70 	bl	8001598 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80016b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80016ba:	e003      	b.n	80016c4 <LoopCopyDataInit>

080016bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80016bc:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80016be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80016c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80016c2:	3104      	adds	r1, #4

080016c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80016c4:	480a      	ldr	r0, [pc, #40]	; (80016f0 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80016c6:	4b0b      	ldr	r3, [pc, #44]	; (80016f4 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80016c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80016ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80016cc:	d3f6      	bcc.n	80016bc <CopyDataInit>
  ldr  r2, =_sbss
 80016ce:	4a0a      	ldr	r2, [pc, #40]	; (80016f8 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80016d0:	e002      	b.n	80016d8 <LoopFillZerobss>

080016d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80016d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80016d4:	f842 3b04 	str.w	r3, [r2], #4

080016d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80016da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80016dc:	d3f9      	bcc.n	80016d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016de:	f011 ffd7 	bl	8013690 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016e2:	f7fe ffd5 	bl	8000690 <main>
  bx  lr    
 80016e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e8:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80016ec:	080141c4 	.word	0x080141c4
  ldr  r0, =_sdata
 80016f0:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80016f4:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 80016f8:	240001d0 	.word	0x240001d0
  ldr  r3, = _ebss
 80016fc:	24041a54 	.word	0x24041a54

08001700 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001700:	e7fe      	b.n	8001700 <ADC3_IRQHandler>
	...

08001704 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800170a:	2003      	movs	r0, #3
 800170c:	f000 f98a 	bl	8001a24 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001710:	f004 fbfe 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 8001714:	4601      	mov	r1, r0
 8001716:	4b15      	ldr	r3, [pc, #84]	; (800176c <HAL_Init+0x68>)
 8001718:	699b      	ldr	r3, [r3, #24]
 800171a:	0a1b      	lsrs	r3, r3, #8
 800171c:	f003 030f 	and.w	r3, r3, #15
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_Init+0x6c>)
 8001722:	5cd3      	ldrb	r3, [r2, r3]
 8001724:	f003 031f 	and.w	r3, r3, #31
 8001728:	fa21 f303 	lsr.w	r3, r1, r3
 800172c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800172e:	4b0f      	ldr	r3, [pc, #60]	; (800176c <HAL_Init+0x68>)
 8001730:	699b      	ldr	r3, [r3, #24]
 8001732:	f003 030f 	and.w	r3, r3, #15
 8001736:	4a0e      	ldr	r2, [pc, #56]	; (8001770 <HAL_Init+0x6c>)
 8001738:	5cd3      	ldrb	r3, [r2, r3]
 800173a:	f003 031f 	and.w	r3, r3, #31
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	fa22 f303 	lsr.w	r3, r2, r3
 8001744:	4a0b      	ldr	r2, [pc, #44]	; (8001774 <HAL_Init+0x70>)
 8001746:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001748:	4a0b      	ldr	r2, [pc, #44]	; (8001778 <HAL_Init+0x74>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800174e:	2000      	movs	r0, #0
 8001750:	f000 f814 	bl	800177c <HAL_InitTick>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e002      	b.n	8001764 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800175e:	f7ff fc7b 	bl	8001058 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001762:	2300      	movs	r3, #0
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	58024400 	.word	0x58024400
 8001770:	08014098 	.word	0x08014098
 8001774:	24000004 	.word	0x24000004
 8001778:	24000000 	.word	0x24000000

0800177c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001784:	4b15      	ldr	r3, [pc, #84]	; (80017dc <HAL_InitTick+0x60>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800178c:	2301      	movs	r3, #1
 800178e:	e021      	b.n	80017d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001790:	4b13      	ldr	r3, [pc, #76]	; (80017e0 <HAL_InitTick+0x64>)
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	4b11      	ldr	r3, [pc, #68]	; (80017dc <HAL_InitTick+0x60>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	4619      	mov	r1, r3
 800179a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800179e:	fbb3 f3f1 	udiv	r3, r3, r1
 80017a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017a6:	4618      	mov	r0, r3
 80017a8:	f000 f96f 	bl	8001a8a <HAL_SYSTICK_Config>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	e00e      	b.n	80017d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b0f      	cmp	r3, #15
 80017ba:	d80a      	bhi.n	80017d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017bc:	2200      	movs	r2, #0
 80017be:	6879      	ldr	r1, [r7, #4]
 80017c0:	f04f 30ff 	mov.w	r0, #4294967295
 80017c4:	f000 f939 	bl	8001a3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017c8:	4a06      	ldr	r2, [pc, #24]	; (80017e4 <HAL_InitTick+0x68>)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ce:	2300      	movs	r3, #0
 80017d0:	e000      	b.n	80017d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	3708      	adds	r7, #8
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	2400000c 	.word	0x2400000c
 80017e0:	24000000 	.word	0x24000000
 80017e4:	24000008 	.word	0x24000008

080017e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80017ec:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_IncTick+0x20>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	461a      	mov	r2, r3
 80017f2:	4b06      	ldr	r3, [pc, #24]	; (800180c <HAL_IncTick+0x24>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4413      	add	r3, r2
 80017f8:	4a04      	ldr	r2, [pc, #16]	; (800180c <HAL_IncTick+0x24>)
 80017fa:	6013      	str	r3, [r2, #0]
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	2400000c 	.word	0x2400000c
 800180c:	24040d0c 	.word	0x24040d0c

08001810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return uwTick;
 8001814:	4b03      	ldr	r3, [pc, #12]	; (8001824 <HAL_GetTick+0x14>)
 8001816:	681b      	ldr	r3, [r3, #0]
}
 8001818:	4618      	mov	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	24040d0c 	.word	0x24040d0c

08001828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b084      	sub	sp, #16
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001830:	f7ff ffee 	bl	8001810 <HAL_GetTick>
 8001834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001840:	d005      	beq.n	800184e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001842:	4b09      	ldr	r3, [pc, #36]	; (8001868 <HAL_Delay+0x40>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	461a      	mov	r2, r3
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	4413      	add	r3, r2
 800184c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800184e:	bf00      	nop
 8001850:	f7ff ffde 	bl	8001810 <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	68fa      	ldr	r2, [r7, #12]
 800185c:	429a      	cmp	r2, r3
 800185e:	d8f7      	bhi.n	8001850 <HAL_Delay+0x28>
  {
  }
}
 8001860:	bf00      	nop
 8001862:	3710      	adds	r7, #16
 8001864:	46bd      	mov	sp, r7
 8001866:	bd80      	pop	{r7, pc}
 8001868:	2400000c 	.word	0x2400000c

0800186c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001870:	4b03      	ldr	r3, [pc, #12]	; (8001880 <HAL_GetREVID+0x14>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	0c1b      	lsrs	r3, r3, #16
}
 8001876:	4618      	mov	r0, r3
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	5c001000 	.word	0x5c001000

08001884 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0307 	and.w	r3, r3, #7
 8001892:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018a0:	4013      	ands	r3, r2
 80018a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018ac:	4b06      	ldr	r3, [pc, #24]	; (80018c8 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	4313      	orrs	r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x40>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00
 80018c8:	05fa0000 	.word	0x05fa0000

080018cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018d0:	4b04      	ldr	r3, [pc, #16]	; (80018e4 <__NVIC_GetPriorityGrouping+0x18>)
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	0a1b      	lsrs	r3, r3, #8
 80018d6:	f003 0307 	and.w	r3, r3, #7
}
 80018da:	4618      	mov	r0, r3
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	e000ed00 	.word	0xe000ed00

080018e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	4603      	mov	r3, r0
 80018f0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80018f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	db0b      	blt.n	8001912 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018fa:	88fb      	ldrh	r3, [r7, #6]
 80018fc:	f003 021f 	and.w	r2, r3, #31
 8001900:	4907      	ldr	r1, [pc, #28]	; (8001920 <__NVIC_EnableIRQ+0x38>)
 8001902:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001906:	095b      	lsrs	r3, r3, #5
 8001908:	2001      	movs	r0, #1
 800190a:	fa00 f202 	lsl.w	r2, r0, r2
 800190e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001912:	bf00      	nop
 8001914:	370c      	adds	r7, #12
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	e000e100 	.word	0xe000e100

08001924 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001924:	b480      	push	{r7}
 8001926:	b083      	sub	sp, #12
 8001928:	af00      	add	r7, sp, #0
 800192a:	4603      	mov	r3, r0
 800192c:	6039      	str	r1, [r7, #0]
 800192e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001930:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001934:	2b00      	cmp	r3, #0
 8001936:	db0a      	blt.n	800194e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	b2da      	uxtb	r2, r3
 800193c:	490c      	ldr	r1, [pc, #48]	; (8001970 <__NVIC_SetPriority+0x4c>)
 800193e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	b2d2      	uxtb	r2, r2
 8001946:	440b      	add	r3, r1
 8001948:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800194c:	e00a      	b.n	8001964 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	b2da      	uxtb	r2, r3
 8001952:	4908      	ldr	r1, [pc, #32]	; (8001974 <__NVIC_SetPriority+0x50>)
 8001954:	88fb      	ldrh	r3, [r7, #6]
 8001956:	f003 030f 	and.w	r3, r3, #15
 800195a:	3b04      	subs	r3, #4
 800195c:	0112      	lsls	r2, r2, #4
 800195e:	b2d2      	uxtb	r2, r2
 8001960:	440b      	add	r3, r1
 8001962:	761a      	strb	r2, [r3, #24]
}
 8001964:	bf00      	nop
 8001966:	370c      	adds	r7, #12
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr
 8001970:	e000e100 	.word	0xe000e100
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001978:	b480      	push	{r7}
 800197a:	b089      	sub	sp, #36	; 0x24
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f1c3 0307 	rsb	r3, r3, #7
 8001992:	2b04      	cmp	r3, #4
 8001994:	bf28      	it	cs
 8001996:	2304      	movcs	r3, #4
 8001998:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	3304      	adds	r3, #4
 800199e:	2b06      	cmp	r3, #6
 80019a0:	d902      	bls.n	80019a8 <NVIC_EncodePriority+0x30>
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3b03      	subs	r3, #3
 80019a6:	e000      	b.n	80019aa <NVIC_EncodePriority+0x32>
 80019a8:	2300      	movs	r3, #0
 80019aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	f04f 32ff 	mov.w	r2, #4294967295
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	fa02 f303 	lsl.w	r3, r2, r3
 80019b6:	43da      	mvns	r2, r3
 80019b8:	68bb      	ldr	r3, [r7, #8]
 80019ba:	401a      	ands	r2, r3
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019c0:	f04f 31ff 	mov.w	r1, #4294967295
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	fa01 f303 	lsl.w	r3, r1, r3
 80019ca:	43d9      	mvns	r1, r3
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019d0:	4313      	orrs	r3, r2
         );
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3724      	adds	r7, #36	; 0x24
 80019d6:	46bd      	mov	sp, r7
 80019d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019dc:	4770      	bx	lr
	...

080019e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3b01      	subs	r3, #1
 80019ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019f0:	d301      	bcc.n	80019f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019f2:	2301      	movs	r3, #1
 80019f4:	e00f      	b.n	8001a16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f6:	4a0a      	ldr	r2, [pc, #40]	; (8001a20 <SysTick_Config+0x40>)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fe:	210f      	movs	r1, #15
 8001a00:	f04f 30ff 	mov.w	r0, #4294967295
 8001a04:	f7ff ff8e 	bl	8001924 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <SysTick_Config+0x40>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0e:	4b04      	ldr	r3, [pc, #16]	; (8001a20 <SysTick_Config+0x40>)
 8001a10:	2207      	movs	r2, #7
 8001a12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	e000e010 	.word	0xe000e010

08001a24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b082      	sub	sp, #8
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f7ff ff29 	bl	8001884 <__NVIC_SetPriorityGrouping>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b086      	sub	sp, #24
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	4603      	mov	r3, r0
 8001a42:	60b9      	str	r1, [r7, #8]
 8001a44:	607a      	str	r2, [r7, #4]
 8001a46:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff40 	bl	80018cc <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff90 	bl	8001978 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5f 	bl	8001924 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff33 	bl	80018e8 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa4 	bl	80019e0 <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b086      	sub	sp, #24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001aac:	f7ff feb0 	bl	8001810 <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d101      	bne.n	8001abc <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e316      	b.n	80020ea <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a66      	ldr	r2, [pc, #408]	; (8001c5c <HAL_DMA_Init+0x1b8>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d04a      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a65      	ldr	r2, [pc, #404]	; (8001c60 <HAL_DMA_Init+0x1bc>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d045      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a63      	ldr	r2, [pc, #396]	; (8001c64 <HAL_DMA_Init+0x1c0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d040      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a62      	ldr	r2, [pc, #392]	; (8001c68 <HAL_DMA_Init+0x1c4>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d03b      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a60      	ldr	r2, [pc, #384]	; (8001c6c <HAL_DMA_Init+0x1c8>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d036      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a5f      	ldr	r2, [pc, #380]	; (8001c70 <HAL_DMA_Init+0x1cc>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d031      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_DMA_Init+0x1d0>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d02c      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a5c      	ldr	r2, [pc, #368]	; (8001c78 <HAL_DMA_Init+0x1d4>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d027      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a5a      	ldr	r2, [pc, #360]	; (8001c7c <HAL_DMA_Init+0x1d8>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d022      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a59      	ldr	r2, [pc, #356]	; (8001c80 <HAL_DMA_Init+0x1dc>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d01d      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a57      	ldr	r2, [pc, #348]	; (8001c84 <HAL_DMA_Init+0x1e0>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d018      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a56      	ldr	r2, [pc, #344]	; (8001c88 <HAL_DMA_Init+0x1e4>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d013      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a54      	ldr	r2, [pc, #336]	; (8001c8c <HAL_DMA_Init+0x1e8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a53      	ldr	r2, [pc, #332]	; (8001c90 <HAL_DMA_Init+0x1ec>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a51      	ldr	r2, [pc, #324]	; (8001c94 <HAL_DMA_Init+0x1f0>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_DMA_Init+0xb8>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a50      	ldr	r2, [pc, #320]	; (8001c98 <HAL_DMA_Init+0x1f4>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d101      	bne.n	8001b60 <HAL_DMA_Init+0xbc>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <HAL_DMA_Init+0xbe>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	f000 813b 	beq.w	8001dde <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2202      	movs	r2, #2
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a37      	ldr	r2, [pc, #220]	; (8001c5c <HAL_DMA_Init+0x1b8>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d04a      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a36      	ldr	r2, [pc, #216]	; (8001c60 <HAL_DMA_Init+0x1bc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d045      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_DMA_Init+0x1c0>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d040      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a33      	ldr	r2, [pc, #204]	; (8001c68 <HAL_DMA_Init+0x1c4>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d03b      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a31      	ldr	r2, [pc, #196]	; (8001c6c <HAL_DMA_Init+0x1c8>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d036      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a30      	ldr	r2, [pc, #192]	; (8001c70 <HAL_DMA_Init+0x1cc>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d031      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a2e      	ldr	r2, [pc, #184]	; (8001c74 <HAL_DMA_Init+0x1d0>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d02c      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	4a2d      	ldr	r2, [pc, #180]	; (8001c78 <HAL_DMA_Init+0x1d4>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d027      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a2b      	ldr	r2, [pc, #172]	; (8001c7c <HAL_DMA_Init+0x1d8>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	d022      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a2a      	ldr	r2, [pc, #168]	; (8001c80 <HAL_DMA_Init+0x1dc>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d01d      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a28      	ldr	r2, [pc, #160]	; (8001c84 <HAL_DMA_Init+0x1e0>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d018      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_DMA_Init+0x1e4>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d013      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a25      	ldr	r2, [pc, #148]	; (8001c8c <HAL_DMA_Init+0x1e8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00e      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a24      	ldr	r2, [pc, #144]	; (8001c90 <HAL_DMA_Init+0x1ec>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d009      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a22      	ldr	r2, [pc, #136]	; (8001c94 <HAL_DMA_Init+0x1f0>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d004      	beq.n	8001c18 <HAL_DMA_Init+0x174>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	4a21      	ldr	r2, [pc, #132]	; (8001c98 <HAL_DMA_Init+0x1f4>)
 8001c14:	4293      	cmp	r3, r2
 8001c16:	d108      	bne.n	8001c2a <HAL_DMA_Init+0x186>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f022 0201 	bic.w	r2, r2, #1
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_DMA_Init+0x196>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0201 	bic.w	r2, r2, #1
 8001c38:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c3a:	e02f      	b.n	8001c9c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c3c:	f7ff fde8 	bl	8001810 <HAL_GetTick>
 8001c40:	4602      	mov	r2, r0
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	1ad3      	subs	r3, r2, r3
 8001c46:	2b05      	cmp	r3, #5
 8001c48:	d928      	bls.n	8001c9c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e246      	b.n	80020ea <HAL_DMA_Init+0x646>
 8001c5c:	40020010 	.word	0x40020010
 8001c60:	40020028 	.word	0x40020028
 8001c64:	40020040 	.word	0x40020040
 8001c68:	40020058 	.word	0x40020058
 8001c6c:	40020070 	.word	0x40020070
 8001c70:	40020088 	.word	0x40020088
 8001c74:	400200a0 	.word	0x400200a0
 8001c78:	400200b8 	.word	0x400200b8
 8001c7c:	40020410 	.word	0x40020410
 8001c80:	40020428 	.word	0x40020428
 8001c84:	40020440 	.word	0x40020440
 8001c88:	40020458 	.word	0x40020458
 8001c8c:	40020470 	.word	0x40020470
 8001c90:	40020488 	.word	0x40020488
 8001c94:	400204a0 	.word	0x400204a0
 8001c98:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d1c8      	bne.n	8001c3c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cb2:	697a      	ldr	r2, [r7, #20]
 8001cb4:	4b83      	ldr	r3, [pc, #524]	; (8001ec4 <HAL_DMA_Init+0x420>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001cc2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	691b      	ldr	r3, [r3, #16]
 8001cc8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cce:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cda:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ce2:	697a      	ldr	r2, [r7, #20]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d107      	bne.n	8001d00 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001d00:	4b71      	ldr	r3, [pc, #452]	; (8001ec8 <HAL_DMA_Init+0x424>)
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	4b71      	ldr	r3, [pc, #452]	; (8001ecc <HAL_DMA_Init+0x428>)
 8001d06:	4013      	ands	r3, r2
 8001d08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d0c:	d328      	bcc.n	8001d60 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	2b28      	cmp	r3, #40	; 0x28
 8001d14:	d903      	bls.n	8001d1e <HAL_DMA_Init+0x27a>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d1c:	d917      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2b3e      	cmp	r3, #62	; 0x3e
 8001d24:	d903      	bls.n	8001d2e <HAL_DMA_Init+0x28a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b42      	cmp	r3, #66	; 0x42
 8001d2c:	d90f      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b46      	cmp	r3, #70	; 0x46
 8001d34:	d903      	bls.n	8001d3e <HAL_DMA_Init+0x29a>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	2b48      	cmp	r3, #72	; 0x48
 8001d3c:	d907      	bls.n	8001d4e <HAL_DMA_Init+0x2aa>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	2b4e      	cmp	r3, #78	; 0x4e
 8001d44:	d905      	bls.n	8001d52 <HAL_DMA_Init+0x2ae>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	2b52      	cmp	r3, #82	; 0x52
 8001d4c:	d801      	bhi.n	8001d52 <HAL_DMA_Init+0x2ae>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_DMA_Init+0x2b0>
 8001d52:	2300      	movs	r3, #0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d003      	beq.n	8001d60 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d5e:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d117      	bne.n	8001dba <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f001 f9b9 	bl	8003114 <DMA_CheckFifoParam>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e197      	b.n	80020ea <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f001 f8f4 	bl	8002fb0 <DMA_CalcBaseAndBitshift>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	f003 031f 	and.w	r3, r3, #31
 8001dd4:	223f      	movs	r2, #63	; 0x3f
 8001dd6:	409a      	lsls	r2, r3
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	609a      	str	r2, [r3, #8]
 8001ddc:	e0cd      	b.n	8001f7a <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a3b      	ldr	r2, [pc, #236]	; (8001ed0 <HAL_DMA_Init+0x42c>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d022      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a39      	ldr	r2, [pc, #228]	; (8001ed4 <HAL_DMA_Init+0x430>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01d      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a38      	ldr	r2, [pc, #224]	; (8001ed8 <HAL_DMA_Init+0x434>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d018      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a36      	ldr	r2, [pc, #216]	; (8001edc <HAL_DMA_Init+0x438>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a35      	ldr	r2, [pc, #212]	; (8001ee0 <HAL_DMA_Init+0x43c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00e      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a33      	ldr	r2, [pc, #204]	; (8001ee4 <HAL_DMA_Init+0x440>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d009      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a32      	ldr	r2, [pc, #200]	; (8001ee8 <HAL_DMA_Init+0x444>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d004      	beq.n	8001e2e <HAL_DMA_Init+0x38a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a30      	ldr	r2, [pc, #192]	; (8001eec <HAL_DMA_Init+0x448>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d101      	bne.n	8001e32 <HAL_DMA_Init+0x38e>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <HAL_DMA_Init+0x390>
 8001e32:	2300      	movs	r3, #0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 8097 	beq.w	8001f68 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a24      	ldr	r2, [pc, #144]	; (8001ed0 <HAL_DMA_Init+0x42c>)
 8001e40:	4293      	cmp	r3, r2
 8001e42:	d021      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a22      	ldr	r2, [pc, #136]	; (8001ed4 <HAL_DMA_Init+0x430>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d01c      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	4a21      	ldr	r2, [pc, #132]	; (8001ed8 <HAL_DMA_Init+0x434>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d017      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_DMA_Init+0x438>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d012      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_DMA_Init+0x43c>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d00d      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_DMA_Init+0x440>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d008      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_DMA_Init+0x444>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d003      	beq.n	8001e88 <HAL_DMA_Init+0x3e4>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_DMA_Init+0x448>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2202      	movs	r2, #2
 8001e96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4b12      	ldr	r3, [pc, #72]	; (8001ef0 <HAL_DMA_Init+0x44c>)
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	2b40      	cmp	r3, #64	; 0x40
 8001eb0:	d020      	beq.n	8001ef4 <HAL_DMA_Init+0x450>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	2b80      	cmp	r3, #128	; 0x80
 8001eb8:	d102      	bne.n	8001ec0 <HAL_DMA_Init+0x41c>
 8001eba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001ebe:	e01a      	b.n	8001ef6 <HAL_DMA_Init+0x452>
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	e018      	b.n	8001ef6 <HAL_DMA_Init+0x452>
 8001ec4:	fe10803f 	.word	0xfe10803f
 8001ec8:	5c001000 	.word	0x5c001000
 8001ecc:	ffff0000 	.word	0xffff0000
 8001ed0:	58025408 	.word	0x58025408
 8001ed4:	5802541c 	.word	0x5802541c
 8001ed8:	58025430 	.word	0x58025430
 8001edc:	58025444 	.word	0x58025444
 8001ee0:	58025458 	.word	0x58025458
 8001ee4:	5802546c 	.word	0x5802546c
 8001ee8:	58025480 	.word	0x58025480
 8001eec:	58025494 	.word	0x58025494
 8001ef0:	fffe000f 	.word	0xfffe000f
 8001ef4:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68d2      	ldr	r2, [r2, #12]
 8001efa:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001efc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001f04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	695b      	ldr	r3, [r3, #20]
 8001f0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001f0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001f14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	69db      	ldr	r3, [r3, #28]
 8001f1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001f1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6a1b      	ldr	r3, [r3, #32]
 8001f22:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001f24:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	4b6e      	ldr	r3, [pc, #440]	; (80020f4 <HAL_DMA_Init+0x650>)
 8001f3c:	4413      	add	r3, r2
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_DMA_Init+0x654>)
 8001f40:	fba2 2303 	umull	r2, r3, r2, r3
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	009a      	lsls	r2, r3, #2
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f4c:	6878      	ldr	r0, [r7, #4]
 8001f4e:	f001 f82f 	bl	8002fb0 <DMA_CalcBaseAndBitshift>
 8001f52:	4603      	mov	r3, r0
 8001f54:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f003 031f 	and.w	r3, r3, #31
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	e008      	b.n	8001f7a <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2240      	movs	r2, #64	; 0x40
 8001f6c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	2203      	movs	r2, #3
 8001f72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e0b7      	b.n	80020ea <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a5f      	ldr	r2, [pc, #380]	; (80020fc <HAL_DMA_Init+0x658>)
 8001f80:	4293      	cmp	r3, r2
 8001f82:	d072      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a5d      	ldr	r2, [pc, #372]	; (8002100 <HAL_DMA_Init+0x65c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d06d      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a5c      	ldr	r2, [pc, #368]	; (8002104 <HAL_DMA_Init+0x660>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d068      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a5a      	ldr	r2, [pc, #360]	; (8002108 <HAL_DMA_Init+0x664>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d063      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4a59      	ldr	r2, [pc, #356]	; (800210c <HAL_DMA_Init+0x668>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d05e      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4a57      	ldr	r2, [pc, #348]	; (8002110 <HAL_DMA_Init+0x66c>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d059      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a56      	ldr	r2, [pc, #344]	; (8002114 <HAL_DMA_Init+0x670>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d054      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a54      	ldr	r2, [pc, #336]	; (8002118 <HAL_DMA_Init+0x674>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d04f      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	4a53      	ldr	r2, [pc, #332]	; (800211c <HAL_DMA_Init+0x678>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d04a      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a51      	ldr	r2, [pc, #324]	; (8002120 <HAL_DMA_Init+0x67c>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d045      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a50      	ldr	r2, [pc, #320]	; (8002124 <HAL_DMA_Init+0x680>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d040      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a4e      	ldr	r2, [pc, #312]	; (8002128 <HAL_DMA_Init+0x684>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d03b      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a4d      	ldr	r2, [pc, #308]	; (800212c <HAL_DMA_Init+0x688>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d036      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a4b      	ldr	r2, [pc, #300]	; (8002130 <HAL_DMA_Init+0x68c>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d031      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_DMA_Init+0x690>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d02c      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a48      	ldr	r2, [pc, #288]	; (8002138 <HAL_DMA_Init+0x694>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d027      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a47      	ldr	r2, [pc, #284]	; (800213c <HAL_DMA_Init+0x698>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a45      	ldr	r2, [pc, #276]	; (8002140 <HAL_DMA_Init+0x69c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d01d      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4a44      	ldr	r2, [pc, #272]	; (8002144 <HAL_DMA_Init+0x6a0>)
 8002034:	4293      	cmp	r3, r2
 8002036:	d018      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a42      	ldr	r2, [pc, #264]	; (8002148 <HAL_DMA_Init+0x6a4>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d013      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a41      	ldr	r2, [pc, #260]	; (800214c <HAL_DMA_Init+0x6a8>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d00e      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a3f      	ldr	r2, [pc, #252]	; (8002150 <HAL_DMA_Init+0x6ac>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d009      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a3e      	ldr	r2, [pc, #248]	; (8002154 <HAL_DMA_Init+0x6b0>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d004      	beq.n	800206a <HAL_DMA_Init+0x5c6>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a3c      	ldr	r2, [pc, #240]	; (8002158 <HAL_DMA_Init+0x6b4>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d101      	bne.n	800206e <HAL_DMA_Init+0x5ca>
 800206a:	2301      	movs	r3, #1
 800206c:	e000      	b.n	8002070 <HAL_DMA_Init+0x5cc>
 800206e:	2300      	movs	r3, #0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f001 f8c9 	bl	800320c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	689b      	ldr	r3, [r3, #8]
 800207e:	2b80      	cmp	r3, #128	; 0x80
 8002080:	d102      	bne.n	8002088 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	685a      	ldr	r2, [r3, #4]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002090:	b2d2      	uxtb	r2, r2
 8002092:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800209c:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d010      	beq.n	80020c8 <HAL_DMA_Init+0x624>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b08      	cmp	r3, #8
 80020ac:	d80c      	bhi.n	80020c8 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	f001 f946 	bl	8003340 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	e008      	b.n	80020da <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2200      	movs	r2, #0
 80020cc:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2200      	movs	r2, #0
 80020de:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3718      	adds	r7, #24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	a7fdabf8 	.word	0xa7fdabf8
 80020f8:	cccccccd 	.word	0xcccccccd
 80020fc:	40020010 	.word	0x40020010
 8002100:	40020028 	.word	0x40020028
 8002104:	40020040 	.word	0x40020040
 8002108:	40020058 	.word	0x40020058
 800210c:	40020070 	.word	0x40020070
 8002110:	40020088 	.word	0x40020088
 8002114:	400200a0 	.word	0x400200a0
 8002118:	400200b8 	.word	0x400200b8
 800211c:	40020410 	.word	0x40020410
 8002120:	40020428 	.word	0x40020428
 8002124:	40020440 	.word	0x40020440
 8002128:	40020458 	.word	0x40020458
 800212c:	40020470 	.word	0x40020470
 8002130:	40020488 	.word	0x40020488
 8002134:	400204a0 	.word	0x400204a0
 8002138:	400204b8 	.word	0x400204b8
 800213c:	58025408 	.word	0x58025408
 8002140:	5802541c 	.word	0x5802541c
 8002144:	58025430 	.word	0x58025430
 8002148:	58025444 	.word	0x58025444
 800214c:	58025458 	.word	0x58025458
 8002150:	5802546c 	.word	0x5802546c
 8002154:	58025480 	.word	0x58025480
 8002158:	58025494 	.word	0x58025494

0800215c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b08a      	sub	sp, #40	; 0x28
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002168:	4b67      	ldr	r3, [pc, #412]	; (8002308 <HAL_DMA_IRQHandler+0x1ac>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	4a67      	ldr	r2, [pc, #412]	; (800230c <HAL_DMA_IRQHandler+0x1b0>)
 800216e:	fba2 2303 	umull	r2, r3, r2, r3
 8002172:	0a9b      	lsrs	r3, r3, #10
 8002174:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800217a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002180:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002182:	6a3b      	ldr	r3, [r7, #32]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a5f      	ldr	r2, [pc, #380]	; (8002310 <HAL_DMA_IRQHandler+0x1b4>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d04a      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a5d      	ldr	r2, [pc, #372]	; (8002314 <HAL_DMA_IRQHandler+0x1b8>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d045      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a5c      	ldr	r2, [pc, #368]	; (8002318 <HAL_DMA_IRQHandler+0x1bc>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d040      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a5a      	ldr	r2, [pc, #360]	; (800231c <HAL_DMA_IRQHandler+0x1c0>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d03b      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a59      	ldr	r2, [pc, #356]	; (8002320 <HAL_DMA_IRQHandler+0x1c4>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d036      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a57      	ldr	r2, [pc, #348]	; (8002324 <HAL_DMA_IRQHandler+0x1c8>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d031      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a56      	ldr	r2, [pc, #344]	; (8002328 <HAL_DMA_IRQHandler+0x1cc>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d02c      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a54      	ldr	r2, [pc, #336]	; (800232c <HAL_DMA_IRQHandler+0x1d0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d027      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a53      	ldr	r2, [pc, #332]	; (8002330 <HAL_DMA_IRQHandler+0x1d4>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d022      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a51      	ldr	r2, [pc, #324]	; (8002334 <HAL_DMA_IRQHandler+0x1d8>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d01d      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a50      	ldr	r2, [pc, #320]	; (8002338 <HAL_DMA_IRQHandler+0x1dc>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d018      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a4e      	ldr	r2, [pc, #312]	; (800233c <HAL_DMA_IRQHandler+0x1e0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d013      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a4d      	ldr	r2, [pc, #308]	; (8002340 <HAL_DMA_IRQHandler+0x1e4>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d00e      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a4b      	ldr	r2, [pc, #300]	; (8002344 <HAL_DMA_IRQHandler+0x1e8>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d009      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a4a      	ldr	r2, [pc, #296]	; (8002348 <HAL_DMA_IRQHandler+0x1ec>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d004      	beq.n	800222e <HAL_DMA_IRQHandler+0xd2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a48      	ldr	r2, [pc, #288]	; (800234c <HAL_DMA_IRQHandler+0x1f0>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d101      	bne.n	8002232 <HAL_DMA_IRQHandler+0xd6>
 800222e:	2301      	movs	r3, #1
 8002230:	e000      	b.n	8002234 <HAL_DMA_IRQHandler+0xd8>
 8002232:	2300      	movs	r3, #0
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 842b 	beq.w	8002a90 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800223e:	f003 031f 	and.w	r3, r3, #31
 8002242:	2208      	movs	r2, #8
 8002244:	409a      	lsls	r2, r3
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4013      	ands	r3, r2
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80a2 	beq.w	8002394 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2e      	ldr	r2, [pc, #184]	; (8002310 <HAL_DMA_IRQHandler+0x1b4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d04a      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a2d      	ldr	r2, [pc, #180]	; (8002314 <HAL_DMA_IRQHandler+0x1b8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d045      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a2b      	ldr	r2, [pc, #172]	; (8002318 <HAL_DMA_IRQHandler+0x1bc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d040      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a2a      	ldr	r2, [pc, #168]	; (800231c <HAL_DMA_IRQHandler+0x1c0>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d03b      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a28      	ldr	r2, [pc, #160]	; (8002320 <HAL_DMA_IRQHandler+0x1c4>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d036      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a27      	ldr	r2, [pc, #156]	; (8002324 <HAL_DMA_IRQHandler+0x1c8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d031      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a25      	ldr	r2, [pc, #148]	; (8002328 <HAL_DMA_IRQHandler+0x1cc>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d02c      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a24      	ldr	r2, [pc, #144]	; (800232c <HAL_DMA_IRQHandler+0x1d0>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d027      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a22      	ldr	r2, [pc, #136]	; (8002330 <HAL_DMA_IRQHandler+0x1d4>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d022      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a21      	ldr	r2, [pc, #132]	; (8002334 <HAL_DMA_IRQHandler+0x1d8>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d01d      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a1f      	ldr	r2, [pc, #124]	; (8002338 <HAL_DMA_IRQHandler+0x1dc>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d018      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a1e      	ldr	r2, [pc, #120]	; (800233c <HAL_DMA_IRQHandler+0x1e0>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d013      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a1c      	ldr	r2, [pc, #112]	; (8002340 <HAL_DMA_IRQHandler+0x1e4>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00e      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_DMA_IRQHandler+0x1e8>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d009      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a19      	ldr	r2, [pc, #100]	; (8002348 <HAL_DMA_IRQHandler+0x1ec>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d004      	beq.n	80022f0 <HAL_DMA_IRQHandler+0x194>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a18      	ldr	r2, [pc, #96]	; (800234c <HAL_DMA_IRQHandler+0x1f0>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d12f      	bne.n	8002350 <HAL_DMA_IRQHandler+0x1f4>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0304 	and.w	r3, r3, #4
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	bf14      	ite	ne
 80022fe:	2301      	movne	r3, #1
 8002300:	2300      	moveq	r3, #0
 8002302:	b2db      	uxtb	r3, r3
 8002304:	e02e      	b.n	8002364 <HAL_DMA_IRQHandler+0x208>
 8002306:	bf00      	nop
 8002308:	24000000 	.word	0x24000000
 800230c:	1b4e81b5 	.word	0x1b4e81b5
 8002310:	40020010 	.word	0x40020010
 8002314:	40020028 	.word	0x40020028
 8002318:	40020040 	.word	0x40020040
 800231c:	40020058 	.word	0x40020058
 8002320:	40020070 	.word	0x40020070
 8002324:	40020088 	.word	0x40020088
 8002328:	400200a0 	.word	0x400200a0
 800232c:	400200b8 	.word	0x400200b8
 8002330:	40020410 	.word	0x40020410
 8002334:	40020428 	.word	0x40020428
 8002338:	40020440 	.word	0x40020440
 800233c:	40020458 	.word	0x40020458
 8002340:	40020470 	.word	0x40020470
 8002344:	40020488 	.word	0x40020488
 8002348:	400204a0 	.word	0x400204a0
 800234c:	400204b8 	.word	0x400204b8
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0308 	and.w	r3, r3, #8
 800235a:	2b00      	cmp	r3, #0
 800235c:	bf14      	ite	ne
 800235e:	2301      	movne	r3, #1
 8002360:	2300      	moveq	r3, #0
 8002362:	b2db      	uxtb	r3, r3
 8002364:	2b00      	cmp	r3, #0
 8002366:	d015      	beq.n	8002394 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0204 	bic.w	r2, r2, #4
 8002376:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	f003 031f 	and.w	r3, r3, #31
 8002380:	2208      	movs	r2, #8
 8002382:	409a      	lsls	r2, r3
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800238c:	f043 0201 	orr.w	r2, r3, #1
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	fa22 f303 	lsr.w	r3, r2, r3
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d06e      	beq.n	8002488 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a69      	ldr	r2, [pc, #420]	; (8002554 <HAL_DMA_IRQHandler+0x3f8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d04a      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a67      	ldr	r2, [pc, #412]	; (8002558 <HAL_DMA_IRQHandler+0x3fc>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d045      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a66      	ldr	r2, [pc, #408]	; (800255c <HAL_DMA_IRQHandler+0x400>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d040      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4a64      	ldr	r2, [pc, #400]	; (8002560 <HAL_DMA_IRQHandler+0x404>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d03b      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4a63      	ldr	r2, [pc, #396]	; (8002564 <HAL_DMA_IRQHandler+0x408>)
 80023d8:	4293      	cmp	r3, r2
 80023da:	d036      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a61      	ldr	r2, [pc, #388]	; (8002568 <HAL_DMA_IRQHandler+0x40c>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d031      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4a60      	ldr	r2, [pc, #384]	; (800256c <HAL_DMA_IRQHandler+0x410>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d02c      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a5e      	ldr	r2, [pc, #376]	; (8002570 <HAL_DMA_IRQHandler+0x414>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d027      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4a5d      	ldr	r2, [pc, #372]	; (8002574 <HAL_DMA_IRQHandler+0x418>)
 8002400:	4293      	cmp	r3, r2
 8002402:	d022      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a5b      	ldr	r2, [pc, #364]	; (8002578 <HAL_DMA_IRQHandler+0x41c>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d01d      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a5a      	ldr	r2, [pc, #360]	; (800257c <HAL_DMA_IRQHandler+0x420>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d018      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4a58      	ldr	r2, [pc, #352]	; (8002580 <HAL_DMA_IRQHandler+0x424>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d013      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a57      	ldr	r2, [pc, #348]	; (8002584 <HAL_DMA_IRQHandler+0x428>)
 8002428:	4293      	cmp	r3, r2
 800242a:	d00e      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a55      	ldr	r2, [pc, #340]	; (8002588 <HAL_DMA_IRQHandler+0x42c>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d009      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a54      	ldr	r2, [pc, #336]	; (800258c <HAL_DMA_IRQHandler+0x430>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d004      	beq.n	800244a <HAL_DMA_IRQHandler+0x2ee>
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a52      	ldr	r2, [pc, #328]	; (8002590 <HAL_DMA_IRQHandler+0x434>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d10a      	bne.n	8002460 <HAL_DMA_IRQHandler+0x304>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	bf14      	ite	ne
 8002458:	2301      	movne	r3, #1
 800245a:	2300      	moveq	r3, #0
 800245c:	b2db      	uxtb	r3, r3
 800245e:	e003      	b.n	8002468 <HAL_DMA_IRQHandler+0x30c>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d00d      	beq.n	8002488 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002470:	f003 031f 	and.w	r3, r3, #31
 8002474:	2201      	movs	r2, #1
 8002476:	409a      	lsls	r2, r3
 8002478:	6a3b      	ldr	r3, [r7, #32]
 800247a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002480:	f043 0202 	orr.w	r2, r3, #2
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	2204      	movs	r2, #4
 8002492:	409a      	lsls	r2, r3
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 808f 	beq.w	80025bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a2c      	ldr	r2, [pc, #176]	; (8002554 <HAL_DMA_IRQHandler+0x3f8>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	d04a      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a2a      	ldr	r2, [pc, #168]	; (8002558 <HAL_DMA_IRQHandler+0x3fc>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d045      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a29      	ldr	r2, [pc, #164]	; (800255c <HAL_DMA_IRQHandler+0x400>)
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d040      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a27      	ldr	r2, [pc, #156]	; (8002560 <HAL_DMA_IRQHandler+0x404>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d03b      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4a26      	ldr	r2, [pc, #152]	; (8002564 <HAL_DMA_IRQHandler+0x408>)
 80024cc:	4293      	cmp	r3, r2
 80024ce:	d036      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4a24      	ldr	r2, [pc, #144]	; (8002568 <HAL_DMA_IRQHandler+0x40c>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d031      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a23      	ldr	r2, [pc, #140]	; (800256c <HAL_DMA_IRQHandler+0x410>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d02c      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	4a21      	ldr	r2, [pc, #132]	; (8002570 <HAL_DMA_IRQHandler+0x414>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d027      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a20      	ldr	r2, [pc, #128]	; (8002574 <HAL_DMA_IRQHandler+0x418>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d022      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a1e      	ldr	r2, [pc, #120]	; (8002578 <HAL_DMA_IRQHandler+0x41c>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d01d      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <HAL_DMA_IRQHandler+0x420>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d018      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a1b      	ldr	r2, [pc, #108]	; (8002580 <HAL_DMA_IRQHandler+0x424>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a1a      	ldr	r2, [pc, #104]	; (8002584 <HAL_DMA_IRQHandler+0x428>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d00e      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a18      	ldr	r2, [pc, #96]	; (8002588 <HAL_DMA_IRQHandler+0x42c>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d009      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a17      	ldr	r2, [pc, #92]	; (800258c <HAL_DMA_IRQHandler+0x430>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d004      	beq.n	800253e <HAL_DMA_IRQHandler+0x3e2>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a15      	ldr	r2, [pc, #84]	; (8002590 <HAL_DMA_IRQHandler+0x434>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d12a      	bne.n	8002594 <HAL_DMA_IRQHandler+0x438>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0302 	and.w	r3, r3, #2
 8002548:	2b00      	cmp	r3, #0
 800254a:	bf14      	ite	ne
 800254c:	2301      	movne	r3, #1
 800254e:	2300      	moveq	r3, #0
 8002550:	b2db      	uxtb	r3, r3
 8002552:	e023      	b.n	800259c <HAL_DMA_IRQHandler+0x440>
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00d      	beq.n	80025bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a4:	f003 031f 	and.w	r3, r3, #31
 80025a8:	2204      	movs	r2, #4
 80025aa:	409a      	lsls	r2, r3
 80025ac:	6a3b      	ldr	r3, [r7, #32]
 80025ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	f003 031f 	and.w	r3, r3, #31
 80025c4:	2210      	movs	r2, #16
 80025c6:	409a      	lsls	r2, r3
 80025c8:	69bb      	ldr	r3, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 80a6 	beq.w	800271e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a85      	ldr	r2, [pc, #532]	; (80027ec <HAL_DMA_IRQHandler+0x690>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d04a      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a83      	ldr	r2, [pc, #524]	; (80027f0 <HAL_DMA_IRQHandler+0x694>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d045      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a82      	ldr	r2, [pc, #520]	; (80027f4 <HAL_DMA_IRQHandler+0x698>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d040      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a80      	ldr	r2, [pc, #512]	; (80027f8 <HAL_DMA_IRQHandler+0x69c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d03b      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a7f      	ldr	r2, [pc, #508]	; (80027fc <HAL_DMA_IRQHandler+0x6a0>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d036      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a7d      	ldr	r2, [pc, #500]	; (8002800 <HAL_DMA_IRQHandler+0x6a4>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d031      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a7c      	ldr	r2, [pc, #496]	; (8002804 <HAL_DMA_IRQHandler+0x6a8>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d02c      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <HAL_DMA_IRQHandler+0x6ac>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d027      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a79      	ldr	r2, [pc, #484]	; (800280c <HAL_DMA_IRQHandler+0x6b0>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d022      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a77      	ldr	r2, [pc, #476]	; (8002810 <HAL_DMA_IRQHandler+0x6b4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d01d      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a76      	ldr	r2, [pc, #472]	; (8002814 <HAL_DMA_IRQHandler+0x6b8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d018      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a74      	ldr	r2, [pc, #464]	; (8002818 <HAL_DMA_IRQHandler+0x6bc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d013      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a73      	ldr	r2, [pc, #460]	; (800281c <HAL_DMA_IRQHandler+0x6c0>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d00e      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a71      	ldr	r2, [pc, #452]	; (8002820 <HAL_DMA_IRQHandler+0x6c4>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a70      	ldr	r2, [pc, #448]	; (8002824 <HAL_DMA_IRQHandler+0x6c8>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d004      	beq.n	8002672 <HAL_DMA_IRQHandler+0x516>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a6e      	ldr	r2, [pc, #440]	; (8002828 <HAL_DMA_IRQHandler+0x6cc>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d10a      	bne.n	8002688 <HAL_DMA_IRQHandler+0x52c>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf14      	ite	ne
 8002680:	2301      	movne	r3, #1
 8002682:	2300      	moveq	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	e009      	b.n	800269c <HAL_DMA_IRQHandler+0x540>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0304 	and.w	r3, r3, #4
 8002692:	2b00      	cmp	r3, #0
 8002694:	bf14      	ite	ne
 8002696:	2301      	movne	r3, #1
 8002698:	2300      	moveq	r3, #0
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d03e      	beq.n	800271e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026a4:	f003 031f 	and.w	r3, r3, #31
 80026a8:	2210      	movs	r2, #16
 80026aa:	409a      	lsls	r2, r3
 80026ac:	6a3b      	ldr	r3, [r7, #32]
 80026ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d108      	bne.n	80026de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d024      	beq.n	800271e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	4798      	blx	r3
 80026dc:	e01f      	b.n	800271e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d01b      	beq.n	800271e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	4798      	blx	r3
 80026ee:	e016      	b.n	800271e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d107      	bne.n	800270e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f022 0208 	bic.w	r2, r2, #8
 800270c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	d003      	beq.n	800271e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2220      	movs	r2, #32
 8002728:	409a      	lsls	r2, r3
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	f000 8110 	beq.w	8002954 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <HAL_DMA_IRQHandler+0x690>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d04a      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a2b      	ldr	r2, [pc, #172]	; (80027f0 <HAL_DMA_IRQHandler+0x694>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d045      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a29      	ldr	r2, [pc, #164]	; (80027f4 <HAL_DMA_IRQHandler+0x698>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d040      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a28      	ldr	r2, [pc, #160]	; (80027f8 <HAL_DMA_IRQHandler+0x69c>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d03b      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a26      	ldr	r2, [pc, #152]	; (80027fc <HAL_DMA_IRQHandler+0x6a0>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d036      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a25      	ldr	r2, [pc, #148]	; (8002800 <HAL_DMA_IRQHandler+0x6a4>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d031      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a23      	ldr	r2, [pc, #140]	; (8002804 <HAL_DMA_IRQHandler+0x6a8>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d02c      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a22      	ldr	r2, [pc, #136]	; (8002808 <HAL_DMA_IRQHandler+0x6ac>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d027      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a20      	ldr	r2, [pc, #128]	; (800280c <HAL_DMA_IRQHandler+0x6b0>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d022      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a1f      	ldr	r2, [pc, #124]	; (8002810 <HAL_DMA_IRQHandler+0x6b4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d01d      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a1d      	ldr	r2, [pc, #116]	; (8002814 <HAL_DMA_IRQHandler+0x6b8>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d018      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a1c      	ldr	r2, [pc, #112]	; (8002818 <HAL_DMA_IRQHandler+0x6bc>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d013      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_DMA_IRQHandler+0x6c0>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d00e      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a19      	ldr	r2, [pc, #100]	; (8002820 <HAL_DMA_IRQHandler+0x6c4>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d009      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a17      	ldr	r2, [pc, #92]	; (8002824 <HAL_DMA_IRQHandler+0x6c8>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d004      	beq.n	80027d4 <HAL_DMA_IRQHandler+0x678>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a16      	ldr	r2, [pc, #88]	; (8002828 <HAL_DMA_IRQHandler+0x6cc>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d12b      	bne.n	800282c <HAL_DMA_IRQHandler+0x6d0>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	bf14      	ite	ne
 80027e2:	2301      	movne	r3, #1
 80027e4:	2300      	moveq	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	e02a      	b.n	8002840 <HAL_DMA_IRQHandler+0x6e4>
 80027ea:	bf00      	nop
 80027ec:	40020010 	.word	0x40020010
 80027f0:	40020028 	.word	0x40020028
 80027f4:	40020040 	.word	0x40020040
 80027f8:	40020058 	.word	0x40020058
 80027fc:	40020070 	.word	0x40020070
 8002800:	40020088 	.word	0x40020088
 8002804:	400200a0 	.word	0x400200a0
 8002808:	400200b8 	.word	0x400200b8
 800280c:	40020410 	.word	0x40020410
 8002810:	40020428 	.word	0x40020428
 8002814:	40020440 	.word	0x40020440
 8002818:	40020458 	.word	0x40020458
 800281c:	40020470 	.word	0x40020470
 8002820:	40020488 	.word	0x40020488
 8002824:	400204a0 	.word	0x400204a0
 8002828:	400204b8 	.word	0x400204b8
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b00      	cmp	r3, #0
 8002838:	bf14      	ite	ne
 800283a:	2301      	movne	r3, #1
 800283c:	2300      	moveq	r3, #0
 800283e:	b2db      	uxtb	r3, r3
 8002840:	2b00      	cmp	r3, #0
 8002842:	f000 8087 	beq.w	8002954 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800284a:	f003 031f 	and.w	r3, r3, #31
 800284e:	2220      	movs	r2, #32
 8002850:	409a      	lsls	r2, r3
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b04      	cmp	r3, #4
 8002860:	d139      	bne.n	80028d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	681a      	ldr	r2, [r3, #0]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f022 0216 	bic.w	r2, r2, #22
 8002870:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	695a      	ldr	r2, [r3, #20]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002880:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002886:	2b00      	cmp	r3, #0
 8002888:	d103      	bne.n	8002892 <HAL_DMA_IRQHandler+0x736>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288e:	2b00      	cmp	r3, #0
 8002890:	d007      	beq.n	80028a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681a      	ldr	r2, [r3, #0]
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f022 0208 	bic.w	r2, r2, #8
 80028a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	f003 031f 	and.w	r3, r3, #31
 80028aa:	223f      	movs	r2, #63	; 0x3f
 80028ac:	409a      	lsls	r2, r3
 80028ae:	6a3b      	ldr	r3, [r7, #32]
 80028b0:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	2200      	movs	r2, #0
 80028b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2201      	movs	r2, #1
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	f000 834a 	beq.w	8002f60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	4798      	blx	r3
          }
          return;
 80028d4:	e344      	b.n	8002f60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d018      	beq.n	8002916 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d108      	bne.n	8002904 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d02c      	beq.n	8002954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4798      	blx	r3
 8002902:	e027      	b.n	8002954 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002908:	2b00      	cmp	r3, #0
 800290a:	d023      	beq.n	8002954 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002910:	6878      	ldr	r0, [r7, #4]
 8002912:	4798      	blx	r3
 8002914:	e01e      	b.n	8002954 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10f      	bne.n	8002944 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f022 0210 	bic.w	r2, r2, #16
 8002932:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002948:	2b00      	cmp	r3, #0
 800294a:	d003      	beq.n	8002954 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8306 	beq.w	8002f6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002962:	f003 0301 	and.w	r3, r3, #1
 8002966:	2b00      	cmp	r3, #0
 8002968:	f000 8088 	beq.w	8002a7c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2204      	movs	r2, #4
 8002970:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a7a      	ldr	r2, [pc, #488]	; (8002b64 <HAL_DMA_IRQHandler+0xa08>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d04a      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a79      	ldr	r2, [pc, #484]	; (8002b68 <HAL_DMA_IRQHandler+0xa0c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d045      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a77      	ldr	r2, [pc, #476]	; (8002b6c <HAL_DMA_IRQHandler+0xa10>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d040      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a76      	ldr	r2, [pc, #472]	; (8002b70 <HAL_DMA_IRQHandler+0xa14>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d03b      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a74      	ldr	r2, [pc, #464]	; (8002b74 <HAL_DMA_IRQHandler+0xa18>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d036      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a73      	ldr	r2, [pc, #460]	; (8002b78 <HAL_DMA_IRQHandler+0xa1c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d031      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a71      	ldr	r2, [pc, #452]	; (8002b7c <HAL_DMA_IRQHandler+0xa20>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d02c      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a70      	ldr	r2, [pc, #448]	; (8002b80 <HAL_DMA_IRQHandler+0xa24>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d027      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a6e      	ldr	r2, [pc, #440]	; (8002b84 <HAL_DMA_IRQHandler+0xa28>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d022      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6d      	ldr	r2, [pc, #436]	; (8002b88 <HAL_DMA_IRQHandler+0xa2c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d01d      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a6b      	ldr	r2, [pc, #428]	; (8002b8c <HAL_DMA_IRQHandler+0xa30>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d018      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a6a      	ldr	r2, [pc, #424]	; (8002b90 <HAL_DMA_IRQHandler+0xa34>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d013      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a68      	ldr	r2, [pc, #416]	; (8002b94 <HAL_DMA_IRQHandler+0xa38>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d00e      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a67      	ldr	r2, [pc, #412]	; (8002b98 <HAL_DMA_IRQHandler+0xa3c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d009      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a65      	ldr	r2, [pc, #404]	; (8002b9c <HAL_DMA_IRQHandler+0xa40>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d004      	beq.n	8002a14 <HAL_DMA_IRQHandler+0x8b8>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a64      	ldr	r2, [pc, #400]	; (8002ba0 <HAL_DMA_IRQHandler+0xa44>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d108      	bne.n	8002a26 <HAL_DMA_IRQHandler+0x8ca>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]
 8002a24:	e007      	b.n	8002a36 <HAL_DMA_IRQHandler+0x8da>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f022 0201 	bic.w	r2, r2, #1
 8002a34:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	3301      	adds	r3, #1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d307      	bcc.n	8002a52 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d1f2      	bne.n	8002a36 <HAL_DMA_IRQHandler+0x8da>
 8002a50:	e000      	b.n	8002a54 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8002a52:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d004      	beq.n	8002a74 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8002a72:	e003      	b.n	8002a7c <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8272 	beq.w	8002f6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	4798      	blx	r3
 8002a8e:	e26c      	b.n	8002f6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a43      	ldr	r2, [pc, #268]	; (8002ba4 <HAL_DMA_IRQHandler+0xa48>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d022      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	4a42      	ldr	r2, [pc, #264]	; (8002ba8 <HAL_DMA_IRQHandler+0xa4c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d01d      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a40      	ldr	r2, [pc, #256]	; (8002bac <HAL_DMA_IRQHandler+0xa50>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d018      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a3f      	ldr	r2, [pc, #252]	; (8002bb0 <HAL_DMA_IRQHandler+0xa54>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d013      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a3d      	ldr	r2, [pc, #244]	; (8002bb4 <HAL_DMA_IRQHandler+0xa58>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d00e      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a3c      	ldr	r2, [pc, #240]	; (8002bb8 <HAL_DMA_IRQHandler+0xa5c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d009      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a3a      	ldr	r2, [pc, #232]	; (8002bbc <HAL_DMA_IRQHandler+0xa60>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d004      	beq.n	8002ae0 <HAL_DMA_IRQHandler+0x984>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a39      	ldr	r2, [pc, #228]	; (8002bc0 <HAL_DMA_IRQHandler+0xa64>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d101      	bne.n	8002ae4 <HAL_DMA_IRQHandler+0x988>
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e000      	b.n	8002ae6 <HAL_DMA_IRQHandler+0x98a>
 8002ae4:	2300      	movs	r3, #0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 823f 	beq.w	8002f6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002af8:	f003 031f 	and.w	r3, r3, #31
 8002afc:	2204      	movs	r2, #4
 8002afe:	409a      	lsls	r2, r3
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	4013      	ands	r3, r2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f000 80cd 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0xb48>
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0304 	and.w	r3, r3, #4
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 80c7 	beq.w	8002ca4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1a:	f003 031f 	and.w	r3, r3, #31
 8002b1e:	2204      	movs	r2, #4
 8002b20:	409a      	lsls	r2, r3
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b26:	693b      	ldr	r3, [r7, #16]
 8002b28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d049      	beq.n	8002bc4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d109      	bne.n	8002b4e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 8210 	beq.w	8002f64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b48:	6878      	ldr	r0, [r7, #4]
 8002b4a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b4c:	e20a      	b.n	8002f64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8206 	beq.w	8002f64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b60:	e200      	b.n	8002f64 <HAL_DMA_IRQHandler+0xe08>
 8002b62:	bf00      	nop
 8002b64:	40020010 	.word	0x40020010
 8002b68:	40020028 	.word	0x40020028
 8002b6c:	40020040 	.word	0x40020040
 8002b70:	40020058 	.word	0x40020058
 8002b74:	40020070 	.word	0x40020070
 8002b78:	40020088 	.word	0x40020088
 8002b7c:	400200a0 	.word	0x400200a0
 8002b80:	400200b8 	.word	0x400200b8
 8002b84:	40020410 	.word	0x40020410
 8002b88:	40020428 	.word	0x40020428
 8002b8c:	40020440 	.word	0x40020440
 8002b90:	40020458 	.word	0x40020458
 8002b94:	40020470 	.word	0x40020470
 8002b98:	40020488 	.word	0x40020488
 8002b9c:	400204a0 	.word	0x400204a0
 8002ba0:	400204b8 	.word	0x400204b8
 8002ba4:	58025408 	.word	0x58025408
 8002ba8:	5802541c 	.word	0x5802541c
 8002bac:	58025430 	.word	0x58025430
 8002bb0:	58025444 	.word	0x58025444
 8002bb4:	58025458 	.word	0x58025458
 8002bb8:	5802546c 	.word	0x5802546c
 8002bbc:	58025480 	.word	0x58025480
 8002bc0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	f003 0320 	and.w	r3, r3, #32
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d160      	bne.n	8002c90 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a8c      	ldr	r2, [pc, #560]	; (8002e04 <HAL_DMA_IRQHandler+0xca8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a8a      	ldr	r2, [pc, #552]	; (8002e08 <HAL_DMA_IRQHandler+0xcac>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d045      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a89      	ldr	r2, [pc, #548]	; (8002e0c <HAL_DMA_IRQHandler+0xcb0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d040      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a87      	ldr	r2, [pc, #540]	; (8002e10 <HAL_DMA_IRQHandler+0xcb4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d03b      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a86      	ldr	r2, [pc, #536]	; (8002e14 <HAL_DMA_IRQHandler+0xcb8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a84      	ldr	r2, [pc, #528]	; (8002e18 <HAL_DMA_IRQHandler+0xcbc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a83      	ldr	r2, [pc, #524]	; (8002e1c <HAL_DMA_IRQHandler+0xcc0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d02c      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a81      	ldr	r2, [pc, #516]	; (8002e20 <HAL_DMA_IRQHandler+0xcc4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a80      	ldr	r2, [pc, #512]	; (8002e24 <HAL_DMA_IRQHandler+0xcc8>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a7e      	ldr	r2, [pc, #504]	; (8002e28 <HAL_DMA_IRQHandler+0xccc>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a7d      	ldr	r2, [pc, #500]	; (8002e2c <HAL_DMA_IRQHandler+0xcd0>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a7b      	ldr	r2, [pc, #492]	; (8002e30 <HAL_DMA_IRQHandler+0xcd4>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a7a      	ldr	r2, [pc, #488]	; (8002e34 <HAL_DMA_IRQHandler+0xcd8>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a78      	ldr	r2, [pc, #480]	; (8002e38 <HAL_DMA_IRQHandler+0xcdc>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a77      	ldr	r2, [pc, #476]	; (8002e3c <HAL_DMA_IRQHandler+0xce0>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_IRQHandler+0xb12>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a75      	ldr	r2, [pc, #468]	; (8002e40 <HAL_DMA_IRQHandler+0xce4>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <HAL_DMA_IRQHandler+0xb24>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0208 	bic.w	r2, r2, #8
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_DMA_IRQHandler+0xb34>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0204 	bic.w	r2, r2, #4
 8002c8e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f000 8165 	beq.w	8002f64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002ca2:	e15f      	b.n	8002f64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	f003 031f 	and.w	r3, r3, #31
 8002cac:	2202      	movs	r2, #2
 8002cae:	409a      	lsls	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 80c5 	beq.w	8002e44 <HAL_DMA_IRQHandler+0xce8>
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	f003 0302 	and.w	r3, r3, #2
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 80bf 	beq.w	8002e44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cca:	f003 031f 	and.w	r3, r3, #31
 8002cce:	2202      	movs	r2, #2
 8002cd0:	409a      	lsls	r2, r3
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d018      	beq.n	8002d12 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	f000 813a 	beq.w	8002f68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002cfc:	e134      	b.n	8002f68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	f000 8130 	beq.w	8002f68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002d10:	e12a      	b.n	8002f68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f003 0320 	and.w	r3, r3, #32
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d168      	bne.n	8002dee <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a38      	ldr	r2, [pc, #224]	; (8002e04 <HAL_DMA_IRQHandler+0xca8>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d04a      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a37      	ldr	r2, [pc, #220]	; (8002e08 <HAL_DMA_IRQHandler+0xcac>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d045      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a35      	ldr	r2, [pc, #212]	; (8002e0c <HAL_DMA_IRQHandler+0xcb0>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d040      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a34      	ldr	r2, [pc, #208]	; (8002e10 <HAL_DMA_IRQHandler+0xcb4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d03b      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a32      	ldr	r2, [pc, #200]	; (8002e14 <HAL_DMA_IRQHandler+0xcb8>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d036      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a31      	ldr	r2, [pc, #196]	; (8002e18 <HAL_DMA_IRQHandler+0xcbc>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d031      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a2f      	ldr	r2, [pc, #188]	; (8002e1c <HAL_DMA_IRQHandler+0xcc0>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d02c      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a2e      	ldr	r2, [pc, #184]	; (8002e20 <HAL_DMA_IRQHandler+0xcc4>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d027      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a2c      	ldr	r2, [pc, #176]	; (8002e24 <HAL_DMA_IRQHandler+0xcc8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d022      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a2b      	ldr	r2, [pc, #172]	; (8002e28 <HAL_DMA_IRQHandler+0xccc>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d01d      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a29      	ldr	r2, [pc, #164]	; (8002e2c <HAL_DMA_IRQHandler+0xcd0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d018      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a28      	ldr	r2, [pc, #160]	; (8002e30 <HAL_DMA_IRQHandler+0xcd4>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d013      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a26      	ldr	r2, [pc, #152]	; (8002e34 <HAL_DMA_IRQHandler+0xcd8>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d00e      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a25      	ldr	r2, [pc, #148]	; (8002e38 <HAL_DMA_IRQHandler+0xcdc>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d009      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a23      	ldr	r2, [pc, #140]	; (8002e3c <HAL_DMA_IRQHandler+0xce0>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <HAL_DMA_IRQHandler+0xc60>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_DMA_IRQHandler+0xce4>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d108      	bne.n	8002dce <HAL_DMA_IRQHandler+0xc72>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f022 0214 	bic.w	r2, r2, #20
 8002dca:	601a      	str	r2, [r3, #0]
 8002dcc:	e007      	b.n	8002dde <HAL_DMA_IRQHandler+0xc82>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 020a 	bic.w	r2, r2, #10
 8002ddc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2200      	movs	r2, #0
 8002de2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2201      	movs	r2, #1
 8002dea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	f000 80b8 	beq.w	8002f68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dfc:	6878      	ldr	r0, [r7, #4]
 8002dfe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002e00:	e0b2      	b.n	8002f68 <HAL_DMA_IRQHandler+0xe0c>
 8002e02:	bf00      	nop
 8002e04:	40020010 	.word	0x40020010
 8002e08:	40020028 	.word	0x40020028
 8002e0c:	40020040 	.word	0x40020040
 8002e10:	40020058 	.word	0x40020058
 8002e14:	40020070 	.word	0x40020070
 8002e18:	40020088 	.word	0x40020088
 8002e1c:	400200a0 	.word	0x400200a0
 8002e20:	400200b8 	.word	0x400200b8
 8002e24:	40020410 	.word	0x40020410
 8002e28:	40020428 	.word	0x40020428
 8002e2c:	40020440 	.word	0x40020440
 8002e30:	40020458 	.word	0x40020458
 8002e34:	40020470 	.word	0x40020470
 8002e38:	40020488 	.word	0x40020488
 8002e3c:	400204a0 	.word	0x400204a0
 8002e40:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e48:	f003 031f 	and.w	r3, r3, #31
 8002e4c:	2208      	movs	r2, #8
 8002e4e:	409a      	lsls	r2, r3
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	4013      	ands	r3, r2
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 8088 	beq.w	8002f6a <HAL_DMA_IRQHandler+0xe0e>
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8082 	beq.w	8002f6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a41      	ldr	r2, [pc, #260]	; (8002f70 <HAL_DMA_IRQHandler+0xe14>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d04a      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a3f      	ldr	r2, [pc, #252]	; (8002f74 <HAL_DMA_IRQHandler+0xe18>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d045      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a3e      	ldr	r2, [pc, #248]	; (8002f78 <HAL_DMA_IRQHandler+0xe1c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d040      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a3c      	ldr	r2, [pc, #240]	; (8002f7c <HAL_DMA_IRQHandler+0xe20>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d03b      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a3b      	ldr	r2, [pc, #236]	; (8002f80 <HAL_DMA_IRQHandler+0xe24>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d036      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a39      	ldr	r2, [pc, #228]	; (8002f84 <HAL_DMA_IRQHandler+0xe28>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d031      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a38      	ldr	r2, [pc, #224]	; (8002f88 <HAL_DMA_IRQHandler+0xe2c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d02c      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a36      	ldr	r2, [pc, #216]	; (8002f8c <HAL_DMA_IRQHandler+0xe30>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d027      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a35      	ldr	r2, [pc, #212]	; (8002f90 <HAL_DMA_IRQHandler+0xe34>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d022      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a33      	ldr	r2, [pc, #204]	; (8002f94 <HAL_DMA_IRQHandler+0xe38>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d01d      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a32      	ldr	r2, [pc, #200]	; (8002f98 <HAL_DMA_IRQHandler+0xe3c>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d018      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a30      	ldr	r2, [pc, #192]	; (8002f9c <HAL_DMA_IRQHandler+0xe40>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d013      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	4a2f      	ldr	r2, [pc, #188]	; (8002fa0 <HAL_DMA_IRQHandler+0xe44>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d00e      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a2d      	ldr	r2, [pc, #180]	; (8002fa4 <HAL_DMA_IRQHandler+0xe48>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d009      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a2c      	ldr	r2, [pc, #176]	; (8002fa8 <HAL_DMA_IRQHandler+0xe4c>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d004      	beq.n	8002f06 <HAL_DMA_IRQHandler+0xdaa>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2a      	ldr	r2, [pc, #168]	; (8002fac <HAL_DMA_IRQHandler+0xe50>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d108      	bne.n	8002f18 <HAL_DMA_IRQHandler+0xdbc>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f022 021c 	bic.w	r2, r2, #28
 8002f14:	601a      	str	r2, [r3, #0]
 8002f16:	e007      	b.n	8002f28 <HAL_DMA_IRQHandler+0xdcc>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 020e 	bic.w	r2, r2, #14
 8002f26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	f003 031f 	and.w	r3, r3, #31
 8002f30:	2201      	movs	r2, #1
 8002f32:	409a      	lsls	r2, r3
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2201      	movs	r2, #1
 8002f4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d009      	beq.n	8002f6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	4798      	blx	r3
 8002f5e:	e004      	b.n	8002f6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002f60:	bf00      	nop
 8002f62:	e002      	b.n	8002f6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f64:	bf00      	nop
 8002f66:	e000      	b.n	8002f6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002f68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002f6a:	3728      	adds	r7, #40	; 0x28
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40020010 	.word	0x40020010
 8002f74:	40020028 	.word	0x40020028
 8002f78:	40020040 	.word	0x40020040
 8002f7c:	40020058 	.word	0x40020058
 8002f80:	40020070 	.word	0x40020070
 8002f84:	40020088 	.word	0x40020088
 8002f88:	400200a0 	.word	0x400200a0
 8002f8c:	400200b8 	.word	0x400200b8
 8002f90:	40020410 	.word	0x40020410
 8002f94:	40020428 	.word	0x40020428
 8002f98:	40020440 	.word	0x40020440
 8002f9c:	40020458 	.word	0x40020458
 8002fa0:	40020470 	.word	0x40020470
 8002fa4:	40020488 	.word	0x40020488
 8002fa8:	400204a0 	.word	0x400204a0
 8002fac:	400204b8 	.word	0x400204b8

08002fb0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4a42      	ldr	r2, [pc, #264]	; (80030c8 <DMA_CalcBaseAndBitshift+0x118>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d04a      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4a41      	ldr	r2, [pc, #260]	; (80030cc <DMA_CalcBaseAndBitshift+0x11c>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d045      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a3f      	ldr	r2, [pc, #252]	; (80030d0 <DMA_CalcBaseAndBitshift+0x120>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d040      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a3e      	ldr	r2, [pc, #248]	; (80030d4 <DMA_CalcBaseAndBitshift+0x124>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d03b      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a3c      	ldr	r2, [pc, #240]	; (80030d8 <DMA_CalcBaseAndBitshift+0x128>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d036      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a3b      	ldr	r2, [pc, #236]	; (80030dc <DMA_CalcBaseAndBitshift+0x12c>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	d031      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a39      	ldr	r2, [pc, #228]	; (80030e0 <DMA_CalcBaseAndBitshift+0x130>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d02c      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a38      	ldr	r2, [pc, #224]	; (80030e4 <DMA_CalcBaseAndBitshift+0x134>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d027      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a36      	ldr	r2, [pc, #216]	; (80030e8 <DMA_CalcBaseAndBitshift+0x138>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d022      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a35      	ldr	r2, [pc, #212]	; (80030ec <DMA_CalcBaseAndBitshift+0x13c>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d01d      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a33      	ldr	r2, [pc, #204]	; (80030f0 <DMA_CalcBaseAndBitshift+0x140>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d018      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a32      	ldr	r2, [pc, #200]	; (80030f4 <DMA_CalcBaseAndBitshift+0x144>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d013      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a30      	ldr	r2, [pc, #192]	; (80030f8 <DMA_CalcBaseAndBitshift+0x148>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d00e      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a2f      	ldr	r2, [pc, #188]	; (80030fc <DMA_CalcBaseAndBitshift+0x14c>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d009      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a2d      	ldr	r2, [pc, #180]	; (8003100 <DMA_CalcBaseAndBitshift+0x150>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d004      	beq.n	8003058 <DMA_CalcBaseAndBitshift+0xa8>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a2c      	ldr	r2, [pc, #176]	; (8003104 <DMA_CalcBaseAndBitshift+0x154>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d101      	bne.n	800305c <DMA_CalcBaseAndBitshift+0xac>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <DMA_CalcBaseAndBitshift+0xae>
 800305c:	2300      	movs	r3, #0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d024      	beq.n	80030ac <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	3b10      	subs	r3, #16
 800306a:	4a27      	ldr	r2, [pc, #156]	; (8003108 <DMA_CalcBaseAndBitshift+0x158>)
 800306c:	fba2 2303 	umull	r2, r3, r2, r3
 8003070:	091b      	lsrs	r3, r3, #4
 8003072:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f003 0307 	and.w	r3, r3, #7
 800307a:	4a24      	ldr	r2, [pc, #144]	; (800310c <DMA_CalcBaseAndBitshift+0x15c>)
 800307c:	5cd3      	ldrb	r3, [r2, r3]
 800307e:	461a      	mov	r2, r3
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2b03      	cmp	r3, #3
 8003088:	d908      	bls.n	800309c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	461a      	mov	r2, r3
 8003090:	4b1f      	ldr	r3, [pc, #124]	; (8003110 <DMA_CalcBaseAndBitshift+0x160>)
 8003092:	4013      	ands	r3, r2
 8003094:	1d1a      	adds	r2, r3, #4
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	659a      	str	r2, [r3, #88]	; 0x58
 800309a:	e00d      	b.n	80030b8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	461a      	mov	r2, r3
 80030a2:	4b1b      	ldr	r3, [pc, #108]	; (8003110 <DMA_CalcBaseAndBitshift+0x160>)
 80030a4:	4013      	ands	r3, r2
 80030a6:	687a      	ldr	r2, [r7, #4]
 80030a8:	6593      	str	r3, [r2, #88]	; 0x58
 80030aa:	e005      	b.n	80030b8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	aaaaaaab 	.word	0xaaaaaaab
 800310c:	080140a8 	.word	0x080140a8
 8003110:	fffffc00 	.word	0xfffffc00

08003114 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	699b      	ldr	r3, [r3, #24]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d120      	bne.n	800316a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312c:	2b03      	cmp	r3, #3
 800312e:	d858      	bhi.n	80031e2 <DMA_CheckFifoParam+0xce>
 8003130:	a201      	add	r2, pc, #4	; (adr r2, 8003138 <DMA_CheckFifoParam+0x24>)
 8003132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003136:	bf00      	nop
 8003138:	08003149 	.word	0x08003149
 800313c:	0800315b 	.word	0x0800315b
 8003140:	08003149 	.word	0x08003149
 8003144:	080031e3 	.word	0x080031e3
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800314c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d048      	beq.n	80031e6 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003158:	e045      	b.n	80031e6 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003162:	d142      	bne.n	80031ea <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8003168:	e03f      	b.n	80031ea <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	699b      	ldr	r3, [r3, #24]
 800316e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003172:	d123      	bne.n	80031bc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	2b03      	cmp	r3, #3
 800317a:	d838      	bhi.n	80031ee <DMA_CheckFifoParam+0xda>
 800317c:	a201      	add	r2, pc, #4	; (adr r2, 8003184 <DMA_CheckFifoParam+0x70>)
 800317e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003182:	bf00      	nop
 8003184:	08003195 	.word	0x08003195
 8003188:	0800319b 	.word	0x0800319b
 800318c:	08003195 	.word	0x08003195
 8003190:	080031ad 	.word	0x080031ad
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003194:	2301      	movs	r3, #1
 8003196:	73fb      	strb	r3, [r7, #15]
        break;
 8003198:	e030      	b.n	80031fc <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d025      	beq.n	80031f2 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031aa:	e022      	b.n	80031f2 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031b4:	d11f      	bne.n	80031f6 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80031ba:	e01c      	b.n	80031f6 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d902      	bls.n	80031ca <DMA_CheckFifoParam+0xb6>
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80031c8:	e018      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	73fb      	strb	r3, [r7, #15]
        break;
 80031ce:	e015      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d00e      	beq.n	80031fa <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	73fb      	strb	r3, [r7, #15]
    break;
 80031e0:	e00b      	b.n	80031fa <DMA_CheckFifoParam+0xe6>
        break;
 80031e2:	bf00      	nop
 80031e4:	e00a      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031e6:	bf00      	nop
 80031e8:	e008      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031ea:	bf00      	nop
 80031ec:	e006      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031ee:	bf00      	nop
 80031f0:	e004      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031f2:	bf00      	nop
 80031f4:	e002      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
        break;
 80031f6:	bf00      	nop
 80031f8:	e000      	b.n	80031fc <DMA_CheckFifoParam+0xe8>
    break;
 80031fa:	bf00      	nop
    }
  }

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3714      	adds	r7, #20
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop

0800320c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a38      	ldr	r2, [pc, #224]	; (8003300 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d022      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a36      	ldr	r2, [pc, #216]	; (8003304 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a35      	ldr	r2, [pc, #212]	; (8003308 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d018      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a33      	ldr	r2, [pc, #204]	; (800330c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a30      	ldr	r2, [pc, #192]	; (8003314 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a2f      	ldr	r2, [pc, #188]	; (8003318 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a2d      	ldr	r2, [pc, #180]	; (800331c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d101      	bne.n	800326e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800326a:	2301      	movs	r3, #1
 800326c:	e000      	b.n	8003270 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800326e:	2300      	movs	r3, #0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d01a      	beq.n	80032aa <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	b2db      	uxtb	r3, r3
 800327a:	3b08      	subs	r3, #8
 800327c:	4a28      	ldr	r2, [pc, #160]	; (8003320 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800327e:	fba2 2303 	umull	r2, r3, r2, r3
 8003282:	091b      	lsrs	r3, r3, #4
 8003284:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4b26      	ldr	r3, [pc, #152]	; (8003324 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800328a:	4413      	add	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	461a      	mov	r2, r3
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a24      	ldr	r2, [pc, #144]	; (8003328 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003298:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f003 031f 	and.w	r3, r3, #31
 80032a0:	2201      	movs	r2, #1
 80032a2:	409a      	lsls	r2, r3
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80032a8:	e024      	b.n	80032f4 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	3b10      	subs	r3, #16
 80032b2:	4a1e      	ldr	r2, [pc, #120]	; (800332c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80032b4:	fba2 2303 	umull	r2, r3, r2, r3
 80032b8:	091b      	lsrs	r3, r3, #4
 80032ba:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	4a1c      	ldr	r2, [pc, #112]	; (8003330 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d806      	bhi.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	4a1b      	ldr	r2, [pc, #108]	; (8003334 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d902      	bls.n	80032d2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	3308      	adds	r3, #8
 80032d0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80032d2:	68fa      	ldr	r2, [r7, #12]
 80032d4:	4b18      	ldr	r3, [pc, #96]	; (8003338 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	461a      	mov	r2, r3
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	4a16      	ldr	r2, [pc, #88]	; (800333c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80032e4:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	f003 031f 	and.w	r3, r3, #31
 80032ec:	2201      	movs	r2, #1
 80032ee:	409a      	lsls	r2, r3
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80032f4:	bf00      	nop
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fe:	4770      	bx	lr
 8003300:	58025408 	.word	0x58025408
 8003304:	5802541c 	.word	0x5802541c
 8003308:	58025430 	.word	0x58025430
 800330c:	58025444 	.word	0x58025444
 8003310:	58025458 	.word	0x58025458
 8003314:	5802546c 	.word	0x5802546c
 8003318:	58025480 	.word	0x58025480
 800331c:	58025494 	.word	0x58025494
 8003320:	cccccccd 	.word	0xcccccccd
 8003324:	16009600 	.word	0x16009600
 8003328:	58025880 	.word	0x58025880
 800332c:	aaaaaaab 	.word	0xaaaaaaab
 8003330:	400204b8 	.word	0x400204b8
 8003334:	4002040f 	.word	0x4002040f
 8003338:	10008200 	.word	0x10008200
 800333c:	40020880 	.word	0x40020880

08003340 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003340:	b480      	push	{r7}
 8003342:	b085      	sub	sp, #20
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	b2db      	uxtb	r3, r3
 800334e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d04a      	beq.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b08      	cmp	r3, #8
 800335a:	d847      	bhi.n	80033ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a25      	ldr	r2, [pc, #148]	; (80033f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d022      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a24      	ldr	r2, [pc, #144]	; (80033fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d01d      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a22      	ldr	r2, [pc, #136]	; (8003400 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d018      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	; (8003404 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1f      	ldr	r2, [pc, #124]	; (8003408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00e      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1e      	ldr	r2, [pc, #120]	; (800340c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d009      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1c      	ldr	r2, [pc, #112]	; (8003410 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d004      	beq.n	80033ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1b      	ldr	r2, [pc, #108]	; (8003414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d101      	bne.n	80033b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80033ac:	2301      	movs	r3, #1
 80033ae:	e000      	b.n	80033b2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80033b0:	2300      	movs	r3, #0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d00a      	beq.n	80033cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80033b6:	68fa      	ldr	r2, [r7, #12]
 80033b8:	4b17      	ldr	r3, [pc, #92]	; (8003418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80033ba:	4413      	add	r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	461a      	mov	r2, r3
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a15      	ldr	r2, [pc, #84]	; (800341c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80033c8:	671a      	str	r2, [r3, #112]	; 0x70
 80033ca:	e009      	b.n	80033e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	4b14      	ldr	r3, [pc, #80]	; (8003420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	461a      	mov	r2, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a11      	ldr	r2, [pc, #68]	; (8003424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80033de:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	3b01      	subs	r3, #1
 80033e4:	2201      	movs	r2, #1
 80033e6:	409a      	lsls	r2, r3
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80033ec:	bf00      	nop
 80033ee:	3714      	adds	r7, #20
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr
 80033f8:	58025408 	.word	0x58025408
 80033fc:	5802541c 	.word	0x5802541c
 8003400:	58025430 	.word	0x58025430
 8003404:	58025444 	.word	0x58025444
 8003408:	58025458 	.word	0x58025458
 800340c:	5802546c 	.word	0x5802546c
 8003410:	58025480 	.word	0x58025480
 8003414:	58025494 	.word	0x58025494
 8003418:	1600963f 	.word	0x1600963f
 800341c:	58025940 	.word	0x58025940
 8003420:	1000823f 	.word	0x1000823f
 8003424:	40020940 	.word	0x40020940

08003428 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b098      	sub	sp, #96	; 0x60
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003430:	4a84      	ldr	r2, [pc, #528]	; (8003644 <HAL_FDCAN_Init+0x21c>)
 8003432:	f107 030c 	add.w	r3, r7, #12
 8003436:	4611      	mov	r1, r2
 8003438:	224c      	movs	r2, #76	; 0x4c
 800343a:	4618      	mov	r0, r3
 800343c:	f010 f95c 	bl	80136f8 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e1ca      	b.n	80037e0 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a7e      	ldr	r2, [pc, #504]	; (8003648 <HAL_FDCAN_Init+0x220>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d106      	bne.n	8003462 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800345c:	461a      	mov	r2, r3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b00      	cmp	r3, #0
 800346c:	d106      	bne.n	800347c <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003476:	6878      	ldr	r0, [r7, #4]
 8003478:	f7fd fe08 	bl	800108c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	699a      	ldr	r2, [r3, #24]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f022 0210 	bic.w	r2, r2, #16
 800348a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800348c:	f7fe f9c0 	bl	8001810 <HAL_GetTick>
 8003490:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003492:	e014      	b.n	80034be <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003494:	f7fe f9bc 	bl	8001810 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b0a      	cmp	r3, #10
 80034a0:	d90d      	bls.n	80034be <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034a8:	f043 0201 	orr.w	r2, r3, #1
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2203      	movs	r2, #3
 80034b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80034ba:	2301      	movs	r3, #1
 80034bc:	e190      	b.n	80037e0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	f003 0308 	and.w	r3, r3, #8
 80034c8:	2b08      	cmp	r3, #8
 80034ca:	d0e3      	beq.n	8003494 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	699a      	ldr	r2, [r3, #24]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80034dc:	f7fe f998 	bl	8001810 <HAL_GetTick>
 80034e0:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80034e2:	e014      	b.n	800350e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80034e4:	f7fe f994 	bl	8001810 <HAL_GetTick>
 80034e8:	4602      	mov	r2, r0
 80034ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ec:	1ad3      	subs	r3, r2, r3
 80034ee:	2b0a      	cmp	r3, #10
 80034f0:	d90d      	bls.n	800350e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2203      	movs	r2, #3
 8003506:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e168      	b.n	80037e0 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	699b      	ldr	r3, [r3, #24]
 8003514:	f003 0301 	and.w	r3, r3, #1
 8003518:	2b00      	cmp	r3, #0
 800351a:	d0e3      	beq.n	80034e4 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f042 0202 	orr.w	r2, r2, #2
 800352a:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	7c1b      	ldrb	r3, [r3, #16]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d108      	bne.n	8003546 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	699a      	ldr	r2, [r3, #24]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003542:	619a      	str	r2, [r3, #24]
 8003544:	e007      	b.n	8003556 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	699a      	ldr	r2, [r3, #24]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003554:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7c5b      	ldrb	r3, [r3, #17]
 800355a:	2b01      	cmp	r3, #1
 800355c:	d108      	bne.n	8003570 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699a      	ldr	r2, [r3, #24]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800356c:	619a      	str	r2, [r3, #24]
 800356e:	e007      	b.n	8003580 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	699a      	ldr	r2, [r3, #24]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800357e:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	7c9b      	ldrb	r3, [r3, #18]
 8003584:	2b01      	cmp	r3, #1
 8003586:	d108      	bne.n	800359a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003596:	619a      	str	r2, [r3, #24]
 8003598:	e007      	b.n	80035aa <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699a      	ldr	r2, [r3, #24]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80035a8:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	699b      	ldr	r3, [r3, #24]
 80035b0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689a      	ldr	r2, [r3, #8]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	430a      	orrs	r2, r1
 80035be:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	699a      	ldr	r2, [r3, #24]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80035ce:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691a      	ldr	r2, [r3, #16]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	2b01      	cmp	r3, #1
 80035e6:	d108      	bne.n	80035fa <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699a      	ldr	r2, [r3, #24]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0204 	orr.w	r2, r2, #4
 80035f6:	619a      	str	r2, [r3, #24]
 80035f8:	e030      	b.n	800365c <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	68db      	ldr	r3, [r3, #12]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d02c      	beq.n	800365c <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d020      	beq.n	800364c <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699a      	ldr	r2, [r3, #24]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003618:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	691a      	ldr	r2, [r3, #16]
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f042 0210 	orr.w	r2, r2, #16
 8003628:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b03      	cmp	r3, #3
 8003630:	d114      	bne.n	800365c <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	699a      	ldr	r2, [r3, #24]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f042 0220 	orr.w	r2, r2, #32
 8003640:	619a      	str	r2, [r3, #24]
 8003642:	e00b      	b.n	800365c <HAL_FDCAN_Init+0x234>
 8003644:	08013fb4 	.word	0x08013fb4
 8003648:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	699a      	ldr	r2, [r3, #24]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f042 0220 	orr.w	r2, r2, #32
 800365a:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	3b01      	subs	r3, #1
 8003662:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	3b01      	subs	r3, #1
 800366a:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800366c:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003674:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	3b01      	subs	r3, #1
 800367e:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003684:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003686:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003690:	d115      	bne.n	80036be <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	3b01      	subs	r3, #1
 800369e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036a0:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a6:	3b01      	subs	r3, #1
 80036a8:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80036aa:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b2:	3b01      	subs	r3, #1
 80036b4:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80036ba:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80036bc:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	430a      	orrs	r2, r1
 80036d8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036e4:	4413      	add	r3, r2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d012      	beq.n	8003710 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80036f2:	f023 0107 	bic.w	r1, r3, #7
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003700:	4413      	add	r3, r2
 8003702:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003714:	2b00      	cmp	r3, #0
 8003716:	d012      	beq.n	800373e <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003720:	f023 0107 	bic.w	r1, r3, #7
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003728:	009b      	lsls	r3, r3, #2
 800372a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800372e:	4413      	add	r3, r2
 8003730:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003742:	2b00      	cmp	r3, #0
 8003744:	d013      	beq.n	800376e <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800374e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800375c:	4413      	add	r3, r2
 800375e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003762:	011a      	lsls	r2, r3, #4
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003772:	2b00      	cmp	r3, #0
 8003774:	d013      	beq.n	800379e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800377e:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800378c:	4413      	add	r3, r2
 800378e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8003792:	021a      	lsls	r2, r3, #8
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	430a      	orrs	r2, r1
 800379a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a11      	ldr	r2, [pc, #68]	; (80037e8 <HAL_FDCAN_Init+0x3c0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d107      	bne.n	80037b8 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	685b      	ldr	r3, [r3, #4]
 80037b2:	f022 0203 	bic.w	r2, r2, #3
 80037b6:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f000 f80b 	bl	80037ec <FDCAN_CalcultateRamBlockAddresses>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80037dc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3760      	adds	r7, #96	; 0x60
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	4000a000 	.word	0x4000a000

080037ec <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80037f8:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003802:	4ba7      	ldr	r3, [pc, #668]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003804:	4013      	ands	r3, r2
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	0091      	lsls	r1, r2, #2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	430b      	orrs	r3, r1
 8003810:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800381c:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	041a      	lsls	r2, r3, #16
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	430a      	orrs	r2, r1
 800382c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003834:	68ba      	ldr	r2, [r7, #8]
 8003836:	4413      	add	r3, r2
 8003838:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003842:	4b97      	ldr	r3, [pc, #604]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003844:	4013      	ands	r3, r2
 8003846:	68ba      	ldr	r2, [r7, #8]
 8003848:	0091      	lsls	r1, r2, #2
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	6812      	ldr	r2, [r2, #0]
 800384e:	430b      	orrs	r3, r1
 8003850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800385c:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003864:	041a      	lsls	r2, r3, #16
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	430a      	orrs	r2, r1
 800386c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003874:	005b      	lsls	r3, r3, #1
 8003876:	68ba      	ldr	r2, [r7, #8]
 8003878:	4413      	add	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8003884:	4b86      	ldr	r3, [pc, #536]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003886:	4013      	ands	r3, r2
 8003888:	68ba      	ldr	r2, [r7, #8]
 800388a:	0091      	lsls	r1, r2, #2
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6812      	ldr	r2, [r2, #0]
 8003890:	430b      	orrs	r3, r1
 8003892:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800389e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	041a      	lsls	r2, r3, #16
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	430a      	orrs	r2, r1
 80038ae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80038ba:	fb02 f303 	mul.w	r3, r2, r3
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	4413      	add	r3, r2
 80038c2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80038cc:	4b74      	ldr	r3, [pc, #464]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80038ce:	4013      	ands	r3, r2
 80038d0:	68ba      	ldr	r2, [r7, #8]
 80038d2:	0091      	lsls	r1, r2, #2
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	6812      	ldr	r2, [r2, #0]
 80038d8:	430b      	orrs	r3, r1
 80038da:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80038e6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ee:	041a      	lsls	r2, r3, #16
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	430a      	orrs	r2, r1
 80038f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003902:	fb02 f303 	mul.w	r3, r2, r3
 8003906:	68ba      	ldr	r2, [r7, #8]
 8003908:	4413      	add	r3, r2
 800390a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8003914:	4b62      	ldr	r3, [pc, #392]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003916:	4013      	ands	r3, r2
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	0091      	lsls	r1, r2, #2
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6812      	ldr	r2, [r2, #0]
 8003920:	430b      	orrs	r3, r1
 8003922:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800392e:	fb02 f303 	mul.w	r3, r2, r3
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	4413      	add	r3, r2
 8003936:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003940:	4b57      	ldr	r3, [pc, #348]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003942:	4013      	ands	r3, r2
 8003944:	68ba      	ldr	r2, [r7, #8]
 8003946:	0091      	lsls	r1, r2, #2
 8003948:	687a      	ldr	r2, [r7, #4]
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	430b      	orrs	r3, r1
 800394e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800395a:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003962:	041a      	lsls	r2, r3, #16
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	68ba      	ldr	r2, [r7, #8]
 8003976:	4413      	add	r3, r2
 8003978:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8003982:	4b47      	ldr	r3, [pc, #284]	; (8003aa0 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8003984:	4013      	ands	r3, r2
 8003986:	68ba      	ldr	r2, [r7, #8]
 8003988:	0091      	lsls	r1, r2, #2
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6812      	ldr	r2, [r2, #0]
 800398e:	430b      	orrs	r3, r1
 8003990:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800399c:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039a4:	041a      	lsls	r2, r3, #16
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	430a      	orrs	r2, r1
 80039ac:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80039b8:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039c0:	061a      	lsls	r2, r3, #24
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039d0:	4b34      	ldr	r3, [pc, #208]	; (8003aa4 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80039d2:	4413      	add	r3, r2
 80039d4:	009a      	lsls	r2, r3, #2
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	441a      	add	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	441a      	add	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8003a06:	fb01 f303 	mul.w	r3, r1, r3
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	441a      	add	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003a1e:	fb01 f303 	mul.w	r3, r1, r3
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	441a      	add	r2, r3
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	441a      	add	r2, r3
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a4e:	00db      	lsls	r3, r3, #3
 8003a50:	441a      	add	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a66:	fb01 f303 	mul.w	r3, r1, r3
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a7e:	6879      	ldr	r1, [r7, #4]
 8003a80:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8003a82:	fb01 f303 	mul.w	r3, r1, r3
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	441a      	add	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a96:	4a04      	ldr	r2, [pc, #16]	; (8003aa8 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d915      	bls.n	8003ac8 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8003a9c:	e006      	b.n	8003aac <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8003a9e:	bf00      	nop
 8003aa0:	ffff0003 	.word	0xffff0003
 8003aa4:	10002b00 	.word	0x10002b00
 8003aa8:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab2:	f043 0220 	orr.w	r2, r3, #32
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2203      	movs	r2, #3
 8003ac0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e010      	b.n	8003aea <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003acc:	60fb      	str	r3, [r7, #12]
 8003ace:	e005      	b.n	8003adc <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	3304      	adds	r3, #4
 8003ada:	60fb      	str	r3, [r7, #12]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	68fa      	ldr	r2, [r7, #12]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d3f3      	bcc.n	8003ad0 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3714      	adds	r7, #20
 8003aee:	46bd      	mov	sp, r7
 8003af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af4:	4770      	bx	lr
 8003af6:	bf00      	nop

08003af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b089      	sub	sp, #36	; 0x24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8003b02:	2300      	movs	r3, #0
 8003b04:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <HAL_GPIO_Init+0x234>)
 8003b08:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b0a:	e194      	b.n	8003e36 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	2101      	movs	r1, #1
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	fa01 f303 	lsl.w	r3, r1, r3
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f000 8186 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d00b      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	2b02      	cmp	r3, #2
 8003b32:	d007      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003b38:	2b11      	cmp	r3, #17
 8003b3a:	d003      	beq.n	8003b44 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	2b12      	cmp	r3, #18
 8003b42:	d130      	bne.n	8003ba6 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	005b      	lsls	r3, r3, #1
 8003b4e:	2203      	movs	r2, #3
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	68da      	ldr	r2, [r3, #12]
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	fa02 f303 	lsl.w	r3, r2, r3
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b82:	43db      	mvns	r3, r3
 8003b84:	69ba      	ldr	r2, [r7, #24]
 8003b86:	4013      	ands	r3, r2
 8003b88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	091b      	lsrs	r3, r3, #4
 8003b90:	f003 0201 	and.w	r2, r3, #1
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	fa02 f303 	lsl.w	r3, r2, r3
 8003b9a:	69ba      	ldr	r2, [r7, #24]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb6:	43db      	mvns	r3, r3
 8003bb8:	69ba      	ldr	r2, [r7, #24]
 8003bba:	4013      	ands	r3, r2
 8003bbc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	005b      	lsls	r3, r3, #1
 8003bc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003bca:	69ba      	ldr	r2, [r7, #24]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	69ba      	ldr	r2, [r7, #24]
 8003bd4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	2b02      	cmp	r3, #2
 8003bdc:	d003      	beq.n	8003be6 <HAL_GPIO_Init+0xee>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	2b12      	cmp	r3, #18
 8003be4:	d123      	bne.n	8003c2e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	08da      	lsrs	r2, r3, #3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	3208      	adds	r2, #8
 8003bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8003bf4:	69fb      	ldr	r3, [r7, #28]
 8003bf6:	f003 0307 	and.w	r3, r3, #7
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	220f      	movs	r2, #15
 8003bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8003c02:	43db      	mvns	r3, r3
 8003c04:	69ba      	ldr	r2, [r7, #24]
 8003c06:	4013      	ands	r3, r2
 8003c08:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	691a      	ldr	r2, [r3, #16]
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	f003 0307 	and.w	r3, r3, #7
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	fa02 f303 	lsl.w	r3, r2, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	08da      	lsrs	r2, r3, #3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	3208      	adds	r2, #8
 8003c28:	69b9      	ldr	r1, [r7, #24]
 8003c2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003c34:	69fb      	ldr	r3, [r7, #28]
 8003c36:	005b      	lsls	r3, r3, #1
 8003c38:	2203      	movs	r2, #3
 8003c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f003 0203 	and.w	r2, r3, #3
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	69ba      	ldr	r2, [r7, #24]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 80e0 	beq.w	8003e30 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c70:	4b2f      	ldr	r3, [pc, #188]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c72:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c76:	4a2e      	ldr	r2, [pc, #184]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c78:	f043 0302 	orr.w	r3, r3, #2
 8003c7c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c80:	4b2b      	ldr	r3, [pc, #172]	; (8003d30 <HAL_GPIO_Init+0x238>)
 8003c82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	60fb      	str	r3, [r7, #12]
 8003c8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c8e:	4a29      	ldr	r2, [pc, #164]	; (8003d34 <HAL_GPIO_Init+0x23c>)
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	089b      	lsrs	r3, r3, #2
 8003c94:	3302      	adds	r3, #2
 8003c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003c9c:	69fb      	ldr	r3, [r7, #28]
 8003c9e:	f003 0303 	and.w	r3, r3, #3
 8003ca2:	009b      	lsls	r3, r3, #2
 8003ca4:	220f      	movs	r2, #15
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <HAL_GPIO_Init+0x240>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d052      	beq.n	8003d60 <HAL_GPIO_Init+0x268>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a1f      	ldr	r2, [pc, #124]	; (8003d3c <HAL_GPIO_Init+0x244>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d031      	beq.n	8003d26 <HAL_GPIO_Init+0x22e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a1e      	ldr	r2, [pc, #120]	; (8003d40 <HAL_GPIO_Init+0x248>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d02b      	beq.n	8003d22 <HAL_GPIO_Init+0x22a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	4a1d      	ldr	r2, [pc, #116]	; (8003d44 <HAL_GPIO_Init+0x24c>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d025      	beq.n	8003d1e <HAL_GPIO_Init+0x226>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a1c      	ldr	r2, [pc, #112]	; (8003d48 <HAL_GPIO_Init+0x250>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d01f      	beq.n	8003d1a <HAL_GPIO_Init+0x222>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a1b      	ldr	r2, [pc, #108]	; (8003d4c <HAL_GPIO_Init+0x254>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d019      	beq.n	8003d16 <HAL_GPIO_Init+0x21e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a1a      	ldr	r2, [pc, #104]	; (8003d50 <HAL_GPIO_Init+0x258>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d013      	beq.n	8003d12 <HAL_GPIO_Init+0x21a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a19      	ldr	r2, [pc, #100]	; (8003d54 <HAL_GPIO_Init+0x25c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d00d      	beq.n	8003d0e <HAL_GPIO_Init+0x216>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a18      	ldr	r2, [pc, #96]	; (8003d58 <HAL_GPIO_Init+0x260>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d007      	beq.n	8003d0a <HAL_GPIO_Init+0x212>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a17      	ldr	r2, [pc, #92]	; (8003d5c <HAL_GPIO_Init+0x264>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d101      	bne.n	8003d06 <HAL_GPIO_Init+0x20e>
 8003d02:	2309      	movs	r3, #9
 8003d04:	e02d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d06:	230a      	movs	r3, #10
 8003d08:	e02b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0a:	2308      	movs	r3, #8
 8003d0c:	e029      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e027      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d12:	2306      	movs	r3, #6
 8003d14:	e025      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e023      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e021      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e01f      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e01d      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e01b      	b.n	8003d62 <HAL_GPIO_Init+0x26a>
 8003d2a:	bf00      	nop
 8003d2c:	58000080 	.word	0x58000080
 8003d30:	58024400 	.word	0x58024400
 8003d34:	58000400 	.word	0x58000400
 8003d38:	58020000 	.word	0x58020000
 8003d3c:	58020400 	.word	0x58020400
 8003d40:	58020800 	.word	0x58020800
 8003d44:	58020c00 	.word	0x58020c00
 8003d48:	58021000 	.word	0x58021000
 8003d4c:	58021400 	.word	0x58021400
 8003d50:	58021800 	.word	0x58021800
 8003d54:	58021c00 	.word	0x58021c00
 8003d58:	58022000 	.word	0x58022000
 8003d5c:	58022400 	.word	0x58022400
 8003d60:	2300      	movs	r3, #0
 8003d62:	69fa      	ldr	r2, [r7, #28]
 8003d64:	f002 0203 	and.w	r2, r2, #3
 8003d68:	0092      	lsls	r2, r2, #2
 8003d6a:	4093      	lsls	r3, r2
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d72:	4938      	ldr	r1, [pc, #224]	; (8003e54 <HAL_GPIO_Init+0x35c>)
 8003d74:	69fb      	ldr	r3, [r7, #28]
 8003d76:	089b      	lsrs	r3, r3, #2
 8003d78:	3302      	adds	r3, #2
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	43db      	mvns	r3, r3
 8003d8a:	69ba      	ldr	r2, [r7, #24]
 8003d8c:	4013      	ands	r3, r2
 8003d8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d003      	beq.n	8003da4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4013      	ands	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003dd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	43db      	mvns	r3, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4013      	ands	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d003      	beq.n	8003dfa <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003df2:	69ba      	ldr	r2, [r7, #24]
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003dfa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003dfe:	69bb      	ldr	r3, [r7, #24]
 8003e00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003e02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	43db      	mvns	r3, r3
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4013      	ands	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d003      	beq.n	8003e28 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003e28:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003e2c:	69bb      	ldr	r3, [r7, #24]
 8003e2e:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003e30:	69fb      	ldr	r3, [r7, #28]
 8003e32:	3301      	adds	r3, #1
 8003e34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	69fb      	ldr	r3, [r7, #28]
 8003e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	f47f ae63 	bne.w	8003b0c <HAL_GPIO_Init+0x14>
  }
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	; 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58000400 	.word	0x58000400

08003e58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	460b      	mov	r3, r1
 8003e62:	807b      	strh	r3, [r7, #2]
 8003e64:	4613      	mov	r3, r2
 8003e66:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e68:	787b      	ldrb	r3, [r7, #1]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e6e:	887a      	ldrh	r2, [r7, #2]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003e74:	e003      	b.n	8003e7e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003e76:	887b      	ldrh	r3, [r7, #2]
 8003e78:	041a      	lsls	r2, r3, #16
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	619a      	str	r2, [r3, #24]
}
 8003e7e:	bf00      	nop
 8003e80:	370c      	adds	r7, #12
 8003e82:	46bd      	mov	sp, r7
 8003e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e88:	4770      	bx	lr

08003e8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e8a:	b480      	push	{r7}
 8003e8c:	b083      	sub	sp, #12
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
 8003e92:	460b      	mov	r3, r1
 8003e94:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	695a      	ldr	r2, [r3, #20]
 8003e9a:	887b      	ldrh	r3, [r7, #2]
 8003e9c:	401a      	ands	r2, r3
 8003e9e:	887b      	ldrh	r3, [r7, #2]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d104      	bne.n	8003eae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003ea4:	887b      	ldrh	r3, [r7, #2]
 8003ea6:	041a      	lsls	r2, r3, #16
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003eac:	e002      	b.n	8003eb4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003eae:	887a      	ldrh	r2, [r7, #2]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	619a      	str	r2, [r3, #24]
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003ec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ec2:	b08f      	sub	sp, #60	; 0x3c
 8003ec4:	af0a      	add	r7, sp, #40	; 0x28
 8003ec6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d101      	bne.n	8003ed2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e116      	b.n	8004100 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d106      	bne.n	8003ef2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f00f f8ab 	bl	8013048 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2203      	movs	r2, #3
 8003ef6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d102      	bne.n	8003f0c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4618      	mov	r0, r3
 8003f12:	f008 f8cc 	bl	800c0ae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	687e      	ldr	r6, [r7, #4]
 8003f1e:	466d      	mov	r5, sp
 8003f20:	f106 0410 	add.w	r4, r6, #16
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f30:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f34:	1d33      	adds	r3, r6, #4
 8003f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f007 ffa3 	bl	800be84 <USB_CoreInit>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0d7      	b.n	8004100 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2100      	movs	r1, #0
 8003f56:	4618      	mov	r0, r3
 8003f58:	f008 f8ba 	bl	800c0d0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	73fb      	strb	r3, [r7, #15]
 8003f60:	e04a      	b.n	8003ff8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003f62:	7bfa      	ldrb	r2, [r7, #15]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	333d      	adds	r3, #61	; 0x3d
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003f76:	7bfa      	ldrb	r2, [r7, #15]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	00db      	lsls	r3, r3, #3
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	333c      	adds	r3, #60	; 0x3c
 8003f86:	7bfa      	ldrb	r2, [r7, #15]
 8003f88:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003f8a:	7bfa      	ldrb	r2, [r7, #15]
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	b298      	uxth	r0, r3
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	4613      	mov	r3, r2
 8003f94:	00db      	lsls	r3, r3, #3
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	009b      	lsls	r3, r3, #2
 8003f9a:	440b      	add	r3, r1
 8003f9c:	3342      	adds	r3, #66	; 0x42
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003fa2:	7bfa      	ldrb	r2, [r7, #15]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	00db      	lsls	r3, r3, #3
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	333f      	adds	r3, #63	; 0x3f
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003fb6:	7bfa      	ldrb	r2, [r7, #15]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	00db      	lsls	r3, r3, #3
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	3344      	adds	r3, #68	; 0x44
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003fca:	7bfa      	ldrb	r2, [r7, #15]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	00db      	lsls	r3, r3, #3
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	3348      	adds	r3, #72	; 0x48
 8003fda:	2200      	movs	r2, #0
 8003fdc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003fde:	7bfa      	ldrb	r2, [r7, #15]
 8003fe0:	6879      	ldr	r1, [r7, #4]
 8003fe2:	4613      	mov	r3, r2
 8003fe4:	00db      	lsls	r3, r3, #3
 8003fe6:	1a9b      	subs	r3, r3, r2
 8003fe8:	009b      	lsls	r3, r3, #2
 8003fea:	440b      	add	r3, r1
 8003fec:	3350      	adds	r3, #80	; 0x50
 8003fee:	2200      	movs	r2, #0
 8003ff0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	73fb      	strb	r3, [r7, #15]
 8003ff8:	7bfa      	ldrb	r2, [r7, #15]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d3af      	bcc.n	8003f62 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004002:	2300      	movs	r3, #0
 8004004:	73fb      	strb	r3, [r7, #15]
 8004006:	e044      	b.n	8004092 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004008:	7bfa      	ldrb	r2, [r7, #15]
 800400a:	6879      	ldr	r1, [r7, #4]
 800400c:	4613      	mov	r3, r2
 800400e:	00db      	lsls	r3, r3, #3
 8004010:	1a9b      	subs	r3, r3, r2
 8004012:	009b      	lsls	r3, r3, #2
 8004014:	440b      	add	r3, r1
 8004016:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800401a:	2200      	movs	r2, #0
 800401c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800401e:	7bfa      	ldrb	r2, [r7, #15]
 8004020:	6879      	ldr	r1, [r7, #4]
 8004022:	4613      	mov	r3, r2
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a9b      	subs	r3, r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	440b      	add	r3, r1
 800402c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004034:	7bfa      	ldrb	r2, [r7, #15]
 8004036:	6879      	ldr	r1, [r7, #4]
 8004038:	4613      	mov	r3, r2
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004046:	2200      	movs	r2, #0
 8004048:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800404a:	7bfa      	ldrb	r2, [r7, #15]
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	00db      	lsls	r3, r3, #3
 8004052:	1a9b      	subs	r3, r3, r2
 8004054:	009b      	lsls	r3, r3, #2
 8004056:	440b      	add	r3, r1
 8004058:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004060:	7bfa      	ldrb	r2, [r7, #15]
 8004062:	6879      	ldr	r1, [r7, #4]
 8004064:	4613      	mov	r3, r2
 8004066:	00db      	lsls	r3, r3, #3
 8004068:	1a9b      	subs	r3, r3, r2
 800406a:	009b      	lsls	r3, r3, #2
 800406c:	440b      	add	r3, r1
 800406e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004072:	2200      	movs	r2, #0
 8004074:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004076:	7bfa      	ldrb	r2, [r7, #15]
 8004078:	6879      	ldr	r1, [r7, #4]
 800407a:	4613      	mov	r3, r2
 800407c:	00db      	lsls	r3, r3, #3
 800407e:	1a9b      	subs	r3, r3, r2
 8004080:	009b      	lsls	r3, r3, #2
 8004082:	440b      	add	r3, r1
 8004084:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004088:	2200      	movs	r2, #0
 800408a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800408c:	7bfb      	ldrb	r3, [r7, #15]
 800408e:	3301      	adds	r3, #1
 8004090:	73fb      	strb	r3, [r7, #15]
 8004092:	7bfa      	ldrb	r2, [r7, #15]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	429a      	cmp	r2, r3
 800409a:	d3b5      	bcc.n	8004008 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	603b      	str	r3, [r7, #0]
 80040a2:	687e      	ldr	r6, [r7, #4]
 80040a4:	466d      	mov	r5, sp
 80040a6:	f106 0410 	add.w	r4, r6, #16
 80040aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040b6:	e885 0003 	stmia.w	r5, {r0, r1}
 80040ba:	1d33      	adds	r3, r6, #4
 80040bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040be:	6838      	ldr	r0, [r7, #0]
 80040c0:	f008 f830 	bl	800c124 <USB_DevInit>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e014      	b.n	8004100 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d102      	bne.n	80040f4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f001 f8be 	bl	8005270 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f009 f86f 	bl	800d1dc <USB_DevDisconnect>

  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3714      	adds	r7, #20
 8004104:	46bd      	mov	sp, r7
 8004106:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004108 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800411c:	2b01      	cmp	r3, #1
 800411e:	d101      	bne.n	8004124 <HAL_PCD_Start+0x1c>
 8004120:	2302      	movs	r3, #2
 8004122:	e020      	b.n	8004166 <HAL_PCD_Start+0x5e>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004130:	2b01      	cmp	r3, #1
 8004132:	d109      	bne.n	8004148 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004138:	2b01      	cmp	r3, #1
 800413a:	d005      	beq.n	8004148 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004140:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4618      	mov	r0, r3
 800414e:	f009 f82d 	bl	800d1ac <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4618      	mov	r0, r3
 8004158:	f007 ff98 	bl	800c08c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2200      	movs	r2, #0
 8004160:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004164:	2300      	movs	r3, #0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3710      	adds	r7, #16
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}

0800416e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800416e:	b590      	push	{r4, r7, lr}
 8004170:	b08d      	sub	sp, #52	; 0x34
 8004172:	af00      	add	r7, sp, #0
 8004174:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800417c:	6a3b      	ldr	r3, [r7, #32]
 800417e:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4618      	mov	r0, r3
 8004186:	f009 f8d4 	bl	800d332 <USB_GetMode>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	f040 83ca 	bne.w	8004926 <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4618      	mov	r0, r3
 8004198:	f009 f838 	bl	800d20c <USB_ReadInterrupts>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 83c0 	beq.w	8004924 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f009 f82f 	bl	800d20c <USB_ReadInterrupts>
 80041ae:	4603      	mov	r3, r0
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b02      	cmp	r3, #2
 80041b6:	d107      	bne.n	80041c8 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695a      	ldr	r2, [r3, #20]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f002 0202 	and.w	r2, r2, #2
 80041c6:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f009 f81d 	bl	800d20c <USB_ReadInterrupts>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f003 0310 	and.w	r3, r3, #16
 80041d8:	2b10      	cmp	r3, #16
 80041da:	d161      	bne.n	80042a0 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0210 	bic.w	r2, r2, #16
 80041ea:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80041f2:	69bb      	ldr	r3, [r7, #24]
 80041f4:	f003 020f 	and.w	r2, r3, #15
 80041f8:	4613      	mov	r3, r2
 80041fa:	00db      	lsls	r3, r3, #3
 80041fc:	1a9b      	subs	r3, r3, r2
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004204:	687a      	ldr	r2, [r7, #4]
 8004206:	4413      	add	r3, r2
 8004208:	3304      	adds	r3, #4
 800420a:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	0c5b      	lsrs	r3, r3, #17
 8004210:	f003 030f 	and.w	r3, r3, #15
 8004214:	2b02      	cmp	r3, #2
 8004216:	d124      	bne.n	8004262 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800421e:	4013      	ands	r3, r2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d035      	beq.n	8004290 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	091b      	lsrs	r3, r3, #4
 800422c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800422e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004232:	b29b      	uxth	r3, r3
 8004234:	461a      	mov	r2, r3
 8004236:	6a38      	ldr	r0, [r7, #32]
 8004238:	f008 fe95 	bl	800cf66 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	68da      	ldr	r2, [r3, #12]
 8004240:	69bb      	ldr	r3, [r7, #24]
 8004242:	091b      	lsrs	r3, r3, #4
 8004244:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004248:	441a      	add	r2, r3
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	699a      	ldr	r2, [r3, #24]
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	091b      	lsrs	r3, r3, #4
 8004256:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800425a:	441a      	add	r2, r3
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	619a      	str	r2, [r3, #24]
 8004260:	e016      	b.n	8004290 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8004262:	69bb      	ldr	r3, [r7, #24]
 8004264:	0c5b      	lsrs	r3, r3, #17
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	2b06      	cmp	r3, #6
 800426c:	d110      	bne.n	8004290 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004274:	2208      	movs	r2, #8
 8004276:	4619      	mov	r1, r3
 8004278:	6a38      	ldr	r0, [r7, #32]
 800427a:	f008 fe74 	bl	800cf66 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	699a      	ldr	r2, [r3, #24]
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	091b      	lsrs	r3, r3, #4
 8004286:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800428a:	441a      	add	r2, r3
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	699a      	ldr	r2, [r3, #24]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f042 0210 	orr.w	r2, r2, #16
 800429e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4618      	mov	r0, r3
 80042a6:	f008 ffb1 	bl	800d20c <USB_ReadInterrupts>
 80042aa:	4603      	mov	r3, r0
 80042ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042b0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80042b4:	d16e      	bne.n	8004394 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80042b6:	2300      	movs	r3, #0
 80042b8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f008 ffb7 	bl	800d232 <USB_ReadDevAllOutEpInterrupt>
 80042c4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80042c6:	e062      	b.n	800438e <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	f003 0301 	and.w	r3, r3, #1
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d057      	beq.n	8004382 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042d8:	b2d2      	uxtb	r2, r2
 80042da:	4611      	mov	r1, r2
 80042dc:	4618      	mov	r0, r3
 80042de:	f008 ffdc 	bl	800d29a <USB_ReadDevOutEPInterrupt>
 80042e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80042e4:	693b      	ldr	r3, [r7, #16]
 80042e6:	f003 0301 	and.w	r3, r3, #1
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00c      	beq.n	8004308 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	015a      	lsls	r2, r3, #5
 80042f2:	69fb      	ldr	r3, [r7, #28]
 80042f4:	4413      	add	r3, r2
 80042f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fa:	461a      	mov	r2, r3
 80042fc:	2301      	movs	r3, #1
 80042fe:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004300:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004302:	6878      	ldr	r0, [r7, #4]
 8004304:	f000 fe0a 	bl	8004f1c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f003 0308 	and.w	r3, r3, #8
 800430e:	2b00      	cmp	r3, #0
 8004310:	d00c      	beq.n	800432c <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	461a      	mov	r2, r3
 8004320:	2308      	movs	r3, #8
 8004322:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004324:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004326:	6878      	ldr	r0, [r7, #4]
 8004328:	f000 ff04 	bl	8005134 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	f003 0310 	and.w	r3, r3, #16
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004342:	461a      	mov	r2, r3
 8004344:	2310      	movs	r3, #16
 8004346:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b00      	cmp	r3, #0
 8004350:	d008      	beq.n	8004364 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	015a      	lsls	r2, r3, #5
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	4413      	add	r3, r2
 800435a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800435e:	461a      	mov	r2, r3
 8004360:	2320      	movs	r3, #32
 8004362:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d009      	beq.n	8004382 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	015a      	lsls	r2, r3, #5
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	4413      	add	r3, r2
 8004376:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800437a:	461a      	mov	r2, r3
 800437c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004380:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004384:	3301      	adds	r3, #1
 8004386:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800438a:	085b      	lsrs	r3, r3, #1
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800438e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004390:	2b00      	cmp	r3, #0
 8004392:	d199      	bne.n	80042c8 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	4618      	mov	r0, r3
 800439a:	f008 ff37 	bl	800d20c <USB_ReadInterrupts>
 800439e:	4603      	mov	r3, r0
 80043a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043a4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80043a8:	f040 80c0 	bne.w	800452c <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4618      	mov	r0, r3
 80043b2:	f008 ff58 	bl	800d266 <USB_ReadDevAllInEpInterrupt>
 80043b6:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80043b8:	2300      	movs	r3, #0
 80043ba:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80043bc:	e0b2      	b.n	8004524 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80043be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 80a7 	beq.w	8004518 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043d0:	b2d2      	uxtb	r2, r2
 80043d2:	4611      	mov	r1, r2
 80043d4:	4618      	mov	r0, r3
 80043d6:	f008 ff7e 	bl	800d2d6 <USB_ReadDevInEPInterrupt>
 80043da:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d057      	beq.n	8004496 <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	2201      	movs	r2, #1
 80043ee:	fa02 f303 	lsl.w	r3, r2, r3
 80043f2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80043f4:	69fb      	ldr	r3, [r7, #28]
 80043f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	43db      	mvns	r3, r3
 8004400:	69f9      	ldr	r1, [r7, #28]
 8004402:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004406:	4013      	ands	r3, r2
 8004408:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	015a      	lsls	r2, r3, #5
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	4413      	add	r3, r2
 8004412:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004416:	461a      	mov	r2, r3
 8004418:	2301      	movs	r3, #1
 800441a:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d132      	bne.n	800448a <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004428:	4613      	mov	r3, r2
 800442a:	00db      	lsls	r3, r3, #3
 800442c:	1a9b      	subs	r3, r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	3348      	adds	r3, #72	; 0x48
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443a:	4613      	mov	r3, r2
 800443c:	00db      	lsls	r3, r3, #3
 800443e:	1a9b      	subs	r3, r3, r2
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	4403      	add	r3, r0
 8004444:	3344      	adds	r3, #68	; 0x44
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4419      	add	r1, r3
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444e:	4613      	mov	r3, r2
 8004450:	00db      	lsls	r3, r3, #3
 8004452:	1a9b      	subs	r3, r3, r2
 8004454:	009b      	lsls	r3, r3, #2
 8004456:	4403      	add	r3, r0
 8004458:	3348      	adds	r3, #72	; 0x48
 800445a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	2b00      	cmp	r3, #0
 8004460:	d113      	bne.n	800448a <HAL_PCD_IRQHandler+0x31c>
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004466:	4613      	mov	r3, r2
 8004468:	00db      	lsls	r3, r3, #3
 800446a:	1a9b      	subs	r3, r3, r2
 800446c:	009b      	lsls	r3, r3, #2
 800446e:	440b      	add	r3, r1
 8004470:	3350      	adds	r3, #80	; 0x50
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d108      	bne.n	800448a <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6818      	ldr	r0, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004482:	461a      	mov	r2, r3
 8004484:	2101      	movs	r1, #1
 8004486:	f008 ff87 	bl	800d398 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800448a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448c:	b2db      	uxtb	r3, r3
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f00e fe58 	bl	8013146 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	f003 0308 	and.w	r3, r3, #8
 800449c:	2b00      	cmp	r3, #0
 800449e:	d008      	beq.n	80044b2 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80044a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a2:	015a      	lsls	r2, r3, #5
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	4413      	add	r3, r2
 80044a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ac:	461a      	mov	r2, r3
 80044ae:	2308      	movs	r3, #8
 80044b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f003 0310 	and.w	r3, r3, #16
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	015a      	lsls	r2, r3, #5
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4413      	add	r3, r2
 80044c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044c8:	461a      	mov	r2, r3
 80044ca:	2310      	movs	r3, #16
 80044cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d008      	beq.n	80044ea <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80044d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044e4:	461a      	mov	r2, r3
 80044e6:	2340      	movs	r3, #64	; 0x40
 80044e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	f003 0302 	and.w	r3, r3, #2
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d008      	beq.n	8004506 <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004500:	461a      	mov	r2, r3
 8004502:	2302      	movs	r3, #2
 8004504:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004506:	693b      	ldr	r3, [r7, #16]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004510:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f000 fc75 	bl	8004e02 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800451a:	3301      	adds	r3, #1
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800451e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004520:	085b      	lsrs	r3, r3, #1
 8004522:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	f47f af49 	bne.w	80043be <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f008 fe6b 	bl	800d20c <USB_ReadInterrupts>
 8004536:	4603      	mov	r3, r0
 8004538:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800453c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004540:	d122      	bne.n	8004588 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	69fa      	ldr	r2, [r7, #28]
 800454c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004550:	f023 0301 	bic.w	r3, r3, #1
 8004554:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800455c:	2b01      	cmp	r3, #1
 800455e:	d108      	bne.n	8004572 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004568:	2100      	movs	r1, #0
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fea4 	bl	80052b8 <HAL_PCDEx_LPM_Callback>
 8004570:	e002      	b.n	8004578 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	f00e fe5e 	bl	8013234 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	695a      	ldr	r2, [r3, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4618      	mov	r0, r3
 800458e:	f008 fe3d 	bl	800d20c <USB_ReadInterrupts>
 8004592:	4603      	mov	r3, r0
 8004594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004598:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800459c:	d112      	bne.n	80045c4 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800459e:	69fb      	ldr	r3, [r7, #28]
 80045a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d102      	bne.n	80045b4 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f00e fe1a 	bl	80131e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	695a      	ldr	r2, [r3, #20]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80045c2:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	4618      	mov	r0, r3
 80045ca:	f008 fe1f 	bl	800d20c <USB_ReadInterrupts>
 80045ce:	4603      	mov	r3, r0
 80045d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80045d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045d8:	d121      	bne.n	800461e <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	695a      	ldr	r2, [r3, #20]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80045e8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d111      	bne.n	8004618 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004602:	089b      	lsrs	r3, r3, #2
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800460e:	2101      	movs	r1, #1
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 fe51 	bl	80052b8 <HAL_PCDEx_LPM_Callback>
 8004616:	e002      	b.n	800461e <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f00e fde5 	bl	80131e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f008 fdf2 	bl	800d20c <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004632:	f040 80c7 	bne.w	80047c4 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	69fa      	ldr	r2, [r7, #28]
 8004640:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2110      	movs	r1, #16
 8004650:	4618      	mov	r0, r3
 8004652:	f007 fec5 	bl	800c3e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
 800465a:	e056      	b.n	800470a <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800465c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	461a      	mov	r2, r3
 800466a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800466e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004672:	015a      	lsls	r2, r3, #5
 8004674:	69fb      	ldr	r3, [r7, #28]
 8004676:	4413      	add	r3, r2
 8004678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004680:	0151      	lsls	r1, r2, #5
 8004682:	69fa      	ldr	r2, [r7, #28]
 8004684:	440a      	add	r2, r1
 8004686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800468a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800468e:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004692:	015a      	lsls	r2, r3, #5
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	4413      	add	r3, r2
 8004698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046a0:	0151      	lsls	r1, r2, #5
 80046a2:	69fa      	ldr	r2, [r7, #28]
 80046a4:	440a      	add	r2, r1
 80046a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046aa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046ae:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	69fb      	ldr	r3, [r7, #28]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	461a      	mov	r2, r3
 80046be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046c2:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80046c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c6:	015a      	lsls	r2, r3, #5
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	4413      	add	r3, r2
 80046cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046d4:	0151      	lsls	r1, r2, #5
 80046d6:	69fa      	ldr	r2, [r7, #28]
 80046d8:	440a      	add	r2, r1
 80046da:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80046e2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046f4:	0151      	lsls	r1, r2, #5
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	440a      	add	r2, r1
 80046fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046fe:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004702:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004706:	3301      	adds	r3, #1
 8004708:	62fb      	str	r3, [r7, #44]	; 0x2c
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	685b      	ldr	r3, [r3, #4]
 800470e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004710:	429a      	cmp	r2, r3
 8004712:	d3a3      	bcc.n	800465c <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8004714:	69fb      	ldr	r3, [r7, #28]
 8004716:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471a:	69db      	ldr	r3, [r3, #28]
 800471c:	69fa      	ldr	r2, [r7, #28]
 800471e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004722:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8004726:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800472c:	2b00      	cmp	r3, #0
 800472e:	d016      	beq.n	800475e <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004736:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004740:	f043 030b 	orr.w	r3, r3, #11
 8004744:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004748:	69fb      	ldr	r3, [r7, #28]
 800474a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800474e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004750:	69fa      	ldr	r2, [r7, #28]
 8004752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004756:	f043 030b 	orr.w	r3, r3, #11
 800475a:	6453      	str	r3, [r2, #68]	; 0x44
 800475c:	e015      	b.n	800478a <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004764:	695a      	ldr	r2, [r3, #20]
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476c:	4619      	mov	r1, r3
 800476e:	f242 032b 	movw	r3, #8235	; 0x202b
 8004772:	4313      	orrs	r3, r2
 8004774:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004784:	f043 030b 	orr.w	r3, r3, #11
 8004788:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800478a:	69fb      	ldr	r3, [r7, #28]
 800478c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69fa      	ldr	r2, [r7, #28]
 8004794:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004798:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800479c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6818      	ldr	r0, [r3, #0]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80047ae:	461a      	mov	r2, r3
 80047b0:	f008 fdf2 	bl	800d398 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80047c2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4618      	mov	r0, r3
 80047ca:	f008 fd1f 	bl	800d20c <USB_ReadInterrupts>
 80047ce:	4603      	mov	r3, r0
 80047d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80047d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d8:	d124      	bne.n	8004824 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4618      	mov	r0, r3
 80047e0:	f008 fdb6 	bl	800d350 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4618      	mov	r0, r3
 80047ea:	f007 fe5a 	bl	800c4a2 <USB_GetDevSpeed>
 80047ee:	4603      	mov	r3, r0
 80047f0:	461a      	mov	r2, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681c      	ldr	r4, [r3, #0]
 80047fa:	f001 fcfb 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 80047fe:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	4620      	mov	r0, r4
 800480a:	f007 fb9d 	bl	800bf48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f00e fcc1 	bl	8013196 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	695a      	ldr	r2, [r3, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8004822:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	f008 fcef 	bl	800d20c <USB_ReadInterrupts>
 800482e:	4603      	mov	r3, r0
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d10a      	bne.n	800484e <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f00e fc9e 	bl	801317a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	695a      	ldr	r2, [r3, #20]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f002 0208 	and.w	r2, r2, #8
 800484c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4618      	mov	r0, r3
 8004854:	f008 fcda 	bl	800d20c <USB_ReadInterrupts>
 8004858:	4603      	mov	r3, r0
 800485a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800485e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004862:	d10f      	bne.n	8004884 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800486a:	b2db      	uxtb	r3, r3
 800486c:	4619      	mov	r1, r3
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f00e fd00 	bl	8013274 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	695a      	ldr	r2, [r3, #20]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8004882:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4618      	mov	r0, r3
 800488a:	f008 fcbf 	bl	800d20c <USB_ReadInterrupts>
 800488e:	4603      	mov	r3, r0
 8004890:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004894:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004898:	d10f      	bne.n	80048ba <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800489a:	2300      	movs	r3, #0
 800489c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	4619      	mov	r1, r3
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f00e fcd3 	bl	8013250 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	695a      	ldr	r2, [r3, #20]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80048b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4618      	mov	r0, r3
 80048c0:	f008 fca4 	bl	800d20c <USB_ReadInterrupts>
 80048c4:	4603      	mov	r3, r0
 80048c6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80048ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f00e fce1 	bl	8013298 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f008 fc8e 	bl	800d20c <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0304 	and.w	r3, r3, #4
 80048f6:	2b04      	cmp	r3, #4
 80048f8:	d115      	bne.n	8004926 <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004902:	69bb      	ldr	r3, [r7, #24]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800490c:	6878      	ldr	r0, [r7, #4]
 800490e:	f00e fcd1 	bl	80132b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	6859      	ldr	r1, [r3, #4]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	430a      	orrs	r2, r1
 8004920:	605a      	str	r2, [r3, #4]
 8004922:	e000      	b.n	8004926 <HAL_PCD_IRQHandler+0x7b8>
      return;
 8004924:	bf00      	nop
    }
  }
}
 8004926:	3734      	adds	r7, #52	; 0x34
 8004928:	46bd      	mov	sp, r7
 800492a:	bd90      	pop	{r4, r7, pc}

0800492c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	460b      	mov	r3, r1
 8004936:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800493e:	2b01      	cmp	r3, #1
 8004940:	d101      	bne.n	8004946 <HAL_PCD_SetAddress+0x1a>
 8004942:	2302      	movs	r3, #2
 8004944:	e013      	b.n	800496e <HAL_PCD_SetAddress+0x42>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	78fa      	ldrb	r2, [r7, #3]
 8004952:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	4611      	mov	r1, r2
 800495e:	4618      	mov	r0, r3
 8004960:	f008 fbfe 	bl	800d160 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8004976:	b580      	push	{r7, lr}
 8004978:	b084      	sub	sp, #16
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	4608      	mov	r0, r1
 8004980:	4611      	mov	r1, r2
 8004982:	461a      	mov	r2, r3
 8004984:	4603      	mov	r3, r0
 8004986:	70fb      	strb	r3, [r7, #3]
 8004988:	460b      	mov	r3, r1
 800498a:	803b      	strh	r3, [r7, #0]
 800498c:	4613      	mov	r3, r2
 800498e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004990:	2300      	movs	r3, #0
 8004992:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004994:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004998:	2b00      	cmp	r3, #0
 800499a:	da0f      	bge.n	80049bc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800499c:	78fb      	ldrb	r3, [r7, #3]
 800499e:	f003 020f 	and.w	r2, r3, #15
 80049a2:	4613      	mov	r3, r2
 80049a4:	00db      	lsls	r3, r3, #3
 80049a6:	1a9b      	subs	r3, r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	3338      	adds	r3, #56	; 0x38
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	4413      	add	r3, r2
 80049b0:	3304      	adds	r3, #4
 80049b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2201      	movs	r2, #1
 80049b8:	705a      	strb	r2, [r3, #1]
 80049ba:	e00f      	b.n	80049dc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	f003 020f 	and.w	r2, r3, #15
 80049c2:	4613      	mov	r3, r2
 80049c4:	00db      	lsls	r3, r3, #3
 80049c6:	1a9b      	subs	r3, r3, r2
 80049c8:	009b      	lsls	r3, r3, #2
 80049ca:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	4413      	add	r3, r2
 80049d2:	3304      	adds	r3, #4
 80049d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2200      	movs	r2, #0
 80049da:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	f003 030f 	and.w	r3, r3, #15
 80049e2:	b2da      	uxtb	r2, r3
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80049e8:	883a      	ldrh	r2, [r7, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	78ba      	ldrb	r2, [r7, #2]
 80049f2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	785b      	ldrb	r3, [r3, #1]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d004      	beq.n	8004a06 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	b29a      	uxth	r2, r3
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004a06:	78bb      	ldrb	r3, [r7, #2]
 8004a08:	2b02      	cmp	r3, #2
 8004a0a:	d102      	bne.n	8004a12 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d101      	bne.n	8004a20 <HAL_PCD_EP_Open+0xaa>
 8004a1c:	2302      	movs	r3, #2
 8004a1e:	e00e      	b.n	8004a3e <HAL_PCD_EP_Open+0xc8>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68f9      	ldr	r1, [r7, #12]
 8004a2e:	4618      	mov	r0, r3
 8004a30:	f007 fd5c 	bl	800c4ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004a3c:	7afb      	ldrb	r3, [r7, #11]
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
 8004a4e:	460b      	mov	r3, r1
 8004a50:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0f      	bge.n	8004a7a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	705a      	strb	r2, [r3, #1]
 8004a78:	e00f      	b.n	8004a9a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3304      	adds	r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004a9a:	78fb      	ldrb	r3, [r7, #3]
 8004a9c:	f003 030f 	and.w	r3, r3, #15
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004aac:	2b01      	cmp	r3, #1
 8004aae:	d101      	bne.n	8004ab4 <HAL_PCD_EP_Close+0x6e>
 8004ab0:	2302      	movs	r3, #2
 8004ab2:	e00e      	b.n	8004ad2 <HAL_PCD_EP_Close+0x8c>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68f9      	ldr	r1, [r7, #12]
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f007 fd9a 	bl	800c5fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004ad0:	2300      	movs	r3, #0
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b086      	sub	sp, #24
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	607a      	str	r2, [r7, #4]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004aea:	7afb      	ldrb	r3, [r7, #11]
 8004aec:	f003 020f 	and.w	r2, r3, #15
 8004af0:	4613      	mov	r3, r2
 8004af2:	00db      	lsls	r3, r3, #3
 8004af4:	1a9b      	subs	r3, r3, r2
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	3304      	adds	r3, #4
 8004b02:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	683a      	ldr	r2, [r7, #0]
 8004b0e:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2200      	movs	r2, #0
 8004b14:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004b1c:	7afb      	ldrb	r3, [r7, #11]
 8004b1e:	f003 030f 	and.w	r3, r3, #15
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	691b      	ldr	r3, [r3, #16]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d102      	bne.n	8004b36 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	697b      	ldr	r3, [r7, #20]
 8004b34:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004b36:	7afb      	ldrb	r3, [r7, #11]
 8004b38:	f003 030f 	and.w	r3, r3, #15
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	6818      	ldr	r0, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	461a      	mov	r2, r3
 8004b4c:	6979      	ldr	r1, [r7, #20]
 8004b4e:	f008 f87d 	bl	800cc4c <USB_EP0StartXfer>
 8004b52:	e008      	b.n	8004b66 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	461a      	mov	r2, r3
 8004b60:	6979      	ldr	r1, [r7, #20]
 8004b62:	f007 fe27 	bl	800c7b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004b66:	2300      	movs	r3, #0
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
 8004b78:	460b      	mov	r3, r1
 8004b7a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	f003 020f 	and.w	r2, r3, #15
 8004b82:	6879      	ldr	r1, [r7, #4]
 8004b84:	4613      	mov	r3, r2
 8004b86:	00db      	lsls	r3, r3, #3
 8004b88:	1a9b      	subs	r3, r3, r2
 8004b8a:	009b      	lsls	r3, r3, #2
 8004b8c:	440b      	add	r3, r1
 8004b8e:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004b92:	681b      	ldr	r3, [r3, #0]
}
 8004b94:	4618      	mov	r0, r3
 8004b96:	370c      	adds	r7, #12
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	607a      	str	r2, [r7, #4]
 8004baa:	603b      	str	r3, [r7, #0]
 8004bac:	460b      	mov	r3, r1
 8004bae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004bb0:	7afb      	ldrb	r3, [r7, #11]
 8004bb2:	f003 020f 	and.w	r2, r3, #15
 8004bb6:	4613      	mov	r3, r2
 8004bb8:	00db      	lsls	r3, r3, #3
 8004bba:	1a9b      	subs	r3, r3, r2
 8004bbc:	009b      	lsls	r3, r3, #2
 8004bbe:	3338      	adds	r3, #56	; 0x38
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	4413      	add	r3, r2
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	683a      	ldr	r2, [r7, #0]
 8004bd2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2201      	movs	r2, #1
 8004bde:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004be0:	7afb      	ldrb	r3, [r7, #11]
 8004be2:	f003 030f 	and.w	r3, r3, #15
 8004be6:	b2da      	uxtb	r2, r3
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d102      	bne.n	8004bfa <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004bfa:	7afb      	ldrb	r3, [r7, #11]
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d109      	bne.n	8004c18 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6818      	ldr	r0, [r3, #0]
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	b2db      	uxtb	r3, r3
 8004c0e:	461a      	mov	r2, r3
 8004c10:	6979      	ldr	r1, [r7, #20]
 8004c12:	f008 f81b 	bl	800cc4c <USB_EP0StartXfer>
 8004c16:	e008      	b.n	8004c2a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6818      	ldr	r0, [r3, #0]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	b2db      	uxtb	r3, r3
 8004c22:	461a      	mov	r2, r3
 8004c24:	6979      	ldr	r1, [r7, #20]
 8004c26:	f007 fdc5 	bl	800c7b4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004c2a:	2300      	movs	r3, #0
}
 8004c2c:	4618      	mov	r0, r3
 8004c2e:	3718      	adds	r7, #24
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	460b      	mov	r3, r1
 8004c3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004c40:	78fb      	ldrb	r3, [r7, #3]
 8004c42:	f003 020f 	and.w	r2, r3, #15
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	429a      	cmp	r2, r3
 8004c4c:	d901      	bls.n	8004c52 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e050      	b.n	8004cf4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004c52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	da0f      	bge.n	8004c7a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c5a:	78fb      	ldrb	r3, [r7, #3]
 8004c5c:	f003 020f 	and.w	r2, r3, #15
 8004c60:	4613      	mov	r3, r2
 8004c62:	00db      	lsls	r3, r3, #3
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	3338      	adds	r3, #56	; 0x38
 8004c6a:	687a      	ldr	r2, [r7, #4]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	3304      	adds	r3, #4
 8004c70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	2201      	movs	r2, #1
 8004c76:	705a      	strb	r2, [r3, #1]
 8004c78:	e00d      	b.n	8004c96 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	4613      	mov	r3, r2
 8004c7e:	00db      	lsls	r3, r3, #3
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3304      	adds	r3, #4
 8004c8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004c9c:	78fb      	ldrb	r3, [r7, #3]
 8004c9e:	f003 030f 	and.w	r3, r3, #15
 8004ca2:	b2da      	uxtb	r2, r3
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d101      	bne.n	8004cb6 <HAL_PCD_EP_SetStall+0x82>
 8004cb2:	2302      	movs	r3, #2
 8004cb4:	e01e      	b.n	8004cf4 <HAL_PCD_EP_SetStall+0xc0>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	f008 f977 	bl	800cfb8 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004cca:	78fb      	ldrb	r3, [r7, #3]
 8004ccc:	f003 030f 	and.w	r3, r3, #15
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d10a      	bne.n	8004cea <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	b2d9      	uxtb	r1, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	f008 fb57 	bl	800d398 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004d08:	78fb      	ldrb	r3, [r7, #3]
 8004d0a:	f003 020f 	and.w	r2, r3, #15
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d901      	bls.n	8004d1a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	e042      	b.n	8004da0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004d1a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	da0f      	bge.n	8004d42 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	f003 020f 	and.w	r2, r3, #15
 8004d28:	4613      	mov	r3, r2
 8004d2a:	00db      	lsls	r3, r3, #3
 8004d2c:	1a9b      	subs	r3, r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	3338      	adds	r3, #56	; 0x38
 8004d32:	687a      	ldr	r2, [r7, #4]
 8004d34:	4413      	add	r3, r2
 8004d36:	3304      	adds	r3, #4
 8004d38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	705a      	strb	r2, [r3, #1]
 8004d40:	e00f      	b.n	8004d62 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	f003 020f 	and.w	r2, r3, #15
 8004d48:	4613      	mov	r3, r2
 8004d4a:	00db      	lsls	r3, r3, #3
 8004d4c:	1a9b      	subs	r3, r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004d54:	687a      	ldr	r2, [r7, #4]
 8004d56:	4413      	add	r3, r2
 8004d58:	3304      	adds	r3, #4
 8004d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d68:	78fb      	ldrb	r3, [r7, #3]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d101      	bne.n	8004d82 <HAL_PCD_EP_ClrStall+0x86>
 8004d7e:	2302      	movs	r3, #2
 8004d80:	e00e      	b.n	8004da0 <HAL_PCD_EP_ClrStall+0xa4>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68f9      	ldr	r1, [r7, #12]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f008 f97f 	bl	800d094 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	4618      	mov	r0, r3
 8004da2:	3710      	adds	r7, #16
 8004da4:	46bd      	mov	sp, r7
 8004da6:	bd80      	pop	{r7, pc}

08004da8 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b082      	sub	sp, #8
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	460b      	mov	r3, r1
 8004db2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d101      	bne.n	8004dc2 <HAL_PCD_EP_Flush+0x1a>
 8004dbe:	2302      	movs	r3, #2
 8004dc0:	e01b      	b.n	8004dfa <HAL_PCD_EP_Flush+0x52>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2201      	movs	r2, #1
 8004dc6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004dca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	da09      	bge.n	8004de6 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	78fb      	ldrb	r3, [r7, #3]
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	4619      	mov	r1, r3
 8004dde:	4610      	mov	r0, r2
 8004de0:	f007 fafe 	bl	800c3e0 <USB_FlushTxFifo>
 8004de4:	e004      	b.n	8004df0 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f007 fb1e 	bl	800c42c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3708      	adds	r7, #8
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}

08004e02 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e02:	b580      	push	{r7, lr}
 8004e04:	b08a      	sub	sp, #40	; 0x28
 8004e06:	af02      	add	r7, sp, #8
 8004e08:	6078      	str	r0, [r7, #4]
 8004e0a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004e16:	683a      	ldr	r2, [r7, #0]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	1a9b      	subs	r3, r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	3338      	adds	r3, #56	; 0x38
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	4413      	add	r3, r2
 8004e26:	3304      	adds	r3, #4
 8004e28:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	699a      	ldr	r2, [r3, #24]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	695b      	ldr	r3, [r3, #20]
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d901      	bls.n	8004e3a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	e06c      	b.n	8004f14 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	695a      	ldr	r2, [r3, #20]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	699b      	ldr	r3, [r3, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	69fa      	ldr	r2, [r7, #28]
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d902      	bls.n	8004e56 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	3303      	adds	r3, #3
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004e5e:	e02b      	b.n	8004eb8 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	689b      	ldr	r3, [r3, #8]
 8004e70:	69fa      	ldr	r2, [r7, #28]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d902      	bls.n	8004e7c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	3303      	adds	r3, #3
 8004e80:	089b      	lsrs	r3, r3, #2
 8004e82:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	68d9      	ldr	r1, [r3, #12]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	9300      	str	r3, [sp, #0]
 8004e98:	4603      	mov	r3, r0
 8004e9a:	6978      	ldr	r0, [r7, #20]
 8004e9c:	f008 f82e 	bl	800cefc <USB_WritePacket>

    ep->xfer_buff  += len;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	69fb      	ldr	r3, [r7, #28]
 8004ea6:	441a      	add	r2, r3
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	699a      	ldr	r2, [r3, #24]
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	015a      	lsls	r2, r3, #5
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	4413      	add	r3, r2
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	699b      	ldr	r3, [r3, #24]
 8004ec6:	b29b      	uxth	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d809      	bhi.n	8004ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	699a      	ldr	r2, [r3, #24]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d203      	bcs.n	8004ee2 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	695b      	ldr	r3, [r3, #20]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1be      	bne.n	8004e60 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	695a      	ldr	r2, [r3, #20]
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	699b      	ldr	r3, [r3, #24]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d811      	bhi.n	8004f12 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004eee:	683b      	ldr	r3, [r7, #0]
 8004ef0:	f003 030f 	and.w	r3, r3, #15
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8004efa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	43db      	mvns	r3, r3
 8004f08:	6939      	ldr	r1, [r7, #16]
 8004f0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f0e:	4013      	ands	r3, r2
 8004f10:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3720      	adds	r7, #32
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	333c      	adds	r3, #60	; 0x3c
 8004f34:	3304      	adds	r3, #4
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	f040 80a0 	bne.w	8005094 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f003 0308 	and.w	r3, r3, #8
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d015      	beq.n	8004f8a <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	4a72      	ldr	r2, [pc, #456]	; (800512c <PCD_EP_OutXfrComplete_int+0x210>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	f240 80dd 	bls.w	8005122 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004f68:	68bb      	ldr	r3, [r7, #8]
 8004f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	f000 80d7 	beq.w	8005122 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f80:	461a      	mov	r2, r3
 8004f82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f86:	6093      	str	r3, [r2, #8]
 8004f88:	e0cb      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	f003 0320 	and.w	r3, r3, #32
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d009      	beq.n	8004fa8 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2320      	movs	r3, #32
 8004fa4:	6093      	str	r3, [r2, #8]
 8004fa6:	e0bc      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	f040 80b7 	bne.w	8005122 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	4a5d      	ldr	r2, [pc, #372]	; (800512c <PCD_EP_OutXfrComplete_int+0x210>)
 8004fb8:	4293      	cmp	r3, r2
 8004fba:	d90f      	bls.n	8004fdc <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00a      	beq.n	8004fdc <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fd8:	6093      	str	r3, [r2, #8]
 8004fda:	e0a2      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004fdc:	6879      	ldr	r1, [r7, #4]
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	1a9b      	subs	r3, r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004fee:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	0159      	lsls	r1, r3, #5
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	440b      	add	r3, r1
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8005002:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	683a      	ldr	r2, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	00db      	lsls	r3, r3, #3
 800500c:	1a9b      	subs	r3, r3, r2
 800500e:	009b      	lsls	r3, r3, #2
 8005010:	4403      	add	r3, r0
 8005012:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8005016:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8005018:	6879      	ldr	r1, [r7, #4]
 800501a:	683a      	ldr	r2, [r7, #0]
 800501c:	4613      	mov	r3, r2
 800501e:	00db      	lsls	r3, r3, #3
 8005020:	1a9b      	subs	r3, r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	440b      	add	r3, r1
 8005026:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800502a:	6819      	ldr	r1, [r3, #0]
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	683a      	ldr	r2, [r7, #0]
 8005030:	4613      	mov	r3, r2
 8005032:	00db      	lsls	r3, r3, #3
 8005034:	1a9b      	subs	r3, r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4403      	add	r3, r0
 800503a:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4419      	add	r1, r3
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	4613      	mov	r3, r2
 8005048:	00db      	lsls	r3, r3, #3
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	4403      	add	r3, r0
 8005050:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8005054:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d114      	bne.n	8005086 <PCD_EP_OutXfrComplete_int+0x16a>
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	683a      	ldr	r2, [r7, #0]
 8005060:	4613      	mov	r3, r2
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	1a9b      	subs	r3, r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	440b      	add	r3, r1
 800506a:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d108      	bne.n	8005086 <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6818      	ldr	r0, [r3, #0]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800507e:	461a      	mov	r2, r3
 8005080:	2101      	movs	r1, #1
 8005082:	f008 f989 	bl	800d398 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	b2db      	uxtb	r3, r3
 800508a:	4619      	mov	r1, r3
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f00e f83f 	bl	8013110 <HAL_PCD_DataOutStageCallback>
 8005092:	e046      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4a26      	ldr	r2, [pc, #152]	; (8005130 <PCD_EP_OutXfrComplete_int+0x214>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d124      	bne.n	80050e6 <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050b8:	6093      	str	r3, [r2, #8]
 80050ba:	e032      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80050bc:	68bb      	ldr	r3, [r7, #8]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d008      	beq.n	80050d8 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	015a      	lsls	r2, r3, #5
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	4413      	add	r3, r2
 80050ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d2:	461a      	mov	r2, r3
 80050d4:	2320      	movs	r3, #32
 80050d6:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	4619      	mov	r1, r3
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f00e f816 	bl	8013110 <HAL_PCD_DataOutStageCallback>
 80050e4:	e01d      	b.n	8005122 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d114      	bne.n	8005116 <PCD_EP_OutXfrComplete_int+0x1fa>
 80050ec:	6879      	ldr	r1, [r7, #4]
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	4613      	mov	r3, r2
 80050f2:	00db      	lsls	r3, r3, #3
 80050f4:	1a9b      	subs	r3, r3, r2
 80050f6:	009b      	lsls	r3, r3, #2
 80050f8:	440b      	add	r3, r1
 80050fa:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d108      	bne.n	8005116 <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6818      	ldr	r0, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800510e:	461a      	mov	r2, r3
 8005110:	2100      	movs	r1, #0
 8005112:	f008 f941 	bl	800d398 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f00d fff7 	bl	8013110 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005122:	2300      	movs	r3, #0
}
 8005124:	4618      	mov	r0, r3
 8005126:	3718      	adds	r7, #24
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	4f54300a 	.word	0x4f54300a
 8005130:	4f54310a 	.word	0x4f54310a

08005134 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b086      	sub	sp, #24
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	333c      	adds	r3, #60	; 0x3c
 800514c:	3304      	adds	r3, #4
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	4a15      	ldr	r2, [pc, #84]	; (80051bc <PCD_EP_OutSetupPacket_int+0x88>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d90e      	bls.n	8005188 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005170:	2b00      	cmp	r3, #0
 8005172:	d009      	beq.n	8005188 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	693b      	ldr	r3, [r7, #16]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005186:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f00d ffaf 	bl	80130ec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	4a0a      	ldr	r2, [pc, #40]	; (80051bc <PCD_EP_OutSetupPacket_int+0x88>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d90c      	bls.n	80051b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d108      	bne.n	80051b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6818      	ldr	r0, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80051a8:	461a      	mov	r2, r3
 80051aa:	2101      	movs	r1, #1
 80051ac:	f008 f8f4 	bl	800d398 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80051b0:	2300      	movs	r3, #0
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3718      	adds	r7, #24
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	4f54300a 	.word	0x4f54300a

080051c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b085      	sub	sp, #20
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
 80051c8:	460b      	mov	r3, r1
 80051ca:	70fb      	strb	r3, [r7, #3]
 80051cc:	4613      	mov	r3, r2
 80051ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80051d8:	78fb      	ldrb	r3, [r7, #3]
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d107      	bne.n	80051ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80051de:	883b      	ldrh	r3, [r7, #0]
 80051e0:	0419      	lsls	r1, r3, #16
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68ba      	ldr	r2, [r7, #8]
 80051e8:	430a      	orrs	r2, r1
 80051ea:	629a      	str	r2, [r3, #40]	; 0x28
 80051ec:	e028      	b.n	8005240 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f4:	0c1b      	lsrs	r3, r3, #16
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	4413      	add	r3, r2
 80051fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80051fc:	2300      	movs	r3, #0
 80051fe:	73fb      	strb	r3, [r7, #15]
 8005200:	e00d      	b.n	800521e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	7bfb      	ldrb	r3, [r7, #15]
 8005208:	3340      	adds	r3, #64	; 0x40
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	4413      	add	r3, r2
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	0c1b      	lsrs	r3, r3, #16
 8005212:	68ba      	ldr	r2, [r7, #8]
 8005214:	4413      	add	r3, r2
 8005216:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005218:	7bfb      	ldrb	r3, [r7, #15]
 800521a:	3301      	adds	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
 800521e:	7bfa      	ldrb	r2, [r7, #15]
 8005220:	78fb      	ldrb	r3, [r7, #3]
 8005222:	3b01      	subs	r3, #1
 8005224:	429a      	cmp	r2, r3
 8005226:	d3ec      	bcc.n	8005202 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005228:	883b      	ldrh	r3, [r7, #0]
 800522a:	0418      	lsls	r0, r3, #16
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	6819      	ldr	r1, [r3, #0]
 8005230:	78fb      	ldrb	r3, [r7, #3]
 8005232:	3b01      	subs	r3, #1
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	4302      	orrs	r2, r0
 8005238:	3340      	adds	r3, #64	; 0x40
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005240:	2300      	movs	r3, #0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3714      	adds	r7, #20
 8005246:	46bd      	mov	sp, r7
 8005248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524c:	4770      	bx	lr

0800524e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800524e:	b480      	push	{r7}
 8005250:	b083      	sub	sp, #12
 8005252:	af00      	add	r7, sp, #0
 8005254:	6078      	str	r0, [r7, #4]
 8005256:	460b      	mov	r3, r1
 8005258:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	887a      	ldrh	r2, [r7, #2]
 8005260:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	699b      	ldr	r3, [r3, #24]
 8005292:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800529e:	4b05      	ldr	r3, [pc, #20]	; (80052b4 <HAL_PCDEx_ActivateLPM+0x44>)
 80052a0:	4313      	orrs	r3, r2
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80052a6:	2300      	movs	r3, #0
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	3714      	adds	r7, #20
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	10000003 	.word	0x10000003

080052b8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	460b      	mov	r3, r1
 80052c2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <HAL_PWREx_ConfigSupply+0x70>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	f003 0304 	and.w	r3, r3, #4
 80052e0:	2b04      	cmp	r3, #4
 80052e2:	d00a      	beq.n	80052fa <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80052e4:	4b16      	ldr	r3, [pc, #88]	; (8005340 <HAL_PWREx_ConfigSupply+0x70>)
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	f003 0307 	and.w	r3, r3, #7
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	429a      	cmp	r2, r3
 80052f0:	d001      	beq.n	80052f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	e01f      	b.n	8005336 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80052f6:	2300      	movs	r3, #0
 80052f8:	e01d      	b.n	8005336 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80052fa:	4b11      	ldr	r3, [pc, #68]	; (8005340 <HAL_PWREx_ConfigSupply+0x70>)
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	f023 0207 	bic.w	r2, r3, #7
 8005302:	490f      	ldr	r1, [pc, #60]	; (8005340 <HAL_PWREx_ConfigSupply+0x70>)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	4313      	orrs	r3, r2
 8005308:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800530a:	f7fc fa81 	bl	8001810 <HAL_GetTick>
 800530e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005310:	e009      	b.n	8005326 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005312:	f7fc fa7d 	bl	8001810 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005320:	d901      	bls.n	8005326 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e007      	b.n	8005336 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005326:	4b06      	ldr	r3, [pc, #24]	; (8005340 <HAL_PWREx_ConfigSupply+0x70>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800532e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005332:	d1ee      	bne.n	8005312 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8005334:	2300      	movs	r3, #0
}
 8005336:	4618      	mov	r0, r3
 8005338:	3710      	adds	r7, #16
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	58024800 	.word	0x58024800

08005344 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005344:	b480      	push	{r7}
 8005346:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005348:	4b05      	ldr	r3, [pc, #20]	; (8005360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a04      	ldr	r2, [pc, #16]	; (8005360 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800534e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005352:	60d3      	str	r3, [r2, #12]
}
 8005354:	bf00      	nop
 8005356:	46bd      	mov	sp, r7
 8005358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535c:	4770      	bx	lr
 800535e:	bf00      	nop
 8005360:	58024800 	.word	0x58024800

08005364 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08c      	sub	sp, #48	; 0x30
 8005368:	af00      	add	r7, sp, #0
 800536a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d101      	bne.n	8005376 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e3ff      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0301 	and.w	r3, r3, #1
 800537e:	2b00      	cmp	r3, #0
 8005380:	f000 8087 	beq.w	8005492 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005384:	4b99      	ldr	r3, [pc, #612]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005386:	691b      	ldr	r3, [r3, #16]
 8005388:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800538c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800538e:	4b97      	ldr	r3, [pc, #604]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005392:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8005394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005396:	2b10      	cmp	r3, #16
 8005398:	d007      	beq.n	80053aa <HAL_RCC_OscConfig+0x46>
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	2b18      	cmp	r3, #24
 800539e:	d110      	bne.n	80053c2 <HAL_RCC_OscConfig+0x5e>
 80053a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a2:	f003 0303 	and.w	r3, r3, #3
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d10b      	bne.n	80053c2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053aa:	4b90      	ldr	r3, [pc, #576]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d06c      	beq.n	8005490 <HAL_RCC_OscConfig+0x12c>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d168      	bne.n	8005490 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e3d9      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	685b      	ldr	r3, [r3, #4]
 80053c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053ca:	d106      	bne.n	80053da <HAL_RCC_OscConfig+0x76>
 80053cc:	4b87      	ldr	r3, [pc, #540]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	4a86      	ldr	r2, [pc, #536]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053d6:	6013      	str	r3, [r2, #0]
 80053d8:	e02e      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	685b      	ldr	r3, [r3, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10c      	bne.n	80053fc <HAL_RCC_OscConfig+0x98>
 80053e2:	4b82      	ldr	r3, [pc, #520]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a81      	ldr	r2, [pc, #516]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053ec:	6013      	str	r3, [r2, #0]
 80053ee:	4b7f      	ldr	r3, [pc, #508]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a7e      	ldr	r2, [pc, #504]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80053f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80053f8:	6013      	str	r3, [r2, #0]
 80053fa:	e01d      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005404:	d10c      	bne.n	8005420 <HAL_RCC_OscConfig+0xbc>
 8005406:	4b79      	ldr	r3, [pc, #484]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a78      	ldr	r2, [pc, #480]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800540c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005410:	6013      	str	r3, [r2, #0]
 8005412:	4b76      	ldr	r3, [pc, #472]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	4a75      	ldr	r2, [pc, #468]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e00b      	b.n	8005438 <HAL_RCC_OscConfig+0xd4>
 8005420:	4b72      	ldr	r3, [pc, #456]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a71      	ldr	r2, [pc, #452]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800542a:	6013      	str	r3, [r2, #0]
 800542c:	4b6f      	ldr	r3, [pc, #444]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a6e      	ldr	r2, [pc, #440]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005432:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005436:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d013      	beq.n	8005468 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005440:	f7fc f9e6 	bl	8001810 <HAL_GetTick>
 8005444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005446:	e008      	b.n	800545a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005448:	f7fc f9e2 	bl	8001810 <HAL_GetTick>
 800544c:	4602      	mov	r2, r0
 800544e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005450:	1ad3      	subs	r3, r2, r3
 8005452:	2b64      	cmp	r3, #100	; 0x64
 8005454:	d901      	bls.n	800545a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e38d      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800545a:	4b64      	ldr	r3, [pc, #400]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005462:	2b00      	cmp	r3, #0
 8005464:	d0f0      	beq.n	8005448 <HAL_RCC_OscConfig+0xe4>
 8005466:	e014      	b.n	8005492 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005468:	f7fc f9d2 	bl	8001810 <HAL_GetTick>
 800546c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005470:	f7fc f9ce 	bl	8001810 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b64      	cmp	r3, #100	; 0x64
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e379      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005482:	4b5a      	ldr	r3, [pc, #360]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x10c>
 800548e:	e000      	b.n	8005492 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005490:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0302 	and.w	r3, r3, #2
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 80ae 	beq.w	80055fc <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054a0:	4b52      	ldr	r3, [pc, #328]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80054a2:	691b      	ldr	r3, [r3, #16]
 80054a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80054a8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80054aa:	4b50      	ldr	r3, [pc, #320]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80054b0:	6a3b      	ldr	r3, [r7, #32]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <HAL_RCC_OscConfig+0x162>
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	2b18      	cmp	r3, #24
 80054ba:	d13a      	bne.n	8005532 <HAL_RCC_OscConfig+0x1ce>
 80054bc:	69fb      	ldr	r3, [r7, #28]
 80054be:	f003 0303 	and.w	r3, r3, #3
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d135      	bne.n	8005532 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c6:	4b49      	ldr	r3, [pc, #292]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0304 	and.w	r3, r3, #4
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d005      	beq.n	80054de <HAL_RCC_OscConfig+0x17a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	68db      	ldr	r3, [r3, #12]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d101      	bne.n	80054de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80054da:	2301      	movs	r3, #1
 80054dc:	e34b      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054de:	f7fc f9c5 	bl	800186c <HAL_GetREVID>
 80054e2:	4602      	mov	r2, r0
 80054e4:	f241 0303 	movw	r3, #4099	; 0x1003
 80054e8:	429a      	cmp	r2, r3
 80054ea:	d817      	bhi.n	800551c <HAL_RCC_OscConfig+0x1b8>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d108      	bne.n	8005506 <HAL_RCC_OscConfig+0x1a2>
 80054f4:	4b3d      	ldr	r3, [pc, #244]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80054fc:	4a3b      	ldr	r2, [pc, #236]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80054fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005502:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005504:	e07a      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005506:	4b39      	ldr	r3, [pc, #228]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005508:	685b      	ldr	r3, [r3, #4]
 800550a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	031b      	lsls	r3, r3, #12
 8005514:	4935      	ldr	r1, [pc, #212]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005516:	4313      	orrs	r3, r2
 8005518:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800551a:	e06f      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b33      	ldr	r3, [pc, #204]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	061b      	lsls	r3, r3, #24
 800552a:	4930      	ldr	r1, [pc, #192]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800552c:	4313      	orrs	r3, r2
 800552e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005530:	e064      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68db      	ldr	r3, [r3, #12]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d045      	beq.n	80055c6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800553a:	4b2c      	ldr	r3, [pc, #176]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f023 0219 	bic.w	r2, r3, #25
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	4929      	ldr	r1, [pc, #164]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800554c:	f7fc f960 	bl	8001810 <HAL_GetTick>
 8005550:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005552:	e008      	b.n	8005566 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005554:	f7fc f95c 	bl	8001810 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d901      	bls.n	8005566 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	e307      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005566:	4b21      	ldr	r3, [pc, #132]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f003 0304 	and.w	r3, r3, #4
 800556e:	2b00      	cmp	r3, #0
 8005570:	d0f0      	beq.n	8005554 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005572:	f7fc f97b 	bl	800186c <HAL_GetREVID>
 8005576:	4602      	mov	r2, r0
 8005578:	f241 0303 	movw	r3, #4099	; 0x1003
 800557c:	429a      	cmp	r2, r3
 800557e:	d817      	bhi.n	80055b0 <HAL_RCC_OscConfig+0x24c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	2b40      	cmp	r3, #64	; 0x40
 8005586:	d108      	bne.n	800559a <HAL_RCC_OscConfig+0x236>
 8005588:	4b18      	ldr	r3, [pc, #96]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800558a:	685b      	ldr	r3, [r3, #4]
 800558c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005590:	4a16      	ldr	r2, [pc, #88]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 8005592:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005596:	6053      	str	r3, [r2, #4]
 8005598:	e030      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
 800559a:	4b14      	ldr	r3, [pc, #80]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	031b      	lsls	r3, r3, #12
 80055a8:	4910      	ldr	r1, [pc, #64]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80055aa:	4313      	orrs	r3, r2
 80055ac:	604b      	str	r3, [r1, #4]
 80055ae:	e025      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
 80055b0:	4b0e      	ldr	r3, [pc, #56]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	691b      	ldr	r3, [r3, #16]
 80055bc:	061b      	lsls	r3, r3, #24
 80055be:	490b      	ldr	r1, [pc, #44]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	604b      	str	r3, [r1, #4]
 80055c4:	e01a      	b.n	80055fc <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055c6:	4b09      	ldr	r3, [pc, #36]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a08      	ldr	r2, [pc, #32]	; (80055ec <HAL_RCC_OscConfig+0x288>)
 80055cc:	f023 0301 	bic.w	r3, r3, #1
 80055d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d2:	f7fc f91d 	bl	8001810 <HAL_GetTick>
 80055d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055d8:	e00a      	b.n	80055f0 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055da:	f7fc f919 	bl	8001810 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d903      	bls.n	80055f0 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e2c4      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
 80055ec:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80055f0:	4ba4      	ldr	r3, [pc, #656]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f003 0304 	and.w	r3, r3, #4
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d1ee      	bne.n	80055da <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f003 0310 	and.w	r3, r3, #16
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a9 	beq.w	800575c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560a:	4b9e      	ldr	r3, [pc, #632]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005612:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005614:	4b9b      	ldr	r3, [pc, #620]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005618:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b08      	cmp	r3, #8
 800561e:	d007      	beq.n	8005630 <HAL_RCC_OscConfig+0x2cc>
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b18      	cmp	r3, #24
 8005624:	d13a      	bne.n	800569c <HAL_RCC_OscConfig+0x338>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	f003 0303 	and.w	r3, r3, #3
 800562c:	2b01      	cmp	r3, #1
 800562e:	d135      	bne.n	800569c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005630:	4b94      	ldr	r3, [pc, #592]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <HAL_RCC_OscConfig+0x2e4>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	2b80      	cmp	r3, #128	; 0x80
 8005642:	d001      	beq.n	8005648 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8005644:	2301      	movs	r3, #1
 8005646:	e296      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005648:	f7fc f910 	bl	800186c <HAL_GetREVID>
 800564c:	4602      	mov	r2, r0
 800564e:	f241 0303 	movw	r3, #4099	; 0x1003
 8005652:	429a      	cmp	r2, r3
 8005654:	d817      	bhi.n	8005686 <HAL_RCC_OscConfig+0x322>
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a1b      	ldr	r3, [r3, #32]
 800565a:	2b20      	cmp	r3, #32
 800565c:	d108      	bne.n	8005670 <HAL_RCC_OscConfig+0x30c>
 800565e:	4b89      	ldr	r3, [pc, #548]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005660:	685b      	ldr	r3, [r3, #4]
 8005662:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005666:	4a87      	ldr	r2, [pc, #540]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005668:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800566c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800566e:	e075      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005670:	4b84      	ldr	r3, [pc, #528]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005672:	685b      	ldr	r3, [r3, #4]
 8005674:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a1b      	ldr	r3, [r3, #32]
 800567c:	069b      	lsls	r3, r3, #26
 800567e:	4981      	ldr	r1, [pc, #516]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005680:	4313      	orrs	r3, r2
 8005682:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005684:	e06a      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005686:	4b7f      	ldr	r3, [pc, #508]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	061b      	lsls	r3, r3, #24
 8005694:	497b      	ldr	r1, [pc, #492]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005696:	4313      	orrs	r3, r2
 8005698:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800569a:	e05f      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	69db      	ldr	r3, [r3, #28]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d042      	beq.n	800572a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80056a4:	4b77      	ldr	r3, [pc, #476]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a76      	ldr	r2, [pc, #472]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80056aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056b0:	f7fc f8ae 	bl	8001810 <HAL_GetTick>
 80056b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056b6:	e008      	b.n	80056ca <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80056b8:	f7fc f8aa 	bl	8001810 <HAL_GetTick>
 80056bc:	4602      	mov	r2, r0
 80056be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c0:	1ad3      	subs	r3, r2, r3
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e255      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80056ca:	4b6e      	ldr	r3, [pc, #440]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0f0      	beq.n	80056b8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80056d6:	f7fc f8c9 	bl	800186c <HAL_GetREVID>
 80056da:	4602      	mov	r2, r0
 80056dc:	f241 0303 	movw	r3, #4099	; 0x1003
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d817      	bhi.n	8005714 <HAL_RCC_OscConfig+0x3b0>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	2b20      	cmp	r3, #32
 80056ea:	d108      	bne.n	80056fe <HAL_RCC_OscConfig+0x39a>
 80056ec:	4b65      	ldr	r3, [pc, #404]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80056ee:	685b      	ldr	r3, [r3, #4]
 80056f0:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80056f4:	4a63      	ldr	r2, [pc, #396]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80056f6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056fa:	6053      	str	r3, [r2, #4]
 80056fc:	e02e      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
 80056fe:	4b61      	ldr	r3, [pc, #388]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a1b      	ldr	r3, [r3, #32]
 800570a:	069b      	lsls	r3, r3, #26
 800570c:	495d      	ldr	r1, [pc, #372]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 800570e:	4313      	orrs	r3, r2
 8005710:	604b      	str	r3, [r1, #4]
 8005712:	e023      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
 8005714:	4b5b      	ldr	r3, [pc, #364]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6a1b      	ldr	r3, [r3, #32]
 8005720:	061b      	lsls	r3, r3, #24
 8005722:	4958      	ldr	r1, [pc, #352]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005724:	4313      	orrs	r3, r2
 8005726:	60cb      	str	r3, [r1, #12]
 8005728:	e018      	b.n	800575c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800572a:	4b56      	ldr	r3, [pc, #344]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a55      	ldr	r2, [pc, #340]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005730:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005734:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005736:	f7fc f86b 	bl	8001810 <HAL_GetTick>
 800573a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800573c:	e008      	b.n	8005750 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800573e:	f7fc f867 	bl	8001810 <HAL_GetTick>
 8005742:	4602      	mov	r2, r0
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	1ad3      	subs	r3, r2, r3
 8005748:	2b02      	cmp	r3, #2
 800574a:	d901      	bls.n	8005750 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800574c:	2303      	movs	r3, #3
 800574e:	e212      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005750:	4b4c      	ldr	r3, [pc, #304]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1f0      	bne.n	800573e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0308 	and.w	r3, r3, #8
 8005764:	2b00      	cmp	r3, #0
 8005766:	d036      	beq.n	80057d6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d019      	beq.n	80057a4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005770:	4b44      	ldr	r3, [pc, #272]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005774:	4a43      	ldr	r2, [pc, #268]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005776:	f043 0301 	orr.w	r3, r3, #1
 800577a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800577c:	f7fc f848 	bl	8001810 <HAL_GetTick>
 8005780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005782:	e008      	b.n	8005796 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005784:	f7fc f844 	bl	8001810 <HAL_GetTick>
 8005788:	4602      	mov	r2, r0
 800578a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578c:	1ad3      	subs	r3, r2, r3
 800578e:	2b02      	cmp	r3, #2
 8005790:	d901      	bls.n	8005796 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8005792:	2303      	movs	r3, #3
 8005794:	e1ef      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005796:	4b3b      	ldr	r3, [pc, #236]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005798:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800579a:	f003 0302 	and.w	r3, r3, #2
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d0f0      	beq.n	8005784 <HAL_RCC_OscConfig+0x420>
 80057a2:	e018      	b.n	80057d6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057a4:	4b37      	ldr	r3, [pc, #220]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80057a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057a8:	4a36      	ldr	r2, [pc, #216]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80057aa:	f023 0301 	bic.w	r3, r3, #1
 80057ae:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b0:	f7fc f82e 	bl	8001810 <HAL_GetTick>
 80057b4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057b6:	e008      	b.n	80057ca <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80057b8:	f7fc f82a 	bl	8001810 <HAL_GetTick>
 80057bc:	4602      	mov	r2, r0
 80057be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057c0:	1ad3      	subs	r3, r2, r3
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d901      	bls.n	80057ca <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80057c6:	2303      	movs	r3, #3
 80057c8:	e1d5      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80057ca:	4b2e      	ldr	r3, [pc, #184]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80057cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057ce:	f003 0302 	and.w	r3, r3, #2
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d1f0      	bne.n	80057b8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 0320 	and.w	r3, r3, #32
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d036      	beq.n	8005850 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	699b      	ldr	r3, [r3, #24]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d019      	beq.n	800581e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057ea:	4b26      	ldr	r3, [pc, #152]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a25      	ldr	r2, [pc, #148]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 80057f0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80057f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80057f6:	f7fc f80b 	bl	8001810 <HAL_GetTick>
 80057fa:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80057fc:	e008      	b.n	8005810 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 80057fe:	f7fc f807 	bl	8001810 <HAL_GetTick>
 8005802:	4602      	mov	r2, r0
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	1ad3      	subs	r3, r2, r3
 8005808:	2b02      	cmp	r3, #2
 800580a:	d901      	bls.n	8005810 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800580c:	2303      	movs	r3, #3
 800580e:	e1b2      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005810:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005818:	2b00      	cmp	r3, #0
 800581a:	d0f0      	beq.n	80057fe <HAL_RCC_OscConfig+0x49a>
 800581c:	e018      	b.n	8005850 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800581e:	4b19      	ldr	r3, [pc, #100]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a18      	ldr	r2, [pc, #96]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005824:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005828:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800582a:	f7fb fff1 	bl	8001810 <HAL_GetTick>
 800582e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005830:	e008      	b.n	8005844 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005832:	f7fb ffed 	bl	8001810 <HAL_GetTick>
 8005836:	4602      	mov	r2, r0
 8005838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800583a:	1ad3      	subs	r3, r2, r3
 800583c:	2b02      	cmp	r3, #2
 800583e:	d901      	bls.n	8005844 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005840:	2303      	movs	r3, #3
 8005842:	e198      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005844:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <HAL_RCC_OscConfig+0x520>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800584c:	2b00      	cmp	r3, #0
 800584e:	d1f0      	bne.n	8005832 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	f000 8085 	beq.w	8005968 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800585e:	4b0a      	ldr	r3, [pc, #40]	; (8005888 <HAL_RCC_OscConfig+0x524>)
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a09      	ldr	r2, [pc, #36]	; (8005888 <HAL_RCC_OscConfig+0x524>)
 8005864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005868:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800586a:	f7fb ffd1 	bl	8001810 <HAL_GetTick>
 800586e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005870:	e00c      	b.n	800588c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005872:	f7fb ffcd 	bl	8001810 <HAL_GetTick>
 8005876:	4602      	mov	r2, r0
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	1ad3      	subs	r3, r2, r3
 800587c:	2b64      	cmp	r3, #100	; 0x64
 800587e:	d905      	bls.n	800588c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8005880:	2303      	movs	r3, #3
 8005882:	e178      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
 8005884:	58024400 	.word	0x58024400
 8005888:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800588c:	4b96      	ldr	r3, [pc, #600]	; (8005ae8 <HAL_RCC_OscConfig+0x784>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005894:	2b00      	cmp	r3, #0
 8005896:	d0ec      	beq.n	8005872 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	689b      	ldr	r3, [r3, #8]
 800589c:	2b01      	cmp	r3, #1
 800589e:	d106      	bne.n	80058ae <HAL_RCC_OscConfig+0x54a>
 80058a0:	4b92      	ldr	r3, [pc, #584]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058a4:	4a91      	ldr	r2, [pc, #580]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058a6:	f043 0301 	orr.w	r3, r3, #1
 80058aa:	6713      	str	r3, [r2, #112]	; 0x70
 80058ac:	e02d      	b.n	800590a <HAL_RCC_OscConfig+0x5a6>
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d10c      	bne.n	80058d0 <HAL_RCC_OscConfig+0x56c>
 80058b6:	4b8d      	ldr	r3, [pc, #564]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058ba:	4a8c      	ldr	r2, [pc, #560]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058bc:	f023 0301 	bic.w	r3, r3, #1
 80058c0:	6713      	str	r3, [r2, #112]	; 0x70
 80058c2:	4b8a      	ldr	r3, [pc, #552]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c6:	4a89      	ldr	r2, [pc, #548]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058c8:	f023 0304 	bic.w	r3, r3, #4
 80058cc:	6713      	str	r3, [r2, #112]	; 0x70
 80058ce:	e01c      	b.n	800590a <HAL_RCC_OscConfig+0x5a6>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	689b      	ldr	r3, [r3, #8]
 80058d4:	2b05      	cmp	r3, #5
 80058d6:	d10c      	bne.n	80058f2 <HAL_RCC_OscConfig+0x58e>
 80058d8:	4b84      	ldr	r3, [pc, #528]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058dc:	4a83      	ldr	r2, [pc, #524]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058de:	f043 0304 	orr.w	r3, r3, #4
 80058e2:	6713      	str	r3, [r2, #112]	; 0x70
 80058e4:	4b81      	ldr	r3, [pc, #516]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058e8:	4a80      	ldr	r2, [pc, #512]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058ea:	f043 0301 	orr.w	r3, r3, #1
 80058ee:	6713      	str	r3, [r2, #112]	; 0x70
 80058f0:	e00b      	b.n	800590a <HAL_RCC_OscConfig+0x5a6>
 80058f2:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058f6:	4a7d      	ldr	r2, [pc, #500]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80058f8:	f023 0301 	bic.w	r3, r3, #1
 80058fc:	6713      	str	r3, [r2, #112]	; 0x70
 80058fe:	4b7b      	ldr	r3, [pc, #492]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005902:	4a7a      	ldr	r2, [pc, #488]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005904:	f023 0304 	bic.w	r3, r3, #4
 8005908:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	689b      	ldr	r3, [r3, #8]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d015      	beq.n	800593e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005912:	f7fb ff7d 	bl	8001810 <HAL_GetTick>
 8005916:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005918:	e00a      	b.n	8005930 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800591a:	f7fb ff79 	bl	8001810 <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	f241 3288 	movw	r2, #5000	; 0x1388
 8005928:	4293      	cmp	r3, r2
 800592a:	d901      	bls.n	8005930 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	e122      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005930:	4b6e      	ldr	r3, [pc, #440]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005934:	f003 0302 	and.w	r3, r3, #2
 8005938:	2b00      	cmp	r3, #0
 800593a:	d0ee      	beq.n	800591a <HAL_RCC_OscConfig+0x5b6>
 800593c:	e014      	b.n	8005968 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800593e:	f7fb ff67 	bl	8001810 <HAL_GetTick>
 8005942:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005944:	e00a      	b.n	800595c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005946:	f7fb ff63 	bl	8001810 <HAL_GetTick>
 800594a:	4602      	mov	r2, r0
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	1ad3      	subs	r3, r2, r3
 8005950:	f241 3288 	movw	r2, #5000	; 0x1388
 8005954:	4293      	cmp	r3, r2
 8005956:	d901      	bls.n	800595c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e10c      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800595c:	4b63      	ldr	r3, [pc, #396]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 800595e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005960:	f003 0302 	and.w	r3, r3, #2
 8005964:	2b00      	cmp	r3, #0
 8005966:	d1ee      	bne.n	8005946 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	2b00      	cmp	r3, #0
 800596e:	f000 8101 	beq.w	8005b74 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005972:	4b5e      	ldr	r3, [pc, #376]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800597a:	2b18      	cmp	r3, #24
 800597c:	f000 80bc 	beq.w	8005af8 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005984:	2b02      	cmp	r3, #2
 8005986:	f040 8095 	bne.w	8005ab4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800598a:	4b58      	ldr	r3, [pc, #352]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a57      	ldr	r2, [pc, #348]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005990:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005994:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005996:	f7fb ff3b 	bl	8001810 <HAL_GetTick>
 800599a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800599c:	e008      	b.n	80059b0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800599e:	f7fb ff37 	bl	8001810 <HAL_GetTick>
 80059a2:	4602      	mov	r2, r0
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	2b02      	cmp	r3, #2
 80059aa:	d901      	bls.n	80059b0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e0e2      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80059b0:	4b4e      	ldr	r3, [pc, #312]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1f0      	bne.n	800599e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059bc:	4b4b      	ldr	r3, [pc, #300]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80059be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059c0:	4b4b      	ldr	r3, [pc, #300]	; (8005af0 <HAL_RCC_OscConfig+0x78c>)
 80059c2:	4013      	ands	r3, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80059c8:	687a      	ldr	r2, [r7, #4]
 80059ca:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059cc:	0112      	lsls	r2, r2, #4
 80059ce:	430a      	orrs	r2, r1
 80059d0:	4946      	ldr	r1, [pc, #280]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	628b      	str	r3, [r1, #40]	; 0x28
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059da:	3b01      	subs	r3, #1
 80059dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059e4:	3b01      	subs	r3, #1
 80059e6:	025b      	lsls	r3, r3, #9
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	431a      	orrs	r2, r3
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f0:	3b01      	subs	r3, #1
 80059f2:	041b      	lsls	r3, r3, #16
 80059f4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80059f8:	431a      	orrs	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059fe:	3b01      	subs	r3, #1
 8005a00:	061b      	lsls	r3, r3, #24
 8005a02:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005a06:	4939      	ldr	r1, [pc, #228]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005a0c:	4b37      	ldr	r3, [pc, #220]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a10:	4a36      	ldr	r2, [pc, #216]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a12:	f023 0301 	bic.w	r3, r3, #1
 8005a16:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005a18:	4b34      	ldr	r3, [pc, #208]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a1a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a1c:	4b35      	ldr	r3, [pc, #212]	; (8005af4 <HAL_RCC_OscConfig+0x790>)
 8005a1e:	4013      	ands	r3, r2
 8005a20:	687a      	ldr	r2, [r7, #4]
 8005a22:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a24:	00d2      	lsls	r2, r2, #3
 8005a26:	4931      	ldr	r1, [pc, #196]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a28:	4313      	orrs	r3, r2
 8005a2a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005a2c:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a30:	f023 020c 	bic.w	r2, r3, #12
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a38:	492c      	ldr	r1, [pc, #176]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005a3e:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a42:	f023 0202 	bic.w	r2, r3, #2
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a4a:	4928      	ldr	r1, [pc, #160]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005a50:	4b26      	ldr	r3, [pc, #152]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a54:	4a25      	ldr	r2, [pc, #148]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a5a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a5c:	4b23      	ldr	r3, [pc, #140]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a60:	4a22      	ldr	r2, [pc, #136]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a66:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005a68:	4b20      	ldr	r3, [pc, #128]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a6c:	4a1f      	ldr	r2, [pc, #124]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005a72:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a78:	4a1c      	ldr	r2, [pc, #112]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a7a:	f043 0301 	orr.w	r3, r3, #1
 8005a7e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a80:	4b1a      	ldr	r3, [pc, #104]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a19      	ldr	r2, [pc, #100]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005a86:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a8c:	f7fb fec0 	bl	8001810 <HAL_GetTick>
 8005a90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a92:	e008      	b.n	8005aa6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005a94:	f7fb febc 	bl	8001810 <HAL_GetTick>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	1ad3      	subs	r3, r2, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d901      	bls.n	8005aa6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8005aa2:	2303      	movs	r3, #3
 8005aa4:	e067      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005aa6:	4b11      	ldr	r3, [pc, #68]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f0      	beq.n	8005a94 <HAL_RCC_OscConfig+0x730>
 8005ab2:	e05f      	b.n	8005b74 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ab4:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a0c      	ldr	r2, [pc, #48]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005aba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ac0:	f7fb fea6 	bl	8001810 <HAL_GetTick>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ac8:	f7fb fea2 	bl	8001810 <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e04d      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ada:	4b04      	ldr	r3, [pc, #16]	; (8005aec <HAL_RCC_OscConfig+0x788>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x764>
 8005ae6:	e045      	b.n	8005b74 <HAL_RCC_OscConfig+0x810>
 8005ae8:	58024800 	.word	0x58024800
 8005aec:	58024400 	.word	0x58024400
 8005af0:	fffffc0c 	.word	0xfffffc0c
 8005af4:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005af8:	4b21      	ldr	r3, [pc, #132]	; (8005b80 <HAL_RCC_OscConfig+0x81c>)
 8005afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005afc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005afe:	4b20      	ldr	r3, [pc, #128]	; (8005b80 <HAL_RCC_OscConfig+0x81c>)
 8005b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b02:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d031      	beq.n	8005b70 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b0c:	693b      	ldr	r3, [r7, #16]
 8005b0e:	f003 0203 	and.w	r2, r3, #3
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d12a      	bne.n	8005b70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d122      	bne.n	8005b70 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b34:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d11a      	bne.n	8005b70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	0a5b      	lsrs	r3, r3, #9
 8005b3e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b46:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d111      	bne.n	8005b70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	0c1b      	lsrs	r3, r3, #16
 8005b50:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005b5a:	429a      	cmp	r2, r3
 8005b5c:	d108      	bne.n	8005b70 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	0e1b      	lsrs	r3, r3, #24
 8005b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b6a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d001      	beq.n	8005b74 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e000      	b.n	8005b76 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3730      	adds	r7, #48	; 0x30
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	58024400 	.word	0x58024400

08005b84 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b086      	sub	sp, #24
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e19c      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005b98:	4b8a      	ldr	r3, [pc, #552]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 030f 	and.w	r3, r3, #15
 8005ba0:	683a      	ldr	r2, [r7, #0]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	d910      	bls.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ba6:	4b87      	ldr	r3, [pc, #540]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	f023 020f 	bic.w	r2, r3, #15
 8005bae:	4985      	ldr	r1, [pc, #532]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb6:	4b83      	ldr	r3, [pc, #524]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 030f 	and.w	r3, r3, #15
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d001      	beq.n	8005bc8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e184      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0304 	and.w	r3, r3, #4
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d010      	beq.n	8005bf6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	4b7b      	ldr	r3, [pc, #492]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d908      	bls.n	8005bf6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005be4:	4b78      	ldr	r3, [pc, #480]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005be6:	699b      	ldr	r3, [r3, #24]
 8005be8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	691b      	ldr	r3, [r3, #16]
 8005bf0:	4975      	ldr	r1, [pc, #468]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0308 	and.w	r3, r3, #8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d010      	beq.n	8005c24 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	695a      	ldr	r2, [r3, #20]
 8005c06:	4b70      	ldr	r3, [pc, #448]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c08:	69db      	ldr	r3, [r3, #28]
 8005c0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d908      	bls.n	8005c24 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005c12:	4b6d      	ldr	r3, [pc, #436]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	695b      	ldr	r3, [r3, #20]
 8005c1e:	496a      	ldr	r1, [pc, #424]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c20:	4313      	orrs	r3, r2
 8005c22:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f003 0310 	and.w	r3, r3, #16
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d010      	beq.n	8005c52 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	699a      	ldr	r2, [r3, #24]
 8005c34:	4b64      	ldr	r3, [pc, #400]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c36:	69db      	ldr	r3, [r3, #28]
 8005c38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d908      	bls.n	8005c52 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005c40:	4b61      	ldr	r3, [pc, #388]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c42:	69db      	ldr	r3, [r3, #28]
 8005c44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	699b      	ldr	r3, [r3, #24]
 8005c4c:	495e      	ldr	r1, [pc, #376]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f003 0320 	and.w	r3, r3, #32
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d010      	beq.n	8005c80 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	69da      	ldr	r2, [r3, #28]
 8005c62:	4b59      	ldr	r3, [pc, #356]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d908      	bls.n	8005c80 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005c6e:	4b56      	ldr	r3, [pc, #344]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	69db      	ldr	r3, [r3, #28]
 8005c7a:	4953      	ldr	r1, [pc, #332]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0302 	and.w	r3, r3, #2
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d010      	beq.n	8005cae <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b4d      	ldr	r3, [pc, #308]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	f003 030f 	and.w	r3, r3, #15
 8005c98:	429a      	cmp	r2, r3
 8005c9a:	d908      	bls.n	8005cae <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c9c:	4b4a      	ldr	r3, [pc, #296]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	f023 020f 	bic.w	r2, r3, #15
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	4947      	ldr	r1, [pc, #284]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005caa:	4313      	orrs	r3, r2
 8005cac:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d055      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005cba:	4b43      	ldr	r3, [pc, #268]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cbc:	699b      	ldr	r3, [r3, #24]
 8005cbe:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	4940      	ldr	r1, [pc, #256]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	685b      	ldr	r3, [r3, #4]
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d107      	bne.n	8005ce4 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005cd4:	4b3c      	ldr	r3, [pc, #240]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d121      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e0f6      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	685b      	ldr	r3, [r3, #4]
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d107      	bne.n	8005cfc <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005cec:	4b36      	ldr	r3, [pc, #216]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d115      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	e0ea      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	685b      	ldr	r3, [r3, #4]
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d107      	bne.n	8005d14 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005d04:	4b30      	ldr	r3, [pc, #192]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d109      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	e0de      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005d14:	4b2c      	ldr	r3, [pc, #176]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 0304 	and.w	r3, r3, #4
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d101      	bne.n	8005d24 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0d6      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005d24:	4b28      	ldr	r3, [pc, #160]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d26:	691b      	ldr	r3, [r3, #16]
 8005d28:	f023 0207 	bic.w	r2, r3, #7
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	4925      	ldr	r1, [pc, #148]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d32:	4313      	orrs	r3, r2
 8005d34:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d36:	f7fb fd6b 	bl	8001810 <HAL_GetTick>
 8005d3a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d3c:	e00a      	b.n	8005d54 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d3e:	f7fb fd67 	bl	8001810 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d901      	bls.n	8005d54 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005d50:	2303      	movs	r3, #3
 8005d52:	e0be      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	685b      	ldr	r3, [r3, #4]
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	429a      	cmp	r2, r3
 8005d64:	d1eb      	bne.n	8005d3e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 0302 	and.w	r3, r3, #2
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	4b14      	ldr	r3, [pc, #80]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	429a      	cmp	r2, r3
 8005d80:	d208      	bcs.n	8005d94 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d82:	4b11      	ldr	r3, [pc, #68]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d84:	699b      	ldr	r3, [r3, #24]
 8005d86:	f023 020f 	bic.w	r2, r3, #15
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	490e      	ldr	r1, [pc, #56]	; (8005dc8 <HAL_RCC_ClockConfig+0x244>)
 8005d90:	4313      	orrs	r3, r2
 8005d92:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d94:	4b0b      	ldr	r3, [pc, #44]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f003 030f 	and.w	r3, r3, #15
 8005d9c:	683a      	ldr	r2, [r7, #0]
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d214      	bcs.n	8005dcc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005da2:	4b08      	ldr	r3, [pc, #32]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f023 020f 	bic.w	r2, r3, #15
 8005daa:	4906      	ldr	r1, [pc, #24]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005dac:	683b      	ldr	r3, [r7, #0]
 8005dae:	4313      	orrs	r3, r2
 8005db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005db2:	4b04      	ldr	r3, [pc, #16]	; (8005dc4 <HAL_RCC_ClockConfig+0x240>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 030f 	and.w	r3, r3, #15
 8005dba:	683a      	ldr	r2, [r7, #0]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d005      	beq.n	8005dcc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005dc0:	2301      	movs	r3, #1
 8005dc2:	e086      	b.n	8005ed2 <HAL_RCC_ClockConfig+0x34e>
 8005dc4:	52002000 	.word	0x52002000
 8005dc8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f003 0304 	and.w	r3, r3, #4
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d010      	beq.n	8005dfa <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	691a      	ldr	r2, [r3, #16]
 8005ddc:	4b3f      	ldr	r3, [pc, #252]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005dde:	699b      	ldr	r3, [r3, #24]
 8005de0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d208      	bcs.n	8005dfa <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005de8:	4b3c      	ldr	r3, [pc, #240]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005dea:	699b      	ldr	r3, [r3, #24]
 8005dec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	4939      	ldr	r1, [pc, #228]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005df6:	4313      	orrs	r3, r2
 8005df8:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d010      	beq.n	8005e28 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	4b34      	ldr	r3, [pc, #208]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d208      	bcs.n	8005e28 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005e16:	4b31      	ldr	r3, [pc, #196]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	492e      	ldr	r1, [pc, #184]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699a      	ldr	r2, [r3, #24]
 8005e38:	4b28      	ldr	r3, [pc, #160]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d208      	bcs.n	8005e56 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005e44:	4b25      	ldr	r3, [pc, #148]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e46:	69db      	ldr	r3, [r3, #28]
 8005e48:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	699b      	ldr	r3, [r3, #24]
 8005e50:	4922      	ldr	r1, [pc, #136]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e52:	4313      	orrs	r3, r2
 8005e54:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0320 	and.w	r3, r3, #32
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d010      	beq.n	8005e84 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	69da      	ldr	r2, [r3, #28]
 8005e66:	4b1d      	ldr	r3, [pc, #116]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e68:	6a1b      	ldr	r3, [r3, #32]
 8005e6a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d208      	bcs.n	8005e84 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005e72:	4b1a      	ldr	r3, [pc, #104]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e74:	6a1b      	ldr	r3, [r3, #32]
 8005e76:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	69db      	ldr	r3, [r3, #28]
 8005e7e:	4917      	ldr	r1, [pc, #92]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005e84:	f000 f844 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 8005e88:	4601      	mov	r1, r0
 8005e8a:	4b14      	ldr	r3, [pc, #80]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	0a1b      	lsrs	r3, r3, #8
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	4a12      	ldr	r2, [pc, #72]	; (8005ee0 <HAL_RCC_ClockConfig+0x35c>)
 8005e96:	5cd3      	ldrb	r3, [r2, r3]
 8005e98:	f003 031f 	and.w	r3, r3, #31
 8005e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8005ea0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005ea2:	4b0e      	ldr	r3, [pc, #56]	; (8005edc <HAL_RCC_ClockConfig+0x358>)
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	f003 030f 	and.w	r3, r3, #15
 8005eaa:	4a0d      	ldr	r2, [pc, #52]	; (8005ee0 <HAL_RCC_ClockConfig+0x35c>)
 8005eac:	5cd3      	ldrb	r3, [r2, r3]
 8005eae:	f003 031f 	and.w	r3, r3, #31
 8005eb2:	693a      	ldr	r2, [r7, #16]
 8005eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8005eb8:	4a0a      	ldr	r2, [pc, #40]	; (8005ee4 <HAL_RCC_ClockConfig+0x360>)
 8005eba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005ebc:	4a0a      	ldr	r2, [pc, #40]	; (8005ee8 <HAL_RCC_ClockConfig+0x364>)
 8005ebe:	693b      	ldr	r3, [r7, #16]
 8005ec0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005ec2:	4b0a      	ldr	r3, [pc, #40]	; (8005eec <HAL_RCC_ClockConfig+0x368>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fb fc58 	bl	800177c <HAL_InitTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	58024400 	.word	0x58024400
 8005ee0:	08014098 	.word	0x08014098
 8005ee4:	24000004 	.word	0x24000004
 8005ee8:	24000000 	.word	0x24000000
 8005eec:	24000008 	.word	0x24000008

08005ef0 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8005ef4:	4b05      	ldr	r3, [pc, #20]	; (8005f0c <HAL_RCC_EnableCSS+0x1c>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a04      	ldr	r2, [pc, #16]	; (8005f0c <HAL_RCC_EnableCSS+0x1c>)
 8005efa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005efe:	6013      	str	r3, [r2, #0]
}
 8005f00:	bf00      	nop
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	58024400 	.word	0x58024400

08005f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b089      	sub	sp, #36	; 0x24
 8005f14:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f16:	4baf      	ldr	r3, [pc, #700]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f1e:	2b18      	cmp	r3, #24
 8005f20:	f200 814e 	bhi.w	80061c0 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005f24:	a201      	add	r2, pc, #4	; (adr r2, 8005f2c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2a:	bf00      	nop
 8005f2c:	08005f91 	.word	0x08005f91
 8005f30:	080061c1 	.word	0x080061c1
 8005f34:	080061c1 	.word	0x080061c1
 8005f38:	080061c1 	.word	0x080061c1
 8005f3c:	080061c1 	.word	0x080061c1
 8005f40:	080061c1 	.word	0x080061c1
 8005f44:	080061c1 	.word	0x080061c1
 8005f48:	080061c1 	.word	0x080061c1
 8005f4c:	08005fb7 	.word	0x08005fb7
 8005f50:	080061c1 	.word	0x080061c1
 8005f54:	080061c1 	.word	0x080061c1
 8005f58:	080061c1 	.word	0x080061c1
 8005f5c:	080061c1 	.word	0x080061c1
 8005f60:	080061c1 	.word	0x080061c1
 8005f64:	080061c1 	.word	0x080061c1
 8005f68:	080061c1 	.word	0x080061c1
 8005f6c:	08005fbd 	.word	0x08005fbd
 8005f70:	080061c1 	.word	0x080061c1
 8005f74:	080061c1 	.word	0x080061c1
 8005f78:	080061c1 	.word	0x080061c1
 8005f7c:	080061c1 	.word	0x080061c1
 8005f80:	080061c1 	.word	0x080061c1
 8005f84:	080061c1 	.word	0x080061c1
 8005f88:	080061c1 	.word	0x080061c1
 8005f8c:	08005fc3 	.word	0x08005fc3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005f90:	4b90      	ldr	r3, [pc, #576]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d009      	beq.n	8005fb0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005f9c:	4b8d      	ldr	r3, [pc, #564]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	08db      	lsrs	r3, r3, #3
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	4a8c      	ldr	r2, [pc, #560]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005fae:	e10a      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005fb0:	4b89      	ldr	r3, [pc, #548]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005fb2:	61bb      	str	r3, [r7, #24]
    break;
 8005fb4:	e107      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005fb6:	4b89      	ldr	r3, [pc, #548]	; (80061dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005fb8:	61bb      	str	r3, [r7, #24]
    break;
 8005fba:	e104      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005fbc:	4b88      	ldr	r3, [pc, #544]	; (80061e0 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005fbe:	61bb      	str	r3, [r7, #24]
    break;
 8005fc0:	e101      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fc2:	4b84      	ldr	r3, [pc, #528]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	f003 0303 	and.w	r3, r3, #3
 8005fca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005fcc:	4b81      	ldr	r3, [pc, #516]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fd0:	091b      	lsrs	r3, r3, #4
 8005fd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fd6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005fd8:	4b7e      	ldr	r3, [pc, #504]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fdc:	f003 0301 	and.w	r3, r3, #1
 8005fe0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005fe2:	4b7c      	ldr	r3, [pc, #496]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe6:	08db      	lsrs	r3, r3, #3
 8005fe8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fec:	68fa      	ldr	r2, [r7, #12]
 8005fee:	fb02 f303 	mul.w	r3, r2, r3
 8005ff2:	ee07 3a90 	vmov	s15, r3
 8005ff6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ffa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 80da 	beq.w	80061ba <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d05a      	beq.n	80060c2 <HAL_RCC_GetSysClockFreq+0x1b2>
 800600c:	2b01      	cmp	r3, #1
 800600e:	d302      	bcc.n	8006016 <HAL_RCC_GetSysClockFreq+0x106>
 8006010:	2b02      	cmp	r3, #2
 8006012:	d078      	beq.n	8006106 <HAL_RCC_GetSysClockFreq+0x1f6>
 8006014:	e099      	b.n	800614a <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006016:	4b6f      	ldr	r3, [pc, #444]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d02d      	beq.n	800607e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006022:	4b6c      	ldr	r3, [pc, #432]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	08db      	lsrs	r3, r3, #3
 8006028:	f003 0303 	and.w	r3, r3, #3
 800602c:	4a6a      	ldr	r2, [pc, #424]	; (80061d8 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800602e:	fa22 f303 	lsr.w	r3, r2, r3
 8006032:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	ee07 3a90 	vmov	s15, r3
 800603a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	ee07 3a90 	vmov	s15, r3
 8006044:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006048:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800604c:	4b61      	ldr	r3, [pc, #388]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800604e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006050:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006054:	ee07 3a90 	vmov	s15, r3
 8006058:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800605c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006060:	eddf 5a60 	vldr	s11, [pc, #384]	; 80061e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006064:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006068:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800606c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006070:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006078:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800607c:	e087      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	ee07 3a90 	vmov	s15, r3
 8006084:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006088:	eddf 6a57 	vldr	s13, [pc, #348]	; 80061e8 <HAL_RCC_GetSysClockFreq+0x2d8>
 800608c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006090:	4b50      	ldr	r3, [pc, #320]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006094:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006098:	ee07 3a90 	vmov	s15, r3
 800609c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a0:	ed97 6a02 	vldr	s12, [r7, #8]
 80060a4:	eddf 5a4f 	vldr	s11, [pc, #316]	; 80061e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c0:	e065      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80060c2:	693b      	ldr	r3, [r7, #16]
 80060c4:	ee07 3a90 	vmov	s15, r3
 80060c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060cc:	eddf 6a47 	vldr	s13, [pc, #284]	; 80061ec <HAL_RCC_GetSysClockFreq+0x2dc>
 80060d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060d4:	4b3f      	ldr	r3, [pc, #252]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 80060d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060dc:	ee07 3a90 	vmov	s15, r3
 80060e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060e4:	ed97 6a02 	vldr	s12, [r7, #8]
 80060e8:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80061e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 80060ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006100:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006104:	e043      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006106:	693b      	ldr	r3, [r7, #16]
 8006108:	ee07 3a90 	vmov	s15, r3
 800610c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006110:	eddf 6a37 	vldr	s13, [pc, #220]	; 80061f0 <HAL_RCC_GetSysClockFreq+0x2e0>
 8006114:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006118:	4b2e      	ldr	r3, [pc, #184]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800611a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800611c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006120:	ee07 3a90 	vmov	s15, r3
 8006124:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006128:	ed97 6a02 	vldr	s12, [r7, #8]
 800612c:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80061e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006130:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006134:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006138:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800613c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006144:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006148:	e021      	b.n	800618e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	ee07 3a90 	vmov	s15, r3
 8006150:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006154:	eddf 6a25 	vldr	s13, [pc, #148]	; 80061ec <HAL_RCC_GetSysClockFreq+0x2dc>
 8006158:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800615c:	4b1d      	ldr	r3, [pc, #116]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800615e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006164:	ee07 3a90 	vmov	s15, r3
 8006168:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800616c:	ed97 6a02 	vldr	s12, [r7, #8]
 8006170:	eddf 5a1c 	vldr	s11, [pc, #112]	; 80061e4 <HAL_RCC_GetSysClockFreq+0x2d4>
 8006174:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006178:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800617c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006180:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006184:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006188:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800618c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800618e:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <HAL_RCC_GetSysClockFreq+0x2c4>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	0a5b      	lsrs	r3, r3, #9
 8006194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006198:	3301      	adds	r3, #1
 800619a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80061aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061b2:	ee17 3a90 	vmov	r3, s15
 80061b6:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80061b8:	e005      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	61bb      	str	r3, [r7, #24]
    break;
 80061be:	e002      	b.n	80061c6 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 80061c0:	4b06      	ldr	r3, [pc, #24]	; (80061dc <HAL_RCC_GetSysClockFreq+0x2cc>)
 80061c2:	61bb      	str	r3, [r7, #24]
    break;
 80061c4:	bf00      	nop
  }

  return sysclockfreq;
 80061c6:	69bb      	ldr	r3, [r7, #24]
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3724      	adds	r7, #36	; 0x24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	58024400 	.word	0x58024400
 80061d8:	03d09000 	.word	0x03d09000
 80061dc:	003d0900 	.word	0x003d0900
 80061e0:	017d7840 	.word	0x017d7840
 80061e4:	46000000 	.word	0x46000000
 80061e8:	4c742400 	.word	0x4c742400
 80061ec:	4a742400 	.word	0x4a742400
 80061f0:	4bbebc20 	.word	0x4bbebc20

080061f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b082      	sub	sp, #8
 80061f8:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80061fa:	f7ff fe89 	bl	8005f10 <HAL_RCC_GetSysClockFreq>
 80061fe:	4601      	mov	r1, r0
 8006200:	4b10      	ldr	r3, [pc, #64]	; (8006244 <HAL_RCC_GetHCLKFreq+0x50>)
 8006202:	699b      	ldr	r3, [r3, #24]
 8006204:	0a1b      	lsrs	r3, r3, #8
 8006206:	f003 030f 	and.w	r3, r3, #15
 800620a:	4a0f      	ldr	r2, [pc, #60]	; (8006248 <HAL_RCC_GetHCLKFreq+0x54>)
 800620c:	5cd3      	ldrb	r3, [r2, r3]
 800620e:	f003 031f 	and.w	r3, r3, #31
 8006212:	fa21 f303 	lsr.w	r3, r1, r3
 8006216:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006218:	4b0a      	ldr	r3, [pc, #40]	; (8006244 <HAL_RCC_GetHCLKFreq+0x50>)
 800621a:	699b      	ldr	r3, [r3, #24]
 800621c:	f003 030f 	and.w	r3, r3, #15
 8006220:	4a09      	ldr	r2, [pc, #36]	; (8006248 <HAL_RCC_GetHCLKFreq+0x54>)
 8006222:	5cd3      	ldrb	r3, [r2, r3]
 8006224:	f003 031f 	and.w	r3, r3, #31
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	fa22 f303 	lsr.w	r3, r2, r3
 800622e:	4a07      	ldr	r2, [pc, #28]	; (800624c <HAL_RCC_GetHCLKFreq+0x58>)
 8006230:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006232:	4a07      	ldr	r2, [pc, #28]	; (8006250 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006238:	4b04      	ldr	r3, [pc, #16]	; (800624c <HAL_RCC_GetHCLKFreq+0x58>)
 800623a:	681b      	ldr	r3, [r3, #0]
}
 800623c:	4618      	mov	r0, r3
 800623e:	3708      	adds	r7, #8
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}
 8006244:	58024400 	.word	0x58024400
 8006248:	08014098 	.word	0x08014098
 800624c:	24000004 	.word	0x24000004
 8006250:	24000000 	.word	0x24000000

08006254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006258:	f7ff ffcc 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 800625c:	4601      	mov	r1, r0
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006260:	69db      	ldr	r3, [r3, #28]
 8006262:	091b      	lsrs	r3, r3, #4
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	4a04      	ldr	r2, [pc, #16]	; (800627c <HAL_RCC_GetPCLK1Freq+0x28>)
 800626a:	5cd3      	ldrb	r3, [r2, r3]
 800626c:	f003 031f 	and.w	r3, r3, #31
 8006270:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006274:	4618      	mov	r0, r3
 8006276:	bd80      	pop	{r7, pc}
 8006278:	58024400 	.word	0x58024400
 800627c:	08014098 	.word	0x08014098

08006280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006284:	f7ff ffb6 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 8006288:	4601      	mov	r1, r0
 800628a:	4b06      	ldr	r3, [pc, #24]	; (80062a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	0a1b      	lsrs	r3, r3, #8
 8006290:	f003 0307 	and.w	r3, r3, #7
 8006294:	4a04      	ldr	r2, [pc, #16]	; (80062a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006296:	5cd3      	ldrb	r3, [r2, r3]
 8006298:	f003 031f 	and.w	r3, r3, #31
 800629c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	bd80      	pop	{r7, pc}
 80062a4:	58024400 	.word	0x58024400
 80062a8:	08014098 	.word	0x08014098

080062ac <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80062b0:	4b07      	ldr	r3, [pc, #28]	; (80062d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80062b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062bc:	d105      	bne.n	80062ca <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 80062be:	f000 f809 	bl	80062d4 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80062c2:	4b03      	ldr	r3, [pc, #12]	; (80062d0 <HAL_RCC_NMI_IRQHandler+0x24>)
 80062c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062c8:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 80062ca:	bf00      	nop
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	58024400 	.word	0x58024400

080062d4 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 80062d4:	b480      	push	{r7}
 80062d6:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 80062d8:	bf00      	nop
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80062ec:	2300      	movs	r3, #0
 80062ee:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80062f0:	2300      	movs	r3, #0
 80062f2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d03d      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006304:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006308:	d013      	beq.n	8006332 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800630a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800630e:	d802      	bhi.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8006310:	2b00      	cmp	r3, #0
 8006312:	d007      	beq.n	8006324 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8006314:	e01f      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006316:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800631a:	d013      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800631c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006320:	d01c      	beq.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006322:	e018      	b.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006324:	4baf      	ldr	r3, [pc, #700]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006328:	4aae      	ldr	r2, [pc, #696]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800632a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800632e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006330:	e015      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	3304      	adds	r3, #4
 8006336:	2102      	movs	r1, #2
 8006338:	4618      	mov	r0, r3
 800633a:	f001 fd33 	bl	8007da4 <RCCEx_PLL2_Config>
 800633e:	4603      	mov	r3, r0
 8006340:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006342:	e00c      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	3324      	adds	r3, #36	; 0x24
 8006348:	2102      	movs	r1, #2
 800634a:	4618      	mov	r0, r3
 800634c:	f001 fddc 	bl	8007f08 <RCCEx_PLL3_Config>
 8006350:	4603      	mov	r3, r0
 8006352:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006354:	e003      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006356:	2301      	movs	r3, #1
 8006358:	75fb      	strb	r3, [r7, #23]
      break;
 800635a:	e000      	b.n	800635e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800635c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800635e:	7dfb      	ldrb	r3, [r7, #23]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d109      	bne.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006364:	4b9f      	ldr	r3, [pc, #636]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006368:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006370:	499c      	ldr	r1, [pc, #624]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006372:	4313      	orrs	r3, r2
 8006374:	650b      	str	r3, [r1, #80]	; 0x50
 8006376:	e001      	b.n	800637c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006378:	7dfb      	ldrb	r3, [r7, #23]
 800637a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006384:	2b00      	cmp	r3, #0
 8006386:	d03d      	beq.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800638c:	2b04      	cmp	r3, #4
 800638e:	d826      	bhi.n	80063de <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006390:	a201      	add	r2, pc, #4	; (adr r2, 8006398 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006396:	bf00      	nop
 8006398:	080063ad 	.word	0x080063ad
 800639c:	080063bb 	.word	0x080063bb
 80063a0:	080063cd 	.word	0x080063cd
 80063a4:	080063e5 	.word	0x080063e5
 80063a8:	080063e5 	.word	0x080063e5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063ac:	4b8d      	ldr	r3, [pc, #564]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	4a8c      	ldr	r2, [pc, #560]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063b8:	e015      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	3304      	adds	r3, #4
 80063be:	2100      	movs	r1, #0
 80063c0:	4618      	mov	r0, r3
 80063c2:	f001 fcef 	bl	8007da4 <RCCEx_PLL2_Config>
 80063c6:	4603      	mov	r3, r0
 80063c8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063ca:	e00c      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3324      	adds	r3, #36	; 0x24
 80063d0:	2100      	movs	r1, #0
 80063d2:	4618      	mov	r0, r3
 80063d4:	f001 fd98 	bl	8007f08 <RCCEx_PLL3_Config>
 80063d8:	4603      	mov	r3, r0
 80063da:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80063dc:	e003      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	75fb      	strb	r3, [r7, #23]
      break;
 80063e2:	e000      	b.n	80063e6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80063e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063e6:	7dfb      	ldrb	r3, [r7, #23]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d109      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80063ec:	4b7d      	ldr	r3, [pc, #500]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063f0:	f023 0207 	bic.w	r2, r3, #7
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063f8:	497a      	ldr	r1, [pc, #488]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80063fa:	4313      	orrs	r3, r2
 80063fc:	650b      	str	r3, [r1, #80]	; 0x50
 80063fe:	e001      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	7dfb      	ldrb	r3, [r7, #23]
 8006402:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800640c:	2b00      	cmp	r3, #0
 800640e:	d03e      	beq.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	2b80      	cmp	r3, #128	; 0x80
 8006416:	d01c      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8006418:	2b80      	cmp	r3, #128	; 0x80
 800641a:	d804      	bhi.n	8006426 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800641c:	2b00      	cmp	r3, #0
 800641e:	d008      	beq.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006420:	2b40      	cmp	r3, #64	; 0x40
 8006422:	d00d      	beq.n	8006440 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006424:	e01e      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006426:	2bc0      	cmp	r3, #192	; 0xc0
 8006428:	d01f      	beq.n	800646a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800642a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800642e:	d01e      	beq.n	800646e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006430:	e018      	b.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006432:	4b6c      	ldr	r3, [pc, #432]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006436:	4a6b      	ldr	r2, [pc, #428]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800643c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800643e:	e017      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	3304      	adds	r3, #4
 8006444:	2100      	movs	r1, #0
 8006446:	4618      	mov	r0, r3
 8006448:	f001 fcac 	bl	8007da4 <RCCEx_PLL2_Config>
 800644c:	4603      	mov	r3, r0
 800644e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006450:	e00e      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	3324      	adds	r3, #36	; 0x24
 8006456:	2100      	movs	r1, #0
 8006458:	4618      	mov	r0, r3
 800645a:	f001 fd55 	bl	8007f08 <RCCEx_PLL3_Config>
 800645e:	4603      	mov	r3, r0
 8006460:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006462:	e005      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	75fb      	strb	r3, [r7, #23]
      break;
 8006468:	e002      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800646a:	bf00      	nop
 800646c:	e000      	b.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800646e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006470:	7dfb      	ldrb	r3, [r7, #23]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d109      	bne.n	800648a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006476:	4b5b      	ldr	r3, [pc, #364]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800647a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006482:	4958      	ldr	r1, [pc, #352]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006484:	4313      	orrs	r3, r2
 8006486:	650b      	str	r3, [r1, #80]	; 0x50
 8006488:	e001      	b.n	800648e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800648a:	7dfb      	ldrb	r3, [r7, #23]
 800648c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006496:	2b00      	cmp	r3, #0
 8006498:	d044      	beq.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80064a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a4:	d01f      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80064a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064aa:	d805      	bhi.n	80064b8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d00a      	beq.n	80064c6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80064b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064b4:	d00e      	beq.n	80064d4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 80064b6:	e01f      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 80064b8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80064bc:	d01f      	beq.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0x21a>
 80064be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064c2:	d01e      	beq.n	8006502 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80064c4:	e018      	b.n	80064f8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064c6:	4b47      	ldr	r3, [pc, #284]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ca:	4a46      	ldr	r2, [pc, #280]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80064cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064d0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064d2:	e017      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	3304      	adds	r3, #4
 80064d8:	2100      	movs	r1, #0
 80064da:	4618      	mov	r0, r3
 80064dc:	f001 fc62 	bl	8007da4 <RCCEx_PLL2_Config>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80064e4:	e00e      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	3324      	adds	r3, #36	; 0x24
 80064ea:	2100      	movs	r1, #0
 80064ec:	4618      	mov	r0, r3
 80064ee:	f001 fd0b 	bl	8007f08 <RCCEx_PLL3_Config>
 80064f2:	4603      	mov	r3, r0
 80064f4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80064f6:	e005      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80064f8:	2301      	movs	r3, #1
 80064fa:	75fb      	strb	r3, [r7, #23]
      break;
 80064fc:	e002      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80064fe:	bf00      	nop
 8006500:	e000      	b.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 8006502:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006504:	7dfb      	ldrb	r3, [r7, #23]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d10a      	bne.n	8006520 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800650a:	4b36      	ldr	r3, [pc, #216]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800650c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800650e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006518:	4932      	ldr	r1, [pc, #200]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800651a:	4313      	orrs	r3, r2
 800651c:	658b      	str	r3, [r1, #88]	; 0x58
 800651e:	e001      	b.n	8006524 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006520:	7dfb      	ldrb	r3, [r7, #23]
 8006522:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800652c:	2b00      	cmp	r3, #0
 800652e:	d044      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006536:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800653a:	d01f      	beq.n	800657c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800653c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006540:	d805      	bhi.n	800654e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00a      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006546:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800654a:	d00e      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800654c:	e01f      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800654e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006552:	d01f      	beq.n	8006594 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006558:	d01e      	beq.n	8006598 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800655a:	e018      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b21      	ldr	r3, [pc, #132]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800655e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006560:	4a20      	ldr	r2, [pc, #128]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006568:	e017      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	3304      	adds	r3, #4
 800656e:	2100      	movs	r1, #0
 8006570:	4618      	mov	r0, r3
 8006572:	f001 fc17 	bl	8007da4 <RCCEx_PLL2_Config>
 8006576:	4603      	mov	r3, r0
 8006578:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800657a:	e00e      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3324      	adds	r3, #36	; 0x24
 8006580:	2100      	movs	r1, #0
 8006582:	4618      	mov	r0, r3
 8006584:	f001 fcc0 	bl	8007f08 <RCCEx_PLL3_Config>
 8006588:	4603      	mov	r3, r0
 800658a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800658c:	e005      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800658e:	2301      	movs	r3, #1
 8006590:	75fb      	strb	r3, [r7, #23]
      break;
 8006592:	e002      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006594:	bf00      	nop
 8006596:	e000      	b.n	800659a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800659a:	7dfb      	ldrb	r3, [r7, #23]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d10a      	bne.n	80065b6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80065a0:	4b10      	ldr	r3, [pc, #64]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065a4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80065ae:	490d      	ldr	r1, [pc, #52]	; (80065e4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80065b0:	4313      	orrs	r3, r2
 80065b2:	658b      	str	r3, [r1, #88]	; 0x58
 80065b4:	e001      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b6:	7dfb      	ldrb	r3, [r7, #23]
 80065b8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d035      	beq.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065ca:	2b10      	cmp	r3, #16
 80065cc:	d00c      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d802      	bhi.n	80065d8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d01b      	beq.n	800660e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80065d6:	e017      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065d8:	2b20      	cmp	r3, #32
 80065da:	d00c      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80065dc:	2b30      	cmp	r3, #48	; 0x30
 80065de:	d018      	beq.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80065e0:	e012      	b.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80065e2:	bf00      	nop
 80065e4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4baf      	ldr	r3, [pc, #700]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	4aae      	ldr	r2, [pc, #696]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80065f4:	e00e      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	3304      	adds	r3, #4
 80065fa:	2102      	movs	r1, #2
 80065fc:	4618      	mov	r0, r3
 80065fe:	f001 fbd1 	bl	8007da4 <RCCEx_PLL2_Config>
 8006602:	4603      	mov	r3, r0
 8006604:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8006606:	e005      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	75fb      	strb	r3, [r7, #23]
      break;
 800660c:	e002      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800660e:	bf00      	nop
 8006610:	e000      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 8006612:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006614:	7dfb      	ldrb	r3, [r7, #23]
 8006616:	2b00      	cmp	r3, #0
 8006618:	d109      	bne.n	800662e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800661a:	4ba3      	ldr	r3, [pc, #652]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800661c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800661e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006626:	49a0      	ldr	r1, [pc, #640]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006628:	4313      	orrs	r3, r2
 800662a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800662c:	e001      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663a:	2b00      	cmp	r3, #0
 800663c:	d042      	beq.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006646:	d01f      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800664c:	d805      	bhi.n	800665a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00a      	beq.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006656:	d00e      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006658:	e01f      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800665a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800665e:	d01f      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006660:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006664:	d01e      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006666:	e018      	b.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006668:	4b8f      	ldr	r3, [pc, #572]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800666a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800666c:	4a8e      	ldr	r2, [pc, #568]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800666e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006672:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006674:	e017      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	3304      	adds	r3, #4
 800667a:	2100      	movs	r1, #0
 800667c:	4618      	mov	r0, r3
 800667e:	f001 fb91 	bl	8007da4 <RCCEx_PLL2_Config>
 8006682:	4603      	mov	r3, r0
 8006684:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006686:	e00e      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	3324      	adds	r3, #36	; 0x24
 800668c:	2100      	movs	r1, #0
 800668e:	4618      	mov	r0, r3
 8006690:	f001 fc3a 	bl	8007f08 <RCCEx_PLL3_Config>
 8006694:	4603      	mov	r3, r0
 8006696:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006698:	e005      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      break;
 800669e:	e002      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066a0:	bf00      	nop
 80066a2:	e000      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 80066a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d109      	bne.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80066ac:	4b7e      	ldr	r3, [pc, #504]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066b0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066b8:	497b      	ldr	r1, [pc, #492]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80066ba:	4313      	orrs	r3, r2
 80066bc:	650b      	str	r3, [r1, #80]	; 0x50
 80066be:	e001      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d042      	beq.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066d4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066d8:	d01b      	beq.n	8006712 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80066da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066de:	d805      	bhi.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0x408>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d022      	beq.n	800672a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80066e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066e8:	d00a      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80066ea:	e01b      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80066ec:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80066f0:	d01d      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80066f2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80066f6:	d01c      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80066f8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80066fc:	d01b      	beq.n	8006736 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80066fe:	e011      	b.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	3304      	adds	r3, #4
 8006704:	2101      	movs	r1, #1
 8006706:	4618      	mov	r0, r3
 8006708:	f001 fb4c 	bl	8007da4 <RCCEx_PLL2_Config>
 800670c:	4603      	mov	r3, r0
 800670e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006710:	e012      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	3324      	adds	r3, #36	; 0x24
 8006716:	2101      	movs	r1, #1
 8006718:	4618      	mov	r0, r3
 800671a:	f001 fbf5 	bl	8007f08 <RCCEx_PLL3_Config>
 800671e:	4603      	mov	r3, r0
 8006720:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006722:	e009      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006724:	2301      	movs	r3, #1
 8006726:	75fb      	strb	r3, [r7, #23]
      break;
 8006728:	e006      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800672a:	bf00      	nop
 800672c:	e004      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800672e:	bf00      	nop
 8006730:	e002      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006732:	bf00      	nop
 8006734:	e000      	b.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006736:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006738:	7dfb      	ldrb	r3, [r7, #23]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d109      	bne.n	8006752 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800673e:	4b5a      	ldr	r3, [pc, #360]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006740:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006742:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800674a:	4957      	ldr	r1, [pc, #348]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800674c:	4313      	orrs	r3, r2
 800674e:	650b      	str	r3, [r1, #80]	; 0x50
 8006750:	e001      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006752:	7dfb      	ldrb	r3, [r7, #23]
 8006754:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800675e:	2b00      	cmp	r3, #0
 8006760:	d044      	beq.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006768:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800676c:	d01b      	beq.n	80067a6 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800676e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006772:	d805      	bhi.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006778:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800677c:	d00a      	beq.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800677e:	e01b      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006780:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006784:	d01d      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006786:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800678a:	d01c      	beq.n	80067c6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800678c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006790:	d01b      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006792:	e011      	b.n	80067b8 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	3304      	adds	r3, #4
 8006798:	2101      	movs	r1, #1
 800679a:	4618      	mov	r0, r3
 800679c:	f001 fb02 	bl	8007da4 <RCCEx_PLL2_Config>
 80067a0:	4603      	mov	r3, r0
 80067a2:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067a4:	e012      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	3324      	adds	r3, #36	; 0x24
 80067aa:	2101      	movs	r1, #1
 80067ac:	4618      	mov	r0, r3
 80067ae:	f001 fbab 	bl	8007f08 <RCCEx_PLL3_Config>
 80067b2:	4603      	mov	r3, r0
 80067b4:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80067b6:	e009      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80067b8:	2301      	movs	r3, #1
 80067ba:	75fb      	strb	r3, [r7, #23]
      break;
 80067bc:	e006      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067be:	bf00      	nop
 80067c0:	e004      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067c2:	bf00      	nop
 80067c4:	e002      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067c6:	bf00      	nop
 80067c8:	e000      	b.n	80067cc <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80067ca:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d10a      	bne.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80067d2:	4b35      	ldr	r3, [pc, #212]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067d6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80067e0:	4931      	ldr	r1, [pc, #196]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80067e2:	4313      	orrs	r3, r2
 80067e4:	658b      	str	r3, [r1, #88]	; 0x58
 80067e6:	e001      	b.n	80067ec <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d02d      	beq.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80067fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006800:	d005      	beq.n	800680e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006802:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006806:	d009      	beq.n	800681c <HAL_RCCEx_PeriphCLKConfig+0x538>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d013      	beq.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800680c:	e00f      	b.n	800682e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800680e:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006812:	4a25      	ldr	r2, [pc, #148]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006814:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006818:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800681a:	e00c      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	3304      	adds	r3, #4
 8006820:	2101      	movs	r1, #1
 8006822:	4618      	mov	r0, r3
 8006824:	f001 fabe 	bl	8007da4 <RCCEx_PLL2_Config>
 8006828:	4603      	mov	r3, r0
 800682a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800682c:	e003      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	75fb      	strb	r3, [r7, #23]
      break;
 8006832:	e000      	b.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006834:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006836:	7dfb      	ldrb	r3, [r7, #23]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d109      	bne.n	8006850 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800683c:	4b1a      	ldr	r3, [pc, #104]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800683e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006840:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006848:	4917      	ldr	r1, [pc, #92]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800684a:	4313      	orrs	r3, r2
 800684c:	650b      	str	r3, [r1, #80]	; 0x50
 800684e:	e001      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006850:	7dfb      	ldrb	r3, [r7, #23]
 8006852:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d035      	beq.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006864:	2b03      	cmp	r3, #3
 8006866:	d81b      	bhi.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006868:	a201      	add	r2, pc, #4	; (adr r2, 8006870 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800686a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800686e:	bf00      	nop
 8006870:	080068ad 	.word	0x080068ad
 8006874:	08006881 	.word	0x08006881
 8006878:	0800688f 	.word	0x0800688f
 800687c:	080068ad 	.word	0x080068ad
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006880:	4b09      	ldr	r3, [pc, #36]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006882:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006884:	4a08      	ldr	r2, [pc, #32]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006886:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800688a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800688c:	e00f      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	3304      	adds	r3, #4
 8006892:	2102      	movs	r1, #2
 8006894:	4618      	mov	r0, r3
 8006896:	f001 fa85 	bl	8007da4 <RCCEx_PLL2_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800689e:	e006      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80068a0:	2301      	movs	r3, #1
 80068a2:	75fb      	strb	r3, [r7, #23]
      break;
 80068a4:	e003      	b.n	80068ae <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
      break;
 80068ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068ae:	7dfb      	ldrb	r3, [r7, #23]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d109      	bne.n	80068c8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80068b4:	4bba      	ldr	r3, [pc, #744]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b8:	f023 0203 	bic.w	r2, r3, #3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c0:	49b7      	ldr	r1, [pc, #732]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80068c6:	e001      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068c8:	7dfb      	ldrb	r3, [r7, #23]
 80068ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	681b      	ldr	r3, [r3, #0]
 80068d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f000 8086 	beq.w	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80068da:	4bb2      	ldr	r3, [pc, #712]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4ab1      	ldr	r2, [pc, #708]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80068e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80068e6:	f7fa ff93 	bl	8001810 <HAL_GetTick>
 80068ea:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80068ec:	e009      	b.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80068ee:	f7fa ff8f 	bl	8001810 <HAL_GetTick>
 80068f2:	4602      	mov	r2, r0
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	1ad3      	subs	r3, r2, r3
 80068f8:	2b64      	cmp	r3, #100	; 0x64
 80068fa:	d902      	bls.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	75fb      	strb	r3, [r7, #23]
        break;
 8006900:	e005      	b.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006902:	4ba8      	ldr	r3, [pc, #672]	; (8006ba4 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d0ef      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d166      	bne.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006914:	4ba2      	ldr	r3, [pc, #648]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006916:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800691e:	4053      	eors	r3, r2
 8006920:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006924:	2b00      	cmp	r3, #0
 8006926:	d013      	beq.n	8006950 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006928:	4b9d      	ldr	r3, [pc, #628]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800692a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800692c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006930:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006932:	4b9b      	ldr	r3, [pc, #620]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006936:	4a9a      	ldr	r2, [pc, #616]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800693c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800693e:	4b98      	ldr	r3, [pc, #608]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006940:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006942:	4a97      	ldr	r2, [pc, #604]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006944:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006948:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800694a:	4a95      	ldr	r2, [pc, #596]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006956:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800695a:	d115      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800695c:	f7fa ff58 	bl	8001810 <HAL_GetTick>
 8006960:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006962:	e00b      	b.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006964:	f7fa ff54 	bl	8001810 <HAL_GetTick>
 8006968:	4602      	mov	r2, r0
 800696a:	693b      	ldr	r3, [r7, #16]
 800696c:	1ad3      	subs	r3, r2, r3
 800696e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006972:	4293      	cmp	r3, r2
 8006974:	d902      	bls.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006976:	2303      	movs	r3, #3
 8006978:	75fb      	strb	r3, [r7, #23]
            break;
 800697a:	e005      	b.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800697c:	4b88      	ldr	r3, [pc, #544]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800697e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006980:	f003 0302 	and.w	r3, r3, #2
 8006984:	2b00      	cmp	r3, #0
 8006986:	d0ed      	beq.n	8006964 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d126      	bne.n	80069dc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006994:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006998:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800699c:	d10d      	bne.n	80069ba <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800699e:	4b80      	ldr	r3, [pc, #512]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069ac:	0919      	lsrs	r1, r3, #4
 80069ae:	4b7e      	ldr	r3, [pc, #504]	; (8006ba8 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 80069b0:	400b      	ands	r3, r1
 80069b2:	497b      	ldr	r1, [pc, #492]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	610b      	str	r3, [r1, #16]
 80069b8:	e005      	b.n	80069c6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 80069ba:	4b79      	ldr	r3, [pc, #484]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069bc:	691b      	ldr	r3, [r3, #16]
 80069be:	4a78      	ldr	r2, [pc, #480]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80069c4:	6113      	str	r3, [r2, #16]
 80069c6:	4b76      	ldr	r3, [pc, #472]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069c8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80069d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069d4:	4972      	ldr	r1, [pc, #456]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80069d6:	4313      	orrs	r3, r2
 80069d8:	670b      	str	r3, [r1, #112]	; 0x70
 80069da:	e004      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80069dc:	7dfb      	ldrb	r3, [r7, #23]
 80069de:	75bb      	strb	r3, [r7, #22]
 80069e0:	e001      	b.n	80069e6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e2:	7dfb      	ldrb	r3, [r7, #23]
 80069e4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d07d      	beq.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80069f6:	2b28      	cmp	r3, #40	; 0x28
 80069f8:	d866      	bhi.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80069fa:	a201      	add	r2, pc, #4	; (adr r2, 8006a00 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80069fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a00:	08006acf 	.word	0x08006acf
 8006a04:	08006ac9 	.word	0x08006ac9
 8006a08:	08006ac9 	.word	0x08006ac9
 8006a0c:	08006ac9 	.word	0x08006ac9
 8006a10:	08006ac9 	.word	0x08006ac9
 8006a14:	08006ac9 	.word	0x08006ac9
 8006a18:	08006ac9 	.word	0x08006ac9
 8006a1c:	08006ac9 	.word	0x08006ac9
 8006a20:	08006aa5 	.word	0x08006aa5
 8006a24:	08006ac9 	.word	0x08006ac9
 8006a28:	08006ac9 	.word	0x08006ac9
 8006a2c:	08006ac9 	.word	0x08006ac9
 8006a30:	08006ac9 	.word	0x08006ac9
 8006a34:	08006ac9 	.word	0x08006ac9
 8006a38:	08006ac9 	.word	0x08006ac9
 8006a3c:	08006ac9 	.word	0x08006ac9
 8006a40:	08006ab7 	.word	0x08006ab7
 8006a44:	08006ac9 	.word	0x08006ac9
 8006a48:	08006ac9 	.word	0x08006ac9
 8006a4c:	08006ac9 	.word	0x08006ac9
 8006a50:	08006ac9 	.word	0x08006ac9
 8006a54:	08006ac9 	.word	0x08006ac9
 8006a58:	08006ac9 	.word	0x08006ac9
 8006a5c:	08006ac9 	.word	0x08006ac9
 8006a60:	08006acf 	.word	0x08006acf
 8006a64:	08006ac9 	.word	0x08006ac9
 8006a68:	08006ac9 	.word	0x08006ac9
 8006a6c:	08006ac9 	.word	0x08006ac9
 8006a70:	08006ac9 	.word	0x08006ac9
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006ac9 	.word	0x08006ac9
 8006a7c:	08006ac9 	.word	0x08006ac9
 8006a80:	08006acf 	.word	0x08006acf
 8006a84:	08006ac9 	.word	0x08006ac9
 8006a88:	08006ac9 	.word	0x08006ac9
 8006a8c:	08006ac9 	.word	0x08006ac9
 8006a90:	08006ac9 	.word	0x08006ac9
 8006a94:	08006ac9 	.word	0x08006ac9
 8006a98:	08006ac9 	.word	0x08006ac9
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006acf 	.word	0x08006acf
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	2101      	movs	r1, #1
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f001 f97a 	bl	8007da4 <RCCEx_PLL2_Config>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ab4:	e00c      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	3324      	adds	r3, #36	; 0x24
 8006aba:	2101      	movs	r1, #1
 8006abc:	4618      	mov	r0, r3
 8006abe:	f001 fa23 	bl	8007f08 <RCCEx_PLL3_Config>
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ac6:	e003      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac8:	2301      	movs	r3, #1
 8006aca:	75fb      	strb	r3, [r7, #23]
      break;
 8006acc:	e000      	b.n	8006ad0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 8006ace:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d109      	bne.n	8006aea <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006ad6:	4b32      	ldr	r3, [pc, #200]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ad8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ada:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006ae2:	492f      	ldr	r1, [pc, #188]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	654b      	str	r3, [r1, #84]	; 0x54
 8006ae8:	e001      	b.n	8006aee <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006aea:	7dfb      	ldrb	r3, [r7, #23]
 8006aec:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f003 0302 	and.w	r3, r3, #2
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d037      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d820      	bhi.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x860>
 8006b02:	a201      	add	r2, pc, #4	; (adr r2, 8006b08 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 8006b04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b08:	08006b4b 	.word	0x08006b4b
 8006b0c:	08006b21 	.word	0x08006b21
 8006b10:	08006b33 	.word	0x08006b33
 8006b14:	08006b4b 	.word	0x08006b4b
 8006b18:	08006b4b 	.word	0x08006b4b
 8006b1c:	08006b4b 	.word	0x08006b4b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3304      	adds	r3, #4
 8006b24:	2101      	movs	r1, #1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 f93c 	bl	8007da4 <RCCEx_PLL2_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b30:	e00c      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	3324      	adds	r3, #36	; 0x24
 8006b36:	2101      	movs	r1, #1
 8006b38:	4618      	mov	r0, r3
 8006b3a:	f001 f9e5 	bl	8007f08 <RCCEx_PLL3_Config>
 8006b3e:	4603      	mov	r3, r0
 8006b40:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006b42:	e003      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b44:	2301      	movs	r3, #1
 8006b46:	75fb      	strb	r3, [r7, #23]
      break;
 8006b48:	e000      	b.n	8006b4c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 8006b4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b4c:	7dfb      	ldrb	r3, [r7, #23]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d109      	bne.n	8006b66 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006b52:	4b13      	ldr	r3, [pc, #76]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b56:	f023 0207 	bic.w	r2, r3, #7
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b5e:	4910      	ldr	r1, [pc, #64]	; (8006ba0 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006b60:	4313      	orrs	r3, r2
 8006b62:	654b      	str	r3, [r1, #84]	; 0x54
 8006b64:	e001      	b.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b66:	7dfb      	ldrb	r3, [r7, #23]
 8006b68:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f003 0304 	and.w	r3, r3, #4
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d040      	beq.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006b7c:	2b05      	cmp	r3, #5
 8006b7e:	d827      	bhi.n	8006bd0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006b80:	a201      	add	r2, pc, #4	; (adr r2, 8006b88 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bd7 	.word	0x08006bd7
 8006b8c:	08006bad 	.word	0x08006bad
 8006b90:	08006bbf 	.word	0x08006bbf
 8006b94:	08006bd7 	.word	0x08006bd7
 8006b98:	08006bd7 	.word	0x08006bd7
 8006b9c:	08006bd7 	.word	0x08006bd7
 8006ba0:	58024400 	.word	0x58024400
 8006ba4:	58024800 	.word	0x58024800
 8006ba8:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	3304      	adds	r3, #4
 8006bb0:	2101      	movs	r1, #1
 8006bb2:	4618      	mov	r0, r3
 8006bb4:	f001 f8f6 	bl	8007da4 <RCCEx_PLL2_Config>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bbc:	e00c      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	3324      	adds	r3, #36	; 0x24
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f99f 	bl	8007f08 <RCCEx_PLL3_Config>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006bce:	e003      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd4:	e000      	b.n	8006bd8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 8006bd6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bd8:	7dfb      	ldrb	r3, [r7, #23]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10a      	bne.n	8006bf4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006bde:	4bb2      	ldr	r3, [pc, #712]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006be2:	f023 0207 	bic.w	r2, r3, #7
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bec:	49ae      	ldr	r1, [pc, #696]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	658b      	str	r3, [r1, #88]	; 0x58
 8006bf2:	e001      	b.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf4:	7dfb      	ldrb	r3, [r7, #23]
 8006bf6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0320 	and.w	r3, r3, #32
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d044      	beq.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c0e:	d01b      	beq.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x964>
 8006c10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c14:	d805      	bhi.n	8006c22 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d022      	beq.n	8006c60 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 8006c1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c1e:	d00a      	beq.n	8006c36 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006c20:	e01b      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006c22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c26:	d01d      	beq.n	8006c64 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006c28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006c2c:	d01c      	beq.n	8006c68 <HAL_RCCEx_PeriphCLKConfig+0x984>
 8006c2e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006c32:	d01b      	beq.n	8006c6c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006c34:	e011      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	2100      	movs	r1, #0
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	f001 f8b1 	bl	8007da4 <RCCEx_PLL2_Config>
 8006c42:	4603      	mov	r3, r0
 8006c44:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c46:	e012      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	3324      	adds	r3, #36	; 0x24
 8006c4c:	2102      	movs	r1, #2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f001 f95a 	bl	8007f08 <RCCEx_PLL3_Config>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006c58:	e009      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006c5e:	e006      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c60:	bf00      	nop
 8006c62:	e004      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c64:	bf00      	nop
 8006c66:	e002      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c68:	bf00      	nop
 8006c6a:	e000      	b.n	8006c6e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006c6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c6e:	7dfb      	ldrb	r3, [r7, #23]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d10a      	bne.n	8006c8a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006c74:	4b8c      	ldr	r3, [pc, #560]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c78:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c82:	4989      	ldr	r1, [pc, #548]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006c84:	4313      	orrs	r3, r2
 8006c86:	654b      	str	r3, [r1, #84]	; 0x54
 8006c88:	e001      	b.n	8006c8e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c8a:	7dfb      	ldrb	r3, [r7, #23]
 8006c8c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d044      	beq.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006ca0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ca4:	d01b      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006ca6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006caa:	d805      	bhi.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d022      	beq.n	8006cf6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006cb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb4:	d00a      	beq.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006cb6:	e01b      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cbc:	d01d      	beq.n	8006cfa <HAL_RCCEx_PeriphCLKConfig+0xa16>
 8006cbe:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006cc2:	d01c      	beq.n	8006cfe <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 8006cc4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006cc8:	d01b      	beq.n	8006d02 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 8006cca:	e011      	b.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	3304      	adds	r3, #4
 8006cd0:	2100      	movs	r1, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f001 f866 	bl	8007da4 <RCCEx_PLL2_Config>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cdc:	e012      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	3324      	adds	r3, #36	; 0x24
 8006ce2:	2102      	movs	r1, #2
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f001 f90f 	bl	8007f08 <RCCEx_PLL3_Config>
 8006cea:	4603      	mov	r3, r0
 8006cec:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006cee:	e009      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	75fb      	strb	r3, [r7, #23]
      break;
 8006cf4:	e006      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cf6:	bf00      	nop
 8006cf8:	e004      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cfa:	bf00      	nop
 8006cfc:	e002      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006cfe:	bf00      	nop
 8006d00:	e000      	b.n	8006d04 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 8006d02:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d04:	7dfb      	ldrb	r3, [r7, #23]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10a      	bne.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006d0a:	4b67      	ldr	r3, [pc, #412]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d0e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006d18:	4963      	ldr	r1, [pc, #396]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	658b      	str	r3, [r1, #88]	; 0x58
 8006d1e:	e001      	b.n	8006d24 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d044      	beq.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006d36:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d3a:	d01b      	beq.n	8006d74 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006d3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006d40:	d805      	bhi.n	8006d4e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d022      	beq.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006d4a:	d00a      	beq.n	8006d62 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006d4c:	e01b      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006d4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d52:	d01d      	beq.n	8006d90 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006d54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006d58:	d01c      	beq.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006d5a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006d5e:	d01b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006d60:	e011      	b.n	8006d86 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	3304      	adds	r3, #4
 8006d66:	2100      	movs	r1, #0
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f001 f81b 	bl	8007da4 <RCCEx_PLL2_Config>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d72:	e012      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	3324      	adds	r3, #36	; 0x24
 8006d78:	2102      	movs	r1, #2
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f001 f8c4 	bl	8007f08 <RCCEx_PLL3_Config>
 8006d80:	4603      	mov	r3, r0
 8006d82:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006d84:	e009      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d86:	2301      	movs	r3, #1
 8006d88:	75fb      	strb	r3, [r7, #23]
      break;
 8006d8a:	e006      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d8c:	bf00      	nop
 8006d8e:	e004      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d90:	bf00      	nop
 8006d92:	e002      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d94:	bf00      	nop
 8006d96:	e000      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006d98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d9a:	7dfb      	ldrb	r3, [r7, #23]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d10a      	bne.n	8006db6 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006da0:	4b41      	ldr	r3, [pc, #260]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006dae:	493e      	ldr	r1, [pc, #248]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	658b      	str	r3, [r1, #88]	; 0x58
 8006db4:	e001      	b.n	8006dba <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006db6:	7dfb      	ldrb	r3, [r7, #23]
 8006db8:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f003 0308 	and.w	r3, r3, #8
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d01a      	beq.n	8006dfc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dd0:	d10a      	bne.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	2102      	movs	r1, #2
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f001 f895 	bl	8007f08 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d001      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006de8:	4b2f      	ldr	r3, [pc, #188]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006dea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dec:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006df6:	492c      	ldr	r1, [pc, #176]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	f003 0310 	and.w	r3, r3, #16
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d01a      	beq.n	8006e3e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e12:	d10a      	bne.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	3324      	adds	r3, #36	; 0x24
 8006e18:	2102      	movs	r1, #2
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	f001 f874 	bl	8007f08 <RCCEx_PLL3_Config>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006e26:	2301      	movs	r3, #1
 8006e28:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006e2a:	4b1f      	ldr	r3, [pc, #124]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e2e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006e38:	491b      	ldr	r1, [pc, #108]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d032      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006e50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006e54:	d00d      	beq.n	8006e72 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006e56:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006e5a:	d016      	beq.n	8006e8a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d111      	bne.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	3304      	adds	r3, #4
 8006e64:	2100      	movs	r1, #0
 8006e66:	4618      	mov	r0, r3
 8006e68:	f000 ff9c 	bl	8007da4 <RCCEx_PLL2_Config>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e70:	e00c      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	3324      	adds	r3, #36	; 0x24
 8006e76:	2102      	movs	r1, #2
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f001 f845 	bl	8007f08 <RCCEx_PLL3_Config>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006e82:	e003      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e84:	2301      	movs	r3, #1
 8006e86:	75fb      	strb	r3, [r7, #23]
      break;
 8006e88:	e000      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e8c:	7dfb      	ldrb	r3, [r7, #23]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d10c      	bne.n	8006eac <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006e92:	4b05      	ldr	r3, [pc, #20]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e96:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006ea0:	4901      	ldr	r1, [pc, #4]	; (8006ea8 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ea2:	4313      	orrs	r3, r2
 8006ea4:	658b      	str	r3, [r1, #88]	; 0x58
 8006ea6:	e003      	b.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006ea8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006eac:	7dfb      	ldrb	r3, [r7, #23]
 8006eae:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d02f      	beq.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ec2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ec6:	d00c      	beq.n	8006ee2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ec8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006ecc:	d015      	beq.n	8006efa <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006ece:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ed2:	d10f      	bne.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ed4:	4b79      	ldr	r3, [pc, #484]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ed8:	4a78      	ldr	r2, [pc, #480]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ede:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ee0:	e00c      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	3324      	adds	r3, #36	; 0x24
 8006ee6:	2101      	movs	r1, #1
 8006ee8:	4618      	mov	r0, r3
 8006eea:	f001 f80d 	bl	8007f08 <RCCEx_PLL3_Config>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006ef2:	e003      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef8:	e000      	b.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006efa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efc:	7dfb      	ldrb	r3, [r7, #23]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d10a      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f02:	4b6e      	ldr	r3, [pc, #440]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006f10:	496a      	ldr	r1, [pc, #424]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	654b      	str	r3, [r1, #84]	; 0x54
 8006f16:	e001      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d029      	beq.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d003      	beq.n	8006f38 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006f30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f34:	d007      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006f36:	e00f      	b.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006f38:	4b60      	ldr	r3, [pc, #384]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f3c:	4a5f      	ldr	r2, [pc, #380]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f44:	e00b      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	3304      	adds	r3, #4
 8006f4a:	2102      	movs	r1, #2
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	f000 ff29 	bl	8007da4 <RCCEx_PLL2_Config>
 8006f52:	4603      	mov	r3, r0
 8006f54:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006f56:	e002      	b.n	8006f5e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d109      	bne.n	8006f78 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006f64:	4b55      	ldr	r3, [pc, #340]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f70:	4952      	ldr	r1, [pc, #328]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006f72:	4313      	orrs	r3, r2
 8006f74:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006f76:	e001      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f78:	7dfb      	ldrb	r3, [r7, #23]
 8006f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d00a      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	3324      	adds	r3, #36	; 0x24
 8006f8c:	2102      	movs	r1, #2
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f000 ffba 	bl	8007f08 <RCCEx_PLL3_Config>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d001      	beq.n	8006f9e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d02f      	beq.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb2:	d00c      	beq.n	8006fce <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb8:	d802      	bhi.n	8006fc0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	d011      	beq.n	8006fe2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006fbe:	e00d      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fc4:	d00f      	beq.n	8006fe6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fca:	d00e      	beq.n	8006fea <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006fcc:	e006      	b.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006fce:	4b3b      	ldr	r3, [pc, #236]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	4a3a      	ldr	r2, [pc, #232]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006fd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fd8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006fda:	e007      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fdc:	2301      	movs	r3, #1
 8006fde:	75fb      	strb	r3, [r7, #23]
      break;
 8006fe0:	e004      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fe2:	bf00      	nop
 8006fe4:	e002      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fe6:	bf00      	nop
 8006fe8:	e000      	b.n	8006fec <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006fea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fec:	7dfb      	ldrb	r3, [r7, #23]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d109      	bne.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006ff2:	4b32      	ldr	r3, [pc, #200]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ff4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ff6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ffe:	492f      	ldr	r1, [pc, #188]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007000:	4313      	orrs	r3, r2
 8007002:	654b      	str	r3, [r1, #84]	; 0x54
 8007004:	e001      	b.n	800700a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007006:	7dfb      	ldrb	r3, [r7, #23]
 8007008:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007012:	2b00      	cmp	r3, #0
 8007014:	d008      	beq.n	8007028 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007016:	4b29      	ldr	r3, [pc, #164]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800701a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007022:	4926      	ldr	r1, [pc, #152]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007024:	4313      	orrs	r3, r2
 8007026:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8007034:	4b21      	ldr	r3, [pc, #132]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007042:	491e      	ldr	r1, [pc, #120]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007044:	4313      	orrs	r3, r2
 8007046:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d008      	beq.n	8007066 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007054:	4b19      	ldr	r3, [pc, #100]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007058:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007060:	4916      	ldr	r1, [pc, #88]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007062:	4313      	orrs	r3, r2
 8007064:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00d      	beq.n	800708e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007072:	4b12      	ldr	r3, [pc, #72]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007074:	691b      	ldr	r3, [r3, #16]
 8007076:	4a11      	ldr	r2, [pc, #68]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007078:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800707c:	6113      	str	r3, [r2, #16]
 800707e:	4b0f      	ldr	r3, [pc, #60]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007080:	691a      	ldr	r2, [r3, #16]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8007088:	490c      	ldr	r1, [pc, #48]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800708a:	4313      	orrs	r3, r2
 800708c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	da08      	bge.n	80070a8 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8007096:	4b09      	ldr	r3, [pc, #36]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8007098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800709a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070a2:	4906      	ldr	r1, [pc, #24]	; (80070bc <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 80070a4:	4313      	orrs	r3, r2
 80070a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 80070a8:	7dbb      	ldrb	r3, [r7, #22]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d101      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	e000      	b.n	80070b4 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 80070b2:	2301      	movs	r3, #1
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3718      	adds	r7, #24
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}
 80070bc:	58024400 	.word	0x58024400

080070c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b090      	sub	sp, #64	; 0x40
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070ce:	d150      	bne.n	8007172 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 80070d0:	4ba1      	ldr	r3, [pc, #644]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80070d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070d4:	f003 0307 	and.w	r3, r3, #7
 80070d8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80070da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070dc:	2b04      	cmp	r3, #4
 80070de:	d844      	bhi.n	800716a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 80070e0:	a201      	add	r2, pc, #4	; (adr r2, 80070e8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 80070e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070e6:	bf00      	nop
 80070e8:	080070fd 	.word	0x080070fd
 80070ec:	0800710d 	.word	0x0800710d
 80070f0:	0800711d 	.word	0x0800711d
 80070f4:	08007165 	.word	0x08007165
 80070f8:	0800712d 	.word	0x0800712d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007100:	4618      	mov	r0, r3
 8007102:	f000 fd03 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8007106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007108:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710a:	e241      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800710c:	f107 0318 	add.w	r3, r7, #24
 8007110:	4618      	mov	r0, r3
 8007112:	f000 fa63 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8007116:	69bb      	ldr	r3, [r7, #24]
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711a:	e239      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800711c:	f107 030c 	add.w	r3, r7, #12
 8007120:	4618      	mov	r0, r3
 8007122:	f000 fba7 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800712a:	e231      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800712c:	4b8a      	ldr	r3, [pc, #552]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800712e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007134:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007138:	2b00      	cmp	r3, #0
 800713a:	d102      	bne.n	8007142 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800713c:	4b87      	ldr	r3, [pc, #540]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800713e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007140:	e226      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007144:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007148:	d102      	bne.n	8007150 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800714a:	4b85      	ldr	r3, [pc, #532]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800714c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800714e:	e21f      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007150:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007152:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007156:	d102      	bne.n	800715e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8007158:	4b82      	ldr	r3, [pc, #520]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800715a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800715c:	e218      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800715e:	2300      	movs	r3, #0
 8007160:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007162:	e215      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007164:	4b80      	ldr	r3, [pc, #512]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8007166:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007168:	e212      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800716a:	2300      	movs	r3, #0
 800716c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800716e:	bf00      	nop
 8007170:	e20e      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007178:	d14f      	bne.n	800721a <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800717a:	4b77      	ldr	r3, [pc, #476]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800717c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800717e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8007182:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8007184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007186:	2b80      	cmp	r3, #128	; 0x80
 8007188:	d01c      	beq.n	80071c4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800718a:	2b80      	cmp	r3, #128	; 0x80
 800718c:	d804      	bhi.n	8007198 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800718e:	2b00      	cmp	r3, #0
 8007190:	d008      	beq.n	80071a4 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d00e      	beq.n	80071b4 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8007196:	e03c      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8007198:	2bc0      	cmp	r3, #192	; 0xc0
 800719a:	d037      	beq.n	800720c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800719c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80071a0:	d018      	beq.n	80071d4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 80071a2:	e036      	b.n	8007212 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071a8:	4618      	mov	r0, r3
 80071aa:	f000 fcaf 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071b2:	e1ed      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071b4:	f107 0318 	add.w	r3, r7, #24
 80071b8:	4618      	mov	r0, r3
 80071ba:	f000 fa0f 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071c2:	e1e5      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80071c4:	f107 030c 	add.w	r3, r7, #12
 80071c8:	4618      	mov	r0, r3
 80071ca:	f000 fb53 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d2:	e1dd      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80071d4:	4b60      	ldr	r3, [pc, #384]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80071d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071d8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80071dc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80071de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80071e4:	4b5d      	ldr	r3, [pc, #372]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80071e6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80071e8:	e1d2      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80071ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80071f0:	d102      	bne.n	80071f8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 80071f2:	4b5b      	ldr	r3, [pc, #364]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80071f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071f6:	e1cb      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80071f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80071fe:	d102      	bne.n	8007206 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8007200:	4b58      	ldr	r3, [pc, #352]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8007202:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007204:	e1c4      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007206:	2300      	movs	r3, #0
 8007208:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800720a:	e1c1      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800720c:	4b56      	ldr	r3, [pc, #344]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800720e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007210:	e1be      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007212:	2300      	movs	r3, #0
 8007214:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007216:	bf00      	nop
 8007218:	e1ba      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007220:	d153      	bne.n	80072ca <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8007222:	4b4d      	ldr	r3, [pc, #308]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007226:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800722a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800722c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800722e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007232:	d01f      	beq.n	8007274 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8007234:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007238:	d805      	bhi.n	8007246 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800723a:	2b00      	cmp	r3, #0
 800723c:	d00a      	beq.n	8007254 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800723e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007242:	d00f      	beq.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8007244:	e03d      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8007246:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800724a:	d037      	beq.n	80072bc <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800724c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007250:	d018      	beq.n	8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8007252:	e036      	b.n	80072c2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007258:	4618      	mov	r0, r3
 800725a:	f000 fc57 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800725e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007262:	e195      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007264:	f107 0318 	add.w	r3, r7, #24
 8007268:	4618      	mov	r0, r3
 800726a:	f000 f9b7 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007272:	e18d      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007274:	f107 030c 	add.w	r3, r7, #12
 8007278:	4618      	mov	r0, r3
 800727a:	f000 fafb 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007282:	e185      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007284:	4b34      	ldr	r3, [pc, #208]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007288:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800728c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800728e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007290:	2b00      	cmp	r3, #0
 8007292:	d102      	bne.n	800729a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007294:	4b31      	ldr	r3, [pc, #196]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007296:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007298:	e17a      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800729a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800729c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072a0:	d102      	bne.n	80072a8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 80072a2:	4b2f      	ldr	r3, [pc, #188]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80072a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072a6:	e173      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80072a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072ae:	d102      	bne.n	80072b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 80072b0:	4b2c      	ldr	r3, [pc, #176]	; (8007364 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 80072b2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072b4:	e16c      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80072b6:	2300      	movs	r3, #0
 80072b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072ba:	e169      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 80072bc:	4b2a      	ldr	r3, [pc, #168]	; (8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 80072be:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c0:	e166      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80072c2:	2300      	movs	r3, #0
 80072c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80072c6:	bf00      	nop
 80072c8:	e162      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072d0:	d15d      	bne.n	800738e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 80072d2:	4b21      	ldr	r3, [pc, #132]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80072d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072d6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80072da:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 80072dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e2:	d01f      	beq.n	8007324 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 80072e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80072e8:	d805      	bhi.n	80072f6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00a      	beq.n	8007304 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 80072ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072f2:	d00f      	beq.n	8007314 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 80072f4:	e047      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 80072f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80072fa:	d041      	beq.n	8007380 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 80072fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007300:	d018      	beq.n	8007334 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8007302:	e040      	b.n	8007386 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8007304:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007308:	4618      	mov	r0, r3
 800730a:	f000 fbff 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800730e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007310:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007312:	e13d      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007314:	f107 0318 	add.w	r3, r7, #24
 8007318:	4618      	mov	r0, r3
 800731a:	f000 f95f 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007322:	e135      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007324:	f107 030c 	add.w	r3, r7, #12
 8007328:	4618      	mov	r0, r3
 800732a:	f000 faa3 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007332:	e12d      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007338:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800733c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800733e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007340:	2b00      	cmp	r3, #0
 8007342:	d102      	bne.n	800734a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007344:	4b05      	ldr	r3, [pc, #20]	; (800735c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007346:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007348:	e122      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800734a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800734c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007350:	d10c      	bne.n	800736c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007352:	4b03      	ldr	r3, [pc, #12]	; (8007360 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007354:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007356:	e11b      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007358:	58024400 	.word	0x58024400
 800735c:	03d09000 	.word	0x03d09000
 8007360:	003d0900 	.word	0x003d0900
 8007364:	017d7840 	.word	0x017d7840
 8007368:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800736e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007372:	d102      	bne.n	800737a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007374:	4b89      	ldr	r3, [pc, #548]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007376:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007378:	e10a      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800737a:	2300      	movs	r3, #0
 800737c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800737e:	e107      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007380:	4b87      	ldr	r3, [pc, #540]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007382:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007384:	e104      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007386:	2300      	movs	r3, #0
 8007388:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800738a:	bf00      	nop
 800738c:	e100      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007394:	d153      	bne.n	800743e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007396:	4b83      	ldr	r3, [pc, #524]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800739a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800739e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80073a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073a6:	d01f      	beq.n	80073e8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80073ac:	d805      	bhi.n	80073ba <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 80073b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073b6:	d00f      	beq.n	80073d8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 80073b8:	e03d      	b.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 80073ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80073be:	d037      	beq.n	8007430 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80073c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073c4:	d018      	beq.n	80073f8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80073c6:	e036      	b.n	8007436 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80073c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fb9d 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80073d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073d6:	e0db      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073d8:	f107 0318 	add.w	r3, r7, #24
 80073dc:	4618      	mov	r0, r3
 80073de:	f000 f8fd 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80073e2:	69bb      	ldr	r3, [r7, #24]
 80073e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073e6:	e0d3      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073e8:	f107 030c 	add.w	r3, r7, #12
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fa41 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80073f6:	e0cb      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80073f8:	4b6a      	ldr	r3, [pc, #424]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80073fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073fc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007400:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8007402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007404:	2b00      	cmp	r3, #0
 8007406:	d102      	bne.n	800740e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007408:	4b67      	ldr	r3, [pc, #412]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800740c:	e0c0      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800740e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007410:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007414:	d102      	bne.n	800741c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 8007416:	4b65      	ldr	r3, [pc, #404]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007418:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800741a:	e0b9      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800741c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800741e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007422:	d102      	bne.n	800742a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007424:	4b5d      	ldr	r3, [pc, #372]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007428:	e0b2      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800742a:	2300      	movs	r3, #0
 800742c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800742e:	e0af      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007430:	4b5b      	ldr	r3, [pc, #364]	; (80075a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007432:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007434:	e0ac      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007436:	2300      	movs	r3, #0
 8007438:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800743a:	bf00      	nop
 800743c:	e0a8      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007444:	d13d      	bne.n	80074c2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007446:	4b57      	ldr	r3, [pc, #348]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800744e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007452:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007456:	d00c      	beq.n	8007472 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007458:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800745c:	d011      	beq.n	8007482 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800745e:	2b00      	cmp	r3, #0
 8007460:	d12b      	bne.n	80074ba <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007462:	f107 0318 	add.w	r3, r7, #24
 8007466:	4618      	mov	r0, r3
 8007468:	f000 f8b8 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800746c:	69bb      	ldr	r3, [r7, #24]
 800746e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007470:	e08e      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007472:	f107 030c 	add.w	r3, r7, #12
 8007476:	4618      	mov	r0, r3
 8007478:	f000 f9fc 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007480:	e086      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007482:	4b48      	ldr	r3, [pc, #288]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007486:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800748a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800748c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800748e:	2b00      	cmp	r3, #0
 8007490:	d102      	bne.n	8007498 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007492:	4b45      	ldr	r3, [pc, #276]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007494:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007496:	e07b      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800749a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800749e:	d102      	bne.n	80074a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 80074a0:	4b42      	ldr	r3, [pc, #264]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80074a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074a4:	e074      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80074a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80074ac:	d102      	bne.n	80074b4 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 80074ae:	4b3b      	ldr	r3, [pc, #236]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 80074b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b2:	e06d      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 80074b4:	2300      	movs	r3, #0
 80074b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074b8:	e06a      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80074ba:	2300      	movs	r3, #0
 80074bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074be:	bf00      	nop
 80074c0:	e066      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074c8:	d11f      	bne.n	800750a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80074ca:	4b36      	ldr	r3, [pc, #216]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074d2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80074d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d003      	beq.n	80074e2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80074da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074de:	d008      	beq.n	80074f2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80074e0:	e00f      	b.n	8007502 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80074e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074e6:	4618      	mov	r0, r3
 80074e8:	f000 fb10 	bl	8007b0c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80074ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80074f0:	e04e      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074f2:	f107 0318 	add.w	r3, r7, #24
 80074f6:	4618      	mov	r0, r3
 80074f8:	f000 f870 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80074fc:	6a3b      	ldr	r3, [r7, #32]
 80074fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007500:	e046      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007502:	2300      	movs	r3, #0
 8007504:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007506:	bf00      	nop
 8007508:	e042      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007510:	d13c      	bne.n	800758c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8007512:	4b24      	ldr	r3, [pc, #144]	; (80075a4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007516:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800751a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800751c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007522:	d01e      	beq.n	8007562 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007524:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007528:	d805      	bhi.n	8007536 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800752a:	2b00      	cmp	r3, #0
 800752c:	d00d      	beq.n	800754a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800752e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007532:	d00e      	beq.n	8007552 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007534:	e026      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007536:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800753a:	d01d      	beq.n	8007578 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800753c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007540:	d01d      	beq.n	800757e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007542:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007546:	d014      	beq.n	8007572 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007548:	e01c      	b.n	8007584 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800754a:	f000 f831 	bl	80075b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800754e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007550:	e01e      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007552:	f107 0318 	add.w	r3, r7, #24
 8007556:	4618      	mov	r0, r3
 8007558:	f000 f840 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800755c:	69fb      	ldr	r3, [r7, #28]
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007560:	e016      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007562:	f107 030c 	add.w	r3, r7, #12
 8007566:	4618      	mov	r0, r3
 8007568:	f000 f984 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007570:	e00e      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007572:	4b0d      	ldr	r3, [pc, #52]	; (80075a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007574:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007576:	e00b      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007578:	4b0c      	ldr	r3, [pc, #48]	; (80075ac <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800757a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800757c:	e008      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800757e:	4b07      	ldr	r3, [pc, #28]	; (800759c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007580:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007582:	e005      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007584:	2300      	movs	r3, #0
 8007586:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007588:	bf00      	nop
 800758a:	e001      	b.n	8007590 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800758c:	2300      	movs	r3, #0
 800758e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007590:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007592:	4618      	mov	r0, r3
 8007594:	3740      	adds	r7, #64	; 0x40
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	017d7840 	.word	0x017d7840
 80075a0:	00bb8000 	.word	0x00bb8000
 80075a4:	58024400 	.word	0x58024400
 80075a8:	03d09000 	.word	0x03d09000
 80075ac:	003d0900 	.word	0x003d0900

080075b0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80075b4:	f7fe fe1e 	bl	80061f4 <HAL_RCC_GetHCLKFreq>
 80075b8:	4601      	mov	r1, r0
 80075ba:	4b06      	ldr	r3, [pc, #24]	; (80075d4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	091b      	lsrs	r3, r3, #4
 80075c0:	f003 0307 	and.w	r3, r3, #7
 80075c4:	4a04      	ldr	r2, [pc, #16]	; (80075d8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80075c6:	5cd3      	ldrb	r3, [r2, r3]
 80075c8:	f003 031f 	and.w	r3, r3, #31
 80075cc:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80075d0:	4618      	mov	r0, r3
 80075d2:	bd80      	pop	{r7, pc}
 80075d4:	58024400 	.word	0x58024400
 80075d8:	08014098 	.word	0x08014098

080075dc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80075dc:	b480      	push	{r7}
 80075de:	b089      	sub	sp, #36	; 0x24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80075e4:	4b9d      	ldr	r3, [pc, #628]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075e8:	f003 0303 	and.w	r3, r3, #3
 80075ec:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80075ee:	4b9b      	ldr	r3, [pc, #620]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	0b1b      	lsrs	r3, r3, #12
 80075f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80075f8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80075fa:	4b98      	ldr	r3, [pc, #608]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80075fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075fe:	091b      	lsrs	r3, r3, #4
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8007606:	4b95      	ldr	r3, [pc, #596]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800760a:	08db      	lsrs	r3, r3, #3
 800760c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007610:	693a      	ldr	r2, [r7, #16]
 8007612:	fb02 f303 	mul.w	r3, r2, r3
 8007616:	ee07 3a90 	vmov	s15, r3
 800761a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007622:	697b      	ldr	r3, [r7, #20]
 8007624:	2b00      	cmp	r3, #0
 8007626:	f000 810a 	beq.w	800783e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800762a:	69bb      	ldr	r3, [r7, #24]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d05a      	beq.n	80076e6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007630:	2b01      	cmp	r3, #1
 8007632:	d302      	bcc.n	800763a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007634:	2b02      	cmp	r3, #2
 8007636:	d078      	beq.n	800772a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007638:	e099      	b.n	800776e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800763a:	4b88      	ldr	r3, [pc, #544]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	f003 0320 	and.w	r3, r3, #32
 8007642:	2b00      	cmp	r3, #0
 8007644:	d02d      	beq.n	80076a2 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007646:	4b85      	ldr	r3, [pc, #532]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	08db      	lsrs	r3, r3, #3
 800764c:	f003 0303 	and.w	r3, r3, #3
 8007650:	4a83      	ldr	r2, [pc, #524]	; (8007860 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007652:	fa22 f303 	lsr.w	r3, r2, r3
 8007656:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	ee07 3a90 	vmov	s15, r3
 800765e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	ee07 3a90 	vmov	s15, r3
 8007668:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800766c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007670:	4b7a      	ldr	r3, [pc, #488]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	ed97 6a03 	vldr	s12, [r7, #12]
 8007684:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80076a0:	e087      	b.n	80077b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007868 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 80076b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b4:	4b69      	ldr	r3, [pc, #420]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80076cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e4:	e065      	b.n	80077b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80076f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f8:	4b58      	ldr	r3, [pc, #352]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80076fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007708:	ed97 6a03 	vldr	s12, [r7, #12]
 800770c:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007728:	e043      	b.n	80077b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	ee07 3a90 	vmov	s15, r3
 8007730:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007734:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007870 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007738:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800773c:	4b47      	ldr	r3, [pc, #284]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800773e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007740:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007744:	ee07 3a90 	vmov	s15, r3
 8007748:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800774c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007750:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007754:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007758:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800775c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007760:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007768:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800776c:	e021      	b.n	80077b2 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800776e:	697b      	ldr	r3, [r7, #20]
 8007770:	ee07 3a90 	vmov	s15, r3
 8007774:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007778:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800786c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800777c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007780:	4b36      	ldr	r3, [pc, #216]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007788:	ee07 3a90 	vmov	s15, r3
 800778c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007790:	ed97 6a03 	vldr	s12, [r7, #12]
 8007794:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007864 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007798:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800779c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077ac:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077b0:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80077b2:	4b2a      	ldr	r3, [pc, #168]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b6:	0a5b      	lsrs	r3, r3, #9
 80077b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077bc:	ee07 3a90 	vmov	s15, r3
 80077c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077d8:	ee17 2a90 	vmov	r2, s15
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80077e0:	4b1e      	ldr	r3, [pc, #120]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80077e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077e4:	0c1b      	lsrs	r3, r3, #16
 80077e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80077fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007802:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007806:	ee17 2a90 	vmov	r2, s15
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800780e:	4b13      	ldr	r3, [pc, #76]	; (800785c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007812:	0e1b      	lsrs	r3, r3, #24
 8007814:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007818:	ee07 3a90 	vmov	s15, r3
 800781c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007820:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007824:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007828:	edd7 6a07 	vldr	s13, [r7, #28]
 800782c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007834:	ee17 2a90 	vmov	r2, s15
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800783c:	e008      	b.n	8007850 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	609a      	str	r2, [r3, #8]
}
 8007850:	bf00      	nop
 8007852:	3724      	adds	r7, #36	; 0x24
 8007854:	46bd      	mov	sp, r7
 8007856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785a:	4770      	bx	lr
 800785c:	58024400 	.word	0x58024400
 8007860:	03d09000 	.word	0x03d09000
 8007864:	46000000 	.word	0x46000000
 8007868:	4c742400 	.word	0x4c742400
 800786c:	4a742400 	.word	0x4a742400
 8007870:	4bbebc20 	.word	0x4bbebc20

08007874 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007874:	b480      	push	{r7}
 8007876:	b089      	sub	sp, #36	; 0x24
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800787c:	4b9d      	ldr	r3, [pc, #628]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800787e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007880:	f003 0303 	and.w	r3, r3, #3
 8007884:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007886:	4b9b      	ldr	r3, [pc, #620]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800788a:	0d1b      	lsrs	r3, r3, #20
 800788c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007890:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007892:	4b98      	ldr	r3, [pc, #608]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007896:	0a1b      	lsrs	r3, r3, #8
 8007898:	f003 0301 	and.w	r3, r3, #1
 800789c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800789e:	4b95      	ldr	r3, [pc, #596]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078a2:	08db      	lsrs	r3, r3, #3
 80078a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80078a8:	693a      	ldr	r2, [r7, #16]
 80078aa:	fb02 f303 	mul.w	r3, r2, r3
 80078ae:	ee07 3a90 	vmov	s15, r3
 80078b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	f000 810a 	beq.w	8007ad6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80078c2:	69bb      	ldr	r3, [r7, #24]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d05a      	beq.n	800797e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d302      	bcc.n	80078d2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80078cc:	2b02      	cmp	r3, #2
 80078ce:	d078      	beq.n	80079c2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80078d0:	e099      	b.n	8007a06 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80078d2:	4b88      	ldr	r3, [pc, #544]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f003 0320 	and.w	r3, r3, #32
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d02d      	beq.n	800793a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80078de:	4b85      	ldr	r3, [pc, #532]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	08db      	lsrs	r3, r3, #3
 80078e4:	f003 0303 	and.w	r3, r3, #3
 80078e8:	4a83      	ldr	r2, [pc, #524]	; (8007af8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80078ea:	fa22 f303 	lsr.w	r3, r2, r3
 80078ee:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	ee07 3a90 	vmov	s15, r3
 8007900:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007904:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007908:	4b7a      	ldr	r3, [pc, #488]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800790a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800790c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007910:	ee07 3a90 	vmov	s15, r3
 8007914:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007918:	ed97 6a03 	vldr	s12, [r7, #12]
 800791c:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007920:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007924:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007928:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007930:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007934:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007938:	e087      	b.n	8007a4a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	ee07 3a90 	vmov	s15, r3
 8007940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007944:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007b00 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007948:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794c:	4b69      	ldr	r3, [pc, #420]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800794e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007950:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007954:	ee07 3a90 	vmov	s15, r3
 8007958:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007960:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007964:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007968:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007970:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007974:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007978:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800797c:	e065      	b.n	8007a4a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800797e:	697b      	ldr	r3, [r7, #20]
 8007980:	ee07 3a90 	vmov	s15, r3
 8007984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007988:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800798c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007990:	4b58      	ldr	r3, [pc, #352]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007994:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007998:	ee07 3a90 	vmov	s15, r3
 800799c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079a0:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a4:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079bc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079c0:	e043      	b.n	8007a4a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	ee07 3a90 	vmov	s15, r3
 80079c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079cc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007b08 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80079d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079d4:	4b47      	ldr	r3, [pc, #284]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80079d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079dc:	ee07 3a90 	vmov	s15, r3
 80079e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079e4:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e8:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80079ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a00:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a04:	e021      	b.n	8007a4a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007a06:	697b      	ldr	r3, [r7, #20]
 8007a08:	ee07 3a90 	vmov	s15, r3
 8007a0c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a10:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8007b04 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 8007a14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007a18:	4b36      	ldr	r3, [pc, #216]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a20:	ee07 3a90 	vmov	s15, r3
 8007a24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007a28:	ed97 6a03 	vldr	s12, [r7, #12]
 8007a2c:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007afc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007a30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007a34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007a38:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007a3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a40:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007a44:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007a48:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a4a:	4b2a      	ldr	r3, [pc, #168]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	0a5b      	lsrs	r3, r3, #9
 8007a50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a54:	ee07 3a90 	vmov	s15, r3
 8007a58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a5c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a64:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a70:	ee17 2a90 	vmov	r2, s15
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a78:	4b1e      	ldr	r3, [pc, #120]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a7c:	0c1b      	lsrs	r3, r3, #16
 8007a7e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a82:	ee07 3a90 	vmov	s15, r3
 8007a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a8a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a8e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a92:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a96:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a9a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a9e:	ee17 2a90 	vmov	r2, s15
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007aa6:	4b13      	ldr	r3, [pc, #76]	; (8007af4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aaa:	0e1b      	lsrs	r3, r3, #24
 8007aac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ab0:	ee07 3a90 	vmov	s15, r3
 8007ab4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ab8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007abc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007ac0:	edd7 6a07 	vldr	s13, [r7, #28]
 8007ac4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007ac8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007acc:	ee17 2a90 	vmov	r2, s15
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007ad4:	e008      	b.n	8007ae8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2200      	movs	r2, #0
 8007ae0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	609a      	str	r2, [r3, #8]
}
 8007ae8:	bf00      	nop
 8007aea:	3724      	adds	r7, #36	; 0x24
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr
 8007af4:	58024400 	.word	0x58024400
 8007af8:	03d09000 	.word	0x03d09000
 8007afc:	46000000 	.word	0x46000000
 8007b00:	4c742400 	.word	0x4c742400
 8007b04:	4a742400 	.word	0x4a742400
 8007b08:	4bbebc20 	.word	0x4bbebc20

08007b0c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b089      	sub	sp, #36	; 0x24
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007b14:	4b9d      	ldr	r3, [pc, #628]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f003 0303 	and.w	r3, r3, #3
 8007b1c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8007b1e:	4b9b      	ldr	r3, [pc, #620]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b22:	091b      	lsrs	r3, r3, #4
 8007b24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007b28:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8007b2a:	4b98      	ldr	r3, [pc, #608]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b2e:	f003 0301 	and.w	r3, r3, #1
 8007b32:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007b34:	4b95      	ldr	r3, [pc, #596]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b38:	08db      	lsrs	r3, r3, #3
 8007b3a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007b3e:	693a      	ldr	r2, [r7, #16]
 8007b40:	fb02 f303 	mul.w	r3, r2, r3
 8007b44:	ee07 3a90 	vmov	s15, r3
 8007b48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b4c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	f000 810a 	beq.w	8007d6c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007b58:	69bb      	ldr	r3, [r7, #24]
 8007b5a:	2b01      	cmp	r3, #1
 8007b5c:	d05a      	beq.n	8007c14 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d302      	bcc.n	8007b68 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007b62:	2b02      	cmp	r3, #2
 8007b64:	d078      	beq.n	8007c58 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007b66:	e099      	b.n	8007c9c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007b68:	4b88      	ldr	r3, [pc, #544]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f003 0320 	and.w	r3, r3, #32
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d02d      	beq.n	8007bd0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007b74:	4b85      	ldr	r3, [pc, #532]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	08db      	lsrs	r3, r3, #3
 8007b7a:	f003 0303 	and.w	r3, r3, #3
 8007b7e:	4a84      	ldr	r2, [pc, #528]	; (8007d90 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007b80:	fa22 f303 	lsr.w	r3, r2, r3
 8007b84:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007b86:	68bb      	ldr	r3, [r7, #8]
 8007b88:	ee07 3a90 	vmov	s15, r3
 8007b8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b90:	697b      	ldr	r3, [r7, #20]
 8007b92:	ee07 3a90 	vmov	s15, r3
 8007b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b9e:	4b7b      	ldr	r3, [pc, #492]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007ba6:	ee07 3a90 	vmov	s15, r3
 8007baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bb2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007bca:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007bce:	e087      	b.n	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007bd0:	697b      	ldr	r3, [r7, #20]
 8007bd2:	ee07 3a90 	vmov	s15, r3
 8007bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bda:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007d98 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 8007bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007be2:	4b6a      	ldr	r3, [pc, #424]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007bea:	ee07 3a90 	vmov	s15, r3
 8007bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8007bf6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c12:	e065      	b.n	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	ee07 3a90 	vmov	s15, r3
 8007c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c1e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c26:	4b59      	ldr	r3, [pc, #356]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c2e:	ee07 3a90 	vmov	s15, r3
 8007c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c3a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c56:	e043      	b.n	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c58:	697b      	ldr	r3, [r7, #20]
 8007c5a:	ee07 3a90 	vmov	s15, r3
 8007c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007c62:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007da0 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c6a:	4b48      	ldr	r3, [pc, #288]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c72:	ee07 3a90 	vmov	s15, r3
 8007c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007c7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8007c7e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007c9a:	e021      	b.n	8007ce0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	ee07 3a90 	vmov	s15, r3
 8007ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ca6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007d9c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007cae:	4b37      	ldr	r3, [pc, #220]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007cb6:	ee07 3a90 	vmov	s15, r3
 8007cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007cbe:	ed97 6a03 	vldr	s12, [r7, #12]
 8007cc2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007d94 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007cda:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007cde:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8007ce0:	4b2a      	ldr	r3, [pc, #168]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce4:	0a5b      	lsrs	r3, r3, #9
 8007ce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cea:	ee07 3a90 	vmov	s15, r3
 8007cee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007cf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007cfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d06:	ee17 2a90 	vmov	r2, s15
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8007d0e:	4b1f      	ldr	r3, [pc, #124]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d12:	0c1b      	lsrs	r3, r3, #16
 8007d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d18:	ee07 3a90 	vmov	s15, r3
 8007d1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d24:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d28:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d2c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d34:	ee17 2a90 	vmov	r2, s15
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007d3c:	4b13      	ldr	r3, [pc, #76]	; (8007d8c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d40:	0e1b      	lsrs	r3, r3, #24
 8007d42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007d52:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007d56:	edd7 6a07 	vldr	s13, [r7, #28]
 8007d5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007d5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007d62:	ee17 2a90 	vmov	r2, s15
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007d6a:	e008      	b.n	8007d7e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	609a      	str	r2, [r3, #8]
}
 8007d7e:	bf00      	nop
 8007d80:	3724      	adds	r7, #36	; 0x24
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	58024400 	.word	0x58024400
 8007d90:	03d09000 	.word	0x03d09000
 8007d94:	46000000 	.word	0x46000000
 8007d98:	4c742400 	.word	0x4c742400
 8007d9c:	4a742400 	.word	0x4a742400
 8007da0:	4bbebc20 	.word	0x4bbebc20

08007da4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b084      	sub	sp, #16
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	6078      	str	r0, [r7, #4]
 8007dac:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007db2:	4b53      	ldr	r3, [pc, #332]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007db4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007db6:	f003 0303 	and.w	r3, r3, #3
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d101      	bne.n	8007dc2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	e099      	b.n	8007ef6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007dc2:	4b4f      	ldr	r3, [pc, #316]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a4e      	ldr	r2, [pc, #312]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007dc8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007dcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007dce:	f7f9 fd1f 	bl	8001810 <HAL_GetTick>
 8007dd2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007dd4:	e008      	b.n	8007de8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007dd6:	f7f9 fd1b 	bl	8001810 <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e086      	b.n	8007ef6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007de8:	4b45      	ldr	r3, [pc, #276]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d1f0      	bne.n	8007dd6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007df4:	4b42      	ldr	r3, [pc, #264]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007df6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007df8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	031b      	lsls	r3, r3, #12
 8007e02:	493f      	ldr	r1, [pc, #252]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e04:	4313      	orrs	r3, r2
 8007e06:	628b      	str	r3, [r1, #40]	; 0x28
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	685b      	ldr	r3, [r3, #4]
 8007e0c:	3b01      	subs	r3, #1
 8007e0e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	689b      	ldr	r3, [r3, #8]
 8007e16:	3b01      	subs	r3, #1
 8007e18:	025b      	lsls	r3, r3, #9
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	68db      	ldr	r3, [r3, #12]
 8007e22:	3b01      	subs	r3, #1
 8007e24:	041b      	lsls	r3, r3, #16
 8007e26:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e2a:	431a      	orrs	r2, r3
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	061b      	lsls	r3, r3, #24
 8007e34:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e38:	4931      	ldr	r1, [pc, #196]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e3a:	4313      	orrs	r3, r2
 8007e3c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007e3e:	4b30      	ldr	r3, [pc, #192]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e42:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	695b      	ldr	r3, [r3, #20]
 8007e4a:	492d      	ldr	r1, [pc, #180]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007e50:	4b2b      	ldr	r3, [pc, #172]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e54:	f023 0220 	bic.w	r2, r3, #32
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	699b      	ldr	r3, [r3, #24]
 8007e5c:	4928      	ldr	r1, [pc, #160]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007e62:	4b27      	ldr	r3, [pc, #156]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e66:	4a26      	ldr	r2, [pc, #152]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e68:	f023 0310 	bic.w	r3, r3, #16
 8007e6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007e6e:	4b24      	ldr	r3, [pc, #144]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e72:	4b24      	ldr	r3, [pc, #144]	; (8007f04 <RCCEx_PLL2_Config+0x160>)
 8007e74:	4013      	ands	r3, r2
 8007e76:	687a      	ldr	r2, [r7, #4]
 8007e78:	69d2      	ldr	r2, [r2, #28]
 8007e7a:	00d2      	lsls	r2, r2, #3
 8007e7c:	4920      	ldr	r1, [pc, #128]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007e82:	4b1f      	ldr	r3, [pc, #124]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e86:	4a1e      	ldr	r2, [pc, #120]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e88:	f043 0310 	orr.w	r3, r3, #16
 8007e8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d106      	bne.n	8007ea2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007e94:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	4a19      	ldr	r2, [pc, #100]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007e9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e9e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ea0:	e00f      	b.n	8007ec2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d106      	bne.n	8007eb6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007ea8:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eac:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007eae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007eb2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007eb4:	e005      	b.n	8007ec2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007eb6:	4b12      	ldr	r3, [pc, #72]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eba:	4a11      	ldr	r2, [pc, #68]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007ebc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ec0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	4a0e      	ldr	r2, [pc, #56]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007ec8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ecc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ece:	f7f9 fc9f 	bl	8001810 <HAL_GetTick>
 8007ed2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ed4:	e008      	b.n	8007ee8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ed6:	f7f9 fc9b 	bl	8001810 <HAL_GetTick>
 8007eda:	4602      	mov	r2, r0
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	1ad3      	subs	r3, r2, r3
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	d901      	bls.n	8007ee8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	e006      	b.n	8007ef6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007ee8:	4b05      	ldr	r3, [pc, #20]	; (8007f00 <RCCEx_PLL2_Config+0x15c>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d0f0      	beq.n	8007ed6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	3710      	adds	r7, #16
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
 8007efe:	bf00      	nop
 8007f00:	58024400 	.word	0x58024400
 8007f04:	ffff0007 	.word	0xffff0007

08007f08 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b084      	sub	sp, #16
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
 8007f10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007f12:	2300      	movs	r3, #0
 8007f14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007f16:	4b53      	ldr	r3, [pc, #332]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f1a:	f003 0303 	and.w	r3, r3, #3
 8007f1e:	2b03      	cmp	r3, #3
 8007f20:	d101      	bne.n	8007f26 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e099      	b.n	800805a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007f26:	4b4f      	ldr	r3, [pc, #316]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	4a4e      	ldr	r2, [pc, #312]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f2c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007f32:	f7f9 fc6d 	bl	8001810 <HAL_GetTick>
 8007f36:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f38:	e008      	b.n	8007f4c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007f3a:	f7f9 fc69 	bl	8001810 <HAL_GetTick>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	1ad3      	subs	r3, r2, r3
 8007f44:	2b02      	cmp	r3, #2
 8007f46:	d901      	bls.n	8007f4c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007f48:	2303      	movs	r3, #3
 8007f4a:	e086      	b.n	800805a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007f4c:	4b45      	ldr	r3, [pc, #276]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d1f0      	bne.n	8007f3a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007f58:	4b42      	ldr	r3, [pc, #264]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f5c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	051b      	lsls	r3, r3, #20
 8007f66:	493f      	ldr	r1, [pc, #252]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	628b      	str	r3, [r1, #40]	; 0x28
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	685b      	ldr	r3, [r3, #4]
 8007f70:	3b01      	subs	r3, #1
 8007f72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	3b01      	subs	r3, #1
 8007f7c:	025b      	lsls	r3, r3, #9
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	3b01      	subs	r3, #1
 8007f88:	041b      	lsls	r3, r3, #16
 8007f8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007f8e:	431a      	orrs	r2, r3
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	061b      	lsls	r3, r3, #24
 8007f98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007f9c:	4931      	ldr	r1, [pc, #196]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007fa2:	4b30      	ldr	r3, [pc, #192]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fa6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	695b      	ldr	r3, [r3, #20]
 8007fae:	492d      	ldr	r1, [pc, #180]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007fb4:	4b2b      	ldr	r3, [pc, #172]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fb8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	699b      	ldr	r3, [r3, #24]
 8007fc0:	4928      	ldr	r1, [pc, #160]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fc2:	4313      	orrs	r3, r2
 8007fc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007fc6:	4b27      	ldr	r3, [pc, #156]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fca:	4a26      	ldr	r2, [pc, #152]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007fd2:	4b24      	ldr	r3, [pc, #144]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007fd6:	4b24      	ldr	r3, [pc, #144]	; (8008068 <RCCEx_PLL3_Config+0x160>)
 8007fd8:	4013      	ands	r3, r2
 8007fda:	687a      	ldr	r2, [r7, #4]
 8007fdc:	69d2      	ldr	r2, [r2, #28]
 8007fde:	00d2      	lsls	r2, r2, #3
 8007fe0:	4920      	ldr	r1, [pc, #128]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fe2:	4313      	orrs	r3, r2
 8007fe4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007fe6:	4b1f      	ldr	r3, [pc, #124]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fea:	4a1e      	ldr	r2, [pc, #120]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007fec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ff0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007ff2:	683b      	ldr	r3, [r7, #0]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d106      	bne.n	8008006 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007ff8:	4b1a      	ldr	r3, [pc, #104]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a19      	ldr	r2, [pc, #100]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8007ffe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008002:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008004:	e00f      	b.n	8008026 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d106      	bne.n	800801a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800800c:	4b15      	ldr	r3, [pc, #84]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 800800e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008010:	4a14      	ldr	r2, [pc, #80]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8008012:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008016:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008018:	e005      	b.n	8008026 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800801a:	4b12      	ldr	r3, [pc, #72]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	4a11      	ldr	r2, [pc, #68]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8008020:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008024:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008026:	4b0f      	ldr	r3, [pc, #60]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	4a0e      	ldr	r2, [pc, #56]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 800802c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008030:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008032:	f7f9 fbed 	bl	8001810 <HAL_GetTick>
 8008036:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008038:	e008      	b.n	800804c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800803a:	f7f9 fbe9 	bl	8001810 <HAL_GetTick>
 800803e:	4602      	mov	r2, r0
 8008040:	68bb      	ldr	r3, [r7, #8]
 8008042:	1ad3      	subs	r3, r2, r3
 8008044:	2b02      	cmp	r3, #2
 8008046:	d901      	bls.n	800804c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008048:	2303      	movs	r3, #3
 800804a:	e006      	b.n	800805a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800804c:	4b05      	ldr	r3, [pc, #20]	; (8008064 <RCCEx_PLL3_Config+0x15c>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008054:	2b00      	cmp	r3, #0
 8008056:	d0f0      	beq.n	800803a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008058:	7bfb      	ldrb	r3, [r7, #15]
}
 800805a:	4618      	mov	r0, r3
 800805c:	3710      	adds	r7, #16
 800805e:	46bd      	mov	sp, r7
 8008060:	bd80      	pop	{r7, pc}
 8008062:	bf00      	nop
 8008064:	58024400 	.word	0x58024400
 8008068:	ffff0007 	.word	0xffff0007

0800806c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b08a      	sub	sp, #40	; 0x28
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d101      	bne.n	800807e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800807a:	2301      	movs	r3, #1
 800807c:	e07c      	b.n	8008178 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008084:	b2db      	uxtb	r3, r3
 8008086:	2b00      	cmp	r3, #0
 8008088:	d10c      	bne.n	80080a4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2200      	movs	r2, #0
 800808e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	699b      	ldr	r3, [r3, #24]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d102      	bne.n	800809e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	2202      	movs	r2, #2
 800809c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800809e:	6878      	ldr	r0, [r7, #4]
 80080a0:	f7f9 f888 	bl	80011b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2203      	movs	r2, #3
 80080a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80080ac:	6878      	ldr	r0, [r7, #4]
 80080ae:	f000 f867 	bl	8008180 <HAL_SD_InitCard>
 80080b2:	4603      	mov	r3, r0
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d001      	beq.n	80080bc <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	e05d      	b.n	8008178 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80080bc:	f107 0308 	add.w	r3, r7, #8
 80080c0:	4619      	mov	r1, r3
 80080c2:	6878      	ldr	r0, [r7, #4]
 80080c4:	f001 f8ce 	bl	8009264 <HAL_SD_GetCardStatus>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d001      	beq.n	80080d2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	e052      	b.n	8008178 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80080d2:	7e3b      	ldrb	r3, [r7, #24]
 80080d4:	b2db      	uxtb	r3, r3
 80080d6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80080d8:	7e7b      	ldrb	r3, [r7, #25]
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b01      	cmp	r3, #1
 80080e4:	d10a      	bne.n	80080fc <HAL_SD_Init+0x90>
 80080e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d102      	bne.n	80080f2 <HAL_SD_Init+0x86>
 80080ec:	6a3b      	ldr	r3, [r7, #32]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d004      	beq.n	80080fc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80080f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80080fa:	e00b      	b.n	8008114 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008100:	2b01      	cmp	r3, #1
 8008102:	d104      	bne.n	800810e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	f44f 7280 	mov.w	r2, #256	; 0x100
 800810a:	65da      	str	r2, [r3, #92]	; 0x5c
 800810c:	e002      	b.n	8008114 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2200      	movs	r2, #0
 8008112:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	68db      	ldr	r3, [r3, #12]
 8008118:	4619      	mov	r1, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f001 f984 	bl	8009428 <HAL_SD_ConfigWideBusOperation>
 8008120:	4603      	mov	r3, r0
 8008122:	2b00      	cmp	r3, #0
 8008124:	d001      	beq.n	800812a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8008126:	2301      	movs	r3, #1
 8008128:	e026      	b.n	8008178 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800812a:	f7f9 fb71 	bl	8001810 <HAL_GetTick>
 800812e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008130:	e011      	b.n	8008156 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8008132:	f7f9 fb6d 	bl	8001810 <HAL_GetTick>
 8008136:	4602      	mov	r2, r0
 8008138:	69fb      	ldr	r3, [r7, #28]
 800813a:	1ad3      	subs	r3, r2, r3
 800813c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008140:	d109      	bne.n	8008156 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008148:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2201      	movs	r2, #1
 800814e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8008152:	2303      	movs	r3, #3
 8008154:	e010      	b.n	8008178 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8008156:	6878      	ldr	r0, [r7, #4]
 8008158:	f001 fa10 	bl	800957c <HAL_SD_GetCardState>
 800815c:	4603      	mov	r3, r0
 800815e:	2b04      	cmp	r3, #4
 8008160:	d1e7      	bne.n	8008132 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	2200      	movs	r2, #0
 8008166:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2200      	movs	r2, #0
 800816c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2201      	movs	r2, #1
 8008172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8008176:	2300      	movs	r3, #0
}
 8008178:	4618      	mov	r0, r3
 800817a:	3728      	adds	r7, #40	; 0x28
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008180:	b5b0      	push	{r4, r5, r7, lr}
 8008182:	b08e      	sub	sp, #56	; 0x38
 8008184:	af04      	add	r7, sp, #16
 8008186:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8008188:	2300      	movs	r3, #0
 800818a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800818c:	2300      	movs	r3, #0
 800818e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008190:	2300      	movs	r3, #0
 8008192:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8008194:	2300      	movs	r3, #0
 8008196:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8008198:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800819c:	f7fe ff90 	bl	80070c0 <HAL_RCCEx_GetPeriphCLKFreq>
 80081a0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 80081a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a4:	0a1b      	lsrs	r3, r3, #8
 80081a6:	4a40      	ldr	r2, [pc, #256]	; (80082a8 <HAL_SD_InitCard+0x128>)
 80081a8:	fba2 2303 	umull	r2, r3, r2, r3
 80081ac:	091b      	lsrs	r3, r3, #4
 80081ae:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	699b      	ldr	r3, [r3, #24]
 80081b4:	2b02      	cmp	r3, #2
 80081b6:	d107      	bne.n	80081c8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	681a      	ldr	r2, [r3, #0]
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f042 0210 	orr.w	r2, r2, #16
 80081c6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681d      	ldr	r5, [r3, #0]
 80081cc:	466c      	mov	r4, sp
 80081ce:	f107 0314 	add.w	r3, r7, #20
 80081d2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80081d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80081da:	f107 0308 	add.w	r3, r7, #8
 80081de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081e0:	4628      	mov	r0, r5
 80081e2:	f003 f863 	bl	800b2ac <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4618      	mov	r0, r3
 80081ec:	f003 f8a6 	bl	800b33c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 80081f0:	69bb      	ldr	r3, [r7, #24]
 80081f2:	005b      	lsls	r3, r3, #1
 80081f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80081fa:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d008      	beq.n	8008214 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8008202:	4a2a      	ldr	r2, [pc, #168]	; (80082ac <HAL_SD_InitCard+0x12c>)
 8008204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008206:	fbb2 f3f3 	udiv	r3, r2, r3
 800820a:	3301      	adds	r3, #1
 800820c:	4618      	mov	r0, r3
 800820e:	f7f9 fb0b 	bl	8001828 <HAL_Delay>
 8008212:	e002      	b.n	800821a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8008214:	2002      	movs	r0, #2
 8008216:	f7f9 fb07 	bl	8001828 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800821a:	6878      	ldr	r0, [r7, #4]
 800821c:	f001 fa8c 	bl	8009738 <SD_PowerON>
 8008220:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008222:	6a3b      	ldr	r3, [r7, #32]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d00b      	beq.n	8008240 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2201      	movs	r2, #1
 800822c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008234:	6a3b      	ldr	r3, [r7, #32]
 8008236:	431a      	orrs	r2, r3
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e02e      	b.n	800829e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f001 f9bb 	bl	80095bc <SD_InitCard>
 8008246:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008248:	6a3b      	ldr	r3, [r7, #32]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d00b      	beq.n	8008266 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800825a:	6a3b      	ldr	r3, [r7, #32]
 800825c:	431a      	orrs	r2, r3
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e01b      	b.n	800829e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800826e:	4618      	mov	r0, r3
 8008270:	f003 f8fa 	bl	800b468 <SDMMC_CmdBlockLength>
 8008274:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008276:	6a3b      	ldr	r3, [r7, #32]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d00f      	beq.n	800829c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	4a0b      	ldr	r2, [pc, #44]	; (80082b0 <HAL_SD_InitCard+0x130>)
 8008282:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	431a      	orrs	r2, r3
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008298:	2301      	movs	r3, #1
 800829a:	e000      	b.n	800829e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3728      	adds	r7, #40	; 0x28
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bdb0      	pop	{r4, r5, r7, pc}
 80082a6:	bf00      	nop
 80082a8:	014f8b59 	.word	0x014f8b59
 80082ac:	00012110 	.word	0x00012110
 80082b0:	1fe00fff 	.word	0x1fe00fff

080082b4 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082b4:	b580      	push	{r7, lr}
 80082b6:	b092      	sub	sp, #72	; 0x48
 80082b8:	af00      	add	r7, sp, #0
 80082ba:	60f8      	str	r0, [r7, #12]
 80082bc:	60b9      	str	r1, [r7, #8]
 80082be:	607a      	str	r2, [r7, #4]
 80082c0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082c2:	f7f9 faa5 	bl	8001810 <HAL_GetTick>
 80082c6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d107      	bne.n	80082e6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082e2:	2301      	movs	r3, #1
 80082e4:	e167      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082ec:	b2db      	uxtb	r3, r3
 80082ee:	2b01      	cmp	r3, #1
 80082f0:	f040 815a 	bne.w	80085a8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082fa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	441a      	add	r2, r3
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008304:	429a      	cmp	r2, r3
 8008306:	d907      	bls.n	8008318 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800830c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008314:	2301      	movs	r3, #1
 8008316:	e14e      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2203      	movs	r2, #3
 800831c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2200      	movs	r2, #0
 8008326:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800832c:	2b01      	cmp	r3, #1
 800832e:	d002      	beq.n	8008336 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008336:	f04f 33ff 	mov.w	r3, #4294967295
 800833a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	025b      	lsls	r3, r3, #9
 8008340:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008342:	2390      	movs	r3, #144	; 0x90
 8008344:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008346:	2302      	movs	r3, #2
 8008348:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800834a:	2300      	movs	r3, #0
 800834c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800834e:	2300      	movs	r3, #0
 8008350:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	f107 0214 	add.w	r2, r7, #20
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f003 f857 	bl	800b410 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	68da      	ldr	r2, [r3, #12]
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008370:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d90a      	bls.n	800838e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2202      	movs	r2, #2
 800837c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008384:	4618      	mov	r0, r3
 8008386:	f003 f8b5 	bl	800b4f4 <SDMMC_CmdReadMultiBlock>
 800838a:	6478      	str	r0, [r7, #68]	; 0x44
 800838c:	e009      	b.n	80083a2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	2201      	movs	r2, #1
 8008392:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800839a:	4618      	mov	r0, r3
 800839c:	f003 f887 	bl	800b4ae <SDMMC_CmdReadSingleBlock>
 80083a0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80083a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d012      	beq.n	80083ce <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a84      	ldr	r2, [pc, #528]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083b6:	431a      	orrs	r2, r3
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2201      	movs	r2, #1
 80083c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2200      	movs	r2, #0
 80083c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e0f3      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80083ce:	69bb      	ldr	r3, [r7, #24]
 80083d0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083d2:	e058      	b.n	8008486 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d033      	beq.n	800844a <HAL_SD_ReadBlocks+0x196>
 80083e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083e4:	2b1f      	cmp	r3, #31
 80083e6:	d930      	bls.n	800844a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80083e8:	2300      	movs	r3, #0
 80083ea:	643b      	str	r3, [r7, #64]	; 0x40
 80083ec:	e027      	b.n	800843e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4618      	mov	r0, r3
 80083f4:	f002 ff84 	bl	800b300 <SDMMC_ReadFIFO>
 80083f8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80083fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083fc:	b2da      	uxtb	r2, r3
 80083fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008400:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008402:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008404:	3301      	adds	r3, #1
 8008406:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8008408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800840a:	0a1b      	lsrs	r3, r3, #8
 800840c:	b2da      	uxtb	r2, r3
 800840e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008410:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	3301      	adds	r3, #1
 8008416:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841a:	0c1b      	lsrs	r3, r3, #16
 800841c:	b2da      	uxtb	r2, r3
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008422:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008424:	3301      	adds	r3, #1
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800842a:	0e1b      	lsrs	r3, r3, #24
 800842c:	b2da      	uxtb	r2, r3
 800842e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008430:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008432:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008434:	3301      	adds	r3, #1
 8008436:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843a:	3301      	adds	r3, #1
 800843c:	643b      	str	r3, [r7, #64]	; 0x40
 800843e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008440:	2b07      	cmp	r3, #7
 8008442:	d9d4      	bls.n	80083ee <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008444:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008446:	3b20      	subs	r3, #32
 8008448:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800844a:	f7f9 f9e1 	bl	8001810 <HAL_GetTick>
 800844e:	4602      	mov	r2, r0
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	1ad3      	subs	r3, r2, r3
 8008454:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008456:	429a      	cmp	r2, r3
 8008458:	d902      	bls.n	8008460 <HAL_SD_ReadBlocks+0x1ac>
 800845a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800845c:	2b00      	cmp	r3, #0
 800845e:	d112      	bne.n	8008486 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	4a56      	ldr	r2, [pc, #344]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 8008466:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800846c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	2201      	movs	r2, #1
 8008478:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	2200      	movs	r2, #0
 8008480:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008482:	2303      	movs	r3, #3
 8008484:	e097      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800848c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008490:	2b00      	cmp	r3, #0
 8008492:	d09f      	beq.n	80083d4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68da      	ldr	r2, [r3, #12]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80084a2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d022      	beq.n	80084f8 <HAL_SD_ReadBlocks+0x244>
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	2b01      	cmp	r3, #1
 80084b6:	d91f      	bls.n	80084f8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084bc:	2b03      	cmp	r3, #3
 80084be:	d01b      	beq.n	80084f8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4618      	mov	r0, r3
 80084c6:	f003 f87f 	bl	800b5c8 <SDMMC_CmdStopTransfer>
 80084ca:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d012      	beq.n	80084f8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d2:	68fb      	ldr	r3, [r7, #12]
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	4a3a      	ldr	r2, [pc, #232]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 80084d8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084e0:	431a      	orrs	r2, r3
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	2200      	movs	r2, #0
 80084f2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e05e      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fe:	f003 0308 	and.w	r3, r3, #8
 8008502:	2b00      	cmp	r3, #0
 8008504:	d012      	beq.n	800852c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a2d      	ldr	r2, [pc, #180]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 800850c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008512:	f043 0208 	orr.w	r2, r3, #8
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	2201      	movs	r2, #1
 800851e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	2200      	movs	r2, #0
 8008526:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008528:	2301      	movs	r3, #1
 800852a:	e044      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b00      	cmp	r3, #0
 8008538:	d012      	beq.n	8008560 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a20      	ldr	r2, [pc, #128]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 8008540:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008546:	f043 0202 	orr.w	r2, r3, #2
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	2201      	movs	r2, #1
 8008552:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	2200      	movs	r2, #0
 800855a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e02a      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008566:	f003 0320 	and.w	r3, r3, #32
 800856a:	2b00      	cmp	r3, #0
 800856c:	d012      	beq.n	8008594 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	4a13      	ldr	r2, [pc, #76]	; (80085c0 <HAL_SD_ReadBlocks+0x30c>)
 8008574:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	f043 0220 	orr.w	r2, r3, #32
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	2201      	movs	r2, #1
 8008586:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	2200      	movs	r2, #0
 800858e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008590:	2301      	movs	r3, #1
 8008592:	e010      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a0a      	ldr	r2, [pc, #40]	; (80085c4 <HAL_SD_ReadBlocks+0x310>)
 800859a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2201      	movs	r2, #1
 80085a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e006      	b.n	80085b6 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085b4:	2301      	movs	r3, #1
  }
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3748      	adds	r7, #72	; 0x48
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	1fe00fff 	.word	0x1fe00fff
 80085c4:	18000f3a 	.word	0x18000f3a

080085c8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80085c8:	b580      	push	{r7, lr}
 80085ca:	b092      	sub	sp, #72	; 0x48
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
 80085d4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80085d6:	f7f9 f91b 	bl	8001810 <HAL_GetTick>
 80085da:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d107      	bne.n	80085fa <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ee:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085f6:	2301      	movs	r3, #1
 80085f8:	e16b      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008600:	b2db      	uxtb	r3, r3
 8008602:	2b01      	cmp	r3, #1
 8008604:	f040 815e 	bne.w	80088c4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	2200      	movs	r2, #0
 800860c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800860e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	441a      	add	r2, r3
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008618:	429a      	cmp	r2, r3
 800861a:	d907      	bls.n	800862c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008620:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008628:	2301      	movs	r3, #1
 800862a:	e152      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2203      	movs	r2, #3
 8008630:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	2200      	movs	r2, #0
 800863a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008640:	2b01      	cmp	r3, #1
 8008642:	d002      	beq.n	800864a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008646:	025b      	lsls	r3, r3, #9
 8008648:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800864a:	f04f 33ff 	mov.w	r3, #4294967295
 800864e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008650:	683b      	ldr	r3, [r7, #0]
 8008652:	025b      	lsls	r3, r3, #9
 8008654:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008656:	2390      	movs	r3, #144	; 0x90
 8008658:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800865a:	2300      	movs	r3, #0
 800865c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800865e:	2300      	movs	r3, #0
 8008660:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008662:	2300      	movs	r3, #0
 8008664:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f107 0218 	add.w	r2, r7, #24
 800866e:	4611      	mov	r1, r2
 8008670:	4618      	mov	r0, r3
 8008672:	f002 fecd 	bl	800b410 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	68da      	ldr	r2, [r3, #12]
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008684:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008686:	683b      	ldr	r3, [r7, #0]
 8008688:	2b01      	cmp	r3, #1
 800868a:	d90a      	bls.n	80086a2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	2220      	movs	r2, #32
 8008690:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008698:	4618      	mov	r0, r3
 800869a:	f002 ff71 	bl	800b580 <SDMMC_CmdWriteMultiBlock>
 800869e:	6478      	str	r0, [r7, #68]	; 0x44
 80086a0:	e009      	b.n	80086b6 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	2210      	movs	r2, #16
 80086a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80086ae:	4618      	mov	r0, r3
 80086b0:	f002 ff43 	bl	800b53a <SDMMC_CmdWriteSingleBlock>
 80086b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80086b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d012      	beq.n	80086e2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a86      	ldr	r2, [pc, #536]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 80086c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	431a      	orrs	r2, r3
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80086de:	2301      	movs	r3, #1
 80086e0:	e0f7      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80086e2:	69fb      	ldr	r3, [r7, #28]
 80086e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086e6:	e05c      	b.n	80087a2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d037      	beq.n	8008766 <HAL_SD_WriteBlocks+0x19e>
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	2b1f      	cmp	r3, #31
 80086fa:	d934      	bls.n	8008766 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80086fc:	2300      	movs	r3, #0
 80086fe:	643b      	str	r3, [r7, #64]	; 0x40
 8008700:	e02b      	b.n	800875a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 8008702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008708:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870a:	3301      	adds	r3, #1
 800870c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800870e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008710:	781b      	ldrb	r3, [r3, #0]
 8008712:	021a      	lsls	r2, r3, #8
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	4313      	orrs	r3, r2
 8008718:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800871a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800871c:	3301      	adds	r3, #1
 800871e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008722:	781b      	ldrb	r3, [r3, #0]
 8008724:	041a      	lsls	r2, r3, #16
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	4313      	orrs	r3, r2
 800872a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800872c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800872e:	3301      	adds	r3, #1
 8008730:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008732:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008734:	781b      	ldrb	r3, [r3, #0]
 8008736:	061a      	lsls	r2, r3, #24
 8008738:	697b      	ldr	r3, [r7, #20]
 800873a:	4313      	orrs	r3, r2
 800873c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800873e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008740:	3301      	adds	r3, #1
 8008742:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f107 0214 	add.w	r2, r7, #20
 800874c:	4611      	mov	r1, r2
 800874e:	4618      	mov	r0, r3
 8008750:	f002 fde3 	bl	800b31a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008754:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008756:	3301      	adds	r3, #1
 8008758:	643b      	str	r3, [r7, #64]	; 0x40
 800875a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800875c:	2b07      	cmp	r3, #7
 800875e:	d9d0      	bls.n	8008702 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008762:	3b20      	subs	r3, #32
 8008764:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008766:	f7f9 f853 	bl	8001810 <HAL_GetTick>
 800876a:	4602      	mov	r2, r0
 800876c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800876e:	1ad3      	subs	r3, r2, r3
 8008770:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008772:	429a      	cmp	r2, r3
 8008774:	d902      	bls.n	800877c <HAL_SD_WriteBlocks+0x1b4>
 8008776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008778:	2b00      	cmp	r3, #0
 800877a:	d112      	bne.n	80087a2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a56      	ldr	r2, [pc, #344]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800878a:	431a      	orrs	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e097      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d09b      	beq.n	80086e8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68da      	ldr	r2, [r3, #12]
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80087be:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d022      	beq.n	8008814 <HAL_SD_WriteBlocks+0x24c>
 80087ce:	683b      	ldr	r3, [r7, #0]
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d91f      	bls.n	8008814 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d8:	2b03      	cmp	r3, #3
 80087da:	d01b      	beq.n	8008814 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fef1 	bl	800b5c8 <SDMMC_CmdStopTransfer>
 80087e6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80087e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d012      	beq.n	8008814 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	4a3a      	ldr	r2, [pc, #232]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 80087f4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80087fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80087fc:	431a      	orrs	r2, r3
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	2201      	movs	r2, #1
 8008806:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	e05e      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	f003 0308 	and.w	r3, r3, #8
 800881e:	2b00      	cmp	r3, #0
 8008820:	d012      	beq.n	8008848 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a2d      	ldr	r2, [pc, #180]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 8008828:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800882e:	f043 0208 	orr.w	r2, r3, #8
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	2200      	movs	r2, #0
 8008842:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008844:	2301      	movs	r3, #1
 8008846:	e044      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884e:	f003 0302 	and.w	r3, r3, #2
 8008852:	2b00      	cmp	r3, #0
 8008854:	d012      	beq.n	800887c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a20      	ldr	r2, [pc, #128]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 800885c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008862:	f043 0202 	orr.w	r2, r3, #2
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2201      	movs	r2, #1
 800886e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	2200      	movs	r2, #0
 8008876:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008878:	2301      	movs	r3, #1
 800887a:	e02a      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008882:	f003 0310 	and.w	r3, r3, #16
 8008886:	2b00      	cmp	r3, #0
 8008888:	d012      	beq.n	80088b0 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <HAL_SD_WriteBlocks+0x314>)
 8008890:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	f043 0210 	orr.w	r2, r3, #16
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80088ac:	2301      	movs	r3, #1
 80088ae:	e010      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4a0a      	ldr	r2, [pc, #40]	; (80088e0 <HAL_SD_WriteBlocks+0x318>)
 80088b6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2201      	movs	r2, #1
 80088bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80088c0:	2300      	movs	r3, #0
 80088c2:	e006      	b.n	80088d2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088d0:	2301      	movs	r3, #1
  }
}
 80088d2:	4618      	mov	r0, r3
 80088d4:	3748      	adds	r7, #72	; 0x48
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
 80088da:	bf00      	nop
 80088dc:	1fe00fff 	.word	0x1fe00fff
 80088e0:	18000f3a 	.word	0x18000f3a

080088e4 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b08c      	sub	sp, #48	; 0x30
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	60f8      	str	r0, [r7, #12]
 80088ec:	60b9      	str	r1, [r7, #8]
 80088ee:	607a      	str	r2, [r7, #4]
 80088f0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d107      	bne.n	800890c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008900:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008908:	2301      	movs	r3, #1
 800890a:	e08d      	b.n	8008a28 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008912:	b2db      	uxtb	r3, r3
 8008914:	2b01      	cmp	r3, #1
 8008916:	f040 8086 	bne.w	8008a26 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008920:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	441a      	add	r2, r3
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800892a:	429a      	cmp	r2, r3
 800892c:	d907      	bls.n	800893e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008932:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	e074      	b.n	8008a28 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	2203      	movs	r2, #3
 8008942:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	2200      	movs	r2, #0
 800894c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	68ba      	ldr	r2, [r7, #8]
 8008952:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	025a      	lsls	r2, r3, #9
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008960:	2b01      	cmp	r3, #1
 8008962:	d002      	beq.n	800896a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 8008964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008966:	025b      	lsls	r3, r3, #9
 8008968:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800896a:	f04f 33ff 	mov.w	r3, #4294967295
 800896e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008970:	683b      	ldr	r3, [r7, #0]
 8008972:	025b      	lsls	r3, r3, #9
 8008974:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008976:	2390      	movs	r3, #144	; 0x90
 8008978:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800897a:	2302      	movs	r3, #2
 800897c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800897e:	2300      	movs	r3, #0
 8008980:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008982:	2300      	movs	r3, #0
 8008984:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f107 0210 	add.w	r2, r7, #16
 800898e:	4611      	mov	r1, r2
 8008990:	4618      	mov	r0, r3
 8008992:	f002 fd3d 	bl	800b410 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	68da      	ldr	r2, [r3, #12]
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80089a4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	2201      	movs	r2, #1
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2b01      	cmp	r3, #1
 80089ba:	d90a      	bls.n	80089d2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2282      	movs	r2, #130	; 0x82
 80089c0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 fd93 	bl	800b4f4 <SDMMC_CmdReadMultiBlock>
 80089ce:	62f8      	str	r0, [r7, #44]	; 0x2c
 80089d0:	e009      	b.n	80089e6 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	2281      	movs	r2, #129	; 0x81
 80089d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80089de:	4618      	mov	r0, r3
 80089e0:	f002 fd65 	bl	800b4ae <SDMMC_CmdReadSingleBlock>
 80089e4:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80089e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d012      	beq.n	8008a12 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	4a0f      	ldr	r2, [pc, #60]	; (8008a30 <HAL_SD_ReadBlocks_DMA+0x14c>)
 80089f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fa:	431a      	orrs	r2, r3
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008a0e:	2301      	movs	r3, #1
 8008a10:	e00a      	b.n	8008a28 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8008a20:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 8008a22:	2300      	movs	r3, #0
 8008a24:	e000      	b.n	8008a28 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008a26:	2302      	movs	r3, #2
  }
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3730      	adds	r7, #48	; 0x30
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	1fe00fff 	.word	0x1fe00fff

08008a34 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b08c      	sub	sp, #48	; 0x30
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	60f8      	str	r0, [r7, #12]
 8008a3c:	60b9      	str	r1, [r7, #8]
 8008a3e:	607a      	str	r2, [r7, #4]
 8008a40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	d107      	bne.n	8008a5c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e08d      	b.n	8008b78 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8008a62:	b2db      	uxtb	r3, r3
 8008a64:	2b01      	cmp	r3, #1
 8008a66:	f040 8086 	bne.w	8008b76 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2200      	movs	r2, #0
 8008a6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008a70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d907      	bls.n	8008a8e <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008a8a:	2301      	movs	r3, #1
 8008a8c:	e074      	b.n	8008b78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	2203      	movs	r2, #3
 8008a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	68ba      	ldr	r2, [r7, #8]
 8008aa2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	025a      	lsls	r2, r3, #9
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d002      	beq.n	8008aba <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 8008ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ab6:	025b      	lsls	r3, r3, #9
 8008ab8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008aba:	f04f 33ff 	mov.w	r3, #4294967295
 8008abe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	025b      	lsls	r3, r3, #9
 8008ac4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008ac6:	2390      	movs	r3, #144	; 0x90
 8008ac8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008aca:	2300      	movs	r3, #0
 8008acc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008ace:	2300      	movs	r3, #0
 8008ad0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f107 0210 	add.w	r2, r7, #16
 8008ade:	4611      	mov	r1, r2
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	f002 fc95 	bl	800b410 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	68da      	ldr	r2, [r3, #12]
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008af4:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2201      	movs	r2, #1
 8008b04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b01      	cmp	r3, #1
 8008b0a:	d90a      	bls.n	8008b22 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	22a0      	movs	r2, #160	; 0xa0
 8008b10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f002 fd31 	bl	800b580 <SDMMC_CmdWriteMultiBlock>
 8008b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 8008b20:	e009      	b.n	8008b36 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	2290      	movs	r2, #144	; 0x90
 8008b26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f002 fd03 	bl	800b53a <SDMMC_CmdWriteSingleBlock>
 8008b34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	d012      	beq.n	8008b62 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	4a0f      	ldr	r2, [pc, #60]	; (8008b80 <HAL_SD_WriteBlocks_DMA+0x14c>)
 8008b42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b4a:	431a      	orrs	r2, r3
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	2201      	movs	r2, #1
 8008b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b5e:	2301      	movs	r3, #1
 8008b60:	e00a      	b.n	8008b78 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 8008b70:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008b72:	2300      	movs	r3, #0
 8008b74:	e000      	b.n	8008b78 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 8008b76:	2302      	movs	r3, #2
  }
}
 8008b78:	4618      	mov	r0, r3
 8008b7a:	3730      	adds	r7, #48	; 0x30
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bd80      	pop	{r7, pc}
 8008b80:	1fe00fff 	.word	0x1fe00fff

08008b84 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b90:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d008      	beq.n	8008bb2 <HAL_SD_IRQHandler+0x2e>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	f003 0308 	and.w	r3, r3, #8
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d003      	beq.n	8008bb2 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f001 f92a 	bl	8009e04 <SD_Read_IT>
 8008bb0:	e19a      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	f000 80ac 	beq.w	8008d1a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008bca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b9d      	ldr	r3, [pc, #628]	; (8008e4c <HAL_SD_IRQHandler+0x2c8>)
 8008bd8:	400b      	ands	r3, r1
 8008bda:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008bea:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68da      	ldr	r2, [r3, #12]
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bfa:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d038      	beq.n	8008c78 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	f003 0302 	and.w	r3, r3, #2
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d104      	bne.n	8008c1a <HAL_SD_IRQHandler+0x96>
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f003 0320 	and.w	r3, r3, #32
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d011      	beq.n	8008c3e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4618      	mov	r0, r3
 8008c20:	f002 fcd2 	bl	800b5c8 <SDMMC_CmdStopTransfer>
 8008c24:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008c26:	68bb      	ldr	r3, [r7, #8]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d008      	beq.n	8008c3e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	431a      	orrs	r2, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 f959 	bl	8008ef0 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a83      	ldr	r2, [pc, #524]	; (8008e50 <HAL_SD_IRQHandler+0x2cc>)
 8008c44:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f003 0301 	and.w	r3, r3, #1
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d104      	bne.n	8008c68 <HAL_SD_IRQHandler+0xe4>
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	f003 0302 	and.w	r3, r3, #2
 8008c64:	2b00      	cmp	r3, #0
 8008c66:	d003      	beq.n	8008c70 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f004 fcc3 	bl	800d5f4 <HAL_SD_RxCpltCallback>
 8008c6e:	e13b      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f004 fcb5 	bl	800d5e0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8008c76:	e137      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	f000 8132 	beq.w	8008ee8 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	2200      	movs	r2, #0
 8008c8a:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	2200      	movs	r2, #0
 8008c92:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	f003 0302 	and.w	r3, r3, #2
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <HAL_SD_IRQHandler+0x12c>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	f003 0320 	and.w	r3, r3, #32
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d011      	beq.n	8008cd4 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f002 fc87 	bl	800b5c8 <SDMMC_CmdStopTransfer>
 8008cba:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d008      	beq.n	8008cd4 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	431a      	orrs	r2, r3
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 f90e 	bl	8008ef0 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2200      	movs	r2, #0
 8008ce0:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f003 0310 	and.w	r3, r3, #16
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d104      	bne.n	8008cf6 <HAL_SD_IRQHandler+0x172>
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f003 0320 	and.w	r3, r3, #32
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d002      	beq.n	8008cfc <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 8008cf6:	6878      	ldr	r0, [r7, #4]
 8008cf8:	f004 fc72 	bl	800d5e0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f003 0301 	and.w	r3, r3, #1
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d105      	bne.n	8008d12 <HAL_SD_IRQHandler+0x18e>
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	f003 0302 	and.w	r3, r3, #2
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80eb 	beq.w	8008ee8 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f004 fc6e 	bl	800d5f4 <HAL_SD_RxCpltCallback>
}
 8008d18:	e0e6      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	d008      	beq.n	8008d3a <HAL_SD_IRQHandler+0x1b6>
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f003 0308 	and.w	r3, r3, #8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d003      	beq.n	8008d3a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f001 f8ac 	bl	8009e90 <SD_Write_IT>
 8008d38:	e0d6      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d40:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	f000 80a2 	beq.w	8008e8e <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d50:	f003 0302 	and.w	r3, r3, #2
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d005      	beq.n	8008d64 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d5c:	f043 0202 	orr.w	r2, r3, #2
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d005      	beq.n	8008d7e <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d76:	f043 0208 	orr.w	r2, r3, #8
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d84:	f003 0320 	and.w	r3, r3, #32
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d005      	beq.n	8008d98 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d90:	f043 0220 	orr.w	r2, r3, #32
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d005      	beq.n	8008db2 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008daa:	f043 0210 	orr.w	r2, r3, #16
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a26      	ldr	r2, [pc, #152]	; (8008e50 <HAL_SD_IRQHandler+0x2cc>)
 8008db8:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 8008dc8:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68da      	ldr	r2, [r3, #12]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008dd8:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008de8:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	68da      	ldr	r2, [r3, #12]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008df8:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f002 fbe2 	bl	800b5c8 <SDMMC_CmdStopTransfer>
 8008e04:	4602      	mov	r2, r0
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e0a:	431a      	orrs	r2, r3
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	68da      	ldr	r2, [r3, #12]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008e1e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	f003 0308 	and.w	r3, r3, #8
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00f      	beq.n	8008e54 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2200      	movs	r2, #0
 8008e40:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 f854 	bl	8008ef0 <HAL_SD_ErrorCallback>
}
 8008e48:	e04e      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
 8008e4a:	bf00      	nop
 8008e4c:	ffff3ec5 	.word	0xffff3ec5
 8008e50:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d044      	beq.n	8008ee8 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d040      	beq.n	8008ee8 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008e74:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	2201      	movs	r2, #1
 8008e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f000 f832 	bl	8008ef0 <HAL_SD_ErrorCallback>
}
 8008e8c:	e02c      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d025      	beq.n	8008ee8 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008ea4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eac:	f003 0304 	and.w	r3, r3, #4
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d10c      	bne.n	8008ece <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f003 0320 	and.w	r3, r3, #32
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d003      	beq.n	8008ec6 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8008ebe:	6878      	ldr	r0, [r7, #4]
 8008ec0:	f001 f84e 	bl	8009f60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8008ec4:	e010      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f001 f836 	bl	8009f38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8008ecc:	e00c      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f003 0320 	and.w	r3, r3, #32
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d003      	beq.n	8008ee0 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f001 f837 	bl	8009f4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8008ede:	e003      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8008ee0:	6878      	ldr	r0, [r7, #4]
 8008ee2:	f001 f81f 	bl	8009f24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 8008ee6:	e7ff      	b.n	8008ee8 <HAL_SD_IRQHandler+0x364>
 8008ee8:	bf00      	nop
 8008eea:	3710      	adds	r7, #16
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8008ef0:	b480      	push	{r7}
 8008ef2:	b083      	sub	sp, #12
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8008ef8:	bf00      	nop
 8008efa:	370c      	adds	r7, #12
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b083      	sub	sp, #12
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	4603      	mov	r3, r0
 8008f0c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 8008f0e:	bf00      	nop
 8008f10:	370c      	adds	r7, #12
 8008f12:	46bd      	mov	sp, r7
 8008f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f18:	4770      	bx	lr
	...

08008f1c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f2a:	0f9b      	lsrs	r3, r3, #30
 8008f2c:	b2da      	uxtb	r2, r3
 8008f2e:	683b      	ldr	r3, [r7, #0]
 8008f30:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f36:	0e9b      	lsrs	r3, r3, #26
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	f003 030f 	and.w	r3, r3, #15
 8008f3e:	b2da      	uxtb	r2, r3
 8008f40:	683b      	ldr	r3, [r7, #0]
 8008f42:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f48:	0e1b      	lsrs	r3, r3, #24
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	f003 0303 	and.w	r3, r3, #3
 8008f50:	b2da      	uxtb	r2, r3
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f5a:	0c1b      	lsrs	r3, r3, #16
 8008f5c:	b2da      	uxtb	r2, r3
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f66:	0a1b      	lsrs	r3, r3, #8
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	683b      	ldr	r3, [r7, #0]
 8008f6c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f72:	b2da      	uxtb	r2, r3
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f7c:	0d1b      	lsrs	r3, r3, #20
 8008f7e:	b29a      	uxth	r2, r3
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f88:	0c1b      	lsrs	r3, r3, #16
 8008f8a:	b2db      	uxtb	r3, r3
 8008f8c:	f003 030f 	and.w	r3, r3, #15
 8008f90:	b2da      	uxtb	r2, r3
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f9a:	0bdb      	lsrs	r3, r3, #15
 8008f9c:	b2db      	uxtb	r3, r3
 8008f9e:	f003 0301 	and.w	r3, r3, #1
 8008fa2:	b2da      	uxtb	r2, r3
 8008fa4:	683b      	ldr	r3, [r7, #0]
 8008fa6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fac:	0b9b      	lsrs	r3, r3, #14
 8008fae:	b2db      	uxtb	r3, r3
 8008fb0:	f003 0301 	and.w	r3, r3, #1
 8008fb4:	b2da      	uxtb	r2, r3
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fbe:	0b5b      	lsrs	r3, r3, #13
 8008fc0:	b2db      	uxtb	r3, r3
 8008fc2:	f003 0301 	and.w	r3, r3, #1
 8008fc6:	b2da      	uxtb	r2, r3
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	0b1b      	lsrs	r3, r3, #12
 8008fd2:	b2db      	uxtb	r3, r3
 8008fd4:	f003 0301 	and.w	r3, r3, #1
 8008fd8:	b2da      	uxtb	r2, r3
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d163      	bne.n	80090b4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008ff0:	009a      	lsls	r2, r3, #2
 8008ff2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ff6:	4013      	ands	r3, r2
 8008ff8:	687a      	ldr	r2, [r7, #4]
 8008ffa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008ffc:	0f92      	lsrs	r2, r2, #30
 8008ffe:	431a      	orrs	r2, r3
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009008:	0edb      	lsrs	r3, r3, #27
 800900a:	b2db      	uxtb	r3, r3
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	b2da      	uxtb	r2, r3
 8009012:	683b      	ldr	r3, [r7, #0]
 8009014:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800901a:	0e1b      	lsrs	r3, r3, #24
 800901c:	b2db      	uxtb	r3, r3
 800901e:	f003 0307 	and.w	r3, r3, #7
 8009022:	b2da      	uxtb	r2, r3
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800902c:	0d5b      	lsrs	r3, r3, #21
 800902e:	b2db      	uxtb	r3, r3
 8009030:	f003 0307 	and.w	r3, r3, #7
 8009034:	b2da      	uxtb	r2, r3
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800903e:	0c9b      	lsrs	r3, r3, #18
 8009040:	b2db      	uxtb	r3, r3
 8009042:	f003 0307 	and.w	r3, r3, #7
 8009046:	b2da      	uxtb	r2, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009050:	0bdb      	lsrs	r3, r3, #15
 8009052:	b2db      	uxtb	r3, r3
 8009054:	f003 0307 	and.w	r3, r3, #7
 8009058:	b2da      	uxtb	r2, r3
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	691b      	ldr	r3, [r3, #16]
 8009062:	1c5a      	adds	r2, r3, #1
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	7e1b      	ldrb	r3, [r3, #24]
 800906c:	b2db      	uxtb	r3, r3
 800906e:	f003 0307 	and.w	r3, r3, #7
 8009072:	3302      	adds	r3, #2
 8009074:	2201      	movs	r2, #1
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	687a      	ldr	r2, [r7, #4]
 800907c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800907e:	fb02 f203 	mul.w	r2, r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	7a1b      	ldrb	r3, [r3, #8]
 800908a:	b2db      	uxtb	r3, r3
 800908c:	f003 030f 	and.w	r3, r3, #15
 8009090:	2201      	movs	r2, #1
 8009092:	409a      	lsls	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800909c:	687a      	ldr	r2, [r7, #4]
 800909e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80090a0:	0a52      	lsrs	r2, r2, #9
 80090a2:	fb02 f203 	mul.w	r2, r2, r3
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090b0:	659a      	str	r2, [r3, #88]	; 0x58
 80090b2:	e031      	b.n	8009118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	d11d      	bne.n	80090f8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090c0:	041b      	lsls	r3, r3, #16
 80090c2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80090ca:	0c1b      	lsrs	r3, r3, #16
 80090cc:	431a      	orrs	r2, r3
 80090ce:	683b      	ldr	r3, [r7, #0]
 80090d0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	3301      	adds	r3, #1
 80090d8:	029a      	lsls	r2, r3, #10
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80090ec:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	659a      	str	r2, [r3, #88]	; 0x58
 80090f6:	e00f      	b.n	8009118 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4a58      	ldr	r2, [pc, #352]	; (8009260 <HAL_SD_GetCardCSD+0x344>)
 80090fe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009104:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8009114:	2301      	movs	r3, #1
 8009116:	e09d      	b.n	8009254 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800911c:	0b9b      	lsrs	r3, r3, #14
 800911e:	b2db      	uxtb	r3, r3
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	b2da      	uxtb	r2, r3
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800912e:	09db      	lsrs	r3, r3, #7
 8009130:	b2db      	uxtb	r3, r3
 8009132:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009136:	b2da      	uxtb	r2, r3
 8009138:	683b      	ldr	r3, [r7, #0]
 800913a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009140:	b2db      	uxtb	r3, r3
 8009142:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009146:	b2da      	uxtb	r2, r3
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009150:	0fdb      	lsrs	r3, r3, #31
 8009152:	b2da      	uxtb	r2, r3
 8009154:	683b      	ldr	r3, [r7, #0]
 8009156:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800915c:	0f5b      	lsrs	r3, r3, #29
 800915e:	b2db      	uxtb	r3, r3
 8009160:	f003 0303 	and.w	r3, r3, #3
 8009164:	b2da      	uxtb	r2, r3
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800916e:	0e9b      	lsrs	r3, r3, #26
 8009170:	b2db      	uxtb	r3, r3
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	b2da      	uxtb	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009180:	0d9b      	lsrs	r3, r3, #22
 8009182:	b2db      	uxtb	r3, r3
 8009184:	f003 030f 	and.w	r3, r3, #15
 8009188:	b2da      	uxtb	r2, r3
 800918a:	683b      	ldr	r3, [r7, #0]
 800918c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009192:	0d5b      	lsrs	r3, r3, #21
 8009194:	b2db      	uxtb	r3, r3
 8009196:	f003 0301 	and.w	r3, r3, #1
 800919a:	b2da      	uxtb	r2, r3
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ae:	0c1b      	lsrs	r3, r3, #16
 80091b0:	b2db      	uxtb	r3, r3
 80091b2:	f003 0301 	and.w	r3, r3, #1
 80091b6:	b2da      	uxtb	r2, r3
 80091b8:	683b      	ldr	r3, [r7, #0]
 80091ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c2:	0bdb      	lsrs	r3, r3, #15
 80091c4:	b2db      	uxtb	r3, r3
 80091c6:	f003 0301 	and.w	r3, r3, #1
 80091ca:	b2da      	uxtb	r2, r3
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091d6:	0b9b      	lsrs	r3, r3, #14
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	f003 0301 	and.w	r3, r3, #1
 80091de:	b2da      	uxtb	r2, r3
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091ea:	0b5b      	lsrs	r3, r3, #13
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	f003 0301 	and.w	r3, r3, #1
 80091f2:	b2da      	uxtb	r2, r3
 80091f4:	683b      	ldr	r3, [r7, #0]
 80091f6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091fe:	0b1b      	lsrs	r3, r3, #12
 8009200:	b2db      	uxtb	r3, r3
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	b2da      	uxtb	r2, r3
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009212:	0a9b      	lsrs	r3, r3, #10
 8009214:	b2db      	uxtb	r3, r3
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	b2da      	uxtb	r2, r3
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009226:	0a1b      	lsrs	r3, r3, #8
 8009228:	b2db      	uxtb	r3, r3
 800922a:	f003 0303 	and.w	r3, r3, #3
 800922e:	b2da      	uxtb	r2, r3
 8009230:	683b      	ldr	r3, [r7, #0]
 8009232:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800923a:	085b      	lsrs	r3, r3, #1
 800923c:	b2db      	uxtb	r3, r3
 800923e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009242:	b2da      	uxtb	r2, r3
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800924a:	683b      	ldr	r3, [r7, #0]
 800924c:	2201      	movs	r2, #1
 800924e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr
 8009260:	1fe00fff 	.word	0x1fe00fff

08009264 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b094      	sub	sp, #80	; 0x50
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800926e:	2300      	movs	r3, #0
 8009270:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8009274:	f107 0308 	add.w	r3, r7, #8
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f000 fb64 	bl	8009948 <SD_SendSDStatus>
 8009280:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8009282:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009284:	2b00      	cmp	r3, #0
 8009286:	d011      	beq.n	80092ac <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4a4f      	ldr	r2, [pc, #316]	; (80093cc <HAL_SD_GetCardStatus+0x168>)
 800928e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009294:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009296:	431a      	orrs	r2, r3
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2201      	movs	r2, #1
 80092a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80092aa:	e070      	b.n	800938e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 80092ac:	68bb      	ldr	r3, [r7, #8]
 80092ae:	099b      	lsrs	r3, r3, #6
 80092b0:	b2db      	uxtb	r3, r3
 80092b2:	f003 0303 	and.w	r3, r3, #3
 80092b6:	b2da      	uxtb	r2, r3
 80092b8:	683b      	ldr	r3, [r7, #0]
 80092ba:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	095b      	lsrs	r3, r3, #5
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	b2da      	uxtb	r2, r3
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	0a1b      	lsrs	r3, r3, #8
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80092d6:	b29a      	uxth	r2, r3
 80092d8:	68bb      	ldr	r3, [r7, #8]
 80092da:	0e1b      	lsrs	r3, r3, #24
 80092dc:	b29b      	uxth	r3, r3
 80092de:	4313      	orrs	r3, r2
 80092e0:	b29a      	uxth	r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	061a      	lsls	r2, r3, #24
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	021b      	lsls	r3, r3, #8
 80092ee:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80092f2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	0a1b      	lsrs	r3, r3, #8
 80092f8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80092fc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	0e1b      	lsrs	r3, r3, #24
 8009302:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8009304:	683b      	ldr	r3, [r7, #0]
 8009306:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	b2da      	uxtb	r2, r3
 800930c:	683b      	ldr	r3, [r7, #0]
 800930e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	0a1b      	lsrs	r3, r3, #8
 8009314:	b2da      	uxtb	r2, r3
 8009316:	683b      	ldr	r3, [r7, #0]
 8009318:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800931a:	693b      	ldr	r3, [r7, #16]
 800931c:	0d1b      	lsrs	r3, r3, #20
 800931e:	b2db      	uxtb	r3, r3
 8009320:	f003 030f 	and.w	r3, r3, #15
 8009324:	b2da      	uxtb	r2, r3
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	0c1b      	lsrs	r3, r3, #16
 800932e:	b29b      	uxth	r3, r3
 8009330:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009334:	b29a      	uxth	r2, r3
 8009336:	697b      	ldr	r3, [r7, #20]
 8009338:	b29b      	uxth	r3, r3
 800933a:	b2db      	uxtb	r3, r3
 800933c:	b29b      	uxth	r3, r3
 800933e:	4313      	orrs	r3, r2
 8009340:	b29a      	uxth	r2, r3
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	0a9b      	lsrs	r3, r3, #10
 800934a:	b2db      	uxtb	r3, r3
 800934c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009350:	b2da      	uxtb	r2, r3
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	b2db      	uxtb	r3, r3
 800935c:	f003 0303 	and.w	r3, r3, #3
 8009360:	b2da      	uxtb	r2, r3
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	091b      	lsrs	r3, r3, #4
 800936a:	b2db      	uxtb	r3, r3
 800936c:	f003 030f 	and.w	r3, r3, #15
 8009370:	b2da      	uxtb	r2, r3
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	b2da      	uxtb	r2, r3
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	0e1b      	lsrs	r3, r3, #24
 8009388:	b2da      	uxtb	r2, r3
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f44f 7100 	mov.w	r1, #512	; 0x200
 8009396:	4618      	mov	r0, r3
 8009398:	f002 f866 	bl	800b468 <SDMMC_CmdBlockLength>
 800939c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800939e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d00d      	beq.n	80093c0 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a08      	ldr	r2, [pc, #32]	; (80093cc <HAL_SD_GetCardStatus+0x168>)
 80093aa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2201      	movs	r2, #1
 80093b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 80093ba:	2301      	movs	r3, #1
 80093bc:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 80093c0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 80093c4:	4618      	mov	r0, r3
 80093c6:	3750      	adds	r7, #80	; 0x50
 80093c8:	46bd      	mov	sp, r7
 80093ca:	bd80      	pop	{r7, pc}
 80093cc:	1fe00fff 	.word	0x1fe00fff

080093d0 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b083      	sub	sp, #12
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093de:	683b      	ldr	r3, [r7, #0]
 80093e0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009416:	683b      	ldr	r3, [r7, #0]
 8009418:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800941a:	2300      	movs	r3, #0
}
 800941c:	4618      	mov	r0, r3
 800941e:	370c      	adds	r7, #12
 8009420:	46bd      	mov	sp, r7
 8009422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009426:	4770      	bx	lr

08009428 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8009428:	b5b0      	push	{r4, r5, r7, lr}
 800942a:	b08e      	sub	sp, #56	; 0x38
 800942c:	af04      	add	r7, sp, #16
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8009432:	2300      	movs	r3, #0
 8009434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	2203      	movs	r2, #3
 800943c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009444:	2b03      	cmp	r3, #3
 8009446:	d02e      	beq.n	80094a6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800944e:	d106      	bne.n	800945e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009454:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
 800945c:	e029      	b.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009464:	d10a      	bne.n	800947c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8009466:	6878      	ldr	r0, [r7, #4]
 8009468:	f000 fb66 	bl	8009b38 <SD_WideBus_Enable>
 800946c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009472:	6a3b      	ldr	r3, [r7, #32]
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	639a      	str	r2, [r3, #56]	; 0x38
 800947a:	e01a      	b.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d10a      	bne.n	8009498 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8009482:	6878      	ldr	r0, [r7, #4]
 8009484:	f000 fba3 	bl	8009bce <SD_WideBus_Disable>
 8009488:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	431a      	orrs	r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	639a      	str	r2, [r3, #56]	; 0x38
 8009496:	e00c      	b.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800949c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38
 80094a4:	e005      	b.n	80094b2 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094aa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	4a2e      	ldr	r2, [pc, #184]	; (8009578 <HAL_SD_ConfigWideBusOperation+0x150>)
 80094c0:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 80094c2:	2301      	movs	r3, #1
 80094c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80094c8:	e034      	b.n	8009534 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
 80094d4:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 80094d6:	683b      	ldr	r3, [r7, #0]
 80094d8:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	691b      	ldr	r3, [r3, #16]
 80094de:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	695b      	ldr	r3, [r3, #20]
 80094e4:	2b03      	cmp	r3, #3
 80094e6:	d903      	bls.n	80094f0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	695b      	ldr	r3, [r3, #20]
 80094ec:	61bb      	str	r3, [r7, #24]
 80094ee:	e012      	b.n	8009516 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80094f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80094f8:	d103      	bne.n	8009502 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	695b      	ldr	r3, [r3, #20]
 80094fe:	61bb      	str	r3, [r7, #24]
 8009500:	e009      	b.n	8009516 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800950a:	d102      	bne.n	8009512 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800950c:	2302      	movs	r3, #2
 800950e:	61bb      	str	r3, [r7, #24]
 8009510:	e001      	b.n	8009516 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8009512:	2304      	movs	r3, #4
 8009514:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681d      	ldr	r5, [r3, #0]
 800951a:	466c      	mov	r4, sp
 800951c:	f107 0314 	add.w	r3, r7, #20
 8009520:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009524:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009528:	f107 0308 	add.w	r3, r7, #8
 800952c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800952e:	4628      	mov	r0, r5
 8009530:	f001 febc 	bl	800b2ac <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800953c:	4618      	mov	r0, r3
 800953e:	f001 ff93 	bl	800b468 <SDMMC_CmdBlockLength>
 8009542:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009544:	6a3b      	ldr	r3, [r7, #32]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d00c      	beq.n	8009564 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a0a      	ldr	r2, [pc, #40]	; (8009578 <HAL_SD_ConfigWideBusOperation+0x150>)
 8009550:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009556:	6a3b      	ldr	r3, [r7, #32]
 8009558:	431a      	orrs	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800955e:	2301      	movs	r3, #1
 8009560:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800956c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8009570:	4618      	mov	r0, r3
 8009572:	3728      	adds	r7, #40	; 0x28
 8009574:	46bd      	mov	sp, r7
 8009576:	bdb0      	pop	{r4, r5, r7, pc}
 8009578:	1fe00fff 	.word	0x1fe00fff

0800957c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8009588:	f107 030c 	add.w	r3, r7, #12
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 faaa 	bl	8009ae8 <SD_SendStatus>
 8009594:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d005      	beq.n	80095a8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	431a      	orrs	r2, r3
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	0a5b      	lsrs	r3, r3, #9
 80095ac:	f003 030f 	and.w	r3, r3, #15
 80095b0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80095b2:	693b      	ldr	r3, [r7, #16]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 80095bc:	b590      	push	{r4, r7, lr}
 80095be:	b091      	sub	sp, #68	; 0x44
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 80095c4:	2301      	movs	r3, #1
 80095c6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fec6 	bl	800b35e <SDMMC_GetPowerState>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d102      	bne.n	80095de <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80095d8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80095dc:	e0a8      	b.n	8009730 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095e2:	2b03      	cmp	r3, #3
 80095e4:	d02e      	beq.n	8009644 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f002 f912 	bl	800b814 <SDMMC_CmdSendCID>
 80095f0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80095f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d001      	beq.n	80095fc <SD_InitCard+0x40>
    {
      return errorstate;
 80095f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80095fa:	e099      	b.n	8009730 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2100      	movs	r1, #0
 8009602:	4618      	mov	r0, r3
 8009604:	f001 fef1 	bl	800b3ea <SDMMC_GetResponse>
 8009608:	4602      	mov	r2, r0
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	2104      	movs	r1, #4
 8009614:	4618      	mov	r0, r3
 8009616:	f001 fee8 	bl	800b3ea <SDMMC_GetResponse>
 800961a:	4602      	mov	r2, r0
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	2108      	movs	r1, #8
 8009626:	4618      	mov	r0, r3
 8009628:	f001 fedf 	bl	800b3ea <SDMMC_GetResponse>
 800962c:	4602      	mov	r2, r0
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	210c      	movs	r1, #12
 8009638:	4618      	mov	r0, r3
 800963a:	f001 fed6 	bl	800b3ea <SDMMC_GetResponse>
 800963e:	4602      	mov	r2, r0
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009648:	2b03      	cmp	r3, #3
 800964a:	d00d      	beq.n	8009668 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f107 020e 	add.w	r2, r7, #14
 8009654:	4611      	mov	r1, r2
 8009656:	4618      	mov	r0, r3
 8009658:	f002 f91b 	bl	800b892 <SDMMC_CmdSetRelAdd>
 800965c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800965e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009660:	2b00      	cmp	r3, #0
 8009662:	d001      	beq.n	8009668 <SD_InitCard+0xac>
    {
      return errorstate;
 8009664:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009666:	e063      	b.n	8009730 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800966c:	2b03      	cmp	r3, #3
 800966e:	d036      	beq.n	80096de <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009670:	89fb      	ldrh	r3, [r7, #14]
 8009672:	461a      	mov	r2, r3
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009680:	041b      	lsls	r3, r3, #16
 8009682:	4619      	mov	r1, r3
 8009684:	4610      	mov	r0, r2
 8009686:	f002 f8e4 	bl	800b852 <SDMMC_CmdSendCSD>
 800968a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800968c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800968e:	2b00      	cmp	r3, #0
 8009690:	d001      	beq.n	8009696 <SD_InitCard+0xda>
    {
      return errorstate;
 8009692:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009694:	e04c      	b.n	8009730 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	2100      	movs	r1, #0
 800969c:	4618      	mov	r0, r3
 800969e:	f001 fea4 	bl	800b3ea <SDMMC_GetResponse>
 80096a2:	4602      	mov	r2, r0
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2104      	movs	r1, #4
 80096ae:	4618      	mov	r0, r3
 80096b0:	f001 fe9b 	bl	800b3ea <SDMMC_GetResponse>
 80096b4:	4602      	mov	r2, r0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	2108      	movs	r1, #8
 80096c0:	4618      	mov	r0, r3
 80096c2:	f001 fe92 	bl	800b3ea <SDMMC_GetResponse>
 80096c6:	4602      	mov	r2, r0
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	210c      	movs	r1, #12
 80096d2:	4618      	mov	r0, r3
 80096d4:	f001 fe89 	bl	800b3ea <SDMMC_GetResponse>
 80096d8:	4602      	mov	r2, r0
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	2104      	movs	r1, #4
 80096e4:	4618      	mov	r0, r3
 80096e6:	f001 fe80 	bl	800b3ea <SDMMC_GetResponse>
 80096ea:	4603      	mov	r3, r0
 80096ec:	0d1a      	lsrs	r2, r3, #20
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80096f2:	f107 0310 	add.w	r3, r7, #16
 80096f6:	4619      	mov	r1, r3
 80096f8:	6878      	ldr	r0, [r7, #4]
 80096fa:	f7ff fc0f 	bl	8008f1c <HAL_SD_GetCardCSD>
 80096fe:	4603      	mov	r3, r0
 8009700:	2b00      	cmp	r3, #0
 8009702:	d002      	beq.n	800970a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8009704:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8009708:	e012      	b.n	8009730 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6819      	ldr	r1, [r3, #0]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009712:	041b      	lsls	r3, r3, #16
 8009714:	f04f 0400 	mov.w	r4, #0
 8009718:	461a      	mov	r2, r3
 800971a:	4623      	mov	r3, r4
 800971c:	4608      	mov	r0, r1
 800971e:	f001 ff8f 	bl	800b640 <SDMMC_CmdSelDesel>
 8009722:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009726:	2b00      	cmp	r3, #0
 8009728:	d001      	beq.n	800972e <SD_InitCard+0x172>
  {
    return errorstate;
 800972a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800972c:	e000      	b.n	8009730 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800972e:	2300      	movs	r3, #0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3744      	adds	r7, #68	; 0x44
 8009734:	46bd      	mov	sp, r7
 8009736:	bd90      	pop	{r4, r7, pc}

08009738 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b088      	sub	sp, #32
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009740:	2300      	movs	r3, #0
 8009742:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8009744:	2300      	movs	r3, #0
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	2300      	movs	r3, #0
 800974a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800974c:	f7f8 f860 	bl	8001810 <HAL_GetTick>
 8009750:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	4618      	mov	r0, r3
 8009758:	f001 ff96 	bl	800b688 <SDMMC_CmdGoIdleState>
 800975c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	2b00      	cmp	r3, #0
 8009762:	d001      	beq.n	8009768 <SD_PowerON+0x30>
  {
    return errorstate;
 8009764:	693b      	ldr	r3, [r7, #16]
 8009766:	e0e9      	b.n	800993c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4618      	mov	r0, r3
 800976e:	f001 ffa9 	bl	800b6c4 <SDMMC_CmdOperCond>
 8009772:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009774:	693b      	ldr	r3, [r7, #16]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d00d      	beq.n	8009796 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	2200      	movs	r2, #0
 800977e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f001 ff7f 	bl	800b688 <SDMMC_CmdGoIdleState>
 800978a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d004      	beq.n	800979c <SD_PowerON+0x64>
    {
      return errorstate;
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	e0d2      	b.n	800993c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2201      	movs	r2, #1
 800979a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d137      	bne.n	8009814 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	2100      	movs	r1, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	f001 ffaa 	bl	800b704 <SDMMC_CmdAppCommand>
 80097b0:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097b2:	693b      	ldr	r3, [r7, #16]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d02d      	beq.n	8009814 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097b8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097bc:	e0be      	b.n	800993c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	2100      	movs	r1, #0
 80097c4:	4618      	mov	r0, r3
 80097c6:	f001 ff9d 	bl	800b704 <SDMMC_CmdAppCommand>
 80097ca:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d001      	beq.n	80097d6 <SD_PowerON+0x9e>
    {
      return errorstate;
 80097d2:	693b      	ldr	r3, [r7, #16]
 80097d4:	e0b2      	b.n	800993c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	495a      	ldr	r1, [pc, #360]	; (8009944 <SD_PowerON+0x20c>)
 80097dc:	4618      	mov	r0, r3
 80097de:	f001 ffb4 	bl	800b74a <SDMMC_CmdAppOperCommand>
 80097e2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 80097e4:	693b      	ldr	r3, [r7, #16]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d002      	beq.n	80097f0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80097ea:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80097ee:	e0a5      	b.n	800993c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	2100      	movs	r1, #0
 80097f6:	4618      	mov	r0, r3
 80097f8:	f001 fdf7 	bl	800b3ea <SDMMC_GetResponse>
 80097fc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	0fdb      	lsrs	r3, r3, #31
 8009802:	2b01      	cmp	r3, #1
 8009804:	d101      	bne.n	800980a <SD_PowerON+0xd2>
 8009806:	2301      	movs	r3, #1
 8009808:	e000      	b.n	800980c <SD_PowerON+0xd4>
 800980a:	2300      	movs	r3, #0
 800980c:	61bb      	str	r3, [r7, #24]

    count++;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	3301      	adds	r3, #1
 8009812:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800981a:	4293      	cmp	r3, r2
 800981c:	d802      	bhi.n	8009824 <SD_PowerON+0xec>
 800981e:	69bb      	ldr	r3, [r7, #24]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d0cc      	beq.n	80097be <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800982a:	4293      	cmp	r3, r2
 800982c:	d902      	bls.n	8009834 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800982e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009832:	e083      	b.n	800993c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8009834:	69fb      	ldr	r3, [r7, #28]
 8009836:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800983a:	2b00      	cmp	r3, #0
 800983c:	d07d      	beq.n	800993a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	2201      	movs	r2, #1
 8009842:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	2b02      	cmp	r3, #2
 800984a:	d176      	bne.n	800993a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009852:	2b00      	cmp	r3, #0
 8009854:	d071      	beq.n	800993a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f44f 7200 	mov.w	r2, #512	; 0x200
 800985c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	681a      	ldr	r2, [r3, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	f042 0208 	orr.w	r2, r2, #8
 800986c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	4618      	mov	r0, r3
 8009874:	f002 f874 	bl	800b960 <SDMMC_CmdVoltageSwitch>
 8009878:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00c      	beq.n	800989a <SD_PowerON+0x162>
        {
          return errorstate;
 8009880:	693b      	ldr	r3, [r7, #16]
 8009882:	e05b      	b.n	800993c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009884:	f7f7 ffc4 	bl	8001810 <HAL_GetTick>
 8009888:	4602      	mov	r2, r0
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	1ad3      	subs	r3, r2, r3
 800988e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009892:	d102      	bne.n	800989a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8009894:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009898:	e050      	b.n	800993c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80098a8:	d1ec      	bne.n	8009884 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80098b2:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098c2:	d002      	beq.n	80098ca <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 80098c4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80098c8:	e038      	b.n	800993c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 80098ca:	2001      	movs	r0, #1
 80098cc:	f7ff fb1a 	bl	8008f04 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	681a      	ldr	r2, [r3, #0]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0204 	orr.w	r2, r2, #4
 80098de:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80098e0:	e00a      	b.n	80098f8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80098e2:	f7f7 ff95 	bl	8001810 <HAL_GetTick>
 80098e6:	4602      	mov	r2, r0
 80098e8:	697b      	ldr	r3, [r7, #20]
 80098ea:	1ad3      	subs	r3, r2, r3
 80098ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80098f0:	d102      	bne.n	80098f8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 80098f2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80098f6:	e021      	b.n	800993c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009906:	d1ec      	bne.n	80098e2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8009910:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009918:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800991c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009920:	d102      	bne.n	8009928 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009922:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009926:	e009      	b.n	800993c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2213      	movs	r2, #19
 800992e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f04f 32ff 	mov.w	r2, #4294967295
 8009938:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800993a:	2300      	movs	r3, #0
}
 800993c:	4618      	mov	r0, r3
 800993e:	3720      	adds	r7, #32
 8009940:	46bd      	mov	sp, r7
 8009942:	bd80      	pop	{r7, pc}
 8009944:	c1100000 	.word	0xc1100000

08009948 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009948:	b580      	push	{r7, lr}
 800994a:	b08c      	sub	sp, #48	; 0x30
 800994c:	af00      	add	r7, sp, #0
 800994e:	6078      	str	r0, [r7, #4]
 8009950:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009952:	f7f7 ff5d 	bl	8001810 <HAL_GetTick>
 8009956:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2100      	movs	r1, #0
 8009962:	4618      	mov	r0, r3
 8009964:	f001 fd41 	bl	800b3ea <SDMMC_GetResponse>
 8009968:	4603      	mov	r3, r0
 800996a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800996e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009972:	d102      	bne.n	800997a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009974:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009978:	e0b0      	b.n	8009adc <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	2140      	movs	r1, #64	; 0x40
 8009980:	4618      	mov	r0, r3
 8009982:	f001 fd71 	bl	800b468 <SDMMC_CmdBlockLength>
 8009986:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009988:	6a3b      	ldr	r3, [r7, #32]
 800998a:	2b00      	cmp	r3, #0
 800998c:	d005      	beq.n	800999a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	e0a0      	b.n	8009adc <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681a      	ldr	r2, [r3, #0]
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099a2:	041b      	lsls	r3, r3, #16
 80099a4:	4619      	mov	r1, r3
 80099a6:	4610      	mov	r0, r2
 80099a8:	f001 feac 	bl	800b704 <SDMMC_CmdAppCommand>
 80099ac:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d005      	beq.n	80099c0 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	e08d      	b.n	8009adc <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80099c0:	f04f 33ff 	mov.w	r3, #4294967295
 80099c4:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 80099c6:	2340      	movs	r3, #64	; 0x40
 80099c8:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 80099ca:	2360      	movs	r3, #96	; 0x60
 80099cc:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80099ce:	2302      	movs	r3, #2
 80099d0:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80099d2:	2300      	movs	r3, #0
 80099d4:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 80099d6:	2301      	movs	r3, #1
 80099d8:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f107 0208 	add.w	r2, r7, #8
 80099e2:	4611      	mov	r1, r2
 80099e4:	4618      	mov	r0, r3
 80099e6:	f001 fd13 	bl	800b410 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4618      	mov	r0, r3
 80099f0:	f001 ff94 	bl	800b91c <SDMMC_CmdStatusRegister>
 80099f4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80099f6:	6a3b      	ldr	r3, [r7, #32]
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d02b      	beq.n	8009a54 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009a04:	6a3b      	ldr	r3, [r7, #32]
 8009a06:	e069      	b.n	8009adc <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d013      	beq.n	8009a3e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 8009a16:	2300      	movs	r3, #0
 8009a18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a1a:	e00d      	b.n	8009a38 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4618      	mov	r0, r3
 8009a22:	f001 fc6d 	bl	800b300 <SDMMC_ReadFIFO>
 8009a26:	4602      	mov	r2, r0
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	601a      	str	r2, [r3, #0]
        pData++;
 8009a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2e:	3304      	adds	r3, #4
 8009a30:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 8009a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a34:	3301      	adds	r3, #1
 8009a36:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a3a:	2b07      	cmp	r3, #7
 8009a3c:	d9ee      	bls.n	8009a1c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009a3e:	f7f7 fee7 	bl	8001810 <HAL_GetTick>
 8009a42:	4602      	mov	r2, r0
 8009a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a46:	1ad3      	subs	r3, r2, r3
 8009a48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4c:	d102      	bne.n	8009a54 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009a4e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009a52:	e043      	b.n	8009adc <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a5a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d0d2      	beq.n	8009a08 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a68:	f003 0308 	and.w	r3, r3, #8
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d001      	beq.n	8009a74 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009a70:	2308      	movs	r3, #8
 8009a72:	e033      	b.n	8009adc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a7a:	f003 0302 	and.w	r3, r3, #2
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d001      	beq.n	8009a86 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009a82:	2302      	movs	r3, #2
 8009a84:	e02a      	b.n	8009adc <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	f003 0320 	and.w	r3, r3, #32
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d017      	beq.n	8009ac4 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009a94:	2320      	movs	r3, #32
 8009a96:	e021      	b.n	8009adc <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f001 fc2f 	bl	800b300 <SDMMC_ReadFIFO>
 8009aa2:	4602      	mov	r2, r0
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	601a      	str	r2, [r3, #0]
    pData++;
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	3304      	adds	r3, #4
 8009aac:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009aae:	f7f7 feaf 	bl	8001810 <HAL_GetTick>
 8009ab2:	4602      	mov	r2, r0
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	1ad3      	subs	r3, r2, r3
 8009ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009abc:	d102      	bne.n	8009ac4 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009abe:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009ac2:	e00b      	b.n	8009adc <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d1e2      	bne.n	8009a98 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a03      	ldr	r2, [pc, #12]	; (8009ae4 <SD_SendSDStatus+0x19c>)
 8009ad8:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8009ada:	2300      	movs	r3, #0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3730      	adds	r7, #48	; 0x30
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}
 8009ae4:	18000f3a 	.word	0x18000f3a

08009ae8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d102      	bne.n	8009afe <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009af8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009afc:	e018      	b.n	8009b30 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b06:	041b      	lsls	r3, r3, #16
 8009b08:	4619      	mov	r1, r3
 8009b0a:	4610      	mov	r0, r2
 8009b0c:	f001 fee3 	bl	800b8d6 <SDMMC_CmdSendStatus>
 8009b10:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <SD_SendStatus+0x34>
  {
    return errorstate;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	e009      	b.n	8009b30 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	2100      	movs	r1, #0
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fc61 	bl	800b3ea <SDMMC_GetResponse>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3710      	adds	r7, #16
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009b40:	2300      	movs	r3, #0
 8009b42:	60fb      	str	r3, [r7, #12]
 8009b44:	2300      	movs	r3, #0
 8009b46:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f001 fc4b 	bl	800b3ea <SDMMC_GetResponse>
 8009b54:	4603      	mov	r3, r0
 8009b56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b5e:	d102      	bne.n	8009b66 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009b60:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009b64:	e02f      	b.n	8009bc6 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009b66:	f107 030c 	add.w	r3, r7, #12
 8009b6a:	4619      	mov	r1, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	f000 f879 	bl	8009c64 <SD_FindSCR>
 8009b72:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009b74:	697b      	ldr	r3, [r7, #20]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d001      	beq.n	8009b7e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8009b7a:	697b      	ldr	r3, [r7, #20]
 8009b7c:	e023      	b.n	8009bc6 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009b7e:	693b      	ldr	r3, [r7, #16]
 8009b80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d01c      	beq.n	8009bc2 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681a      	ldr	r2, [r3, #0]
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009b90:	041b      	lsls	r3, r3, #16
 8009b92:	4619      	mov	r1, r3
 8009b94:	4610      	mov	r0, r2
 8009b96:	f001 fdb5 	bl	800b704 <SDMMC_CmdAppCommand>
 8009b9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009b9c:	697b      	ldr	r3, [r7, #20]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d001      	beq.n	8009ba6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	e00f      	b.n	8009bc6 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2102      	movs	r1, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f001 fdec 	bl	800b78a <SDMMC_CmdBusWidth>
 8009bb2:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009bb4:	697b      	ldr	r3, [r7, #20]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d001      	beq.n	8009bbe <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8009bba:	697b      	ldr	r3, [r7, #20]
 8009bbc:	e003      	b.n	8009bc6 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e001      	b.n	8009bc6 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009bc2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3718      	adds	r7, #24
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}

08009bce <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8009bce:	b580      	push	{r7, lr}
 8009bd0:	b086      	sub	sp, #24
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009bd6:	2300      	movs	r3, #0
 8009bd8:	60fb      	str	r3, [r7, #12]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	2100      	movs	r1, #0
 8009be4:	4618      	mov	r0, r3
 8009be6:	f001 fc00 	bl	800b3ea <SDMMC_GetResponse>
 8009bea:	4603      	mov	r3, r0
 8009bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009bf0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009bf4:	d102      	bne.n	8009bfc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bfa:	e02f      	b.n	8009c5c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009bfc:	f107 030c 	add.w	r3, r7, #12
 8009c00:	4619      	mov	r1, r3
 8009c02:	6878      	ldr	r0, [r7, #4]
 8009c04:	f000 f82e 	bl	8009c64 <SD_FindSCR>
 8009c08:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d001      	beq.n	8009c14 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	e023      	b.n	8009c5c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8009c14:	693b      	ldr	r3, [r7, #16]
 8009c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d01c      	beq.n	8009c58 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681a      	ldr	r2, [r3, #0]
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	4619      	mov	r1, r3
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	f001 fd6a 	bl	800b704 <SDMMC_CmdAppCommand>
 8009c30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d001      	beq.n	8009c3c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8009c38:	697b      	ldr	r3, [r7, #20]
 8009c3a:	e00f      	b.n	8009c5c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2100      	movs	r1, #0
 8009c42:	4618      	mov	r0, r3
 8009c44:	f001 fda1 	bl	800b78a <SDMMC_CmdBusWidth>
 8009c48:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d001      	beq.n	8009c54 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	e003      	b.n	8009c5c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009c54:	2300      	movs	r3, #0
 8009c56:	e001      	b.n	8009c5c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009c58:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b08e      	sub	sp, #56	; 0x38
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009c6e:	f7f7 fdcf 	bl	8001810 <HAL_GetTick>
 8009c72:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009c78:	2300      	movs	r3, #0
 8009c7a:	60bb      	str	r3, [r7, #8]
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009c80:	683b      	ldr	r3, [r7, #0]
 8009c82:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2108      	movs	r1, #8
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f001 fbec 	bl	800b468 <SDMMC_CmdBlockLength>
 8009c90:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d001      	beq.n	8009c9c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c9a:	e0ad      	b.n	8009df8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681a      	ldr	r2, [r3, #0]
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f001 fd2b 	bl	800b704 <SDMMC_CmdAppCommand>
 8009cae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d001      	beq.n	8009cba <SD_FindSCR+0x56>
  {
    return errorstate;
 8009cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cb8:	e09e      	b.n	8009df8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009cba:	f04f 33ff 	mov.w	r3, #4294967295
 8009cbe:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009cc0:	2308      	movs	r3, #8
 8009cc2:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009cc4:	2330      	movs	r3, #48	; 0x30
 8009cc6:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009cc8:	2302      	movs	r3, #2
 8009cca:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009ccc:	2300      	movs	r3, #0
 8009cce:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009cd0:	2301      	movs	r3, #1
 8009cd2:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	f107 0210 	add.w	r2, r7, #16
 8009cdc:	4611      	mov	r1, r2
 8009cde:	4618      	mov	r0, r3
 8009ce0:	f001 fb96 	bl	800b410 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f001 fd71 	bl	800b7d0 <SDMMC_CmdSendSCR>
 8009cee:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d027      	beq.n	8009d46 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8009cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cf8:	e07e      	b.n	8009df8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d00:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d113      	bne.n	8009d30 <SD_FindSCR+0xcc>
 8009d08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d110      	bne.n	8009d30 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f001 faf4 	bl	800b300 <SDMMC_ReadFIFO>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4618      	mov	r0, r3
 8009d22:	f001 faed 	bl	800b300 <SDMMC_ReadFIFO>
 8009d26:	4603      	mov	r3, r0
 8009d28:	60fb      	str	r3, [r7, #12]
      index++;
 8009d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d2c:	3301      	adds	r3, #1
 8009d2e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8009d30:	f7f7 fd6e 	bl	8001810 <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d3e:	d102      	bne.n	8009d46 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009d40:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009d44:	e058      	b.n	8009df8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009d4c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009d50:	4013      	ands	r3, r2
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d0d1      	beq.n	8009cfa <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d5c:	f003 0308 	and.w	r3, r3, #8
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d005      	beq.n	8009d70 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	2208      	movs	r2, #8
 8009d6a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009d6c:	2308      	movs	r3, #8
 8009d6e:	e043      	b.n	8009df8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d76:	f003 0302 	and.w	r3, r3, #2
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d005      	beq.n	8009d8a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2202      	movs	r2, #2
 8009d84:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009d86:	2302      	movs	r3, #2
 8009d88:	e036      	b.n	8009df8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d90:	f003 0320 	and.w	r3, r3, #32
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d005      	beq.n	8009da4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	2220      	movs	r2, #32
 8009d9e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009da0:	2320      	movs	r3, #32
 8009da2:	e029      	b.n	8009df8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a15      	ldr	r2, [pc, #84]	; (8009e00 <SD_FindSCR+0x19c>)
 8009daa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	061a      	lsls	r2, r3, #24
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	021b      	lsls	r3, r3, #8
 8009db4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009db8:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	0a1b      	lsrs	r3, r3, #8
 8009dbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dc2:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	0e1b      	lsrs	r3, r3, #24
 8009dc8:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dcc:	601a      	str	r2, [r3, #0]
    scr++;
 8009dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dd0:	3304      	adds	r3, #4
 8009dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009dd4:	68bb      	ldr	r3, [r7, #8]
 8009dd6:	061a      	lsls	r2, r3, #24
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	021b      	lsls	r3, r3, #8
 8009ddc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009de0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009de2:	68bb      	ldr	r3, [r7, #8]
 8009de4:	0a1b      	lsrs	r3, r3, #8
 8009de6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009dea:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	0e1b      	lsrs	r3, r3, #24
 8009df0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8009df6:	2300      	movs	r3, #0
}
 8009df8:	4618      	mov	r0, r3
 8009dfa:	3738      	adds	r7, #56	; 0x38
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	bd80      	pop	{r7, pc}
 8009e00:	18000f3a 	.word	0x18000f3a

08009e04 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8009e04:	b580      	push	{r7, lr}
 8009e06:	b086      	sub	sp, #24
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e10:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e16:	2b1f      	cmp	r3, #31
 8009e18:	d936      	bls.n	8009e88 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	617b      	str	r3, [r7, #20]
 8009e1e:	e027      	b.n	8009e70 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 fa6b 	bl	800b300 <SDMMC_ReadFIFO>
 8009e2a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	b2da      	uxtb	r2, r3
 8009e30:	693b      	ldr	r3, [r7, #16]
 8009e32:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	3301      	adds	r3, #1
 8009e38:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	0a1b      	lsrs	r3, r3, #8
 8009e3e:	b2da      	uxtb	r2, r3
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e44:	693b      	ldr	r3, [r7, #16]
 8009e46:	3301      	adds	r3, #1
 8009e48:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	0c1b      	lsrs	r3, r3, #16
 8009e4e:	b2da      	uxtb	r2, r3
 8009e50:	693b      	ldr	r3, [r7, #16]
 8009e52:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	3301      	adds	r3, #1
 8009e58:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8009e5a:	68fb      	ldr	r3, [r7, #12]
 8009e5c:	0e1b      	lsrs	r3, r3, #24
 8009e5e:	b2da      	uxtb	r2, r3
 8009e60:	693b      	ldr	r3, [r7, #16]
 8009e62:	701a      	strb	r2, [r3, #0]
      tmp++;
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	3301      	adds	r3, #1
 8009e68:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	3301      	adds	r3, #1
 8009e6e:	617b      	str	r3, [r7, #20]
 8009e70:	697b      	ldr	r3, [r7, #20]
 8009e72:	2b07      	cmp	r3, #7
 8009e74:	d9d4      	bls.n	8009e20 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e80:	f1a3 0220 	sub.w	r2, r3, #32
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 8009e88:	bf00      	nop
 8009e8a:	3718      	adds	r7, #24
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	bd80      	pop	{r7, pc}

08009e90 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8009e90:	b580      	push	{r7, lr}
 8009e92:	b086      	sub	sp, #24
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	6a1b      	ldr	r3, [r3, #32]
 8009e9c:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea2:	2b1f      	cmp	r3, #31
 8009ea4:	d93a      	bls.n	8009f1c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	617b      	str	r3, [r7, #20]
 8009eaa:	e02b      	b.n	8009f04 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	781b      	ldrb	r3, [r3, #0]
 8009eb0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009eb2:	693b      	ldr	r3, [r7, #16]
 8009eb4:	3301      	adds	r3, #1
 8009eb6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	781b      	ldrb	r3, [r3, #0]
 8009ebc:	021a      	lsls	r2, r3, #8
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	4313      	orrs	r3, r2
 8009ec2:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009ec4:	693b      	ldr	r3, [r7, #16]
 8009ec6:	3301      	adds	r3, #1
 8009ec8:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	781b      	ldrb	r3, [r3, #0]
 8009ece:	041a      	lsls	r2, r3, #16
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009ed6:	693b      	ldr	r3, [r7, #16]
 8009ed8:	3301      	adds	r3, #1
 8009eda:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8009edc:	693b      	ldr	r3, [r7, #16]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	061a      	lsls	r2, r3, #24
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	60fb      	str	r3, [r7, #12]
      tmp++;
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	3301      	adds	r3, #1
 8009eec:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f107 020c 	add.w	r2, r7, #12
 8009ef6:	4611      	mov	r1, r2
 8009ef8:	4618      	mov	r0, r3
 8009efa:	f001 fa0e 	bl	800b31a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 8009efe:	697b      	ldr	r3, [r7, #20]
 8009f00:	3301      	adds	r3, #1
 8009f02:	617b      	str	r3, [r7, #20]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	2b07      	cmp	r3, #7
 8009f08:	d9d0      	bls.n	8009eac <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f14:	f1a3 0220 	sub.w	r2, r3, #32
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8009f1c:	bf00      	nop
 8009f1e:	3718      	adds	r7, #24
 8009f20:	46bd      	mov	sp, r7
 8009f22:	bd80      	pop	{r7, pc}

08009f24 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f24:	b480      	push	{r7}
 8009f26:	b083      	sub	sp, #12
 8009f28:	af00      	add	r7, sp, #0
 8009f2a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f2c:	bf00      	nop
 8009f2e:	370c      	adds	r7, #12
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b083      	sub	sp, #12
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f40:	bf00      	nop
 8009f42:	370c      	adds	r7, #12
 8009f44:	46bd      	mov	sp, r7
 8009f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4a:	4770      	bx	lr

08009f4c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b083      	sub	sp, #12
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8009f54:	bf00      	nop
 8009f56:	370c      	adds	r7, #12
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 8009f68:	bf00      	nop
 8009f6a:	370c      	adds	r7, #12
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f72:	4770      	bx	lr

08009f74 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 8009f7c:	2300      	movs	r3, #0
 8009f7e:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d101      	bne.n	8009f8a <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 8009f86:	2301      	movs	r3, #1
 8009f88:	e0e2      	b.n	800a150 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a70      	ldr	r2, [pc, #448]	; (800a158 <HAL_SPI_Init+0x1e4>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d00f      	beq.n	8009fba <HAL_SPI_Init+0x46>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	4a6f      	ldr	r2, [pc, #444]	; (800a15c <HAL_SPI_Init+0x1e8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d00a      	beq.n	8009fba <HAL_SPI_Init+0x46>
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a6d      	ldr	r2, [pc, #436]	; (800a160 <HAL_SPI_Init+0x1ec>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d005      	beq.n	8009fba <HAL_SPI_Init+0x46>
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	68db      	ldr	r3, [r3, #12]
 8009fb2:	2b0f      	cmp	r3, #15
 8009fb4:	d901      	bls.n	8009fba <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009fb6:	2301      	movs	r3, #1
 8009fb8:	e0ca      	b.n	800a150 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f8d2 	bl	800a164 <SPI_GetPacketSize>
 8009fc0:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	4a64      	ldr	r2, [pc, #400]	; (800a158 <HAL_SPI_Init+0x1e4>)
 8009fc8:	4293      	cmp	r3, r2
 8009fca:	d00c      	beq.n	8009fe6 <HAL_SPI_Init+0x72>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4a62      	ldr	r2, [pc, #392]	; (800a15c <HAL_SPI_Init+0x1e8>)
 8009fd2:	4293      	cmp	r3, r2
 8009fd4:	d007      	beq.n	8009fe6 <HAL_SPI_Init+0x72>
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	4a61      	ldr	r2, [pc, #388]	; (800a160 <HAL_SPI_Init+0x1ec>)
 8009fdc:	4293      	cmp	r3, r2
 8009fde:	d002      	beq.n	8009fe6 <HAL_SPI_Init+0x72>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b08      	cmp	r3, #8
 8009fe4:	d811      	bhi.n	800a00a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009fea:	4a5b      	ldr	r2, [pc, #364]	; (800a158 <HAL_SPI_Init+0x1e4>)
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d009      	beq.n	800a004 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a59      	ldr	r2, [pc, #356]	; (800a15c <HAL_SPI_Init+0x1e8>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d004      	beq.n	800a004 <HAL_SPI_Init+0x90>
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a58      	ldr	r2, [pc, #352]	; (800a160 <HAL_SPI_Init+0x1ec>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d104      	bne.n	800a00e <HAL_SPI_Init+0x9a>
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	2b10      	cmp	r3, #16
 800a008:	d901      	bls.n	800a00e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800a00a:	2301      	movs	r3, #1
 800a00c:	e0a0      	b.n	800a150 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a014:	b2db      	uxtb	r3, r3
 800a016:	2b00      	cmp	r3, #0
 800a018:	d106      	bne.n	800a028 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f7f7 f93a 	bl	800129c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2202      	movs	r2, #2
 800a02c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	681a      	ldr	r2, [r3, #0]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f022 0201 	bic.w	r2, r2, #1
 800a03e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	699b      	ldr	r3, [r3, #24]
 800a044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a048:	d110      	bne.n	800a06c <HAL_SPI_Init+0xf8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	685b      	ldr	r3, [r3, #4]
 800a04e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a052:	d10b      	bne.n	800a06c <HAL_SPI_Init+0xf8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d107      	bne.n	800a06c <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	681a      	ldr	r2, [r3, #0]
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a06a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	69da      	ldr	r2, [r3, #28]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a074:	431a      	orrs	r2, r3
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	431a      	orrs	r2, r3
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a07e:	ea42 0103 	orr.w	r1, r2, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	430a      	orrs	r2, r1
 800a08c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a096:	431a      	orrs	r2, r3
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a09c:	431a      	orrs	r2, r3
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	699b      	ldr	r3, [r3, #24]
 800a0a2:	431a      	orrs	r2, r3
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	691b      	ldr	r3, [r3, #16]
 800a0a8:	431a      	orrs	r2, r3
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	431a      	orrs	r2, r3
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	6a1b      	ldr	r3, [r3, #32]
 800a0b4:	431a      	orrs	r2, r3
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	431a      	orrs	r2, r3
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a0c0:	431a      	orrs	r2, r3
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	689b      	ldr	r3, [r3, #8]
 800a0c6:	431a      	orrs	r2, r3
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a0cc:	ea42 0103 	orr.w	r1, r2, r3
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	430a      	orrs	r2, r1
 800a0da:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	685b      	ldr	r3, [r3, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d113      	bne.n	800a10c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	689b      	ldr	r3, [r3, #8]
 800a0ea:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0f6:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	689b      	ldr	r3, [r3, #8]
 800a0fe:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a10a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f022 0201 	bic.w	r2, r2, #1
 800a11a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d00a      	beq.n	800a13e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68db      	ldr	r3, [r3, #12]
 800a12e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	430a      	orrs	r2, r1
 800a13c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2201      	movs	r2, #1
 800a14a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a14e:	2300      	movs	r3, #0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}
 800a158:	40013000 	.word	0x40013000
 800a15c:	40003800 	.word	0x40003800
 800a160:	40003c00 	.word	0x40003c00

0800a164 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a164:	b480      	push	{r7}
 800a166:	b085      	sub	sp, #20
 800a168:	af00      	add	r7, sp, #0
 800a16a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a170:	095b      	lsrs	r3, r3, #5
 800a172:	3301      	adds	r3, #1
 800a174:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	68db      	ldr	r3, [r3, #12]
 800a17a:	3301      	adds	r3, #1
 800a17c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	3307      	adds	r3, #7
 800a182:	08db      	lsrs	r3, r3, #3
 800a184:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
}
 800a18e:	4618      	mov	r0, r3
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr

0800a19a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b082      	sub	sp, #8
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d101      	bne.n	800a1ac <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	e042      	b.n	800a232 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d106      	bne.n	800a1c4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a1be:	6878      	ldr	r0, [r7, #4]
 800a1c0:	f7f7 f8b6 	bl	8001330 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	2224      	movs	r2, #36	; 0x24
 800a1c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	681a      	ldr	r2, [r3, #0]
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f022 0201 	bic.w	r2, r2, #1
 800a1da:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a1dc:	6878      	ldr	r0, [r7, #4]
 800a1de:	f000 f82d 	bl	800a23c <UART_SetConfig>
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d101      	bne.n	800a1ec <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	e022      	b.n	800a232 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d002      	beq.n	800a1fa <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 fdd1 	bl	800ad9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	685a      	ldr	r2, [r3, #4]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a208:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	689a      	ldr	r2, [r3, #8]
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a218:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f042 0201 	orr.w	r2, r2, #1
 800a228:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a22a:	6878      	ldr	r0, [r7, #4]
 800a22c:	f000 fe58 	bl	800aee0 <UART_CheckIdleState>
 800a230:	4603      	mov	r3, r0
}
 800a232:	4618      	mov	r0, r3
 800a234:	3708      	adds	r7, #8
 800a236:	46bd      	mov	sp, r7
 800a238:	bd80      	pop	{r7, pc}
	...

0800a23c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a23c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800a240:	b08e      	sub	sp, #56	; 0x38
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	689a      	ldr	r2, [r3, #8]
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	691b      	ldr	r3, [r3, #16]
 800a254:	431a      	orrs	r2, r3
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	695b      	ldr	r3, [r3, #20]
 800a25a:	431a      	orrs	r2, r3
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	69db      	ldr	r3, [r3, #28]
 800a260:	4313      	orrs	r3, r2
 800a262:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a268:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a26a:	4313      	orrs	r3, r2
 800a26c:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	681a      	ldr	r2, [r3, #0]
 800a274:	4bc1      	ldr	r3, [pc, #772]	; (800a57c <UART_SetConfig+0x340>)
 800a276:	4013      	ands	r3, r2
 800a278:	687a      	ldr	r2, [r7, #4]
 800a27a:	6812      	ldr	r2, [r2, #0]
 800a27c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a27e:	430b      	orrs	r3, r1
 800a280:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	685b      	ldr	r3, [r3, #4]
 800a288:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	68da      	ldr	r2, [r3, #12]
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	430a      	orrs	r2, r1
 800a296:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	699b      	ldr	r3, [r3, #24]
 800a29c:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	4ab7      	ldr	r2, [pc, #732]	; (800a580 <UART_SetConfig+0x344>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d004      	beq.n	800a2b2 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	6a1b      	ldr	r3, [r3, #32]
 800a2ac:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	689a      	ldr	r2, [r3, #8]
 800a2b8:	4bb2      	ldr	r3, [pc, #712]	; (800a584 <UART_SetConfig+0x348>)
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	687a      	ldr	r2, [r7, #4]
 800a2be:	6812      	ldr	r2, [r2, #0]
 800a2c0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2cc:	f023 010f 	bic.w	r1, r3, #15
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	430a      	orrs	r2, r1
 800a2da:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	4aa9      	ldr	r2, [pc, #676]	; (800a588 <UART_SetConfig+0x34c>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d177      	bne.n	800a3d6 <UART_SetConfig+0x19a>
 800a2e6:	4ba9      	ldr	r3, [pc, #676]	; (800a58c <UART_SetConfig+0x350>)
 800a2e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a2ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ee:	2b28      	cmp	r3, #40	; 0x28
 800a2f0:	d86c      	bhi.n	800a3cc <UART_SetConfig+0x190>
 800a2f2:	a201      	add	r2, pc, #4	; (adr r2, 800a2f8 <UART_SetConfig+0xbc>)
 800a2f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2f8:	0800a39d 	.word	0x0800a39d
 800a2fc:	0800a3cd 	.word	0x0800a3cd
 800a300:	0800a3cd 	.word	0x0800a3cd
 800a304:	0800a3cd 	.word	0x0800a3cd
 800a308:	0800a3cd 	.word	0x0800a3cd
 800a30c:	0800a3cd 	.word	0x0800a3cd
 800a310:	0800a3cd 	.word	0x0800a3cd
 800a314:	0800a3cd 	.word	0x0800a3cd
 800a318:	0800a3a5 	.word	0x0800a3a5
 800a31c:	0800a3cd 	.word	0x0800a3cd
 800a320:	0800a3cd 	.word	0x0800a3cd
 800a324:	0800a3cd 	.word	0x0800a3cd
 800a328:	0800a3cd 	.word	0x0800a3cd
 800a32c:	0800a3cd 	.word	0x0800a3cd
 800a330:	0800a3cd 	.word	0x0800a3cd
 800a334:	0800a3cd 	.word	0x0800a3cd
 800a338:	0800a3ad 	.word	0x0800a3ad
 800a33c:	0800a3cd 	.word	0x0800a3cd
 800a340:	0800a3cd 	.word	0x0800a3cd
 800a344:	0800a3cd 	.word	0x0800a3cd
 800a348:	0800a3cd 	.word	0x0800a3cd
 800a34c:	0800a3cd 	.word	0x0800a3cd
 800a350:	0800a3cd 	.word	0x0800a3cd
 800a354:	0800a3cd 	.word	0x0800a3cd
 800a358:	0800a3b5 	.word	0x0800a3b5
 800a35c:	0800a3cd 	.word	0x0800a3cd
 800a360:	0800a3cd 	.word	0x0800a3cd
 800a364:	0800a3cd 	.word	0x0800a3cd
 800a368:	0800a3cd 	.word	0x0800a3cd
 800a36c:	0800a3cd 	.word	0x0800a3cd
 800a370:	0800a3cd 	.word	0x0800a3cd
 800a374:	0800a3cd 	.word	0x0800a3cd
 800a378:	0800a3bd 	.word	0x0800a3bd
 800a37c:	0800a3cd 	.word	0x0800a3cd
 800a380:	0800a3cd 	.word	0x0800a3cd
 800a384:	0800a3cd 	.word	0x0800a3cd
 800a388:	0800a3cd 	.word	0x0800a3cd
 800a38c:	0800a3cd 	.word	0x0800a3cd
 800a390:	0800a3cd 	.word	0x0800a3cd
 800a394:	0800a3cd 	.word	0x0800a3cd
 800a398:	0800a3c5 	.word	0x0800a3c5
 800a39c:	2301      	movs	r3, #1
 800a39e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3a2:	e233      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3a4:	2304      	movs	r3, #4
 800a3a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3aa:	e22f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3ac:	2308      	movs	r3, #8
 800a3ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3b2:	e22b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3b4:	2310      	movs	r3, #16
 800a3b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ba:	e227      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3bc:	2320      	movs	r3, #32
 800a3be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3c2:	e223      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3c4:	2340      	movs	r3, #64	; 0x40
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3ca:	e21f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3cc:	2380      	movs	r3, #128	; 0x80
 800a3ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a3d2:	bf00      	nop
 800a3d4:	e21a      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	4a6d      	ldr	r2, [pc, #436]	; (800a590 <UART_SetConfig+0x354>)
 800a3dc:	4293      	cmp	r3, r2
 800a3de:	d132      	bne.n	800a446 <UART_SetConfig+0x20a>
 800a3e0:	4b6a      	ldr	r3, [pc, #424]	; (800a58c <UART_SetConfig+0x350>)
 800a3e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3e4:	f003 0307 	and.w	r3, r3, #7
 800a3e8:	2b05      	cmp	r3, #5
 800a3ea:	d827      	bhi.n	800a43c <UART_SetConfig+0x200>
 800a3ec:	a201      	add	r2, pc, #4	; (adr r2, 800a3f4 <UART_SetConfig+0x1b8>)
 800a3ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3f2:	bf00      	nop
 800a3f4:	0800a40d 	.word	0x0800a40d
 800a3f8:	0800a415 	.word	0x0800a415
 800a3fc:	0800a41d 	.word	0x0800a41d
 800a400:	0800a425 	.word	0x0800a425
 800a404:	0800a42d 	.word	0x0800a42d
 800a408:	0800a435 	.word	0x0800a435
 800a40c:	2300      	movs	r3, #0
 800a40e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a412:	e1fb      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a414:	2304      	movs	r3, #4
 800a416:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a41a:	e1f7      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a41c:	2308      	movs	r3, #8
 800a41e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a422:	e1f3      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a424:	2310      	movs	r3, #16
 800a426:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a42a:	e1ef      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a42c:	2320      	movs	r3, #32
 800a42e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a432:	e1eb      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a434:	2340      	movs	r3, #64	; 0x40
 800a436:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a43a:	e1e7      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a43c:	2380      	movs	r3, #128	; 0x80
 800a43e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a442:	bf00      	nop
 800a444:	e1e2      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a52      	ldr	r2, [pc, #328]	; (800a594 <UART_SetConfig+0x358>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d132      	bne.n	800a4b6 <UART_SetConfig+0x27a>
 800a450:	4b4e      	ldr	r3, [pc, #312]	; (800a58c <UART_SetConfig+0x350>)
 800a452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a454:	f003 0307 	and.w	r3, r3, #7
 800a458:	2b05      	cmp	r3, #5
 800a45a:	d827      	bhi.n	800a4ac <UART_SetConfig+0x270>
 800a45c:	a201      	add	r2, pc, #4	; (adr r2, 800a464 <UART_SetConfig+0x228>)
 800a45e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a462:	bf00      	nop
 800a464:	0800a47d 	.word	0x0800a47d
 800a468:	0800a485 	.word	0x0800a485
 800a46c:	0800a48d 	.word	0x0800a48d
 800a470:	0800a495 	.word	0x0800a495
 800a474:	0800a49d 	.word	0x0800a49d
 800a478:	0800a4a5 	.word	0x0800a4a5
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a482:	e1c3      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a484:	2304      	movs	r3, #4
 800a486:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a48a:	e1bf      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a48c:	2308      	movs	r3, #8
 800a48e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a492:	e1bb      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a494:	2310      	movs	r3, #16
 800a496:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a49a:	e1b7      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a49c:	2320      	movs	r3, #32
 800a49e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4a2:	e1b3      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a4a4:	2340      	movs	r3, #64	; 0x40
 800a4a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4aa:	e1af      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a4ac:	2380      	movs	r3, #128	; 0x80
 800a4ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4b2:	bf00      	nop
 800a4b4:	e1aa      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	681b      	ldr	r3, [r3, #0]
 800a4ba:	4a37      	ldr	r2, [pc, #220]	; (800a598 <UART_SetConfig+0x35c>)
 800a4bc:	4293      	cmp	r3, r2
 800a4be:	d132      	bne.n	800a526 <UART_SetConfig+0x2ea>
 800a4c0:	4b32      	ldr	r3, [pc, #200]	; (800a58c <UART_SetConfig+0x350>)
 800a4c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4c4:	f003 0307 	and.w	r3, r3, #7
 800a4c8:	2b05      	cmp	r3, #5
 800a4ca:	d827      	bhi.n	800a51c <UART_SetConfig+0x2e0>
 800a4cc:	a201      	add	r2, pc, #4	; (adr r2, 800a4d4 <UART_SetConfig+0x298>)
 800a4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4d2:	bf00      	nop
 800a4d4:	0800a4ed 	.word	0x0800a4ed
 800a4d8:	0800a4f5 	.word	0x0800a4f5
 800a4dc:	0800a4fd 	.word	0x0800a4fd
 800a4e0:	0800a505 	.word	0x0800a505
 800a4e4:	0800a50d 	.word	0x0800a50d
 800a4e8:	0800a515 	.word	0x0800a515
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4f2:	e18b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a4f4:	2304      	movs	r3, #4
 800a4f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a4fa:	e187      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a4fc:	2308      	movs	r3, #8
 800a4fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a502:	e183      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a504:	2310      	movs	r3, #16
 800a506:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a50a:	e17f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a50c:	2320      	movs	r3, #32
 800a50e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a512:	e17b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a514:	2340      	movs	r3, #64	; 0x40
 800a516:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a51a:	e177      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a51c:	2380      	movs	r3, #128	; 0x80
 800a51e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a522:	bf00      	nop
 800a524:	e172      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	4a1c      	ldr	r2, [pc, #112]	; (800a59c <UART_SetConfig+0x360>)
 800a52c:	4293      	cmp	r3, r2
 800a52e:	d144      	bne.n	800a5ba <UART_SetConfig+0x37e>
 800a530:	4b16      	ldr	r3, [pc, #88]	; (800a58c <UART_SetConfig+0x350>)
 800a532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a534:	f003 0307 	and.w	r3, r3, #7
 800a538:	2b05      	cmp	r3, #5
 800a53a:	d839      	bhi.n	800a5b0 <UART_SetConfig+0x374>
 800a53c:	a201      	add	r2, pc, #4	; (adr r2, 800a544 <UART_SetConfig+0x308>)
 800a53e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a542:	bf00      	nop
 800a544:	0800a55d 	.word	0x0800a55d
 800a548:	0800a565 	.word	0x0800a565
 800a54c:	0800a56d 	.word	0x0800a56d
 800a550:	0800a575 	.word	0x0800a575
 800a554:	0800a5a1 	.word	0x0800a5a1
 800a558:	0800a5a9 	.word	0x0800a5a9
 800a55c:	2300      	movs	r3, #0
 800a55e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a562:	e153      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a564:	2304      	movs	r3, #4
 800a566:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a56a:	e14f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a56c:	2308      	movs	r3, #8
 800a56e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a572:	e14b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a574:	2310      	movs	r3, #16
 800a576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a57a:	e147      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a57c:	cfff69f3 	.word	0xcfff69f3
 800a580:	58000c00 	.word	0x58000c00
 800a584:	11fff4ff 	.word	0x11fff4ff
 800a588:	40011000 	.word	0x40011000
 800a58c:	58024400 	.word	0x58024400
 800a590:	40004400 	.word	0x40004400
 800a594:	40004800 	.word	0x40004800
 800a598:	40004c00 	.word	0x40004c00
 800a59c:	40005000 	.word	0x40005000
 800a5a0:	2320      	movs	r3, #32
 800a5a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5a6:	e131      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a5a8:	2340      	movs	r3, #64	; 0x40
 800a5aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5ae:	e12d      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a5b0:	2380      	movs	r3, #128	; 0x80
 800a5b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a5b6:	bf00      	nop
 800a5b8:	e128      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4ab6      	ldr	r2, [pc, #728]	; (800a898 <UART_SetConfig+0x65c>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d178      	bne.n	800a6b6 <UART_SetConfig+0x47a>
 800a5c4:	4bb5      	ldr	r3, [pc, #724]	; (800a89c <UART_SetConfig+0x660>)
 800a5c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a5c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5cc:	2b28      	cmp	r3, #40	; 0x28
 800a5ce:	d86d      	bhi.n	800a6ac <UART_SetConfig+0x470>
 800a5d0:	a201      	add	r2, pc, #4	; (adr r2, 800a5d8 <UART_SetConfig+0x39c>)
 800a5d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5d6:	bf00      	nop
 800a5d8:	0800a67d 	.word	0x0800a67d
 800a5dc:	0800a6ad 	.word	0x0800a6ad
 800a5e0:	0800a6ad 	.word	0x0800a6ad
 800a5e4:	0800a6ad 	.word	0x0800a6ad
 800a5e8:	0800a6ad 	.word	0x0800a6ad
 800a5ec:	0800a6ad 	.word	0x0800a6ad
 800a5f0:	0800a6ad 	.word	0x0800a6ad
 800a5f4:	0800a6ad 	.word	0x0800a6ad
 800a5f8:	0800a685 	.word	0x0800a685
 800a5fc:	0800a6ad 	.word	0x0800a6ad
 800a600:	0800a6ad 	.word	0x0800a6ad
 800a604:	0800a6ad 	.word	0x0800a6ad
 800a608:	0800a6ad 	.word	0x0800a6ad
 800a60c:	0800a6ad 	.word	0x0800a6ad
 800a610:	0800a6ad 	.word	0x0800a6ad
 800a614:	0800a6ad 	.word	0x0800a6ad
 800a618:	0800a68d 	.word	0x0800a68d
 800a61c:	0800a6ad 	.word	0x0800a6ad
 800a620:	0800a6ad 	.word	0x0800a6ad
 800a624:	0800a6ad 	.word	0x0800a6ad
 800a628:	0800a6ad 	.word	0x0800a6ad
 800a62c:	0800a6ad 	.word	0x0800a6ad
 800a630:	0800a6ad 	.word	0x0800a6ad
 800a634:	0800a6ad 	.word	0x0800a6ad
 800a638:	0800a695 	.word	0x0800a695
 800a63c:	0800a6ad 	.word	0x0800a6ad
 800a640:	0800a6ad 	.word	0x0800a6ad
 800a644:	0800a6ad 	.word	0x0800a6ad
 800a648:	0800a6ad 	.word	0x0800a6ad
 800a64c:	0800a6ad 	.word	0x0800a6ad
 800a650:	0800a6ad 	.word	0x0800a6ad
 800a654:	0800a6ad 	.word	0x0800a6ad
 800a658:	0800a69d 	.word	0x0800a69d
 800a65c:	0800a6ad 	.word	0x0800a6ad
 800a660:	0800a6ad 	.word	0x0800a6ad
 800a664:	0800a6ad 	.word	0x0800a6ad
 800a668:	0800a6ad 	.word	0x0800a6ad
 800a66c:	0800a6ad 	.word	0x0800a6ad
 800a670:	0800a6ad 	.word	0x0800a6ad
 800a674:	0800a6ad 	.word	0x0800a6ad
 800a678:	0800a6a5 	.word	0x0800a6a5
 800a67c:	2301      	movs	r3, #1
 800a67e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a682:	e0c3      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a684:	2304      	movs	r3, #4
 800a686:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a68a:	e0bf      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a68c:	2308      	movs	r3, #8
 800a68e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a692:	e0bb      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a694:	2310      	movs	r3, #16
 800a696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a69a:	e0b7      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a69c:	2320      	movs	r3, #32
 800a69e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6a2:	e0b3      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a6a4:	2340      	movs	r3, #64	; 0x40
 800a6a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6aa:	e0af      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a6ac:	2380      	movs	r3, #128	; 0x80
 800a6ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6b2:	bf00      	nop
 800a6b4:	e0aa      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	4a79      	ldr	r2, [pc, #484]	; (800a8a0 <UART_SetConfig+0x664>)
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d132      	bne.n	800a726 <UART_SetConfig+0x4ea>
 800a6c0:	4b76      	ldr	r3, [pc, #472]	; (800a89c <UART_SetConfig+0x660>)
 800a6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c4:	f003 0307 	and.w	r3, r3, #7
 800a6c8:	2b05      	cmp	r3, #5
 800a6ca:	d827      	bhi.n	800a71c <UART_SetConfig+0x4e0>
 800a6cc:	a201      	add	r2, pc, #4	; (adr r2, 800a6d4 <UART_SetConfig+0x498>)
 800a6ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6d2:	bf00      	nop
 800a6d4:	0800a6ed 	.word	0x0800a6ed
 800a6d8:	0800a6f5 	.word	0x0800a6f5
 800a6dc:	0800a6fd 	.word	0x0800a6fd
 800a6e0:	0800a705 	.word	0x0800a705
 800a6e4:	0800a70d 	.word	0x0800a70d
 800a6e8:	0800a715 	.word	0x0800a715
 800a6ec:	2300      	movs	r3, #0
 800a6ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6f2:	e08b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a6f4:	2304      	movs	r3, #4
 800a6f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a6fa:	e087      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a6fc:	2308      	movs	r3, #8
 800a6fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a702:	e083      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a704:	2310      	movs	r3, #16
 800a706:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a70a:	e07f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a70c:	2320      	movs	r3, #32
 800a70e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a712:	e07b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a714:	2340      	movs	r3, #64	; 0x40
 800a716:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a71a:	e077      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a71c:	2380      	movs	r3, #128	; 0x80
 800a71e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a722:	bf00      	nop
 800a724:	e072      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a5e      	ldr	r2, [pc, #376]	; (800a8a4 <UART_SetConfig+0x668>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d132      	bne.n	800a796 <UART_SetConfig+0x55a>
 800a730:	4b5a      	ldr	r3, [pc, #360]	; (800a89c <UART_SetConfig+0x660>)
 800a732:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a734:	f003 0307 	and.w	r3, r3, #7
 800a738:	2b05      	cmp	r3, #5
 800a73a:	d827      	bhi.n	800a78c <UART_SetConfig+0x550>
 800a73c:	a201      	add	r2, pc, #4	; (adr r2, 800a744 <UART_SetConfig+0x508>)
 800a73e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a742:	bf00      	nop
 800a744:	0800a75d 	.word	0x0800a75d
 800a748:	0800a765 	.word	0x0800a765
 800a74c:	0800a76d 	.word	0x0800a76d
 800a750:	0800a775 	.word	0x0800a775
 800a754:	0800a77d 	.word	0x0800a77d
 800a758:	0800a785 	.word	0x0800a785
 800a75c:	2300      	movs	r3, #0
 800a75e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a762:	e053      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a764:	2304      	movs	r3, #4
 800a766:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a76a:	e04f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a76c:	2308      	movs	r3, #8
 800a76e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a772:	e04b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a774:	2310      	movs	r3, #16
 800a776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a77a:	e047      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a77c:	2320      	movs	r3, #32
 800a77e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a782:	e043      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a784:	2340      	movs	r3, #64	; 0x40
 800a786:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a78a:	e03f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a78c:	2380      	movs	r3, #128	; 0x80
 800a78e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a792:	bf00      	nop
 800a794:	e03a      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	4a43      	ldr	r2, [pc, #268]	; (800a8a8 <UART_SetConfig+0x66c>)
 800a79c:	4293      	cmp	r3, r2
 800a79e:	d132      	bne.n	800a806 <UART_SetConfig+0x5ca>
 800a7a0:	4b3e      	ldr	r3, [pc, #248]	; (800a89c <UART_SetConfig+0x660>)
 800a7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a4:	f003 0307 	and.w	r3, r3, #7
 800a7a8:	2b05      	cmp	r3, #5
 800a7aa:	d827      	bhi.n	800a7fc <UART_SetConfig+0x5c0>
 800a7ac:	a201      	add	r2, pc, #4	; (adr r2, 800a7b4 <UART_SetConfig+0x578>)
 800a7ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b2:	bf00      	nop
 800a7b4:	0800a7cd 	.word	0x0800a7cd
 800a7b8:	0800a7d5 	.word	0x0800a7d5
 800a7bc:	0800a7dd 	.word	0x0800a7dd
 800a7c0:	0800a7e5 	.word	0x0800a7e5
 800a7c4:	0800a7ed 	.word	0x0800a7ed
 800a7c8:	0800a7f5 	.word	0x0800a7f5
 800a7cc:	2302      	movs	r3, #2
 800a7ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7d2:	e01b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7d4:	2304      	movs	r3, #4
 800a7d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7da:	e017      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7dc:	2308      	movs	r3, #8
 800a7de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7e2:	e013      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7e4:	2310      	movs	r3, #16
 800a7e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7ea:	e00f      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7ec:	2320      	movs	r3, #32
 800a7ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7f2:	e00b      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7f4:	2340      	movs	r3, #64	; 0x40
 800a7f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a7fa:	e007      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a7fc:	2380      	movs	r3, #128	; 0x80
 800a7fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800a802:	bf00      	nop
 800a804:	e002      	b.n	800a80c <UART_SetConfig+0x5d0>
 800a806:	2380      	movs	r3, #128	; 0x80
 800a808:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	4a25      	ldr	r2, [pc, #148]	; (800a8a8 <UART_SetConfig+0x66c>)
 800a812:	4293      	cmp	r3, r2
 800a814:	f040 80b8 	bne.w	800a988 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a818:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a81c:	2b08      	cmp	r3, #8
 800a81e:	d019      	beq.n	800a854 <UART_SetConfig+0x618>
 800a820:	2b08      	cmp	r3, #8
 800a822:	dc04      	bgt.n	800a82e <UART_SetConfig+0x5f2>
 800a824:	2b02      	cmp	r3, #2
 800a826:	d009      	beq.n	800a83c <UART_SetConfig+0x600>
 800a828:	2b04      	cmp	r3, #4
 800a82a:	d00b      	beq.n	800a844 <UART_SetConfig+0x608>
 800a82c:	e042      	b.n	800a8b4 <UART_SetConfig+0x678>
 800a82e:	2b20      	cmp	r3, #32
 800a830:	d02b      	beq.n	800a88a <UART_SetConfig+0x64e>
 800a832:	2b40      	cmp	r3, #64	; 0x40
 800a834:	d02c      	beq.n	800a890 <UART_SetConfig+0x654>
 800a836:	2b10      	cmp	r3, #16
 800a838:	d014      	beq.n	800a864 <UART_SetConfig+0x628>
 800a83a:	e03b      	b.n	800a8b4 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a83c:	f7fc feb8 	bl	80075b0 <HAL_RCCEx_GetD3PCLK1Freq>
 800a840:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a842:	e03d      	b.n	800a8c0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a844:	f107 0314 	add.w	r3, r7, #20
 800a848:	4618      	mov	r0, r3
 800a84a:	f7fc fec7 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a84e:	69bb      	ldr	r3, [r7, #24]
 800a850:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a852:	e035      	b.n	800a8c0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a854:	f107 0308 	add.w	r3, r7, #8
 800a858:	4618      	mov	r0, r3
 800a85a:	f7fd f80b 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a862:	e02d      	b.n	800a8c0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a864:	4b0d      	ldr	r3, [pc, #52]	; (800a89c <UART_SetConfig+0x660>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	f003 0320 	and.w	r3, r3, #32
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d009      	beq.n	800a884 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a870:	4b0a      	ldr	r3, [pc, #40]	; (800a89c <UART_SetConfig+0x660>)
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	08db      	lsrs	r3, r3, #3
 800a876:	f003 0303 	and.w	r3, r3, #3
 800a87a:	4a0c      	ldr	r2, [pc, #48]	; (800a8ac <UART_SetConfig+0x670>)
 800a87c:	fa22 f303 	lsr.w	r3, r2, r3
 800a880:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a882:	e01d      	b.n	800a8c0 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 800a884:	4b09      	ldr	r3, [pc, #36]	; (800a8ac <UART_SetConfig+0x670>)
 800a886:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a888:	e01a      	b.n	800a8c0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a88a:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <UART_SetConfig+0x674>)
 800a88c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a88e:	e017      	b.n	800a8c0 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a890:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a894:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a896:	e013      	b.n	800a8c0 <UART_SetConfig+0x684>
 800a898:	40011400 	.word	0x40011400
 800a89c:	58024400 	.word	0x58024400
 800a8a0:	40007800 	.word	0x40007800
 800a8a4:	40007c00 	.word	0x40007c00
 800a8a8:	58000c00 	.word	0x58000c00
 800a8ac:	03d09000 	.word	0x03d09000
 800a8b0:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a8b8:	2301      	movs	r3, #1
 800a8ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a8be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	f000 824d 	beq.w	800ad62 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8cc:	4aad      	ldr	r2, [pc, #692]	; (800ab84 <UART_SetConfig+0x948>)
 800a8ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a8d2:	461a      	mov	r2, r3
 800a8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a8da:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	685a      	ldr	r2, [r3, #4]
 800a8e0:	4613      	mov	r3, r2
 800a8e2:	005b      	lsls	r3, r3, #1
 800a8e4:	4413      	add	r3, r2
 800a8e6:	6a3a      	ldr	r2, [r7, #32]
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d305      	bcc.n	800a8f8 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	685b      	ldr	r3, [r3, #4]
 800a8f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a8f2:	6a3a      	ldr	r2, [r7, #32]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d903      	bls.n	800a900 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 800a8f8:	2301      	movs	r3, #1
 800a8fa:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a8fe:	e230      	b.n	800ad62 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a902:	4618      	mov	r0, r3
 800a904:	f04f 0100 	mov.w	r1, #0
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a90c:	4a9d      	ldr	r2, [pc, #628]	; (800ab84 <UART_SetConfig+0x948>)
 800a90e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a912:	b29b      	uxth	r3, r3
 800a914:	f04f 0400 	mov.w	r4, #0
 800a918:	461a      	mov	r2, r3
 800a91a:	4623      	mov	r3, r4
 800a91c:	f7f5 fd38 	bl	8000390 <__aeabi_uldivmod>
 800a920:	4603      	mov	r3, r0
 800a922:	460c      	mov	r4, r1
 800a924:	4619      	mov	r1, r3
 800a926:	4622      	mov	r2, r4
 800a928:	f04f 0300 	mov.w	r3, #0
 800a92c:	f04f 0400 	mov.w	r4, #0
 800a930:	0214      	lsls	r4, r2, #8
 800a932:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a936:	020b      	lsls	r3, r1, #8
 800a938:	687a      	ldr	r2, [r7, #4]
 800a93a:	6852      	ldr	r2, [r2, #4]
 800a93c:	0852      	lsrs	r2, r2, #1
 800a93e:	4611      	mov	r1, r2
 800a940:	f04f 0200 	mov.w	r2, #0
 800a944:	eb13 0b01 	adds.w	fp, r3, r1
 800a948:	eb44 0c02 	adc.w	ip, r4, r2
 800a94c:	4658      	mov	r0, fp
 800a94e:	4661      	mov	r1, ip
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	f04f 0400 	mov.w	r4, #0
 800a958:	461a      	mov	r2, r3
 800a95a:	4623      	mov	r3, r4
 800a95c:	f7f5 fd18 	bl	8000390 <__aeabi_uldivmod>
 800a960:	4603      	mov	r3, r0
 800a962:	460c      	mov	r4, r1
 800a964:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a966:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a968:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a96c:	d308      	bcc.n	800a980 <UART_SetConfig+0x744>
 800a96e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a970:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a974:	d204      	bcs.n	800a980 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a97c:	60da      	str	r2, [r3, #12]
 800a97e:	e1f0      	b.n	800ad62 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a986:	e1ec      	b.n	800ad62 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	69db      	ldr	r3, [r3, #28]
 800a98c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a990:	f040 8100 	bne.w	800ab94 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 800a994:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a998:	2b40      	cmp	r3, #64	; 0x40
 800a99a:	f200 80b7 	bhi.w	800ab0c <UART_SetConfig+0x8d0>
 800a99e:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <UART_SetConfig+0x768>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800aaa9 	.word	0x0800aaa9
 800a9a8:	0800aab1 	.word	0x0800aab1
 800a9ac:	0800ab0d 	.word	0x0800ab0d
 800a9b0:	0800ab0d 	.word	0x0800ab0d
 800a9b4:	0800aab9 	.word	0x0800aab9
 800a9b8:	0800ab0d 	.word	0x0800ab0d
 800a9bc:	0800ab0d 	.word	0x0800ab0d
 800a9c0:	0800ab0d 	.word	0x0800ab0d
 800a9c4:	0800aac9 	.word	0x0800aac9
 800a9c8:	0800ab0d 	.word	0x0800ab0d
 800a9cc:	0800ab0d 	.word	0x0800ab0d
 800a9d0:	0800ab0d 	.word	0x0800ab0d
 800a9d4:	0800ab0d 	.word	0x0800ab0d
 800a9d8:	0800ab0d 	.word	0x0800ab0d
 800a9dc:	0800ab0d 	.word	0x0800ab0d
 800a9e0:	0800ab0d 	.word	0x0800ab0d
 800a9e4:	0800aad9 	.word	0x0800aad9
 800a9e8:	0800ab0d 	.word	0x0800ab0d
 800a9ec:	0800ab0d 	.word	0x0800ab0d
 800a9f0:	0800ab0d 	.word	0x0800ab0d
 800a9f4:	0800ab0d 	.word	0x0800ab0d
 800a9f8:	0800ab0d 	.word	0x0800ab0d
 800a9fc:	0800ab0d 	.word	0x0800ab0d
 800aa00:	0800ab0d 	.word	0x0800ab0d
 800aa04:	0800ab0d 	.word	0x0800ab0d
 800aa08:	0800ab0d 	.word	0x0800ab0d
 800aa0c:	0800ab0d 	.word	0x0800ab0d
 800aa10:	0800ab0d 	.word	0x0800ab0d
 800aa14:	0800ab0d 	.word	0x0800ab0d
 800aa18:	0800ab0d 	.word	0x0800ab0d
 800aa1c:	0800ab0d 	.word	0x0800ab0d
 800aa20:	0800ab0d 	.word	0x0800ab0d
 800aa24:	0800aaff 	.word	0x0800aaff
 800aa28:	0800ab0d 	.word	0x0800ab0d
 800aa2c:	0800ab0d 	.word	0x0800ab0d
 800aa30:	0800ab0d 	.word	0x0800ab0d
 800aa34:	0800ab0d 	.word	0x0800ab0d
 800aa38:	0800ab0d 	.word	0x0800ab0d
 800aa3c:	0800ab0d 	.word	0x0800ab0d
 800aa40:	0800ab0d 	.word	0x0800ab0d
 800aa44:	0800ab0d 	.word	0x0800ab0d
 800aa48:	0800ab0d 	.word	0x0800ab0d
 800aa4c:	0800ab0d 	.word	0x0800ab0d
 800aa50:	0800ab0d 	.word	0x0800ab0d
 800aa54:	0800ab0d 	.word	0x0800ab0d
 800aa58:	0800ab0d 	.word	0x0800ab0d
 800aa5c:	0800ab0d 	.word	0x0800ab0d
 800aa60:	0800ab0d 	.word	0x0800ab0d
 800aa64:	0800ab0d 	.word	0x0800ab0d
 800aa68:	0800ab0d 	.word	0x0800ab0d
 800aa6c:	0800ab0d 	.word	0x0800ab0d
 800aa70:	0800ab0d 	.word	0x0800ab0d
 800aa74:	0800ab0d 	.word	0x0800ab0d
 800aa78:	0800ab0d 	.word	0x0800ab0d
 800aa7c:	0800ab0d 	.word	0x0800ab0d
 800aa80:	0800ab0d 	.word	0x0800ab0d
 800aa84:	0800ab0d 	.word	0x0800ab0d
 800aa88:	0800ab0d 	.word	0x0800ab0d
 800aa8c:	0800ab0d 	.word	0x0800ab0d
 800aa90:	0800ab0d 	.word	0x0800ab0d
 800aa94:	0800ab0d 	.word	0x0800ab0d
 800aa98:	0800ab0d 	.word	0x0800ab0d
 800aa9c:	0800ab0d 	.word	0x0800ab0d
 800aaa0:	0800ab0d 	.word	0x0800ab0d
 800aaa4:	0800ab05 	.word	0x0800ab05
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aaa8:	f7fb fbd4 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 800aaac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aaae:	e033      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800aab0:	f7fb fbe6 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 800aab4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800aab6:	e02f      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800aab8:	f107 0314 	add.w	r3, r7, #20
 800aabc:	4618      	mov	r0, r3
 800aabe:	f7fc fd8d 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800aac2:	69bb      	ldr	r3, [r7, #24]
 800aac4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aac6:	e027      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800aac8:	f107 0308 	add.w	r3, r7, #8
 800aacc:	4618      	mov	r0, r3
 800aace:	f7fc fed1 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aad6:	e01f      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aad8:	4b2b      	ldr	r3, [pc, #172]	; (800ab88 <UART_SetConfig+0x94c>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f003 0320 	and.w	r3, r3, #32
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d009      	beq.n	800aaf8 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800aae4:	4b28      	ldr	r3, [pc, #160]	; (800ab88 <UART_SetConfig+0x94c>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	08db      	lsrs	r3, r3, #3
 800aaea:	f003 0303 	and.w	r3, r3, #3
 800aaee:	4a27      	ldr	r2, [pc, #156]	; (800ab8c <UART_SetConfig+0x950>)
 800aaf0:	fa22 f303 	lsr.w	r3, r2, r3
 800aaf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800aaf6:	e00f      	b.n	800ab18 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800aaf8:	4b24      	ldr	r3, [pc, #144]	; (800ab8c <UART_SetConfig+0x950>)
 800aafa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800aafc:	e00c      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800aafe:	4b24      	ldr	r3, [pc, #144]	; (800ab90 <UART_SetConfig+0x954>)
 800ab00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab02:	e009      	b.n	800ab18 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ab04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ab08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ab0a:	e005      	b.n	800ab18 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ab10:	2301      	movs	r3, #1
 800ab12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ab16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	f000 8121 	beq.w	800ad62 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab24:	4a17      	ldr	r2, [pc, #92]	; (800ab84 <UART_SetConfig+0x948>)
 800ab26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab32:	005a      	lsls	r2, r3, #1
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	085b      	lsrs	r3, r3, #1
 800ab3a:	441a      	add	r2, r3
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ab44:	b29b      	uxth	r3, r3
 800ab46:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	2b0f      	cmp	r3, #15
 800ab4c:	d916      	bls.n	800ab7c <UART_SetConfig+0x940>
 800ab4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab54:	d212      	bcs.n	800ab7c <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ab56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	f023 030f 	bic.w	r3, r3, #15
 800ab5e:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ab60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab62:	085b      	lsrs	r3, r3, #1
 800ab64:	b29b      	uxth	r3, r3
 800ab66:	f003 0307 	and.w	r3, r3, #7
 800ab6a:	b29a      	uxth	r2, r3
 800ab6c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ab6e:	4313      	orrs	r3, r2
 800ab70:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ab78:	60da      	str	r2, [r3, #12]
 800ab7a:	e0f2      	b.n	800ad62 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ab7c:	2301      	movs	r3, #1
 800ab7e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800ab82:	e0ee      	b.n	800ad62 <UART_SetConfig+0xb26>
 800ab84:	080140b0 	.word	0x080140b0
 800ab88:	58024400 	.word	0x58024400
 800ab8c:	03d09000 	.word	0x03d09000
 800ab90:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800ab94:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab98:	2b40      	cmp	r3, #64	; 0x40
 800ab9a:	f200 80b7 	bhi.w	800ad0c <UART_SetConfig+0xad0>
 800ab9e:	a201      	add	r2, pc, #4	; (adr r2, 800aba4 <UART_SetConfig+0x968>)
 800aba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aba4:	0800aca9 	.word	0x0800aca9
 800aba8:	0800acb1 	.word	0x0800acb1
 800abac:	0800ad0d 	.word	0x0800ad0d
 800abb0:	0800ad0d 	.word	0x0800ad0d
 800abb4:	0800acb9 	.word	0x0800acb9
 800abb8:	0800ad0d 	.word	0x0800ad0d
 800abbc:	0800ad0d 	.word	0x0800ad0d
 800abc0:	0800ad0d 	.word	0x0800ad0d
 800abc4:	0800acc9 	.word	0x0800acc9
 800abc8:	0800ad0d 	.word	0x0800ad0d
 800abcc:	0800ad0d 	.word	0x0800ad0d
 800abd0:	0800ad0d 	.word	0x0800ad0d
 800abd4:	0800ad0d 	.word	0x0800ad0d
 800abd8:	0800ad0d 	.word	0x0800ad0d
 800abdc:	0800ad0d 	.word	0x0800ad0d
 800abe0:	0800ad0d 	.word	0x0800ad0d
 800abe4:	0800acd9 	.word	0x0800acd9
 800abe8:	0800ad0d 	.word	0x0800ad0d
 800abec:	0800ad0d 	.word	0x0800ad0d
 800abf0:	0800ad0d 	.word	0x0800ad0d
 800abf4:	0800ad0d 	.word	0x0800ad0d
 800abf8:	0800ad0d 	.word	0x0800ad0d
 800abfc:	0800ad0d 	.word	0x0800ad0d
 800ac00:	0800ad0d 	.word	0x0800ad0d
 800ac04:	0800ad0d 	.word	0x0800ad0d
 800ac08:	0800ad0d 	.word	0x0800ad0d
 800ac0c:	0800ad0d 	.word	0x0800ad0d
 800ac10:	0800ad0d 	.word	0x0800ad0d
 800ac14:	0800ad0d 	.word	0x0800ad0d
 800ac18:	0800ad0d 	.word	0x0800ad0d
 800ac1c:	0800ad0d 	.word	0x0800ad0d
 800ac20:	0800ad0d 	.word	0x0800ad0d
 800ac24:	0800acff 	.word	0x0800acff
 800ac28:	0800ad0d 	.word	0x0800ad0d
 800ac2c:	0800ad0d 	.word	0x0800ad0d
 800ac30:	0800ad0d 	.word	0x0800ad0d
 800ac34:	0800ad0d 	.word	0x0800ad0d
 800ac38:	0800ad0d 	.word	0x0800ad0d
 800ac3c:	0800ad0d 	.word	0x0800ad0d
 800ac40:	0800ad0d 	.word	0x0800ad0d
 800ac44:	0800ad0d 	.word	0x0800ad0d
 800ac48:	0800ad0d 	.word	0x0800ad0d
 800ac4c:	0800ad0d 	.word	0x0800ad0d
 800ac50:	0800ad0d 	.word	0x0800ad0d
 800ac54:	0800ad0d 	.word	0x0800ad0d
 800ac58:	0800ad0d 	.word	0x0800ad0d
 800ac5c:	0800ad0d 	.word	0x0800ad0d
 800ac60:	0800ad0d 	.word	0x0800ad0d
 800ac64:	0800ad0d 	.word	0x0800ad0d
 800ac68:	0800ad0d 	.word	0x0800ad0d
 800ac6c:	0800ad0d 	.word	0x0800ad0d
 800ac70:	0800ad0d 	.word	0x0800ad0d
 800ac74:	0800ad0d 	.word	0x0800ad0d
 800ac78:	0800ad0d 	.word	0x0800ad0d
 800ac7c:	0800ad0d 	.word	0x0800ad0d
 800ac80:	0800ad0d 	.word	0x0800ad0d
 800ac84:	0800ad0d 	.word	0x0800ad0d
 800ac88:	0800ad0d 	.word	0x0800ad0d
 800ac8c:	0800ad0d 	.word	0x0800ad0d
 800ac90:	0800ad0d 	.word	0x0800ad0d
 800ac94:	0800ad0d 	.word	0x0800ad0d
 800ac98:	0800ad0d 	.word	0x0800ad0d
 800ac9c:	0800ad0d 	.word	0x0800ad0d
 800aca0:	0800ad0d 	.word	0x0800ad0d
 800aca4:	0800ad05 	.word	0x0800ad05
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aca8:	f7fb fad4 	bl	8006254 <HAL_RCC_GetPCLK1Freq>
 800acac:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acae:	e033      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800acb0:	f7fb fae6 	bl	8006280 <HAL_RCC_GetPCLK2Freq>
 800acb4:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800acb6:	e02f      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb8:	f107 0314 	add.w	r3, r7, #20
 800acbc:	4618      	mov	r0, r3
 800acbe:	f7fc fc8d 	bl	80075dc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acc6:	e027      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acc8:	f107 0308 	add.w	r3, r7, #8
 800accc:	4618      	mov	r0, r3
 800acce:	f7fc fdd1 	bl	8007874 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acd6:	e01f      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acd8:	4b2c      	ldr	r3, [pc, #176]	; (800ad8c <UART_SetConfig+0xb50>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f003 0320 	and.w	r3, r3, #32
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d009      	beq.n	800acf8 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ace4:	4b29      	ldr	r3, [pc, #164]	; (800ad8c <UART_SetConfig+0xb50>)
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	08db      	lsrs	r3, r3, #3
 800acea:	f003 0303 	and.w	r3, r3, #3
 800acee:	4a28      	ldr	r2, [pc, #160]	; (800ad90 <UART_SetConfig+0xb54>)
 800acf0:	fa22 f303 	lsr.w	r3, r2, r3
 800acf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800acf6:	e00f      	b.n	800ad18 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800acf8:	4b25      	ldr	r3, [pc, #148]	; (800ad90 <UART_SetConfig+0xb54>)
 800acfa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800acfc:	e00c      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800acfe:	4b25      	ldr	r3, [pc, #148]	; (800ad94 <UART_SetConfig+0xb58>)
 800ad00:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad02:	e009      	b.n	800ad18 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ad04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ad08:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800ad0a:	e005      	b.n	800ad18 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800ad10:	2301      	movs	r3, #1
 800ad12:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800ad16:	bf00      	nop
    }

    if (pclk != 0U)
 800ad18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d021      	beq.n	800ad62 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad22:	4a1d      	ldr	r2, [pc, #116]	; (800ad98 <UART_SetConfig+0xb5c>)
 800ad24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad28:	461a      	mov	r2, r3
 800ad2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad2c:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	085b      	lsrs	r3, r3, #1
 800ad36:	441a      	add	r2, r3
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	685b      	ldr	r3, [r3, #4]
 800ad3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad40:	b29b      	uxth	r3, r3
 800ad42:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad46:	2b0f      	cmp	r3, #15
 800ad48:	d908      	bls.n	800ad5c <UART_SetConfig+0xb20>
 800ad4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad50:	d204      	bcs.n	800ad5c <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ad58:	60da      	str	r2, [r3, #12]
 800ad5a:	e002      	b.n	800ad62 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800ad7e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800ad82:	4618      	mov	r0, r3
 800ad84:	3738      	adds	r7, #56	; 0x38
 800ad86:	46bd      	mov	sp, r7
 800ad88:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800ad8c:	58024400 	.word	0x58024400
 800ad90:	03d09000 	.word	0x03d09000
 800ad94:	003d0900 	.word	0x003d0900
 800ad98:	080140b0 	.word	0x080140b0

0800ad9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ad9c:	b480      	push	{r7}
 800ad9e:	b083      	sub	sp, #12
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ada8:	f003 0301 	and.w	r3, r3, #1
 800adac:	2b00      	cmp	r3, #0
 800adae:	d00a      	beq.n	800adc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	430a      	orrs	r2, r1
 800adc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adca:	f003 0302 	and.w	r3, r3, #2
 800adce:	2b00      	cmp	r3, #0
 800add0:	d00a      	beq.n	800ade8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	685b      	ldr	r3, [r3, #4]
 800add8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	430a      	orrs	r2, r1
 800ade6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800adec:	f003 0304 	and.w	r3, r3, #4
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d00a      	beq.n	800ae0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	685b      	ldr	r3, [r3, #4]
 800adfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	430a      	orrs	r2, r1
 800ae08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0e:	f003 0308 	and.w	r3, r3, #8
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d00a      	beq.n	800ae2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	685b      	ldr	r3, [r3, #4]
 800ae1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	430a      	orrs	r2, r1
 800ae2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae30:	f003 0310 	and.w	r3, r3, #16
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d00a      	beq.n	800ae4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	689b      	ldr	r3, [r3, #8]
 800ae3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	430a      	orrs	r2, r1
 800ae4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae52:	f003 0320 	and.w	r3, r3, #32
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d00a      	beq.n	800ae70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	689b      	ldr	r3, [r3, #8]
 800ae60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	430a      	orrs	r2, r1
 800ae6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	d01a      	beq.n	800aeb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ae96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ae9a:	d10a      	bne.n	800aeb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	685b      	ldr	r3, [r3, #4]
 800aec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	605a      	str	r2, [r3, #4]
  }
}
 800aed4:	bf00      	nop
 800aed6:	370c      	adds	r7, #12
 800aed8:	46bd      	mov	sp, r7
 800aeda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aede:	4770      	bx	lr

0800aee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b086      	sub	sp, #24
 800aee4:	af02      	add	r7, sp, #8
 800aee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	2200      	movs	r2, #0
 800aeec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800aef0:	f7f6 fc8e 	bl	8001810 <HAL_GetTick>
 800aef4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	f003 0308 	and.w	r3, r3, #8
 800af00:	2b08      	cmp	r3, #8
 800af02:	d10e      	bne.n	800af22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af08:	9300      	str	r3, [sp, #0]
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f82c 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af1e:	2303      	movs	r3, #3
 800af20:	e022      	b.n	800af68 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	f003 0304 	and.w	r3, r3, #4
 800af2c:	2b04      	cmp	r3, #4
 800af2e:	d10e      	bne.n	800af4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af34:	9300      	str	r3, [sp, #0]
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2200      	movs	r2, #0
 800af3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800af3e:	6878      	ldr	r0, [r7, #4]
 800af40:	f000 f816 	bl	800af70 <UART_WaitOnFlagUntilTimeout>
 800af44:	4603      	mov	r3, r0
 800af46:	2b00      	cmp	r3, #0
 800af48:	d001      	beq.n	800af4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af4a:	2303      	movs	r3, #3
 800af4c:	e00c      	b.n	800af68 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2220      	movs	r2, #32
 800af5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3710      	adds	r7, #16
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800af70:	b580      	push	{r7, lr}
 800af72:	b084      	sub	sp, #16
 800af74:	af00      	add	r7, sp, #0
 800af76:	60f8      	str	r0, [r7, #12]
 800af78:	60b9      	str	r1, [r7, #8]
 800af7a:	603b      	str	r3, [r7, #0]
 800af7c:	4613      	mov	r3, r2
 800af7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800af80:	e062      	b.n	800b048 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af82:	69bb      	ldr	r3, [r7, #24]
 800af84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af88:	d05e      	beq.n	800b048 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af8a:	f7f6 fc41 	bl	8001810 <HAL_GetTick>
 800af8e:	4602      	mov	r2, r0
 800af90:	683b      	ldr	r3, [r7, #0]
 800af92:	1ad3      	subs	r3, r2, r3
 800af94:	69ba      	ldr	r2, [r7, #24]
 800af96:	429a      	cmp	r2, r3
 800af98:	d302      	bcc.n	800afa0 <UART_WaitOnFlagUntilTimeout+0x30>
 800af9a:	69bb      	ldr	r3, [r7, #24]
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d11d      	bne.n	800afdc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800afa0:	68fb      	ldr	r3, [r7, #12]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	681a      	ldr	r2, [r3, #0]
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800afae:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	689a      	ldr	r2, [r3, #8]
 800afb6:	68fb      	ldr	r3, [r7, #12]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0201 	bic.w	r2, r2, #1
 800afbe:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	2220      	movs	r2, #32
 800afc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2220      	movs	r2, #32
 800afcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800afd8:	2303      	movs	r3, #3
 800afda:	e045      	b.n	800b068 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	f003 0304 	and.w	r3, r3, #4
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d02e      	beq.n	800b048 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	69db      	ldr	r3, [r3, #28]
 800aff0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aff4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aff8:	d126      	bne.n	800b048 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b002:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	681a      	ldr	r2, [r3, #0]
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b012:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	689a      	ldr	r2, [r3, #8]
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f022 0201 	bic.w	r2, r2, #1
 800b022:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	2220      	movs	r2, #32
 800b028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	2220      	movs	r2, #32
 800b030:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	2220      	movs	r2, #32
 800b038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	2200      	movs	r2, #0
 800b040:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800b044:	2303      	movs	r3, #3
 800b046:	e00f      	b.n	800b068 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	69da      	ldr	r2, [r3, #28]
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	4013      	ands	r3, r2
 800b052:	68ba      	ldr	r2, [r7, #8]
 800b054:	429a      	cmp	r2, r3
 800b056:	bf0c      	ite	eq
 800b058:	2301      	moveq	r3, #1
 800b05a:	2300      	movne	r3, #0
 800b05c:	b2db      	uxtb	r3, r3
 800b05e:	461a      	mov	r2, r3
 800b060:	79fb      	ldrb	r3, [r7, #7]
 800b062:	429a      	cmp	r2, r3
 800b064:	d08d      	beq.n	800af82 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b066:	2300      	movs	r3, #0
}
 800b068:	4618      	mov	r0, r3
 800b06a:	3710      	adds	r7, #16
 800b06c:	46bd      	mov	sp, r7
 800b06e:	bd80      	pop	{r7, pc}

0800b070 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b070:	b480      	push	{r7}
 800b072:	b085      	sub	sp, #20
 800b074:	af00      	add	r7, sp, #0
 800b076:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b07e:	2b01      	cmp	r3, #1
 800b080:	d101      	bne.n	800b086 <HAL_UARTEx_DisableFifoMode+0x16>
 800b082:	2302      	movs	r3, #2
 800b084:	e027      	b.n	800b0d6 <HAL_UARTEx_DisableFifoMode+0x66>
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2201      	movs	r2, #1
 800b08a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2224      	movs	r2, #36	; 0x24
 800b092:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	681a      	ldr	r2, [r3, #0]
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	f022 0201 	bic.w	r2, r2, #1
 800b0ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b0b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2200      	movs	r2, #0
 800b0ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	68fa      	ldr	r2, [r7, #12]
 800b0c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b084      	sub	sp, #16
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d101      	bne.n	800b0fa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b0f6:	2302      	movs	r3, #2
 800b0f8:	e02d      	b.n	800b156 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2201      	movs	r2, #1
 800b0fe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	2224      	movs	r2, #36	; 0x24
 800b106:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	681a      	ldr	r2, [r3, #0]
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	f022 0201 	bic.w	r2, r2, #1
 800b120:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	689b      	ldr	r3, [r3, #8]
 800b128:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	683a      	ldr	r2, [r7, #0]
 800b132:	430a      	orrs	r2, r1
 800b134:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b136:	6878      	ldr	r0, [r7, #4]
 800b138:	f000 f850 	bl	800b1dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68fa      	ldr	r2, [r7, #12]
 800b142:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2220      	movs	r2, #32
 800b148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	2200      	movs	r2, #0
 800b150:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b154:	2300      	movs	r3, #0
}
 800b156:	4618      	mov	r0, r3
 800b158:	3710      	adds	r7, #16
 800b15a:	46bd      	mov	sp, r7
 800b15c:	bd80      	pop	{r7, pc}

0800b15e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b15e:	b580      	push	{r7, lr}
 800b160:	b084      	sub	sp, #16
 800b162:	af00      	add	r7, sp, #0
 800b164:	6078      	str	r0, [r7, #4]
 800b166:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d101      	bne.n	800b176 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b172:	2302      	movs	r3, #2
 800b174:	e02d      	b.n	800b1d2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	2201      	movs	r2, #1
 800b17a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	2224      	movs	r2, #36	; 0x24
 800b182:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	681a      	ldr	r2, [r3, #0]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f022 0201 	bic.w	r2, r2, #1
 800b19c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	681b      	ldr	r3, [r3, #0]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	430a      	orrs	r2, r1
 800b1b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b1b2:	6878      	ldr	r0, [r7, #4]
 800b1b4:	f000 f812 	bl	800b1dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	2220      	movs	r2, #32
 800b1c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800b1d0:	2300      	movs	r3, #0
}
 800b1d2:	4618      	mov	r0, r3
 800b1d4:	3710      	adds	r7, #16
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	bd80      	pop	{r7, pc}
	...

0800b1dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b089      	sub	sp, #36	; 0x24
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800b1e4:	4a2f      	ldr	r2, [pc, #188]	; (800b2a4 <UARTEx_SetNbDataToProcess+0xc8>)
 800b1e6:	f107 0314 	add.w	r3, r7, #20
 800b1ea:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1ee:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800b1f2:	4a2d      	ldr	r2, [pc, #180]	; (800b2a8 <UARTEx_SetNbDataToProcess+0xcc>)
 800b1f4:	f107 030c 	add.w	r3, r7, #12
 800b1f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b1fc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b204:	2b00      	cmp	r3, #0
 800b206:	d108      	bne.n	800b21a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	2201      	movs	r2, #1
 800b20c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	2201      	movs	r2, #1
 800b214:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b218:	e03d      	b.n	800b296 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b21a:	2310      	movs	r3, #16
 800b21c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b21e:	2310      	movs	r3, #16
 800b220:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	0e5b      	lsrs	r3, r3, #25
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	f003 0307 	and.w	r3, r3, #7
 800b230:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	689b      	ldr	r3, [r3, #8]
 800b238:	0f5b      	lsrs	r3, r3, #29
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800b242:	7fbb      	ldrb	r3, [r7, #30]
 800b244:	7f3a      	ldrb	r2, [r7, #28]
 800b246:	f107 0120 	add.w	r1, r7, #32
 800b24a:	440a      	add	r2, r1
 800b24c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b250:	fb02 f303 	mul.w	r3, r2, r3
 800b254:	7f3a      	ldrb	r2, [r7, #28]
 800b256:	f107 0120 	add.w	r1, r7, #32
 800b25a:	440a      	add	r2, r1
 800b25c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b260:	fb93 f3f2 	sdiv	r3, r3, r2
 800b264:	b29a      	uxth	r2, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800b26c:	7ffb      	ldrb	r3, [r7, #31]
 800b26e:	7f7a      	ldrb	r2, [r7, #29]
 800b270:	f107 0120 	add.w	r1, r7, #32
 800b274:	440a      	add	r2, r1
 800b276:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800b27a:	fb02 f303 	mul.w	r3, r2, r3
 800b27e:	7f7a      	ldrb	r2, [r7, #29]
 800b280:	f107 0120 	add.w	r1, r7, #32
 800b284:	440a      	add	r2, r1
 800b286:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800b28a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b28e:	b29a      	uxth	r2, r3
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b296:	bf00      	nop
 800b298:	3724      	adds	r7, #36	; 0x24
 800b29a:	46bd      	mov	sp, r7
 800b29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a0:	4770      	bx	lr
 800b2a2:	bf00      	nop
 800b2a4:	08014000 	.word	0x08014000
 800b2a8:	08014008 	.word	0x08014008

0800b2ac <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800b2ac:	b084      	sub	sp, #16
 800b2ae:	b480      	push	{r7}
 800b2b0:	b085      	sub	sp, #20
 800b2b2:	af00      	add	r7, sp, #0
 800b2b4:	6078      	str	r0, [r7, #4]
 800b2b6:	f107 001c 	add.w	r0, r7, #28
 800b2ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800b2c2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800b2c6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800b2ca:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800b2cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800b2ce:	431a      	orrs	r2, r3
             Init.ClockDiv
 800b2d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800b2d2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800b2d4:	68fa      	ldr	r2, [r7, #12]
 800b2d6:	4313      	orrs	r3, r2
 800b2d8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685a      	ldr	r2, [r3, #4]
 800b2de:	4b07      	ldr	r3, [pc, #28]	; (800b2fc <SDMMC_Init+0x50>)
 800b2e0:	4013      	ands	r3, r2
 800b2e2:	68fa      	ldr	r2, [r7, #12]
 800b2e4:	431a      	orrs	r2, r3
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800b2ea:	2300      	movs	r3, #0
}
 800b2ec:	4618      	mov	r0, r3
 800b2ee:	3714      	adds	r7, #20
 800b2f0:	46bd      	mov	sp, r7
 800b2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f6:	b004      	add	sp, #16
 800b2f8:	4770      	bx	lr
 800b2fa:	bf00      	nop
 800b2fc:	ffc02c00 	.word	0xffc02c00

0800b300 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800b300:	b480      	push	{r7}
 800b302:	b083      	sub	sp, #12
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800b30e:	4618      	mov	r0, r3
 800b310:	370c      	adds	r7, #12
 800b312:	46bd      	mov	sp, r7
 800b314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b318:	4770      	bx	lr

0800b31a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800b31a:	b480      	push	{r7}
 800b31c:	b083      	sub	sp, #12
 800b31e:	af00      	add	r7, sp, #0
 800b320:	6078      	str	r0, [r7, #4]
 800b322:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800b324:	683b      	ldr	r3, [r7, #0]
 800b326:	681a      	ldr	r2, [r3, #0]
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b32e:	2300      	movs	r3, #0
}
 800b330:	4618      	mov	r0, r3
 800b332:	370c      	adds	r7, #12
 800b334:	46bd      	mov	sp, r7
 800b336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b33a:	4770      	bx	lr

0800b33c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b083      	sub	sp, #12
 800b340:	af00      	add	r7, sp, #0
 800b342:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f043 0203 	orr.w	r2, r3, #3
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800b350:	2300      	movs	r3, #0
}
 800b352:	4618      	mov	r0, r3
 800b354:	370c      	adds	r7, #12
 800b356:	46bd      	mov	sp, r7
 800b358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b35c:	4770      	bx	lr

0800b35e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800b35e:	b480      	push	{r7}
 800b360:	b083      	sub	sp, #12
 800b362:	af00      	add	r7, sp, #0
 800b364:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f003 0303 	and.w	r3, r3, #3
}
 800b36e:	4618      	mov	r0, r3
 800b370:	370c      	adds	r7, #12
 800b372:	46bd      	mov	sp, r7
 800b374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b378:	4770      	bx	lr
	...

0800b37c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b085      	sub	sp, #20
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
 800b384:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b386:	2300      	movs	r3, #0
 800b388:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800b38a:	683b      	ldr	r3, [r7, #0]
 800b38c:	681a      	ldr	r2, [r3, #0]
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b39a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800b39c:	683b      	ldr	r3, [r7, #0]
 800b39e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800b3a0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800b3a2:	683b      	ldr	r3, [r7, #0]
 800b3a4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800b3a6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800b3a8:	68fa      	ldr	r2, [r7, #12]
 800b3aa:	4313      	orrs	r3, r2
 800b3ac:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	68da      	ldr	r2, [r3, #12]
 800b3b2:	4b06      	ldr	r3, [pc, #24]	; (800b3cc <SDMMC_SendCommand+0x50>)
 800b3b4:	4013      	ands	r3, r2
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b3be:	2300      	movs	r3, #0
}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	fffee0c0 	.word	0xfffee0c0

0800b3d0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800b3d0:	b480      	push	{r7}
 800b3d2:	b083      	sub	sp, #12
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	691b      	ldr	r3, [r3, #16]
 800b3dc:	b2db      	uxtb	r3, r3
}
 800b3de:	4618      	mov	r0, r3
 800b3e0:	370c      	adds	r7, #12
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e8:	4770      	bx	lr

0800b3ea <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800b3ea:	b480      	push	{r7}
 800b3ec:	b085      	sub	sp, #20
 800b3ee:	af00      	add	r7, sp, #0
 800b3f0:	6078      	str	r0, [r7, #4]
 800b3f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	3314      	adds	r3, #20
 800b3f8:	461a      	mov	r2, r3
 800b3fa:	683b      	ldr	r3, [r7, #0]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	681b      	ldr	r3, [r3, #0]
}
 800b404:	4618      	mov	r0, r3
 800b406:	3714      	adds	r7, #20
 800b408:	46bd      	mov	sp, r7
 800b40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b40e:	4770      	bx	lr

0800b410 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800b410:	b480      	push	{r7}
 800b412:	b085      	sub	sp, #20
 800b414:	af00      	add	r7, sp, #0
 800b416:	6078      	str	r0, [r7, #4]
 800b418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800b41a:	2300      	movs	r3, #0
 800b41c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800b41e:	683b      	ldr	r3, [r7, #0]
 800b420:	681a      	ldr	r2, [r3, #0]
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800b426:	683b      	ldr	r3, [r7, #0]
 800b428:	685a      	ldr	r2, [r3, #4]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b436:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800b43c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800b442:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800b444:	68fa      	ldr	r2, [r7, #12]
 800b446:	4313      	orrs	r3, r2
 800b448:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b44e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	431a      	orrs	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800b45a:	2300      	movs	r3, #0

}
 800b45c:	4618      	mov	r0, r3
 800b45e:	3714      	adds	r7, #20
 800b460:	46bd      	mov	sp, r7
 800b462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b466:	4770      	bx	lr

0800b468 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800b468:	b580      	push	{r7, lr}
 800b46a:	b088      	sub	sp, #32
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	6078      	str	r0, [r7, #4]
 800b470:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800b476:	2310      	movs	r3, #16
 800b478:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b47a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b47e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b480:	2300      	movs	r3, #0
 800b482:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b488:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b48a:	f107 0308 	add.w	r3, r7, #8
 800b48e:	4619      	mov	r1, r3
 800b490:	6878      	ldr	r0, [r7, #4]
 800b492:	f7ff ff73 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800b496:	f241 3288 	movw	r2, #5000	; 0x1388
 800b49a:	2110      	movs	r1, #16
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f000 faaf 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b4a2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4a4:	69fb      	ldr	r3, [r7, #28]
}
 800b4a6:	4618      	mov	r0, r3
 800b4a8:	3720      	adds	r7, #32
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}

0800b4ae <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4ae:	b580      	push	{r7, lr}
 800b4b0:	b088      	sub	sp, #32
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4b8:	683b      	ldr	r3, [r7, #0]
 800b4ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800b4bc:	2311      	movs	r3, #17
 800b4be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b4c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b4c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b4ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b4d0:	f107 0308 	add.w	r3, r7, #8
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	6878      	ldr	r0, [r7, #4]
 800b4d8:	f7ff ff50 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b4dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e0:	2111      	movs	r1, #17
 800b4e2:	6878      	ldr	r0, [r7, #4]
 800b4e4:	f000 fa8c 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b4e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b4ea:	69fb      	ldr	r3, [r7, #28]
}
 800b4ec:	4618      	mov	r0, r3
 800b4ee:	3720      	adds	r7, #32
 800b4f0:	46bd      	mov	sp, r7
 800b4f2:	bd80      	pop	{r7, pc}

0800b4f4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b088      	sub	sp, #32
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
 800b4fc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800b4fe:	683b      	ldr	r3, [r7, #0]
 800b500:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800b502:	2312      	movs	r3, #18
 800b504:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b506:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b50a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b50c:	2300      	movs	r3, #0
 800b50e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b510:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b514:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b516:	f107 0308 	add.w	r3, r7, #8
 800b51a:	4619      	mov	r1, r3
 800b51c:	6878      	ldr	r0, [r7, #4]
 800b51e:	f7ff ff2d 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b522:	f241 3288 	movw	r2, #5000	; 0x1388
 800b526:	2112      	movs	r1, #18
 800b528:	6878      	ldr	r0, [r7, #4]
 800b52a:	f000 fa69 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b52e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b530:	69fb      	ldr	r3, [r7, #28]
}
 800b532:	4618      	mov	r0, r3
 800b534:	3720      	adds	r7, #32
 800b536:	46bd      	mov	sp, r7
 800b538:	bd80      	pop	{r7, pc}

0800b53a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b53a:	b580      	push	{r7, lr}
 800b53c:	b088      	sub	sp, #32
 800b53e:	af00      	add	r7, sp, #0
 800b540:	6078      	str	r0, [r7, #4]
 800b542:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800b548:	2318      	movs	r3, #24
 800b54a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b54c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b550:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b552:	2300      	movs	r3, #0
 800b554:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b55a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b55c:	f107 0308 	add.w	r3, r7, #8
 800b560:	4619      	mov	r1, r3
 800b562:	6878      	ldr	r0, [r7, #4]
 800b564:	f7ff ff0a 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800b568:	f241 3288 	movw	r2, #5000	; 0x1388
 800b56c:	2118      	movs	r1, #24
 800b56e:	6878      	ldr	r0, [r7, #4]
 800b570:	f000 fa46 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b574:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b576:	69fb      	ldr	r3, [r7, #28]
}
 800b578:	4618      	mov	r0, r3
 800b57a:	3720      	adds	r7, #32
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800b580:	b580      	push	{r7, lr}
 800b582:	b088      	sub	sp, #32
 800b584:	af00      	add	r7, sp, #0
 800b586:	6078      	str	r0, [r7, #4]
 800b588:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800b58e:	2319      	movs	r3, #25
 800b590:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b592:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b596:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b598:	2300      	movs	r3, #0
 800b59a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b59c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5a0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b5a2:	f107 0308 	add.w	r3, r7, #8
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f7ff fee7 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800b5ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b2:	2119      	movs	r1, #25
 800b5b4:	6878      	ldr	r0, [r7, #4]
 800b5b6:	f000 fa23 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b5ba:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b5bc:	69fb      	ldr	r3, [r7, #28]
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	3720      	adds	r7, #32
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd80      	pop	{r7, pc}
	...

0800b5c8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800b5c8:	b580      	push	{r7, lr}
 800b5ca:	b088      	sub	sp, #32
 800b5cc:	af00      	add	r7, sp, #0
 800b5ce:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800b5d4:	230c      	movs	r3, #12
 800b5d6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b5d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5dc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b5e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b5e6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	68db      	ldr	r3, [r3, #12]
 800b5ec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	68db      	ldr	r3, [r3, #12]
 800b5f8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b600:	f107 0308 	add.w	r3, r7, #8
 800b604:	4619      	mov	r1, r3
 800b606:	6878      	ldr	r0, [r7, #4]
 800b608:	f7ff feb8 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800b60c:	4a0b      	ldr	r2, [pc, #44]	; (800b63c <SDMMC_CmdStopTransfer+0x74>)
 800b60e:	210c      	movs	r1, #12
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 f9f5 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b616:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68db      	ldr	r3, [r3, #12]
 800b61c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800b624:	69fb      	ldr	r3, [r7, #28]
 800b626:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b62a:	d101      	bne.n	800b630 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800b630:	69fb      	ldr	r3, [r7, #28]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3720      	adds	r7, #32
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}
 800b63a:	bf00      	nop
 800b63c:	05f5e100 	.word	0x05f5e100

0800b640 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b08a      	sub	sp, #40	; 0x28
 800b644:	af00      	add	r7, sp, #0
 800b646:	60f8      	str	r0, [r7, #12]
 800b648:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800b64c:	683b      	ldr	r3, [r7, #0]
 800b64e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800b650:	2307      	movs	r3, #7
 800b652:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b654:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b658:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b65a:	2300      	movs	r3, #0
 800b65c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b65e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b662:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b664:	f107 0310 	add.w	r3, r7, #16
 800b668:	4619      	mov	r1, r3
 800b66a:	68f8      	ldr	r0, [r7, #12]
 800b66c:	f7ff fe86 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800b670:	f241 3288 	movw	r2, #5000	; 0x1388
 800b674:	2107      	movs	r1, #7
 800b676:	68f8      	ldr	r0, [r7, #12]
 800b678:	f000 f9c2 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b67c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800b67e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b680:	4618      	mov	r0, r3
 800b682:	3728      	adds	r7, #40	; 0x28
 800b684:	46bd      	mov	sp, r7
 800b686:	bd80      	pop	{r7, pc}

0800b688 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b690:	2300      	movs	r3, #0
 800b692:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800b694:	2300      	movs	r3, #0
 800b696:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800b698:	2300      	movs	r3, #0
 800b69a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b69c:	2300      	movs	r3, #0
 800b69e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6a4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6a6:	f107 0308 	add.w	r3, r7, #8
 800b6aa:	4619      	mov	r1, r3
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f7ff fe65 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800b6b2:	6878      	ldr	r0, [r7, #4]
 800b6b4:	f000 f976 	bl	800b9a4 <SDMMC_GetCmdError>
 800b6b8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6ba:	69fb      	ldr	r3, [r7, #28]
}
 800b6bc:	4618      	mov	r0, r3
 800b6be:	3720      	adds	r7, #32
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	bd80      	pop	{r7, pc}

0800b6c4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800b6c4:	b580      	push	{r7, lr}
 800b6c6:	b088      	sub	sp, #32
 800b6c8:	af00      	add	r7, sp, #0
 800b6ca:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800b6cc:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800b6d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800b6d2:	2308      	movs	r3, #8
 800b6d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b6d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b6da:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b6dc:	2300      	movs	r3, #0
 800b6de:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b6e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b6e4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b6e6:	f107 0308 	add.w	r3, r7, #8
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f7ff fe45 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800b6f2:	6878      	ldr	r0, [r7, #4]
 800b6f4:	f000 fb78 	bl	800bde8 <SDMMC_GetCmdResp7>
 800b6f8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b6fa:	69fb      	ldr	r3, [r7, #28]
}
 800b6fc:	4618      	mov	r0, r3
 800b6fe:	3720      	adds	r7, #32
 800b700:	46bd      	mov	sp, r7
 800b702:	bd80      	pop	{r7, pc}

0800b704 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b088      	sub	sp, #32
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800b712:	2337      	movs	r3, #55	; 0x37
 800b714:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b716:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b71a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b71c:	2300      	movs	r3, #0
 800b71e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b720:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b724:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b726:	f107 0308 	add.w	r3, r7, #8
 800b72a:	4619      	mov	r1, r3
 800b72c:	6878      	ldr	r0, [r7, #4]
 800b72e:	f7ff fe25 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800b732:	f241 3288 	movw	r2, #5000	; 0x1388
 800b736:	2137      	movs	r1, #55	; 0x37
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	f000 f961 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b73e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b740:	69fb      	ldr	r3, [r7, #28]
}
 800b742:	4618      	mov	r0, r3
 800b744:	3720      	adds	r7, #32
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b74a:	b580      	push	{r7, lr}
 800b74c:	b088      	sub	sp, #32
 800b74e:	af00      	add	r7, sp, #0
 800b750:	6078      	str	r0, [r7, #4]
 800b752:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800b758:	2329      	movs	r3, #41	; 0x29
 800b75a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b75c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b760:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b762:	2300      	movs	r3, #0
 800b764:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b76a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b76c:	f107 0308 	add.w	r3, r7, #8
 800b770:	4619      	mov	r1, r3
 800b772:	6878      	ldr	r0, [r7, #4]
 800b774:	f7ff fe02 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f000 fa7d 	bl	800bc78 <SDMMC_GetCmdResp3>
 800b77e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b780:	69fb      	ldr	r3, [r7, #28]
}
 800b782:	4618      	mov	r0, r3
 800b784:	3720      	adds	r7, #32
 800b786:	46bd      	mov	sp, r7
 800b788:	bd80      	pop	{r7, pc}

0800b78a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800b78a:	b580      	push	{r7, lr}
 800b78c:	b088      	sub	sp, #32
 800b78e:	af00      	add	r7, sp, #0
 800b790:	6078      	str	r0, [r7, #4]
 800b792:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800b794:	683b      	ldr	r3, [r7, #0]
 800b796:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800b798:	2306      	movs	r3, #6
 800b79a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b79c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7a0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7aa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7ac:	f107 0308 	add.w	r3, r7, #8
 800b7b0:	4619      	mov	r1, r3
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f7ff fde2 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800b7b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7bc:	2106      	movs	r1, #6
 800b7be:	6878      	ldr	r0, [r7, #4]
 800b7c0:	f000 f91e 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b7c4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b7c6:	69fb      	ldr	r3, [r7, #28]
}
 800b7c8:	4618      	mov	r0, r3
 800b7ca:	3720      	adds	r7, #32
 800b7cc:	46bd      	mov	sp, r7
 800b7ce:	bd80      	pop	{r7, pc}

0800b7d0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800b7d8:	2300      	movs	r3, #0
 800b7da:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800b7dc:	2333      	movs	r3, #51	; 0x33
 800b7de:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b7e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b7e4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b7ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b7ee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b7f0:	f107 0308 	add.w	r3, r7, #8
 800b7f4:	4619      	mov	r1, r3
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f7ff fdc0 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800b7fc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b800:	2133      	movs	r1, #51	; 0x33
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f8fc 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b808:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b80a:	69fb      	ldr	r3, [r7, #28]
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3720      	adds	r7, #32
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b088      	sub	sp, #32
 800b818:	af00      	add	r7, sp, #0
 800b81a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b820:	2302      	movs	r3, #2
 800b822:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b824:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b828:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b82a:	2300      	movs	r3, #0
 800b82c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b82e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b832:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b834:	f107 0308 	add.w	r3, r7, #8
 800b838:	4619      	mov	r1, r3
 800b83a:	6878      	ldr	r0, [r7, #4]
 800b83c:	f7ff fd9e 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 f9cf 	bl	800bbe4 <SDMMC_GetCmdResp2>
 800b846:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b848:	69fb      	ldr	r3, [r7, #28]
}
 800b84a:	4618      	mov	r0, r3
 800b84c:	3720      	adds	r7, #32
 800b84e:	46bd      	mov	sp, r7
 800b850:	bd80      	pop	{r7, pc}

0800b852 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b852:	b580      	push	{r7, lr}
 800b854:	b088      	sub	sp, #32
 800b856:	af00      	add	r7, sp, #0
 800b858:	6078      	str	r0, [r7, #4]
 800b85a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b860:	2309      	movs	r3, #9
 800b862:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b864:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b868:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b86a:	2300      	movs	r3, #0
 800b86c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b86e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b872:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b874:	f107 0308 	add.w	r3, r7, #8
 800b878:	4619      	mov	r1, r3
 800b87a:	6878      	ldr	r0, [r7, #4]
 800b87c:	f7ff fd7e 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b880:	6878      	ldr	r0, [r7, #4]
 800b882:	f000 f9af 	bl	800bbe4 <SDMMC_GetCmdResp2>
 800b886:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b888:	69fb      	ldr	r3, [r7, #28]
}
 800b88a:	4618      	mov	r0, r3
 800b88c:	3720      	adds	r7, #32
 800b88e:	46bd      	mov	sp, r7
 800b890:	bd80      	pop	{r7, pc}

0800b892 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b892:	b580      	push	{r7, lr}
 800b894:	b088      	sub	sp, #32
 800b896:	af00      	add	r7, sp, #0
 800b898:	6078      	str	r0, [r7, #4]
 800b89a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b89c:	2300      	movs	r3, #0
 800b89e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b8a0:	2303      	movs	r3, #3
 800b8a2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8a4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8a8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8b2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8b4:	f107 0308 	add.w	r3, r7, #8
 800b8b8:	4619      	mov	r1, r3
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f7ff fd5e 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b8c0:	683a      	ldr	r2, [r7, #0]
 800b8c2:	2103      	movs	r1, #3
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f000 fa17 	bl	800bcf8 <SDMMC_GetCmdResp6>
 800b8ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b8cc:	69fb      	ldr	r3, [r7, #28]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3720      	adds	r7, #32
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	bd80      	pop	{r7, pc}

0800b8d6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b8d6:	b580      	push	{r7, lr}
 800b8d8:	b088      	sub	sp, #32
 800b8da:	af00      	add	r7, sp, #0
 800b8dc:	6078      	str	r0, [r7, #4]
 800b8de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b8e4:	230d      	movs	r3, #13
 800b8e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b8e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b8ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b8f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b8f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b8f8:	f107 0308 	add.w	r3, r7, #8
 800b8fc:	4619      	mov	r1, r3
 800b8fe:	6878      	ldr	r0, [r7, #4]
 800b900:	f7ff fd3c 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b904:	f241 3288 	movw	r2, #5000	; 0x1388
 800b908:	210d      	movs	r1, #13
 800b90a:	6878      	ldr	r0, [r7, #4]
 800b90c:	f000 f878 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b910:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b912:	69fb      	ldr	r3, [r7, #28]
}
 800b914:	4618      	mov	r0, r3
 800b916:	3720      	adds	r7, #32
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b088      	sub	sp, #32
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800b924:	2300      	movs	r3, #0
 800b926:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800b928:	230d      	movs	r3, #13
 800b92a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b92c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b930:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b932:	2300      	movs	r3, #0
 800b934:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b936:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b93a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b93c:	f107 0308 	add.w	r3, r7, #8
 800b940:	4619      	mov	r1, r3
 800b942:	6878      	ldr	r0, [r7, #4]
 800b944:	f7ff fd1a 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800b948:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94c:	210d      	movs	r1, #13
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f856 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b954:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b956:	69fb      	ldr	r3, [r7, #28]
}
 800b958:	4618      	mov	r0, r3
 800b95a:	3720      	adds	r7, #32
 800b95c:	46bd      	mov	sp, r7
 800b95e:	bd80      	pop	{r7, pc}

0800b960 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800b960:	b580      	push	{r7, lr}
 800b962:	b088      	sub	sp, #32
 800b964:	af00      	add	r7, sp, #0
 800b966:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800b968:	2300      	movs	r3, #0
 800b96a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800b96c:	230b      	movs	r3, #11
 800b96e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b970:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b974:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b976:	2300      	movs	r3, #0
 800b978:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b97a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b97e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b980:	f107 0308 	add.w	r3, r7, #8
 800b984:	4619      	mov	r1, r3
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f7ff fcf8 	bl	800b37c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800b98c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b990:	210b      	movs	r1, #11
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f834 	bl	800ba00 <SDMMC_GetCmdResp1>
 800b998:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b99a:	69fb      	ldr	r3, [r7, #28]
}
 800b99c:	4618      	mov	r0, r3
 800b99e:	3720      	adds	r7, #32
 800b9a0:	46bd      	mov	sp, r7
 800b9a2:	bd80      	pop	{r7, pc}

0800b9a4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b9a4:	b480      	push	{r7}
 800b9a6:	b085      	sub	sp, #20
 800b9a8:	af00      	add	r7, sp, #0
 800b9aa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b9ac:	4b11      	ldr	r3, [pc, #68]	; (800b9f4 <SDMMC_GetCmdError+0x50>)
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	4a11      	ldr	r2, [pc, #68]	; (800b9f8 <SDMMC_GetCmdError+0x54>)
 800b9b2:	fba2 2303 	umull	r2, r3, r2, r3
 800b9b6:	0a5b      	lsrs	r3, r3, #9
 800b9b8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9bc:	fb02 f303 	mul.w	r3, r2, r3
 800b9c0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	1e5a      	subs	r2, r3, #1
 800b9c6:	60fa      	str	r2, [r7, #12]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d102      	bne.n	800b9d2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b9cc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b9d0:	e009      	b.n	800b9e6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b9d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0f1      	beq.n	800b9c2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	4a06      	ldr	r2, [pc, #24]	; (800b9fc <SDMMC_GetCmdError+0x58>)
 800b9e2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	24000000 	.word	0x24000000
 800b9f8:	10624dd3 	.word	0x10624dd3
 800b9fc:	002000c5 	.word	0x002000c5

0800ba00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800ba00:	b580      	push	{r7, lr}
 800ba02:	b088      	sub	sp, #32
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	60f8      	str	r0, [r7, #12]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	607a      	str	r2, [r7, #4]
 800ba0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800ba0e:	4b70      	ldr	r3, [pc, #448]	; (800bbd0 <SDMMC_GetCmdResp1+0x1d0>)
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	4a70      	ldr	r2, [pc, #448]	; (800bbd4 <SDMMC_GetCmdResp1+0x1d4>)
 800ba14:	fba2 2303 	umull	r2, r3, r2, r3
 800ba18:	0a5a      	lsrs	r2, r3, #9
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	fb02 f303 	mul.w	r3, r2, r3
 800ba20:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	1e5a      	subs	r2, r3, #1
 800ba26:	61fa      	str	r2, [r7, #28]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d102      	bne.n	800ba32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800ba2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ba30:	e0c9      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba38:	69ba      	ldr	r2, [r7, #24]
 800ba3a:	4b67      	ldr	r3, [pc, #412]	; (800bbd8 <SDMMC_GetCmdResp1+0x1d8>)
 800ba3c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d0ef      	beq.n	800ba22 <SDMMC_GetCmdResp1+0x22>
 800ba42:	69bb      	ldr	r3, [r7, #24]
 800ba44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d1ea      	bne.n	800ba22 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d004      	beq.n	800ba62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	2204      	movs	r2, #4
 800ba5c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800ba5e:	2304      	movs	r3, #4
 800ba60:	e0b1      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ba66:	f003 0301 	and.w	r3, r3, #1
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d004      	beq.n	800ba78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	2201      	movs	r2, #1
 800ba72:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba74:	2301      	movs	r3, #1
 800ba76:	e0a6      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4a58      	ldr	r2, [pc, #352]	; (800bbdc <SDMMC_GetCmdResp1+0x1dc>)
 800ba7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800ba7e:	68f8      	ldr	r0, [r7, #12]
 800ba80:	f7ff fca6 	bl	800b3d0 <SDMMC_GetCommandResponse>
 800ba84:	4603      	mov	r3, r0
 800ba86:	461a      	mov	r2, r3
 800ba88:	7afb      	ldrb	r3, [r7, #11]
 800ba8a:	4293      	cmp	r3, r2
 800ba8c:	d001      	beq.n	800ba92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800ba8e:	2301      	movs	r3, #1
 800ba90:	e099      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800ba92:	2100      	movs	r1, #0
 800ba94:	68f8      	ldr	r0, [r7, #12]
 800ba96:	f7ff fca8 	bl	800b3ea <SDMMC_GetResponse>
 800ba9a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800ba9c:	697a      	ldr	r2, [r7, #20]
 800ba9e:	4b50      	ldr	r3, [pc, #320]	; (800bbe0 <SDMMC_GetCmdResp1+0x1e0>)
 800baa0:	4013      	ands	r3, r2
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d101      	bne.n	800baaa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800baa6:	2300      	movs	r3, #0
 800baa8:	e08d      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800baaa:	697b      	ldr	r3, [r7, #20]
 800baac:	2b00      	cmp	r3, #0
 800baae:	da02      	bge.n	800bab6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800bab0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800bab4:	e087      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800bab6:	697b      	ldr	r3, [r7, #20]
 800bab8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800babc:	2b00      	cmp	r3, #0
 800babe:	d001      	beq.n	800bac4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800bac0:	2340      	movs	r3, #64	; 0x40
 800bac2:	e080      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800bace:	2380      	movs	r3, #128	; 0x80
 800bad0:	e079      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800bad2:	697b      	ldr	r3, [r7, #20]
 800bad4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d002      	beq.n	800bae2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800badc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800bae0:	e071      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800bae2:	697b      	ldr	r3, [r7, #20]
 800bae4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d002      	beq.n	800baf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800baec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800baf0:	e069      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d002      	beq.n	800bb02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800bafc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb00:	e061      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800bb02:	697b      	ldr	r3, [r7, #20]
 800bb04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d002      	beq.n	800bb12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800bb0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800bb10:	e059      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d002      	beq.n	800bb22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bb1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bb20:	e051      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800bb22:	697b      	ldr	r3, [r7, #20]
 800bb24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d002      	beq.n	800bb32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bb2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bb30:	e049      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800bb32:	697b      	ldr	r3, [r7, #20]
 800bb34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d002      	beq.n	800bb42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800bb3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800bb40:	e041      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800bb42:	697b      	ldr	r3, [r7, #20]
 800bb44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d002      	beq.n	800bb52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800bb4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bb50:	e039      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d002      	beq.n	800bb62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800bb5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800bb60:	e031      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800bb62:	697b      	ldr	r3, [r7, #20]
 800bb64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d002      	beq.n	800bb72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800bb6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800bb70:	e029      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800bb72:	697b      	ldr	r3, [r7, #20]
 800bb74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d002      	beq.n	800bb82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800bb7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800bb80:	e021      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb88:	2b00      	cmp	r3, #0
 800bb8a:	d002      	beq.n	800bb92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800bb8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800bb90:	e019      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800bb92:	697b      	ldr	r3, [r7, #20]
 800bb94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800bb9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800bba0:	e011      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d002      	beq.n	800bbb2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800bbac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800bbb0:	e009      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800bbb2:	697b      	ldr	r3, [r7, #20]
 800bbb4:	f003 0308 	and.w	r3, r3, #8
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d002      	beq.n	800bbc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800bbbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800bbc0:	e001      	b.n	800bbc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bbc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3720      	adds	r7, #32
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	24000000 	.word	0x24000000
 800bbd4:	10624dd3 	.word	0x10624dd3
 800bbd8:	00200045 	.word	0x00200045
 800bbdc:	002000c5 	.word	0x002000c5
 800bbe0:	fdffe008 	.word	0xfdffe008

0800bbe4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800bbe4:	b480      	push	{r7}
 800bbe6:	b085      	sub	sp, #20
 800bbe8:	af00      	add	r7, sp, #0
 800bbea:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bbec:	4b1f      	ldr	r3, [pc, #124]	; (800bc6c <SDMMC_GetCmdResp2+0x88>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	4a1f      	ldr	r2, [pc, #124]	; (800bc70 <SDMMC_GetCmdResp2+0x8c>)
 800bbf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bbf6:	0a5b      	lsrs	r3, r3, #9
 800bbf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbfc:	fb02 f303 	mul.w	r3, r2, r3
 800bc00:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	1e5a      	subs	r2, r3, #1
 800bc06:	60fa      	str	r2, [r7, #12]
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d102      	bne.n	800bc12 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bc0c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bc10:	e026      	b.n	800bc60 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc16:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc18:	68bb      	ldr	r3, [r7, #8]
 800bc1a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d0ef      	beq.n	800bc02 <SDMMC_GetCmdResp2+0x1e>
 800bc22:	68bb      	ldr	r3, [r7, #8]
 800bc24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1ea      	bne.n	800bc02 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc30:	f003 0304 	and.w	r3, r3, #4
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2204      	movs	r2, #4
 800bc3c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bc3e:	2304      	movs	r3, #4
 800bc40:	e00e      	b.n	800bc60 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc46:	f003 0301 	and.w	r3, r3, #1
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d004      	beq.n	800bc58 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	2201      	movs	r2, #1
 800bc52:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bc54:	2301      	movs	r3, #1
 800bc56:	e003      	b.n	800bc60 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	4a06      	ldr	r2, [pc, #24]	; (800bc74 <SDMMC_GetCmdResp2+0x90>)
 800bc5c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3714      	adds	r7, #20
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr
 800bc6c:	24000000 	.word	0x24000000
 800bc70:	10624dd3 	.word	0x10624dd3
 800bc74:	002000c5 	.word	0x002000c5

0800bc78 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b085      	sub	sp, #20
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bc80:	4b1a      	ldr	r3, [pc, #104]	; (800bcec <SDMMC_GetCmdResp3+0x74>)
 800bc82:	681b      	ldr	r3, [r3, #0]
 800bc84:	4a1a      	ldr	r2, [pc, #104]	; (800bcf0 <SDMMC_GetCmdResp3+0x78>)
 800bc86:	fba2 2303 	umull	r2, r3, r2, r3
 800bc8a:	0a5b      	lsrs	r3, r3, #9
 800bc8c:	f241 3288 	movw	r2, #5000	; 0x1388
 800bc90:	fb02 f303 	mul.w	r3, r2, r3
 800bc94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	1e5a      	subs	r2, r3, #1
 800bc9a:	60fa      	str	r2, [r7, #12]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d102      	bne.n	800bca6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bca0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bca4:	e01b      	b.n	800bcde <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcaa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d0ef      	beq.n	800bc96 <SDMMC_GetCmdResp3+0x1e>
 800bcb6:	68bb      	ldr	r3, [r7, #8]
 800bcb8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d1ea      	bne.n	800bc96 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bcc4:	f003 0304 	and.w	r3, r3, #4
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d004      	beq.n	800bcd6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2204      	movs	r2, #4
 800bcd0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bcd2:	2304      	movs	r3, #4
 800bcd4:	e003      	b.n	800bcde <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	4a06      	ldr	r2, [pc, #24]	; (800bcf4 <SDMMC_GetCmdResp3+0x7c>)
 800bcda:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800bcdc:	2300      	movs	r3, #0
}
 800bcde:	4618      	mov	r0, r3
 800bce0:	3714      	adds	r7, #20
 800bce2:	46bd      	mov	sp, r7
 800bce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce8:	4770      	bx	lr
 800bcea:	bf00      	nop
 800bcec:	24000000 	.word	0x24000000
 800bcf0:	10624dd3 	.word	0x10624dd3
 800bcf4:	002000c5 	.word	0x002000c5

0800bcf8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b088      	sub	sp, #32
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	460b      	mov	r3, r1
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bd06:	4b35      	ldr	r3, [pc, #212]	; (800bddc <SDMMC_GetCmdResp6+0xe4>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a35      	ldr	r2, [pc, #212]	; (800bde0 <SDMMC_GetCmdResp6+0xe8>)
 800bd0c:	fba2 2303 	umull	r2, r3, r2, r3
 800bd10:	0a5b      	lsrs	r3, r3, #9
 800bd12:	f241 3288 	movw	r2, #5000	; 0x1388
 800bd16:	fb02 f303 	mul.w	r3, r2, r3
 800bd1a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800bd1c:	69fb      	ldr	r3, [r7, #28]
 800bd1e:	1e5a      	subs	r2, r3, #1
 800bd20:	61fa      	str	r2, [r7, #28]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d102      	bne.n	800bd2c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800bd26:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800bd2a:	e052      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd30:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd32:	69bb      	ldr	r3, [r7, #24]
 800bd34:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d0ef      	beq.n	800bd1c <SDMMC_GetCmdResp6+0x24>
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800bd42:	2b00      	cmp	r3, #0
 800bd44:	d1ea      	bne.n	800bd1c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd4a:	f003 0304 	and.w	r3, r3, #4
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d004      	beq.n	800bd5c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	2204      	movs	r2, #4
 800bd56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800bd58:	2304      	movs	r3, #4
 800bd5a:	e03a      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd60:	f003 0301 	and.w	r3, r3, #1
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d004      	beq.n	800bd72 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd6e:	2301      	movs	r3, #1
 800bd70:	e02f      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800bd72:	68f8      	ldr	r0, [r7, #12]
 800bd74:	f7ff fb2c 	bl	800b3d0 <SDMMC_GetCommandResponse>
 800bd78:	4603      	mov	r3, r0
 800bd7a:	461a      	mov	r2, r3
 800bd7c:	7afb      	ldrb	r3, [r7, #11]
 800bd7e:	4293      	cmp	r3, r2
 800bd80:	d001      	beq.n	800bd86 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800bd82:	2301      	movs	r3, #1
 800bd84:	e025      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a16      	ldr	r2, [pc, #88]	; (800bde4 <SDMMC_GetCmdResp6+0xec>)
 800bd8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	68f8      	ldr	r0, [r7, #12]
 800bd90:	f7ff fb2b 	bl	800b3ea <SDMMC_GetResponse>
 800bd94:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d106      	bne.n	800bdae <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800bda0:	697b      	ldr	r3, [r7, #20]
 800bda2:	0c1b      	lsrs	r3, r3, #16
 800bda4:	b29a      	uxth	r2, r3
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800bdaa:	2300      	movs	r3, #0
 800bdac:	e011      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d002      	beq.n	800bdbe <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800bdb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800bdbc:	e009      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800bdbe:	697b      	ldr	r3, [r7, #20]
 800bdc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d002      	beq.n	800bdce <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800bdc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bdcc:	e001      	b.n	800bdd2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800bdce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800bdd2:	4618      	mov	r0, r3
 800bdd4:	3720      	adds	r7, #32
 800bdd6:	46bd      	mov	sp, r7
 800bdd8:	bd80      	pop	{r7, pc}
 800bdda:	bf00      	nop
 800bddc:	24000000 	.word	0x24000000
 800bde0:	10624dd3 	.word	0x10624dd3
 800bde4:	002000c5 	.word	0x002000c5

0800bde8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800bde8:	b480      	push	{r7}
 800bdea:	b085      	sub	sp, #20
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800bdf0:	4b22      	ldr	r3, [pc, #136]	; (800be7c <SDMMC_GetCmdResp7+0x94>)
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	4a22      	ldr	r2, [pc, #136]	; (800be80 <SDMMC_GetCmdResp7+0x98>)
 800bdf6:	fba2 2303 	umull	r2, r3, r2, r3
 800bdfa:	0a5b      	lsrs	r3, r3, #9
 800bdfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800be00:	fb02 f303 	mul.w	r3, r2, r3
 800be04:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	1e5a      	subs	r2, r3, #1
 800be0a:	60fa      	str	r2, [r7, #12]
 800be0c:	2b00      	cmp	r3, #0
 800be0e:	d102      	bne.n	800be16 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800be10:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800be14:	e02c      	b.n	800be70 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be1a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be1c:	68bb      	ldr	r3, [r7, #8]
 800be1e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800be22:	2b00      	cmp	r3, #0
 800be24:	d0ef      	beq.n	800be06 <SDMMC_GetCmdResp7+0x1e>
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d1ea      	bne.n	800be06 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be34:	f003 0304 	and.w	r3, r3, #4
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d004      	beq.n	800be46 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2204      	movs	r2, #4
 800be40:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800be42:	2304      	movs	r3, #4
 800be44:	e014      	b.n	800be70 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be4a:	f003 0301 	and.w	r3, r3, #1
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d004      	beq.n	800be5c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	2201      	movs	r2, #1
 800be56:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800be58:	2301      	movs	r3, #1
 800be5a:	e009      	b.n	800be70 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be64:	2b00      	cmp	r3, #0
 800be66:	d002      	beq.n	800be6e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	2240      	movs	r2, #64	; 0x40
 800be6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800be6e:	2300      	movs	r3, #0

}
 800be70:	4618      	mov	r0, r3
 800be72:	3714      	adds	r7, #20
 800be74:	46bd      	mov	sp, r7
 800be76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7a:	4770      	bx	lr
 800be7c:	24000000 	.word	0x24000000
 800be80:	10624dd3 	.word	0x10624dd3

0800be84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be84:	b084      	sub	sp, #16
 800be86:	b580      	push	{r7, lr}
 800be88:	b084      	sub	sp, #16
 800be8a:	af00      	add	r7, sp, #0
 800be8c:	6078      	str	r0, [r7, #4]
 800be8e:	f107 001c 	add.w	r0, r7, #28
 800be92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800be96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be98:	2b01      	cmp	r3, #1
 800be9a:	d120      	bne.n	800bede <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bea0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	68da      	ldr	r2, [r3, #12]
 800beac:	4b25      	ldr	r3, [pc, #148]	; (800bf44 <USB_CoreInit+0xc0>)
 800beae:	4013      	ands	r3, r2
 800beb0:	687a      	ldr	r2, [r7, #4]
 800beb2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	68db      	ldr	r3, [r3, #12]
 800beb8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800bec0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bec2:	2b01      	cmp	r3, #1
 800bec4:	d105      	bne.n	800bed2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	68db      	ldr	r3, [r3, #12]
 800beca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	f001 fabe 	bl	800d454 <USB_CoreReset>
 800bed8:	4603      	mov	r3, r0
 800beda:	73fb      	strb	r3, [r7, #15]
 800bedc:	e01a      	b.n	800bf14 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	68db      	ldr	r3, [r3, #12]
 800bee2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800beea:	6878      	ldr	r0, [r7, #4]
 800beec:	f001 fab2 	bl	800d454 <USB_CoreReset>
 800bef0:	4603      	mov	r3, r0
 800bef2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800bef4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d106      	bne.n	800bf08 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800befe:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	639a      	str	r2, [r3, #56]	; 0x38
 800bf06:	e005      	b.n	800bf14 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf0c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800bf14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf16:	2b01      	cmp	r3, #1
 800bf18:	d10b      	bne.n	800bf32 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	689b      	ldr	r3, [r3, #8]
 800bf1e:	f043 0206 	orr.w	r2, r3, #6
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	f043 0220 	orr.w	r2, r3, #32
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800bf32:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf3e:	b004      	add	sp, #16
 800bf40:	4770      	bx	lr
 800bf42:	bf00      	nop
 800bf44:	ffbdffbf 	.word	0xffbdffbf

0800bf48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b087      	sub	sp, #28
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4613      	mov	r3, r2
 800bf54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800bf56:	79fb      	ldrb	r3, [r7, #7]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d165      	bne.n	800c028 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	4a41      	ldr	r2, [pc, #260]	; (800c064 <USB_SetTurnaroundTime+0x11c>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d906      	bls.n	800bf72 <USB_SetTurnaroundTime+0x2a>
 800bf64:	68bb      	ldr	r3, [r7, #8]
 800bf66:	4a40      	ldr	r2, [pc, #256]	; (800c068 <USB_SetTurnaroundTime+0x120>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d802      	bhi.n	800bf72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800bf6c:	230f      	movs	r3, #15
 800bf6e:	617b      	str	r3, [r7, #20]
 800bf70:	e062      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800bf72:	68bb      	ldr	r3, [r7, #8]
 800bf74:	4a3c      	ldr	r2, [pc, #240]	; (800c068 <USB_SetTurnaroundTime+0x120>)
 800bf76:	4293      	cmp	r3, r2
 800bf78:	d906      	bls.n	800bf88 <USB_SetTurnaroundTime+0x40>
 800bf7a:	68bb      	ldr	r3, [r7, #8]
 800bf7c:	4a3b      	ldr	r2, [pc, #236]	; (800c06c <USB_SetTurnaroundTime+0x124>)
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d802      	bhi.n	800bf88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800bf82:	230e      	movs	r3, #14
 800bf84:	617b      	str	r3, [r7, #20]
 800bf86:	e057      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800bf88:	68bb      	ldr	r3, [r7, #8]
 800bf8a:	4a38      	ldr	r2, [pc, #224]	; (800c06c <USB_SetTurnaroundTime+0x124>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d906      	bls.n	800bf9e <USB_SetTurnaroundTime+0x56>
 800bf90:	68bb      	ldr	r3, [r7, #8]
 800bf92:	4a37      	ldr	r2, [pc, #220]	; (800c070 <USB_SetTurnaroundTime+0x128>)
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d802      	bhi.n	800bf9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800bf98:	230d      	movs	r3, #13
 800bf9a:	617b      	str	r3, [r7, #20]
 800bf9c:	e04c      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	4a33      	ldr	r2, [pc, #204]	; (800c070 <USB_SetTurnaroundTime+0x128>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d906      	bls.n	800bfb4 <USB_SetTurnaroundTime+0x6c>
 800bfa6:	68bb      	ldr	r3, [r7, #8]
 800bfa8:	4a32      	ldr	r2, [pc, #200]	; (800c074 <USB_SetTurnaroundTime+0x12c>)
 800bfaa:	4293      	cmp	r3, r2
 800bfac:	d802      	bhi.n	800bfb4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800bfae:	230c      	movs	r3, #12
 800bfb0:	617b      	str	r3, [r7, #20]
 800bfb2:	e041      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	4a2f      	ldr	r2, [pc, #188]	; (800c074 <USB_SetTurnaroundTime+0x12c>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d906      	bls.n	800bfca <USB_SetTurnaroundTime+0x82>
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	4a2e      	ldr	r2, [pc, #184]	; (800c078 <USB_SetTurnaroundTime+0x130>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d802      	bhi.n	800bfca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800bfc4:	230b      	movs	r3, #11
 800bfc6:	617b      	str	r3, [r7, #20]
 800bfc8:	e036      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	4a2a      	ldr	r2, [pc, #168]	; (800c078 <USB_SetTurnaroundTime+0x130>)
 800bfce:	4293      	cmp	r3, r2
 800bfd0:	d906      	bls.n	800bfe0 <USB_SetTurnaroundTime+0x98>
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	4a29      	ldr	r2, [pc, #164]	; (800c07c <USB_SetTurnaroundTime+0x134>)
 800bfd6:	4293      	cmp	r3, r2
 800bfd8:	d802      	bhi.n	800bfe0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800bfda:	230a      	movs	r3, #10
 800bfdc:	617b      	str	r3, [r7, #20]
 800bfde:	e02b      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800bfe0:	68bb      	ldr	r3, [r7, #8]
 800bfe2:	4a26      	ldr	r2, [pc, #152]	; (800c07c <USB_SetTurnaroundTime+0x134>)
 800bfe4:	4293      	cmp	r3, r2
 800bfe6:	d906      	bls.n	800bff6 <USB_SetTurnaroundTime+0xae>
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	4a25      	ldr	r2, [pc, #148]	; (800c080 <USB_SetTurnaroundTime+0x138>)
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d802      	bhi.n	800bff6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800bff0:	2309      	movs	r3, #9
 800bff2:	617b      	str	r3, [r7, #20]
 800bff4:	e020      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	4a21      	ldr	r2, [pc, #132]	; (800c080 <USB_SetTurnaroundTime+0x138>)
 800bffa:	4293      	cmp	r3, r2
 800bffc:	d906      	bls.n	800c00c <USB_SetTurnaroundTime+0xc4>
 800bffe:	68bb      	ldr	r3, [r7, #8]
 800c000:	4a20      	ldr	r2, [pc, #128]	; (800c084 <USB_SetTurnaroundTime+0x13c>)
 800c002:	4293      	cmp	r3, r2
 800c004:	d802      	bhi.n	800c00c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800c006:	2308      	movs	r3, #8
 800c008:	617b      	str	r3, [r7, #20]
 800c00a:	e015      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800c00c:	68bb      	ldr	r3, [r7, #8]
 800c00e:	4a1d      	ldr	r2, [pc, #116]	; (800c084 <USB_SetTurnaroundTime+0x13c>)
 800c010:	4293      	cmp	r3, r2
 800c012:	d906      	bls.n	800c022 <USB_SetTurnaroundTime+0xda>
 800c014:	68bb      	ldr	r3, [r7, #8]
 800c016:	4a1c      	ldr	r2, [pc, #112]	; (800c088 <USB_SetTurnaroundTime+0x140>)
 800c018:	4293      	cmp	r3, r2
 800c01a:	d802      	bhi.n	800c022 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800c01c:	2307      	movs	r3, #7
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e00a      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800c022:	2306      	movs	r3, #6
 800c024:	617b      	str	r3, [r7, #20]
 800c026:	e007      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800c028:	79fb      	ldrb	r3, [r7, #7]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d102      	bne.n	800c034 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800c02e:	2309      	movs	r3, #9
 800c030:	617b      	str	r3, [r7, #20]
 800c032:	e001      	b.n	800c038 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800c034:	2309      	movs	r3, #9
 800c036:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	68da      	ldr	r2, [r3, #12]
 800c048:	697b      	ldr	r3, [r7, #20]
 800c04a:	029b      	lsls	r3, r3, #10
 800c04c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800c050:	431a      	orrs	r2, r3
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	371c      	adds	r7, #28
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr
 800c064:	00d8acbf 	.word	0x00d8acbf
 800c068:	00e4e1bf 	.word	0x00e4e1bf
 800c06c:	00f423ff 	.word	0x00f423ff
 800c070:	0106737f 	.word	0x0106737f
 800c074:	011a499f 	.word	0x011a499f
 800c078:	01312cff 	.word	0x01312cff
 800c07c:	014ca43f 	.word	0x014ca43f
 800c080:	016e35ff 	.word	0x016e35ff
 800c084:	01a6ab1f 	.word	0x01a6ab1f
 800c088:	01e847ff 	.word	0x01e847ff

0800c08c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c08c:	b480      	push	{r7}
 800c08e:	b083      	sub	sp, #12
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	f043 0201 	orr.w	r2, r3, #1
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0a0:	2300      	movs	r3, #0
}
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	370c      	adds	r7, #12
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ac:	4770      	bx	lr

0800c0ae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ae:	b480      	push	{r7}
 800c0b0:	b083      	sub	sp, #12
 800c0b2:	af00      	add	r7, sp, #0
 800c0b4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	689b      	ldr	r3, [r3, #8]
 800c0ba:	f023 0201 	bic.w	r2, r3, #1
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	370c      	adds	r7, #12
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b082      	sub	sp, #8
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c0e8:	78fb      	ldrb	r3, [r7, #3]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d106      	bne.n	800c0fc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	60da      	str	r2, [r3, #12]
 800c0fa:	e00b      	b.n	800c114 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800c0fc:	78fb      	ldrb	r3, [r7, #3]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d106      	bne.n	800c110 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	68db      	ldr	r3, [r3, #12]
 800c106:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	60da      	str	r2, [r3, #12]
 800c10e:	e001      	b.n	800c114 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800c110:	2301      	movs	r3, #1
 800c112:	e003      	b.n	800c11c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800c114:	2032      	movs	r0, #50	; 0x32
 800c116:	f7f5 fb87 	bl	8001828 <HAL_Delay>

  return HAL_OK;
 800c11a:	2300      	movs	r3, #0
}
 800c11c:	4618      	mov	r0, r3
 800c11e:	3708      	adds	r7, #8
 800c120:	46bd      	mov	sp, r7
 800c122:	bd80      	pop	{r7, pc}

0800c124 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c124:	b084      	sub	sp, #16
 800c126:	b580      	push	{r7, lr}
 800c128:	b086      	sub	sp, #24
 800c12a:	af00      	add	r7, sp, #0
 800c12c:	6078      	str	r0, [r7, #4]
 800c12e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c132:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c136:	2300      	movs	r3, #0
 800c138:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c13e:	2300      	movs	r3, #0
 800c140:	613b      	str	r3, [r7, #16]
 800c142:	e009      	b.n	800c158 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c144:	687a      	ldr	r2, [r7, #4]
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	3340      	adds	r3, #64	; 0x40
 800c14a:	009b      	lsls	r3, r3, #2
 800c14c:	4413      	add	r3, r2
 800c14e:	2200      	movs	r2, #0
 800c150:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	3301      	adds	r3, #1
 800c156:	613b      	str	r3, [r7, #16]
 800c158:	693b      	ldr	r3, [r7, #16]
 800c15a:	2b0e      	cmp	r3, #14
 800c15c:	d9f2      	bls.n	800c144 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c15e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c160:	2b00      	cmp	r3, #0
 800c162:	d11c      	bne.n	800c19e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c16a:	685b      	ldr	r3, [r3, #4]
 800c16c:	68fa      	ldr	r2, [r7, #12]
 800c16e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c172:	f043 0302 	orr.w	r3, r3, #2
 800c176:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c17c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	601a      	str	r2, [r3, #0]
 800c19c:	e005      	b.n	800c1aa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1a2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1bc:	4619      	mov	r1, r3
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1c4:	461a      	mov	r2, r3
 800c1c6:	680b      	ldr	r3, [r1, #0]
 800c1c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c1ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1cc:	2b01      	cmp	r3, #1
 800c1ce:	d10c      	bne.n	800c1ea <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c1d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d104      	bne.n	800c1e0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c1d6:	2100      	movs	r1, #0
 800c1d8:	6878      	ldr	r0, [r7, #4]
 800c1da:	f000 f949 	bl	800c470 <USB_SetDevSpeed>
 800c1de:	e008      	b.n	800c1f2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c1e0:	2101      	movs	r1, #1
 800c1e2:	6878      	ldr	r0, [r7, #4]
 800c1e4:	f000 f944 	bl	800c470 <USB_SetDevSpeed>
 800c1e8:	e003      	b.n	800c1f2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c1ea:	2103      	movs	r1, #3
 800c1ec:	6878      	ldr	r0, [r7, #4]
 800c1ee:	f000 f93f 	bl	800c470 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c1f2:	2110      	movs	r1, #16
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f8f3 	bl	800c3e0 <USB_FlushTxFifo>
 800c1fa:	4603      	mov	r3, r0
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d001      	beq.n	800c204 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c200:	2301      	movs	r3, #1
 800c202:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 f911 	bl	800c42c <USB_FlushRxFifo>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c210:	2301      	movs	r3, #1
 800c212:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c21a:	461a      	mov	r2, r3
 800c21c:	2300      	movs	r3, #0
 800c21e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c226:	461a      	mov	r2, r3
 800c228:	2300      	movs	r3, #0
 800c22a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c232:	461a      	mov	r2, r3
 800c234:	2300      	movs	r3, #0
 800c236:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c238:	2300      	movs	r3, #0
 800c23a:	613b      	str	r3, [r7, #16]
 800c23c:	e043      	b.n	800c2c6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c23e:	693b      	ldr	r3, [r7, #16]
 800c240:	015a      	lsls	r2, r3, #5
 800c242:	68fb      	ldr	r3, [r7, #12]
 800c244:	4413      	add	r3, r2
 800c246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c250:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c254:	d118      	bne.n	800c288 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c256:	693b      	ldr	r3, [r7, #16]
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d10a      	bne.n	800c272 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	015a      	lsls	r2, r3, #5
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	4413      	add	r3, r2
 800c264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c268:	461a      	mov	r2, r3
 800c26a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c26e:	6013      	str	r3, [r2, #0]
 800c270:	e013      	b.n	800c29a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	015a      	lsls	r2, r3, #5
 800c276:	68fb      	ldr	r3, [r7, #12]
 800c278:	4413      	add	r3, r2
 800c27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c27e:	461a      	mov	r2, r3
 800c280:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c284:	6013      	str	r3, [r2, #0]
 800c286:	e008      	b.n	800c29a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c288:	693b      	ldr	r3, [r7, #16]
 800c28a:	015a      	lsls	r2, r3, #5
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	4413      	add	r3, r2
 800c290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c294:	461a      	mov	r2, r3
 800c296:	2300      	movs	r3, #0
 800c298:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	68fb      	ldr	r3, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2a6:	461a      	mov	r2, r3
 800c2a8:	2300      	movs	r3, #0
 800c2aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c2ac:	693b      	ldr	r3, [r7, #16]
 800c2ae:	015a      	lsls	r2, r3, #5
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	4413      	add	r3, r2
 800c2b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b8:	461a      	mov	r2, r3
 800c2ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c2be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	3301      	adds	r3, #1
 800c2c4:	613b      	str	r3, [r7, #16]
 800c2c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c8:	693a      	ldr	r2, [r7, #16]
 800c2ca:	429a      	cmp	r2, r3
 800c2cc:	d3b7      	bcc.n	800c23e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c2ce:	2300      	movs	r3, #0
 800c2d0:	613b      	str	r3, [r7, #16]
 800c2d2:	e043      	b.n	800c35c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c2d4:	693b      	ldr	r3, [r7, #16]
 800c2d6:	015a      	lsls	r2, r3, #5
 800c2d8:	68fb      	ldr	r3, [r7, #12]
 800c2da:	4413      	add	r3, r2
 800c2dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c2e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c2ea:	d118      	bne.n	800c31e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d10a      	bne.n	800c308 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800c2f2:	693b      	ldr	r3, [r7, #16]
 800c2f4:	015a      	lsls	r2, r3, #5
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	4413      	add	r3, r2
 800c2fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2fe:	461a      	mov	r2, r3
 800c300:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c304:	6013      	str	r3, [r2, #0]
 800c306:	e013      	b.n	800c330 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800c308:	693b      	ldr	r3, [r7, #16]
 800c30a:	015a      	lsls	r2, r3, #5
 800c30c:	68fb      	ldr	r3, [r7, #12]
 800c30e:	4413      	add	r3, r2
 800c310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c314:	461a      	mov	r2, r3
 800c316:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c31a:	6013      	str	r3, [r2, #0]
 800c31c:	e008      	b.n	800c330 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800c31e:	693b      	ldr	r3, [r7, #16]
 800c320:	015a      	lsls	r2, r3, #5
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	4413      	add	r3, r2
 800c326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c32a:	461a      	mov	r2, r3
 800c32c:	2300      	movs	r3, #0
 800c32e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800c330:	693b      	ldr	r3, [r7, #16]
 800c332:	015a      	lsls	r2, r3, #5
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	4413      	add	r3, r2
 800c338:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c33c:	461a      	mov	r2, r3
 800c33e:	2300      	movs	r3, #0
 800c340:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800c342:	693b      	ldr	r3, [r7, #16]
 800c344:	015a      	lsls	r2, r3, #5
 800c346:	68fb      	ldr	r3, [r7, #12]
 800c348:	4413      	add	r3, r2
 800c34a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c34e:	461a      	mov	r2, r3
 800c350:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c354:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c356:	693b      	ldr	r3, [r7, #16]
 800c358:	3301      	adds	r3, #1
 800c35a:	613b      	str	r3, [r7, #16]
 800c35c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c35e:	693a      	ldr	r2, [r7, #16]
 800c360:	429a      	cmp	r2, r3
 800c362:	d3b7      	bcc.n	800c2d4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c36a:	691b      	ldr	r3, [r3, #16]
 800c36c:	68fa      	ldr	r2, [r7, #12]
 800c36e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c372:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c376:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	2200      	movs	r2, #0
 800c37c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800c384:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d105      	bne.n	800c398 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	699b      	ldr	r3, [r3, #24]
 800c390:	f043 0210 	orr.w	r2, r3, #16
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	699a      	ldr	r2, [r3, #24]
 800c39c:	4b0e      	ldr	r3, [pc, #56]	; (800c3d8 <USB_DevInit+0x2b4>)
 800c39e:	4313      	orrs	r3, r2
 800c3a0:	687a      	ldr	r2, [r7, #4]
 800c3a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800c3a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d005      	beq.n	800c3b6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	699b      	ldr	r3, [r3, #24]
 800c3ae:	f043 0208 	orr.w	r2, r3, #8
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800c3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b8:	2b01      	cmp	r3, #1
 800c3ba:	d105      	bne.n	800c3c8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	699a      	ldr	r2, [r3, #24]
 800c3c0:	4b06      	ldr	r3, [pc, #24]	; (800c3dc <USB_DevInit+0x2b8>)
 800c3c2:	4313      	orrs	r3, r2
 800c3c4:	687a      	ldr	r2, [r7, #4]
 800c3c6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800c3c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3ca:	4618      	mov	r0, r3
 800c3cc:	3718      	adds	r7, #24
 800c3ce:	46bd      	mov	sp, r7
 800c3d0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3d4:	b004      	add	sp, #16
 800c3d6:	4770      	bx	lr
 800c3d8:	803c3800 	.word	0x803c3800
 800c3dc:	40000004 	.word	0x40000004

0800c3e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800c3e0:	b480      	push	{r7}
 800c3e2:	b085      	sub	sp, #20
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	6078      	str	r0, [r7, #4]
 800c3e8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800c3ea:	2300      	movs	r3, #0
 800c3ec:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800c3ee:	683b      	ldr	r3, [r7, #0]
 800c3f0:	019b      	lsls	r3, r3, #6
 800c3f2:	f043 0220 	orr.w	r2, r3, #32
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	3301      	adds	r3, #1
 800c3fe:	60fb      	str	r3, [r7, #12]
 800c400:	68fb      	ldr	r3, [r7, #12]
 800c402:	4a09      	ldr	r2, [pc, #36]	; (800c428 <USB_FlushTxFifo+0x48>)
 800c404:	4293      	cmp	r3, r2
 800c406:	d901      	bls.n	800c40c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800c408:	2303      	movs	r3, #3
 800c40a:	e006      	b.n	800c41a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	691b      	ldr	r3, [r3, #16]
 800c410:	f003 0320 	and.w	r3, r3, #32
 800c414:	2b20      	cmp	r3, #32
 800c416:	d0f0      	beq.n	800c3fa <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800c418:	2300      	movs	r3, #0
}
 800c41a:	4618      	mov	r0, r3
 800c41c:	3714      	adds	r7, #20
 800c41e:	46bd      	mov	sp, r7
 800c420:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c424:	4770      	bx	lr
 800c426:	bf00      	nop
 800c428:	00030d40 	.word	0x00030d40

0800c42c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b085      	sub	sp, #20
 800c430:	af00      	add	r7, sp, #0
 800c432:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	2210      	movs	r2, #16
 800c43c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	3301      	adds	r3, #1
 800c442:	60fb      	str	r3, [r7, #12]
 800c444:	68fb      	ldr	r3, [r7, #12]
 800c446:	4a09      	ldr	r2, [pc, #36]	; (800c46c <USB_FlushRxFifo+0x40>)
 800c448:	4293      	cmp	r3, r2
 800c44a:	d901      	bls.n	800c450 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800c44c:	2303      	movs	r3, #3
 800c44e:	e006      	b.n	800c45e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	691b      	ldr	r3, [r3, #16]
 800c454:	f003 0310 	and.w	r3, r3, #16
 800c458:	2b10      	cmp	r3, #16
 800c45a:	d0f0      	beq.n	800c43e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800c45c:	2300      	movs	r3, #0
}
 800c45e:	4618      	mov	r0, r3
 800c460:	3714      	adds	r7, #20
 800c462:	46bd      	mov	sp, r7
 800c464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c468:	4770      	bx	lr
 800c46a:	bf00      	nop
 800c46c:	00030d40 	.word	0x00030d40

0800c470 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800c470:	b480      	push	{r7}
 800c472:	b085      	sub	sp, #20
 800c474:	af00      	add	r7, sp, #0
 800c476:	6078      	str	r0, [r7, #4]
 800c478:	460b      	mov	r3, r1
 800c47a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800c480:	68fb      	ldr	r3, [r7, #12]
 800c482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	68f9      	ldr	r1, [r7, #12]
 800c48c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c490:	4313      	orrs	r3, r2
 800c492:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800c494:	2300      	movs	r3, #0
}
 800c496:	4618      	mov	r0, r3
 800c498:	3714      	adds	r7, #20
 800c49a:	46bd      	mov	sp, r7
 800c49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a0:	4770      	bx	lr

0800c4a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c4a2:	b480      	push	{r7}
 800c4a4:	b087      	sub	sp, #28
 800c4a6:	af00      	add	r7, sp, #0
 800c4a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800c4ae:	693b      	ldr	r3, [r7, #16]
 800c4b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c4b4:	689b      	ldr	r3, [r3, #8]
 800c4b6:	f003 0306 	and.w	r3, r3, #6
 800c4ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800c4bc:	68fb      	ldr	r3, [r7, #12]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d102      	bne.n	800c4c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	75fb      	strb	r3, [r7, #23]
 800c4c6:	e00a      	b.n	800c4de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800c4c8:	68fb      	ldr	r3, [r7, #12]
 800c4ca:	2b02      	cmp	r3, #2
 800c4cc:	d002      	beq.n	800c4d4 <USB_GetDevSpeed+0x32>
 800c4ce:	68fb      	ldr	r3, [r7, #12]
 800c4d0:	2b06      	cmp	r3, #6
 800c4d2:	d102      	bne.n	800c4da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800c4d4:	2302      	movs	r3, #2
 800c4d6:	75fb      	strb	r3, [r7, #23]
 800c4d8:	e001      	b.n	800c4de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800c4da:	230f      	movs	r3, #15
 800c4dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800c4de:	7dfb      	ldrb	r3, [r7, #23]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	371c      	adds	r7, #28
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ea:	4770      	bx	lr

0800c4ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c4ec:	b480      	push	{r7}
 800c4ee:	b085      	sub	sp, #20
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	6078      	str	r0, [r7, #4]
 800c4f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c4fa:	683b      	ldr	r3, [r7, #0]
 800c4fc:	781b      	ldrb	r3, [r3, #0]
 800c4fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c500:	683b      	ldr	r3, [r7, #0]
 800c502:	785b      	ldrb	r3, [r3, #1]
 800c504:	2b01      	cmp	r3, #1
 800c506:	d139      	bne.n	800c57c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800c508:	68fb      	ldr	r3, [r7, #12]
 800c50a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c50e:	69da      	ldr	r2, [r3, #28]
 800c510:	683b      	ldr	r3, [r7, #0]
 800c512:	781b      	ldrb	r3, [r3, #0]
 800c514:	f003 030f 	and.w	r3, r3, #15
 800c518:	2101      	movs	r1, #1
 800c51a:	fa01 f303 	lsl.w	r3, r1, r3
 800c51e:	b29b      	uxth	r3, r3
 800c520:	68f9      	ldr	r1, [r7, #12]
 800c522:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c526:	4313      	orrs	r3, r2
 800c528:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800c52a:	68bb      	ldr	r3, [r7, #8]
 800c52c:	015a      	lsls	r2, r3, #5
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	4413      	add	r3, r2
 800c532:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	d153      	bne.n	800c5e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	015a      	lsls	r2, r3, #5
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	4413      	add	r3, r2
 800c548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	683b      	ldr	r3, [r7, #0]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c556:	683b      	ldr	r3, [r7, #0]
 800c558:	78db      	ldrb	r3, [r3, #3]
 800c55a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c55c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	059b      	lsls	r3, r3, #22
 800c562:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800c564:	431a      	orrs	r2, r3
 800c566:	68bb      	ldr	r3, [r7, #8]
 800c568:	0159      	lsls	r1, r3, #5
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	440b      	add	r3, r1
 800c56e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c572:	4619      	mov	r1, r3
 800c574:	4b20      	ldr	r3, [pc, #128]	; (800c5f8 <USB_ActivateEndpoint+0x10c>)
 800c576:	4313      	orrs	r3, r2
 800c578:	600b      	str	r3, [r1, #0]
 800c57a:	e035      	b.n	800c5e8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c582:	69da      	ldr	r2, [r3, #28]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	f003 030f 	and.w	r3, r3, #15
 800c58c:	2101      	movs	r1, #1
 800c58e:	fa01 f303 	lsl.w	r3, r1, r3
 800c592:	041b      	lsls	r3, r3, #16
 800c594:	68f9      	ldr	r1, [r7, #12]
 800c596:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c59a:	4313      	orrs	r3, r2
 800c59c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d119      	bne.n	800c5e8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	015a      	lsls	r2, r3, #5
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	4413      	add	r3, r2
 800c5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c0:	681a      	ldr	r2, [r3, #0]
 800c5c2:	683b      	ldr	r3, [r7, #0]
 800c5c4:	689b      	ldr	r3, [r3, #8]
 800c5c6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	78db      	ldrb	r3, [r3, #3]
 800c5ce:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800c5d0:	430b      	orrs	r3, r1
 800c5d2:	431a      	orrs	r2, r3
 800c5d4:	68bb      	ldr	r3, [r7, #8]
 800c5d6:	0159      	lsls	r1, r3, #5
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	440b      	add	r3, r1
 800c5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	4b05      	ldr	r3, [pc, #20]	; (800c5f8 <USB_ActivateEndpoint+0x10c>)
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800c5e8:	2300      	movs	r3, #0
}
 800c5ea:	4618      	mov	r0, r3
 800c5ec:	3714      	adds	r7, #20
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f4:	4770      	bx	lr
 800c5f6:	bf00      	nop
 800c5f8:	10008000 	.word	0x10008000

0800c5fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5fc:	b480      	push	{r7}
 800c5fe:	b085      	sub	sp, #20
 800c600:	af00      	add	r7, sp, #0
 800c602:	6078      	str	r0, [r7, #4]
 800c604:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	781b      	ldrb	r3, [r3, #0]
 800c60e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800c610:	683b      	ldr	r3, [r7, #0]
 800c612:	785b      	ldrb	r3, [r3, #1]
 800c614:	2b01      	cmp	r3, #1
 800c616:	d161      	bne.n	800c6dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	015a      	lsls	r2, r3, #5
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	4413      	add	r3, r2
 800c620:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c62a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c62e:	d11f      	bne.n	800c670 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	0151      	lsls	r1, r2, #5
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	440a      	add	r2, r1
 800c646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c64a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c64e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800c650:	68bb      	ldr	r3, [r7, #8]
 800c652:	015a      	lsls	r2, r3, #5
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	4413      	add	r3, r2
 800c658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	68ba      	ldr	r2, [r7, #8]
 800c660:	0151      	lsls	r1, r2, #5
 800c662:	68fa      	ldr	r2, [r7, #12]
 800c664:	440a      	add	r2, r1
 800c666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c66a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c66e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c676:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	f003 030f 	and.w	r3, r3, #15
 800c680:	2101      	movs	r1, #1
 800c682:	fa01 f303 	lsl.w	r3, r1, r3
 800c686:	b29b      	uxth	r3, r3
 800c688:	43db      	mvns	r3, r3
 800c68a:	68f9      	ldr	r1, [r7, #12]
 800c68c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c690:	4013      	ands	r3, r2
 800c692:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c69a:	69da      	ldr	r2, [r3, #28]
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	f003 030f 	and.w	r3, r3, #15
 800c6a4:	2101      	movs	r1, #1
 800c6a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	43db      	mvns	r3, r3
 800c6ae:	68f9      	ldr	r1, [r7, #12]
 800c6b0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6b4:	4013      	ands	r3, r2
 800c6b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800c6b8:	68bb      	ldr	r3, [r7, #8]
 800c6ba:	015a      	lsls	r2, r3, #5
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4413      	add	r3, r2
 800c6c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6c4:	681a      	ldr	r2, [r3, #0]
 800c6c6:	68bb      	ldr	r3, [r7, #8]
 800c6c8:	0159      	lsls	r1, r3, #5
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	440b      	add	r3, r1
 800c6ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	4b35      	ldr	r3, [pc, #212]	; (800c7ac <USB_DeactivateEndpoint+0x1b0>)
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	600b      	str	r3, [r1, #0]
 800c6da:	e060      	b.n	800c79e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c6dc:	68bb      	ldr	r3, [r7, #8]
 800c6de:	015a      	lsls	r2, r3, #5
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	4413      	add	r3, r2
 800c6e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6f2:	d11f      	bne.n	800c734 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800c6f4:	68bb      	ldr	r3, [r7, #8]
 800c6f6:	015a      	lsls	r2, r3, #5
 800c6f8:	68fb      	ldr	r3, [r7, #12]
 800c6fa:	4413      	add	r3, r2
 800c6fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	68ba      	ldr	r2, [r7, #8]
 800c704:	0151      	lsls	r1, r2, #5
 800c706:	68fa      	ldr	r2, [r7, #12]
 800c708:	440a      	add	r2, r1
 800c70a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c70e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c712:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800c714:	68bb      	ldr	r3, [r7, #8]
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68ba      	ldr	r2, [r7, #8]
 800c724:	0151      	lsls	r1, r2, #5
 800c726:	68fa      	ldr	r2, [r7, #12]
 800c728:	440a      	add	r2, r1
 800c72a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c72e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c732:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	781b      	ldrb	r3, [r3, #0]
 800c740:	f003 030f 	and.w	r3, r3, #15
 800c744:	2101      	movs	r1, #1
 800c746:	fa01 f303 	lsl.w	r3, r1, r3
 800c74a:	041b      	lsls	r3, r3, #16
 800c74c:	43db      	mvns	r3, r3
 800c74e:	68f9      	ldr	r1, [r7, #12]
 800c750:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c754:	4013      	ands	r3, r2
 800c756:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c75e:	69da      	ldr	r2, [r3, #28]
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	781b      	ldrb	r3, [r3, #0]
 800c764:	f003 030f 	and.w	r3, r3, #15
 800c768:	2101      	movs	r1, #1
 800c76a:	fa01 f303 	lsl.w	r3, r1, r3
 800c76e:	041b      	lsls	r3, r3, #16
 800c770:	43db      	mvns	r3, r3
 800c772:	68f9      	ldr	r1, [r7, #12]
 800c774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c778:	4013      	ands	r3, r2
 800c77a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800c77c:	68bb      	ldr	r3, [r7, #8]
 800c77e:	015a      	lsls	r2, r3, #5
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	4413      	add	r3, r2
 800c784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c788:	681a      	ldr	r2, [r3, #0]
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	0159      	lsls	r1, r3, #5
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	440b      	add	r3, r1
 800c792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c796:	4619      	mov	r1, r3
 800c798:	4b05      	ldr	r3, [pc, #20]	; (800c7b0 <USB_DeactivateEndpoint+0x1b4>)
 800c79a:	4013      	ands	r3, r2
 800c79c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800c79e:	2300      	movs	r3, #0
}
 800c7a0:	4618      	mov	r0, r3
 800c7a2:	3714      	adds	r7, #20
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr
 800c7ac:	ec337800 	.word	0xec337800
 800c7b0:	eff37800 	.word	0xeff37800

0800c7b4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c7b4:	b580      	push	{r7, lr}
 800c7b6:	b08a      	sub	sp, #40	; 0x28
 800c7b8:	af02      	add	r7, sp, #8
 800c7ba:	60f8      	str	r0, [r7, #12]
 800c7bc:	60b9      	str	r1, [r7, #8]
 800c7be:	4613      	mov	r3, r2
 800c7c0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800c7c6:	68bb      	ldr	r3, [r7, #8]
 800c7c8:	781b      	ldrb	r3, [r3, #0]
 800c7ca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	785b      	ldrb	r3, [r3, #1]
 800c7d0:	2b01      	cmp	r3, #1
 800c7d2:	f040 8163 	bne.w	800ca9c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c7d6:	68bb      	ldr	r3, [r7, #8]
 800c7d8:	695b      	ldr	r3, [r3, #20]
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d132      	bne.n	800c844 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c7de:	69bb      	ldr	r3, [r7, #24]
 800c7e0:	015a      	lsls	r2, r3, #5
 800c7e2:	69fb      	ldr	r3, [r7, #28]
 800c7e4:	4413      	add	r3, r2
 800c7e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7ea:	691a      	ldr	r2, [r3, #16]
 800c7ec:	69bb      	ldr	r3, [r7, #24]
 800c7ee:	0159      	lsls	r1, r3, #5
 800c7f0:	69fb      	ldr	r3, [r7, #28]
 800c7f2:	440b      	add	r3, r1
 800c7f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c7f8:	4619      	mov	r1, r3
 800c7fa:	4ba5      	ldr	r3, [pc, #660]	; (800ca90 <USB_EPStartXfer+0x2dc>)
 800c7fc:	4013      	ands	r3, r2
 800c7fe:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c800:	69bb      	ldr	r3, [r7, #24]
 800c802:	015a      	lsls	r2, r3, #5
 800c804:	69fb      	ldr	r3, [r7, #28]
 800c806:	4413      	add	r3, r2
 800c808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c80c:	691b      	ldr	r3, [r3, #16]
 800c80e:	69ba      	ldr	r2, [r7, #24]
 800c810:	0151      	lsls	r1, r2, #5
 800c812:	69fa      	ldr	r2, [r7, #28]
 800c814:	440a      	add	r2, r1
 800c816:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c81a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c81e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c820:	69bb      	ldr	r3, [r7, #24]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	69fb      	ldr	r3, [r7, #28]
 800c826:	4413      	add	r3, r2
 800c828:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c82c:	691a      	ldr	r2, [r3, #16]
 800c82e:	69bb      	ldr	r3, [r7, #24]
 800c830:	0159      	lsls	r1, r3, #5
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	440b      	add	r3, r1
 800c836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c83a:	4619      	mov	r1, r3
 800c83c:	4b95      	ldr	r3, [pc, #596]	; (800ca94 <USB_EPStartXfer+0x2e0>)
 800c83e:	4013      	ands	r3, r2
 800c840:	610b      	str	r3, [r1, #16]
 800c842:	e074      	b.n	800c92e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c850:	691a      	ldr	r2, [r3, #16]
 800c852:	69bb      	ldr	r3, [r7, #24]
 800c854:	0159      	lsls	r1, r3, #5
 800c856:	69fb      	ldr	r3, [r7, #28]
 800c858:	440b      	add	r3, r1
 800c85a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c85e:	4619      	mov	r1, r3
 800c860:	4b8c      	ldr	r3, [pc, #560]	; (800ca94 <USB_EPStartXfer+0x2e0>)
 800c862:	4013      	ands	r3, r2
 800c864:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c866:	69bb      	ldr	r3, [r7, #24]
 800c868:	015a      	lsls	r2, r3, #5
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	4413      	add	r3, r2
 800c86e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c872:	691a      	ldr	r2, [r3, #16]
 800c874:	69bb      	ldr	r3, [r7, #24]
 800c876:	0159      	lsls	r1, r3, #5
 800c878:	69fb      	ldr	r3, [r7, #28]
 800c87a:	440b      	add	r3, r1
 800c87c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c880:	4619      	mov	r1, r3
 800c882:	4b83      	ldr	r3, [pc, #524]	; (800ca90 <USB_EPStartXfer+0x2dc>)
 800c884:	4013      	ands	r3, r2
 800c886:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c888:	69bb      	ldr	r3, [r7, #24]
 800c88a:	015a      	lsls	r2, r3, #5
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	4413      	add	r3, r2
 800c890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c894:	691a      	ldr	r2, [r3, #16]
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	6959      	ldr	r1, [r3, #20]
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	689b      	ldr	r3, [r3, #8]
 800c89e:	440b      	add	r3, r1
 800c8a0:	1e59      	subs	r1, r3, #1
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800c8aa:	04d9      	lsls	r1, r3, #19
 800c8ac:	4b7a      	ldr	r3, [pc, #488]	; (800ca98 <USB_EPStartXfer+0x2e4>)
 800c8ae:	400b      	ands	r3, r1
 800c8b0:	69b9      	ldr	r1, [r7, #24]
 800c8b2:	0148      	lsls	r0, r1, #5
 800c8b4:	69f9      	ldr	r1, [r7, #28]
 800c8b6:	4401      	add	r1, r0
 800c8b8:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c8bc:	4313      	orrs	r3, r2
 800c8be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c8c0:	69bb      	ldr	r3, [r7, #24]
 800c8c2:	015a      	lsls	r2, r3, #5
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	4413      	add	r3, r2
 800c8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8cc:	691a      	ldr	r2, [r3, #16]
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	695b      	ldr	r3, [r3, #20]
 800c8d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c8d6:	69b9      	ldr	r1, [r7, #24]
 800c8d8:	0148      	lsls	r0, r1, #5
 800c8da:	69f9      	ldr	r1, [r7, #28]
 800c8dc:	4401      	add	r1, r0
 800c8de:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c8e2:	4313      	orrs	r3, r2
 800c8e4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c8e6:	68bb      	ldr	r3, [r7, #8]
 800c8e8:	78db      	ldrb	r3, [r3, #3]
 800c8ea:	2b01      	cmp	r3, #1
 800c8ec:	d11f      	bne.n	800c92e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c8ee:	69bb      	ldr	r3, [r7, #24]
 800c8f0:	015a      	lsls	r2, r3, #5
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	4413      	add	r3, r2
 800c8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8fa:	691b      	ldr	r3, [r3, #16]
 800c8fc:	69ba      	ldr	r2, [r7, #24]
 800c8fe:	0151      	lsls	r1, r2, #5
 800c900:	69fa      	ldr	r2, [r7, #28]
 800c902:	440a      	add	r2, r1
 800c904:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c908:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c90c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c90e:	69bb      	ldr	r3, [r7, #24]
 800c910:	015a      	lsls	r2, r3, #5
 800c912:	69fb      	ldr	r3, [r7, #28]
 800c914:	4413      	add	r3, r2
 800c916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c91a:	691b      	ldr	r3, [r3, #16]
 800c91c:	69ba      	ldr	r2, [r7, #24]
 800c91e:	0151      	lsls	r1, r2, #5
 800c920:	69fa      	ldr	r2, [r7, #28]
 800c922:	440a      	add	r2, r1
 800c924:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c928:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c92c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c92e:	79fb      	ldrb	r3, [r7, #7]
 800c930:	2b01      	cmp	r3, #1
 800c932:	d14b      	bne.n	800c9cc <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c934:	68bb      	ldr	r3, [r7, #8]
 800c936:	691b      	ldr	r3, [r3, #16]
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d009      	beq.n	800c950 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c93c:	69bb      	ldr	r3, [r7, #24]
 800c93e:	015a      	lsls	r2, r3, #5
 800c940:	69fb      	ldr	r3, [r7, #28]
 800c942:	4413      	add	r3, r2
 800c944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c948:	461a      	mov	r2, r3
 800c94a:	68bb      	ldr	r3, [r7, #8]
 800c94c:	691b      	ldr	r3, [r3, #16]
 800c94e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	78db      	ldrb	r3, [r3, #3]
 800c954:	2b01      	cmp	r3, #1
 800c956:	d128      	bne.n	800c9aa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c95e:	689b      	ldr	r3, [r3, #8]
 800c960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c964:	2b00      	cmp	r3, #0
 800c966:	d110      	bne.n	800c98a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c968:	69bb      	ldr	r3, [r7, #24]
 800c96a:	015a      	lsls	r2, r3, #5
 800c96c:	69fb      	ldr	r3, [r7, #28]
 800c96e:	4413      	add	r3, r2
 800c970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	69ba      	ldr	r2, [r7, #24]
 800c978:	0151      	lsls	r1, r2, #5
 800c97a:	69fa      	ldr	r2, [r7, #28]
 800c97c:	440a      	add	r2, r1
 800c97e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c982:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c986:	6013      	str	r3, [r2, #0]
 800c988:	e00f      	b.n	800c9aa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c98a:	69bb      	ldr	r3, [r7, #24]
 800c98c:	015a      	lsls	r2, r3, #5
 800c98e:	69fb      	ldr	r3, [r7, #28]
 800c990:	4413      	add	r3, r2
 800c992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	69ba      	ldr	r2, [r7, #24]
 800c99a:	0151      	lsls	r1, r2, #5
 800c99c:	69fa      	ldr	r2, [r7, #28]
 800c99e:	440a      	add	r2, r1
 800c9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9a8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9aa:	69bb      	ldr	r3, [r7, #24]
 800c9ac:	015a      	lsls	r2, r3, #5
 800c9ae:	69fb      	ldr	r3, [r7, #28]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	69ba      	ldr	r2, [r7, #24]
 800c9ba:	0151      	lsls	r1, r2, #5
 800c9bc:	69fa      	ldr	r2, [r7, #28]
 800c9be:	440a      	add	r2, r1
 800c9c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9c4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9c8:	6013      	str	r3, [r2, #0]
 800c9ca:	e133      	b.n	800cc34 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c9cc:	69bb      	ldr	r3, [r7, #24]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	69fb      	ldr	r3, [r7, #28]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	69ba      	ldr	r2, [r7, #24]
 800c9dc:	0151      	lsls	r1, r2, #5
 800c9de:	69fa      	ldr	r2, [r7, #28]
 800c9e0:	440a      	add	r2, r1
 800c9e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c9ea:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	78db      	ldrb	r3, [r3, #3]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d015      	beq.n	800ca20 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	f000 811b 	beq.w	800cc34 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c9fe:	69fb      	ldr	r3, [r7, #28]
 800ca00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	781b      	ldrb	r3, [r3, #0]
 800ca0a:	f003 030f 	and.w	r3, r3, #15
 800ca0e:	2101      	movs	r1, #1
 800ca10:	fa01 f303 	lsl.w	r3, r1, r3
 800ca14:	69f9      	ldr	r1, [r7, #28]
 800ca16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ca1a:	4313      	orrs	r3, r2
 800ca1c:	634b      	str	r3, [r1, #52]	; 0x34
 800ca1e:	e109      	b.n	800cc34 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800ca20:	69fb      	ldr	r3, [r7, #28]
 800ca22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca26:	689b      	ldr	r3, [r3, #8]
 800ca28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d110      	bne.n	800ca52 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800ca30:	69bb      	ldr	r3, [r7, #24]
 800ca32:	015a      	lsls	r2, r3, #5
 800ca34:	69fb      	ldr	r3, [r7, #28]
 800ca36:	4413      	add	r3, r2
 800ca38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	69ba      	ldr	r2, [r7, #24]
 800ca40:	0151      	lsls	r1, r2, #5
 800ca42:	69fa      	ldr	r2, [r7, #28]
 800ca44:	440a      	add	r2, r1
 800ca46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca4a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	e00f      	b.n	800ca72 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800ca52:	69bb      	ldr	r3, [r7, #24]
 800ca54:	015a      	lsls	r2, r3, #5
 800ca56:	69fb      	ldr	r3, [r7, #28]
 800ca58:	4413      	add	r3, r2
 800ca5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca5e:	681b      	ldr	r3, [r3, #0]
 800ca60:	69ba      	ldr	r2, [r7, #24]
 800ca62:	0151      	lsls	r1, r2, #5
 800ca64:	69fa      	ldr	r2, [r7, #28]
 800ca66:	440a      	add	r2, r1
 800ca68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ca70:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800ca72:	68bb      	ldr	r3, [r7, #8]
 800ca74:	68d9      	ldr	r1, [r3, #12]
 800ca76:	68bb      	ldr	r3, [r7, #8]
 800ca78:	781a      	ldrb	r2, [r3, #0]
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	695b      	ldr	r3, [r3, #20]
 800ca7e:	b298      	uxth	r0, r3
 800ca80:	79fb      	ldrb	r3, [r7, #7]
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	4603      	mov	r3, r0
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f000 fa38 	bl	800cefc <USB_WritePacket>
 800ca8c:	e0d2      	b.n	800cc34 <USB_EPStartXfer+0x480>
 800ca8e:	bf00      	nop
 800ca90:	e007ffff 	.word	0xe007ffff
 800ca94:	fff80000 	.word	0xfff80000
 800ca98:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caa8:	691a      	ldr	r2, [r3, #16]
 800caaa:	69bb      	ldr	r3, [r7, #24]
 800caac:	0159      	lsls	r1, r3, #5
 800caae:	69fb      	ldr	r3, [r7, #28]
 800cab0:	440b      	add	r3, r1
 800cab2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cab6:	4619      	mov	r1, r3
 800cab8:	4b61      	ldr	r3, [pc, #388]	; (800cc40 <USB_EPStartXfer+0x48c>)
 800caba:	4013      	ands	r3, r2
 800cabc:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800cabe:	69bb      	ldr	r3, [r7, #24]
 800cac0:	015a      	lsls	r2, r3, #5
 800cac2:	69fb      	ldr	r3, [r7, #28]
 800cac4:	4413      	add	r3, r2
 800cac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caca:	691a      	ldr	r2, [r3, #16]
 800cacc:	69bb      	ldr	r3, [r7, #24]
 800cace:	0159      	lsls	r1, r3, #5
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	440b      	add	r3, r1
 800cad4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cad8:	4619      	mov	r1, r3
 800cada:	4b5a      	ldr	r3, [pc, #360]	; (800cc44 <USB_EPStartXfer+0x490>)
 800cadc:	4013      	ands	r3, r2
 800cade:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800cae0:	68bb      	ldr	r3, [r7, #8]
 800cae2:	695b      	ldr	r3, [r3, #20]
 800cae4:	2b00      	cmp	r3, #0
 800cae6:	d123      	bne.n	800cb30 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800cae8:	69bb      	ldr	r3, [r7, #24]
 800caea:	015a      	lsls	r2, r3, #5
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	4413      	add	r3, r2
 800caf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caf4:	691a      	ldr	r2, [r3, #16]
 800caf6:	68bb      	ldr	r3, [r7, #8]
 800caf8:	689b      	ldr	r3, [r3, #8]
 800cafa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cafe:	69b9      	ldr	r1, [r7, #24]
 800cb00:	0148      	lsls	r0, r1, #5
 800cb02:	69f9      	ldr	r1, [r7, #28]
 800cb04:	4401      	add	r1, r0
 800cb06:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb0a:	4313      	orrs	r3, r2
 800cb0c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cb0e:	69bb      	ldr	r3, [r7, #24]
 800cb10:	015a      	lsls	r2, r3, #5
 800cb12:	69fb      	ldr	r3, [r7, #28]
 800cb14:	4413      	add	r3, r2
 800cb16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb1a:	691b      	ldr	r3, [r3, #16]
 800cb1c:	69ba      	ldr	r2, [r7, #24]
 800cb1e:	0151      	lsls	r1, r2, #5
 800cb20:	69fa      	ldr	r2, [r7, #28]
 800cb22:	440a      	add	r2, r1
 800cb24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cb28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cb2c:	6113      	str	r3, [r2, #16]
 800cb2e:	e033      	b.n	800cb98 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	695a      	ldr	r2, [r3, #20]
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	689b      	ldr	r3, [r3, #8]
 800cb38:	4413      	add	r3, r2
 800cb3a:	1e5a      	subs	r2, r3, #1
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb44:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800cb46:	69bb      	ldr	r3, [r7, #24]
 800cb48:	015a      	lsls	r2, r3, #5
 800cb4a:	69fb      	ldr	r3, [r7, #28]
 800cb4c:	4413      	add	r3, r2
 800cb4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb52:	691a      	ldr	r2, [r3, #16]
 800cb54:	8afb      	ldrh	r3, [r7, #22]
 800cb56:	04d9      	lsls	r1, r3, #19
 800cb58:	4b3b      	ldr	r3, [pc, #236]	; (800cc48 <USB_EPStartXfer+0x494>)
 800cb5a:	400b      	ands	r3, r1
 800cb5c:	69b9      	ldr	r1, [r7, #24]
 800cb5e:	0148      	lsls	r0, r1, #5
 800cb60:	69f9      	ldr	r1, [r7, #28]
 800cb62:	4401      	add	r1, r0
 800cb64:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb68:	4313      	orrs	r3, r2
 800cb6a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cb78:	691a      	ldr	r2, [r3, #16]
 800cb7a:	68bb      	ldr	r3, [r7, #8]
 800cb7c:	689b      	ldr	r3, [r3, #8]
 800cb7e:	8af9      	ldrh	r1, [r7, #22]
 800cb80:	fb01 f303 	mul.w	r3, r1, r3
 800cb84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cb88:	69b9      	ldr	r1, [r7, #24]
 800cb8a:	0148      	lsls	r0, r1, #5
 800cb8c:	69f9      	ldr	r1, [r7, #28]
 800cb8e:	4401      	add	r1, r0
 800cb90:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800cb94:	4313      	orrs	r3, r2
 800cb96:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cb98:	79fb      	ldrb	r3, [r7, #7]
 800cb9a:	2b01      	cmp	r3, #1
 800cb9c:	d10d      	bne.n	800cbba <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cb9e:	68bb      	ldr	r3, [r7, #8]
 800cba0:	68db      	ldr	r3, [r3, #12]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d009      	beq.n	800cbba <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	68d9      	ldr	r1, [r3, #12]
 800cbaa:	69bb      	ldr	r3, [r7, #24]
 800cbac:	015a      	lsls	r2, r3, #5
 800cbae:	69fb      	ldr	r3, [r7, #28]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbb6:	460a      	mov	r2, r1
 800cbb8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800cbba:	68bb      	ldr	r3, [r7, #8]
 800cbbc:	78db      	ldrb	r3, [r3, #3]
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d128      	bne.n	800cc14 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d110      	bne.n	800cbf4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800cbd2:	69bb      	ldr	r3, [r7, #24]
 800cbd4:	015a      	lsls	r2, r3, #5
 800cbd6:	69fb      	ldr	r3, [r7, #28]
 800cbd8:	4413      	add	r3, r2
 800cbda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	69ba      	ldr	r2, [r7, #24]
 800cbe2:	0151      	lsls	r1, r2, #5
 800cbe4:	69fa      	ldr	r2, [r7, #28]
 800cbe6:	440a      	add	r2, r1
 800cbe8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cbec:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800cbf0:	6013      	str	r3, [r2, #0]
 800cbf2:	e00f      	b.n	800cc14 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800cbf4:	69bb      	ldr	r3, [r7, #24]
 800cbf6:	015a      	lsls	r2, r3, #5
 800cbf8:	69fb      	ldr	r3, [r7, #28]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	69ba      	ldr	r2, [r7, #24]
 800cc04:	0151      	lsls	r1, r2, #5
 800cc06:	69fa      	ldr	r2, [r7, #28]
 800cc08:	440a      	add	r2, r1
 800cc0a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc12:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	015a      	lsls	r2, r3, #5
 800cc18:	69fb      	ldr	r3, [r7, #28]
 800cc1a:	4413      	add	r3, r2
 800cc1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cc20:	681b      	ldr	r3, [r3, #0]
 800cc22:	69ba      	ldr	r2, [r7, #24]
 800cc24:	0151      	lsls	r1, r2, #5
 800cc26:	69fa      	ldr	r2, [r7, #28]
 800cc28:	440a      	add	r2, r1
 800cc2a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cc2e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cc32:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3720      	adds	r7, #32
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	fff80000 	.word	0xfff80000
 800cc44:	e007ffff 	.word	0xe007ffff
 800cc48:	1ff80000 	.word	0x1ff80000

0800cc4c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800cc4c:	b480      	push	{r7}
 800cc4e:	b087      	sub	sp, #28
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	60f8      	str	r0, [r7, #12]
 800cc54:	60b9      	str	r1, [r7, #8]
 800cc56:	4613      	mov	r3, r2
 800cc58:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800cc5e:	68bb      	ldr	r3, [r7, #8]
 800cc60:	781b      	ldrb	r3, [r3, #0]
 800cc62:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	785b      	ldrb	r3, [r3, #1]
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	f040 80cd 	bne.w	800ce08 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800cc6e:	68bb      	ldr	r3, [r7, #8]
 800cc70:	695b      	ldr	r3, [r3, #20]
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d132      	bne.n	800ccdc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800cc76:	693b      	ldr	r3, [r7, #16]
 800cc78:	015a      	lsls	r2, r3, #5
 800cc7a:	697b      	ldr	r3, [r7, #20]
 800cc7c:	4413      	add	r3, r2
 800cc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc82:	691a      	ldr	r2, [r3, #16]
 800cc84:	693b      	ldr	r3, [r7, #16]
 800cc86:	0159      	lsls	r1, r3, #5
 800cc88:	697b      	ldr	r3, [r7, #20]
 800cc8a:	440b      	add	r3, r1
 800cc8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cc90:	4619      	mov	r1, r3
 800cc92:	4b98      	ldr	r3, [pc, #608]	; (800cef4 <USB_EP0StartXfer+0x2a8>)
 800cc94:	4013      	ands	r3, r2
 800cc96:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	015a      	lsls	r2, r3, #5
 800cc9c:	697b      	ldr	r3, [r7, #20]
 800cc9e:	4413      	add	r3, r2
 800cca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cca4:	691b      	ldr	r3, [r3, #16]
 800cca6:	693a      	ldr	r2, [r7, #16]
 800cca8:	0151      	lsls	r1, r2, #5
 800ccaa:	697a      	ldr	r2, [r7, #20]
 800ccac:	440a      	add	r2, r1
 800ccae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ccb2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ccb6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccb8:	693b      	ldr	r3, [r7, #16]
 800ccba:	015a      	lsls	r2, r3, #5
 800ccbc:	697b      	ldr	r3, [r7, #20]
 800ccbe:	4413      	add	r3, r2
 800ccc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccc4:	691a      	ldr	r2, [r3, #16]
 800ccc6:	693b      	ldr	r3, [r7, #16]
 800ccc8:	0159      	lsls	r1, r3, #5
 800ccca:	697b      	ldr	r3, [r7, #20]
 800cccc:	440b      	add	r3, r1
 800ccce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccd2:	4619      	mov	r1, r3
 800ccd4:	4b88      	ldr	r3, [pc, #544]	; (800cef8 <USB_EP0StartXfer+0x2ac>)
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	610b      	str	r3, [r1, #16]
 800ccda:	e04e      	b.n	800cd7a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800ccdc:	693b      	ldr	r3, [r7, #16]
 800ccde:	015a      	lsls	r2, r3, #5
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	4413      	add	r3, r2
 800cce4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cce8:	691a      	ldr	r2, [r3, #16]
 800ccea:	693b      	ldr	r3, [r7, #16]
 800ccec:	0159      	lsls	r1, r3, #5
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	440b      	add	r3, r1
 800ccf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ccf6:	4619      	mov	r1, r3
 800ccf8:	4b7f      	ldr	r3, [pc, #508]	; (800cef8 <USB_EP0StartXfer+0x2ac>)
 800ccfa:	4013      	ands	r3, r2
 800ccfc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800ccfe:	693b      	ldr	r3, [r7, #16]
 800cd00:	015a      	lsls	r2, r3, #5
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	4413      	add	r3, r2
 800cd06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd0a:	691a      	ldr	r2, [r3, #16]
 800cd0c:	693b      	ldr	r3, [r7, #16]
 800cd0e:	0159      	lsls	r1, r3, #5
 800cd10:	697b      	ldr	r3, [r7, #20]
 800cd12:	440b      	add	r3, r1
 800cd14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd18:	4619      	mov	r1, r3
 800cd1a:	4b76      	ldr	r3, [pc, #472]	; (800cef4 <USB_EP0StartXfer+0x2a8>)
 800cd1c:	4013      	ands	r3, r2
 800cd1e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800cd20:	68bb      	ldr	r3, [r7, #8]
 800cd22:	695a      	ldr	r2, [r3, #20]
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	689b      	ldr	r3, [r3, #8]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d903      	bls.n	800cd34 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	689a      	ldr	r2, [r3, #8]
 800cd30:	68bb      	ldr	r3, [r7, #8]
 800cd32:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800cd34:	693b      	ldr	r3, [r7, #16]
 800cd36:	015a      	lsls	r2, r3, #5
 800cd38:	697b      	ldr	r3, [r7, #20]
 800cd3a:	4413      	add	r3, r2
 800cd3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd40:	691b      	ldr	r3, [r3, #16]
 800cd42:	693a      	ldr	r2, [r7, #16]
 800cd44:	0151      	lsls	r1, r2, #5
 800cd46:	697a      	ldr	r2, [r7, #20]
 800cd48:	440a      	add	r2, r1
 800cd4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cd4e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cd52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800cd54:	693b      	ldr	r3, [r7, #16]
 800cd56:	015a      	lsls	r2, r3, #5
 800cd58:	697b      	ldr	r3, [r7, #20]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd60:	691a      	ldr	r2, [r3, #16]
 800cd62:	68bb      	ldr	r3, [r7, #8]
 800cd64:	695b      	ldr	r3, [r3, #20]
 800cd66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800cd6a:	6939      	ldr	r1, [r7, #16]
 800cd6c:	0148      	lsls	r0, r1, #5
 800cd6e:	6979      	ldr	r1, [r7, #20]
 800cd70:	4401      	add	r1, r0
 800cd72:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800cd76:	4313      	orrs	r3, r2
 800cd78:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800cd7a:	79fb      	ldrb	r3, [r7, #7]
 800cd7c:	2b01      	cmp	r3, #1
 800cd7e:	d11e      	bne.n	800cdbe <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800cd80:	68bb      	ldr	r3, [r7, #8]
 800cd82:	691b      	ldr	r3, [r3, #16]
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d009      	beq.n	800cd9c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800cd88:	693b      	ldr	r3, [r7, #16]
 800cd8a:	015a      	lsls	r2, r3, #5
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	4413      	add	r3, r2
 800cd90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd94:	461a      	mov	r2, r3
 800cd96:	68bb      	ldr	r3, [r7, #8]
 800cd98:	691b      	ldr	r3, [r3, #16]
 800cd9a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cd9c:	693b      	ldr	r3, [r7, #16]
 800cd9e:	015a      	lsls	r2, r3, #5
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	4413      	add	r3, r2
 800cda4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	0151      	lsls	r1, r2, #5
 800cdae:	697a      	ldr	r2, [r7, #20]
 800cdb0:	440a      	add	r2, r1
 800cdb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdb6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cdba:	6013      	str	r3, [r2, #0]
 800cdbc:	e092      	b.n	800cee4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800cdbe:	693b      	ldr	r3, [r7, #16]
 800cdc0:	015a      	lsls	r2, r3, #5
 800cdc2:	697b      	ldr	r3, [r7, #20]
 800cdc4:	4413      	add	r3, r2
 800cdc6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	693a      	ldr	r2, [r7, #16]
 800cdce:	0151      	lsls	r1, r2, #5
 800cdd0:	697a      	ldr	r2, [r7, #20]
 800cdd2:	440a      	add	r2, r1
 800cdd4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800cdd8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cddc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	695b      	ldr	r3, [r3, #20]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d07e      	beq.n	800cee4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800cde6:	697b      	ldr	r3, [r7, #20]
 800cde8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cdec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cdee:	68bb      	ldr	r3, [r7, #8]
 800cdf0:	781b      	ldrb	r3, [r3, #0]
 800cdf2:	f003 030f 	and.w	r3, r3, #15
 800cdf6:	2101      	movs	r1, #1
 800cdf8:	fa01 f303 	lsl.w	r3, r1, r3
 800cdfc:	6979      	ldr	r1, [r7, #20]
 800cdfe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ce02:	4313      	orrs	r3, r2
 800ce04:	634b      	str	r3, [r1, #52]	; 0x34
 800ce06:	e06d      	b.n	800cee4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800ce08:	693b      	ldr	r3, [r7, #16]
 800ce0a:	015a      	lsls	r2, r3, #5
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	4413      	add	r3, r2
 800ce10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce14:	691a      	ldr	r2, [r3, #16]
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	0159      	lsls	r1, r3, #5
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	440b      	add	r3, r1
 800ce1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce22:	4619      	mov	r1, r3
 800ce24:	4b34      	ldr	r3, [pc, #208]	; (800cef8 <USB_EP0StartXfer+0x2ac>)
 800ce26:	4013      	ands	r3, r2
 800ce28:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800ce2a:	693b      	ldr	r3, [r7, #16]
 800ce2c:	015a      	lsls	r2, r3, #5
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	4413      	add	r3, r2
 800ce32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce36:	691a      	ldr	r2, [r3, #16]
 800ce38:	693b      	ldr	r3, [r7, #16]
 800ce3a:	0159      	lsls	r1, r3, #5
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	440b      	add	r3, r1
 800ce40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce44:	4619      	mov	r1, r3
 800ce46:	4b2b      	ldr	r3, [pc, #172]	; (800cef4 <USB_EP0StartXfer+0x2a8>)
 800ce48:	4013      	ands	r3, r2
 800ce4a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ce4c:	68bb      	ldr	r3, [r7, #8]
 800ce4e:	695b      	ldr	r3, [r3, #20]
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d003      	beq.n	800ce5c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	689a      	ldr	r2, [r3, #8]
 800ce58:	68bb      	ldr	r3, [r7, #8]
 800ce5a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ce5c:	693b      	ldr	r3, [r7, #16]
 800ce5e:	015a      	lsls	r2, r3, #5
 800ce60:	697b      	ldr	r3, [r7, #20]
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce68:	691b      	ldr	r3, [r3, #16]
 800ce6a:	693a      	ldr	r2, [r7, #16]
 800ce6c:	0151      	lsls	r1, r2, #5
 800ce6e:	697a      	ldr	r2, [r7, #20]
 800ce70:	440a      	add	r2, r1
 800ce72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce76:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce7a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800ce7c:	693b      	ldr	r3, [r7, #16]
 800ce7e:	015a      	lsls	r2, r3, #5
 800ce80:	697b      	ldr	r3, [r7, #20]
 800ce82:	4413      	add	r3, r2
 800ce84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce88:	691a      	ldr	r2, [r3, #16]
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	689b      	ldr	r3, [r3, #8]
 800ce8e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ce92:	6939      	ldr	r1, [r7, #16]
 800ce94:	0148      	lsls	r0, r1, #5
 800ce96:	6979      	ldr	r1, [r7, #20]
 800ce98:	4401      	add	r1, r0
 800ce9a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ce9e:	4313      	orrs	r3, r2
 800cea0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800cea2:	79fb      	ldrb	r3, [r7, #7]
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d10d      	bne.n	800cec4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d009      	beq.n	800cec4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ceb0:	68bb      	ldr	r3, [r7, #8]
 800ceb2:	68d9      	ldr	r1, [r3, #12]
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	015a      	lsls	r2, r3, #5
 800ceb8:	697b      	ldr	r3, [r7, #20]
 800ceba:	4413      	add	r3, r2
 800cebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cec0:	460a      	mov	r2, r1
 800cec2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800cec4:	693b      	ldr	r3, [r7, #16]
 800cec6:	015a      	lsls	r2, r3, #5
 800cec8:	697b      	ldr	r3, [r7, #20]
 800ceca:	4413      	add	r3, r2
 800cecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	693a      	ldr	r2, [r7, #16]
 800ced4:	0151      	lsls	r1, r2, #5
 800ced6:	697a      	ldr	r2, [r7, #20]
 800ced8:	440a      	add	r2, r1
 800ceda:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cede:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800cee2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800cee4:	2300      	movs	r3, #0
}
 800cee6:	4618      	mov	r0, r3
 800cee8:	371c      	adds	r7, #28
 800ceea:	46bd      	mov	sp, r7
 800ceec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef0:	4770      	bx	lr
 800cef2:	bf00      	nop
 800cef4:	e007ffff 	.word	0xe007ffff
 800cef8:	fff80000 	.word	0xfff80000

0800cefc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b089      	sub	sp, #36	; 0x24
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	4611      	mov	r1, r2
 800cf08:	461a      	mov	r2, r3
 800cf0a:	460b      	mov	r3, r1
 800cf0c:	71fb      	strb	r3, [r7, #7]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800cf1a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d11a      	bne.n	800cf58 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800cf22:	88bb      	ldrh	r3, [r7, #4]
 800cf24:	3303      	adds	r3, #3
 800cf26:	089b      	lsrs	r3, r3, #2
 800cf28:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	61bb      	str	r3, [r7, #24]
 800cf2e:	e00f      	b.n	800cf50 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800cf30:	79fb      	ldrb	r3, [r7, #7]
 800cf32:	031a      	lsls	r2, r3, #12
 800cf34:	697b      	ldr	r3, [r7, #20]
 800cf36:	4413      	add	r3, r2
 800cf38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	681b      	ldr	r3, [r3, #0]
 800cf42:	6013      	str	r3, [r2, #0]
      pSrc++;
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	3304      	adds	r3, #4
 800cf48:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800cf4a:	69bb      	ldr	r3, [r7, #24]
 800cf4c:	3301      	adds	r3, #1
 800cf4e:	61bb      	str	r3, [r7, #24]
 800cf50:	69ba      	ldr	r2, [r7, #24]
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d3eb      	bcc.n	800cf30 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800cf58:	2300      	movs	r3, #0
}
 800cf5a:	4618      	mov	r0, r3
 800cf5c:	3724      	adds	r7, #36	; 0x24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr

0800cf66 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800cf66:	b480      	push	{r7}
 800cf68:	b089      	sub	sp, #36	; 0x24
 800cf6a:	af00      	add	r7, sp, #0
 800cf6c:	60f8      	str	r0, [r7, #12]
 800cf6e:	60b9      	str	r1, [r7, #8]
 800cf70:	4613      	mov	r3, r2
 800cf72:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800cf7c:	88fb      	ldrh	r3, [r7, #6]
 800cf7e:	3303      	adds	r3, #3
 800cf80:	089b      	lsrs	r3, r3, #2
 800cf82:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800cf84:	2300      	movs	r3, #0
 800cf86:	61bb      	str	r3, [r7, #24]
 800cf88:	e00b      	b.n	800cfa2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800cf8a:	697b      	ldr	r3, [r7, #20]
 800cf8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cf90:	681a      	ldr	r2, [r3, #0]
 800cf92:	69fb      	ldr	r3, [r7, #28]
 800cf94:	601a      	str	r2, [r3, #0]
    pDest++;
 800cf96:	69fb      	ldr	r3, [r7, #28]
 800cf98:	3304      	adds	r3, #4
 800cf9a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800cf9c:	69bb      	ldr	r3, [r7, #24]
 800cf9e:	3301      	adds	r3, #1
 800cfa0:	61bb      	str	r3, [r7, #24]
 800cfa2:	69ba      	ldr	r2, [r7, #24]
 800cfa4:	693b      	ldr	r3, [r7, #16]
 800cfa6:	429a      	cmp	r2, r3
 800cfa8:	d3ef      	bcc.n	800cf8a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800cfaa:	69fb      	ldr	r3, [r7, #28]
}
 800cfac:	4618      	mov	r0, r3
 800cfae:	3724      	adds	r7, #36	; 0x24
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr

0800cfb8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800cfb8:	b480      	push	{r7}
 800cfba:	b085      	sub	sp, #20
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
 800cfc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	781b      	ldrb	r3, [r3, #0]
 800cfca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	785b      	ldrb	r3, [r3, #1]
 800cfd0:	2b01      	cmp	r3, #1
 800cfd2:	d12c      	bne.n	800d02e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800cfd4:	68bb      	ldr	r3, [r7, #8]
 800cfd6:	015a      	lsls	r2, r3, #5
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	4413      	add	r3, r2
 800cfdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	db12      	blt.n	800d00c <USB_EPSetStall+0x54>
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d00f      	beq.n	800d00c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	015a      	lsls	r2, r3, #5
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	4413      	add	r3, r2
 800cff4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	68ba      	ldr	r2, [r7, #8]
 800cffc:	0151      	lsls	r1, r2, #5
 800cffe:	68fa      	ldr	r2, [r7, #12]
 800d000:	440a      	add	r2, r1
 800d002:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d006:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d00a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	015a      	lsls	r2, r3, #5
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	4413      	add	r3, r2
 800d014:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	68ba      	ldr	r2, [r7, #8]
 800d01c:	0151      	lsls	r1, r2, #5
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	440a      	add	r2, r1
 800d022:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d02a:	6013      	str	r3, [r2, #0]
 800d02c:	e02b      	b.n	800d086 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	015a      	lsls	r2, r3, #5
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	4413      	add	r3, r2
 800d036:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	db12      	blt.n	800d066 <USB_EPSetStall+0xae>
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d00f      	beq.n	800d066 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800d046:	68bb      	ldr	r3, [r7, #8]
 800d048:	015a      	lsls	r2, r3, #5
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4413      	add	r3, r2
 800d04e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	68ba      	ldr	r2, [r7, #8]
 800d056:	0151      	lsls	r1, r2, #5
 800d058:	68fa      	ldr	r2, [r7, #12]
 800d05a:	440a      	add	r2, r1
 800d05c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d060:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d064:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	015a      	lsls	r2, r3, #5
 800d06a:	68fb      	ldr	r3, [r7, #12]
 800d06c:	4413      	add	r3, r2
 800d06e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	68ba      	ldr	r2, [r7, #8]
 800d076:	0151      	lsls	r1, r2, #5
 800d078:	68fa      	ldr	r2, [r7, #12]
 800d07a:	440a      	add	r2, r1
 800d07c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d080:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d084:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d086:	2300      	movs	r3, #0
}
 800d088:	4618      	mov	r0, r3
 800d08a:	3714      	adds	r7, #20
 800d08c:	46bd      	mov	sp, r7
 800d08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d092:	4770      	bx	lr

0800d094 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800d094:	b480      	push	{r7}
 800d096:	b085      	sub	sp, #20
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800d0a2:	683b      	ldr	r3, [r7, #0]
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	785b      	ldrb	r3, [r3, #1]
 800d0ac:	2b01      	cmp	r3, #1
 800d0ae:	d128      	bne.n	800d102 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	015a      	lsls	r2, r3, #5
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	68ba      	ldr	r2, [r7, #8]
 800d0c0:	0151      	lsls	r1, r2, #5
 800d0c2:	68fa      	ldr	r2, [r7, #12]
 800d0c4:	440a      	add	r2, r1
 800d0c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d0ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d0d0:	683b      	ldr	r3, [r7, #0]
 800d0d2:	78db      	ldrb	r3, [r3, #3]
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d003      	beq.n	800d0e0 <USB_EPClearStall+0x4c>
 800d0d8:	683b      	ldr	r3, [r7, #0]
 800d0da:	78db      	ldrb	r3, [r3, #3]
 800d0dc:	2b02      	cmp	r3, #2
 800d0de:	d138      	bne.n	800d152 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d0e0:	68bb      	ldr	r3, [r7, #8]
 800d0e2:	015a      	lsls	r2, r3, #5
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4413      	add	r3, r2
 800d0e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	0151      	lsls	r1, r2, #5
 800d0f2:	68fa      	ldr	r2, [r7, #12]
 800d0f4:	440a      	add	r2, r1
 800d0f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800d0fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d0fe:	6013      	str	r3, [r2, #0]
 800d100:	e027      	b.n	800d152 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800d102:	68bb      	ldr	r3, [r7, #8]
 800d104:	015a      	lsls	r2, r3, #5
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	4413      	add	r3, r2
 800d10a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	0151      	lsls	r1, r2, #5
 800d114:	68fa      	ldr	r2, [r7, #12]
 800d116:	440a      	add	r2, r1
 800d118:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d11c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800d120:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800d122:	683b      	ldr	r3, [r7, #0]
 800d124:	78db      	ldrb	r3, [r3, #3]
 800d126:	2b03      	cmp	r3, #3
 800d128:	d003      	beq.n	800d132 <USB_EPClearStall+0x9e>
 800d12a:	683b      	ldr	r3, [r7, #0]
 800d12c:	78db      	ldrb	r3, [r3, #3]
 800d12e:	2b02      	cmp	r3, #2
 800d130:	d10f      	bne.n	800d152 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	015a      	lsls	r2, r3, #5
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	4413      	add	r3, r2
 800d13a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	68ba      	ldr	r2, [r7, #8]
 800d142:	0151      	lsls	r1, r2, #5
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	440a      	add	r2, r1
 800d148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d14c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d150:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800d152:	2300      	movs	r3, #0
}
 800d154:	4618      	mov	r0, r3
 800d156:	3714      	adds	r7, #20
 800d158:	46bd      	mov	sp, r7
 800d15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d15e:	4770      	bx	lr

0800d160 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800d160:	b480      	push	{r7}
 800d162:	b085      	sub	sp, #20
 800d164:	af00      	add	r7, sp, #0
 800d166:	6078      	str	r0, [r7, #4]
 800d168:	460b      	mov	r3, r1
 800d16a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d17e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800d182:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d18a:	681a      	ldr	r2, [r3, #0]
 800d18c:	78fb      	ldrb	r3, [r7, #3]
 800d18e:	011b      	lsls	r3, r3, #4
 800d190:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800d194:	68f9      	ldr	r1, [r7, #12]
 800d196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800d19a:	4313      	orrs	r3, r2
 800d19c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3714      	adds	r7, #20
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1aa:	4770      	bx	lr

0800d1ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d1ac:	b580      	push	{r7, lr}
 800d1ae:	b084      	sub	sp, #16
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	68fa      	ldr	r2, [r7, #12]
 800d1c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1c6:	f023 0302 	bic.w	r3, r3, #2
 800d1ca:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d1cc:	2003      	movs	r0, #3
 800d1ce:	f7f4 fb2b 	bl	8001828 <HAL_Delay>

  return HAL_OK;
 800d1d2:	2300      	movs	r3, #0
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3710      	adds	r7, #16
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bd80      	pop	{r7, pc}

0800d1dc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800d1dc:	b580      	push	{r7, lr}
 800d1de:	b084      	sub	sp, #16
 800d1e0:	af00      	add	r7, sp, #0
 800d1e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d1f6:	f043 0302 	orr.w	r3, r3, #2
 800d1fa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800d1fc:	2003      	movs	r0, #3
 800d1fe:	f7f4 fb13 	bl	8001828 <HAL_Delay>

  return HAL_OK;
 800d202:	2300      	movs	r3, #0
}
 800d204:	4618      	mov	r0, r3
 800d206:	3710      	adds	r7, #16
 800d208:	46bd      	mov	sp, r7
 800d20a:	bd80      	pop	{r7, pc}

0800d20c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800d20c:	b480      	push	{r7}
 800d20e:	b085      	sub	sp, #20
 800d210:	af00      	add	r7, sp, #0
 800d212:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	695b      	ldr	r3, [r3, #20]
 800d218:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	699b      	ldr	r3, [r3, #24]
 800d21e:	68fa      	ldr	r2, [r7, #12]
 800d220:	4013      	ands	r3, r2
 800d222:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800d224:	68fb      	ldr	r3, [r7, #12]
}
 800d226:	4618      	mov	r0, r3
 800d228:	3714      	adds	r7, #20
 800d22a:	46bd      	mov	sp, r7
 800d22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d230:	4770      	bx	lr

0800d232 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d232:	b480      	push	{r7}
 800d234:	b085      	sub	sp, #20
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d244:	699b      	ldr	r3, [r3, #24]
 800d246:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d24e:	69db      	ldr	r3, [r3, #28]
 800d250:	68ba      	ldr	r2, [r7, #8]
 800d252:	4013      	ands	r3, r2
 800d254:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800d256:	68bb      	ldr	r3, [r7, #8]
 800d258:	0c1b      	lsrs	r3, r3, #16
}
 800d25a:	4618      	mov	r0, r3
 800d25c:	3714      	adds	r7, #20
 800d25e:	46bd      	mov	sp, r7
 800d260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d264:	4770      	bx	lr

0800d266 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d266:	b480      	push	{r7}
 800d268:	b085      	sub	sp, #20
 800d26a:	af00      	add	r7, sp, #0
 800d26c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d278:	699b      	ldr	r3, [r3, #24]
 800d27a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800d27c:	68fb      	ldr	r3, [r7, #12]
 800d27e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d282:	69db      	ldr	r3, [r3, #28]
 800d284:	68ba      	ldr	r2, [r7, #8]
 800d286:	4013      	ands	r3, r2
 800d288:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800d28a:	68bb      	ldr	r3, [r7, #8]
 800d28c:	b29b      	uxth	r3, r3
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3714      	adds	r7, #20
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d29a:	b480      	push	{r7}
 800d29c:	b085      	sub	sp, #20
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	460b      	mov	r3, r1
 800d2a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2a6:	687b      	ldr	r3, [r7, #4]
 800d2a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800d2aa:	78fb      	ldrb	r3, [r7, #3]
 800d2ac:	015a      	lsls	r2, r3, #5
 800d2ae:	68fb      	ldr	r3, [r7, #12]
 800d2b0:	4413      	add	r3, r2
 800d2b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d2b6:	689b      	ldr	r3, [r3, #8]
 800d2b8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800d2ba:	68fb      	ldr	r3, [r7, #12]
 800d2bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2c0:	695b      	ldr	r3, [r3, #20]
 800d2c2:	68ba      	ldr	r2, [r7, #8]
 800d2c4:	4013      	ands	r3, r2
 800d2c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d2c8:	68bb      	ldr	r3, [r7, #8]
}
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	3714      	adds	r7, #20
 800d2ce:	46bd      	mov	sp, r7
 800d2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d4:	4770      	bx	lr

0800d2d6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800d2d6:	b480      	push	{r7}
 800d2d8:	b087      	sub	sp, #28
 800d2da:	af00      	add	r7, sp, #0
 800d2dc:	6078      	str	r0, [r7, #4]
 800d2de:	460b      	mov	r3, r1
 800d2e0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800d2e6:	697b      	ldr	r3, [r7, #20]
 800d2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2ec:	691b      	ldr	r3, [r3, #16]
 800d2ee:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800d2fa:	78fb      	ldrb	r3, [r7, #3]
 800d2fc:	f003 030f 	and.w	r3, r3, #15
 800d300:	68fa      	ldr	r2, [r7, #12]
 800d302:	fa22 f303 	lsr.w	r3, r2, r3
 800d306:	01db      	lsls	r3, r3, #7
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	693a      	ldr	r2, [r7, #16]
 800d30c:	4313      	orrs	r3, r2
 800d30e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800d310:	78fb      	ldrb	r3, [r7, #3]
 800d312:	015a      	lsls	r2, r3, #5
 800d314:	697b      	ldr	r3, [r7, #20]
 800d316:	4413      	add	r3, r2
 800d318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d31c:	689b      	ldr	r3, [r3, #8]
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	4013      	ands	r3, r2
 800d322:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800d324:	68bb      	ldr	r3, [r7, #8]
}
 800d326:	4618      	mov	r0, r3
 800d328:	371c      	adds	r7, #28
 800d32a:	46bd      	mov	sp, r7
 800d32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d330:	4770      	bx	lr

0800d332 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800d332:	b480      	push	{r7}
 800d334:	b083      	sub	sp, #12
 800d336:	af00      	add	r7, sp, #0
 800d338:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	695b      	ldr	r3, [r3, #20]
 800d33e:	f003 0301 	and.w	r3, r3, #1
}
 800d342:	4618      	mov	r0, r3
 800d344:	370c      	adds	r7, #12
 800d346:	46bd      	mov	sp, r7
 800d348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d34c:	4770      	bx	lr
	...

0800d350 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800d350:	b480      	push	{r7}
 800d352:	b085      	sub	sp, #20
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	68fb      	ldr	r3, [r7, #12]
 800d366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800d36a:	4619      	mov	r1, r3
 800d36c:	4b09      	ldr	r3, [pc, #36]	; (800d394 <USB_ActivateSetup+0x44>)
 800d36e:	4013      	ands	r3, r2
 800d370:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800d378:	685b      	ldr	r3, [r3, #4]
 800d37a:	68fa      	ldr	r2, [r7, #12]
 800d37c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800d380:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d384:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3714      	adds	r7, #20
 800d38c:	46bd      	mov	sp, r7
 800d38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d392:	4770      	bx	lr
 800d394:	fffff800 	.word	0xfffff800

0800d398 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800d398:	b480      	push	{r7}
 800d39a:	b087      	sub	sp, #28
 800d39c:	af00      	add	r7, sp, #0
 800d39e:	60f8      	str	r0, [r7, #12]
 800d3a0:	460b      	mov	r3, r1
 800d3a2:	607a      	str	r2, [r7, #4]
 800d3a4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d3a6:	68fb      	ldr	r3, [r7, #12]
 800d3a8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800d3aa:	68fb      	ldr	r3, [r7, #12]
 800d3ac:	333c      	adds	r3, #60	; 0x3c
 800d3ae:	3304      	adds	r3, #4
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	4a26      	ldr	r2, [pc, #152]	; (800d450 <USB_EP0_OutStart+0xb8>)
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d90a      	bls.n	800d3d2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d3c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d3cc:	d101      	bne.n	800d3d2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e037      	b.n	800d442 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800d3d2:	697b      	ldr	r3, [r7, #20]
 800d3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3d8:	461a      	mov	r2, r3
 800d3da:	2300      	movs	r3, #0
 800d3dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3e4:	691b      	ldr	r3, [r3, #16]
 800d3e6:	697a      	ldr	r2, [r7, #20]
 800d3e8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d3ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d3f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d3f8:	691b      	ldr	r3, [r3, #16]
 800d3fa:	697a      	ldr	r2, [r7, #20]
 800d3fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d400:	f043 0318 	orr.w	r3, r3, #24
 800d404:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d40c:	691b      	ldr	r3, [r3, #16]
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d414:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800d418:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800d41a:	7afb      	ldrb	r3, [r7, #11]
 800d41c:	2b01      	cmp	r3, #1
 800d41e:	d10f      	bne.n	800d440 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800d420:	697b      	ldr	r3, [r7, #20]
 800d422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d426:	461a      	mov	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800d42c:	697b      	ldr	r3, [r7, #20]
 800d42e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800d432:	681b      	ldr	r3, [r3, #0]
 800d434:	697a      	ldr	r2, [r7, #20]
 800d436:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800d43a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800d43e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800d440:	2300      	movs	r3, #0
}
 800d442:	4618      	mov	r0, r3
 800d444:	371c      	adds	r7, #28
 800d446:	46bd      	mov	sp, r7
 800d448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d44c:	4770      	bx	lr
 800d44e:	bf00      	nop
 800d450:	4f54300a 	.word	0x4f54300a

0800d454 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800d454:	b480      	push	{r7}
 800d456:	b085      	sub	sp, #20
 800d458:	af00      	add	r7, sp, #0
 800d45a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800d45c:	2300      	movs	r3, #0
 800d45e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	3301      	adds	r3, #1
 800d464:	60fb      	str	r3, [r7, #12]
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	4a13      	ldr	r2, [pc, #76]	; (800d4b8 <USB_CoreReset+0x64>)
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d901      	bls.n	800d472 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800d46e:	2303      	movs	r3, #3
 800d470:	e01b      	b.n	800d4aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	691b      	ldr	r3, [r3, #16]
 800d476:	2b00      	cmp	r3, #0
 800d478:	daf2      	bge.n	800d460 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800d47a:	2300      	movs	r3, #0
 800d47c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	691b      	ldr	r3, [r3, #16]
 800d482:	f043 0201 	orr.w	r2, r3, #1
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	3301      	adds	r3, #1
 800d48e:	60fb      	str	r3, [r7, #12]
 800d490:	68fb      	ldr	r3, [r7, #12]
 800d492:	4a09      	ldr	r2, [pc, #36]	; (800d4b8 <USB_CoreReset+0x64>)
 800d494:	4293      	cmp	r3, r2
 800d496:	d901      	bls.n	800d49c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800d498:	2303      	movs	r3, #3
 800d49a:	e006      	b.n	800d4aa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	691b      	ldr	r3, [r3, #16]
 800d4a0:	f003 0301 	and.w	r3, r3, #1
 800d4a4:	2b01      	cmp	r3, #1
 800d4a6:	d0f0      	beq.n	800d48a <USB_CoreReset+0x36>

  return HAL_OK;
 800d4a8:	2300      	movs	r3, #0
}
 800d4aa:	4618      	mov	r0, r3
 800d4ac:	3714      	adds	r7, #20
 800d4ae:	46bd      	mov	sp, r7
 800d4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4b4:	4770      	bx	lr
 800d4b6:	bf00      	nop
 800d4b8:	00030d40 	.word	0x00030d40

0800d4bc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800d4bc:	b580      	push	{r7, lr}
 800d4be:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800d4c0:	4904      	ldr	r1, [pc, #16]	; (800d4d4 <MX_FATFS_Init+0x18>)
 800d4c2:	4805      	ldr	r0, [pc, #20]	; (800d4d8 <MX_FATFS_Init+0x1c>)
 800d4c4:	f005 fbd0 	bl	8012c68 <FATFS_LinkDriver>
 800d4c8:	4603      	mov	r3, r0
 800d4ca:	461a      	mov	r2, r3
 800d4cc:	4b03      	ldr	r3, [pc, #12]	; (800d4dc <MX_FATFS_Init+0x20>)
 800d4ce:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800d4d0:	bf00      	nop
 800d4d2:	bd80      	pop	{r7, pc}
 800d4d4:	24040d14 	.word	0x24040d14
 800d4d8:	080140c8 	.word	0x080140c8
 800d4dc:	24040d10 	.word	0x24040d10

0800d4e0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800d4e0:	b480      	push	{r7}
 800d4e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800d4e4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800d4e6:	4618      	mov	r0, r3
 800d4e8:	46bd      	mov	sp, r7
 800d4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ee:	4770      	bx	lr

0800d4f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800d4f0:	b580      	push	{r7, lr}
 800d4f2:	b082      	sub	sp, #8
 800d4f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800d4fa:	f000 f885 	bl	800d608 <BSP_SD_IsDetected>
 800d4fe:	4603      	mov	r3, r0
 800d500:	2b01      	cmp	r3, #1
 800d502:	d001      	beq.n	800d508 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800d504:	2302      	movs	r3, #2
 800d506:	e012      	b.n	800d52e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800d508:	480b      	ldr	r0, [pc, #44]	; (800d538 <BSP_SD_Init+0x48>)
 800d50a:	f7fa fdaf 	bl	800806c <HAL_SD_Init>
 800d50e:	4603      	mov	r3, r0
 800d510:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800d512:	79fb      	ldrb	r3, [r7, #7]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d109      	bne.n	800d52c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800d518:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800d51c:	4806      	ldr	r0, [pc, #24]	; (800d538 <BSP_SD_Init+0x48>)
 800d51e:	f7fb ff83 	bl	8009428 <HAL_SD_ConfigWideBusOperation>
 800d522:	4603      	mov	r3, r0
 800d524:	2b00      	cmp	r3, #0
 800d526:	d001      	beq.n	800d52c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800d528:	2301      	movs	r3, #1
 800d52a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800d52c:	79fb      	ldrb	r3, [r7, #7]
}
 800d52e:	4618      	mov	r0, r3
 800d530:	3708      	adds	r7, #8
 800d532:	46bd      	mov	sp, r7
 800d534:	bd80      	pop	{r7, pc}
 800d536:	bf00      	nop
 800d538:	24040574 	.word	0x24040574

0800d53c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b086      	sub	sp, #24
 800d540:	af00      	add	r7, sp, #0
 800d542:	60f8      	str	r0, [r7, #12]
 800d544:	60b9      	str	r1, [r7, #8]
 800d546:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d548:	2300      	movs	r3, #0
 800d54a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	68ba      	ldr	r2, [r7, #8]
 800d550:	68f9      	ldr	r1, [r7, #12]
 800d552:	4806      	ldr	r0, [pc, #24]	; (800d56c <BSP_SD_ReadBlocks_DMA+0x30>)
 800d554:	f7fb f9c6 	bl	80088e4 <HAL_SD_ReadBlocks_DMA>
 800d558:	4603      	mov	r3, r0
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d001      	beq.n	800d562 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d55e:	2301      	movs	r3, #1
 800d560:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d562:	7dfb      	ldrb	r3, [r7, #23]
}
 800d564:	4618      	mov	r0, r3
 800d566:	3718      	adds	r7, #24
 800d568:	46bd      	mov	sp, r7
 800d56a:	bd80      	pop	{r7, pc}
 800d56c:	24040574 	.word	0x24040574

0800d570 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800d570:	b580      	push	{r7, lr}
 800d572:	b086      	sub	sp, #24
 800d574:	af00      	add	r7, sp, #0
 800d576:	60f8      	str	r0, [r7, #12]
 800d578:	60b9      	str	r1, [r7, #8]
 800d57a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 800d57c:	2300      	movs	r3, #0
 800d57e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	68ba      	ldr	r2, [r7, #8]
 800d584:	68f9      	ldr	r1, [r7, #12]
 800d586:	4806      	ldr	r0, [pc, #24]	; (800d5a0 <BSP_SD_WriteBlocks_DMA+0x30>)
 800d588:	f7fb fa54 	bl	8008a34 <HAL_SD_WriteBlocks_DMA>
 800d58c:	4603      	mov	r3, r0
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d001      	beq.n	800d596 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800d592:	2301      	movs	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800d596:	7dfb      	ldrb	r3, [r7, #23]
}
 800d598:	4618      	mov	r0, r3
 800d59a:	3718      	adds	r7, #24
 800d59c:	46bd      	mov	sp, r7
 800d59e:	bd80      	pop	{r7, pc}
 800d5a0:	24040574 	.word	0x24040574

0800d5a4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800d5a8:	4805      	ldr	r0, [pc, #20]	; (800d5c0 <BSP_SD_GetCardState+0x1c>)
 800d5aa:	f7fb ffe7 	bl	800957c <HAL_SD_GetCardState>
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	2b04      	cmp	r3, #4
 800d5b2:	bf14      	ite	ne
 800d5b4:	2301      	movne	r3, #1
 800d5b6:	2300      	moveq	r3, #0
 800d5b8:	b2db      	uxtb	r3, r3
}
 800d5ba:	4618      	mov	r0, r3
 800d5bc:	bd80      	pop	{r7, pc}
 800d5be:	bf00      	nop
 800d5c0:	24040574 	.word	0x24040574

0800d5c4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800d5cc:	6879      	ldr	r1, [r7, #4]
 800d5ce:	4803      	ldr	r0, [pc, #12]	; (800d5dc <BSP_SD_GetCardInfo+0x18>)
 800d5d0:	f7fb fefe 	bl	80093d0 <HAL_SD_GetCardInfo>
}
 800d5d4:	bf00      	nop
 800d5d6:	3708      	adds	r7, #8
 800d5d8:	46bd      	mov	sp, r7
 800d5da:	bd80      	pop	{r7, pc}
 800d5dc:	24040574 	.word	0x24040574

0800d5e0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b082      	sub	sp, #8
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 800d5e8:	f000 f984 	bl	800d8f4 <BSP_SD_WriteCpltCallback>
}
 800d5ec:	bf00      	nop
 800d5ee:	3708      	adds	r7, #8
 800d5f0:	46bd      	mov	sp, r7
 800d5f2:	bd80      	pop	{r7, pc}

0800d5f4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
 800d5fa:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800d5fc:	f000 f986 	bl	800d90c <BSP_SD_ReadCpltCallback>
}
 800d600:	bf00      	nop
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800d608:	b480      	push	{r7}
 800d60a:	b083      	sub	sp, #12
 800d60c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800d60e:	2301      	movs	r3, #1
 800d610:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN IsDetectedSection */
  /* user code can be inserted here */
  /* USER CODE END IsDetectedSection */

  return status;
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	b2db      	uxtb	r3, r3
}
 800d616:	4618      	mov	r0, r3
 800d618:	370c      	adds	r7, #12
 800d61a:	46bd      	mov	sp, r7
 800d61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d620:	4770      	bx	lr

0800d622 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 800d622:	b580      	push	{r7, lr}
 800d624:	b084      	sub	sp, #16
 800d626:	af00      	add	r7, sp, #0
 800d628:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 800d62a:	f7f4 f8f1 	bl	8001810 <HAL_GetTick>
 800d62e:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 800d630:	e006      	b.n	800d640 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d632:	f7ff ffb7 	bl	800d5a4 <BSP_SD_GetCardState>
 800d636:	4603      	mov	r3, r0
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d101      	bne.n	800d640 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 800d63c:	2300      	movs	r3, #0
 800d63e:	e009      	b.n	800d654 <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 800d640:	f7f4 f8e6 	bl	8001810 <HAL_GetTick>
 800d644:	4602      	mov	r2, r0
 800d646:	68fb      	ldr	r3, [r7, #12]
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d8f0      	bhi.n	800d632 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 800d650:	f04f 33ff 	mov.w	r3, #4294967295
}
 800d654:	4618      	mov	r0, r3
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	4603      	mov	r3, r0
 800d664:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800d666:	4b0b      	ldr	r3, [pc, #44]	; (800d694 <SD_CheckStatus+0x38>)
 800d668:	2201      	movs	r2, #1
 800d66a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800d66c:	f7ff ff9a 	bl	800d5a4 <BSP_SD_GetCardState>
 800d670:	4603      	mov	r3, r0
 800d672:	2b00      	cmp	r3, #0
 800d674:	d107      	bne.n	800d686 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800d676:	4b07      	ldr	r3, [pc, #28]	; (800d694 <SD_CheckStatus+0x38>)
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	b2db      	uxtb	r3, r3
 800d67c:	f023 0301 	bic.w	r3, r3, #1
 800d680:	b2da      	uxtb	r2, r3
 800d682:	4b04      	ldr	r3, [pc, #16]	; (800d694 <SD_CheckStatus+0x38>)
 800d684:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800d686:	4b03      	ldr	r3, [pc, #12]	; (800d694 <SD_CheckStatus+0x38>)
 800d688:	781b      	ldrb	r3, [r3, #0]
 800d68a:	b2db      	uxtb	r3, r3
}
 800d68c:	4618      	mov	r0, r3
 800d68e:	3708      	adds	r7, #8
 800d690:	46bd      	mov	sp, r7
 800d692:	bd80      	pop	{r7, pc}
 800d694:	2400000d 	.word	0x2400000d

0800d698 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800d698:	b580      	push	{r7, lr}
 800d69a:	b082      	sub	sp, #8
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	4603      	mov	r3, r0
 800d6a0:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800d6a2:	f7ff ff25 	bl	800d4f0 <BSP_SD_Init>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d107      	bne.n	800d6bc <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 800d6ac:	79fb      	ldrb	r3, [r7, #7]
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	f7ff ffd4 	bl	800d65c <SD_CheckStatus>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	461a      	mov	r2, r3
 800d6b8:	4b04      	ldr	r3, [pc, #16]	; (800d6cc <SD_initialize+0x34>)
 800d6ba:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800d6bc:	4b03      	ldr	r3, [pc, #12]	; (800d6cc <SD_initialize+0x34>)
 800d6be:	781b      	ldrb	r3, [r3, #0]
 800d6c0:	b2db      	uxtb	r3, r3
}
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	3708      	adds	r7, #8
 800d6c6:	46bd      	mov	sp, r7
 800d6c8:	bd80      	pop	{r7, pc}
 800d6ca:	bf00      	nop
 800d6cc:	2400000d 	.word	0x2400000d

0800d6d0 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b082      	sub	sp, #8
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800d6da:	79fb      	ldrb	r3, [r7, #7]
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f7ff ffbd 	bl	800d65c <SD_CheckStatus>
 800d6e2:	4603      	mov	r3, r0
}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3708      	adds	r7, #8
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}

0800d6ec <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d6ec:	b580      	push	{r7, lr}
 800d6ee:	b086      	sub	sp, #24
 800d6f0:	af00      	add	r7, sp, #0
 800d6f2:	60b9      	str	r1, [r7, #8]
 800d6f4:	607a      	str	r2, [r7, #4]
 800d6f6:	603b      	str	r3, [r7, #0]
 800d6f8:	4603      	mov	r3, r0
 800d6fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d700:	f247 5030 	movw	r0, #30000	; 0x7530
 800d704:	f7ff ff8d 	bl	800d622 <SD_CheckStatusWithTimeout>
 800d708:	4603      	mov	r3, r0
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	da01      	bge.n	800d712 <SD_read+0x26>
  {
    return res;
 800d70e:	7dfb      	ldrb	r3, [r7, #23]
 800d710:	e03b      	b.n	800d78a <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800d712:	683a      	ldr	r2, [r7, #0]
 800d714:	6879      	ldr	r1, [r7, #4]
 800d716:	68b8      	ldr	r0, [r7, #8]
 800d718:	f7ff ff10 	bl	800d53c <BSP_SD_ReadBlocks_DMA>
 800d71c:	4603      	mov	r3, r0
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d132      	bne.n	800d788 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 800d722:	4b1c      	ldr	r3, [pc, #112]	; (800d794 <SD_read+0xa8>)
 800d724:	2200      	movs	r2, #0
 800d726:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 800d728:	f7f4 f872 	bl	8001810 <HAL_GetTick>
 800d72c:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d72e:	bf00      	nop
 800d730:	4b18      	ldr	r3, [pc, #96]	; (800d794 <SD_read+0xa8>)
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d108      	bne.n	800d74a <SD_read+0x5e>
 800d738:	f7f4 f86a 	bl	8001810 <HAL_GetTick>
 800d73c:	4602      	mov	r2, r0
 800d73e:	693b      	ldr	r3, [r7, #16]
 800d740:	1ad3      	subs	r3, r2, r3
 800d742:	f247 522f 	movw	r2, #29999	; 0x752f
 800d746:	4293      	cmp	r3, r2
 800d748:	d9f2      	bls.n	800d730 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 800d74a:	4b12      	ldr	r3, [pc, #72]	; (800d794 <SD_read+0xa8>)
 800d74c:	681b      	ldr	r3, [r3, #0]
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d102      	bne.n	800d758 <SD_read+0x6c>
      {
        res = RES_ERROR;
 800d752:	2301      	movs	r3, #1
 800d754:	75fb      	strb	r3, [r7, #23]
 800d756:	e017      	b.n	800d788 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 800d758:	4b0e      	ldr	r3, [pc, #56]	; (800d794 <SD_read+0xa8>)
 800d75a:	2200      	movs	r2, #0
 800d75c:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d75e:	f7f4 f857 	bl	8001810 <HAL_GetTick>
 800d762:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d764:	e007      	b.n	800d776 <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d766:	f7ff ff1d 	bl	800d5a4 <BSP_SD_GetCardState>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d102      	bne.n	800d776 <SD_read+0x8a>
          {
            res = RES_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 800d774:	e008      	b.n	800d788 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d776:	f7f4 f84b 	bl	8001810 <HAL_GetTick>
 800d77a:	4602      	mov	r2, r0
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	1ad3      	subs	r3, r2, r3
 800d780:	f247 522f 	movw	r2, #29999	; 0x752f
 800d784:	4293      	cmp	r3, r2
 800d786:	d9ee      	bls.n	800d766 <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 800d788:	7dfb      	ldrb	r3, [r7, #23]
}
 800d78a:	4618      	mov	r0, r3
 800d78c:	3718      	adds	r7, #24
 800d78e:	46bd      	mov	sp, r7
 800d790:	bd80      	pop	{r7, pc}
 800d792:	bf00      	nop
 800d794:	240401fc 	.word	0x240401fc

0800d798 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d798:	b580      	push	{r7, lr}
 800d79a:	b086      	sub	sp, #24
 800d79c:	af00      	add	r7, sp, #0
 800d79e:	60b9      	str	r1, [r7, #8]
 800d7a0:	607a      	str	r2, [r7, #4]
 800d7a2:	603b      	str	r3, [r7, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d7a8:	2301      	movs	r3, #1
 800d7aa:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 800d7ac:	4b24      	ldr	r3, [pc, #144]	; (800d840 <SD_write+0xa8>)
 800d7ae:	2200      	movs	r2, #0
 800d7b0:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800d7b2:	f247 5030 	movw	r0, #30000	; 0x7530
 800d7b6:	f7ff ff34 	bl	800d622 <SD_CheckStatusWithTimeout>
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	da01      	bge.n	800d7c4 <SD_write+0x2c>
  {
    return res;
 800d7c0:	7dfb      	ldrb	r3, [r7, #23]
 800d7c2:	e038      	b.n	800d836 <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800d7c4:	683a      	ldr	r2, [r7, #0]
 800d7c6:	6879      	ldr	r1, [r7, #4]
 800d7c8:	68b8      	ldr	r0, [r7, #8]
 800d7ca:	f7ff fed1 	bl	800d570 <BSP_SD_WriteBlocks_DMA>
 800d7ce:	4603      	mov	r3, r0
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d12f      	bne.n	800d834 <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800d7d4:	f7f4 f81c 	bl	8001810 <HAL_GetTick>
 800d7d8:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 800d7da:	bf00      	nop
 800d7dc:	4b18      	ldr	r3, [pc, #96]	; (800d840 <SD_write+0xa8>)
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d108      	bne.n	800d7f6 <SD_write+0x5e>
 800d7e4:	f7f4 f814 	bl	8001810 <HAL_GetTick>
 800d7e8:	4602      	mov	r2, r0
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	1ad3      	subs	r3, r2, r3
 800d7ee:	f247 522f 	movw	r2, #29999	; 0x752f
 800d7f2:	4293      	cmp	r3, r2
 800d7f4:	d9f2      	bls.n	800d7dc <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800d7f6:	4b12      	ldr	r3, [pc, #72]	; (800d840 <SD_write+0xa8>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d102      	bne.n	800d804 <SD_write+0x6c>
      {
        res = RES_ERROR;
 800d7fe:	2301      	movs	r3, #1
 800d800:	75fb      	strb	r3, [r7, #23]
 800d802:	e017      	b.n	800d834 <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800d804:	4b0e      	ldr	r3, [pc, #56]	; (800d840 <SD_write+0xa8>)
 800d806:	2200      	movs	r2, #0
 800d808:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 800d80a:	f7f4 f801 	bl	8001810 <HAL_GetTick>
 800d80e:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d810:	e007      	b.n	800d822 <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800d812:	f7ff fec7 	bl	800d5a4 <BSP_SD_GetCardState>
 800d816:	4603      	mov	r3, r0
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d102      	bne.n	800d822 <SD_write+0x8a>
          {
            res = RES_OK;
 800d81c:	2300      	movs	r3, #0
 800d81e:	75fb      	strb	r3, [r7, #23]
            break;
 800d820:	e008      	b.n	800d834 <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 800d822:	f7f3 fff5 	bl	8001810 <HAL_GetTick>
 800d826:	4602      	mov	r2, r0
 800d828:	693b      	ldr	r3, [r7, #16]
 800d82a:	1ad3      	subs	r3, r2, r3
 800d82c:	f247 522f 	movw	r2, #29999	; 0x752f
 800d830:	4293      	cmp	r3, r2
 800d832:	d9ee      	bls.n	800d812 <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 800d834:	7dfb      	ldrb	r3, [r7, #23]
}
 800d836:	4618      	mov	r0, r3
 800d838:	3718      	adds	r7, #24
 800d83a:	46bd      	mov	sp, r7
 800d83c:	bd80      	pop	{r7, pc}
 800d83e:	bf00      	nop
 800d840:	240401f8 	.word	0x240401f8

0800d844 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d844:	b580      	push	{r7, lr}
 800d846:	b08c      	sub	sp, #48	; 0x30
 800d848:	af00      	add	r7, sp, #0
 800d84a:	4603      	mov	r3, r0
 800d84c:	603a      	str	r2, [r7, #0]
 800d84e:	71fb      	strb	r3, [r7, #7]
 800d850:	460b      	mov	r3, r1
 800d852:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d854:	2301      	movs	r3, #1
 800d856:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d85a:	4b25      	ldr	r3, [pc, #148]	; (800d8f0 <SD_ioctl+0xac>)
 800d85c:	781b      	ldrb	r3, [r3, #0]
 800d85e:	b2db      	uxtb	r3, r3
 800d860:	f003 0301 	and.w	r3, r3, #1
 800d864:	2b00      	cmp	r3, #0
 800d866:	d001      	beq.n	800d86c <SD_ioctl+0x28>
 800d868:	2303      	movs	r3, #3
 800d86a:	e03c      	b.n	800d8e6 <SD_ioctl+0xa2>

  switch (cmd)
 800d86c:	79bb      	ldrb	r3, [r7, #6]
 800d86e:	2b03      	cmp	r3, #3
 800d870:	d834      	bhi.n	800d8dc <SD_ioctl+0x98>
 800d872:	a201      	add	r2, pc, #4	; (adr r2, 800d878 <SD_ioctl+0x34>)
 800d874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d878:	0800d889 	.word	0x0800d889
 800d87c:	0800d891 	.word	0x0800d891
 800d880:	0800d8a9 	.word	0x0800d8a9
 800d884:	0800d8c3 	.word	0x0800d8c3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d888:	2300      	movs	r3, #0
 800d88a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d88e:	e028      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d890:	f107 0308 	add.w	r3, r7, #8
 800d894:	4618      	mov	r0, r3
 800d896:	f7ff fe95 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d89a:	6a3a      	ldr	r2, [r7, #32]
 800d89c:	683b      	ldr	r3, [r7, #0]
 800d89e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8a6:	e01c      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8a8:	f107 0308 	add.w	r3, r7, #8
 800d8ac:	4618      	mov	r0, r3
 800d8ae:	f7ff fe89 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d8b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b4:	b29a      	uxth	r2, r3
 800d8b6:	683b      	ldr	r3, [r7, #0]
 800d8b8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8c0:	e00f      	b.n	800d8e2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d8c2:	f107 0308 	add.w	r3, r7, #8
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7ff fe7c 	bl	800d5c4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	0a5a      	lsrs	r2, r3, #9
 800d8d0:	683b      	ldr	r3, [r7, #0]
 800d8d2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d8d4:	2300      	movs	r3, #0
 800d8d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d8da:	e002      	b.n	800d8e2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d8dc:	2304      	movs	r3, #4
 800d8de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d8e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3730      	adds	r7, #48	; 0x30
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	bd80      	pop	{r7, pc}
 800d8ee:	bf00      	nop
 800d8f0:	2400000d 	.word	0x2400000d

0800d8f4 <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800d8f4:	b480      	push	{r7}
 800d8f6:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 800d8f8:	4b03      	ldr	r3, [pc, #12]	; (800d908 <BSP_SD_WriteCpltCallback+0x14>)
 800d8fa:	2201      	movs	r2, #1
 800d8fc:	601a      	str	r2, [r3, #0]
}
 800d8fe:	bf00      	nop
 800d900:	46bd      	mov	sp, r7
 800d902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d906:	4770      	bx	lr
 800d908:	240401f8 	.word	0x240401f8

0800d90c <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 800d90c:	b480      	push	{r7}
 800d90e:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 800d910:	4b03      	ldr	r3, [pc, #12]	; (800d920 <BSP_SD_ReadCpltCallback+0x14>)
 800d912:	2201      	movs	r2, #1
 800d914:	601a      	str	r2, [r3, #0]
}
 800d916:	bf00      	nop
 800d918:	46bd      	mov	sp, r7
 800d91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d91e:	4770      	bx	lr
 800d920:	240401fc 	.word	0x240401fc

0800d924 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b084      	sub	sp, #16
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	460b      	mov	r3, r1
 800d92e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800d930:	f248 0074 	movw	r0, #32884	; 0x8074
 800d934:	f005 fed0 	bl	80136d8 <malloc>
 800d938:	4603      	mov	r3, r0
 800d93a:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d105      	bne.n	800d94e <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	2200      	movs	r2, #0
 800d946:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800d94a:	2302      	movs	r3, #2
 800d94c:	e034      	b.n	800d9b8 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	68fa      	ldr	r2, [r7, #12]
 800d952:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	7c1b      	ldrb	r3, [r3, #16]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d115      	bne.n	800d98a <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d95e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d962:	2202      	movs	r2, #2
 800d964:	2101      	movs	r1, #1
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f005 fd1d 	bl	80133a6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	2201      	movs	r2, #1
 800d970:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800d974:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d978:	2202      	movs	r2, #2
 800d97a:	2181      	movs	r1, #129	; 0x81
 800d97c:	6878      	ldr	r0, [r7, #4]
 800d97e:	f005 fd12 	bl	80133a6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	2201      	movs	r2, #1
 800d986:	871a      	strh	r2, [r3, #56]	; 0x38
 800d988:	e012      	b.n	800d9b0 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d98a:	2340      	movs	r3, #64	; 0x40
 800d98c:	2202      	movs	r2, #2
 800d98e:	2101      	movs	r1, #1
 800d990:	6878      	ldr	r0, [r7, #4]
 800d992:	f005 fd08 	bl	80133a6 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	2201      	movs	r2, #1
 800d99a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800d99e:	2340      	movs	r3, #64	; 0x40
 800d9a0:	2202      	movs	r2, #2
 800d9a2:	2181      	movs	r1, #129	; 0x81
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f005 fcfe 	bl	80133a6 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	2201      	movs	r2, #1
 800d9ae:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f000 f98e 	bl	800dcd2 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800d9b6:	2300      	movs	r3, #0
}
 800d9b8:	4618      	mov	r0, r3
 800d9ba:	3710      	adds	r7, #16
 800d9bc:	46bd      	mov	sp, r7
 800d9be:	bd80      	pop	{r7, pc}

0800d9c0 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d9c0:	b580      	push	{r7, lr}
 800d9c2:	b082      	sub	sp, #8
 800d9c4:	af00      	add	r7, sp, #0
 800d9c6:	6078      	str	r0, [r7, #4]
 800d9c8:	460b      	mov	r3, r1
 800d9ca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800d9cc:	2101      	movs	r1, #1
 800d9ce:	6878      	ldr	r0, [r7, #4]
 800d9d0:	f005 fd0f 	bl	80133f2 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	2200      	movs	r2, #0
 800d9d8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800d9dc:	2181      	movs	r1, #129	; 0x81
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	f005 fd07 	bl	80133f2 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	2200      	movs	r2, #0
 800d9e8:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	f000 f9cf 	bl	800dd8e <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d009      	beq.n	800da0e <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da00:	4618      	mov	r0, r3
 800da02:	f005 fe71 	bl	80136e8 <free>
    pdev->pClassData = NULL;
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	2200      	movs	r2, #0
 800da0a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800da0e:	2300      	movs	r3, #0
}
 800da10:	4618      	mov	r0, r3
 800da12:	3708      	adds	r7, #8
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b086      	sub	sp, #24
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da28:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800da2a:	2300      	movs	r3, #0
 800da2c:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800da2e:	2300      	movs	r3, #0
 800da30:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800da32:	683b      	ldr	r3, [r7, #0]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d04d      	beq.n	800dada <USBD_MSC_Setup+0xc2>
 800da3e:	2b20      	cmp	r3, #32
 800da40:	f040 80c6 	bne.w	800dbd0 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800da44:	683b      	ldr	r3, [r7, #0]
 800da46:	785b      	ldrb	r3, [r3, #1]
 800da48:	2bfe      	cmp	r3, #254	; 0xfe
 800da4a:	d002      	beq.n	800da52 <USBD_MSC_Setup+0x3a>
 800da4c:	2bff      	cmp	r3, #255	; 0xff
 800da4e:	d024      	beq.n	800da9a <USBD_MSC_Setup+0x82>
 800da50:	e03b      	b.n	800daca <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800da52:	683b      	ldr	r3, [r7, #0]
 800da54:	885b      	ldrh	r3, [r3, #2]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d118      	bne.n	800da8c <USBD_MSC_Setup+0x74>
 800da5a:	683b      	ldr	r3, [r7, #0]
 800da5c:	88db      	ldrh	r3, [r3, #6]
 800da5e:	2b01      	cmp	r3, #1
 800da60:	d114      	bne.n	800da8c <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800da62:	683b      	ldr	r3, [r7, #0]
 800da64:	781b      	ldrb	r3, [r3, #0]
 800da66:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800da68:	2b00      	cmp	r3, #0
 800da6a:	da0f      	bge.n	800da8c <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da72:	699b      	ldr	r3, [r3, #24]
 800da74:	4798      	blx	r3
 800da76:	4603      	mov	r3, r0
 800da78:	461a      	mov	r2, r3
 800da7a:	693b      	ldr	r3, [r7, #16]
 800da7c:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	2201      	movs	r2, #1
 800da82:	4619      	mov	r1, r3
 800da84:	6878      	ldr	r0, [r7, #4]
 800da86:	f002 fdaa 	bl	80105de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800da8a:	e025      	b.n	800dad8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800da8c:	6839      	ldr	r1, [r7, #0]
 800da8e:	6878      	ldr	r0, [r7, #4]
 800da90:	f002 fd34 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800da94:	2303      	movs	r3, #3
 800da96:	75fb      	strb	r3, [r7, #23]
      break;
 800da98:	e01e      	b.n	800dad8 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800da9a:	683b      	ldr	r3, [r7, #0]
 800da9c:	885b      	ldrh	r3, [r3, #2]
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d10c      	bne.n	800dabc <USBD_MSC_Setup+0xa4>
 800daa2:	683b      	ldr	r3, [r7, #0]
 800daa4:	88db      	ldrh	r3, [r3, #6]
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d108      	bne.n	800dabc <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800daaa:	683b      	ldr	r3, [r7, #0]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800dab0:	2b00      	cmp	r3, #0
 800dab2:	db03      	blt.n	800dabc <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f000 f947 	bl	800dd48 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800daba:	e00d      	b.n	800dad8 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800dabc:	6839      	ldr	r1, [r7, #0]
 800dabe:	6878      	ldr	r0, [r7, #4]
 800dac0:	f002 fd1c 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800dac4:	2303      	movs	r3, #3
 800dac6:	75fb      	strb	r3, [r7, #23]
      break;
 800dac8:	e006      	b.n	800dad8 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800daca:	6839      	ldr	r1, [r7, #0]
 800dacc:	6878      	ldr	r0, [r7, #4]
 800dace:	f002 fd15 	bl	80104fc <USBD_CtlError>
      ret = USBD_FAIL;
 800dad2:	2303      	movs	r3, #3
 800dad4:	75fb      	strb	r3, [r7, #23]
      break;
 800dad6:	bf00      	nop
    }
    break;
 800dad8:	e081      	b.n	800dbde <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800dada:	683b      	ldr	r3, [r7, #0]
 800dadc:	785b      	ldrb	r3, [r3, #1]
 800dade:	2b0b      	cmp	r3, #11
 800dae0:	d86d      	bhi.n	800dbbe <USBD_MSC_Setup+0x1a6>
 800dae2:	a201      	add	r2, pc, #4	; (adr r2, 800dae8 <USBD_MSC_Setup+0xd0>)
 800dae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dae8:	0800db19 	.word	0x0800db19
 800daec:	0800db8f 	.word	0x0800db8f
 800daf0:	0800dbbf 	.word	0x0800dbbf
 800daf4:	0800dbbf 	.word	0x0800dbbf
 800daf8:	0800dbbf 	.word	0x0800dbbf
 800dafc:	0800dbbf 	.word	0x0800dbbf
 800db00:	0800dbbf 	.word	0x0800dbbf
 800db04:	0800dbbf 	.word	0x0800dbbf
 800db08:	0800dbbf 	.word	0x0800dbbf
 800db0c:	0800dbbf 	.word	0x0800dbbf
 800db10:	0800db41 	.word	0x0800db41
 800db14:	0800db69 	.word	0x0800db69
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db1e:	2b03      	cmp	r3, #3
 800db20:	d107      	bne.n	800db32 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800db22:	f107 030e 	add.w	r3, r7, #14
 800db26:	2202      	movs	r2, #2
 800db28:	4619      	mov	r1, r3
 800db2a:	6878      	ldr	r0, [r7, #4]
 800db2c:	f002 fd57 	bl	80105de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800db30:	e04d      	b.n	800dbce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800db32:	6839      	ldr	r1, [r7, #0]
 800db34:	6878      	ldr	r0, [r7, #4]
 800db36:	f002 fce1 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800db3a:	2303      	movs	r3, #3
 800db3c:	75fb      	strb	r3, [r7, #23]
      break;
 800db3e:	e046      	b.n	800dbce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db46:	2b03      	cmp	r3, #3
 800db48:	d107      	bne.n	800db5a <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800db4a:	693b      	ldr	r3, [r7, #16]
 800db4c:	3304      	adds	r3, #4
 800db4e:	2201      	movs	r2, #1
 800db50:	4619      	mov	r1, r3
 800db52:	6878      	ldr	r0, [r7, #4]
 800db54:	f002 fd43 	bl	80105de <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800db58:	e039      	b.n	800dbce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800db5a:	6839      	ldr	r1, [r7, #0]
 800db5c:	6878      	ldr	r0, [r7, #4]
 800db5e:	f002 fccd 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800db62:	2303      	movs	r3, #3
 800db64:	75fb      	strb	r3, [r7, #23]
      break;
 800db66:	e032      	b.n	800dbce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db6e:	2b03      	cmp	r3, #3
 800db70:	d106      	bne.n	800db80 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	885b      	ldrh	r3, [r3, #2]
 800db76:	b2db      	uxtb	r3, r3
 800db78:	461a      	mov	r2, r3
 800db7a:	693b      	ldr	r3, [r7, #16]
 800db7c:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800db7e:	e026      	b.n	800dbce <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800db80:	6839      	ldr	r1, [r7, #0]
 800db82:	6878      	ldr	r0, [r7, #4]
 800db84:	f002 fcba 	bl	80104fc <USBD_CtlError>
        ret = USBD_FAIL;
 800db88:	2303      	movs	r3, #3
 800db8a:	75fb      	strb	r3, [r7, #23]
      break;
 800db8c:	e01f      	b.n	800dbce <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db94:	2b03      	cmp	r3, #3
 800db96:	d119      	bne.n	800dbcc <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	885b      	ldrh	r3, [r3, #2]
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d115      	bne.n	800dbcc <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800dba0:	683b      	ldr	r3, [r7, #0]
 800dba2:	889b      	ldrh	r3, [r3, #4]
 800dba4:	b2db      	uxtb	r3, r3
 800dba6:	4619      	mov	r1, r3
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f005 fc41 	bl	8013430 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800dbae:	683b      	ldr	r3, [r7, #0]
 800dbb0:	889b      	ldrh	r3, [r3, #4]
 800dbb2:	b2db      	uxtb	r3, r3
 800dbb4:	4619      	mov	r1, r3
 800dbb6:	6878      	ldr	r0, [r7, #4]
 800dbb8:	f000 fa90 	bl	800e0dc <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800dbbc:	e006      	b.n	800dbcc <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800dbbe:	6839      	ldr	r1, [r7, #0]
 800dbc0:	6878      	ldr	r0, [r7, #4]
 800dbc2:	f002 fc9b 	bl	80104fc <USBD_CtlError>
      ret = USBD_FAIL;
 800dbc6:	2303      	movs	r3, #3
 800dbc8:	75fb      	strb	r3, [r7, #23]
      break;
 800dbca:	e000      	b.n	800dbce <USBD_MSC_Setup+0x1b6>
      break;
 800dbcc:	bf00      	nop
    }
    break;
 800dbce:	e006      	b.n	800dbde <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800dbd0:	6839      	ldr	r1, [r7, #0]
 800dbd2:	6878      	ldr	r0, [r7, #4]
 800dbd4:	f002 fc92 	bl	80104fc <USBD_CtlError>
    ret = USBD_FAIL;
 800dbd8:	2303      	movs	r3, #3
 800dbda:	75fb      	strb	r3, [r7, #23]
    break;
 800dbdc:	bf00      	nop
  }

  return (uint8_t)ret;
 800dbde:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	3718      	adds	r7, #24
 800dbe4:	46bd      	mov	sp, r7
 800dbe6:	bd80      	pop	{r7, pc}

0800dbe8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dbe8:	b580      	push	{r7, lr}
 800dbea:	b082      	sub	sp, #8
 800dbec:	af00      	add	r7, sp, #0
 800dbee:	6078      	str	r0, [r7, #4]
 800dbf0:	460b      	mov	r3, r1
 800dbf2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800dbf4:	78fb      	ldrb	r3, [r7, #3]
 800dbf6:	4619      	mov	r1, r3
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f8d9 	bl	800ddb0 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800dbfe:	2300      	movs	r3, #0
}
 800dc00:	4618      	mov	r0, r3
 800dc02:	3708      	adds	r7, #8
 800dc04:	46bd      	mov	sp, r7
 800dc06:	bd80      	pop	{r7, pc}

0800dc08 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800dc08:	b580      	push	{r7, lr}
 800dc0a:	b082      	sub	sp, #8
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	6078      	str	r0, [r7, #4]
 800dc10:	460b      	mov	r3, r1
 800dc12:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800dc14:	78fb      	ldrb	r3, [r7, #3]
 800dc16:	4619      	mov	r1, r3
 800dc18:	6878      	ldr	r0, [r7, #4]
 800dc1a:	f000 f8fd 	bl	800de18 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800dc1e:	2300      	movs	r3, #0
}
 800dc20:	4618      	mov	r0, r3
 800dc22:	3708      	adds	r7, #8
 800dc24:	46bd      	mov	sp, r7
 800dc26:	bd80      	pop	{r7, pc}

0800dc28 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800dc28:	b480      	push	{r7}
 800dc2a:	b083      	sub	sp, #12
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2220      	movs	r2, #32
 800dc34:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800dc36:	4b03      	ldr	r3, [pc, #12]	; (800dc44 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800dc38:	4618      	mov	r0, r3
 800dc3a:	370c      	adds	r7, #12
 800dc3c:	46bd      	mov	sp, r7
 800dc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc42:	4770      	bx	lr
 800dc44:	24000048 	.word	0x24000048

0800dc48 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2220      	movs	r2, #32
 800dc54:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800dc56:	4b03      	ldr	r3, [pc, #12]	; (800dc64 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800dc58:	4618      	mov	r0, r3
 800dc5a:	370c      	adds	r7, #12
 800dc5c:	46bd      	mov	sp, r7
 800dc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc62:	4770      	bx	lr
 800dc64:	24000068 	.word	0x24000068

0800dc68 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800dc68:	b480      	push	{r7}
 800dc6a:	b083      	sub	sp, #12
 800dc6c:	af00      	add	r7, sp, #0
 800dc6e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2220      	movs	r2, #32
 800dc74:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800dc76:	4b03      	ldr	r3, [pc, #12]	; (800dc84 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	370c      	adds	r7, #12
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc82:	4770      	bx	lr
 800dc84:	24000088 	.word	0x24000088

0800dc88 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800dc88:	b480      	push	{r7}
 800dc8a:	b083      	sub	sp, #12
 800dc8c:	af00      	add	r7, sp, #0
 800dc8e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	220a      	movs	r2, #10
 800dc94:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800dc96:	4b03      	ldr	r3, [pc, #12]	; (800dca4 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800dc98:	4618      	mov	r0, r3
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	240000a8 	.word	0x240000a8

0800dca8 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800dcb2:	683b      	ldr	r3, [r7, #0]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d101      	bne.n	800dcbc <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800dcb8:	2303      	movs	r3, #3
 800dcba:	e004      	b.n	800dcc6 <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	683a      	ldr	r2, [r7, #0]
 800dcc0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800dcc4:	2300      	movs	r3, #0
}
 800dcc6:	4618      	mov	r0, r3
 800dcc8:	370c      	adds	r7, #12
 800dcca:	46bd      	mov	sp, r7
 800dccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcd0:	4770      	bx	lr

0800dcd2 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800dcd2:	b580      	push	{r7, lr}
 800dcd4:	b084      	sub	sp, #16
 800dcd6:	af00      	add	r7, sp, #0
 800dcd8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dce0:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	2200      	movs	r2, #0
 800dce6:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	2200      	movs	r2, #0
 800dcec:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800dcee:	68fa      	ldr	r2, [r7, #12]
 800dcf0:	f248 0361 	movw	r3, #32865	; 0x8061
 800dcf4:	4413      	add	r3, r2
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 800dcfa:	68fa      	ldr	r2, [r7, #12]
 800dcfc:	f248 0360 	movw	r3, #32864	; 0x8060
 800dd00:	4413      	add	r3, r2
 800dd02:	2200      	movs	r2, #0
 800dd04:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd06:	68fa      	ldr	r2, [r7, #12]
 800dd08:	f248 0362 	movw	r3, #32866	; 0x8062
 800dd0c:	4413      	add	r3, r2
 800dd0e:	2200      	movs	r2, #0
 800dd10:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2000      	movs	r0, #0
 800dd1c:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800dd1e:	2101      	movs	r1, #1
 800dd20:	6878      	ldr	r0, [r7, #4]
 800dd22:	f005 fb85 	bl	8013430 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800dd26:	2181      	movs	r1, #129	; 0x81
 800dd28:	6878      	ldr	r0, [r7, #4]
 800dd2a:	f005 fb81 	bl	8013430 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800dd2e:	68fb      	ldr	r3, [r7, #12]
 800dd30:	f248 0210 	movw	r2, #32784	; 0x8010
 800dd34:	441a      	add	r2, r3
 800dd36:	231f      	movs	r3, #31
 800dd38:	2101      	movs	r1, #1
 800dd3a:	6878      	ldr	r0, [r7, #4]
 800dd3c:	f005 fc41 	bl	80135c2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800dd40:	bf00      	nop
 800dd42:	3710      	adds	r7, #16
 800dd44:	46bd      	mov	sp, r7
 800dd46:	bd80      	pop	{r7, pc}

0800dd48 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800dd48:	b580      	push	{r7, lr}
 800dd4a:	b084      	sub	sp, #16
 800dd4c:	af00      	add	r7, sp, #0
 800dd4e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd50:	687b      	ldr	r3, [r7, #4]
 800dd52:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd56:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800dd58:	68fb      	ldr	r3, [r7, #12]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	2201      	movs	r2, #1
 800dd62:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800dd64:	2181      	movs	r1, #129	; 0x81
 800dd66:	6878      	ldr	r0, [r7, #4]
 800dd68:	f005 fba0 	bl	80134ac <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800dd6c:	2101      	movs	r1, #1
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f005 fb9c 	bl	80134ac <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800dd74:	68fb      	ldr	r3, [r7, #12]
 800dd76:	f248 0210 	movw	r2, #32784	; 0x8010
 800dd7a:	441a      	add	r2, r3
 800dd7c:	231f      	movs	r3, #31
 800dd7e:	2101      	movs	r1, #1
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f005 fc1e 	bl	80135c2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800dd86:	bf00      	nop
 800dd88:	3710      	adds	r7, #16
 800dd8a:	46bd      	mov	sp, r7
 800dd8c:	bd80      	pop	{r7, pc}

0800dd8e <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800dd8e:	b480      	push	{r7}
 800dd90:	b085      	sub	sp, #20
 800dd92:	af00      	add	r7, sp, #0
 800dd94:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd9c:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	2200      	movs	r2, #0
 800dda2:	721a      	strb	r2, [r3, #8]
}
 800dda4:	bf00      	nop
 800dda6:	3714      	adds	r7, #20
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr

0800ddb0 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ddb0:	b580      	push	{r7, lr}
 800ddb2:	b084      	sub	sp, #16
 800ddb4:	af00      	add	r7, sp, #0
 800ddb6:	6078      	str	r0, [r7, #4]
 800ddb8:	460b      	mov	r3, r1
 800ddba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddc2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	7a1b      	ldrb	r3, [r3, #8]
 800ddc8:	2b02      	cmp	r3, #2
 800ddca:	d004      	beq.n	800ddd6 <MSC_BOT_DataIn+0x26>
 800ddcc:	2b02      	cmp	r3, #2
 800ddce:	db1c      	blt.n	800de0a <MSC_BOT_DataIn+0x5a>
 800ddd0:	2b04      	cmp	r3, #4
 800ddd2:	dc1a      	bgt.n	800de0a <MSC_BOT_DataIn+0x5a>
 800ddd4:	e014      	b.n	800de00 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	f248 031d 	movw	r3, #32797	; 0x801d
 800dddc:	4413      	add	r3, r2
 800ddde:	7819      	ldrb	r1, [r3, #0]
 800dde0:	68fa      	ldr	r2, [r7, #12]
 800dde2:	f248 031f 	movw	r3, #32799	; 0x801f
 800dde6:	4413      	add	r3, r2
 800dde8:	461a      	mov	r2, r3
 800ddea:	6878      	ldr	r0, [r7, #4]
 800ddec:	f000 f99e 	bl	800e12c <SCSI_ProcessCmd>
 800ddf0:	4603      	mov	r3, r0
 800ddf2:	2b00      	cmp	r3, #0
 800ddf4:	da0b      	bge.n	800de0e <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800ddf6:	2101      	movs	r1, #1
 800ddf8:	6878      	ldr	r0, [r7, #4]
 800ddfa:	f000 f90b 	bl	800e014 <MSC_BOT_SendCSW>
    }
    break;
 800ddfe:	e006      	b.n	800de0e <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800de00:	2100      	movs	r1, #0
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	f000 f906 	bl	800e014 <MSC_BOT_SendCSW>
    break;
 800de08:	e002      	b.n	800de10 <MSC_BOT_DataIn+0x60>

  default:
    break;
 800de0a:	bf00      	nop
 800de0c:	e000      	b.n	800de10 <MSC_BOT_DataIn+0x60>
    break;
 800de0e:	bf00      	nop
  }
}
 800de10:	bf00      	nop
 800de12:	3710      	adds	r7, #16
 800de14:	46bd      	mov	sp, r7
 800de16:	bd80      	pop	{r7, pc}

0800de18 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b084      	sub	sp, #16
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
 800de20:	460b      	mov	r3, r1
 800de22:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de2a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	7a1b      	ldrb	r3, [r3, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <MSC_BOT_DataOut+0x22>
 800de34:	2b01      	cmp	r3, #1
 800de36:	d004      	beq.n	800de42 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800de38:	e018      	b.n	800de6c <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 800de3a:	6878      	ldr	r0, [r7, #4]
 800de3c:	f000 f81a 	bl	800de74 <MSC_BOT_CBW_Decode>
      break;
 800de40:	e014      	b.n	800de6c <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800de42:	68fa      	ldr	r2, [r7, #12]
 800de44:	f248 031d 	movw	r3, #32797	; 0x801d
 800de48:	4413      	add	r3, r2
 800de4a:	7819      	ldrb	r1, [r3, #0]
 800de4c:	68fa      	ldr	r2, [r7, #12]
 800de4e:	f248 031f 	movw	r3, #32799	; 0x801f
 800de52:	4413      	add	r3, r2
 800de54:	461a      	mov	r2, r3
 800de56:	6878      	ldr	r0, [r7, #4]
 800de58:	f000 f968 	bl	800e12c <SCSI_ProcessCmd>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	da03      	bge.n	800de6a <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800de62:	2101      	movs	r1, #1
 800de64:	6878      	ldr	r0, [r7, #4]
 800de66:	f000 f8d5 	bl	800e014 <MSC_BOT_SendCSW>
      break;
 800de6a:	bf00      	nop
  }
}
 800de6c:	bf00      	nop
 800de6e:	3710      	adds	r7, #16
 800de70:	46bd      	mov	sp, r7
 800de72:	bd80      	pop	{r7, pc}

0800de74 <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800de74:	b580      	push	{r7, lr}
 800de76:	b084      	sub	sp, #16
 800de78:	af00      	add	r7, sp, #0
 800de7a:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800de82:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800de84:	68fa      	ldr	r2, [r7, #12]
 800de86:	f248 0314 	movw	r3, #32788	; 0x8014
 800de8a:	4413      	add	r3, r2
 800de8c:	681a      	ldr	r2, [r3, #0]
 800de8e:	68f9      	ldr	r1, [r7, #12]
 800de90:	f248 0334 	movw	r3, #32820	; 0x8034
 800de94:	440b      	add	r3, r1
 800de96:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800de98:	68fa      	ldr	r2, [r7, #12]
 800de9a:	f248 0318 	movw	r3, #32792	; 0x8018
 800de9e:	4413      	add	r3, r2
 800dea0:	681a      	ldr	r2, [r3, #0]
 800dea2:	68f9      	ldr	r1, [r7, #12]
 800dea4:	f248 0338 	movw	r3, #32824	; 0x8038
 800dea8:	440b      	add	r3, r1
 800deaa:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800deac:	2101      	movs	r1, #1
 800deae:	6878      	ldr	r0, [r7, #4]
 800deb0:	f005 fba8 	bl	8013604 <USBD_LL_GetRxDataSize>
 800deb4:	4603      	mov	r3, r0
 800deb6:	2b1f      	cmp	r3, #31
 800deb8:	d11c      	bne.n	800def4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800deba:	68fa      	ldr	r2, [r7, #12]
 800debc:	f248 0310 	movw	r3, #32784	; 0x8010
 800dec0:	4413      	add	r3, r2
 800dec2:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800dec4:	4a38      	ldr	r2, [pc, #224]	; (800dfa8 <MSC_BOT_CBW_Decode+0x134>)
 800dec6:	4293      	cmp	r3, r2
 800dec8:	d114      	bne.n	800def4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800deca:	68fa      	ldr	r2, [r7, #12]
 800decc:	f248 031d 	movw	r3, #32797	; 0x801d
 800ded0:	4413      	add	r3, r2
 800ded2:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800ded4:	2b01      	cmp	r3, #1
 800ded6:	d80d      	bhi.n	800def4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800ded8:	68fa      	ldr	r2, [r7, #12]
 800deda:	f248 031e 	movw	r3, #32798	; 0x801e
 800dede:	4413      	add	r3, r2
 800dee0:	781b      	ldrb	r3, [r3, #0]
 800dee2:	2b00      	cmp	r3, #0
 800dee4:	d006      	beq.n	800def4 <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 800dee6:	68fa      	ldr	r2, [r7, #12]
 800dee8:	f248 031e 	movw	r3, #32798	; 0x801e
 800deec:	4413      	add	r3, r2
 800deee:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800def0:	2b10      	cmp	r3, #16
 800def2:	d910      	bls.n	800df16 <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800def4:	68fa      	ldr	r2, [r7, #12]
 800def6:	f248 031d 	movw	r3, #32797	; 0x801d
 800defa:	4413      	add	r3, r2
 800defc:	7819      	ldrb	r1, [r3, #0]
 800defe:	2320      	movs	r3, #32
 800df00:	2205      	movs	r2, #5
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f000 fd36 	bl	800e974 <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2202      	movs	r2, #2
 800df0c:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800df0e:	6878      	ldr	r0, [r7, #4]
 800df10:	f000 f8b2 	bl	800e078 <MSC_BOT_Abort>
 800df14:	e044      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800df16:	68fa      	ldr	r2, [r7, #12]
 800df18:	f248 031d 	movw	r3, #32797	; 0x801d
 800df1c:	4413      	add	r3, r2
 800df1e:	7819      	ldrb	r1, [r3, #0]
 800df20:	68fa      	ldr	r2, [r7, #12]
 800df22:	f248 031f 	movw	r3, #32799	; 0x801f
 800df26:	4413      	add	r3, r2
 800df28:	461a      	mov	r2, r3
 800df2a:	6878      	ldr	r0, [r7, #4]
 800df2c:	f000 f8fe 	bl	800e12c <SCSI_ProcessCmd>
 800df30:	4603      	mov	r3, r0
 800df32:	2b00      	cmp	r3, #0
 800df34:	da0c      	bge.n	800df50 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	7a1b      	ldrb	r3, [r3, #8]
 800df3a:	2b05      	cmp	r3, #5
 800df3c:	d104      	bne.n	800df48 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800df3e:	2101      	movs	r1, #1
 800df40:	6878      	ldr	r0, [r7, #4]
 800df42:	f000 f867 	bl	800e014 <MSC_BOT_SendCSW>
 800df46:	e02b      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800df48:	6878      	ldr	r0, [r7, #4]
 800df4a:	f000 f895 	bl	800e078 <MSC_BOT_Abort>
 800df4e:	e027      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	7a1b      	ldrb	r3, [r3, #8]
 800df54:	2b02      	cmp	r3, #2
 800df56:	d022      	beq.n	800df9e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df58:	68fb      	ldr	r3, [r7, #12]
 800df5a:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d01e      	beq.n	800df9e <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800df60:	68fb      	ldr	r3, [r7, #12]
 800df62:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800df64:	2b03      	cmp	r3, #3
 800df66:	d01a      	beq.n	800df9e <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	68db      	ldr	r3, [r3, #12]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d009      	beq.n	800df84 <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f103 0110 	add.w	r1, r3, #16
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	68db      	ldr	r3, [r3, #12]
 800df7a:	461a      	mov	r2, r3
 800df7c:	6878      	ldr	r0, [r7, #4]
 800df7e:	f000 f815 	bl	800dfac <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800df82:	e00d      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	68db      	ldr	r3, [r3, #12]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d104      	bne.n	800df96 <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800df8c:	2100      	movs	r1, #0
 800df8e:	6878      	ldr	r0, [r7, #4]
 800df90:	f000 f840 	bl	800e014 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800df94:	e004      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800df96:	6878      	ldr	r0, [r7, #4]
 800df98:	f000 f86e 	bl	800e078 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800df9c:	e000      	b.n	800dfa0 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 800df9e:	bf00      	nop
    }
  }
}
 800dfa0:	3710      	adds	r7, #16
 800dfa2:	46bd      	mov	sp, r7
 800dfa4:	bd80      	pop	{r7, pc}
 800dfa6:	bf00      	nop
 800dfa8:	43425355 	.word	0x43425355

0800dfac <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800dfac:	b580      	push	{r7, lr}
 800dfae:	b086      	sub	sp, #24
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	60f8      	str	r0, [r7, #12]
 800dfb4:	60b9      	str	r1, [r7, #8]
 800dfb6:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dfbe:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800dfc0:	697a      	ldr	r2, [r7, #20]
 800dfc2:	f248 0318 	movw	r3, #32792	; 0x8018
 800dfc6:	4413      	add	r3, r2
 800dfc8:	681b      	ldr	r3, [r3, #0]
 800dfca:	687a      	ldr	r2, [r7, #4]
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	bf28      	it	cs
 800dfd0:	4613      	movcs	r3, r2
 800dfd2:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800dfd4:	697a      	ldr	r2, [r7, #20]
 800dfd6:	f248 0338 	movw	r3, #32824	; 0x8038
 800dfda:	4413      	add	r3, r2
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	1ad2      	subs	r2, r2, r3
 800dfe2:	6979      	ldr	r1, [r7, #20]
 800dfe4:	f248 0338 	movw	r3, #32824	; 0x8038
 800dfe8:	440b      	add	r3, r1
 800dfea:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800dfec:	697a      	ldr	r2, [r7, #20]
 800dfee:	f248 033c 	movw	r3, #32828	; 0x803c
 800dff2:	4413      	add	r3, r2
 800dff4:	2200      	movs	r2, #0
 800dff6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800dff8:	697b      	ldr	r3, [r7, #20]
 800dffa:	2204      	movs	r2, #4
 800dffc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800dffe:	693b      	ldr	r3, [r7, #16]
 800e000:	68ba      	ldr	r2, [r7, #8]
 800e002:	2181      	movs	r1, #129	; 0x81
 800e004:	68f8      	ldr	r0, [r7, #12]
 800e006:	f005 fabb 	bl	8013580 <USBD_LL_Transmit>
}
 800e00a:	bf00      	nop
 800e00c:	3718      	adds	r7, #24
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
	...

0800e014 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800e014:	b580      	push	{r7, lr}
 800e016:	b084      	sub	sp, #16
 800e018:	af00      	add	r7, sp, #0
 800e01a:	6078      	str	r0, [r7, #4]
 800e01c:	460b      	mov	r3, r1
 800e01e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e026:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800e028:	68fa      	ldr	r2, [r7, #12]
 800e02a:	f248 0330 	movw	r3, #32816	; 0x8030
 800e02e:	4413      	add	r3, r2
 800e030:	4a10      	ldr	r2, [pc, #64]	; (800e074 <MSC_BOT_SendCSW+0x60>)
 800e032:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 800e034:	68fa      	ldr	r2, [r7, #12]
 800e036:	f248 033c 	movw	r3, #32828	; 0x803c
 800e03a:	4413      	add	r3, r2
 800e03c:	78fa      	ldrb	r2, [r7, #3]
 800e03e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 800e040:	68fb      	ldr	r3, [r7, #12]
 800e042:	2200      	movs	r2, #0
 800e044:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	f248 0230 	movw	r2, #32816	; 0x8030
 800e04c:	441a      	add	r2, r3
 800e04e:	230d      	movs	r3, #13
 800e050:	2181      	movs	r1, #129	; 0x81
 800e052:	6878      	ldr	r0, [r7, #4]
 800e054:	f005 fa94 	bl	8013580 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	f248 0210 	movw	r2, #32784	; 0x8010
 800e05e:	441a      	add	r2, r3
 800e060:	231f      	movs	r3, #31
 800e062:	2101      	movs	r1, #1
 800e064:	6878      	ldr	r0, [r7, #4]
 800e066:	f005 faac 	bl	80135c2 <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800e06a:	bf00      	nop
 800e06c:	3710      	adds	r7, #16
 800e06e:	46bd      	mov	sp, r7
 800e070:	bd80      	pop	{r7, pc}
 800e072:	bf00      	nop
 800e074:	53425355 	.word	0x53425355

0800e078 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800e078:	b580      	push	{r7, lr}
 800e07a:	b084      	sub	sp, #16
 800e07c:	af00      	add	r7, sp, #0
 800e07e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e086:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800e088:	68fa      	ldr	r2, [r7, #12]
 800e08a:	f248 031c 	movw	r3, #32796	; 0x801c
 800e08e:	4413      	add	r3, r2
 800e090:	781b      	ldrb	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d10e      	bne.n	800e0b4 <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 800e096:	68fa      	ldr	r2, [r7, #12]
 800e098:	f248 0318 	movw	r3, #32792	; 0x8018
 800e09c:	4413      	add	r3, r2
 800e09e:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 800e0a0:	2b00      	cmp	r3, #0
 800e0a2:	d007      	beq.n	800e0b4 <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d103      	bne.n	800e0b4 <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e0ac:	2101      	movs	r1, #1
 800e0ae:	6878      	ldr	r0, [r7, #4]
 800e0b0:	f005 f9dd 	bl	801346e <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e0b4:	2181      	movs	r1, #129	; 0x81
 800e0b6:	6878      	ldr	r0, [r7, #4]
 800e0b8:	f005 f9d9 	bl	801346e <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800e0bc:	68fb      	ldr	r3, [r7, #12]
 800e0be:	7a5b      	ldrb	r3, [r3, #9]
 800e0c0:	2b02      	cmp	r3, #2
 800e0c2:	d107      	bne.n	800e0d4 <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e0c4:	2181      	movs	r1, #129	; 0x81
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f005 f9d1 	bl	801346e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e0cc:	2101      	movs	r1, #1
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f005 f9cd 	bl	801346e <USBD_LL_StallEP>
  }
}
 800e0d4:	bf00      	nop
 800e0d6:	3710      	adds	r7, #16
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	bd80      	pop	{r7, pc}

0800e0dc <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b084      	sub	sp, #16
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	6078      	str	r0, [r7, #4]
 800e0e4:	460b      	mov	r3, r1
 800e0e6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e0ee:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800e0f0:	68fb      	ldr	r3, [r7, #12]
 800e0f2:	7a5b      	ldrb	r3, [r3, #9]
 800e0f4:	2b02      	cmp	r3, #2
 800e0f6:	d108      	bne.n	800e10a <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800e0f8:	2181      	movs	r1, #129	; 0x81
 800e0fa:	6878      	ldr	r0, [r7, #4]
 800e0fc:	f005 f9b7 	bl	801346e <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800e100:	2101      	movs	r1, #1
 800e102:	6878      	ldr	r0, [r7, #4]
 800e104:	f005 f9b3 	bl	801346e <USBD_LL_StallEP>
 800e108:	e00d      	b.n	800e126 <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800e10a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e10e:	2b00      	cmp	r3, #0
 800e110:	da08      	bge.n	800e124 <MSC_BOT_CplClrFeature+0x48>
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	7a5b      	ldrb	r3, [r3, #9]
 800e116:	2b01      	cmp	r3, #1
 800e118:	d004      	beq.n	800e124 <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800e11a:	2101      	movs	r1, #1
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f7ff ff79 	bl	800e014 <MSC_BOT_SendCSW>
 800e122:	e000      	b.n	800e126 <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800e124:	bf00      	nop
  }
}
 800e126:	3710      	adds	r7, #16
 800e128:	46bd      	mov	sp, r7
 800e12a:	bd80      	pop	{r7, pc}

0800e12c <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800e12c:	b580      	push	{r7, lr}
 800e12e:	b086      	sub	sp, #24
 800e130:	af00      	add	r7, sp, #0
 800e132:	60f8      	str	r0, [r7, #12]
 800e134:	460b      	mov	r3, r1
 800e136:	607a      	str	r2, [r7, #4]
 800e138:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e140:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	781b      	ldrb	r3, [r3, #0]
 800e146:	2b25      	cmp	r3, #37	; 0x25
 800e148:	d06e      	beq.n	800e228 <SCSI_ProcessCmd+0xfc>
 800e14a:	2b25      	cmp	r3, #37	; 0x25
 800e14c:	dc11      	bgt.n	800e172 <SCSI_ProcessCmd+0x46>
 800e14e:	2b1a      	cmp	r3, #26
 800e150:	d04f      	beq.n	800e1f2 <SCSI_ProcessCmd+0xc6>
 800e152:	2b1a      	cmp	r3, #26
 800e154:	dc06      	bgt.n	800e164 <SCSI_ProcessCmd+0x38>
 800e156:	2b03      	cmp	r3, #3
 800e158:	d027      	beq.n	800e1aa <SCSI_ProcessCmd+0x7e>
 800e15a:	2b12      	cmp	r3, #18
 800e15c:	d02e      	beq.n	800e1bc <SCSI_ProcessCmd+0x90>
 800e15e:	2b00      	cmp	r3, #0
 800e160:	d01a      	beq.n	800e198 <SCSI_ProcessCmd+0x6c>
 800e162:	e0a0      	b.n	800e2a6 <SCSI_ProcessCmd+0x17a>
 800e164:	2b1e      	cmp	r3, #30
 800e166:	d03b      	beq.n	800e1e0 <SCSI_ProcessCmd+0xb4>
 800e168:	2b23      	cmp	r3, #35	; 0x23
 800e16a:	d054      	beq.n	800e216 <SCSI_ProcessCmd+0xea>
 800e16c:	2b1b      	cmp	r3, #27
 800e16e:	d02e      	beq.n	800e1ce <SCSI_ProcessCmd+0xa2>
 800e170:	e099      	b.n	800e2a6 <SCSI_ProcessCmd+0x17a>
 800e172:	2b5a      	cmp	r3, #90	; 0x5a
 800e174:	d046      	beq.n	800e204 <SCSI_ProcessCmd+0xd8>
 800e176:	2b5a      	cmp	r3, #90	; 0x5a
 800e178:	dc07      	bgt.n	800e18a <SCSI_ProcessCmd+0x5e>
 800e17a:	2b2a      	cmp	r3, #42	; 0x2a
 800e17c:	d078      	beq.n	800e270 <SCSI_ProcessCmd+0x144>
 800e17e:	2b2f      	cmp	r3, #47	; 0x2f
 800e180:	f000 8088 	beq.w	800e294 <SCSI_ProcessCmd+0x168>
 800e184:	2b28      	cmp	r3, #40	; 0x28
 800e186:	d061      	beq.n	800e24c <SCSI_ProcessCmd+0x120>
 800e188:	e08d      	b.n	800e2a6 <SCSI_ProcessCmd+0x17a>
 800e18a:	2ba8      	cmp	r3, #168	; 0xa8
 800e18c:	d067      	beq.n	800e25e <SCSI_ProcessCmd+0x132>
 800e18e:	2baa      	cmp	r3, #170	; 0xaa
 800e190:	d077      	beq.n	800e282 <SCSI_ProcessCmd+0x156>
 800e192:	2b9e      	cmp	r3, #158	; 0x9e
 800e194:	d051      	beq.n	800e23a <SCSI_ProcessCmd+0x10e>
 800e196:	e086      	b.n	800e2a6 <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800e198:	7afb      	ldrb	r3, [r7, #11]
 800e19a:	687a      	ldr	r2, [r7, #4]
 800e19c:	4619      	mov	r1, r3
 800e19e:	68f8      	ldr	r0, [r7, #12]
 800e1a0:	f000 f893 	bl	800e2ca <SCSI_TestUnitReady>
 800e1a4:	4603      	mov	r3, r0
 800e1a6:	75fb      	strb	r3, [r7, #23]
    break;
 800e1a8:	e089      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800e1aa:	7afb      	ldrb	r3, [r7, #11]
 800e1ac:	687a      	ldr	r2, [r7, #4]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	68f8      	ldr	r0, [r7, #12]
 800e1b2:	f000 fb47 	bl	800e844 <SCSI_RequestSense>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	75fb      	strb	r3, [r7, #23]
    break;
 800e1ba:	e080      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800e1bc:	7afb      	ldrb	r3, [r7, #11]
 800e1be:	687a      	ldr	r2, [r7, #4]
 800e1c0:	4619      	mov	r1, r3
 800e1c2:	68f8      	ldr	r0, [r7, #12]
 800e1c4:	f000 f8d2 	bl	800e36c <SCSI_Inquiry>
 800e1c8:	4603      	mov	r3, r0
 800e1ca:	75fb      	strb	r3, [r7, #23]
    break;
 800e1cc:	e077      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800e1ce:	7afb      	ldrb	r3, [r7, #11]
 800e1d0:	687a      	ldr	r2, [r7, #4]
 800e1d2:	4619      	mov	r1, r3
 800e1d4:	68f8      	ldr	r0, [r7, #12]
 800e1d6:	f000 fc27 	bl	800ea28 <SCSI_StartStopUnit>
 800e1da:	4603      	mov	r3, r0
 800e1dc:	75fb      	strb	r3, [r7, #23]
    break;
 800e1de:	e06e      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800e1e0:	7afb      	ldrb	r3, [r7, #11]
 800e1e2:	687a      	ldr	r2, [r7, #4]
 800e1e4:	4619      	mov	r1, r3
 800e1e6:	68f8      	ldr	r0, [r7, #12]
 800e1e8:	f000 fc71 	bl	800eace <SCSI_AllowPreventRemovable>
 800e1ec:	4603      	mov	r3, r0
 800e1ee:	75fb      	strb	r3, [r7, #23]
    break;
 800e1f0:	e065      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800e1f2:	7afb      	ldrb	r3, [r7, #11]
 800e1f4:	687a      	ldr	r2, [r7, #4]
 800e1f6:	4619      	mov	r1, r3
 800e1f8:	68f8      	ldr	r0, [r7, #12]
 800e1fa:	f000 fad7 	bl	800e7ac <SCSI_ModeSense6>
 800e1fe:	4603      	mov	r3, r0
 800e200:	75fb      	strb	r3, [r7, #23]
    break;
 800e202:	e05c      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800e204:	7afb      	ldrb	r3, [r7, #11]
 800e206:	687a      	ldr	r2, [r7, #4]
 800e208:	4619      	mov	r1, r3
 800e20a:	68f8      	ldr	r0, [r7, #12]
 800e20c:	f000 faf4 	bl	800e7f8 <SCSI_ModeSense10>
 800e210:	4603      	mov	r3, r0
 800e212:	75fb      	strb	r3, [r7, #23]
    break;
 800e214:	e053      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800e216:	7afb      	ldrb	r3, [r7, #11]
 800e218:	687a      	ldr	r2, [r7, #4]
 800e21a:	4619      	mov	r1, r3
 800e21c:	68f8      	ldr	r0, [r7, #12]
 800e21e:	f000 fa56 	bl	800e6ce <SCSI_ReadFormatCapacity>
 800e222:	4603      	mov	r3, r0
 800e224:	75fb      	strb	r3, [r7, #23]
    break;
 800e226:	e04a      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800e228:	7afb      	ldrb	r3, [r7, #11]
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	4619      	mov	r1, r3
 800e22e:	68f8      	ldr	r0, [r7, #12]
 800e230:	f000 f910 	bl	800e454 <SCSI_ReadCapacity10>
 800e234:	4603      	mov	r3, r0
 800e236:	75fb      	strb	r3, [r7, #23]
    break;
 800e238:	e041      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800e23a:	7afb      	ldrb	r3, [r7, #11]
 800e23c:	687a      	ldr	r2, [r7, #4]
 800e23e:	4619      	mov	r1, r3
 800e240:	68f8      	ldr	r0, [r7, #12]
 800e242:	f000 f98b 	bl	800e55c <SCSI_ReadCapacity16>
 800e246:	4603      	mov	r3, r0
 800e248:	75fb      	strb	r3, [r7, #23]
    break;
 800e24a:	e038      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800e24c:	7afb      	ldrb	r3, [r7, #11]
 800e24e:	687a      	ldr	r2, [r7, #4]
 800e250:	4619      	mov	r1, r3
 800e252:	68f8      	ldr	r0, [r7, #12]
 800e254:	f000 fc62 	bl	800eb1c <SCSI_Read10>
 800e258:	4603      	mov	r3, r0
 800e25a:	75fb      	strb	r3, [r7, #23]
    break;
 800e25c:	e02f      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800e25e:	7afb      	ldrb	r3, [r7, #11]
 800e260:	687a      	ldr	r2, [r7, #4]
 800e262:	4619      	mov	r1, r3
 800e264:	68f8      	ldr	r0, [r7, #12]
 800e266:	f000 fd0b 	bl	800ec80 <SCSI_Read12>
 800e26a:	4603      	mov	r3, r0
 800e26c:	75fb      	strb	r3, [r7, #23]
    break;
 800e26e:	e026      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800e270:	7afb      	ldrb	r3, [r7, #11]
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	4619      	mov	r1, r3
 800e276:	68f8      	ldr	r0, [r7, #12]
 800e278:	f000 fdbe 	bl	800edf8 <SCSI_Write10>
 800e27c:	4603      	mov	r3, r0
 800e27e:	75fb      	strb	r3, [r7, #23]
    break;
 800e280:	e01d      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800e282:	7afb      	ldrb	r3, [r7, #11]
 800e284:	687a      	ldr	r2, [r7, #4]
 800e286:	4619      	mov	r1, r3
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f000 fe8d 	bl	800efa8 <SCSI_Write12>
 800e28e:	4603      	mov	r3, r0
 800e290:	75fb      	strb	r3, [r7, #23]
    break;
 800e292:	e014      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800e294:	7afb      	ldrb	r3, [r7, #11]
 800e296:	687a      	ldr	r2, [r7, #4]
 800e298:	4619      	mov	r1, r3
 800e29a:	68f8      	ldr	r0, [r7, #12]
 800e29c:	f000 ff6c 	bl	800f178 <SCSI_Verify10>
 800e2a0:	4603      	mov	r3, r0
 800e2a2:	75fb      	strb	r3, [r7, #23]
    break;
 800e2a4:	e00b      	b.n	800e2be <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800e2a6:	7af9      	ldrb	r1, [r7, #11]
 800e2a8:	2320      	movs	r3, #32
 800e2aa:	2205      	movs	r2, #5
 800e2ac:	68f8      	ldr	r0, [r7, #12]
 800e2ae:	f000 fb61 	bl	800e974 <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	2202      	movs	r2, #2
 800e2b6:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800e2b8:	23ff      	movs	r3, #255	; 0xff
 800e2ba:	75fb      	strb	r3, [r7, #23]
    break;
 800e2bc:	bf00      	nop
  }

  return ret;
 800e2be:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e2c2:	4618      	mov	r0, r3
 800e2c4:	3718      	adds	r7, #24
 800e2c6:	46bd      	mov	sp, r7
 800e2c8:	bd80      	pop	{r7, pc}

0800e2ca <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e2ca:	b580      	push	{r7, lr}
 800e2cc:	b086      	sub	sp, #24
 800e2ce:	af00      	add	r7, sp, #0
 800e2d0:	60f8      	str	r0, [r7, #12]
 800e2d2:	460b      	mov	r3, r1
 800e2d4:	607a      	str	r2, [r7, #4]
 800e2d6:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e2de:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800e2e0:	697a      	ldr	r2, [r7, #20]
 800e2e2:	f248 0318 	movw	r3, #32792	; 0x8018
 800e2e6:	4413      	add	r3, r2
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d00c      	beq.n	800e308 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e2ee:	697a      	ldr	r2, [r7, #20]
 800e2f0:	f248 031d 	movw	r3, #32797	; 0x801d
 800e2f4:	4413      	add	r3, r2
 800e2f6:	7819      	ldrb	r1, [r3, #0]
 800e2f8:	2320      	movs	r3, #32
 800e2fa:	2205      	movs	r2, #5
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f000 fb39 	bl	800e974 <SCSI_SenseCode>

    return -1;
 800e302:	f04f 33ff 	mov.w	r3, #4294967295
 800e306:	e02c      	b.n	800e362 <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800e308:	697a      	ldr	r2, [r7, #20]
 800e30a:	f248 0362 	movw	r3, #32866	; 0x8062
 800e30e:	4413      	add	r3, r2
 800e310:	781b      	ldrb	r3, [r3, #0]
 800e312:	2b02      	cmp	r3, #2
 800e314:	d10b      	bne.n	800e32e <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e316:	7af9      	ldrb	r1, [r7, #11]
 800e318:	233a      	movs	r3, #58	; 0x3a
 800e31a:	2202      	movs	r2, #2
 800e31c:	68f8      	ldr	r0, [r7, #12]
 800e31e:	f000 fb29 	bl	800e974 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e322:	697b      	ldr	r3, [r7, #20]
 800e324:	2205      	movs	r2, #5
 800e326:	721a      	strb	r2, [r3, #8]
    return -1;
 800e328:	f04f 33ff 	mov.w	r3, #4294967295
 800e32c:	e019      	b.n	800e362 <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e334:	689b      	ldr	r3, [r3, #8]
 800e336:	7afa      	ldrb	r2, [r7, #11]
 800e338:	4610      	mov	r0, r2
 800e33a:	4798      	blx	r3
 800e33c:	4603      	mov	r3, r0
 800e33e:	2b00      	cmp	r3, #0
 800e340:	d00b      	beq.n	800e35a <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e342:	7af9      	ldrb	r1, [r7, #11]
 800e344:	233a      	movs	r3, #58	; 0x3a
 800e346:	2202      	movs	r2, #2
 800e348:	68f8      	ldr	r0, [r7, #12]
 800e34a:	f000 fb13 	bl	800e974 <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800e34e:	697b      	ldr	r3, [r7, #20]
 800e350:	2205      	movs	r2, #5
 800e352:	721a      	strb	r2, [r3, #8]

    return -1;
 800e354:	f04f 33ff 	mov.w	r3, #4294967295
 800e358:	e003      	b.n	800e362 <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 800e35a:	697b      	ldr	r3, [r7, #20]
 800e35c:	2200      	movs	r2, #0
 800e35e:	60da      	str	r2, [r3, #12]

  return 0;
 800e360:	2300      	movs	r3, #0
}
 800e362:	4618      	mov	r0, r3
 800e364:	3718      	adds	r7, #24
 800e366:	46bd      	mov	sp, r7
 800e368:	bd80      	pop	{r7, pc}
	...

0800e36c <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e36c:	b580      	push	{r7, lr}
 800e36e:	b088      	sub	sp, #32
 800e370:	af00      	add	r7, sp, #0
 800e372:	60f8      	str	r0, [r7, #12]
 800e374:	460b      	mov	r3, r1
 800e376:	607a      	str	r2, [r7, #4]
 800e378:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e380:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800e382:	69ba      	ldr	r2, [r7, #24]
 800e384:	f248 0318 	movw	r3, #32792	; 0x8018
 800e388:	4413      	add	r3, r2
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	d10c      	bne.n	800e3aa <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e390:	69ba      	ldr	r2, [r7, #24]
 800e392:	f248 031d 	movw	r3, #32797	; 0x801d
 800e396:	4413      	add	r3, r2
 800e398:	7819      	ldrb	r1, [r3, #0]
 800e39a:	2320      	movs	r3, #32
 800e39c:	2205      	movs	r2, #5
 800e39e:	68f8      	ldr	r0, [r7, #12]
 800e3a0:	f000 fae8 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800e3a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e3a8:	e04c      	b.n	800e444 <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	781b      	ldrb	r3, [r3, #0]
 800e3b0:	f003 0301 	and.w	r3, r3, #1
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d022      	beq.n	800e3fe <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	3302      	adds	r3, #2
 800e3bc:	781b      	ldrb	r3, [r3, #0]
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d105      	bne.n	800e3ce <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800e3c2:	2206      	movs	r2, #6
 800e3c4:	4921      	ldr	r1, [pc, #132]	; (800e44c <SCSI_Inquiry+0xe0>)
 800e3c6:	69b8      	ldr	r0, [r7, #24]
 800e3c8:	f001 f862 	bl	800f490 <SCSI_UpdateBotData>
 800e3cc:	e039      	b.n	800e442 <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	3302      	adds	r3, #2
 800e3d2:	781b      	ldrb	r3, [r3, #0]
 800e3d4:	2b80      	cmp	r3, #128	; 0x80
 800e3d6:	d105      	bne.n	800e3e4 <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800e3d8:	2208      	movs	r2, #8
 800e3da:	491d      	ldr	r1, [pc, #116]	; (800e450 <SCSI_Inquiry+0xe4>)
 800e3dc:	69b8      	ldr	r0, [r7, #24]
 800e3de:	f001 f857 	bl	800f490 <SCSI_UpdateBotData>
 800e3e2:	e02e      	b.n	800e442 <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800e3e4:	69ba      	ldr	r2, [r7, #24]
 800e3e6:	f248 031d 	movw	r3, #32797	; 0x801d
 800e3ea:	4413      	add	r3, r2
 800e3ec:	7819      	ldrb	r1, [r3, #0]
 800e3ee:	2324      	movs	r3, #36	; 0x24
 800e3f0:	2205      	movs	r2, #5
 800e3f2:	68f8      	ldr	r0, [r7, #12]
 800e3f4:	f000 fabe 	bl	800e974 <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800e3f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e3fc:	e022      	b.n	800e444 <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e404:	69d9      	ldr	r1, [r3, #28]
 800e406:	7afa      	ldrb	r2, [r7, #11]
 800e408:	4613      	mov	r3, r2
 800e40a:	00db      	lsls	r3, r3, #3
 800e40c:	4413      	add	r3, r2
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	3304      	adds	r3, #4
 800e418:	781b      	ldrb	r3, [r3, #0]
 800e41a:	b29b      	uxth	r3, r3
 800e41c:	3305      	adds	r3, #5
 800e41e:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800e420:	687b      	ldr	r3, [r7, #4]
 800e422:	3304      	adds	r3, #4
 800e424:	781b      	ldrb	r3, [r3, #0]
 800e426:	b29b      	uxth	r3, r3
 800e428:	8bfa      	ldrh	r2, [r7, #30]
 800e42a:	429a      	cmp	r2, r3
 800e42c:	d303      	bcc.n	800e436 <SCSI_Inquiry+0xca>
    {
      len = params[4];
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	3304      	adds	r3, #4
 800e432:	781b      	ldrb	r3, [r3, #0]
 800e434:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800e436:	8bfb      	ldrh	r3, [r7, #30]
 800e438:	461a      	mov	r2, r3
 800e43a:	6979      	ldr	r1, [r7, #20]
 800e43c:	69b8      	ldr	r0, [r7, #24]
 800e43e:	f001 f827 	bl	800f490 <SCSI_UpdateBotData>
  }

  return 0;
 800e442:	2300      	movs	r3, #0
}
 800e444:	4618      	mov	r0, r3
 800e446:	3720      	adds	r7, #32
 800e448:	46bd      	mov	sp, r7
 800e44a:	bd80      	pop	{r7, pc}
 800e44c:	240000b4 	.word	0x240000b4
 800e450:	240000bc 	.word	0x240000bc

0800e454 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e454:	b590      	push	{r4, r7, lr}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	460b      	mov	r3, r1
 800e45e:	607a      	str	r2, [r7, #4]
 800e460:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e468:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e46a:	68fb      	ldr	r3, [r7, #12]
 800e46c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e470:	685c      	ldr	r4, [r3, #4]
 800e472:	697a      	ldr	r2, [r7, #20]
 800e474:	f248 0368 	movw	r3, #32872	; 0x8068
 800e478:	4413      	add	r3, r2
 800e47a:	6979      	ldr	r1, [r7, #20]
 800e47c:	f248 0264 	movw	r2, #32868	; 0x8064
 800e480:	440a      	add	r2, r1
 800e482:	7af8      	ldrb	r0, [r7, #11]
 800e484:	4619      	mov	r1, r3
 800e486:	47a0      	blx	r4
 800e488:	4603      	mov	r3, r0
 800e48a:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e48c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d106      	bne.n	800e4a2 <SCSI_ReadCapacity10+0x4e>
 800e494:	697a      	ldr	r2, [r7, #20]
 800e496:	f248 0362 	movw	r3, #32866	; 0x8062
 800e49a:	4413      	add	r3, r2
 800e49c:	781b      	ldrb	r3, [r3, #0]
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d108      	bne.n	800e4b4 <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e4a2:	7af9      	ldrb	r1, [r7, #11]
 800e4a4:	233a      	movs	r3, #58	; 0x3a
 800e4a6:	2202      	movs	r2, #2
 800e4a8:	68f8      	ldr	r0, [r7, #12]
 800e4aa:	f000 fa63 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800e4ae:	f04f 33ff 	mov.w	r3, #4294967295
 800e4b2:	e04f      	b.n	800e554 <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e4b4:	697a      	ldr	r2, [r7, #20]
 800e4b6:	f248 0368 	movw	r3, #32872	; 0x8068
 800e4ba:	4413      	add	r3, r2
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	3b01      	subs	r3, #1
 800e4c0:	0e1b      	lsrs	r3, r3, #24
 800e4c2:	b2da      	uxtb	r2, r3
 800e4c4:	697b      	ldr	r3, [r7, #20]
 800e4c6:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e4c8:	697a      	ldr	r2, [r7, #20]
 800e4ca:	f248 0368 	movw	r3, #32872	; 0x8068
 800e4ce:	4413      	add	r3, r2
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	3b01      	subs	r3, #1
 800e4d4:	0c1b      	lsrs	r3, r3, #16
 800e4d6:	b2da      	uxtb	r2, r3
 800e4d8:	697b      	ldr	r3, [r7, #20]
 800e4da:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	f248 0368 	movw	r3, #32872	; 0x8068
 800e4e2:	4413      	add	r3, r2
 800e4e4:	681b      	ldr	r3, [r3, #0]
 800e4e6:	3b01      	subs	r3, #1
 800e4e8:	0a1b      	lsrs	r3, r3, #8
 800e4ea:	b2da      	uxtb	r2, r3
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e4f0:	697a      	ldr	r2, [r7, #20]
 800e4f2:	f248 0368 	movw	r3, #32872	; 0x8068
 800e4f6:	4413      	add	r3, r2
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	b2db      	uxtb	r3, r3
 800e4fc:	3b01      	subs	r3, #1
 800e4fe:	b2da      	uxtb	r2, r3
 800e500:	697b      	ldr	r3, [r7, #20]
 800e502:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e504:	697a      	ldr	r2, [r7, #20]
 800e506:	f248 0364 	movw	r3, #32868	; 0x8064
 800e50a:	4413      	add	r3, r2
 800e50c:	881b      	ldrh	r3, [r3, #0]
 800e50e:	161b      	asrs	r3, r3, #24
 800e510:	b2da      	uxtb	r2, r3
 800e512:	697b      	ldr	r3, [r7, #20]
 800e514:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e516:	697a      	ldr	r2, [r7, #20]
 800e518:	f248 0364 	movw	r3, #32868	; 0x8064
 800e51c:	4413      	add	r3, r2
 800e51e:	881b      	ldrh	r3, [r3, #0]
 800e520:	141b      	asrs	r3, r3, #16
 800e522:	b2da      	uxtb	r2, r3
 800e524:	697b      	ldr	r3, [r7, #20]
 800e526:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e528:	697a      	ldr	r2, [r7, #20]
 800e52a:	f248 0364 	movw	r3, #32868	; 0x8064
 800e52e:	4413      	add	r3, r2
 800e530:	881b      	ldrh	r3, [r3, #0]
 800e532:	0a1b      	lsrs	r3, r3, #8
 800e534:	b29b      	uxth	r3, r3
 800e536:	b2da      	uxtb	r2, r3
 800e538:	697b      	ldr	r3, [r7, #20]
 800e53a:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800e53c:	697a      	ldr	r2, [r7, #20]
 800e53e:	f248 0364 	movw	r3, #32868	; 0x8064
 800e542:	4413      	add	r3, r2
 800e544:	881b      	ldrh	r3, [r3, #0]
 800e546:	b2da      	uxtb	r2, r3
 800e548:	697b      	ldr	r3, [r7, #20]
 800e54a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800e54c:	697b      	ldr	r3, [r7, #20]
 800e54e:	2208      	movs	r2, #8
 800e550:	60da      	str	r2, [r3, #12]

  return 0;
 800e552:	2300      	movs	r3, #0

}
 800e554:	4618      	mov	r0, r3
 800e556:	371c      	adds	r7, #28
 800e558:	46bd      	mov	sp, r7
 800e55a:	bd90      	pop	{r4, r7, pc}

0800e55c <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e55c:	b590      	push	{r4, r7, lr}
 800e55e:	b089      	sub	sp, #36	; 0x24
 800e560:	af00      	add	r7, sp, #0
 800e562:	60f8      	str	r0, [r7, #12]
 800e564:	460b      	mov	r3, r1
 800e566:	607a      	str	r2, [r7, #4]
 800e568:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e56a:	68fb      	ldr	r3, [r7, #12]
 800e56c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e570:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800e572:	68fb      	ldr	r3, [r7, #12]
 800e574:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e578:	685c      	ldr	r4, [r3, #4]
 800e57a:	69ba      	ldr	r2, [r7, #24]
 800e57c:	f248 0368 	movw	r3, #32872	; 0x8068
 800e580:	4413      	add	r3, r2
 800e582:	69b9      	ldr	r1, [r7, #24]
 800e584:	f248 0264 	movw	r2, #32868	; 0x8064
 800e588:	440a      	add	r2, r1
 800e58a:	7af8      	ldrb	r0, [r7, #11]
 800e58c:	4619      	mov	r1, r3
 800e58e:	47a0      	blx	r4
 800e590:	4603      	mov	r3, r0
 800e592:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e594:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e598:	2b00      	cmp	r3, #0
 800e59a:	d106      	bne.n	800e5aa <SCSI_ReadCapacity16+0x4e>
 800e59c:	69ba      	ldr	r2, [r7, #24]
 800e59e:	f248 0362 	movw	r3, #32866	; 0x8062
 800e5a2:	4413      	add	r3, r2
 800e5a4:	781b      	ldrb	r3, [r3, #0]
 800e5a6:	2b02      	cmp	r3, #2
 800e5a8:	d108      	bne.n	800e5bc <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e5aa:	7af9      	ldrb	r1, [r7, #11]
 800e5ac:	233a      	movs	r3, #58	; 0x3a
 800e5ae:	2202      	movs	r2, #2
 800e5b0:	68f8      	ldr	r0, [r7, #12]
 800e5b2:	f000 f9df 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800e5b6:	f04f 33ff 	mov.w	r3, #4294967295
 800e5ba:	e084      	b.n	800e6c6 <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	330a      	adds	r3, #10
 800e5c0:	781b      	ldrb	r3, [r3, #0]
 800e5c2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	330b      	adds	r3, #11
 800e5c8:	781b      	ldrb	r3, [r3, #0]
 800e5ca:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5cc:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	330c      	adds	r3, #12
 800e5d2:	781b      	ldrb	r3, [r3, #0]
 800e5d4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e5d6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e5d8:	687a      	ldr	r2, [r7, #4]
 800e5da:	320d      	adds	r2, #13
 800e5dc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e5de:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e5e0:	69bb      	ldr	r3, [r7, #24]
 800e5e2:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	77fb      	strb	r3, [r7, #31]
 800e5e8:	e007      	b.n	800e5fa <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 800e5ea:	7ffb      	ldrb	r3, [r7, #31]
 800e5ec:	69ba      	ldr	r2, [r7, #24]
 800e5ee:	4413      	add	r3, r2
 800e5f0:	2200      	movs	r2, #0
 800e5f2:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800e5f4:	7ffb      	ldrb	r3, [r7, #31]
 800e5f6:	3301      	adds	r3, #1
 800e5f8:	77fb      	strb	r3, [r7, #31]
 800e5fa:	7ffa      	ldrb	r2, [r7, #31]
 800e5fc:	69bb      	ldr	r3, [r7, #24]
 800e5fe:	68db      	ldr	r3, [r3, #12]
 800e600:	429a      	cmp	r2, r3
 800e602:	d3f2      	bcc.n	800e5ea <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800e604:	69ba      	ldr	r2, [r7, #24]
 800e606:	f248 0368 	movw	r3, #32872	; 0x8068
 800e60a:	4413      	add	r3, r2
 800e60c:	681b      	ldr	r3, [r3, #0]
 800e60e:	3b01      	subs	r3, #1
 800e610:	0e1b      	lsrs	r3, r3, #24
 800e612:	b2da      	uxtb	r2, r3
 800e614:	69bb      	ldr	r3, [r7, #24]
 800e616:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800e618:	69ba      	ldr	r2, [r7, #24]
 800e61a:	f248 0368 	movw	r3, #32872	; 0x8068
 800e61e:	4413      	add	r3, r2
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	3b01      	subs	r3, #1
 800e624:	0c1b      	lsrs	r3, r3, #16
 800e626:	b2da      	uxtb	r2, r3
 800e628:	69bb      	ldr	r3, [r7, #24]
 800e62a:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800e62c:	69ba      	ldr	r2, [r7, #24]
 800e62e:	f248 0368 	movw	r3, #32872	; 0x8068
 800e632:	4413      	add	r3, r2
 800e634:	681b      	ldr	r3, [r3, #0]
 800e636:	3b01      	subs	r3, #1
 800e638:	0a1b      	lsrs	r3, r3, #8
 800e63a:	b2da      	uxtb	r2, r3
 800e63c:	69bb      	ldr	r3, [r7, #24]
 800e63e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800e640:	69ba      	ldr	r2, [r7, #24]
 800e642:	f248 0368 	movw	r3, #32872	; 0x8068
 800e646:	4413      	add	r3, r2
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	b2db      	uxtb	r3, r3
 800e64c:	3b01      	subs	r3, #1
 800e64e:	b2da      	uxtb	r2, r3
 800e650:	69bb      	ldr	r3, [r7, #24]
 800e652:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800e654:	69ba      	ldr	r2, [r7, #24]
 800e656:	f248 0364 	movw	r3, #32868	; 0x8064
 800e65a:	4413      	add	r3, r2
 800e65c:	881b      	ldrh	r3, [r3, #0]
 800e65e:	161b      	asrs	r3, r3, #24
 800e660:	b2da      	uxtb	r2, r3
 800e662:	69bb      	ldr	r3, [r7, #24]
 800e664:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800e666:	69ba      	ldr	r2, [r7, #24]
 800e668:	f248 0364 	movw	r3, #32868	; 0x8064
 800e66c:	4413      	add	r3, r2
 800e66e:	881b      	ldrh	r3, [r3, #0]
 800e670:	141b      	asrs	r3, r3, #16
 800e672:	b2da      	uxtb	r2, r3
 800e674:	69bb      	ldr	r3, [r7, #24]
 800e676:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800e678:	69ba      	ldr	r2, [r7, #24]
 800e67a:	f248 0364 	movw	r3, #32868	; 0x8064
 800e67e:	4413      	add	r3, r2
 800e680:	881b      	ldrh	r3, [r3, #0]
 800e682:	0a1b      	lsrs	r3, r3, #8
 800e684:	b29b      	uxth	r3, r3
 800e686:	b2da      	uxtb	r2, r3
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800e68c:	69ba      	ldr	r2, [r7, #24]
 800e68e:	f248 0364 	movw	r3, #32868	; 0x8064
 800e692:	4413      	add	r3, r2
 800e694:	881b      	ldrh	r3, [r3, #0]
 800e696:	b2da      	uxtb	r2, r3
 800e698:	69bb      	ldr	r3, [r7, #24]
 800e69a:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	330a      	adds	r3, #10
 800e6a0:	781b      	ldrb	r3, [r3, #0]
 800e6a2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	330b      	adds	r3, #11
 800e6a8:	781b      	ldrb	r3, [r3, #0]
 800e6aa:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6ac:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	330c      	adds	r3, #12
 800e6b2:	781b      	ldrb	r3, [r3, #0]
 800e6b4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800e6b6:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800e6b8:	687a      	ldr	r2, [r7, #4]
 800e6ba:	320d      	adds	r2, #13
 800e6bc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800e6be:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800e6c0:	69bb      	ldr	r3, [r7, #24]
 800e6c2:	60da      	str	r2, [r3, #12]

  return 0;
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3724      	adds	r7, #36	; 0x24
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd90      	pop	{r4, r7, pc}

0800e6ce <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b088      	sub	sp, #32
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	60f8      	str	r0, [r7, #12]
 800e6d6:	460b      	mov	r3, r1
 800e6d8:	607a      	str	r2, [r7, #4]
 800e6da:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e6e2:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800e6e4:	68fb      	ldr	r3, [r7, #12]
 800e6e6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e6ea:	685b      	ldr	r3, [r3, #4]
 800e6ec:	f107 0214 	add.w	r2, r7, #20
 800e6f0:	f107 0110 	add.w	r1, r7, #16
 800e6f4:	7af8      	ldrb	r0, [r7, #11]
 800e6f6:	4798      	blx	r3
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800e6fc:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800e700:	2b00      	cmp	r3, #0
 800e702:	d106      	bne.n	800e712 <SCSI_ReadFormatCapacity+0x44>
 800e704:	69ba      	ldr	r2, [r7, #24]
 800e706:	f248 0362 	movw	r3, #32866	; 0x8062
 800e70a:	4413      	add	r3, r2
 800e70c:	781b      	ldrb	r3, [r3, #0]
 800e70e:	2b02      	cmp	r3, #2
 800e710:	d108      	bne.n	800e724 <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e712:	7af9      	ldrb	r1, [r7, #11]
 800e714:	233a      	movs	r3, #58	; 0x3a
 800e716:	2202      	movs	r2, #2
 800e718:	68f8      	ldr	r0, [r7, #12]
 800e71a:	f000 f92b 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800e71e:	f04f 33ff 	mov.w	r3, #4294967295
 800e722:	e03e      	b.n	800e7a2 <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 800e724:	2300      	movs	r3, #0
 800e726:	83fb      	strh	r3, [r7, #30]
 800e728:	e007      	b.n	800e73a <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 800e72a:	8bfb      	ldrh	r3, [r7, #30]
 800e72c:	69ba      	ldr	r2, [r7, #24]
 800e72e:	4413      	add	r3, r2
 800e730:	2200      	movs	r2, #0
 800e732:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800e734:	8bfb      	ldrh	r3, [r7, #30]
 800e736:	3301      	adds	r3, #1
 800e738:	83fb      	strh	r3, [r7, #30]
 800e73a:	8bfb      	ldrh	r3, [r7, #30]
 800e73c:	2b0b      	cmp	r3, #11
 800e73e:	d9f4      	bls.n	800e72a <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 800e740:	69bb      	ldr	r3, [r7, #24]
 800e742:	2208      	movs	r2, #8
 800e744:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800e746:	693b      	ldr	r3, [r7, #16]
 800e748:	3b01      	subs	r3, #1
 800e74a:	0e1b      	lsrs	r3, r3, #24
 800e74c:	b2da      	uxtb	r2, r3
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800e752:	693b      	ldr	r3, [r7, #16]
 800e754:	3b01      	subs	r3, #1
 800e756:	0c1b      	lsrs	r3, r3, #16
 800e758:	b2da      	uxtb	r2, r3
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800e75e:	693b      	ldr	r3, [r7, #16]
 800e760:	3b01      	subs	r3, #1
 800e762:	0a1b      	lsrs	r3, r3, #8
 800e764:	b2da      	uxtb	r2, r3
 800e766:	69bb      	ldr	r3, [r7, #24]
 800e768:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800e76a:	693b      	ldr	r3, [r7, #16]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	3b01      	subs	r3, #1
 800e770:	b2da      	uxtb	r2, r3
 800e772:	69bb      	ldr	r3, [r7, #24]
 800e774:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800e776:	69bb      	ldr	r3, [r7, #24]
 800e778:	2202      	movs	r2, #2
 800e77a:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800e77c:	8abb      	ldrh	r3, [r7, #20]
 800e77e:	141b      	asrs	r3, r3, #16
 800e780:	b2da      	uxtb	r2, r3
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800e786:	8abb      	ldrh	r3, [r7, #20]
 800e788:	0a1b      	lsrs	r3, r3, #8
 800e78a:	b29b      	uxth	r3, r3
 800e78c:	b2da      	uxtb	r2, r3
 800e78e:	69bb      	ldr	r3, [r7, #24]
 800e790:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800e792:	8abb      	ldrh	r3, [r7, #20]
 800e794:	b2da      	uxtb	r2, r3
 800e796:	69bb      	ldr	r3, [r7, #24]
 800e798:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800e79a:	69bb      	ldr	r3, [r7, #24]
 800e79c:	220c      	movs	r2, #12
 800e79e:	60da      	str	r2, [r3, #12]

  return 0;
 800e7a0:	2300      	movs	r3, #0
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3720      	adds	r7, #32
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}
	...

0800e7ac <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b086      	sub	sp, #24
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	60f8      	str	r0, [r7, #12]
 800e7b4:	460b      	mov	r3, r1
 800e7b6:	607a      	str	r2, [r7, #4]
 800e7b8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e7ba:	68fb      	ldr	r3, [r7, #12]
 800e7bc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e7c0:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800e7c2:	2317      	movs	r3, #23
 800e7c4:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	3304      	adds	r3, #4
 800e7ca:	781b      	ldrb	r3, [r3, #0]
 800e7cc:	b29b      	uxth	r3, r3
 800e7ce:	8afa      	ldrh	r2, [r7, #22]
 800e7d0:	429a      	cmp	r2, r3
 800e7d2:	d303      	bcc.n	800e7dc <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	3304      	adds	r3, #4
 800e7d8:	781b      	ldrb	r3, [r3, #0]
 800e7da:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800e7dc:	8afb      	ldrh	r3, [r7, #22]
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4904      	ldr	r1, [pc, #16]	; (800e7f4 <SCSI_ModeSense6+0x48>)
 800e7e2:	6938      	ldr	r0, [r7, #16]
 800e7e4:	f000 fe54 	bl	800f490 <SCSI_UpdateBotData>

  return 0;
 800e7e8:	2300      	movs	r3, #0
}
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	3718      	adds	r7, #24
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	bd80      	pop	{r7, pc}
 800e7f2:	bf00      	nop
 800e7f4:	240000c4 	.word	0x240000c4

0800e7f8 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e7f8:	b580      	push	{r7, lr}
 800e7fa:	b086      	sub	sp, #24
 800e7fc:	af00      	add	r7, sp, #0
 800e7fe:	60f8      	str	r0, [r7, #12]
 800e800:	460b      	mov	r3, r1
 800e802:	607a      	str	r2, [r7, #4]
 800e804:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e80c:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800e80e:	231b      	movs	r3, #27
 800e810:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	3308      	adds	r3, #8
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	b29b      	uxth	r3, r3
 800e81a:	8afa      	ldrh	r2, [r7, #22]
 800e81c:	429a      	cmp	r2, r3
 800e81e:	d303      	bcc.n	800e828 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800e820:	687b      	ldr	r3, [r7, #4]
 800e822:	3308      	adds	r3, #8
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800e828:	8afb      	ldrh	r3, [r7, #22]
 800e82a:	461a      	mov	r2, r3
 800e82c:	4904      	ldr	r1, [pc, #16]	; (800e840 <SCSI_ModeSense10+0x48>)
 800e82e:	6938      	ldr	r0, [r7, #16]
 800e830:	f000 fe2e 	bl	800f490 <SCSI_UpdateBotData>

  return 0;
 800e834:	2300      	movs	r3, #0
}
 800e836:	4618      	mov	r0, r3
 800e838:	3718      	adds	r7, #24
 800e83a:	46bd      	mov	sp, r7
 800e83c:	bd80      	pop	{r7, pc}
 800e83e:	bf00      	nop
 800e840:	240000dc 	.word	0x240000dc

0800e844 <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b086      	sub	sp, #24
 800e848:	af00      	add	r7, sp, #0
 800e84a:	60f8      	str	r0, [r7, #12]
 800e84c:	460b      	mov	r3, r1
 800e84e:	607a      	str	r2, [r7, #4]
 800e850:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e858:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800e85a:	693a      	ldr	r2, [r7, #16]
 800e85c:	f248 0318 	movw	r3, #32792	; 0x8018
 800e860:	4413      	add	r3, r2
 800e862:	681b      	ldr	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d10c      	bne.n	800e882 <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e868:	693a      	ldr	r2, [r7, #16]
 800e86a:	f248 031d 	movw	r3, #32797	; 0x801d
 800e86e:	4413      	add	r3, r2
 800e870:	7819      	ldrb	r1, [r3, #0]
 800e872:	2320      	movs	r3, #32
 800e874:	2205      	movs	r2, #5
 800e876:	68f8      	ldr	r0, [r7, #12]
 800e878:	f000 f87c 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800e87c:	f04f 33ff 	mov.w	r3, #4294967295
 800e880:	e074      	b.n	800e96c <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e882:	2300      	movs	r3, #0
 800e884:	75fb      	strb	r3, [r7, #23]
 800e886:	e007      	b.n	800e898 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 800e888:	7dfb      	ldrb	r3, [r7, #23]
 800e88a:	693a      	ldr	r2, [r7, #16]
 800e88c:	4413      	add	r3, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800e892:	7dfb      	ldrb	r3, [r7, #23]
 800e894:	3301      	adds	r3, #1
 800e896:	75fb      	strb	r3, [r7, #23]
 800e898:	7dfb      	ldrb	r3, [r7, #23]
 800e89a:	2b11      	cmp	r3, #17
 800e89c:	d9f4      	bls.n	800e888 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 800e89e:	693b      	ldr	r3, [r7, #16]
 800e8a0:	2270      	movs	r2, #112	; 0x70
 800e8a2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	220c      	movs	r2, #12
 800e8a8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800e8aa:	693a      	ldr	r2, [r7, #16]
 800e8ac:	f248 0360 	movw	r3, #32864	; 0x8060
 800e8b0:	4413      	add	r3, r2
 800e8b2:	781a      	ldrb	r2, [r3, #0]
 800e8b4:	6939      	ldr	r1, [r7, #16]
 800e8b6:	f248 0361 	movw	r3, #32865	; 0x8061
 800e8ba:	440b      	add	r3, r1
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	429a      	cmp	r2, r3
 800e8c0:	d045      	beq.n	800e94e <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800e8c2:	693a      	ldr	r2, [r7, #16]
 800e8c4:	f248 0360 	movw	r3, #32864	; 0x8060
 800e8c8:	4413      	add	r3, r2
 800e8ca:	781b      	ldrb	r3, [r3, #0]
 800e8cc:	4619      	mov	r1, r3
 800e8ce:	693a      	ldr	r2, [r7, #16]
 800e8d0:	f241 0308 	movw	r3, #4104	; 0x1008
 800e8d4:	440b      	add	r3, r1
 800e8d6:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800e8de:	693a      	ldr	r2, [r7, #16]
 800e8e0:	f248 0360 	movw	r3, #32864	; 0x8060
 800e8e4:	4413      	add	r3, r2
 800e8e6:	781b      	ldrb	r3, [r3, #0]
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	693a      	ldr	r2, [r7, #16]
 800e8ec:	f241 0308 	movw	r3, #4104	; 0x1008
 800e8f0:	440b      	add	r3, r1
 800e8f2:	00db      	lsls	r3, r3, #3
 800e8f4:	4413      	add	r3, r2
 800e8f6:	791a      	ldrb	r2, [r3, #4]
 800e8f8:	693b      	ldr	r3, [r7, #16]
 800e8fa:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	f248 0360 	movw	r3, #32864	; 0x8060
 800e902:	4413      	add	r3, r2
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	4619      	mov	r1, r3
 800e908:	693a      	ldr	r2, [r7, #16]
 800e90a:	f241 0308 	movw	r3, #4104	; 0x1008
 800e90e:	440b      	add	r3, r1
 800e910:	00db      	lsls	r3, r3, #3
 800e912:	4413      	add	r3, r2
 800e914:	795a      	ldrb	r2, [r3, #5]
 800e916:	693b      	ldr	r3, [r7, #16]
 800e918:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800e91a:	693a      	ldr	r2, [r7, #16]
 800e91c:	f248 0360 	movw	r3, #32864	; 0x8060
 800e920:	4413      	add	r3, r2
 800e922:	781b      	ldrb	r3, [r3, #0]
 800e924:	3301      	adds	r3, #1
 800e926:	b2d9      	uxtb	r1, r3
 800e928:	693a      	ldr	r2, [r7, #16]
 800e92a:	f248 0360 	movw	r3, #32864	; 0x8060
 800e92e:	4413      	add	r3, r2
 800e930:	460a      	mov	r2, r1
 800e932:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800e934:	693a      	ldr	r2, [r7, #16]
 800e936:	f248 0360 	movw	r3, #32864	; 0x8060
 800e93a:	4413      	add	r3, r2
 800e93c:	781b      	ldrb	r3, [r3, #0]
 800e93e:	2b04      	cmp	r3, #4
 800e940:	d105      	bne.n	800e94e <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 800e942:	693a      	ldr	r2, [r7, #16]
 800e944:	f248 0360 	movw	r3, #32864	; 0x8060
 800e948:	4413      	add	r3, r2
 800e94a:	2200      	movs	r2, #0
 800e94c:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800e94e:	693b      	ldr	r3, [r7, #16]
 800e950:	2212      	movs	r2, #18
 800e952:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3304      	adds	r3, #4
 800e958:	781b      	ldrb	r3, [r3, #0]
 800e95a:	2b12      	cmp	r3, #18
 800e95c:	d805      	bhi.n	800e96a <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	3304      	adds	r3, #4
 800e962:	781b      	ldrb	r3, [r3, #0]
 800e964:	461a      	mov	r2, r3
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800e96a:	2300      	movs	r3, #0
}
 800e96c:	4618      	mov	r0, r3
 800e96e:	3718      	adds	r7, #24
 800e970:	46bd      	mov	sp, r7
 800e972:	bd80      	pop	{r7, pc}

0800e974 <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800e974:	b480      	push	{r7}
 800e976:	b085      	sub	sp, #20
 800e978:	af00      	add	r7, sp, #0
 800e97a:	6078      	str	r0, [r7, #4]
 800e97c:	4608      	mov	r0, r1
 800e97e:	4611      	mov	r1, r2
 800e980:	461a      	mov	r2, r3
 800e982:	4603      	mov	r3, r0
 800e984:	70fb      	strb	r3, [r7, #3]
 800e986:	460b      	mov	r3, r1
 800e988:	70bb      	strb	r3, [r7, #2]
 800e98a:	4613      	mov	r3, r2
 800e98c:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e994:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800e996:	68fa      	ldr	r2, [r7, #12]
 800e998:	f248 0361 	movw	r3, #32865	; 0x8061
 800e99c:	4413      	add	r3, r2
 800e99e:	781b      	ldrb	r3, [r3, #0]
 800e9a0:	4619      	mov	r1, r3
 800e9a2:	68fa      	ldr	r2, [r7, #12]
 800e9a4:	f241 0308 	movw	r3, #4104	; 0x1008
 800e9a8:	440b      	add	r3, r1
 800e9aa:	78b9      	ldrb	r1, [r7, #2]
 800e9ac:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800e9b0:	68fa      	ldr	r2, [r7, #12]
 800e9b2:	f248 0361 	movw	r3, #32865	; 0x8061
 800e9b6:	4413      	add	r3, r2
 800e9b8:	781b      	ldrb	r3, [r3, #0]
 800e9ba:	4619      	mov	r1, r3
 800e9bc:	68fa      	ldr	r2, [r7, #12]
 800e9be:	f241 0308 	movw	r3, #4104	; 0x1008
 800e9c2:	440b      	add	r3, r1
 800e9c4:	00db      	lsls	r3, r3, #3
 800e9c6:	4413      	add	r3, r2
 800e9c8:	787a      	ldrb	r2, [r7, #1]
 800e9ca:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800e9cc:	68fa      	ldr	r2, [r7, #12]
 800e9ce:	f248 0361 	movw	r3, #32865	; 0x8061
 800e9d2:	4413      	add	r3, r2
 800e9d4:	781b      	ldrb	r3, [r3, #0]
 800e9d6:	4619      	mov	r1, r3
 800e9d8:	68fa      	ldr	r2, [r7, #12]
 800e9da:	f241 0308 	movw	r3, #4104	; 0x1008
 800e9de:	440b      	add	r3, r1
 800e9e0:	00db      	lsls	r3, r3, #3
 800e9e2:	4413      	add	r3, r2
 800e9e4:	2200      	movs	r2, #0
 800e9e6:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800e9e8:	68fa      	ldr	r2, [r7, #12]
 800e9ea:	f248 0361 	movw	r3, #32865	; 0x8061
 800e9ee:	4413      	add	r3, r2
 800e9f0:	781b      	ldrb	r3, [r3, #0]
 800e9f2:	3301      	adds	r3, #1
 800e9f4:	b2d9      	uxtb	r1, r3
 800e9f6:	68fa      	ldr	r2, [r7, #12]
 800e9f8:	f248 0361 	movw	r3, #32865	; 0x8061
 800e9fc:	4413      	add	r3, r2
 800e9fe:	460a      	mov	r2, r1
 800ea00:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	f248 0361 	movw	r3, #32865	; 0x8061
 800ea08:	4413      	add	r3, r2
 800ea0a:	781b      	ldrb	r3, [r3, #0]
 800ea0c:	2b04      	cmp	r3, #4
 800ea0e:	d105      	bne.n	800ea1c <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 800ea10:	68fa      	ldr	r2, [r7, #12]
 800ea12:	f248 0361 	movw	r3, #32865	; 0x8061
 800ea16:	4413      	add	r3, r2
 800ea18:	2200      	movs	r2, #0
 800ea1a:	701a      	strb	r2, [r3, #0]
  }
}
 800ea1c:	bf00      	nop
 800ea1e:	3714      	adds	r7, #20
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b086      	sub	sp, #24
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	60f8      	str	r0, [r7, #12]
 800ea30:	460b      	mov	r3, r1
 800ea32:	607a      	str	r2, [r7, #4]
 800ea34:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea3c:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800ea3e:	697a      	ldr	r2, [r7, #20]
 800ea40:	f248 0362 	movw	r3, #32866	; 0x8062
 800ea44:	4413      	add	r3, r2
 800ea46:	781b      	ldrb	r3, [r3, #0]
 800ea48:	2b01      	cmp	r3, #1
 800ea4a:	d10f      	bne.n	800ea6c <SCSI_StartStopUnit+0x44>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	3304      	adds	r3, #4
 800ea50:	781b      	ldrb	r3, [r3, #0]
 800ea52:	f003 0303 	and.w	r3, r3, #3
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	d108      	bne.n	800ea6c <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800ea5a:	7af9      	ldrb	r1, [r7, #11]
 800ea5c:	2324      	movs	r3, #36	; 0x24
 800ea5e:	2205      	movs	r2, #5
 800ea60:	68f8      	ldr	r0, [r7, #12]
 800ea62:	f7ff ff87 	bl	800e974 <SCSI_SenseCode>

    return -1;
 800ea66:	f04f 33ff 	mov.w	r3, #4294967295
 800ea6a:	e02c      	b.n	800eac6 <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	3304      	adds	r3, #4
 800ea70:	781b      	ldrb	r3, [r3, #0]
 800ea72:	f003 0303 	and.w	r3, r3, #3
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d106      	bne.n	800ea88 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ea7a:	697a      	ldr	r2, [r7, #20]
 800ea7c:	f248 0362 	movw	r3, #32866	; 0x8062
 800ea80:	4413      	add	r3, r2
 800ea82:	2200      	movs	r2, #0
 800ea84:	701a      	strb	r2, [r3, #0]
 800ea86:	e01a      	b.n	800eabe <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	3304      	adds	r3, #4
 800ea8c:	781b      	ldrb	r3, [r3, #0]
 800ea8e:	f003 0303 	and.w	r3, r3, #3
 800ea92:	2b02      	cmp	r3, #2
 800ea94:	d106      	bne.n	800eaa4 <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800ea96:	697a      	ldr	r2, [r7, #20]
 800ea98:	f248 0362 	movw	r3, #32866	; 0x8062
 800ea9c:	4413      	add	r3, r2
 800ea9e:	2202      	movs	r2, #2
 800eaa0:	701a      	strb	r2, [r3, #0]
 800eaa2:	e00c      	b.n	800eabe <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	3304      	adds	r3, #4
 800eaa8:	781b      	ldrb	r3, [r3, #0]
 800eaaa:	f003 0303 	and.w	r3, r3, #3
 800eaae:	2b03      	cmp	r3, #3
 800eab0:	d105      	bne.n	800eabe <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eab2:	697a      	ldr	r2, [r7, #20]
 800eab4:	f248 0362 	movw	r3, #32866	; 0x8062
 800eab8:	4413      	add	r3, r2
 800eaba:	2200      	movs	r2, #0
 800eabc:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800eabe:	697b      	ldr	r3, [r7, #20]
 800eac0:	2200      	movs	r2, #0
 800eac2:	60da      	str	r2, [r3, #12]

  return 0;
 800eac4:	2300      	movs	r3, #0
}
 800eac6:	4618      	mov	r0, r3
 800eac8:	3718      	adds	r7, #24
 800eaca:	46bd      	mov	sp, r7
 800eacc:	bd80      	pop	{r7, pc}

0800eace <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eace:	b480      	push	{r7}
 800ead0:	b087      	sub	sp, #28
 800ead2:	af00      	add	r7, sp, #0
 800ead4:	60f8      	str	r0, [r7, #12]
 800ead6:	460b      	mov	r3, r1
 800ead8:	607a      	str	r2, [r7, #4]
 800eada:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eae2:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	3304      	adds	r3, #4
 800eae8:	781b      	ldrb	r3, [r3, #0]
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d106      	bne.n	800eafc <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800eaee:	697a      	ldr	r2, [r7, #20]
 800eaf0:	f248 0362 	movw	r3, #32866	; 0x8062
 800eaf4:	4413      	add	r3, r2
 800eaf6:	2200      	movs	r2, #0
 800eaf8:	701a      	strb	r2, [r3, #0]
 800eafa:	e005      	b.n	800eb08 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800eafc:	697a      	ldr	r2, [r7, #20]
 800eafe:	f248 0362 	movw	r3, #32866	; 0x8062
 800eb02:	4413      	add	r3, r2
 800eb04:	2201      	movs	r2, #1
 800eb06:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 800eb08:	697b      	ldr	r3, [r7, #20]
 800eb0a:	2200      	movs	r2, #0
 800eb0c:	60da      	str	r2, [r3, #12]

  return 0;
 800eb0e:	2300      	movs	r3, #0
}
 800eb10:	4618      	mov	r0, r3
 800eb12:	371c      	adds	r7, #28
 800eb14:	46bd      	mov	sp, r7
 800eb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1a:	4770      	bx	lr

0800eb1c <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800eb1c:	b580      	push	{r7, lr}
 800eb1e:	b086      	sub	sp, #24
 800eb20:	af00      	add	r7, sp, #0
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	460b      	mov	r3, r1
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eb30:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800eb32:	697b      	ldr	r3, [r7, #20]
 800eb34:	7a1b      	ldrb	r3, [r3, #8]
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	f040 8094 	bne.w	800ec64 <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eb3c:	697a      	ldr	r2, [r7, #20]
 800eb3e:	f248 031c 	movw	r3, #32796	; 0x801c
 800eb42:	4413      	add	r3, r2
 800eb44:	781b      	ldrb	r3, [r3, #0]
 800eb46:	b25b      	sxtb	r3, r3
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	db0c      	blt.n	800eb66 <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800eb4c:	697a      	ldr	r2, [r7, #20]
 800eb4e:	f248 031d 	movw	r3, #32797	; 0x801d
 800eb52:	4413      	add	r3, r2
 800eb54:	7819      	ldrb	r1, [r3, #0]
 800eb56:	2320      	movs	r3, #32
 800eb58:	2205      	movs	r2, #5
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f7ff ff0a 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800eb60:	f04f 33ff 	mov.w	r3, #4294967295
 800eb64:	e088      	b.n	800ec78 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800eb66:	697a      	ldr	r2, [r7, #20]
 800eb68:	f248 0362 	movw	r3, #32866	; 0x8062
 800eb6c:	4413      	add	r3, r2
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	2b02      	cmp	r3, #2
 800eb72:	d108      	bne.n	800eb86 <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eb74:	7af9      	ldrb	r1, [r7, #11]
 800eb76:	233a      	movs	r3, #58	; 0x3a
 800eb78:	2202      	movs	r2, #2
 800eb7a:	68f8      	ldr	r0, [r7, #12]
 800eb7c:	f7ff fefa 	bl	800e974 <SCSI_SenseCode>

      return -1;
 800eb80:	f04f 33ff 	mov.w	r3, #4294967295
 800eb84:	e078      	b.n	800ec78 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	7afa      	ldrb	r2, [r7, #11]
 800eb90:	4610      	mov	r0, r2
 800eb92:	4798      	blx	r3
 800eb94:	4603      	mov	r3, r0
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d008      	beq.n	800ebac <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800eb9a:	7af9      	ldrb	r1, [r7, #11]
 800eb9c:	233a      	movs	r3, #58	; 0x3a
 800eb9e:	2202      	movs	r2, #2
 800eba0:	68f8      	ldr	r0, [r7, #12]
 800eba2:	f7ff fee7 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800eba6:	f04f 33ff 	mov.w	r3, #4294967295
 800ebaa:	e065      	b.n	800ec78 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	3302      	adds	r3, #2
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	3303      	adds	r3, #3
 800ebb8:	781b      	ldrb	r3, [r3, #0]
 800ebba:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ebbc:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	3304      	adds	r3, #4
 800ebc2:	781b      	ldrb	r3, [r3, #0]
 800ebc4:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ebc6:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ebc8:	687a      	ldr	r2, [r7, #4]
 800ebca:	3205      	adds	r2, #5
 800ebcc:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ebce:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ebd0:	6979      	ldr	r1, [r7, #20]
 800ebd2:	f248 036c 	movw	r3, #32876	; 0x806c
 800ebd6:	440b      	add	r3, r1
 800ebd8:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	3307      	adds	r3, #7
 800ebde:	781b      	ldrb	r3, [r3, #0]
 800ebe0:	021b      	lsls	r3, r3, #8
 800ebe2:	687a      	ldr	r2, [r7, #4]
 800ebe4:	3208      	adds	r2, #8
 800ebe6:	7812      	ldrb	r2, [r2, #0]
 800ebe8:	431a      	orrs	r2, r3
 800ebea:	6979      	ldr	r1, [r7, #20]
 800ebec:	f248 0370 	movw	r3, #32880	; 0x8070
 800ebf0:	440b      	add	r3, r1
 800ebf2:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ebf4:	697a      	ldr	r2, [r7, #20]
 800ebf6:	f248 036c 	movw	r3, #32876	; 0x806c
 800ebfa:	4413      	add	r3, r2
 800ebfc:	6818      	ldr	r0, [r3, #0]
 800ebfe:	697a      	ldr	r2, [r7, #20]
 800ec00:	f248 0370 	movw	r3, #32880	; 0x8070
 800ec04:	4413      	add	r3, r2
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	7af9      	ldrb	r1, [r7, #11]
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	68f8      	ldr	r0, [r7, #12]
 800ec0e:	f000 faeb 	bl	800f1e8 <SCSI_CheckAddressRange>
 800ec12:	4603      	mov	r3, r0
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	da02      	bge.n	800ec1e <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ec18:	f04f 33ff 	mov.w	r3, #4294967295
 800ec1c:	e02c      	b.n	800ec78 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ec1e:	697a      	ldr	r2, [r7, #20]
 800ec20:	f248 0318 	movw	r3, #32792	; 0x8018
 800ec24:	4413      	add	r3, r2
 800ec26:	681a      	ldr	r2, [r3, #0]
 800ec28:	6979      	ldr	r1, [r7, #20]
 800ec2a:	f248 0370 	movw	r3, #32880	; 0x8070
 800ec2e:	440b      	add	r3, r1
 800ec30:	6819      	ldr	r1, [r3, #0]
 800ec32:	6978      	ldr	r0, [r7, #20]
 800ec34:	f248 0364 	movw	r3, #32868	; 0x8064
 800ec38:	4403      	add	r3, r0
 800ec3a:	881b      	ldrh	r3, [r3, #0]
 800ec3c:	fb03 f301 	mul.w	r3, r3, r1
 800ec40:	429a      	cmp	r2, r3
 800ec42:	d00c      	beq.n	800ec5e <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ec44:	697a      	ldr	r2, [r7, #20]
 800ec46:	f248 031d 	movw	r3, #32797	; 0x801d
 800ec4a:	4413      	add	r3, r2
 800ec4c:	7819      	ldrb	r1, [r3, #0]
 800ec4e:	2320      	movs	r3, #32
 800ec50:	2205      	movs	r2, #5
 800ec52:	68f8      	ldr	r0, [r7, #12]
 800ec54:	f7ff fe8e 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ec58:	f04f 33ff 	mov.w	r3, #4294967295
 800ec5c:	e00c      	b.n	800ec78 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800ec5e:	697b      	ldr	r3, [r7, #20]
 800ec60:	2202      	movs	r2, #2
 800ec62:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800ec64:	697b      	ldr	r3, [r7, #20]
 800ec66:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ec6a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ec6c:	7afb      	ldrb	r3, [r7, #11]
 800ec6e:	4619      	mov	r1, r3
 800ec70:	68f8      	ldr	r0, [r7, #12]
 800ec72:	f000 fadd 	bl	800f230 <SCSI_ProcessRead>
 800ec76:	4603      	mov	r3, r0
}
 800ec78:	4618      	mov	r0, r3
 800ec7a:	3718      	adds	r7, #24
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	bd80      	pop	{r7, pc}

0800ec80 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b086      	sub	sp, #24
 800ec84:	af00      	add	r7, sp, #0
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	460b      	mov	r3, r1
 800ec8a:	607a      	str	r2, [r7, #4]
 800ec8c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ec8e:	68fb      	ldr	r3, [r7, #12]
 800ec90:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ec94:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	7a1b      	ldrb	r3, [r3, #8]
 800ec9a:	2b00      	cmp	r3, #0
 800ec9c:	f040 809e 	bne.w	800eddc <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800eca0:	697a      	ldr	r2, [r7, #20]
 800eca2:	f248 031c 	movw	r3, #32796	; 0x801c
 800eca6:	4413      	add	r3, r2
 800eca8:	781b      	ldrb	r3, [r3, #0]
 800ecaa:	b25b      	sxtb	r3, r3
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	db0c      	blt.n	800ecca <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ecb0:	697a      	ldr	r2, [r7, #20]
 800ecb2:	f248 031d 	movw	r3, #32797	; 0x801d
 800ecb6:	4413      	add	r3, r2
 800ecb8:	7819      	ldrb	r1, [r3, #0]
 800ecba:	2320      	movs	r3, #32
 800ecbc:	2205      	movs	r2, #5
 800ecbe:	68f8      	ldr	r0, [r7, #12]
 800ecc0:	f7ff fe58 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ecc4:	f04f 33ff 	mov.w	r3, #4294967295
 800ecc8:	e092      	b.n	800edf0 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800ecca:	697a      	ldr	r2, [r7, #20]
 800eccc:	f248 0362 	movw	r3, #32866	; 0x8062
 800ecd0:	4413      	add	r3, r2
 800ecd2:	781b      	ldrb	r3, [r3, #0]
 800ecd4:	2b02      	cmp	r3, #2
 800ecd6:	d108      	bne.n	800ecea <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ecd8:	7af9      	ldrb	r1, [r7, #11]
 800ecda:	233a      	movs	r3, #58	; 0x3a
 800ecdc:	2202      	movs	r2, #2
 800ecde:	68f8      	ldr	r0, [r7, #12]
 800ece0:	f7ff fe48 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ece4:	f04f 33ff 	mov.w	r3, #4294967295
 800ece8:	e082      	b.n	800edf0 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ecea:	68fb      	ldr	r3, [r7, #12]
 800ecec:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ecf0:	689b      	ldr	r3, [r3, #8]
 800ecf2:	7afa      	ldrb	r2, [r7, #11]
 800ecf4:	4610      	mov	r0, r2
 800ecf6:	4798      	blx	r3
 800ecf8:	4603      	mov	r3, r0
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d008      	beq.n	800ed10 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ecfe:	7af9      	ldrb	r1, [r7, #11]
 800ed00:	233a      	movs	r3, #58	; 0x3a
 800ed02:	2202      	movs	r2, #2
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7ff fe35 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ed0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ed0e:	e06f      	b.n	800edf0 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	3302      	adds	r3, #2
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	3303      	adds	r3, #3
 800ed1c:	781b      	ldrb	r3, [r3, #0]
 800ed1e:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed20:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	3304      	adds	r3, #4
 800ed26:	781b      	ldrb	r3, [r3, #0]
 800ed28:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800ed2a:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800ed2c:	687a      	ldr	r2, [r7, #4]
 800ed2e:	3205      	adds	r2, #5
 800ed30:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800ed32:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800ed34:	6979      	ldr	r1, [r7, #20]
 800ed36:	f248 036c 	movw	r3, #32876	; 0x806c
 800ed3a:	440b      	add	r3, r1
 800ed3c:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	3306      	adds	r3, #6
 800ed42:	781b      	ldrb	r3, [r3, #0]
 800ed44:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800ed46:	687b      	ldr	r3, [r7, #4]
 800ed48:	3307      	adds	r3, #7
 800ed4a:	781b      	ldrb	r3, [r3, #0]
 800ed4c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed4e:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800ed50:	687b      	ldr	r3, [r7, #4]
 800ed52:	3308      	adds	r3, #8
 800ed54:	781b      	ldrb	r3, [r3, #0]
 800ed56:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800ed58:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	3209      	adds	r2, #9
 800ed5e:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800ed60:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800ed62:	6979      	ldr	r1, [r7, #20]
 800ed64:	f248 0370 	movw	r3, #32880	; 0x8070
 800ed68:	440b      	add	r3, r1
 800ed6a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800ed6c:	697a      	ldr	r2, [r7, #20]
 800ed6e:	f248 036c 	movw	r3, #32876	; 0x806c
 800ed72:	4413      	add	r3, r2
 800ed74:	6818      	ldr	r0, [r3, #0]
 800ed76:	697a      	ldr	r2, [r7, #20]
 800ed78:	f248 0370 	movw	r3, #32880	; 0x8070
 800ed7c:	4413      	add	r3, r2
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	7af9      	ldrb	r1, [r7, #11]
 800ed82:	4602      	mov	r2, r0
 800ed84:	68f8      	ldr	r0, [r7, #12]
 800ed86:	f000 fa2f 	bl	800f1e8 <SCSI_CheckAddressRange>
 800ed8a:	4603      	mov	r3, r0
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	da02      	bge.n	800ed96 <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ed90:	f04f 33ff 	mov.w	r3, #4294967295
 800ed94:	e02c      	b.n	800edf0 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800ed96:	697a      	ldr	r2, [r7, #20]
 800ed98:	f248 0318 	movw	r3, #32792	; 0x8018
 800ed9c:	4413      	add	r3, r2
 800ed9e:	681a      	ldr	r2, [r3, #0]
 800eda0:	6979      	ldr	r1, [r7, #20]
 800eda2:	f248 0370 	movw	r3, #32880	; 0x8070
 800eda6:	440b      	add	r3, r1
 800eda8:	6819      	ldr	r1, [r3, #0]
 800edaa:	6978      	ldr	r0, [r7, #20]
 800edac:	f248 0364 	movw	r3, #32868	; 0x8064
 800edb0:	4403      	add	r3, r0
 800edb2:	881b      	ldrh	r3, [r3, #0]
 800edb4:	fb03 f301 	mul.w	r3, r3, r1
 800edb8:	429a      	cmp	r2, r3
 800edba:	d00c      	beq.n	800edd6 <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800edbc:	697a      	ldr	r2, [r7, #20]
 800edbe:	f248 031d 	movw	r3, #32797	; 0x801d
 800edc2:	4413      	add	r3, r2
 800edc4:	7819      	ldrb	r1, [r3, #0]
 800edc6:	2320      	movs	r3, #32
 800edc8:	2205      	movs	r2, #5
 800edca:	68f8      	ldr	r0, [r7, #12]
 800edcc:	f7ff fdd2 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800edd0:	f04f 33ff 	mov.w	r3, #4294967295
 800edd4:	e00c      	b.n	800edf0 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800edd6:	697b      	ldr	r3, [r7, #20]
 800edd8:	2202      	movs	r2, #2
 800edda:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800eddc:	697b      	ldr	r3, [r7, #20]
 800edde:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800ede2:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800ede4:	7afb      	ldrb	r3, [r7, #11]
 800ede6:	4619      	mov	r1, r3
 800ede8:	68f8      	ldr	r0, [r7, #12]
 800edea:	f000 fa21 	bl	800f230 <SCSI_ProcessRead>
 800edee:	4603      	mov	r3, r0
}
 800edf0:	4618      	mov	r0, r3
 800edf2:	3718      	adds	r7, #24
 800edf4:	46bd      	mov	sp, r7
 800edf6:	bd80      	pop	{r7, pc}

0800edf8 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800edf8:	b580      	push	{r7, lr}
 800edfa:	b086      	sub	sp, #24
 800edfc:	af00      	add	r7, sp, #0
 800edfe:	60f8      	str	r0, [r7, #12]
 800ee00:	460b      	mov	r3, r1
 800ee02:	607a      	str	r2, [r7, #4]
 800ee04:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ee06:	68fb      	ldr	r3, [r7, #12]
 800ee08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ee0c:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ee0e:	697b      	ldr	r3, [r7, #20]
 800ee10:	7a1b      	ldrb	r3, [r3, #8]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	f040 80be 	bne.w	800ef94 <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800ee18:	697a      	ldr	r2, [r7, #20]
 800ee1a:	f248 0318 	movw	r3, #32792	; 0x8018
 800ee1e:	4413      	add	r3, r2
 800ee20:	681b      	ldr	r3, [r3, #0]
 800ee22:	2b00      	cmp	r3, #0
 800ee24:	d10c      	bne.n	800ee40 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee26:	697a      	ldr	r2, [r7, #20]
 800ee28:	f248 031d 	movw	r3, #32797	; 0x801d
 800ee2c:	4413      	add	r3, r2
 800ee2e:	7819      	ldrb	r1, [r3, #0]
 800ee30:	2320      	movs	r3, #32
 800ee32:	2205      	movs	r2, #5
 800ee34:	68f8      	ldr	r0, [r7, #12]
 800ee36:	f7ff fd9d 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ee3a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee3e:	e0af      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800ee40:	697a      	ldr	r2, [r7, #20]
 800ee42:	f248 031c 	movw	r3, #32796	; 0x801c
 800ee46:	4413      	add	r3, r2
 800ee48:	781b      	ldrb	r3, [r3, #0]
 800ee4a:	b25b      	sxtb	r3, r3
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	da0c      	bge.n	800ee6a <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ee50:	697a      	ldr	r2, [r7, #20]
 800ee52:	f248 031d 	movw	r3, #32797	; 0x801d
 800ee56:	4413      	add	r3, r2
 800ee58:	7819      	ldrb	r1, [r3, #0]
 800ee5a:	2320      	movs	r3, #32
 800ee5c:	2205      	movs	r2, #5
 800ee5e:	68f8      	ldr	r0, [r7, #12]
 800ee60:	f7ff fd88 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ee64:	f04f 33ff 	mov.w	r3, #4294967295
 800ee68:	e09a      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee70:	689b      	ldr	r3, [r3, #8]
 800ee72:	7afa      	ldrb	r2, [r7, #11]
 800ee74:	4610      	mov	r0, r2
 800ee76:	4798      	blx	r3
 800ee78:	4603      	mov	r3, r0
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d008      	beq.n	800ee90 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800ee7e:	7af9      	ldrb	r1, [r7, #11]
 800ee80:	233a      	movs	r3, #58	; 0x3a
 800ee82:	2202      	movs	r2, #2
 800ee84:	68f8      	ldr	r0, [r7, #12]
 800ee86:	f7ff fd75 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ee8a:	f04f 33ff 	mov.w	r3, #4294967295
 800ee8e:	e087      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ee96:	68db      	ldr	r3, [r3, #12]
 800ee98:	7afa      	ldrb	r2, [r7, #11]
 800ee9a:	4610      	mov	r0, r2
 800ee9c:	4798      	blx	r3
 800ee9e:	4603      	mov	r3, r0
 800eea0:	2b00      	cmp	r3, #0
 800eea2:	d008      	beq.n	800eeb6 <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800eea4:	7af9      	ldrb	r1, [r7, #11]
 800eea6:	2327      	movs	r3, #39	; 0x27
 800eea8:	2202      	movs	r2, #2
 800eeaa:	68f8      	ldr	r0, [r7, #12]
 800eeac:	f7ff fd62 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800eeb0:	f04f 33ff 	mov.w	r3, #4294967295
 800eeb4:	e074      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eeb6:	687b      	ldr	r3, [r7, #4]
 800eeb8:	3302      	adds	r3, #2
 800eeba:	781b      	ldrb	r3, [r3, #0]
 800eebc:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	3303      	adds	r3, #3
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eec6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	3304      	adds	r3, #4
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800eed0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800eed2:	687a      	ldr	r2, [r7, #4]
 800eed4:	3205      	adds	r2, #5
 800eed6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800eed8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800eeda:	6979      	ldr	r1, [r7, #20]
 800eedc:	f248 036c 	movw	r3, #32876	; 0x806c
 800eee0:	440b      	add	r3, r1
 800eee2:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	3307      	adds	r3, #7
 800eee8:	781b      	ldrb	r3, [r3, #0]
 800eeea:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800eeec:	687a      	ldr	r2, [r7, #4]
 800eeee:	3208      	adds	r2, #8
 800eef0:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800eef2:	431a      	orrs	r2, r3
 800eef4:	6979      	ldr	r1, [r7, #20]
 800eef6:	f248 0370 	movw	r3, #32880	; 0x8070
 800eefa:	440b      	add	r3, r1
 800eefc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800eefe:	697a      	ldr	r2, [r7, #20]
 800ef00:	f248 036c 	movw	r3, #32876	; 0x806c
 800ef04:	4413      	add	r3, r2
 800ef06:	6818      	ldr	r0, [r3, #0]
 800ef08:	697a      	ldr	r2, [r7, #20]
 800ef0a:	f248 0370 	movw	r3, #32880	; 0x8070
 800ef0e:	4413      	add	r3, r2
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	7af9      	ldrb	r1, [r7, #11]
 800ef14:	4602      	mov	r2, r0
 800ef16:	68f8      	ldr	r0, [r7, #12]
 800ef18:	f000 f966 	bl	800f1e8 <SCSI_CheckAddressRange>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	da02      	bge.n	800ef28 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800ef22:	f04f 33ff 	mov.w	r3, #4294967295
 800ef26:	e03b      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800ef28:	697a      	ldr	r2, [r7, #20]
 800ef2a:	f248 0370 	movw	r3, #32880	; 0x8070
 800ef2e:	4413      	add	r3, r2
 800ef30:	681a      	ldr	r2, [r3, #0]
 800ef32:	6979      	ldr	r1, [r7, #20]
 800ef34:	f248 0364 	movw	r3, #32868	; 0x8064
 800ef38:	440b      	add	r3, r1
 800ef3a:	881b      	ldrh	r3, [r3, #0]
 800ef3c:	fb03 f302 	mul.w	r3, r3, r2
 800ef40:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800ef42:	697a      	ldr	r2, [r7, #20]
 800ef44:	f248 0318 	movw	r3, #32792	; 0x8018
 800ef48:	4413      	add	r3, r2
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	693a      	ldr	r2, [r7, #16]
 800ef4e:	429a      	cmp	r2, r3
 800ef50:	d00c      	beq.n	800ef6c <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800ef52:	697a      	ldr	r2, [r7, #20]
 800ef54:	f248 031d 	movw	r3, #32797	; 0x801d
 800ef58:	4413      	add	r3, r2
 800ef5a:	7819      	ldrb	r1, [r3, #0]
 800ef5c:	2320      	movs	r3, #32
 800ef5e:	2205      	movs	r2, #5
 800ef60:	68f8      	ldr	r0, [r7, #12]
 800ef62:	f7ff fd07 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800ef66:	f04f 33ff 	mov.w	r3, #4294967295
 800ef6a:	e019      	b.n	800efa0 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800ef6c:	693b      	ldr	r3, [r7, #16]
 800ef6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ef72:	bf28      	it	cs
 800ef74:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800ef78:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800ef7a:	697b      	ldr	r3, [r7, #20]
 800ef7c:	2201      	movs	r2, #1
 800ef7e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800ef80:	697b      	ldr	r3, [r7, #20]
 800ef82:	f103 0210 	add.w	r2, r3, #16
 800ef86:	693b      	ldr	r3, [r7, #16]
 800ef88:	2101      	movs	r1, #1
 800ef8a:	68f8      	ldr	r0, [r7, #12]
 800ef8c:	f004 fb19 	bl	80135c2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800ef90:	2300      	movs	r3, #0
 800ef92:	e005      	b.n	800efa0 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 800ef94:	7afb      	ldrb	r3, [r7, #11]
 800ef96:	4619      	mov	r1, r3
 800ef98:	68f8      	ldr	r0, [r7, #12]
 800ef9a:	f000 f9d7 	bl	800f34c <SCSI_ProcessWrite>
 800ef9e:	4603      	mov	r3, r0
}
 800efa0:	4618      	mov	r0, r3
 800efa2:	3718      	adds	r7, #24
 800efa4:	46bd      	mov	sp, r7
 800efa6:	bd80      	pop	{r7, pc}

0800efa8 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800efa8:	b580      	push	{r7, lr}
 800efaa:	b086      	sub	sp, #24
 800efac:	af00      	add	r7, sp, #0
 800efae:	60f8      	str	r0, [r7, #12]
 800efb0:	460b      	mov	r3, r1
 800efb2:	607a      	str	r2, [r7, #4]
 800efb4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800efbc:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800efbe:	697b      	ldr	r3, [r7, #20]
 800efc0:	7a1b      	ldrb	r3, [r3, #8]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	f040 80ce 	bne.w	800f164 <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800efc8:	697a      	ldr	r2, [r7, #20]
 800efca:	f248 0318 	movw	r3, #32792	; 0x8018
 800efce:	4413      	add	r3, r2
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d10c      	bne.n	800eff0 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800efd6:	697a      	ldr	r2, [r7, #20]
 800efd8:	f248 031d 	movw	r3, #32797	; 0x801d
 800efdc:	4413      	add	r3, r2
 800efde:	7819      	ldrb	r1, [r3, #0]
 800efe0:	2320      	movs	r3, #32
 800efe2:	2205      	movs	r2, #5
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f7ff fcc5 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800efea:	f04f 33ff 	mov.w	r3, #4294967295
 800efee:	e0bf      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800eff0:	697a      	ldr	r2, [r7, #20]
 800eff2:	f248 031c 	movw	r3, #32796	; 0x801c
 800eff6:	4413      	add	r3, r2
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	b25b      	sxtb	r3, r3
 800effc:	2b00      	cmp	r3, #0
 800effe:	da0c      	bge.n	800f01a <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f000:	697a      	ldr	r2, [r7, #20]
 800f002:	f248 031d 	movw	r3, #32797	; 0x801d
 800f006:	4413      	add	r3, r2
 800f008:	7819      	ldrb	r1, [r3, #0]
 800f00a:	2320      	movs	r3, #32
 800f00c:	2205      	movs	r2, #5
 800f00e:	68f8      	ldr	r0, [r7, #12]
 800f010:	f7ff fcb0 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800f014:	f04f 33ff 	mov.w	r3, #4294967295
 800f018:	e0aa      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f020:	689b      	ldr	r3, [r3, #8]
 800f022:	7afa      	ldrb	r2, [r7, #11]
 800f024:	4610      	mov	r0, r2
 800f026:	4798      	blx	r3
 800f028:	4603      	mov	r3, r0
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d00b      	beq.n	800f046 <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800f02e:	7af9      	ldrb	r1, [r7, #11]
 800f030:	233a      	movs	r3, #58	; 0x3a
 800f032:	2202      	movs	r2, #2
 800f034:	68f8      	ldr	r0, [r7, #12]
 800f036:	f7ff fc9d 	bl	800e974 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f03a:	697b      	ldr	r3, [r7, #20]
 800f03c:	2205      	movs	r2, #5
 800f03e:	721a      	strb	r2, [r3, #8]
      return -1;
 800f040:	f04f 33ff 	mov.w	r3, #4294967295
 800f044:	e094      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800f046:	68fb      	ldr	r3, [r7, #12]
 800f048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	7afa      	ldrb	r2, [r7, #11]
 800f050:	4610      	mov	r0, r2
 800f052:	4798      	blx	r3
 800f054:	4603      	mov	r3, r0
 800f056:	2b00      	cmp	r3, #0
 800f058:	d00b      	beq.n	800f072 <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800f05a:	7af9      	ldrb	r1, [r7, #11]
 800f05c:	2327      	movs	r3, #39	; 0x27
 800f05e:	2202      	movs	r2, #2
 800f060:	68f8      	ldr	r0, [r7, #12]
 800f062:	f7ff fc87 	bl	800e974 <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	2205      	movs	r2, #5
 800f06a:	721a      	strb	r2, [r3, #8]
      return -1;
 800f06c:	f04f 33ff 	mov.w	r3, #4294967295
 800f070:	e07e      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f072:	687b      	ldr	r3, [r7, #4]
 800f074:	3302      	adds	r3, #2
 800f076:	781b      	ldrb	r3, [r3, #0]
 800f078:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	3303      	adds	r3, #3
 800f07e:	781b      	ldrb	r3, [r3, #0]
 800f080:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f082:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	3304      	adds	r3, #4
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800f08c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	3205      	adds	r2, #5
 800f092:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800f094:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800f096:	6979      	ldr	r1, [r7, #20]
 800f098:	f248 036c 	movw	r3, #32876	; 0x806c
 800f09c:	440b      	add	r3, r1
 800f09e:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	3306      	adds	r3, #6
 800f0a4:	781b      	ldrb	r3, [r3, #0]
 800f0a6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	3307      	adds	r3, #7
 800f0ac:	781b      	ldrb	r3, [r3, #0]
 800f0ae:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0b0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	3308      	adds	r3, #8
 800f0b6:	781b      	ldrb	r3, [r3, #0]
 800f0b8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800f0ba:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800f0bc:	687a      	ldr	r2, [r7, #4]
 800f0be:	3209      	adds	r2, #9
 800f0c0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800f0c2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800f0c4:	6979      	ldr	r1, [r7, #20]
 800f0c6:	f248 0370 	movw	r3, #32880	; 0x8070
 800f0ca:	440b      	add	r3, r1
 800f0cc:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800f0ce:	697a      	ldr	r2, [r7, #20]
 800f0d0:	f248 036c 	movw	r3, #32876	; 0x806c
 800f0d4:	4413      	add	r3, r2
 800f0d6:	6818      	ldr	r0, [r3, #0]
 800f0d8:	697a      	ldr	r2, [r7, #20]
 800f0da:	f248 0370 	movw	r3, #32880	; 0x8070
 800f0de:	4413      	add	r3, r2
 800f0e0:	681b      	ldr	r3, [r3, #0]
 800f0e2:	7af9      	ldrb	r1, [r7, #11]
 800f0e4:	4602      	mov	r2, r0
 800f0e6:	68f8      	ldr	r0, [r7, #12]
 800f0e8:	f000 f87e 	bl	800f1e8 <SCSI_CheckAddressRange>
 800f0ec:	4603      	mov	r3, r0
 800f0ee:	2b00      	cmp	r3, #0
 800f0f0:	da02      	bge.n	800f0f8 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800f0f2:	f04f 33ff 	mov.w	r3, #4294967295
 800f0f6:	e03b      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f0f8:	697a      	ldr	r2, [r7, #20]
 800f0fa:	f248 0370 	movw	r3, #32880	; 0x8070
 800f0fe:	4413      	add	r3, r2
 800f100:	681a      	ldr	r2, [r3, #0]
 800f102:	6979      	ldr	r1, [r7, #20]
 800f104:	f248 0364 	movw	r3, #32868	; 0x8064
 800f108:	440b      	add	r3, r1
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	fb03 f302 	mul.w	r3, r3, r2
 800f110:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800f112:	697a      	ldr	r2, [r7, #20]
 800f114:	f248 0318 	movw	r3, #32792	; 0x8018
 800f118:	4413      	add	r3, r2
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	693a      	ldr	r2, [r7, #16]
 800f11e:	429a      	cmp	r2, r3
 800f120:	d00c      	beq.n	800f13c <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800f122:	697a      	ldr	r2, [r7, #20]
 800f124:	f248 031d 	movw	r3, #32797	; 0x801d
 800f128:	4413      	add	r3, r2
 800f12a:	7819      	ldrb	r1, [r3, #0]
 800f12c:	2320      	movs	r3, #32
 800f12e:	2205      	movs	r2, #5
 800f130:	68f8      	ldr	r0, [r7, #12]
 800f132:	f7ff fc1f 	bl	800e974 <SCSI_SenseCode>
      return -1;
 800f136:	f04f 33ff 	mov.w	r3, #4294967295
 800f13a:	e019      	b.n	800f170 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800f13c:	693b      	ldr	r3, [r7, #16]
 800f13e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f142:	bf28      	it	cs
 800f144:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f148:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800f14a:	697b      	ldr	r3, [r7, #20]
 800f14c:	2201      	movs	r2, #1
 800f14e:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f150:	697b      	ldr	r3, [r7, #20]
 800f152:	f103 0210 	add.w	r2, r3, #16
 800f156:	693b      	ldr	r3, [r7, #16]
 800f158:	2101      	movs	r1, #1
 800f15a:	68f8      	ldr	r0, [r7, #12]
 800f15c:	f004 fa31 	bl	80135c2 <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800f160:	2300      	movs	r3, #0
 800f162:	e005      	b.n	800f170 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 800f164:	7afb      	ldrb	r3, [r7, #11]
 800f166:	4619      	mov	r1, r3
 800f168:	68f8      	ldr	r0, [r7, #12]
 800f16a:	f000 f8ef 	bl	800f34c <SCSI_ProcessWrite>
 800f16e:	4603      	mov	r3, r0
}
 800f170:	4618      	mov	r0, r3
 800f172:	3718      	adds	r7, #24
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}

0800f178 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800f178:	b580      	push	{r7, lr}
 800f17a:	b086      	sub	sp, #24
 800f17c:	af00      	add	r7, sp, #0
 800f17e:	60f8      	str	r0, [r7, #12]
 800f180:	460b      	mov	r3, r1
 800f182:	607a      	str	r2, [r7, #4]
 800f184:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f18c:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	3301      	adds	r3, #1
 800f192:	781b      	ldrb	r3, [r3, #0]
 800f194:	f003 0302 	and.w	r3, r3, #2
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d008      	beq.n	800f1ae <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800f19c:	7af9      	ldrb	r1, [r7, #11]
 800f19e:	2324      	movs	r3, #36	; 0x24
 800f1a0:	2205      	movs	r2, #5
 800f1a2:	68f8      	ldr	r0, [r7, #12]
 800f1a4:	f7ff fbe6 	bl	800e974 <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800f1a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f1ac:	e018      	b.n	800f1e0 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800f1ae:	697a      	ldr	r2, [r7, #20]
 800f1b0:	f248 036c 	movw	r3, #32876	; 0x806c
 800f1b4:	4413      	add	r3, r2
 800f1b6:	6818      	ldr	r0, [r3, #0]
 800f1b8:	697a      	ldr	r2, [r7, #20]
 800f1ba:	f248 0370 	movw	r3, #32880	; 0x8070
 800f1be:	4413      	add	r3, r2
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	7af9      	ldrb	r1, [r7, #11]
 800f1c4:	4602      	mov	r2, r0
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f000 f80e 	bl	800f1e8 <SCSI_CheckAddressRange>
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	2b00      	cmp	r3, #0
 800f1d0:	da02      	bge.n	800f1d8 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 800f1d2:	f04f 33ff 	mov.w	r3, #4294967295
 800f1d6:	e003      	b.n	800f1e0 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 800f1d8:	697b      	ldr	r3, [r7, #20]
 800f1da:	2200      	movs	r2, #0
 800f1dc:	60da      	str	r2, [r3, #12]

  return 0;
 800f1de:	2300      	movs	r3, #0
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	607a      	str	r2, [r7, #4]
 800f1f2:	603b      	str	r3, [r7, #0]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f1fe:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	683b      	ldr	r3, [r7, #0]
 800f204:	441a      	add	r2, r3
 800f206:	6979      	ldr	r1, [r7, #20]
 800f208:	f248 0368 	movw	r3, #32872	; 0x8068
 800f20c:	440b      	add	r3, r1
 800f20e:	681b      	ldr	r3, [r3, #0]
 800f210:	429a      	cmp	r2, r3
 800f212:	d908      	bls.n	800f226 <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800f214:	7af9      	ldrb	r1, [r7, #11]
 800f216:	2321      	movs	r3, #33	; 0x21
 800f218:	2205      	movs	r2, #5
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f7ff fbaa 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800f220:	f04f 33ff 	mov.w	r3, #4294967295
 800f224:	e000      	b.n	800f228 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 800f226:	2300      	movs	r3, #0
}
 800f228:	4618      	mov	r0, r3
 800f22a:	3718      	adds	r7, #24
 800f22c:	46bd      	mov	sp, r7
 800f22e:	bd80      	pop	{r7, pc}

0800f230 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f230:	b5b0      	push	{r4, r5, r7, lr}
 800f232:	b084      	sub	sp, #16
 800f234:	af00      	add	r7, sp, #0
 800f236:	6078      	str	r0, [r7, #4]
 800f238:	460b      	mov	r3, r1
 800f23a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f242:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f244:	68fa      	ldr	r2, [r7, #12]
 800f246:	f248 0370 	movw	r3, #32880	; 0x8070
 800f24a:	4413      	add	r3, r2
 800f24c:	681a      	ldr	r2, [r3, #0]
 800f24e:	68f9      	ldr	r1, [r7, #12]
 800f250:	f248 0364 	movw	r3, #32868	; 0x8064
 800f254:	440b      	add	r3, r1
 800f256:	881b      	ldrh	r3, [r3, #0]
 800f258:	fb03 f302 	mul.w	r3, r3, r2
 800f25c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f264:	bf28      	it	cs
 800f266:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f26a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f272:	691c      	ldr	r4, [r3, #16]
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	f103 0110 	add.w	r1, r3, #16
 800f27a:	68fa      	ldr	r2, [r7, #12]
 800f27c:	f248 036c 	movw	r3, #32876	; 0x806c
 800f280:	4413      	add	r3, r2
 800f282:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800f284:	68fa      	ldr	r2, [r7, #12]
 800f286:	f248 0364 	movw	r3, #32868	; 0x8064
 800f28a:	4413      	add	r3, r2
 800f28c:	881b      	ldrh	r3, [r3, #0]
 800f28e:	461a      	mov	r2, r3
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800f296:	b29b      	uxth	r3, r3
 800f298:	78f8      	ldrb	r0, [r7, #3]
 800f29a:	462a      	mov	r2, r5
 800f29c:	47a0      	blx	r4
 800f29e:	4603      	mov	r3, r0
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	da08      	bge.n	800f2b6 <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800f2a4:	78f9      	ldrb	r1, [r7, #3]
 800f2a6:	2311      	movs	r3, #17
 800f2a8:	2204      	movs	r2, #4
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f7ff fb62 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	e046      	b.n	800f344 <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800f2b6:	68fb      	ldr	r3, [r7, #12]
 800f2b8:	f103 0210 	add.w	r2, r3, #16
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	2181      	movs	r1, #129	; 0x81
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f004 f95d 	bl	8013580 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f2c6:	68fa      	ldr	r2, [r7, #12]
 800f2c8:	f248 036c 	movw	r3, #32876	; 0x806c
 800f2cc:	4413      	add	r3, r2
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	68f9      	ldr	r1, [r7, #12]
 800f2d2:	f248 0364 	movw	r3, #32868	; 0x8064
 800f2d6:	440b      	add	r3, r1
 800f2d8:	881b      	ldrh	r3, [r3, #0]
 800f2da:	4619      	mov	r1, r3
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	fbb3 f3f1 	udiv	r3, r3, r1
 800f2e2:	441a      	add	r2, r3
 800f2e4:	68f9      	ldr	r1, [r7, #12]
 800f2e6:	f248 036c 	movw	r3, #32876	; 0x806c
 800f2ea:	440b      	add	r3, r1
 800f2ec:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	f248 0370 	movw	r3, #32880	; 0x8070
 800f2f4:	4413      	add	r3, r2
 800f2f6:	681a      	ldr	r2, [r3, #0]
 800f2f8:	68f9      	ldr	r1, [r7, #12]
 800f2fa:	f248 0364 	movw	r3, #32868	; 0x8064
 800f2fe:	440b      	add	r3, r1
 800f300:	881b      	ldrh	r3, [r3, #0]
 800f302:	4619      	mov	r1, r3
 800f304:	68bb      	ldr	r3, [r7, #8]
 800f306:	fbb3 f3f1 	udiv	r3, r3, r1
 800f30a:	1ad2      	subs	r2, r2, r3
 800f30c:	68f9      	ldr	r1, [r7, #12]
 800f30e:	f248 0370 	movw	r3, #32880	; 0x8070
 800f312:	440b      	add	r3, r1
 800f314:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	f248 0338 	movw	r3, #32824	; 0x8038
 800f31c:	4413      	add	r3, r2
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	68bb      	ldr	r3, [r7, #8]
 800f322:	1ad2      	subs	r2, r2, r3
 800f324:	68f9      	ldr	r1, [r7, #12]
 800f326:	f248 0338 	movw	r3, #32824	; 0x8038
 800f32a:	440b      	add	r3, r1
 800f32c:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800f32e:	68fa      	ldr	r2, [r7, #12]
 800f330:	f248 0370 	movw	r3, #32880	; 0x8070
 800f334:	4413      	add	r3, r2
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d102      	bne.n	800f342 <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	2203      	movs	r2, #3
 800f340:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800f342:	2300      	movs	r3, #0
}
 800f344:	4618      	mov	r0, r3
 800f346:	3710      	adds	r7, #16
 800f348:	46bd      	mov	sp, r7
 800f34a:	bdb0      	pop	{r4, r5, r7, pc}

0800f34c <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800f34c:	b5b0      	push	{r4, r5, r7, lr}
 800f34e:	b084      	sub	sp, #16
 800f350:	af00      	add	r7, sp, #0
 800f352:	6078      	str	r0, [r7, #4]
 800f354:	460b      	mov	r3, r1
 800f356:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f35e:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800f360:	68fa      	ldr	r2, [r7, #12]
 800f362:	f248 0370 	movw	r3, #32880	; 0x8070
 800f366:	4413      	add	r3, r2
 800f368:	681a      	ldr	r2, [r3, #0]
 800f36a:	68f9      	ldr	r1, [r7, #12]
 800f36c:	f248 0364 	movw	r3, #32868	; 0x8064
 800f370:	440b      	add	r3, r1
 800f372:	881b      	ldrh	r3, [r3, #0]
 800f374:	fb03 f302 	mul.w	r3, r3, r2
 800f378:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f380:	bf28      	it	cs
 800f382:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f386:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800f38e:	695c      	ldr	r4, [r3, #20]
 800f390:	68fb      	ldr	r3, [r7, #12]
 800f392:	f103 0110 	add.w	r1, r3, #16
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	f248 036c 	movw	r3, #32876	; 0x806c
 800f39c:	4413      	add	r3, r2
 800f39e:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800f3a0:	68fa      	ldr	r2, [r7, #12]
 800f3a2:	f248 0364 	movw	r3, #32868	; 0x8064
 800f3a6:	4413      	add	r3, r2
 800f3a8:	881b      	ldrh	r3, [r3, #0]
 800f3aa:	461a      	mov	r2, r3
 800f3ac:	68bb      	ldr	r3, [r7, #8]
 800f3ae:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800f3b2:	b29b      	uxth	r3, r3
 800f3b4:	78f8      	ldrb	r0, [r7, #3]
 800f3b6:	462a      	mov	r2, r5
 800f3b8:	47a0      	blx	r4
 800f3ba:	4603      	mov	r3, r0
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	da08      	bge.n	800f3d2 <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800f3c0:	78f9      	ldrb	r1, [r7, #3]
 800f3c2:	2303      	movs	r3, #3
 800f3c4:	2204      	movs	r2, #4
 800f3c6:	6878      	ldr	r0, [r7, #4]
 800f3c8:	f7ff fad4 	bl	800e974 <SCSI_SenseCode>
    return -1;
 800f3cc:	f04f 33ff 	mov.w	r3, #4294967295
 800f3d0:	e05a      	b.n	800f488 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800f3d2:	68fa      	ldr	r2, [r7, #12]
 800f3d4:	f248 036c 	movw	r3, #32876	; 0x806c
 800f3d8:	4413      	add	r3, r2
 800f3da:	681a      	ldr	r2, [r3, #0]
 800f3dc:	68f9      	ldr	r1, [r7, #12]
 800f3de:	f248 0364 	movw	r3, #32868	; 0x8064
 800f3e2:	440b      	add	r3, r1
 800f3e4:	881b      	ldrh	r3, [r3, #0]
 800f3e6:	4619      	mov	r1, r3
 800f3e8:	68bb      	ldr	r3, [r7, #8]
 800f3ea:	fbb3 f3f1 	udiv	r3, r3, r1
 800f3ee:	441a      	add	r2, r3
 800f3f0:	68f9      	ldr	r1, [r7, #12]
 800f3f2:	f248 036c 	movw	r3, #32876	; 0x806c
 800f3f6:	440b      	add	r3, r1
 800f3f8:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800f3fa:	68fa      	ldr	r2, [r7, #12]
 800f3fc:	f248 0370 	movw	r3, #32880	; 0x8070
 800f400:	4413      	add	r3, r2
 800f402:	681a      	ldr	r2, [r3, #0]
 800f404:	68f9      	ldr	r1, [r7, #12]
 800f406:	f248 0364 	movw	r3, #32868	; 0x8064
 800f40a:	440b      	add	r3, r1
 800f40c:	881b      	ldrh	r3, [r3, #0]
 800f40e:	4619      	mov	r1, r3
 800f410:	68bb      	ldr	r3, [r7, #8]
 800f412:	fbb3 f3f1 	udiv	r3, r3, r1
 800f416:	1ad2      	subs	r2, r2, r3
 800f418:	68f9      	ldr	r1, [r7, #12]
 800f41a:	f248 0370 	movw	r3, #32880	; 0x8070
 800f41e:	440b      	add	r3, r1
 800f420:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800f422:	68fa      	ldr	r2, [r7, #12]
 800f424:	f248 0338 	movw	r3, #32824	; 0x8038
 800f428:	4413      	add	r3, r2
 800f42a:	681a      	ldr	r2, [r3, #0]
 800f42c:	68bb      	ldr	r3, [r7, #8]
 800f42e:	1ad2      	subs	r2, r2, r3
 800f430:	68f9      	ldr	r1, [r7, #12]
 800f432:	f248 0338 	movw	r3, #32824	; 0x8038
 800f436:	440b      	add	r3, r1
 800f438:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 800f43a:	68fa      	ldr	r2, [r7, #12]
 800f43c:	f248 0370 	movw	r3, #32880	; 0x8070
 800f440:	4413      	add	r3, r2
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d104      	bne.n	800f452 <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800f448:	2100      	movs	r1, #0
 800f44a:	6878      	ldr	r0, [r7, #4]
 800f44c:	f7fe fde2 	bl	800e014 <MSC_BOT_SendCSW>
 800f450:	e019      	b.n	800f486 <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800f452:	68fa      	ldr	r2, [r7, #12]
 800f454:	f248 0370 	movw	r3, #32880	; 0x8070
 800f458:	4413      	add	r3, r2
 800f45a:	681a      	ldr	r2, [r3, #0]
 800f45c:	68f9      	ldr	r1, [r7, #12]
 800f45e:	f248 0364 	movw	r3, #32868	; 0x8064
 800f462:	440b      	add	r3, r1
 800f464:	881b      	ldrh	r3, [r3, #0]
 800f466:	fb03 f302 	mul.w	r3, r3, r2
 800f46a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f46e:	bf28      	it	cs
 800f470:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 800f474:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	f103 0210 	add.w	r2, r3, #16
 800f47c:	68bb      	ldr	r3, [r7, #8]
 800f47e:	2101      	movs	r1, #1
 800f480:	6878      	ldr	r0, [r7, #4]
 800f482:	f004 f89e 	bl	80135c2 <USBD_LL_PrepareReceive>
  }

  return 0;
 800f486:	2300      	movs	r3, #0
}
 800f488:	4618      	mov	r0, r3
 800f48a:	3710      	adds	r7, #16
 800f48c:	46bd      	mov	sp, r7
 800f48e:	bdb0      	pop	{r4, r5, r7, pc}

0800f490 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800f490:	b480      	push	{r7}
 800f492:	b087      	sub	sp, #28
 800f494:	af00      	add	r7, sp, #0
 800f496:	60f8      	str	r0, [r7, #12]
 800f498:	60b9      	str	r1, [r7, #8]
 800f49a:	4613      	mov	r3, r2
 800f49c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800f49e:	88fb      	ldrh	r3, [r7, #6]
 800f4a0:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800f4a2:	8afa      	ldrh	r2, [r7, #22]
 800f4a4:	68fb      	ldr	r3, [r7, #12]
 800f4a6:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800f4a8:	e00b      	b.n	800f4c2 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800f4aa:	8afb      	ldrh	r3, [r7, #22]
 800f4ac:	3b01      	subs	r3, #1
 800f4ae:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800f4b0:	8afb      	ldrh	r3, [r7, #22]
 800f4b2:	68ba      	ldr	r2, [r7, #8]
 800f4b4:	441a      	add	r2, r3
 800f4b6:	8afb      	ldrh	r3, [r7, #22]
 800f4b8:	7811      	ldrb	r1, [r2, #0]
 800f4ba:	68fa      	ldr	r2, [r7, #12]
 800f4bc:	4413      	add	r3, r2
 800f4be:	460a      	mov	r2, r1
 800f4c0:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800f4c2:	8afb      	ldrh	r3, [r7, #22]
 800f4c4:	2b00      	cmp	r3, #0
 800f4c6:	d1f0      	bne.n	800f4aa <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800f4c8:	2300      	movs	r3, #0
}
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	371c      	adds	r7, #28
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d4:	4770      	bx	lr

0800f4d6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800f4d6:	b580      	push	{r7, lr}
 800f4d8:	b086      	sub	sp, #24
 800f4da:	af00      	add	r7, sp, #0
 800f4dc:	60f8      	str	r0, [r7, #12]
 800f4de:	60b9      	str	r1, [r7, #8]
 800f4e0:	4613      	mov	r3, r2
 800f4e2:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800f4e4:	68fb      	ldr	r3, [r7, #12]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d101      	bne.n	800f4ee <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800f4ea:	2303      	movs	r3, #3
 800f4ec:	e025      	b.n	800f53a <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d003      	beq.n	800f500 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2200      	movs	r2, #0
 800f4fc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800f500:	68fb      	ldr	r3, [r7, #12]
 800f502:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800f506:	2b00      	cmp	r3, #0
 800f508:	d003      	beq.n	800f512 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800f50a:	68fb      	ldr	r3, [r7, #12]
 800f50c:	2200      	movs	r2, #0
 800f50e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800f512:	68bb      	ldr	r3, [r7, #8]
 800f514:	2b00      	cmp	r3, #0
 800f516:	d003      	beq.n	800f520 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800f518:	68fb      	ldr	r3, [r7, #12]
 800f51a:	68ba      	ldr	r2, [r7, #8]
 800f51c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f520:	68fb      	ldr	r3, [r7, #12]
 800f522:	2201      	movs	r2, #1
 800f524:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800f528:	68fb      	ldr	r3, [r7, #12]
 800f52a:	79fa      	ldrb	r2, [r7, #7]
 800f52c:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f003 fece 	bl	80132d0 <USBD_LL_Init>
 800f534:	4603      	mov	r3, r0
 800f536:	75fb      	strb	r3, [r7, #23]

  return ret;
 800f538:	7dfb      	ldrb	r3, [r7, #23]
}
 800f53a:	4618      	mov	r0, r3
 800f53c:	3718      	adds	r7, #24
 800f53e:	46bd      	mov	sp, r7
 800f540:	bd80      	pop	{r7, pc}

0800f542 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800f542:	b580      	push	{r7, lr}
 800f544:	b084      	sub	sp, #16
 800f546:	af00      	add	r7, sp, #0
 800f548:	6078      	str	r0, [r7, #4]
 800f54a:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f54c:	2300      	movs	r3, #0
 800f54e:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d101      	bne.n	800f55a <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800f556:	2303      	movs	r3, #3
 800f558:	e010      	b.n	800f57c <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	683a      	ldr	r2, [r7, #0]
 800f55e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f56a:	f107 020e 	add.w	r2, r7, #14
 800f56e:	4610      	mov	r0, r2
 800f570:	4798      	blx	r3
 800f572:	4602      	mov	r2, r0
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800f57a:	2300      	movs	r3, #0
}
 800f57c:	4618      	mov	r0, r3
 800f57e:	3710      	adds	r7, #16
 800f580:	46bd      	mov	sp, r7
 800f582:	bd80      	pop	{r7, pc}

0800f584 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800f58c:	6878      	ldr	r0, [r7, #4]
 800f58e:	f003 feef 	bl	8013370 <USBD_LL_Start>
 800f592:	4603      	mov	r3, r0
}
 800f594:	4618      	mov	r0, r3
 800f596:	3708      	adds	r7, #8
 800f598:	46bd      	mov	sp, r7
 800f59a:	bd80      	pop	{r7, pc}

0800f59c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800f59c:	b480      	push	{r7}
 800f59e:	b083      	sub	sp, #12
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800f5a4:	2300      	movs	r3, #0
}
 800f5a6:	4618      	mov	r0, r3
 800f5a8:	370c      	adds	r7, #12
 800f5aa:	46bd      	mov	sp, r7
 800f5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b0:	4770      	bx	lr

0800f5b2 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5b2:	b580      	push	{r7, lr}
 800f5b4:	b084      	sub	sp, #16
 800f5b6:	af00      	add	r7, sp, #0
 800f5b8:	6078      	str	r0, [r7, #4]
 800f5ba:	460b      	mov	r3, r1
 800f5bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800f5be:	2303      	movs	r3, #3
 800f5c0:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5c8:	2b00      	cmp	r3, #0
 800f5ca:	d009      	beq.n	800f5e0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800f5cc:	687b      	ldr	r3, [r7, #4]
 800f5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	78fa      	ldrb	r2, [r7, #3]
 800f5d6:	4611      	mov	r1, r2
 800f5d8:	6878      	ldr	r0, [r7, #4]
 800f5da:	4798      	blx	r3
 800f5dc:	4603      	mov	r3, r0
 800f5de:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5e2:	4618      	mov	r0, r3
 800f5e4:	3710      	adds	r7, #16
 800f5e6:	46bd      	mov	sp, r7
 800f5e8:	bd80      	pop	{r7, pc}

0800f5ea <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b082      	sub	sp, #8
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	460b      	mov	r3, r1
 800f5f4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f5fc:	2b00      	cmp	r3, #0
 800f5fe:	d007      	beq.n	800f610 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f606:	685b      	ldr	r3, [r3, #4]
 800f608:	78fa      	ldrb	r2, [r7, #3]
 800f60a:	4611      	mov	r1, r2
 800f60c:	6878      	ldr	r0, [r7, #4]
 800f60e:	4798      	blx	r3
  }

  return USBD_OK;
 800f610:	2300      	movs	r3, #0
}
 800f612:	4618      	mov	r0, r3
 800f614:	3708      	adds	r7, #8
 800f616:	46bd      	mov	sp, r7
 800f618:	bd80      	pop	{r7, pc}

0800f61a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800f61a:	b580      	push	{r7, lr}
 800f61c:	b084      	sub	sp, #16
 800f61e:	af00      	add	r7, sp, #0
 800f620:	6078      	str	r0, [r7, #4]
 800f622:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800f624:	687b      	ldr	r3, [r7, #4]
 800f626:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f62a:	6839      	ldr	r1, [r7, #0]
 800f62c:	4618      	mov	r0, r3
 800f62e:	f000 ff2b 	bl	8010488 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2201      	movs	r2, #1
 800f636:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800f640:	461a      	mov	r2, r3
 800f642:	687b      	ldr	r3, [r7, #4]
 800f644:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f64e:	f003 031f 	and.w	r3, r3, #31
 800f652:	2b01      	cmp	r3, #1
 800f654:	d00e      	beq.n	800f674 <USBD_LL_SetupStage+0x5a>
 800f656:	2b01      	cmp	r3, #1
 800f658:	d302      	bcc.n	800f660 <USBD_LL_SetupStage+0x46>
 800f65a:	2b02      	cmp	r3, #2
 800f65c:	d014      	beq.n	800f688 <USBD_LL_SetupStage+0x6e>
 800f65e:	e01d      	b.n	800f69c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f666:	4619      	mov	r1, r3
 800f668:	6878      	ldr	r0, [r7, #4]
 800f66a:	f000 fa17 	bl	800fa9c <USBD_StdDevReq>
 800f66e:	4603      	mov	r3, r0
 800f670:	73fb      	strb	r3, [r7, #15]
      break;
 800f672:	e020      	b.n	800f6b6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f67a:	4619      	mov	r1, r3
 800f67c:	6878      	ldr	r0, [r7, #4]
 800f67e:	f000 fa7b 	bl	800fb78 <USBD_StdItfReq>
 800f682:	4603      	mov	r3, r0
 800f684:	73fb      	strb	r3, [r7, #15]
      break;
 800f686:	e016      	b.n	800f6b6 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800f68e:	4619      	mov	r1, r3
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fab7 	bl	800fc04 <USBD_StdEPReq>
 800f696:	4603      	mov	r3, r0
 800f698:	73fb      	strb	r3, [r7, #15]
      break;
 800f69a:	e00c      	b.n	800f6b6 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800f6a2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	6878      	ldr	r0, [r7, #4]
 800f6ac:	f003 fedf 	bl	801346e <USBD_LL_StallEP>
 800f6b0:	4603      	mov	r3, r0
 800f6b2:	73fb      	strb	r3, [r7, #15]
      break;
 800f6b4:	bf00      	nop
  }

  return ret;
 800f6b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6b8:	4618      	mov	r0, r3
 800f6ba:	3710      	adds	r7, #16
 800f6bc:	46bd      	mov	sp, r7
 800f6be:	bd80      	pop	{r7, pc}

0800f6c0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b086      	sub	sp, #24
 800f6c4:	af00      	add	r7, sp, #0
 800f6c6:	60f8      	str	r0, [r7, #12]
 800f6c8:	460b      	mov	r3, r1
 800f6ca:	607a      	str	r2, [r7, #4]
 800f6cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f6ce:	7afb      	ldrb	r3, [r7, #11]
 800f6d0:	2b00      	cmp	r3, #0
 800f6d2:	d137      	bne.n	800f744 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800f6da:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f6e2:	2b03      	cmp	r3, #3
 800f6e4:	d14a      	bne.n	800f77c <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800f6e6:	693b      	ldr	r3, [r7, #16]
 800f6e8:	689a      	ldr	r2, [r3, #8]
 800f6ea:	693b      	ldr	r3, [r7, #16]
 800f6ec:	68db      	ldr	r3, [r3, #12]
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d913      	bls.n	800f71a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f6f2:	693b      	ldr	r3, [r7, #16]
 800f6f4:	689a      	ldr	r2, [r3, #8]
 800f6f6:	693b      	ldr	r3, [r7, #16]
 800f6f8:	68db      	ldr	r3, [r3, #12]
 800f6fa:	1ad2      	subs	r2, r2, r3
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800f700:	693b      	ldr	r3, [r7, #16]
 800f702:	68da      	ldr	r2, [r3, #12]
 800f704:	693b      	ldr	r3, [r7, #16]
 800f706:	689b      	ldr	r3, [r3, #8]
 800f708:	4293      	cmp	r3, r2
 800f70a:	bf28      	it	cs
 800f70c:	4613      	movcs	r3, r2
 800f70e:	461a      	mov	r2, r3
 800f710:	6879      	ldr	r1, [r7, #4]
 800f712:	68f8      	ldr	r0, [r7, #12]
 800f714:	f000 ff8f 	bl	8010636 <USBD_CtlContinueRx>
 800f718:	e030      	b.n	800f77c <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f720:	691b      	ldr	r3, [r3, #16]
 800f722:	2b00      	cmp	r3, #0
 800f724:	d00a      	beq.n	800f73c <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f726:	68fb      	ldr	r3, [r7, #12]
 800f728:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800f72c:	2b03      	cmp	r3, #3
 800f72e:	d105      	bne.n	800f73c <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f736:	691b      	ldr	r3, [r3, #16]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800f73c:	68f8      	ldr	r0, [r7, #12]
 800f73e:	f000 ff8b 	bl	8010658 <USBD_CtlSendStatus>
 800f742:	e01b      	b.n	800f77c <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f74a:	699b      	ldr	r3, [r3, #24]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d013      	beq.n	800f778 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800f756:	2b03      	cmp	r3, #3
 800f758:	d10e      	bne.n	800f778 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f760:	699b      	ldr	r3, [r3, #24]
 800f762:	7afa      	ldrb	r2, [r7, #11]
 800f764:	4611      	mov	r1, r2
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	4798      	blx	r3
 800f76a:	4603      	mov	r3, r0
 800f76c:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f76e:	7dfb      	ldrb	r3, [r7, #23]
 800f770:	2b00      	cmp	r3, #0
 800f772:	d003      	beq.n	800f77c <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800f774:	7dfb      	ldrb	r3, [r7, #23]
 800f776:	e002      	b.n	800f77e <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f778:	2303      	movs	r3, #3
 800f77a:	e000      	b.n	800f77e <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800f77c:	2300      	movs	r3, #0
}
 800f77e:	4618      	mov	r0, r3
 800f780:	3718      	adds	r7, #24
 800f782:	46bd      	mov	sp, r7
 800f784:	bd80      	pop	{r7, pc}

0800f786 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800f786:	b580      	push	{r7, lr}
 800f788:	b086      	sub	sp, #24
 800f78a:	af00      	add	r7, sp, #0
 800f78c:	60f8      	str	r0, [r7, #12]
 800f78e:	460b      	mov	r3, r1
 800f790:	607a      	str	r2, [r7, #4]
 800f792:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800f794:	7afb      	ldrb	r3, [r7, #11]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d16a      	bne.n	800f870 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	3314      	adds	r3, #20
 800f79e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800f7a6:	2b02      	cmp	r3, #2
 800f7a8:	d155      	bne.n	800f856 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800f7aa:	693b      	ldr	r3, [r7, #16]
 800f7ac:	689a      	ldr	r2, [r3, #8]
 800f7ae:	693b      	ldr	r3, [r7, #16]
 800f7b0:	68db      	ldr	r3, [r3, #12]
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d914      	bls.n	800f7e0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800f7b6:	693b      	ldr	r3, [r7, #16]
 800f7b8:	689a      	ldr	r2, [r3, #8]
 800f7ba:	693b      	ldr	r3, [r7, #16]
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	1ad2      	subs	r2, r2, r3
 800f7c0:	693b      	ldr	r3, [r7, #16]
 800f7c2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	689b      	ldr	r3, [r3, #8]
 800f7c8:	461a      	mov	r2, r3
 800f7ca:	6879      	ldr	r1, [r7, #4]
 800f7cc:	68f8      	ldr	r0, [r7, #12]
 800f7ce:	f000 ff21 	bl	8010614 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f7d2:	2300      	movs	r3, #0
 800f7d4:	2200      	movs	r2, #0
 800f7d6:	2100      	movs	r1, #0
 800f7d8:	68f8      	ldr	r0, [r7, #12]
 800f7da:	f003 fef2 	bl	80135c2 <USBD_LL_PrepareReceive>
 800f7de:	e03a      	b.n	800f856 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800f7e0:	693b      	ldr	r3, [r7, #16]
 800f7e2:	68da      	ldr	r2, [r3, #12]
 800f7e4:	693b      	ldr	r3, [r7, #16]
 800f7e6:	689b      	ldr	r3, [r3, #8]
 800f7e8:	429a      	cmp	r2, r3
 800f7ea:	d11c      	bne.n	800f826 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800f7ec:	693b      	ldr	r3, [r7, #16]
 800f7ee:	685a      	ldr	r2, [r3, #4]
 800f7f0:	693b      	ldr	r3, [r7, #16]
 800f7f2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d316      	bcc.n	800f826 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800f7f8:	693b      	ldr	r3, [r7, #16]
 800f7fa:	685a      	ldr	r2, [r3, #4]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800f802:	429a      	cmp	r2, r3
 800f804:	d20f      	bcs.n	800f826 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800f806:	2200      	movs	r2, #0
 800f808:	2100      	movs	r1, #0
 800f80a:	68f8      	ldr	r0, [r7, #12]
 800f80c:	f000 ff02 	bl	8010614 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f818:	2300      	movs	r3, #0
 800f81a:	2200      	movs	r2, #0
 800f81c:	2100      	movs	r1, #0
 800f81e:	68f8      	ldr	r0, [r7, #12]
 800f820:	f003 fecf 	bl	80135c2 <USBD_LL_PrepareReceive>
 800f824:	e017      	b.n	800f856 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f82c:	68db      	ldr	r3, [r3, #12]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d00a      	beq.n	800f848 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f832:	68fb      	ldr	r3, [r7, #12]
 800f834:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800f838:	2b03      	cmp	r3, #3
 800f83a:	d105      	bne.n	800f848 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f842:	68db      	ldr	r3, [r3, #12]
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800f848:	2180      	movs	r1, #128	; 0x80
 800f84a:	68f8      	ldr	r0, [r7, #12]
 800f84c:	f003 fe0f 	bl	801346e <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800f850:	68f8      	ldr	r0, [r7, #12]
 800f852:	f000 ff14 	bl	801067e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f85c:	2b01      	cmp	r3, #1
 800f85e:	d123      	bne.n	800f8a8 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800f860:	68f8      	ldr	r0, [r7, #12]
 800f862:	f7ff fe9b 	bl	800f59c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2200      	movs	r2, #0
 800f86a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800f86e:	e01b      	b.n	800f8a8 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f876:	695b      	ldr	r3, [r3, #20]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d013      	beq.n	800f8a4 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800f87c:	68fb      	ldr	r3, [r7, #12]
 800f87e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800f882:	2b03      	cmp	r3, #3
 800f884:	d10e      	bne.n	800f8a4 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f88c:	695b      	ldr	r3, [r3, #20]
 800f88e:	7afa      	ldrb	r2, [r7, #11]
 800f890:	4611      	mov	r1, r2
 800f892:	68f8      	ldr	r0, [r7, #12]
 800f894:	4798      	blx	r3
 800f896:	4603      	mov	r3, r0
 800f898:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800f89a:	7dfb      	ldrb	r3, [r7, #23]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d003      	beq.n	800f8a8 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800f8a0:	7dfb      	ldrb	r3, [r7, #23]
 800f8a2:	e002      	b.n	800f8aa <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800f8a4:	2303      	movs	r3, #3
 800f8a6:	e000      	b.n	800f8aa <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800f8a8:	2300      	movs	r3, #0
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	3718      	adds	r7, #24
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	bd80      	pop	{r7, pc}

0800f8b2 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800f8b2:	b580      	push	{r7, lr}
 800f8b4:	b082      	sub	sp, #8
 800f8b6:	af00      	add	r7, sp, #0
 800f8b8:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800f8ba:	687b      	ldr	r3, [r7, #4]
 800f8bc:	2201      	movs	r2, #1
 800f8be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	2200      	movs	r2, #0
 800f8c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2200      	movs	r2, #0
 800f8d4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d009      	beq.n	800f8f6 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f8e8:	685b      	ldr	r3, [r3, #4]
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	6852      	ldr	r2, [r2, #4]
 800f8ee:	b2d2      	uxtb	r2, r2
 800f8f0:	4611      	mov	r1, r2
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f8f6:	2340      	movs	r3, #64	; 0x40
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	2100      	movs	r1, #0
 800f8fc:	6878      	ldr	r0, [r7, #4]
 800f8fe:	f003 fd52 	bl	80133a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	2201      	movs	r2, #1
 800f906:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	2240      	movs	r2, #64	; 0x40
 800f90e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800f912:	2340      	movs	r3, #64	; 0x40
 800f914:	2200      	movs	r2, #0
 800f916:	2180      	movs	r1, #128	; 0x80
 800f918:	6878      	ldr	r0, [r7, #4]
 800f91a:	f003 fd44 	bl	80133a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800f91e:	687b      	ldr	r3, [r7, #4]
 800f920:	2201      	movs	r2, #1
 800f922:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	2240      	movs	r2, #64	; 0x40
 800f928:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800f92a:	2300      	movs	r3, #0
}
 800f92c:	4618      	mov	r0, r3
 800f92e:	3708      	adds	r7, #8
 800f930:	46bd      	mov	sp, r7
 800f932:	bd80      	pop	{r7, pc}

0800f934 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800f934:	b480      	push	{r7}
 800f936:	b083      	sub	sp, #12
 800f938:	af00      	add	r7, sp, #0
 800f93a:	6078      	str	r0, [r7, #4]
 800f93c:	460b      	mov	r3, r1
 800f93e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	78fa      	ldrb	r2, [r7, #3]
 800f944:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800f946:	2300      	movs	r3, #0
}
 800f948:	4618      	mov	r0, r3
 800f94a:	370c      	adds	r7, #12
 800f94c:	46bd      	mov	sp, r7
 800f94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f952:	4770      	bx	lr

0800f954 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800f954:	b480      	push	{r7}
 800f956:	b083      	sub	sp, #12
 800f958:	af00      	add	r7, sp, #0
 800f95a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	2204      	movs	r2, #4
 800f96c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800f970:	2300      	movs	r3, #0
}
 800f972:	4618      	mov	r0, r3
 800f974:	370c      	adds	r7, #12
 800f976:	46bd      	mov	sp, r7
 800f978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f97c:	4770      	bx	lr

0800f97e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800f97e:	b480      	push	{r7}
 800f980:	b083      	sub	sp, #12
 800f982:	af00      	add	r7, sp, #0
 800f984:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f98c:	2b04      	cmp	r3, #4
 800f98e:	d105      	bne.n	800f99c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800f99c:	2300      	movs	r3, #0
}
 800f99e:	4618      	mov	r0, r3
 800f9a0:	370c      	adds	r7, #12
 800f9a2:	46bd      	mov	sp, r7
 800f9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9a8:	4770      	bx	lr

0800f9aa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800f9aa:	b580      	push	{r7, lr}
 800f9ac:	b082      	sub	sp, #8
 800f9ae:	af00      	add	r7, sp, #0
 800f9b0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9b8:	2b03      	cmp	r3, #3
 800f9ba:	d10b      	bne.n	800f9d4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9c2:	69db      	ldr	r3, [r3, #28]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d005      	beq.n	800f9d4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f9ce:	69db      	ldr	r3, [r3, #28]
 800f9d0:	6878      	ldr	r0, [r7, #4]
 800f9d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800f9d4:	2300      	movs	r3, #0
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3708      	adds	r7, #8
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}

0800f9de <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800f9de:	b480      	push	{r7}
 800f9e0:	b083      	sub	sp, #12
 800f9e2:	af00      	add	r7, sp, #0
 800f9e4:	6078      	str	r0, [r7, #4]
 800f9e6:	460b      	mov	r3, r1
 800f9e8:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800f9ea:	2300      	movs	r3, #0
}
 800f9ec:	4618      	mov	r0, r3
 800f9ee:	370c      	adds	r7, #12
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f6:	4770      	bx	lr

0800f9f8 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800f9f8:	b480      	push	{r7}
 800f9fa:	b083      	sub	sp, #12
 800f9fc:	af00      	add	r7, sp, #0
 800f9fe:	6078      	str	r0, [r7, #4]
 800fa00:	460b      	mov	r3, r1
 800fa02:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800fa04:	2300      	movs	r3, #0
}
 800fa06:	4618      	mov	r0, r3
 800fa08:	370c      	adds	r7, #12
 800fa0a:	46bd      	mov	sp, r7
 800fa0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa10:	4770      	bx	lr

0800fa12 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800fa12:	b480      	push	{r7}
 800fa14:	b083      	sub	sp, #12
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800fa1a:	2300      	movs	r3, #0
}
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	370c      	adds	r7, #12
 800fa20:	46bd      	mov	sp, r7
 800fa22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa26:	4770      	bx	lr

0800fa28 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800fa28:	b580      	push	{r7, lr}
 800fa2a:	b082      	sub	sp, #8
 800fa2c:	af00      	add	r7, sp, #0
 800fa2e:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	2201      	movs	r2, #1
 800fa34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d009      	beq.n	800fa56 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fa48:	685b      	ldr	r3, [r3, #4]
 800fa4a:	687a      	ldr	r2, [r7, #4]
 800fa4c:	6852      	ldr	r2, [r2, #4]
 800fa4e:	b2d2      	uxtb	r2, r2
 800fa50:	4611      	mov	r1, r2
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	4798      	blx	r3
  }

  return USBD_OK;
 800fa56:	2300      	movs	r3, #0
}
 800fa58:	4618      	mov	r0, r3
 800fa5a:	3708      	adds	r7, #8
 800fa5c:	46bd      	mov	sp, r7
 800fa5e:	bd80      	pop	{r7, pc}

0800fa60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800fa60:	b480      	push	{r7}
 800fa62:	b087      	sub	sp, #28
 800fa64:	af00      	add	r7, sp, #0
 800fa66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	781b      	ldrb	r3, [r3, #0]
 800fa70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800fa72:	697b      	ldr	r3, [r7, #20]
 800fa74:	3301      	adds	r3, #1
 800fa76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800fa78:	697b      	ldr	r3, [r7, #20]
 800fa7a:	781b      	ldrb	r3, [r3, #0]
 800fa7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800fa7e:	8a3b      	ldrh	r3, [r7, #16]
 800fa80:	021b      	lsls	r3, r3, #8
 800fa82:	b21a      	sxth	r2, r3
 800fa84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800fa88:	4313      	orrs	r3, r2
 800fa8a:	b21b      	sxth	r3, r3
 800fa8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800fa8e:	89fb      	ldrh	r3, [r7, #14]
}
 800fa90:	4618      	mov	r0, r3
 800fa92:	371c      	adds	r7, #28
 800fa94:	46bd      	mov	sp, r7
 800fa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa9a:	4770      	bx	lr

0800fa9c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa9c:	b580      	push	{r7, lr}
 800fa9e:	b084      	sub	sp, #16
 800faa0:	af00      	add	r7, sp, #0
 800faa2:	6078      	str	r0, [r7, #4]
 800faa4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800faa6:	2300      	movs	r3, #0
 800faa8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800faaa:	683b      	ldr	r3, [r7, #0]
 800faac:	781b      	ldrb	r3, [r3, #0]
 800faae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fab2:	2b20      	cmp	r3, #32
 800fab4:	d004      	beq.n	800fac0 <USBD_StdDevReq+0x24>
 800fab6:	2b40      	cmp	r3, #64	; 0x40
 800fab8:	d002      	beq.n	800fac0 <USBD_StdDevReq+0x24>
 800faba:	2b00      	cmp	r3, #0
 800fabc:	d00a      	beq.n	800fad4 <USBD_StdDevReq+0x38>
 800fabe:	e050      	b.n	800fb62 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fac0:	687b      	ldr	r3, [r7, #4]
 800fac2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fac6:	689b      	ldr	r3, [r3, #8]
 800fac8:	6839      	ldr	r1, [r7, #0]
 800faca:	6878      	ldr	r0, [r7, #4]
 800facc:	4798      	blx	r3
 800face:	4603      	mov	r3, r0
 800fad0:	73fb      	strb	r3, [r7, #15]
    break;
 800fad2:	e04b      	b.n	800fb6c <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fad4:	683b      	ldr	r3, [r7, #0]
 800fad6:	785b      	ldrb	r3, [r3, #1]
 800fad8:	2b09      	cmp	r3, #9
 800fada:	d83c      	bhi.n	800fb56 <USBD_StdDevReq+0xba>
 800fadc:	a201      	add	r2, pc, #4	; (adr r2, 800fae4 <USBD_StdDevReq+0x48>)
 800fade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fae2:	bf00      	nop
 800fae4:	0800fb39 	.word	0x0800fb39
 800fae8:	0800fb4d 	.word	0x0800fb4d
 800faec:	0800fb57 	.word	0x0800fb57
 800faf0:	0800fb43 	.word	0x0800fb43
 800faf4:	0800fb57 	.word	0x0800fb57
 800faf8:	0800fb17 	.word	0x0800fb17
 800fafc:	0800fb0d 	.word	0x0800fb0d
 800fb00:	0800fb57 	.word	0x0800fb57
 800fb04:	0800fb2f 	.word	0x0800fb2f
 800fb08:	0800fb21 	.word	0x0800fb21
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800fb0c:	6839      	ldr	r1, [r7, #0]
 800fb0e:	6878      	ldr	r0, [r7, #4]
 800fb10:	f000 f9ce 	bl	800feb0 <USBD_GetDescriptor>
      break;
 800fb14:	e024      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800fb16:	6839      	ldr	r1, [r7, #0]
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 fb33 	bl	8010184 <USBD_SetAddress>
      break;
 800fb1e:	e01f      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800fb20:	6839      	ldr	r1, [r7, #0]
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 fb70 	bl	8010208 <USBD_SetConfig>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	73fb      	strb	r3, [r7, #15]
      break;
 800fb2c:	e018      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800fb2e:	6839      	ldr	r1, [r7, #0]
 800fb30:	6878      	ldr	r0, [r7, #4]
 800fb32:	f000 fc0d 	bl	8010350 <USBD_GetConfig>
      break;
 800fb36:	e013      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800fb38:	6839      	ldr	r1, [r7, #0]
 800fb3a:	6878      	ldr	r0, [r7, #4]
 800fb3c:	f000 fc3c 	bl	80103b8 <USBD_GetStatus>
      break;
 800fb40:	e00e      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800fb42:	6839      	ldr	r1, [r7, #0]
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 fc6a 	bl	801041e <USBD_SetFeature>
      break;
 800fb4a:	e009      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800fb4c:	6839      	ldr	r1, [r7, #0]
 800fb4e:	6878      	ldr	r0, [r7, #4]
 800fb50:	f000 fc79 	bl	8010446 <USBD_ClrFeature>
      break;
 800fb54:	e004      	b.n	800fb60 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800fb56:	6839      	ldr	r1, [r7, #0]
 800fb58:	6878      	ldr	r0, [r7, #4]
 800fb5a:	f000 fccf 	bl	80104fc <USBD_CtlError>
      break;
 800fb5e:	bf00      	nop
    }
    break;
 800fb60:	e004      	b.n	800fb6c <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800fb62:	6839      	ldr	r1, [r7, #0]
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 fcc9 	bl	80104fc <USBD_CtlError>
    break;
 800fb6a:	bf00      	nop
  }

  return ret;
 800fb6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fb6e:	4618      	mov	r0, r3
 800fb70:	3710      	adds	r7, #16
 800fb72:	46bd      	mov	sp, r7
 800fb74:	bd80      	pop	{r7, pc}
 800fb76:	bf00      	nop

0800fb78 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b084      	sub	sp, #16
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800fb82:	2300      	movs	r3, #0
 800fb84:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fb86:	683b      	ldr	r3, [r7, #0]
 800fb88:	781b      	ldrb	r3, [r3, #0]
 800fb8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fb8e:	2b20      	cmp	r3, #32
 800fb90:	d003      	beq.n	800fb9a <USBD_StdItfReq+0x22>
 800fb92:	2b40      	cmp	r3, #64	; 0x40
 800fb94:	d001      	beq.n	800fb9a <USBD_StdItfReq+0x22>
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d12a      	bne.n	800fbf0 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800fb9a:	687b      	ldr	r3, [r7, #4]
 800fb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fba0:	3b01      	subs	r3, #1
 800fba2:	2b02      	cmp	r3, #2
 800fba4:	d81d      	bhi.n	800fbe2 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800fba6:	683b      	ldr	r3, [r7, #0]
 800fba8:	889b      	ldrh	r3, [r3, #4]
 800fbaa:	b2db      	uxtb	r3, r3
 800fbac:	2b01      	cmp	r3, #1
 800fbae:	d813      	bhi.n	800fbd8 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fbb6:	689b      	ldr	r3, [r3, #8]
 800fbb8:	6839      	ldr	r1, [r7, #0]
 800fbba:	6878      	ldr	r0, [r7, #4]
 800fbbc:	4798      	blx	r3
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800fbc2:	683b      	ldr	r3, [r7, #0]
 800fbc4:	88db      	ldrh	r3, [r3, #6]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d110      	bne.n	800fbec <USBD_StdItfReq+0x74>
 800fbca:	7bfb      	ldrb	r3, [r7, #15]
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d10d      	bne.n	800fbec <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800fbd0:	6878      	ldr	r0, [r7, #4]
 800fbd2:	f000 fd41 	bl	8010658 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800fbd6:	e009      	b.n	800fbec <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800fbd8:	6839      	ldr	r1, [r7, #0]
 800fbda:	6878      	ldr	r0, [r7, #4]
 800fbdc:	f000 fc8e 	bl	80104fc <USBD_CtlError>
      break;
 800fbe0:	e004      	b.n	800fbec <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800fbe2:	6839      	ldr	r1, [r7, #0]
 800fbe4:	6878      	ldr	r0, [r7, #4]
 800fbe6:	f000 fc89 	bl	80104fc <USBD_CtlError>
      break;
 800fbea:	e000      	b.n	800fbee <USBD_StdItfReq+0x76>
      break;
 800fbec:	bf00      	nop
    }
    break;
 800fbee:	e004      	b.n	800fbfa <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800fbf0:	6839      	ldr	r1, [r7, #0]
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f000 fc82 	bl	80104fc <USBD_CtlError>
    break;
 800fbf8:	bf00      	nop
  }

  return ret;
 800fbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800fbfc:	4618      	mov	r0, r3
 800fbfe:	3710      	adds	r7, #16
 800fc00:	46bd      	mov	sp, r7
 800fc02:	bd80      	pop	{r7, pc}

0800fc04 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fc04:	b580      	push	{r7, lr}
 800fc06:	b084      	sub	sp, #16
 800fc08:	af00      	add	r7, sp, #0
 800fc0a:	6078      	str	r0, [r7, #4]
 800fc0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800fc0e:	2300      	movs	r3, #0
 800fc10:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800fc12:	683b      	ldr	r3, [r7, #0]
 800fc14:	889b      	ldrh	r3, [r3, #4]
 800fc16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800fc18:	683b      	ldr	r3, [r7, #0]
 800fc1a:	781b      	ldrb	r3, [r3, #0]
 800fc1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800fc20:	2b20      	cmp	r3, #32
 800fc22:	d004      	beq.n	800fc2e <USBD_StdEPReq+0x2a>
 800fc24:	2b40      	cmp	r3, #64	; 0x40
 800fc26:	d002      	beq.n	800fc2e <USBD_StdEPReq+0x2a>
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	d00a      	beq.n	800fc42 <USBD_StdEPReq+0x3e>
 800fc2c:	e135      	b.n	800fe9a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fc34:	689b      	ldr	r3, [r3, #8]
 800fc36:	6839      	ldr	r1, [r7, #0]
 800fc38:	6878      	ldr	r0, [r7, #4]
 800fc3a:	4798      	blx	r3
 800fc3c:	4603      	mov	r3, r0
 800fc3e:	73fb      	strb	r3, [r7, #15]
    break;
 800fc40:	e130      	b.n	800fea4 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800fc42:	683b      	ldr	r3, [r7, #0]
 800fc44:	785b      	ldrb	r3, [r3, #1]
 800fc46:	2b01      	cmp	r3, #1
 800fc48:	d03e      	beq.n	800fcc8 <USBD_StdEPReq+0xc4>
 800fc4a:	2b03      	cmp	r3, #3
 800fc4c:	d002      	beq.n	800fc54 <USBD_StdEPReq+0x50>
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d077      	beq.n	800fd42 <USBD_StdEPReq+0x13e>
 800fc52:	e11c      	b.n	800fe8e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fc5a:	2b02      	cmp	r3, #2
 800fc5c:	d002      	beq.n	800fc64 <USBD_StdEPReq+0x60>
 800fc5e:	2b03      	cmp	r3, #3
 800fc60:	d015      	beq.n	800fc8e <USBD_StdEPReq+0x8a>
 800fc62:	e02b      	b.n	800fcbc <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fc64:	7bbb      	ldrb	r3, [r7, #14]
 800fc66:	2b00      	cmp	r3, #0
 800fc68:	d00c      	beq.n	800fc84 <USBD_StdEPReq+0x80>
 800fc6a:	7bbb      	ldrb	r3, [r7, #14]
 800fc6c:	2b80      	cmp	r3, #128	; 0x80
 800fc6e:	d009      	beq.n	800fc84 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fc70:	7bbb      	ldrb	r3, [r7, #14]
 800fc72:	4619      	mov	r1, r3
 800fc74:	6878      	ldr	r0, [r7, #4]
 800fc76:	f003 fbfa 	bl	801346e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fc7a:	2180      	movs	r1, #128	; 0x80
 800fc7c:	6878      	ldr	r0, [r7, #4]
 800fc7e:	f003 fbf6 	bl	801346e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fc82:	e020      	b.n	800fcc6 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800fc84:	6839      	ldr	r1, [r7, #0]
 800fc86:	6878      	ldr	r0, [r7, #4]
 800fc88:	f000 fc38 	bl	80104fc <USBD_CtlError>
        break;
 800fc8c:	e01b      	b.n	800fcc6 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fc8e:	683b      	ldr	r3, [r7, #0]
 800fc90:	885b      	ldrh	r3, [r3, #2]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d10e      	bne.n	800fcb4 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800fc96:	7bbb      	ldrb	r3, [r7, #14]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d00b      	beq.n	800fcb4 <USBD_StdEPReq+0xb0>
 800fc9c:	7bbb      	ldrb	r3, [r7, #14]
 800fc9e:	2b80      	cmp	r3, #128	; 0x80
 800fca0:	d008      	beq.n	800fcb4 <USBD_StdEPReq+0xb0>
 800fca2:	683b      	ldr	r3, [r7, #0]
 800fca4:	88db      	ldrh	r3, [r3, #6]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d104      	bne.n	800fcb4 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800fcaa:	7bbb      	ldrb	r3, [r7, #14]
 800fcac:	4619      	mov	r1, r3
 800fcae:	6878      	ldr	r0, [r7, #4]
 800fcb0:	f003 fbdd 	bl	801346e <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800fcb4:	6878      	ldr	r0, [r7, #4]
 800fcb6:	f000 fccf 	bl	8010658 <USBD_CtlSendStatus>

        break;
 800fcba:	e004      	b.n	800fcc6 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800fcbc:	6839      	ldr	r1, [r7, #0]
 800fcbe:	6878      	ldr	r0, [r7, #4]
 800fcc0:	f000 fc1c 	bl	80104fc <USBD_CtlError>
        break;
 800fcc4:	bf00      	nop
      }
      break;
 800fcc6:	e0e7      	b.n	800fe98 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d002      	beq.n	800fcd8 <USBD_StdEPReq+0xd4>
 800fcd2:	2b03      	cmp	r3, #3
 800fcd4:	d015      	beq.n	800fd02 <USBD_StdEPReq+0xfe>
 800fcd6:	e02d      	b.n	800fd34 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fcd8:	7bbb      	ldrb	r3, [r7, #14]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d00c      	beq.n	800fcf8 <USBD_StdEPReq+0xf4>
 800fcde:	7bbb      	ldrb	r3, [r7, #14]
 800fce0:	2b80      	cmp	r3, #128	; 0x80
 800fce2:	d009      	beq.n	800fcf8 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800fce4:	7bbb      	ldrb	r3, [r7, #14]
 800fce6:	4619      	mov	r1, r3
 800fce8:	6878      	ldr	r0, [r7, #4]
 800fcea:	f003 fbc0 	bl	801346e <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800fcee:	2180      	movs	r1, #128	; 0x80
 800fcf0:	6878      	ldr	r0, [r7, #4]
 800fcf2:	f003 fbbc 	bl	801346e <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800fcf6:	e023      	b.n	800fd40 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800fcf8:	6839      	ldr	r1, [r7, #0]
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f000 fbfe 	bl	80104fc <USBD_CtlError>
        break;
 800fd00:	e01e      	b.n	800fd40 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800fd02:	683b      	ldr	r3, [r7, #0]
 800fd04:	885b      	ldrh	r3, [r3, #2]
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	d119      	bne.n	800fd3e <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	d004      	beq.n	800fd1e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800fd14:	7bbb      	ldrb	r3, [r7, #14]
 800fd16:	4619      	mov	r1, r3
 800fd18:	6878      	ldr	r0, [r7, #4]
 800fd1a:	f003 fbc7 	bl	80134ac <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800fd1e:	6878      	ldr	r0, [r7, #4]
 800fd20:	f000 fc9a 	bl	8010658 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800fd2a:	689b      	ldr	r3, [r3, #8]
 800fd2c:	6839      	ldr	r1, [r7, #0]
 800fd2e:	6878      	ldr	r0, [r7, #4]
 800fd30:	4798      	blx	r3
        }
        break;
 800fd32:	e004      	b.n	800fd3e <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800fd34:	6839      	ldr	r1, [r7, #0]
 800fd36:	6878      	ldr	r0, [r7, #4]
 800fd38:	f000 fbe0 	bl	80104fc <USBD_CtlError>
        break;
 800fd3c:	e000      	b.n	800fd40 <USBD_StdEPReq+0x13c>
        break;
 800fd3e:	bf00      	nop
      }
      break;
 800fd40:	e0aa      	b.n	800fe98 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fd48:	2b02      	cmp	r3, #2
 800fd4a:	d002      	beq.n	800fd52 <USBD_StdEPReq+0x14e>
 800fd4c:	2b03      	cmp	r3, #3
 800fd4e:	d032      	beq.n	800fdb6 <USBD_StdEPReq+0x1b2>
 800fd50:	e097      	b.n	800fe82 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800fd52:	7bbb      	ldrb	r3, [r7, #14]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d007      	beq.n	800fd68 <USBD_StdEPReq+0x164>
 800fd58:	7bbb      	ldrb	r3, [r7, #14]
 800fd5a:	2b80      	cmp	r3, #128	; 0x80
 800fd5c:	d004      	beq.n	800fd68 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800fd5e:	6839      	ldr	r1, [r7, #0]
 800fd60:	6878      	ldr	r0, [r7, #4]
 800fd62:	f000 fbcb 	bl	80104fc <USBD_CtlError>
          break;
 800fd66:	e091      	b.n	800fe8c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fd6c:	2b00      	cmp	r3, #0
 800fd6e:	da0b      	bge.n	800fd88 <USBD_StdEPReq+0x184>
 800fd70:	7bbb      	ldrb	r3, [r7, #14]
 800fd72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fd76:	4613      	mov	r3, r2
 800fd78:	009b      	lsls	r3, r3, #2
 800fd7a:	4413      	add	r3, r2
 800fd7c:	009b      	lsls	r3, r3, #2
 800fd7e:	3310      	adds	r3, #16
 800fd80:	687a      	ldr	r2, [r7, #4]
 800fd82:	4413      	add	r3, r2
 800fd84:	3304      	adds	r3, #4
 800fd86:	e00b      	b.n	800fda0 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fd88:	7bbb      	ldrb	r3, [r7, #14]
 800fd8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fd8e:	4613      	mov	r3, r2
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	4413      	add	r3, r2
 800fd94:	009b      	lsls	r3, r3, #2
 800fd96:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fd9a:	687a      	ldr	r2, [r7, #4]
 800fd9c:	4413      	add	r3, r2
 800fd9e:	3304      	adds	r3, #4
 800fda0:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	2200      	movs	r2, #0
 800fda6:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fda8:	68bb      	ldr	r3, [r7, #8]
 800fdaa:	2202      	movs	r2, #2
 800fdac:	4619      	mov	r1, r3
 800fdae:	6878      	ldr	r0, [r7, #4]
 800fdb0:	f000 fc15 	bl	80105de <USBD_CtlSendData>
        break;
 800fdb4:	e06a      	b.n	800fe8c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800fdb6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fdba:	2b00      	cmp	r3, #0
 800fdbc:	da11      	bge.n	800fde2 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800fdbe:	7bbb      	ldrb	r3, [r7, #14]
 800fdc0:	f003 020f 	and.w	r2, r3, #15
 800fdc4:	6879      	ldr	r1, [r7, #4]
 800fdc6:	4613      	mov	r3, r2
 800fdc8:	009b      	lsls	r3, r3, #2
 800fdca:	4413      	add	r3, r2
 800fdcc:	009b      	lsls	r3, r3, #2
 800fdce:	440b      	add	r3, r1
 800fdd0:	3324      	adds	r3, #36	; 0x24
 800fdd2:	881b      	ldrh	r3, [r3, #0]
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d117      	bne.n	800fe08 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fdd8:	6839      	ldr	r1, [r7, #0]
 800fdda:	6878      	ldr	r0, [r7, #4]
 800fddc:	f000 fb8e 	bl	80104fc <USBD_CtlError>
            break;
 800fde0:	e054      	b.n	800fe8c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800fde2:	7bbb      	ldrb	r3, [r7, #14]
 800fde4:	f003 020f 	and.w	r2, r3, #15
 800fde8:	6879      	ldr	r1, [r7, #4]
 800fdea:	4613      	mov	r3, r2
 800fdec:	009b      	lsls	r3, r3, #2
 800fdee:	4413      	add	r3, r2
 800fdf0:	009b      	lsls	r3, r3, #2
 800fdf2:	440b      	add	r3, r1
 800fdf4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800fdf8:	881b      	ldrh	r3, [r3, #0]
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d104      	bne.n	800fe08 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800fdfe:	6839      	ldr	r1, [r7, #0]
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f000 fb7b 	bl	80104fc <USBD_CtlError>
            break;
 800fe06:	e041      	b.n	800fe8c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	da0b      	bge.n	800fe28 <USBD_StdEPReq+0x224>
 800fe10:	7bbb      	ldrb	r3, [r7, #14]
 800fe12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800fe16:	4613      	mov	r3, r2
 800fe18:	009b      	lsls	r3, r3, #2
 800fe1a:	4413      	add	r3, r2
 800fe1c:	009b      	lsls	r3, r3, #2
 800fe1e:	3310      	adds	r3, #16
 800fe20:	687a      	ldr	r2, [r7, #4]
 800fe22:	4413      	add	r3, r2
 800fe24:	3304      	adds	r3, #4
 800fe26:	e00b      	b.n	800fe40 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800fe28:	7bbb      	ldrb	r3, [r7, #14]
 800fe2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800fe2e:	4613      	mov	r3, r2
 800fe30:	009b      	lsls	r3, r3, #2
 800fe32:	4413      	add	r3, r2
 800fe34:	009b      	lsls	r3, r3, #2
 800fe36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	4413      	add	r3, r2
 800fe3e:	3304      	adds	r3, #4
 800fe40:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800fe42:	7bbb      	ldrb	r3, [r7, #14]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d002      	beq.n	800fe4e <USBD_StdEPReq+0x24a>
 800fe48:	7bbb      	ldrb	r3, [r7, #14]
 800fe4a:	2b80      	cmp	r3, #128	; 0x80
 800fe4c:	d103      	bne.n	800fe56 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800fe4e:	68bb      	ldr	r3, [r7, #8]
 800fe50:	2200      	movs	r2, #0
 800fe52:	601a      	str	r2, [r3, #0]
 800fe54:	e00e      	b.n	800fe74 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800fe56:	7bbb      	ldrb	r3, [r7, #14]
 800fe58:	4619      	mov	r1, r3
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	f003 fb45 	bl	80134ea <USBD_LL_IsStallEP>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d003      	beq.n	800fe6e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	2201      	movs	r2, #1
 800fe6a:	601a      	str	r2, [r3, #0]
 800fe6c:	e002      	b.n	800fe74 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800fe6e:	68bb      	ldr	r3, [r7, #8]
 800fe70:	2200      	movs	r2, #0
 800fe72:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800fe74:	68bb      	ldr	r3, [r7, #8]
 800fe76:	2202      	movs	r2, #2
 800fe78:	4619      	mov	r1, r3
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f000 fbaf 	bl	80105de <USBD_CtlSendData>
          break;
 800fe80:	e004      	b.n	800fe8c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800fe82:	6839      	ldr	r1, [r7, #0]
 800fe84:	6878      	ldr	r0, [r7, #4]
 800fe86:	f000 fb39 	bl	80104fc <USBD_CtlError>
        break;
 800fe8a:	bf00      	nop
      }
      break;
 800fe8c:	e004      	b.n	800fe98 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800fe8e:	6839      	ldr	r1, [r7, #0]
 800fe90:	6878      	ldr	r0, [r7, #4]
 800fe92:	f000 fb33 	bl	80104fc <USBD_CtlError>
      break;
 800fe96:	bf00      	nop
    }
    break;
 800fe98:	e004      	b.n	800fea4 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800fe9a:	6839      	ldr	r1, [r7, #0]
 800fe9c:	6878      	ldr	r0, [r7, #4]
 800fe9e:	f000 fb2d 	bl	80104fc <USBD_CtlError>
    break;
 800fea2:	bf00      	nop
  }

  return ret;
 800fea4:	7bfb      	ldrb	r3, [r7, #15]
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
	...

0800feb0 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b084      	sub	sp, #16
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800feba:	2300      	movs	r3, #0
 800febc:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800fec2:	2300      	movs	r3, #0
 800fec4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800fec6:	683b      	ldr	r3, [r7, #0]
 800fec8:	885b      	ldrh	r3, [r3, #2]
 800feca:	0a1b      	lsrs	r3, r3, #8
 800fecc:	b29b      	uxth	r3, r3
 800fece:	3b01      	subs	r3, #1
 800fed0:	2b06      	cmp	r3, #6
 800fed2:	f200 8128 	bhi.w	8010126 <USBD_GetDescriptor+0x276>
 800fed6:	a201      	add	r2, pc, #4	; (adr r2, 800fedc <USBD_GetDescriptor+0x2c>)
 800fed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fedc:	0800fef9 	.word	0x0800fef9
 800fee0:	0800ff11 	.word	0x0800ff11
 800fee4:	0800ff51 	.word	0x0800ff51
 800fee8:	08010127 	.word	0x08010127
 800feec:	08010127 	.word	0x08010127
 800fef0:	080100c7 	.word	0x080100c7
 800fef4:	080100f3 	.word	0x080100f3
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800fef8:	687b      	ldr	r3, [r7, #4]
 800fefa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	687a      	ldr	r2, [r7, #4]
 800ff02:	7c12      	ldrb	r2, [r2, #16]
 800ff04:	f107 0108 	add.w	r1, r7, #8
 800ff08:	4610      	mov	r0, r2
 800ff0a:	4798      	blx	r3
 800ff0c:	60f8      	str	r0, [r7, #12]
    break;
 800ff0e:	e112      	b.n	8010136 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	7c1b      	ldrb	r3, [r3, #16]
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	d10d      	bne.n	800ff34 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ff20:	f107 0208 	add.w	r2, r7, #8
 800ff24:	4610      	mov	r0, r2
 800ff26:	4798      	blx	r3
 800ff28:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff2a:	68fb      	ldr	r3, [r7, #12]
 800ff2c:	3301      	adds	r3, #1
 800ff2e:	2202      	movs	r2, #2
 800ff30:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800ff32:	e100      	b.n	8010136 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ff3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff3c:	f107 0208 	add.w	r2, r7, #8
 800ff40:	4610      	mov	r0, r2
 800ff42:	4798      	blx	r3
 800ff44:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800ff46:	68fb      	ldr	r3, [r7, #12]
 800ff48:	3301      	adds	r3, #1
 800ff4a:	2202      	movs	r2, #2
 800ff4c:	701a      	strb	r2, [r3, #0]
    break;
 800ff4e:	e0f2      	b.n	8010136 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800ff50:	683b      	ldr	r3, [r7, #0]
 800ff52:	885b      	ldrh	r3, [r3, #2]
 800ff54:	b2db      	uxtb	r3, r3
 800ff56:	2b05      	cmp	r3, #5
 800ff58:	f200 80ac 	bhi.w	80100b4 <USBD_GetDescriptor+0x204>
 800ff5c:	a201      	add	r2, pc, #4	; (adr r2, 800ff64 <USBD_GetDescriptor+0xb4>)
 800ff5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff62:	bf00      	nop
 800ff64:	0800ff7d 	.word	0x0800ff7d
 800ff68:	0800ffb1 	.word	0x0800ffb1
 800ff6c:	0800ffe5 	.word	0x0800ffe5
 800ff70:	08010019 	.word	0x08010019
 800ff74:	0801004d 	.word	0x0801004d
 800ff78:	08010081 	.word	0x08010081
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff82:	685b      	ldr	r3, [r3, #4]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d00b      	beq.n	800ffa0 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	687a      	ldr	r2, [r7, #4]
 800ff92:	7c12      	ldrb	r2, [r2, #16]
 800ff94:	f107 0108 	add.w	r1, r7, #8
 800ff98:	4610      	mov	r0, r2
 800ff9a:	4798      	blx	r3
 800ff9c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ff9e:	e091      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffa0:	6839      	ldr	r1, [r7, #0]
 800ffa2:	6878      	ldr	r0, [r7, #4]
 800ffa4:	f000 faaa 	bl	80104fc <USBD_CtlError>
        err++;
 800ffa8:	7afb      	ldrb	r3, [r7, #11]
 800ffaa:	3301      	adds	r3, #1
 800ffac:	72fb      	strb	r3, [r7, #11]
      break;
 800ffae:	e089      	b.n	80100c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffb6:	689b      	ldr	r3, [r3, #8]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	d00b      	beq.n	800ffd4 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffc2:	689b      	ldr	r3, [r3, #8]
 800ffc4:	687a      	ldr	r2, [r7, #4]
 800ffc6:	7c12      	ldrb	r2, [r2, #16]
 800ffc8:	f107 0108 	add.w	r1, r7, #8
 800ffcc:	4610      	mov	r0, r2
 800ffce:	4798      	blx	r3
 800ffd0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ffd2:	e077      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800ffd4:	6839      	ldr	r1, [r7, #0]
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f000 fa90 	bl	80104fc <USBD_CtlError>
        err++;
 800ffdc:	7afb      	ldrb	r3, [r7, #11]
 800ffde:	3301      	adds	r3, #1
 800ffe0:	72fb      	strb	r3, [r7, #11]
      break;
 800ffe2:	e06f      	b.n	80100c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ffea:	68db      	ldr	r3, [r3, #12]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00b      	beq.n	8010008 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	687a      	ldr	r2, [r7, #4]
 800fffa:	7c12      	ldrb	r2, [r2, #16]
 800fffc:	f107 0108 	add.w	r1, r7, #8
 8010000:	4610      	mov	r0, r2
 8010002:	4798      	blx	r3
 8010004:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8010006:	e05d      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010008:	6839      	ldr	r1, [r7, #0]
 801000a:	6878      	ldr	r0, [r7, #4]
 801000c:	f000 fa76 	bl	80104fc <USBD_CtlError>
        err++;
 8010010:	7afb      	ldrb	r3, [r7, #11]
 8010012:	3301      	adds	r3, #1
 8010014:	72fb      	strb	r3, [r7, #11]
      break;
 8010016:	e055      	b.n	80100c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801001e:	691b      	ldr	r3, [r3, #16]
 8010020:	2b00      	cmp	r3, #0
 8010022:	d00b      	beq.n	801003c <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801002a:	691b      	ldr	r3, [r3, #16]
 801002c:	687a      	ldr	r2, [r7, #4]
 801002e:	7c12      	ldrb	r2, [r2, #16]
 8010030:	f107 0108 	add.w	r1, r7, #8
 8010034:	4610      	mov	r0, r2
 8010036:	4798      	blx	r3
 8010038:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801003a:	e043      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801003c:	6839      	ldr	r1, [r7, #0]
 801003e:	6878      	ldr	r0, [r7, #4]
 8010040:	f000 fa5c 	bl	80104fc <USBD_CtlError>
        err++;
 8010044:	7afb      	ldrb	r3, [r7, #11]
 8010046:	3301      	adds	r3, #1
 8010048:	72fb      	strb	r3, [r7, #11]
      break;
 801004a:	e03b      	b.n	80100c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010052:	695b      	ldr	r3, [r3, #20]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d00b      	beq.n	8010070 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8010058:	687b      	ldr	r3, [r7, #4]
 801005a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801005e:	695b      	ldr	r3, [r3, #20]
 8010060:	687a      	ldr	r2, [r7, #4]
 8010062:	7c12      	ldrb	r2, [r2, #16]
 8010064:	f107 0108 	add.w	r1, r7, #8
 8010068:	4610      	mov	r0, r2
 801006a:	4798      	blx	r3
 801006c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801006e:	e029      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8010070:	6839      	ldr	r1, [r7, #0]
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 fa42 	bl	80104fc <USBD_CtlError>
        err++;
 8010078:	7afb      	ldrb	r3, [r7, #11]
 801007a:	3301      	adds	r3, #1
 801007c:	72fb      	strb	r3, [r7, #11]
      break;
 801007e:	e021      	b.n	80100c4 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8010080:	687b      	ldr	r3, [r7, #4]
 8010082:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010086:	699b      	ldr	r3, [r3, #24]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d00b      	beq.n	80100a4 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8010092:	699b      	ldr	r3, [r3, #24]
 8010094:	687a      	ldr	r2, [r7, #4]
 8010096:	7c12      	ldrb	r2, [r2, #16]
 8010098:	f107 0108 	add.w	r1, r7, #8
 801009c:	4610      	mov	r0, r2
 801009e:	4798      	blx	r3
 80100a0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80100a2:	e00f      	b.n	80100c4 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80100a4:	6839      	ldr	r1, [r7, #0]
 80100a6:	6878      	ldr	r0, [r7, #4]
 80100a8:	f000 fa28 	bl	80104fc <USBD_CtlError>
        err++;
 80100ac:	7afb      	ldrb	r3, [r7, #11]
 80100ae:	3301      	adds	r3, #1
 80100b0:	72fb      	strb	r3, [r7, #11]
      break;
 80100b2:	e007      	b.n	80100c4 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 80100b4:	6839      	ldr	r1, [r7, #0]
 80100b6:	6878      	ldr	r0, [r7, #4]
 80100b8:	f000 fa20 	bl	80104fc <USBD_CtlError>
      err++;
 80100bc:	7afb      	ldrb	r3, [r7, #11]
 80100be:	3301      	adds	r3, #1
 80100c0:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 80100c2:	bf00      	nop
    }
    break;
 80100c4:	e037      	b.n	8010136 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	7c1b      	ldrb	r3, [r3, #16]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d109      	bne.n	80100e2 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80100d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100d6:	f107 0208 	add.w	r2, r7, #8
 80100da:	4610      	mov	r0, r2
 80100dc:	4798      	blx	r3
 80100de:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80100e0:	e029      	b.n	8010136 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80100e2:	6839      	ldr	r1, [r7, #0]
 80100e4:	6878      	ldr	r0, [r7, #4]
 80100e6:	f000 fa09 	bl	80104fc <USBD_CtlError>
      err++;
 80100ea:	7afb      	ldrb	r3, [r7, #11]
 80100ec:	3301      	adds	r3, #1
 80100ee:	72fb      	strb	r3, [r7, #11]
    break;
 80100f0:	e021      	b.n	8010136 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	7c1b      	ldrb	r3, [r3, #16]
 80100f6:	2b00      	cmp	r3, #0
 80100f8:	d10d      	bne.n	8010116 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8010100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010102:	f107 0208 	add.w	r2, r7, #8
 8010106:	4610      	mov	r0, r2
 8010108:	4798      	blx	r3
 801010a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 801010c:	68fb      	ldr	r3, [r7, #12]
 801010e:	3301      	adds	r3, #1
 8010110:	2207      	movs	r2, #7
 8010112:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8010114:	e00f      	b.n	8010136 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8010116:	6839      	ldr	r1, [r7, #0]
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f9ef 	bl	80104fc <USBD_CtlError>
      err++;
 801011e:	7afb      	ldrb	r3, [r7, #11]
 8010120:	3301      	adds	r3, #1
 8010122:	72fb      	strb	r3, [r7, #11]
    break;
 8010124:	e007      	b.n	8010136 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8010126:	6839      	ldr	r1, [r7, #0]
 8010128:	6878      	ldr	r0, [r7, #4]
 801012a:	f000 f9e7 	bl	80104fc <USBD_CtlError>
    err++;
 801012e:	7afb      	ldrb	r3, [r7, #11]
 8010130:	3301      	adds	r3, #1
 8010132:	72fb      	strb	r3, [r7, #11]
    break;
 8010134:	bf00      	nop
  }

  if (err != 0U)
 8010136:	7afb      	ldrb	r3, [r7, #11]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d11e      	bne.n	801017a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 801013c:	683b      	ldr	r3, [r7, #0]
 801013e:	88db      	ldrh	r3, [r3, #6]
 8010140:	2b00      	cmp	r3, #0
 8010142:	d016      	beq.n	8010172 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8010144:	893b      	ldrh	r3, [r7, #8]
 8010146:	2b00      	cmp	r3, #0
 8010148:	d00e      	beq.n	8010168 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 801014a:	683b      	ldr	r3, [r7, #0]
 801014c:	88da      	ldrh	r2, [r3, #6]
 801014e:	893b      	ldrh	r3, [r7, #8]
 8010150:	4293      	cmp	r3, r2
 8010152:	bf28      	it	cs
 8010154:	4613      	movcs	r3, r2
 8010156:	b29b      	uxth	r3, r3
 8010158:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 801015a:	893b      	ldrh	r3, [r7, #8]
 801015c:	461a      	mov	r2, r3
 801015e:	68f9      	ldr	r1, [r7, #12]
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 fa3c 	bl	80105de <USBD_CtlSendData>
 8010166:	e009      	b.n	801017c <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8010168:	6839      	ldr	r1, [r7, #0]
 801016a:	6878      	ldr	r0, [r7, #4]
 801016c:	f000 f9c6 	bl	80104fc <USBD_CtlError>
 8010170:	e004      	b.n	801017c <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8010172:	6878      	ldr	r0, [r7, #4]
 8010174:	f000 fa70 	bl	8010658 <USBD_CtlSendStatus>
 8010178:	e000      	b.n	801017c <USBD_GetDescriptor+0x2cc>
    return;
 801017a:	bf00      	nop
    }
  }
}
 801017c:	3710      	adds	r7, #16
 801017e:	46bd      	mov	sp, r7
 8010180:	bd80      	pop	{r7, pc}
 8010182:	bf00      	nop

08010184 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010184:	b580      	push	{r7, lr}
 8010186:	b084      	sub	sp, #16
 8010188:	af00      	add	r7, sp, #0
 801018a:	6078      	str	r0, [r7, #4]
 801018c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 801018e:	683b      	ldr	r3, [r7, #0]
 8010190:	889b      	ldrh	r3, [r3, #4]
 8010192:	2b00      	cmp	r3, #0
 8010194:	d130      	bne.n	80101f8 <USBD_SetAddress+0x74>
 8010196:	683b      	ldr	r3, [r7, #0]
 8010198:	88db      	ldrh	r3, [r3, #6]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d12c      	bne.n	80101f8 <USBD_SetAddress+0x74>
 801019e:	683b      	ldr	r3, [r7, #0]
 80101a0:	885b      	ldrh	r3, [r3, #2]
 80101a2:	2b7f      	cmp	r3, #127	; 0x7f
 80101a4:	d828      	bhi.n	80101f8 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80101a6:	683b      	ldr	r3, [r7, #0]
 80101a8:	885b      	ldrh	r3, [r3, #2]
 80101aa:	b2db      	uxtb	r3, r3
 80101ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80101b0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80101b8:	2b03      	cmp	r3, #3
 80101ba:	d104      	bne.n	80101c6 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80101bc:	6839      	ldr	r1, [r7, #0]
 80101be:	6878      	ldr	r0, [r7, #4]
 80101c0:	f000 f99c 	bl	80104fc <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101c4:	e01c      	b.n	8010200 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7bfa      	ldrb	r2, [r7, #15]
 80101ca:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80101ce:	7bfb      	ldrb	r3, [r7, #15]
 80101d0:	4619      	mov	r1, r3
 80101d2:	6878      	ldr	r0, [r7, #4]
 80101d4:	f003 f9b5 	bl	8013542 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80101d8:	6878      	ldr	r0, [r7, #4]
 80101da:	f000 fa3d 	bl	8010658 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80101de:	7bfb      	ldrb	r3, [r7, #15]
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d004      	beq.n	80101ee <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2202      	movs	r2, #2
 80101e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101ec:	e008      	b.n	8010200 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2201      	movs	r2, #1
 80101f2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80101f6:	e003      	b.n	8010200 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80101f8:	6839      	ldr	r1, [r7, #0]
 80101fa:	6878      	ldr	r0, [r7, #4]
 80101fc:	f000 f97e 	bl	80104fc <USBD_CtlError>
  }
}
 8010200:	bf00      	nop
 8010202:	3710      	adds	r7, #16
 8010204:	46bd      	mov	sp, r7
 8010206:	bd80      	pop	{r7, pc}

08010208 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010208:	b580      	push	{r7, lr}
 801020a:	b084      	sub	sp, #16
 801020c:	af00      	add	r7, sp, #0
 801020e:	6078      	str	r0, [r7, #4]
 8010210:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8010216:	683b      	ldr	r3, [r7, #0]
 8010218:	885b      	ldrh	r3, [r3, #2]
 801021a:	b2da      	uxtb	r2, r3
 801021c:	4b4b      	ldr	r3, [pc, #300]	; (801034c <USBD_SetConfig+0x144>)
 801021e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8010220:	4b4a      	ldr	r3, [pc, #296]	; (801034c <USBD_SetConfig+0x144>)
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	2b01      	cmp	r3, #1
 8010226:	d905      	bls.n	8010234 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8010228:	6839      	ldr	r1, [r7, #0]
 801022a:	6878      	ldr	r0, [r7, #4]
 801022c:	f000 f966 	bl	80104fc <USBD_CtlError>
    return USBD_FAIL;
 8010230:	2303      	movs	r3, #3
 8010232:	e087      	b.n	8010344 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801023a:	2b02      	cmp	r3, #2
 801023c:	d002      	beq.n	8010244 <USBD_SetConfig+0x3c>
 801023e:	2b03      	cmp	r3, #3
 8010240:	d025      	beq.n	801028e <USBD_SetConfig+0x86>
 8010242:	e071      	b.n	8010328 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8010244:	4b41      	ldr	r3, [pc, #260]	; (801034c <USBD_SetConfig+0x144>)
 8010246:	781b      	ldrb	r3, [r3, #0]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d01c      	beq.n	8010286 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 801024c:	4b3f      	ldr	r3, [pc, #252]	; (801034c <USBD_SetConfig+0x144>)
 801024e:	781b      	ldrb	r3, [r3, #0]
 8010250:	461a      	mov	r2, r3
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8010256:	4b3d      	ldr	r3, [pc, #244]	; (801034c <USBD_SetConfig+0x144>)
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	4619      	mov	r1, r3
 801025c:	6878      	ldr	r0, [r7, #4]
 801025e:	f7ff f9a8 	bl	800f5b2 <USBD_SetClassConfig>
 8010262:	4603      	mov	r3, r0
 8010264:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8010266:	7bfb      	ldrb	r3, [r7, #15]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d004      	beq.n	8010276 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 801026c:	6839      	ldr	r1, [r7, #0]
 801026e:	6878      	ldr	r0, [r7, #4]
 8010270:	f000 f944 	bl	80104fc <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8010274:	e065      	b.n	8010342 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010276:	6878      	ldr	r0, [r7, #4]
 8010278:	f000 f9ee 	bl	8010658 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2203      	movs	r2, #3
 8010280:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8010284:	e05d      	b.n	8010342 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8010286:	6878      	ldr	r0, [r7, #4]
 8010288:	f000 f9e6 	bl	8010658 <USBD_CtlSendStatus>
    break;
 801028c:	e059      	b.n	8010342 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 801028e:	4b2f      	ldr	r3, [pc, #188]	; (801034c <USBD_SetConfig+0x144>)
 8010290:	781b      	ldrb	r3, [r3, #0]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d112      	bne.n	80102bc <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8010296:	687b      	ldr	r3, [r7, #4]
 8010298:	2202      	movs	r2, #2
 801029a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 801029e:	4b2b      	ldr	r3, [pc, #172]	; (801034c <USBD_SetConfig+0x144>)
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	461a      	mov	r2, r3
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80102a8:	4b28      	ldr	r3, [pc, #160]	; (801034c <USBD_SetConfig+0x144>)
 80102aa:	781b      	ldrb	r3, [r3, #0]
 80102ac:	4619      	mov	r1, r3
 80102ae:	6878      	ldr	r0, [r7, #4]
 80102b0:	f7ff f99b 	bl	800f5ea <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 80102b4:	6878      	ldr	r0, [r7, #4]
 80102b6:	f000 f9cf 	bl	8010658 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 80102ba:	e042      	b.n	8010342 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 80102bc:	4b23      	ldr	r3, [pc, #140]	; (801034c <USBD_SetConfig+0x144>)
 80102be:	781b      	ldrb	r3, [r3, #0]
 80102c0:	461a      	mov	r2, r3
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	685b      	ldr	r3, [r3, #4]
 80102c6:	429a      	cmp	r2, r3
 80102c8:	d02a      	beq.n	8010320 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80102ca:	687b      	ldr	r3, [r7, #4]
 80102cc:	685b      	ldr	r3, [r3, #4]
 80102ce:	b2db      	uxtb	r3, r3
 80102d0:	4619      	mov	r1, r3
 80102d2:	6878      	ldr	r0, [r7, #4]
 80102d4:	f7ff f989 	bl	800f5ea <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 80102d8:	4b1c      	ldr	r3, [pc, #112]	; (801034c <USBD_SetConfig+0x144>)
 80102da:	781b      	ldrb	r3, [r3, #0]
 80102dc:	461a      	mov	r2, r3
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 80102e2:	4b1a      	ldr	r3, [pc, #104]	; (801034c <USBD_SetConfig+0x144>)
 80102e4:	781b      	ldrb	r3, [r3, #0]
 80102e6:	4619      	mov	r1, r3
 80102e8:	6878      	ldr	r0, [r7, #4]
 80102ea:	f7ff f962 	bl	800f5b2 <USBD_SetClassConfig>
 80102ee:	4603      	mov	r3, r0
 80102f0:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 80102f2:	7bfb      	ldrb	r3, [r7, #15]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d00f      	beq.n	8010318 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 80102f8:	6839      	ldr	r1, [r7, #0]
 80102fa:	6878      	ldr	r0, [r7, #4]
 80102fc:	f000 f8fe 	bl	80104fc <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	685b      	ldr	r3, [r3, #4]
 8010304:	b2db      	uxtb	r3, r3
 8010306:	4619      	mov	r1, r3
 8010308:	6878      	ldr	r0, [r7, #4]
 801030a:	f7ff f96e 	bl	800f5ea <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2202      	movs	r2, #2
 8010312:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8010316:	e014      	b.n	8010342 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8010318:	6878      	ldr	r0, [r7, #4]
 801031a:	f000 f99d 	bl	8010658 <USBD_CtlSendStatus>
    break;
 801031e:	e010      	b.n	8010342 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8010320:	6878      	ldr	r0, [r7, #4]
 8010322:	f000 f999 	bl	8010658 <USBD_CtlSendStatus>
    break;
 8010326:	e00c      	b.n	8010342 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8010328:	6839      	ldr	r1, [r7, #0]
 801032a:	6878      	ldr	r0, [r7, #4]
 801032c:	f000 f8e6 	bl	80104fc <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8010330:	4b06      	ldr	r3, [pc, #24]	; (801034c <USBD_SetConfig+0x144>)
 8010332:	781b      	ldrb	r3, [r3, #0]
 8010334:	4619      	mov	r1, r3
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f7ff f957 	bl	800f5ea <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 801033c:	2303      	movs	r3, #3
 801033e:	73fb      	strb	r3, [r7, #15]
    break;
 8010340:	bf00      	nop
  }

  return ret;
 8010342:	7bfb      	ldrb	r3, [r7, #15]
}
 8010344:	4618      	mov	r0, r3
 8010346:	3710      	adds	r7, #16
 8010348:	46bd      	mov	sp, r7
 801034a:	bd80      	pop	{r7, pc}
 801034c:	24040200 	.word	0x24040200

08010350 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
 8010358:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801035a:	683b      	ldr	r3, [r7, #0]
 801035c:	88db      	ldrh	r3, [r3, #6]
 801035e:	2b01      	cmp	r3, #1
 8010360:	d004      	beq.n	801036c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8010362:	6839      	ldr	r1, [r7, #0]
 8010364:	6878      	ldr	r0, [r7, #4]
 8010366:	f000 f8c9 	bl	80104fc <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 801036a:	e021      	b.n	80103b0 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010372:	2b01      	cmp	r3, #1
 8010374:	db17      	blt.n	80103a6 <USBD_GetConfig+0x56>
 8010376:	2b02      	cmp	r3, #2
 8010378:	dd02      	ble.n	8010380 <USBD_GetConfig+0x30>
 801037a:	2b03      	cmp	r3, #3
 801037c:	d00b      	beq.n	8010396 <USBD_GetConfig+0x46>
 801037e:	e012      	b.n	80103a6 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	2200      	movs	r2, #0
 8010384:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	3308      	adds	r3, #8
 801038a:	2201      	movs	r2, #1
 801038c:	4619      	mov	r1, r3
 801038e:	6878      	ldr	r0, [r7, #4]
 8010390:	f000 f925 	bl	80105de <USBD_CtlSendData>
      break;
 8010394:	e00c      	b.n	80103b0 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	3304      	adds	r3, #4
 801039a:	2201      	movs	r2, #1
 801039c:	4619      	mov	r1, r3
 801039e:	6878      	ldr	r0, [r7, #4]
 80103a0:	f000 f91d 	bl	80105de <USBD_CtlSendData>
      break;
 80103a4:	e004      	b.n	80103b0 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80103a6:	6839      	ldr	r1, [r7, #0]
 80103a8:	6878      	ldr	r0, [r7, #4]
 80103aa:	f000 f8a7 	bl	80104fc <USBD_CtlError>
      break;
 80103ae:	bf00      	nop
}
 80103b0:	bf00      	nop
 80103b2:	3708      	adds	r7, #8
 80103b4:	46bd      	mov	sp, r7
 80103b6:	bd80      	pop	{r7, pc}

080103b8 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80103b8:	b580      	push	{r7, lr}
 80103ba:	b082      	sub	sp, #8
 80103bc:	af00      	add	r7, sp, #0
 80103be:	6078      	str	r0, [r7, #4]
 80103c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80103c2:	687b      	ldr	r3, [r7, #4]
 80103c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80103c8:	3b01      	subs	r3, #1
 80103ca:	2b02      	cmp	r3, #2
 80103cc:	d81e      	bhi.n	801040c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80103ce:	683b      	ldr	r3, [r7, #0]
 80103d0:	88db      	ldrh	r3, [r3, #6]
 80103d2:	2b02      	cmp	r3, #2
 80103d4:	d004      	beq.n	80103e0 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80103d6:	6839      	ldr	r1, [r7, #0]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 f88f 	bl	80104fc <USBD_CtlError>
      break;
 80103de:	e01a      	b.n	8010416 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80103e0:	687b      	ldr	r3, [r7, #4]
 80103e2:	2201      	movs	r2, #1
 80103e4:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80103ec:	2b00      	cmp	r3, #0
 80103ee:	d005      	beq.n	80103fc <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80103f0:	687b      	ldr	r3, [r7, #4]
 80103f2:	68db      	ldr	r3, [r3, #12]
 80103f4:	f043 0202 	orr.w	r2, r3, #2
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	330c      	adds	r3, #12
 8010400:	2202      	movs	r2, #2
 8010402:	4619      	mov	r1, r3
 8010404:	6878      	ldr	r0, [r7, #4]
 8010406:	f000 f8ea 	bl	80105de <USBD_CtlSendData>
    break;
 801040a:	e004      	b.n	8010416 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 801040c:	6839      	ldr	r1, [r7, #0]
 801040e:	6878      	ldr	r0, [r7, #4]
 8010410:	f000 f874 	bl	80104fc <USBD_CtlError>
    break;
 8010414:	bf00      	nop
  }
}
 8010416:	bf00      	nop
 8010418:	3708      	adds	r7, #8
 801041a:	46bd      	mov	sp, r7
 801041c:	bd80      	pop	{r7, pc}

0801041e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801041e:	b580      	push	{r7, lr}
 8010420:	b082      	sub	sp, #8
 8010422:	af00      	add	r7, sp, #0
 8010424:	6078      	str	r0, [r7, #4]
 8010426:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	885b      	ldrh	r3, [r3, #2]
 801042c:	2b01      	cmp	r3, #1
 801042e:	d106      	bne.n	801043e <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	2201      	movs	r2, #1
 8010434:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8010438:	6878      	ldr	r0, [r7, #4]
 801043a:	f000 f90d 	bl	8010658 <USBD_CtlSendStatus>
  }
}
 801043e:	bf00      	nop
 8010440:	3708      	adds	r7, #8
 8010442:	46bd      	mov	sp, r7
 8010444:	bd80      	pop	{r7, pc}

08010446 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8010446:	b580      	push	{r7, lr}
 8010448:	b082      	sub	sp, #8
 801044a:	af00      	add	r7, sp, #0
 801044c:	6078      	str	r0, [r7, #4]
 801044e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8010456:	3b01      	subs	r3, #1
 8010458:	2b02      	cmp	r3, #2
 801045a:	d80b      	bhi.n	8010474 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	885b      	ldrh	r3, [r3, #2]
 8010460:	2b01      	cmp	r3, #1
 8010462:	d10c      	bne.n	801047e <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2200      	movs	r2, #0
 8010468:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 801046c:	6878      	ldr	r0, [r7, #4]
 801046e:	f000 f8f3 	bl	8010658 <USBD_CtlSendStatus>
      }
      break;
 8010472:	e004      	b.n	801047e <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8010474:	6839      	ldr	r1, [r7, #0]
 8010476:	6878      	ldr	r0, [r7, #4]
 8010478:	f000 f840 	bl	80104fc <USBD_CtlError>
      break;
 801047c:	e000      	b.n	8010480 <USBD_ClrFeature+0x3a>
      break;
 801047e:	bf00      	nop
  }
}
 8010480:	bf00      	nop
 8010482:	3708      	adds	r7, #8
 8010484:	46bd      	mov	sp, r7
 8010486:	bd80      	pop	{r7, pc}

08010488 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8010492:	683b      	ldr	r3, [r7, #0]
 8010494:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8010496:	68fb      	ldr	r3, [r7, #12]
 8010498:	781a      	ldrb	r2, [r3, #0]
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 801049e:	68fb      	ldr	r3, [r7, #12]
 80104a0:	3301      	adds	r3, #1
 80104a2:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	781a      	ldrb	r2, [r3, #0]
 80104a8:	687b      	ldr	r3, [r7, #4]
 80104aa:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	3301      	adds	r3, #1
 80104b0:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80104b2:	68f8      	ldr	r0, [r7, #12]
 80104b4:	f7ff fad4 	bl	800fa60 <SWAPBYTE>
 80104b8:	4603      	mov	r3, r0
 80104ba:	461a      	mov	r2, r3
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80104c0:	68fb      	ldr	r3, [r7, #12]
 80104c2:	3301      	adds	r3, #1
 80104c4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	3301      	adds	r3, #1
 80104ca:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f7ff fac7 	bl	800fa60 <SWAPBYTE>
 80104d2:	4603      	mov	r3, r0
 80104d4:	461a      	mov	r2, r3
 80104d6:	687b      	ldr	r3, [r7, #4]
 80104d8:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	3301      	adds	r3, #1
 80104de:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80104e0:	68fb      	ldr	r3, [r7, #12]
 80104e2:	3301      	adds	r3, #1
 80104e4:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80104e6:	68f8      	ldr	r0, [r7, #12]
 80104e8:	f7ff faba 	bl	800fa60 <SWAPBYTE>
 80104ec:	4603      	mov	r3, r0
 80104ee:	461a      	mov	r2, r3
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	80da      	strh	r2, [r3, #6]
}
 80104f4:	bf00      	nop
 80104f6:	3710      	adds	r7, #16
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80104fc:	b580      	push	{r7, lr}
 80104fe:	b082      	sub	sp, #8
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8010506:	2180      	movs	r1, #128	; 0x80
 8010508:	6878      	ldr	r0, [r7, #4]
 801050a:	f002 ffb0 	bl	801346e <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 801050e:	2100      	movs	r1, #0
 8010510:	6878      	ldr	r0, [r7, #4]
 8010512:	f002 ffac 	bl	801346e <USBD_LL_StallEP>
}
 8010516:	bf00      	nop
 8010518:	3708      	adds	r7, #8
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}

0801051e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 801051e:	b580      	push	{r7, lr}
 8010520:	b086      	sub	sp, #24
 8010522:	af00      	add	r7, sp, #0
 8010524:	60f8      	str	r0, [r7, #12]
 8010526:	60b9      	str	r1, [r7, #8]
 8010528:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 801052a:	2300      	movs	r3, #0
 801052c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 801052e:	68fb      	ldr	r3, [r7, #12]
 8010530:	2b00      	cmp	r3, #0
 8010532:	d036      	beq.n	80105a2 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8010538:	6938      	ldr	r0, [r7, #16]
 801053a:	f000 f836 	bl	80105aa <USBD_GetLen>
 801053e:	4603      	mov	r3, r0
 8010540:	3301      	adds	r3, #1
 8010542:	b29b      	uxth	r3, r3
 8010544:	005b      	lsls	r3, r3, #1
 8010546:	b29a      	uxth	r2, r3
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 801054c:	7dfb      	ldrb	r3, [r7, #23]
 801054e:	68ba      	ldr	r2, [r7, #8]
 8010550:	4413      	add	r3, r2
 8010552:	687a      	ldr	r2, [r7, #4]
 8010554:	7812      	ldrb	r2, [r2, #0]
 8010556:	701a      	strb	r2, [r3, #0]
  idx++;
 8010558:	7dfb      	ldrb	r3, [r7, #23]
 801055a:	3301      	adds	r3, #1
 801055c:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 801055e:	7dfb      	ldrb	r3, [r7, #23]
 8010560:	68ba      	ldr	r2, [r7, #8]
 8010562:	4413      	add	r3, r2
 8010564:	2203      	movs	r2, #3
 8010566:	701a      	strb	r2, [r3, #0]
  idx++;
 8010568:	7dfb      	ldrb	r3, [r7, #23]
 801056a:	3301      	adds	r3, #1
 801056c:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801056e:	e013      	b.n	8010598 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8010570:	7dfb      	ldrb	r3, [r7, #23]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	4413      	add	r3, r2
 8010576:	693a      	ldr	r2, [r7, #16]
 8010578:	7812      	ldrb	r2, [r2, #0]
 801057a:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	3301      	adds	r3, #1
 8010580:	613b      	str	r3, [r7, #16]
    idx++;
 8010582:	7dfb      	ldrb	r3, [r7, #23]
 8010584:	3301      	adds	r3, #1
 8010586:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8010588:	7dfb      	ldrb	r3, [r7, #23]
 801058a:	68ba      	ldr	r2, [r7, #8]
 801058c:	4413      	add	r3, r2
 801058e:	2200      	movs	r2, #0
 8010590:	701a      	strb	r2, [r3, #0]
    idx++;
 8010592:	7dfb      	ldrb	r3, [r7, #23]
 8010594:	3301      	adds	r3, #1
 8010596:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8010598:	693b      	ldr	r3, [r7, #16]
 801059a:	781b      	ldrb	r3, [r3, #0]
 801059c:	2b00      	cmp	r3, #0
 801059e:	d1e7      	bne.n	8010570 <USBD_GetString+0x52>
 80105a0:	e000      	b.n	80105a4 <USBD_GetString+0x86>
    return;
 80105a2:	bf00      	nop
  }
}
 80105a4:	3718      	adds	r7, #24
 80105a6:	46bd      	mov	sp, r7
 80105a8:	bd80      	pop	{r7, pc}

080105aa <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80105aa:	b480      	push	{r7}
 80105ac:	b085      	sub	sp, #20
 80105ae:	af00      	add	r7, sp, #0
 80105b0:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80105b2:	2300      	movs	r3, #0
 80105b4:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80105ba:	e005      	b.n	80105c8 <USBD_GetLen+0x1e>
  {
    len++;
 80105bc:	7bfb      	ldrb	r3, [r7, #15]
 80105be:	3301      	adds	r3, #1
 80105c0:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80105c2:	68bb      	ldr	r3, [r7, #8]
 80105c4:	3301      	adds	r3, #1
 80105c6:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	781b      	ldrb	r3, [r3, #0]
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d1f5      	bne.n	80105bc <USBD_GetLen+0x12>
  }

  return len;
 80105d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3714      	adds	r7, #20
 80105d6:	46bd      	mov	sp, r7
 80105d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105dc:	4770      	bx	lr

080105de <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80105de:	b580      	push	{r7, lr}
 80105e0:	b084      	sub	sp, #16
 80105e2:	af00      	add	r7, sp, #0
 80105e4:	60f8      	str	r0, [r7, #12]
 80105e6:	60b9      	str	r1, [r7, #8]
 80105e8:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	2202      	movs	r2, #2
 80105ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80105f2:	68fb      	ldr	r3, [r7, #12]
 80105f4:	687a      	ldr	r2, [r7, #4]
 80105f6:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 80105f8:	68fb      	ldr	r3, [r7, #12]
 80105fa:	687a      	ldr	r2, [r7, #4]
 80105fc:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80105fe:	687b      	ldr	r3, [r7, #4]
 8010600:	68ba      	ldr	r2, [r7, #8]
 8010602:	2100      	movs	r1, #0
 8010604:	68f8      	ldr	r0, [r7, #12]
 8010606:	f002 ffbb 	bl	8013580 <USBD_LL_Transmit>

  return USBD_OK;
 801060a:	2300      	movs	r3, #0
}
 801060c:	4618      	mov	r0, r3
 801060e:	3710      	adds	r7, #16
 8010610:	46bd      	mov	sp, r7
 8010612:	bd80      	pop	{r7, pc}

08010614 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8010614:	b580      	push	{r7, lr}
 8010616:	b084      	sub	sp, #16
 8010618:	af00      	add	r7, sp, #0
 801061a:	60f8      	str	r0, [r7, #12]
 801061c:	60b9      	str	r1, [r7, #8]
 801061e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	68ba      	ldr	r2, [r7, #8]
 8010624:	2100      	movs	r1, #0
 8010626:	68f8      	ldr	r0, [r7, #12]
 8010628:	f002 ffaa 	bl	8013580 <USBD_LL_Transmit>

  return USBD_OK;
 801062c:	2300      	movs	r3, #0
}
 801062e:	4618      	mov	r0, r3
 8010630:	3710      	adds	r7, #16
 8010632:	46bd      	mov	sp, r7
 8010634:	bd80      	pop	{r7, pc}

08010636 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8010636:	b580      	push	{r7, lr}
 8010638:	b084      	sub	sp, #16
 801063a:	af00      	add	r7, sp, #0
 801063c:	60f8      	str	r0, [r7, #12]
 801063e:	60b9      	str	r1, [r7, #8]
 8010640:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	68ba      	ldr	r2, [r7, #8]
 8010646:	2100      	movs	r1, #0
 8010648:	68f8      	ldr	r0, [r7, #12]
 801064a:	f002 ffba 	bl	80135c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801064e:	2300      	movs	r3, #0
}
 8010650:	4618      	mov	r0, r3
 8010652:	3710      	adds	r7, #16
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}

08010658 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8010658:	b580      	push	{r7, lr}
 801065a:	b082      	sub	sp, #8
 801065c:	af00      	add	r7, sp, #0
 801065e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	2204      	movs	r2, #4
 8010664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8010668:	2300      	movs	r3, #0
 801066a:	2200      	movs	r2, #0
 801066c:	2100      	movs	r1, #0
 801066e:	6878      	ldr	r0, [r7, #4]
 8010670:	f002 ff86 	bl	8013580 <USBD_LL_Transmit>

  return USBD_OK;
 8010674:	2300      	movs	r3, #0
}
 8010676:	4618      	mov	r0, r3
 8010678:	3708      	adds	r7, #8
 801067a:	46bd      	mov	sp, r7
 801067c:	bd80      	pop	{r7, pc}

0801067e <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 801067e:	b580      	push	{r7, lr}
 8010680:	b082      	sub	sp, #8
 8010682:	af00      	add	r7, sp, #0
 8010684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8010686:	687b      	ldr	r3, [r7, #4]
 8010688:	2205      	movs	r2, #5
 801068a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801068e:	2300      	movs	r3, #0
 8010690:	2200      	movs	r2, #0
 8010692:	2100      	movs	r1, #0
 8010694:	6878      	ldr	r0, [r7, #4]
 8010696:	f002 ff94 	bl	80135c2 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801069a:	2300      	movs	r3, #0
}
 801069c:	4618      	mov	r0, r3
 801069e:	3708      	adds	r7, #8
 80106a0:	46bd      	mov	sp, r7
 80106a2:	bd80      	pop	{r7, pc}

080106a4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b084      	sub	sp, #16
 80106a8:	af00      	add	r7, sp, #0
 80106aa:	4603      	mov	r3, r0
 80106ac:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80106ae:	79fb      	ldrb	r3, [r7, #7]
 80106b0:	4a08      	ldr	r2, [pc, #32]	; (80106d4 <disk_status+0x30>)
 80106b2:	009b      	lsls	r3, r3, #2
 80106b4:	4413      	add	r3, r2
 80106b6:	685b      	ldr	r3, [r3, #4]
 80106b8:	685b      	ldr	r3, [r3, #4]
 80106ba:	79fa      	ldrb	r2, [r7, #7]
 80106bc:	4905      	ldr	r1, [pc, #20]	; (80106d4 <disk_status+0x30>)
 80106be:	440a      	add	r2, r1
 80106c0:	7a12      	ldrb	r2, [r2, #8]
 80106c2:	4610      	mov	r0, r2
 80106c4:	4798      	blx	r3
 80106c6:	4603      	mov	r3, r0
 80106c8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80106ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80106cc:	4618      	mov	r0, r3
 80106ce:	3710      	adds	r7, #16
 80106d0:	46bd      	mov	sp, r7
 80106d2:	bd80      	pop	{r7, pc}
 80106d4:	2404022c 	.word	0x2404022c

080106d8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80106d8:	b580      	push	{r7, lr}
 80106da:	b084      	sub	sp, #16
 80106dc:	af00      	add	r7, sp, #0
 80106de:	4603      	mov	r3, r0
 80106e0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80106e2:	2300      	movs	r3, #0
 80106e4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80106e6:	79fb      	ldrb	r3, [r7, #7]
 80106e8:	4a0d      	ldr	r2, [pc, #52]	; (8010720 <disk_initialize+0x48>)
 80106ea:	5cd3      	ldrb	r3, [r2, r3]
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	d111      	bne.n	8010714 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80106f0:	79fb      	ldrb	r3, [r7, #7]
 80106f2:	4a0b      	ldr	r2, [pc, #44]	; (8010720 <disk_initialize+0x48>)
 80106f4:	2101      	movs	r1, #1
 80106f6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80106f8:	79fb      	ldrb	r3, [r7, #7]
 80106fa:	4a09      	ldr	r2, [pc, #36]	; (8010720 <disk_initialize+0x48>)
 80106fc:	009b      	lsls	r3, r3, #2
 80106fe:	4413      	add	r3, r2
 8010700:	685b      	ldr	r3, [r3, #4]
 8010702:	681b      	ldr	r3, [r3, #0]
 8010704:	79fa      	ldrb	r2, [r7, #7]
 8010706:	4906      	ldr	r1, [pc, #24]	; (8010720 <disk_initialize+0x48>)
 8010708:	440a      	add	r2, r1
 801070a:	7a12      	ldrb	r2, [r2, #8]
 801070c:	4610      	mov	r0, r2
 801070e:	4798      	blx	r3
 8010710:	4603      	mov	r3, r0
 8010712:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010714:	7bfb      	ldrb	r3, [r7, #15]
}
 8010716:	4618      	mov	r0, r3
 8010718:	3710      	adds	r7, #16
 801071a:	46bd      	mov	sp, r7
 801071c:	bd80      	pop	{r7, pc}
 801071e:	bf00      	nop
 8010720:	2404022c 	.word	0x2404022c

08010724 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010724:	b590      	push	{r4, r7, lr}
 8010726:	b087      	sub	sp, #28
 8010728:	af00      	add	r7, sp, #0
 801072a:	60b9      	str	r1, [r7, #8]
 801072c:	607a      	str	r2, [r7, #4]
 801072e:	603b      	str	r3, [r7, #0]
 8010730:	4603      	mov	r3, r0
 8010732:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010734:	7bfb      	ldrb	r3, [r7, #15]
 8010736:	4a0a      	ldr	r2, [pc, #40]	; (8010760 <disk_read+0x3c>)
 8010738:	009b      	lsls	r3, r3, #2
 801073a:	4413      	add	r3, r2
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	689c      	ldr	r4, [r3, #8]
 8010740:	7bfb      	ldrb	r3, [r7, #15]
 8010742:	4a07      	ldr	r2, [pc, #28]	; (8010760 <disk_read+0x3c>)
 8010744:	4413      	add	r3, r2
 8010746:	7a18      	ldrb	r0, [r3, #8]
 8010748:	683b      	ldr	r3, [r7, #0]
 801074a:	687a      	ldr	r2, [r7, #4]
 801074c:	68b9      	ldr	r1, [r7, #8]
 801074e:	47a0      	blx	r4
 8010750:	4603      	mov	r3, r0
 8010752:	75fb      	strb	r3, [r7, #23]
  return res;
 8010754:	7dfb      	ldrb	r3, [r7, #23]
}
 8010756:	4618      	mov	r0, r3
 8010758:	371c      	adds	r7, #28
 801075a:	46bd      	mov	sp, r7
 801075c:	bd90      	pop	{r4, r7, pc}
 801075e:	bf00      	nop
 8010760:	2404022c 	.word	0x2404022c

08010764 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010764:	b590      	push	{r4, r7, lr}
 8010766:	b087      	sub	sp, #28
 8010768:	af00      	add	r7, sp, #0
 801076a:	60b9      	str	r1, [r7, #8]
 801076c:	607a      	str	r2, [r7, #4]
 801076e:	603b      	str	r3, [r7, #0]
 8010770:	4603      	mov	r3, r0
 8010772:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010774:	7bfb      	ldrb	r3, [r7, #15]
 8010776:	4a0a      	ldr	r2, [pc, #40]	; (80107a0 <disk_write+0x3c>)
 8010778:	009b      	lsls	r3, r3, #2
 801077a:	4413      	add	r3, r2
 801077c:	685b      	ldr	r3, [r3, #4]
 801077e:	68dc      	ldr	r4, [r3, #12]
 8010780:	7bfb      	ldrb	r3, [r7, #15]
 8010782:	4a07      	ldr	r2, [pc, #28]	; (80107a0 <disk_write+0x3c>)
 8010784:	4413      	add	r3, r2
 8010786:	7a18      	ldrb	r0, [r3, #8]
 8010788:	683b      	ldr	r3, [r7, #0]
 801078a:	687a      	ldr	r2, [r7, #4]
 801078c:	68b9      	ldr	r1, [r7, #8]
 801078e:	47a0      	blx	r4
 8010790:	4603      	mov	r3, r0
 8010792:	75fb      	strb	r3, [r7, #23]
  return res;
 8010794:	7dfb      	ldrb	r3, [r7, #23]
}
 8010796:	4618      	mov	r0, r3
 8010798:	371c      	adds	r7, #28
 801079a:	46bd      	mov	sp, r7
 801079c:	bd90      	pop	{r4, r7, pc}
 801079e:	bf00      	nop
 80107a0:	2404022c 	.word	0x2404022c

080107a4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80107a4:	b580      	push	{r7, lr}
 80107a6:	b084      	sub	sp, #16
 80107a8:	af00      	add	r7, sp, #0
 80107aa:	4603      	mov	r3, r0
 80107ac:	603a      	str	r2, [r7, #0]
 80107ae:	71fb      	strb	r3, [r7, #7]
 80107b0:	460b      	mov	r3, r1
 80107b2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80107b4:	79fb      	ldrb	r3, [r7, #7]
 80107b6:	4a09      	ldr	r2, [pc, #36]	; (80107dc <disk_ioctl+0x38>)
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	4413      	add	r3, r2
 80107bc:	685b      	ldr	r3, [r3, #4]
 80107be:	691b      	ldr	r3, [r3, #16]
 80107c0:	79fa      	ldrb	r2, [r7, #7]
 80107c2:	4906      	ldr	r1, [pc, #24]	; (80107dc <disk_ioctl+0x38>)
 80107c4:	440a      	add	r2, r1
 80107c6:	7a10      	ldrb	r0, [r2, #8]
 80107c8:	79b9      	ldrb	r1, [r7, #6]
 80107ca:	683a      	ldr	r2, [r7, #0]
 80107cc:	4798      	blx	r3
 80107ce:	4603      	mov	r3, r0
 80107d0:	73fb      	strb	r3, [r7, #15]
  return res;
 80107d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80107d4:	4618      	mov	r0, r3
 80107d6:	3710      	adds	r7, #16
 80107d8:	46bd      	mov	sp, r7
 80107da:	bd80      	pop	{r7, pc}
 80107dc:	2404022c 	.word	0x2404022c

080107e0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80107e0:	b480      	push	{r7}
 80107e2:	b085      	sub	sp, #20
 80107e4:	af00      	add	r7, sp, #0
 80107e6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	3301      	adds	r3, #1
 80107ec:	781b      	ldrb	r3, [r3, #0]
 80107ee:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80107f0:	89fb      	ldrh	r3, [r7, #14]
 80107f2:	021b      	lsls	r3, r3, #8
 80107f4:	b21a      	sxth	r2, r3
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	b21b      	sxth	r3, r3
 80107fc:	4313      	orrs	r3, r2
 80107fe:	b21b      	sxth	r3, r3
 8010800:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010802:	89fb      	ldrh	r3, [r7, #14]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3714      	adds	r7, #20
 8010808:	46bd      	mov	sp, r7
 801080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801080e:	4770      	bx	lr

08010810 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010810:	b480      	push	{r7}
 8010812:	b085      	sub	sp, #20
 8010814:	af00      	add	r7, sp, #0
 8010816:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	3303      	adds	r3, #3
 801081c:	781b      	ldrb	r3, [r3, #0]
 801081e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	021b      	lsls	r3, r3, #8
 8010824:	687a      	ldr	r2, [r7, #4]
 8010826:	3202      	adds	r2, #2
 8010828:	7812      	ldrb	r2, [r2, #0]
 801082a:	4313      	orrs	r3, r2
 801082c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	021b      	lsls	r3, r3, #8
 8010832:	687a      	ldr	r2, [r7, #4]
 8010834:	3201      	adds	r2, #1
 8010836:	7812      	ldrb	r2, [r2, #0]
 8010838:	4313      	orrs	r3, r2
 801083a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 801083c:	68fb      	ldr	r3, [r7, #12]
 801083e:	021b      	lsls	r3, r3, #8
 8010840:	687a      	ldr	r2, [r7, #4]
 8010842:	7812      	ldrb	r2, [r2, #0]
 8010844:	4313      	orrs	r3, r2
 8010846:	60fb      	str	r3, [r7, #12]
	return rv;
 8010848:	68fb      	ldr	r3, [r7, #12]
}
 801084a:	4618      	mov	r0, r3
 801084c:	3714      	adds	r7, #20
 801084e:	46bd      	mov	sp, r7
 8010850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010854:	4770      	bx	lr

08010856 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8010856:	b480      	push	{r7}
 8010858:	b083      	sub	sp, #12
 801085a:	af00      	add	r7, sp, #0
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	460b      	mov	r3, r1
 8010860:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8010862:	687b      	ldr	r3, [r7, #4]
 8010864:	1c5a      	adds	r2, r3, #1
 8010866:	607a      	str	r2, [r7, #4]
 8010868:	887a      	ldrh	r2, [r7, #2]
 801086a:	b2d2      	uxtb	r2, r2
 801086c:	701a      	strb	r2, [r3, #0]
 801086e:	887b      	ldrh	r3, [r7, #2]
 8010870:	0a1b      	lsrs	r3, r3, #8
 8010872:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	1c5a      	adds	r2, r3, #1
 8010878:	607a      	str	r2, [r7, #4]
 801087a:	887a      	ldrh	r2, [r7, #2]
 801087c:	b2d2      	uxtb	r2, r2
 801087e:	701a      	strb	r2, [r3, #0]
}
 8010880:	bf00      	nop
 8010882:	370c      	adds	r7, #12
 8010884:	46bd      	mov	sp, r7
 8010886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801088a:	4770      	bx	lr

0801088c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 801088c:	b480      	push	{r7}
 801088e:	b083      	sub	sp, #12
 8010890:	af00      	add	r7, sp, #0
 8010892:	6078      	str	r0, [r7, #4]
 8010894:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	1c5a      	adds	r2, r3, #1
 801089a:	607a      	str	r2, [r7, #4]
 801089c:	683a      	ldr	r2, [r7, #0]
 801089e:	b2d2      	uxtb	r2, r2
 80108a0:	701a      	strb	r2, [r3, #0]
 80108a2:	683b      	ldr	r3, [r7, #0]
 80108a4:	0a1b      	lsrs	r3, r3, #8
 80108a6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80108a8:	687b      	ldr	r3, [r7, #4]
 80108aa:	1c5a      	adds	r2, r3, #1
 80108ac:	607a      	str	r2, [r7, #4]
 80108ae:	683a      	ldr	r2, [r7, #0]
 80108b0:	b2d2      	uxtb	r2, r2
 80108b2:	701a      	strb	r2, [r3, #0]
 80108b4:	683b      	ldr	r3, [r7, #0]
 80108b6:	0a1b      	lsrs	r3, r3, #8
 80108b8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80108ba:	687b      	ldr	r3, [r7, #4]
 80108bc:	1c5a      	adds	r2, r3, #1
 80108be:	607a      	str	r2, [r7, #4]
 80108c0:	683a      	ldr	r2, [r7, #0]
 80108c2:	b2d2      	uxtb	r2, r2
 80108c4:	701a      	strb	r2, [r3, #0]
 80108c6:	683b      	ldr	r3, [r7, #0]
 80108c8:	0a1b      	lsrs	r3, r3, #8
 80108ca:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	1c5a      	adds	r2, r3, #1
 80108d0:	607a      	str	r2, [r7, #4]
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	b2d2      	uxtb	r2, r2
 80108d6:	701a      	strb	r2, [r3, #0]
}
 80108d8:	bf00      	nop
 80108da:	370c      	adds	r7, #12
 80108dc:	46bd      	mov	sp, r7
 80108de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e2:	4770      	bx	lr

080108e4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80108e4:	b480      	push	{r7}
 80108e6:	b087      	sub	sp, #28
 80108e8:	af00      	add	r7, sp, #0
 80108ea:	60f8      	str	r0, [r7, #12]
 80108ec:	60b9      	str	r1, [r7, #8]
 80108ee:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80108f0:	68fb      	ldr	r3, [r7, #12]
 80108f2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80108f4:	68bb      	ldr	r3, [r7, #8]
 80108f6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d00d      	beq.n	801091a <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80108fe:	693a      	ldr	r2, [r7, #16]
 8010900:	1c53      	adds	r3, r2, #1
 8010902:	613b      	str	r3, [r7, #16]
 8010904:	697b      	ldr	r3, [r7, #20]
 8010906:	1c59      	adds	r1, r3, #1
 8010908:	6179      	str	r1, [r7, #20]
 801090a:	7812      	ldrb	r2, [r2, #0]
 801090c:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	3b01      	subs	r3, #1
 8010912:	607b      	str	r3, [r7, #4]
 8010914:	687b      	ldr	r3, [r7, #4]
 8010916:	2b00      	cmp	r3, #0
 8010918:	d1f1      	bne.n	80108fe <mem_cpy+0x1a>
	}
}
 801091a:	bf00      	nop
 801091c:	371c      	adds	r7, #28
 801091e:	46bd      	mov	sp, r7
 8010920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010924:	4770      	bx	lr

08010926 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8010926:	b480      	push	{r7}
 8010928:	b087      	sub	sp, #28
 801092a:	af00      	add	r7, sp, #0
 801092c:	60f8      	str	r0, [r7, #12]
 801092e:	60b9      	str	r1, [r7, #8]
 8010930:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8010932:	68fb      	ldr	r3, [r7, #12]
 8010934:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8010936:	697b      	ldr	r3, [r7, #20]
 8010938:	1c5a      	adds	r2, r3, #1
 801093a:	617a      	str	r2, [r7, #20]
 801093c:	68ba      	ldr	r2, [r7, #8]
 801093e:	b2d2      	uxtb	r2, r2
 8010940:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	3b01      	subs	r3, #1
 8010946:	607b      	str	r3, [r7, #4]
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	2b00      	cmp	r3, #0
 801094c:	d1f3      	bne.n	8010936 <mem_set+0x10>
}
 801094e:	bf00      	nop
 8010950:	371c      	adds	r7, #28
 8010952:	46bd      	mov	sp, r7
 8010954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010958:	4770      	bx	lr

0801095a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 801095a:	b480      	push	{r7}
 801095c:	b089      	sub	sp, #36	; 0x24
 801095e:	af00      	add	r7, sp, #0
 8010960:	60f8      	str	r0, [r7, #12]
 8010962:	60b9      	str	r1, [r7, #8]
 8010964:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	61fb      	str	r3, [r7, #28]
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 801096e:	2300      	movs	r3, #0
 8010970:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8010972:	69fb      	ldr	r3, [r7, #28]
 8010974:	1c5a      	adds	r2, r3, #1
 8010976:	61fa      	str	r2, [r7, #28]
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	4619      	mov	r1, r3
 801097c:	69bb      	ldr	r3, [r7, #24]
 801097e:	1c5a      	adds	r2, r3, #1
 8010980:	61ba      	str	r2, [r7, #24]
 8010982:	781b      	ldrb	r3, [r3, #0]
 8010984:	1acb      	subs	r3, r1, r3
 8010986:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	3b01      	subs	r3, #1
 801098c:	607b      	str	r3, [r7, #4]
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2b00      	cmp	r3, #0
 8010992:	d002      	beq.n	801099a <mem_cmp+0x40>
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	2b00      	cmp	r3, #0
 8010998:	d0eb      	beq.n	8010972 <mem_cmp+0x18>

	return r;
 801099a:	697b      	ldr	r3, [r7, #20]
}
 801099c:	4618      	mov	r0, r3
 801099e:	3724      	adds	r7, #36	; 0x24
 80109a0:	46bd      	mov	sp, r7
 80109a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109a6:	4770      	bx	lr

080109a8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80109a8:	b480      	push	{r7}
 80109aa:	b083      	sub	sp, #12
 80109ac:	af00      	add	r7, sp, #0
 80109ae:	6078      	str	r0, [r7, #4]
 80109b0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80109b2:	e002      	b.n	80109ba <chk_chr+0x12>
 80109b4:	687b      	ldr	r3, [r7, #4]
 80109b6:	3301      	adds	r3, #1
 80109b8:	607b      	str	r3, [r7, #4]
 80109ba:	687b      	ldr	r3, [r7, #4]
 80109bc:	781b      	ldrb	r3, [r3, #0]
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d005      	beq.n	80109ce <chk_chr+0x26>
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	781b      	ldrb	r3, [r3, #0]
 80109c6:	461a      	mov	r2, r3
 80109c8:	683b      	ldr	r3, [r7, #0]
 80109ca:	4293      	cmp	r3, r2
 80109cc:	d1f2      	bne.n	80109b4 <chk_chr+0xc>
	return *str;
 80109ce:	687b      	ldr	r3, [r7, #4]
 80109d0:	781b      	ldrb	r3, [r3, #0]
}
 80109d2:	4618      	mov	r0, r3
 80109d4:	370c      	adds	r7, #12
 80109d6:	46bd      	mov	sp, r7
 80109d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80109dc:	4770      	bx	lr
	...

080109e0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80109e0:	b480      	push	{r7}
 80109e2:	b085      	sub	sp, #20
 80109e4:	af00      	add	r7, sp, #0
 80109e6:	6078      	str	r0, [r7, #4]
 80109e8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80109ea:	2300      	movs	r3, #0
 80109ec:	60bb      	str	r3, [r7, #8]
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	60fb      	str	r3, [r7, #12]
 80109f2:	e029      	b.n	8010a48 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80109f4:	4a27      	ldr	r2, [pc, #156]	; (8010a94 <chk_lock+0xb4>)
 80109f6:	68fb      	ldr	r3, [r7, #12]
 80109f8:	011b      	lsls	r3, r3, #4
 80109fa:	4413      	add	r3, r2
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d01d      	beq.n	8010a3e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010a02:	4a24      	ldr	r2, [pc, #144]	; (8010a94 <chk_lock+0xb4>)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	011b      	lsls	r3, r3, #4
 8010a08:	4413      	add	r3, r2
 8010a0a:	681a      	ldr	r2, [r3, #0]
 8010a0c:	687b      	ldr	r3, [r7, #4]
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	429a      	cmp	r2, r3
 8010a12:	d116      	bne.n	8010a42 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8010a14:	4a1f      	ldr	r2, [pc, #124]	; (8010a94 <chk_lock+0xb4>)
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	011b      	lsls	r3, r3, #4
 8010a1a:	4413      	add	r3, r2
 8010a1c:	3304      	adds	r3, #4
 8010a1e:	681a      	ldr	r2, [r3, #0]
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8010a24:	429a      	cmp	r2, r3
 8010a26:	d10c      	bne.n	8010a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010a28:	4a1a      	ldr	r2, [pc, #104]	; (8010a94 <chk_lock+0xb4>)
 8010a2a:	68fb      	ldr	r3, [r7, #12]
 8010a2c:	011b      	lsls	r3, r3, #4
 8010a2e:	4413      	add	r3, r2
 8010a30:	3308      	adds	r3, #8
 8010a32:	681a      	ldr	r2, [r3, #0]
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8010a38:	429a      	cmp	r2, r3
 8010a3a:	d102      	bne.n	8010a42 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8010a3c:	e007      	b.n	8010a4e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8010a3e:	2301      	movs	r3, #1
 8010a40:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8010a42:	68fb      	ldr	r3, [r7, #12]
 8010a44:	3301      	adds	r3, #1
 8010a46:	60fb      	str	r3, [r7, #12]
 8010a48:	68fb      	ldr	r3, [r7, #12]
 8010a4a:	2b01      	cmp	r3, #1
 8010a4c:	d9d2      	bls.n	80109f4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8010a4e:	68fb      	ldr	r3, [r7, #12]
 8010a50:	2b02      	cmp	r3, #2
 8010a52:	d109      	bne.n	8010a68 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8010a54:	68bb      	ldr	r3, [r7, #8]
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d102      	bne.n	8010a60 <chk_lock+0x80>
 8010a5a:	683b      	ldr	r3, [r7, #0]
 8010a5c:	2b02      	cmp	r3, #2
 8010a5e:	d101      	bne.n	8010a64 <chk_lock+0x84>
 8010a60:	2300      	movs	r3, #0
 8010a62:	e010      	b.n	8010a86 <chk_lock+0xa6>
 8010a64:	2312      	movs	r3, #18
 8010a66:	e00e      	b.n	8010a86 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8010a68:	683b      	ldr	r3, [r7, #0]
 8010a6a:	2b00      	cmp	r3, #0
 8010a6c:	d108      	bne.n	8010a80 <chk_lock+0xa0>
 8010a6e:	4a09      	ldr	r2, [pc, #36]	; (8010a94 <chk_lock+0xb4>)
 8010a70:	68fb      	ldr	r3, [r7, #12]
 8010a72:	011b      	lsls	r3, r3, #4
 8010a74:	4413      	add	r3, r2
 8010a76:	330c      	adds	r3, #12
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010a7e:	d101      	bne.n	8010a84 <chk_lock+0xa4>
 8010a80:	2310      	movs	r3, #16
 8010a82:	e000      	b.n	8010a86 <chk_lock+0xa6>
 8010a84:	2300      	movs	r3, #0
}
 8010a86:	4618      	mov	r0, r3
 8010a88:	3714      	adds	r7, #20
 8010a8a:	46bd      	mov	sp, r7
 8010a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a90:	4770      	bx	lr
 8010a92:	bf00      	nop
 8010a94:	2404020c 	.word	0x2404020c

08010a98 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8010a98:	b480      	push	{r7}
 8010a9a:	b083      	sub	sp, #12
 8010a9c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010a9e:	2300      	movs	r3, #0
 8010aa0:	607b      	str	r3, [r7, #4]
 8010aa2:	e002      	b.n	8010aaa <enq_lock+0x12>
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	3301      	adds	r3, #1
 8010aa8:	607b      	str	r3, [r7, #4]
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2b01      	cmp	r3, #1
 8010aae:	d806      	bhi.n	8010abe <enq_lock+0x26>
 8010ab0:	4a09      	ldr	r2, [pc, #36]	; (8010ad8 <enq_lock+0x40>)
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	011b      	lsls	r3, r3, #4
 8010ab6:	4413      	add	r3, r2
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d1f2      	bne.n	8010aa4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	2b02      	cmp	r3, #2
 8010ac2:	bf14      	ite	ne
 8010ac4:	2301      	movne	r3, #1
 8010ac6:	2300      	moveq	r3, #0
 8010ac8:	b2db      	uxtb	r3, r3
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	370c      	adds	r7, #12
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ad4:	4770      	bx	lr
 8010ad6:	bf00      	nop
 8010ad8:	2404020c 	.word	0x2404020c

08010adc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8010adc:	b480      	push	{r7}
 8010ade:	b085      	sub	sp, #20
 8010ae0:	af00      	add	r7, sp, #0
 8010ae2:	6078      	str	r0, [r7, #4]
 8010ae4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010ae6:	2300      	movs	r3, #0
 8010ae8:	60fb      	str	r3, [r7, #12]
 8010aea:	e01f      	b.n	8010b2c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8010aec:	4a41      	ldr	r2, [pc, #260]	; (8010bf4 <inc_lock+0x118>)
 8010aee:	68fb      	ldr	r3, [r7, #12]
 8010af0:	011b      	lsls	r3, r3, #4
 8010af2:	4413      	add	r3, r2
 8010af4:	681a      	ldr	r2, [r3, #0]
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	681b      	ldr	r3, [r3, #0]
 8010afa:	429a      	cmp	r2, r3
 8010afc:	d113      	bne.n	8010b26 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8010afe:	4a3d      	ldr	r2, [pc, #244]	; (8010bf4 <inc_lock+0x118>)
 8010b00:	68fb      	ldr	r3, [r7, #12]
 8010b02:	011b      	lsls	r3, r3, #4
 8010b04:	4413      	add	r3, r2
 8010b06:	3304      	adds	r3, #4
 8010b08:	681a      	ldr	r2, [r3, #0]
 8010b0a:	687b      	ldr	r3, [r7, #4]
 8010b0c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d109      	bne.n	8010b26 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8010b12:	4a38      	ldr	r2, [pc, #224]	; (8010bf4 <inc_lock+0x118>)
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	011b      	lsls	r3, r3, #4
 8010b18:	4413      	add	r3, r2
 8010b1a:	3308      	adds	r3, #8
 8010b1c:	681a      	ldr	r2, [r3, #0]
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8010b22:	429a      	cmp	r2, r3
 8010b24:	d006      	beq.n	8010b34 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	3301      	adds	r3, #1
 8010b2a:	60fb      	str	r3, [r7, #12]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2b01      	cmp	r3, #1
 8010b30:	d9dc      	bls.n	8010aec <inc_lock+0x10>
 8010b32:	e000      	b.n	8010b36 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8010b34:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	2b02      	cmp	r3, #2
 8010b3a:	d132      	bne.n	8010ba2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8010b3c:	2300      	movs	r3, #0
 8010b3e:	60fb      	str	r3, [r7, #12]
 8010b40:	e002      	b.n	8010b48 <inc_lock+0x6c>
 8010b42:	68fb      	ldr	r3, [r7, #12]
 8010b44:	3301      	adds	r3, #1
 8010b46:	60fb      	str	r3, [r7, #12]
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	2b01      	cmp	r3, #1
 8010b4c:	d806      	bhi.n	8010b5c <inc_lock+0x80>
 8010b4e:	4a29      	ldr	r2, [pc, #164]	; (8010bf4 <inc_lock+0x118>)
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	011b      	lsls	r3, r3, #4
 8010b54:	4413      	add	r3, r2
 8010b56:	681b      	ldr	r3, [r3, #0]
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d1f2      	bne.n	8010b42 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	2b02      	cmp	r3, #2
 8010b60:	d101      	bne.n	8010b66 <inc_lock+0x8a>
 8010b62:	2300      	movs	r3, #0
 8010b64:	e040      	b.n	8010be8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	681a      	ldr	r2, [r3, #0]
 8010b6a:	4922      	ldr	r1, [pc, #136]	; (8010bf4 <inc_lock+0x118>)
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	011b      	lsls	r3, r3, #4
 8010b70:	440b      	add	r3, r1
 8010b72:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	689a      	ldr	r2, [r3, #8]
 8010b78:	491e      	ldr	r1, [pc, #120]	; (8010bf4 <inc_lock+0x118>)
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	011b      	lsls	r3, r3, #4
 8010b7e:	440b      	add	r3, r1
 8010b80:	3304      	adds	r3, #4
 8010b82:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	695a      	ldr	r2, [r3, #20]
 8010b88:	491a      	ldr	r1, [pc, #104]	; (8010bf4 <inc_lock+0x118>)
 8010b8a:	68fb      	ldr	r3, [r7, #12]
 8010b8c:	011b      	lsls	r3, r3, #4
 8010b8e:	440b      	add	r3, r1
 8010b90:	3308      	adds	r3, #8
 8010b92:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8010b94:	4a17      	ldr	r2, [pc, #92]	; (8010bf4 <inc_lock+0x118>)
 8010b96:	68fb      	ldr	r3, [r7, #12]
 8010b98:	011b      	lsls	r3, r3, #4
 8010b9a:	4413      	add	r3, r2
 8010b9c:	330c      	adds	r3, #12
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8010ba2:	683b      	ldr	r3, [r7, #0]
 8010ba4:	2b00      	cmp	r3, #0
 8010ba6:	d009      	beq.n	8010bbc <inc_lock+0xe0>
 8010ba8:	4a12      	ldr	r2, [pc, #72]	; (8010bf4 <inc_lock+0x118>)
 8010baa:	68fb      	ldr	r3, [r7, #12]
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	4413      	add	r3, r2
 8010bb0:	330c      	adds	r3, #12
 8010bb2:	881b      	ldrh	r3, [r3, #0]
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d001      	beq.n	8010bbc <inc_lock+0xe0>
 8010bb8:	2300      	movs	r3, #0
 8010bba:	e015      	b.n	8010be8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8010bbc:	683b      	ldr	r3, [r7, #0]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d108      	bne.n	8010bd4 <inc_lock+0xf8>
 8010bc2:	4a0c      	ldr	r2, [pc, #48]	; (8010bf4 <inc_lock+0x118>)
 8010bc4:	68fb      	ldr	r3, [r7, #12]
 8010bc6:	011b      	lsls	r3, r3, #4
 8010bc8:	4413      	add	r3, r2
 8010bca:	330c      	adds	r3, #12
 8010bcc:	881b      	ldrh	r3, [r3, #0]
 8010bce:	3301      	adds	r3, #1
 8010bd0:	b29a      	uxth	r2, r3
 8010bd2:	e001      	b.n	8010bd8 <inc_lock+0xfc>
 8010bd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010bd8:	4906      	ldr	r1, [pc, #24]	; (8010bf4 <inc_lock+0x118>)
 8010bda:	68fb      	ldr	r3, [r7, #12]
 8010bdc:	011b      	lsls	r3, r3, #4
 8010bde:	440b      	add	r3, r1
 8010be0:	330c      	adds	r3, #12
 8010be2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8010be4:	68fb      	ldr	r3, [r7, #12]
 8010be6:	3301      	adds	r3, #1
}
 8010be8:	4618      	mov	r0, r3
 8010bea:	3714      	adds	r7, #20
 8010bec:	46bd      	mov	sp, r7
 8010bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bf2:	4770      	bx	lr
 8010bf4:	2404020c 	.word	0x2404020c

08010bf8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8010bf8:	b480      	push	{r7}
 8010bfa:	b085      	sub	sp, #20
 8010bfc:	af00      	add	r7, sp, #0
 8010bfe:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8010c00:	687b      	ldr	r3, [r7, #4]
 8010c02:	3b01      	subs	r3, #1
 8010c04:	607b      	str	r3, [r7, #4]
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	2b01      	cmp	r3, #1
 8010c0a:	d825      	bhi.n	8010c58 <dec_lock+0x60>
		n = Files[i].ctr;
 8010c0c:	4a17      	ldr	r2, [pc, #92]	; (8010c6c <dec_lock+0x74>)
 8010c0e:	687b      	ldr	r3, [r7, #4]
 8010c10:	011b      	lsls	r3, r3, #4
 8010c12:	4413      	add	r3, r2
 8010c14:	330c      	adds	r3, #12
 8010c16:	881b      	ldrh	r3, [r3, #0]
 8010c18:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8010c1a:	89fb      	ldrh	r3, [r7, #14]
 8010c1c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c20:	d101      	bne.n	8010c26 <dec_lock+0x2e>
 8010c22:	2300      	movs	r3, #0
 8010c24:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8010c26:	89fb      	ldrh	r3, [r7, #14]
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d002      	beq.n	8010c32 <dec_lock+0x3a>
 8010c2c:	89fb      	ldrh	r3, [r7, #14]
 8010c2e:	3b01      	subs	r3, #1
 8010c30:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8010c32:	4a0e      	ldr	r2, [pc, #56]	; (8010c6c <dec_lock+0x74>)
 8010c34:	687b      	ldr	r3, [r7, #4]
 8010c36:	011b      	lsls	r3, r3, #4
 8010c38:	4413      	add	r3, r2
 8010c3a:	330c      	adds	r3, #12
 8010c3c:	89fa      	ldrh	r2, [r7, #14]
 8010c3e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8010c40:	89fb      	ldrh	r3, [r7, #14]
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d105      	bne.n	8010c52 <dec_lock+0x5a>
 8010c46:	4a09      	ldr	r2, [pc, #36]	; (8010c6c <dec_lock+0x74>)
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	011b      	lsls	r3, r3, #4
 8010c4c:	4413      	add	r3, r2
 8010c4e:	2200      	movs	r2, #0
 8010c50:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8010c52:	2300      	movs	r3, #0
 8010c54:	737b      	strb	r3, [r7, #13]
 8010c56:	e001      	b.n	8010c5c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8010c58:	2302      	movs	r3, #2
 8010c5a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8010c5c:	7b7b      	ldrb	r3, [r7, #13]
}
 8010c5e:	4618      	mov	r0, r3
 8010c60:	3714      	adds	r7, #20
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	2404020c 	.word	0x2404020c

08010c70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010c70:	b480      	push	{r7}
 8010c72:	b085      	sub	sp, #20
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010c78:	2300      	movs	r3, #0
 8010c7a:	60fb      	str	r3, [r7, #12]
 8010c7c:	e010      	b.n	8010ca0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010c7e:	4a0d      	ldr	r2, [pc, #52]	; (8010cb4 <clear_lock+0x44>)
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	011b      	lsls	r3, r3, #4
 8010c84:	4413      	add	r3, r2
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	687a      	ldr	r2, [r7, #4]
 8010c8a:	429a      	cmp	r2, r3
 8010c8c:	d105      	bne.n	8010c9a <clear_lock+0x2a>
 8010c8e:	4a09      	ldr	r2, [pc, #36]	; (8010cb4 <clear_lock+0x44>)
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	011b      	lsls	r3, r3, #4
 8010c94:	4413      	add	r3, r2
 8010c96:	2200      	movs	r2, #0
 8010c98:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010c9a:	68fb      	ldr	r3, [r7, #12]
 8010c9c:	3301      	adds	r3, #1
 8010c9e:	60fb      	str	r3, [r7, #12]
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2b01      	cmp	r3, #1
 8010ca4:	d9eb      	bls.n	8010c7e <clear_lock+0xe>
	}
}
 8010ca6:	bf00      	nop
 8010ca8:	3714      	adds	r7, #20
 8010caa:	46bd      	mov	sp, r7
 8010cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb0:	4770      	bx	lr
 8010cb2:	bf00      	nop
 8010cb4:	2404020c 	.word	0x2404020c

08010cb8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010cb8:	b580      	push	{r7, lr}
 8010cba:	b086      	sub	sp, #24
 8010cbc:	af00      	add	r7, sp, #0
 8010cbe:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010cc0:	2300      	movs	r3, #0
 8010cc2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	78db      	ldrb	r3, [r3, #3]
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	d034      	beq.n	8010d36 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010ccc:	687b      	ldr	r3, [r7, #4]
 8010cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010cd0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010cd2:	687b      	ldr	r3, [r7, #4]
 8010cd4:	7858      	ldrb	r0, [r3, #1]
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010cdc:	2301      	movs	r3, #1
 8010cde:	697a      	ldr	r2, [r7, #20]
 8010ce0:	f7ff fd40 	bl	8010764 <disk_write>
 8010ce4:	4603      	mov	r3, r0
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d002      	beq.n	8010cf0 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010cea:	2301      	movs	r3, #1
 8010cec:	73fb      	strb	r3, [r7, #15]
 8010cee:	e022      	b.n	8010d36 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010cf0:	687b      	ldr	r3, [r7, #4]
 8010cf2:	2200      	movs	r2, #0
 8010cf4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	6a1b      	ldr	r3, [r3, #32]
 8010cfa:	697a      	ldr	r2, [r7, #20]
 8010cfc:	1ad2      	subs	r2, r2, r3
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	699b      	ldr	r3, [r3, #24]
 8010d02:	429a      	cmp	r2, r3
 8010d04:	d217      	bcs.n	8010d36 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	789b      	ldrb	r3, [r3, #2]
 8010d0a:	613b      	str	r3, [r7, #16]
 8010d0c:	e010      	b.n	8010d30 <sync_window+0x78>
					wsect += fs->fsize;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	699b      	ldr	r3, [r3, #24]
 8010d12:	697a      	ldr	r2, [r7, #20]
 8010d14:	4413      	add	r3, r2
 8010d16:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	7858      	ldrb	r0, [r3, #1]
 8010d1c:	687b      	ldr	r3, [r7, #4]
 8010d1e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d22:	2301      	movs	r3, #1
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	f7ff fd1d 	bl	8010764 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010d2a:	693b      	ldr	r3, [r7, #16]
 8010d2c:	3b01      	subs	r3, #1
 8010d2e:	613b      	str	r3, [r7, #16]
 8010d30:	693b      	ldr	r3, [r7, #16]
 8010d32:	2b01      	cmp	r3, #1
 8010d34:	d8eb      	bhi.n	8010d0e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d38:	4618      	mov	r0, r3
 8010d3a:	3718      	adds	r7, #24
 8010d3c:	46bd      	mov	sp, r7
 8010d3e:	bd80      	pop	{r7, pc}

08010d40 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
 8010d46:	6078      	str	r0, [r7, #4]
 8010d48:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d52:	683a      	ldr	r2, [r7, #0]
 8010d54:	429a      	cmp	r2, r3
 8010d56:	d01b      	beq.n	8010d90 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7ff ffad 	bl	8010cb8 <sync_window>
 8010d5e:	4603      	mov	r3, r0
 8010d60:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010d62:	7bfb      	ldrb	r3, [r7, #15]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	d113      	bne.n	8010d90 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	7858      	ldrb	r0, [r3, #1]
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d72:	2301      	movs	r3, #1
 8010d74:	683a      	ldr	r2, [r7, #0]
 8010d76:	f7ff fcd5 	bl	8010724 <disk_read>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d004      	beq.n	8010d8a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010d80:	f04f 33ff 	mov.w	r3, #4294967295
 8010d84:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010d86:	2301      	movs	r3, #1
 8010d88:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010d8a:	687b      	ldr	r3, [r7, #4]
 8010d8c:	683a      	ldr	r2, [r7, #0]
 8010d8e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8010d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d92:	4618      	mov	r0, r3
 8010d94:	3710      	adds	r7, #16
 8010d96:	46bd      	mov	sp, r7
 8010d98:	bd80      	pop	{r7, pc}
	...

08010d9c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8010d9c:	b580      	push	{r7, lr}
 8010d9e:	b084      	sub	sp, #16
 8010da0:	af00      	add	r7, sp, #0
 8010da2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8010da4:	6878      	ldr	r0, [r7, #4]
 8010da6:	f7ff ff87 	bl	8010cb8 <sync_window>
 8010daa:	4603      	mov	r3, r0
 8010dac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010dae:	7bfb      	ldrb	r3, [r7, #15]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d158      	bne.n	8010e66 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	2b03      	cmp	r3, #3
 8010dba:	d148      	bne.n	8010e4e <sync_fs+0xb2>
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	791b      	ldrb	r3, [r3, #4]
 8010dc0:	2b01      	cmp	r3, #1
 8010dc2:	d144      	bne.n	8010e4e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	3330      	adds	r3, #48	; 0x30
 8010dc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010dcc:	2100      	movs	r1, #0
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7ff fda9 	bl	8010926 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	3330      	adds	r3, #48	; 0x30
 8010dd8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010ddc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8010de0:	4618      	mov	r0, r3
 8010de2:	f7ff fd38 	bl	8010856 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	3330      	adds	r3, #48	; 0x30
 8010dea:	4921      	ldr	r1, [pc, #132]	; (8010e70 <sync_fs+0xd4>)
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7ff fd4d 	bl	801088c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	3330      	adds	r3, #48	; 0x30
 8010df6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010dfa:	491e      	ldr	r1, [pc, #120]	; (8010e74 <sync_fs+0xd8>)
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7ff fd45 	bl	801088c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	3330      	adds	r3, #48	; 0x30
 8010e06:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	691b      	ldr	r3, [r3, #16]
 8010e0e:	4619      	mov	r1, r3
 8010e10:	4610      	mov	r0, r2
 8010e12:	f7ff fd3b 	bl	801088c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	3330      	adds	r3, #48	; 0x30
 8010e1a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	68db      	ldr	r3, [r3, #12]
 8010e22:	4619      	mov	r1, r3
 8010e24:	4610      	mov	r0, r2
 8010e26:	f7ff fd31 	bl	801088c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	69db      	ldr	r3, [r3, #28]
 8010e2e:	1c5a      	adds	r2, r3, #1
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	7858      	ldrb	r0, [r3, #1]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e42:	2301      	movs	r3, #1
 8010e44:	f7ff fc8e 	bl	8010764 <disk_write>
			fs->fsi_flag = 0;
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8010e4e:	687b      	ldr	r3, [r7, #4]
 8010e50:	785b      	ldrb	r3, [r3, #1]
 8010e52:	2200      	movs	r2, #0
 8010e54:	2100      	movs	r1, #0
 8010e56:	4618      	mov	r0, r3
 8010e58:	f7ff fca4 	bl	80107a4 <disk_ioctl>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	2b00      	cmp	r3, #0
 8010e60:	d001      	beq.n	8010e66 <sync_fs+0xca>
 8010e62:	2301      	movs	r3, #1
 8010e64:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8010e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e68:	4618      	mov	r0, r3
 8010e6a:	3710      	adds	r7, #16
 8010e6c:	46bd      	mov	sp, r7
 8010e6e:	bd80      	pop	{r7, pc}
 8010e70:	41615252 	.word	0x41615252
 8010e74:	61417272 	.word	0x61417272

08010e78 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b083      	sub	sp, #12
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
 8010e80:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8010e82:	683b      	ldr	r3, [r7, #0]
 8010e84:	3b02      	subs	r3, #2
 8010e86:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	695b      	ldr	r3, [r3, #20]
 8010e8c:	3b02      	subs	r3, #2
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	429a      	cmp	r2, r3
 8010e92:	d301      	bcc.n	8010e98 <clust2sect+0x20>
 8010e94:	2300      	movs	r3, #0
 8010e96:	e008      	b.n	8010eaa <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8010e98:	687b      	ldr	r3, [r7, #4]
 8010e9a:	895b      	ldrh	r3, [r3, #10]
 8010e9c:	461a      	mov	r2, r3
 8010e9e:	683b      	ldr	r3, [r7, #0]
 8010ea0:	fb03 f202 	mul.w	r2, r3, r2
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ea8:	4413      	add	r3, r2
}
 8010eaa:	4618      	mov	r0, r3
 8010eac:	370c      	adds	r7, #12
 8010eae:	46bd      	mov	sp, r7
 8010eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb4:	4770      	bx	lr

08010eb6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8010eb6:	b580      	push	{r7, lr}
 8010eb8:	b086      	sub	sp, #24
 8010eba:	af00      	add	r7, sp, #0
 8010ebc:	6078      	str	r0, [r7, #4]
 8010ebe:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8010ec0:	687b      	ldr	r3, [r7, #4]
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8010ec6:	683b      	ldr	r3, [r7, #0]
 8010ec8:	2b01      	cmp	r3, #1
 8010eca:	d904      	bls.n	8010ed6 <get_fat+0x20>
 8010ecc:	693b      	ldr	r3, [r7, #16]
 8010ece:	695b      	ldr	r3, [r3, #20]
 8010ed0:	683a      	ldr	r2, [r7, #0]
 8010ed2:	429a      	cmp	r2, r3
 8010ed4:	d302      	bcc.n	8010edc <get_fat+0x26>
		val = 1;	/* Internal error */
 8010ed6:	2301      	movs	r3, #1
 8010ed8:	617b      	str	r3, [r7, #20]
 8010eda:	e08c      	b.n	8010ff6 <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8010edc:	f04f 33ff 	mov.w	r3, #4294967295
 8010ee0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	781b      	ldrb	r3, [r3, #0]
 8010ee6:	2b02      	cmp	r3, #2
 8010ee8:	d045      	beq.n	8010f76 <get_fat+0xc0>
 8010eea:	2b03      	cmp	r3, #3
 8010eec:	d05d      	beq.n	8010faa <get_fat+0xf4>
 8010eee:	2b01      	cmp	r3, #1
 8010ef0:	d177      	bne.n	8010fe2 <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8010ef2:	683b      	ldr	r3, [r7, #0]
 8010ef4:	60fb      	str	r3, [r7, #12]
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	085b      	lsrs	r3, r3, #1
 8010efa:	68fa      	ldr	r2, [r7, #12]
 8010efc:	4413      	add	r3, r2
 8010efe:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f00:	693b      	ldr	r3, [r7, #16]
 8010f02:	6a1a      	ldr	r2, [r3, #32]
 8010f04:	68fb      	ldr	r3, [r7, #12]
 8010f06:	0a5b      	lsrs	r3, r3, #9
 8010f08:	4413      	add	r3, r2
 8010f0a:	4619      	mov	r1, r3
 8010f0c:	6938      	ldr	r0, [r7, #16]
 8010f0e:	f7ff ff17 	bl	8010d40 <move_window>
 8010f12:	4603      	mov	r3, r0
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d167      	bne.n	8010fe8 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	1c5a      	adds	r2, r3, #1
 8010f1c:	60fa      	str	r2, [r7, #12]
 8010f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f22:	693a      	ldr	r2, [r7, #16]
 8010f24:	4413      	add	r3, r2
 8010f26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f2a:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010f2c:	693b      	ldr	r3, [r7, #16]
 8010f2e:	6a1a      	ldr	r2, [r3, #32]
 8010f30:	68fb      	ldr	r3, [r7, #12]
 8010f32:	0a5b      	lsrs	r3, r3, #9
 8010f34:	4413      	add	r3, r2
 8010f36:	4619      	mov	r1, r3
 8010f38:	6938      	ldr	r0, [r7, #16]
 8010f3a:	f7ff ff01 	bl	8010d40 <move_window>
 8010f3e:	4603      	mov	r3, r0
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d153      	bne.n	8010fec <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8010f44:	68fb      	ldr	r3, [r7, #12]
 8010f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010f4a:	693a      	ldr	r2, [r7, #16]
 8010f4c:	4413      	add	r3, r2
 8010f4e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010f52:	021b      	lsls	r3, r3, #8
 8010f54:	461a      	mov	r2, r3
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	4313      	orrs	r3, r2
 8010f5a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8010f5c:	683b      	ldr	r3, [r7, #0]
 8010f5e:	f003 0301 	and.w	r3, r3, #1
 8010f62:	2b00      	cmp	r3, #0
 8010f64:	d002      	beq.n	8010f6c <get_fat+0xb6>
 8010f66:	68bb      	ldr	r3, [r7, #8]
 8010f68:	091b      	lsrs	r3, r3, #4
 8010f6a:	e002      	b.n	8010f72 <get_fat+0xbc>
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f72:	617b      	str	r3, [r7, #20]
			break;
 8010f74:	e03f      	b.n	8010ff6 <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010f76:	693b      	ldr	r3, [r7, #16]
 8010f78:	6a1a      	ldr	r2, [r3, #32]
 8010f7a:	683b      	ldr	r3, [r7, #0]
 8010f7c:	0a1b      	lsrs	r3, r3, #8
 8010f7e:	4413      	add	r3, r2
 8010f80:	4619      	mov	r1, r3
 8010f82:	6938      	ldr	r0, [r7, #16]
 8010f84:	f7ff fedc 	bl	8010d40 <move_window>
 8010f88:	4603      	mov	r3, r0
 8010f8a:	2b00      	cmp	r3, #0
 8010f8c:	d130      	bne.n	8010ff0 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8010f8e:	693b      	ldr	r3, [r7, #16]
 8010f90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010f94:	683b      	ldr	r3, [r7, #0]
 8010f96:	005b      	lsls	r3, r3, #1
 8010f98:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8010f9c:	4413      	add	r3, r2
 8010f9e:	4618      	mov	r0, r3
 8010fa0:	f7ff fc1e 	bl	80107e0 <ld_word>
 8010fa4:	4603      	mov	r3, r0
 8010fa6:	617b      	str	r3, [r7, #20]
			break;
 8010fa8:	e025      	b.n	8010ff6 <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010faa:	693b      	ldr	r3, [r7, #16]
 8010fac:	6a1a      	ldr	r2, [r3, #32]
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	09db      	lsrs	r3, r3, #7
 8010fb2:	4413      	add	r3, r2
 8010fb4:	4619      	mov	r1, r3
 8010fb6:	6938      	ldr	r0, [r7, #16]
 8010fb8:	f7ff fec2 	bl	8010d40 <move_window>
 8010fbc:	4603      	mov	r3, r0
 8010fbe:	2b00      	cmp	r3, #0
 8010fc0:	d118      	bne.n	8010ff4 <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8010fc2:	693b      	ldr	r3, [r7, #16]
 8010fc4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	009b      	lsls	r3, r3, #2
 8010fcc:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8010fd0:	4413      	add	r3, r2
 8010fd2:	4618      	mov	r0, r3
 8010fd4:	f7ff fc1c 	bl	8010810 <ld_dword>
 8010fd8:	4603      	mov	r3, r0
 8010fda:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8010fde:	617b      	str	r3, [r7, #20]
			break;
 8010fe0:	e009      	b.n	8010ff6 <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	617b      	str	r3, [r7, #20]
 8010fe6:	e006      	b.n	8010ff6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fe8:	bf00      	nop
 8010fea:	e004      	b.n	8010ff6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8010fec:	bf00      	nop
 8010fee:	e002      	b.n	8010ff6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8010ff0:	bf00      	nop
 8010ff2:	e000      	b.n	8010ff6 <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8010ff4:	bf00      	nop
		}
	}

	return val;
 8010ff6:	697b      	ldr	r3, [r7, #20]
}
 8010ff8:	4618      	mov	r0, r3
 8010ffa:	3718      	adds	r7, #24
 8010ffc:	46bd      	mov	sp, r7
 8010ffe:	bd80      	pop	{r7, pc}

08011000 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8011000:	b590      	push	{r4, r7, lr}
 8011002:	b089      	sub	sp, #36	; 0x24
 8011004:	af00      	add	r7, sp, #0
 8011006:	60f8      	str	r0, [r7, #12]
 8011008:	60b9      	str	r1, [r7, #8]
 801100a:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 801100c:	2302      	movs	r3, #2
 801100e:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8011010:	68bb      	ldr	r3, [r7, #8]
 8011012:	2b01      	cmp	r3, #1
 8011014:	f240 80d6 	bls.w	80111c4 <put_fat+0x1c4>
 8011018:	68fb      	ldr	r3, [r7, #12]
 801101a:	695b      	ldr	r3, [r3, #20]
 801101c:	68ba      	ldr	r2, [r7, #8]
 801101e:	429a      	cmp	r2, r3
 8011020:	f080 80d0 	bcs.w	80111c4 <put_fat+0x1c4>
		switch (fs->fs_type) {
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	781b      	ldrb	r3, [r3, #0]
 8011028:	2b02      	cmp	r3, #2
 801102a:	d073      	beq.n	8011114 <put_fat+0x114>
 801102c:	2b03      	cmp	r3, #3
 801102e:	f000 8091 	beq.w	8011154 <put_fat+0x154>
 8011032:	2b01      	cmp	r3, #1
 8011034:	f040 80c6 	bne.w	80111c4 <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	61bb      	str	r3, [r7, #24]
 801103c:	69bb      	ldr	r3, [r7, #24]
 801103e:	085b      	lsrs	r3, r3, #1
 8011040:	69ba      	ldr	r2, [r7, #24]
 8011042:	4413      	add	r3, r2
 8011044:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	6a1a      	ldr	r2, [r3, #32]
 801104a:	69bb      	ldr	r3, [r7, #24]
 801104c:	0a5b      	lsrs	r3, r3, #9
 801104e:	4413      	add	r3, r2
 8011050:	4619      	mov	r1, r3
 8011052:	68f8      	ldr	r0, [r7, #12]
 8011054:	f7ff fe74 	bl	8010d40 <move_window>
 8011058:	4603      	mov	r3, r0
 801105a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801105c:	7ffb      	ldrb	r3, [r7, #31]
 801105e:	2b00      	cmp	r3, #0
 8011060:	f040 80a9 	bne.w	80111b6 <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8011064:	68fb      	ldr	r3, [r7, #12]
 8011066:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801106a:	69bb      	ldr	r3, [r7, #24]
 801106c:	1c59      	adds	r1, r3, #1
 801106e:	61b9      	str	r1, [r7, #24]
 8011070:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011074:	4413      	add	r3, r2
 8011076:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8011078:	68bb      	ldr	r3, [r7, #8]
 801107a:	f003 0301 	and.w	r3, r3, #1
 801107e:	2b00      	cmp	r3, #0
 8011080:	d00d      	beq.n	801109e <put_fat+0x9e>
 8011082:	697b      	ldr	r3, [r7, #20]
 8011084:	781b      	ldrb	r3, [r3, #0]
 8011086:	b25b      	sxtb	r3, r3
 8011088:	f003 030f 	and.w	r3, r3, #15
 801108c:	b25a      	sxtb	r2, r3
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	b2db      	uxtb	r3, r3
 8011092:	011b      	lsls	r3, r3, #4
 8011094:	b25b      	sxtb	r3, r3
 8011096:	4313      	orrs	r3, r2
 8011098:	b25b      	sxtb	r3, r3
 801109a:	b2db      	uxtb	r3, r3
 801109c:	e001      	b.n	80110a2 <put_fat+0xa2>
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	b2db      	uxtb	r3, r3
 80110a2:	697a      	ldr	r2, [r7, #20]
 80110a4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	2201      	movs	r2, #1
 80110aa:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80110ac:	68fb      	ldr	r3, [r7, #12]
 80110ae:	6a1a      	ldr	r2, [r3, #32]
 80110b0:	69bb      	ldr	r3, [r7, #24]
 80110b2:	0a5b      	lsrs	r3, r3, #9
 80110b4:	4413      	add	r3, r2
 80110b6:	4619      	mov	r1, r3
 80110b8:	68f8      	ldr	r0, [r7, #12]
 80110ba:	f7ff fe41 	bl	8010d40 <move_window>
 80110be:	4603      	mov	r3, r0
 80110c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80110c2:	7ffb      	ldrb	r3, [r7, #31]
 80110c4:	2b00      	cmp	r3, #0
 80110c6:	d178      	bne.n	80111ba <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80110c8:	68fb      	ldr	r3, [r7, #12]
 80110ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80110ce:	69bb      	ldr	r3, [r7, #24]
 80110d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80110d4:	4413      	add	r3, r2
 80110d6:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80110d8:	68bb      	ldr	r3, [r7, #8]
 80110da:	f003 0301 	and.w	r3, r3, #1
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d003      	beq.n	80110ea <put_fat+0xea>
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	091b      	lsrs	r3, r3, #4
 80110e6:	b2db      	uxtb	r3, r3
 80110e8:	e00e      	b.n	8011108 <put_fat+0x108>
 80110ea:	697b      	ldr	r3, [r7, #20]
 80110ec:	781b      	ldrb	r3, [r3, #0]
 80110ee:	b25b      	sxtb	r3, r3
 80110f0:	f023 030f 	bic.w	r3, r3, #15
 80110f4:	b25a      	sxtb	r2, r3
 80110f6:	687b      	ldr	r3, [r7, #4]
 80110f8:	0a1b      	lsrs	r3, r3, #8
 80110fa:	b25b      	sxtb	r3, r3
 80110fc:	f003 030f 	and.w	r3, r3, #15
 8011100:	b25b      	sxtb	r3, r3
 8011102:	4313      	orrs	r3, r2
 8011104:	b25b      	sxtb	r3, r3
 8011106:	b2db      	uxtb	r3, r3
 8011108:	697a      	ldr	r2, [r7, #20]
 801110a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801110c:	68fb      	ldr	r3, [r7, #12]
 801110e:	2201      	movs	r2, #1
 8011110:	70da      	strb	r2, [r3, #3]
			break;
 8011112:	e057      	b.n	80111c4 <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	6a1a      	ldr	r2, [r3, #32]
 8011118:	68bb      	ldr	r3, [r7, #8]
 801111a:	0a1b      	lsrs	r3, r3, #8
 801111c:	4413      	add	r3, r2
 801111e:	4619      	mov	r1, r3
 8011120:	68f8      	ldr	r0, [r7, #12]
 8011122:	f7ff fe0d 	bl	8010d40 <move_window>
 8011126:	4603      	mov	r3, r0
 8011128:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801112a:	7ffb      	ldrb	r3, [r7, #31]
 801112c:	2b00      	cmp	r3, #0
 801112e:	d146      	bne.n	80111be <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8011130:	68fb      	ldr	r3, [r7, #12]
 8011132:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	005b      	lsls	r3, r3, #1
 801113a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 801113e:	4413      	add	r3, r2
 8011140:	687a      	ldr	r2, [r7, #4]
 8011142:	b292      	uxth	r2, r2
 8011144:	4611      	mov	r1, r2
 8011146:	4618      	mov	r0, r3
 8011148:	f7ff fb85 	bl	8010856 <st_word>
			fs->wflag = 1;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	2201      	movs	r2, #1
 8011150:	70da      	strb	r2, [r3, #3]
			break;
 8011152:	e037      	b.n	80111c4 <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	6a1a      	ldr	r2, [r3, #32]
 8011158:	68bb      	ldr	r3, [r7, #8]
 801115a:	09db      	lsrs	r3, r3, #7
 801115c:	4413      	add	r3, r2
 801115e:	4619      	mov	r1, r3
 8011160:	68f8      	ldr	r0, [r7, #12]
 8011162:	f7ff fded 	bl	8010d40 <move_window>
 8011166:	4603      	mov	r3, r0
 8011168:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801116a:	7ffb      	ldrb	r3, [r7, #31]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d128      	bne.n	80111c2 <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8011170:	687b      	ldr	r3, [r7, #4]
 8011172:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801117c:	68bb      	ldr	r3, [r7, #8]
 801117e:	009b      	lsls	r3, r3, #2
 8011180:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8011184:	4413      	add	r3, r2
 8011186:	4618      	mov	r0, r3
 8011188:	f7ff fb42 	bl	8010810 <ld_dword>
 801118c:	4603      	mov	r3, r0
 801118e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8011192:	4323      	orrs	r3, r4
 8011194:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8011196:	68fb      	ldr	r3, [r7, #12]
 8011198:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	009b      	lsls	r3, r3, #2
 80111a0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80111a4:	4413      	add	r3, r2
 80111a6:	6879      	ldr	r1, [r7, #4]
 80111a8:	4618      	mov	r0, r3
 80111aa:	f7ff fb6f 	bl	801088c <st_dword>
			fs->wflag = 1;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	2201      	movs	r2, #1
 80111b2:	70da      	strb	r2, [r3, #3]
			break;
 80111b4:	e006      	b.n	80111c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80111b6:	bf00      	nop
 80111b8:	e004      	b.n	80111c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80111ba:	bf00      	nop
 80111bc:	e002      	b.n	80111c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80111be:	bf00      	nop
 80111c0:	e000      	b.n	80111c4 <put_fat+0x1c4>
			if (res != FR_OK) break;
 80111c2:	bf00      	nop
		}
	}
	return res;
 80111c4:	7ffb      	ldrb	r3, [r7, #31]
}
 80111c6:	4618      	mov	r0, r3
 80111c8:	3724      	adds	r7, #36	; 0x24
 80111ca:	46bd      	mov	sp, r7
 80111cc:	bd90      	pop	{r4, r7, pc}

080111ce <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80111ce:	b580      	push	{r7, lr}
 80111d0:	b088      	sub	sp, #32
 80111d2:	af00      	add	r7, sp, #0
 80111d4:	60f8      	str	r0, [r7, #12]
 80111d6:	60b9      	str	r1, [r7, #8]
 80111d8:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80111de:	68fb      	ldr	r3, [r7, #12]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	2b01      	cmp	r3, #1
 80111e8:	d904      	bls.n	80111f4 <remove_chain+0x26>
 80111ea:	69bb      	ldr	r3, [r7, #24]
 80111ec:	695b      	ldr	r3, [r3, #20]
 80111ee:	68ba      	ldr	r2, [r7, #8]
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d301      	bcc.n	80111f8 <remove_chain+0x2a>
 80111f4:	2302      	movs	r3, #2
 80111f6:	e04b      	b.n	8011290 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	2b00      	cmp	r3, #0
 80111fc:	d00c      	beq.n	8011218 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80111fe:	f04f 32ff 	mov.w	r2, #4294967295
 8011202:	6879      	ldr	r1, [r7, #4]
 8011204:	69b8      	ldr	r0, [r7, #24]
 8011206:	f7ff fefb 	bl	8011000 <put_fat>
 801120a:	4603      	mov	r3, r0
 801120c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801120e:	7ffb      	ldrb	r3, [r7, #31]
 8011210:	2b00      	cmp	r3, #0
 8011212:	d001      	beq.n	8011218 <remove_chain+0x4a>
 8011214:	7ffb      	ldrb	r3, [r7, #31]
 8011216:	e03b      	b.n	8011290 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8011218:	68b9      	ldr	r1, [r7, #8]
 801121a:	68f8      	ldr	r0, [r7, #12]
 801121c:	f7ff fe4b 	bl	8010eb6 <get_fat>
 8011220:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8011222:	697b      	ldr	r3, [r7, #20]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d031      	beq.n	801128c <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8011228:	697b      	ldr	r3, [r7, #20]
 801122a:	2b01      	cmp	r3, #1
 801122c:	d101      	bne.n	8011232 <remove_chain+0x64>
 801122e:	2302      	movs	r3, #2
 8011230:	e02e      	b.n	8011290 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8011232:	697b      	ldr	r3, [r7, #20]
 8011234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011238:	d101      	bne.n	801123e <remove_chain+0x70>
 801123a:	2301      	movs	r3, #1
 801123c:	e028      	b.n	8011290 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801123e:	2200      	movs	r2, #0
 8011240:	68b9      	ldr	r1, [r7, #8]
 8011242:	69b8      	ldr	r0, [r7, #24]
 8011244:	f7ff fedc 	bl	8011000 <put_fat>
 8011248:	4603      	mov	r3, r0
 801124a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801124c:	7ffb      	ldrb	r3, [r7, #31]
 801124e:	2b00      	cmp	r3, #0
 8011250:	d001      	beq.n	8011256 <remove_chain+0x88>
 8011252:	7ffb      	ldrb	r3, [r7, #31]
 8011254:	e01c      	b.n	8011290 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8011256:	69bb      	ldr	r3, [r7, #24]
 8011258:	691a      	ldr	r2, [r3, #16]
 801125a:	69bb      	ldr	r3, [r7, #24]
 801125c:	695b      	ldr	r3, [r3, #20]
 801125e:	3b02      	subs	r3, #2
 8011260:	429a      	cmp	r2, r3
 8011262:	d20b      	bcs.n	801127c <remove_chain+0xae>
			fs->free_clst++;
 8011264:	69bb      	ldr	r3, [r7, #24]
 8011266:	691b      	ldr	r3, [r3, #16]
 8011268:	1c5a      	adds	r2, r3, #1
 801126a:	69bb      	ldr	r3, [r7, #24]
 801126c:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 801126e:	69bb      	ldr	r3, [r7, #24]
 8011270:	791b      	ldrb	r3, [r3, #4]
 8011272:	f043 0301 	orr.w	r3, r3, #1
 8011276:	b2da      	uxtb	r2, r3
 8011278:	69bb      	ldr	r3, [r7, #24]
 801127a:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8011280:	69bb      	ldr	r3, [r7, #24]
 8011282:	695b      	ldr	r3, [r3, #20]
 8011284:	68ba      	ldr	r2, [r7, #8]
 8011286:	429a      	cmp	r2, r3
 8011288:	d3c6      	bcc.n	8011218 <remove_chain+0x4a>
 801128a:	e000      	b.n	801128e <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 801128c:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 801128e:	2300      	movs	r3, #0
}
 8011290:	4618      	mov	r0, r3
 8011292:	3720      	adds	r7, #32
 8011294:	46bd      	mov	sp, r7
 8011296:	bd80      	pop	{r7, pc}

08011298 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8011298:	b580      	push	{r7, lr}
 801129a:	b088      	sub	sp, #32
 801129c:	af00      	add	r7, sp, #0
 801129e:	6078      	str	r0, [r7, #4]
 80112a0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	681b      	ldr	r3, [r3, #0]
 80112a6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80112a8:	683b      	ldr	r3, [r7, #0]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d10d      	bne.n	80112ca <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80112ae:	693b      	ldr	r3, [r7, #16]
 80112b0:	68db      	ldr	r3, [r3, #12]
 80112b2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80112b4:	69bb      	ldr	r3, [r7, #24]
 80112b6:	2b00      	cmp	r3, #0
 80112b8:	d004      	beq.n	80112c4 <create_chain+0x2c>
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	695b      	ldr	r3, [r3, #20]
 80112be:	69ba      	ldr	r2, [r7, #24]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d31b      	bcc.n	80112fc <create_chain+0x64>
 80112c4:	2301      	movs	r3, #1
 80112c6:	61bb      	str	r3, [r7, #24]
 80112c8:	e018      	b.n	80112fc <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80112ca:	6839      	ldr	r1, [r7, #0]
 80112cc:	6878      	ldr	r0, [r7, #4]
 80112ce:	f7ff fdf2 	bl	8010eb6 <get_fat>
 80112d2:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	2b01      	cmp	r3, #1
 80112d8:	d801      	bhi.n	80112de <create_chain+0x46>
 80112da:	2301      	movs	r3, #1
 80112dc:	e070      	b.n	80113c0 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80112de:	68fb      	ldr	r3, [r7, #12]
 80112e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112e4:	d101      	bne.n	80112ea <create_chain+0x52>
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	e06a      	b.n	80113c0 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80112ea:	693b      	ldr	r3, [r7, #16]
 80112ec:	695b      	ldr	r3, [r3, #20]
 80112ee:	68fa      	ldr	r2, [r7, #12]
 80112f0:	429a      	cmp	r2, r3
 80112f2:	d201      	bcs.n	80112f8 <create_chain+0x60>
 80112f4:	68fb      	ldr	r3, [r7, #12]
 80112f6:	e063      	b.n	80113c0 <create_chain+0x128>
		scl = clst;
 80112f8:	683b      	ldr	r3, [r7, #0]
 80112fa:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80112fc:	69bb      	ldr	r3, [r7, #24]
 80112fe:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8011300:	69fb      	ldr	r3, [r7, #28]
 8011302:	3301      	adds	r3, #1
 8011304:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8011306:	693b      	ldr	r3, [r7, #16]
 8011308:	695b      	ldr	r3, [r3, #20]
 801130a:	69fa      	ldr	r2, [r7, #28]
 801130c:	429a      	cmp	r2, r3
 801130e:	d307      	bcc.n	8011320 <create_chain+0x88>
				ncl = 2;
 8011310:	2302      	movs	r3, #2
 8011312:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8011314:	69fa      	ldr	r2, [r7, #28]
 8011316:	69bb      	ldr	r3, [r7, #24]
 8011318:	429a      	cmp	r2, r3
 801131a:	d901      	bls.n	8011320 <create_chain+0x88>
 801131c:	2300      	movs	r3, #0
 801131e:	e04f      	b.n	80113c0 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8011320:	69f9      	ldr	r1, [r7, #28]
 8011322:	6878      	ldr	r0, [r7, #4]
 8011324:	f7ff fdc7 	bl	8010eb6 <get_fat>
 8011328:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	2b00      	cmp	r3, #0
 801132e:	d00e      	beq.n	801134e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8011330:	68fb      	ldr	r3, [r7, #12]
 8011332:	2b01      	cmp	r3, #1
 8011334:	d003      	beq.n	801133e <create_chain+0xa6>
 8011336:	68fb      	ldr	r3, [r7, #12]
 8011338:	f1b3 3fff 	cmp.w	r3, #4294967295
 801133c:	d101      	bne.n	8011342 <create_chain+0xaa>
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	e03e      	b.n	80113c0 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8011342:	69fa      	ldr	r2, [r7, #28]
 8011344:	69bb      	ldr	r3, [r7, #24]
 8011346:	429a      	cmp	r2, r3
 8011348:	d1da      	bne.n	8011300 <create_chain+0x68>
 801134a:	2300      	movs	r3, #0
 801134c:	e038      	b.n	80113c0 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 801134e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8011350:	f04f 32ff 	mov.w	r2, #4294967295
 8011354:	69f9      	ldr	r1, [r7, #28]
 8011356:	6938      	ldr	r0, [r7, #16]
 8011358:	f7ff fe52 	bl	8011000 <put_fat>
 801135c:	4603      	mov	r3, r0
 801135e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8011360:	7dfb      	ldrb	r3, [r7, #23]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d109      	bne.n	801137a <create_chain+0xe2>
 8011366:	683b      	ldr	r3, [r7, #0]
 8011368:	2b00      	cmp	r3, #0
 801136a:	d006      	beq.n	801137a <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 801136c:	69fa      	ldr	r2, [r7, #28]
 801136e:	6839      	ldr	r1, [r7, #0]
 8011370:	6938      	ldr	r0, [r7, #16]
 8011372:	f7ff fe45 	bl	8011000 <put_fat>
 8011376:	4603      	mov	r3, r0
 8011378:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 801137a:	7dfb      	ldrb	r3, [r7, #23]
 801137c:	2b00      	cmp	r3, #0
 801137e:	d116      	bne.n	80113ae <create_chain+0x116>
		fs->last_clst = ncl;
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	69fa      	ldr	r2, [r7, #28]
 8011384:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	691a      	ldr	r2, [r3, #16]
 801138a:	693b      	ldr	r3, [r7, #16]
 801138c:	695b      	ldr	r3, [r3, #20]
 801138e:	3b02      	subs	r3, #2
 8011390:	429a      	cmp	r2, r3
 8011392:	d804      	bhi.n	801139e <create_chain+0x106>
 8011394:	693b      	ldr	r3, [r7, #16]
 8011396:	691b      	ldr	r3, [r3, #16]
 8011398:	1e5a      	subs	r2, r3, #1
 801139a:	693b      	ldr	r3, [r7, #16]
 801139c:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 801139e:	693b      	ldr	r3, [r7, #16]
 80113a0:	791b      	ldrb	r3, [r3, #4]
 80113a2:	f043 0301 	orr.w	r3, r3, #1
 80113a6:	b2da      	uxtb	r2, r3
 80113a8:	693b      	ldr	r3, [r7, #16]
 80113aa:	711a      	strb	r2, [r3, #4]
 80113ac:	e007      	b.n	80113be <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80113ae:	7dfb      	ldrb	r3, [r7, #23]
 80113b0:	2b01      	cmp	r3, #1
 80113b2:	d102      	bne.n	80113ba <create_chain+0x122>
 80113b4:	f04f 33ff 	mov.w	r3, #4294967295
 80113b8:	e000      	b.n	80113bc <create_chain+0x124>
 80113ba:	2301      	movs	r3, #1
 80113bc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80113be:	69fb      	ldr	r3, [r7, #28]
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3720      	adds	r7, #32
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}

080113c8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b087      	sub	sp, #28
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	6078      	str	r0, [r7, #4]
 80113d0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80113d2:	687b      	ldr	r3, [r7, #4]
 80113d4:	681b      	ldr	r3, [r3, #0]
 80113d6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80113d8:	687b      	ldr	r3, [r7, #4]
 80113da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80113dc:	3304      	adds	r3, #4
 80113de:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80113e0:	683b      	ldr	r3, [r7, #0]
 80113e2:	0a5b      	lsrs	r3, r3, #9
 80113e4:	68fa      	ldr	r2, [r7, #12]
 80113e6:	8952      	ldrh	r2, [r2, #10]
 80113e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80113ec:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80113ee:	693b      	ldr	r3, [r7, #16]
 80113f0:	1d1a      	adds	r2, r3, #4
 80113f2:	613a      	str	r2, [r7, #16]
 80113f4:	681b      	ldr	r3, [r3, #0]
 80113f6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80113f8:	68bb      	ldr	r3, [r7, #8]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d101      	bne.n	8011402 <clmt_clust+0x3a>
 80113fe:	2300      	movs	r3, #0
 8011400:	e010      	b.n	8011424 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 8011402:	697a      	ldr	r2, [r7, #20]
 8011404:	68bb      	ldr	r3, [r7, #8]
 8011406:	429a      	cmp	r2, r3
 8011408:	d307      	bcc.n	801141a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 801140a:	697a      	ldr	r2, [r7, #20]
 801140c:	68bb      	ldr	r3, [r7, #8]
 801140e:	1ad3      	subs	r3, r2, r3
 8011410:	617b      	str	r3, [r7, #20]
 8011412:	693b      	ldr	r3, [r7, #16]
 8011414:	3304      	adds	r3, #4
 8011416:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8011418:	e7e9      	b.n	80113ee <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 801141a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 801141c:	693b      	ldr	r3, [r7, #16]
 801141e:	681a      	ldr	r2, [r3, #0]
 8011420:	697b      	ldr	r3, [r7, #20]
 8011422:	4413      	add	r3, r2
}
 8011424:	4618      	mov	r0, r3
 8011426:	371c      	adds	r7, #28
 8011428:	46bd      	mov	sp, r7
 801142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801142e:	4770      	bx	lr

08011430 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b086      	sub	sp, #24
 8011434:	af00      	add	r7, sp, #0
 8011436:	6078      	str	r0, [r7, #4]
 8011438:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	681b      	ldr	r3, [r3, #0]
 801143e:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8011440:	683b      	ldr	r3, [r7, #0]
 8011442:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011446:	d204      	bcs.n	8011452 <dir_sdi+0x22>
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	f003 031f 	and.w	r3, r3, #31
 801144e:	2b00      	cmp	r3, #0
 8011450:	d001      	beq.n	8011456 <dir_sdi+0x26>
		return FR_INT_ERR;
 8011452:	2302      	movs	r3, #2
 8011454:	e063      	b.n	801151e <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 8011456:	687b      	ldr	r3, [r7, #4]
 8011458:	683a      	ldr	r2, [r7, #0]
 801145a:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	689b      	ldr	r3, [r3, #8]
 8011460:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8011462:	697b      	ldr	r3, [r7, #20]
 8011464:	2b00      	cmp	r3, #0
 8011466:	d106      	bne.n	8011476 <dir_sdi+0x46>
 8011468:	693b      	ldr	r3, [r7, #16]
 801146a:	781b      	ldrb	r3, [r3, #0]
 801146c:	2b02      	cmp	r3, #2
 801146e:	d902      	bls.n	8011476 <dir_sdi+0x46>
		clst = fs->dirbase;
 8011470:	693b      	ldr	r3, [r7, #16]
 8011472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011474:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8011476:	697b      	ldr	r3, [r7, #20]
 8011478:	2b00      	cmp	r3, #0
 801147a:	d10c      	bne.n	8011496 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 801147c:	683b      	ldr	r3, [r7, #0]
 801147e:	095b      	lsrs	r3, r3, #5
 8011480:	693a      	ldr	r2, [r7, #16]
 8011482:	8912      	ldrh	r2, [r2, #8]
 8011484:	4293      	cmp	r3, r2
 8011486:	d301      	bcc.n	801148c <dir_sdi+0x5c>
 8011488:	2302      	movs	r3, #2
 801148a:	e048      	b.n	801151e <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 801148c:	693b      	ldr	r3, [r7, #16]
 801148e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	61da      	str	r2, [r3, #28]
 8011494:	e029      	b.n	80114ea <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8011496:	693b      	ldr	r3, [r7, #16]
 8011498:	895b      	ldrh	r3, [r3, #10]
 801149a:	025b      	lsls	r3, r3, #9
 801149c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 801149e:	e019      	b.n	80114d4 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	6979      	ldr	r1, [r7, #20]
 80114a4:	4618      	mov	r0, r3
 80114a6:	f7ff fd06 	bl	8010eb6 <get_fat>
 80114aa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80114ac:	697b      	ldr	r3, [r7, #20]
 80114ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80114b2:	d101      	bne.n	80114b8 <dir_sdi+0x88>
 80114b4:	2301      	movs	r3, #1
 80114b6:	e032      	b.n	801151e <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80114b8:	697b      	ldr	r3, [r7, #20]
 80114ba:	2b01      	cmp	r3, #1
 80114bc:	d904      	bls.n	80114c8 <dir_sdi+0x98>
 80114be:	693b      	ldr	r3, [r7, #16]
 80114c0:	695b      	ldr	r3, [r3, #20]
 80114c2:	697a      	ldr	r2, [r7, #20]
 80114c4:	429a      	cmp	r2, r3
 80114c6:	d301      	bcc.n	80114cc <dir_sdi+0x9c>
 80114c8:	2302      	movs	r3, #2
 80114ca:	e028      	b.n	801151e <dir_sdi+0xee>
			ofs -= csz;
 80114cc:	683a      	ldr	r2, [r7, #0]
 80114ce:	68fb      	ldr	r3, [r7, #12]
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80114d4:	683a      	ldr	r2, [r7, #0]
 80114d6:	68fb      	ldr	r3, [r7, #12]
 80114d8:	429a      	cmp	r2, r3
 80114da:	d2e1      	bcs.n	80114a0 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80114dc:	6979      	ldr	r1, [r7, #20]
 80114de:	6938      	ldr	r0, [r7, #16]
 80114e0:	f7ff fcca 	bl	8010e78 <clust2sect>
 80114e4:	4602      	mov	r2, r0
 80114e6:	687b      	ldr	r3, [r7, #4]
 80114e8:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	697a      	ldr	r2, [r7, #20]
 80114ee:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	69db      	ldr	r3, [r3, #28]
 80114f4:	2b00      	cmp	r3, #0
 80114f6:	d101      	bne.n	80114fc <dir_sdi+0xcc>
 80114f8:	2302      	movs	r3, #2
 80114fa:	e010      	b.n	801151e <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80114fc:	687b      	ldr	r3, [r7, #4]
 80114fe:	69da      	ldr	r2, [r3, #28]
 8011500:	683b      	ldr	r3, [r7, #0]
 8011502:	0a5b      	lsrs	r3, r3, #9
 8011504:	441a      	add	r2, r3
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 801150a:	693b      	ldr	r3, [r7, #16]
 801150c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011516:	441a      	add	r2, r3
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 801151c:	2300      	movs	r3, #0
}
 801151e:	4618      	mov	r0, r3
 8011520:	3718      	adds	r7, #24
 8011522:	46bd      	mov	sp, r7
 8011524:	bd80      	pop	{r7, pc}

08011526 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8011526:	b580      	push	{r7, lr}
 8011528:	b086      	sub	sp, #24
 801152a:	af00      	add	r7, sp, #0
 801152c:	6078      	str	r0, [r7, #4]
 801152e:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8011530:	687b      	ldr	r3, [r7, #4]
 8011532:	681b      	ldr	r3, [r3, #0]
 8011534:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8011536:	687b      	ldr	r3, [r7, #4]
 8011538:	695b      	ldr	r3, [r3, #20]
 801153a:	3320      	adds	r3, #32
 801153c:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	69db      	ldr	r3, [r3, #28]
 8011542:	2b00      	cmp	r3, #0
 8011544:	d003      	beq.n	801154e <dir_next+0x28>
 8011546:	68bb      	ldr	r3, [r7, #8]
 8011548:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801154c:	d301      	bcc.n	8011552 <dir_next+0x2c>
 801154e:	2304      	movs	r3, #4
 8011550:	e0aa      	b.n	80116a8 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011558:	2b00      	cmp	r3, #0
 801155a:	f040 8098 	bne.w	801168e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	69db      	ldr	r3, [r3, #28]
 8011562:	1c5a      	adds	r2, r3, #1
 8011564:	687b      	ldr	r3, [r7, #4]
 8011566:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8011568:	687b      	ldr	r3, [r7, #4]
 801156a:	699b      	ldr	r3, [r3, #24]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d10b      	bne.n	8011588 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	095b      	lsrs	r3, r3, #5
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	8912      	ldrh	r2, [r2, #8]
 8011578:	4293      	cmp	r3, r2
 801157a:	f0c0 8088 	bcc.w	801168e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	2200      	movs	r2, #0
 8011582:	61da      	str	r2, [r3, #28]
 8011584:	2304      	movs	r3, #4
 8011586:	e08f      	b.n	80116a8 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	0a5b      	lsrs	r3, r3, #9
 801158c:	68fa      	ldr	r2, [r7, #12]
 801158e:	8952      	ldrh	r2, [r2, #10]
 8011590:	3a01      	subs	r2, #1
 8011592:	4013      	ands	r3, r2
 8011594:	2b00      	cmp	r3, #0
 8011596:	d17a      	bne.n	801168e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8011598:	687a      	ldr	r2, [r7, #4]
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	699b      	ldr	r3, [r3, #24]
 801159e:	4619      	mov	r1, r3
 80115a0:	4610      	mov	r0, r2
 80115a2:	f7ff fc88 	bl	8010eb6 <get_fat>
 80115a6:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80115a8:	697b      	ldr	r3, [r7, #20]
 80115aa:	2b01      	cmp	r3, #1
 80115ac:	d801      	bhi.n	80115b2 <dir_next+0x8c>
 80115ae:	2302      	movs	r3, #2
 80115b0:	e07a      	b.n	80116a8 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80115b2:	697b      	ldr	r3, [r7, #20]
 80115b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115b8:	d101      	bne.n	80115be <dir_next+0x98>
 80115ba:	2301      	movs	r3, #1
 80115bc:	e074      	b.n	80116a8 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	695b      	ldr	r3, [r3, #20]
 80115c2:	697a      	ldr	r2, [r7, #20]
 80115c4:	429a      	cmp	r2, r3
 80115c6:	d358      	bcc.n	801167a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d104      	bne.n	80115d8 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	2200      	movs	r2, #0
 80115d2:	61da      	str	r2, [r3, #28]
 80115d4:	2304      	movs	r3, #4
 80115d6:	e067      	b.n	80116a8 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80115d8:	687a      	ldr	r2, [r7, #4]
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	699b      	ldr	r3, [r3, #24]
 80115de:	4619      	mov	r1, r3
 80115e0:	4610      	mov	r0, r2
 80115e2:	f7ff fe59 	bl	8011298 <create_chain>
 80115e6:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80115e8:	697b      	ldr	r3, [r7, #20]
 80115ea:	2b00      	cmp	r3, #0
 80115ec:	d101      	bne.n	80115f2 <dir_next+0xcc>
 80115ee:	2307      	movs	r3, #7
 80115f0:	e05a      	b.n	80116a8 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80115f2:	697b      	ldr	r3, [r7, #20]
 80115f4:	2b01      	cmp	r3, #1
 80115f6:	d101      	bne.n	80115fc <dir_next+0xd6>
 80115f8:	2302      	movs	r3, #2
 80115fa:	e055      	b.n	80116a8 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80115fc:	697b      	ldr	r3, [r7, #20]
 80115fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011602:	d101      	bne.n	8011608 <dir_next+0xe2>
 8011604:	2301      	movs	r3, #1
 8011606:	e04f      	b.n	80116a8 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8011608:	68f8      	ldr	r0, [r7, #12]
 801160a:	f7ff fb55 	bl	8010cb8 <sync_window>
 801160e:	4603      	mov	r3, r0
 8011610:	2b00      	cmp	r3, #0
 8011612:	d001      	beq.n	8011618 <dir_next+0xf2>
 8011614:	2301      	movs	r3, #1
 8011616:	e047      	b.n	80116a8 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	3330      	adds	r3, #48	; 0x30
 801161c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011620:	2100      	movs	r1, #0
 8011622:	4618      	mov	r0, r3
 8011624:	f7ff f97f 	bl	8010926 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011628:	2300      	movs	r3, #0
 801162a:	613b      	str	r3, [r7, #16]
 801162c:	6979      	ldr	r1, [r7, #20]
 801162e:	68f8      	ldr	r0, [r7, #12]
 8011630:	f7ff fc22 	bl	8010e78 <clust2sect>
 8011634:	4602      	mov	r2, r0
 8011636:	68fb      	ldr	r3, [r7, #12]
 8011638:	62da      	str	r2, [r3, #44]	; 0x2c
 801163a:	e012      	b.n	8011662 <dir_next+0x13c>
						fs->wflag = 1;
 801163c:	68fb      	ldr	r3, [r7, #12]
 801163e:	2201      	movs	r2, #1
 8011640:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8011642:	68f8      	ldr	r0, [r7, #12]
 8011644:	f7ff fb38 	bl	8010cb8 <sync_window>
 8011648:	4603      	mov	r3, r0
 801164a:	2b00      	cmp	r3, #0
 801164c:	d001      	beq.n	8011652 <dir_next+0x12c>
 801164e:	2301      	movs	r3, #1
 8011650:	e02a      	b.n	80116a8 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8011652:	693b      	ldr	r3, [r7, #16]
 8011654:	3301      	adds	r3, #1
 8011656:	613b      	str	r3, [r7, #16]
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801165c:	1c5a      	adds	r2, r3, #1
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	62da      	str	r2, [r3, #44]	; 0x2c
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	895b      	ldrh	r3, [r3, #10]
 8011666:	461a      	mov	r2, r3
 8011668:	693b      	ldr	r3, [r7, #16]
 801166a:	4293      	cmp	r3, r2
 801166c:	d3e6      	bcc.n	801163c <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011672:	693b      	ldr	r3, [r7, #16]
 8011674:	1ad2      	subs	r2, r2, r3
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	697a      	ldr	r2, [r7, #20]
 801167e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8011680:	6979      	ldr	r1, [r7, #20]
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f7ff fbf8 	bl	8010e78 <clust2sect>
 8011688:	4602      	mov	r2, r0
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	68ba      	ldr	r2, [r7, #8]
 8011692:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8011694:	68fb      	ldr	r3, [r7, #12]
 8011696:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801169a:	68bb      	ldr	r3, [r7, #8]
 801169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80116a0:	441a      	add	r2, r3
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80116a6:	2300      	movs	r3, #0
}
 80116a8:	4618      	mov	r0, r3
 80116aa:	3718      	adds	r7, #24
 80116ac:	46bd      	mov	sp, r7
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80116b0:	b580      	push	{r7, lr}
 80116b2:	b086      	sub	sp, #24
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	6078      	str	r0, [r7, #4]
 80116b8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	681b      	ldr	r3, [r3, #0]
 80116be:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80116c0:	2100      	movs	r1, #0
 80116c2:	6878      	ldr	r0, [r7, #4]
 80116c4:	f7ff feb4 	bl	8011430 <dir_sdi>
 80116c8:	4603      	mov	r3, r0
 80116ca:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80116cc:	7dfb      	ldrb	r3, [r7, #23]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d12b      	bne.n	801172a <dir_alloc+0x7a>
		n = 0;
 80116d2:	2300      	movs	r3, #0
 80116d4:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80116d6:	687b      	ldr	r3, [r7, #4]
 80116d8:	69db      	ldr	r3, [r3, #28]
 80116da:	4619      	mov	r1, r3
 80116dc:	68f8      	ldr	r0, [r7, #12]
 80116de:	f7ff fb2f 	bl	8010d40 <move_window>
 80116e2:	4603      	mov	r3, r0
 80116e4:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80116e6:	7dfb      	ldrb	r3, [r7, #23]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d11d      	bne.n	8011728 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80116ec:	687b      	ldr	r3, [r7, #4]
 80116ee:	6a1b      	ldr	r3, [r3, #32]
 80116f0:	781b      	ldrb	r3, [r3, #0]
 80116f2:	2be5      	cmp	r3, #229	; 0xe5
 80116f4:	d004      	beq.n	8011700 <dir_alloc+0x50>
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	6a1b      	ldr	r3, [r3, #32]
 80116fa:	781b      	ldrb	r3, [r3, #0]
 80116fc:	2b00      	cmp	r3, #0
 80116fe:	d107      	bne.n	8011710 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	3301      	adds	r3, #1
 8011704:	613b      	str	r3, [r7, #16]
 8011706:	693a      	ldr	r2, [r7, #16]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	429a      	cmp	r2, r3
 801170c:	d102      	bne.n	8011714 <dir_alloc+0x64>
 801170e:	e00c      	b.n	801172a <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8011710:	2300      	movs	r3, #0
 8011712:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8011714:	2101      	movs	r1, #1
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ff05 	bl	8011526 <dir_next>
 801171c:	4603      	mov	r3, r0
 801171e:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8011720:	7dfb      	ldrb	r3, [r7, #23]
 8011722:	2b00      	cmp	r3, #0
 8011724:	d0d7      	beq.n	80116d6 <dir_alloc+0x26>
 8011726:	e000      	b.n	801172a <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8011728:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 801172a:	7dfb      	ldrb	r3, [r7, #23]
 801172c:	2b04      	cmp	r3, #4
 801172e:	d101      	bne.n	8011734 <dir_alloc+0x84>
 8011730:	2307      	movs	r3, #7
 8011732:	75fb      	strb	r3, [r7, #23]
	return res;
 8011734:	7dfb      	ldrb	r3, [r7, #23]
}
 8011736:	4618      	mov	r0, r3
 8011738:	3718      	adds	r7, #24
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b084      	sub	sp, #16
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
 8011746:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8011748:	683b      	ldr	r3, [r7, #0]
 801174a:	331a      	adds	r3, #26
 801174c:	4618      	mov	r0, r3
 801174e:	f7ff f847 	bl	80107e0 <ld_word>
 8011752:	4603      	mov	r3, r0
 8011754:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	781b      	ldrb	r3, [r3, #0]
 801175a:	2b03      	cmp	r3, #3
 801175c:	d109      	bne.n	8011772 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 801175e:	683b      	ldr	r3, [r7, #0]
 8011760:	3314      	adds	r3, #20
 8011762:	4618      	mov	r0, r3
 8011764:	f7ff f83c 	bl	80107e0 <ld_word>
 8011768:	4603      	mov	r3, r0
 801176a:	041b      	lsls	r3, r3, #16
 801176c:	68fa      	ldr	r2, [r7, #12]
 801176e:	4313      	orrs	r3, r2
 8011770:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8011772:	68fb      	ldr	r3, [r7, #12]
}
 8011774:	4618      	mov	r0, r3
 8011776:	3710      	adds	r7, #16
 8011778:	46bd      	mov	sp, r7
 801177a:	bd80      	pop	{r7, pc}

0801177c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	60f8      	str	r0, [r7, #12]
 8011784:	60b9      	str	r1, [r7, #8]
 8011786:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8011788:	68bb      	ldr	r3, [r7, #8]
 801178a:	331a      	adds	r3, #26
 801178c:	687a      	ldr	r2, [r7, #4]
 801178e:	b292      	uxth	r2, r2
 8011790:	4611      	mov	r1, r2
 8011792:	4618      	mov	r0, r3
 8011794:	f7ff f85f 	bl	8010856 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8011798:	68fb      	ldr	r3, [r7, #12]
 801179a:	781b      	ldrb	r3, [r3, #0]
 801179c:	2b03      	cmp	r3, #3
 801179e:	d109      	bne.n	80117b4 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80117a0:	68bb      	ldr	r3, [r7, #8]
 80117a2:	f103 0214 	add.w	r2, r3, #20
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	0c1b      	lsrs	r3, r3, #16
 80117aa:	b29b      	uxth	r3, r3
 80117ac:	4619      	mov	r1, r3
 80117ae:	4610      	mov	r0, r2
 80117b0:	f7ff f851 	bl	8010856 <st_word>
	}
}
 80117b4:	bf00      	nop
 80117b6:	3710      	adds	r7, #16
 80117b8:	46bd      	mov	sp, r7
 80117ba:	bd80      	pop	{r7, pc}

080117bc <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80117bc:	b580      	push	{r7, lr}
 80117be:	b086      	sub	sp, #24
 80117c0:	af00      	add	r7, sp, #0
 80117c2:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80117c4:	687b      	ldr	r3, [r7, #4]
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80117ca:	2100      	movs	r1, #0
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f7ff fe2f 	bl	8011430 <dir_sdi>
 80117d2:	4603      	mov	r3, r0
 80117d4:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80117d6:	7dfb      	ldrb	r3, [r7, #23]
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d001      	beq.n	80117e0 <dir_find+0x24>
 80117dc:	7dfb      	ldrb	r3, [r7, #23]
 80117de:	e03e      	b.n	801185e <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	69db      	ldr	r3, [r3, #28]
 80117e4:	4619      	mov	r1, r3
 80117e6:	6938      	ldr	r0, [r7, #16]
 80117e8:	f7ff faaa 	bl	8010d40 <move_window>
 80117ec:	4603      	mov	r3, r0
 80117ee:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80117f0:	7dfb      	ldrb	r3, [r7, #23]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d12f      	bne.n	8011856 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	6a1b      	ldr	r3, [r3, #32]
 80117fa:	781b      	ldrb	r3, [r3, #0]
 80117fc:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80117fe:	7bfb      	ldrb	r3, [r7, #15]
 8011800:	2b00      	cmp	r3, #0
 8011802:	d102      	bne.n	801180a <dir_find+0x4e>
 8011804:	2304      	movs	r3, #4
 8011806:	75fb      	strb	r3, [r7, #23]
 8011808:	e028      	b.n	801185c <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 801180a:	687b      	ldr	r3, [r7, #4]
 801180c:	6a1b      	ldr	r3, [r3, #32]
 801180e:	330b      	adds	r3, #11
 8011810:	781b      	ldrb	r3, [r3, #0]
 8011812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011816:	b2da      	uxtb	r2, r3
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6a1b      	ldr	r3, [r3, #32]
 8011820:	330b      	adds	r3, #11
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	f003 0308 	and.w	r3, r3, #8
 8011828:	2b00      	cmp	r3, #0
 801182a:	d10a      	bne.n	8011842 <dir_find+0x86>
 801182c:	687b      	ldr	r3, [r7, #4]
 801182e:	6a18      	ldr	r0, [r3, #32]
 8011830:	687b      	ldr	r3, [r7, #4]
 8011832:	3324      	adds	r3, #36	; 0x24
 8011834:	220b      	movs	r2, #11
 8011836:	4619      	mov	r1, r3
 8011838:	f7ff f88f 	bl	801095a <mem_cmp>
 801183c:	4603      	mov	r3, r0
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00b      	beq.n	801185a <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8011842:	2100      	movs	r1, #0
 8011844:	6878      	ldr	r0, [r7, #4]
 8011846:	f7ff fe6e 	bl	8011526 <dir_next>
 801184a:	4603      	mov	r3, r0
 801184c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 801184e:	7dfb      	ldrb	r3, [r7, #23]
 8011850:	2b00      	cmp	r3, #0
 8011852:	d0c5      	beq.n	80117e0 <dir_find+0x24>
 8011854:	e002      	b.n	801185c <dir_find+0xa0>
		if (res != FR_OK) break;
 8011856:	bf00      	nop
 8011858:	e000      	b.n	801185c <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 801185a:	bf00      	nop

	return res;
 801185c:	7dfb      	ldrb	r3, [r7, #23]
}
 801185e:	4618      	mov	r0, r3
 8011860:	3718      	adds	r7, #24
 8011862:	46bd      	mov	sp, r7
 8011864:	bd80      	pop	{r7, pc}

08011866 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8011866:	b580      	push	{r7, lr}
 8011868:	b084      	sub	sp, #16
 801186a:	af00      	add	r7, sp, #0
 801186c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801186e:	687b      	ldr	r3, [r7, #4]
 8011870:	681b      	ldr	r3, [r3, #0]
 8011872:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8011874:	2101      	movs	r1, #1
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f7ff ff1a 	bl	80116b0 <dir_alloc>
 801187c:	4603      	mov	r3, r0
 801187e:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8011880:	7bfb      	ldrb	r3, [r7, #15]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d11c      	bne.n	80118c0 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	69db      	ldr	r3, [r3, #28]
 801188a:	4619      	mov	r1, r3
 801188c:	68b8      	ldr	r0, [r7, #8]
 801188e:	f7ff fa57 	bl	8010d40 <move_window>
 8011892:	4603      	mov	r3, r0
 8011894:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8011896:	7bfb      	ldrb	r3, [r7, #15]
 8011898:	2b00      	cmp	r3, #0
 801189a:	d111      	bne.n	80118c0 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	6a1b      	ldr	r3, [r3, #32]
 80118a0:	2220      	movs	r2, #32
 80118a2:	2100      	movs	r1, #0
 80118a4:	4618      	mov	r0, r3
 80118a6:	f7ff f83e 	bl	8010926 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	6a18      	ldr	r0, [r3, #32]
 80118ae:	687b      	ldr	r3, [r7, #4]
 80118b0:	3324      	adds	r3, #36	; 0x24
 80118b2:	220b      	movs	r2, #11
 80118b4:	4619      	mov	r1, r3
 80118b6:	f7ff f815 	bl	80108e4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80118ba:	68bb      	ldr	r3, [r7, #8]
 80118bc:	2201      	movs	r2, #1
 80118be:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80118c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80118c2:	4618      	mov	r0, r3
 80118c4:	3710      	adds	r7, #16
 80118c6:	46bd      	mov	sp, r7
 80118c8:	bd80      	pop	{r7, pc}
	...

080118cc <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b088      	sub	sp, #32
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
 80118d4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80118d6:	683b      	ldr	r3, [r7, #0]
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	60fb      	str	r3, [r7, #12]
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	3324      	adds	r3, #36	; 0x24
 80118e0:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80118e2:	220b      	movs	r2, #11
 80118e4:	2120      	movs	r1, #32
 80118e6:	68b8      	ldr	r0, [r7, #8]
 80118e8:	f7ff f81d 	bl	8010926 <mem_set>
	si = i = 0; ni = 8;
 80118ec:	2300      	movs	r3, #0
 80118ee:	613b      	str	r3, [r7, #16]
 80118f0:	693b      	ldr	r3, [r7, #16]
 80118f2:	617b      	str	r3, [r7, #20]
 80118f4:	2308      	movs	r3, #8
 80118f6:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	1c5a      	adds	r2, r3, #1
 80118fc:	617a      	str	r2, [r7, #20]
 80118fe:	68fa      	ldr	r2, [r7, #12]
 8011900:	4413      	add	r3, r2
 8011902:	781b      	ldrb	r3, [r3, #0]
 8011904:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8011906:	7ffb      	ldrb	r3, [r7, #31]
 8011908:	2b20      	cmp	r3, #32
 801190a:	d94e      	bls.n	80119aa <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 801190c:	7ffb      	ldrb	r3, [r7, #31]
 801190e:	2b2f      	cmp	r3, #47	; 0x2f
 8011910:	d006      	beq.n	8011920 <create_name+0x54>
 8011912:	7ffb      	ldrb	r3, [r7, #31]
 8011914:	2b5c      	cmp	r3, #92	; 0x5c
 8011916:	d110      	bne.n	801193a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8011918:	e002      	b.n	8011920 <create_name+0x54>
 801191a:	697b      	ldr	r3, [r7, #20]
 801191c:	3301      	adds	r3, #1
 801191e:	617b      	str	r3, [r7, #20]
 8011920:	68fa      	ldr	r2, [r7, #12]
 8011922:	697b      	ldr	r3, [r7, #20]
 8011924:	4413      	add	r3, r2
 8011926:	781b      	ldrb	r3, [r3, #0]
 8011928:	2b2f      	cmp	r3, #47	; 0x2f
 801192a:	d0f6      	beq.n	801191a <create_name+0x4e>
 801192c:	68fa      	ldr	r2, [r7, #12]
 801192e:	697b      	ldr	r3, [r7, #20]
 8011930:	4413      	add	r3, r2
 8011932:	781b      	ldrb	r3, [r3, #0]
 8011934:	2b5c      	cmp	r3, #92	; 0x5c
 8011936:	d0f0      	beq.n	801191a <create_name+0x4e>
			break;
 8011938:	e038      	b.n	80119ac <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 801193a:	7ffb      	ldrb	r3, [r7, #31]
 801193c:	2b2e      	cmp	r3, #46	; 0x2e
 801193e:	d003      	beq.n	8011948 <create_name+0x7c>
 8011940:	693a      	ldr	r2, [r7, #16]
 8011942:	69bb      	ldr	r3, [r7, #24]
 8011944:	429a      	cmp	r2, r3
 8011946:	d30c      	bcc.n	8011962 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8011948:	69bb      	ldr	r3, [r7, #24]
 801194a:	2b0b      	cmp	r3, #11
 801194c:	d002      	beq.n	8011954 <create_name+0x88>
 801194e:	7ffb      	ldrb	r3, [r7, #31]
 8011950:	2b2e      	cmp	r3, #46	; 0x2e
 8011952:	d001      	beq.n	8011958 <create_name+0x8c>
 8011954:	2306      	movs	r3, #6
 8011956:	e044      	b.n	80119e2 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8011958:	2308      	movs	r3, #8
 801195a:	613b      	str	r3, [r7, #16]
 801195c:	230b      	movs	r3, #11
 801195e:	61bb      	str	r3, [r7, #24]
			continue;
 8011960:	e022      	b.n	80119a8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8011962:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8011966:	2b00      	cmp	r3, #0
 8011968:	da04      	bge.n	8011974 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 801196a:	7ffb      	ldrb	r3, [r7, #31]
 801196c:	3b80      	subs	r3, #128	; 0x80
 801196e:	4a1f      	ldr	r2, [pc, #124]	; (80119ec <create_name+0x120>)
 8011970:	5cd3      	ldrb	r3, [r2, r3]
 8011972:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8011974:	7ffb      	ldrb	r3, [r7, #31]
 8011976:	4619      	mov	r1, r3
 8011978:	481d      	ldr	r0, [pc, #116]	; (80119f0 <create_name+0x124>)
 801197a:	f7ff f815 	bl	80109a8 <chk_chr>
 801197e:	4603      	mov	r3, r0
 8011980:	2b00      	cmp	r3, #0
 8011982:	d001      	beq.n	8011988 <create_name+0xbc>
 8011984:	2306      	movs	r3, #6
 8011986:	e02c      	b.n	80119e2 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8011988:	7ffb      	ldrb	r3, [r7, #31]
 801198a:	2b60      	cmp	r3, #96	; 0x60
 801198c:	d905      	bls.n	801199a <create_name+0xce>
 801198e:	7ffb      	ldrb	r3, [r7, #31]
 8011990:	2b7a      	cmp	r3, #122	; 0x7a
 8011992:	d802      	bhi.n	801199a <create_name+0xce>
 8011994:	7ffb      	ldrb	r3, [r7, #31]
 8011996:	3b20      	subs	r3, #32
 8011998:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 801199a:	693b      	ldr	r3, [r7, #16]
 801199c:	1c5a      	adds	r2, r3, #1
 801199e:	613a      	str	r2, [r7, #16]
 80119a0:	68ba      	ldr	r2, [r7, #8]
 80119a2:	4413      	add	r3, r2
 80119a4:	7ffa      	ldrb	r2, [r7, #31]
 80119a6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80119a8:	e7a6      	b.n	80118f8 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80119aa:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80119ac:	68fa      	ldr	r2, [r7, #12]
 80119ae:	697b      	ldr	r3, [r7, #20]
 80119b0:	441a      	add	r2, r3
 80119b2:	683b      	ldr	r3, [r7, #0]
 80119b4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80119b6:	693b      	ldr	r3, [r7, #16]
 80119b8:	2b00      	cmp	r3, #0
 80119ba:	d101      	bne.n	80119c0 <create_name+0xf4>
 80119bc:	2306      	movs	r3, #6
 80119be:	e010      	b.n	80119e2 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80119c0:	68bb      	ldr	r3, [r7, #8]
 80119c2:	781b      	ldrb	r3, [r3, #0]
 80119c4:	2be5      	cmp	r3, #229	; 0xe5
 80119c6:	d102      	bne.n	80119ce <create_name+0x102>
 80119c8:	68bb      	ldr	r3, [r7, #8]
 80119ca:	2205      	movs	r2, #5
 80119cc:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80119ce:	7ffb      	ldrb	r3, [r7, #31]
 80119d0:	2b20      	cmp	r3, #32
 80119d2:	d801      	bhi.n	80119d8 <create_name+0x10c>
 80119d4:	2204      	movs	r2, #4
 80119d6:	e000      	b.n	80119da <create_name+0x10e>
 80119d8:	2200      	movs	r2, #0
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	330b      	adds	r3, #11
 80119de:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80119e0:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80119e2:	4618      	mov	r0, r3
 80119e4:	3720      	adds	r7, #32
 80119e6:	46bd      	mov	sp, r7
 80119e8:	bd80      	pop	{r7, pc}
 80119ea:	bf00      	nop
 80119ec:	080140dc 	.word	0x080140dc
 80119f0:	08014010 	.word	0x08014010

080119f4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b086      	sub	sp, #24
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8011a02:	693b      	ldr	r3, [r7, #16]
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8011a08:	e002      	b.n	8011a10 <follow_path+0x1c>
 8011a0a:	683b      	ldr	r3, [r7, #0]
 8011a0c:	3301      	adds	r3, #1
 8011a0e:	603b      	str	r3, [r7, #0]
 8011a10:	683b      	ldr	r3, [r7, #0]
 8011a12:	781b      	ldrb	r3, [r3, #0]
 8011a14:	2b2f      	cmp	r3, #47	; 0x2f
 8011a16:	d0f8      	beq.n	8011a0a <follow_path+0x16>
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	781b      	ldrb	r3, [r3, #0]
 8011a1c:	2b5c      	cmp	r3, #92	; 0x5c
 8011a1e:	d0f4      	beq.n	8011a0a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8011a20:	693b      	ldr	r3, [r7, #16]
 8011a22:	2200      	movs	r2, #0
 8011a24:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8011a26:	683b      	ldr	r3, [r7, #0]
 8011a28:	781b      	ldrb	r3, [r3, #0]
 8011a2a:	2b1f      	cmp	r3, #31
 8011a2c:	d80a      	bhi.n	8011a44 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	2280      	movs	r2, #128	; 0x80
 8011a32:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8011a36:	2100      	movs	r1, #0
 8011a38:	6878      	ldr	r0, [r7, #4]
 8011a3a:	f7ff fcf9 	bl	8011430 <dir_sdi>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	75fb      	strb	r3, [r7, #23]
 8011a42:	e043      	b.n	8011acc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011a44:	463b      	mov	r3, r7
 8011a46:	4619      	mov	r1, r3
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f7ff ff3f 	bl	80118cc <create_name>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8011a52:	7dfb      	ldrb	r3, [r7, #23]
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d134      	bne.n	8011ac2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8011a58:	6878      	ldr	r0, [r7, #4]
 8011a5a:	f7ff feaf 	bl	80117bc <dir_find>
 8011a5e:	4603      	mov	r3, r0
 8011a60:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8011a68:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8011a6a:	7dfb      	ldrb	r3, [r7, #23]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d00a      	beq.n	8011a86 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8011a70:	7dfb      	ldrb	r3, [r7, #23]
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d127      	bne.n	8011ac6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8011a76:	7afb      	ldrb	r3, [r7, #11]
 8011a78:	f003 0304 	and.w	r3, r3, #4
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d122      	bne.n	8011ac6 <follow_path+0xd2>
 8011a80:	2305      	movs	r3, #5
 8011a82:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8011a84:	e01f      	b.n	8011ac6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011a86:	7afb      	ldrb	r3, [r7, #11]
 8011a88:	f003 0304 	and.w	r3, r3, #4
 8011a8c:	2b00      	cmp	r3, #0
 8011a8e:	d11c      	bne.n	8011aca <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8011a90:	693b      	ldr	r3, [r7, #16]
 8011a92:	799b      	ldrb	r3, [r3, #6]
 8011a94:	f003 0310 	and.w	r3, r3, #16
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d102      	bne.n	8011aa2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8011a9c:	2305      	movs	r3, #5
 8011a9e:	75fb      	strb	r3, [r7, #23]
 8011aa0:	e014      	b.n	8011acc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	695b      	ldr	r3, [r3, #20]
 8011aac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011ab0:	4413      	add	r3, r2
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	68f8      	ldr	r0, [r7, #12]
 8011ab6:	f7ff fe42 	bl	801173e <ld_clust>
 8011aba:	4602      	mov	r2, r0
 8011abc:	693b      	ldr	r3, [r7, #16]
 8011abe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8011ac0:	e7c0      	b.n	8011a44 <follow_path+0x50>
			if (res != FR_OK) break;
 8011ac2:	bf00      	nop
 8011ac4:	e002      	b.n	8011acc <follow_path+0xd8>
				break;
 8011ac6:	bf00      	nop
 8011ac8:	e000      	b.n	8011acc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8011aca:	bf00      	nop
			}
		}
	}

	return res;
 8011acc:	7dfb      	ldrb	r3, [r7, #23]
}
 8011ace:	4618      	mov	r0, r3
 8011ad0:	3718      	adds	r7, #24
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}

08011ad6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8011ad6:	b480      	push	{r7}
 8011ad8:	b087      	sub	sp, #28
 8011ada:	af00      	add	r7, sp, #0
 8011adc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8011ade:	f04f 33ff 	mov.w	r3, #4294967295
 8011ae2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8011ae4:	687b      	ldr	r3, [r7, #4]
 8011ae6:	681b      	ldr	r3, [r3, #0]
 8011ae8:	2b00      	cmp	r3, #0
 8011aea:	d031      	beq.n	8011b50 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8011aec:	687b      	ldr	r3, [r7, #4]
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	617b      	str	r3, [r7, #20]
 8011af2:	e002      	b.n	8011afa <get_ldnumber+0x24>
 8011af4:	697b      	ldr	r3, [r7, #20]
 8011af6:	3301      	adds	r3, #1
 8011af8:	617b      	str	r3, [r7, #20]
 8011afa:	697b      	ldr	r3, [r7, #20]
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	2b20      	cmp	r3, #32
 8011b00:	d903      	bls.n	8011b0a <get_ldnumber+0x34>
 8011b02:	697b      	ldr	r3, [r7, #20]
 8011b04:	781b      	ldrb	r3, [r3, #0]
 8011b06:	2b3a      	cmp	r3, #58	; 0x3a
 8011b08:	d1f4      	bne.n	8011af4 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8011b0a:	697b      	ldr	r3, [r7, #20]
 8011b0c:	781b      	ldrb	r3, [r3, #0]
 8011b0e:	2b3a      	cmp	r3, #58	; 0x3a
 8011b10:	d11c      	bne.n	8011b4c <get_ldnumber+0x76>
			tp = *path;
 8011b12:	687b      	ldr	r3, [r7, #4]
 8011b14:	681b      	ldr	r3, [r3, #0]
 8011b16:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8011b18:	68fb      	ldr	r3, [r7, #12]
 8011b1a:	1c5a      	adds	r2, r3, #1
 8011b1c:	60fa      	str	r2, [r7, #12]
 8011b1e:	781b      	ldrb	r3, [r3, #0]
 8011b20:	3b30      	subs	r3, #48	; 0x30
 8011b22:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8011b24:	68bb      	ldr	r3, [r7, #8]
 8011b26:	2b09      	cmp	r3, #9
 8011b28:	d80e      	bhi.n	8011b48 <get_ldnumber+0x72>
 8011b2a:	68fa      	ldr	r2, [r7, #12]
 8011b2c:	697b      	ldr	r3, [r7, #20]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d10a      	bne.n	8011b48 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8011b32:	68bb      	ldr	r3, [r7, #8]
 8011b34:	2b00      	cmp	r3, #0
 8011b36:	d107      	bne.n	8011b48 <get_ldnumber+0x72>
					vol = (int)i;
 8011b38:	68bb      	ldr	r3, [r7, #8]
 8011b3a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011b3c:	697b      	ldr	r3, [r7, #20]
 8011b3e:	3301      	adds	r3, #1
 8011b40:	617b      	str	r3, [r7, #20]
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	697a      	ldr	r2, [r7, #20]
 8011b46:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011b48:	693b      	ldr	r3, [r7, #16]
 8011b4a:	e002      	b.n	8011b52 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8011b50:	693b      	ldr	r3, [r7, #16]
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	371c      	adds	r7, #28
 8011b56:	46bd      	mov	sp, r7
 8011b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5c:	4770      	bx	lr
	...

08011b60 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011b6a:	687b      	ldr	r3, [r7, #4]
 8011b6c:	2200      	movs	r2, #0
 8011b6e:	70da      	strb	r2, [r3, #3]
 8011b70:	687b      	ldr	r3, [r7, #4]
 8011b72:	f04f 32ff 	mov.w	r2, #4294967295
 8011b76:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011b78:	6839      	ldr	r1, [r7, #0]
 8011b7a:	6878      	ldr	r0, [r7, #4]
 8011b7c:	f7ff f8e0 	bl	8010d40 <move_window>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d001      	beq.n	8011b8a <check_fs+0x2a>
 8011b86:	2304      	movs	r3, #4
 8011b88:	e038      	b.n	8011bfc <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011b8a:	687b      	ldr	r3, [r7, #4]
 8011b8c:	3330      	adds	r3, #48	; 0x30
 8011b8e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fe fe24 	bl	80107e0 <ld_word>
 8011b98:	4603      	mov	r3, r0
 8011b9a:	461a      	mov	r2, r3
 8011b9c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8011ba0:	429a      	cmp	r2, r3
 8011ba2:	d001      	beq.n	8011ba8 <check_fs+0x48>
 8011ba4:	2303      	movs	r3, #3
 8011ba6:	e029      	b.n	8011bfc <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011ba8:	687b      	ldr	r3, [r7, #4]
 8011baa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bae:	2be9      	cmp	r3, #233	; 0xe9
 8011bb0:	d009      	beq.n	8011bc6 <check_fs+0x66>
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011bb8:	2beb      	cmp	r3, #235	; 0xeb
 8011bba:	d11e      	bne.n	8011bfa <check_fs+0x9a>
 8011bbc:	687b      	ldr	r3, [r7, #4]
 8011bbe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8011bc2:	2b90      	cmp	r3, #144	; 0x90
 8011bc4:	d119      	bne.n	8011bfa <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	3330      	adds	r3, #48	; 0x30
 8011bca:	3336      	adds	r3, #54	; 0x36
 8011bcc:	4618      	mov	r0, r3
 8011bce:	f7fe fe1f 	bl	8010810 <ld_dword>
 8011bd2:	4603      	mov	r3, r0
 8011bd4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8011bd8:	4a0a      	ldr	r2, [pc, #40]	; (8011c04 <check_fs+0xa4>)
 8011bda:	4293      	cmp	r3, r2
 8011bdc:	d101      	bne.n	8011be2 <check_fs+0x82>
 8011bde:	2300      	movs	r3, #0
 8011be0:	e00c      	b.n	8011bfc <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	3330      	adds	r3, #48	; 0x30
 8011be6:	3352      	adds	r3, #82	; 0x52
 8011be8:	4618      	mov	r0, r3
 8011bea:	f7fe fe11 	bl	8010810 <ld_dword>
 8011bee:	4602      	mov	r2, r0
 8011bf0:	4b05      	ldr	r3, [pc, #20]	; (8011c08 <check_fs+0xa8>)
 8011bf2:	429a      	cmp	r2, r3
 8011bf4:	d101      	bne.n	8011bfa <check_fs+0x9a>
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	e000      	b.n	8011bfc <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8011bfa:	2302      	movs	r3, #2
}
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	00544146 	.word	0x00544146
 8011c08:	33544146 	.word	0x33544146

08011c0c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b096      	sub	sp, #88	; 0x58
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	4613      	mov	r3, r2
 8011c18:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8011c1a:	68bb      	ldr	r3, [r7, #8]
 8011c1c:	2200      	movs	r2, #0
 8011c1e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8011c20:	68f8      	ldr	r0, [r7, #12]
 8011c22:	f7ff ff58 	bl	8011ad6 <get_ldnumber>
 8011c26:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8011c28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c2a:	2b00      	cmp	r3, #0
 8011c2c:	da01      	bge.n	8011c32 <find_volume+0x26>
 8011c2e:	230b      	movs	r3, #11
 8011c30:	e22e      	b.n	8012090 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8011c32:	4aa8      	ldr	r2, [pc, #672]	; (8011ed4 <find_volume+0x2c8>)
 8011c34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011c3a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d101      	bne.n	8011c46 <find_volume+0x3a>
 8011c42:	230c      	movs	r3, #12
 8011c44:	e224      	b.n	8012090 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011c46:	68bb      	ldr	r3, [r7, #8]
 8011c48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011c4a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011c4c:	79fb      	ldrb	r3, [r7, #7]
 8011c4e:	f023 0301 	bic.w	r3, r3, #1
 8011c52:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d01a      	beq.n	8011c92 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c5e:	785b      	ldrb	r3, [r3, #1]
 8011c60:	4618      	mov	r0, r3
 8011c62:	f7fe fd1f 	bl	80106a4 <disk_status>
 8011c66:	4603      	mov	r3, r0
 8011c68:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011c6c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	2b00      	cmp	r3, #0
 8011c76:	d10c      	bne.n	8011c92 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011c78:	79fb      	ldrb	r3, [r7, #7]
 8011c7a:	2b00      	cmp	r3, #0
 8011c7c:	d007      	beq.n	8011c8e <find_volume+0x82>
 8011c7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c82:	f003 0304 	and.w	r3, r3, #4
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d001      	beq.n	8011c8e <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011c8a:	230a      	movs	r3, #10
 8011c8c:	e200      	b.n	8012090 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8011c8e:	2300      	movs	r3, #0
 8011c90:	e1fe      	b.n	8012090 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8011c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c94:	2200      	movs	r2, #0
 8011c96:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011c9a:	b2da      	uxtb	r2, r3
 8011c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011c9e:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8011ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ca2:	785b      	ldrb	r3, [r3, #1]
 8011ca4:	4618      	mov	r0, r3
 8011ca6:	f7fe fd17 	bl	80106d8 <disk_initialize>
 8011caa:	4603      	mov	r3, r0
 8011cac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8011cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cb4:	f003 0301 	and.w	r3, r3, #1
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d001      	beq.n	8011cc0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011cbc:	2303      	movs	r3, #3
 8011cbe:	e1e7      	b.n	8012090 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8011cc0:	79fb      	ldrb	r3, [r7, #7]
 8011cc2:	2b00      	cmp	r3, #0
 8011cc4:	d007      	beq.n	8011cd6 <find_volume+0xca>
 8011cc6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011cca:	f003 0304 	and.w	r3, r3, #4
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d001      	beq.n	8011cd6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8011cd2:	230a      	movs	r3, #10
 8011cd4:	e1dc      	b.n	8012090 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8011cd6:	2300      	movs	r3, #0
 8011cd8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8011cda:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011cdc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011cde:	f7ff ff3f 	bl	8011b60 <check_fs>
 8011ce2:	4603      	mov	r3, r0
 8011ce4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8011ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011cec:	2b02      	cmp	r3, #2
 8011cee:	d14b      	bne.n	8011d88 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011cf0:	2300      	movs	r3, #0
 8011cf2:	643b      	str	r3, [r7, #64]	; 0x40
 8011cf4:	e01f      	b.n	8011d36 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011cf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011cf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8011cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011cfe:	011b      	lsls	r3, r3, #4
 8011d00:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011d04:	4413      	add	r3, r2
 8011d06:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d0a:	3304      	adds	r3, #4
 8011d0c:	781b      	ldrb	r3, [r3, #0]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d006      	beq.n	8011d20 <find_volume+0x114>
 8011d12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d14:	3308      	adds	r3, #8
 8011d16:	4618      	mov	r0, r3
 8011d18:	f7fe fd7a 	bl	8010810 <ld_dword>
 8011d1c:	4602      	mov	r2, r0
 8011d1e:	e000      	b.n	8011d22 <find_volume+0x116>
 8011d20:	2200      	movs	r2, #0
 8011d22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d24:	009b      	lsls	r3, r3, #2
 8011d26:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8011d2a:	440b      	add	r3, r1
 8011d2c:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d32:	3301      	adds	r3, #1
 8011d34:	643b      	str	r3, [r7, #64]	; 0x40
 8011d36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d38:	2b03      	cmp	r3, #3
 8011d3a:	d9dc      	bls.n	8011cf6 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8011d3c:	2300      	movs	r3, #0
 8011d3e:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8011d40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d002      	beq.n	8011d4c <find_volume+0x140>
 8011d46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d48:	3b01      	subs	r3, #1
 8011d4a:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8011d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d4e:	009b      	lsls	r3, r3, #2
 8011d50:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8011d54:	4413      	add	r3, r2
 8011d56:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011d5a:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d005      	beq.n	8011d6e <find_volume+0x162>
 8011d62:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011d64:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011d66:	f7ff fefb 	bl	8011b60 <check_fs>
 8011d6a:	4603      	mov	r3, r0
 8011d6c:	e000      	b.n	8011d70 <find_volume+0x164>
 8011d6e:	2303      	movs	r3, #3
 8011d70:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011d74:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d78:	2b01      	cmp	r3, #1
 8011d7a:	d905      	bls.n	8011d88 <find_volume+0x17c>
 8011d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d7e:	3301      	adds	r3, #1
 8011d80:	643b      	str	r3, [r7, #64]	; 0x40
 8011d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011d84:	2b03      	cmp	r3, #3
 8011d86:	d9e1      	bls.n	8011d4c <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011d88:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d8c:	2b04      	cmp	r3, #4
 8011d8e:	d101      	bne.n	8011d94 <find_volume+0x188>
 8011d90:	2301      	movs	r3, #1
 8011d92:	e17d      	b.n	8012090 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8011d94:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011d98:	2b01      	cmp	r3, #1
 8011d9a:	d901      	bls.n	8011da0 <find_volume+0x194>
 8011d9c:	230d      	movs	r3, #13
 8011d9e:	e177      	b.n	8012090 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8011da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011da2:	3330      	adds	r3, #48	; 0x30
 8011da4:	330b      	adds	r3, #11
 8011da6:	4618      	mov	r0, r3
 8011da8:	f7fe fd1a 	bl	80107e0 <ld_word>
 8011dac:	4603      	mov	r3, r0
 8011dae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011db2:	d001      	beq.n	8011db8 <find_volume+0x1ac>
 8011db4:	230d      	movs	r3, #13
 8011db6:	e16b      	b.n	8012090 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8011db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dba:	3330      	adds	r3, #48	; 0x30
 8011dbc:	3316      	adds	r3, #22
 8011dbe:	4618      	mov	r0, r3
 8011dc0:	f7fe fd0e 	bl	80107e0 <ld_word>
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8011dc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d106      	bne.n	8011ddc <find_volume+0x1d0>
 8011dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd0:	3330      	adds	r3, #48	; 0x30
 8011dd2:	3324      	adds	r3, #36	; 0x24
 8011dd4:	4618      	mov	r0, r3
 8011dd6:	f7fe fd1b 	bl	8010810 <ld_dword>
 8011dda:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8011ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011de0:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8011de2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011de4:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8011dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dee:	789b      	ldrb	r3, [r3, #2]
 8011df0:	2b01      	cmp	r3, #1
 8011df2:	d005      	beq.n	8011e00 <find_volume+0x1f4>
 8011df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df6:	789b      	ldrb	r3, [r3, #2]
 8011df8:	2b02      	cmp	r3, #2
 8011dfa:	d001      	beq.n	8011e00 <find_volume+0x1f4>
 8011dfc:	230d      	movs	r3, #13
 8011dfe:	e147      	b.n	8012090 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011e00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e02:	789b      	ldrb	r3, [r3, #2]
 8011e04:	461a      	mov	r2, r3
 8011e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e08:	fb02 f303 	mul.w	r3, r2, r3
 8011e0c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8011e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8011e14:	b29a      	uxth	r2, r3
 8011e16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e18:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8011e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e1c:	895b      	ldrh	r3, [r3, #10]
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d008      	beq.n	8011e34 <find_volume+0x228>
 8011e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e24:	895b      	ldrh	r3, [r3, #10]
 8011e26:	461a      	mov	r2, r3
 8011e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e2a:	895b      	ldrh	r3, [r3, #10]
 8011e2c:	3b01      	subs	r3, #1
 8011e2e:	4013      	ands	r3, r2
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d001      	beq.n	8011e38 <find_volume+0x22c>
 8011e34:	230d      	movs	r3, #13
 8011e36:	e12b      	b.n	8012090 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e3a:	3330      	adds	r3, #48	; 0x30
 8011e3c:	3311      	adds	r3, #17
 8011e3e:	4618      	mov	r0, r3
 8011e40:	f7fe fcce 	bl	80107e0 <ld_word>
 8011e44:	4603      	mov	r3, r0
 8011e46:	461a      	mov	r2, r3
 8011e48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8011e4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e4e:	891b      	ldrh	r3, [r3, #8]
 8011e50:	f003 030f 	and.w	r3, r3, #15
 8011e54:	b29b      	uxth	r3, r3
 8011e56:	2b00      	cmp	r3, #0
 8011e58:	d001      	beq.n	8011e5e <find_volume+0x252>
 8011e5a:	230d      	movs	r3, #13
 8011e5c:	e118      	b.n	8012090 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e60:	3330      	adds	r3, #48	; 0x30
 8011e62:	3313      	adds	r3, #19
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7fe fcbb 	bl	80107e0 <ld_word>
 8011e6a:	4603      	mov	r3, r0
 8011e6c:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011e6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d106      	bne.n	8011e82 <find_volume+0x276>
 8011e74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e76:	3330      	adds	r3, #48	; 0x30
 8011e78:	3320      	adds	r3, #32
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7fe fcc8 	bl	8010810 <ld_dword>
 8011e80:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8011e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011e84:	3330      	adds	r3, #48	; 0x30
 8011e86:	330e      	adds	r3, #14
 8011e88:	4618      	mov	r0, r3
 8011e8a:	f7fe fca9 	bl	80107e0 <ld_word>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8011e92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8011e94:	2b00      	cmp	r3, #0
 8011e96:	d101      	bne.n	8011e9c <find_volume+0x290>
 8011e98:	230d      	movs	r3, #13
 8011e9a:	e0f9      	b.n	8012090 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8011e9c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011e9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ea0:	4413      	add	r3, r2
 8011ea2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ea4:	8912      	ldrh	r2, [r2, #8]
 8011ea6:	0912      	lsrs	r2, r2, #4
 8011ea8:	b292      	uxth	r2, r2
 8011eaa:	4413      	add	r3, r2
 8011eac:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8011eae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011eb2:	429a      	cmp	r2, r3
 8011eb4:	d201      	bcs.n	8011eba <find_volume+0x2ae>
 8011eb6:	230d      	movs	r3, #13
 8011eb8:	e0ea      	b.n	8012090 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8011eba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8011ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011ebe:	1ad3      	subs	r3, r2, r3
 8011ec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011ec2:	8952      	ldrh	r2, [r2, #10]
 8011ec4:	fbb3 f3f2 	udiv	r3, r3, r2
 8011ec8:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d103      	bne.n	8011ed8 <find_volume+0x2cc>
 8011ed0:	230d      	movs	r3, #13
 8011ed2:	e0dd      	b.n	8012090 <find_volume+0x484>
 8011ed4:	24040204 	.word	0x24040204
		fmt = FS_FAT32;
 8011ed8:	2303      	movs	r3, #3
 8011eda:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8011ee4:	4293      	cmp	r3, r2
 8011ee6:	d802      	bhi.n	8011eee <find_volume+0x2e2>
 8011ee8:	2302      	movs	r3, #2
 8011eea:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ef0:	f640 72f5 	movw	r2, #4085	; 0xff5
 8011ef4:	4293      	cmp	r3, r2
 8011ef6:	d802      	bhi.n	8011efe <find_volume+0x2f2>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	1c9a      	adds	r2, r3, #2
 8011f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f04:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8011f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f0a:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011f0c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f10:	441a      	add	r2, r3
 8011f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f14:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8011f16:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011f1a:	441a      	add	r2, r3
 8011f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f1e:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8011f20:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f24:	2b03      	cmp	r3, #3
 8011f26:	d11e      	bne.n	8011f66 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f2a:	3330      	adds	r3, #48	; 0x30
 8011f2c:	332a      	adds	r3, #42	; 0x2a
 8011f2e:	4618      	mov	r0, r3
 8011f30:	f7fe fc56 	bl	80107e0 <ld_word>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d001      	beq.n	8011f3e <find_volume+0x332>
 8011f3a:	230d      	movs	r3, #13
 8011f3c:	e0a8      	b.n	8012090 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f40:	891b      	ldrh	r3, [r3, #8]
 8011f42:	2b00      	cmp	r3, #0
 8011f44:	d001      	beq.n	8011f4a <find_volume+0x33e>
 8011f46:	230d      	movs	r3, #13
 8011f48:	e0a2      	b.n	8012090 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f4c:	3330      	adds	r3, #48	; 0x30
 8011f4e:	332c      	adds	r3, #44	; 0x2c
 8011f50:	4618      	mov	r0, r3
 8011f52:	f7fe fc5d 	bl	8010810 <ld_dword>
 8011f56:	4602      	mov	r2, r0
 8011f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5a:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011f5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f5e:	695b      	ldr	r3, [r3, #20]
 8011f60:	009b      	lsls	r3, r3, #2
 8011f62:	647b      	str	r3, [r7, #68]	; 0x44
 8011f64:	e01f      	b.n	8011fa6 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8011f66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f68:	891b      	ldrh	r3, [r3, #8]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d101      	bne.n	8011f72 <find_volume+0x366>
 8011f6e:	230d      	movs	r3, #13
 8011f70:	e08e      	b.n	8012090 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8011f72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f74:	6a1a      	ldr	r2, [r3, #32]
 8011f76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011f78:	441a      	add	r2, r3
 8011f7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f7c:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8011f7e:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011f82:	2b02      	cmp	r3, #2
 8011f84:	d103      	bne.n	8011f8e <find_volume+0x382>
 8011f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f88:	695b      	ldr	r3, [r3, #20]
 8011f8a:	005b      	lsls	r3, r3, #1
 8011f8c:	e00a      	b.n	8011fa4 <find_volume+0x398>
 8011f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f90:	695a      	ldr	r2, [r3, #20]
 8011f92:	4613      	mov	r3, r2
 8011f94:	005b      	lsls	r3, r3, #1
 8011f96:	4413      	add	r3, r2
 8011f98:	085a      	lsrs	r2, r3, #1
 8011f9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011f9c:	695b      	ldr	r3, [r3, #20]
 8011f9e:	f003 0301 	and.w	r3, r3, #1
 8011fa2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8011fa4:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	699a      	ldr	r2, [r3, #24]
 8011faa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011fac:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8011fb0:	0a5b      	lsrs	r3, r3, #9
 8011fb2:	429a      	cmp	r2, r3
 8011fb4:	d201      	bcs.n	8011fba <find_volume+0x3ae>
 8011fb6:	230d      	movs	r3, #13
 8011fb8:	e06a      	b.n	8012090 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8011fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8011fc0:	611a      	str	r2, [r3, #16]
 8011fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc4:	691a      	ldr	r2, [r3, #16]
 8011fc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc8:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8011fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fcc:	2280      	movs	r2, #128	; 0x80
 8011fce:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011fd0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011fd4:	2b03      	cmp	r3, #3
 8011fd6:	d149      	bne.n	801206c <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8011fd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fda:	3330      	adds	r3, #48	; 0x30
 8011fdc:	3330      	adds	r3, #48	; 0x30
 8011fde:	4618      	mov	r0, r3
 8011fe0:	f7fe fbfe 	bl	80107e0 <ld_word>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	2b01      	cmp	r3, #1
 8011fe8:	d140      	bne.n	801206c <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8011fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fec:	3301      	adds	r3, #1
 8011fee:	4619      	mov	r1, r3
 8011ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011ff2:	f7fe fea5 	bl	8010d40 <move_window>
 8011ff6:	4603      	mov	r3, r0
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d137      	bne.n	801206c <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8011ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011ffe:	2200      	movs	r2, #0
 8012000:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8012002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012004:	3330      	adds	r3, #48	; 0x30
 8012006:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801200a:	4618      	mov	r0, r3
 801200c:	f7fe fbe8 	bl	80107e0 <ld_word>
 8012010:	4603      	mov	r3, r0
 8012012:	461a      	mov	r2, r3
 8012014:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8012018:	429a      	cmp	r2, r3
 801201a:	d127      	bne.n	801206c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 801201c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801201e:	3330      	adds	r3, #48	; 0x30
 8012020:	4618      	mov	r0, r3
 8012022:	f7fe fbf5 	bl	8010810 <ld_dword>
 8012026:	4602      	mov	r2, r0
 8012028:	4b1b      	ldr	r3, [pc, #108]	; (8012098 <find_volume+0x48c>)
 801202a:	429a      	cmp	r2, r3
 801202c:	d11e      	bne.n	801206c <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801202e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012030:	3330      	adds	r3, #48	; 0x30
 8012032:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012036:	4618      	mov	r0, r3
 8012038:	f7fe fbea 	bl	8010810 <ld_dword>
 801203c:	4602      	mov	r2, r0
 801203e:	4b17      	ldr	r3, [pc, #92]	; (801209c <find_volume+0x490>)
 8012040:	429a      	cmp	r2, r3
 8012042:	d113      	bne.n	801206c <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8012044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012046:	3330      	adds	r3, #48	; 0x30
 8012048:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 801204c:	4618      	mov	r0, r3
 801204e:	f7fe fbdf 	bl	8010810 <ld_dword>
 8012052:	4602      	mov	r2, r0
 8012054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012056:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8012058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801205a:	3330      	adds	r3, #48	; 0x30
 801205c:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8012060:	4618      	mov	r0, r3
 8012062:	f7fe fbd5 	bl	8010810 <ld_dword>
 8012066:	4602      	mov	r2, r0
 8012068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206a:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 801206c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801206e:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8012072:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8012074:	4b0a      	ldr	r3, [pc, #40]	; (80120a0 <find_volume+0x494>)
 8012076:	881b      	ldrh	r3, [r3, #0]
 8012078:	3301      	adds	r3, #1
 801207a:	b29a      	uxth	r2, r3
 801207c:	4b08      	ldr	r3, [pc, #32]	; (80120a0 <find_volume+0x494>)
 801207e:	801a      	strh	r2, [r3, #0]
 8012080:	4b07      	ldr	r3, [pc, #28]	; (80120a0 <find_volume+0x494>)
 8012082:	881a      	ldrh	r2, [r3, #0]
 8012084:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012086:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8012088:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801208a:	f7fe fdf1 	bl	8010c70 <clear_lock>
#endif
	return FR_OK;
 801208e:	2300      	movs	r3, #0
}
 8012090:	4618      	mov	r0, r3
 8012092:	3758      	adds	r7, #88	; 0x58
 8012094:	46bd      	mov	sp, r7
 8012096:	bd80      	pop	{r7, pc}
 8012098:	41615252 	.word	0x41615252
 801209c:	61417272 	.word	0x61417272
 80120a0:	24040208 	.word	0x24040208

080120a4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80120a4:	b580      	push	{r7, lr}
 80120a6:	b084      	sub	sp, #16
 80120a8:	af00      	add	r7, sp, #0
 80120aa:	6078      	str	r0, [r7, #4]
 80120ac:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80120ae:	2309      	movs	r3, #9
 80120b0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d01c      	beq.n	80120f2 <validate+0x4e>
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	681b      	ldr	r3, [r3, #0]
 80120bc:	2b00      	cmp	r3, #0
 80120be:	d018      	beq.n	80120f2 <validate+0x4e>
 80120c0:	687b      	ldr	r3, [r7, #4]
 80120c2:	681b      	ldr	r3, [r3, #0]
 80120c4:	781b      	ldrb	r3, [r3, #0]
 80120c6:	2b00      	cmp	r3, #0
 80120c8:	d013      	beq.n	80120f2 <validate+0x4e>
 80120ca:	687b      	ldr	r3, [r7, #4]
 80120cc:	889a      	ldrh	r2, [r3, #4]
 80120ce:	687b      	ldr	r3, [r7, #4]
 80120d0:	681b      	ldr	r3, [r3, #0]
 80120d2:	88db      	ldrh	r3, [r3, #6]
 80120d4:	429a      	cmp	r2, r3
 80120d6:	d10c      	bne.n	80120f2 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	681b      	ldr	r3, [r3, #0]
 80120dc:	785b      	ldrb	r3, [r3, #1]
 80120de:	4618      	mov	r0, r3
 80120e0:	f7fe fae0 	bl	80106a4 <disk_status>
 80120e4:	4603      	mov	r3, r0
 80120e6:	f003 0301 	and.w	r3, r3, #1
 80120ea:	2b00      	cmp	r3, #0
 80120ec:	d101      	bne.n	80120f2 <validate+0x4e>
			res = FR_OK;
 80120ee:	2300      	movs	r3, #0
 80120f0:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80120f2:	7bfb      	ldrb	r3, [r7, #15]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d102      	bne.n	80120fe <validate+0x5a>
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	681b      	ldr	r3, [r3, #0]
 80120fc:	e000      	b.n	8012100 <validate+0x5c>
 80120fe:	2300      	movs	r3, #0
 8012100:	683a      	ldr	r2, [r7, #0]
 8012102:	6013      	str	r3, [r2, #0]
	return res;
 8012104:	7bfb      	ldrb	r3, [r7, #15]
}
 8012106:	4618      	mov	r0, r3
 8012108:	3710      	adds	r7, #16
 801210a:	46bd      	mov	sp, r7
 801210c:	bd80      	pop	{r7, pc}
	...

08012110 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b088      	sub	sp, #32
 8012114:	af00      	add	r7, sp, #0
 8012116:	60f8      	str	r0, [r7, #12]
 8012118:	60b9      	str	r1, [r7, #8]
 801211a:	4613      	mov	r3, r2
 801211c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 801211e:	68bb      	ldr	r3, [r7, #8]
 8012120:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8012122:	f107 0310 	add.w	r3, r7, #16
 8012126:	4618      	mov	r0, r3
 8012128:	f7ff fcd5 	bl	8011ad6 <get_ldnumber>
 801212c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 801212e:	69fb      	ldr	r3, [r7, #28]
 8012130:	2b00      	cmp	r3, #0
 8012132:	da01      	bge.n	8012138 <f_mount+0x28>
 8012134:	230b      	movs	r3, #11
 8012136:	e02b      	b.n	8012190 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8012138:	4a17      	ldr	r2, [pc, #92]	; (8012198 <f_mount+0x88>)
 801213a:	69fb      	ldr	r3, [r7, #28]
 801213c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012140:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8012142:	69bb      	ldr	r3, [r7, #24]
 8012144:	2b00      	cmp	r3, #0
 8012146:	d005      	beq.n	8012154 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8012148:	69b8      	ldr	r0, [r7, #24]
 801214a:	f7fe fd91 	bl	8010c70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 801214e:	69bb      	ldr	r3, [r7, #24]
 8012150:	2200      	movs	r2, #0
 8012152:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8012154:	68fb      	ldr	r3, [r7, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	d002      	beq.n	8012160 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	2200      	movs	r2, #0
 801215e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8012160:	68fa      	ldr	r2, [r7, #12]
 8012162:	490d      	ldr	r1, [pc, #52]	; (8012198 <f_mount+0x88>)
 8012164:	69fb      	ldr	r3, [r7, #28]
 8012166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <f_mount+0x66>
 8012170:	79fb      	ldrb	r3, [r7, #7]
 8012172:	2b01      	cmp	r3, #1
 8012174:	d001      	beq.n	801217a <f_mount+0x6a>
 8012176:	2300      	movs	r3, #0
 8012178:	e00a      	b.n	8012190 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801217a:	f107 010c 	add.w	r1, r7, #12
 801217e:	f107 0308 	add.w	r3, r7, #8
 8012182:	2200      	movs	r2, #0
 8012184:	4618      	mov	r0, r3
 8012186:	f7ff fd41 	bl	8011c0c <find_volume>
 801218a:	4603      	mov	r3, r0
 801218c:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 801218e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012190:	4618      	mov	r0, r3
 8012192:	3720      	adds	r7, #32
 8012194:	46bd      	mov	sp, r7
 8012196:	bd80      	pop	{r7, pc}
 8012198:	24040204 	.word	0x24040204

0801219c <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 801219c:	b580      	push	{r7, lr}
 801219e:	b098      	sub	sp, #96	; 0x60
 80121a0:	af00      	add	r7, sp, #0
 80121a2:	60f8      	str	r0, [r7, #12]
 80121a4:	60b9      	str	r1, [r7, #8]
 80121a6:	4613      	mov	r3, r2
 80121a8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d101      	bne.n	80121b4 <f_open+0x18>
 80121b0:	2309      	movs	r3, #9
 80121b2:	e1ad      	b.n	8012510 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80121b4:	79fb      	ldrb	r3, [r7, #7]
 80121b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80121ba:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80121bc:	79fa      	ldrb	r2, [r7, #7]
 80121be:	f107 0110 	add.w	r1, r7, #16
 80121c2:	f107 0308 	add.w	r3, r7, #8
 80121c6:	4618      	mov	r0, r3
 80121c8:	f7ff fd20 	bl	8011c0c <find_volume>
 80121cc:	4603      	mov	r3, r0
 80121ce:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 80121d2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121d6:	2b00      	cmp	r3, #0
 80121d8:	f040 8191 	bne.w	80124fe <f_open+0x362>
		dj.obj.fs = fs;
 80121dc:	693b      	ldr	r3, [r7, #16]
 80121de:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80121e0:	68ba      	ldr	r2, [r7, #8]
 80121e2:	f107 0314 	add.w	r3, r7, #20
 80121e6:	4611      	mov	r1, r2
 80121e8:	4618      	mov	r0, r3
 80121ea:	f7ff fc03 	bl	80119f4 <follow_path>
 80121ee:	4603      	mov	r3, r0
 80121f0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80121f4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80121f8:	2b00      	cmp	r3, #0
 80121fa:	d11a      	bne.n	8012232 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80121fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8012200:	b25b      	sxtb	r3, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	da03      	bge.n	801220e <f_open+0x72>
				res = FR_INVALID_NAME;
 8012206:	2306      	movs	r3, #6
 8012208:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801220c:	e011      	b.n	8012232 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 801220e:	79fb      	ldrb	r3, [r7, #7]
 8012210:	f023 0301 	bic.w	r3, r3, #1
 8012214:	2b00      	cmp	r3, #0
 8012216:	bf14      	ite	ne
 8012218:	2301      	movne	r3, #1
 801221a:	2300      	moveq	r3, #0
 801221c:	b2db      	uxtb	r3, r3
 801221e:	461a      	mov	r2, r3
 8012220:	f107 0314 	add.w	r3, r7, #20
 8012224:	4611      	mov	r1, r2
 8012226:	4618      	mov	r0, r3
 8012228:	f7fe fbda 	bl	80109e0 <chk_lock>
 801222c:	4603      	mov	r3, r0
 801222e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8012232:	79fb      	ldrb	r3, [r7, #7]
 8012234:	f003 031c 	and.w	r3, r3, #28
 8012238:	2b00      	cmp	r3, #0
 801223a:	d07f      	beq.n	801233c <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 801223c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012240:	2b00      	cmp	r3, #0
 8012242:	d017      	beq.n	8012274 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8012244:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012248:	2b04      	cmp	r3, #4
 801224a:	d10e      	bne.n	801226a <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 801224c:	f7fe fc24 	bl	8010a98 <enq_lock>
 8012250:	4603      	mov	r3, r0
 8012252:	2b00      	cmp	r3, #0
 8012254:	d006      	beq.n	8012264 <f_open+0xc8>
 8012256:	f107 0314 	add.w	r3, r7, #20
 801225a:	4618      	mov	r0, r3
 801225c:	f7ff fb03 	bl	8011866 <dir_register>
 8012260:	4603      	mov	r3, r0
 8012262:	e000      	b.n	8012266 <f_open+0xca>
 8012264:	2312      	movs	r3, #18
 8012266:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801226a:	79fb      	ldrb	r3, [r7, #7]
 801226c:	f043 0308 	orr.w	r3, r3, #8
 8012270:	71fb      	strb	r3, [r7, #7]
 8012272:	e010      	b.n	8012296 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8012274:	7ebb      	ldrb	r3, [r7, #26]
 8012276:	f003 0311 	and.w	r3, r3, #17
 801227a:	2b00      	cmp	r3, #0
 801227c:	d003      	beq.n	8012286 <f_open+0xea>
					res = FR_DENIED;
 801227e:	2307      	movs	r3, #7
 8012280:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012284:	e007      	b.n	8012296 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8012286:	79fb      	ldrb	r3, [r7, #7]
 8012288:	f003 0304 	and.w	r3, r3, #4
 801228c:	2b00      	cmp	r3, #0
 801228e:	d002      	beq.n	8012296 <f_open+0xfa>
 8012290:	2308      	movs	r3, #8
 8012292:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8012296:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801229a:	2b00      	cmp	r3, #0
 801229c:	d168      	bne.n	8012370 <f_open+0x1d4>
 801229e:	79fb      	ldrb	r3, [r7, #7]
 80122a0:	f003 0308 	and.w	r3, r3, #8
 80122a4:	2b00      	cmp	r3, #0
 80122a6:	d063      	beq.n	8012370 <f_open+0x1d4>
				dw = GET_FATTIME();
 80122a8:	f7fb f91a 	bl	800d4e0 <get_fattime>
 80122ac:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80122ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122b0:	330e      	adds	r3, #14
 80122b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122b4:	4618      	mov	r0, r3
 80122b6:	f7fe fae9 	bl	801088c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80122ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122bc:	3316      	adds	r3, #22
 80122be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7fe fae3 	bl	801088c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80122c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122c8:	330b      	adds	r3, #11
 80122ca:	2220      	movs	r2, #32
 80122cc:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80122ce:	693b      	ldr	r3, [r7, #16]
 80122d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80122d2:	4611      	mov	r1, r2
 80122d4:	4618      	mov	r0, r3
 80122d6:	f7ff fa32 	bl	801173e <ld_clust>
 80122da:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80122dc:	693b      	ldr	r3, [r7, #16]
 80122de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80122e0:	2200      	movs	r2, #0
 80122e2:	4618      	mov	r0, r3
 80122e4:	f7ff fa4a 	bl	801177c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80122e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80122ea:	331c      	adds	r3, #28
 80122ec:	2100      	movs	r1, #0
 80122ee:	4618      	mov	r0, r3
 80122f0:	f7fe facc 	bl	801088c <st_dword>
					fs->wflag = 1;
 80122f4:	693b      	ldr	r3, [r7, #16]
 80122f6:	2201      	movs	r2, #1
 80122f8:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80122fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d037      	beq.n	8012370 <f_open+0x1d4>
						dw = fs->winsect;
 8012300:	693b      	ldr	r3, [r7, #16]
 8012302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012304:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8012306:	f107 0314 	add.w	r3, r7, #20
 801230a:	2200      	movs	r2, #0
 801230c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801230e:	4618      	mov	r0, r3
 8012310:	f7fe ff5d 	bl	80111ce <remove_chain>
 8012314:	4603      	mov	r3, r0
 8012316:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 801231a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801231e:	2b00      	cmp	r3, #0
 8012320:	d126      	bne.n	8012370 <f_open+0x1d4>
							res = move_window(fs, dw);
 8012322:	693b      	ldr	r3, [r7, #16]
 8012324:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8012326:	4618      	mov	r0, r3
 8012328:	f7fe fd0a 	bl	8010d40 <move_window>
 801232c:	4603      	mov	r3, r0
 801232e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8012332:	693b      	ldr	r3, [r7, #16]
 8012334:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012336:	3a01      	subs	r2, #1
 8012338:	60da      	str	r2, [r3, #12]
 801233a:	e019      	b.n	8012370 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 801233c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012340:	2b00      	cmp	r3, #0
 8012342:	d115      	bne.n	8012370 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8012344:	7ebb      	ldrb	r3, [r7, #26]
 8012346:	f003 0310 	and.w	r3, r3, #16
 801234a:	2b00      	cmp	r3, #0
 801234c:	d003      	beq.n	8012356 <f_open+0x1ba>
					res = FR_NO_FILE;
 801234e:	2304      	movs	r3, #4
 8012350:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8012354:	e00c      	b.n	8012370 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8012356:	79fb      	ldrb	r3, [r7, #7]
 8012358:	f003 0302 	and.w	r3, r3, #2
 801235c:	2b00      	cmp	r3, #0
 801235e:	d007      	beq.n	8012370 <f_open+0x1d4>
 8012360:	7ebb      	ldrb	r3, [r7, #26]
 8012362:	f003 0301 	and.w	r3, r3, #1
 8012366:	2b00      	cmp	r3, #0
 8012368:	d002      	beq.n	8012370 <f_open+0x1d4>
						res = FR_DENIED;
 801236a:	2307      	movs	r3, #7
 801236c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8012370:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012374:	2b00      	cmp	r3, #0
 8012376:	d128      	bne.n	80123ca <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8012378:	79fb      	ldrb	r3, [r7, #7]
 801237a:	f003 0308 	and.w	r3, r3, #8
 801237e:	2b00      	cmp	r3, #0
 8012380:	d003      	beq.n	801238a <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8012382:	79fb      	ldrb	r3, [r7, #7]
 8012384:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012388:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801238a:	693b      	ldr	r3, [r7, #16]
 801238c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801238e:	68fb      	ldr	r3, [r7, #12]
 8012390:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8012392:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012394:	68fb      	ldr	r3, [r7, #12]
 8012396:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8012398:	79fb      	ldrb	r3, [r7, #7]
 801239a:	f023 0301 	bic.w	r3, r3, #1
 801239e:	2b00      	cmp	r3, #0
 80123a0:	bf14      	ite	ne
 80123a2:	2301      	movne	r3, #1
 80123a4:	2300      	moveq	r3, #0
 80123a6:	b2db      	uxtb	r3, r3
 80123a8:	461a      	mov	r2, r3
 80123aa:	f107 0314 	add.w	r3, r7, #20
 80123ae:	4611      	mov	r1, r2
 80123b0:	4618      	mov	r0, r3
 80123b2:	f7fe fb93 	bl	8010adc <inc_lock>
 80123b6:	4602      	mov	r2, r0
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	691b      	ldr	r3, [r3, #16]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d102      	bne.n	80123ca <f_open+0x22e>
 80123c4:	2302      	movs	r3, #2
 80123c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80123ca:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	f040 8095 	bne.w	80124fe <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80123d4:	693b      	ldr	r3, [r7, #16]
 80123d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80123d8:	4611      	mov	r1, r2
 80123da:	4618      	mov	r0, r3
 80123dc:	f7ff f9af 	bl	801173e <ld_clust>
 80123e0:	4602      	mov	r2, r0
 80123e2:	68fb      	ldr	r3, [r7, #12]
 80123e4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80123e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80123e8:	331c      	adds	r3, #28
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fe fa10 	bl	8010810 <ld_dword>
 80123f0:	4602      	mov	r2, r0
 80123f2:	68fb      	ldr	r3, [r7, #12]
 80123f4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80123f6:	68fb      	ldr	r3, [r7, #12]
 80123f8:	2200      	movs	r2, #0
 80123fa:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80123fc:	693a      	ldr	r2, [r7, #16]
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8012402:	693b      	ldr	r3, [r7, #16]
 8012404:	88da      	ldrh	r2, [r3, #6]
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801240a:	68fb      	ldr	r3, [r7, #12]
 801240c:	79fa      	ldrb	r2, [r7, #7]
 801240e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8012410:	68fb      	ldr	r3, [r7, #12]
 8012412:	2200      	movs	r2, #0
 8012414:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	2200      	movs	r2, #0
 801241a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	2200      	movs	r2, #0
 8012420:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8012422:	68fb      	ldr	r3, [r7, #12]
 8012424:	3330      	adds	r3, #48	; 0x30
 8012426:	f44f 7200 	mov.w	r2, #512	; 0x200
 801242a:	2100      	movs	r1, #0
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fa7a 	bl	8010926 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8012432:	79fb      	ldrb	r3, [r7, #7]
 8012434:	f003 0320 	and.w	r3, r3, #32
 8012438:	2b00      	cmp	r3, #0
 801243a:	d060      	beq.n	80124fe <f_open+0x362>
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	68db      	ldr	r3, [r3, #12]
 8012440:	2b00      	cmp	r3, #0
 8012442:	d05c      	beq.n	80124fe <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8012444:	68fb      	ldr	r3, [r7, #12]
 8012446:	68da      	ldr	r2, [r3, #12]
 8012448:	68fb      	ldr	r3, [r7, #12]
 801244a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 801244c:	693b      	ldr	r3, [r7, #16]
 801244e:	895b      	ldrh	r3, [r3, #10]
 8012450:	025b      	lsls	r3, r3, #9
 8012452:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	689b      	ldr	r3, [r3, #8]
 8012458:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	68db      	ldr	r3, [r3, #12]
 801245e:	657b      	str	r3, [r7, #84]	; 0x54
 8012460:	e016      	b.n	8012490 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8012462:	68fb      	ldr	r3, [r7, #12]
 8012464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8012466:	4618      	mov	r0, r3
 8012468:	f7fe fd25 	bl	8010eb6 <get_fat>
 801246c:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 801246e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012470:	2b01      	cmp	r3, #1
 8012472:	d802      	bhi.n	801247a <f_open+0x2de>
 8012474:	2302      	movs	r3, #2
 8012476:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801247a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801247c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012480:	d102      	bne.n	8012488 <f_open+0x2ec>
 8012482:	2301      	movs	r3, #1
 8012484:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8012488:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801248a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801248c:	1ad3      	subs	r3, r2, r3
 801248e:	657b      	str	r3, [r7, #84]	; 0x54
 8012490:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012494:	2b00      	cmp	r3, #0
 8012496:	d103      	bne.n	80124a0 <f_open+0x304>
 8012498:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801249a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801249c:	429a      	cmp	r2, r3
 801249e:	d8e0      	bhi.n	8012462 <f_open+0x2c6>
				}
				fp->clust = clst;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80124a4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80124a6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d127      	bne.n	80124fe <f_open+0x362>
 80124ae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80124b4:	2b00      	cmp	r3, #0
 80124b6:	d022      	beq.n	80124fe <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80124b8:	693b      	ldr	r3, [r7, #16]
 80124ba:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80124bc:	4618      	mov	r0, r3
 80124be:	f7fe fcdb 	bl	8010e78 <clust2sect>
 80124c2:	6478      	str	r0, [r7, #68]	; 0x44
 80124c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124c6:	2b00      	cmp	r3, #0
 80124c8:	d103      	bne.n	80124d2 <f_open+0x336>
						res = FR_INT_ERR;
 80124ca:	2302      	movs	r3, #2
 80124cc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80124d0:	e015      	b.n	80124fe <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80124d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124d4:	0a5a      	lsrs	r2, r3, #9
 80124d6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80124d8:	441a      	add	r2, r3
 80124da:	68fb      	ldr	r3, [r7, #12]
 80124dc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80124de:	693b      	ldr	r3, [r7, #16]
 80124e0:	7858      	ldrb	r0, [r3, #1]
 80124e2:	68fb      	ldr	r3, [r7, #12]
 80124e4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	6a1a      	ldr	r2, [r3, #32]
 80124ec:	2301      	movs	r3, #1
 80124ee:	f7fe f919 	bl	8010724 <disk_read>
 80124f2:	4603      	mov	r3, r0
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d002      	beq.n	80124fe <f_open+0x362>
 80124f8:	2301      	movs	r3, #1
 80124fa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80124fe:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8012502:	2b00      	cmp	r3, #0
 8012504:	d002      	beq.n	801250c <f_open+0x370>
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	2200      	movs	r2, #0
 801250a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 801250c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8012510:	4618      	mov	r0, r3
 8012512:	3760      	adds	r7, #96	; 0x60
 8012514:	46bd      	mov	sp, r7
 8012516:	bd80      	pop	{r7, pc}

08012518 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8012518:	b580      	push	{r7, lr}
 801251a:	b08e      	sub	sp, #56	; 0x38
 801251c:	af00      	add	r7, sp, #0
 801251e:	60f8      	str	r0, [r7, #12]
 8012520:	60b9      	str	r1, [r7, #8]
 8012522:	607a      	str	r2, [r7, #4]
 8012524:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8012526:	68bb      	ldr	r3, [r7, #8]
 8012528:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801252a:	683b      	ldr	r3, [r7, #0]
 801252c:	2200      	movs	r2, #0
 801252e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8012530:	68fb      	ldr	r3, [r7, #12]
 8012532:	f107 0214 	add.w	r2, r7, #20
 8012536:	4611      	mov	r1, r2
 8012538:	4618      	mov	r0, r3
 801253a:	f7ff fdb3 	bl	80120a4 <validate>
 801253e:	4603      	mov	r3, r0
 8012540:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8012544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012548:	2b00      	cmp	r3, #0
 801254a:	d107      	bne.n	801255c <f_read+0x44>
 801254c:	68fb      	ldr	r3, [r7, #12]
 801254e:	7d5b      	ldrb	r3, [r3, #21]
 8012550:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012554:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012558:	2b00      	cmp	r3, #0
 801255a:	d002      	beq.n	8012562 <f_read+0x4a>
 801255c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012560:	e115      	b.n	801278e <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8012562:	68fb      	ldr	r3, [r7, #12]
 8012564:	7d1b      	ldrb	r3, [r3, #20]
 8012566:	f003 0301 	and.w	r3, r3, #1
 801256a:	2b00      	cmp	r3, #0
 801256c:	d101      	bne.n	8012572 <f_read+0x5a>
 801256e:	2307      	movs	r3, #7
 8012570:	e10d      	b.n	801278e <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8012572:	68fb      	ldr	r3, [r7, #12]
 8012574:	68da      	ldr	r2, [r3, #12]
 8012576:	68fb      	ldr	r3, [r7, #12]
 8012578:	699b      	ldr	r3, [r3, #24]
 801257a:	1ad3      	subs	r3, r2, r3
 801257c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 801257e:	687a      	ldr	r2, [r7, #4]
 8012580:	6a3b      	ldr	r3, [r7, #32]
 8012582:	429a      	cmp	r2, r3
 8012584:	f240 80fe 	bls.w	8012784 <f_read+0x26c>
 8012588:	6a3b      	ldr	r3, [r7, #32]
 801258a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 801258c:	e0fa      	b.n	8012784 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012596:	2b00      	cmp	r3, #0
 8012598:	f040 80c6 	bne.w	8012728 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801259c:	68fb      	ldr	r3, [r7, #12]
 801259e:	699b      	ldr	r3, [r3, #24]
 80125a0:	0a5b      	lsrs	r3, r3, #9
 80125a2:	697a      	ldr	r2, [r7, #20]
 80125a4:	8952      	ldrh	r2, [r2, #10]
 80125a6:	3a01      	subs	r2, #1
 80125a8:	4013      	ands	r3, r2
 80125aa:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80125ac:	69fb      	ldr	r3, [r7, #28]
 80125ae:	2b00      	cmp	r3, #0
 80125b0:	d12f      	bne.n	8012612 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	699b      	ldr	r3, [r3, #24]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d103      	bne.n	80125c2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	689b      	ldr	r3, [r3, #8]
 80125be:	633b      	str	r3, [r7, #48]	; 0x30
 80125c0:	e013      	b.n	80125ea <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d007      	beq.n	80125da <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80125ca:	68fb      	ldr	r3, [r7, #12]
 80125cc:	699b      	ldr	r3, [r3, #24]
 80125ce:	4619      	mov	r1, r3
 80125d0:	68f8      	ldr	r0, [r7, #12]
 80125d2:	f7fe fef9 	bl	80113c8 <clmt_clust>
 80125d6:	6338      	str	r0, [r7, #48]	; 0x30
 80125d8:	e007      	b.n	80125ea <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80125da:	68fa      	ldr	r2, [r7, #12]
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	69db      	ldr	r3, [r3, #28]
 80125e0:	4619      	mov	r1, r3
 80125e2:	4610      	mov	r0, r2
 80125e4:	f7fe fc67 	bl	8010eb6 <get_fat>
 80125e8:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80125ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125ec:	2b01      	cmp	r3, #1
 80125ee:	d804      	bhi.n	80125fa <f_read+0xe2>
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2202      	movs	r2, #2
 80125f4:	755a      	strb	r2, [r3, #21]
 80125f6:	2302      	movs	r3, #2
 80125f8:	e0c9      	b.n	801278e <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80125fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80125fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012600:	d104      	bne.n	801260c <f_read+0xf4>
 8012602:	68fb      	ldr	r3, [r7, #12]
 8012604:	2201      	movs	r2, #1
 8012606:	755a      	strb	r2, [r3, #21]
 8012608:	2301      	movs	r3, #1
 801260a:	e0c0      	b.n	801278e <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 801260c:	68fb      	ldr	r3, [r7, #12]
 801260e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012610:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8012612:	697a      	ldr	r2, [r7, #20]
 8012614:	68fb      	ldr	r3, [r7, #12]
 8012616:	69db      	ldr	r3, [r3, #28]
 8012618:	4619      	mov	r1, r3
 801261a:	4610      	mov	r0, r2
 801261c:	f7fe fc2c 	bl	8010e78 <clust2sect>
 8012620:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012622:	69bb      	ldr	r3, [r7, #24]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d104      	bne.n	8012632 <f_read+0x11a>
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	2202      	movs	r2, #2
 801262c:	755a      	strb	r2, [r3, #21]
 801262e:	2302      	movs	r3, #2
 8012630:	e0ad      	b.n	801278e <f_read+0x276>
			sect += csect;
 8012632:	69ba      	ldr	r2, [r7, #24]
 8012634:	69fb      	ldr	r3, [r7, #28]
 8012636:	4413      	add	r3, r2
 8012638:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	0a5b      	lsrs	r3, r3, #9
 801263e:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8012640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012642:	2b00      	cmp	r3, #0
 8012644:	d039      	beq.n	80126ba <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012646:	69fa      	ldr	r2, [r7, #28]
 8012648:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801264a:	4413      	add	r3, r2
 801264c:	697a      	ldr	r2, [r7, #20]
 801264e:	8952      	ldrh	r2, [r2, #10]
 8012650:	4293      	cmp	r3, r2
 8012652:	d905      	bls.n	8012660 <f_read+0x148>
					cc = fs->csize - csect;
 8012654:	697b      	ldr	r3, [r7, #20]
 8012656:	895b      	ldrh	r3, [r3, #10]
 8012658:	461a      	mov	r2, r3
 801265a:	69fb      	ldr	r3, [r7, #28]
 801265c:	1ad3      	subs	r3, r2, r3
 801265e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012660:	697b      	ldr	r3, [r7, #20]
 8012662:	7858      	ldrb	r0, [r3, #1]
 8012664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012666:	69ba      	ldr	r2, [r7, #24]
 8012668:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801266a:	f7fe f85b 	bl	8010724 <disk_read>
 801266e:	4603      	mov	r3, r0
 8012670:	2b00      	cmp	r3, #0
 8012672:	d004      	beq.n	801267e <f_read+0x166>
 8012674:	68fb      	ldr	r3, [r7, #12]
 8012676:	2201      	movs	r2, #1
 8012678:	755a      	strb	r2, [r3, #21]
 801267a:	2301      	movs	r3, #1
 801267c:	e087      	b.n	801278e <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801267e:	68fb      	ldr	r3, [r7, #12]
 8012680:	7d1b      	ldrb	r3, [r3, #20]
 8012682:	b25b      	sxtb	r3, r3
 8012684:	2b00      	cmp	r3, #0
 8012686:	da14      	bge.n	80126b2 <f_read+0x19a>
 8012688:	68fb      	ldr	r3, [r7, #12]
 801268a:	6a1a      	ldr	r2, [r3, #32]
 801268c:	69bb      	ldr	r3, [r7, #24]
 801268e:	1ad3      	subs	r3, r2, r3
 8012690:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012692:	429a      	cmp	r2, r3
 8012694:	d90d      	bls.n	80126b2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8012696:	68fb      	ldr	r3, [r7, #12]
 8012698:	6a1a      	ldr	r2, [r3, #32]
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	1ad3      	subs	r3, r2, r3
 801269e:	025b      	lsls	r3, r3, #9
 80126a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80126a2:	18d0      	adds	r0, r2, r3
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	3330      	adds	r3, #48	; 0x30
 80126a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80126ac:	4619      	mov	r1, r3
 80126ae:	f7fe f919 	bl	80108e4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80126b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80126b4:	025b      	lsls	r3, r3, #9
 80126b6:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80126b8:	e050      	b.n	801275c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6a1b      	ldr	r3, [r3, #32]
 80126be:	69ba      	ldr	r2, [r7, #24]
 80126c0:	429a      	cmp	r2, r3
 80126c2:	d02e      	beq.n	8012722 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	7d1b      	ldrb	r3, [r3, #20]
 80126c8:	b25b      	sxtb	r3, r3
 80126ca:	2b00      	cmp	r3, #0
 80126cc:	da18      	bge.n	8012700 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80126ce:	697b      	ldr	r3, [r7, #20]
 80126d0:	7858      	ldrb	r0, [r3, #1]
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80126d8:	68fb      	ldr	r3, [r7, #12]
 80126da:	6a1a      	ldr	r2, [r3, #32]
 80126dc:	2301      	movs	r3, #1
 80126de:	f7fe f841 	bl	8010764 <disk_write>
 80126e2:	4603      	mov	r3, r0
 80126e4:	2b00      	cmp	r3, #0
 80126e6:	d004      	beq.n	80126f2 <f_read+0x1da>
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	2201      	movs	r2, #1
 80126ec:	755a      	strb	r2, [r3, #21]
 80126ee:	2301      	movs	r3, #1
 80126f0:	e04d      	b.n	801278e <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	7d1b      	ldrb	r3, [r3, #20]
 80126f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80126fa:	b2da      	uxtb	r2, r3
 80126fc:	68fb      	ldr	r3, [r7, #12]
 80126fe:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8012700:	697b      	ldr	r3, [r7, #20]
 8012702:	7858      	ldrb	r0, [r3, #1]
 8012704:	68fb      	ldr	r3, [r7, #12]
 8012706:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801270a:	2301      	movs	r3, #1
 801270c:	69ba      	ldr	r2, [r7, #24]
 801270e:	f7fe f809 	bl	8010724 <disk_read>
 8012712:	4603      	mov	r3, r0
 8012714:	2b00      	cmp	r3, #0
 8012716:	d004      	beq.n	8012722 <f_read+0x20a>
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2201      	movs	r2, #1
 801271c:	755a      	strb	r2, [r3, #21]
 801271e:	2301      	movs	r3, #1
 8012720:	e035      	b.n	801278e <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	69ba      	ldr	r2, [r7, #24]
 8012726:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	699b      	ldr	r3, [r3, #24]
 801272c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012730:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8012734:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8012736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	429a      	cmp	r2, r3
 801273c:	d901      	bls.n	8012742 <f_read+0x22a>
 801273e:	687b      	ldr	r3, [r7, #4]
 8012740:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8012742:	68fb      	ldr	r3, [r7, #12]
 8012744:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012748:	68fb      	ldr	r3, [r7, #12]
 801274a:	699b      	ldr	r3, [r3, #24]
 801274c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012750:	4413      	add	r3, r2
 8012752:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012754:	4619      	mov	r1, r3
 8012756:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012758:	f7fe f8c4 	bl	80108e4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 801275c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801275e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012760:	4413      	add	r3, r2
 8012762:	627b      	str	r3, [r7, #36]	; 0x24
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	699a      	ldr	r2, [r3, #24]
 8012768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801276a:	441a      	add	r2, r3
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	619a      	str	r2, [r3, #24]
 8012770:	683b      	ldr	r3, [r7, #0]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	441a      	add	r2, r3
 8012778:	683b      	ldr	r3, [r7, #0]
 801277a:	601a      	str	r2, [r3, #0]
 801277c:	687a      	ldr	r2, [r7, #4]
 801277e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012780:	1ad3      	subs	r3, r2, r3
 8012782:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	2b00      	cmp	r3, #0
 8012788:	f47f af01 	bne.w	801258e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 801278c:	2300      	movs	r3, #0
}
 801278e:	4618      	mov	r0, r3
 8012790:	3738      	adds	r7, #56	; 0x38
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}

08012796 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8012796:	b580      	push	{r7, lr}
 8012798:	b08c      	sub	sp, #48	; 0x30
 801279a:	af00      	add	r7, sp, #0
 801279c:	60f8      	str	r0, [r7, #12]
 801279e:	60b9      	str	r1, [r7, #8]
 80127a0:	607a      	str	r2, [r7, #4]
 80127a2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80127a4:	68bb      	ldr	r3, [r7, #8]
 80127a6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80127a8:	683b      	ldr	r3, [r7, #0]
 80127aa:	2200      	movs	r2, #0
 80127ac:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80127ae:	68fb      	ldr	r3, [r7, #12]
 80127b0:	f107 0210 	add.w	r2, r7, #16
 80127b4:	4611      	mov	r1, r2
 80127b6:	4618      	mov	r0, r3
 80127b8:	f7ff fc74 	bl	80120a4 <validate>
 80127bc:	4603      	mov	r3, r0
 80127be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80127c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	d107      	bne.n	80127da <f_write+0x44>
 80127ca:	68fb      	ldr	r3, [r7, #12]
 80127cc:	7d5b      	ldrb	r3, [r3, #21]
 80127ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80127d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d002      	beq.n	80127e0 <f_write+0x4a>
 80127da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127de:	e14b      	b.n	8012a78 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80127e0:	68fb      	ldr	r3, [r7, #12]
 80127e2:	7d1b      	ldrb	r3, [r3, #20]
 80127e4:	f003 0302 	and.w	r3, r3, #2
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d101      	bne.n	80127f0 <f_write+0x5a>
 80127ec:	2307      	movs	r3, #7
 80127ee:	e143      	b.n	8012a78 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	699a      	ldr	r2, [r3, #24]
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	441a      	add	r2, r3
 80127f8:	68fb      	ldr	r3, [r7, #12]
 80127fa:	699b      	ldr	r3, [r3, #24]
 80127fc:	429a      	cmp	r2, r3
 80127fe:	f080 812d 	bcs.w	8012a5c <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	699b      	ldr	r3, [r3, #24]
 8012806:	43db      	mvns	r3, r3
 8012808:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 801280a:	e127      	b.n	8012a5c <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	699b      	ldr	r3, [r3, #24]
 8012810:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012814:	2b00      	cmp	r3, #0
 8012816:	f040 80e3 	bne.w	80129e0 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	699b      	ldr	r3, [r3, #24]
 801281e:	0a5b      	lsrs	r3, r3, #9
 8012820:	693a      	ldr	r2, [r7, #16]
 8012822:	8952      	ldrh	r2, [r2, #10]
 8012824:	3a01      	subs	r2, #1
 8012826:	4013      	ands	r3, r2
 8012828:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 801282a:	69bb      	ldr	r3, [r7, #24]
 801282c:	2b00      	cmp	r3, #0
 801282e:	d143      	bne.n	80128b8 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8012830:	68fb      	ldr	r3, [r7, #12]
 8012832:	699b      	ldr	r3, [r3, #24]
 8012834:	2b00      	cmp	r3, #0
 8012836:	d10c      	bne.n	8012852 <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	689b      	ldr	r3, [r3, #8]
 801283c:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 801283e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11a      	bne.n	801287a <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8012844:	68fb      	ldr	r3, [r7, #12]
 8012846:	2100      	movs	r1, #0
 8012848:	4618      	mov	r0, r3
 801284a:	f7fe fd25 	bl	8011298 <create_chain>
 801284e:	62b8      	str	r0, [r7, #40]	; 0x28
 8012850:	e013      	b.n	801287a <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012856:	2b00      	cmp	r3, #0
 8012858:	d007      	beq.n	801286a <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	699b      	ldr	r3, [r3, #24]
 801285e:	4619      	mov	r1, r3
 8012860:	68f8      	ldr	r0, [r7, #12]
 8012862:	f7fe fdb1 	bl	80113c8 <clmt_clust>
 8012866:	62b8      	str	r0, [r7, #40]	; 0x28
 8012868:	e007      	b.n	801287a <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 801286a:	68fa      	ldr	r2, [r7, #12]
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	69db      	ldr	r3, [r3, #28]
 8012870:	4619      	mov	r1, r3
 8012872:	4610      	mov	r0, r2
 8012874:	f7fe fd10 	bl	8011298 <create_chain>
 8012878:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801287c:	2b00      	cmp	r3, #0
 801287e:	f000 80f2 	beq.w	8012a66 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8012882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012884:	2b01      	cmp	r3, #1
 8012886:	d104      	bne.n	8012892 <f_write+0xfc>
 8012888:	68fb      	ldr	r3, [r7, #12]
 801288a:	2202      	movs	r2, #2
 801288c:	755a      	strb	r2, [r3, #21]
 801288e:	2302      	movs	r3, #2
 8012890:	e0f2      	b.n	8012a78 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8012892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012898:	d104      	bne.n	80128a4 <f_write+0x10e>
 801289a:	68fb      	ldr	r3, [r7, #12]
 801289c:	2201      	movs	r2, #1
 801289e:	755a      	strb	r2, [r3, #21]
 80128a0:	2301      	movs	r3, #1
 80128a2:	e0e9      	b.n	8012a78 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80128a4:	68fb      	ldr	r3, [r7, #12]
 80128a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128a8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80128aa:	68fb      	ldr	r3, [r7, #12]
 80128ac:	689b      	ldr	r3, [r3, #8]
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d102      	bne.n	80128b8 <f_write+0x122>
 80128b2:	68fb      	ldr	r3, [r7, #12]
 80128b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80128b6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80128b8:	68fb      	ldr	r3, [r7, #12]
 80128ba:	7d1b      	ldrb	r3, [r3, #20]
 80128bc:	b25b      	sxtb	r3, r3
 80128be:	2b00      	cmp	r3, #0
 80128c0:	da18      	bge.n	80128f4 <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80128c2:	693b      	ldr	r3, [r7, #16]
 80128c4:	7858      	ldrb	r0, [r3, #1]
 80128c6:	68fb      	ldr	r3, [r7, #12]
 80128c8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	6a1a      	ldr	r2, [r3, #32]
 80128d0:	2301      	movs	r3, #1
 80128d2:	f7fd ff47 	bl	8010764 <disk_write>
 80128d6:	4603      	mov	r3, r0
 80128d8:	2b00      	cmp	r3, #0
 80128da:	d004      	beq.n	80128e6 <f_write+0x150>
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	2201      	movs	r2, #1
 80128e0:	755a      	strb	r2, [r3, #21]
 80128e2:	2301      	movs	r3, #1
 80128e4:	e0c8      	b.n	8012a78 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80128e6:	68fb      	ldr	r3, [r7, #12]
 80128e8:	7d1b      	ldrb	r3, [r3, #20]
 80128ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80128ee:	b2da      	uxtb	r2, r3
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80128f4:	693a      	ldr	r2, [r7, #16]
 80128f6:	68fb      	ldr	r3, [r7, #12]
 80128f8:	69db      	ldr	r3, [r3, #28]
 80128fa:	4619      	mov	r1, r3
 80128fc:	4610      	mov	r0, r2
 80128fe:	f7fe fabb 	bl	8010e78 <clust2sect>
 8012902:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8012904:	697b      	ldr	r3, [r7, #20]
 8012906:	2b00      	cmp	r3, #0
 8012908:	d104      	bne.n	8012914 <f_write+0x17e>
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	2202      	movs	r2, #2
 801290e:	755a      	strb	r2, [r3, #21]
 8012910:	2302      	movs	r3, #2
 8012912:	e0b1      	b.n	8012a78 <f_write+0x2e2>
			sect += csect;
 8012914:	697a      	ldr	r2, [r7, #20]
 8012916:	69bb      	ldr	r3, [r7, #24]
 8012918:	4413      	add	r3, r2
 801291a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	0a5b      	lsrs	r3, r3, #9
 8012920:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8012922:	6a3b      	ldr	r3, [r7, #32]
 8012924:	2b00      	cmp	r3, #0
 8012926:	d03c      	beq.n	80129a2 <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8012928:	69ba      	ldr	r2, [r7, #24]
 801292a:	6a3b      	ldr	r3, [r7, #32]
 801292c:	4413      	add	r3, r2
 801292e:	693a      	ldr	r2, [r7, #16]
 8012930:	8952      	ldrh	r2, [r2, #10]
 8012932:	4293      	cmp	r3, r2
 8012934:	d905      	bls.n	8012942 <f_write+0x1ac>
					cc = fs->csize - csect;
 8012936:	693b      	ldr	r3, [r7, #16]
 8012938:	895b      	ldrh	r3, [r3, #10]
 801293a:	461a      	mov	r2, r3
 801293c:	69bb      	ldr	r3, [r7, #24]
 801293e:	1ad3      	subs	r3, r2, r3
 8012940:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8012942:	693b      	ldr	r3, [r7, #16]
 8012944:	7858      	ldrb	r0, [r3, #1]
 8012946:	6a3b      	ldr	r3, [r7, #32]
 8012948:	697a      	ldr	r2, [r7, #20]
 801294a:	69f9      	ldr	r1, [r7, #28]
 801294c:	f7fd ff0a 	bl	8010764 <disk_write>
 8012950:	4603      	mov	r3, r0
 8012952:	2b00      	cmp	r3, #0
 8012954:	d004      	beq.n	8012960 <f_write+0x1ca>
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	2201      	movs	r2, #1
 801295a:	755a      	strb	r2, [r3, #21]
 801295c:	2301      	movs	r3, #1
 801295e:	e08b      	b.n	8012a78 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	6a1a      	ldr	r2, [r3, #32]
 8012964:	697b      	ldr	r3, [r7, #20]
 8012966:	1ad3      	subs	r3, r2, r3
 8012968:	6a3a      	ldr	r2, [r7, #32]
 801296a:	429a      	cmp	r2, r3
 801296c:	d915      	bls.n	801299a <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8012974:	68fb      	ldr	r3, [r7, #12]
 8012976:	6a1a      	ldr	r2, [r3, #32]
 8012978:	697b      	ldr	r3, [r7, #20]
 801297a:	1ad3      	subs	r3, r2, r3
 801297c:	025b      	lsls	r3, r3, #9
 801297e:	69fa      	ldr	r2, [r7, #28]
 8012980:	4413      	add	r3, r2
 8012982:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012986:	4619      	mov	r1, r3
 8012988:	f7fd ffac 	bl	80108e4 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	7d1b      	ldrb	r3, [r3, #20]
 8012990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012994:	b2da      	uxtb	r2, r3
 8012996:	68fb      	ldr	r3, [r7, #12]
 8012998:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 801299a:	6a3b      	ldr	r3, [r7, #32]
 801299c:	025b      	lsls	r3, r3, #9
 801299e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80129a0:	e03f      	b.n	8012a22 <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	6a1b      	ldr	r3, [r3, #32]
 80129a6:	697a      	ldr	r2, [r7, #20]
 80129a8:	429a      	cmp	r2, r3
 80129aa:	d016      	beq.n	80129da <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80129ac:	68fb      	ldr	r3, [r7, #12]
 80129ae:	699a      	ldr	r2, [r3, #24]
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80129b4:	429a      	cmp	r2, r3
 80129b6:	d210      	bcs.n	80129da <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80129b8:	693b      	ldr	r3, [r7, #16]
 80129ba:	7858      	ldrb	r0, [r3, #1]
 80129bc:	68fb      	ldr	r3, [r7, #12]
 80129be:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80129c2:	2301      	movs	r3, #1
 80129c4:	697a      	ldr	r2, [r7, #20]
 80129c6:	f7fd fead 	bl	8010724 <disk_read>
 80129ca:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d004      	beq.n	80129da <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	2201      	movs	r2, #1
 80129d4:	755a      	strb	r2, [r3, #21]
 80129d6:	2301      	movs	r3, #1
 80129d8:	e04e      	b.n	8012a78 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	697a      	ldr	r2, [r7, #20]
 80129de:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	699b      	ldr	r3, [r3, #24]
 80129e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129e8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80129ec:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80129ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f0:	687b      	ldr	r3, [r7, #4]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d901      	bls.n	80129fa <f_write+0x264>
 80129f6:	687b      	ldr	r3, [r7, #4]
 80129f8:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80129fa:	68fb      	ldr	r3, [r7, #12]
 80129fc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	699b      	ldr	r3, [r3, #24]
 8012a04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a08:	4413      	add	r3, r2
 8012a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a0c:	69f9      	ldr	r1, [r7, #28]
 8012a0e:	4618      	mov	r0, r3
 8012a10:	f7fd ff68 	bl	80108e4 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	7d1b      	ldrb	r3, [r3, #20]
 8012a18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8012a1c:	b2da      	uxtb	r2, r3
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8012a22:	69fa      	ldr	r2, [r7, #28]
 8012a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a26:	4413      	add	r3, r2
 8012a28:	61fb      	str	r3, [r7, #28]
 8012a2a:	68fb      	ldr	r3, [r7, #12]
 8012a2c:	699a      	ldr	r2, [r3, #24]
 8012a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a30:	441a      	add	r2, r3
 8012a32:	68fb      	ldr	r3, [r7, #12]
 8012a34:	619a      	str	r2, [r3, #24]
 8012a36:	68fb      	ldr	r3, [r7, #12]
 8012a38:	68da      	ldr	r2, [r3, #12]
 8012a3a:	68fb      	ldr	r3, [r7, #12]
 8012a3c:	699b      	ldr	r3, [r3, #24]
 8012a3e:	429a      	cmp	r2, r3
 8012a40:	bf38      	it	cc
 8012a42:	461a      	movcc	r2, r3
 8012a44:	68fb      	ldr	r3, [r7, #12]
 8012a46:	60da      	str	r2, [r3, #12]
 8012a48:	683b      	ldr	r3, [r7, #0]
 8012a4a:	681a      	ldr	r2, [r3, #0]
 8012a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a4e:	441a      	add	r2, r3
 8012a50:	683b      	ldr	r3, [r7, #0]
 8012a52:	601a      	str	r2, [r3, #0]
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a58:	1ad3      	subs	r3, r2, r3
 8012a5a:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2b00      	cmp	r3, #0
 8012a60:	f47f aed4 	bne.w	801280c <f_write+0x76>
 8012a64:	e000      	b.n	8012a68 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8012a66:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	7d1b      	ldrb	r3, [r3, #20]
 8012a6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012a70:	b2da      	uxtb	r2, r3
 8012a72:	68fb      	ldr	r3, [r7, #12]
 8012a74:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8012a76:	2300      	movs	r3, #0
}
 8012a78:	4618      	mov	r0, r3
 8012a7a:	3730      	adds	r7, #48	; 0x30
 8012a7c:	46bd      	mov	sp, r7
 8012a7e:	bd80      	pop	{r7, pc}

08012a80 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8012a80:	b580      	push	{r7, lr}
 8012a82:	b086      	sub	sp, #24
 8012a84:	af00      	add	r7, sp, #0
 8012a86:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8012a88:	687b      	ldr	r3, [r7, #4]
 8012a8a:	f107 0208 	add.w	r2, r7, #8
 8012a8e:	4611      	mov	r1, r2
 8012a90:	4618      	mov	r0, r3
 8012a92:	f7ff fb07 	bl	80120a4 <validate>
 8012a96:	4603      	mov	r3, r0
 8012a98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012a9a:	7dfb      	ldrb	r3, [r7, #23]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d168      	bne.n	8012b72 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	7d1b      	ldrb	r3, [r3, #20]
 8012aa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d062      	beq.n	8012b72 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	7d1b      	ldrb	r3, [r3, #20]
 8012ab0:	b25b      	sxtb	r3, r3
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	da15      	bge.n	8012ae2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8012ab6:	68bb      	ldr	r3, [r7, #8]
 8012ab8:	7858      	ldrb	r0, [r3, #1]
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8012ac0:	687b      	ldr	r3, [r7, #4]
 8012ac2:	6a1a      	ldr	r2, [r3, #32]
 8012ac4:	2301      	movs	r3, #1
 8012ac6:	f7fd fe4d 	bl	8010764 <disk_write>
 8012aca:	4603      	mov	r3, r0
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d001      	beq.n	8012ad4 <f_sync+0x54>
 8012ad0:	2301      	movs	r3, #1
 8012ad2:	e04f      	b.n	8012b74 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	7d1b      	ldrb	r3, [r3, #20]
 8012ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012adc:	b2da      	uxtb	r2, r3
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8012ae2:	f7fa fcfd 	bl	800d4e0 <get_fattime>
 8012ae6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8012ae8:	68ba      	ldr	r2, [r7, #8]
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012aee:	4619      	mov	r1, r3
 8012af0:	4610      	mov	r0, r2
 8012af2:	f7fe f925 	bl	8010d40 <move_window>
 8012af6:	4603      	mov	r3, r0
 8012af8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8012afa:	7dfb      	ldrb	r3, [r7, #23]
 8012afc:	2b00      	cmp	r3, #0
 8012afe:	d138      	bne.n	8012b72 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012b04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8012b06:	68fb      	ldr	r3, [r7, #12]
 8012b08:	330b      	adds	r3, #11
 8012b0a:	781a      	ldrb	r2, [r3, #0]
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	330b      	adds	r3, #11
 8012b10:	f042 0220 	orr.w	r2, r2, #32
 8012b14:	b2d2      	uxtb	r2, r2
 8012b16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6818      	ldr	r0, [r3, #0]
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	461a      	mov	r2, r3
 8012b22:	68f9      	ldr	r1, [r7, #12]
 8012b24:	f7fe fe2a 	bl	801177c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8012b28:	68fb      	ldr	r3, [r7, #12]
 8012b2a:	f103 021c 	add.w	r2, r3, #28
 8012b2e:	687b      	ldr	r3, [r7, #4]
 8012b30:	68db      	ldr	r3, [r3, #12]
 8012b32:	4619      	mov	r1, r3
 8012b34:	4610      	mov	r0, r2
 8012b36:	f7fd fea9 	bl	801088c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8012b3a:	68fb      	ldr	r3, [r7, #12]
 8012b3c:	3316      	adds	r3, #22
 8012b3e:	6939      	ldr	r1, [r7, #16]
 8012b40:	4618      	mov	r0, r3
 8012b42:	f7fd fea3 	bl	801088c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	3312      	adds	r3, #18
 8012b4a:	2100      	movs	r1, #0
 8012b4c:	4618      	mov	r0, r3
 8012b4e:	f7fd fe82 	bl	8010856 <st_word>
					fs->wflag = 1;
 8012b52:	68bb      	ldr	r3, [r7, #8]
 8012b54:	2201      	movs	r2, #1
 8012b56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8012b58:	68bb      	ldr	r3, [r7, #8]
 8012b5a:	4618      	mov	r0, r3
 8012b5c:	f7fe f91e 	bl	8010d9c <sync_fs>
 8012b60:	4603      	mov	r3, r0
 8012b62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8012b64:	687b      	ldr	r3, [r7, #4]
 8012b66:	7d1b      	ldrb	r3, [r3, #20]
 8012b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8012b6c:	b2da      	uxtb	r2, r3
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8012b72:	7dfb      	ldrb	r3, [r7, #23]
}
 8012b74:	4618      	mov	r0, r3
 8012b76:	3718      	adds	r7, #24
 8012b78:	46bd      	mov	sp, r7
 8012b7a:	bd80      	pop	{r7, pc}

08012b7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8012b7c:	b580      	push	{r7, lr}
 8012b7e:	b084      	sub	sp, #16
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f7ff ff7b 	bl	8012a80 <f_sync>
 8012b8a:	4603      	mov	r3, r0
 8012b8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8012b8e:	7bfb      	ldrb	r3, [r7, #15]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d118      	bne.n	8012bc6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f107 0208 	add.w	r2, r7, #8
 8012b9a:	4611      	mov	r1, r2
 8012b9c:	4618      	mov	r0, r3
 8012b9e:	f7ff fa81 	bl	80120a4 <validate>
 8012ba2:	4603      	mov	r3, r0
 8012ba4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8012ba6:	7bfb      	ldrb	r3, [r7, #15]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	d10c      	bne.n	8012bc6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8012bac:	687b      	ldr	r3, [r7, #4]
 8012bae:	691b      	ldr	r3, [r3, #16]
 8012bb0:	4618      	mov	r0, r3
 8012bb2:	f7fe f821 	bl	8010bf8 <dec_lock>
 8012bb6:	4603      	mov	r3, r0
 8012bb8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8012bba:	7bfb      	ldrb	r3, [r7, #15]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d102      	bne.n	8012bc6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8012bc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8012bc8:	4618      	mov	r0, r3
 8012bca:	3710      	adds	r7, #16
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	bd80      	pop	{r7, pc}

08012bd0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8012bd0:	b480      	push	{r7}
 8012bd2:	b087      	sub	sp, #28
 8012bd4:	af00      	add	r7, sp, #0
 8012bd6:	60f8      	str	r0, [r7, #12]
 8012bd8:	60b9      	str	r1, [r7, #8]
 8012bda:	4613      	mov	r3, r2
 8012bdc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8012bde:	2301      	movs	r3, #1
 8012be0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8012be2:	2300      	movs	r3, #0
 8012be4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8012be6:	4b1f      	ldr	r3, [pc, #124]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012be8:	7a5b      	ldrb	r3, [r3, #9]
 8012bea:	b2db      	uxtb	r3, r3
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d131      	bne.n	8012c54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8012bf0:	4b1c      	ldr	r3, [pc, #112]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012bf2:	7a5b      	ldrb	r3, [r3, #9]
 8012bf4:	b2db      	uxtb	r3, r3
 8012bf6:	461a      	mov	r2, r3
 8012bf8:	4b1a      	ldr	r3, [pc, #104]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012bfa:	2100      	movs	r1, #0
 8012bfc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8012bfe:	4b19      	ldr	r3, [pc, #100]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c00:	7a5b      	ldrb	r3, [r3, #9]
 8012c02:	b2db      	uxtb	r3, r3
 8012c04:	4a17      	ldr	r2, [pc, #92]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c06:	009b      	lsls	r3, r3, #2
 8012c08:	4413      	add	r3, r2
 8012c0a:	68fa      	ldr	r2, [r7, #12]
 8012c0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8012c0e:	4b15      	ldr	r3, [pc, #84]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c10:	7a5b      	ldrb	r3, [r3, #9]
 8012c12:	b2db      	uxtb	r3, r3
 8012c14:	461a      	mov	r2, r3
 8012c16:	4b13      	ldr	r3, [pc, #76]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c18:	4413      	add	r3, r2
 8012c1a:	79fa      	ldrb	r2, [r7, #7]
 8012c1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8012c1e:	4b11      	ldr	r3, [pc, #68]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c20:	7a5b      	ldrb	r3, [r3, #9]
 8012c22:	b2db      	uxtb	r3, r3
 8012c24:	1c5a      	adds	r2, r3, #1
 8012c26:	b2d1      	uxtb	r1, r2
 8012c28:	4a0e      	ldr	r2, [pc, #56]	; (8012c64 <FATFS_LinkDriverEx+0x94>)
 8012c2a:	7251      	strb	r1, [r2, #9]
 8012c2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8012c2e:	7dbb      	ldrb	r3, [r7, #22]
 8012c30:	3330      	adds	r3, #48	; 0x30
 8012c32:	b2da      	uxtb	r2, r3
 8012c34:	68bb      	ldr	r3, [r7, #8]
 8012c36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	3301      	adds	r3, #1
 8012c3c:	223a      	movs	r2, #58	; 0x3a
 8012c3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8012c40:	68bb      	ldr	r3, [r7, #8]
 8012c42:	3302      	adds	r3, #2
 8012c44:	222f      	movs	r2, #47	; 0x2f
 8012c46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8012c48:	68bb      	ldr	r3, [r7, #8]
 8012c4a:	3303      	adds	r3, #3
 8012c4c:	2200      	movs	r2, #0
 8012c4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8012c50:	2300      	movs	r3, #0
 8012c52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8012c54:	7dfb      	ldrb	r3, [r7, #23]
}
 8012c56:	4618      	mov	r0, r3
 8012c58:	371c      	adds	r7, #28
 8012c5a:	46bd      	mov	sp, r7
 8012c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c60:	4770      	bx	lr
 8012c62:	bf00      	nop
 8012c64:	2404022c 	.word	0x2404022c

08012c68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b082      	sub	sp, #8
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8012c72:	2200      	movs	r2, #0
 8012c74:	6839      	ldr	r1, [r7, #0]
 8012c76:	6878      	ldr	r0, [r7, #4]
 8012c78:	f7ff ffaa 	bl	8012bd0 <FATFS_LinkDriverEx>
 8012c7c:	4603      	mov	r3, r0
}
 8012c7e:	4618      	mov	r0, r3
 8012c80:	3708      	adds	r7, #8
 8012c82:	46bd      	mov	sp, r7
 8012c84:	bd80      	pop	{r7, pc}
	...

08012c88 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8012c88:	b580      	push	{r7, lr}
 8012c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	4913      	ldr	r1, [pc, #76]	; (8012cdc <MX_USB_DEVICE_Init+0x54>)
 8012c90:	4813      	ldr	r0, [pc, #76]	; (8012ce0 <MX_USB_DEVICE_Init+0x58>)
 8012c92:	f7fc fc20 	bl	800f4d6 <USBD_Init>
 8012c96:	4603      	mov	r3, r0
 8012c98:	2b00      	cmp	r3, #0
 8012c9a:	d001      	beq.n	8012ca0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8012c9c:	f7ee f9d8 	bl	8001050 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8012ca0:	4910      	ldr	r1, [pc, #64]	; (8012ce4 <MX_USB_DEVICE_Init+0x5c>)
 8012ca2:	480f      	ldr	r0, [pc, #60]	; (8012ce0 <MX_USB_DEVICE_Init+0x58>)
 8012ca4:	f7fc fc4d 	bl	800f542 <USBD_RegisterClass>
 8012ca8:	4603      	mov	r3, r0
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d001      	beq.n	8012cb2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8012cae:	f7ee f9cf 	bl	8001050 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 8012cb2:	490d      	ldr	r1, [pc, #52]	; (8012ce8 <MX_USB_DEVICE_Init+0x60>)
 8012cb4:	480a      	ldr	r0, [pc, #40]	; (8012ce0 <MX_USB_DEVICE_Init+0x58>)
 8012cb6:	f7fa fff7 	bl	800dca8 <USBD_MSC_RegisterStorage>
 8012cba:	4603      	mov	r3, r0
 8012cbc:	2b00      	cmp	r3, #0
 8012cbe:	d001      	beq.n	8012cc4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8012cc0:	f7ee f9c6 	bl	8001050 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8012cc4:	4806      	ldr	r0, [pc, #24]	; (8012ce0 <MX_USB_DEVICE_Init+0x58>)
 8012cc6:	f7fc fc5d 	bl	800f584 <USBD_Start>
 8012cca:	4603      	mov	r3, r0
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d001      	beq.n	8012cd4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8012cd0:	f7ee f9be 	bl	8001050 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 8012cd4:	f7f2 fb36 	bl	8005344 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8012cd8:	bf00      	nop
 8012cda:	bd80      	pop	{r7, pc}
 8012cdc:	240000f8 	.word	0x240000f8
 8012ce0:	24041178 	.word	0x24041178
 8012ce4:	24000010 	.word	0x24000010
 8012ce8:	24000148 	.word	0x24000148

08012cec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012cec:	b480      	push	{r7}
 8012cee:	b083      	sub	sp, #12
 8012cf0:	af00      	add	r7, sp, #0
 8012cf2:	4603      	mov	r3, r0
 8012cf4:	6039      	str	r1, [r7, #0]
 8012cf6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	2212      	movs	r2, #18
 8012cfc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8012cfe:	4b03      	ldr	r3, [pc, #12]	; (8012d0c <USBD_FS_DeviceDescriptor+0x20>)
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	370c      	adds	r7, #12
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	24000114 	.word	0x24000114

08012d10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d10:	b480      	push	{r7}
 8012d12:	b083      	sub	sp, #12
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	4603      	mov	r3, r0
 8012d18:	6039      	str	r1, [r7, #0]
 8012d1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	2204      	movs	r2, #4
 8012d20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8012d22:	4b03      	ldr	r3, [pc, #12]	; (8012d30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8012d24:	4618      	mov	r0, r3
 8012d26:	370c      	adds	r7, #12
 8012d28:	46bd      	mov	sp, r7
 8012d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d2e:	4770      	bx	lr
 8012d30:	24000128 	.word	0x24000128

08012d34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d34:	b580      	push	{r7, lr}
 8012d36:	b082      	sub	sp, #8
 8012d38:	af00      	add	r7, sp, #0
 8012d3a:	4603      	mov	r3, r0
 8012d3c:	6039      	str	r1, [r7, #0]
 8012d3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012d40:	79fb      	ldrb	r3, [r7, #7]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d105      	bne.n	8012d52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012d46:	683a      	ldr	r2, [r7, #0]
 8012d48:	4907      	ldr	r1, [pc, #28]	; (8012d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8012d4a:	4808      	ldr	r0, [pc, #32]	; (8012d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8012d4c:	f7fd fbe7 	bl	801051e <USBD_GetString>
 8012d50:	e004      	b.n	8012d5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8012d52:	683a      	ldr	r2, [r7, #0]
 8012d54:	4904      	ldr	r1, [pc, #16]	; (8012d68 <USBD_FS_ProductStrDescriptor+0x34>)
 8012d56:	4805      	ldr	r0, [pc, #20]	; (8012d6c <USBD_FS_ProductStrDescriptor+0x38>)
 8012d58:	f7fd fbe1 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012d5c:	4b02      	ldr	r3, [pc, #8]	; (8012d68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8012d5e:	4618      	mov	r0, r3
 8012d60:	3708      	adds	r7, #8
 8012d62:	46bd      	mov	sp, r7
 8012d64:	bd80      	pop	{r7, pc}
 8012d66:	bf00      	nop
 8012d68:	24041448 	.word	0x24041448
 8012d6c:	08014054 	.word	0x08014054

08012d70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d70:	b580      	push	{r7, lr}
 8012d72:	b082      	sub	sp, #8
 8012d74:	af00      	add	r7, sp, #0
 8012d76:	4603      	mov	r3, r0
 8012d78:	6039      	str	r1, [r7, #0]
 8012d7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8012d7c:	683a      	ldr	r2, [r7, #0]
 8012d7e:	4904      	ldr	r1, [pc, #16]	; (8012d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8012d80:	4804      	ldr	r0, [pc, #16]	; (8012d94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8012d82:	f7fd fbcc 	bl	801051e <USBD_GetString>
  return USBD_StrDesc;
 8012d86:	4b02      	ldr	r3, [pc, #8]	; (8012d90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8012d88:	4618      	mov	r0, r3
 8012d8a:	3708      	adds	r7, #8
 8012d8c:	46bd      	mov	sp, r7
 8012d8e:	bd80      	pop	{r7, pc}
 8012d90:	24041448 	.word	0x24041448
 8012d94:	08014068 	.word	0x08014068

08012d98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b082      	sub	sp, #8
 8012d9c:	af00      	add	r7, sp, #0
 8012d9e:	4603      	mov	r3, r0
 8012da0:	6039      	str	r1, [r7, #0]
 8012da2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8012da4:	683b      	ldr	r3, [r7, #0]
 8012da6:	221a      	movs	r2, #26
 8012da8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8012daa:	f000 f843 	bl	8012e34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8012dae:	4b02      	ldr	r3, [pc, #8]	; (8012db8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8012db0:	4618      	mov	r0, r3
 8012db2:	3708      	adds	r7, #8
 8012db4:	46bd      	mov	sp, r7
 8012db6:	bd80      	pop	{r7, pc}
 8012db8:	2400012c 	.word	0x2400012c

08012dbc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	6039      	str	r1, [r7, #0]
 8012dc6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8012dc8:	79fb      	ldrb	r3, [r7, #7]
 8012dca:	2b00      	cmp	r3, #0
 8012dcc:	d105      	bne.n	8012dda <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012dce:	683a      	ldr	r2, [r7, #0]
 8012dd0:	4907      	ldr	r1, [pc, #28]	; (8012df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012dd2:	4808      	ldr	r0, [pc, #32]	; (8012df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012dd4:	f7fd fba3 	bl	801051e <USBD_GetString>
 8012dd8:	e004      	b.n	8012de4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8012dda:	683a      	ldr	r2, [r7, #0]
 8012ddc:	4904      	ldr	r1, [pc, #16]	; (8012df0 <USBD_FS_ConfigStrDescriptor+0x34>)
 8012dde:	4805      	ldr	r0, [pc, #20]	; (8012df4 <USBD_FS_ConfigStrDescriptor+0x38>)
 8012de0:	f7fd fb9d 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012de4:	4b02      	ldr	r3, [pc, #8]	; (8012df0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3708      	adds	r7, #8
 8012dea:	46bd      	mov	sp, r7
 8012dec:	bd80      	pop	{r7, pc}
 8012dee:	bf00      	nop
 8012df0:	24041448 	.word	0x24041448
 8012df4:	0801407c 	.word	0x0801407c

08012df8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
 8012dfe:	4603      	mov	r3, r0
 8012e00:	6039      	str	r1, [r7, #0]
 8012e02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8012e04:	79fb      	ldrb	r3, [r7, #7]
 8012e06:	2b00      	cmp	r3, #0
 8012e08:	d105      	bne.n	8012e16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012e0a:	683a      	ldr	r2, [r7, #0]
 8012e0c:	4907      	ldr	r1, [pc, #28]	; (8012e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012e0e:	4808      	ldr	r0, [pc, #32]	; (8012e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012e10:	f7fd fb85 	bl	801051e <USBD_GetString>
 8012e14:	e004      	b.n	8012e20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8012e16:	683a      	ldr	r2, [r7, #0]
 8012e18:	4904      	ldr	r1, [pc, #16]	; (8012e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8012e1a:	4805      	ldr	r0, [pc, #20]	; (8012e30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8012e1c:	f7fd fb7f 	bl	801051e <USBD_GetString>
  }
  return USBD_StrDesc;
 8012e20:	4b02      	ldr	r3, [pc, #8]	; (8012e2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8012e22:	4618      	mov	r0, r3
 8012e24:	3708      	adds	r7, #8
 8012e26:	46bd      	mov	sp, r7
 8012e28:	bd80      	pop	{r7, pc}
 8012e2a:	bf00      	nop
 8012e2c:	24041448 	.word	0x24041448
 8012e30:	08014088 	.word	0x08014088

08012e34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8012e34:	b580      	push	{r7, lr}
 8012e36:	b084      	sub	sp, #16
 8012e38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8012e3a:	4b0f      	ldr	r3, [pc, #60]	; (8012e78 <Get_SerialNum+0x44>)
 8012e3c:	681b      	ldr	r3, [r3, #0]
 8012e3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8012e40:	4b0e      	ldr	r3, [pc, #56]	; (8012e7c <Get_SerialNum+0x48>)
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8012e46:	4b0e      	ldr	r3, [pc, #56]	; (8012e80 <Get_SerialNum+0x4c>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8012e4c:	68fa      	ldr	r2, [r7, #12]
 8012e4e:	687b      	ldr	r3, [r7, #4]
 8012e50:	4413      	add	r3, r2
 8012e52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8012e54:	68fb      	ldr	r3, [r7, #12]
 8012e56:	2b00      	cmp	r3, #0
 8012e58:	d009      	beq.n	8012e6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8012e5a:	2208      	movs	r2, #8
 8012e5c:	4909      	ldr	r1, [pc, #36]	; (8012e84 <Get_SerialNum+0x50>)
 8012e5e:	68f8      	ldr	r0, [r7, #12]
 8012e60:	f000 f814 	bl	8012e8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8012e64:	2204      	movs	r2, #4
 8012e66:	4908      	ldr	r1, [pc, #32]	; (8012e88 <Get_SerialNum+0x54>)
 8012e68:	68b8      	ldr	r0, [r7, #8]
 8012e6a:	f000 f80f 	bl	8012e8c <IntToUnicode>
  }
}
 8012e6e:	bf00      	nop
 8012e70:	3710      	adds	r7, #16
 8012e72:	46bd      	mov	sp, r7
 8012e74:	bd80      	pop	{r7, pc}
 8012e76:	bf00      	nop
 8012e78:	1ff1e800 	.word	0x1ff1e800
 8012e7c:	1ff1e804 	.word	0x1ff1e804
 8012e80:	1ff1e808 	.word	0x1ff1e808
 8012e84:	2400012e 	.word	0x2400012e
 8012e88:	2400013e 	.word	0x2400013e

08012e8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b087      	sub	sp, #28
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	60f8      	str	r0, [r7, #12]
 8012e94:	60b9      	str	r1, [r7, #8]
 8012e96:	4613      	mov	r3, r2
 8012e98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8012e9a:	2300      	movs	r3, #0
 8012e9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	75fb      	strb	r3, [r7, #23]
 8012ea2:	e027      	b.n	8012ef4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	0f1b      	lsrs	r3, r3, #28
 8012ea8:	2b09      	cmp	r3, #9
 8012eaa:	d80b      	bhi.n	8012ec4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	0f1b      	lsrs	r3, r3, #28
 8012eb0:	b2da      	uxtb	r2, r3
 8012eb2:	7dfb      	ldrb	r3, [r7, #23]
 8012eb4:	005b      	lsls	r3, r3, #1
 8012eb6:	4619      	mov	r1, r3
 8012eb8:	68bb      	ldr	r3, [r7, #8]
 8012eba:	440b      	add	r3, r1
 8012ebc:	3230      	adds	r2, #48	; 0x30
 8012ebe:	b2d2      	uxtb	r2, r2
 8012ec0:	701a      	strb	r2, [r3, #0]
 8012ec2:	e00a      	b.n	8012eda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8012ec4:	68fb      	ldr	r3, [r7, #12]
 8012ec6:	0f1b      	lsrs	r3, r3, #28
 8012ec8:	b2da      	uxtb	r2, r3
 8012eca:	7dfb      	ldrb	r3, [r7, #23]
 8012ecc:	005b      	lsls	r3, r3, #1
 8012ece:	4619      	mov	r1, r3
 8012ed0:	68bb      	ldr	r3, [r7, #8]
 8012ed2:	440b      	add	r3, r1
 8012ed4:	3237      	adds	r2, #55	; 0x37
 8012ed6:	b2d2      	uxtb	r2, r2
 8012ed8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	011b      	lsls	r3, r3, #4
 8012ede:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8012ee0:	7dfb      	ldrb	r3, [r7, #23]
 8012ee2:	005b      	lsls	r3, r3, #1
 8012ee4:	3301      	adds	r3, #1
 8012ee6:	68ba      	ldr	r2, [r7, #8]
 8012ee8:	4413      	add	r3, r2
 8012eea:	2200      	movs	r2, #0
 8012eec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8012eee:	7dfb      	ldrb	r3, [r7, #23]
 8012ef0:	3301      	adds	r3, #1
 8012ef2:	75fb      	strb	r3, [r7, #23]
 8012ef4:	7dfa      	ldrb	r2, [r7, #23]
 8012ef6:	79fb      	ldrb	r3, [r7, #7]
 8012ef8:	429a      	cmp	r2, r3
 8012efa:	d3d3      	bcc.n	8012ea4 <IntToUnicode+0x18>
  }
}
 8012efc:	bf00      	nop
 8012efe:	371c      	adds	r7, #28
 8012f00:	46bd      	mov	sp, r7
 8012f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f06:	4770      	bx	lr

08012f08 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8012f08:	b480      	push	{r7}
 8012f0a:	b083      	sub	sp, #12
 8012f0c:	af00      	add	r7, sp, #0
 8012f0e:	4603      	mov	r3, r0
 8012f10:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8012f12:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8012f14:	4618      	mov	r0, r3
 8012f16:	370c      	adds	r7, #12
 8012f18:	46bd      	mov	sp, r7
 8012f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f1e:	4770      	bx	lr

08012f20 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8012f20:	b580      	push	{r7, lr}
 8012f22:	b08e      	sub	sp, #56	; 0x38
 8012f24:	af00      	add	r7, sp, #0
 8012f26:	4603      	mov	r3, r0
 8012f28:	60b9      	str	r1, [r7, #8]
 8012f2a:	607a      	str	r2, [r7, #4]
 8012f2c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8012f2e:	23ff      	movs	r3, #255	; 0xff
 8012f30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8012f34:	f107 0310 	add.w	r3, r7, #16
 8012f38:	4619      	mov	r1, r3
 8012f3a:	480a      	ldr	r0, [pc, #40]	; (8012f64 <STORAGE_GetCapacity_FS+0x44>)
 8012f3c:	f7f6 fa48 	bl	80093d0 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8012f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012f42:	1e5a      	subs	r2, r3, #1
 8012f44:	68bb      	ldr	r3, [r7, #8]
 8012f46:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8012f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f4a:	b29a      	uxth	r2, r3
 8012f4c:	687b      	ldr	r3, [r7, #4]
 8012f4e:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8012f50:	2300      	movs	r3, #0
 8012f52:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8012f56:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8012f5a:	4618      	mov	r0, r3
 8012f5c:	3738      	adds	r7, #56	; 0x38
 8012f5e:	46bd      	mov	sp, r7
 8012f60:	bd80      	pop	{r7, pc}
 8012f62:	bf00      	nop
 8012f64:	24040574 	.word	0x24040574

08012f68 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8012f68:	b480      	push	{r7}
 8012f6a:	b083      	sub	sp, #12
 8012f6c:	af00      	add	r7, sp, #0
 8012f6e:	4603      	mov	r3, r0
 8012f70:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8012f72:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8012f74:	4618      	mov	r0, r3
 8012f76:	370c      	adds	r7, #12
 8012f78:	46bd      	mov	sp, r7
 8012f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f7e:	4770      	bx	lr

08012f80 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8012f80:	b480      	push	{r7}
 8012f82:	b083      	sub	sp, #12
 8012f84:	af00      	add	r7, sp, #0
 8012f86:	4603      	mov	r3, r0
 8012f88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8012f8a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8012f8c:	4618      	mov	r0, r3
 8012f8e:	370c      	adds	r7, #12
 8012f90:	46bd      	mov	sp, r7
 8012f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f96:	4770      	bx	lr

08012f98 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012f98:	b580      	push	{r7, lr}
 8012f9a:	b088      	sub	sp, #32
 8012f9c:	af02      	add	r7, sp, #8
 8012f9e:	60b9      	str	r1, [r7, #8]
 8012fa0:	607a      	str	r2, [r7, #4]
 8012fa2:	461a      	mov	r2, r3
 8012fa4:	4603      	mov	r3, r0
 8012fa6:	73fb      	strb	r3, [r7, #15]
 8012fa8:	4613      	mov	r3, r2
 8012faa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8012fac:	23ff      	movs	r3, #255	; 0xff
 8012fae:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8012fb0:	89ba      	ldrh	r2, [r7, #12]
 8012fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8012fb6:	9300      	str	r3, [sp, #0]
 8012fb8:	4613      	mov	r3, r2
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	68b9      	ldr	r1, [r7, #8]
 8012fbe:	4809      	ldr	r0, [pc, #36]	; (8012fe4 <STORAGE_Read_FS+0x4c>)
 8012fc0:	f7f5 f978 	bl	80082b4 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8012fc4:	bf00      	nop
 8012fc6:	4807      	ldr	r0, [pc, #28]	; (8012fe4 <STORAGE_Read_FS+0x4c>)
 8012fc8:	f7f6 fad8 	bl	800957c <HAL_SD_GetCardState>
 8012fcc:	4603      	mov	r3, r0
 8012fce:	2b04      	cmp	r3, #4
 8012fd0:	d1f9      	bne.n	8012fc6 <STORAGE_Read_FS+0x2e>
	ret = 0;
 8012fd2:	2300      	movs	r3, #0
 8012fd4:	75fb      	strb	r3, [r7, #23]
	return ret;
 8012fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8012fda:	4618      	mov	r0, r3
 8012fdc:	3718      	adds	r7, #24
 8012fde:	46bd      	mov	sp, r7
 8012fe0:	bd80      	pop	{r7, pc}
 8012fe2:	bf00      	nop
 8012fe4:	24040574 	.word	0x24040574

08012fe8 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8012fe8:	b580      	push	{r7, lr}
 8012fea:	b088      	sub	sp, #32
 8012fec:	af02      	add	r7, sp, #8
 8012fee:	60b9      	str	r1, [r7, #8]
 8012ff0:	607a      	str	r2, [r7, #4]
 8012ff2:	461a      	mov	r2, r3
 8012ff4:	4603      	mov	r3, r0
 8012ff6:	73fb      	strb	r3, [r7, #15]
 8012ff8:	4613      	mov	r3, r2
 8012ffa:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8012ffc:	23ff      	movs	r3, #255	; 0xff
 8012ffe:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8013000:	89ba      	ldrh	r2, [r7, #12]
 8013002:	f04f 33ff 	mov.w	r3, #4294967295
 8013006:	9300      	str	r3, [sp, #0]
 8013008:	4613      	mov	r3, r2
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	68b9      	ldr	r1, [r7, #8]
 801300e:	4809      	ldr	r0, [pc, #36]	; (8013034 <STORAGE_Write_FS+0x4c>)
 8013010:	f7f5 fada 	bl	80085c8 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8013014:	bf00      	nop
 8013016:	4807      	ldr	r0, [pc, #28]	; (8013034 <STORAGE_Write_FS+0x4c>)
 8013018:	f7f6 fab0 	bl	800957c <HAL_SD_GetCardState>
 801301c:	4603      	mov	r3, r0
 801301e:	2b04      	cmp	r3, #4
 8013020:	d1f9      	bne.n	8013016 <STORAGE_Write_FS+0x2e>
	ret = 0;
 8013022:	2300      	movs	r3, #0
 8013024:	75fb      	strb	r3, [r7, #23]
	return ret;
 8013026:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 801302a:	4618      	mov	r0, r3
 801302c:	3718      	adds	r7, #24
 801302e:	46bd      	mov	sp, r7
 8013030:	bd80      	pop	{r7, pc}
 8013032:	bf00      	nop
 8013034:	24040574 	.word	0x24040574

08013038 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8013038:	b480      	push	{r7}
 801303a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 801303c:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801303e:	4618      	mov	r0, r3
 8013040:	46bd      	mov	sp, r7
 8013042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013046:	4770      	bx	lr

08013048 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	b08a      	sub	sp, #40	; 0x28
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013050:	f107 0314 	add.w	r3, r7, #20
 8013054:	2200      	movs	r2, #0
 8013056:	601a      	str	r2, [r3, #0]
 8013058:	605a      	str	r2, [r3, #4]
 801305a:	609a      	str	r2, [r3, #8]
 801305c:	60da      	str	r2, [r3, #12]
 801305e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	681b      	ldr	r3, [r3, #0]
 8013064:	4a1e      	ldr	r2, [pc, #120]	; (80130e0 <HAL_PCD_MspInit+0x98>)
 8013066:	4293      	cmp	r3, r2
 8013068:	d136      	bne.n	80130d8 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801306a:	4b1e      	ldr	r3, [pc, #120]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 801306c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013070:	4a1c      	ldr	r2, [pc, #112]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 8013072:	f043 0301 	orr.w	r3, r3, #1
 8013076:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 801307a:	4b1a      	ldr	r3, [pc, #104]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 801307c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8013080:	f003 0301 	and.w	r3, r3, #1
 8013084:	613b      	str	r3, [r7, #16]
 8013086:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013088:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 801308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801308e:	2302      	movs	r3, #2
 8013090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013092:	2300      	movs	r3, #0
 8013094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013096:	2300      	movs	r3, #0
 8013098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801309a:	230a      	movs	r3, #10
 801309c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801309e:	f107 0314 	add.w	r3, r7, #20
 80130a2:	4619      	mov	r1, r3
 80130a4:	4810      	ldr	r0, [pc, #64]	; (80130e8 <HAL_PCD_MspInit+0xa0>)
 80130a6:	f7f0 fd27 	bl	8003af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80130aa:	4b0e      	ldr	r3, [pc, #56]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 80130ac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80130b0:	4a0c      	ldr	r2, [pc, #48]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 80130b2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80130b6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80130ba:	4b0a      	ldr	r3, [pc, #40]	; (80130e4 <HAL_PCD_MspInit+0x9c>)
 80130bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80130c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80130c4:	60fb      	str	r3, [r7, #12]
 80130c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80130c8:	2200      	movs	r2, #0
 80130ca:	2100      	movs	r1, #0
 80130cc:	2065      	movs	r0, #101	; 0x65
 80130ce:	f7ee fcb4 	bl	8001a3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80130d2:	2065      	movs	r0, #101	; 0x65
 80130d4:	f7ee fccb 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80130d8:	bf00      	nop
 80130da:	3728      	adds	r7, #40	; 0x28
 80130dc:	46bd      	mov	sp, r7
 80130de:	bd80      	pop	{r7, pc}
 80130e0:	40080000 	.word	0x40080000
 80130e4:	58024400 	.word	0x58024400
 80130e8:	58020000 	.word	0x58020000

080130ec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b082      	sub	sp, #8
 80130f0:	af00      	add	r7, sp, #0
 80130f2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80130f4:	687b      	ldr	r3, [r7, #4]
 80130f6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8013100:	4619      	mov	r1, r3
 8013102:	4610      	mov	r0, r2
 8013104:	f7fc fa89 	bl	800f61a <USBD_LL_SetupStage>
}
 8013108:	bf00      	nop
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}

08013110 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013110:	b580      	push	{r7, lr}
 8013112:	b082      	sub	sp, #8
 8013114:	af00      	add	r7, sp, #0
 8013116:	6078      	str	r0, [r7, #4]
 8013118:	460b      	mov	r3, r1
 801311a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013122:	78fa      	ldrb	r2, [r7, #3]
 8013124:	6879      	ldr	r1, [r7, #4]
 8013126:	4613      	mov	r3, r2
 8013128:	00db      	lsls	r3, r3, #3
 801312a:	1a9b      	subs	r3, r3, r2
 801312c:	009b      	lsls	r3, r3, #2
 801312e:	440b      	add	r3, r1
 8013130:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8013134:	681a      	ldr	r2, [r3, #0]
 8013136:	78fb      	ldrb	r3, [r7, #3]
 8013138:	4619      	mov	r1, r3
 801313a:	f7fc fac1 	bl	800f6c0 <USBD_LL_DataOutStage>
}
 801313e:	bf00      	nop
 8013140:	3708      	adds	r7, #8
 8013142:	46bd      	mov	sp, r7
 8013144:	bd80      	pop	{r7, pc}

08013146 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013146:	b580      	push	{r7, lr}
 8013148:	b082      	sub	sp, #8
 801314a:	af00      	add	r7, sp, #0
 801314c:	6078      	str	r0, [r7, #4]
 801314e:	460b      	mov	r3, r1
 8013150:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8013158:	78fa      	ldrb	r2, [r7, #3]
 801315a:	6879      	ldr	r1, [r7, #4]
 801315c:	4613      	mov	r3, r2
 801315e:	00db      	lsls	r3, r3, #3
 8013160:	1a9b      	subs	r3, r3, r2
 8013162:	009b      	lsls	r3, r3, #2
 8013164:	440b      	add	r3, r1
 8013166:	3348      	adds	r3, #72	; 0x48
 8013168:	681a      	ldr	r2, [r3, #0]
 801316a:	78fb      	ldrb	r3, [r7, #3]
 801316c:	4619      	mov	r1, r3
 801316e:	f7fc fb0a 	bl	800f786 <USBD_LL_DataInStage>
}
 8013172:	bf00      	nop
 8013174:	3708      	adds	r7, #8
 8013176:	46bd      	mov	sp, r7
 8013178:	bd80      	pop	{r7, pc}

0801317a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801317a:	b580      	push	{r7, lr}
 801317c:	b082      	sub	sp, #8
 801317e:	af00      	add	r7, sp, #0
 8013180:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013188:	4618      	mov	r0, r3
 801318a:	f7fc fc0e 	bl	800f9aa <USBD_LL_SOF>
}
 801318e:	bf00      	nop
 8013190:	3708      	adds	r7, #8
 8013192:	46bd      	mov	sp, r7
 8013194:	bd80      	pop	{r7, pc}

08013196 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013196:	b580      	push	{r7, lr}
 8013198:	b084      	sub	sp, #16
 801319a:	af00      	add	r7, sp, #0
 801319c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801319e:	2301      	movs	r3, #1
 80131a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	68db      	ldr	r3, [r3, #12]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d102      	bne.n	80131b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80131aa:	2300      	movs	r3, #0
 80131ac:	73fb      	strb	r3, [r7, #15]
 80131ae:	e008      	b.n	80131c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80131b0:	687b      	ldr	r3, [r7, #4]
 80131b2:	68db      	ldr	r3, [r3, #12]
 80131b4:	2b02      	cmp	r3, #2
 80131b6:	d102      	bne.n	80131be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80131b8:	2301      	movs	r3, #1
 80131ba:	73fb      	strb	r3, [r7, #15]
 80131bc:	e001      	b.n	80131c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80131be:	f7ed ff47 	bl	8001050 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80131c2:	687b      	ldr	r3, [r7, #4]
 80131c4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80131c8:	7bfa      	ldrb	r2, [r7, #15]
 80131ca:	4611      	mov	r1, r2
 80131cc:	4618      	mov	r0, r3
 80131ce:	f7fc fbb1 	bl	800f934 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80131d2:	687b      	ldr	r3, [r7, #4]
 80131d4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80131d8:	4618      	mov	r0, r3
 80131da:	f7fc fb6a 	bl	800f8b2 <USBD_LL_Reset>
}
 80131de:	bf00      	nop
 80131e0:	3710      	adds	r7, #16
 80131e2:	46bd      	mov	sp, r7
 80131e4:	bd80      	pop	{r7, pc}
	...

080131e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80131e8:	b580      	push	{r7, lr}
 80131ea:	b082      	sub	sp, #8
 80131ec:	af00      	add	r7, sp, #0
 80131ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80131f6:	4618      	mov	r0, r3
 80131f8:	f7fc fbac 	bl	800f954 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	681b      	ldr	r3, [r3, #0]
 8013200:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8013204:	681b      	ldr	r3, [r3, #0]
 8013206:	687a      	ldr	r2, [r7, #4]
 8013208:	6812      	ldr	r2, [r2, #0]
 801320a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801320e:	f043 0301 	orr.w	r3, r3, #1
 8013212:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	6a1b      	ldr	r3, [r3, #32]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d005      	beq.n	8013228 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801321c:	4b04      	ldr	r3, [pc, #16]	; (8013230 <HAL_PCD_SuspendCallback+0x48>)
 801321e:	691b      	ldr	r3, [r3, #16]
 8013220:	4a03      	ldr	r2, [pc, #12]	; (8013230 <HAL_PCD_SuspendCallback+0x48>)
 8013222:	f043 0306 	orr.w	r3, r3, #6
 8013226:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8013228:	bf00      	nop
 801322a:	3708      	adds	r7, #8
 801322c:	46bd      	mov	sp, r7
 801322e:	bd80      	pop	{r7, pc}
 8013230:	e000ed00 	.word	0xe000ed00

08013234 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b082      	sub	sp, #8
 8013238:	af00      	add	r7, sp, #0
 801323a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013242:	4618      	mov	r0, r3
 8013244:	f7fc fb9b 	bl	800f97e <USBD_LL_Resume>
}
 8013248:	bf00      	nop
 801324a:	3708      	adds	r7, #8
 801324c:	46bd      	mov	sp, r7
 801324e:	bd80      	pop	{r7, pc}

08013250 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	460b      	mov	r3, r1
 801325a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013262:	78fa      	ldrb	r2, [r7, #3]
 8013264:	4611      	mov	r1, r2
 8013266:	4618      	mov	r0, r3
 8013268:	f7fc fbc6 	bl	800f9f8 <USBD_LL_IsoOUTIncomplete>
}
 801326c:	bf00      	nop
 801326e:	3708      	adds	r7, #8
 8013270:	46bd      	mov	sp, r7
 8013272:	bd80      	pop	{r7, pc}

08013274 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013274:	b580      	push	{r7, lr}
 8013276:	b082      	sub	sp, #8
 8013278:	af00      	add	r7, sp, #0
 801327a:	6078      	str	r0, [r7, #4]
 801327c:	460b      	mov	r3, r1
 801327e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8013286:	78fa      	ldrb	r2, [r7, #3]
 8013288:	4611      	mov	r1, r2
 801328a:	4618      	mov	r0, r3
 801328c:	f7fc fba7 	bl	800f9de <USBD_LL_IsoINIncomplete>
}
 8013290:	bf00      	nop
 8013292:	3708      	adds	r7, #8
 8013294:	46bd      	mov	sp, r7
 8013296:	bd80      	pop	{r7, pc}

08013298 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013298:	b580      	push	{r7, lr}
 801329a:	b082      	sub	sp, #8
 801329c:	af00      	add	r7, sp, #0
 801329e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80132a6:	4618      	mov	r0, r3
 80132a8:	f7fc fbb3 	bl	800fa12 <USBD_LL_DevConnected>
}
 80132ac:	bf00      	nop
 80132ae:	3708      	adds	r7, #8
 80132b0:	46bd      	mov	sp, r7
 80132b2:	bd80      	pop	{r7, pc}

080132b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80132b4:	b580      	push	{r7, lr}
 80132b6:	b082      	sub	sp, #8
 80132b8:	af00      	add	r7, sp, #0
 80132ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80132bc:	687b      	ldr	r3, [r7, #4]
 80132be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80132c2:	4618      	mov	r0, r3
 80132c4:	f7fc fbb0 	bl	800fa28 <USBD_LL_DevDisconnected>
}
 80132c8:	bf00      	nop
 80132ca:	3708      	adds	r7, #8
 80132cc:	46bd      	mov	sp, r7
 80132ce:	bd80      	pop	{r7, pc}

080132d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80132d0:	b580      	push	{r7, lr}
 80132d2:	b082      	sub	sp, #8
 80132d4:	af00      	add	r7, sp, #0
 80132d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	781b      	ldrb	r3, [r3, #0]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d13e      	bne.n	801335e <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80132e0:	4a21      	ldr	r2, [pc, #132]	; (8013368 <USBD_LL_Init+0x98>)
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	4a1f      	ldr	r2, [pc, #124]	; (8013368 <USBD_LL_Init+0x98>)
 80132ec:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80132f0:	4b1d      	ldr	r3, [pc, #116]	; (8013368 <USBD_LL_Init+0x98>)
 80132f2:	4a1e      	ldr	r2, [pc, #120]	; (801336c <USBD_LL_Init+0x9c>)
 80132f4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80132f6:	4b1c      	ldr	r3, [pc, #112]	; (8013368 <USBD_LL_Init+0x98>)
 80132f8:	2209      	movs	r2, #9
 80132fa:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80132fc:	4b1a      	ldr	r3, [pc, #104]	; (8013368 <USBD_LL_Init+0x98>)
 80132fe:	2202      	movs	r2, #2
 8013300:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8013302:	4b19      	ldr	r3, [pc, #100]	; (8013368 <USBD_LL_Init+0x98>)
 8013304:	2200      	movs	r2, #0
 8013306:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8013308:	4b17      	ldr	r3, [pc, #92]	; (8013368 <USBD_LL_Init+0x98>)
 801330a:	2202      	movs	r2, #2
 801330c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801330e:	4b16      	ldr	r3, [pc, #88]	; (8013368 <USBD_LL_Init+0x98>)
 8013310:	2200      	movs	r2, #0
 8013312:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8013314:	4b14      	ldr	r3, [pc, #80]	; (8013368 <USBD_LL_Init+0x98>)
 8013316:	2200      	movs	r2, #0
 8013318:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801331a:	4b13      	ldr	r3, [pc, #76]	; (8013368 <USBD_LL_Init+0x98>)
 801331c:	2200      	movs	r2, #0
 801331e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013320:	4b11      	ldr	r3, [pc, #68]	; (8013368 <USBD_LL_Init+0x98>)
 8013322:	2200      	movs	r2, #0
 8013324:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8013326:	4b10      	ldr	r3, [pc, #64]	; (8013368 <USBD_LL_Init+0x98>)
 8013328:	2200      	movs	r2, #0
 801332a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 801332c:	4b0e      	ldr	r3, [pc, #56]	; (8013368 <USBD_LL_Init+0x98>)
 801332e:	2200      	movs	r2, #0
 8013330:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013332:	480d      	ldr	r0, [pc, #52]	; (8013368 <USBD_LL_Init+0x98>)
 8013334:	f7f0 fdc4 	bl	8003ec0 <HAL_PCD_Init>
 8013338:	4603      	mov	r3, r0
 801333a:	2b00      	cmp	r3, #0
 801333c:	d001      	beq.n	8013342 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 801333e:	f7ed fe87 	bl	8001050 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013342:	2180      	movs	r1, #128	; 0x80
 8013344:	4808      	ldr	r0, [pc, #32]	; (8013368 <USBD_LL_Init+0x98>)
 8013346:	f7f1 ff82 	bl	800524e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801334a:	2240      	movs	r2, #64	; 0x40
 801334c:	2100      	movs	r1, #0
 801334e:	4806      	ldr	r0, [pc, #24]	; (8013368 <USBD_LL_Init+0x98>)
 8013350:	f7f1 ff36 	bl	80051c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013354:	2280      	movs	r2, #128	; 0x80
 8013356:	2101      	movs	r1, #1
 8013358:	4803      	ldr	r0, [pc, #12]	; (8013368 <USBD_LL_Init+0x98>)
 801335a:	f7f1 ff31 	bl	80051c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801335e:	2300      	movs	r3, #0
}
 8013360:	4618      	mov	r0, r3
 8013362:	3708      	adds	r7, #8
 8013364:	46bd      	mov	sp, r7
 8013366:	bd80      	pop	{r7, pc}
 8013368:	24041648 	.word	0x24041648
 801336c:	40080000 	.word	0x40080000

08013370 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013378:	2300      	movs	r3, #0
 801337a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801337c:	2300      	movs	r3, #0
 801337e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013386:	4618      	mov	r0, r3
 8013388:	f7f0 febe 	bl	8004108 <HAL_PCD_Start>
 801338c:	4603      	mov	r3, r0
 801338e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013390:	7bfb      	ldrb	r3, [r7, #15]
 8013392:	4618      	mov	r0, r3
 8013394:	f000 f94a 	bl	801362c <USBD_Get_USB_Status>
 8013398:	4603      	mov	r3, r0
 801339a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801339c:	7bbb      	ldrb	r3, [r7, #14]
}
 801339e:	4618      	mov	r0, r3
 80133a0:	3710      	adds	r7, #16
 80133a2:	46bd      	mov	sp, r7
 80133a4:	bd80      	pop	{r7, pc}

080133a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80133a6:	b580      	push	{r7, lr}
 80133a8:	b084      	sub	sp, #16
 80133aa:	af00      	add	r7, sp, #0
 80133ac:	6078      	str	r0, [r7, #4]
 80133ae:	4608      	mov	r0, r1
 80133b0:	4611      	mov	r1, r2
 80133b2:	461a      	mov	r2, r3
 80133b4:	4603      	mov	r3, r0
 80133b6:	70fb      	strb	r3, [r7, #3]
 80133b8:	460b      	mov	r3, r1
 80133ba:	70bb      	strb	r3, [r7, #2]
 80133bc:	4613      	mov	r3, r2
 80133be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133c0:	2300      	movs	r3, #0
 80133c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80133c4:	2300      	movs	r3, #0
 80133c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80133ce:	78bb      	ldrb	r3, [r7, #2]
 80133d0:	883a      	ldrh	r2, [r7, #0]
 80133d2:	78f9      	ldrb	r1, [r7, #3]
 80133d4:	f7f1 facf 	bl	8004976 <HAL_PCD_EP_Open>
 80133d8:	4603      	mov	r3, r0
 80133da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80133dc:	7bfb      	ldrb	r3, [r7, #15]
 80133de:	4618      	mov	r0, r3
 80133e0:	f000 f924 	bl	801362c <USBD_Get_USB_Status>
 80133e4:	4603      	mov	r3, r0
 80133e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80133e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80133ea:	4618      	mov	r0, r3
 80133ec:	3710      	adds	r7, #16
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}

080133f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80133f2:	b580      	push	{r7, lr}
 80133f4:	b084      	sub	sp, #16
 80133f6:	af00      	add	r7, sp, #0
 80133f8:	6078      	str	r0, [r7, #4]
 80133fa:	460b      	mov	r3, r1
 80133fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80133fe:	2300      	movs	r3, #0
 8013400:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013402:	2300      	movs	r3, #0
 8013404:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801340c:	78fa      	ldrb	r2, [r7, #3]
 801340e:	4611      	mov	r1, r2
 8013410:	4618      	mov	r0, r3
 8013412:	f7f1 fb18 	bl	8004a46 <HAL_PCD_EP_Close>
 8013416:	4603      	mov	r3, r0
 8013418:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801341a:	7bfb      	ldrb	r3, [r7, #15]
 801341c:	4618      	mov	r0, r3
 801341e:	f000 f905 	bl	801362c <USBD_Get_USB_Status>
 8013422:	4603      	mov	r3, r0
 8013424:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013426:	7bbb      	ldrb	r3, [r7, #14]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3710      	adds	r7, #16
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}

08013430 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013430:	b580      	push	{r7, lr}
 8013432:	b084      	sub	sp, #16
 8013434:	af00      	add	r7, sp, #0
 8013436:	6078      	str	r0, [r7, #4]
 8013438:	460b      	mov	r3, r1
 801343a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801343c:	2300      	movs	r3, #0
 801343e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013440:	2300      	movs	r3, #0
 8013442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801344a:	78fa      	ldrb	r2, [r7, #3]
 801344c:	4611      	mov	r1, r2
 801344e:	4618      	mov	r0, r3
 8013450:	f7f1 fcaa 	bl	8004da8 <HAL_PCD_EP_Flush>
 8013454:	4603      	mov	r3, r0
 8013456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013458:	7bfb      	ldrb	r3, [r7, #15]
 801345a:	4618      	mov	r0, r3
 801345c:	f000 f8e6 	bl	801362c <USBD_Get_USB_Status>
 8013460:	4603      	mov	r3, r0
 8013462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013464:	7bbb      	ldrb	r3, [r7, #14]
}
 8013466:	4618      	mov	r0, r3
 8013468:	3710      	adds	r7, #16
 801346a:	46bd      	mov	sp, r7
 801346c:	bd80      	pop	{r7, pc}

0801346e <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801346e:	b580      	push	{r7, lr}
 8013470:	b084      	sub	sp, #16
 8013472:	af00      	add	r7, sp, #0
 8013474:	6078      	str	r0, [r7, #4]
 8013476:	460b      	mov	r3, r1
 8013478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801347a:	2300      	movs	r3, #0
 801347c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801347e:	2300      	movs	r3, #0
 8013480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013488:	78fa      	ldrb	r2, [r7, #3]
 801348a:	4611      	mov	r1, r2
 801348c:	4618      	mov	r0, r3
 801348e:	f7f1 fbd1 	bl	8004c34 <HAL_PCD_EP_SetStall>
 8013492:	4603      	mov	r3, r0
 8013494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013496:	7bfb      	ldrb	r3, [r7, #15]
 8013498:	4618      	mov	r0, r3
 801349a:	f000 f8c7 	bl	801362c <USBD_Get_USB_Status>
 801349e:	4603      	mov	r3, r0
 80134a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80134a4:	4618      	mov	r0, r3
 80134a6:	3710      	adds	r7, #16
 80134a8:	46bd      	mov	sp, r7
 80134aa:	bd80      	pop	{r7, pc}

080134ac <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134ac:	b580      	push	{r7, lr}
 80134ae:	b084      	sub	sp, #16
 80134b0:	af00      	add	r7, sp, #0
 80134b2:	6078      	str	r0, [r7, #4]
 80134b4:	460b      	mov	r3, r1
 80134b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80134b8:	2300      	movs	r3, #0
 80134ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80134bc:	2300      	movs	r3, #0
 80134be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80134c0:	687b      	ldr	r3, [r7, #4]
 80134c2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134c6:	78fa      	ldrb	r2, [r7, #3]
 80134c8:	4611      	mov	r1, r2
 80134ca:	4618      	mov	r0, r3
 80134cc:	f7f1 fc16 	bl	8004cfc <HAL_PCD_EP_ClrStall>
 80134d0:	4603      	mov	r3, r0
 80134d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80134d4:	7bfb      	ldrb	r3, [r7, #15]
 80134d6:	4618      	mov	r0, r3
 80134d8:	f000 f8a8 	bl	801362c <USBD_Get_USB_Status>
 80134dc:	4603      	mov	r3, r0
 80134de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80134e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80134e2:	4618      	mov	r0, r3
 80134e4:	3710      	adds	r7, #16
 80134e6:	46bd      	mov	sp, r7
 80134e8:	bd80      	pop	{r7, pc}

080134ea <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80134ea:	b480      	push	{r7}
 80134ec:	b085      	sub	sp, #20
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	6078      	str	r0, [r7, #4]
 80134f2:	460b      	mov	r3, r1
 80134f4:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80134fc:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80134fe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013502:	2b00      	cmp	r3, #0
 8013504:	da0b      	bge.n	801351e <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013506:	78fb      	ldrb	r3, [r7, #3]
 8013508:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801350c:	68f9      	ldr	r1, [r7, #12]
 801350e:	4613      	mov	r3, r2
 8013510:	00db      	lsls	r3, r3, #3
 8013512:	1a9b      	subs	r3, r3, r2
 8013514:	009b      	lsls	r3, r3, #2
 8013516:	440b      	add	r3, r1
 8013518:	333e      	adds	r3, #62	; 0x3e
 801351a:	781b      	ldrb	r3, [r3, #0]
 801351c:	e00b      	b.n	8013536 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 801351e:	78fb      	ldrb	r3, [r7, #3]
 8013520:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013524:	68f9      	ldr	r1, [r7, #12]
 8013526:	4613      	mov	r3, r2
 8013528:	00db      	lsls	r3, r3, #3
 801352a:	1a9b      	subs	r3, r3, r2
 801352c:	009b      	lsls	r3, r3, #2
 801352e:	440b      	add	r3, r1
 8013530:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013534:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013536:	4618      	mov	r0, r3
 8013538:	3714      	adds	r7, #20
 801353a:	46bd      	mov	sp, r7
 801353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013540:	4770      	bx	lr

08013542 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013542:	b580      	push	{r7, lr}
 8013544:	b084      	sub	sp, #16
 8013546:	af00      	add	r7, sp, #0
 8013548:	6078      	str	r0, [r7, #4]
 801354a:	460b      	mov	r3, r1
 801354c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801354e:	2300      	movs	r3, #0
 8013550:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013552:	2300      	movs	r3, #0
 8013554:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801355c:	78fa      	ldrb	r2, [r7, #3]
 801355e:	4611      	mov	r1, r2
 8013560:	4618      	mov	r0, r3
 8013562:	f7f1 f9e3 	bl	800492c <HAL_PCD_SetAddress>
 8013566:	4603      	mov	r3, r0
 8013568:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801356a:	7bfb      	ldrb	r3, [r7, #15]
 801356c:	4618      	mov	r0, r3
 801356e:	f000 f85d 	bl	801362c <USBD_Get_USB_Status>
 8013572:	4603      	mov	r3, r0
 8013574:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013576:	7bbb      	ldrb	r3, [r7, #14]
}
 8013578:	4618      	mov	r0, r3
 801357a:	3710      	adds	r7, #16
 801357c:	46bd      	mov	sp, r7
 801357e:	bd80      	pop	{r7, pc}

08013580 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013580:	b580      	push	{r7, lr}
 8013582:	b086      	sub	sp, #24
 8013584:	af00      	add	r7, sp, #0
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	607a      	str	r2, [r7, #4]
 801358a:	603b      	str	r3, [r7, #0]
 801358c:	460b      	mov	r3, r1
 801358e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013590:	2300      	movs	r3, #0
 8013592:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013594:	2300      	movs	r3, #0
 8013596:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013598:	68fb      	ldr	r3, [r7, #12]
 801359a:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801359e:	7af9      	ldrb	r1, [r7, #11]
 80135a0:	683b      	ldr	r3, [r7, #0]
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	f7f1 fafc 	bl	8004ba0 <HAL_PCD_EP_Transmit>
 80135a8:	4603      	mov	r3, r0
 80135aa:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135ac:	7dfb      	ldrb	r3, [r7, #23]
 80135ae:	4618      	mov	r0, r3
 80135b0:	f000 f83c 	bl	801362c <USBD_Get_USB_Status>
 80135b4:	4603      	mov	r3, r0
 80135b6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135b8:	7dbb      	ldrb	r3, [r7, #22]
}
 80135ba:	4618      	mov	r0, r3
 80135bc:	3718      	adds	r7, #24
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd80      	pop	{r7, pc}

080135c2 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b086      	sub	sp, #24
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	60f8      	str	r0, [r7, #12]
 80135ca:	607a      	str	r2, [r7, #4]
 80135cc:	603b      	str	r3, [r7, #0]
 80135ce:	460b      	mov	r3, r1
 80135d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80135d6:	2300      	movs	r3, #0
 80135d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80135e0:	7af9      	ldrb	r1, [r7, #11]
 80135e2:	683b      	ldr	r3, [r7, #0]
 80135e4:	687a      	ldr	r2, [r7, #4]
 80135e6:	f7f1 fa78 	bl	8004ada <HAL_PCD_EP_Receive>
 80135ea:	4603      	mov	r3, r0
 80135ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80135ee:	7dfb      	ldrb	r3, [r7, #23]
 80135f0:	4618      	mov	r0, r3
 80135f2:	f000 f81b 	bl	801362c <USBD_Get_USB_Status>
 80135f6:	4603      	mov	r3, r0
 80135f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80135fa:	7dbb      	ldrb	r3, [r7, #22]
}
 80135fc:	4618      	mov	r0, r3
 80135fe:	3718      	adds	r7, #24
 8013600:	46bd      	mov	sp, r7
 8013602:	bd80      	pop	{r7, pc}

08013604 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b082      	sub	sp, #8
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	460b      	mov	r3, r1
 801360e:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8013616:	78fa      	ldrb	r2, [r7, #3]
 8013618:	4611      	mov	r1, r2
 801361a:	4618      	mov	r0, r3
 801361c:	f7f1 faa8 	bl	8004b70 <HAL_PCD_EP_GetRxCount>
 8013620:	4603      	mov	r3, r0
}
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}
	...

0801362c <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 801362c:	b480      	push	{r7}
 801362e:	b085      	sub	sp, #20
 8013630:	af00      	add	r7, sp, #0
 8013632:	4603      	mov	r3, r0
 8013634:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013636:	2300      	movs	r3, #0
 8013638:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801363a:	79fb      	ldrb	r3, [r7, #7]
 801363c:	2b03      	cmp	r3, #3
 801363e:	d817      	bhi.n	8013670 <USBD_Get_USB_Status+0x44>
 8013640:	a201      	add	r2, pc, #4	; (adr r2, 8013648 <USBD_Get_USB_Status+0x1c>)
 8013642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013646:	bf00      	nop
 8013648:	08013659 	.word	0x08013659
 801364c:	0801365f 	.word	0x0801365f
 8013650:	08013665 	.word	0x08013665
 8013654:	0801366b 	.word	0x0801366b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013658:	2300      	movs	r3, #0
 801365a:	73fb      	strb	r3, [r7, #15]
    break;
 801365c:	e00b      	b.n	8013676 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801365e:	2303      	movs	r3, #3
 8013660:	73fb      	strb	r3, [r7, #15]
    break;
 8013662:	e008      	b.n	8013676 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013664:	2301      	movs	r3, #1
 8013666:	73fb      	strb	r3, [r7, #15]
    break;
 8013668:	e005      	b.n	8013676 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801366a:	2303      	movs	r3, #3
 801366c:	73fb      	strb	r3, [r7, #15]
    break;
 801366e:	e002      	b.n	8013676 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013670:	2303      	movs	r3, #3
 8013672:	73fb      	strb	r3, [r7, #15]
    break;
 8013674:	bf00      	nop
  }
  return usb_status;
 8013676:	7bfb      	ldrb	r3, [r7, #15]
}
 8013678:	4618      	mov	r0, r3
 801367a:	3714      	adds	r7, #20
 801367c:	46bd      	mov	sp, r7
 801367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013682:	4770      	bx	lr

08013684 <__errno>:
 8013684:	4b01      	ldr	r3, [pc, #4]	; (801368c <__errno+0x8>)
 8013686:	6818      	ldr	r0, [r3, #0]
 8013688:	4770      	bx	lr
 801368a:	bf00      	nop
 801368c:	24000168 	.word	0x24000168

08013690 <__libc_init_array>:
 8013690:	b570      	push	{r4, r5, r6, lr}
 8013692:	4e0d      	ldr	r6, [pc, #52]	; (80136c8 <__libc_init_array+0x38>)
 8013694:	4c0d      	ldr	r4, [pc, #52]	; (80136cc <__libc_init_array+0x3c>)
 8013696:	1ba4      	subs	r4, r4, r6
 8013698:	10a4      	asrs	r4, r4, #2
 801369a:	2500      	movs	r5, #0
 801369c:	42a5      	cmp	r5, r4
 801369e:	d109      	bne.n	80136b4 <__libc_init_array+0x24>
 80136a0:	4e0b      	ldr	r6, [pc, #44]	; (80136d0 <__libc_init_array+0x40>)
 80136a2:	4c0c      	ldr	r4, [pc, #48]	; (80136d4 <__libc_init_array+0x44>)
 80136a4:	f000 fc38 	bl	8013f18 <_init>
 80136a8:	1ba4      	subs	r4, r4, r6
 80136aa:	10a4      	asrs	r4, r4, #2
 80136ac:	2500      	movs	r5, #0
 80136ae:	42a5      	cmp	r5, r4
 80136b0:	d105      	bne.n	80136be <__libc_init_array+0x2e>
 80136b2:	bd70      	pop	{r4, r5, r6, pc}
 80136b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80136b8:	4798      	blx	r3
 80136ba:	3501      	adds	r5, #1
 80136bc:	e7ee      	b.n	801369c <__libc_init_array+0xc>
 80136be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80136c2:	4798      	blx	r3
 80136c4:	3501      	adds	r5, #1
 80136c6:	e7f2      	b.n	80136ae <__libc_init_array+0x1e>
 80136c8:	080141bc 	.word	0x080141bc
 80136cc:	080141bc 	.word	0x080141bc
 80136d0:	080141bc 	.word	0x080141bc
 80136d4:	080141c0 	.word	0x080141c0

080136d8 <malloc>:
 80136d8:	4b02      	ldr	r3, [pc, #8]	; (80136e4 <malloc+0xc>)
 80136da:	4601      	mov	r1, r0
 80136dc:	6818      	ldr	r0, [r3, #0]
 80136de:	f000 b86d 	b.w	80137bc <_malloc_r>
 80136e2:	bf00      	nop
 80136e4:	24000168 	.word	0x24000168

080136e8 <free>:
 80136e8:	4b02      	ldr	r3, [pc, #8]	; (80136f4 <free+0xc>)
 80136ea:	4601      	mov	r1, r0
 80136ec:	6818      	ldr	r0, [r3, #0]
 80136ee:	f000 b817 	b.w	8013720 <_free_r>
 80136f2:	bf00      	nop
 80136f4:	24000168 	.word	0x24000168

080136f8 <memcpy>:
 80136f8:	b510      	push	{r4, lr}
 80136fa:	1e43      	subs	r3, r0, #1
 80136fc:	440a      	add	r2, r1
 80136fe:	4291      	cmp	r1, r2
 8013700:	d100      	bne.n	8013704 <memcpy+0xc>
 8013702:	bd10      	pop	{r4, pc}
 8013704:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013708:	f803 4f01 	strb.w	r4, [r3, #1]!
 801370c:	e7f7      	b.n	80136fe <memcpy+0x6>

0801370e <memset>:
 801370e:	4402      	add	r2, r0
 8013710:	4603      	mov	r3, r0
 8013712:	4293      	cmp	r3, r2
 8013714:	d100      	bne.n	8013718 <memset+0xa>
 8013716:	4770      	bx	lr
 8013718:	f803 1b01 	strb.w	r1, [r3], #1
 801371c:	e7f9      	b.n	8013712 <memset+0x4>
	...

08013720 <_free_r>:
 8013720:	b538      	push	{r3, r4, r5, lr}
 8013722:	4605      	mov	r5, r0
 8013724:	2900      	cmp	r1, #0
 8013726:	d045      	beq.n	80137b4 <_free_r+0x94>
 8013728:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801372c:	1f0c      	subs	r4, r1, #4
 801372e:	2b00      	cmp	r3, #0
 8013730:	bfb8      	it	lt
 8013732:	18e4      	addlt	r4, r4, r3
 8013734:	f000 f8cc 	bl	80138d0 <__malloc_lock>
 8013738:	4a1f      	ldr	r2, [pc, #124]	; (80137b8 <_free_r+0x98>)
 801373a:	6813      	ldr	r3, [r2, #0]
 801373c:	4610      	mov	r0, r2
 801373e:	b933      	cbnz	r3, 801374e <_free_r+0x2e>
 8013740:	6063      	str	r3, [r4, #4]
 8013742:	6014      	str	r4, [r2, #0]
 8013744:	4628      	mov	r0, r5
 8013746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801374a:	f000 b8c2 	b.w	80138d2 <__malloc_unlock>
 801374e:	42a3      	cmp	r3, r4
 8013750:	d90c      	bls.n	801376c <_free_r+0x4c>
 8013752:	6821      	ldr	r1, [r4, #0]
 8013754:	1862      	adds	r2, r4, r1
 8013756:	4293      	cmp	r3, r2
 8013758:	bf04      	itt	eq
 801375a:	681a      	ldreq	r2, [r3, #0]
 801375c:	685b      	ldreq	r3, [r3, #4]
 801375e:	6063      	str	r3, [r4, #4]
 8013760:	bf04      	itt	eq
 8013762:	1852      	addeq	r2, r2, r1
 8013764:	6022      	streq	r2, [r4, #0]
 8013766:	6004      	str	r4, [r0, #0]
 8013768:	e7ec      	b.n	8013744 <_free_r+0x24>
 801376a:	4613      	mov	r3, r2
 801376c:	685a      	ldr	r2, [r3, #4]
 801376e:	b10a      	cbz	r2, 8013774 <_free_r+0x54>
 8013770:	42a2      	cmp	r2, r4
 8013772:	d9fa      	bls.n	801376a <_free_r+0x4a>
 8013774:	6819      	ldr	r1, [r3, #0]
 8013776:	1858      	adds	r0, r3, r1
 8013778:	42a0      	cmp	r0, r4
 801377a:	d10b      	bne.n	8013794 <_free_r+0x74>
 801377c:	6820      	ldr	r0, [r4, #0]
 801377e:	4401      	add	r1, r0
 8013780:	1858      	adds	r0, r3, r1
 8013782:	4282      	cmp	r2, r0
 8013784:	6019      	str	r1, [r3, #0]
 8013786:	d1dd      	bne.n	8013744 <_free_r+0x24>
 8013788:	6810      	ldr	r0, [r2, #0]
 801378a:	6852      	ldr	r2, [r2, #4]
 801378c:	605a      	str	r2, [r3, #4]
 801378e:	4401      	add	r1, r0
 8013790:	6019      	str	r1, [r3, #0]
 8013792:	e7d7      	b.n	8013744 <_free_r+0x24>
 8013794:	d902      	bls.n	801379c <_free_r+0x7c>
 8013796:	230c      	movs	r3, #12
 8013798:	602b      	str	r3, [r5, #0]
 801379a:	e7d3      	b.n	8013744 <_free_r+0x24>
 801379c:	6820      	ldr	r0, [r4, #0]
 801379e:	1821      	adds	r1, r4, r0
 80137a0:	428a      	cmp	r2, r1
 80137a2:	bf04      	itt	eq
 80137a4:	6811      	ldreq	r1, [r2, #0]
 80137a6:	6852      	ldreq	r2, [r2, #4]
 80137a8:	6062      	str	r2, [r4, #4]
 80137aa:	bf04      	itt	eq
 80137ac:	1809      	addeq	r1, r1, r0
 80137ae:	6021      	streq	r1, [r4, #0]
 80137b0:	605c      	str	r4, [r3, #4]
 80137b2:	e7c7      	b.n	8013744 <_free_r+0x24>
 80137b4:	bd38      	pop	{r3, r4, r5, pc}
 80137b6:	bf00      	nop
 80137b8:	24040238 	.word	0x24040238

080137bc <_malloc_r>:
 80137bc:	b570      	push	{r4, r5, r6, lr}
 80137be:	1ccd      	adds	r5, r1, #3
 80137c0:	f025 0503 	bic.w	r5, r5, #3
 80137c4:	3508      	adds	r5, #8
 80137c6:	2d0c      	cmp	r5, #12
 80137c8:	bf38      	it	cc
 80137ca:	250c      	movcc	r5, #12
 80137cc:	2d00      	cmp	r5, #0
 80137ce:	4606      	mov	r6, r0
 80137d0:	db01      	blt.n	80137d6 <_malloc_r+0x1a>
 80137d2:	42a9      	cmp	r1, r5
 80137d4:	d903      	bls.n	80137de <_malloc_r+0x22>
 80137d6:	230c      	movs	r3, #12
 80137d8:	6033      	str	r3, [r6, #0]
 80137da:	2000      	movs	r0, #0
 80137dc:	bd70      	pop	{r4, r5, r6, pc}
 80137de:	f000 f877 	bl	80138d0 <__malloc_lock>
 80137e2:	4a21      	ldr	r2, [pc, #132]	; (8013868 <_malloc_r+0xac>)
 80137e4:	6814      	ldr	r4, [r2, #0]
 80137e6:	4621      	mov	r1, r4
 80137e8:	b991      	cbnz	r1, 8013810 <_malloc_r+0x54>
 80137ea:	4c20      	ldr	r4, [pc, #128]	; (801386c <_malloc_r+0xb0>)
 80137ec:	6823      	ldr	r3, [r4, #0]
 80137ee:	b91b      	cbnz	r3, 80137f8 <_malloc_r+0x3c>
 80137f0:	4630      	mov	r0, r6
 80137f2:	f000 f83d 	bl	8013870 <_sbrk_r>
 80137f6:	6020      	str	r0, [r4, #0]
 80137f8:	4629      	mov	r1, r5
 80137fa:	4630      	mov	r0, r6
 80137fc:	f000 f838 	bl	8013870 <_sbrk_r>
 8013800:	1c43      	adds	r3, r0, #1
 8013802:	d124      	bne.n	801384e <_malloc_r+0x92>
 8013804:	230c      	movs	r3, #12
 8013806:	6033      	str	r3, [r6, #0]
 8013808:	4630      	mov	r0, r6
 801380a:	f000 f862 	bl	80138d2 <__malloc_unlock>
 801380e:	e7e4      	b.n	80137da <_malloc_r+0x1e>
 8013810:	680b      	ldr	r3, [r1, #0]
 8013812:	1b5b      	subs	r3, r3, r5
 8013814:	d418      	bmi.n	8013848 <_malloc_r+0x8c>
 8013816:	2b0b      	cmp	r3, #11
 8013818:	d90f      	bls.n	801383a <_malloc_r+0x7e>
 801381a:	600b      	str	r3, [r1, #0]
 801381c:	50cd      	str	r5, [r1, r3]
 801381e:	18cc      	adds	r4, r1, r3
 8013820:	4630      	mov	r0, r6
 8013822:	f000 f856 	bl	80138d2 <__malloc_unlock>
 8013826:	f104 000b 	add.w	r0, r4, #11
 801382a:	1d23      	adds	r3, r4, #4
 801382c:	f020 0007 	bic.w	r0, r0, #7
 8013830:	1ac3      	subs	r3, r0, r3
 8013832:	d0d3      	beq.n	80137dc <_malloc_r+0x20>
 8013834:	425a      	negs	r2, r3
 8013836:	50e2      	str	r2, [r4, r3]
 8013838:	e7d0      	b.n	80137dc <_malloc_r+0x20>
 801383a:	428c      	cmp	r4, r1
 801383c:	684b      	ldr	r3, [r1, #4]
 801383e:	bf16      	itet	ne
 8013840:	6063      	strne	r3, [r4, #4]
 8013842:	6013      	streq	r3, [r2, #0]
 8013844:	460c      	movne	r4, r1
 8013846:	e7eb      	b.n	8013820 <_malloc_r+0x64>
 8013848:	460c      	mov	r4, r1
 801384a:	6849      	ldr	r1, [r1, #4]
 801384c:	e7cc      	b.n	80137e8 <_malloc_r+0x2c>
 801384e:	1cc4      	adds	r4, r0, #3
 8013850:	f024 0403 	bic.w	r4, r4, #3
 8013854:	42a0      	cmp	r0, r4
 8013856:	d005      	beq.n	8013864 <_malloc_r+0xa8>
 8013858:	1a21      	subs	r1, r4, r0
 801385a:	4630      	mov	r0, r6
 801385c:	f000 f808 	bl	8013870 <_sbrk_r>
 8013860:	3001      	adds	r0, #1
 8013862:	d0cf      	beq.n	8013804 <_malloc_r+0x48>
 8013864:	6025      	str	r5, [r4, #0]
 8013866:	e7db      	b.n	8013820 <_malloc_r+0x64>
 8013868:	24040238 	.word	0x24040238
 801386c:	2404023c 	.word	0x2404023c

08013870 <_sbrk_r>:
 8013870:	b538      	push	{r3, r4, r5, lr}
 8013872:	4c06      	ldr	r4, [pc, #24]	; (801388c <_sbrk_r+0x1c>)
 8013874:	2300      	movs	r3, #0
 8013876:	4605      	mov	r5, r0
 8013878:	4608      	mov	r0, r1
 801387a:	6023      	str	r3, [r4, #0]
 801387c:	f7ed fe56 	bl	800152c <_sbrk>
 8013880:	1c43      	adds	r3, r0, #1
 8013882:	d102      	bne.n	801388a <_sbrk_r+0x1a>
 8013884:	6823      	ldr	r3, [r4, #0]
 8013886:	b103      	cbz	r3, 801388a <_sbrk_r+0x1a>
 8013888:	602b      	str	r3, [r5, #0]
 801388a:	bd38      	pop	{r3, r4, r5, pc}
 801388c:	24041a50 	.word	0x24041a50

08013890 <siprintf>:
 8013890:	b40e      	push	{r1, r2, r3}
 8013892:	b500      	push	{lr}
 8013894:	b09c      	sub	sp, #112	; 0x70
 8013896:	ab1d      	add	r3, sp, #116	; 0x74
 8013898:	9002      	str	r0, [sp, #8]
 801389a:	9006      	str	r0, [sp, #24]
 801389c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80138a0:	4809      	ldr	r0, [pc, #36]	; (80138c8 <siprintf+0x38>)
 80138a2:	9107      	str	r1, [sp, #28]
 80138a4:	9104      	str	r1, [sp, #16]
 80138a6:	4909      	ldr	r1, [pc, #36]	; (80138cc <siprintf+0x3c>)
 80138a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80138ac:	9105      	str	r1, [sp, #20]
 80138ae:	6800      	ldr	r0, [r0, #0]
 80138b0:	9301      	str	r3, [sp, #4]
 80138b2:	a902      	add	r1, sp, #8
 80138b4:	f000 f868 	bl	8013988 <_svfiprintf_r>
 80138b8:	9b02      	ldr	r3, [sp, #8]
 80138ba:	2200      	movs	r2, #0
 80138bc:	701a      	strb	r2, [r3, #0]
 80138be:	b01c      	add	sp, #112	; 0x70
 80138c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80138c4:	b003      	add	sp, #12
 80138c6:	4770      	bx	lr
 80138c8:	24000168 	.word	0x24000168
 80138cc:	ffff0208 	.word	0xffff0208

080138d0 <__malloc_lock>:
 80138d0:	4770      	bx	lr

080138d2 <__malloc_unlock>:
 80138d2:	4770      	bx	lr

080138d4 <__ssputs_r>:
 80138d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138d8:	688e      	ldr	r6, [r1, #8]
 80138da:	429e      	cmp	r6, r3
 80138dc:	4682      	mov	sl, r0
 80138de:	460c      	mov	r4, r1
 80138e0:	4690      	mov	r8, r2
 80138e2:	4699      	mov	r9, r3
 80138e4:	d837      	bhi.n	8013956 <__ssputs_r+0x82>
 80138e6:	898a      	ldrh	r2, [r1, #12]
 80138e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138ec:	d031      	beq.n	8013952 <__ssputs_r+0x7e>
 80138ee:	6825      	ldr	r5, [r4, #0]
 80138f0:	6909      	ldr	r1, [r1, #16]
 80138f2:	1a6f      	subs	r7, r5, r1
 80138f4:	6965      	ldr	r5, [r4, #20]
 80138f6:	2302      	movs	r3, #2
 80138f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8013900:	f109 0301 	add.w	r3, r9, #1
 8013904:	443b      	add	r3, r7
 8013906:	429d      	cmp	r5, r3
 8013908:	bf38      	it	cc
 801390a:	461d      	movcc	r5, r3
 801390c:	0553      	lsls	r3, r2, #21
 801390e:	d530      	bpl.n	8013972 <__ssputs_r+0x9e>
 8013910:	4629      	mov	r1, r5
 8013912:	f7ff ff53 	bl	80137bc <_malloc_r>
 8013916:	4606      	mov	r6, r0
 8013918:	b950      	cbnz	r0, 8013930 <__ssputs_r+0x5c>
 801391a:	230c      	movs	r3, #12
 801391c:	f8ca 3000 	str.w	r3, [sl]
 8013920:	89a3      	ldrh	r3, [r4, #12]
 8013922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013926:	81a3      	strh	r3, [r4, #12]
 8013928:	f04f 30ff 	mov.w	r0, #4294967295
 801392c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013930:	463a      	mov	r2, r7
 8013932:	6921      	ldr	r1, [r4, #16]
 8013934:	f7ff fee0 	bl	80136f8 <memcpy>
 8013938:	89a3      	ldrh	r3, [r4, #12]
 801393a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801393e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013942:	81a3      	strh	r3, [r4, #12]
 8013944:	6126      	str	r6, [r4, #16]
 8013946:	6165      	str	r5, [r4, #20]
 8013948:	443e      	add	r6, r7
 801394a:	1bed      	subs	r5, r5, r7
 801394c:	6026      	str	r6, [r4, #0]
 801394e:	60a5      	str	r5, [r4, #8]
 8013950:	464e      	mov	r6, r9
 8013952:	454e      	cmp	r6, r9
 8013954:	d900      	bls.n	8013958 <__ssputs_r+0x84>
 8013956:	464e      	mov	r6, r9
 8013958:	4632      	mov	r2, r6
 801395a:	4641      	mov	r1, r8
 801395c:	6820      	ldr	r0, [r4, #0]
 801395e:	f000 fa93 	bl	8013e88 <memmove>
 8013962:	68a3      	ldr	r3, [r4, #8]
 8013964:	1b9b      	subs	r3, r3, r6
 8013966:	60a3      	str	r3, [r4, #8]
 8013968:	6823      	ldr	r3, [r4, #0]
 801396a:	441e      	add	r6, r3
 801396c:	6026      	str	r6, [r4, #0]
 801396e:	2000      	movs	r0, #0
 8013970:	e7dc      	b.n	801392c <__ssputs_r+0x58>
 8013972:	462a      	mov	r2, r5
 8013974:	f000 faa1 	bl	8013eba <_realloc_r>
 8013978:	4606      	mov	r6, r0
 801397a:	2800      	cmp	r0, #0
 801397c:	d1e2      	bne.n	8013944 <__ssputs_r+0x70>
 801397e:	6921      	ldr	r1, [r4, #16]
 8013980:	4650      	mov	r0, sl
 8013982:	f7ff fecd 	bl	8013720 <_free_r>
 8013986:	e7c8      	b.n	801391a <__ssputs_r+0x46>

08013988 <_svfiprintf_r>:
 8013988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801398c:	461d      	mov	r5, r3
 801398e:	898b      	ldrh	r3, [r1, #12]
 8013990:	061f      	lsls	r7, r3, #24
 8013992:	b09d      	sub	sp, #116	; 0x74
 8013994:	4680      	mov	r8, r0
 8013996:	460c      	mov	r4, r1
 8013998:	4616      	mov	r6, r2
 801399a:	d50f      	bpl.n	80139bc <_svfiprintf_r+0x34>
 801399c:	690b      	ldr	r3, [r1, #16]
 801399e:	b96b      	cbnz	r3, 80139bc <_svfiprintf_r+0x34>
 80139a0:	2140      	movs	r1, #64	; 0x40
 80139a2:	f7ff ff0b 	bl	80137bc <_malloc_r>
 80139a6:	6020      	str	r0, [r4, #0]
 80139a8:	6120      	str	r0, [r4, #16]
 80139aa:	b928      	cbnz	r0, 80139b8 <_svfiprintf_r+0x30>
 80139ac:	230c      	movs	r3, #12
 80139ae:	f8c8 3000 	str.w	r3, [r8]
 80139b2:	f04f 30ff 	mov.w	r0, #4294967295
 80139b6:	e0c8      	b.n	8013b4a <_svfiprintf_r+0x1c2>
 80139b8:	2340      	movs	r3, #64	; 0x40
 80139ba:	6163      	str	r3, [r4, #20]
 80139bc:	2300      	movs	r3, #0
 80139be:	9309      	str	r3, [sp, #36]	; 0x24
 80139c0:	2320      	movs	r3, #32
 80139c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80139c6:	2330      	movs	r3, #48	; 0x30
 80139c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80139cc:	9503      	str	r5, [sp, #12]
 80139ce:	f04f 0b01 	mov.w	fp, #1
 80139d2:	4637      	mov	r7, r6
 80139d4:	463d      	mov	r5, r7
 80139d6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139da:	b10b      	cbz	r3, 80139e0 <_svfiprintf_r+0x58>
 80139dc:	2b25      	cmp	r3, #37	; 0x25
 80139de:	d13e      	bne.n	8013a5e <_svfiprintf_r+0xd6>
 80139e0:	ebb7 0a06 	subs.w	sl, r7, r6
 80139e4:	d00b      	beq.n	80139fe <_svfiprintf_r+0x76>
 80139e6:	4653      	mov	r3, sl
 80139e8:	4632      	mov	r2, r6
 80139ea:	4621      	mov	r1, r4
 80139ec:	4640      	mov	r0, r8
 80139ee:	f7ff ff71 	bl	80138d4 <__ssputs_r>
 80139f2:	3001      	adds	r0, #1
 80139f4:	f000 80a4 	beq.w	8013b40 <_svfiprintf_r+0x1b8>
 80139f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139fa:	4453      	add	r3, sl
 80139fc:	9309      	str	r3, [sp, #36]	; 0x24
 80139fe:	783b      	ldrb	r3, [r7, #0]
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	f000 809d 	beq.w	8013b40 <_svfiprintf_r+0x1b8>
 8013a06:	2300      	movs	r3, #0
 8013a08:	f04f 32ff 	mov.w	r2, #4294967295
 8013a0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a10:	9304      	str	r3, [sp, #16]
 8013a12:	9307      	str	r3, [sp, #28]
 8013a14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a18:	931a      	str	r3, [sp, #104]	; 0x68
 8013a1a:	462f      	mov	r7, r5
 8013a1c:	2205      	movs	r2, #5
 8013a1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8013a22:	4850      	ldr	r0, [pc, #320]	; (8013b64 <_svfiprintf_r+0x1dc>)
 8013a24:	f7ec fc64 	bl	80002f0 <memchr>
 8013a28:	9b04      	ldr	r3, [sp, #16]
 8013a2a:	b9d0      	cbnz	r0, 8013a62 <_svfiprintf_r+0xda>
 8013a2c:	06d9      	lsls	r1, r3, #27
 8013a2e:	bf44      	itt	mi
 8013a30:	2220      	movmi	r2, #32
 8013a32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a36:	071a      	lsls	r2, r3, #28
 8013a38:	bf44      	itt	mi
 8013a3a:	222b      	movmi	r2, #43	; 0x2b
 8013a3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a40:	782a      	ldrb	r2, [r5, #0]
 8013a42:	2a2a      	cmp	r2, #42	; 0x2a
 8013a44:	d015      	beq.n	8013a72 <_svfiprintf_r+0xea>
 8013a46:	9a07      	ldr	r2, [sp, #28]
 8013a48:	462f      	mov	r7, r5
 8013a4a:	2000      	movs	r0, #0
 8013a4c:	250a      	movs	r5, #10
 8013a4e:	4639      	mov	r1, r7
 8013a50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a54:	3b30      	subs	r3, #48	; 0x30
 8013a56:	2b09      	cmp	r3, #9
 8013a58:	d94d      	bls.n	8013af6 <_svfiprintf_r+0x16e>
 8013a5a:	b1b8      	cbz	r0, 8013a8c <_svfiprintf_r+0x104>
 8013a5c:	e00f      	b.n	8013a7e <_svfiprintf_r+0xf6>
 8013a5e:	462f      	mov	r7, r5
 8013a60:	e7b8      	b.n	80139d4 <_svfiprintf_r+0x4c>
 8013a62:	4a40      	ldr	r2, [pc, #256]	; (8013b64 <_svfiprintf_r+0x1dc>)
 8013a64:	1a80      	subs	r0, r0, r2
 8013a66:	fa0b f000 	lsl.w	r0, fp, r0
 8013a6a:	4318      	orrs	r0, r3
 8013a6c:	9004      	str	r0, [sp, #16]
 8013a6e:	463d      	mov	r5, r7
 8013a70:	e7d3      	b.n	8013a1a <_svfiprintf_r+0x92>
 8013a72:	9a03      	ldr	r2, [sp, #12]
 8013a74:	1d11      	adds	r1, r2, #4
 8013a76:	6812      	ldr	r2, [r2, #0]
 8013a78:	9103      	str	r1, [sp, #12]
 8013a7a:	2a00      	cmp	r2, #0
 8013a7c:	db01      	blt.n	8013a82 <_svfiprintf_r+0xfa>
 8013a7e:	9207      	str	r2, [sp, #28]
 8013a80:	e004      	b.n	8013a8c <_svfiprintf_r+0x104>
 8013a82:	4252      	negs	r2, r2
 8013a84:	f043 0302 	orr.w	r3, r3, #2
 8013a88:	9207      	str	r2, [sp, #28]
 8013a8a:	9304      	str	r3, [sp, #16]
 8013a8c:	783b      	ldrb	r3, [r7, #0]
 8013a8e:	2b2e      	cmp	r3, #46	; 0x2e
 8013a90:	d10c      	bne.n	8013aac <_svfiprintf_r+0x124>
 8013a92:	787b      	ldrb	r3, [r7, #1]
 8013a94:	2b2a      	cmp	r3, #42	; 0x2a
 8013a96:	d133      	bne.n	8013b00 <_svfiprintf_r+0x178>
 8013a98:	9b03      	ldr	r3, [sp, #12]
 8013a9a:	1d1a      	adds	r2, r3, #4
 8013a9c:	681b      	ldr	r3, [r3, #0]
 8013a9e:	9203      	str	r2, [sp, #12]
 8013aa0:	2b00      	cmp	r3, #0
 8013aa2:	bfb8      	it	lt
 8013aa4:	f04f 33ff 	movlt.w	r3, #4294967295
 8013aa8:	3702      	adds	r7, #2
 8013aaa:	9305      	str	r3, [sp, #20]
 8013aac:	4d2e      	ldr	r5, [pc, #184]	; (8013b68 <_svfiprintf_r+0x1e0>)
 8013aae:	7839      	ldrb	r1, [r7, #0]
 8013ab0:	2203      	movs	r2, #3
 8013ab2:	4628      	mov	r0, r5
 8013ab4:	f7ec fc1c 	bl	80002f0 <memchr>
 8013ab8:	b138      	cbz	r0, 8013aca <_svfiprintf_r+0x142>
 8013aba:	2340      	movs	r3, #64	; 0x40
 8013abc:	1b40      	subs	r0, r0, r5
 8013abe:	fa03 f000 	lsl.w	r0, r3, r0
 8013ac2:	9b04      	ldr	r3, [sp, #16]
 8013ac4:	4303      	orrs	r3, r0
 8013ac6:	3701      	adds	r7, #1
 8013ac8:	9304      	str	r3, [sp, #16]
 8013aca:	7839      	ldrb	r1, [r7, #0]
 8013acc:	4827      	ldr	r0, [pc, #156]	; (8013b6c <_svfiprintf_r+0x1e4>)
 8013ace:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013ad2:	2206      	movs	r2, #6
 8013ad4:	1c7e      	adds	r6, r7, #1
 8013ad6:	f7ec fc0b 	bl	80002f0 <memchr>
 8013ada:	2800      	cmp	r0, #0
 8013adc:	d038      	beq.n	8013b50 <_svfiprintf_r+0x1c8>
 8013ade:	4b24      	ldr	r3, [pc, #144]	; (8013b70 <_svfiprintf_r+0x1e8>)
 8013ae0:	bb13      	cbnz	r3, 8013b28 <_svfiprintf_r+0x1a0>
 8013ae2:	9b03      	ldr	r3, [sp, #12]
 8013ae4:	3307      	adds	r3, #7
 8013ae6:	f023 0307 	bic.w	r3, r3, #7
 8013aea:	3308      	adds	r3, #8
 8013aec:	9303      	str	r3, [sp, #12]
 8013aee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013af0:	444b      	add	r3, r9
 8013af2:	9309      	str	r3, [sp, #36]	; 0x24
 8013af4:	e76d      	b.n	80139d2 <_svfiprintf_r+0x4a>
 8013af6:	fb05 3202 	mla	r2, r5, r2, r3
 8013afa:	2001      	movs	r0, #1
 8013afc:	460f      	mov	r7, r1
 8013afe:	e7a6      	b.n	8013a4e <_svfiprintf_r+0xc6>
 8013b00:	2300      	movs	r3, #0
 8013b02:	3701      	adds	r7, #1
 8013b04:	9305      	str	r3, [sp, #20]
 8013b06:	4619      	mov	r1, r3
 8013b08:	250a      	movs	r5, #10
 8013b0a:	4638      	mov	r0, r7
 8013b0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b10:	3a30      	subs	r2, #48	; 0x30
 8013b12:	2a09      	cmp	r2, #9
 8013b14:	d903      	bls.n	8013b1e <_svfiprintf_r+0x196>
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d0c8      	beq.n	8013aac <_svfiprintf_r+0x124>
 8013b1a:	9105      	str	r1, [sp, #20]
 8013b1c:	e7c6      	b.n	8013aac <_svfiprintf_r+0x124>
 8013b1e:	fb05 2101 	mla	r1, r5, r1, r2
 8013b22:	2301      	movs	r3, #1
 8013b24:	4607      	mov	r7, r0
 8013b26:	e7f0      	b.n	8013b0a <_svfiprintf_r+0x182>
 8013b28:	ab03      	add	r3, sp, #12
 8013b2a:	9300      	str	r3, [sp, #0]
 8013b2c:	4622      	mov	r2, r4
 8013b2e:	4b11      	ldr	r3, [pc, #68]	; (8013b74 <_svfiprintf_r+0x1ec>)
 8013b30:	a904      	add	r1, sp, #16
 8013b32:	4640      	mov	r0, r8
 8013b34:	f3af 8000 	nop.w
 8013b38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8013b3c:	4681      	mov	r9, r0
 8013b3e:	d1d6      	bne.n	8013aee <_svfiprintf_r+0x166>
 8013b40:	89a3      	ldrh	r3, [r4, #12]
 8013b42:	065b      	lsls	r3, r3, #25
 8013b44:	f53f af35 	bmi.w	80139b2 <_svfiprintf_r+0x2a>
 8013b48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b4a:	b01d      	add	sp, #116	; 0x74
 8013b4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b50:	ab03      	add	r3, sp, #12
 8013b52:	9300      	str	r3, [sp, #0]
 8013b54:	4622      	mov	r2, r4
 8013b56:	4b07      	ldr	r3, [pc, #28]	; (8013b74 <_svfiprintf_r+0x1ec>)
 8013b58:	a904      	add	r1, sp, #16
 8013b5a:	4640      	mov	r0, r8
 8013b5c:	f000 f882 	bl	8013c64 <_printf_i>
 8013b60:	e7ea      	b.n	8013b38 <_svfiprintf_r+0x1b0>
 8013b62:	bf00      	nop
 8013b64:	08014180 	.word	0x08014180
 8013b68:	08014186 	.word	0x08014186
 8013b6c:	0801418a 	.word	0x0801418a
 8013b70:	00000000 	.word	0x00000000
 8013b74:	080138d5 	.word	0x080138d5

08013b78 <_printf_common>:
 8013b78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013b7c:	4691      	mov	r9, r2
 8013b7e:	461f      	mov	r7, r3
 8013b80:	688a      	ldr	r2, [r1, #8]
 8013b82:	690b      	ldr	r3, [r1, #16]
 8013b84:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013b88:	4293      	cmp	r3, r2
 8013b8a:	bfb8      	it	lt
 8013b8c:	4613      	movlt	r3, r2
 8013b8e:	f8c9 3000 	str.w	r3, [r9]
 8013b92:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013b96:	4606      	mov	r6, r0
 8013b98:	460c      	mov	r4, r1
 8013b9a:	b112      	cbz	r2, 8013ba2 <_printf_common+0x2a>
 8013b9c:	3301      	adds	r3, #1
 8013b9e:	f8c9 3000 	str.w	r3, [r9]
 8013ba2:	6823      	ldr	r3, [r4, #0]
 8013ba4:	0699      	lsls	r1, r3, #26
 8013ba6:	bf42      	ittt	mi
 8013ba8:	f8d9 3000 	ldrmi.w	r3, [r9]
 8013bac:	3302      	addmi	r3, #2
 8013bae:	f8c9 3000 	strmi.w	r3, [r9]
 8013bb2:	6825      	ldr	r5, [r4, #0]
 8013bb4:	f015 0506 	ands.w	r5, r5, #6
 8013bb8:	d107      	bne.n	8013bca <_printf_common+0x52>
 8013bba:	f104 0a19 	add.w	sl, r4, #25
 8013bbe:	68e3      	ldr	r3, [r4, #12]
 8013bc0:	f8d9 2000 	ldr.w	r2, [r9]
 8013bc4:	1a9b      	subs	r3, r3, r2
 8013bc6:	42ab      	cmp	r3, r5
 8013bc8:	dc28      	bgt.n	8013c1c <_printf_common+0xa4>
 8013bca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8013bce:	6822      	ldr	r2, [r4, #0]
 8013bd0:	3300      	adds	r3, #0
 8013bd2:	bf18      	it	ne
 8013bd4:	2301      	movne	r3, #1
 8013bd6:	0692      	lsls	r2, r2, #26
 8013bd8:	d42d      	bmi.n	8013c36 <_printf_common+0xbe>
 8013bda:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013bde:	4639      	mov	r1, r7
 8013be0:	4630      	mov	r0, r6
 8013be2:	47c0      	blx	r8
 8013be4:	3001      	adds	r0, #1
 8013be6:	d020      	beq.n	8013c2a <_printf_common+0xb2>
 8013be8:	6823      	ldr	r3, [r4, #0]
 8013bea:	68e5      	ldr	r5, [r4, #12]
 8013bec:	f8d9 2000 	ldr.w	r2, [r9]
 8013bf0:	f003 0306 	and.w	r3, r3, #6
 8013bf4:	2b04      	cmp	r3, #4
 8013bf6:	bf08      	it	eq
 8013bf8:	1aad      	subeq	r5, r5, r2
 8013bfa:	68a3      	ldr	r3, [r4, #8]
 8013bfc:	6922      	ldr	r2, [r4, #16]
 8013bfe:	bf0c      	ite	eq
 8013c00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c04:	2500      	movne	r5, #0
 8013c06:	4293      	cmp	r3, r2
 8013c08:	bfc4      	itt	gt
 8013c0a:	1a9b      	subgt	r3, r3, r2
 8013c0c:	18ed      	addgt	r5, r5, r3
 8013c0e:	f04f 0900 	mov.w	r9, #0
 8013c12:	341a      	adds	r4, #26
 8013c14:	454d      	cmp	r5, r9
 8013c16:	d11a      	bne.n	8013c4e <_printf_common+0xd6>
 8013c18:	2000      	movs	r0, #0
 8013c1a:	e008      	b.n	8013c2e <_printf_common+0xb6>
 8013c1c:	2301      	movs	r3, #1
 8013c1e:	4652      	mov	r2, sl
 8013c20:	4639      	mov	r1, r7
 8013c22:	4630      	mov	r0, r6
 8013c24:	47c0      	blx	r8
 8013c26:	3001      	adds	r0, #1
 8013c28:	d103      	bne.n	8013c32 <_printf_common+0xba>
 8013c2a:	f04f 30ff 	mov.w	r0, #4294967295
 8013c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013c32:	3501      	adds	r5, #1
 8013c34:	e7c3      	b.n	8013bbe <_printf_common+0x46>
 8013c36:	18e1      	adds	r1, r4, r3
 8013c38:	1c5a      	adds	r2, r3, #1
 8013c3a:	2030      	movs	r0, #48	; 0x30
 8013c3c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013c40:	4422      	add	r2, r4
 8013c42:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013c46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013c4a:	3302      	adds	r3, #2
 8013c4c:	e7c5      	b.n	8013bda <_printf_common+0x62>
 8013c4e:	2301      	movs	r3, #1
 8013c50:	4622      	mov	r2, r4
 8013c52:	4639      	mov	r1, r7
 8013c54:	4630      	mov	r0, r6
 8013c56:	47c0      	blx	r8
 8013c58:	3001      	adds	r0, #1
 8013c5a:	d0e6      	beq.n	8013c2a <_printf_common+0xb2>
 8013c5c:	f109 0901 	add.w	r9, r9, #1
 8013c60:	e7d8      	b.n	8013c14 <_printf_common+0x9c>
	...

08013c64 <_printf_i>:
 8013c64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013c68:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8013c6c:	460c      	mov	r4, r1
 8013c6e:	7e09      	ldrb	r1, [r1, #24]
 8013c70:	b085      	sub	sp, #20
 8013c72:	296e      	cmp	r1, #110	; 0x6e
 8013c74:	4617      	mov	r7, r2
 8013c76:	4606      	mov	r6, r0
 8013c78:	4698      	mov	r8, r3
 8013c7a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8013c7c:	f000 80b3 	beq.w	8013de6 <_printf_i+0x182>
 8013c80:	d822      	bhi.n	8013cc8 <_printf_i+0x64>
 8013c82:	2963      	cmp	r1, #99	; 0x63
 8013c84:	d036      	beq.n	8013cf4 <_printf_i+0x90>
 8013c86:	d80a      	bhi.n	8013c9e <_printf_i+0x3a>
 8013c88:	2900      	cmp	r1, #0
 8013c8a:	f000 80b9 	beq.w	8013e00 <_printf_i+0x19c>
 8013c8e:	2958      	cmp	r1, #88	; 0x58
 8013c90:	f000 8083 	beq.w	8013d9a <_printf_i+0x136>
 8013c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013c98:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8013c9c:	e032      	b.n	8013d04 <_printf_i+0xa0>
 8013c9e:	2964      	cmp	r1, #100	; 0x64
 8013ca0:	d001      	beq.n	8013ca6 <_printf_i+0x42>
 8013ca2:	2969      	cmp	r1, #105	; 0x69
 8013ca4:	d1f6      	bne.n	8013c94 <_printf_i+0x30>
 8013ca6:	6820      	ldr	r0, [r4, #0]
 8013ca8:	6813      	ldr	r3, [r2, #0]
 8013caa:	0605      	lsls	r5, r0, #24
 8013cac:	f103 0104 	add.w	r1, r3, #4
 8013cb0:	d52a      	bpl.n	8013d08 <_printf_i+0xa4>
 8013cb2:	681b      	ldr	r3, [r3, #0]
 8013cb4:	6011      	str	r1, [r2, #0]
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	da03      	bge.n	8013cc2 <_printf_i+0x5e>
 8013cba:	222d      	movs	r2, #45	; 0x2d
 8013cbc:	425b      	negs	r3, r3
 8013cbe:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8013cc2:	486f      	ldr	r0, [pc, #444]	; (8013e80 <_printf_i+0x21c>)
 8013cc4:	220a      	movs	r2, #10
 8013cc6:	e039      	b.n	8013d3c <_printf_i+0xd8>
 8013cc8:	2973      	cmp	r1, #115	; 0x73
 8013cca:	f000 809d 	beq.w	8013e08 <_printf_i+0x1a4>
 8013cce:	d808      	bhi.n	8013ce2 <_printf_i+0x7e>
 8013cd0:	296f      	cmp	r1, #111	; 0x6f
 8013cd2:	d020      	beq.n	8013d16 <_printf_i+0xb2>
 8013cd4:	2970      	cmp	r1, #112	; 0x70
 8013cd6:	d1dd      	bne.n	8013c94 <_printf_i+0x30>
 8013cd8:	6823      	ldr	r3, [r4, #0]
 8013cda:	f043 0320 	orr.w	r3, r3, #32
 8013cde:	6023      	str	r3, [r4, #0]
 8013ce0:	e003      	b.n	8013cea <_printf_i+0x86>
 8013ce2:	2975      	cmp	r1, #117	; 0x75
 8013ce4:	d017      	beq.n	8013d16 <_printf_i+0xb2>
 8013ce6:	2978      	cmp	r1, #120	; 0x78
 8013ce8:	d1d4      	bne.n	8013c94 <_printf_i+0x30>
 8013cea:	2378      	movs	r3, #120	; 0x78
 8013cec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013cf0:	4864      	ldr	r0, [pc, #400]	; (8013e84 <_printf_i+0x220>)
 8013cf2:	e055      	b.n	8013da0 <_printf_i+0x13c>
 8013cf4:	6813      	ldr	r3, [r2, #0]
 8013cf6:	1d19      	adds	r1, r3, #4
 8013cf8:	681b      	ldr	r3, [r3, #0]
 8013cfa:	6011      	str	r1, [r2, #0]
 8013cfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d04:	2301      	movs	r3, #1
 8013d06:	e08c      	b.n	8013e22 <_printf_i+0x1be>
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	6011      	str	r1, [r2, #0]
 8013d0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8013d10:	bf18      	it	ne
 8013d12:	b21b      	sxthne	r3, r3
 8013d14:	e7cf      	b.n	8013cb6 <_printf_i+0x52>
 8013d16:	6813      	ldr	r3, [r2, #0]
 8013d18:	6825      	ldr	r5, [r4, #0]
 8013d1a:	1d18      	adds	r0, r3, #4
 8013d1c:	6010      	str	r0, [r2, #0]
 8013d1e:	0628      	lsls	r0, r5, #24
 8013d20:	d501      	bpl.n	8013d26 <_printf_i+0xc2>
 8013d22:	681b      	ldr	r3, [r3, #0]
 8013d24:	e002      	b.n	8013d2c <_printf_i+0xc8>
 8013d26:	0668      	lsls	r0, r5, #25
 8013d28:	d5fb      	bpl.n	8013d22 <_printf_i+0xbe>
 8013d2a:	881b      	ldrh	r3, [r3, #0]
 8013d2c:	4854      	ldr	r0, [pc, #336]	; (8013e80 <_printf_i+0x21c>)
 8013d2e:	296f      	cmp	r1, #111	; 0x6f
 8013d30:	bf14      	ite	ne
 8013d32:	220a      	movne	r2, #10
 8013d34:	2208      	moveq	r2, #8
 8013d36:	2100      	movs	r1, #0
 8013d38:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013d3c:	6865      	ldr	r5, [r4, #4]
 8013d3e:	60a5      	str	r5, [r4, #8]
 8013d40:	2d00      	cmp	r5, #0
 8013d42:	f2c0 8095 	blt.w	8013e70 <_printf_i+0x20c>
 8013d46:	6821      	ldr	r1, [r4, #0]
 8013d48:	f021 0104 	bic.w	r1, r1, #4
 8013d4c:	6021      	str	r1, [r4, #0]
 8013d4e:	2b00      	cmp	r3, #0
 8013d50:	d13d      	bne.n	8013dce <_printf_i+0x16a>
 8013d52:	2d00      	cmp	r5, #0
 8013d54:	f040 808e 	bne.w	8013e74 <_printf_i+0x210>
 8013d58:	4665      	mov	r5, ip
 8013d5a:	2a08      	cmp	r2, #8
 8013d5c:	d10b      	bne.n	8013d76 <_printf_i+0x112>
 8013d5e:	6823      	ldr	r3, [r4, #0]
 8013d60:	07db      	lsls	r3, r3, #31
 8013d62:	d508      	bpl.n	8013d76 <_printf_i+0x112>
 8013d64:	6923      	ldr	r3, [r4, #16]
 8013d66:	6862      	ldr	r2, [r4, #4]
 8013d68:	429a      	cmp	r2, r3
 8013d6a:	bfde      	ittt	le
 8013d6c:	2330      	movle	r3, #48	; 0x30
 8013d6e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013d72:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013d76:	ebac 0305 	sub.w	r3, ip, r5
 8013d7a:	6123      	str	r3, [r4, #16]
 8013d7c:	f8cd 8000 	str.w	r8, [sp]
 8013d80:	463b      	mov	r3, r7
 8013d82:	aa03      	add	r2, sp, #12
 8013d84:	4621      	mov	r1, r4
 8013d86:	4630      	mov	r0, r6
 8013d88:	f7ff fef6 	bl	8013b78 <_printf_common>
 8013d8c:	3001      	adds	r0, #1
 8013d8e:	d14d      	bne.n	8013e2c <_printf_i+0x1c8>
 8013d90:	f04f 30ff 	mov.w	r0, #4294967295
 8013d94:	b005      	add	sp, #20
 8013d96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013d9a:	4839      	ldr	r0, [pc, #228]	; (8013e80 <_printf_i+0x21c>)
 8013d9c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8013da0:	6813      	ldr	r3, [r2, #0]
 8013da2:	6821      	ldr	r1, [r4, #0]
 8013da4:	1d1d      	adds	r5, r3, #4
 8013da6:	681b      	ldr	r3, [r3, #0]
 8013da8:	6015      	str	r5, [r2, #0]
 8013daa:	060a      	lsls	r2, r1, #24
 8013dac:	d50b      	bpl.n	8013dc6 <_printf_i+0x162>
 8013dae:	07ca      	lsls	r2, r1, #31
 8013db0:	bf44      	itt	mi
 8013db2:	f041 0120 	orrmi.w	r1, r1, #32
 8013db6:	6021      	strmi	r1, [r4, #0]
 8013db8:	b91b      	cbnz	r3, 8013dc2 <_printf_i+0x15e>
 8013dba:	6822      	ldr	r2, [r4, #0]
 8013dbc:	f022 0220 	bic.w	r2, r2, #32
 8013dc0:	6022      	str	r2, [r4, #0]
 8013dc2:	2210      	movs	r2, #16
 8013dc4:	e7b7      	b.n	8013d36 <_printf_i+0xd2>
 8013dc6:	064d      	lsls	r5, r1, #25
 8013dc8:	bf48      	it	mi
 8013dca:	b29b      	uxthmi	r3, r3
 8013dcc:	e7ef      	b.n	8013dae <_printf_i+0x14a>
 8013dce:	4665      	mov	r5, ip
 8013dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013dd4:	fb02 3311 	mls	r3, r2, r1, r3
 8013dd8:	5cc3      	ldrb	r3, [r0, r3]
 8013dda:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8013dde:	460b      	mov	r3, r1
 8013de0:	2900      	cmp	r1, #0
 8013de2:	d1f5      	bne.n	8013dd0 <_printf_i+0x16c>
 8013de4:	e7b9      	b.n	8013d5a <_printf_i+0xf6>
 8013de6:	6813      	ldr	r3, [r2, #0]
 8013de8:	6825      	ldr	r5, [r4, #0]
 8013dea:	6961      	ldr	r1, [r4, #20]
 8013dec:	1d18      	adds	r0, r3, #4
 8013dee:	6010      	str	r0, [r2, #0]
 8013df0:	0628      	lsls	r0, r5, #24
 8013df2:	681b      	ldr	r3, [r3, #0]
 8013df4:	d501      	bpl.n	8013dfa <_printf_i+0x196>
 8013df6:	6019      	str	r1, [r3, #0]
 8013df8:	e002      	b.n	8013e00 <_printf_i+0x19c>
 8013dfa:	066a      	lsls	r2, r5, #25
 8013dfc:	d5fb      	bpl.n	8013df6 <_printf_i+0x192>
 8013dfe:	8019      	strh	r1, [r3, #0]
 8013e00:	2300      	movs	r3, #0
 8013e02:	6123      	str	r3, [r4, #16]
 8013e04:	4665      	mov	r5, ip
 8013e06:	e7b9      	b.n	8013d7c <_printf_i+0x118>
 8013e08:	6813      	ldr	r3, [r2, #0]
 8013e0a:	1d19      	adds	r1, r3, #4
 8013e0c:	6011      	str	r1, [r2, #0]
 8013e0e:	681d      	ldr	r5, [r3, #0]
 8013e10:	6862      	ldr	r2, [r4, #4]
 8013e12:	2100      	movs	r1, #0
 8013e14:	4628      	mov	r0, r5
 8013e16:	f7ec fa6b 	bl	80002f0 <memchr>
 8013e1a:	b108      	cbz	r0, 8013e20 <_printf_i+0x1bc>
 8013e1c:	1b40      	subs	r0, r0, r5
 8013e1e:	6060      	str	r0, [r4, #4]
 8013e20:	6863      	ldr	r3, [r4, #4]
 8013e22:	6123      	str	r3, [r4, #16]
 8013e24:	2300      	movs	r3, #0
 8013e26:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013e2a:	e7a7      	b.n	8013d7c <_printf_i+0x118>
 8013e2c:	6923      	ldr	r3, [r4, #16]
 8013e2e:	462a      	mov	r2, r5
 8013e30:	4639      	mov	r1, r7
 8013e32:	4630      	mov	r0, r6
 8013e34:	47c0      	blx	r8
 8013e36:	3001      	adds	r0, #1
 8013e38:	d0aa      	beq.n	8013d90 <_printf_i+0x12c>
 8013e3a:	6823      	ldr	r3, [r4, #0]
 8013e3c:	079b      	lsls	r3, r3, #30
 8013e3e:	d413      	bmi.n	8013e68 <_printf_i+0x204>
 8013e40:	68e0      	ldr	r0, [r4, #12]
 8013e42:	9b03      	ldr	r3, [sp, #12]
 8013e44:	4298      	cmp	r0, r3
 8013e46:	bfb8      	it	lt
 8013e48:	4618      	movlt	r0, r3
 8013e4a:	e7a3      	b.n	8013d94 <_printf_i+0x130>
 8013e4c:	2301      	movs	r3, #1
 8013e4e:	464a      	mov	r2, r9
 8013e50:	4639      	mov	r1, r7
 8013e52:	4630      	mov	r0, r6
 8013e54:	47c0      	blx	r8
 8013e56:	3001      	adds	r0, #1
 8013e58:	d09a      	beq.n	8013d90 <_printf_i+0x12c>
 8013e5a:	3501      	adds	r5, #1
 8013e5c:	68e3      	ldr	r3, [r4, #12]
 8013e5e:	9a03      	ldr	r2, [sp, #12]
 8013e60:	1a9b      	subs	r3, r3, r2
 8013e62:	42ab      	cmp	r3, r5
 8013e64:	dcf2      	bgt.n	8013e4c <_printf_i+0x1e8>
 8013e66:	e7eb      	b.n	8013e40 <_printf_i+0x1dc>
 8013e68:	2500      	movs	r5, #0
 8013e6a:	f104 0919 	add.w	r9, r4, #25
 8013e6e:	e7f5      	b.n	8013e5c <_printf_i+0x1f8>
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d1ac      	bne.n	8013dce <_printf_i+0x16a>
 8013e74:	7803      	ldrb	r3, [r0, #0]
 8013e76:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013e7a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013e7e:	e76c      	b.n	8013d5a <_printf_i+0xf6>
 8013e80:	08014191 	.word	0x08014191
 8013e84:	080141a2 	.word	0x080141a2

08013e88 <memmove>:
 8013e88:	4288      	cmp	r0, r1
 8013e8a:	b510      	push	{r4, lr}
 8013e8c:	eb01 0302 	add.w	r3, r1, r2
 8013e90:	d807      	bhi.n	8013ea2 <memmove+0x1a>
 8013e92:	1e42      	subs	r2, r0, #1
 8013e94:	4299      	cmp	r1, r3
 8013e96:	d00a      	beq.n	8013eae <memmove+0x26>
 8013e98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013e9c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013ea0:	e7f8      	b.n	8013e94 <memmove+0xc>
 8013ea2:	4283      	cmp	r3, r0
 8013ea4:	d9f5      	bls.n	8013e92 <memmove+0xa>
 8013ea6:	1881      	adds	r1, r0, r2
 8013ea8:	1ad2      	subs	r2, r2, r3
 8013eaa:	42d3      	cmn	r3, r2
 8013eac:	d100      	bne.n	8013eb0 <memmove+0x28>
 8013eae:	bd10      	pop	{r4, pc}
 8013eb0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013eb4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013eb8:	e7f7      	b.n	8013eaa <memmove+0x22>

08013eba <_realloc_r>:
 8013eba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013ebc:	4607      	mov	r7, r0
 8013ebe:	4614      	mov	r4, r2
 8013ec0:	460e      	mov	r6, r1
 8013ec2:	b921      	cbnz	r1, 8013ece <_realloc_r+0x14>
 8013ec4:	4611      	mov	r1, r2
 8013ec6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013eca:	f7ff bc77 	b.w	80137bc <_malloc_r>
 8013ece:	b922      	cbnz	r2, 8013eda <_realloc_r+0x20>
 8013ed0:	f7ff fc26 	bl	8013720 <_free_r>
 8013ed4:	4625      	mov	r5, r4
 8013ed6:	4628      	mov	r0, r5
 8013ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013eda:	f000 f814 	bl	8013f06 <_malloc_usable_size_r>
 8013ede:	42a0      	cmp	r0, r4
 8013ee0:	d20f      	bcs.n	8013f02 <_realloc_r+0x48>
 8013ee2:	4621      	mov	r1, r4
 8013ee4:	4638      	mov	r0, r7
 8013ee6:	f7ff fc69 	bl	80137bc <_malloc_r>
 8013eea:	4605      	mov	r5, r0
 8013eec:	2800      	cmp	r0, #0
 8013eee:	d0f2      	beq.n	8013ed6 <_realloc_r+0x1c>
 8013ef0:	4631      	mov	r1, r6
 8013ef2:	4622      	mov	r2, r4
 8013ef4:	f7ff fc00 	bl	80136f8 <memcpy>
 8013ef8:	4631      	mov	r1, r6
 8013efa:	4638      	mov	r0, r7
 8013efc:	f7ff fc10 	bl	8013720 <_free_r>
 8013f00:	e7e9      	b.n	8013ed6 <_realloc_r+0x1c>
 8013f02:	4635      	mov	r5, r6
 8013f04:	e7e7      	b.n	8013ed6 <_realloc_r+0x1c>

08013f06 <_malloc_usable_size_r>:
 8013f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013f0a:	1f18      	subs	r0, r3, #4
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	bfbc      	itt	lt
 8013f10:	580b      	ldrlt	r3, [r1, r0]
 8013f12:	18c0      	addlt	r0, r0, r3
 8013f14:	4770      	bx	lr
	...

08013f18 <_init>:
 8013f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f1a:	bf00      	nop
 8013f1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f1e:	bc08      	pop	{r3}
 8013f20:	469e      	mov	lr, r3
 8013f22:	4770      	bx	lr

08013f24 <_fini>:
 8013f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f26:	bf00      	nop
 8013f28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8013f2a:	bc08      	pop	{r3}
 8013f2c:	469e      	mov	lr, r3
 8013f2e:	4770      	bx	lr


Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101f0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08010488  08010488  00020488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010590  08010590  000301cc  2**0
                  CONTENTS
  4 .ARM          00000008  08010590  08010590  00020590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010598  08010598  000301cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010598  08010598  00020598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801059c  0801059c  0002059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  24000000  080105a0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000115c  240001cc  0801076c  000301cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24001328  0801076c  00031328  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00037ea6  00000000  00000000  000301fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005edf  00000000  00000000  000680a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ca0  00000000  00000000  0006df80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001a40  00000000  00000000  0006fc20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0003e70f  00000000  00000000  00071660  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001e8f5  00000000  00000000  000afd6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0016e371  00000000  00000000  000ce664  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0023c9d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007928  00000000  00000000  0023ca50  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240001cc 	.word	0x240001cc
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08010470 	.word	0x08010470

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240001d0 	.word	0x240001d0
 80002d4:	08010470 	.word	0x08010470

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b972 	b.w	80005d4 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	4688      	mov	r8, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14b      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000316:	428a      	cmp	r2, r1
 8000318:	4615      	mov	r5, r2
 800031a:	d967      	bls.n	80003ec <__udivmoddi4+0xe4>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b14a      	cbz	r2, 8000336 <__udivmoddi4+0x2e>
 8000322:	f1c2 0720 	rsb	r7, r2, #32
 8000326:	fa01 f302 	lsl.w	r3, r1, r2
 800032a:	fa20 f707 	lsr.w	r7, r0, r7
 800032e:	4095      	lsls	r5, r2
 8000330:	ea47 0803 	orr.w	r8, r7, r3
 8000334:	4094      	lsls	r4, r2
 8000336:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800033a:	0c23      	lsrs	r3, r4, #16
 800033c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000340:	fa1f fc85 	uxth.w	ip, r5
 8000344:	fb0e 8817 	mls	r8, lr, r7, r8
 8000348:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034c:	fb07 f10c 	mul.w	r1, r7, ip
 8000350:	4299      	cmp	r1, r3
 8000352:	d909      	bls.n	8000368 <__udivmoddi4+0x60>
 8000354:	18eb      	adds	r3, r5, r3
 8000356:	f107 30ff 	add.w	r0, r7, #4294967295
 800035a:	f080 811b 	bcs.w	8000594 <__udivmoddi4+0x28c>
 800035e:	4299      	cmp	r1, r3
 8000360:	f240 8118 	bls.w	8000594 <__udivmoddi4+0x28c>
 8000364:	3f02      	subs	r7, #2
 8000366:	442b      	add	r3, r5
 8000368:	1a5b      	subs	r3, r3, r1
 800036a:	b2a4      	uxth	r4, r4
 800036c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000370:	fb0e 3310 	mls	r3, lr, r0, r3
 8000374:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000378:	fb00 fc0c 	mul.w	ip, r0, ip
 800037c:	45a4      	cmp	ip, r4
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x8c>
 8000380:	192c      	adds	r4, r5, r4
 8000382:	f100 33ff 	add.w	r3, r0, #4294967295
 8000386:	f080 8107 	bcs.w	8000598 <__udivmoddi4+0x290>
 800038a:	45a4      	cmp	ip, r4
 800038c:	f240 8104 	bls.w	8000598 <__udivmoddi4+0x290>
 8000390:	3802      	subs	r0, #2
 8000392:	442c      	add	r4, r5
 8000394:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000398:	eba4 040c 	sub.w	r4, r4, ip
 800039c:	2700      	movs	r7, #0
 800039e:	b11e      	cbz	r6, 80003a8 <__udivmoddi4+0xa0>
 80003a0:	40d4      	lsrs	r4, r2
 80003a2:	2300      	movs	r3, #0
 80003a4:	e9c6 4300 	strd	r4, r3, [r6]
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d909      	bls.n	80003c6 <__udivmoddi4+0xbe>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80eb 	beq.w	800058e <__udivmoddi4+0x286>
 80003b8:	2700      	movs	r7, #0
 80003ba:	e9c6 0100 	strd	r0, r1, [r6]
 80003be:	4638      	mov	r0, r7
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	fab3 f783 	clz	r7, r3
 80003ca:	2f00      	cmp	r7, #0
 80003cc:	d147      	bne.n	800045e <__udivmoddi4+0x156>
 80003ce:	428b      	cmp	r3, r1
 80003d0:	d302      	bcc.n	80003d8 <__udivmoddi4+0xd0>
 80003d2:	4282      	cmp	r2, r0
 80003d4:	f200 80fa 	bhi.w	80005cc <__udivmoddi4+0x2c4>
 80003d8:	1a84      	subs	r4, r0, r2
 80003da:	eb61 0303 	sbc.w	r3, r1, r3
 80003de:	2001      	movs	r0, #1
 80003e0:	4698      	mov	r8, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d0e0      	beq.n	80003a8 <__udivmoddi4+0xa0>
 80003e6:	e9c6 4800 	strd	r4, r8, [r6]
 80003ea:	e7dd      	b.n	80003a8 <__udivmoddi4+0xa0>
 80003ec:	b902      	cbnz	r2, 80003f0 <__udivmoddi4+0xe8>
 80003ee:	deff      	udf	#255	; 0xff
 80003f0:	fab2 f282 	clz	r2, r2
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	f040 808f 	bne.w	8000518 <__udivmoddi4+0x210>
 80003fa:	1b49      	subs	r1, r1, r5
 80003fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000400:	fa1f f885 	uxth.w	r8, r5
 8000404:	2701      	movs	r7, #1
 8000406:	fbb1 fcfe 	udiv	ip, r1, lr
 800040a:	0c23      	lsrs	r3, r4, #16
 800040c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000410:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000414:	fb08 f10c 	mul.w	r1, r8, ip
 8000418:	4299      	cmp	r1, r3
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x124>
 800041c:	18eb      	adds	r3, r5, r3
 800041e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4299      	cmp	r1, r3
 8000426:	f200 80cd 	bhi.w	80005c4 <__udivmoddi4+0x2bc>
 800042a:	4684      	mov	ip, r0
 800042c:	1a59      	subs	r1, r3, r1
 800042e:	b2a3      	uxth	r3, r4
 8000430:	fbb1 f0fe 	udiv	r0, r1, lr
 8000434:	fb0e 1410 	mls	r4, lr, r0, r1
 8000438:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800043c:	fb08 f800 	mul.w	r8, r8, r0
 8000440:	45a0      	cmp	r8, r4
 8000442:	d907      	bls.n	8000454 <__udivmoddi4+0x14c>
 8000444:	192c      	adds	r4, r5, r4
 8000446:	f100 33ff 	add.w	r3, r0, #4294967295
 800044a:	d202      	bcs.n	8000452 <__udivmoddi4+0x14a>
 800044c:	45a0      	cmp	r8, r4
 800044e:	f200 80b6 	bhi.w	80005be <__udivmoddi4+0x2b6>
 8000452:	4618      	mov	r0, r3
 8000454:	eba4 0408 	sub.w	r4, r4, r8
 8000458:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800045c:	e79f      	b.n	800039e <__udivmoddi4+0x96>
 800045e:	f1c7 0c20 	rsb	ip, r7, #32
 8000462:	40bb      	lsls	r3, r7
 8000464:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000468:	ea4e 0e03 	orr.w	lr, lr, r3
 800046c:	fa01 f407 	lsl.w	r4, r1, r7
 8000470:	fa20 f50c 	lsr.w	r5, r0, ip
 8000474:	fa21 f30c 	lsr.w	r3, r1, ip
 8000478:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800047c:	4325      	orrs	r5, r4
 800047e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000482:	0c2c      	lsrs	r4, r5, #16
 8000484:	fb08 3319 	mls	r3, r8, r9, r3
 8000488:	fa1f fa8e 	uxth.w	sl, lr
 800048c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000490:	fb09 f40a 	mul.w	r4, r9, sl
 8000494:	429c      	cmp	r4, r3
 8000496:	fa02 f207 	lsl.w	r2, r2, r7
 800049a:	fa00 f107 	lsl.w	r1, r0, r7
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1e 0303 	adds.w	r3, lr, r3
 80004a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80004a8:	f080 8087 	bcs.w	80005ba <__udivmoddi4+0x2b2>
 80004ac:	429c      	cmp	r4, r3
 80004ae:	f240 8084 	bls.w	80005ba <__udivmoddi4+0x2b2>
 80004b2:	f1a9 0902 	sub.w	r9, r9, #2
 80004b6:	4473      	add	r3, lr
 80004b8:	1b1b      	subs	r3, r3, r4
 80004ba:	b2ad      	uxth	r5, r5
 80004bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c0:	fb08 3310 	mls	r3, r8, r0, r3
 80004c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80004cc:	45a2      	cmp	sl, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1e 0404 	adds.w	r4, lr, r4
 80004d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80004d8:	d26b      	bcs.n	80005b2 <__udivmoddi4+0x2aa>
 80004da:	45a2      	cmp	sl, r4
 80004dc:	d969      	bls.n	80005b2 <__udivmoddi4+0x2aa>
 80004de:	3802      	subs	r0, #2
 80004e0:	4474      	add	r4, lr
 80004e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004e6:	fba0 8902 	umull	r8, r9, r0, r2
 80004ea:	eba4 040a 	sub.w	r4, r4, sl
 80004ee:	454c      	cmp	r4, r9
 80004f0:	46c2      	mov	sl, r8
 80004f2:	464b      	mov	r3, r9
 80004f4:	d354      	bcc.n	80005a0 <__udivmoddi4+0x298>
 80004f6:	d051      	beq.n	800059c <__udivmoddi4+0x294>
 80004f8:	2e00      	cmp	r6, #0
 80004fa:	d069      	beq.n	80005d0 <__udivmoddi4+0x2c8>
 80004fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000500:	eb64 0403 	sbc.w	r4, r4, r3
 8000504:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000508:	40fd      	lsrs	r5, r7
 800050a:	40fc      	lsrs	r4, r7
 800050c:	ea4c 0505 	orr.w	r5, ip, r5
 8000510:	e9c6 5400 	strd	r5, r4, [r6]
 8000514:	2700      	movs	r7, #0
 8000516:	e747      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000518:	f1c2 0320 	rsb	r3, r2, #32
 800051c:	fa20 f703 	lsr.w	r7, r0, r3
 8000520:	4095      	lsls	r5, r2
 8000522:	fa01 f002 	lsl.w	r0, r1, r2
 8000526:	fa21 f303 	lsr.w	r3, r1, r3
 800052a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800052e:	4338      	orrs	r0, r7
 8000530:	0c01      	lsrs	r1, r0, #16
 8000532:	fbb3 f7fe 	udiv	r7, r3, lr
 8000536:	fa1f f885 	uxth.w	r8, r5
 800053a:	fb0e 3317 	mls	r3, lr, r7, r3
 800053e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000542:	fb07 f308 	mul.w	r3, r7, r8
 8000546:	428b      	cmp	r3, r1
 8000548:	fa04 f402 	lsl.w	r4, r4, r2
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x256>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f107 3cff 	add.w	ip, r7, #4294967295
 8000554:	d22f      	bcs.n	80005b6 <__udivmoddi4+0x2ae>
 8000556:	428b      	cmp	r3, r1
 8000558:	d92d      	bls.n	80005b6 <__udivmoddi4+0x2ae>
 800055a:	3f02      	subs	r7, #2
 800055c:	4429      	add	r1, r5
 800055e:	1acb      	subs	r3, r1, r3
 8000560:	b281      	uxth	r1, r0
 8000562:	fbb3 f0fe 	udiv	r0, r3, lr
 8000566:	fb0e 3310 	mls	r3, lr, r0, r3
 800056a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056e:	fb00 f308 	mul.w	r3, r0, r8
 8000572:	428b      	cmp	r3, r1
 8000574:	d907      	bls.n	8000586 <__udivmoddi4+0x27e>
 8000576:	1869      	adds	r1, r5, r1
 8000578:	f100 3cff 	add.w	ip, r0, #4294967295
 800057c:	d217      	bcs.n	80005ae <__udivmoddi4+0x2a6>
 800057e:	428b      	cmp	r3, r1
 8000580:	d915      	bls.n	80005ae <__udivmoddi4+0x2a6>
 8000582:	3802      	subs	r0, #2
 8000584:	4429      	add	r1, r5
 8000586:	1ac9      	subs	r1, r1, r3
 8000588:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800058c:	e73b      	b.n	8000406 <__udivmoddi4+0xfe>
 800058e:	4637      	mov	r7, r6
 8000590:	4630      	mov	r0, r6
 8000592:	e709      	b.n	80003a8 <__udivmoddi4+0xa0>
 8000594:	4607      	mov	r7, r0
 8000596:	e6e7      	b.n	8000368 <__udivmoddi4+0x60>
 8000598:	4618      	mov	r0, r3
 800059a:	e6fb      	b.n	8000394 <__udivmoddi4+0x8c>
 800059c:	4541      	cmp	r1, r8
 800059e:	d2ab      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80005a4:	eb69 020e 	sbc.w	r2, r9, lr
 80005a8:	3801      	subs	r0, #1
 80005aa:	4613      	mov	r3, r2
 80005ac:	e7a4      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005ae:	4660      	mov	r0, ip
 80005b0:	e7e9      	b.n	8000586 <__udivmoddi4+0x27e>
 80005b2:	4618      	mov	r0, r3
 80005b4:	e795      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b6:	4667      	mov	r7, ip
 80005b8:	e7d1      	b.n	800055e <__udivmoddi4+0x256>
 80005ba:	4681      	mov	r9, r0
 80005bc:	e77c      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005be:	3802      	subs	r0, #2
 80005c0:	442c      	add	r4, r5
 80005c2:	e747      	b.n	8000454 <__udivmoddi4+0x14c>
 80005c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c8:	442b      	add	r3, r5
 80005ca:	e72f      	b.n	800042c <__udivmoddi4+0x124>
 80005cc:	4638      	mov	r0, r7
 80005ce:	e708      	b.n	80003e2 <__udivmoddi4+0xda>
 80005d0:	4637      	mov	r7, r6
 80005d2:	e6e9      	b.n	80003a8 <__udivmoddi4+0xa0>

080005d4 <__aeabi_idiv0>:
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop

080005d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005dc:	f000 ff16 	bl	800140c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005e0:	f000 f820 	bl	8000624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005e4:	f000 fae2 	bl	8000bac <MX_GPIO_Init>
  MX_DMA_Init();
 80005e8:	f000 fac0 	bl	8000b6c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 80005ec:	f000 f9ae 	bl	800094c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 80005f0:	f00c fa0c 	bl	800ca0c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 80005f4:	f00f f972 	bl	800f8dc <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 80005f8:	f000 f8e0 	bl	80007bc <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 80005fc:	f000 f942 	bl	8000884 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8000600:	f000 fa1c 	bl	8000a3c <MX_UART8_Init>
  MX_USART3_UART_Init();
 8000604:	f000 fa66 	bl	8000ad4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8000608:	f000 f9c2 	bl	8000990 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800060c:	2101      	movs	r1, #1
 800060e:	4804      	ldr	r0, [pc, #16]	; (8000620 <main+0x48>)
 8000610:	f003 fad7 	bl	8003bc2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000614:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000618:	f000 ff8a 	bl	8001530 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 800061c:	e7f6      	b.n	800060c <main+0x34>
 800061e:	bf00      	nop
 8000620:	58020400 	.word	0x58020400

08000624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b0cc      	sub	sp, #304	; 0x130
 8000628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800062a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800062e:	224c      	movs	r2, #76	; 0x4c
 8000630:	2100      	movs	r1, #0
 8000632:	4618      	mov	r0, r3
 8000634:	f00f fe59 	bl	80102ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000638:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800063c:	2220      	movs	r2, #32
 800063e:	2100      	movs	r1, #0
 8000640:	4618      	mov	r0, r3
 8000642:	f00f fe52 	bl	80102ea <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000646:	f107 0308 	add.w	r3, r7, #8
 800064a:	4618      	mov	r0, r3
 800064c:	23bc      	movs	r3, #188	; 0xbc
 800064e:	461a      	mov	r2, r3
 8000650:	2100      	movs	r1, #0
 8000652:	f00f fe4a 	bl	80102ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000656:	2002      	movs	r0, #2
 8000658:	f004 fcd6 	bl	8005008 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	4b53      	ldr	r3, [pc, #332]	; (80007b0 <SystemClock_Config+0x18c>)
 8000664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000666:	4a52      	ldr	r2, [pc, #328]	; (80007b0 <SystemClock_Config+0x18c>)
 8000668:	f023 0301 	bic.w	r3, r3, #1
 800066c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800066e:	4b50      	ldr	r3, [pc, #320]	; (80007b0 <SystemClock_Config+0x18c>)
 8000670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000672:	f003 0201 	and.w	r2, r3, #1
 8000676:	1d3b      	adds	r3, r7, #4
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	4b4e      	ldr	r3, [pc, #312]	; (80007b4 <SystemClock_Config+0x190>)
 800067c:	699b      	ldr	r3, [r3, #24]
 800067e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000682:	4a4c      	ldr	r2, [pc, #304]	; (80007b4 <SystemClock_Config+0x190>)
 8000684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000688:	6193      	str	r3, [r2, #24]
 800068a:	4b4a      	ldr	r3, [pc, #296]	; (80007b4 <SystemClock_Config+0x190>)
 800068c:	699b      	ldr	r3, [r3, #24]
 800068e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8000692:	1d3b      	adds	r3, r7, #4
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800069a:	bf00      	nop
 800069c:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <SystemClock_Config+0x190>)
 800069e:	699b      	ldr	r3, [r3, #24]
 80006a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80006a8:	d1f8      	bne.n	800069c <SystemClock_Config+0x78>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006aa:	2303      	movs	r3, #3
 80006ac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c4:	2302      	movs	r3, #2
 80006c6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ca:	2302      	movs	r3, #2
 80006cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 5;
 80006d0:	2305      	movs	r3, #5
 80006d2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 48;
 80006d6:	2330      	movs	r3, #48	; 0x30
 80006d8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 80006dc:	2302      	movs	r3, #2
 80006de:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80006e2:	2305      	movs	r3, #5
 80006e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e8:	2302      	movs	r3, #2
 80006ea:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80006ee:	2308      	movs	r3, #8
 80006f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80006f4:	2300      	movs	r3, #0
 80006f6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fcc9 	bl	800509c <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xf0>
  {
    Error_Handler();
 8000710:	f000 fb36 	bl	8000d80 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	233f      	movs	r3, #63	; 0x3f
 8000716:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800071a:	2300      	movs	r3, #0
 800071c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000720:	2300      	movs	r3, #0
 8000722:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800073e:	2300      	movs	r3, #0
 8000740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000744:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f005 f8b6 	bl	80058bc <HAL_RCC_ClockConfig>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <SystemClock_Config+0x136>
  {
    Error_Handler();
 8000756:	f000 fb13 	bl	8000d80 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_FDCAN
 800075a:	f107 0308 	add.w	r3, r7, #8
 800075e:	4a16      	ldr	r2, [pc, #88]	; (80007b8 <SystemClock_Config+0x194>)
 8000760:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_UART8|RCC_PERIPHCLK_SPI1
                              |RCC_PERIPHCLK_SDMMC|RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL;
 8000762:	f107 0308 	add.w	r3, r7, #8
 8000766:	2200      	movs	r2, #0
 8000768:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 800076a:	f107 0308 	add.w	r3, r7, #8
 800076e:	2200      	movs	r2, #0
 8000770:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_HSE;
 8000772:	f107 0308 	add.w	r3, r7, #8
 8000776:	2200      	movs	r2, #0
 8000778:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000782:	f107 0308 	add.w	r3, r7, #8
 8000786:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800078a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800078e:	f107 0308 	add.w	r3, r7, #8
 8000792:	4618      	mov	r0, r3
 8000794:	f005 fc16 	bl	8005fc4 <HAL_RCCEx_PeriphCLKConfig>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <SystemClock_Config+0x17e>
  {
    Error_Handler();
 800079e:	f000 faef 	bl	8000d80 <Error_Handler>
  }
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80007a2:	f004 fc6b 	bl	800507c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80007a6:	bf00      	nop
 80007a8:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	58000400 	.word	0x58000400
 80007b4:	58024800 	.word	0x58024800
 80007b8:	00059002 	.word	0x00059002

080007bc <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80007c0:	4b2e      	ldr	r3, [pc, #184]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007c2:	4a2f      	ldr	r2, [pc, #188]	; (8000880 <MX_FDCAN1_Init+0xc4>)
 80007c4:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 80007c6:	4b2d      	ldr	r3, [pc, #180]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80007cc:	4b2b      	ldr	r3, [pc, #172]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80007d2:	4b2a      	ldr	r3, [pc, #168]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80007d8:	4b28      	ldr	r3, [pc, #160]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007da:	2200      	movs	r2, #0
 80007dc:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80007de:	4b27      	ldr	r3, [pc, #156]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80007e4:	4b25      	ldr	r3, [pc, #148]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 80007ea:	4b24      	ldr	r3, [pc, #144]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007ec:	2201      	movs	r2, #1
 80007ee:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 80007f0:	4b22      	ldr	r3, [pc, #136]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007f2:	2202      	movs	r2, #2
 80007f4:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 80007f6:	4b21      	ldr	r3, [pc, #132]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007f8:	2202      	movs	r2, #2
 80007fa:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 80007fc:	4b1f      	ldr	r3, [pc, #124]	; (800087c <MX_FDCAN1_Init+0xc0>)
 80007fe:	2201      	movs	r2, #1
 8000800:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000802:	4b1e      	ldr	r3, [pc, #120]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000804:	2201      	movs	r2, #1
 8000806:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000808:	4b1c      	ldr	r3, [pc, #112]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800080a:	2201      	movs	r2, #1
 800080c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800080e:	4b1b      	ldr	r3, [pc, #108]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000810:	2201      	movs	r2, #1
 8000812:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000814:	4b19      	ldr	r3, [pc, #100]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000816:	2200      	movs	r2, #0
 8000818:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 0;
 800081a:	4b18      	ldr	r3, [pc, #96]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800081c:	2200      	movs	r2, #0
 800081e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000820:	4b16      	ldr	r3, [pc, #88]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000822:	2200      	movs	r2, #0
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 0;
 8000826:	4b15      	ldr	r3, [pc, #84]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000828:	2200      	movs	r2, #0
 800082a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 800082c:	4b13      	ldr	r3, [pc, #76]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800082e:	2204      	movs	r2, #4
 8000830:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8000832:	4b12      	ldr	r3, [pc, #72]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000834:	2200      	movs	r2, #0
 8000836:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000838:	4b10      	ldr	r3, [pc, #64]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800083a:	2204      	movs	r2, #4
 800083c:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800083e:	4b0f      	ldr	r3, [pc, #60]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000840:	2200      	movs	r2, #0
 8000842:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000844:	4b0d      	ldr	r3, [pc, #52]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000846:	2204      	movs	r2, #4
 8000848:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 800084a:	4b0c      	ldr	r3, [pc, #48]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800084c:	2200      	movs	r2, #0
 800084e:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8000850:	4b0a      	ldr	r3, [pc, #40]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000852:	2200      	movs	r2, #0
 8000854:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000858:	2200      	movs	r2, #0
 800085a:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800085c:	4b07      	ldr	r3, [pc, #28]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800085e:	2200      	movs	r2, #0
 8000860:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000862:	4b06      	ldr	r3, [pc, #24]	; (800087c <MX_FDCAN1_Init+0xc0>)
 8000864:	2204      	movs	r2, #4
 8000866:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000868:	4804      	ldr	r0, [pc, #16]	; (800087c <MX_FDCAN1_Init+0xc0>)
 800086a:	f002 fc61 	bl	8003130 <HAL_FDCAN_Init>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d001      	beq.n	8000878 <MX_FDCAN1_Init+0xbc>
  {
    Error_Handler();
 8000874:	f000 fa84 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000878:	bf00      	nop
 800087a:	bd80      	pop	{r7, pc}
 800087c:	2400038c 	.word	0x2400038c
 8000880:	4000a000 	.word	0x4000a000

08000884 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8000888:	4b2e      	ldr	r3, [pc, #184]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 800088a:	4a2f      	ldr	r2, [pc, #188]	; (8000948 <MX_FDCAN2_Init+0xc4>)
 800088c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8000894:	4b2b      	ldr	r3, [pc, #172]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 800089c:	2200      	movs	r2, #0
 800089e:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80008a0:	4b28      	ldr	r3, [pc, #160]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80008a6:	4b27      	ldr	r3, [pc, #156]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80008ac:	4b25      	ldr	r3, [pc, #148]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008ae:	2201      	movs	r2, #1
 80008b0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80008b2:	4b24      	ldr	r3, [pc, #144]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008b4:	2201      	movs	r2, #1
 80008b6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80008b8:	4b22      	ldr	r3, [pc, #136]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008ba:	2202      	movs	r2, #2
 80008bc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80008be:	4b21      	ldr	r3, [pc, #132]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008c0:	2202      	movs	r2, #2
 80008c2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80008c4:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008c6:	2201      	movs	r2, #1
 80008c8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80008ca:	4b1e      	ldr	r3, [pc, #120]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80008d0:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008d2:	2201      	movs	r2, #1
 80008d4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008d8:	2201      	movs	r2, #1
 80008da:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80008dc:	4b19      	ldr	r3, [pc, #100]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008de:	2200      	movs	r2, #0
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80008e8:	4b16      	ldr	r3, [pc, #88]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008f6:	2204      	movs	r2, #4
 80008f8:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 80008fa:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000900:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000902:	2204      	movs	r2, #4
 8000904:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8000906:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000908:	2200      	movs	r2, #0
 800090a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800090c:	4b0d      	ldr	r3, [pc, #52]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 800090e:	2204      	movs	r2, #4
 8000910:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8000912:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000914:	2200      	movs	r2, #0
 8000916:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 800091a:	2200      	movs	r2, #0
 800091c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000920:	2200      	movs	r2, #0
 8000922:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000926:	2200      	movs	r2, #0
 8000928:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 800092c:	2204      	movs	r2, #4
 800092e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_FDCAN2_Init+0xc0>)
 8000932:	f002 fbfd 	bl	8003130 <HAL_FDCAN_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800093c:	f000 fa20 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	24000540 	.word	0x24000540
 8000948:	4000a400 	.word	0x4000a400

0800094c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8000950:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 8000952:	4a0e      	ldr	r2, [pc, #56]	; (800098c <MX_SDMMC1_SD_Init+0x40>)
 8000954:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000956:	4b0c      	ldr	r3, [pc, #48]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 8000958:	2200      	movs	r2, #0
 800095a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800095c:	4b0a      	ldr	r3, [pc, #40]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 800095e:	2200      	movs	r2, #0
 8000960:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8000962:	4b09      	ldr	r3, [pc, #36]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 8000964:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000968:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800096a:	4b07      	ldr	r3, [pc, #28]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 800096c:	2200      	movs	r2, #0
 800096e:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 8000972:	2200      	movs	r2, #0
 8000974:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <MX_SDMMC1_SD_Init+0x3c>)
 8000978:	2201      	movs	r2, #1
 800097a:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800097c:	bf00      	nop
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	2400030c 	.word	0x2400030c
 800098c:	52007000 	.word	0x52007000

08000990 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000994:	4b27      	ldr	r3, [pc, #156]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000996:	4a28      	ldr	r2, [pc, #160]	; (8000a38 <MX_SPI1_Init+0xa8>)
 8000998:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800099a:	4b26      	ldr	r3, [pc, #152]	; (8000a34 <MX_SPI1_Init+0xa4>)
 800099c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80009a2:	4b24      	ldr	r3, [pc, #144]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009a8:	4b22      	ldr	r3, [pc, #136]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009aa:	2207      	movs	r2, #7
 80009ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009ae:	4b21      	ldr	r3, [pc, #132]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009b4:	4b1f      	ldr	r3, [pc, #124]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009ba:	4b1e      	ldr	r3, [pc, #120]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80009c0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009c2:	4b1c      	ldr	r3, [pc, #112]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009c8:	4b1a      	ldr	r3, [pc, #104]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ce:	4b19      	ldr	r3, [pc, #100]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009d4:	4b17      	ldr	r3, [pc, #92]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80009da:	4b16      	ldr	r3, [pc, #88]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009dc:	2200      	movs	r2, #0
 80009de:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009e0:	4b14      	ldr	r3, [pc, #80]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009e6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80009e8:	4b12      	ldr	r3, [pc, #72]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80009ee:	4b11      	ldr	r3, [pc, #68]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009f4:	4b0f      	ldr	r3, [pc, #60]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80009fa:	4b0e      	ldr	r3, [pc, #56]	; (8000a34 <MX_SPI1_Init+0xa4>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a00:	4b0c      	ldr	r3, [pc, #48]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a06:	4b0b      	ldr	r3, [pc, #44]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a12:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a18:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a1e:	4805      	ldr	r0, [pc, #20]	; (8000a34 <MX_SPI1_Init+0xa4>)
 8000a20:	f008 fd50 	bl	80094c4 <HAL_SPI_Init>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d001      	beq.n	8000a2e <MX_SPI1_Init+0x9e>
  {
    Error_Handler();
 8000a2a:	f000 f9a9 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	240004b8 	.word	0x240004b8
 8000a38:	40013000 	.word	0x40013000

08000a3c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8000a40:	4b22      	ldr	r3, [pc, #136]	; (8000acc <MX_UART8_Init+0x90>)
 8000a42:	4a23      	ldr	r2, [pc, #140]	; (8000ad0 <MX_UART8_Init+0x94>)
 8000a44:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8000a46:	4b21      	ldr	r3, [pc, #132]	; (8000acc <MX_UART8_Init+0x90>)
 8000a48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a4c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8000a4e:	4b1f      	ldr	r3, [pc, #124]	; (8000acc <MX_UART8_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8000a54:	4b1d      	ldr	r3, [pc, #116]	; (8000acc <MX_UART8_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8000a5a:	4b1c      	ldr	r3, [pc, #112]	; (8000acc <MX_UART8_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8000a60:	4b1a      	ldr	r3, [pc, #104]	; (8000acc <MX_UART8_Init+0x90>)
 8000a62:	220c      	movs	r2, #12
 8000a64:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a66:	4b19      	ldr	r3, [pc, #100]	; (8000acc <MX_UART8_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a6c:	4b17      	ldr	r3, [pc, #92]	; (8000acc <MX_UART8_Init+0x90>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a72:	4b16      	ldr	r3, [pc, #88]	; (8000acc <MX_UART8_Init+0x90>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <MX_UART8_Init+0x90>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a7e:	4b13      	ldr	r3, [pc, #76]	; (8000acc <MX_UART8_Init+0x90>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8000a84:	4811      	ldr	r0, [pc, #68]	; (8000acc <MX_UART8_Init+0x90>)
 8000a86:	f008 fe30 	bl	80096ea <HAL_UART_Init>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8000a90:	f000 f976 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a94:	2100      	movs	r1, #0
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <MX_UART8_Init+0x90>)
 8000a98:	f009 fdcb 	bl	800a632 <HAL_UARTEx_SetTxFifoThreshold>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 8000aa2:	f000 f96d 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4808      	ldr	r0, [pc, #32]	; (8000acc <MX_UART8_Init+0x90>)
 8000aaa:	f009 fe00 	bl	800a6ae <HAL_UARTEx_SetRxFifoThreshold>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8000ab4:	f000 f964 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8000ab8:	4804      	ldr	r0, [pc, #16]	; (8000acc <MX_UART8_Init+0x90>)
 8000aba:	f009 fd81 	bl	800a5c0 <HAL_UARTEx_DisableFifoMode>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8000ac4:	f000 f95c 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8000ac8:	bf00      	nop
 8000aca:	bd80      	pop	{r7, pc}
 8000acc:	2400042c 	.word	0x2400042c
 8000ad0:	40007c00 	.word	0x40007c00

08000ad4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad8:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ada:	4a23      	ldr	r2, [pc, #140]	; (8000b68 <MX_USART3_UART_Init+0x94>)
 8000adc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000ade:	4b21      	ldr	r3, [pc, #132]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000ae4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae6:	4b1f      	ldr	r3, [pc, #124]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aec:	4b1d      	ldr	r3, [pc, #116]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000af2:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af8:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000afa:	220c      	movs	r2, #12
 8000afc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afe:	4b19      	ldr	r3, [pc, #100]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b04:	4b17      	ldr	r3, [pc, #92]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b10:	4b14      	ldr	r3, [pc, #80]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b16:	4b13      	ldr	r3, [pc, #76]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b1c:	4811      	ldr	r0, [pc, #68]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b1e:	f008 fde4 	bl	80096ea <HAL_UART_Init>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b28:	f000 f92a 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	480d      	ldr	r0, [pc, #52]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b30:	f009 fd7f 	bl	800a632 <HAL_UARTEx_SetTxFifoThreshold>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b3a:	f000 f921 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4808      	ldr	r0, [pc, #32]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b42:	f009 fdb4 	bl	800a6ae <HAL_UARTEx_SetRxFifoThreshold>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b4c:	f000 f918 	bl	8000d80 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	; (8000b64 <MX_USART3_UART_Init+0x90>)
 8000b52:	f009 fd35 	bl	800a5c0 <HAL_UARTEx_DisableFifoMode>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b5c:	f000 f910 	bl	8000d80 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	24000280 	.word	0x24000280
 8000b68:	40004800 	.word	0x40004800

08000b6c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b74:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b78:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b7a:	f043 0301 	orr.w	r3, r3, #1
 8000b7e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <MX_DMA_Init+0x3c>)
 8000b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b88:	f003 0301 	and.w	r3, r3, #1
 8000b8c:	607b      	str	r3, [r7, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000b90:	2200      	movs	r2, #0
 8000b92:	2100      	movs	r1, #0
 8000b94:	200b      	movs	r0, #11
 8000b96:	f000 fdd4 	bl	8001742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000b9a:	200b      	movs	r0, #11
 8000b9c:	f000 fdeb 	bl	8001776 <HAL_NVIC_EnableIRQ>

}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	58024400 	.word	0x58024400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08c      	sub	sp, #48	; 0x30
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bc2:	4b69      	ldr	r3, [pc, #420]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc8:	4a67      	ldr	r2, [pc, #412]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000bca:	f043 0310 	orr.w	r3, r3, #16
 8000bce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bd2:	4b65      	ldr	r3, [pc, #404]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	61bb      	str	r3, [r7, #24]
 8000bde:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000be0:	4b61      	ldr	r3, [pc, #388]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000be2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be6:	4a60      	ldr	r2, [pc, #384]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000be8:	f043 0304 	orr.w	r3, r3, #4
 8000bec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bf0:	4b5d      	ldr	r3, [pc, #372]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf6:	f003 0304 	and.w	r3, r3, #4
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bfe:	4b5a      	ldr	r3, [pc, #360]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a58      	ldr	r2, [pc, #352]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b56      	ldr	r3, [pc, #344]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c18:	613b      	str	r3, [r7, #16]
 8000c1a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1c:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a51      	ldr	r2, [pc, #324]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c24:	f043 0301 	orr.w	r3, r3, #1
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3a:	4b4b      	ldr	r3, [pc, #300]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a49      	ldr	r2, [pc, #292]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b47      	ldr	r3, [pc, #284]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	60bb      	str	r3, [r7, #8]
 8000c56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c58:	4b43      	ldr	r3, [pc, #268]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a42      	ldr	r2, [pc, #264]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c60:	f043 0308 	orr.w	r3, r3, #8
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b3f      	ldr	r3, [pc, #252]	; (8000d68 <MX_GPIO_Init+0x1bc>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0308 	and.w	r3, r3, #8
 8000c72:	607b      	str	r3, [r7, #4]
 8000c74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8000c76:	2200      	movs	r2, #0
 8000c78:	210c      	movs	r1, #12
 8000c7a:	483c      	ldr	r0, [pc, #240]	; (8000d6c <MX_GPIO_Init+0x1c0>)
 8000c7c:	f002 ff88 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8000c80:	2200      	movs	r2, #0
 8000c82:	2103      	movs	r1, #3
 8000c84:	483a      	ldr	r0, [pc, #232]	; (8000d70 <MX_GPIO_Init+0x1c4>)
 8000c86:	f002 ff83 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2101      	movs	r1, #1
 8000c8e:	4839      	ldr	r0, [pc, #228]	; (8000d74 <MX_GPIO_Init+0x1c8>)
 8000c90:	f002 ff7e 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_RESET);
 8000c94:	2200      	movs	r2, #0
 8000c96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c9a:	4837      	ldr	r0, [pc, #220]	; (8000d78 <MX_GPIO_Init+0x1cc>)
 8000c9c:	f002 ff78 	bl	8003b90 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8000ca0:	230c      	movs	r3, #12
 8000ca2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cac:	2300      	movs	r3, #0
 8000cae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cb0:	f107 031c 	add.w	r3, r7, #28
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	482d      	ldr	r0, [pc, #180]	; (8000d6c <MX_GPIO_Init+0x1c0>)
 8000cb8:	f002 fda2 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8000cbc:	2303      	movs	r3, #3
 8000cbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	f107 031c 	add.w	r3, r7, #28
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4827      	ldr	r0, [pc, #156]	; (8000d70 <MX_GPIO_Init+0x1c4>)
 8000cd4:	f002 fd94 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8000cd8:	2304      	movs	r3, #4
 8000cda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cdc:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <MX_GPIO_Init+0x1d0>)
 8000cde:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8000ce4:	f107 031c 	add.w	r3, r7, #28
 8000ce8:	4619      	mov	r1, r3
 8000cea:	4821      	ldr	r0, [pc, #132]	; (8000d70 <MX_GPIO_Init+0x1c4>)
 8000cec:	f002 fd88 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f107 031c 	add.w	r3, r7, #28
 8000d04:	4619      	mov	r1, r3
 8000d06:	481b      	ldr	r0, [pc, #108]	; (8000d74 <MX_GPIO_Init+0x1c8>)
 8000d08:	f002 fd7a 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8000d0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_GPIO_Init+0x1d0>)
 8000d14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d16:	2300      	movs	r3, #0
 8000d18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8000d1a:	f107 031c 	add.w	r3, r7, #28
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4812      	ldr	r0, [pc, #72]	; (8000d6c <MX_GPIO_Init+0x1c0>)
 8000d22:	f002 fd6d 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8000d26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8000d38:	f107 031c 	add.w	r3, r7, #28
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	480e      	ldr	r0, [pc, #56]	; (8000d78 <MX_GPIO_Init+0x1cc>)
 8000d40:	f002 fd5e 	bl	8003800 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8000d44:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_GPIO_Init+0x1c4>)
 8000d5a:	f002 fd51 	bl	8003800 <HAL_GPIO_Init>

}
 8000d5e:	bf00      	nop
 8000d60:	3730      	adds	r7, #48	; 0x30
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	58024400 	.word	0x58024400
 8000d6c:	58021000 	.word	0x58021000
 8000d70:	58020000 	.word	0x58020000
 8000d74:	58020400 	.word	0x58020400
 8000d78:	58020c00 	.word	0x58020c00
 8000d7c:	11110000 	.word	0x11110000

08000d80 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d84:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d86:	e7fe      	b.n	8000d86 <Error_Handler+0x6>

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_MspInit+0x30>)
 8000d90:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d94:	4a08      	ldr	r2, [pc, #32]	; (8000db8 <HAL_MspInit+0x30>)
 8000d96:	f043 0302 	orr.w	r3, r3, #2
 8000d9a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <HAL_MspInit+0x30>)
 8000da0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	607b      	str	r3, [r7, #4]
 8000daa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr
 8000db8:	58024400 	.word	0x58024400

08000dbc <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08c      	sub	sp, #48	; 0x30
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 031c 	add.w	r3, r7, #28
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a3d      	ldr	r2, [pc, #244]	; (8000ed0 <HAL_FDCAN_MspInit+0x114>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d138      	bne.n	8000e50 <HAL_FDCAN_MspInit+0x94>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000dde:	4b3d      	ldr	r3, [pc, #244]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	3301      	adds	r3, #1
 8000de4:	4a3b      	ldr	r2, [pc, #236]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000de6:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000de8:	4b3a      	ldr	r3, [pc, #232]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b01      	cmp	r3, #1
 8000dee:	d10e      	bne.n	8000e0e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000df0:	4b39      	ldr	r3, [pc, #228]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000df2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000df6:	4a38      	ldr	r2, [pc, #224]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dfc:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e00:	4b35      	ldr	r3, [pc, #212]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	4b32      	ldr	r3, [pc, #200]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e14:	4a30      	ldr	r2, [pc, #192]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e16:	f043 0302 	orr.w	r3, r3, #2
 8000e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e24:	f003 0302 	and.w	r3, r3, #2
 8000e28:	617b      	str	r3, [r7, #20]
 8000e2a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e2c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e36:	2300      	movs	r3, #0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000e3e:	2309      	movs	r3, #9
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e42:	f107 031c 	add.w	r3, r7, #28
 8000e46:	4619      	mov	r1, r3
 8000e48:	4824      	ldr	r0, [pc, #144]	; (8000edc <HAL_FDCAN_MspInit+0x120>)
 8000e4a:	f002 fcd9 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8000e4e:	e03b      	b.n	8000ec8 <HAL_FDCAN_MspInit+0x10c>
  else if(hfdcan->Instance==FDCAN2)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a22      	ldr	r2, [pc, #136]	; (8000ee0 <HAL_FDCAN_MspInit+0x124>)
 8000e56:	4293      	cmp	r3, r2
 8000e58:	d136      	bne.n	8000ec8 <HAL_FDCAN_MspInit+0x10c>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8000e5a:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	3301      	adds	r3, #1
 8000e60:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000e62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_FDCAN_MspInit+0x118>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10e      	bne.n	8000e8a <HAL_FDCAN_MspInit+0xce>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e6e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e72:	4a19      	ldr	r2, [pc, #100]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e78:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8000e7c:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e7e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000e82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e86:	613b      	str	r3, [r7, #16]
 8000e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e90:	4a11      	ldr	r2, [pc, #68]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e92:	f043 0302 	orr.w	r3, r3, #2
 8000e96:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_FDCAN_MspInit+0x11c>)
 8000e9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea0:	f003 0302 	and.w	r3, r3, #2
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000ea8:	2360      	movs	r3, #96	; 0x60
 8000eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eac:	2302      	movs	r3, #2
 8000eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000eb8:	2309      	movs	r3, #9
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 031c 	add.w	r3, r7, #28
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4806      	ldr	r0, [pc, #24]	; (8000edc <HAL_FDCAN_MspInit+0x120>)
 8000ec4:	f002 fc9c 	bl	8003800 <HAL_GPIO_Init>
}
 8000ec8:	bf00      	nop
 8000eca:	3730      	adds	r7, #48	; 0x30
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	4000a000 	.word	0x4000a000
 8000ed4:	240001e8 	.word	0x240001e8
 8000ed8:	58024400 	.word	0x58024400
 8000edc:	58020400 	.word	0x58020400
 8000ee0:	4000a400 	.word	0x4000a400

08000ee4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b08a      	sub	sp, #40	; 0x28
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	601a      	str	r2, [r3, #0]
 8000ef4:	605a      	str	r2, [r3, #4]
 8000ef6:	609a      	str	r2, [r3, #8]
 8000ef8:	60da      	str	r2, [r3, #12]
 8000efa:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a2a      	ldr	r2, [pc, #168]	; (8000fac <HAL_SD_MspInit+0xc8>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d14d      	bne.n	8000fa2 <HAL_SD_MspInit+0xbe>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8000f06:	4b2a      	ldr	r3, [pc, #168]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f08:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f0c:	4a28      	ldr	r2, [pc, #160]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f0e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f12:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8000f16:	4b26      	ldr	r3, [pc, #152]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f18:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f20:	613b      	str	r3, [r7, #16]
 8000f22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f24:	4b22      	ldr	r3, [pc, #136]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f2a:	4a21      	ldr	r2, [pc, #132]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f2c:	f043 0304 	orr.w	r3, r3, #4
 8000f30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f34:	4b1e      	ldr	r3, [pc, #120]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f3a:	f003 0304 	and.w	r3, r3, #4
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f42:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f48:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f4a:	f043 0308 	orr.w	r3, r3, #8
 8000f4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <HAL_SD_MspInit+0xcc>)
 8000f54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000f58:	f003 0308 	and.w	r3, r3, #8
 8000f5c:	60bb      	str	r3, [r7, #8]
 8000f5e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8000f60:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000f64:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f66:	2302      	movs	r3, #2
 8000f68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f72:	230c      	movs	r3, #12
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	480d      	ldr	r0, [pc, #52]	; (8000fb4 <HAL_SD_MspInit+0xd0>)
 8000f7e:	f002 fc3f 	bl	8003800 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f82:	2304      	movs	r3, #4
 8000f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f86:	2302      	movs	r3, #2
 8000f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f8e:	2303      	movs	r3, #3
 8000f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f92:	230c      	movs	r3, #12
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	4806      	ldr	r0, [pc, #24]	; (8000fb8 <HAL_SD_MspInit+0xd4>)
 8000f9e:	f002 fc2f 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8000fa2:	bf00      	nop
 8000fa4:	3728      	adds	r7, #40	; 0x28
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	52007000 	.word	0x52007000
 8000fb0:	58024400 	.word	0x58024400
 8000fb4:	58020800 	.word	0x58020800
 8000fb8:	58020c00 	.word	0x58020c00

08000fbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1a      	ldr	r2, [pc, #104]	; (8001044 <HAL_SPI_MspInit+0x88>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12d      	bne.n	800103a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000fde:	4b1a      	ldr	r3, [pc, #104]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8000fe0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000fe4:	4a18      	ldr	r2, [pc, #96]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8000fe6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000fea:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000fee:	4b16      	ldr	r3, [pc, #88]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8000ff0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000ff4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffc:	4b12      	ldr	r3, [pc, #72]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8000ffe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001002:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 8001004:	f043 0301 	orr.w	r3, r3, #1
 8001008:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_SPI_MspInit+0x8c>)
 800100e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001012:	f003 0301 	and.w	r3, r3, #1
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800101a:	23e0      	movs	r3, #224	; 0xe0
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800102a:	2305      	movs	r3, #5
 800102c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	4805      	ldr	r0, [pc, #20]	; (800104c <HAL_SPI_MspInit+0x90>)
 8001036:	f002 fbe3 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800103a:	bf00      	nop
 800103c:	3728      	adds	r7, #40	; 0x28
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40013000 	.word	0x40013000
 8001048:	58024400 	.word	0x58024400
 800104c:	58020000 	.word	0x58020000

08001050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b08c      	sub	sp, #48	; 0x30
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001058:	f107 031c 	add.w	r3, r7, #28
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
 8001062:	609a      	str	r2, [r3, #8]
 8001064:	60da      	str	r2, [r3, #12]
 8001066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a4b      	ldr	r2, [pc, #300]	; (800119c <HAL_UART_MspInit+0x14c>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d12e      	bne.n	80010d0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8001072:	4b4b      	ldr	r3, [pc, #300]	; (80011a0 <HAL_UART_MspInit+0x150>)
 8001074:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001078:	4a49      	ldr	r2, [pc, #292]	; (80011a0 <HAL_UART_MspInit+0x150>)
 800107a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800107e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001082:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <HAL_UART_MspInit+0x150>)
 8001084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001088:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800108c:	61bb      	str	r3, [r7, #24]
 800108e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001090:	4b43      	ldr	r3, [pc, #268]	; (80011a0 <HAL_UART_MspInit+0x150>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001096:	4a42      	ldr	r2, [pc, #264]	; (80011a0 <HAL_UART_MspInit+0x150>)
 8001098:	f043 0310 	orr.w	r3, r3, #16
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010a0:	4b3f      	ldr	r3, [pc, #252]	; (80011a0 <HAL_UART_MspInit+0x150>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010a6:	f003 0310 	and.w	r3, r3, #16
 80010aa:	617b      	str	r3, [r7, #20]
 80010ac:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80010ae:	2303      	movs	r3, #3
 80010b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 80010be:	2308      	movs	r3, #8
 80010c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80010c2:	f107 031c 	add.w	r3, r7, #28
 80010c6:	4619      	mov	r1, r3
 80010c8:	4836      	ldr	r0, [pc, #216]	; (80011a4 <HAL_UART_MspInit+0x154>)
 80010ca:	f002 fb99 	bl	8003800 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80010ce:	e061      	b.n	8001194 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	4a34      	ldr	r2, [pc, #208]	; (80011a8 <HAL_UART_MspInit+0x158>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d15c      	bne.n	8001194 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80010da:	4b31      	ldr	r3, [pc, #196]	; (80011a0 <HAL_UART_MspInit+0x150>)
 80010dc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010e0:	4a2f      	ldr	r2, [pc, #188]	; (80011a0 <HAL_UART_MspInit+0x150>)
 80010e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <HAL_UART_MspInit+0x150>)
 80010ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010f4:	613b      	str	r3, [r7, #16]
 80010f6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f8:	4b29      	ldr	r3, [pc, #164]	; (80011a0 <HAL_UART_MspInit+0x150>)
 80010fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010fe:	4a28      	ldr	r2, [pc, #160]	; (80011a0 <HAL_UART_MspInit+0x150>)
 8001100:	f043 0308 	orr.w	r3, r3, #8
 8001104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001108:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <HAL_UART_MspInit+0x150>)
 800110a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001116:	f44f 7340 	mov.w	r3, #768	; 0x300
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001128:	2307      	movs	r3, #7
 800112a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	481e      	ldr	r0, [pc, #120]	; (80011ac <HAL_UART_MspInit+0x15c>)
 8001134:	f002 fb64 	bl	8003800 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001138:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800113a:	4a1e      	ldr	r2, [pc, #120]	; (80011b4 <HAL_UART_MspInit+0x164>)
 800113c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800113e:	4b1c      	ldr	r3, [pc, #112]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001140:	222d      	movs	r2, #45	; 0x2d
 8001142:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001146:	2200      	movs	r2, #0
 8001148:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800114c:	2200      	movs	r2, #0
 800114e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001150:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001152:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001156:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001158:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800115a:	2200      	movs	r2, #0
 800115c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800115e:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001166:	f44f 7280 	mov.w	r2, #256	; 0x100
 800116a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800116c:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800116e:	2200      	movs	r2, #0
 8001170:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001172:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001174:	2200      	movs	r2, #0
 8001176:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001178:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800117a:	f000 fb17 	bl	80017ac <HAL_DMA_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001184:	f7ff fdfc 	bl	8000d80 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a09      	ldr	r2, [pc, #36]	; (80011b0 <HAL_UART_MspInit+0x160>)
 800118c:	679a      	str	r2, [r3, #120]	; 0x78
 800118e:	4a08      	ldr	r2, [pc, #32]	; (80011b0 <HAL_UART_MspInit+0x160>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001194:	bf00      	nop
 8001196:	3730      	adds	r7, #48	; 0x30
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	40007c00 	.word	0x40007c00
 80011a0:	58024400 	.word	0x58024400
 80011a4:	58021000 	.word	0x58021000
 80011a8:	40004800 	.word	0x40004800
 80011ac:	58020c00 	.word	0x58020c00
 80011b0:	24000208 	.word	0x24000208
 80011b4:	40020010 	.word	0x40020010

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f974 	bl	80014f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA1_Stream0_IRQHandler+0x10>)
 8001212:	f000 fe27 	bl	8001e64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	24000208 	.word	0x24000208

08001220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <OTG_FS_IRQHandler+0x10>)
 8001226:	f002 fe3e 	bl	8003ea6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	24000f1c 	.word	0x24000f1c

08001234 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b086      	sub	sp, #24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800123c:	4a14      	ldr	r2, [pc, #80]	; (8001290 <_sbrk+0x5c>)
 800123e:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_sbrk+0x60>)
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001248:	4b13      	ldr	r3, [pc, #76]	; (8001298 <_sbrk+0x64>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d102      	bne.n	8001256 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <_sbrk+0x64>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <_sbrk+0x68>)
 8001254:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <_sbrk+0x64>)
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	4413      	add	r3, r2
 800125e:	693a      	ldr	r2, [r7, #16]
 8001260:	429a      	cmp	r2, r3
 8001262:	d207      	bcs.n	8001274 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001264:	f00e fffc 	bl	8010260 <__errno>
 8001268:	4602      	mov	r2, r0
 800126a:	230c      	movs	r3, #12
 800126c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800126e:	f04f 33ff 	mov.w	r3, #4294967295
 8001272:	e009      	b.n	8001288 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001274:	4b08      	ldr	r3, [pc, #32]	; (8001298 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800127a:	4b07      	ldr	r3, [pc, #28]	; (8001298 <_sbrk+0x64>)
 800127c:	681a      	ldr	r2, [r3, #0]
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	4a05      	ldr	r2, [pc, #20]	; (8001298 <_sbrk+0x64>)
 8001284:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001286:	68fb      	ldr	r3, [r7, #12]
}
 8001288:	4618      	mov	r0, r3
 800128a:	3718      	adds	r7, #24
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	24080000 	.word	0x24080000
 8001294:	00000400 	.word	0x00000400
 8001298:	240001ec 	.word	0x240001ec
 800129c:	24001328 	.word	0x24001328

080012a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80012a4:	4b39      	ldr	r3, [pc, #228]	; (800138c <SystemInit+0xec>)
 80012a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012aa:	4a38      	ldr	r2, [pc, #224]	; (800138c <SystemInit+0xec>)
 80012ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012b4:	4b36      	ldr	r3, [pc, #216]	; (8001390 <SystemInit+0xf0>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 030f 	and.w	r3, r3, #15
 80012bc:	2b06      	cmp	r3, #6
 80012be:	d807      	bhi.n	80012d0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012c0:	4b33      	ldr	r3, [pc, #204]	; (8001390 <SystemInit+0xf0>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f023 030f 	bic.w	r3, r3, #15
 80012c8:	4a31      	ldr	r2, [pc, #196]	; (8001390 <SystemInit+0xf0>)
 80012ca:	f043 0307 	orr.w	r3, r3, #7
 80012ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80012d0:	4b30      	ldr	r3, [pc, #192]	; (8001394 <SystemInit+0xf4>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <SystemInit+0xf4>)
 80012d6:	f043 0301 	orr.w	r3, r3, #1
 80012da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80012dc:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <SystemInit+0xf4>)
 80012de:	2200      	movs	r2, #0
 80012e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80012e2:	4b2c      	ldr	r3, [pc, #176]	; (8001394 <SystemInit+0xf4>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	492b      	ldr	r1, [pc, #172]	; (8001394 <SystemInit+0xf4>)
 80012e8:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <SystemInit+0xf8>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80012ee:	4b28      	ldr	r3, [pc, #160]	; (8001390 <SystemInit+0xf0>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f003 030f 	and.w	r3, r3, #15
 80012f6:	2b07      	cmp	r3, #7
 80012f8:	d907      	bls.n	800130a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80012fa:	4b25      	ldr	r3, [pc, #148]	; (8001390 <SystemInit+0xf0>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 030f 	bic.w	r3, r3, #15
 8001302:	4a23      	ldr	r2, [pc, #140]	; (8001390 <SystemInit+0xf0>)
 8001304:	f043 0307 	orr.w	r3, r3, #7
 8001308:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <SystemInit+0xf4>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001310:	4b20      	ldr	r3, [pc, #128]	; (8001394 <SystemInit+0xf4>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <SystemInit+0xf4>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <SystemInit+0xf4>)
 800131e:	4a1f      	ldr	r2, [pc, #124]	; (800139c <SystemInit+0xfc>)
 8001320:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <SystemInit+0xf4>)
 8001324:	4a1e      	ldr	r2, [pc, #120]	; (80013a0 <SystemInit+0x100>)
 8001326:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <SystemInit+0xf4>)
 800132a:	4a1e      	ldr	r2, [pc, #120]	; (80013a4 <SystemInit+0x104>)
 800132c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <SystemInit+0xf4>)
 8001330:	2200      	movs	r2, #0
 8001332:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001334:	4b17      	ldr	r3, [pc, #92]	; (8001394 <SystemInit+0xf4>)
 8001336:	4a1b      	ldr	r2, [pc, #108]	; (80013a4 <SystemInit+0x104>)
 8001338:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800133a:	4b16      	ldr	r3, [pc, #88]	; (8001394 <SystemInit+0xf4>)
 800133c:	2200      	movs	r2, #0
 800133e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001340:	4b14      	ldr	r3, [pc, #80]	; (8001394 <SystemInit+0xf4>)
 8001342:	4a18      	ldr	r2, [pc, #96]	; (80013a4 <SystemInit+0x104>)
 8001344:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001346:	4b13      	ldr	r3, [pc, #76]	; (8001394 <SystemInit+0xf4>)
 8001348:	2200      	movs	r2, #0
 800134a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <SystemInit+0xf4>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a10      	ldr	r2, [pc, #64]	; (8001394 <SystemInit+0xf4>)
 8001352:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001356:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001358:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <SystemInit+0xf4>)
 800135a:	2200      	movs	r2, #0
 800135c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800135e:	4b12      	ldr	r3, [pc, #72]	; (80013a8 <SystemInit+0x108>)
 8001360:	681a      	ldr	r2, [r3, #0]
 8001362:	4b12      	ldr	r3, [pc, #72]	; (80013ac <SystemInit+0x10c>)
 8001364:	4013      	ands	r3, r2
 8001366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800136a:	d202      	bcs.n	8001372 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800136c:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <SystemInit+0x110>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <SystemInit+0x114>)
 8001374:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001378:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800137a:	4b04      	ldr	r3, [pc, #16]	; (800138c <SystemInit+0xec>)
 800137c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001380:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8001382:	bf00      	nop
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00
 8001390:	52002000 	.word	0x52002000
 8001394:	58024400 	.word	0x58024400
 8001398:	eaf6ed7f 	.word	0xeaf6ed7f
 800139c:	02020200 	.word	0x02020200
 80013a0:	01ff0000 	.word	0x01ff0000
 80013a4:	01010280 	.word	0x01010280
 80013a8:	5c001000 	.word	0x5c001000
 80013ac:	ffff0000 	.word	0xffff0000
 80013b0:	51008108 	.word	0x51008108
 80013b4:	52004000 	.word	0x52004000

080013b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013f0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80013bc:	f7ff ff70 	bl	80012a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80013c0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80013c2:	e003      	b.n	80013cc <LoopCopyDataInit>

080013c4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80013c4:	4b0b      	ldr	r3, [pc, #44]	; (80013f4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 80013c6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80013c8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80013ca:	3104      	adds	r1, #4

080013cc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80013cc:	480a      	ldr	r0, [pc, #40]	; (80013f8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 80013ce:	4b0b      	ldr	r3, [pc, #44]	; (80013fc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 80013d0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80013d2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80013d4:	d3f6      	bcc.n	80013c4 <CopyDataInit>
  ldr  r2, =_sbss
 80013d6:	4a0a      	ldr	r2, [pc, #40]	; (8001400 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 80013d8:	e002      	b.n	80013e0 <LoopFillZerobss>

080013da <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80013da:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80013dc:	f842 3b04 	str.w	r3, [r2], #4

080013e0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80013e0:	4b08      	ldr	r3, [pc, #32]	; (8001404 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 80013e2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80013e4:	d3f9      	bcc.n	80013da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013e6:	f00e ff41 	bl	801026c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80013ea:	f7ff f8f5 	bl	80005d8 <main>
  bx  lr    
 80013ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80013f0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 80013f4:	080105a0 	.word	0x080105a0
  ldr  r0, =_sdata
 80013f8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 80013fc:	240001cc 	.word	0x240001cc
  ldr  r2, =_sbss
 8001400:	240001cc 	.word	0x240001cc
  ldr  r3, = _ebss
 8001404:	24001328 	.word	0x24001328

08001408 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001408:	e7fe      	b.n	8001408 <ADC3_IRQHandler>
	...

0800140c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001412:	2003      	movs	r0, #3
 8001414:	f000 f98a 	bl	800172c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001418:	f004 fc06 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 800141c:	4601      	mov	r1, r0
 800141e:	4b15      	ldr	r3, [pc, #84]	; (8001474 <HAL_Init+0x68>)
 8001420:	699b      	ldr	r3, [r3, #24]
 8001422:	0a1b      	lsrs	r3, r3, #8
 8001424:	f003 030f 	and.w	r3, r3, #15
 8001428:	4a13      	ldr	r2, [pc, #76]	; (8001478 <HAL_Init+0x6c>)
 800142a:	5cd3      	ldrb	r3, [r2, r3]
 800142c:	f003 031f 	and.w	r3, r3, #31
 8001430:	fa21 f303 	lsr.w	r3, r1, r3
 8001434:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001436:	4b0f      	ldr	r3, [pc, #60]	; (8001474 <HAL_Init+0x68>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	f003 030f 	and.w	r3, r3, #15
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_Init+0x6c>)
 8001440:	5cd3      	ldrb	r3, [r2, r3]
 8001442:	f003 031f 	and.w	r3, r3, #31
 8001446:	687a      	ldr	r2, [r7, #4]
 8001448:	fa22 f303 	lsr.w	r3, r2, r3
 800144c:	4a0b      	ldr	r2, [pc, #44]	; (800147c <HAL_Init+0x70>)
 800144e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001450:	4a0b      	ldr	r2, [pc, #44]	; (8001480 <HAL_Init+0x74>)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001456:	2000      	movs	r0, #0
 8001458:	f000 f814 	bl	8001484 <HAL_InitTick>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e002      	b.n	800146c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001466:	f7ff fc8f 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
}
 800146c:	4618      	mov	r0, r3
 800146e:	3708      	adds	r7, #8
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	58024400 	.word	0x58024400
 8001478:	08010528 	.word	0x08010528
 800147c:	24000004 	.word	0x24000004
 8001480:	24000000 	.word	0x24000000

08001484 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800148c:	4b15      	ldr	r3, [pc, #84]	; (80014e4 <HAL_InitTick+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e021      	b.n	80014dc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001498:	4b13      	ldr	r3, [pc, #76]	; (80014e8 <HAL_InitTick+0x64>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <HAL_InitTick+0x60>)
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	4619      	mov	r1, r3
 80014a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80014aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80014ae:	4618      	mov	r0, r3
 80014b0:	f000 f96f 	bl	8001792 <HAL_SYSTICK_Config>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00e      	b.n	80014dc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d80a      	bhi.n	80014da <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f000 f939 	bl	8001742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014d0:	4a06      	ldr	r2, [pc, #24]	; (80014ec <HAL_InitTick+0x68>)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014d6:	2300      	movs	r3, #0
 80014d8:	e000      	b.n	80014dc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014da:	2301      	movs	r3, #1
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3708      	adds	r7, #8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	2400000c 	.word	0x2400000c
 80014e8:	24000000 	.word	0x24000000
 80014ec:	24000008 	.word	0x24000008

080014f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014f0:	b480      	push	{r7}
 80014f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014f4:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_IncTick+0x20>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	461a      	mov	r2, r3
 80014fa:	4b06      	ldr	r3, [pc, #24]	; (8001514 <HAL_IncTick+0x24>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4413      	add	r3, r2
 8001500:	4a04      	ldr	r2, [pc, #16]	; (8001514 <HAL_IncTick+0x24>)
 8001502:	6013      	str	r3, [r2, #0]
}
 8001504:	bf00      	nop
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	2400000c 	.word	0x2400000c
 8001514:	240005e0 	.word	0x240005e0

08001518 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return uwTick;
 800151c:	4b03      	ldr	r3, [pc, #12]	; (800152c <HAL_GetTick+0x14>)
 800151e:	681b      	ldr	r3, [r3, #0]
}
 8001520:	4618      	mov	r0, r3
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
 800152a:	bf00      	nop
 800152c:	240005e0 	.word	0x240005e0

08001530 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001538:	f7ff ffee 	bl	8001518 <HAL_GetTick>
 800153c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001548:	d005      	beq.n	8001556 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800154a:	4b09      	ldr	r3, [pc, #36]	; (8001570 <HAL_Delay+0x40>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	461a      	mov	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	4413      	add	r3, r2
 8001554:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001556:	bf00      	nop
 8001558:	f7ff ffde 	bl	8001518 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	429a      	cmp	r2, r3
 8001566:	d8f7      	bhi.n	8001558 <HAL_Delay+0x28>
  {
  }
}
 8001568:	bf00      	nop
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	2400000c 	.word	0x2400000c

08001574 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001578:	4b03      	ldr	r3, [pc, #12]	; (8001588 <HAL_GetREVID+0x14>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	0c1b      	lsrs	r3, r3, #16
}
 800157e:	4618      	mov	r0, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	5c001000 	.word	0x5c001000

0800158c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800159c:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <__NVIC_SetPriorityGrouping+0x40>)
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a8:	4013      	ands	r3, r2
 80015aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x40>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00
 80015d0:	05fa0000 	.word	0x05fa0000

080015d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <__NVIC_GetPriorityGrouping+0x18>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	f003 0307 	and.w	r3, r3, #7
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000ed00 	.word	0xe000ed00

080015f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	4603      	mov	r3, r0
 80015f8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fe:	2b00      	cmp	r3, #0
 8001600:	db0b      	blt.n	800161a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001602:	88fb      	ldrh	r3, [r7, #6]
 8001604:	f003 021f 	and.w	r2, r3, #31
 8001608:	4907      	ldr	r1, [pc, #28]	; (8001628 <__NVIC_EnableIRQ+0x38>)
 800160a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160e:	095b      	lsrs	r3, r3, #5
 8001610:	2001      	movs	r0, #1
 8001612:	fa00 f202 	lsl.w	r2, r0, r2
 8001616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800161a:	bf00      	nop
 800161c:	370c      	adds	r7, #12
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	e000e100 	.word	0xe000e100

0800162c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	6039      	str	r1, [r7, #0]
 8001636:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001638:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800163c:	2b00      	cmp	r3, #0
 800163e:	db0a      	blt.n	8001656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	b2da      	uxtb	r2, r3
 8001644:	490c      	ldr	r1, [pc, #48]	; (8001678 <__NVIC_SetPriority+0x4c>)
 8001646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800164a:	0112      	lsls	r2, r2, #4
 800164c:	b2d2      	uxtb	r2, r2
 800164e:	440b      	add	r3, r1
 8001650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001654:	e00a      	b.n	800166c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001656:	683b      	ldr	r3, [r7, #0]
 8001658:	b2da      	uxtb	r2, r3
 800165a:	4908      	ldr	r1, [pc, #32]	; (800167c <__NVIC_SetPriority+0x50>)
 800165c:	88fb      	ldrh	r3, [r7, #6]
 800165e:	f003 030f 	and.w	r3, r3, #15
 8001662:	3b04      	subs	r3, #4
 8001664:	0112      	lsls	r2, r2, #4
 8001666:	b2d2      	uxtb	r2, r2
 8001668:	440b      	add	r3, r1
 800166a:	761a      	strb	r2, [r3, #24]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	e000e100 	.word	0xe000e100
 800167c:	e000ed00 	.word	0xe000ed00

08001680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001680:	b480      	push	{r7}
 8001682:	b089      	sub	sp, #36	; 0x24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0307 	and.w	r3, r3, #7
 8001692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001694:	69fb      	ldr	r3, [r7, #28]
 8001696:	f1c3 0307 	rsb	r3, r3, #7
 800169a:	2b04      	cmp	r3, #4
 800169c:	bf28      	it	cs
 800169e:	2304      	movcs	r3, #4
 80016a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	3304      	adds	r3, #4
 80016a6:	2b06      	cmp	r3, #6
 80016a8:	d902      	bls.n	80016b0 <NVIC_EncodePriority+0x30>
 80016aa:	69fb      	ldr	r3, [r7, #28]
 80016ac:	3b03      	subs	r3, #3
 80016ae:	e000      	b.n	80016b2 <NVIC_EncodePriority+0x32>
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b4:	f04f 32ff 	mov.w	r2, #4294967295
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	43da      	mvns	r2, r3
 80016c0:	68bb      	ldr	r3, [r7, #8]
 80016c2:	401a      	ands	r2, r3
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c8:	f04f 31ff 	mov.w	r1, #4294967295
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	43d9      	mvns	r1, r3
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d8:	4313      	orrs	r3, r2
         );
}
 80016da:	4618      	mov	r0, r3
 80016dc:	3724      	adds	r7, #36	; 0x24
 80016de:	46bd      	mov	sp, r7
 80016e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e4:	4770      	bx	lr
	...

080016e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	3b01      	subs	r3, #1
 80016f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016f8:	d301      	bcc.n	80016fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016fa:	2301      	movs	r3, #1
 80016fc:	e00f      	b.n	800171e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016fe:	4a0a      	ldr	r2, [pc, #40]	; (8001728 <SysTick_Config+0x40>)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	3b01      	subs	r3, #1
 8001704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001706:	210f      	movs	r1, #15
 8001708:	f04f 30ff 	mov.w	r0, #4294967295
 800170c:	f7ff ff8e 	bl	800162c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <SysTick_Config+0x40>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001716:	4b04      	ldr	r3, [pc, #16]	; (8001728 <SysTick_Config+0x40>)
 8001718:	2207      	movs	r2, #7
 800171a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3708      	adds	r7, #8
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	e000e010 	.word	0xe000e010

0800172c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001734:	6878      	ldr	r0, [r7, #4]
 8001736:	f7ff ff29 	bl	800158c <__NVIC_SetPriorityGrouping>
}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	4603      	mov	r3, r0
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
 800174e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001750:	f7ff ff40 	bl	80015d4 <__NVIC_GetPriorityGrouping>
 8001754:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68b9      	ldr	r1, [r7, #8]
 800175a:	6978      	ldr	r0, [r7, #20]
 800175c:	f7ff ff90 	bl	8001680 <NVIC_EncodePriority>
 8001760:	4602      	mov	r2, r0
 8001762:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001766:	4611      	mov	r1, r2
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff ff5f 	bl	800162c <__NVIC_SetPriority>
}
 800176e:	bf00      	nop
 8001770:	3718      	adds	r7, #24
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}

08001776 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001776:	b580      	push	{r7, lr}
 8001778:	b082      	sub	sp, #8
 800177a:	af00      	add	r7, sp, #0
 800177c:	4603      	mov	r3, r0
 800177e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001780:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff33 	bl	80015f0 <__NVIC_EnableIRQ>
}
 800178a:	bf00      	nop
 800178c:	3708      	adds	r7, #8
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800179a:	6878      	ldr	r0, [r7, #4]
 800179c:	f7ff ffa4 	bl	80016e8 <SysTick_Config>
 80017a0:	4603      	mov	r3, r0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
	...

080017ac <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80017b4:	f7ff feb0 	bl	8001518 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d101      	bne.n	80017c4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017c0:	2301      	movs	r3, #1
 80017c2:	e316      	b.n	8001df2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_DMA_Init+0x1b8>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d04a      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <HAL_DMA_Init+0x1bc>)
 80017d4:	4293      	cmp	r3, r2
 80017d6:	d045      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a63      	ldr	r2, [pc, #396]	; (800196c <HAL_DMA_Init+0x1c0>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d040      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a62      	ldr	r2, [pc, #392]	; (8001970 <HAL_DMA_Init+0x1c4>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d03b      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4a60      	ldr	r2, [pc, #384]	; (8001974 <HAL_DMA_Init+0x1c8>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d036      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	4a5f      	ldr	r2, [pc, #380]	; (8001978 <HAL_DMA_Init+0x1cc>)
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d031      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a5d      	ldr	r2, [pc, #372]	; (800197c <HAL_DMA_Init+0x1d0>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02c      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a5c      	ldr	r2, [pc, #368]	; (8001980 <HAL_DMA_Init+0x1d4>)
 8001810:	4293      	cmp	r3, r2
 8001812:	d027      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4a5a      	ldr	r2, [pc, #360]	; (8001984 <HAL_DMA_Init+0x1d8>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d022      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a59      	ldr	r2, [pc, #356]	; (8001988 <HAL_DMA_Init+0x1dc>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d01d      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a57      	ldr	r2, [pc, #348]	; (800198c <HAL_DMA_Init+0x1e0>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d018      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a56      	ldr	r2, [pc, #344]	; (8001990 <HAL_DMA_Init+0x1e4>)
 8001838:	4293      	cmp	r3, r2
 800183a:	d013      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a54      	ldr	r2, [pc, #336]	; (8001994 <HAL_DMA_Init+0x1e8>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d00e      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4a53      	ldr	r2, [pc, #332]	; (8001998 <HAL_DMA_Init+0x1ec>)
 800184c:	4293      	cmp	r3, r2
 800184e:	d009      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a51      	ldr	r2, [pc, #324]	; (800199c <HAL_DMA_Init+0x1f0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d004      	beq.n	8001864 <HAL_DMA_Init+0xb8>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a50      	ldr	r2, [pc, #320]	; (80019a0 <HAL_DMA_Init+0x1f4>)
 8001860:	4293      	cmp	r3, r2
 8001862:	d101      	bne.n	8001868 <HAL_DMA_Init+0xbc>
 8001864:	2301      	movs	r3, #1
 8001866:	e000      	b.n	800186a <HAL_DMA_Init+0xbe>
 8001868:	2300      	movs	r3, #0
 800186a:	2b00      	cmp	r3, #0
 800186c:	f000 813b 	beq.w	8001ae6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2202      	movs	r2, #2
 800187c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a37      	ldr	r2, [pc, #220]	; (8001964 <HAL_DMA_Init+0x1b8>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d04a      	beq.n	8001920 <HAL_DMA_Init+0x174>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a36      	ldr	r2, [pc, #216]	; (8001968 <HAL_DMA_Init+0x1bc>)
 8001890:	4293      	cmp	r3, r2
 8001892:	d045      	beq.n	8001920 <HAL_DMA_Init+0x174>
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a34      	ldr	r2, [pc, #208]	; (800196c <HAL_DMA_Init+0x1c0>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d040      	beq.n	8001920 <HAL_DMA_Init+0x174>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a33      	ldr	r2, [pc, #204]	; (8001970 <HAL_DMA_Init+0x1c4>)
 80018a4:	4293      	cmp	r3, r2
 80018a6:	d03b      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a31      	ldr	r2, [pc, #196]	; (8001974 <HAL_DMA_Init+0x1c8>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d036      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a30      	ldr	r2, [pc, #192]	; (8001978 <HAL_DMA_Init+0x1cc>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d031      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a2e      	ldr	r2, [pc, #184]	; (800197c <HAL_DMA_Init+0x1d0>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d02c      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	4a2d      	ldr	r2, [pc, #180]	; (8001980 <HAL_DMA_Init+0x1d4>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d027      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a2b      	ldr	r2, [pc, #172]	; (8001984 <HAL_DMA_Init+0x1d8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d022      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a2a      	ldr	r2, [pc, #168]	; (8001988 <HAL_DMA_Init+0x1dc>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d01d      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a28      	ldr	r2, [pc, #160]	; (800198c <HAL_DMA_Init+0x1e0>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d018      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4a27      	ldr	r2, [pc, #156]	; (8001990 <HAL_DMA_Init+0x1e4>)
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d013      	beq.n	8001920 <HAL_DMA_Init+0x174>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	4a25      	ldr	r2, [pc, #148]	; (8001994 <HAL_DMA_Init+0x1e8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00e      	beq.n	8001920 <HAL_DMA_Init+0x174>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	4a24      	ldr	r2, [pc, #144]	; (8001998 <HAL_DMA_Init+0x1ec>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d009      	beq.n	8001920 <HAL_DMA_Init+0x174>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a22      	ldr	r2, [pc, #136]	; (800199c <HAL_DMA_Init+0x1f0>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d004      	beq.n	8001920 <HAL_DMA_Init+0x174>
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a21      	ldr	r2, [pc, #132]	; (80019a0 <HAL_DMA_Init+0x1f4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d108      	bne.n	8001932 <HAL_DMA_Init+0x186>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f022 0201 	bic.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]
 8001930:	e007      	b.n	8001942 <HAL_DMA_Init+0x196>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001942:	e02f      	b.n	80019a4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001944:	f7ff fde8 	bl	8001518 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b05      	cmp	r3, #5
 8001950:	d928      	bls.n	80019a4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2220      	movs	r2, #32
 8001956:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	2203      	movs	r2, #3
 800195c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e246      	b.n	8001df2 <HAL_DMA_Init+0x646>
 8001964:	40020010 	.word	0x40020010
 8001968:	40020028 	.word	0x40020028
 800196c:	40020040 	.word	0x40020040
 8001970:	40020058 	.word	0x40020058
 8001974:	40020070 	.word	0x40020070
 8001978:	40020088 	.word	0x40020088
 800197c:	400200a0 	.word	0x400200a0
 8001980:	400200b8 	.word	0x400200b8
 8001984:	40020410 	.word	0x40020410
 8001988:	40020428 	.word	0x40020428
 800198c:	40020440 	.word	0x40020440
 8001990:	40020458 	.word	0x40020458
 8001994:	40020470 	.word	0x40020470
 8001998:	40020488 	.word	0x40020488
 800199c:	400204a0 	.word	0x400204a0
 80019a0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1c8      	bne.n	8001944 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ba:	697a      	ldr	r2, [r7, #20]
 80019bc:	4b83      	ldr	r3, [pc, #524]	; (8001bcc <HAL_DMA_Init+0x420>)
 80019be:	4013      	ands	r3, r2
 80019c0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019ca:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	691b      	ldr	r3, [r3, #16]
 80019d0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a1b      	ldr	r3, [r3, #32]
 80019e8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d107      	bne.n	8001a08 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4313      	orrs	r3, r2
 8001a02:	697a      	ldr	r2, [r7, #20]
 8001a04:	4313      	orrs	r3, r2
 8001a06:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8001a08:	4b71      	ldr	r3, [pc, #452]	; (8001bd0 <HAL_DMA_Init+0x424>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b71      	ldr	r3, [pc, #452]	; (8001bd4 <HAL_DMA_Init+0x428>)
 8001a0e:	4013      	ands	r3, r2
 8001a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a14:	d328      	bcc.n	8001a68 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b28      	cmp	r3, #40	; 0x28
 8001a1c:	d903      	bls.n	8001a26 <HAL_DMA_Init+0x27a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2b2e      	cmp	r3, #46	; 0x2e
 8001a24:	d917      	bls.n	8001a56 <HAL_DMA_Init+0x2aa>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b3e      	cmp	r3, #62	; 0x3e
 8001a2c:	d903      	bls.n	8001a36 <HAL_DMA_Init+0x28a>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b42      	cmp	r3, #66	; 0x42
 8001a34:	d90f      	bls.n	8001a56 <HAL_DMA_Init+0x2aa>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	2b46      	cmp	r3, #70	; 0x46
 8001a3c:	d903      	bls.n	8001a46 <HAL_DMA_Init+0x29a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	2b48      	cmp	r3, #72	; 0x48
 8001a44:	d907      	bls.n	8001a56 <HAL_DMA_Init+0x2aa>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b4e      	cmp	r3, #78	; 0x4e
 8001a4c:	d905      	bls.n	8001a5a <HAL_DMA_Init+0x2ae>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	2b52      	cmp	r3, #82	; 0x52
 8001a54:	d801      	bhi.n	8001a5a <HAL_DMA_Init+0x2ae>
 8001a56:	2301      	movs	r3, #1
 8001a58:	e000      	b.n	8001a5c <HAL_DMA_Init+0x2b0>
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d003      	beq.n	8001a68 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a66:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	697a      	ldr	r2, [r7, #20]
 8001a6e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	695b      	ldr	r3, [r3, #20]
 8001a76:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	f023 0307 	bic.w	r3, r3, #7
 8001a7e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8e:	2b04      	cmp	r3, #4
 8001a90:	d117      	bne.n	8001ac2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d00e      	beq.n	8001ac2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f001 f9b9 	bl	8002e1c <DMA_CheckFifoParam>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d008      	beq.n	8001ac2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2240      	movs	r2, #64	; 0x40
 8001ab4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2201      	movs	r2, #1
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
 8001ac0:	e197      	b.n	8001df2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	697a      	ldr	r2, [r7, #20]
 8001ac8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f001 f8f4 	bl	8002cb8 <DMA_CalcBaseAndBitshift>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad8:	f003 031f 	and.w	r3, r3, #31
 8001adc:	223f      	movs	r2, #63	; 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	e0cd      	b.n	8001c82 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a3b      	ldr	r2, [pc, #236]	; (8001bd8 <HAL_DMA_Init+0x42c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d022      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a39      	ldr	r2, [pc, #228]	; (8001bdc <HAL_DMA_Init+0x430>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d01d      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a38      	ldr	r2, [pc, #224]	; (8001be0 <HAL_DMA_Init+0x434>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d018      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a36      	ldr	r2, [pc, #216]	; (8001be4 <HAL_DMA_Init+0x438>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a35      	ldr	r2, [pc, #212]	; (8001be8 <HAL_DMA_Init+0x43c>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d00e      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a33      	ldr	r2, [pc, #204]	; (8001bec <HAL_DMA_Init+0x440>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d009      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a32      	ldr	r2, [pc, #200]	; (8001bf0 <HAL_DMA_Init+0x444>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_Init+0x38a>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a30      	ldr	r2, [pc, #192]	; (8001bf4 <HAL_DMA_Init+0x448>)
 8001b32:	4293      	cmp	r3, r2
 8001b34:	d101      	bne.n	8001b3a <HAL_DMA_Init+0x38e>
 8001b36:	2301      	movs	r3, #1
 8001b38:	e000      	b.n	8001b3c <HAL_DMA_Init+0x390>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f000 8097 	beq.w	8001c70 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a24      	ldr	r2, [pc, #144]	; (8001bd8 <HAL_DMA_Init+0x42c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d021      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <HAL_DMA_Init+0x430>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01c      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a21      	ldr	r2, [pc, #132]	; (8001be0 <HAL_DMA_Init+0x434>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d017      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a1f      	ldr	r2, [pc, #124]	; (8001be4 <HAL_DMA_Init+0x438>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d012      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_DMA_Init+0x43c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00d      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a1c      	ldr	r2, [pc, #112]	; (8001bec <HAL_DMA_Init+0x440>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d008      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_DMA_Init+0x444>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d003      	beq.n	8001b90 <HAL_DMA_Init+0x3e4>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a19      	ldr	r2, [pc, #100]	; (8001bf4 <HAL_DMA_Init+0x448>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2200      	movs	r2, #0
 8001b96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2202      	movs	r2, #2
 8001b9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	4b12      	ldr	r3, [pc, #72]	; (8001bf8 <HAL_DMA_Init+0x44c>)
 8001bae:	4013      	ands	r3, r2
 8001bb0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b40      	cmp	r3, #64	; 0x40
 8001bb8:	d020      	beq.n	8001bfc <HAL_DMA_Init+0x450>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	2b80      	cmp	r3, #128	; 0x80
 8001bc0:	d102      	bne.n	8001bc8 <HAL_DMA_Init+0x41c>
 8001bc2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001bc6:	e01a      	b.n	8001bfe <HAL_DMA_Init+0x452>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e018      	b.n	8001bfe <HAL_DMA_Init+0x452>
 8001bcc:	fe10803f 	.word	0xfe10803f
 8001bd0:	5c001000 	.word	0x5c001000
 8001bd4:	ffff0000 	.word	0xffff0000
 8001bd8:	58025408 	.word	0x58025408
 8001bdc:	5802541c 	.word	0x5802541c
 8001be0:	58025430 	.word	0x58025430
 8001be4:	58025444 	.word	0x58025444
 8001be8:	58025458 	.word	0x58025458
 8001bec:	5802546c 	.word	0x5802546c
 8001bf0:	58025480 	.word	0x58025480
 8001bf4:	58025494 	.word	0x58025494
 8001bf8:	fffe000f 	.word	0xfffe000f
 8001bfc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68d2      	ldr	r2, [r2, #12]
 8001c02:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c04:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	695b      	ldr	r3, [r3, #20]
 8001c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	69db      	ldr	r3, [r3, #28]
 8001c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a1b      	ldr	r3, [r3, #32]
 8001c2a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c2c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c2e:	697a      	ldr	r2, [r7, #20]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	461a      	mov	r2, r3
 8001c42:	4b6e      	ldr	r3, [pc, #440]	; (8001dfc <HAL_DMA_Init+0x650>)
 8001c44:	4413      	add	r3, r2
 8001c46:	4a6e      	ldr	r2, [pc, #440]	; (8001e00 <HAL_DMA_Init+0x654>)
 8001c48:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4c:	091b      	lsrs	r3, r3, #4
 8001c4e:	009a      	lsls	r2, r3, #2
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c54:	6878      	ldr	r0, [r7, #4]
 8001c56:	f001 f82f 	bl	8002cb8 <DMA_CalcBaseAndBitshift>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	f003 031f 	and.w	r3, r3, #31
 8001c66:	2201      	movs	r2, #1
 8001c68:	409a      	lsls	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	605a      	str	r2, [r3, #4]
 8001c6e:	e008      	b.n	8001c82 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2240      	movs	r2, #64	; 0x40
 8001c74:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2203      	movs	r2, #3
 8001c7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e0b7      	b.n	8001df2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a5f      	ldr	r2, [pc, #380]	; (8001e04 <HAL_DMA_Init+0x658>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d072      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	4a5d      	ldr	r2, [pc, #372]	; (8001e08 <HAL_DMA_Init+0x65c>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d06d      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a5c      	ldr	r2, [pc, #368]	; (8001e0c <HAL_DMA_Init+0x660>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d068      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <HAL_DMA_Init+0x664>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d063      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4a59      	ldr	r2, [pc, #356]	; (8001e14 <HAL_DMA_Init+0x668>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d05e      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a57      	ldr	r2, [pc, #348]	; (8001e18 <HAL_DMA_Init+0x66c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d059      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a56      	ldr	r2, [pc, #344]	; (8001e1c <HAL_DMA_Init+0x670>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d054      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_DMA_Init+0x674>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d04f      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <HAL_DMA_Init+0x678>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04a      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a51      	ldr	r2, [pc, #324]	; (8001e28 <HAL_DMA_Init+0x67c>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d045      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_DMA_Init+0x680>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d040      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a4e      	ldr	r2, [pc, #312]	; (8001e30 <HAL_DMA_Init+0x684>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d03b      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a4d      	ldr	r2, [pc, #308]	; (8001e34 <HAL_DMA_Init+0x688>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d036      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a4b      	ldr	r2, [pc, #300]	; (8001e38 <HAL_DMA_Init+0x68c>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d031      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a4a      	ldr	r2, [pc, #296]	; (8001e3c <HAL_DMA_Init+0x690>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d02c      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	4a48      	ldr	r2, [pc, #288]	; (8001e40 <HAL_DMA_Init+0x694>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d027      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a47      	ldr	r2, [pc, #284]	; (8001e44 <HAL_DMA_Init+0x698>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d022      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a45      	ldr	r2, [pc, #276]	; (8001e48 <HAL_DMA_Init+0x69c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01d      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a44      	ldr	r2, [pc, #272]	; (8001e4c <HAL_DMA_Init+0x6a0>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d018      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	4a42      	ldr	r2, [pc, #264]	; (8001e50 <HAL_DMA_Init+0x6a4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d013      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a41      	ldr	r2, [pc, #260]	; (8001e54 <HAL_DMA_Init+0x6a8>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d00e      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a3f      	ldr	r2, [pc, #252]	; (8001e58 <HAL_DMA_Init+0x6ac>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d009      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a3e      	ldr	r2, [pc, #248]	; (8001e5c <HAL_DMA_Init+0x6b0>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_DMA_Init+0x5c6>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a3c      	ldr	r2, [pc, #240]	; (8001e60 <HAL_DMA_Init+0x6b4>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_DMA_Init+0x5ca>
 8001d72:	2301      	movs	r3, #1
 8001d74:	e000      	b.n	8001d78 <HAL_DMA_Init+0x5cc>
 8001d76:	2300      	movs	r3, #0
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d032      	beq.n	8001de2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f001 f8c9 	bl	8002f14 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b80      	cmp	r3, #128	; 0x80
 8001d88:	d102      	bne.n	8001d90 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001da0:	687a      	ldr	r2, [r7, #4]
 8001da2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001da4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d010      	beq.n	8001dd0 <HAL_DMA_Init+0x624>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b08      	cmp	r3, #8
 8001db4:	d80c      	bhi.n	8001dd0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f001 f946 	bl	8003048 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001dcc:	605a      	str	r2, [r3, #4]
 8001dce:	e008      	b.n	8001de2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2201      	movs	r2, #1
 8001dec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001df0:	2300      	movs	r3, #0
}
 8001df2:	4618      	mov	r0, r3
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	a7fdabf8 	.word	0xa7fdabf8
 8001e00:	cccccccd 	.word	0xcccccccd
 8001e04:	40020010 	.word	0x40020010
 8001e08:	40020028 	.word	0x40020028
 8001e0c:	40020040 	.word	0x40020040
 8001e10:	40020058 	.word	0x40020058
 8001e14:	40020070 	.word	0x40020070
 8001e18:	40020088 	.word	0x40020088
 8001e1c:	400200a0 	.word	0x400200a0
 8001e20:	400200b8 	.word	0x400200b8
 8001e24:	40020410 	.word	0x40020410
 8001e28:	40020428 	.word	0x40020428
 8001e2c:	40020440 	.word	0x40020440
 8001e30:	40020458 	.word	0x40020458
 8001e34:	40020470 	.word	0x40020470
 8001e38:	40020488 	.word	0x40020488
 8001e3c:	400204a0 	.word	0x400204a0
 8001e40:	400204b8 	.word	0x400204b8
 8001e44:	58025408 	.word	0x58025408
 8001e48:	5802541c 	.word	0x5802541c
 8001e4c:	58025430 	.word	0x58025430
 8001e50:	58025444 	.word	0x58025444
 8001e54:	58025458 	.word	0x58025458
 8001e58:	5802546c 	.word	0x5802546c
 8001e5c:	58025480 	.word	0x58025480
 8001e60:	58025494 	.word	0x58025494

08001e64 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e70:	4b67      	ldr	r3, [pc, #412]	; (8002010 <HAL_DMA_IRQHandler+0x1ac>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a67      	ldr	r2, [pc, #412]	; (8002014 <HAL_DMA_IRQHandler+0x1b0>)
 8001e76:	fba2 2303 	umull	r2, r3, r2, r3
 8001e7a:	0a9b      	lsrs	r3, r3, #10
 8001e7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e82:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e88:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8001e8a:	6a3b      	ldr	r3, [r7, #32]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a5f      	ldr	r2, [pc, #380]	; (8002018 <HAL_DMA_IRQHandler+0x1b4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d04a      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a5d      	ldr	r2, [pc, #372]	; (800201c <HAL_DMA_IRQHandler+0x1b8>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d045      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a5c      	ldr	r2, [pc, #368]	; (8002020 <HAL_DMA_IRQHandler+0x1bc>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d040      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5a      	ldr	r2, [pc, #360]	; (8002024 <HAL_DMA_IRQHandler+0x1c0>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d03b      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a59      	ldr	r2, [pc, #356]	; (8002028 <HAL_DMA_IRQHandler+0x1c4>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d036      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a57      	ldr	r2, [pc, #348]	; (800202c <HAL_DMA_IRQHandler+0x1c8>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d031      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a56      	ldr	r2, [pc, #344]	; (8002030 <HAL_DMA_IRQHandler+0x1cc>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d02c      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a54      	ldr	r2, [pc, #336]	; (8002034 <HAL_DMA_IRQHandler+0x1d0>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d027      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a53      	ldr	r2, [pc, #332]	; (8002038 <HAL_DMA_IRQHandler+0x1d4>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d022      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a51      	ldr	r2, [pc, #324]	; (800203c <HAL_DMA_IRQHandler+0x1d8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d01d      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a50      	ldr	r2, [pc, #320]	; (8002040 <HAL_DMA_IRQHandler+0x1dc>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d018      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4e      	ldr	r2, [pc, #312]	; (8002044 <HAL_DMA_IRQHandler+0x1e0>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d013      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a4d      	ldr	r2, [pc, #308]	; (8002048 <HAL_DMA_IRQHandler+0x1e4>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d00e      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a4b      	ldr	r2, [pc, #300]	; (800204c <HAL_DMA_IRQHandler+0x1e8>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d009      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a4a      	ldr	r2, [pc, #296]	; (8002050 <HAL_DMA_IRQHandler+0x1ec>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d004      	beq.n	8001f36 <HAL_DMA_IRQHandler+0xd2>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a48      	ldr	r2, [pc, #288]	; (8002054 <HAL_DMA_IRQHandler+0x1f0>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d101      	bne.n	8001f3a <HAL_DMA_IRQHandler+0xd6>
 8001f36:	2301      	movs	r3, #1
 8001f38:	e000      	b.n	8001f3c <HAL_DMA_IRQHandler+0xd8>
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 842b 	beq.w	8002798 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f46:	f003 031f 	and.w	r3, r3, #31
 8001f4a:	2208      	movs	r2, #8
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	f000 80a2 	beq.w	800209c <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a2e      	ldr	r2, [pc, #184]	; (8002018 <HAL_DMA_IRQHandler+0x1b4>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d04a      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a2d      	ldr	r2, [pc, #180]	; (800201c <HAL_DMA_IRQHandler+0x1b8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d045      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a2b      	ldr	r2, [pc, #172]	; (8002020 <HAL_DMA_IRQHandler+0x1bc>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d040      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a2a      	ldr	r2, [pc, #168]	; (8002024 <HAL_DMA_IRQHandler+0x1c0>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d03b      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a28      	ldr	r2, [pc, #160]	; (8002028 <HAL_DMA_IRQHandler+0x1c4>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d036      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a27      	ldr	r2, [pc, #156]	; (800202c <HAL_DMA_IRQHandler+0x1c8>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d031      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_DMA_IRQHandler+0x1cc>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d02c      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a24      	ldr	r2, [pc, #144]	; (8002034 <HAL_DMA_IRQHandler+0x1d0>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d027      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a22      	ldr	r2, [pc, #136]	; (8002038 <HAL_DMA_IRQHandler+0x1d4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d022      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a21      	ldr	r2, [pc, #132]	; (800203c <HAL_DMA_IRQHandler+0x1d8>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d01d      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a1f      	ldr	r2, [pc, #124]	; (8002040 <HAL_DMA_IRQHandler+0x1dc>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d018      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1e      	ldr	r2, [pc, #120]	; (8002044 <HAL_DMA_IRQHandler+0x1e0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a1c      	ldr	r2, [pc, #112]	; (8002048 <HAL_DMA_IRQHandler+0x1e4>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d00e      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1b      	ldr	r2, [pc, #108]	; (800204c <HAL_DMA_IRQHandler+0x1e8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d009      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_DMA_IRQHandler+0x1ec>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d004      	beq.n	8001ff8 <HAL_DMA_IRQHandler+0x194>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a18      	ldr	r2, [pc, #96]	; (8002054 <HAL_DMA_IRQHandler+0x1f0>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d12f      	bne.n	8002058 <HAL_DMA_IRQHandler+0x1f4>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	bf14      	ite	ne
 8002006:	2301      	movne	r3, #1
 8002008:	2300      	moveq	r3, #0
 800200a:	b2db      	uxtb	r3, r3
 800200c:	e02e      	b.n	800206c <HAL_DMA_IRQHandler+0x208>
 800200e:	bf00      	nop
 8002010:	24000000 	.word	0x24000000
 8002014:	1b4e81b5 	.word	0x1b4e81b5
 8002018:	40020010 	.word	0x40020010
 800201c:	40020028 	.word	0x40020028
 8002020:	40020040 	.word	0x40020040
 8002024:	40020058 	.word	0x40020058
 8002028:	40020070 	.word	0x40020070
 800202c:	40020088 	.word	0x40020088
 8002030:	400200a0 	.word	0x400200a0
 8002034:	400200b8 	.word	0x400200b8
 8002038:	40020410 	.word	0x40020410
 800203c:	40020428 	.word	0x40020428
 8002040:	40020440 	.word	0x40020440
 8002044:	40020458 	.word	0x40020458
 8002048:	40020470 	.word	0x40020470
 800204c:	40020488 	.word	0x40020488
 8002050:	400204a0 	.word	0x400204a0
 8002054:	400204b8 	.word	0x400204b8
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	f003 0308 	and.w	r3, r3, #8
 8002062:	2b00      	cmp	r3, #0
 8002064:	bf14      	ite	ne
 8002066:	2301      	movne	r3, #1
 8002068:	2300      	moveq	r3, #0
 800206a:	b2db      	uxtb	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	d015      	beq.n	800209c <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f022 0204 	bic.w	r2, r2, #4
 800207e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002084:	f003 031f 	and.w	r3, r3, #31
 8002088:	2208      	movs	r2, #8
 800208a:	409a      	lsls	r2, r3
 800208c:	6a3b      	ldr	r3, [r7, #32]
 800208e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002094:	f043 0201 	orr.w	r2, r3, #1
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a0:	f003 031f 	and.w	r3, r3, #31
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	fa22 f303 	lsr.w	r3, r2, r3
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d06e      	beq.n	8002190 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a69      	ldr	r2, [pc, #420]	; (800225c <HAL_DMA_IRQHandler+0x3f8>)
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d04a      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a67      	ldr	r2, [pc, #412]	; (8002260 <HAL_DMA_IRQHandler+0x3fc>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d045      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	4a66      	ldr	r2, [pc, #408]	; (8002264 <HAL_DMA_IRQHandler+0x400>)
 80020cc:	4293      	cmp	r3, r2
 80020ce:	d040      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a64      	ldr	r2, [pc, #400]	; (8002268 <HAL_DMA_IRQHandler+0x404>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d03b      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a63      	ldr	r2, [pc, #396]	; (800226c <HAL_DMA_IRQHandler+0x408>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d036      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a61      	ldr	r2, [pc, #388]	; (8002270 <HAL_DMA_IRQHandler+0x40c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d031      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4a60      	ldr	r2, [pc, #384]	; (8002274 <HAL_DMA_IRQHandler+0x410>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d02c      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a5e      	ldr	r2, [pc, #376]	; (8002278 <HAL_DMA_IRQHandler+0x414>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d027      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a5d      	ldr	r2, [pc, #372]	; (800227c <HAL_DMA_IRQHandler+0x418>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d022      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a5b      	ldr	r2, [pc, #364]	; (8002280 <HAL_DMA_IRQHandler+0x41c>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d01d      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a5a      	ldr	r2, [pc, #360]	; (8002284 <HAL_DMA_IRQHandler+0x420>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d018      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a58      	ldr	r2, [pc, #352]	; (8002288 <HAL_DMA_IRQHandler+0x424>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d013      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a57      	ldr	r2, [pc, #348]	; (800228c <HAL_DMA_IRQHandler+0x428>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d00e      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a55      	ldr	r2, [pc, #340]	; (8002290 <HAL_DMA_IRQHandler+0x42c>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d009      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a54      	ldr	r2, [pc, #336]	; (8002294 <HAL_DMA_IRQHandler+0x430>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d004      	beq.n	8002152 <HAL_DMA_IRQHandler+0x2ee>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a52      	ldr	r2, [pc, #328]	; (8002298 <HAL_DMA_IRQHandler+0x434>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10a      	bne.n	8002168 <HAL_DMA_IRQHandler+0x304>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	695b      	ldr	r3, [r3, #20]
 8002158:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	e003      	b.n	8002170 <HAL_DMA_IRQHandler+0x30c>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2300      	movs	r3, #0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d00d      	beq.n	8002190 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002178:	f003 031f 	and.w	r3, r3, #31
 800217c:	2201      	movs	r2, #1
 800217e:	409a      	lsls	r2, r3
 8002180:	6a3b      	ldr	r3, [r7, #32]
 8002182:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002188:	f043 0202 	orr.w	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	2204      	movs	r2, #4
 800219a:	409a      	lsls	r2, r3
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 808f 	beq.w	80022c4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2c      	ldr	r2, [pc, #176]	; (800225c <HAL_DMA_IRQHandler+0x3f8>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2a      	ldr	r2, [pc, #168]	; (8002260 <HAL_DMA_IRQHandler+0x3fc>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a29      	ldr	r2, [pc, #164]	; (8002264 <HAL_DMA_IRQHandler+0x400>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a27      	ldr	r2, [pc, #156]	; (8002268 <HAL_DMA_IRQHandler+0x404>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a26      	ldr	r2, [pc, #152]	; (800226c <HAL_DMA_IRQHandler+0x408>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_DMA_IRQHandler+0x40c>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a23      	ldr	r2, [pc, #140]	; (8002274 <HAL_DMA_IRQHandler+0x410>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a21      	ldr	r2, [pc, #132]	; (8002278 <HAL_DMA_IRQHandler+0x414>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a20      	ldr	r2, [pc, #128]	; (800227c <HAL_DMA_IRQHandler+0x418>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a1e      	ldr	r2, [pc, #120]	; (8002280 <HAL_DMA_IRQHandler+0x41c>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a1d      	ldr	r2, [pc, #116]	; (8002284 <HAL_DMA_IRQHandler+0x420>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1b      	ldr	r2, [pc, #108]	; (8002288 <HAL_DMA_IRQHandler+0x424>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1a      	ldr	r2, [pc, #104]	; (800228c <HAL_DMA_IRQHandler+0x428>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a18      	ldr	r2, [pc, #96]	; (8002290 <HAL_DMA_IRQHandler+0x42c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a17      	ldr	r2, [pc, #92]	; (8002294 <HAL_DMA_IRQHandler+0x430>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_IRQHandler+0x3e2>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a15      	ldr	r2, [pc, #84]	; (8002298 <HAL_DMA_IRQHandler+0x434>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d12a      	bne.n	800229c <HAL_DMA_IRQHandler+0x438>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b00      	cmp	r3, #0
 8002252:	bf14      	ite	ne
 8002254:	2301      	movne	r3, #1
 8002256:	2300      	moveq	r3, #0
 8002258:	b2db      	uxtb	r3, r3
 800225a:	e023      	b.n	80022a4 <HAL_DMA_IRQHandler+0x440>
 800225c:	40020010 	.word	0x40020010
 8002260:	40020028 	.word	0x40020028
 8002264:	40020040 	.word	0x40020040
 8002268:	40020058 	.word	0x40020058
 800226c:	40020070 	.word	0x40020070
 8002270:	40020088 	.word	0x40020088
 8002274:	400200a0 	.word	0x400200a0
 8002278:	400200b8 	.word	0x400200b8
 800227c:	40020410 	.word	0x40020410
 8002280:	40020428 	.word	0x40020428
 8002284:	40020440 	.word	0x40020440
 8002288:	40020458 	.word	0x40020458
 800228c:	40020470 	.word	0x40020470
 8002290:	40020488 	.word	0x40020488
 8002294:	400204a0 	.word	0x400204a0
 8002298:	400204b8 	.word	0x400204b8
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d00d      	beq.n	80022c4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ac:	f003 031f 	and.w	r3, r3, #31
 80022b0:	2204      	movs	r2, #4
 80022b2:	409a      	lsls	r2, r3
 80022b4:	6a3b      	ldr	r3, [r7, #32]
 80022b6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022bc:	f043 0204 	orr.w	r2, r3, #4
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022c8:	f003 031f 	and.w	r3, r3, #31
 80022cc:	2210      	movs	r2, #16
 80022ce:	409a      	lsls	r2, r3
 80022d0:	69bb      	ldr	r3, [r7, #24]
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	f000 80a6 	beq.w	8002426 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a85      	ldr	r2, [pc, #532]	; (80024f4 <HAL_DMA_IRQHandler+0x690>)
 80022e0:	4293      	cmp	r3, r2
 80022e2:	d04a      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a83      	ldr	r2, [pc, #524]	; (80024f8 <HAL_DMA_IRQHandler+0x694>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d045      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a82      	ldr	r2, [pc, #520]	; (80024fc <HAL_DMA_IRQHandler+0x698>)
 80022f4:	4293      	cmp	r3, r2
 80022f6:	d040      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a80      	ldr	r2, [pc, #512]	; (8002500 <HAL_DMA_IRQHandler+0x69c>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d03b      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a7f      	ldr	r2, [pc, #508]	; (8002504 <HAL_DMA_IRQHandler+0x6a0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d036      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a7d      	ldr	r2, [pc, #500]	; (8002508 <HAL_DMA_IRQHandler+0x6a4>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d031      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7c      	ldr	r2, [pc, #496]	; (800250c <HAL_DMA_IRQHandler+0x6a8>)
 800231c:	4293      	cmp	r3, r2
 800231e:	d02c      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a7a      	ldr	r2, [pc, #488]	; (8002510 <HAL_DMA_IRQHandler+0x6ac>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d027      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a79      	ldr	r2, [pc, #484]	; (8002514 <HAL_DMA_IRQHandler+0x6b0>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d022      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a77      	ldr	r2, [pc, #476]	; (8002518 <HAL_DMA_IRQHandler+0x6b4>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d01d      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a76      	ldr	r2, [pc, #472]	; (800251c <HAL_DMA_IRQHandler+0x6b8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d018      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a74      	ldr	r2, [pc, #464]	; (8002520 <HAL_DMA_IRQHandler+0x6bc>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d013      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a73      	ldr	r2, [pc, #460]	; (8002524 <HAL_DMA_IRQHandler+0x6c0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d00e      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a71      	ldr	r2, [pc, #452]	; (8002528 <HAL_DMA_IRQHandler+0x6c4>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d009      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a70      	ldr	r2, [pc, #448]	; (800252c <HAL_DMA_IRQHandler+0x6c8>)
 800236c:	4293      	cmp	r3, r2
 800236e:	d004      	beq.n	800237a <HAL_DMA_IRQHandler+0x516>
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a6e      	ldr	r2, [pc, #440]	; (8002530 <HAL_DMA_IRQHandler+0x6cc>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10a      	bne.n	8002390 <HAL_DMA_IRQHandler+0x52c>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 0308 	and.w	r3, r3, #8
 8002384:	2b00      	cmp	r3, #0
 8002386:	bf14      	ite	ne
 8002388:	2301      	movne	r3, #1
 800238a:	2300      	moveq	r3, #0
 800238c:	b2db      	uxtb	r3, r3
 800238e:	e009      	b.n	80023a4 <HAL_DMA_IRQHandler+0x540>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d03e      	beq.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023ac:	f003 031f 	and.w	r3, r3, #31
 80023b0:	2210      	movs	r2, #16
 80023b2:	409a      	lsls	r2, r3
 80023b4:	6a3b      	ldr	r3, [r7, #32]
 80023b6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d018      	beq.n	80023f8 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d108      	bne.n	80023e6 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d024      	beq.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	4798      	blx	r3
 80023e4:	e01f      	b.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d01b      	beq.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f2:	6878      	ldr	r0, [r7, #4]
 80023f4:	4798      	blx	r3
 80023f6:	e016      	b.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002402:	2b00      	cmp	r3, #0
 8002404:	d107      	bne.n	8002416 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681a      	ldr	r2, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f022 0208 	bic.w	r2, r2, #8
 8002414:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800242a:	f003 031f 	and.w	r3, r3, #31
 800242e:	2220      	movs	r2, #32
 8002430:	409a      	lsls	r2, r3
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	2b00      	cmp	r3, #0
 8002438:	f000 8110 	beq.w	800265c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a2c      	ldr	r2, [pc, #176]	; (80024f4 <HAL_DMA_IRQHandler+0x690>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d04a      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a2b      	ldr	r2, [pc, #172]	; (80024f8 <HAL_DMA_IRQHandler+0x694>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d045      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a29      	ldr	r2, [pc, #164]	; (80024fc <HAL_DMA_IRQHandler+0x698>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d040      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a28      	ldr	r2, [pc, #160]	; (8002500 <HAL_DMA_IRQHandler+0x69c>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d03b      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a26      	ldr	r2, [pc, #152]	; (8002504 <HAL_DMA_IRQHandler+0x6a0>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d036      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a25      	ldr	r2, [pc, #148]	; (8002508 <HAL_DMA_IRQHandler+0x6a4>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d031      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a23      	ldr	r2, [pc, #140]	; (800250c <HAL_DMA_IRQHandler+0x6a8>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d02c      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a22      	ldr	r2, [pc, #136]	; (8002510 <HAL_DMA_IRQHandler+0x6ac>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d027      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a20      	ldr	r2, [pc, #128]	; (8002514 <HAL_DMA_IRQHandler+0x6b0>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d022      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1f      	ldr	r2, [pc, #124]	; (8002518 <HAL_DMA_IRQHandler+0x6b4>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d01d      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_DMA_IRQHandler+0x6b8>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d018      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1c      	ldr	r2, [pc, #112]	; (8002520 <HAL_DMA_IRQHandler+0x6bc>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d013      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a1a      	ldr	r2, [pc, #104]	; (8002524 <HAL_DMA_IRQHandler+0x6c0>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d00e      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a19      	ldr	r2, [pc, #100]	; (8002528 <HAL_DMA_IRQHandler+0x6c4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d009      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_DMA_IRQHandler+0x6c8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_IRQHandler+0x678>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <HAL_DMA_IRQHandler+0x6cc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d12b      	bne.n	8002534 <HAL_DMA_IRQHandler+0x6d0>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0310 	and.w	r3, r3, #16
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	bf14      	ite	ne
 80024ea:	2301      	movne	r3, #1
 80024ec:	2300      	moveq	r3, #0
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	e02a      	b.n	8002548 <HAL_DMA_IRQHandler+0x6e4>
 80024f2:	bf00      	nop
 80024f4:	40020010 	.word	0x40020010
 80024f8:	40020028 	.word	0x40020028
 80024fc:	40020040 	.word	0x40020040
 8002500:	40020058 	.word	0x40020058
 8002504:	40020070 	.word	0x40020070
 8002508:	40020088 	.word	0x40020088
 800250c:	400200a0 	.word	0x400200a0
 8002510:	400200b8 	.word	0x400200b8
 8002514:	40020410 	.word	0x40020410
 8002518:	40020428 	.word	0x40020428
 800251c:	40020440 	.word	0x40020440
 8002520:	40020458 	.word	0x40020458
 8002524:	40020470 	.word	0x40020470
 8002528:	40020488 	.word	0x40020488
 800252c:	400204a0 	.word	0x400204a0
 8002530:	400204b8 	.word	0x400204b8
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf14      	ite	ne
 8002542:	2301      	movne	r3, #1
 8002544:	2300      	moveq	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 8087 	beq.w	800265c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002552:	f003 031f 	and.w	r3, r3, #31
 8002556:	2220      	movs	r2, #32
 8002558:	409a      	lsls	r2, r3
 800255a:	6a3b      	ldr	r3, [r7, #32]
 800255c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b04      	cmp	r3, #4
 8002568:	d139      	bne.n	80025de <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f022 0216 	bic.w	r2, r2, #22
 8002578:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002588:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800258e:	2b00      	cmp	r3, #0
 8002590:	d103      	bne.n	800259a <HAL_DMA_IRQHandler+0x736>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002596:	2b00      	cmp	r3, #0
 8002598:	d007      	beq.n	80025aa <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0208 	bic.w	r2, r2, #8
 80025a8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	f003 031f 	and.w	r3, r3, #31
 80025b2:	223f      	movs	r2, #63	; 0x3f
 80025b4:	409a      	lsls	r2, r3
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	2200      	movs	r2, #0
 80025be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2201      	movs	r2, #1
 80025c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	f000 834a 	beq.w	8002c68 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	4798      	blx	r3
          }
          return;
 80025dc:	e344      	b.n	8002c68 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d018      	beq.n	800261e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d108      	bne.n	800260c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d02c      	beq.n	800265c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	4798      	blx	r3
 800260a:	e027      	b.n	800265c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002610:	2b00      	cmp	r3, #0
 8002612:	d023      	beq.n	800265c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002618:	6878      	ldr	r0, [r7, #4]
 800261a:	4798      	blx	r3
 800261c:	e01e      	b.n	800265c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002628:	2b00      	cmp	r3, #0
 800262a:	d10f      	bne.n	800264c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0210 	bic.w	r2, r2, #16
 800263a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002650:	2b00      	cmp	r3, #0
 8002652:	d003      	beq.n	800265c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 8306 	beq.w	8002c72 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	f000 8088 	beq.w	8002784 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2204      	movs	r2, #4
 8002678:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a7a      	ldr	r2, [pc, #488]	; (800286c <HAL_DMA_IRQHandler+0xa08>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d04a      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a79      	ldr	r2, [pc, #484]	; (8002870 <HAL_DMA_IRQHandler+0xa0c>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d045      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a77      	ldr	r2, [pc, #476]	; (8002874 <HAL_DMA_IRQHandler+0xa10>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d040      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a76      	ldr	r2, [pc, #472]	; (8002878 <HAL_DMA_IRQHandler+0xa14>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d03b      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a74      	ldr	r2, [pc, #464]	; (800287c <HAL_DMA_IRQHandler+0xa18>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d036      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a73      	ldr	r2, [pc, #460]	; (8002880 <HAL_DMA_IRQHandler+0xa1c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d031      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4a71      	ldr	r2, [pc, #452]	; (8002884 <HAL_DMA_IRQHandler+0xa20>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d02c      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a70      	ldr	r2, [pc, #448]	; (8002888 <HAL_DMA_IRQHandler+0xa24>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d027      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a6e      	ldr	r2, [pc, #440]	; (800288c <HAL_DMA_IRQHandler+0xa28>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d022      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a6d      	ldr	r2, [pc, #436]	; (8002890 <HAL_DMA_IRQHandler+0xa2c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d01d      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a6b      	ldr	r2, [pc, #428]	; (8002894 <HAL_DMA_IRQHandler+0xa30>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d018      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a6a      	ldr	r2, [pc, #424]	; (8002898 <HAL_DMA_IRQHandler+0xa34>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d013      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a68      	ldr	r2, [pc, #416]	; (800289c <HAL_DMA_IRQHandler+0xa38>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d00e      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a67      	ldr	r2, [pc, #412]	; (80028a0 <HAL_DMA_IRQHandler+0xa3c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d009      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a65      	ldr	r2, [pc, #404]	; (80028a4 <HAL_DMA_IRQHandler+0xa40>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d004      	beq.n	800271c <HAL_DMA_IRQHandler+0x8b8>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a64      	ldr	r2, [pc, #400]	; (80028a8 <HAL_DMA_IRQHandler+0xa44>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d108      	bne.n	800272e <HAL_DMA_IRQHandler+0x8ca>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f022 0201 	bic.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]
 800272c:	e007      	b.n	800273e <HAL_DMA_IRQHandler+0x8da>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0201 	bic.w	r2, r2, #1
 800273c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	3301      	adds	r3, #1
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002746:	429a      	cmp	r2, r3
 8002748:	d307      	bcc.n	800275a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	2b00      	cmp	r3, #0
 8002756:	d1f2      	bne.n	800273e <HAL_DMA_IRQHandler+0x8da>
 8002758:	e000      	b.n	800275c <HAL_DMA_IRQHandler+0x8f8>
            break;
 800275a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d004      	beq.n	800277c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2203      	movs	r2, #3
 8002776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800277a:	e003      	b.n	8002784 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 8272 	beq.w	8002c72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	4798      	blx	r3
 8002796:	e26c      	b.n	8002c72 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a43      	ldr	r2, [pc, #268]	; (80028ac <HAL_DMA_IRQHandler+0xa48>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d022      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a42      	ldr	r2, [pc, #264]	; (80028b0 <HAL_DMA_IRQHandler+0xa4c>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d01d      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a40      	ldr	r2, [pc, #256]	; (80028b4 <HAL_DMA_IRQHandler+0xa50>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d018      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a3f      	ldr	r2, [pc, #252]	; (80028b8 <HAL_DMA_IRQHandler+0xa54>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d013      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3d      	ldr	r2, [pc, #244]	; (80028bc <HAL_DMA_IRQHandler+0xa58>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d00e      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a3c      	ldr	r2, [pc, #240]	; (80028c0 <HAL_DMA_IRQHandler+0xa5c>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d009      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a3a      	ldr	r2, [pc, #232]	; (80028c4 <HAL_DMA_IRQHandler+0xa60>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d004      	beq.n	80027e8 <HAL_DMA_IRQHandler+0x984>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a39      	ldr	r2, [pc, #228]	; (80028c8 <HAL_DMA_IRQHandler+0xa64>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d101      	bne.n	80027ec <HAL_DMA_IRQHandler+0x988>
 80027e8:	2301      	movs	r3, #1
 80027ea:	e000      	b.n	80027ee <HAL_DMA_IRQHandler+0x98a>
 80027ec:	2300      	movs	r3, #0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	f000 823f 	beq.w	8002c72 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	f003 031f 	and.w	r3, r3, #31
 8002804:	2204      	movs	r2, #4
 8002806:	409a      	lsls	r2, r3
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	4013      	ands	r3, r2
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80cd 	beq.w	80029ac <HAL_DMA_IRQHandler+0xb48>
 8002812:	693b      	ldr	r3, [r7, #16]
 8002814:	f003 0304 	and.w	r3, r3, #4
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80c7 	beq.w	80029ac <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2204      	movs	r2, #4
 8002828:	409a      	lsls	r2, r3
 800282a:	69fb      	ldr	r3, [r7, #28]
 800282c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002834:	2b00      	cmp	r3, #0
 8002836:	d049      	beq.n	80028cc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8002838:	693b      	ldr	r3, [r7, #16]
 800283a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d109      	bne.n	8002856 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002846:	2b00      	cmp	r3, #0
 8002848:	f000 8210 	beq.w	8002c6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002854:	e20a      	b.n	8002c6c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	f000 8206 	beq.w	8002c6c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002868:	e200      	b.n	8002c6c <HAL_DMA_IRQHandler+0xe08>
 800286a:	bf00      	nop
 800286c:	40020010 	.word	0x40020010
 8002870:	40020028 	.word	0x40020028
 8002874:	40020040 	.word	0x40020040
 8002878:	40020058 	.word	0x40020058
 800287c:	40020070 	.word	0x40020070
 8002880:	40020088 	.word	0x40020088
 8002884:	400200a0 	.word	0x400200a0
 8002888:	400200b8 	.word	0x400200b8
 800288c:	40020410 	.word	0x40020410
 8002890:	40020428 	.word	0x40020428
 8002894:	40020440 	.word	0x40020440
 8002898:	40020458 	.word	0x40020458
 800289c:	40020470 	.word	0x40020470
 80028a0:	40020488 	.word	0x40020488
 80028a4:	400204a0 	.word	0x400204a0
 80028a8:	400204b8 	.word	0x400204b8
 80028ac:	58025408 	.word	0x58025408
 80028b0:	5802541c 	.word	0x5802541c
 80028b4:	58025430 	.word	0x58025430
 80028b8:	58025444 	.word	0x58025444
 80028bc:	58025458 	.word	0x58025458
 80028c0:	5802546c 	.word	0x5802546c
 80028c4:	58025480 	.word	0x58025480
 80028c8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80028cc:	693b      	ldr	r3, [r7, #16]
 80028ce:	f003 0320 	and.w	r3, r3, #32
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d160      	bne.n	8002998 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a8c      	ldr	r2, [pc, #560]	; (8002b0c <HAL_DMA_IRQHandler+0xca8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d04a      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a8a      	ldr	r2, [pc, #552]	; (8002b10 <HAL_DMA_IRQHandler+0xcac>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d045      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a89      	ldr	r2, [pc, #548]	; (8002b14 <HAL_DMA_IRQHandler+0xcb0>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d040      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a87      	ldr	r2, [pc, #540]	; (8002b18 <HAL_DMA_IRQHandler+0xcb4>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d03b      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a86      	ldr	r2, [pc, #536]	; (8002b1c <HAL_DMA_IRQHandler+0xcb8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d036      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a84      	ldr	r2, [pc, #528]	; (8002b20 <HAL_DMA_IRQHandler+0xcbc>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d031      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	4a83      	ldr	r2, [pc, #524]	; (8002b24 <HAL_DMA_IRQHandler+0xcc0>)
 8002918:	4293      	cmp	r3, r2
 800291a:	d02c      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	4a81      	ldr	r2, [pc, #516]	; (8002b28 <HAL_DMA_IRQHandler+0xcc4>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d027      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a80      	ldr	r2, [pc, #512]	; (8002b2c <HAL_DMA_IRQHandler+0xcc8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d022      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a7e      	ldr	r2, [pc, #504]	; (8002b30 <HAL_DMA_IRQHandler+0xccc>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d01d      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a7d      	ldr	r2, [pc, #500]	; (8002b34 <HAL_DMA_IRQHandler+0xcd0>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d018      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4a7b      	ldr	r2, [pc, #492]	; (8002b38 <HAL_DMA_IRQHandler+0xcd4>)
 800294a:	4293      	cmp	r3, r2
 800294c:	d013      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a7a      	ldr	r2, [pc, #488]	; (8002b3c <HAL_DMA_IRQHandler+0xcd8>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d00e      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	4a78      	ldr	r2, [pc, #480]	; (8002b40 <HAL_DMA_IRQHandler+0xcdc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d009      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a77      	ldr	r2, [pc, #476]	; (8002b44 <HAL_DMA_IRQHandler+0xce0>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d004      	beq.n	8002976 <HAL_DMA_IRQHandler+0xb12>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a75      	ldr	r2, [pc, #468]	; (8002b48 <HAL_DMA_IRQHandler+0xce4>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d108      	bne.n	8002988 <HAL_DMA_IRQHandler+0xb24>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0208 	bic.w	r2, r2, #8
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	e007      	b.n	8002998 <HAL_DMA_IRQHandler+0xb34>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f022 0204 	bic.w	r2, r2, #4
 8002996:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 8165 	beq.w	8002c6c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029aa:	e15f      	b.n	8002c6c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b0:	f003 031f 	and.w	r3, r3, #31
 80029b4:	2202      	movs	r2, #2
 80029b6:	409a      	lsls	r2, r3
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	4013      	ands	r3, r2
 80029bc:	2b00      	cmp	r3, #0
 80029be:	f000 80c5 	beq.w	8002b4c <HAL_DMA_IRQHandler+0xce8>
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 80bf 	beq.w	8002b4c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029d2:	f003 031f 	and.w	r3, r3, #31
 80029d6:	2202      	movs	r2, #2
 80029d8:	409a      	lsls	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d109      	bne.n	8002a06 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	f000 813a 	beq.w	8002c70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a04:	e134      	b.n	8002c70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	f000 8130 	beq.w	8002c70 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002a18:	e12a      	b.n	8002c70 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d168      	bne.n	8002af6 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a38      	ldr	r2, [pc, #224]	; (8002b0c <HAL_DMA_IRQHandler+0xca8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d04a      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a37      	ldr	r2, [pc, #220]	; (8002b10 <HAL_DMA_IRQHandler+0xcac>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d045      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a35      	ldr	r2, [pc, #212]	; (8002b14 <HAL_DMA_IRQHandler+0xcb0>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d040      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a34      	ldr	r2, [pc, #208]	; (8002b18 <HAL_DMA_IRQHandler+0xcb4>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d03b      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a32      	ldr	r2, [pc, #200]	; (8002b1c <HAL_DMA_IRQHandler+0xcb8>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d036      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <HAL_DMA_IRQHandler+0xcbc>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d031      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <HAL_DMA_IRQHandler+0xcc0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02c      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2e      	ldr	r2, [pc, #184]	; (8002b28 <HAL_DMA_IRQHandler+0xcc4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d027      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a2c      	ldr	r2, [pc, #176]	; (8002b2c <HAL_DMA_IRQHandler+0xcc8>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d022      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a2b      	ldr	r2, [pc, #172]	; (8002b30 <HAL_DMA_IRQHandler+0xccc>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d01d      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a29      	ldr	r2, [pc, #164]	; (8002b34 <HAL_DMA_IRQHandler+0xcd0>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d018      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a28      	ldr	r2, [pc, #160]	; (8002b38 <HAL_DMA_IRQHandler+0xcd4>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d013      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a26      	ldr	r2, [pc, #152]	; (8002b3c <HAL_DMA_IRQHandler+0xcd8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d00e      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a25      	ldr	r2, [pc, #148]	; (8002b40 <HAL_DMA_IRQHandler+0xcdc>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d009      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_DMA_IRQHandler+0xce0>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d004      	beq.n	8002ac4 <HAL_DMA_IRQHandler+0xc60>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_DMA_IRQHandler+0xce4>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d108      	bne.n	8002ad6 <HAL_DMA_IRQHandler+0xc72>
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	681a      	ldr	r2, [r3, #0]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 0214 	bic.w	r2, r2, #20
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	e007      	b.n	8002ae6 <HAL_DMA_IRQHandler+0xc82>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 020a 	bic.w	r2, r2, #10
 8002ae4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2201      	movs	r2, #1
 8002af2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	f000 80b8 	beq.w	8002c70 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b04:	6878      	ldr	r0, [r7, #4]
 8002b06:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002b08:	e0b2      	b.n	8002c70 <HAL_DMA_IRQHandler+0xe0c>
 8002b0a:	bf00      	nop
 8002b0c:	40020010 	.word	0x40020010
 8002b10:	40020028 	.word	0x40020028
 8002b14:	40020040 	.word	0x40020040
 8002b18:	40020058 	.word	0x40020058
 8002b1c:	40020070 	.word	0x40020070
 8002b20:	40020088 	.word	0x40020088
 8002b24:	400200a0 	.word	0x400200a0
 8002b28:	400200b8 	.word	0x400200b8
 8002b2c:	40020410 	.word	0x40020410
 8002b30:	40020428 	.word	0x40020428
 8002b34:	40020440 	.word	0x40020440
 8002b38:	40020458 	.word	0x40020458
 8002b3c:	40020470 	.word	0x40020470
 8002b40:	40020488 	.word	0x40020488
 8002b44:	400204a0 	.word	0x400204a0
 8002b48:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b50:	f003 031f 	and.w	r3, r3, #31
 8002b54:	2208      	movs	r2, #8
 8002b56:	409a      	lsls	r2, r3
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f000 8088 	beq.w	8002c72 <HAL_DMA_IRQHandler+0xe0e>
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	f000 8082 	beq.w	8002c72 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a41      	ldr	r2, [pc, #260]	; (8002c78 <HAL_DMA_IRQHandler+0xe14>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d04a      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a3f      	ldr	r2, [pc, #252]	; (8002c7c <HAL_DMA_IRQHandler+0xe18>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d045      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3e      	ldr	r2, [pc, #248]	; (8002c80 <HAL_DMA_IRQHandler+0xe1c>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d040      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3c      	ldr	r2, [pc, #240]	; (8002c84 <HAL_DMA_IRQHandler+0xe20>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d03b      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a3b      	ldr	r2, [pc, #236]	; (8002c88 <HAL_DMA_IRQHandler+0xe24>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d036      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a39      	ldr	r2, [pc, #228]	; (8002c8c <HAL_DMA_IRQHandler+0xe28>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d031      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a38      	ldr	r2, [pc, #224]	; (8002c90 <HAL_DMA_IRQHandler+0xe2c>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d02c      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a36      	ldr	r2, [pc, #216]	; (8002c94 <HAL_DMA_IRQHandler+0xe30>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d027      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a35      	ldr	r2, [pc, #212]	; (8002c98 <HAL_DMA_IRQHandler+0xe34>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d022      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a33      	ldr	r2, [pc, #204]	; (8002c9c <HAL_DMA_IRQHandler+0xe38>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d01d      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a32      	ldr	r2, [pc, #200]	; (8002ca0 <HAL_DMA_IRQHandler+0xe3c>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d018      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a30      	ldr	r2, [pc, #192]	; (8002ca4 <HAL_DMA_IRQHandler+0xe40>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2f      	ldr	r2, [pc, #188]	; (8002ca8 <HAL_DMA_IRQHandler+0xe44>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d00e      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2d      	ldr	r2, [pc, #180]	; (8002cac <HAL_DMA_IRQHandler+0xe48>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2c      	ldr	r2, [pc, #176]	; (8002cb0 <HAL_DMA_IRQHandler+0xe4c>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d004      	beq.n	8002c0e <HAL_DMA_IRQHandler+0xdaa>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a2a      	ldr	r2, [pc, #168]	; (8002cb4 <HAL_DMA_IRQHandler+0xe50>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d108      	bne.n	8002c20 <HAL_DMA_IRQHandler+0xdbc>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f022 021c 	bic.w	r2, r2, #28
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	e007      	b.n	8002c30 <HAL_DMA_IRQHandler+0xdcc>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f022 020e 	bic.w	r2, r2, #14
 8002c2e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c34:	f003 031f 	and.w	r3, r3, #31
 8002c38:	2201      	movs	r2, #1
 8002c3a:	409a      	lsls	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2201      	movs	r2, #1
 8002c44:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2201      	movs	r2, #1
 8002c52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4798      	blx	r3
 8002c66:	e004      	b.n	8002c72 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8002c68:	bf00      	nop
 8002c6a:	e002      	b.n	8002c72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c6c:	bf00      	nop
 8002c6e:	e000      	b.n	8002c72 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8002c70:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8002c72:	3728      	adds	r7, #40	; 0x28
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	40020010 	.word	0x40020010
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	40020040 	.word	0x40020040
 8002c84:	40020058 	.word	0x40020058
 8002c88:	40020070 	.word	0x40020070
 8002c8c:	40020088 	.word	0x40020088
 8002c90:	400200a0 	.word	0x400200a0
 8002c94:	400200b8 	.word	0x400200b8
 8002c98:	40020410 	.word	0x40020410
 8002c9c:	40020428 	.word	0x40020428
 8002ca0:	40020440 	.word	0x40020440
 8002ca4:	40020458 	.word	0x40020458
 8002ca8:	40020470 	.word	0x40020470
 8002cac:	40020488 	.word	0x40020488
 8002cb0:	400204a0 	.word	0x400204a0
 8002cb4:	400204b8 	.word	0x400204b8

08002cb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a42      	ldr	r2, [pc, #264]	; (8002dd0 <DMA_CalcBaseAndBitshift+0x118>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d04a      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a41      	ldr	r2, [pc, #260]	; (8002dd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d045      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a3f      	ldr	r2, [pc, #252]	; (8002dd8 <DMA_CalcBaseAndBitshift+0x120>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d040      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a3e      	ldr	r2, [pc, #248]	; (8002ddc <DMA_CalcBaseAndBitshift+0x124>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d03b      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a3c      	ldr	r2, [pc, #240]	; (8002de0 <DMA_CalcBaseAndBitshift+0x128>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d036      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a3b      	ldr	r2, [pc, #236]	; (8002de4 <DMA_CalcBaseAndBitshift+0x12c>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d031      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a39      	ldr	r2, [pc, #228]	; (8002de8 <DMA_CalcBaseAndBitshift+0x130>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d02c      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a38      	ldr	r2, [pc, #224]	; (8002dec <DMA_CalcBaseAndBitshift+0x134>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d027      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a36      	ldr	r2, [pc, #216]	; (8002df0 <DMA_CalcBaseAndBitshift+0x138>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d022      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	4a35      	ldr	r2, [pc, #212]	; (8002df4 <DMA_CalcBaseAndBitshift+0x13c>)
 8002d20:	4293      	cmp	r3, r2
 8002d22:	d01d      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a33      	ldr	r2, [pc, #204]	; (8002df8 <DMA_CalcBaseAndBitshift+0x140>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d018      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a32      	ldr	r2, [pc, #200]	; (8002dfc <DMA_CalcBaseAndBitshift+0x144>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d013      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a30      	ldr	r2, [pc, #192]	; (8002e00 <DMA_CalcBaseAndBitshift+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d00e      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	4a2f      	ldr	r2, [pc, #188]	; (8002e04 <DMA_CalcBaseAndBitshift+0x14c>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d009      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4a2d      	ldr	r2, [pc, #180]	; (8002e08 <DMA_CalcBaseAndBitshift+0x150>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d004      	beq.n	8002d60 <DMA_CalcBaseAndBitshift+0xa8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2c      	ldr	r2, [pc, #176]	; (8002e0c <DMA_CalcBaseAndBitshift+0x154>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <DMA_CalcBaseAndBitshift+0xac>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <DMA_CalcBaseAndBitshift+0xae>
 8002d64:	2300      	movs	r3, #0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d024      	beq.n	8002db4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	3b10      	subs	r3, #16
 8002d72:	4a27      	ldr	r2, [pc, #156]	; (8002e10 <DMA_CalcBaseAndBitshift+0x158>)
 8002d74:	fba2 2303 	umull	r2, r3, r2, r3
 8002d78:	091b      	lsrs	r3, r3, #4
 8002d7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f003 0307 	and.w	r3, r3, #7
 8002d82:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <DMA_CalcBaseAndBitshift+0x15c>)
 8002d84:	5cd3      	ldrb	r3, [r2, r3]
 8002d86:	461a      	mov	r2, r3
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2b03      	cmp	r3, #3
 8002d90:	d908      	bls.n	8002da4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b1f      	ldr	r3, [pc, #124]	; (8002e18 <DMA_CalcBaseAndBitshift+0x160>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	1d1a      	adds	r2, r3, #4
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	659a      	str	r2, [r3, #88]	; 0x58
 8002da2:	e00d      	b.n	8002dc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	461a      	mov	r2, r3
 8002daa:	4b1b      	ldr	r3, [pc, #108]	; (8002e18 <DMA_CalcBaseAndBitshift+0x160>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6593      	str	r3, [r2, #88]	; 0x58
 8002db2:	e005      	b.n	8002dc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr
 8002dd0:	40020010 	.word	0x40020010
 8002dd4:	40020028 	.word	0x40020028
 8002dd8:	40020040 	.word	0x40020040
 8002ddc:	40020058 	.word	0x40020058
 8002de0:	40020070 	.word	0x40020070
 8002de4:	40020088 	.word	0x40020088
 8002de8:	400200a0 	.word	0x400200a0
 8002dec:	400200b8 	.word	0x400200b8
 8002df0:	40020410 	.word	0x40020410
 8002df4:	40020428 	.word	0x40020428
 8002df8:	40020440 	.word	0x40020440
 8002dfc:	40020458 	.word	0x40020458
 8002e00:	40020470 	.word	0x40020470
 8002e04:	40020488 	.word	0x40020488
 8002e08:	400204a0 	.word	0x400204a0
 8002e0c:	400204b8 	.word	0x400204b8
 8002e10:	aaaaaaab 	.word	0xaaaaaaab
 8002e14:	08010538 	.word	0x08010538
 8002e18:	fffffc00 	.word	0xfffffc00

08002e1c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b085      	sub	sp, #20
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d120      	bne.n	8002e72 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e34:	2b03      	cmp	r3, #3
 8002e36:	d858      	bhi.n	8002eea <DMA_CheckFifoParam+0xce>
 8002e38:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <DMA_CheckFifoParam+0x24>)
 8002e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3e:	bf00      	nop
 8002e40:	08002e51 	.word	0x08002e51
 8002e44:	08002e63 	.word	0x08002e63
 8002e48:	08002e51 	.word	0x08002e51
 8002e4c:	08002eeb 	.word	0x08002eeb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d048      	beq.n	8002eee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e60:	e045      	b.n	8002eee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002e6a:	d142      	bne.n	8002ef2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002e70:	e03f      	b.n	8002ef2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	699b      	ldr	r3, [r3, #24]
 8002e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e7a:	d123      	bne.n	8002ec4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d838      	bhi.n	8002ef6 <DMA_CheckFifoParam+0xda>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <DMA_CheckFifoParam+0x70>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002ea3 	.word	0x08002ea3
 8002e94:	08002e9d 	.word	0x08002e9d
 8002e98:	08002eb5 	.word	0x08002eb5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea0:	e030      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ea6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d025      	beq.n	8002efa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002eb2:	e022      	b.n	8002efa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002ebc:	d11f      	bne.n	8002efe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002ec2:	e01c      	b.n	8002efe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec8:	2b02      	cmp	r3, #2
 8002eca:	d902      	bls.n	8002ed2 <DMA_CheckFifoParam+0xb6>
 8002ecc:	2b03      	cmp	r3, #3
 8002ece:	d003      	beq.n	8002ed8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8002ed0:	e018      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        break;
 8002ed6:	e015      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
    break;
 8002ee8:	e00b      	b.n	8002f02 <DMA_CheckFifoParam+0xe6>
        break;
 8002eea:	bf00      	nop
 8002eec:	e00a      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        break;
 8002eee:	bf00      	nop
 8002ef0:	e008      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        break;
 8002ef2:	bf00      	nop
 8002ef4:	e006      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        break;
 8002ef6:	bf00      	nop
 8002ef8:	e004      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        break;
 8002efa:	bf00      	nop
 8002efc:	e002      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
        break;
 8002efe:	bf00      	nop
 8002f00:	e000      	b.n	8002f04 <DMA_CheckFifoParam+0xe8>
    break;
 8002f02:	bf00      	nop
    }
  }

  return status;
 8002f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3714      	adds	r7, #20
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr
 8002f12:	bf00      	nop

08002f14 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b085      	sub	sp, #20
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a38      	ldr	r2, [pc, #224]	; (8003008 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d022      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a36      	ldr	r2, [pc, #216]	; (800300c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01d      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a35      	ldr	r2, [pc, #212]	; (8003010 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8002f3c:	4293      	cmp	r3, r2
 8002f3e:	d018      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a33      	ldr	r2, [pc, #204]	; (8003014 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d013      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a32      	ldr	r2, [pc, #200]	; (8003018 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d00e      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4a30      	ldr	r2, [pc, #192]	; (800301c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d009      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a2f      	ldr	r2, [pc, #188]	; (8003020 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d004      	beq.n	8002f72 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a2d      	ldr	r2, [pc, #180]	; (8003024 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d101      	bne.n	8002f76 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8002f72:	2301      	movs	r3, #1
 8002f74:	e000      	b.n	8002f78 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8002f76:	2300      	movs	r3, #0
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01a      	beq.n	8002fb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	3b08      	subs	r3, #8
 8002f84:	4a28      	ldr	r2, [pc, #160]	; (8003028 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8002f86:	fba2 2303 	umull	r2, r3, r2, r3
 8002f8a:	091b      	lsrs	r3, r3, #4
 8002f8c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	4b26      	ldr	r3, [pc, #152]	; (800302c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8002f92:	4413      	add	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	461a      	mov	r2, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a24      	ldr	r2, [pc, #144]	; (8003030 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8002fa0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	2201      	movs	r2, #1
 8002faa:	409a      	lsls	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8002fb0:	e024      	b.n	8002ffc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b2db      	uxtb	r3, r3
 8002fb8:	3b10      	subs	r3, #16
 8002fba:	4a1e      	ldr	r2, [pc, #120]	; (8003034 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	091b      	lsrs	r3, r3, #4
 8002fc2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	4a1c      	ldr	r2, [pc, #112]	; (8003038 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d806      	bhi.n	8002fda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	4a1b      	ldr	r2, [pc, #108]	; (800303c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d902      	bls.n	8002fda <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	3308      	adds	r3, #8
 8002fd8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	4b18      	ldr	r3, [pc, #96]	; (8003040 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8002fde:	4413      	add	r3, r2
 8002fe0:	009b      	lsls	r3, r3, #2
 8002fe2:	461a      	mov	r2, r3
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	4a16      	ldr	r2, [pc, #88]	; (8003044 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8002fec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f003 031f 	and.w	r3, r3, #31
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	409a      	lsls	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	669a      	str	r2, [r3, #104]	; 0x68
}
 8002ffc:	bf00      	nop
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	58025408 	.word	0x58025408
 800300c:	5802541c 	.word	0x5802541c
 8003010:	58025430 	.word	0x58025430
 8003014:	58025444 	.word	0x58025444
 8003018:	58025458 	.word	0x58025458
 800301c:	5802546c 	.word	0x5802546c
 8003020:	58025480 	.word	0x58025480
 8003024:	58025494 	.word	0x58025494
 8003028:	cccccccd 	.word	0xcccccccd
 800302c:	16009600 	.word	0x16009600
 8003030:	58025880 	.word	0x58025880
 8003034:	aaaaaaab 	.word	0xaaaaaaab
 8003038:	400204b8 	.word	0x400204b8
 800303c:	4002040f 	.word	0x4002040f
 8003040:	10008200 	.word	0x10008200
 8003044:	40020880 	.word	0x40020880

08003048 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003048:	b480      	push	{r7}
 800304a:	b085      	sub	sp, #20
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	685b      	ldr	r3, [r3, #4]
 8003054:	b2db      	uxtb	r3, r3
 8003056:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d04a      	beq.n	80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2b08      	cmp	r3, #8
 8003062:	d847      	bhi.n	80030f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a25      	ldr	r2, [pc, #148]	; (8003100 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d022      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a24      	ldr	r2, [pc, #144]	; (8003104 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d01d      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a22      	ldr	r2, [pc, #136]	; (8003108 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d018      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a21      	ldr	r2, [pc, #132]	; (800310c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d013      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1f      	ldr	r2, [pc, #124]	; (8003110 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00e      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a1e      	ldr	r2, [pc, #120]	; (8003114 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d009      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a1c      	ldr	r2, [pc, #112]	; (8003118 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d004      	beq.n	80030b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a1b      	ldr	r2, [pc, #108]	; (800311c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d101      	bne.n	80030b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80030b4:	2301      	movs	r3, #1
 80030b6:	e000      	b.n	80030ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80030b8:	2300      	movs	r3, #0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80030be:	68fa      	ldr	r2, [r7, #12]
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80030c2:	4413      	add	r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	461a      	mov	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	4a15      	ldr	r2, [pc, #84]	; (8003124 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80030d0:	671a      	str	r2, [r3, #112]	; 0x70
 80030d2:	e009      	b.n	80030e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80030d4:	68fa      	ldr	r2, [r7, #12]
 80030d6:	4b14      	ldr	r3, [pc, #80]	; (8003128 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	461a      	mov	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a11      	ldr	r2, [pc, #68]	; (800312c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80030e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	3b01      	subs	r3, #1
 80030ec:	2201      	movs	r2, #1
 80030ee:	409a      	lsls	r2, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80030f4:	bf00      	nop
 80030f6:	3714      	adds	r7, #20
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	58025408 	.word	0x58025408
 8003104:	5802541c 	.word	0x5802541c
 8003108:	58025430 	.word	0x58025430
 800310c:	58025444 	.word	0x58025444
 8003110:	58025458 	.word	0x58025458
 8003114:	5802546c 	.word	0x5802546c
 8003118:	58025480 	.word	0x58025480
 800311c:	58025494 	.word	0x58025494
 8003120:	1600963f 	.word	0x1600963f
 8003124:	58025940 	.word	0x58025940
 8003128:	1000823f 	.word	0x1000823f
 800312c:	40020940 	.word	0x40020940

08003130 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b098      	sub	sp, #96	; 0x60
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8003138:	4a84      	ldr	r2, [pc, #528]	; (800334c <HAL_FDCAN_Init+0x21c>)
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4611      	mov	r1, r2
 8003140:	224c      	movs	r2, #76	; 0x4c
 8003142:	4618      	mov	r0, r3
 8003144:	f00d f8c6 	bl	80102d4 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e1ca      	b.n	80034e8 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a7e      	ldr	r2, [pc, #504]	; (8003350 <HAL_FDCAN_Init+0x220>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d106      	bne.n	800316a <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003164:	461a      	mov	r2, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d106      	bne.n	8003184 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2200      	movs	r2, #0
 800317a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7fd fe1c 	bl	8000dbc <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f022 0210 	bic.w	r2, r2, #16
 8003192:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003194:	f7fe f9c0 	bl	8001518 <HAL_GetTick>
 8003198:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800319a:	e014      	b.n	80031c6 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800319c:	f7fe f9bc 	bl	8001518 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b0a      	cmp	r3, #10
 80031a8:	d90d      	bls.n	80031c6 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80031b0:	f043 0201 	orr.w	r2, r3, #1
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2203      	movs	r2, #3
 80031be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e190      	b.n	80034e8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	699b      	ldr	r3, [r3, #24]
 80031cc:	f003 0308 	and.w	r3, r3, #8
 80031d0:	2b08      	cmp	r3, #8
 80031d2:	d0e3      	beq.n	800319c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	699a      	ldr	r2, [r3, #24]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80031e4:	f7fe f998 	bl	8001518 <HAL_GetTick>
 80031e8:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031ea:	e014      	b.n	8003216 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80031ec:	f7fe f994 	bl	8001518 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b0a      	cmp	r3, #10
 80031f8:	d90d      	bls.n	8003216 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003200:	f043 0201 	orr.w	r2, r3, #1
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2203      	movs	r2, #3
 800320e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e168      	b.n	80034e8 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d0e3      	beq.n	80031ec <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f042 0202 	orr.w	r2, r2, #2
 8003232:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	7c1b      	ldrb	r3, [r3, #16]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d108      	bne.n	800324e <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800324a:	619a      	str	r2, [r3, #24]
 800324c:	e007      	b.n	800325e <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800325c:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	7c5b      	ldrb	r3, [r3, #17]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d108      	bne.n	8003278 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	699a      	ldr	r2, [r3, #24]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003274:	619a      	str	r2, [r3, #24]
 8003276:	e007      	b.n	8003288 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003286:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	7c9b      	ldrb	r3, [r3, #18]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d108      	bne.n	80032a2 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	699a      	ldr	r2, [r3, #24]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800329e:	619a      	str	r2, [r3, #24]
 80032a0:	e007      	b.n	80032b2 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	699a      	ldr	r2, [r3, #24]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80032b0:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	699b      	ldr	r3, [r3, #24]
 80032b8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	430a      	orrs	r2, r1
 80032c6:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	699a      	ldr	r2, [r3, #24]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80032d6:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	691a      	ldr	r2, [r3, #16]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0210 	bic.w	r2, r2, #16
 80032e6:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d108      	bne.n	8003302 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	699a      	ldr	r2, [r3, #24]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f042 0204 	orr.w	r2, r2, #4
 80032fe:	619a      	str	r2, [r3, #24]
 8003300:	e030      	b.n	8003364 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d02c      	beq.n	8003364 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	68db      	ldr	r3, [r3, #12]
 800330e:	2b02      	cmp	r3, #2
 8003310:	d020      	beq.n	8003354 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	699a      	ldr	r2, [r3, #24]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003320:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	691a      	ldr	r2, [r3, #16]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0210 	orr.w	r2, r2, #16
 8003330:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	2b03      	cmp	r3, #3
 8003338:	d114      	bne.n	8003364 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	699a      	ldr	r2, [r3, #24]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f042 0220 	orr.w	r2, r2, #32
 8003348:	619a      	str	r2, [r3, #24]
 800334a:	e00b      	b.n	8003364 <HAL_FDCAN_Init+0x234>
 800334c:	08010488 	.word	0x08010488
 8003350:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0220 	orr.w	r2, r2, #32
 8003362:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	699b      	ldr	r3, [r3, #24]
 8003368:	3b01      	subs	r3, #1
 800336a:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	3b01      	subs	r3, #1
 8003372:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003374:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6a1b      	ldr	r3, [r3, #32]
 800337a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800337c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	695b      	ldr	r3, [r3, #20]
 8003384:	3b01      	subs	r3, #1
 8003386:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800338c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800338e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003398:	d115      	bne.n	80033c6 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800339e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033a4:	3b01      	subs	r3, #1
 80033a6:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033a8:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	3b01      	subs	r3, #1
 80033b0:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80033b2:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ba:	3b01      	subs	r3, #1
 80033bc:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80033c2:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80033c4:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d00a      	beq.n	80033e4 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	4413      	add	r3, r2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d012      	beq.n	8003418 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 80033fa:	f023 0107 	bic.w	r1, r3, #7
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003408:	4413      	add	r3, r2
 800340a:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341c:	2b00      	cmp	r3, #0
 800341e:	d012      	beq.n	8003446 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003428:	f023 0107 	bic.w	r1, r3, #7
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003436:	4413      	add	r3, r2
 8003438:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800344a:	2b00      	cmp	r3, #0
 800344c:	d013      	beq.n	8003476 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003456:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003464:	4413      	add	r3, r2
 8003466:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800346a:	011a      	lsls	r2, r3, #4
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800347a:	2b00      	cmp	r3, #0
 800347c:	d013      	beq.n	80034a6 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003486:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8003494:	4413      	add	r3, r2
 8003496:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800349a:	021a      	lsls	r2, r3, #8
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	430a      	orrs	r2, r1
 80034a2:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4a11      	ldr	r2, [pc, #68]	; (80034f0 <HAL_FDCAN_Init+0x3c0>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d107      	bne.n	80034c0 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	689a      	ldr	r2, [r3, #8]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f022 0203 	bic.w	r2, r2, #3
 80034be:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f80b 	bl	80034f4 <FDCAN_CalcultateRamBlockAddresses>
 80034de:	4603      	mov	r3, r0
 80034e0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80034e4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3760      	adds	r7, #96	; 0x60
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	4000a000 	.word	0x4000a000

080034f4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003500:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800350a:	4ba7      	ldr	r3, [pc, #668]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800350c:	4013      	ands	r3, r2
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	0091      	lsls	r1, r2, #2
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6812      	ldr	r2, [r2, #0]
 8003516:	430b      	orrs	r3, r1
 8003518:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003524:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800352c:	041a      	lsls	r2, r3, #16
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	430a      	orrs	r2, r1
 8003534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353c:	68ba      	ldr	r2, [r7, #8]
 800353e:	4413      	add	r3, r2
 8003540:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800354a:	4b97      	ldr	r3, [pc, #604]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800354c:	4013      	ands	r3, r2
 800354e:	68ba      	ldr	r2, [r7, #8]
 8003550:	0091      	lsls	r1, r2, #2
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	6812      	ldr	r2, [r2, #0]
 8003556:	430b      	orrs	r3, r1
 8003558:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003564:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800356c:	041a      	lsls	r2, r3, #16
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	430a      	orrs	r2, r1
 8003574:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	4413      	add	r3, r2
 8003582:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800358c:	4b86      	ldr	r3, [pc, #536]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800358e:	4013      	ands	r3, r2
 8003590:	68ba      	ldr	r2, [r7, #8]
 8003592:	0091      	lsls	r1, r2, #2
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	6812      	ldr	r2, [r2, #0]
 8003598:	430b      	orrs	r3, r1
 800359a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80035a6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	041a      	lsls	r2, r3, #16
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	430a      	orrs	r2, r1
 80035b6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80035c2:	fb02 f303 	mul.w	r3, r2, r3
 80035c6:	68ba      	ldr	r2, [r7, #8]
 80035c8:	4413      	add	r3, r2
 80035ca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80035d4:	4b74      	ldr	r3, [pc, #464]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80035d6:	4013      	ands	r3, r2
 80035d8:	68ba      	ldr	r2, [r7, #8]
 80035da:	0091      	lsls	r1, r2, #2
 80035dc:	687a      	ldr	r2, [r7, #4]
 80035de:	6812      	ldr	r2, [r2, #0]
 80035e0:	430b      	orrs	r3, r1
 80035e2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80035ee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035f6:	041a      	lsls	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	430a      	orrs	r2, r1
 80035fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003606:	687a      	ldr	r2, [r7, #4]
 8003608:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800360a:	fb02 f303 	mul.w	r3, r2, r3
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4413      	add	r3, r2
 8003612:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800361c:	4b62      	ldr	r3, [pc, #392]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	0091      	lsls	r1, r2, #2
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	430b      	orrs	r3, r1
 800362a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8003636:	fb02 f303 	mul.w	r3, r2, r3
 800363a:	68ba      	ldr	r2, [r7, #8]
 800363c:	4413      	add	r3, r2
 800363e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8003648:	4b57      	ldr	r3, [pc, #348]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800364a:	4013      	ands	r3, r2
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	0091      	lsls	r1, r2, #2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6812      	ldr	r2, [r2, #0]
 8003654:	430b      	orrs	r3, r1
 8003656:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003662:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800366a:	041a      	lsls	r2, r3, #16
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	4413      	add	r3, r2
 8003680:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800368a:	4b47      	ldr	r3, [pc, #284]	; (80037a8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800368c:	4013      	ands	r3, r2
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	0091      	lsls	r1, r2, #2
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	430b      	orrs	r3, r1
 8003698:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036a4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ac:	041a      	lsls	r2, r3, #16
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	430a      	orrs	r2, r1
 80036b4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80036c0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036c8:	061a      	lsls	r2, r3, #24
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	430a      	orrs	r2, r1
 80036d0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036d8:	4b34      	ldr	r3, [pc, #208]	; (80037ac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 80036da:	4413      	add	r3, r2
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	441a      	add	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036fa:	00db      	lsls	r3, r3, #3
 80036fc:	441a      	add	r2, r3
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800370e:	fb01 f303 	mul.w	r3, r1, r3
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	441a      	add	r2, r3
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8003726:	fb01 f303 	mul.w	r3, r1, r3
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	441a      	add	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800373e:	fb01 f303 	mul.w	r3, r1, r3
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	441a      	add	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003756:	00db      	lsls	r3, r3, #3
 8003758:	441a      	add	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376a:	6879      	ldr	r1, [r7, #4]
 800376c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	441a      	add	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003786:	6879      	ldr	r1, [r7, #4]
 8003788:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	441a      	add	r2, r3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800379e:	4a04      	ldr	r2, [pc, #16]	; (80037b0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 80037a0:	4293      	cmp	r3, r2
 80037a2:	d915      	bls.n	80037d0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 80037a4:	e006      	b.n	80037b4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 80037a6:	bf00      	nop
 80037a8:	ffff0003 	.word	0xffff0003
 80037ac:	10002b00 	.word	0x10002b00
 80037b0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80037ba:	f043 0220 	orr.w	r2, r3, #32
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2203      	movs	r2, #3
 80037c8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 80037cc:	2301      	movs	r3, #1
 80037ce:	e010      	b.n	80037f2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80037d4:	60fb      	str	r3, [r7, #12]
 80037d6:	e005      	b.n	80037e4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2200      	movs	r2, #0
 80037dc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	3304      	adds	r3, #4
 80037e2:	60fb      	str	r3, [r7, #12]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037ea:	68fa      	ldr	r2, [r7, #12]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d3f3      	bcc.n	80037d8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80037f0:	2300      	movs	r3, #0
}
 80037f2:	4618      	mov	r0, r3
 80037f4:	3714      	adds	r7, #20
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop

08003800 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800380a:	2300      	movs	r3, #0
 800380c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800380e:	4b89      	ldr	r3, [pc, #548]	; (8003a34 <HAL_GPIO_Init+0x234>)
 8003810:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003812:	e194      	b.n	8003b3e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681a      	ldr	r2, [r3, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	fa01 f303 	lsl.w	r3, r1, r3
 8003820:	4013      	ands	r3, r2
 8003822:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 8186 	beq.w	8003b38 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2b01      	cmp	r3, #1
 8003832:	d00b      	beq.n	800384c <HAL_GPIO_Init+0x4c>
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	2b02      	cmp	r3, #2
 800383a:	d007      	beq.n	800384c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003840:	2b11      	cmp	r3, #17
 8003842:	d003      	beq.n	800384c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b12      	cmp	r3, #18
 800384a:	d130      	bne.n	80038ae <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	005b      	lsls	r3, r3, #1
 8003856:	2203      	movs	r2, #3
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	68da      	ldr	r2, [r3, #12]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4313      	orrs	r3, r2
 8003874:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	69ba      	ldr	r2, [r7, #24]
 800387a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003882:	2201      	movs	r2, #1
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	fa02 f303 	lsl.w	r3, r2, r3
 800388a:	43db      	mvns	r3, r3
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4013      	ands	r3, r2
 8003890:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	091b      	lsrs	r3, r3, #4
 8003898:	f003 0201 	and.w	r2, r3, #1
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	2203      	movs	r2, #3
 80038ba:	fa02 f303 	lsl.w	r3, r2, r3
 80038be:	43db      	mvns	r3, r3
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	4013      	ands	r3, r2
 80038c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689a      	ldr	r2, [r3, #8]
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4313      	orrs	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d003      	beq.n	80038ee <HAL_GPIO_Init+0xee>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	2b12      	cmp	r3, #18
 80038ec:	d123      	bne.n	8003936 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038ee:	69fb      	ldr	r3, [r7, #28]
 80038f0:	08da      	lsrs	r2, r3, #3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	3208      	adds	r2, #8
 80038f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0307 	and.w	r3, r3, #7
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	691a      	ldr	r2, [r3, #16]
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	69b9      	ldr	r1, [r7, #24]
 8003932:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	005b      	lsls	r3, r3, #1
 8003940:	2203      	movs	r2, #3
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43db      	mvns	r3, r3
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	4013      	ands	r3, r2
 800394c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f003 0203 	and.w	r2, r3, #3
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fa02 f303 	lsl.w	r3, r2, r3
 800395e:	69ba      	ldr	r2, [r7, #24]
 8003960:	4313      	orrs	r3, r2
 8003962:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	69ba      	ldr	r2, [r7, #24]
 8003968:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003972:	2b00      	cmp	r3, #0
 8003974:	f000 80e0 	beq.w	8003b38 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003978:	4b2f      	ldr	r3, [pc, #188]	; (8003a38 <HAL_GPIO_Init+0x238>)
 800397a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800397e:	4a2e      	ldr	r2, [pc, #184]	; (8003a38 <HAL_GPIO_Init+0x238>)
 8003980:	f043 0302 	orr.w	r3, r3, #2
 8003984:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003988:	4b2b      	ldr	r3, [pc, #172]	; (8003a38 <HAL_GPIO_Init+0x238>)
 800398a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800398e:	f003 0302 	and.w	r3, r3, #2
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003996:	4a29      	ldr	r2, [pc, #164]	; (8003a3c <HAL_GPIO_Init+0x23c>)
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	089b      	lsrs	r3, r3, #2
 800399c:	3302      	adds	r3, #2
 800399e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	f003 0303 	and.w	r3, r3, #3
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	220f      	movs	r2, #15
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a20      	ldr	r2, [pc, #128]	; (8003a40 <HAL_GPIO_Init+0x240>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d052      	beq.n	8003a68 <HAL_GPIO_Init+0x268>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a1f      	ldr	r2, [pc, #124]	; (8003a44 <HAL_GPIO_Init+0x244>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d031      	beq.n	8003a2e <HAL_GPIO_Init+0x22e>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a1e      	ldr	r2, [pc, #120]	; (8003a48 <HAL_GPIO_Init+0x248>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d02b      	beq.n	8003a2a <HAL_GPIO_Init+0x22a>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a1d      	ldr	r2, [pc, #116]	; (8003a4c <HAL_GPIO_Init+0x24c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d025      	beq.n	8003a26 <HAL_GPIO_Init+0x226>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a1c      	ldr	r2, [pc, #112]	; (8003a50 <HAL_GPIO_Init+0x250>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d01f      	beq.n	8003a22 <HAL_GPIO_Init+0x222>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a1b      	ldr	r2, [pc, #108]	; (8003a54 <HAL_GPIO_Init+0x254>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d019      	beq.n	8003a1e <HAL_GPIO_Init+0x21e>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a1a      	ldr	r2, [pc, #104]	; (8003a58 <HAL_GPIO_Init+0x258>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d013      	beq.n	8003a1a <HAL_GPIO_Init+0x21a>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a19      	ldr	r2, [pc, #100]	; (8003a5c <HAL_GPIO_Init+0x25c>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d00d      	beq.n	8003a16 <HAL_GPIO_Init+0x216>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a18      	ldr	r2, [pc, #96]	; (8003a60 <HAL_GPIO_Init+0x260>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d007      	beq.n	8003a12 <HAL_GPIO_Init+0x212>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a17      	ldr	r2, [pc, #92]	; (8003a64 <HAL_GPIO_Init+0x264>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d101      	bne.n	8003a0e <HAL_GPIO_Init+0x20e>
 8003a0a:	2309      	movs	r3, #9
 8003a0c:	e02d      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a0e:	230a      	movs	r3, #10
 8003a10:	e02b      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a12:	2308      	movs	r3, #8
 8003a14:	e029      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a16:	2307      	movs	r3, #7
 8003a18:	e027      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a1a:	2306      	movs	r3, #6
 8003a1c:	e025      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a1e:	2305      	movs	r3, #5
 8003a20:	e023      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a22:	2304      	movs	r3, #4
 8003a24:	e021      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a26:	2303      	movs	r3, #3
 8003a28:	e01f      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	e01d      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e01b      	b.n	8003a6a <HAL_GPIO_Init+0x26a>
 8003a32:	bf00      	nop
 8003a34:	58000080 	.word	0x58000080
 8003a38:	58024400 	.word	0x58024400
 8003a3c:	58000400 	.word	0x58000400
 8003a40:	58020000 	.word	0x58020000
 8003a44:	58020400 	.word	0x58020400
 8003a48:	58020800 	.word	0x58020800
 8003a4c:	58020c00 	.word	0x58020c00
 8003a50:	58021000 	.word	0x58021000
 8003a54:	58021400 	.word	0x58021400
 8003a58:	58021800 	.word	0x58021800
 8003a5c:	58021c00 	.word	0x58021c00
 8003a60:	58022000 	.word	0x58022000
 8003a64:	58022400 	.word	0x58022400
 8003a68:	2300      	movs	r3, #0
 8003a6a:	69fa      	ldr	r2, [r7, #28]
 8003a6c:	f002 0203 	and.w	r2, r2, #3
 8003a70:	0092      	lsls	r2, r2, #2
 8003a72:	4093      	lsls	r3, r2
 8003a74:	69ba      	ldr	r2, [r7, #24]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a7a:	4938      	ldr	r1, [pc, #224]	; (8003b5c <HAL_GPIO_Init+0x35c>)
 8003a7c:	69fb      	ldr	r3, [r7, #28]
 8003a7e:	089b      	lsrs	r3, r3, #2
 8003a80:	3302      	adds	r3, #2
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d003      	beq.n	8003aac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003aa4:	69ba      	ldr	r2, [r7, #24]
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	69ba      	ldr	r2, [r7, #24]
 8003ab0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ab8:	693b      	ldr	r3, [r7, #16]
 8003aba:	43db      	mvns	r3, r3
 8003abc:	69ba      	ldr	r2, [r7, #24]
 8003abe:	4013      	ands	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003adc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	4013      	ands	r3, r2
 8003aec:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d003      	beq.n	8003b02 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	693b      	ldr	r3, [r7, #16]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8003b02:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b06:	69bb      	ldr	r3, [r7, #24]
 8003b08:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8003b0a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69ba      	ldr	r2, [r7, #24]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003b30:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8003b38:	69fb      	ldr	r3, [r7, #28]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	69fb      	ldr	r3, [r7, #28]
 8003b44:	fa22 f303 	lsr.w	r3, r2, r3
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	f47f ae63 	bne.w	8003814 <HAL_GPIO_Init+0x14>
  }
}
 8003b4e:	bf00      	nop
 8003b50:	3724      	adds	r7, #36	; 0x24
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	58000400 	.word	0x58000400

08003b60 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
 8003b68:	460b      	mov	r3, r1
 8003b6a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	691a      	ldr	r2, [r3, #16]
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	4013      	ands	r3, r2
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d002      	beq.n	8003b7e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	73fb      	strb	r3, [r7, #15]
 8003b7c:	e001      	b.n	8003b82 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3714      	adds	r7, #20
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr

08003b90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
 8003b98:	460b      	mov	r3, r1
 8003b9a:	807b      	strh	r3, [r7, #2]
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ba0:	787b      	ldrb	r3, [r7, #1]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ba6:	887a      	ldrh	r2, [r7, #2]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8003bac:	e003      	b.n	8003bb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bae:	887b      	ldrh	r3, [r7, #2]
 8003bb0:	041a      	lsls	r2, r3, #16
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	619a      	str	r2, [r3, #24]
}
 8003bb6:	bf00      	nop
 8003bb8:	370c      	adds	r7, #12
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr

08003bc2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bc2:	b480      	push	{r7}
 8003bc4:	b083      	sub	sp, #12
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
 8003bca:	460b      	mov	r3, r1
 8003bcc:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	695a      	ldr	r2, [r3, #20]
 8003bd2:	887b      	ldrh	r3, [r7, #2]
 8003bd4:	401a      	ands	r2, r3
 8003bd6:	887b      	ldrh	r3, [r7, #2]
 8003bd8:	429a      	cmp	r2, r3
 8003bda:	d104      	bne.n	8003be6 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003bdc:	887b      	ldrh	r3, [r7, #2]
 8003bde:	041a      	lsls	r2, r3, #16
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003be4:	e002      	b.n	8003bec <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8003be6:	887a      	ldrh	r2, [r7, #2]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	619a      	str	r2, [r3, #24]
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003bf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bfa:	b08f      	sub	sp, #60	; 0x3c
 8003bfc:	af0a      	add	r7, sp, #40	; 0x28
 8003bfe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d101      	bne.n	8003c0a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003c06:	2301      	movs	r3, #1
 8003c08:	e116      	b.n	8003e38 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003c16:	b2db      	uxtb	r3, r3
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d106      	bne.n	8003c2a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2200      	movs	r2, #0
 8003c20:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f00b fffd 	bl	800fc24 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2203      	movs	r2, #3
 8003c2e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003c32:	68bb      	ldr	r3, [r7, #8]
 8003c34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d102      	bne.n	8003c44 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2200      	movs	r2, #0
 8003c42:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f007 fcd8 	bl	800b5fe <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	603b      	str	r3, [r7, #0]
 8003c54:	687e      	ldr	r6, [r7, #4]
 8003c56:	466d      	mov	r5, sp
 8003c58:	f106 0410 	add.w	r4, r6, #16
 8003c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003c62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003c64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003c68:	e885 0003 	stmia.w	r5, {r0, r1}
 8003c6c:	1d33      	adds	r3, r6, #4
 8003c6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003c70:	6838      	ldr	r0, [r7, #0]
 8003c72:	f007 fbaf 	bl	800b3d4 <USB_CoreInit>
 8003c76:	4603      	mov	r3, r0
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d005      	beq.n	8003c88 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d7      	b.n	8003e38 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2100      	movs	r1, #0
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f007 fcc6 	bl	800b620 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c94:	2300      	movs	r3, #0
 8003c96:	73fb      	strb	r3, [r7, #15]
 8003c98:	e04a      	b.n	8003d30 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003c9a:	7bfa      	ldrb	r2, [r7, #15]
 8003c9c:	6879      	ldr	r1, [r7, #4]
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	00db      	lsls	r3, r3, #3
 8003ca2:	1a9b      	subs	r3, r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	333d      	adds	r3, #61	; 0x3d
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003cae:	7bfa      	ldrb	r2, [r7, #15]
 8003cb0:	6879      	ldr	r1, [r7, #4]
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	00db      	lsls	r3, r3, #3
 8003cb6:	1a9b      	subs	r3, r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	333c      	adds	r3, #60	; 0x3c
 8003cbe:	7bfa      	ldrb	r2, [r7, #15]
 8003cc0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003cc2:	7bfa      	ldrb	r2, [r7, #15]
 8003cc4:	7bfb      	ldrb	r3, [r7, #15]
 8003cc6:	b298      	uxth	r0, r3
 8003cc8:	6879      	ldr	r1, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	00db      	lsls	r3, r3, #3
 8003cce:	1a9b      	subs	r3, r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3342      	adds	r3, #66	; 0x42
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003cda:	7bfa      	ldrb	r2, [r7, #15]
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4613      	mov	r3, r2
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	1a9b      	subs	r3, r3, r2
 8003ce4:	009b      	lsls	r3, r3, #2
 8003ce6:	440b      	add	r3, r1
 8003ce8:	333f      	adds	r3, #63	; 0x3f
 8003cea:	2200      	movs	r2, #0
 8003cec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003cee:	7bfa      	ldrb	r2, [r7, #15]
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4613      	mov	r3, r2
 8003cf4:	00db      	lsls	r3, r3, #3
 8003cf6:	1a9b      	subs	r3, r3, r2
 8003cf8:	009b      	lsls	r3, r3, #2
 8003cfa:	440b      	add	r3, r1
 8003cfc:	3344      	adds	r3, #68	; 0x44
 8003cfe:	2200      	movs	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003d02:	7bfa      	ldrb	r2, [r7, #15]
 8003d04:	6879      	ldr	r1, [r7, #4]
 8003d06:	4613      	mov	r3, r2
 8003d08:	00db      	lsls	r3, r3, #3
 8003d0a:	1a9b      	subs	r3, r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	440b      	add	r3, r1
 8003d10:	3348      	adds	r3, #72	; 0x48
 8003d12:	2200      	movs	r2, #0
 8003d14:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003d16:	7bfa      	ldrb	r2, [r7, #15]
 8003d18:	6879      	ldr	r1, [r7, #4]
 8003d1a:	4613      	mov	r3, r2
 8003d1c:	00db      	lsls	r3, r3, #3
 8003d1e:	1a9b      	subs	r3, r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	440b      	add	r3, r1
 8003d24:	3350      	adds	r3, #80	; 0x50
 8003d26:	2200      	movs	r2, #0
 8003d28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d2a:	7bfb      	ldrb	r3, [r7, #15]
 8003d2c:	3301      	adds	r3, #1
 8003d2e:	73fb      	strb	r3, [r7, #15]
 8003d30:	7bfa      	ldrb	r2, [r7, #15]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d3af      	bcc.n	8003c9a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	73fb      	strb	r3, [r7, #15]
 8003d3e:	e044      	b.n	8003dca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003d40:	7bfa      	ldrb	r2, [r7, #15]
 8003d42:	6879      	ldr	r1, [r7, #4]
 8003d44:	4613      	mov	r3, r2
 8003d46:	00db      	lsls	r3, r3, #3
 8003d48:	1a9b      	subs	r3, r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	440b      	add	r3, r1
 8003d4e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003d52:	2200      	movs	r2, #0
 8003d54:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003d56:	7bfa      	ldrb	r2, [r7, #15]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003d68:	7bfa      	ldrb	r2, [r7, #15]
 8003d6a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003d6c:	7bfa      	ldrb	r2, [r7, #15]
 8003d6e:	6879      	ldr	r1, [r7, #4]
 8003d70:	4613      	mov	r3, r2
 8003d72:	00db      	lsls	r3, r3, #3
 8003d74:	1a9b      	subs	r3, r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003d82:	7bfa      	ldrb	r2, [r7, #15]
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	4613      	mov	r3, r2
 8003d88:	00db      	lsls	r3, r3, #3
 8003d8a:	1a9b      	subs	r3, r3, r2
 8003d8c:	009b      	lsls	r3, r3, #2
 8003d8e:	440b      	add	r3, r1
 8003d90:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003d98:	7bfa      	ldrb	r2, [r7, #15]
 8003d9a:	6879      	ldr	r1, [r7, #4]
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	1a9b      	subs	r3, r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	440b      	add	r3, r1
 8003da6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003dae:	7bfa      	ldrb	r2, [r7, #15]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	00db      	lsls	r3, r3, #3
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dc4:	7bfb      	ldrb	r3, [r7, #15]
 8003dc6:	3301      	adds	r3, #1
 8003dc8:	73fb      	strb	r3, [r7, #15]
 8003dca:	7bfa      	ldrb	r2, [r7, #15]
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	429a      	cmp	r2, r3
 8003dd2:	d3b5      	bcc.n	8003d40 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	603b      	str	r3, [r7, #0]
 8003dda:	687e      	ldr	r6, [r7, #4]
 8003ddc:	466d      	mov	r5, sp
 8003dde:	f106 0410 	add.w	r4, r6, #16
 8003de2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003de6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003de8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003dea:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003dee:	e885 0003 	stmia.w	r5, {r0, r1}
 8003df2:	1d33      	adds	r3, r6, #4
 8003df4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003df6:	6838      	ldr	r0, [r7, #0]
 8003df8:	f007 fc3c 	bl	800b674 <USB_DevInit>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d005      	beq.n	8003e0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2202      	movs	r2, #2
 8003e06:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e014      	b.n	8003e38 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d102      	bne.n	8003e2c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f001 f8be 	bl	8004fa8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f008 fc7b 	bl	800c72c <USB_DevDisconnect>

  return HAL_OK;
 8003e36:	2300      	movs	r3, #0
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3714      	adds	r7, #20
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003e40 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d101      	bne.n	8003e5c <HAL_PCD_Start+0x1c>
 8003e58:	2302      	movs	r3, #2
 8003e5a:	e020      	b.n	8003e9e <HAL_PCD_Start+0x5e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d109      	bne.n	8003e80 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003e70:	2b01      	cmp	r3, #1
 8003e72:	d005      	beq.n	8003e80 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e78:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 fc39 	bl	800c6fc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f007 fba4 	bl	800b5dc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3710      	adds	r7, #16
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003ea6:	b590      	push	{r4, r7, lr}
 8003ea8:	b08d      	sub	sp, #52	; 0x34
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f008 fce0 	bl	800c882 <USB_GetMode>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	f040 83ca 	bne.w	800465e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4618      	mov	r0, r3
 8003ed0:	f008 fc44 	bl	800c75c <USB_ReadInterrupts>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	f000 83c0 	beq.w	800465c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f008 fc3b 	bl	800c75c <USB_ReadInterrupts>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d107      	bne.n	8003f00 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695a      	ldr	r2, [r3, #20]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f002 0202 	and.w	r2, r2, #2
 8003efe:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f008 fc29 	bl	800c75c <USB_ReadInterrupts>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	f003 0310 	and.w	r3, r3, #16
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d161      	bne.n	8003fd8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699a      	ldr	r2, [r3, #24]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f022 0210 	bic.w	r2, r2, #16
 8003f22:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	f003 020f 	and.w	r2, r3, #15
 8003f30:	4613      	mov	r3, r2
 8003f32:	00db      	lsls	r3, r3, #3
 8003f34:	1a9b      	subs	r3, r3, r2
 8003f36:	009b      	lsls	r3, r3, #2
 8003f38:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	3304      	adds	r3, #4
 8003f42:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003f44:	69bb      	ldr	r3, [r7, #24]
 8003f46:	0c5b      	lsrs	r3, r3, #17
 8003f48:	f003 030f 	and.w	r3, r3, #15
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d124      	bne.n	8003f9a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003f56:	4013      	ands	r3, r2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d035      	beq.n	8003fc8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	091b      	lsrs	r3, r3, #4
 8003f64:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f6a:	b29b      	uxth	r3, r3
 8003f6c:	461a      	mov	r2, r3
 8003f6e:	6a38      	ldr	r0, [r7, #32]
 8003f70:	f008 faa1 	bl	800c4b6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	68da      	ldr	r2, [r3, #12]
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	091b      	lsrs	r3, r3, #4
 8003f7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f80:	441a      	add	r2, r3
 8003f82:	697b      	ldr	r3, [r7, #20]
 8003f84:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	699a      	ldr	r2, [r3, #24]
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f92:	441a      	add	r2, r3
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	619a      	str	r2, [r3, #24]
 8003f98:	e016      	b.n	8003fc8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	0c5b      	lsrs	r3, r3, #17
 8003f9e:	f003 030f 	and.w	r3, r3, #15
 8003fa2:	2b06      	cmp	r3, #6
 8003fa4:	d110      	bne.n	8003fc8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8003fac:	2208      	movs	r2, #8
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6a38      	ldr	r0, [r7, #32]
 8003fb2:	f008 fa80 	bl	800c4b6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003fb6:	697b      	ldr	r3, [r7, #20]
 8003fb8:	699a      	ldr	r2, [r3, #24]
 8003fba:	69bb      	ldr	r3, [r7, #24]
 8003fbc:	091b      	lsrs	r3, r3, #4
 8003fbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003fc2:	441a      	add	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699a      	ldr	r2, [r3, #24]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0210 	orr.w	r2, r2, #16
 8003fd6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f008 fbbd 	bl	800c75c <USB_ReadInterrupts>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fe8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003fec:	d16e      	bne.n	80040cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8003fee:	2300      	movs	r3, #0
 8003ff0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f008 fbc3 	bl	800c782 <USB_ReadDevAllOutEpInterrupt>
 8003ffc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8003ffe:	e062      	b.n	80040c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d057      	beq.n	80040ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	4611      	mov	r1, r2
 8004014:	4618      	mov	r0, r3
 8004016:	f008 fbe8 	bl	800c7ea <USB_ReadDevOutEPInterrupt>
 800401a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00c      	beq.n	8004040 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	461a      	mov	r2, r3
 8004034:	2301      	movs	r3, #1
 8004036:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004038:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 fe0a 	bl	8004c54 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	f003 0308 	and.w	r3, r3, #8
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00c      	beq.n	8004064 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800404a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404c:	015a      	lsls	r2, r3, #5
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	4413      	add	r3, r2
 8004052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004056:	461a      	mov	r2, r3
 8004058:	2308      	movs	r3, #8
 800405a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800405c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 ff04 	bl	8004e6c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	2b00      	cmp	r3, #0
 800406c:	d008      	beq.n	8004080 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800406e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004070:	015a      	lsls	r2, r3, #5
 8004072:	69fb      	ldr	r3, [r7, #28]
 8004074:	4413      	add	r3, r2
 8004076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407a:	461a      	mov	r2, r3
 800407c:	2310      	movs	r3, #16
 800407e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f003 0320 	and.w	r3, r3, #32
 8004086:	2b00      	cmp	r3, #0
 8004088:	d008      	beq.n	800409c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800408a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	69fb      	ldr	r3, [r7, #28]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	461a      	mov	r2, r3
 8004098:	2320      	movs	r3, #32
 800409a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d009      	beq.n	80040ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80040a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040a8:	015a      	lsls	r2, r3, #5
 80040aa:	69fb      	ldr	r3, [r7, #28]
 80040ac:	4413      	add	r3, r2
 80040ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b2:	461a      	mov	r2, r3
 80040b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80040b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	3301      	adds	r3, #1
 80040be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80040c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c2:	085b      	lsrs	r3, r3, #1
 80040c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d199      	bne.n	8004000 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f008 fb43 	bl	800c75c <USB_ReadInterrupts>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	f040 80c0 	bne.w	8004264 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4618      	mov	r0, r3
 80040ea:	f008 fb64 	bl	800c7b6 <USB_ReadDevAllInEpInterrupt>
 80040ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80040f0:	2300      	movs	r3, #0
 80040f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80040f4:	e0b2      	b.n	800425c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80040f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040f8:	f003 0301 	and.w	r3, r3, #1
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	f000 80a7 	beq.w	8004250 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	4611      	mov	r1, r2
 800410c:	4618      	mov	r0, r3
 800410e:	f008 fb8a 	bl	800c826 <USB_ReadDevInEPInterrupt>
 8004112:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d057      	beq.n	80041ce <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800411e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004120:	f003 030f 	and.w	r3, r3, #15
 8004124:	2201      	movs	r2, #1
 8004126:	fa02 f303 	lsl.w	r3, r2, r3
 800412a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	43db      	mvns	r3, r3
 8004138:	69f9      	ldr	r1, [r7, #28]
 800413a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800413e:	4013      	ands	r3, r2
 8004140:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	015a      	lsls	r2, r3, #5
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	4413      	add	r3, r2
 800414a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414e:	461a      	mov	r2, r3
 8004150:	2301      	movs	r3, #1
 8004152:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	691b      	ldr	r3, [r3, #16]
 8004158:	2b01      	cmp	r3, #1
 800415a:	d132      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800415c:	6879      	ldr	r1, [r7, #4]
 800415e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004160:	4613      	mov	r3, r2
 8004162:	00db      	lsls	r3, r3, #3
 8004164:	1a9b      	subs	r3, r3, r2
 8004166:	009b      	lsls	r3, r3, #2
 8004168:	440b      	add	r3, r1
 800416a:	3348      	adds	r3, #72	; 0x48
 800416c:	6819      	ldr	r1, [r3, #0]
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004172:	4613      	mov	r3, r2
 8004174:	00db      	lsls	r3, r3, #3
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	4403      	add	r3, r0
 800417c:	3344      	adds	r3, #68	; 0x44
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4419      	add	r1, r3
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004186:	4613      	mov	r3, r2
 8004188:	00db      	lsls	r3, r3, #3
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	4403      	add	r3, r0
 8004190:	3348      	adds	r3, #72	; 0x48
 8004192:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	2b00      	cmp	r3, #0
 8004198:	d113      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x31c>
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800419e:	4613      	mov	r3, r2
 80041a0:	00db      	lsls	r3, r3, #3
 80041a2:	1a9b      	subs	r3, r3, r2
 80041a4:	009b      	lsls	r3, r3, #2
 80041a6:	440b      	add	r3, r1
 80041a8:	3350      	adds	r3, #80	; 0x50
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d108      	bne.n	80041c2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6818      	ldr	r0, [r3, #0]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80041ba:	461a      	mov	r2, r3
 80041bc:	2101      	movs	r1, #1
 80041be:	f008 fb93 	bl	800c8e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80041c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c4:	b2db      	uxtb	r3, r3
 80041c6:	4619      	mov	r1, r3
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f00b fdaa 	bl	800fd22 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f003 0308 	and.w	r3, r3, #8
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	015a      	lsls	r2, r3, #5
 80041dc:	69fb      	ldr	r3, [r7, #28]
 80041de:	4413      	add	r3, r2
 80041e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041e4:	461a      	mov	r2, r3
 80041e6:	2308      	movs	r3, #8
 80041e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80041ea:	693b      	ldr	r3, [r7, #16]
 80041ec:	f003 0310 	and.w	r3, r3, #16
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d008      	beq.n	8004206 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80041f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f6:	015a      	lsls	r2, r3, #5
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	4413      	add	r3, r2
 80041fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004200:	461a      	mov	r2, r3
 8004202:	2310      	movs	r3, #16
 8004204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d008      	beq.n	8004222 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004212:	015a      	lsls	r2, r3, #5
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	4413      	add	r3, r2
 8004218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800421c:	461a      	mov	r2, r3
 800421e:	2340      	movs	r3, #64	; 0x40
 8004220:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	f003 0302 	and.w	r3, r3, #2
 8004228:	2b00      	cmp	r3, #0
 800422a:	d008      	beq.n	800423e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	015a      	lsls	r2, r3, #5
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	4413      	add	r3, r2
 8004234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004238:	461a      	mov	r2, r3
 800423a:	2302      	movs	r3, #2
 800423c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004244:	2b00      	cmp	r3, #0
 8004246:	d003      	beq.n	8004250 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004248:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	f000 fc75 	bl	8004b3a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	3301      	adds	r3, #1
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004258:	085b      	lsrs	r3, r3, #1
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	f47f af49 	bne.w	80040f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4618      	mov	r0, r3
 800426a:	f008 fa77 	bl	800c75c <USB_ReadInterrupts>
 800426e:	4603      	mov	r3, r0
 8004270:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004274:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004278:	d122      	bne.n	80042c0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	69fa      	ldr	r2, [r7, #28]
 8004284:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004288:	f023 0301 	bic.w	r3, r3, #1
 800428c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004294:	2b01      	cmp	r3, #1
 8004296:	d108      	bne.n	80042aa <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 fea4 	bl	8004ff0 <HAL_PCDEx_LPM_Callback>
 80042a8:	e002      	b.n	80042b0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f00b fdb0 	bl	800fe10 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	695a      	ldr	r2, [r3, #20]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80042be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f008 fa49 	bl	800c75c <USB_ReadInterrupts>
 80042ca:	4603      	mov	r3, r0
 80042cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042d4:	d112      	bne.n	80042fc <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d102      	bne.n	80042ec <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f00b fd6c 	bl	800fdc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	695a      	ldr	r2, [r3, #20]
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80042fa:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4618      	mov	r0, r3
 8004302:	f008 fa2b 	bl	800c75c <USB_ReadInterrupts>
 8004306:	4603      	mov	r3, r0
 8004308:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800430c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004310:	d121      	bne.n	8004356 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	695a      	ldr	r2, [r3, #20]
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8004320:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8004328:	2b00      	cmp	r3, #0
 800432a:	d111      	bne.n	8004350 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433a:	089b      	lsrs	r3, r3, #2
 800433c:	f003 020f 	and.w	r2, r3, #15
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8004346:	2101      	movs	r1, #1
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 fe51 	bl	8004ff0 <HAL_PCDEx_LPM_Callback>
 800434e:	e002      	b.n	8004356 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f00b fd37 	bl	800fdc4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f008 f9fe 	bl	800c75c <USB_ReadInterrupts>
 8004360:	4603      	mov	r3, r0
 8004362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800436a:	f040 80c7 	bne.w	80044fc <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800436e:	69fb      	ldr	r3, [r7, #28]
 8004370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	69fa      	ldr	r2, [r7, #28]
 8004378:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800437c:	f023 0301 	bic.w	r3, r3, #1
 8004380:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	2110      	movs	r1, #16
 8004388:	4618      	mov	r0, r3
 800438a:	f007 fad1 	bl	800b930 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800438e:	2300      	movs	r3, #0
 8004390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004392:	e056      	b.n	8004442 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	015a      	lsls	r2, r3, #5
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	4413      	add	r3, r2
 800439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043a0:	461a      	mov	r2, r3
 80043a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043a6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80043a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b8:	0151      	lsls	r1, r2, #5
 80043ba:	69fa      	ldr	r2, [r7, #28]
 80043bc:	440a      	add	r2, r1
 80043be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043c6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80043c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ca:	015a      	lsls	r2, r3, #5
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	4413      	add	r3, r2
 80043d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043d8:	0151      	lsls	r1, r2, #5
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	440a      	add	r2, r1
 80043de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80043e6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80043e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043ea:	015a      	lsls	r2, r3, #5
 80043ec:	69fb      	ldr	r3, [r7, #28]
 80043ee:	4413      	add	r3, r2
 80043f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043f4:	461a      	mov	r2, r3
 80043f6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80043fa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80043fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800440c:	0151      	lsls	r1, r2, #5
 800440e:	69fa      	ldr	r2, [r7, #28]
 8004410:	440a      	add	r2, r1
 8004412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004416:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800441a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800441e:	015a      	lsls	r2, r3, #5
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	4413      	add	r3, r2
 8004424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800442c:	0151      	lsls	r1, r2, #5
 800442e:	69fa      	ldr	r2, [r7, #28]
 8004430:	440a      	add	r2, r1
 8004432:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004436:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800443a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800443e:	3301      	adds	r3, #1
 8004440:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004448:	429a      	cmp	r2, r3
 800444a:	d3a3      	bcc.n	8004394 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004452:	69db      	ldr	r3, [r3, #28]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800445a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800445e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	2b00      	cmp	r3, #0
 8004466:	d016      	beq.n	8004496 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800446e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004472:	69fa      	ldr	r2, [r7, #28]
 8004474:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004478:	f043 030b 	orr.w	r3, r3, #11
 800447c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004488:	69fa      	ldr	r2, [r7, #28]
 800448a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800448e:	f043 030b 	orr.w	r3, r3, #11
 8004492:	6453      	str	r3, [r2, #68]	; 0x44
 8004494:	e015      	b.n	80044c2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800449c:	695a      	ldr	r2, [r3, #20]
 800449e:	69fb      	ldr	r3, [r7, #28]
 80044a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a4:	4619      	mov	r1, r3
 80044a6:	f242 032b 	movw	r3, #8235	; 0x202b
 80044aa:	4313      	orrs	r3, r2
 80044ac:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044bc:	f043 030b 	orr.w	r3, r3, #11
 80044c0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	69fa      	ldr	r2, [r7, #28]
 80044cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80044d0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80044d4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	691b      	ldr	r3, [r3, #16]
 80044de:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80044e6:	461a      	mov	r2, r3
 80044e8:	f008 f9fe 	bl	800c8e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	695a      	ldr	r2, [r3, #20]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80044fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f008 f92b 	bl	800c75c <USB_ReadInterrupts>
 8004506:	4603      	mov	r3, r0
 8004508:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800450c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004510:	d124      	bne.n	800455c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f008 f9c2 	bl	800c8a0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4618      	mov	r0, r3
 8004522:	f007 fa66 	bl	800b9f2 <USB_GetDevSpeed>
 8004526:	4603      	mov	r3, r0
 8004528:	461a      	mov	r2, r3
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681c      	ldr	r4, [r3, #0]
 8004532:	f001 fceb 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8004536:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800453c:	b2db      	uxtb	r3, r3
 800453e:	461a      	mov	r2, r3
 8004540:	4620      	mov	r0, r4
 8004542:	f006 ffa9 	bl	800b498 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f00b fc13 	bl	800fd72 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	695a      	ldr	r2, [r3, #20]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800455a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f008 f8fb 	bl	800c75c <USB_ReadInterrupts>
 8004566:	4603      	mov	r3, r0
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b08      	cmp	r3, #8
 800456e:	d10a      	bne.n	8004586 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f00b fbf0 	bl	800fd56 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	695a      	ldr	r2, [r3, #20]
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f002 0208 	and.w	r2, r2, #8
 8004584:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f008 f8e6 	bl	800c75c <USB_ReadInterrupts>
 8004590:	4603      	mov	r3, r0
 8004592:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004596:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459a:	d10f      	bne.n	80045bc <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 800459c:	2300      	movs	r3, #0
 800459e:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	4619      	mov	r1, r3
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f00b fc52 	bl	800fe50 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	695a      	ldr	r2, [r3, #20]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80045ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f008 f8cb 	bl	800c75c <USB_ReadInterrupts>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045cc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045d0:	d10f      	bne.n	80045f2 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80045d2:	2300      	movs	r3, #0
 80045d4:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80045d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	4619      	mov	r1, r3
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f00b fc25 	bl	800fe2c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80045f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f008 f8b0 	bl	800c75c <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004602:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004606:	d10a      	bne.n	800461e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f00b fc33 	bl	800fe74 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	695a      	ldr	r2, [r3, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800461c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4618      	mov	r0, r3
 8004624:	f008 f89a 	bl	800c75c <USB_ReadInterrupts>
 8004628:	4603      	mov	r3, r0
 800462a:	f003 0304 	and.w	r3, r3, #4
 800462e:	2b04      	cmp	r3, #4
 8004630:	d115      	bne.n	800465e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d002      	beq.n	800464a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	f00b fc23 	bl	800fe90 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6859      	ldr	r1, [r3, #4]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	69ba      	ldr	r2, [r7, #24]
 8004656:	430a      	orrs	r2, r1
 8004658:	605a      	str	r2, [r3, #4]
 800465a:	e000      	b.n	800465e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800465c:	bf00      	nop
    }
  }
}
 800465e:	3734      	adds	r7, #52	; 0x34
 8004660:	46bd      	mov	sp, r7
 8004662:	bd90      	pop	{r4, r7, pc}

08004664 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	460b      	mov	r3, r1
 800466e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004676:	2b01      	cmp	r3, #1
 8004678:	d101      	bne.n	800467e <HAL_PCD_SetAddress+0x1a>
 800467a:	2302      	movs	r3, #2
 800467c:	e013      	b.n	80046a6 <HAL_PCD_SetAddress+0x42>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	78fa      	ldrb	r2, [r7, #3]
 800468a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	78fa      	ldrb	r2, [r7, #3]
 8004694:	4611      	mov	r1, r2
 8004696:	4618      	mov	r0, r3
 8004698:	f008 f80a 	bl	800c6b0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2200      	movs	r2, #0
 80046a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}

080046ae <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b084      	sub	sp, #16
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	4608      	mov	r0, r1
 80046b8:	4611      	mov	r1, r2
 80046ba:	461a      	mov	r2, r3
 80046bc:	4603      	mov	r3, r0
 80046be:	70fb      	strb	r3, [r7, #3]
 80046c0:	460b      	mov	r3, r1
 80046c2:	803b      	strh	r3, [r7, #0]
 80046c4:	4613      	mov	r3, r2
 80046c6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80046cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	da0f      	bge.n	80046f4 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	f003 020f 	and.w	r2, r3, #15
 80046da:	4613      	mov	r3, r2
 80046dc:	00db      	lsls	r3, r3, #3
 80046de:	1a9b      	subs	r3, r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	3338      	adds	r3, #56	; 0x38
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	4413      	add	r3, r2
 80046e8:	3304      	adds	r3, #4
 80046ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2201      	movs	r2, #1
 80046f0:	705a      	strb	r2, [r3, #1]
 80046f2:	e00f      	b.n	8004714 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	f003 020f 	and.w	r2, r3, #15
 80046fa:	4613      	mov	r3, r2
 80046fc:	00db      	lsls	r3, r3, #3
 80046fe:	1a9b      	subs	r3, r3, r2
 8004700:	009b      	lsls	r3, r3, #2
 8004702:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2200      	movs	r2, #0
 8004712:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004714:	78fb      	ldrb	r3, [r7, #3]
 8004716:	f003 030f 	and.w	r3, r3, #15
 800471a:	b2da      	uxtb	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004720:	883a      	ldrh	r2, [r7, #0]
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	78ba      	ldrb	r2, [r7, #2]
 800472a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	785b      	ldrb	r3, [r3, #1]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d004      	beq.n	800473e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	b29a      	uxth	r2, r3
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800473e:	78bb      	ldrb	r3, [r7, #2]
 8004740:	2b02      	cmp	r3, #2
 8004742:	d102      	bne.n	800474a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2200      	movs	r2, #0
 8004748:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004750:	2b01      	cmp	r3, #1
 8004752:	d101      	bne.n	8004758 <HAL_PCD_EP_Open+0xaa>
 8004754:	2302      	movs	r3, #2
 8004756:	e00e      	b.n	8004776 <HAL_PCD_EP_Open+0xc8>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2201      	movs	r2, #1
 800475c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68f9      	ldr	r1, [r7, #12]
 8004766:	4618      	mov	r0, r3
 8004768:	f007 f968 	bl	800ba3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8004774:	7afb      	ldrb	r3, [r7, #11]
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800477e:	b580      	push	{r7, lr}
 8004780:	b084      	sub	sp, #16
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
 8004786:	460b      	mov	r3, r1
 8004788:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800478a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800478e:	2b00      	cmp	r3, #0
 8004790:	da0f      	bge.n	80047b2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	f003 020f 	and.w	r2, r3, #15
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	1a9b      	subs	r3, r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	3338      	adds	r3, #56	; 0x38
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	4413      	add	r3, r2
 80047a6:	3304      	adds	r3, #4
 80047a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	705a      	strb	r2, [r3, #1]
 80047b0:	e00f      	b.n	80047d2 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80047b2:	78fb      	ldrb	r3, [r7, #3]
 80047b4:	f003 020f 	and.w	r2, r3, #15
 80047b8:	4613      	mov	r3, r2
 80047ba:	00db      	lsls	r3, r3, #3
 80047bc:	1a9b      	subs	r3, r3, r2
 80047be:	009b      	lsls	r3, r3, #2
 80047c0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	4413      	add	r3, r2
 80047c8:	3304      	adds	r3, #4
 80047ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80047d2:	78fb      	ldrb	r3, [r7, #3]
 80047d4:	f003 030f 	and.w	r3, r3, #15
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d101      	bne.n	80047ec <HAL_PCD_EP_Close+0x6e>
 80047e8:	2302      	movs	r3, #2
 80047ea:	e00e      	b.n	800480a <HAL_PCD_EP_Close+0x8c>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f007 f9a6 	bl	800bb4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8004808:	2300      	movs	r3, #0
}
 800480a:	4618      	mov	r0, r3
 800480c:	3710      	adds	r7, #16
 800480e:	46bd      	mov	sp, r7
 8004810:	bd80      	pop	{r7, pc}

08004812 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004812:	b580      	push	{r7, lr}
 8004814:	b086      	sub	sp, #24
 8004816:	af00      	add	r7, sp, #0
 8004818:	60f8      	str	r0, [r7, #12]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	460b      	mov	r3, r1
 8004820:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004822:	7afb      	ldrb	r3, [r7, #11]
 8004824:	f003 020f 	and.w	r2, r3, #15
 8004828:	4613      	mov	r3, r2
 800482a:	00db      	lsls	r3, r3, #3
 800482c:	1a9b      	subs	r3, r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004834:	68fa      	ldr	r2, [r7, #12]
 8004836:	4413      	add	r3, r2
 8004838:	3304      	adds	r3, #4
 800483a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	683a      	ldr	r2, [r7, #0]
 8004846:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	2200      	movs	r2, #0
 800484c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2200      	movs	r2, #0
 8004852:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004854:	7afb      	ldrb	r3, [r7, #11]
 8004856:	f003 030f 	and.w	r3, r3, #15
 800485a:	b2da      	uxtb	r2, r3
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	2b01      	cmp	r3, #1
 8004866:	d102      	bne.n	800486e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004868:	687a      	ldr	r2, [r7, #4]
 800486a:	697b      	ldr	r3, [r7, #20]
 800486c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800486e:	7afb      	ldrb	r3, [r7, #11]
 8004870:	f003 030f 	and.w	r3, r3, #15
 8004874:	2b00      	cmp	r3, #0
 8004876:	d109      	bne.n	800488c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	6818      	ldr	r0, [r3, #0]
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	691b      	ldr	r3, [r3, #16]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	461a      	mov	r2, r3
 8004884:	6979      	ldr	r1, [r7, #20]
 8004886:	f007 fc89 	bl	800c19c <USB_EP0StartXfer>
 800488a:	e008      	b.n	800489e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	6818      	ldr	r0, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	b2db      	uxtb	r3, r3
 8004896:	461a      	mov	r2, r3
 8004898:	6979      	ldr	r1, [r7, #20]
 800489a:	f007 fa33 	bl	800bd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	3718      	adds	r7, #24
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}

080048a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b083      	sub	sp, #12
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80048b4:	78fb      	ldrb	r3, [r7, #3]
 80048b6:	f003 020f 	and.w	r2, r3, #15
 80048ba:	6879      	ldr	r1, [r7, #4]
 80048bc:	4613      	mov	r3, r2
 80048be:	00db      	lsls	r3, r3, #3
 80048c0:	1a9b      	subs	r3, r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	440b      	add	r3, r1
 80048c6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80048ca:	681b      	ldr	r3, [r3, #0]
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	370c      	adds	r7, #12
 80048d0:	46bd      	mov	sp, r7
 80048d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d6:	4770      	bx	lr

080048d8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b086      	sub	sp, #24
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80048e8:	7afb      	ldrb	r3, [r7, #11]
 80048ea:	f003 020f 	and.w	r2, r3, #15
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	1a9b      	subs	r3, r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	3338      	adds	r3, #56	; 0x38
 80048f8:	68fa      	ldr	r2, [r7, #12]
 80048fa:	4413      	add	r3, r2
 80048fc:	3304      	adds	r3, #4
 80048fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	683a      	ldr	r2, [r7, #0]
 800490a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2201      	movs	r2, #1
 8004916:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004918:	7afb      	ldrb	r3, [r7, #11]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	b2da      	uxtb	r2, r3
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d102      	bne.n	8004932 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800492c:	687a      	ldr	r2, [r7, #4]
 800492e:	697b      	ldr	r3, [r7, #20]
 8004930:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004932:	7afb      	ldrb	r3, [r7, #11]
 8004934:	f003 030f 	and.w	r3, r3, #15
 8004938:	2b00      	cmp	r3, #0
 800493a:	d109      	bne.n	8004950 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6818      	ldr	r0, [r3, #0]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	691b      	ldr	r3, [r3, #16]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	461a      	mov	r2, r3
 8004948:	6979      	ldr	r1, [r7, #20]
 800494a:	f007 fc27 	bl	800c19c <USB_EP0StartXfer>
 800494e:	e008      	b.n	8004962 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6818      	ldr	r0, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	691b      	ldr	r3, [r3, #16]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	461a      	mov	r2, r3
 800495c:	6979      	ldr	r1, [r7, #20]
 800495e:	f007 f9d1 	bl	800bd04 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004962:	2300      	movs	r3, #0
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}

0800496c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b084      	sub	sp, #16
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
 8004974:	460b      	mov	r3, r1
 8004976:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004978:	78fb      	ldrb	r3, [r7, #3]
 800497a:	f003 020f 	and.w	r2, r3, #15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	429a      	cmp	r2, r3
 8004984:	d901      	bls.n	800498a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e050      	b.n	8004a2c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800498a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800498e:	2b00      	cmp	r3, #0
 8004990:	da0f      	bge.n	80049b2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004992:	78fb      	ldrb	r3, [r7, #3]
 8004994:	f003 020f 	and.w	r2, r3, #15
 8004998:	4613      	mov	r3, r2
 800499a:	00db      	lsls	r3, r3, #3
 800499c:	1a9b      	subs	r3, r3, r2
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	3338      	adds	r3, #56	; 0x38
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	3304      	adds	r3, #4
 80049a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	705a      	strb	r2, [r3, #1]
 80049b0:	e00d      	b.n	80049ce <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80049b2:	78fa      	ldrb	r2, [r7, #3]
 80049b4:	4613      	mov	r3, r2
 80049b6:	00db      	lsls	r3, r3, #3
 80049b8:	1a9b      	subs	r3, r3, r2
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	4413      	add	r3, r2
 80049c4:	3304      	adds	r3, #4
 80049c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2201      	movs	r2, #1
 80049d2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80049d4:	78fb      	ldrb	r3, [r7, #3]
 80049d6:	f003 030f 	and.w	r3, r3, #15
 80049da:	b2da      	uxtb	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d101      	bne.n	80049ee <HAL_PCD_EP_SetStall+0x82>
 80049ea:	2302      	movs	r3, #2
 80049ec:	e01e      	b.n	8004a2c <HAL_PCD_EP_SetStall+0xc0>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2201      	movs	r2, #1
 80049f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68f9      	ldr	r1, [r7, #12]
 80049fc:	4618      	mov	r0, r3
 80049fe:	f007 fd83 	bl	800c508 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004a02:	78fb      	ldrb	r3, [r7, #3]
 8004a04:	f003 030f 	and.w	r3, r3, #15
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10a      	bne.n	8004a22 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6818      	ldr	r0, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	b2d9      	uxtb	r1, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	f007 ff63 	bl	800c8e8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3710      	adds	r7, #16
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004a40:	78fb      	ldrb	r3, [r7, #3]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d901      	bls.n	8004a52 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e042      	b.n	8004ad8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004a52:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	da0f      	bge.n	8004a7a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004a5a:	78fb      	ldrb	r3, [r7, #3]
 8004a5c:	f003 020f 	and.w	r2, r3, #15
 8004a60:	4613      	mov	r3, r2
 8004a62:	00db      	lsls	r3, r3, #3
 8004a64:	1a9b      	subs	r3, r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	3338      	adds	r3, #56	; 0x38
 8004a6a:	687a      	ldr	r2, [r7, #4]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	3304      	adds	r3, #4
 8004a70:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2201      	movs	r2, #1
 8004a76:	705a      	strb	r2, [r3, #1]
 8004a78:	e00f      	b.n	8004a9a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004a7a:	78fb      	ldrb	r3, [r7, #3]
 8004a7c:	f003 020f 	and.w	r2, r3, #15
 8004a80:	4613      	mov	r3, r2
 8004a82:	00db      	lsls	r3, r3, #3
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	009b      	lsls	r3, r3, #2
 8004a88:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8004a8c:	687a      	ldr	r2, [r7, #4]
 8004a8e:	4413      	add	r3, r2
 8004a90:	3304      	adds	r3, #4
 8004a92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2200      	movs	r2, #0
 8004a98:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004aa0:	78fb      	ldrb	r3, [r7, #3]
 8004aa2:	f003 030f 	and.w	r3, r3, #15
 8004aa6:	b2da      	uxtb	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d101      	bne.n	8004aba <HAL_PCD_EP_ClrStall+0x86>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	e00e      	b.n	8004ad8 <HAL_PCD_EP_ClrStall+0xa4>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	68f9      	ldr	r1, [r7, #12]
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f007 fd8b 	bl	800c5e4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3710      	adds	r7, #16
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}

08004ae0 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b082      	sub	sp, #8
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8004af2:	2b01      	cmp	r3, #1
 8004af4:	d101      	bne.n	8004afa <HAL_PCD_EP_Flush+0x1a>
 8004af6:	2302      	movs	r3, #2
 8004af8:	e01b      	b.n	8004b32 <HAL_PCD_EP_Flush+0x52>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2201      	movs	r2, #1
 8004afe:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8004b02:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	da09      	bge.n	8004b1e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	78fb      	ldrb	r3, [r7, #3]
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	4619      	mov	r1, r3
 8004b16:	4610      	mov	r0, r2
 8004b18:	f006 ff0a 	bl	800b930 <USB_FlushTxFifo>
 8004b1c:	e004      	b.n	8004b28 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4618      	mov	r0, r3
 8004b24:	f006 ff2a 	bl	800b97c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b08a      	sub	sp, #40	; 0x28
 8004b3e:	af02      	add	r7, sp, #8
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004b4e:	683a      	ldr	r2, [r7, #0]
 8004b50:	4613      	mov	r3, r2
 8004b52:	00db      	lsls	r3, r3, #3
 8004b54:	1a9b      	subs	r3, r3, r2
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	3338      	adds	r3, #56	; 0x38
 8004b5a:	687a      	ldr	r2, [r7, #4]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	3304      	adds	r3, #4
 8004b60:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	695b      	ldr	r3, [r3, #20]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d901      	bls.n	8004b72 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e06c      	b.n	8004c4c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	695a      	ldr	r2, [r3, #20]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	689b      	ldr	r3, [r3, #8]
 8004b82:	69fa      	ldr	r2, [r7, #28]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d902      	bls.n	8004b8e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004b8e:	69fb      	ldr	r3, [r7, #28]
 8004b90:	3303      	adds	r3, #3
 8004b92:	089b      	lsrs	r3, r3, #2
 8004b94:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004b96:	e02b      	b.n	8004bf0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	695a      	ldr	r2, [r3, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	699b      	ldr	r3, [r3, #24]
 8004ba0:	1ad3      	subs	r3, r2, r3
 8004ba2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	69fa      	ldr	r2, [r7, #28]
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d902      	bls.n	8004bb4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	3303      	adds	r3, #3
 8004bb8:	089b      	lsrs	r3, r3, #2
 8004bba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	68d9      	ldr	r1, [r3, #12]
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	b2da      	uxtb	r2, r3
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004bcc:	b2db      	uxtb	r3, r3
 8004bce:	9300      	str	r3, [sp, #0]
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	6978      	ldr	r0, [r7, #20]
 8004bd4:	f007 fc3a 	bl	800c44c <USB_WritePacket>

    ep->xfer_buff  += len;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	441a      	add	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	699a      	ldr	r2, [r3, #24]
 8004be8:	69fb      	ldr	r3, [r7, #28]
 8004bea:	441a      	add	r2, r3
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	699b      	ldr	r3, [r3, #24]
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	69ba      	ldr	r2, [r7, #24]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d809      	bhi.n	8004c1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	699a      	ldr	r2, [r3, #24]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	d203      	bcs.n	8004c1a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1be      	bne.n	8004b98 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	695a      	ldr	r2, [r3, #20]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	699b      	ldr	r3, [r3, #24]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d811      	bhi.n	8004c4a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	f003 030f 	and.w	r3, r3, #15
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c32:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004c34:	693b      	ldr	r3, [r7, #16]
 8004c36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	43db      	mvns	r3, r3
 8004c40:	6939      	ldr	r1, [r7, #16]
 8004c42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c46:	4013      	ands	r3, r2
 8004c48:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004c4a:	2300      	movs	r3, #0
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
 8004c5c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	333c      	adds	r3, #60	; 0x3c
 8004c6c:	3304      	adds	r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	691b      	ldr	r3, [r3, #16]
 8004c86:	2b01      	cmp	r3, #1
 8004c88:	f040 80a0 	bne.w	8004dcc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	f003 0308 	and.w	r3, r3, #8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d015      	beq.n	8004cc2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a72      	ldr	r2, [pc, #456]	; (8004e64 <PCD_EP_OutXfrComplete_int+0x210>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f240 80dd 	bls.w	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	f000 80d7 	beq.w	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	015a      	lsls	r2, r3, #5
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	4413      	add	r3, r2
 8004cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb8:	461a      	mov	r2, r3
 8004cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cbe:	6093      	str	r3, [r2, #8]
 8004cc0:	e0cb      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	f003 0320 	and.w	r3, r3, #32
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d009      	beq.n	8004ce0 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd8:	461a      	mov	r2, r3
 8004cda:	2320      	movs	r3, #32
 8004cdc:	6093      	str	r3, [r2, #8]
 8004cde:	e0bc      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	f040 80b7 	bne.w	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	4a5d      	ldr	r2, [pc, #372]	; (8004e64 <PCD_EP_OutXfrComplete_int+0x210>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d90f      	bls.n	8004d14 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00a      	beq.n	8004d14 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004cfe:	683b      	ldr	r3, [r7, #0]
 8004d00:	015a      	lsls	r2, r3, #5
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	4413      	add	r3, r2
 8004d06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d10:	6093      	str	r3, [r2, #8]
 8004d12:	e0a2      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8004d14:	6879      	ldr	r1, [r7, #4]
 8004d16:	683a      	ldr	r2, [r7, #0]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	1a9b      	subs	r3, r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d26:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	0159      	lsls	r1, r3, #5
 8004d2c:	693b      	ldr	r3, [r7, #16]
 8004d2e:	440b      	add	r3, r1
 8004d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d34:	691b      	ldr	r3, [r3, #16]
 8004d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8004d3a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8004d3c:	6878      	ldr	r0, [r7, #4]
 8004d3e:	683a      	ldr	r2, [r7, #0]
 8004d40:	4613      	mov	r3, r2
 8004d42:	00db      	lsls	r3, r3, #3
 8004d44:	1a9b      	subs	r3, r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4403      	add	r3, r0
 8004d4a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8004d4e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8004d50:	6879      	ldr	r1, [r7, #4]
 8004d52:	683a      	ldr	r2, [r7, #0]
 8004d54:	4613      	mov	r3, r2
 8004d56:	00db      	lsls	r3, r3, #3
 8004d58:	1a9b      	subs	r3, r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	440b      	add	r3, r1
 8004d5e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d62:	6819      	ldr	r1, [r3, #0]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	683a      	ldr	r2, [r7, #0]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	00db      	lsls	r3, r3, #3
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4403      	add	r3, r0
 8004d72:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4419      	add	r1, r3
 8004d7a:	6878      	ldr	r0, [r7, #4]
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4403      	add	r3, r0
 8004d88:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004d8c:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d114      	bne.n	8004dbe <PCD_EP_OutXfrComplete_int+0x16a>
 8004d94:	6879      	ldr	r1, [r7, #4]
 8004d96:	683a      	ldr	r2, [r7, #0]
 8004d98:	4613      	mov	r3, r2
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	1a9b      	subs	r3, r3, r2
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	440b      	add	r3, r1
 8004da2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d108      	bne.n	8004dbe <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6818      	ldr	r0, [r3, #0]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004db6:	461a      	mov	r2, r3
 8004db8:	2101      	movs	r1, #1
 8004dba:	f007 fd95 	bl	800c8e8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	b2db      	uxtb	r3, r3
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f00a ff91 	bl	800fcec <HAL_PCD_DataOutStageCallback>
 8004dca:	e046      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	4a26      	ldr	r2, [pc, #152]	; (8004e68 <PCD_EP_OutXfrComplete_int+0x214>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d124      	bne.n	8004e1e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	015a      	lsls	r2, r3, #5
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	4413      	add	r3, r2
 8004de6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dea:	461a      	mov	r2, r3
 8004dec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df0:	6093      	str	r3, [r2, #8]
 8004df2:	e032      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d008      	beq.n	8004e10 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	2320      	movs	r3, #32
 8004e0e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	b2db      	uxtb	r3, r3
 8004e14:	4619      	mov	r1, r3
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f00a ff68 	bl	800fcec <HAL_PCD_DataOutStageCallback>
 8004e1c:	e01d      	b.n	8004e5a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004e1e:	683b      	ldr	r3, [r7, #0]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d114      	bne.n	8004e4e <PCD_EP_OutXfrComplete_int+0x1fa>
 8004e24:	6879      	ldr	r1, [r7, #4]
 8004e26:	683a      	ldr	r2, [r7, #0]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	1a9b      	subs	r3, r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	440b      	add	r3, r1
 8004e32:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d108      	bne.n	8004e4e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6818      	ldr	r0, [r3, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004e46:	461a      	mov	r2, r3
 8004e48:	2100      	movs	r1, #0
 8004e4a:	f007 fd4d 	bl	800c8e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	b2db      	uxtb	r3, r3
 8004e52:	4619      	mov	r1, r3
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f00a ff49 	bl	800fcec <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	4f54300a 	.word	0x4f54300a
 8004e68:	4f54310a 	.word	0x4f54310a

08004e6c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b086      	sub	sp, #24
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
 8004e74:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	333c      	adds	r3, #60	; 0x3c
 8004e84:	3304      	adds	r3, #4
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e96:	689b      	ldr	r3, [r3, #8]
 8004e98:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a15      	ldr	r2, [pc, #84]	; (8004ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d90e      	bls.n	8004ec0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d009      	beq.n	8004ec0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	015a      	lsls	r2, r3, #5
 8004eb0:	693b      	ldr	r3, [r7, #16]
 8004eb2:	4413      	add	r3, r2
 8004eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004ebe:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004ec0:	6878      	ldr	r0, [r7, #4]
 8004ec2:	f00a ff01 	bl	800fcc8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a0a      	ldr	r2, [pc, #40]	; (8004ef4 <PCD_EP_OutSetupPacket_int+0x88>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d90c      	bls.n	8004ee8 <PCD_EP_OutSetupPacket_int+0x7c>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	691b      	ldr	r3, [r3, #16]
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d108      	bne.n	8004ee8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6818      	ldr	r0, [r3, #0]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	f007 fd00 	bl	800c8e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	4f54300a 	.word	0x4f54300a

08004ef8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	460b      	mov	r3, r1
 8004f02:	70fb      	strb	r3, [r7, #3]
 8004f04:	4613      	mov	r3, r2
 8004f06:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004f10:	78fb      	ldrb	r3, [r7, #3]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d107      	bne.n	8004f26 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004f16:	883b      	ldrh	r3, [r7, #0]
 8004f18:	0419      	lsls	r1, r3, #16
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	68ba      	ldr	r2, [r7, #8]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	629a      	str	r2, [r3, #40]	; 0x28
 8004f24:	e028      	b.n	8004f78 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f2c:	0c1b      	lsrs	r3, r3, #16
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f34:	2300      	movs	r3, #0
 8004f36:	73fb      	strb	r3, [r7, #15]
 8004f38:	e00d      	b.n	8004f56 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	7bfb      	ldrb	r3, [r7, #15]
 8004f40:	3340      	adds	r3, #64	; 0x40
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4413      	add	r3, r2
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	0c1b      	lsrs	r3, r3, #16
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	4413      	add	r3, r2
 8004f4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
 8004f52:	3301      	adds	r3, #1
 8004f54:	73fb      	strb	r3, [r7, #15]
 8004f56:	7bfa      	ldrb	r2, [r7, #15]
 8004f58:	78fb      	ldrb	r3, [r7, #3]
 8004f5a:	3b01      	subs	r3, #1
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d3ec      	bcc.n	8004f3a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004f60:	883b      	ldrh	r3, [r7, #0]
 8004f62:	0418      	lsls	r0, r3, #16
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6819      	ldr	r1, [r3, #0]
 8004f68:	78fb      	ldrb	r3, [r7, #3]
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	4302      	orrs	r2, r0
 8004f70:	3340      	adds	r3, #64	; 0x40
 8004f72:	009b      	lsls	r3, r3, #2
 8004f74:	440b      	add	r3, r1
 8004f76:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004f78:	2300      	movs	r3, #0
}
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	3714      	adds	r7, #20
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
 8004f8e:	460b      	mov	r3, r1
 8004f90:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	887a      	ldrh	r2, [r7, #2]
 8004f98:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004f9a:	2300      	movs	r3, #0
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	370c      	adds	r7, #12
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr

08004fa8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004fa8:	b480      	push	{r7}
 8004faa:	b085      	sub	sp, #20
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fd6:	4b05      	ldr	r3, [pc, #20]	; (8004fec <HAL_PCDEx_ActivateLPM+0x44>)
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	68fa      	ldr	r2, [r7, #12]
 8004fdc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3714      	adds	r7, #20
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fea:	4770      	bx	lr
 8004fec:	10000003 	.word	0x10000003

08004ff0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b083      	sub	sp, #12
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	460b      	mov	r3, r1
 8004ffa:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004ffc:	bf00      	nop
 8004ffe:	370c      	adds	r7, #12
 8005000:	46bd      	mov	sp, r7
 8005002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005006:	4770      	bx	lr

08005008 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005008:	b580      	push	{r7, lr}
 800500a:	b084      	sub	sp, #16
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8005010:	4b19      	ldr	r3, [pc, #100]	; (8005078 <HAL_PWREx_ConfigSupply+0x70>)
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0304 	and.w	r3, r3, #4
 8005018:	2b04      	cmp	r3, #4
 800501a:	d00a      	beq.n	8005032 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800501c:	4b16      	ldr	r3, [pc, #88]	; (8005078 <HAL_PWREx_ConfigSupply+0x70>)
 800501e:	68db      	ldr	r3, [r3, #12]
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	429a      	cmp	r2, r3
 8005028:	d001      	beq.n	800502e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	e01f      	b.n	800506e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800502e:	2300      	movs	r3, #0
 8005030:	e01d      	b.n	800506e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8005032:	4b11      	ldr	r3, [pc, #68]	; (8005078 <HAL_PWREx_ConfigSupply+0x70>)
 8005034:	68db      	ldr	r3, [r3, #12]
 8005036:	f023 0207 	bic.w	r2, r3, #7
 800503a:	490f      	ldr	r1, [pc, #60]	; (8005078 <HAL_PWREx_ConfigSupply+0x70>)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4313      	orrs	r3, r2
 8005040:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8005042:	f7fc fa69 	bl	8001518 <HAL_GetTick>
 8005046:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005048:	e009      	b.n	800505e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800504a:	f7fc fa65 	bl	8001518 <HAL_GetTick>
 800504e:	4602      	mov	r2, r0
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	1ad3      	subs	r3, r2, r3
 8005054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005058:	d901      	bls.n	800505e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800505a:	2301      	movs	r3, #1
 800505c:	e007      	b.n	800506e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800505e:	4b06      	ldr	r3, [pc, #24]	; (8005078 <HAL_PWREx_ConfigSupply+0x70>)
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800506a:	d1ee      	bne.n	800504a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3710      	adds	r7, #16
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	58024800 	.word	0x58024800

0800507c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800507c:	b480      	push	{r7}
 800507e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8005080:	4b05      	ldr	r3, [pc, #20]	; (8005098 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	4a04      	ldr	r2, [pc, #16]	; (8005098 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005086:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800508a:	60d3      	str	r3, [r2, #12]
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	58024800 	.word	0x58024800

0800509c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b08c      	sub	sp, #48	; 0x30
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d101      	bne.n	80050ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e3ff      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8087 	beq.w	80051ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80050bc:	4b99      	ldr	r3, [pc, #612]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80050c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80050c6:	4b97      	ldr	r3, [pc, #604]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80050c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ca:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	2b10      	cmp	r3, #16
 80050d0:	d007      	beq.n	80050e2 <HAL_RCC_OscConfig+0x46>
 80050d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d4:	2b18      	cmp	r3, #24
 80050d6:	d110      	bne.n	80050fa <HAL_RCC_OscConfig+0x5e>
 80050d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	2b02      	cmp	r3, #2
 80050e0:	d10b      	bne.n	80050fa <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050e2:	4b90      	ldr	r3, [pc, #576]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d06c      	beq.n	80051c8 <HAL_RCC_OscConfig+0x12c>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d168      	bne.n	80051c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e3d9      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005102:	d106      	bne.n	8005112 <HAL_RCC_OscConfig+0x76>
 8005104:	4b87      	ldr	r3, [pc, #540]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a86      	ldr	r2, [pc, #536]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800510a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	e02e      	b.n	8005170 <HAL_RCC_OscConfig+0xd4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0x98>
 800511a:	4b82      	ldr	r3, [pc, #520]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a81      	ldr	r2, [pc, #516]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b7f      	ldr	r3, [pc, #508]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a7e      	ldr	r2, [pc, #504]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800512c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e01d      	b.n	8005170 <HAL_RCC_OscConfig+0xd4>
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	685b      	ldr	r3, [r3, #4]
 8005138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800513c:	d10c      	bne.n	8005158 <HAL_RCC_OscConfig+0xbc>
 800513e:	4b79      	ldr	r3, [pc, #484]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a78      	ldr	r2, [pc, #480]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a75      	ldr	r2, [pc, #468]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005154:	6013      	str	r3, [r2, #0]
 8005156:	e00b      	b.n	8005170 <HAL_RCC_OscConfig+0xd4>
 8005158:	4b72      	ldr	r3, [pc, #456]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a71      	ldr	r2, [pc, #452]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800515e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005162:	6013      	str	r3, [r2, #0]
 8005164:	4b6f      	ldr	r3, [pc, #444]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a6e      	ldr	r2, [pc, #440]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800516a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800516e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	2b00      	cmp	r3, #0
 8005176:	d013      	beq.n	80051a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005178:	f7fc f9ce 	bl	8001518 <HAL_GetTick>
 800517c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800517e:	e008      	b.n	8005192 <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005180:	f7fc f9ca 	bl	8001518 <HAL_GetTick>
 8005184:	4602      	mov	r2, r0
 8005186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005188:	1ad3      	subs	r3, r2, r3
 800518a:	2b64      	cmp	r3, #100	; 0x64
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e38d      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005192:	4b64      	ldr	r3, [pc, #400]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0f0      	beq.n	8005180 <HAL_RCC_OscConfig+0xe4>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a0:	f7fc f9ba 	bl	8001518 <HAL_GetTick>
 80051a4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051a6:	e008      	b.n	80051ba <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80051a8:	f7fc f9b6 	bl	8001518 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	2b64      	cmp	r3, #100	; 0x64
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e379      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80051ba:	4b5a      	ldr	r3, [pc, #360]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1f0      	bne.n	80051a8 <HAL_RCC_OscConfig+0x10c>
 80051c6:	e000      	b.n	80051ca <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f000 80ae 	beq.w	8005334 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80051d8:	4b52      	ldr	r3, [pc, #328]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80051da:	691b      	ldr	r3, [r3, #16]
 80051dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051e0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80051e2:	4b50      	ldr	r3, [pc, #320]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80051e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e6:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80051e8:	6a3b      	ldr	r3, [r7, #32]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_RCC_OscConfig+0x162>
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	2b18      	cmp	r3, #24
 80051f2:	d13a      	bne.n	800526a <HAL_RCC_OscConfig+0x1ce>
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f003 0303 	and.w	r3, r3, #3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d135      	bne.n	800526a <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80051fe:	4b49      	ldr	r3, [pc, #292]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d005      	beq.n	8005216 <HAL_RCC_OscConfig+0x17a>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d101      	bne.n	8005216 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8005212:	2301      	movs	r3, #1
 8005214:	e34b      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005216:	f7fc f9ad 	bl	8001574 <HAL_GetREVID>
 800521a:	4602      	mov	r2, r0
 800521c:	f241 0303 	movw	r3, #4099	; 0x1003
 8005220:	429a      	cmp	r2, r3
 8005222:	d817      	bhi.n	8005254 <HAL_RCC_OscConfig+0x1b8>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b40      	cmp	r3, #64	; 0x40
 800522a:	d108      	bne.n	800523e <HAL_RCC_OscConfig+0x1a2>
 800522c:	4b3d      	ldr	r3, [pc, #244]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8005234:	4a3b      	ldr	r2, [pc, #236]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800523a:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800523c:	e07a      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800523e:	4b39      	ldr	r3, [pc, #228]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	031b      	lsls	r3, r3, #12
 800524c:	4935      	ldr	r1, [pc, #212]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 800524e:	4313      	orrs	r3, r2
 8005250:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005252:	e06f      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005254:	4b33      	ldr	r3, [pc, #204]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	061b      	lsls	r3, r3, #24
 8005262:	4930      	ldr	r1, [pc, #192]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005264:	4313      	orrs	r3, r2
 8005266:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005268:	e064      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	68db      	ldr	r3, [r3, #12]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d045      	beq.n	80052fe <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005272:	4b2c      	ldr	r3, [pc, #176]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f023 0219 	bic.w	r2, r3, #25
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4929      	ldr	r1, [pc, #164]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005280:	4313      	orrs	r3, r2
 8005282:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005284:	f7fc f948 	bl	8001518 <HAL_GetTick>
 8005288:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800528c:	f7fc f944 	bl	8001518 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e307      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800529e:	4b21      	ldr	r3, [pc, #132]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0304 	and.w	r3, r3, #4
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052aa:	f7fc f963 	bl	8001574 <HAL_GetREVID>
 80052ae:	4602      	mov	r2, r0
 80052b0:	f241 0303 	movw	r3, #4099	; 0x1003
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d817      	bhi.n	80052e8 <HAL_RCC_OscConfig+0x24c>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	691b      	ldr	r3, [r3, #16]
 80052bc:	2b40      	cmp	r3, #64	; 0x40
 80052be:	d108      	bne.n	80052d2 <HAL_RCC_OscConfig+0x236>
 80052c0:	4b18      	ldr	r3, [pc, #96]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80052c8:	4a16      	ldr	r2, [pc, #88]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052ce:	6053      	str	r3, [r2, #4]
 80052d0:	e030      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
 80052d2:	4b14      	ldr	r3, [pc, #80]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	031b      	lsls	r3, r3, #12
 80052e0:	4910      	ldr	r1, [pc, #64]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	604b      	str	r3, [r1, #4]
 80052e6:	e025      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
 80052e8:	4b0e      	ldr	r3, [pc, #56]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	061b      	lsls	r3, r3, #24
 80052f6:	490b      	ldr	r1, [pc, #44]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 80052f8:	4313      	orrs	r3, r2
 80052fa:	604b      	str	r3, [r1, #4]
 80052fc:	e01a      	b.n	8005334 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80052fe:	4b09      	ldr	r3, [pc, #36]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a08      	ldr	r2, [pc, #32]	; (8005324 <HAL_RCC_OscConfig+0x288>)
 8005304:	f023 0301 	bic.w	r3, r3, #1
 8005308:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fc f905 	bl	8001518 <HAL_GetTick>
 800530e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005310:	e00a      	b.n	8005328 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005312:	f7fc f901 	bl	8001518 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b02      	cmp	r3, #2
 800531e:	d903      	bls.n	8005328 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e2c4      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
 8005324:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005328:	4ba4      	ldr	r3, [pc, #656]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0304 	and.w	r3, r3, #4
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1ee      	bne.n	8005312 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0310 	and.w	r3, r3, #16
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 80a9 	beq.w	8005494 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005342:	4b9e      	ldr	r3, [pc, #632]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005344:	691b      	ldr	r3, [r3, #16]
 8005346:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800534a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800534c:	4b9b      	ldr	r3, [pc, #620]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800534e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005350:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	2b08      	cmp	r3, #8
 8005356:	d007      	beq.n	8005368 <HAL_RCC_OscConfig+0x2cc>
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	2b18      	cmp	r3, #24
 800535c:	d13a      	bne.n	80053d4 <HAL_RCC_OscConfig+0x338>
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b01      	cmp	r3, #1
 8005366:	d135      	bne.n	80053d4 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005368:	4b94      	ldr	r3, [pc, #592]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d005      	beq.n	8005380 <HAL_RCC_OscConfig+0x2e4>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	69db      	ldr	r3, [r3, #28]
 8005378:	2b80      	cmp	r3, #128	; 0x80
 800537a:	d001      	beq.n	8005380 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
 800537e:	e296      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005380:	f7fc f8f8 	bl	8001574 <HAL_GetREVID>
 8005384:	4602      	mov	r2, r0
 8005386:	f241 0303 	movw	r3, #4099	; 0x1003
 800538a:	429a      	cmp	r2, r3
 800538c:	d817      	bhi.n	80053be <HAL_RCC_OscConfig+0x322>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6a1b      	ldr	r3, [r3, #32]
 8005392:	2b20      	cmp	r3, #32
 8005394:	d108      	bne.n	80053a8 <HAL_RCC_OscConfig+0x30c>
 8005396:	4b89      	ldr	r3, [pc, #548]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800539e:	4a87      	ldr	r2, [pc, #540]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053a6:	e075      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053a8:	4b84      	ldr	r3, [pc, #528]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	069b      	lsls	r3, r3, #26
 80053b6:	4981      	ldr	r1, [pc, #516]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053b8:	4313      	orrs	r3, r2
 80053ba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053bc:	e06a      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80053be:	4b7f      	ldr	r3, [pc, #508]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	061b      	lsls	r3, r3, #24
 80053cc:	497b      	ldr	r1, [pc, #492]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80053d2:	e05f      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	69db      	ldr	r3, [r3, #28]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d042      	beq.n	8005462 <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80053dc:	4b77      	ldr	r3, [pc, #476]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	4a76      	ldr	r2, [pc, #472]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80053e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053e8:	f7fc f896 	bl	8001518 <HAL_GetTick>
 80053ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80053ee:	e008      	b.n	8005402 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80053f0:	f7fc f892 	bl	8001518 <HAL_GetTick>
 80053f4:	4602      	mov	r2, r0
 80053f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d901      	bls.n	8005402 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80053fe:	2303      	movs	r3, #3
 8005400:	e255      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005402:	4b6e      	ldr	r3, [pc, #440]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800540a:	2b00      	cmp	r3, #0
 800540c:	d0f0      	beq.n	80053f0 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800540e:	f7fc f8b1 	bl	8001574 <HAL_GetREVID>
 8005412:	4602      	mov	r2, r0
 8005414:	f241 0303 	movw	r3, #4099	; 0x1003
 8005418:	429a      	cmp	r2, r3
 800541a:	d817      	bhi.n	800544c <HAL_RCC_OscConfig+0x3b0>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a1b      	ldr	r3, [r3, #32]
 8005420:	2b20      	cmp	r3, #32
 8005422:	d108      	bne.n	8005436 <HAL_RCC_OscConfig+0x39a>
 8005424:	4b65      	ldr	r3, [pc, #404]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800542c:	4a63      	ldr	r2, [pc, #396]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800542e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005432:	6053      	str	r3, [r2, #4]
 8005434:	e02e      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
 8005436:	4b61      	ldr	r3, [pc, #388]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a1b      	ldr	r3, [r3, #32]
 8005442:	069b      	lsls	r3, r3, #26
 8005444:	495d      	ldr	r1, [pc, #372]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005446:	4313      	orrs	r3, r2
 8005448:	604b      	str	r3, [r1, #4]
 800544a:	e023      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
 800544c:	4b5b      	ldr	r3, [pc, #364]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6a1b      	ldr	r3, [r3, #32]
 8005458:	061b      	lsls	r3, r3, #24
 800545a:	4958      	ldr	r1, [pc, #352]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800545c:	4313      	orrs	r3, r2
 800545e:	60cb      	str	r3, [r1, #12]
 8005460:	e018      	b.n	8005494 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005462:	4b56      	ldr	r3, [pc, #344]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a55      	ldr	r2, [pc, #340]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005468:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800546c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800546e:	f7fc f853 	bl	8001518 <HAL_GetTick>
 8005472:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005474:	e008      	b.n	8005488 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005476:	f7fc f84f 	bl	8001518 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	2b02      	cmp	r3, #2
 8005482:	d901      	bls.n	8005488 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e212      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005488:	4b4c      	ldr	r3, [pc, #304]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005490:	2b00      	cmp	r3, #0
 8005492:	d1f0      	bne.n	8005476 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 0308 	and.w	r3, r3, #8
 800549c:	2b00      	cmp	r3, #0
 800549e:	d036      	beq.n	800550e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d019      	beq.n	80054dc <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054a8:	4b44      	ldr	r3, [pc, #272]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80054aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054ac:	4a43      	ldr	r2, [pc, #268]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80054ae:	f043 0301 	orr.w	r3, r3, #1
 80054b2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054b4:	f7fc f830 	bl	8001518 <HAL_GetTick>
 80054b8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ba:	e008      	b.n	80054ce <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054bc:	f7fc f82c 	bl	8001518 <HAL_GetTick>
 80054c0:	4602      	mov	r2, r0
 80054c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d901      	bls.n	80054ce <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80054ca:	2303      	movs	r3, #3
 80054cc:	e1ef      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80054ce:	4b3b      	ldr	r3, [pc, #236]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80054d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054d2:	f003 0302 	and.w	r3, r3, #2
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d0f0      	beq.n	80054bc <HAL_RCC_OscConfig+0x420>
 80054da:	e018      	b.n	800550e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054dc:	4b37      	ldr	r3, [pc, #220]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80054de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80054e0:	4a36      	ldr	r2, [pc, #216]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 80054e2:	f023 0301 	bic.w	r3, r3, #1
 80054e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e8:	f7fc f816 	bl	8001518 <HAL_GetTick>
 80054ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80054ee:	e008      	b.n	8005502 <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80054f0:	f7fc f812 	bl	8001518 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	2b02      	cmp	r3, #2
 80054fc:	d901      	bls.n	8005502 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80054fe:	2303      	movs	r3, #3
 8005500:	e1d5      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005502:	4b2e      	ldr	r3, [pc, #184]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005506:	f003 0302 	and.w	r3, r3, #2
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1f0      	bne.n	80054f0 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d036      	beq.n	8005588 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d019      	beq.n	8005556 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005522:	4b26      	ldr	r3, [pc, #152]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a25      	ldr	r2, [pc, #148]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005528:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800552c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800552e:	f7fb fff3 	bl	8001518 <HAL_GetTick>
 8005532:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005536:	f7fb ffef 	bl	8001518 <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1b2      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005548:	4b1c      	ldr	r3, [pc, #112]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d0f0      	beq.n	8005536 <HAL_RCC_OscConfig+0x49a>
 8005554:	e018      	b.n	8005588 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005556:	4b19      	ldr	r3, [pc, #100]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	4a18      	ldr	r2, [pc, #96]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800555c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005560:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005562:	f7fb ffd9 	bl	8001518 <HAL_GetTick>
 8005566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800556a:	f7fb ffd5 	bl	8001518 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e198      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800557c:	4b0f      	ldr	r3, [pc, #60]	; (80055bc <HAL_RCC_OscConfig+0x520>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1f0      	bne.n	800556a <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	f000 8085 	beq.w	80056a0 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005596:	4b0a      	ldr	r3, [pc, #40]	; (80055c0 <HAL_RCC_OscConfig+0x524>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4a09      	ldr	r2, [pc, #36]	; (80055c0 <HAL_RCC_OscConfig+0x524>)
 800559c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80055a2:	f7fb ffb9 	bl	8001518 <HAL_GetTick>
 80055a6:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055a8:	e00c      	b.n	80055c4 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80055aa:	f7fb ffb5 	bl	8001518 <HAL_GetTick>
 80055ae:	4602      	mov	r2, r0
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	1ad3      	subs	r3, r2, r3
 80055b4:	2b64      	cmp	r3, #100	; 0x64
 80055b6:	d905      	bls.n	80055c4 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80055b8:	2303      	movs	r3, #3
 80055ba:	e178      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
 80055bc:	58024400 	.word	0x58024400
 80055c0:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80055c4:	4b96      	ldr	r3, [pc, #600]	; (8005820 <HAL_RCC_OscConfig+0x784>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d0ec      	beq.n	80055aa <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d106      	bne.n	80055e6 <HAL_RCC_OscConfig+0x54a>
 80055d8:	4b92      	ldr	r3, [pc, #584]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80055da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055dc:	4a91      	ldr	r2, [pc, #580]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	6713      	str	r3, [r2, #112]	; 0x70
 80055e4:	e02d      	b.n	8005642 <HAL_RCC_OscConfig+0x5a6>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d10c      	bne.n	8005608 <HAL_RCC_OscConfig+0x56c>
 80055ee:	4b8d      	ldr	r3, [pc, #564]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80055f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055f2:	4a8c      	ldr	r2, [pc, #560]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80055f4:	f023 0301 	bic.w	r3, r3, #1
 80055f8:	6713      	str	r3, [r2, #112]	; 0x70
 80055fa:	4b8a      	ldr	r3, [pc, #552]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055fe:	4a89      	ldr	r2, [pc, #548]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005600:	f023 0304 	bic.w	r3, r3, #4
 8005604:	6713      	str	r3, [r2, #112]	; 0x70
 8005606:	e01c      	b.n	8005642 <HAL_RCC_OscConfig+0x5a6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b05      	cmp	r3, #5
 800560e:	d10c      	bne.n	800562a <HAL_RCC_OscConfig+0x58e>
 8005610:	4b84      	ldr	r3, [pc, #528]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005614:	4a83      	ldr	r2, [pc, #524]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	6713      	str	r3, [r2, #112]	; 0x70
 800561c:	4b81      	ldr	r3, [pc, #516]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005620:	4a80      	ldr	r2, [pc, #512]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	; 0x70
 8005628:	e00b      	b.n	8005642 <HAL_RCC_OscConfig+0x5a6>
 800562a:	4b7e      	ldr	r3, [pc, #504]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800562e:	4a7d      	ldr	r2, [pc, #500]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	6713      	str	r3, [r2, #112]	; 0x70
 8005636:	4b7b      	ldr	r3, [pc, #492]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800563a:	4a7a      	ldr	r2, [pc, #488]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800563c:	f023 0304 	bic.w	r3, r3, #4
 8005640:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d015      	beq.n	8005676 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fb ff65 	bl	8001518 <HAL_GetTick>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fb ff61 	bl	8001518 <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e122      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005668:	4b6e      	ldr	r3, [pc, #440]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ee      	beq.n	8005652 <HAL_RCC_OscConfig+0x5b6>
 8005674:	e014      	b.n	80056a0 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005676:	f7fb ff4f 	bl	8001518 <HAL_GetTick>
 800567a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800567c:	e00a      	b.n	8005694 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fb ff4b 	bl	8001518 <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f241 3288 	movw	r2, #5000	; 0x1388
 800568c:	4293      	cmp	r3, r2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e10c      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005694:	4b63      	ldr	r3, [pc, #396]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ee      	bne.n	800567e <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	f000 8101 	beq.w	80058ac <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80056aa:	4b5e      	ldr	r3, [pc, #376]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056b2:	2b18      	cmp	r3, #24
 80056b4:	f000 80bc 	beq.w	8005830 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056bc:	2b02      	cmp	r3, #2
 80056be:	f040 8095 	bne.w	80057ec <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80056c2:	4b58      	ldr	r3, [pc, #352]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a57      	ldr	r2, [pc, #348]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80056c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056ce:	f7fb ff23 	bl	8001518 <HAL_GetTick>
 80056d2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056d4:	e008      	b.n	80056e8 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80056d6:	f7fb ff1f 	bl	8001518 <HAL_GetTick>
 80056da:	4602      	mov	r2, r0
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	1ad3      	subs	r3, r2, r3
 80056e0:	2b02      	cmp	r3, #2
 80056e2:	d901      	bls.n	80056e8 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80056e4:	2303      	movs	r3, #3
 80056e6:	e0e2      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80056e8:	4b4e      	ldr	r3, [pc, #312]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1f0      	bne.n	80056d6 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056f4:	4b4b      	ldr	r3, [pc, #300]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80056f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80056f8:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_RCC_OscConfig+0x78c>)
 80056fa:	4013      	ands	r3, r2
 80056fc:	687a      	ldr	r2, [r7, #4]
 80056fe:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005704:	0112      	lsls	r2, r2, #4
 8005706:	430a      	orrs	r2, r1
 8005708:	4946      	ldr	r1, [pc, #280]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800570a:	4313      	orrs	r3, r2
 800570c:	628b      	str	r3, [r1, #40]	; 0x28
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	3b01      	subs	r3, #1
 8005714:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800571c:	3b01      	subs	r3, #1
 800571e:	025b      	lsls	r3, r3, #9
 8005720:	b29b      	uxth	r3, r3
 8005722:	431a      	orrs	r2, r3
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	3b01      	subs	r3, #1
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005730:	431a      	orrs	r2, r3
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005736:	3b01      	subs	r3, #1
 8005738:	061b      	lsls	r3, r3, #24
 800573a:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800573e:	4939      	ldr	r1, [pc, #228]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005740:	4313      	orrs	r3, r2
 8005742:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005744:	4b37      	ldr	r3, [pc, #220]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005748:	4a36      	ldr	r2, [pc, #216]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005750:	4b34      	ldr	r3, [pc, #208]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005752:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005754:	4b35      	ldr	r3, [pc, #212]	; (800582c <HAL_RCC_OscConfig+0x790>)
 8005756:	4013      	ands	r3, r2
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800575c:	00d2      	lsls	r2, r2, #3
 800575e:	4931      	ldr	r1, [pc, #196]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005760:	4313      	orrs	r3, r2
 8005762:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005764:	4b2f      	ldr	r3, [pc, #188]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005768:	f023 020c 	bic.w	r2, r3, #12
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005770:	492c      	ldr	r1, [pc, #176]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005772:	4313      	orrs	r3, r2
 8005774:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005776:	4b2b      	ldr	r3, [pc, #172]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800577a:	f023 0202 	bic.w	r2, r3, #2
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005782:	4928      	ldr	r1, [pc, #160]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005784:	4313      	orrs	r3, r2
 8005786:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005788:	4b26      	ldr	r3, [pc, #152]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	4a25      	ldr	r2, [pc, #148]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800578e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005794:	4b23      	ldr	r3, [pc, #140]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005798:	4a22      	ldr	r2, [pc, #136]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 800579a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800579e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80057a0:	4b20      	ldr	r3, [pc, #128]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057a4:	4a1f      	ldr	r2, [pc, #124]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80057ac:	4b1d      	ldr	r3, [pc, #116]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057b0:	4a1c      	ldr	r2, [pc, #112]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057b8:	4b1a      	ldr	r3, [pc, #104]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a19      	ldr	r2, [pc, #100]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80057c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c4:	f7fb fea8 	bl	8001518 <HAL_GetTick>
 80057c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057ca:	e008      	b.n	80057de <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057cc:	f7fb fea4 	bl	8001518 <HAL_GetTick>
 80057d0:	4602      	mov	r2, r0
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	1ad3      	subs	r3, r2, r3
 80057d6:	2b02      	cmp	r3, #2
 80057d8:	d901      	bls.n	80057de <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80057da:	2303      	movs	r3, #3
 80057dc:	e067      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80057de:	4b11      	ldr	r3, [pc, #68]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d0f0      	beq.n	80057cc <HAL_RCC_OscConfig+0x730>
 80057ea:	e05f      	b.n	80058ac <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057ec:	4b0d      	ldr	r3, [pc, #52]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a0c      	ldr	r2, [pc, #48]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 80057f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057f8:	f7fb fe8e 	bl	8001518 <HAL_GetTick>
 80057fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005800:	f7fb fe8a 	bl	8001518 <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e04d      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005812:	4b04      	ldr	r3, [pc, #16]	; (8005824 <HAL_RCC_OscConfig+0x788>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d1f0      	bne.n	8005800 <HAL_RCC_OscConfig+0x764>
 800581e:	e045      	b.n	80058ac <HAL_RCC_OscConfig+0x810>
 8005820:	58024800 	.word	0x58024800
 8005824:	58024400 	.word	0x58024400
 8005828:	fffffc0c 	.word	0xfffffc0c
 800582c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005830:	4b21      	ldr	r3, [pc, #132]	; (80058b8 <HAL_RCC_OscConfig+0x81c>)
 8005832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005834:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005836:	4b20      	ldr	r3, [pc, #128]	; (80058b8 <HAL_RCC_OscConfig+0x81c>)
 8005838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800583a:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005840:	2b01      	cmp	r3, #1
 8005842:	d031      	beq.n	80058a8 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005844:	693b      	ldr	r3, [r7, #16]
 8005846:	f003 0203 	and.w	r2, r3, #3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800584e:	429a      	cmp	r2, r3
 8005850:	d12a      	bne.n	80058a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	091b      	lsrs	r3, r3, #4
 8005856:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800585e:	429a      	cmp	r2, r3
 8005860:	d122      	bne.n	80058a8 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800586c:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800586e:	429a      	cmp	r2, r3
 8005870:	d11a      	bne.n	80058a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	0a5b      	lsrs	r3, r3, #9
 8005876:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800587e:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d111      	bne.n	80058a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	0c1b      	lsrs	r3, r3, #16
 8005888:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005890:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d108      	bne.n	80058a8 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a2:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3730      	adds	r7, #48	; 0x30
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	bf00      	nop
 80058b8:	58024400 	.word	0x58024400

080058bc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b086      	sub	sp, #24
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d101      	bne.n	80058d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e19c      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058d0:	4b8a      	ldr	r3, [pc, #552]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 030f 	and.w	r3, r3, #15
 80058d8:	683a      	ldr	r2, [r7, #0]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d910      	bls.n	8005900 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80058de:	4b87      	ldr	r3, [pc, #540]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f023 020f 	bic.w	r2, r3, #15
 80058e6:	4985      	ldr	r1, [pc, #532]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80058ee:	4b83      	ldr	r3, [pc, #524]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 030f 	and.w	r3, r3, #15
 80058f6:	683a      	ldr	r2, [r7, #0]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d001      	beq.n	8005900 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e184      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 0304 	and.w	r3, r3, #4
 8005908:	2b00      	cmp	r3, #0
 800590a:	d010      	beq.n	800592e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691a      	ldr	r2, [r3, #16]
 8005910:	4b7b      	ldr	r3, [pc, #492]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005912:	699b      	ldr	r3, [r3, #24]
 8005914:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005918:	429a      	cmp	r2, r3
 800591a:	d908      	bls.n	800592e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800591c:	4b78      	ldr	r3, [pc, #480]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	4975      	ldr	r1, [pc, #468]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800592a:	4313      	orrs	r3, r2
 800592c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 0308 	and.w	r3, r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	d010      	beq.n	800595c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	695a      	ldr	r2, [r3, #20]
 800593e:	4b70      	ldr	r3, [pc, #448]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005940:	69db      	ldr	r3, [r3, #28]
 8005942:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005946:	429a      	cmp	r2, r3
 8005948:	d908      	bls.n	800595c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800594a:	4b6d      	ldr	r3, [pc, #436]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800594c:	69db      	ldr	r3, [r3, #28]
 800594e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	496a      	ldr	r1, [pc, #424]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005958:	4313      	orrs	r3, r2
 800595a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d010      	beq.n	800598a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699a      	ldr	r2, [r3, #24]
 800596c:	4b64      	ldr	r3, [pc, #400]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800596e:	69db      	ldr	r3, [r3, #28]
 8005970:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005974:	429a      	cmp	r2, r3
 8005976:	d908      	bls.n	800598a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005978:	4b61      	ldr	r3, [pc, #388]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800597a:	69db      	ldr	r3, [r3, #28]
 800597c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	699b      	ldr	r3, [r3, #24]
 8005984:	495e      	ldr	r1, [pc, #376]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005986:	4313      	orrs	r3, r2
 8005988:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f003 0320 	and.w	r3, r3, #32
 8005992:	2b00      	cmp	r3, #0
 8005994:	d010      	beq.n	80059b8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	69da      	ldr	r2, [r3, #28]
 800599a:	4b59      	ldr	r3, [pc, #356]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d908      	bls.n	80059b8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80059a6:	4b56      	ldr	r3, [pc, #344]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059a8:	6a1b      	ldr	r3, [r3, #32]
 80059aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	69db      	ldr	r3, [r3, #28]
 80059b2:	4953      	ldr	r1, [pc, #332]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0302 	and.w	r3, r3, #2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d010      	beq.n	80059e6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	4b4d      	ldr	r3, [pc, #308]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d908      	bls.n	80059e6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059d4:	4b4a      	ldr	r3, [pc, #296]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059d6:	699b      	ldr	r3, [r3, #24]
 80059d8:	f023 020f 	bic.w	r2, r3, #15
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	68db      	ldr	r3, [r3, #12]
 80059e0:	4947      	ldr	r1, [pc, #284]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059e2:	4313      	orrs	r3, r2
 80059e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f003 0301 	and.w	r3, r3, #1
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d055      	beq.n	8005a9e <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80059f2:	4b43      	ldr	r3, [pc, #268]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	4940      	ldr	r1, [pc, #256]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d107      	bne.n	8005a1c <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005a0c:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d121      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e0f6      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	685b      	ldr	r3, [r3, #4]
 8005a20:	2b03      	cmp	r3, #3
 8005a22:	d107      	bne.n	8005a34 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005a24:	4b36      	ldr	r3, [pc, #216]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d115      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e0ea      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	2b01      	cmp	r3, #1
 8005a3a:	d107      	bne.n	8005a4c <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005a3c:	4b30      	ldr	r3, [pc, #192]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d109      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e0de      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005a4c:	4b2c      	ldr	r3, [pc, #176]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0304 	and.w	r3, r3, #4
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e0d6      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005a5c:	4b28      	ldr	r3, [pc, #160]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	f023 0207 	bic.w	r2, r3, #7
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	4925      	ldr	r1, [pc, #148]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a6e:	f7fb fd53 	bl	8001518 <HAL_GetTick>
 8005a72:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a74:	e00a      	b.n	8005a8c <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a76:	f7fb fd4f 	bl	8001518 <HAL_GetTick>
 8005a7a:	4602      	mov	r2, r0
 8005a7c:	697b      	ldr	r3, [r7, #20]
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e0be      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a8c:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d1eb      	bne.n	8005a76 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0302 	and.w	r3, r3, #2
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d010      	beq.n	8005acc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	4b14      	ldr	r3, [pc, #80]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005ab0:	699b      	ldr	r3, [r3, #24]
 8005ab2:	f003 030f 	and.w	r3, r3, #15
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d208      	bcs.n	8005acc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005aba:	4b11      	ldr	r3, [pc, #68]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005abc:	699b      	ldr	r3, [r3, #24]
 8005abe:	f023 020f 	bic.w	r2, r3, #15
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	490e      	ldr	r1, [pc, #56]	; (8005b00 <HAL_RCC_ClockConfig+0x244>)
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005acc:	4b0b      	ldr	r3, [pc, #44]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d214      	bcs.n	8005b04 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ada:	4b08      	ldr	r3, [pc, #32]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f023 020f 	bic.w	r2, r3, #15
 8005ae2:	4906      	ldr	r1, [pc, #24]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aea:	4b04      	ldr	r3, [pc, #16]	; (8005afc <HAL_RCC_ClockConfig+0x240>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f003 030f 	and.w	r3, r3, #15
 8005af2:	683a      	ldr	r2, [r7, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d005      	beq.n	8005b04 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	e086      	b.n	8005c0a <HAL_RCC_ClockConfig+0x34e>
 8005afc:	52002000 	.word	0x52002000
 8005b00:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f003 0304 	and.w	r3, r3, #4
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691a      	ldr	r2, [r3, #16]
 8005b14:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b1c:	429a      	cmp	r2, r3
 8005b1e:	d208      	bcs.n	8005b32 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005b20:	4b3c      	ldr	r3, [pc, #240]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	691b      	ldr	r3, [r3, #16]
 8005b2c:	4939      	ldr	r1, [pc, #228]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f003 0308 	and.w	r3, r3, #8
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d010      	beq.n	8005b60 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	695a      	ldr	r2, [r3, #20]
 8005b42:	4b34      	ldr	r3, [pc, #208]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b44:	69db      	ldr	r3, [r3, #28]
 8005b46:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d208      	bcs.n	8005b60 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005b4e:	4b31      	ldr	r3, [pc, #196]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	492e      	ldr	r1, [pc, #184]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f003 0310 	and.w	r3, r3, #16
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d010      	beq.n	8005b8e <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	699a      	ldr	r2, [r3, #24]
 8005b70:	4b28      	ldr	r3, [pc, #160]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b72:	69db      	ldr	r3, [r3, #28]
 8005b74:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d208      	bcs.n	8005b8e <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005b7c:	4b25      	ldr	r3, [pc, #148]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b7e:	69db      	ldr	r3, [r3, #28]
 8005b80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	4922      	ldr	r1, [pc, #136]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 0320 	and.w	r3, r3, #32
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d010      	beq.n	8005bbc <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	69da      	ldr	r2, [r3, #28]
 8005b9e:	4b1d      	ldr	r3, [pc, #116]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d208      	bcs.n	8005bbc <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005baa:	4b1a      	ldr	r3, [pc, #104]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	69db      	ldr	r3, [r3, #28]
 8005bb6:	4917      	ldr	r1, [pc, #92]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005bbc:	f000 f834 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005bc0:	4601      	mov	r1, r0
 8005bc2:	4b14      	ldr	r3, [pc, #80]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bc4:	699b      	ldr	r3, [r3, #24]
 8005bc6:	0a1b      	lsrs	r3, r3, #8
 8005bc8:	f003 030f 	and.w	r3, r3, #15
 8005bcc:	4a12      	ldr	r2, [pc, #72]	; (8005c18 <HAL_RCC_ClockConfig+0x35c>)
 8005bce:	5cd3      	ldrb	r3, [r2, r3]
 8005bd0:	f003 031f 	and.w	r3, r3, #31
 8005bd4:	fa21 f303 	lsr.w	r3, r1, r3
 8005bd8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <HAL_RCC_ClockConfig+0x358>)
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	f003 030f 	and.w	r3, r3, #15
 8005be2:	4a0d      	ldr	r2, [pc, #52]	; (8005c18 <HAL_RCC_ClockConfig+0x35c>)
 8005be4:	5cd3      	ldrb	r3, [r2, r3]
 8005be6:	f003 031f 	and.w	r3, r3, #31
 8005bea:	693a      	ldr	r2, [r7, #16]
 8005bec:	fa22 f303 	lsr.w	r3, r2, r3
 8005bf0:	4a0a      	ldr	r2, [pc, #40]	; (8005c1c <HAL_RCC_ClockConfig+0x360>)
 8005bf2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005bf4:	4a0a      	ldr	r2, [pc, #40]	; (8005c20 <HAL_RCC_ClockConfig+0x364>)
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <HAL_RCC_ClockConfig+0x368>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f7fb fc40 	bl	8001484 <HAL_InitTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005c08:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3718      	adds	r7, #24
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	bf00      	nop
 8005c14:	58024400 	.word	0x58024400
 8005c18:	08010528 	.word	0x08010528
 8005c1c:	24000004 	.word	0x24000004
 8005c20:	24000000 	.word	0x24000000
 8005c24:	24000008 	.word	0x24000008

08005c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b089      	sub	sp, #36	; 0x24
 8005c2c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c2e:	4baf      	ldr	r3, [pc, #700]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c36:	2b18      	cmp	r3, #24
 8005c38:	f200 814e 	bhi.w	8005ed8 <HAL_RCC_GetSysClockFreq+0x2b0>
 8005c3c:	a201      	add	r2, pc, #4	; (adr r2, 8005c44 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c42:	bf00      	nop
 8005c44:	08005ca9 	.word	0x08005ca9
 8005c48:	08005ed9 	.word	0x08005ed9
 8005c4c:	08005ed9 	.word	0x08005ed9
 8005c50:	08005ed9 	.word	0x08005ed9
 8005c54:	08005ed9 	.word	0x08005ed9
 8005c58:	08005ed9 	.word	0x08005ed9
 8005c5c:	08005ed9 	.word	0x08005ed9
 8005c60:	08005ed9 	.word	0x08005ed9
 8005c64:	08005ccf 	.word	0x08005ccf
 8005c68:	08005ed9 	.word	0x08005ed9
 8005c6c:	08005ed9 	.word	0x08005ed9
 8005c70:	08005ed9 	.word	0x08005ed9
 8005c74:	08005ed9 	.word	0x08005ed9
 8005c78:	08005ed9 	.word	0x08005ed9
 8005c7c:	08005ed9 	.word	0x08005ed9
 8005c80:	08005ed9 	.word	0x08005ed9
 8005c84:	08005cd5 	.word	0x08005cd5
 8005c88:	08005ed9 	.word	0x08005ed9
 8005c8c:	08005ed9 	.word	0x08005ed9
 8005c90:	08005ed9 	.word	0x08005ed9
 8005c94:	08005ed9 	.word	0x08005ed9
 8005c98:	08005ed9 	.word	0x08005ed9
 8005c9c:	08005ed9 	.word	0x08005ed9
 8005ca0:	08005ed9 	.word	0x08005ed9
 8005ca4:	08005cdb 	.word	0x08005cdb
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005ca8:	4b90      	ldr	r3, [pc, #576]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	f003 0320 	and.w	r3, r3, #32
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d009      	beq.n	8005cc8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005cb4:	4b8d      	ldr	r3, [pc, #564]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	08db      	lsrs	r3, r3, #3
 8005cba:	f003 0303 	and.w	r3, r3, #3
 8005cbe:	4a8c      	ldr	r2, [pc, #560]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005cc4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8005cc6:	e10a      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005cc8:	4b89      	ldr	r3, [pc, #548]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005cca:	61bb      	str	r3, [r7, #24]
    break;
 8005ccc:	e107      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8005cce:	4b89      	ldr	r3, [pc, #548]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005cd0:	61bb      	str	r3, [r7, #24]
    break;
 8005cd2:	e104      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8005cd4:	4b88      	ldr	r3, [pc, #544]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0x2d0>)
 8005cd6:	61bb      	str	r3, [r7, #24]
    break;
 8005cd8:	e101      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005cda:	4b84      	ldr	r3, [pc, #528]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cde:	f003 0303 	and.w	r3, r3, #3
 8005ce2:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8005ce4:	4b81      	ldr	r3, [pc, #516]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce8:	091b      	lsrs	r3, r3, #4
 8005cea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cee:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005cf0:	4b7e      	ldr	r3, [pc, #504]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf4:	f003 0301 	and.w	r3, r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005cfa:	4b7c      	ldr	r3, [pc, #496]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cfe:	08db      	lsrs	r3, r3, #3
 8005d00:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d04:	68fa      	ldr	r2, [r7, #12]
 8005d06:	fb02 f303 	mul.w	r3, r2, r3
 8005d0a:	ee07 3a90 	vmov	s15, r3
 8005d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d12:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f000 80da 	beq.w	8005ed2 <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d05a      	beq.n	8005dda <HAL_RCC_GetSysClockFreq+0x1b2>
 8005d24:	2b01      	cmp	r3, #1
 8005d26:	d302      	bcc.n	8005d2e <HAL_RCC_GetSysClockFreq+0x106>
 8005d28:	2b02      	cmp	r3, #2
 8005d2a:	d078      	beq.n	8005e1e <HAL_RCC_GetSysClockFreq+0x1f6>
 8005d2c:	e099      	b.n	8005e62 <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d2e:	4b6f      	ldr	r3, [pc, #444]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0320 	and.w	r3, r3, #32
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d02d      	beq.n	8005d96 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005d3a:	4b6c      	ldr	r3, [pc, #432]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	08db      	lsrs	r3, r3, #3
 8005d40:	f003 0303 	and.w	r3, r3, #3
 8005d44:	4a6a      	ldr	r2, [pc, #424]	; (8005ef0 <HAL_RCC_GetSysClockFreq+0x2c8>)
 8005d46:	fa22 f303 	lsr.w	r3, r2, r3
 8005d4a:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	ee07 3a90 	vmov	s15, r3
 8005d52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	ee07 3a90 	vmov	s15, r3
 8005d5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005d64:	4b61      	ldr	r3, [pc, #388]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d6c:	ee07 3a90 	vmov	s15, r3
 8005d70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d74:	ed97 6a02 	vldr	s12, [r7, #8]
 8005d78:	eddf 5a60 	vldr	s11, [pc, #384]	; 8005efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005d7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005d80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005d84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005d88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005d8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005d90:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8005d94:	e087      	b.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	ee07 3a90 	vmov	s15, r3
 8005d9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da0:	eddf 6a57 	vldr	s13, [pc, #348]	; 8005f00 <HAL_RCC_GetSysClockFreq+0x2d8>
 8005da4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005da8:	4b50      	ldr	r3, [pc, #320]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db0:	ee07 3a90 	vmov	s15, r3
 8005db4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005db8:	ed97 6a02 	vldr	s12, [r7, #8]
 8005dbc:	eddf 5a4f 	vldr	s11, [pc, #316]	; 8005efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005dc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005dd8:	e065      	b.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	ee07 3a90 	vmov	s15, r3
 8005de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de4:	eddf 6a47 	vldr	s13, [pc, #284]	; 8005f04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005de8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dec:	4b3f      	ldr	r3, [pc, #252]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005dee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df4:	ee07 3a90 	vmov	s15, r3
 8005df8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfc:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e00:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8005efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e04:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e08:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e10:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e18:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e1c:	e043      	b.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	ee07 3a90 	vmov	s15, r3
 8005e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e28:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005f08 <HAL_RCC_GetSysClockFreq+0x2e0>
 8005e2c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e30:	4b2e      	ldr	r3, [pc, #184]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e38:	ee07 3a90 	vmov	s15, r3
 8005e3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e40:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e44:	eddf 5a2d 	vldr	s11, [pc, #180]	; 8005efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e48:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e50:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e54:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e60:	e021      	b.n	8005ea6 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	ee07 3a90 	vmov	s15, r3
 8005e68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6c:	eddf 6a25 	vldr	s13, [pc, #148]	; 8005f04 <HAL_RCC_GetSysClockFreq+0x2dc>
 8005e70:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e74:	4b1d      	ldr	r3, [pc, #116]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7c:	ee07 3a90 	vmov	s15, r3
 8005e80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e84:	ed97 6a02 	vldr	s12, [r7, #8]
 8005e88:	eddf 5a1c 	vldr	s11, [pc, #112]	; 8005efc <HAL_RCC_GetSysClockFreq+0x2d4>
 8005e8c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e90:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e94:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e98:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea4:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <HAL_RCC_GetSysClockFreq+0x2c4>)
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005eaa:	0a5b      	lsrs	r3, r3, #9
 8005eac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	ee07 3a90 	vmov	s15, r3
 8005eba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005ebe:	edd7 6a07 	vldr	s13, [r7, #28]
 8005ec2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005eca:	ee17 3a90 	vmov	r3, s15
 8005ece:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005ed0:	e005      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	61bb      	str	r3, [r7, #24]
    break;
 8005ed6:	e002      	b.n	8005ede <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 8005ed8:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0x2cc>)
 8005eda:	61bb      	str	r3, [r7, #24]
    break;
 8005edc:	bf00      	nop
  }

  return sysclockfreq;
 8005ede:	69bb      	ldr	r3, [r7, #24]
}
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	3724      	adds	r7, #36	; 0x24
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eea:	4770      	bx	lr
 8005eec:	58024400 	.word	0x58024400
 8005ef0:	03d09000 	.word	0x03d09000
 8005ef4:	003d0900 	.word	0x003d0900
 8005ef8:	017d7840 	.word	0x017d7840
 8005efc:	46000000 	.word	0x46000000
 8005f00:	4c742400 	.word	0x4c742400
 8005f04:	4a742400 	.word	0x4a742400
 8005f08:	4bbebc20 	.word	0x4bbebc20

08005f0c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b082      	sub	sp, #8
 8005f10:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005f12:	f7ff fe89 	bl	8005c28 <HAL_RCC_GetSysClockFreq>
 8005f16:	4601      	mov	r1, r0
 8005f18:	4b10      	ldr	r3, [pc, #64]	; (8005f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	0a1b      	lsrs	r3, r3, #8
 8005f1e:	f003 030f 	and.w	r3, r3, #15
 8005f22:	4a0f      	ldr	r2, [pc, #60]	; (8005f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f24:	5cd3      	ldrb	r3, [r2, r3]
 8005f26:	f003 031f 	and.w	r3, r3, #31
 8005f2a:	fa21 f303 	lsr.w	r3, r1, r3
 8005f2e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_RCC_GetHCLKFreq+0x50>)
 8005f32:	699b      	ldr	r3, [r3, #24]
 8005f34:	f003 030f 	and.w	r3, r3, #15
 8005f38:	4a09      	ldr	r2, [pc, #36]	; (8005f60 <HAL_RCC_GetHCLKFreq+0x54>)
 8005f3a:	5cd3      	ldrb	r3, [r2, r3]
 8005f3c:	f003 031f 	and.w	r3, r3, #31
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	fa22 f303 	lsr.w	r3, r2, r3
 8005f46:	4a07      	ldr	r2, [pc, #28]	; (8005f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f48:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005f4a:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005f50:	4b04      	ldr	r3, [pc, #16]	; (8005f64 <HAL_RCC_GetHCLKFreq+0x58>)
 8005f52:	681b      	ldr	r3, [r3, #0]
}
 8005f54:	4618      	mov	r0, r3
 8005f56:	3708      	adds	r7, #8
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	58024400 	.word	0x58024400
 8005f60:	08010528 	.word	0x08010528
 8005f64:	24000004 	.word	0x24000004
 8005f68:	24000000 	.word	0x24000000

08005f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005f70:	f7ff ffcc 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005f74:	4601      	mov	r1, r0
 8005f76:	4b06      	ldr	r3, [pc, #24]	; (8005f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005f78:	69db      	ldr	r3, [r3, #28]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0307 	and.w	r3, r3, #7
 8005f80:	4a04      	ldr	r2, [pc, #16]	; (8005f94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005f82:	5cd3      	ldrb	r3, [r2, r3]
 8005f84:	f003 031f 	and.w	r3, r3, #31
 8005f88:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	bd80      	pop	{r7, pc}
 8005f90:	58024400 	.word	0x58024400
 8005f94:	08010528 	.word	0x08010528

08005f98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005f9c:	f7ff ffb6 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8005fa0:	4601      	mov	r1, r0
 8005fa2:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8005fa4:	69db      	ldr	r3, [r3, #28]
 8005fa6:	0a1b      	lsrs	r3, r3, #8
 8005fa8:	f003 0307 	and.w	r3, r3, #7
 8005fac:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005fae:	5cd3      	ldrb	r3, [r2, r3]
 8005fb0:	f003 031f 	and.w	r3, r3, #31
 8005fb4:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005fb8:	4618      	mov	r0, r3
 8005fba:	bd80      	pop	{r7, pc}
 8005fbc:	58024400 	.word	0x58024400
 8005fc0:	08010528 	.word	0x08010528

08005fc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fcc:	2300      	movs	r3, #0
 8005fce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fd0:	2300      	movs	r3, #0
 8005fd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d03d      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005fe4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fe8:	d013      	beq.n	8006012 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8005fea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005fee:	d802      	bhi.n	8005ff6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d007      	beq.n	8006004 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8005ff4:	e01f      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8005ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005ffa:	d013      	beq.n	8006024 <HAL_RCCEx_PeriphCLKConfig+0x60>
 8005ffc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006000:	d01c      	beq.n	800603c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8006002:	e018      	b.n	8006036 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006004:	4baf      	ldr	r3, [pc, #700]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006008:	4aae      	ldr	r2, [pc, #696]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800600a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800600e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006010:	e015      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	3304      	adds	r3, #4
 8006016:	2102      	movs	r1, #2
 8006018:	4618      	mov	r0, r3
 800601a:	f001 fd33 	bl	8007a84 <RCCEx_PLL2_Config>
 800601e:	4603      	mov	r3, r0
 8006020:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006022:	e00c      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	3324      	adds	r3, #36	; 0x24
 8006028:	2102      	movs	r1, #2
 800602a:	4618      	mov	r0, r3
 800602c:	f001 fddc 	bl	8007be8 <RCCEx_PLL3_Config>
 8006030:	4603      	mov	r3, r0
 8006032:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006034:	e003      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006036:	2301      	movs	r3, #1
 8006038:	75fb      	strb	r3, [r7, #23]
      break;
 800603a:	e000      	b.n	800603e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800603c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800603e:	7dfb      	ldrb	r3, [r7, #23]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d109      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006044:	4b9f      	ldr	r3, [pc, #636]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006050:	499c      	ldr	r1, [pc, #624]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006052:	4313      	orrs	r3, r2
 8006054:	650b      	str	r3, [r1, #80]	; 0x50
 8006056:	e001      	b.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006058:	7dfb      	ldrb	r3, [r7, #23]
 800605a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006064:	2b00      	cmp	r3, #0
 8006066:	d03d      	beq.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800606c:	2b04      	cmp	r3, #4
 800606e:	d826      	bhi.n	80060be <HAL_RCCEx_PeriphCLKConfig+0xfa>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	0800608d 	.word	0x0800608d
 800607c:	0800609b 	.word	0x0800609b
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c5 	.word	0x080060c5
 8006088:	080060c5 	.word	0x080060c5
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800608c:	4b8d      	ldr	r3, [pc, #564]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	4a8c      	ldr	r2, [pc, #560]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006092:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006096:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006098:	e015      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3304      	adds	r3, #4
 800609e:	2100      	movs	r1, #0
 80060a0:	4618      	mov	r0, r3
 80060a2:	f001 fcef 	bl	8007a84 <RCCEx_PLL2_Config>
 80060a6:	4603      	mov	r3, r0
 80060a8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060aa:	e00c      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	3324      	adds	r3, #36	; 0x24
 80060b0:	2100      	movs	r1, #0
 80060b2:	4618      	mov	r0, r3
 80060b4:	f001 fd98 	bl	8007be8 <RCCEx_PLL3_Config>
 80060b8:	4603      	mov	r3, r0
 80060ba:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80060bc:	e003      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80060be:	2301      	movs	r3, #1
 80060c0:	75fb      	strb	r3, [r7, #23]
      break;
 80060c2:	e000      	b.n	80060c6 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 80060c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80060c6:	7dfb      	ldrb	r3, [r7, #23]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d109      	bne.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80060cc:	4b7d      	ldr	r3, [pc, #500]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060d0:	f023 0207 	bic.w	r2, r3, #7
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060d8:	497a      	ldr	r1, [pc, #488]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80060da:	4313      	orrs	r3, r2
 80060dc:	650b      	str	r3, [r1, #80]	; 0x50
 80060de:	e001      	b.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060e0:	7dfb      	ldrb	r3, [r7, #23]
 80060e2:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d03e      	beq.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d01c      	beq.n	8006132 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80060f8:	2b80      	cmp	r3, #128	; 0x80
 80060fa:	d804      	bhi.n	8006106 <HAL_RCCEx_PeriphCLKConfig+0x142>
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8006100:	2b40      	cmp	r3, #64	; 0x40
 8006102:	d00d      	beq.n	8006120 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8006104:	e01e      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x180>
 8006106:	2bc0      	cmp	r3, #192	; 0xc0
 8006108:	d01f      	beq.n	800614a <HAL_RCCEx_PeriphCLKConfig+0x186>
 800610a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800610e:	d01e      	beq.n	800614e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006110:	e018      	b.n	8006144 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006112:	4b6c      	ldr	r3, [pc, #432]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006116:	4a6b      	ldr	r2, [pc, #428]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006118:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800611c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800611e:	e017      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	3304      	adds	r3, #4
 8006124:	2100      	movs	r1, #0
 8006126:	4618      	mov	r0, r3
 8006128:	f001 fcac 	bl	8007a84 <RCCEx_PLL2_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006130:	e00e      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	3324      	adds	r3, #36	; 0x24
 8006136:	2100      	movs	r1, #0
 8006138:	4618      	mov	r0, r3
 800613a:	f001 fd55 	bl	8007be8 <RCCEx_PLL3_Config>
 800613e:	4603      	mov	r3, r0
 8006140:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006142:	e005      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006144:	2301      	movs	r3, #1
 8006146:	75fb      	strb	r3, [r7, #23]
      break;
 8006148:	e002      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800614a:	bf00      	nop
 800614c:	e000      	b.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800614e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006150:	7dfb      	ldrb	r3, [r7, #23]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d109      	bne.n	800616a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8006156:	4b5b      	ldr	r3, [pc, #364]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800615a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	4958      	ldr	r1, [pc, #352]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006164:	4313      	orrs	r3, r2
 8006166:	650b      	str	r3, [r1, #80]	; 0x50
 8006168:	e001      	b.n	800616e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800616a:	7dfb      	ldrb	r3, [r7, #23]
 800616c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006176:	2b00      	cmp	r3, #0
 8006178:	d044      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006180:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006184:	d01f      	beq.n	80061c6 <HAL_RCCEx_PeriphCLKConfig+0x202>
 8006186:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800618a:	d805      	bhi.n	8006198 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800618c:	2b00      	cmp	r3, #0
 800618e:	d00a      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8006190:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006194:	d00e      	beq.n	80061b4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 8006196:	e01f      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
 8006198:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800619c:	d01f      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800619e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80061a2:	d01e      	beq.n	80061e2 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 80061a4:	e018      	b.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061a6:	4b47      	ldr	r3, [pc, #284]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061aa:	4a46      	ldr	r2, [pc, #280]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061b0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061b2:	e017      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	3304      	adds	r3, #4
 80061b8:	2100      	movs	r1, #0
 80061ba:	4618      	mov	r0, r3
 80061bc:	f001 fc62 	bl	8007a84 <RCCEx_PLL2_Config>
 80061c0:	4603      	mov	r3, r0
 80061c2:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80061c4:	e00e      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	3324      	adds	r3, #36	; 0x24
 80061ca:	2100      	movs	r1, #0
 80061cc:	4618      	mov	r0, r3
 80061ce:	f001 fd0b 	bl	8007be8 <RCCEx_PLL3_Config>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80061d6:	e005      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
      break;
 80061dc:	e002      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80061de:	bf00      	nop
 80061e0:	e000      	b.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 80061e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80061e4:	7dfb      	ldrb	r3, [r7, #23]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d10a      	bne.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80061ea:	4b36      	ldr	r3, [pc, #216]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ee:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80061f8:	4932      	ldr	r1, [pc, #200]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 80061fa:	4313      	orrs	r3, r2
 80061fc:	658b      	str	r3, [r1, #88]	; 0x58
 80061fe:	e001      	b.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006200:	7dfb      	ldrb	r3, [r7, #23]
 8006202:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800620c:	2b00      	cmp	r3, #0
 800620e:	d044      	beq.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006216:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800621a:	d01f      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800621c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006220:	d805      	bhi.n	800622e <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00a      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x278>
 8006226:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800622a:	d00e      	beq.n	800624a <HAL_RCCEx_PeriphCLKConfig+0x286>
 800622c:	e01f      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800622e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006232:	d01f      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8006234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006238:	d01e      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800623a:	e018      	b.n	800626e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800623c:	4b21      	ldr	r3, [pc, #132]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800623e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006240:	4a20      	ldr	r2, [pc, #128]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006246:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006248:	e017      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	3304      	adds	r3, #4
 800624e:	2100      	movs	r1, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f001 fc17 	bl	8007a84 <RCCEx_PLL2_Config>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800625a:	e00e      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3324      	adds	r3, #36	; 0x24
 8006260:	2100      	movs	r1, #0
 8006262:	4618      	mov	r0, r3
 8006264:	f001 fcc0 	bl	8007be8 <RCCEx_PLL3_Config>
 8006268:	4603      	mov	r3, r0
 800626a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800626c:	e005      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	75fb      	strb	r3, [r7, #23]
      break;
 8006272:	e002      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006274:	bf00      	nop
 8006276:	e000      	b.n	800627a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 8006278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800627a:	7dfb      	ldrb	r3, [r7, #23]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8006280:	4b10      	ldr	r3, [pc, #64]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006282:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006284:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800628e:	490d      	ldr	r1, [pc, #52]	; (80062c4 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 8006290:	4313      	orrs	r3, r2
 8006292:	658b      	str	r3, [r1, #88]	; 0x58
 8006294:	e001      	b.n	800629a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006296:	7dfb      	ldrb	r3, [r7, #23]
 8006298:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d035      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062aa:	2b10      	cmp	r3, #16
 80062ac:	d00c      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
 80062ae:	2b10      	cmp	r3, #16
 80062b0:	d802      	bhi.n	80062b8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d01b      	beq.n	80062ee <HAL_RCCEx_PeriphCLKConfig+0x32a>
 80062b6:	e017      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d00c      	beq.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0x312>
 80062bc:	2b30      	cmp	r3, #48	; 0x30
 80062be:	d018      	beq.n	80062f2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 80062c0:	e012      	b.n	80062e8 <HAL_RCCEx_PeriphCLKConfig+0x324>
 80062c2:	bf00      	nop
 80062c4:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80062c8:	4baf      	ldr	r3, [pc, #700]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062cc:	4aae      	ldr	r2, [pc, #696]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80062d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062d4:	e00e      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	3304      	adds	r3, #4
 80062da:	2102      	movs	r1, #2
 80062dc:	4618      	mov	r0, r3
 80062de:	f001 fbd1 	bl	8007a84 <RCCEx_PLL2_Config>
 80062e2:	4603      	mov	r3, r0
 80062e4:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80062e6:	e005      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80062e8:	2301      	movs	r3, #1
 80062ea:	75fb      	strb	r3, [r7, #23]
      break;
 80062ec:	e002      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 80062f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80062f4:	7dfb      	ldrb	r3, [r7, #23]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d109      	bne.n	800630e <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80062fa:	4ba3      	ldr	r3, [pc, #652]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80062fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006306:	49a0      	ldr	r1, [pc, #640]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006308:	4313      	orrs	r3, r2
 800630a:	64cb      	str	r3, [r1, #76]	; 0x4c
 800630c:	e001      	b.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800630e:	7dfb      	ldrb	r3, [r7, #23]
 8006310:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800631a:	2b00      	cmp	r3, #0
 800631c:	d042      	beq.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006322:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006326:	d01f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 8006328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800632c:	d805      	bhi.n	800633a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00a      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x384>
 8006332:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006336:	d00e      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0x392>
 8006338:	e01f      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800633a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800633e:	d01f      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8006340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006344:	d01e      	beq.n	8006384 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 8006346:	e018      	b.n	800637a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006348:	4b8f      	ldr	r3, [pc, #572]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800634a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800634c:	4a8e      	ldr	r2, [pc, #568]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800634e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006352:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006354:	e017      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	3304      	adds	r3, #4
 800635a:	2100      	movs	r1, #0
 800635c:	4618      	mov	r0, r3
 800635e:	f001 fb91 	bl	8007a84 <RCCEx_PLL2_Config>
 8006362:	4603      	mov	r3, r0
 8006364:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006366:	e00e      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3324      	adds	r3, #36	; 0x24
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f001 fc3a 	bl	8007be8 <RCCEx_PLL3_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006378:	e005      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	75fb      	strb	r3, [r7, #23]
      break;
 800637e:	e002      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006380:	bf00      	nop
 8006382:	e000      	b.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 8006384:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006386:	7dfb      	ldrb	r3, [r7, #23]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d109      	bne.n	80063a0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800638c:	4b7e      	ldr	r3, [pc, #504]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800638e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006390:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006398:	497b      	ldr	r1, [pc, #492]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800639a:	4313      	orrs	r3, r2
 800639c:	650b      	str	r3, [r1, #80]	; 0x50
 800639e:	e001      	b.n	80063a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a0:	7dfb      	ldrb	r3, [r7, #23]
 80063a2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d042      	beq.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063b8:	d01b      	beq.n	80063f2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80063ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80063be:	d805      	bhi.n	80063cc <HAL_RCCEx_PeriphCLKConfig+0x408>
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d022      	beq.n	800640a <HAL_RCCEx_PeriphCLKConfig+0x446>
 80063c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063c8:	d00a      	beq.n	80063e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80063ca:	e01b      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x440>
 80063cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80063d0:	d01d      	beq.n	800640e <HAL_RCCEx_PeriphCLKConfig+0x44a>
 80063d2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80063d6:	d01c      	beq.n	8006412 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 80063d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80063dc:	d01b      	beq.n	8006416 <HAL_RCCEx_PeriphCLKConfig+0x452>
 80063de:	e011      	b.n	8006404 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	3304      	adds	r3, #4
 80063e4:	2101      	movs	r1, #1
 80063e6:	4618      	mov	r0, r3
 80063e8:	f001 fb4c 	bl	8007a84 <RCCEx_PLL2_Config>
 80063ec:	4603      	mov	r3, r0
 80063ee:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80063f0:	e012      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	3324      	adds	r3, #36	; 0x24
 80063f6:	2101      	movs	r1, #1
 80063f8:	4618      	mov	r0, r3
 80063fa:	f001 fbf5 	bl	8007be8 <RCCEx_PLL3_Config>
 80063fe:	4603      	mov	r3, r0
 8006400:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006402:	e009      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	75fb      	strb	r3, [r7, #23]
      break;
 8006408:	e006      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800640a:	bf00      	nop
 800640c:	e004      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800640e:	bf00      	nop
 8006410:	e002      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006412:	bf00      	nop
 8006414:	e000      	b.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 8006416:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006418:	7dfb      	ldrb	r3, [r7, #23]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d109      	bne.n	8006432 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800641e:	4b5a      	ldr	r3, [pc, #360]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800642a:	4957      	ldr	r1, [pc, #348]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800642c:	4313      	orrs	r3, r2
 800642e:	650b      	str	r3, [r1, #80]	; 0x50
 8006430:	e001      	b.n	8006436 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006432:	7dfb      	ldrb	r3, [r7, #23]
 8006434:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800643e:	2b00      	cmp	r3, #0
 8006440:	d044      	beq.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006448:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800644c:	d01b      	beq.n	8006486 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800644e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006452:	d805      	bhi.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d022      	beq.n	800649e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8006458:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800645c:	d00a      	beq.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800645e:	e01b      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 8006460:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006464:	d01d      	beq.n	80064a2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8006466:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800646a:	d01c      	beq.n	80064a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800646c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006470:	d01b      	beq.n	80064aa <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 8006472:	e011      	b.n	8006498 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	2101      	movs	r1, #1
 800647a:	4618      	mov	r0, r3
 800647c:	f001 fb02 	bl	8007a84 <RCCEx_PLL2_Config>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006484:	e012      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3324      	adds	r3, #36	; 0x24
 800648a:	2101      	movs	r1, #1
 800648c:	4618      	mov	r0, r3
 800648e:	f001 fbab 	bl	8007be8 <RCCEx_PLL3_Config>
 8006492:	4603      	mov	r3, r0
 8006494:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006496:	e009      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006498:	2301      	movs	r3, #1
 800649a:	75fb      	strb	r3, [r7, #23]
      break;
 800649c:	e006      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800649e:	bf00      	nop
 80064a0:	e004      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064a2:	bf00      	nop
 80064a4:	e002      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064a6:	bf00      	nop
 80064a8:	e000      	b.n	80064ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 80064aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10a      	bne.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80064b2:	4b35      	ldr	r3, [pc, #212]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80064b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80064c0:	4931      	ldr	r1, [pc, #196]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064c2:	4313      	orrs	r3, r2
 80064c4:	658b      	str	r3, [r1, #88]	; 0x58
 80064c6:	e001      	b.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d02d      	beq.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80064dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064e0:	d005      	beq.n	80064ee <HAL_RCCEx_PeriphCLKConfig+0x52a>
 80064e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80064e6:	d009      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0x538>
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d013      	beq.n	8006514 <HAL_RCCEx_PeriphCLKConfig+0x550>
 80064ec:	e00f      	b.n	800650e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064ee:	4b26      	ldr	r3, [pc, #152]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064f2:	4a25      	ldr	r2, [pc, #148]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 80064f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80064f8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 80064fa:	e00c      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	3304      	adds	r3, #4
 8006500:	2101      	movs	r1, #1
 8006502:	4618      	mov	r0, r3
 8006504:	f001 fabe 	bl	8007a84 <RCCEx_PLL2_Config>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800650c:	e003      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800650e:	2301      	movs	r3, #1
 8006510:	75fb      	strb	r3, [r7, #23]
      break;
 8006512:	e000      	b.n	8006516 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 8006514:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006516:	7dfb      	ldrb	r3, [r7, #23]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d109      	bne.n	8006530 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800651c:	4b1a      	ldr	r3, [pc, #104]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800651e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006520:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006528:	4917      	ldr	r1, [pc, #92]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800652a:	4313      	orrs	r3, r2
 800652c:	650b      	str	r3, [r1, #80]	; 0x50
 800652e:	e001      	b.n	8006534 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d035      	beq.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006544:	2b03      	cmp	r3, #3
 8006546:	d81b      	bhi.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 8006548:	a201      	add	r2, pc, #4	; (adr r2, 8006550 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800654a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654e:	bf00      	nop
 8006550:	0800658d 	.word	0x0800658d
 8006554:	08006561 	.word	0x08006561
 8006558:	0800656f 	.word	0x0800656f
 800655c:	0800658d 	.word	0x0800658d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006560:	4b09      	ldr	r3, [pc, #36]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006564:	4a08      	ldr	r2, [pc, #32]	; (8006588 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 8006566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800656a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800656c:	e00f      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	3304      	adds	r3, #4
 8006572:	2102      	movs	r1, #2
 8006574:	4618      	mov	r0, r3
 8006576:	f001 fa85 	bl	8007a84 <RCCEx_PLL2_Config>
 800657a:	4603      	mov	r3, r0
 800657c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800657e:	e006      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	75fb      	strb	r3, [r7, #23]
      break;
 8006584:	e003      	b.n	800658e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 8006586:	bf00      	nop
 8006588:	58024400 	.word	0x58024400
      break;
 800658c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800658e:	7dfb      	ldrb	r3, [r7, #23]
 8006590:	2b00      	cmp	r3, #0
 8006592:	d109      	bne.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006594:	4bba      	ldr	r3, [pc, #744]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006596:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006598:	f023 0203 	bic.w	r2, r3, #3
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065a0:	49b7      	ldr	r1, [pc, #732]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065a2:	4313      	orrs	r3, r2
 80065a4:	64cb      	str	r3, [r1, #76]	; 0x4c
 80065a6:	e001      	b.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a8:	7dfb      	ldrb	r3, [r7, #23]
 80065aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	f000 8086 	beq.w	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ba:	4bb2      	ldr	r3, [pc, #712]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4ab1      	ldr	r2, [pc, #708]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80065c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065c6:	f7fa ffa7 	bl	8001518 <HAL_GetTick>
 80065ca:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065cc:	e009      	b.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ce:	f7fa ffa3 	bl	8001518 <HAL_GetTick>
 80065d2:	4602      	mov	r2, r0
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	1ad3      	subs	r3, r2, r3
 80065d8:	2b64      	cmp	r3, #100	; 0x64
 80065da:	d902      	bls.n	80065e2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 80065dc:	2303      	movs	r3, #3
 80065de:	75fb      	strb	r3, [r7, #23]
        break;
 80065e0:	e005      	b.n	80065ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80065e2:	4ba8      	ldr	r3, [pc, #672]	; (8006884 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d0ef      	beq.n	80065ce <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 80065ee:	7dfb      	ldrb	r3, [r7, #23]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d166      	bne.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80065f4:	4ba2      	ldr	r3, [pc, #648]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80065f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80065fe:	4053      	eors	r3, r2
 8006600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006604:	2b00      	cmp	r3, #0
 8006606:	d013      	beq.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006608:	4b9d      	ldr	r3, [pc, #628]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800660a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800660c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006610:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006612:	4b9b      	ldr	r3, [pc, #620]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006616:	4a9a      	ldr	r2, [pc, #616]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800661c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800661e:	4b98      	ldr	r3, [pc, #608]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006622:	4a97      	ldr	r2, [pc, #604]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006628:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800662a:	4a95      	ldr	r2, [pc, #596]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800663a:	d115      	bne.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800663c:	f7fa ff6c 	bl	8001518 <HAL_GetTick>
 8006640:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006642:	e00b      	b.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006644:	f7fa ff68 	bl	8001518 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	693b      	ldr	r3, [r7, #16]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006652:	4293      	cmp	r3, r2
 8006654:	d902      	bls.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	75fb      	strb	r3, [r7, #23]
            break;
 800665a:	e005      	b.n	8006668 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800665c:	4b88      	ldr	r3, [pc, #544]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800665e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006660:	f003 0302 	and.w	r3, r3, #2
 8006664:	2b00      	cmp	r3, #0
 8006666:	d0ed      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 8006668:	7dfb      	ldrb	r3, [r7, #23]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d126      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006674:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006678:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800667c:	d10d      	bne.n	800669a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800667e:	4b80      	ldr	r3, [pc, #512]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800668c:	0919      	lsrs	r1, r3, #4
 800668e:	4b7e      	ldr	r3, [pc, #504]	; (8006888 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 8006690:	400b      	ands	r3, r1
 8006692:	497b      	ldr	r1, [pc, #492]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006694:	4313      	orrs	r3, r2
 8006696:	610b      	str	r3, [r1, #16]
 8006698:	e005      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800669a:	4b79      	ldr	r3, [pc, #484]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800669c:	691b      	ldr	r3, [r3, #16]
 800669e:	4a78      	ldr	r2, [pc, #480]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066a0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80066a4:	6113      	str	r3, [r2, #16]
 80066a6:	4b76      	ldr	r3, [pc, #472]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80066b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80066b4:	4972      	ldr	r1, [pc, #456]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80066b6:	4313      	orrs	r3, r2
 80066b8:	670b      	str	r3, [r1, #112]	; 0x70
 80066ba:	e004      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066bc:	7dfb      	ldrb	r3, [r7, #23]
 80066be:	75bb      	strb	r3, [r7, #22]
 80066c0:	e001      	b.n	80066c6 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066c2:	7dfb      	ldrb	r3, [r7, #23]
 80066c4:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d07d      	beq.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80066d6:	2b28      	cmp	r3, #40	; 0x28
 80066d8:	d866      	bhi.n	80067a8 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 80066da:	a201      	add	r2, pc, #4	; (adr r2, 80066e0 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80066dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066e0:	080067af 	.word	0x080067af
 80066e4:	080067a9 	.word	0x080067a9
 80066e8:	080067a9 	.word	0x080067a9
 80066ec:	080067a9 	.word	0x080067a9
 80066f0:	080067a9 	.word	0x080067a9
 80066f4:	080067a9 	.word	0x080067a9
 80066f8:	080067a9 	.word	0x080067a9
 80066fc:	080067a9 	.word	0x080067a9
 8006700:	08006785 	.word	0x08006785
 8006704:	080067a9 	.word	0x080067a9
 8006708:	080067a9 	.word	0x080067a9
 800670c:	080067a9 	.word	0x080067a9
 8006710:	080067a9 	.word	0x080067a9
 8006714:	080067a9 	.word	0x080067a9
 8006718:	080067a9 	.word	0x080067a9
 800671c:	080067a9 	.word	0x080067a9
 8006720:	08006797 	.word	0x08006797
 8006724:	080067a9 	.word	0x080067a9
 8006728:	080067a9 	.word	0x080067a9
 800672c:	080067a9 	.word	0x080067a9
 8006730:	080067a9 	.word	0x080067a9
 8006734:	080067a9 	.word	0x080067a9
 8006738:	080067a9 	.word	0x080067a9
 800673c:	080067a9 	.word	0x080067a9
 8006740:	080067af 	.word	0x080067af
 8006744:	080067a9 	.word	0x080067a9
 8006748:	080067a9 	.word	0x080067a9
 800674c:	080067a9 	.word	0x080067a9
 8006750:	080067a9 	.word	0x080067a9
 8006754:	080067a9 	.word	0x080067a9
 8006758:	080067a9 	.word	0x080067a9
 800675c:	080067a9 	.word	0x080067a9
 8006760:	080067af 	.word	0x080067af
 8006764:	080067a9 	.word	0x080067a9
 8006768:	080067a9 	.word	0x080067a9
 800676c:	080067a9 	.word	0x080067a9
 8006770:	080067a9 	.word	0x080067a9
 8006774:	080067a9 	.word	0x080067a9
 8006778:	080067a9 	.word	0x080067a9
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067af 	.word	0x080067af
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	2101      	movs	r1, #1
 800678a:	4618      	mov	r0, r3
 800678c:	f001 f97a 	bl	8007a84 <RCCEx_PLL2_Config>
 8006790:	4603      	mov	r3, r0
 8006792:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006794:	e00c      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3324      	adds	r3, #36	; 0x24
 800679a:	2101      	movs	r1, #1
 800679c:	4618      	mov	r0, r3
 800679e:	f001 fa23 	bl	8007be8 <RCCEx_PLL3_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80067a6:	e003      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	75fb      	strb	r3, [r7, #23]
      break;
 80067ac:	e000      	b.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 80067ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067b0:	7dfb      	ldrb	r3, [r7, #23]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d109      	bne.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80067b6:	4b32      	ldr	r3, [pc, #200]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067ba:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80067c2:	492f      	ldr	r1, [pc, #188]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 80067c4:	4313      	orrs	r3, r2
 80067c6:	654b      	str	r3, [r1, #84]	; 0x54
 80067c8:	e001      	b.n	80067ce <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f003 0302 	and.w	r3, r3, #2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d037      	beq.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80067de:	2b05      	cmp	r3, #5
 80067e0:	d820      	bhi.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x860>
 80067e2:	a201      	add	r2, pc, #4	; (adr r2, 80067e8 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 80067e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067e8:	0800682b 	.word	0x0800682b
 80067ec:	08006801 	.word	0x08006801
 80067f0:	08006813 	.word	0x08006813
 80067f4:	0800682b 	.word	0x0800682b
 80067f8:	0800682b 	.word	0x0800682b
 80067fc:	0800682b 	.word	0x0800682b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	3304      	adds	r3, #4
 8006804:	2101      	movs	r1, #1
 8006806:	4618      	mov	r0, r3
 8006808:	f001 f93c 	bl	8007a84 <RCCEx_PLL2_Config>
 800680c:	4603      	mov	r3, r0
 800680e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006810:	e00c      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	3324      	adds	r3, #36	; 0x24
 8006816:	2101      	movs	r1, #1
 8006818:	4618      	mov	r0, r3
 800681a:	f001 f9e5 	bl	8007be8 <RCCEx_PLL3_Config>
 800681e:	4603      	mov	r3, r0
 8006820:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006822:	e003      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	75fb      	strb	r3, [r7, #23]
      break;
 8006828:	e000      	b.n	800682c <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800682a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800682c:	7dfb      	ldrb	r3, [r7, #23]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d109      	bne.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006832:	4b13      	ldr	r3, [pc, #76]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006836:	f023 0207 	bic.w	r2, r3, #7
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800683e:	4910      	ldr	r1, [pc, #64]	; (8006880 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 8006840:	4313      	orrs	r3, r2
 8006842:	654b      	str	r3, [r1, #84]	; 0x54
 8006844:	e001      	b.n	800684a <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006846:	7dfb      	ldrb	r3, [r7, #23]
 8006848:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b00      	cmp	r3, #0
 8006854:	d040      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685c:	2b05      	cmp	r3, #5
 800685e:	d827      	bhi.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 8006860:	a201      	add	r2, pc, #4	; (adr r2, 8006868 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 8006862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006866:	bf00      	nop
 8006868:	080068b7 	.word	0x080068b7
 800686c:	0800688d 	.word	0x0800688d
 8006870:	0800689f 	.word	0x0800689f
 8006874:	080068b7 	.word	0x080068b7
 8006878:	080068b7 	.word	0x080068b7
 800687c:	080068b7 	.word	0x080068b7
 8006880:	58024400 	.word	0x58024400
 8006884:	58024800 	.word	0x58024800
 8006888:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	3304      	adds	r3, #4
 8006890:	2101      	movs	r1, #1
 8006892:	4618      	mov	r0, r3
 8006894:	f001 f8f6 	bl	8007a84 <RCCEx_PLL2_Config>
 8006898:	4603      	mov	r3, r0
 800689a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800689c:	e00c      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	3324      	adds	r3, #36	; 0x24
 80068a2:	2101      	movs	r1, #1
 80068a4:	4618      	mov	r0, r3
 80068a6:	f001 f99f 	bl	8007be8 <RCCEx_PLL3_Config>
 80068aa:	4603      	mov	r3, r0
 80068ac:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80068ae:	e003      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	75fb      	strb	r3, [r7, #23]
      break;
 80068b4:	e000      	b.n	80068b8 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 80068b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068b8:	7dfb      	ldrb	r3, [r7, #23]
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d10a      	bne.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80068be:	4bb2      	ldr	r3, [pc, #712]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	f023 0207 	bic.w	r2, r3, #7
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068cc:	49ae      	ldr	r1, [pc, #696]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80068ce:	4313      	orrs	r3, r2
 80068d0:	658b      	str	r3, [r1, #88]	; 0x58
 80068d2:	e001      	b.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068d4:	7dfb      	ldrb	r3, [r7, #23]
 80068d6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f003 0320 	and.w	r3, r3, #32
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d044      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80068ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068ee:	d01b      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x964>
 80068f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80068f4:	d805      	bhi.n	8006902 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d022      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 80068fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80068fe:	d00a      	beq.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x952>
 8006900:	e01b      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x976>
 8006902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006906:	d01d      	beq.n	8006944 <HAL_RCCEx_PeriphCLKConfig+0x980>
 8006908:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800690c:	d01c      	beq.n	8006948 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800690e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006912:	d01b      	beq.n	800694c <HAL_RCCEx_PeriphCLKConfig+0x988>
 8006914:	e011      	b.n	800693a <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	3304      	adds	r3, #4
 800691a:	2100      	movs	r1, #0
 800691c:	4618      	mov	r0, r3
 800691e:	f001 f8b1 	bl	8007a84 <RCCEx_PLL2_Config>
 8006922:	4603      	mov	r3, r0
 8006924:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006926:	e012      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	3324      	adds	r3, #36	; 0x24
 800692c:	2102      	movs	r1, #2
 800692e:	4618      	mov	r0, r3
 8006930:	f001 f95a 	bl	8007be8 <RCCEx_PLL3_Config>
 8006934:	4603      	mov	r3, r0
 8006936:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006938:	e009      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800693a:	2301      	movs	r3, #1
 800693c:	75fb      	strb	r3, [r7, #23]
      break;
 800693e:	e006      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006940:	bf00      	nop
 8006942:	e004      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006944:	bf00      	nop
 8006946:	e002      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 8006948:	bf00      	nop
 800694a:	e000      	b.n	800694e <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800694c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10a      	bne.n	800696a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006954:	4b8c      	ldr	r3, [pc, #560]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006958:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006962:	4989      	ldr	r1, [pc, #548]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006964:	4313      	orrs	r3, r2
 8006966:	654b      	str	r3, [r1, #84]	; 0x54
 8006968:	e001      	b.n	800696e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006976:	2b00      	cmp	r3, #0
 8006978:	d044      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006980:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006984:	d01b      	beq.n	80069be <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 8006986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800698a:	d805      	bhi.n	8006998 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800698c:	2b00      	cmp	r3, #0
 800698e:	d022      	beq.n	80069d6 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 8006990:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006994:	d00a      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 8006996:	e01b      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 8006998:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800699c:	d01d      	beq.n	80069da <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800699e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80069a2:	d01c      	beq.n	80069de <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 80069a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80069a8:	d01b      	beq.n	80069e2 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 80069aa:	e011      	b.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	3304      	adds	r3, #4
 80069b0:	2100      	movs	r1, #0
 80069b2:	4618      	mov	r0, r3
 80069b4:	f001 f866 	bl	8007a84 <RCCEx_PLL2_Config>
 80069b8:	4603      	mov	r3, r0
 80069ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069bc:	e012      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3324      	adds	r3, #36	; 0x24
 80069c2:	2102      	movs	r1, #2
 80069c4:	4618      	mov	r0, r3
 80069c6:	f001 f90f 	bl	8007be8 <RCCEx_PLL3_Config>
 80069ca:	4603      	mov	r3, r0
 80069cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80069ce:	e009      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	75fb      	strb	r3, [r7, #23]
      break;
 80069d4:	e006      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069d6:	bf00      	nop
 80069d8:	e004      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069da:	bf00      	nop
 80069dc:	e002      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069de:	bf00      	nop
 80069e0:	e000      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 80069e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069e4:	7dfb      	ldrb	r3, [r7, #23]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d10a      	bne.n	8006a00 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80069ea:	4b67      	ldr	r3, [pc, #412]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80069f8:	4963      	ldr	r1, [pc, #396]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 80069fa:	4313      	orrs	r3, r2
 80069fc:	658b      	str	r3, [r1, #88]	; 0x58
 80069fe:	e001      	b.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a00:	7dfb      	ldrb	r3, [r7, #23]
 8006a02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d044      	beq.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a1a:	d01b      	beq.n	8006a54 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 8006a1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a20:	d805      	bhi.n	8006a2e <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d022      	beq.n	8006a6c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 8006a26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a2a:	d00a      	beq.n	8006a42 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006a2c:	e01b      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 8006a2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a32:	d01d      	beq.n	8006a70 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006a34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006a38:	d01c      	beq.n	8006a74 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 8006a3a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8006a3e:	d01b      	beq.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006a40:	e011      	b.n	8006a66 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	3304      	adds	r3, #4
 8006a46:	2100      	movs	r1, #0
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f001 f81b 	bl	8007a84 <RCCEx_PLL2_Config>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a52:	e012      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3324      	adds	r3, #36	; 0x24
 8006a58:	2102      	movs	r1, #2
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f001 f8c4 	bl	8007be8 <RCCEx_PLL3_Config>
 8006a60:	4603      	mov	r3, r0
 8006a62:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006a64:	e009      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a66:	2301      	movs	r3, #1
 8006a68:	75fb      	strb	r3, [r7, #23]
      break;
 8006a6a:	e006      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a6c:	bf00      	nop
 8006a6e:	e004      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a70:	bf00      	nop
 8006a72:	e002      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a74:	bf00      	nop
 8006a76:	e000      	b.n	8006a7a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 8006a78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a7a:	7dfb      	ldrb	r3, [r7, #23]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10a      	bne.n	8006a96 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006a80:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a8e:	493e      	ldr	r1, [pc, #248]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006a90:	4313      	orrs	r3, r2
 8006a92:	658b      	str	r3, [r1, #88]	; 0x58
 8006a94:	e001      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a96:	7dfb      	ldrb	r3, [r7, #23]
 8006a98:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0308 	and.w	r3, r3, #8
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d01a      	beq.n	8006adc <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ab0:	d10a      	bne.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	3324      	adds	r3, #36	; 0x24
 8006ab6:	2102      	movs	r1, #2
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 f895 	bl	8007be8 <RCCEx_PLL3_Config>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d001      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8006ac8:	4b2f      	ldr	r3, [pc, #188]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006aca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006acc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ad6:	492c      	ldr	r1, [pc, #176]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01a      	beq.n	8006b1e <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006aee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006af2:	d10a      	bne.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	3324      	adds	r3, #36	; 0x24
 8006af8:	2102      	movs	r1, #2
 8006afa:	4618      	mov	r0, r3
 8006afc:	f001 f874 	bl	8007be8 <RCCEx_PLL3_Config>
 8006b00:	4603      	mov	r3, r0
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d001      	beq.n	8006b0a <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 8006b06:	2301      	movs	r3, #1
 8006b08:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006b0a:	4b1f      	ldr	r3, [pc, #124]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b0e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b18:	491b      	ldr	r1, [pc, #108]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d032      	beq.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b34:	d00d      	beq.n	8006b52 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 8006b36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b3a:	d016      	beq.n	8006b6a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d111      	bne.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	3304      	adds	r3, #4
 8006b44:	2100      	movs	r1, #0
 8006b46:	4618      	mov	r0, r3
 8006b48:	f000 ff9c 	bl	8007a84 <RCCEx_PLL2_Config>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b50:	e00c      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	3324      	adds	r3, #36	; 0x24
 8006b56:	2102      	movs	r1, #2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f001 f845 	bl	8007be8 <RCCEx_PLL3_Config>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8006b62:	e003      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	75fb      	strb	r3, [r7, #23]
      break;
 8006b68:	e000      	b.n	8006b6c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 8006b6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b6c:	7dfb      	ldrb	r3, [r7, #23]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d10c      	bne.n	8006b8c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006b72:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b76:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006b80:	4901      	ldr	r1, [pc, #4]	; (8006b88 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 8006b82:	4313      	orrs	r3, r2
 8006b84:	658b      	str	r3, [r1, #88]	; 0x58
 8006b86:	e003      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 8006b88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b8c:	7dfb      	ldrb	r3, [r7, #23]
 8006b8e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d02f      	beq.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ba2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ba6:	d00c      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8006ba8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006bac:	d015      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0xc16>
 8006bae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bb2:	d10f      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006bb4:	4b79      	ldr	r3, [pc, #484]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bb8:	4a78      	ldr	r2, [pc, #480]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006bba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006bbe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bc0:	e00c      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f80d 	bl	8007be8 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006bd2:	e003      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e000      	b.n	8006bdc <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 8006bda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006bdc:	7dfb      	ldrb	r3, [r7, #23]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d10a      	bne.n	8006bf8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006be2:	4b6e      	ldr	r3, [pc, #440]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006be4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006be6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bf0:	496a      	ldr	r1, [pc, #424]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006bf2:	4313      	orrs	r3, r2
 8006bf4:	654b      	str	r3, [r1, #84]	; 0x54
 8006bf6:	e001      	b.n	8006bfc <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d029      	beq.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d003      	beq.n	8006c18 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 8006c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006c14:	d007      	beq.n	8006c26 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 8006c16:	e00f      	b.n	8006c38 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c18:	4b60      	ldr	r3, [pc, #384]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	4a5f      	ldr	r2, [pc, #380]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c22:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c24:	e00b      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	3304      	adds	r3, #4
 8006c2a:	2102      	movs	r1, #2
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	f000 ff29 	bl	8007a84 <RCCEx_PLL2_Config>
 8006c32:	4603      	mov	r3, r0
 8006c34:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8006c36:	e002      	b.n	8006c3e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c3e:	7dfb      	ldrb	r3, [r7, #23]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d109      	bne.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006c44:	4b55      	ldr	r3, [pc, #340]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c48:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c50:	4952      	ldr	r1, [pc, #328]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006c52:	4313      	orrs	r3, r2
 8006c54:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006c56:	e001      	b.n	8006c5c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d00a      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	3324      	adds	r3, #36	; 0x24
 8006c6c:	2102      	movs	r1, #2
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f000 ffba 	bl	8007be8 <RCCEx_PLL3_Config>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d001      	beq.n	8006c7e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 8006c7a:	2301      	movs	r3, #1
 8006c7c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d02f      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006c8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c92:	d00c      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8006c94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006c98:	d802      	bhi.n	8006ca0 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d011      	beq.n	8006cc2 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 8006c9e:	e00d      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 8006ca0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ca4:	d00f      	beq.n	8006cc6 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 8006ca6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006caa:	d00e      	beq.n	8006cca <HAL_RCCEx_PeriphCLKConfig+0xd06>
 8006cac:	e006      	b.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006cae:	4b3b      	ldr	r3, [pc, #236]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cb2:	4a3a      	ldr	r2, [pc, #232]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8006cba:	e007      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc0:	e004      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006cc2:	bf00      	nop
 8006cc4:	e002      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006cc6:	bf00      	nop
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 8006cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006cd2:	4b32      	ldr	r3, [pc, #200]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006cde:	492f      	ldr	r1, [pc, #188]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	654b      	str	r3, [r1, #84]	; 0x54
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d008      	beq.n	8006d08 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006cf6:	4b29      	ldr	r3, [pc, #164]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006cf8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cfa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d02:	4926      	ldr	r1, [pc, #152]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d009      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8006d14:	4b21      	ldr	r3, [pc, #132]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d16:	691b      	ldr	r3, [r3, #16]
 8006d18:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8006d22:	491e      	ldr	r1, [pc, #120]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d24:	4313      	orrs	r3, r2
 8006d26:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8006d34:	4b19      	ldr	r3, [pc, #100]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d38:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d40:	4916      	ldr	r1, [pc, #88]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d42:	4313      	orrs	r3, r2
 8006d44:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d00d      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d52:	4b12      	ldr	r3, [pc, #72]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	4a11      	ldr	r2, [pc, #68]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d58:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d5c:	6113      	str	r3, [r2, #16]
 8006d5e:	4b0f      	ldr	r3, [pc, #60]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d60:	691a      	ldr	r2, [r3, #16]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8006d68:	490c      	ldr	r1, [pc, #48]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	da08      	bge.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006d76:	4b09      	ldr	r3, [pc, #36]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d82:	4906      	ldr	r1, [pc, #24]	; (8006d9c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 8006d84:	4313      	orrs	r3, r2
 8006d86:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 8006d88:	7dbb      	ldrb	r3, [r7, #22]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d101      	bne.n	8006d92 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	58024400 	.word	0x58024400

08006da0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b090      	sub	sp, #64	; 0x40
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dae:	d150      	bne.n	8006e52 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8006db0:	4ba1      	ldr	r3, [pc, #644]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db4:	f003 0307 	and.w	r3, r3, #7
 8006db8:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	2b04      	cmp	r3, #4
 8006dbe:	d844      	bhi.n	8006e4a <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 8006dc0:	a201      	add	r2, pc, #4	; (adr r2, 8006dc8 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 8006dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc6:	bf00      	nop
 8006dc8:	08006ddd 	.word	0x08006ddd
 8006dcc:	08006ded 	.word	0x08006ded
 8006dd0:	08006dfd 	.word	0x08006dfd
 8006dd4:	08006e45 	.word	0x08006e45
 8006dd8:	08006e0d 	.word	0x08006e0d
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006ddc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006de0:	4618      	mov	r0, r3
 8006de2:	f000 fd03 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dea:	e241      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006dec:	f107 0318 	add.w	r3, r7, #24
 8006df0:	4618      	mov	r0, r3
 8006df2:	f000 fa63 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006dfa:	e239      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006dfc:	f107 030c 	add.w	r3, r7, #12
 8006e00:	4618      	mov	r0, r3
 8006e02:	f000 fba7 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e0a:	e231      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006e0c:	4b8a      	ldr	r3, [pc, #552]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e10:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006e14:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d102      	bne.n	8006e22 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006e1c:	4b87      	ldr	r3, [pc, #540]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006e20:	e226      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006e28:	d102      	bne.n	8006e30 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 8006e2a:	4b85      	ldr	r3, [pc, #532]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e2e:	e21f      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006e36:	d102      	bne.n	8006e3e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 8006e38:	4b82      	ldr	r3, [pc, #520]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006e3a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e3c:	e218      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e42:	e215      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006e44:	4b80      	ldr	r3, [pc, #512]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006e46:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e48:	e212      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e4e:	bf00      	nop
 8006e50:	e20e      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e58:	d14f      	bne.n	8006efa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8006e5a:	4b77      	ldr	r3, [pc, #476]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e66:	2b80      	cmp	r3, #128	; 0x80
 8006e68:	d01c      	beq.n	8006ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8006e6a:	2b80      	cmp	r3, #128	; 0x80
 8006e6c:	d804      	bhi.n	8006e78 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d008      	beq.n	8006e84 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d00e      	beq.n	8006e94 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 8006e76:	e03c      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 8006e78:	2bc0      	cmp	r3, #192	; 0xc0
 8006e7a:	d037      	beq.n	8006eec <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 8006e7c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e80:	d018      	beq.n	8006eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 8006e82:	e036      	b.n	8006ef2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fcaf 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006e92:	e1ed      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006e94:	f107 0318 	add.w	r3, r7, #24
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f000 fa0f 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ea2:	e1e5      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006ea4:	f107 030c 	add.w	r3, r7, #12
 8006ea8:	4618      	mov	r0, r3
 8006eaa:	f000 fb53 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eb2:	e1dd      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006eb4:	4b60      	ldr	r3, [pc, #384]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eb8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006ebc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d102      	bne.n	8006eca <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006ec4:	4b5d      	ldr	r3, [pc, #372]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006ec8:	e1d2      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ecc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed0:	d102      	bne.n	8006ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 8006ed2:	4b5b      	ldr	r3, [pc, #364]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006ed4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ed6:	e1cb      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ede:	d102      	bne.n	8006ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 8006ee0:	4b58      	ldr	r3, [pc, #352]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006ee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ee4:	e1c4      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006eea:	e1c1      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006eec:	4b56      	ldr	r3, [pc, #344]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006eee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef0:	e1be      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ef6:	bf00      	nop
 8006ef8:	e1ba      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f00:	d153      	bne.n	8006faa <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8006f02:	4b4d      	ldr	r3, [pc, #308]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f06:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8006f0a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f0e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f12:	d01f      	beq.n	8006f54 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 8006f14:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006f18:	d805      	bhi.n	8006f26 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 8006f1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f22:	d00f      	beq.n	8006f44 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 8006f24:	e03d      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 8006f26:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006f2a:	d037      	beq.n	8006f9c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 8006f2c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006f30:	d018      	beq.n	8006f64 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 8006f32:	e036      	b.n	8006fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f38:	4618      	mov	r0, r3
 8006f3a:	f000 fc57 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006f3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f40:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f42:	e195      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006f44:	f107 0318 	add.w	r3, r7, #24
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 f9b7 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006f4e:	69bb      	ldr	r3, [r7, #24]
 8006f50:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f52:	e18d      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006f54:	f107 030c 	add.w	r3, r7, #12
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f000 fafb 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f62:	e185      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8006f64:	4b34      	ldr	r3, [pc, #208]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f68:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006f6c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d102      	bne.n	8006f7a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8006f74:	4b31      	ldr	r3, [pc, #196]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8006f76:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8006f78:	e17a      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8006f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006f80:	d102      	bne.n	8006f88 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 8006f82:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8006f84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f86:	e173      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8006f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f8e:	d102      	bne.n	8006f96 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 8006f90:	4b2c      	ldr	r3, [pc, #176]	; (8007044 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8006f92:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f94:	e16c      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8006f96:	2300      	movs	r3, #0
 8006f98:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006f9a:	e169      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8006f9c:	4b2a      	ldr	r3, [pc, #168]	; (8007048 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 8006f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa0:	e166      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006fa6:	bf00      	nop
 8006fa8:	e162      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006fb0:	d15d      	bne.n	800706e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8006fb2:	4b21      	ldr	r3, [pc, #132]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8006fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fb6:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8006fba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8006fbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc2:	d01f      	beq.n	8007004 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8006fc4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006fc8:	d805      	bhi.n	8006fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8006fce:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006fd2:	d00f      	beq.n	8006ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 8006fd4:	e047      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 8006fd6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006fda:	d041      	beq.n	8007060 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 8006fdc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006fe0:	d018      	beq.n	8007014 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 8006fe2:	e040      	b.n	8007066 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8006fe4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fbff 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8006fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8006ff2:	e13d      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006ff4:	f107 0318 	add.w	r3, r7, #24
 8006ff8:	4618      	mov	r0, r3
 8006ffa:	f000 f95f 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8006ffe:	69bb      	ldr	r3, [r7, #24]
 8007000:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007002:	e135      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007004:	f107 030c 	add.w	r3, r7, #12
 8007008:	4618      	mov	r0, r3
 800700a:	f000 faa3 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007012:	e12d      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007014:	4b08      	ldr	r3, [pc, #32]	; (8007038 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8007016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007018:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800701c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800701e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007020:	2b00      	cmp	r3, #0
 8007022:	d102      	bne.n	800702a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007024:	4b05      	ldr	r3, [pc, #20]	; (800703c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8007026:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007028:	e122      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800702a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800702c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007030:	d10c      	bne.n	800704c <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 8007032:	4b03      	ldr	r3, [pc, #12]	; (8007040 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8007034:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007036:	e11b      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8007038:	58024400 	.word	0x58024400
 800703c:	03d09000 	.word	0x03d09000
 8007040:	003d0900 	.word	0x003d0900
 8007044:	017d7840 	.word	0x017d7840
 8007048:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800704c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800704e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007052:	d102      	bne.n	800705a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 8007054:	4b89      	ldr	r3, [pc, #548]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007058:	e10a      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800705e:	e107      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007060:	4b87      	ldr	r3, [pc, #540]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007062:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007064:	e104      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 8007066:	2300      	movs	r3, #0
 8007068:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800706a:	bf00      	nop
 800706c:	e100      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d153      	bne.n	800711e <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8007076:	4b83      	ldr	r3, [pc, #524]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007078:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800707a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800707e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007086:	d01f      	beq.n	80070c8 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8007088:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800708c:	d805      	bhi.n	800709a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00a      	beq.n	80070a8 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 8007092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007096:	d00f      	beq.n	80070b8 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8007098:	e03d      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800709a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800709e:	d037      	beq.n	8007110 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 80070a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80070a4:	d018      	beq.n	80070d8 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80070a6:	e036      	b.n	8007116 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80070a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 fb9d 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070b6:	e0db      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80070b8:	f107 0318 	add.w	r3, r7, #24
 80070bc:	4618      	mov	r0, r3
 80070be:	f000 f8fd 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80070c2:	69bb      	ldr	r3, [r7, #24]
 80070c4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070c6:	e0d3      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80070c8:	f107 030c 	add.w	r3, r7, #12
 80070cc:	4618      	mov	r0, r3
 80070ce:	f000 fa41 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070d6:	e0cb      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 80070d8:	4b6a      	ldr	r3, [pc, #424]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80070da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80070dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80070e0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 80070e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d102      	bne.n	80070ee <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 80070e8:	4b67      	ldr	r3, [pc, #412]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 80070ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 80070ec:	e0c0      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 80070ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80070f4:	d102      	bne.n	80070fc <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 80070f6:	4b65      	ldr	r3, [pc, #404]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 80070f8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80070fa:	e0b9      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 80070fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007102:	d102      	bne.n	800710a <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 8007104:	4b5d      	ldr	r3, [pc, #372]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007106:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007108:	e0b2      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800710a:	2300      	movs	r3, #0
 800710c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800710e:	e0af      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8007110:	4b5b      	ldr	r3, [pc, #364]	; (8007280 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 8007112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007114:	e0ac      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 8007116:	2300      	movs	r3, #0
 8007118:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800711a:	bf00      	nop
 800711c:	e0a8      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8007124:	d13d      	bne.n	80071a2 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 8007126:	4b57      	ldr	r3, [pc, #348]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800712a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800712e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8007130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007132:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007136:	d00c      	beq.n	8007152 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 8007138:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800713c:	d011      	beq.n	8007162 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800713e:	2b00      	cmp	r3, #0
 8007140:	d12b      	bne.n	800719a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007142:	f107 0318 	add.w	r3, r7, #24
 8007146:	4618      	mov	r0, r3
 8007148:	f000 f8b8 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800714c:	69bb      	ldr	r3, [r7, #24]
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007150:	e08e      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007152:	f107 030c 	add.w	r3, r7, #12
 8007156:	4618      	mov	r0, r3
 8007158:	f000 f9fc 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007160:	e086      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8007162:	4b48      	ldr	r3, [pc, #288]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800716a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800716c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716e:	2b00      	cmp	r3, #0
 8007170:	d102      	bne.n	8007178 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 8007172:	4b45      	ldr	r3, [pc, #276]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007174:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 8007176:	e07b      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 8007178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800717a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800717e:	d102      	bne.n	8007186 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 8007180:	4b42      	ldr	r3, [pc, #264]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007184:	e074      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 8007186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718c:	d102      	bne.n	8007194 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800718e:	4b3b      	ldr	r3, [pc, #236]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007190:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007192:	e06d      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 8007194:	2300      	movs	r3, #0
 8007196:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007198:	e06a      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800719a:	2300      	movs	r3, #0
 800719c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800719e:	bf00      	nop
 80071a0:	e066      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071a8:	d11f      	bne.n	80071ea <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 80071aa:	4b36      	ldr	r3, [pc, #216]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071b2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80071ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071be:	d008      	beq.n	80071d2 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 80071c0:	e00f      	b.n	80071e2 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80071c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071c6:	4618      	mov	r0, r3
 80071c8:	f000 fb10 	bl	80077ec <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071d0:	e04e      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80071d2:	f107 0318 	add.w	r3, r7, #24
 80071d6:	4618      	mov	r0, r3
 80071d8:	f000 f870 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80071dc:	6a3b      	ldr	r3, [r7, #32]
 80071de:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e0:	e046      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 80071e2:	2300      	movs	r3, #0
 80071e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 80071e6:	bf00      	nop
 80071e8:	e042      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071f0:	d13c      	bne.n	800726c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 80071f2:	4b24      	ldr	r3, [pc, #144]	; (8007284 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 80071fa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 80071fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007202:	d01e      	beq.n	8007242 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 8007204:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007208:	d805      	bhi.n	8007216 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800720a:	2b00      	cmp	r3, #0
 800720c:	d00d      	beq.n	800722a <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800720e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007212:	d00e      	beq.n	8007232 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 8007214:	e026      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 8007216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800721a:	d01d      	beq.n	8007258 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800721c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007220:	d01d      	beq.n	800725e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8007222:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007226:	d014      	beq.n	8007252 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8007228:	e01c      	b.n	8007264 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800722a:	f000 f831 	bl	8007290 <HAL_RCCEx_GetD3PCLK1Freq>
 800722e:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8007230:	e01e      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007232:	f107 0318 	add.w	r3, r7, #24
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f840 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007240:	e016      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007242:	f107 030c 	add.w	r3, r7, #12
 8007246:	4618      	mov	r0, r3
 8007248:	f000 f984 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007250:	e00e      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 8007252:	4b0d      	ldr	r3, [pc, #52]	; (8007288 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 8007254:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007256:	e00b      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 8007258:	4b0c      	ldr	r3, [pc, #48]	; (800728c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800725a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800725c:	e008      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800725e:	4b07      	ldr	r3, [pc, #28]	; (800727c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 8007260:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007262:	e005      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 8007264:	2300      	movs	r3, #0
 8007266:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8007268:	bf00      	nop
 800726a:	e001      	b.n	8007270 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800726c:	2300      	movs	r3, #0
 800726e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 8007270:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007272:	4618      	mov	r0, r3
 8007274:	3740      	adds	r7, #64	; 0x40
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}
 800727a:	bf00      	nop
 800727c:	017d7840 	.word	0x017d7840
 8007280:	00bb8000 	.word	0x00bb8000
 8007284:	58024400 	.word	0x58024400
 8007288:	03d09000 	.word	0x03d09000
 800728c:	003d0900 	.word	0x003d0900

08007290 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8007294:	f7fe fe3a 	bl	8005f0c <HAL_RCC_GetHCLKFreq>
 8007298:	4601      	mov	r1, r0
 800729a:	4b06      	ldr	r3, [pc, #24]	; (80072b4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	091b      	lsrs	r3, r3, #4
 80072a0:	f003 0307 	and.w	r3, r3, #7
 80072a4:	4a04      	ldr	r2, [pc, #16]	; (80072b8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80072a6:	5cd3      	ldrb	r3, [r2, r3]
 80072a8:	f003 031f 	and.w	r3, r3, #31
 80072ac:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	bd80      	pop	{r7, pc}
 80072b4:	58024400 	.word	0x58024400
 80072b8:	08010528 	.word	0x08010528

080072bc <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80072bc:	b480      	push	{r7}
 80072be:	b089      	sub	sp, #36	; 0x24
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80072c4:	4b9d      	ldr	r3, [pc, #628]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c8:	f003 0303 	and.w	r3, r3, #3
 80072cc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80072ce:	4b9b      	ldr	r3, [pc, #620]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d2:	0b1b      	lsrs	r3, r3, #12
 80072d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80072d8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80072da:	4b98      	ldr	r3, [pc, #608]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072de:	091b      	lsrs	r3, r3, #4
 80072e0:	f003 0301 	and.w	r3, r3, #1
 80072e4:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80072e6:	4b95      	ldr	r3, [pc, #596]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80072e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072ea:	08db      	lsrs	r3, r3, #3
 80072ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80072f0:	693a      	ldr	r2, [r7, #16]
 80072f2:	fb02 f303 	mul.w	r3, r2, r3
 80072f6:	ee07 3a90 	vmov	s15, r3
 80072fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80072fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	f000 810a 	beq.w	800751e <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800730a:	69bb      	ldr	r3, [r7, #24]
 800730c:	2b01      	cmp	r3, #1
 800730e:	d05a      	beq.n	80073c6 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 8007310:	2b01      	cmp	r3, #1
 8007312:	d302      	bcc.n	800731a <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 8007314:	2b02      	cmp	r3, #2
 8007316:	d078      	beq.n	800740a <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 8007318:	e099      	b.n	800744e <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800731a:	4b88      	ldr	r3, [pc, #544]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	f003 0320 	and.w	r3, r3, #32
 8007322:	2b00      	cmp	r3, #0
 8007324:	d02d      	beq.n	8007382 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007326:	4b85      	ldr	r3, [pc, #532]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	08db      	lsrs	r3, r3, #3
 800732c:	f003 0303 	and.w	r3, r3, #3
 8007330:	4a83      	ldr	r2, [pc, #524]	; (8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 8007332:	fa22 f303 	lsr.w	r3, r2, r3
 8007336:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	ee07 3a90 	vmov	s15, r3
 800733e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	ee07 3a90 	vmov	s15, r3
 8007348:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800734c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007350:	4b7a      	ldr	r3, [pc, #488]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007358:	ee07 3a90 	vmov	s15, r3
 800735c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007360:	ed97 6a03 	vldr	s12, [r7, #12]
 8007364:	eddf 5a77 	vldr	s11, [pc, #476]	; 8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007368:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800736c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007370:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007374:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800737c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007380:	e087      	b.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	ee07 3a90 	vmov	s15, r3
 8007388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800738c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8007548 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 8007390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007394:	4b69      	ldr	r3, [pc, #420]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800739c:	ee07 3a90 	vmov	s15, r3
 80073a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a4:	ed97 6a03 	vldr	s12, [r7, #12]
 80073a8:	eddf 5a66 	vldr	s11, [pc, #408]	; 8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073c0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80073c4:	e065      	b.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	ee07 3a90 	vmov	s15, r3
 80073cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073d0:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 80073d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073d8:	4b58      	ldr	r3, [pc, #352]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80073da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073e0:	ee07 3a90 	vmov	s15, r3
 80073e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073e8:	ed97 6a03 	vldr	s12, [r7, #12]
 80073ec:	eddf 5a55 	vldr	s11, [pc, #340]	; 8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 80073f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007400:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007404:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007408:	e043      	b.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	ee07 3a90 	vmov	s15, r3
 8007410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007414:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8007550 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 8007418:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800741c:	4b47      	ldr	r3, [pc, #284]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800741e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007420:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007424:	ee07 3a90 	vmov	s15, r3
 8007428:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800742c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007430:	eddf 5a44 	vldr	s11, [pc, #272]	; 8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007434:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007438:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800743c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007440:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007444:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007448:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800744c:	e021      	b.n	8007492 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	ee07 3a90 	vmov	s15, r3
 8007454:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007458:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800754c <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800745c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007460:	4b36      	ldr	r3, [pc, #216]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007462:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007468:	ee07 3a90 	vmov	s15, r3
 800746c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007470:	ed97 6a03 	vldr	s12, [r7, #12]
 8007474:	eddf 5a33 	vldr	s11, [pc, #204]	; 8007544 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 8007478:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800747c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007480:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007484:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800748c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007490:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007492:	4b2a      	ldr	r3, [pc, #168]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 8007494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007496:	0a5b      	lsrs	r3, r3, #9
 8007498:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800749c:	ee07 3a90 	vmov	s15, r3
 80074a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074a8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80074b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074b8:	ee17 2a90 	vmov	r2, s15
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80074c0:	4b1e      	ldr	r3, [pc, #120]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074c4:	0c1b      	lsrs	r3, r3, #16
 80074c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074ca:	ee07 3a90 	vmov	s15, r3
 80074ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80074d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80074da:	edd7 6a07 	vldr	s13, [r7, #28]
 80074de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80074e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80074e6:	ee17 2a90 	vmov	r2, s15
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80074ee:	4b13      	ldr	r3, [pc, #76]	; (800753c <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 80074f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074f2:	0e1b      	lsrs	r3, r3, #24
 80074f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80074f8:	ee07 3a90 	vmov	s15, r3
 80074fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007500:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007504:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007508:	edd7 6a07 	vldr	s13, [r7, #28]
 800750c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007514:	ee17 2a90 	vmov	r2, s15
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800751c:	e008      	b.n	8007530 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2200      	movs	r2, #0
 8007522:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2200      	movs	r2, #0
 800752e:	609a      	str	r2, [r3, #8]
}
 8007530:	bf00      	nop
 8007532:	3724      	adds	r7, #36	; 0x24
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	58024400 	.word	0x58024400
 8007540:	03d09000 	.word	0x03d09000
 8007544:	46000000 	.word	0x46000000
 8007548:	4c742400 	.word	0x4c742400
 800754c:	4a742400 	.word	0x4a742400
 8007550:	4bbebc20 	.word	0x4bbebc20

08007554 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8007554:	b480      	push	{r7}
 8007556:	b089      	sub	sp, #36	; 0x24
 8007558:	af00      	add	r7, sp, #0
 800755a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800755c:	4b9d      	ldr	r3, [pc, #628]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800755e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007560:	f003 0303 	and.w	r3, r3, #3
 8007564:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8007566:	4b9b      	ldr	r3, [pc, #620]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	0d1b      	lsrs	r3, r3, #20
 800756c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007570:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8007572:	4b98      	ldr	r3, [pc, #608]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007576:	0a1b      	lsrs	r3, r3, #8
 8007578:	f003 0301 	and.w	r3, r3, #1
 800757c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800757e:	4b95      	ldr	r3, [pc, #596]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007582:	08db      	lsrs	r3, r3, #3
 8007584:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	fb02 f303 	mul.w	r3, r2, r3
 800758e:	ee07 3a90 	vmov	s15, r3
 8007592:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007596:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	f000 810a 	beq.w	80077b6 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d05a      	beq.n	800765e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 80075a8:	2b01      	cmp	r3, #1
 80075aa:	d302      	bcc.n	80075b2 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d078      	beq.n	80076a2 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 80075b0:	e099      	b.n	80076e6 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075b2:	4b88      	ldr	r3, [pc, #544]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0320 	and.w	r3, r3, #32
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d02d      	beq.n	800761a <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075be:	4b85      	ldr	r3, [pc, #532]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	08db      	lsrs	r3, r3, #3
 80075c4:	f003 0303 	and.w	r3, r3, #3
 80075c8:	4a83      	ldr	r2, [pc, #524]	; (80077d8 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 80075ca:	fa22 f303 	lsr.w	r3, r2, r3
 80075ce:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	ee07 3a90 	vmov	s15, r3
 80075e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075e8:	4b7a      	ldr	r3, [pc, #488]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80075ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075f0:	ee07 3a90 	vmov	s15, r3
 80075f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075f8:	ed97 6a03 	vldr	s12, [r7, #12]
 80075fc:	eddf 5a77 	vldr	s11, [pc, #476]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007608:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800760c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007610:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007614:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007618:	e087      	b.n	800772a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800761a:	697b      	ldr	r3, [r7, #20]
 800761c:	ee07 3a90 	vmov	s15, r3
 8007620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007624:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80077e0 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 8007628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800762c:	4b69      	ldr	r3, [pc, #420]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800762e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007634:	ee07 3a90 	vmov	s15, r3
 8007638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800763c:	ed97 6a03 	vldr	s12, [r7, #12]
 8007640:	eddf 5a66 	vldr	s11, [pc, #408]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800764c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007654:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007658:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800765c:	e065      	b.n	800772a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	ee07 3a90 	vmov	s15, r3
 8007664:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007668:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800766c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007670:	4b58      	ldr	r3, [pc, #352]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007678:	ee07 3a90 	vmov	s15, r3
 800767c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007680:	ed97 6a03 	vldr	s12, [r7, #12]
 8007684:	eddf 5a55 	vldr	s11, [pc, #340]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007688:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800768c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007690:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007694:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007698:	ee67 7a27 	vmul.f32	s15, s14, s15
 800769c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076a0:	e043      	b.n	800772a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	ee07 3a90 	vmov	s15, r3
 80076a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ac:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 80076b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076b4:	4b47      	ldr	r3, [pc, #284]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076bc:	ee07 3a90 	vmov	s15, r3
 80076c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076c4:	ed97 6a03 	vldr	s12, [r7, #12]
 80076c8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 80076cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076e4:	e021      	b.n	800772a <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80076e6:	697b      	ldr	r3, [r7, #20]
 80076e8:	ee07 3a90 	vmov	s15, r3
 80076ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076f0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 80077e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 80076f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076f8:	4b36      	ldr	r3, [pc, #216]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 80076fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007700:	ee07 3a90 	vmov	s15, r3
 8007704:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007708:	ed97 6a03 	vldr	s12, [r7, #12]
 800770c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80077dc <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 8007710:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007714:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007718:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800771c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007720:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007724:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007728:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800772a:	4b2a      	ldr	r3, [pc, #168]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800772c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772e:	0a5b      	lsrs	r3, r3, #9
 8007730:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007734:	ee07 3a90 	vmov	s15, r3
 8007738:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800773c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007740:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007744:	edd7 6a07 	vldr	s13, [r7, #28]
 8007748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800774c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007750:	ee17 2a90 	vmov	r2, s15
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007758:	4b1e      	ldr	r3, [pc, #120]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800775a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800775c:	0c1b      	lsrs	r3, r3, #16
 800775e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800776e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007772:	edd7 6a07 	vldr	s13, [r7, #28]
 8007776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777e:	ee17 2a90 	vmov	r2, s15
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007786:	4b13      	ldr	r3, [pc, #76]	; (80077d4 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 8007788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800778a:	0e1b      	lsrs	r3, r3, #24
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ac:	ee17 2a90 	vmov	r2, s15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80077b4:	e008      	b.n	80077c8 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2200      	movs	r2, #0
 80077c0:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2200      	movs	r2, #0
 80077c6:	609a      	str	r2, [r3, #8]
}
 80077c8:	bf00      	nop
 80077ca:	3724      	adds	r7, #36	; 0x24
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	58024400 	.word	0x58024400
 80077d8:	03d09000 	.word	0x03d09000
 80077dc:	46000000 	.word	0x46000000
 80077e0:	4c742400 	.word	0x4c742400
 80077e4:	4a742400 	.word	0x4a742400
 80077e8:	4bbebc20 	.word	0x4bbebc20

080077ec <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b089      	sub	sp, #36	; 0x24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80077f4:	4b9d      	ldr	r3, [pc, #628]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	f003 0303 	and.w	r3, r3, #3
 80077fc:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 80077fe:	4b9b      	ldr	r3, [pc, #620]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007800:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007802:	091b      	lsrs	r3, r3, #4
 8007804:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007808:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800780a:	4b98      	ldr	r3, [pc, #608]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800780c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800780e:	f003 0301 	and.w	r3, r3, #1
 8007812:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007814:	4b95      	ldr	r3, [pc, #596]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007816:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007818:	08db      	lsrs	r3, r3, #3
 800781a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800781e:	693a      	ldr	r2, [r7, #16]
 8007820:	fb02 f303 	mul.w	r3, r2, r3
 8007824:	ee07 3a90 	vmov	s15, r3
 8007828:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800782c:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	f000 810a 	beq.w	8007a4c <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 8007838:	69bb      	ldr	r3, [r7, #24]
 800783a:	2b01      	cmp	r3, #1
 800783c:	d05a      	beq.n	80078f4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800783e:	2b01      	cmp	r3, #1
 8007840:	d302      	bcc.n	8007848 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 8007842:	2b02      	cmp	r3, #2
 8007844:	d078      	beq.n	8007938 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 8007846:	e099      	b.n	800797c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007848:	4b88      	ldr	r3, [pc, #544]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0320 	and.w	r3, r3, #32
 8007850:	2b00      	cmp	r3, #0
 8007852:	d02d      	beq.n	80078b0 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007854:	4b85      	ldr	r3, [pc, #532]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	08db      	lsrs	r3, r3, #3
 800785a:	f003 0303 	and.w	r3, r3, #3
 800785e:	4a84      	ldr	r2, [pc, #528]	; (8007a70 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
 8007864:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	ee07 3a90 	vmov	s15, r3
 800786c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007870:	697b      	ldr	r3, [r7, #20]
 8007872:	ee07 3a90 	vmov	s15, r3
 8007876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800787a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800787e:	4b7b      	ldr	r3, [pc, #492]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007882:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007886:	ee07 3a90 	vmov	s15, r3
 800788a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800788e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007892:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007896:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800789a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800789e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078aa:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078ae:	e087      	b.n	80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007a78 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 80078be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078c2:	4b6a      	ldr	r3, [pc, #424]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80078c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078ca:	ee07 3a90 	vmov	s15, r3
 80078ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80078da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80078f2:	e065      	b.n	80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fe:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 8007902:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007906:	4b59      	ldr	r3, [pc, #356]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800790a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007916:	ed97 6a03 	vldr	s12, [r7, #12]
 800791a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800791e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007936:	e043      	b.n	80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007938:	697b      	ldr	r3, [r7, #20]
 800793a:	ee07 3a90 	vmov	s15, r3
 800793e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007942:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007a80 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8007946:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800794a:	4b48      	ldr	r3, [pc, #288]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800794c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800794e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007952:	ee07 3a90 	vmov	s15, r3
 8007956:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800795a:	ed97 6a03 	vldr	s12, [r7, #12]
 800795e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 8007962:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007966:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800796a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007972:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007976:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800797a:	e021      	b.n	80079c0 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800797c:	697b      	ldr	r3, [r7, #20]
 800797e:	ee07 3a90 	vmov	s15, r3
 8007982:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007986:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007a7c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800798a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798e:	4b37      	ldr	r3, [pc, #220]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007996:	ee07 3a90 	vmov	s15, r3
 800799a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799e:	ed97 6a03 	vldr	s12, [r7, #12]
 80079a2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007a74 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 80079a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079be:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 80079c0:	4b2a      	ldr	r3, [pc, #168]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079c4:	0a5b      	lsrs	r3, r3, #9
 80079c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ca:	ee07 3a90 	vmov	s15, r3
 80079ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079d2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80079da:	edd7 6a07 	vldr	s13, [r7, #28]
 80079de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079e6:	ee17 2a90 	vmov	r2, s15
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 80079ee:	4b1f      	ldr	r3, [pc, #124]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	0c1b      	lsrs	r3, r3, #16
 80079f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079f8:	ee07 3a90 	vmov	s15, r3
 80079fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a04:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a08:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a14:	ee17 2a90 	vmov	r2, s15
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8007a1c:	4b13      	ldr	r3, [pc, #76]	; (8007a6c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 8007a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a20:	0e1b      	lsrs	r3, r3, #24
 8007a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a26:	ee07 3a90 	vmov	s15, r3
 8007a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a2e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a32:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a36:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a3e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a42:	ee17 2a90 	vmov	r2, s15
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8007a4a:	e008      	b.n	8007a5e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	2200      	movs	r2, #0
 8007a56:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	609a      	str	r2, [r3, #8]
}
 8007a5e:	bf00      	nop
 8007a60:	3724      	adds	r7, #36	; 0x24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a68:	4770      	bx	lr
 8007a6a:	bf00      	nop
 8007a6c:	58024400 	.word	0x58024400
 8007a70:	03d09000 	.word	0x03d09000
 8007a74:	46000000 	.word	0x46000000
 8007a78:	4c742400 	.word	0x4c742400
 8007a7c:	4a742400 	.word	0x4a742400
 8007a80:	4bbebc20 	.word	0x4bbebc20

08007a84 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
 8007a8c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007a92:	4b53      	ldr	r3, [pc, #332]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007a94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a96:	f003 0303 	and.w	r3, r3, #3
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d101      	bne.n	8007aa2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007a9e:	2301      	movs	r3, #1
 8007aa0:	e099      	b.n	8007bd6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007aa2:	4b4f      	ldr	r3, [pc, #316]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a4e      	ldr	r2, [pc, #312]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007aa8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aae:	f7f9 fd33 	bl	8001518 <HAL_GetTick>
 8007ab2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ab4:	e008      	b.n	8007ac8 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007ab6:	f7f9 fd2f 	bl	8001518 <HAL_GetTick>
 8007aba:	4602      	mov	r2, r0
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	1ad3      	subs	r3, r2, r3
 8007ac0:	2b02      	cmp	r3, #2
 8007ac2:	d901      	bls.n	8007ac8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ac4:	2303      	movs	r3, #3
 8007ac6:	e086      	b.n	8007bd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007ac8:	4b45      	ldr	r3, [pc, #276]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d1f0      	bne.n	8007ab6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007ad4:	4b42      	ldr	r3, [pc, #264]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007ad6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	031b      	lsls	r3, r3, #12
 8007ae2:	493f      	ldr	r1, [pc, #252]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	628b      	str	r3, [r1, #40]	; 0x28
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	685b      	ldr	r3, [r3, #4]
 8007aec:	3b01      	subs	r3, #1
 8007aee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	3b01      	subs	r3, #1
 8007af8:	025b      	lsls	r3, r3, #9
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	431a      	orrs	r2, r3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	3b01      	subs	r3, #1
 8007b04:	041b      	lsls	r3, r3, #16
 8007b06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	3b01      	subs	r3, #1
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b18:	4931      	ldr	r1, [pc, #196]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b1e:	4b30      	ldr	r3, [pc, #192]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b22:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	695b      	ldr	r3, [r3, #20]
 8007b2a:	492d      	ldr	r1, [pc, #180]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b2c:	4313      	orrs	r3, r2
 8007b2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b30:	4b2b      	ldr	r3, [pc, #172]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b34:	f023 0220 	bic.w	r2, r3, #32
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	4928      	ldr	r1, [pc, #160]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b42:	4b27      	ldr	r3, [pc, #156]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b46:	4a26      	ldr	r2, [pc, #152]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b48:	f023 0310 	bic.w	r3, r3, #16
 8007b4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b4e:	4b24      	ldr	r3, [pc, #144]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b50:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b52:	4b24      	ldr	r3, [pc, #144]	; (8007be4 <RCCEx_PLL2_Config+0x160>)
 8007b54:	4013      	ands	r3, r2
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	69d2      	ldr	r2, [r2, #28]
 8007b5a:	00d2      	lsls	r2, r2, #3
 8007b5c:	4920      	ldr	r1, [pc, #128]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007b62:	4b1f      	ldr	r3, [pc, #124]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a1e      	ldr	r2, [pc, #120]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b68:	f043 0310 	orr.w	r3, r3, #16
 8007b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b6e:	683b      	ldr	r3, [r7, #0]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d106      	bne.n	8007b82 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007b74:	4b1a      	ldr	r3, [pc, #104]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007b7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b80:	e00f      	b.n	8007ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b01      	cmp	r3, #1
 8007b86:	d106      	bne.n	8007b96 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007b88:	4b15      	ldr	r3, [pc, #84]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a14      	ldr	r2, [pc, #80]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b94:	e005      	b.n	8007ba2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007b96:	4b12      	ldr	r3, [pc, #72]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9a:	4a11      	ldr	r2, [pc, #68]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007b9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ba0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007ba2:	4b0f      	ldr	r3, [pc, #60]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a0e      	ldr	r2, [pc, #56]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bae:	f7f9 fcb3 	bl	8001518 <HAL_GetTick>
 8007bb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bb4:	e008      	b.n	8007bc8 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bb6:	f7f9 fcaf 	bl	8001518 <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e006      	b.n	8007bd6 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	58024400 	.word	0x58024400
 8007be4:	ffff0007 	.word	0xffff0007

08007be8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b084      	sub	sp, #16
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007bf6:	4b53      	ldr	r3, [pc, #332]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007bf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bfa:	f003 0303 	and.w	r3, r3, #3
 8007bfe:	2b03      	cmp	r3, #3
 8007c00:	d101      	bne.n	8007c06 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c02:	2301      	movs	r3, #1
 8007c04:	e099      	b.n	8007d3a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c06:	4b4f      	ldr	r3, [pc, #316]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a4e      	ldr	r2, [pc, #312]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c12:	f7f9 fc81 	bl	8001518 <HAL_GetTick>
 8007c16:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c18:	e008      	b.n	8007c2c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c1a:	f7f9 fc7d 	bl	8001518 <HAL_GetTick>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	1ad3      	subs	r3, r2, r3
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d901      	bls.n	8007c2c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c28:	2303      	movs	r3, #3
 8007c2a:	e086      	b.n	8007d3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c2c:	4b45      	ldr	r3, [pc, #276]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d1f0      	bne.n	8007c1a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c38:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	051b      	lsls	r3, r3, #20
 8007c46:	493f      	ldr	r1, [pc, #252]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c48:	4313      	orrs	r3, r2
 8007c4a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	3b01      	subs	r3, #1
 8007c52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689b      	ldr	r3, [r3, #8]
 8007c5a:	3b01      	subs	r3, #1
 8007c5c:	025b      	lsls	r3, r3, #9
 8007c5e:	b29b      	uxth	r3, r3
 8007c60:	431a      	orrs	r2, r3
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	3b01      	subs	r3, #1
 8007c68:	041b      	lsls	r3, r3, #16
 8007c6a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007c6e:	431a      	orrs	r2, r3
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	061b      	lsls	r3, r3, #24
 8007c78:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007c7c:	4931      	ldr	r1, [pc, #196]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c7e:	4313      	orrs	r3, r2
 8007c80:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007c82:	4b30      	ldr	r3, [pc, #192]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c86:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	695b      	ldr	r3, [r3, #20]
 8007c8e:	492d      	ldr	r1, [pc, #180]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c90:	4313      	orrs	r3, r2
 8007c92:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007c94:	4b2b      	ldr	r3, [pc, #172]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c98:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	4928      	ldr	r1, [pc, #160]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ca6:	4b27      	ldr	r3, [pc, #156]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007caa:	4a26      	ldr	r2, [pc, #152]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cb0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cb2:	4b24      	ldr	r3, [pc, #144]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cb6:	4b24      	ldr	r3, [pc, #144]	; (8007d48 <RCCEx_PLL3_Config+0x160>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	69d2      	ldr	r2, [r2, #28]
 8007cbe:	00d2      	lsls	r2, r2, #3
 8007cc0:	4920      	ldr	r1, [pc, #128]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007cc6:	4b1f      	ldr	r3, [pc, #124]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cca:	4a1e      	ldr	r2, [pc, #120]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007ccc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d106      	bne.n	8007ce6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cdc:	4a19      	ldr	r2, [pc, #100]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cde:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007ce2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ce4:	e00f      	b.n	8007d06 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d106      	bne.n	8007cfa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007cec:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cf0:	4a14      	ldr	r2, [pc, #80]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007cf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007cf8:	e005      	b.n	8007d06 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007cfa:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cfe:	4a11      	ldr	r2, [pc, #68]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007d00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d06:	4b0f      	ldr	r3, [pc, #60]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	4a0e      	ldr	r2, [pc, #56]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d12:	f7f9 fc01 	bl	8001518 <HAL_GetTick>
 8007d16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d18:	e008      	b.n	8007d2c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d1a:	f7f9 fbfd 	bl	8001518 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	2b02      	cmp	r3, #2
 8007d26:	d901      	bls.n	8007d2c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d28:	2303      	movs	r3, #3
 8007d2a:	e006      	b.n	8007d3a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d2c:	4b05      	ldr	r3, [pc, #20]	; (8007d44 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d0f0      	beq.n	8007d1a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	3710      	adds	r7, #16
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	bd80      	pop	{r7, pc}
 8007d42:	bf00      	nop
 8007d44:	58024400 	.word	0x58024400
 8007d48:	ffff0007 	.word	0xffff0007

08007d4c <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b08a      	sub	sp, #40	; 0x28
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e07c      	b.n	8007e58 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007d64:	b2db      	uxtb	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d10c      	bne.n	8007d84 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d102      	bne.n	8007d7e <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2202      	movs	r2, #2
 8007d7c:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f7f9 f8b0 	bl	8000ee4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2203      	movs	r2, #3
 8007d88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f000 f867 	bl	8007e60 <HAL_SD_InitCard>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d001      	beq.n	8007d9c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e05d      	b.n	8007e58 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 8007d9c:	f107 0308 	add.w	r3, r7, #8
 8007da0:	4619      	mov	r1, r3
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 fdbe 	bl	8008924 <HAL_SD_GetCardStatus>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d001      	beq.n	8007db2 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 8007dae:	2301      	movs	r3, #1
 8007db0:	e052      	b.n	8007e58 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 8007db2:	7e3b      	ldrb	r3, [r7, #24]
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 8007db8:	7e7b      	ldrb	r3, [r7, #25]
 8007dba:	b2db      	uxtb	r3, r3
 8007dbc:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007dc2:	2b01      	cmp	r3, #1
 8007dc4:	d10a      	bne.n	8007ddc <HAL_SD_Init+0x90>
 8007dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <HAL_SD_Init+0x86>
 8007dcc:	6a3b      	ldr	r3, [r7, #32]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d004      	beq.n	8007ddc <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd8:	65da      	str	r2, [r3, #92]	; 0x5c
 8007dda:	e00b      	b.n	8007df4 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d104      	bne.n	8007dee <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007dea:	65da      	str	r2, [r3, #92]	; 0x5c
 8007dec:	e002      	b.n	8007df4 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	4619      	mov	r1, r3
 8007dfa:	6878      	ldr	r0, [r7, #4]
 8007dfc:	f000 fe74 	bl	8008ae8 <HAL_SD_ConfigWideBusOperation>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d001      	beq.n	8007e0a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 8007e06:	2301      	movs	r3, #1
 8007e08:	e026      	b.n	8007e58 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8007e0a:	f7f9 fb85 	bl	8001518 <HAL_GetTick>
 8007e0e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e10:	e011      	b.n	8007e36 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 8007e12:	f7f9 fb81 	bl	8001518 <HAL_GetTick>
 8007e16:	4602      	mov	r2, r0
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	1ad3      	subs	r3, r2, r3
 8007e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e20:	d109      	bne.n	8007e36 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007e28:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 8007e32:	2303      	movs	r3, #3
 8007e34:	e010      	b.n	8007e58 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 ff00 	bl	8008c3c <HAL_SD_GetCardState>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b04      	cmp	r3, #4
 8007e40:	d1e7      	bne.n	8007e12 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2200      	movs	r2, #0
 8007e46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007e56:	2300      	movs	r3, #0
}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	; 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007e60:	b5b0      	push	{r4, r5, r7, lr}
 8007e62:	b08e      	sub	sp, #56	; 0x38
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007e70:	2300      	movs	r3, #0
 8007e72:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007e74:	2300      	movs	r3, #0
 8007e76:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8007e78:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 8007e7c:	f7fe ff90 	bl	8006da0 <HAL_RCCEx_GetPeriphCLKFreq>
 8007e80:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 8007e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e84:	0a1b      	lsrs	r3, r3, #8
 8007e86:	4a40      	ldr	r2, [pc, #256]	; (8007f88 <HAL_SD_InitCard+0x128>)
 8007e88:	fba2 2303 	umull	r2, r3, r2, r3
 8007e8c:	091b      	lsrs	r3, r3, #4
 8007e8e:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	699b      	ldr	r3, [r3, #24]
 8007e94:	2b02      	cmp	r3, #2
 8007e96:	d107      	bne.n	8007ea8 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f042 0210 	orr.w	r2, r2, #16
 8007ea6:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681d      	ldr	r5, [r3, #0]
 8007eac:	466c      	mov	r4, sp
 8007eae:	f107 0314 	add.w	r3, r7, #20
 8007eb2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007eb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007eba:	f107 0308 	add.w	r3, r7, #8
 8007ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	f002 fc9b 	bl	800a7fc <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f002 fcde 	bl	800a88c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ed6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eda:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 8007edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d008      	beq.n	8007ef4 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 8007ee2:	4a2a      	ldr	r2, [pc, #168]	; (8007f8c <HAL_SD_InitCard+0x12c>)
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eea:	3301      	adds	r3, #1
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7f9 fb1f 	bl	8001530 <HAL_Delay>
 8007ef2:	e002      	b.n	8007efa <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 8007ef4:	2002      	movs	r0, #2
 8007ef6:	f7f9 fb1b 	bl	8001530 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007efa:	6878      	ldr	r0, [r7, #4]
 8007efc:	f000 ff7c 	bl	8008df8 <SD_PowerON>
 8007f00:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f02:	6a3b      	ldr	r3, [r7, #32]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d00b      	beq.n	8007f20 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f14:	6a3b      	ldr	r3, [r7, #32]
 8007f16:	431a      	orrs	r2, r3
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e02e      	b.n	8007f7e <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8007f20:	6878      	ldr	r0, [r7, #4]
 8007f22:	f000 feab 	bl	8008c7c <SD_InitCard>
 8007f26:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f28:	6a3b      	ldr	r3, [r7, #32]
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2201      	movs	r2, #1
 8007f32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f3a:	6a3b      	ldr	r3, [r7, #32]
 8007f3c:	431a      	orrs	r2, r3
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e01b      	b.n	8007f7e <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f002 fd32 	bl	800a9b8 <SDMMC_CmdBlockLength>
 8007f54:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007f56:	6a3b      	ldr	r3, [r7, #32]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d00f      	beq.n	8007f7c <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a0b      	ldr	r2, [pc, #44]	; (8007f90 <HAL_SD_InitCard+0x130>)
 8007f62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f68:	6a3b      	ldr	r3, [r7, #32]
 8007f6a:	431a      	orrs	r2, r3
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2201      	movs	r2, #1
 8007f74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e000      	b.n	8007f7e <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 8007f7c:	2300      	movs	r3, #0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3728      	adds	r7, #40	; 0x28
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bdb0      	pop	{r4, r5, r7, pc}
 8007f86:	bf00      	nop
 8007f88:	014f8b59 	.word	0x014f8b59
 8007f8c:	00012110 	.word	0x00012110
 8007f90:	1fe00fff 	.word	0x1fe00fff

08007f94 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b092      	sub	sp, #72	; 0x48
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
 8007fa0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007fa2:	f7f9 fab9 	bl	8001518 <HAL_GetTick>
 8007fa6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007fb0:	68bb      	ldr	r3, [r7, #8]
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d107      	bne.n	8007fc6 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007fc2:	2301      	movs	r3, #1
 8007fc4:	e167      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	f040 815a 	bne.w	8008288 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007fda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	441a      	add	r2, r3
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d907      	bls.n	8007ff8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007ff4:	2301      	movs	r3, #1
 8007ff6:	e14e      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2203      	movs	r2, #3
 8007ffc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2200      	movs	r2, #0
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800800c:	2b01      	cmp	r3, #1
 800800e:	d002      	beq.n	8008016 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008012:	025b      	lsls	r3, r3, #9
 8008014:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008016:	f04f 33ff 	mov.w	r3, #4294967295
 800801a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	025b      	lsls	r3, r3, #9
 8008020:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008022:	2390      	movs	r3, #144	; 0x90
 8008024:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008026:	2302      	movs	r3, #2
 8008028:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800802a:	2300      	movs	r3, #0
 800802c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800802e:	2300      	movs	r3, #0
 8008030:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f107 0214 	add.w	r2, r7, #20
 800803a:	4611      	mov	r1, r2
 800803c:	4618      	mov	r0, r3
 800803e:	f002 fc8f 	bl	800a960 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	68da      	ldr	r2, [r3, #12]
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008050:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d90a      	bls.n	800806e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	2202      	movs	r2, #2
 800805c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008064:	4618      	mov	r0, r3
 8008066:	f002 fced 	bl	800aa44 <SDMMC_CmdReadMultiBlock>
 800806a:	6478      	str	r0, [r7, #68]	; 0x44
 800806c:	e009      	b.n	8008082 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800807a:	4618      	mov	r0, r3
 800807c:	f002 fcbf 	bl	800a9fe <SDMMC_CmdReadSingleBlock>
 8008080:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008082:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008084:	2b00      	cmp	r3, #0
 8008086:	d012      	beq.n	80080ae <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a84      	ldr	r2, [pc, #528]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 800808e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008096:	431a      	orrs	r2, r3
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80080aa:	2301      	movs	r3, #1
 80080ac:	e0f3      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80080ae:	69bb      	ldr	r3, [r7, #24]
 80080b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80080b2:	e058      	b.n	8008166 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d033      	beq.n	800812a <HAL_SD_ReadBlocks+0x196>
 80080c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c4:	2b1f      	cmp	r3, #31
 80080c6:	d930      	bls.n	800812a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80080c8:	2300      	movs	r3, #0
 80080ca:	643b      	str	r3, [r7, #64]	; 0x40
 80080cc:	e027      	b.n	800811e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f002 fbbc 	bl	800a850 <SDMMC_ReadFIFO>
 80080d8:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 80080da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80080e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e4:	3301      	adds	r3, #1
 80080e6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80080e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080ea:	0a1b      	lsrs	r3, r3, #8
 80080ec:	b2da      	uxtb	r2, r3
 80080ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80080f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080f4:	3301      	adds	r3, #1
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80080f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fa:	0c1b      	lsrs	r3, r3, #16
 80080fc:	b2da      	uxtb	r2, r3
 80080fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008100:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008102:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008104:	3301      	adds	r3, #1
 8008106:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800810a:	0e1b      	lsrs	r3, r3, #24
 800810c:	b2da      	uxtb	r2, r3
 800810e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008110:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008114:	3301      	adds	r3, #1
 8008116:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 8008118:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800811a:	3301      	adds	r3, #1
 800811c:	643b      	str	r3, [r7, #64]	; 0x40
 800811e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008120:	2b07      	cmp	r3, #7
 8008122:	d9d4      	bls.n	80080ce <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	3b20      	subs	r3, #32
 8008128:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800812a:	f7f9 f9f5 	bl	8001518 <HAL_GetTick>
 800812e:	4602      	mov	r2, r0
 8008130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008132:	1ad3      	subs	r3, r2, r3
 8008134:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008136:	429a      	cmp	r2, r3
 8008138:	d902      	bls.n	8008140 <HAL_SD_ReadBlocks+0x1ac>
 800813a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800813c:	2b00      	cmp	r3, #0
 800813e:	d112      	bne.n	8008166 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a56      	ldr	r2, [pc, #344]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 8008146:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800814c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2201      	movs	r2, #1
 8008158:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	2200      	movs	r2, #0
 8008160:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008162:	2303      	movs	r3, #3
 8008164:	e097      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8008170:	2b00      	cmp	r3, #0
 8008172:	d09f      	beq.n	80080b4 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68da      	ldr	r2, [r3, #12]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008182:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800818a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818e:	2b00      	cmp	r3, #0
 8008190:	d022      	beq.n	80081d8 <HAL_SD_ReadBlocks+0x244>
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	2b01      	cmp	r3, #1
 8008196:	d91f      	bls.n	80081d8 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800819c:	2b03      	cmp	r3, #3
 800819e:	d01b      	beq.n	80081d8 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	4618      	mov	r0, r3
 80081a6:	f002 fcb7 	bl	800ab18 <SDMMC_CmdStopTransfer>
 80081aa:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80081ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d012      	beq.n	80081d8 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a3a      	ldr	r2, [pc, #232]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 80081b8:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80081be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80081c0:	431a      	orrs	r2, r3
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2201      	movs	r2, #1
 80081ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2200      	movs	r2, #0
 80081d2:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	e05e      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081de:	f003 0308 	and.w	r3, r3, #8
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d012      	beq.n	800820c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	4a2d      	ldr	r2, [pc, #180]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 80081ec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f2:	f043 0208 	orr.w	r2, r3, #8
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	2201      	movs	r2, #1
 80081fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e044      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008212:	f003 0302 	and.w	r3, r3, #2
 8008216:	2b00      	cmp	r3, #0
 8008218:	d012      	beq.n	8008240 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a20      	ldr	r2, [pc, #128]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 8008220:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008226:	f043 0202 	orr.w	r2, r3, #2
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	2200      	movs	r2, #0
 800823a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800823c:	2301      	movs	r3, #1
 800823e:	e02a      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008246:	f003 0320 	and.w	r3, r3, #32
 800824a:	2b00      	cmp	r3, #0
 800824c:	d012      	beq.n	8008274 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	4a13      	ldr	r2, [pc, #76]	; (80082a0 <HAL_SD_ReadBlocks+0x30c>)
 8008254:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800825a:	f043 0220 	orr.w	r2, r3, #32
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2200      	movs	r2, #0
 800826e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	e010      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a0a      	ldr	r2, [pc, #40]	; (80082a4 <HAL_SD_ReadBlocks+0x310>)
 800827a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	2201      	movs	r2, #1
 8008280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008284:	2300      	movs	r3, #0
 8008286:	e006      	b.n	8008296 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008294:	2301      	movs	r3, #1
  }
}
 8008296:	4618      	mov	r0, r3
 8008298:	3748      	adds	r7, #72	; 0x48
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}
 800829e:	bf00      	nop
 80082a0:	1fe00fff 	.word	0x1fe00fff
 80082a4:	18000f3a 	.word	0x18000f3a

080082a8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80082a8:	b580      	push	{r7, lr}
 80082aa:	b092      	sub	sp, #72	; 0x48
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	60f8      	str	r0, [r7, #12]
 80082b0:	60b9      	str	r1, [r7, #8]
 80082b2:	607a      	str	r2, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80082b6:	f7f9 f92f 	bl	8001518 <HAL_GetTick>
 80082ba:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d107      	bne.n	80082da <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ce:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80082d6:	2301      	movs	r3, #1
 80082d8:	e16b      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80082e0:	b2db      	uxtb	r3, r3
 80082e2:	2b01      	cmp	r3, #1
 80082e4:	f040 815e 	bne.w	80085a4 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	2200      	movs	r2, #0
 80082ec:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80082ee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	441a      	add	r2, r3
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d907      	bls.n	800830c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008300:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008308:	2301      	movs	r3, #1
 800830a:	e152      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2203      	movs	r2, #3
 8008310:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	2200      	movs	r2, #0
 800831a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008320:	2b01      	cmp	r3, #1
 8008322:	d002      	beq.n	800832a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8008324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008326:	025b      	lsls	r3, r3, #9
 8008328:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800832a:	f04f 33ff 	mov.w	r3, #4294967295
 800832e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	025b      	lsls	r3, r3, #9
 8008334:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008336:	2390      	movs	r3, #144	; 0x90
 8008338:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800833a:	2300      	movs	r3, #0
 800833c:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800833e:	2300      	movs	r3, #0
 8008340:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 8008342:	2300      	movs	r3, #0
 8008344:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f107 0218 	add.w	r2, r7, #24
 800834e:	4611      	mov	r1, r2
 8008350:	4618      	mov	r0, r3
 8008352:	f002 fb05 	bl	800a960 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008364:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d90a      	bls.n	8008382 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2220      	movs	r2, #32
 8008370:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008378:	4618      	mov	r0, r3
 800837a:	f002 fba9 	bl	800aad0 <SDMMC_CmdWriteMultiBlock>
 800837e:	6478      	str	r0, [r7, #68]	; 0x44
 8008380:	e009      	b.n	8008396 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2210      	movs	r2, #16
 8008386:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800838e:	4618      	mov	r0, r3
 8008390:	f002 fb7b 	bl	800aa8a <SDMMC_CmdWriteSingleBlock>
 8008394:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8008396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008398:	2b00      	cmp	r3, #0
 800839a:	d012      	beq.n	80083c2 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4a86      	ldr	r2, [pc, #536]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 80083a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80083a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083aa:	431a      	orrs	r2, r3
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	2200      	movs	r2, #0
 80083bc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e0f7      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80083c6:	e05c      	b.n	8008482 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d2:	2b00      	cmp	r3, #0
 80083d4:	d037      	beq.n	8008446 <HAL_SD_WriteBlocks+0x19e>
 80083d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083d8:	2b1f      	cmp	r3, #31
 80083da:	d934      	bls.n	8008446 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80083dc:	2300      	movs	r3, #0
 80083de:	643b      	str	r3, [r7, #64]	; 0x40
 80083e0:	e02b      	b.n	800843a <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 80083e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083e4:	781b      	ldrb	r3, [r3, #0]
 80083e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80083e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ea:	3301      	adds	r3, #1
 80083ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 80083ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	021a      	lsls	r2, r3, #8
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80083fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083fc:	3301      	adds	r3, #1
 80083fe:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008402:	781b      	ldrb	r3, [r3, #0]
 8008404:	041a      	lsls	r2, r3, #16
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	4313      	orrs	r3, r2
 800840a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800840c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800840e:	3301      	adds	r3, #1
 8008410:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	061a      	lsls	r2, r3, #24
 8008418:	697b      	ldr	r3, [r7, #20]
 800841a:	4313      	orrs	r3, r2
 800841c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800841e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008420:	3301      	adds	r3, #1
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f107 0214 	add.w	r2, r7, #20
 800842c:	4611      	mov	r1, r2
 800842e:	4618      	mov	r0, r3
 8008430:	f002 fa1b 	bl	800a86a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008436:	3301      	adds	r3, #1
 8008438:	643b      	str	r3, [r7, #64]	; 0x40
 800843a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800843c:	2b07      	cmp	r3, #7
 800843e:	d9d0      	bls.n	80083e2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 8008440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008442:	3b20      	subs	r3, #32
 8008444:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008446:	f7f9 f867 	bl	8001518 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008452:	429a      	cmp	r2, r3
 8008454:	d902      	bls.n	800845c <HAL_SD_WriteBlocks+0x1b4>
 8008456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008458:	2b00      	cmp	r3, #0
 800845a:	d112      	bne.n	8008482 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a56      	ldr	r2, [pc, #344]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 8008462:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800846a:	431a      	orrs	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2200      	movs	r2, #0
 800847c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800847e:	2303      	movs	r3, #3
 8008480:	e097      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008488:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800848c:	2b00      	cmp	r3, #0
 800848e:	d09b      	beq.n	80083c8 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	68da      	ldr	r2, [r3, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800849e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d022      	beq.n	80084f4 <HAL_SD_WriteBlocks+0x24c>
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	2b01      	cmp	r3, #1
 80084b2:	d91f      	bls.n	80084f4 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d01b      	beq.n	80084f4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	4618      	mov	r0, r3
 80084c2:	f002 fb29 	bl	800ab18 <SDMMC_CmdStopTransfer>
 80084c6:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80084c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d012      	beq.n	80084f4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	4a3a      	ldr	r2, [pc, #232]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 80084d4:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80084dc:	431a      	orrs	r2, r3
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	2200      	movs	r2, #0
 80084ee:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e05e      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084fa:	f003 0308 	and.w	r3, r3, #8
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d012      	beq.n	8008528 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	4a2d      	ldr	r2, [pc, #180]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 8008508:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800850e:	f043 0208 	orr.w	r2, r3, #8
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2201      	movs	r2, #1
 800851a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2200      	movs	r2, #0
 8008522:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008524:	2301      	movs	r3, #1
 8008526:	e044      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800852e:	f003 0302 	and.w	r3, r3, #2
 8008532:	2b00      	cmp	r3, #0
 8008534:	d012      	beq.n	800855c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4a20      	ldr	r2, [pc, #128]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 800853c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008542:	f043 0202 	orr.w	r2, r3, #2
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2200      	movs	r2, #0
 8008556:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008558:	2301      	movs	r3, #1
 800855a:	e02a      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008562:	f003 0310 	and.w	r3, r3, #16
 8008566:	2b00      	cmp	r3, #0
 8008568:	d012      	beq.n	8008590 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <HAL_SD_WriteBlocks+0x314>)
 8008570:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	f043 0210 	orr.w	r2, r3, #16
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2201      	movs	r2, #1
 8008582:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	2200      	movs	r2, #0
 800858a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800858c:	2301      	movs	r3, #1
 800858e:	e010      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	4a0a      	ldr	r2, [pc, #40]	; (80085c0 <HAL_SD_WriteBlocks+0x318>)
 8008596:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	2201      	movs	r2, #1
 800859c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80085a0:	2300      	movs	r3, #0
 80085a2:	e006      	b.n	80085b2 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
  }
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3748      	adds	r7, #72	; 0x48
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
 80085ba:	bf00      	nop
 80085bc:	1fe00fff 	.word	0x1fe00fff
 80085c0:	18000f3a 	.word	0x18000f3a

080085c4 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b083      	sub	sp, #12
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	4603      	mov	r3, r0
 80085cc:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 80085ce:	bf00      	nop
 80085d0:	370c      	adds	r7, #12
 80085d2:	46bd      	mov	sp, r7
 80085d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d8:	4770      	bx	lr
	...

080085dc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ea:	0f9b      	lsrs	r3, r3, #30
 80085ec:	b2da      	uxtb	r2, r3
 80085ee:	683b      	ldr	r3, [r7, #0]
 80085f0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085f6:	0e9b      	lsrs	r3, r3, #26
 80085f8:	b2db      	uxtb	r3, r3
 80085fa:	f003 030f 	and.w	r3, r3, #15
 80085fe:	b2da      	uxtb	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008608:	0e1b      	lsrs	r3, r3, #24
 800860a:	b2db      	uxtb	r3, r3
 800860c:	f003 0303 	and.w	r3, r3, #3
 8008610:	b2da      	uxtb	r2, r3
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800861a:	0c1b      	lsrs	r3, r3, #16
 800861c:	b2da      	uxtb	r2, r3
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008626:	0a1b      	lsrs	r3, r3, #8
 8008628:	b2da      	uxtb	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008632:	b2da      	uxtb	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800863c:	0d1b      	lsrs	r3, r3, #20
 800863e:	b29a      	uxth	r2, r3
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008648:	0c1b      	lsrs	r3, r3, #16
 800864a:	b2db      	uxtb	r3, r3
 800864c:	f003 030f 	and.w	r3, r3, #15
 8008650:	b2da      	uxtb	r2, r3
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800865a:	0bdb      	lsrs	r3, r3, #15
 800865c:	b2db      	uxtb	r3, r3
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	b2da      	uxtb	r2, r3
 8008664:	683b      	ldr	r3, [r7, #0]
 8008666:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800866c:	0b9b      	lsrs	r3, r3, #14
 800866e:	b2db      	uxtb	r3, r3
 8008670:	f003 0301 	and.w	r3, r3, #1
 8008674:	b2da      	uxtb	r2, r3
 8008676:	683b      	ldr	r3, [r7, #0]
 8008678:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800867e:	0b5b      	lsrs	r3, r3, #13
 8008680:	b2db      	uxtb	r3, r3
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	b2da      	uxtb	r2, r3
 8008688:	683b      	ldr	r3, [r7, #0]
 800868a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	0b1b      	lsrs	r3, r3, #12
 8008692:	b2db      	uxtb	r3, r3
 8008694:	f003 0301 	and.w	r3, r3, #1
 8008698:	b2da      	uxtb	r2, r3
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	2200      	movs	r2, #0
 80086a2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d163      	bne.n	8008774 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80086b0:	009a      	lsls	r2, r3, #2
 80086b2:	f640 73fc 	movw	r3, #4092	; 0xffc
 80086b6:	4013      	ands	r3, r2
 80086b8:	687a      	ldr	r2, [r7, #4]
 80086ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80086bc:	0f92      	lsrs	r2, r2, #30
 80086be:	431a      	orrs	r2, r3
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086c8:	0edb      	lsrs	r3, r3, #27
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	f003 0307 	and.w	r3, r3, #7
 80086d0:	b2da      	uxtb	r2, r3
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086da:	0e1b      	lsrs	r3, r3, #24
 80086dc:	b2db      	uxtb	r3, r3
 80086de:	f003 0307 	and.w	r3, r3, #7
 80086e2:	b2da      	uxtb	r2, r3
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086ec:	0d5b      	lsrs	r3, r3, #21
 80086ee:	b2db      	uxtb	r3, r3
 80086f0:	f003 0307 	and.w	r3, r3, #7
 80086f4:	b2da      	uxtb	r2, r3
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80086fe:	0c9b      	lsrs	r3, r3, #18
 8008700:	b2db      	uxtb	r3, r3
 8008702:	f003 0307 	and.w	r3, r3, #7
 8008706:	b2da      	uxtb	r2, r3
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008710:	0bdb      	lsrs	r3, r3, #15
 8008712:	b2db      	uxtb	r3, r3
 8008714:	f003 0307 	and.w	r3, r3, #7
 8008718:	b2da      	uxtb	r2, r3
 800871a:	683b      	ldr	r3, [r7, #0]
 800871c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	691b      	ldr	r3, [r3, #16]
 8008722:	1c5a      	adds	r2, r3, #1
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	7e1b      	ldrb	r3, [r3, #24]
 800872c:	b2db      	uxtb	r3, r3
 800872e:	f003 0307 	and.w	r3, r3, #7
 8008732:	3302      	adds	r3, #2
 8008734:	2201      	movs	r2, #1
 8008736:	fa02 f303 	lsl.w	r3, r2, r3
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800873e:	fb02 f203 	mul.w	r2, r2, r3
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	7a1b      	ldrb	r3, [r3, #8]
 800874a:	b2db      	uxtb	r3, r3
 800874c:	f003 030f 	and.w	r3, r3, #15
 8008750:	2201      	movs	r2, #1
 8008752:	409a      	lsls	r2, r3
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008760:	0a52      	lsrs	r2, r2, #9
 8008762:	fb02 f203 	mul.w	r2, r2, r3
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008770:	659a      	str	r2, [r3, #88]	; 0x58
 8008772:	e031      	b.n	80087d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008778:	2b01      	cmp	r3, #1
 800877a:	d11d      	bne.n	80087b8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008780:	041b      	lsls	r3, r3, #16
 8008782:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800878a:	0c1b      	lsrs	r3, r3, #16
 800878c:	431a      	orrs	r2, r3
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	691b      	ldr	r3, [r3, #16]
 8008796:	3301      	adds	r3, #1
 8008798:	029a      	lsls	r2, r3, #10
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80087ac:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	659a      	str	r2, [r3, #88]	; 0x58
 80087b6:	e00f      	b.n	80087d8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a58      	ldr	r2, [pc, #352]	; (8008920 <HAL_SD_GetCardCSD+0x344>)
 80087be:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e09d      	b.n	8008914 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087dc:	0b9b      	lsrs	r3, r3, #14
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	f003 0301 	and.w	r3, r3, #1
 80087e4:	b2da      	uxtb	r2, r3
 80087e6:	683b      	ldr	r3, [r7, #0]
 80087e8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80087ee:	09db      	lsrs	r3, r3, #7
 80087f0:	b2db      	uxtb	r3, r3
 80087f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80087f6:	b2da      	uxtb	r2, r3
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008806:	b2da      	uxtb	r2, r3
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008810:	0fdb      	lsrs	r3, r3, #31
 8008812:	b2da      	uxtb	r2, r3
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800881c:	0f5b      	lsrs	r3, r3, #29
 800881e:	b2db      	uxtb	r3, r3
 8008820:	f003 0303 	and.w	r3, r3, #3
 8008824:	b2da      	uxtb	r2, r3
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800882e:	0e9b      	lsrs	r3, r3, #26
 8008830:	b2db      	uxtb	r3, r3
 8008832:	f003 0307 	and.w	r3, r3, #7
 8008836:	b2da      	uxtb	r2, r3
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008840:	0d9b      	lsrs	r3, r3, #22
 8008842:	b2db      	uxtb	r3, r3
 8008844:	f003 030f 	and.w	r3, r3, #15
 8008848:	b2da      	uxtb	r2, r3
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008852:	0d5b      	lsrs	r3, r3, #21
 8008854:	b2db      	uxtb	r3, r3
 8008856:	f003 0301 	and.w	r3, r3, #1
 800885a:	b2da      	uxtb	r2, r3
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008862:	683b      	ldr	r3, [r7, #0]
 8008864:	2200      	movs	r2, #0
 8008866:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800886e:	0c1b      	lsrs	r3, r3, #16
 8008870:	b2db      	uxtb	r3, r3
 8008872:	f003 0301 	and.w	r3, r3, #1
 8008876:	b2da      	uxtb	r2, r3
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008882:	0bdb      	lsrs	r3, r3, #15
 8008884:	b2db      	uxtb	r3, r3
 8008886:	f003 0301 	and.w	r3, r3, #1
 800888a:	b2da      	uxtb	r2, r3
 800888c:	683b      	ldr	r3, [r7, #0]
 800888e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008896:	0b9b      	lsrs	r3, r3, #14
 8008898:	b2db      	uxtb	r3, r3
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	b2da      	uxtb	r2, r3
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088aa:	0b5b      	lsrs	r3, r3, #13
 80088ac:	b2db      	uxtb	r3, r3
 80088ae:	f003 0301 	and.w	r3, r3, #1
 80088b2:	b2da      	uxtb	r2, r3
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088be:	0b1b      	lsrs	r3, r3, #12
 80088c0:	b2db      	uxtb	r3, r3
 80088c2:	f003 0301 	and.w	r3, r3, #1
 80088c6:	b2da      	uxtb	r2, r3
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088d2:	0a9b      	lsrs	r3, r3, #10
 80088d4:	b2db      	uxtb	r3, r3
 80088d6:	f003 0303 	and.w	r3, r3, #3
 80088da:	b2da      	uxtb	r2, r3
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088e6:	0a1b      	lsrs	r3, r3, #8
 80088e8:	b2db      	uxtb	r3, r3
 80088ea:	f003 0303 	and.w	r3, r3, #3
 80088ee:	b2da      	uxtb	r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	b2db      	uxtb	r3, r3
 80088fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008902:	b2da      	uxtb	r2, r3
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	2201      	movs	r2, #1
 800890e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008912:	2300      	movs	r3, #0
}
 8008914:	4618      	mov	r0, r3
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr
 8008920:	1fe00fff 	.word	0x1fe00fff

08008924 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b094      	sub	sp, #80	; 0x50
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800892e:	2300      	movs	r3, #0
 8008930:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8008934:	f107 0308 	add.w	r3, r7, #8
 8008938:	4619      	mov	r1, r3
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fb64 	bl	8009008 <SD_SendSDStatus>
 8008940:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008942:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008944:	2b00      	cmp	r3, #0
 8008946:	d011      	beq.n	800896c <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	4a4f      	ldr	r2, [pc, #316]	; (8008a8c <HAL_SD_GetCardStatus+0x168>)
 800894e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008954:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008956:	431a      	orrs	r2, r3
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2201      	movs	r2, #1
 8008960:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008964:	2301      	movs	r3, #1
 8008966:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800896a:	e070      	b.n	8008a4e <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	099b      	lsrs	r3, r3, #6
 8008970:	b2db      	uxtb	r3, r3
 8008972:	f003 0303 	and.w	r3, r3, #3
 8008976:	b2da      	uxtb	r2, r3
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800897c:	68bb      	ldr	r3, [r7, #8]
 800897e:	095b      	lsrs	r3, r3, #5
 8008980:	b2db      	uxtb	r3, r3
 8008982:	f003 0301 	and.w	r3, r3, #1
 8008986:	b2da      	uxtb	r2, r3
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	0a1b      	lsrs	r3, r3, #8
 8008990:	b29b      	uxth	r3, r3
 8008992:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008996:	b29a      	uxth	r2, r3
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	0e1b      	lsrs	r3, r3, #24
 800899c:	b29b      	uxth	r3, r3
 800899e:	4313      	orrs	r3, r2
 80089a0:	b29a      	uxth	r2, r3
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	061a      	lsls	r2, r3, #24
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	021b      	lsls	r3, r3, #8
 80089ae:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80089b2:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	0a1b      	lsrs	r3, r3, #8
 80089b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80089bc:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	0e1b      	lsrs	r3, r3, #24
 80089c2:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	b2da      	uxtb	r2, r3
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80089d0:	693b      	ldr	r3, [r7, #16]
 80089d2:	0a1b      	lsrs	r3, r3, #8
 80089d4:	b2da      	uxtb	r2, r3
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80089da:	693b      	ldr	r3, [r7, #16]
 80089dc:	0d1b      	lsrs	r3, r3, #20
 80089de:	b2db      	uxtb	r3, r3
 80089e0:	f003 030f 	and.w	r3, r3, #15
 80089e4:	b2da      	uxtb	r2, r3
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80089ea:	693b      	ldr	r3, [r7, #16]
 80089ec:	0c1b      	lsrs	r3, r3, #16
 80089ee:	b29b      	uxth	r3, r3
 80089f0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80089f4:	b29a      	uxth	r2, r3
 80089f6:	697b      	ldr	r3, [r7, #20]
 80089f8:	b29b      	uxth	r3, r3
 80089fa:	b2db      	uxtb	r3, r3
 80089fc:	b29b      	uxth	r3, r3
 80089fe:	4313      	orrs	r3, r2
 8008a00:	b29a      	uxth	r2, r3
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8008a06:	697b      	ldr	r3, [r7, #20]
 8008a08:	0a9b      	lsrs	r3, r3, #10
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008a10:	b2da      	uxtb	r2, r3
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	0a1b      	lsrs	r3, r3, #8
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	f003 0303 	and.w	r3, r3, #3
 8008a20:	b2da      	uxtb	r2, r3
 8008a22:	683b      	ldr	r3, [r7, #0]
 8008a24:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8008a26:	697b      	ldr	r3, [r7, #20]
 8008a28:	091b      	lsrs	r3, r3, #4
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	f003 030f 	and.w	r3, r3, #15
 8008a30:	b2da      	uxtb	r2, r3
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	b2db      	uxtb	r3, r3
 8008a3a:	f003 030f 	and.w	r3, r3, #15
 8008a3e:	b2da      	uxtb	r2, r3
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8008a44:	69bb      	ldr	r3, [r7, #24]
 8008a46:	0e1b      	lsrs	r3, r3, #24
 8008a48:	b2da      	uxtb	r2, r3
 8008a4a:	683b      	ldr	r3, [r7, #0]
 8008a4c:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008a56:	4618      	mov	r0, r3
 8008a58:	f001 ffae 	bl	800a9b8 <SDMMC_CmdBlockLength>
 8008a5c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 8008a5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008a60:	2b00      	cmp	r3, #0
 8008a62:	d00d      	beq.n	8008a80 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a08      	ldr	r2, [pc, #32]	; (8008a8c <HAL_SD_GetCardStatus+0x168>)
 8008a6a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2201      	movs	r2, #1
 8008a76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 8008a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3750      	adds	r7, #80	; 0x50
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	1fe00fff 	.word	0x1fe00fff

08008a90 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b083      	sub	sp, #12
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008ad6:	683b      	ldr	r3, [r7, #0]
 8008ad8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008ada:	2300      	movs	r3, #0
}
 8008adc:	4618      	mov	r0, r3
 8008ade:	370c      	adds	r7, #12
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr

08008ae8 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8008ae8:	b5b0      	push	{r4, r5, r7, lr}
 8008aea:	b08e      	sub	sp, #56	; 0x38
 8008aec:	af04      	add	r7, sp, #16
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	2203      	movs	r2, #3
 8008afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b04:	2b03      	cmp	r3, #3
 8008b06:	d02e      	beq.n	8008b66 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b0e:	d106      	bne.n	8008b1e <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b14:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	639a      	str	r2, [r3, #56]	; 0x38
 8008b1c:	e029      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008b24:	d10a      	bne.n	8008b3c <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f000 fb66 	bl	80091f8 <SD_WideBus_Enable>
 8008b2c:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b32:	6a3b      	ldr	r3, [r7, #32]
 8008b34:	431a      	orrs	r2, r3
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	639a      	str	r2, [r3, #56]	; 0x38
 8008b3a:	e01a      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 8008b3c:	683b      	ldr	r3, [r7, #0]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d10a      	bne.n	8008b58 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8008b42:	6878      	ldr	r0, [r7, #4]
 8008b44:	f000 fba3 	bl	800928e <SD_WideBus_Disable>
 8008b48:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b4e:	6a3b      	ldr	r3, [r7, #32]
 8008b50:	431a      	orrs	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	639a      	str	r2, [r3, #56]	; 0x38
 8008b56:	e00c      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b5c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	639a      	str	r2, [r3, #56]	; 0x38
 8008b64:	e005      	b.n	8008b72 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b6a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d007      	beq.n	8008b8a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a2e      	ldr	r2, [pc, #184]	; (8008c38 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008b80:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008b82:	2301      	movs	r3, #1
 8008b84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8008b88:	e034      	b.n	8008bf4 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	689b      	ldr	r3, [r3, #8]
 8008b94:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	691b      	ldr	r3, [r3, #16]
 8008b9e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	695b      	ldr	r3, [r3, #20]
 8008ba4:	2b03      	cmp	r3, #3
 8008ba6:	d903      	bls.n	8008bb0 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	61bb      	str	r3, [r7, #24]
 8008bae:	e012      	b.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bb8:	d103      	bne.n	8008bc2 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	695b      	ldr	r3, [r3, #20]
 8008bbe:	61bb      	str	r3, [r7, #24]
 8008bc0:	e009      	b.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bca:	d102      	bne.n	8008bd2 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 8008bcc:	2302      	movs	r3, #2
 8008bce:	61bb      	str	r3, [r7, #24]
 8008bd0:	e001      	b.n	8008bd6 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 8008bd2:	2304      	movs	r3, #4
 8008bd4:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681d      	ldr	r5, [r3, #0]
 8008bda:	466c      	mov	r4, sp
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008be4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008be8:	f107 0308 	add.w	r3, r7, #8
 8008bec:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008bee:	4628      	mov	r0, r5
 8008bf0:	f001 fe04 	bl	800a7fc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f001 fedb 	bl	800a9b8 <SDMMC_CmdBlockLength>
 8008c02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c04:	6a3b      	ldr	r3, [r7, #32]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00c      	beq.n	8008c24 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	4a0a      	ldr	r2, [pc, #40]	; (8008c38 <HAL_SD_ConfigWideBusOperation+0x150>)
 8008c10:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c16:	6a3b      	ldr	r3, [r7, #32]
 8008c18:	431a      	orrs	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 8008c2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008c30:	4618      	mov	r0, r3
 8008c32:	3728      	adds	r7, #40	; 0x28
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bdb0      	pop	{r4, r5, r7, pc}
 8008c38:	1fe00fff 	.word	0x1fe00fff

08008c3c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b086      	sub	sp, #24
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008c44:	2300      	movs	r3, #0
 8008c46:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008c48:	f107 030c 	add.w	r3, r7, #12
 8008c4c:	4619      	mov	r1, r3
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 faaa 	bl	80091a8 <SD_SendStatus>
 8008c54:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c60:	697b      	ldr	r3, [r7, #20]
 8008c62:	431a      	orrs	r2, r3
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	0a5b      	lsrs	r3, r3, #9
 8008c6c:	f003 030f 	and.w	r3, r3, #15
 8008c70:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008c72:	693b      	ldr	r3, [r7, #16]
}
 8008c74:	4618      	mov	r0, r3
 8008c76:	3718      	adds	r7, #24
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}

08008c7c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008c7c:	b590      	push	{r4, r7, lr}
 8008c7e:	b091      	sub	sp, #68	; 0x44
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008c84:	2301      	movs	r3, #1
 8008c86:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	f001 fe0e 	bl	800a8ae <SDMMC_GetPowerState>
 8008c92:	4603      	mov	r3, r0
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d102      	bne.n	8008c9e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008c98:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008c9c:	e0a8      	b.n	8008df0 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ca2:	2b03      	cmp	r3, #3
 8008ca4:	d02e      	beq.n	8008d04 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	4618      	mov	r0, r3
 8008cac:	f002 f85a 	bl	800ad64 <SDMMC_CmdSendCID>
 8008cb0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008cb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d001      	beq.n	8008cbc <SD_InitCard+0x40>
    {
      return errorstate;
 8008cb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008cba:	e099      	b.n	8008df0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f001 fe39 	bl	800a93a <SDMMC_GetResponse>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	2104      	movs	r1, #4
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f001 fe30 	bl	800a93a <SDMMC_GetResponse>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	2108      	movs	r1, #8
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 fe27 	bl	800a93a <SDMMC_GetResponse>
 8008cec:	4602      	mov	r2, r0
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	210c      	movs	r1, #12
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f001 fe1e 	bl	800a93a <SDMMC_GetResponse>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d08:	2b03      	cmp	r3, #3
 8008d0a:	d00d      	beq.n	8008d28 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f107 020e 	add.w	r2, r7, #14
 8008d14:	4611      	mov	r1, r2
 8008d16:	4618      	mov	r0, r3
 8008d18:	f002 f863 	bl	800ade2 <SDMMC_CmdSetRelAdd>
 8008d1c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d001      	beq.n	8008d28 <SD_InitCard+0xac>
    {
      return errorstate;
 8008d24:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d26:	e063      	b.n	8008df0 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d2c:	2b03      	cmp	r3, #3
 8008d2e:	d036      	beq.n	8008d9e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008d30:	89fb      	ldrh	r3, [r7, #14]
 8008d32:	461a      	mov	r2, r3
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681a      	ldr	r2, [r3, #0]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d40:	041b      	lsls	r3, r3, #16
 8008d42:	4619      	mov	r1, r3
 8008d44:	4610      	mov	r0, r2
 8008d46:	f002 f82c 	bl	800ada2 <SDMMC_CmdSendCSD>
 8008d4a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d001      	beq.n	8008d56 <SD_InitCard+0xda>
    {
      return errorstate;
 8008d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d54:	e04c      	b.n	8008df0 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	2100      	movs	r1, #0
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f001 fdec 	bl	800a93a <SDMMC_GetResponse>
 8008d62:	4602      	mov	r2, r0
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	2104      	movs	r1, #4
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f001 fde3 	bl	800a93a <SDMMC_GetResponse>
 8008d74:	4602      	mov	r2, r0
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2108      	movs	r1, #8
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fdda 	bl	800a93a <SDMMC_GetResponse>
 8008d86:	4602      	mov	r2, r0
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	210c      	movs	r1, #12
 8008d92:	4618      	mov	r0, r3
 8008d94:	f001 fdd1 	bl	800a93a <SDMMC_GetResponse>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	2104      	movs	r1, #4
 8008da4:	4618      	mov	r0, r3
 8008da6:	f001 fdc8 	bl	800a93a <SDMMC_GetResponse>
 8008daa:	4603      	mov	r3, r0
 8008dac:	0d1a      	lsrs	r2, r3, #20
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008db2:	f107 0310 	add.w	r3, r7, #16
 8008db6:	4619      	mov	r1, r3
 8008db8:	6878      	ldr	r0, [r7, #4]
 8008dba:	f7ff fc0f 	bl	80085dc <HAL_SD_GetCardCSD>
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d002      	beq.n	8008dca <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008dc4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008dc8:	e012      	b.n	8008df0 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6819      	ldr	r1, [r3, #0]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008dd2:	041b      	lsls	r3, r3, #16
 8008dd4:	f04f 0400 	mov.w	r4, #0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	4623      	mov	r3, r4
 8008ddc:	4608      	mov	r0, r1
 8008dde:	f001 fed7 	bl	800ab90 <SDMMC_CmdSelDesel>
 8008de2:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008de4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <SD_InitCard+0x172>
  {
    return errorstate;
 8008dea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dec:	e000      	b.n	8008df0 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3744      	adds	r7, #68	; 0x44
 8008df4:	46bd      	mov	sp, r7
 8008df6:	bd90      	pop	{r4, r7, pc}

08008df8 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008df8:	b580      	push	{r7, lr}
 8008dfa:	b088      	sub	sp, #32
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008e00:	2300      	movs	r3, #0
 8008e02:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 8008e04:	2300      	movs	r3, #0
 8008e06:	61fb      	str	r3, [r7, #28]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 8008e0c:	f7f8 fb84 	bl	8001518 <HAL_GetTick>
 8008e10:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	4618      	mov	r0, r3
 8008e18:	f001 fede 	bl	800abd8 <SDMMC_CmdGoIdleState>
 8008e1c:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d001      	beq.n	8008e28 <SD_PowerON+0x30>
  {
    return errorstate;
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	e0e9      	b.n	8008ffc <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	f001 fef1 	bl	800ac14 <SDMMC_CmdOperCond>
 8008e32:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d00d      	beq.n	8008e56 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4618      	mov	r0, r3
 8008e46:	f001 fec7 	bl	800abd8 <SDMMC_CmdGoIdleState>
 8008e4a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d004      	beq.n	8008e5c <SD_PowerON+0x64>
    {
      return errorstate;
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	e0d2      	b.n	8008ffc <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	2201      	movs	r2, #1
 8008e5a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d137      	bne.n	8008ed4 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2100      	movs	r1, #0
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	f001 fef2 	bl	800ac54 <SDMMC_CmdAppCommand>
 8008e70:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d02d      	beq.n	8008ed4 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008e78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008e7c:	e0be      	b.n	8008ffc <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	2100      	movs	r1, #0
 8008e84:	4618      	mov	r0, r3
 8008e86:	f001 fee5 	bl	800ac54 <SDMMC_CmdAppCommand>
 8008e8a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008e8c:	693b      	ldr	r3, [r7, #16]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d001      	beq.n	8008e96 <SD_PowerON+0x9e>
    {
      return errorstate;
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	e0b2      	b.n	8008ffc <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	495a      	ldr	r1, [pc, #360]	; (8009004 <SD_PowerON+0x20c>)
 8008e9c:	4618      	mov	r0, r3
 8008e9e:	f001 fefc 	bl	800ac9a <SDMMC_CmdAppOperCommand>
 8008ea2:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008ea4:	693b      	ldr	r3, [r7, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d002      	beq.n	8008eb0 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008eaa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008eae:	e0a5      	b.n	8008ffc <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2100      	movs	r1, #0
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f001 fd3f 	bl	800a93a <SDMMC_GetResponse>
 8008ebc:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	0fdb      	lsrs	r3, r3, #31
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d101      	bne.n	8008eca <SD_PowerON+0xd2>
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e000      	b.n	8008ecc <SD_PowerON+0xd4>
 8008eca:	2300      	movs	r3, #0
 8008ecc:	61bb      	str	r3, [r7, #24]

    count++;
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	3301      	adds	r3, #1
 8008ed2:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d802      	bhi.n	8008ee4 <SD_PowerON+0xec>
 8008ede:	69bb      	ldr	r3, [r7, #24]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d0cc      	beq.n	8008e7e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d902      	bls.n	8008ef4 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008ef2:	e083      	b.n	8008ffc <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008ef4:	69fb      	ldr	r3, [r7, #28]
 8008ef6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d07d      	beq.n	8008ffa <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2201      	movs	r2, #1
 8008f02:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	699b      	ldr	r3, [r3, #24]
 8008f08:	2b02      	cmp	r3, #2
 8008f0a:	d176      	bne.n	8008ffa <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d071      	beq.n	8008ffa <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008f1c:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	681a      	ldr	r2, [r3, #0]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0208 	orr.w	r2, r2, #8
 8008f2c:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4618      	mov	r0, r3
 8008f34:	f001 ffbc 	bl	800aeb0 <SDMMC_CmdVoltageSwitch>
 8008f38:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 8008f3a:	693b      	ldr	r3, [r7, #16]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d00c      	beq.n	8008f5a <SD_PowerON+0x162>
        {
          return errorstate;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	e05b      	b.n	8008ffc <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008f44:	f7f8 fae8 	bl	8001518 <HAL_GetTick>
 8008f48:	4602      	mov	r2, r0
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f52:	d102      	bne.n	8008f5a <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 8008f54:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008f58:	e050      	b.n	8008ffc <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f60:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008f64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008f68:	d1ec      	bne.n	8008f44 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8008f72:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f82:	d002      	beq.n	8008f8a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8008f84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008f88:	e038      	b.n	8008ffc <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 8008f8a:	2001      	movs	r0, #1
 8008f8c:	f7ff fb1a 	bl	80085c4 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f042 0204 	orr.w	r2, r2, #4
 8008f9e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008fa0:	e00a      	b.n	8008fb8 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8008fa2:	f7f8 fab9 	bl	8001518 <HAL_GetTick>
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	1ad3      	subs	r3, r2, r3
 8008fac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb0:	d102      	bne.n	8008fb8 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 8008fb2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008fb6:	e021      	b.n	8008ffc <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008fc6:	d1ec      	bne.n	8008fa2 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8008fd0:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008fdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008fe0:	d102      	bne.n	8008fe8 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008fe2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008fe6:	e009      	b.n	8008ffc <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2213      	movs	r2, #19
 8008fee:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f04f 32ff 	mov.w	r2, #4294967295
 8008ff8:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	3720      	adds	r7, #32
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}
 8009004:	c1100000 	.word	0xc1100000

08009008 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b08c      	sub	sp, #48	; 0x30
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8009012:	f7f8 fa81 	bl	8001518 <HAL_GetTick>
 8009016:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8009018:	683b      	ldr	r3, [r7, #0]
 800901a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	2100      	movs	r1, #0
 8009022:	4618      	mov	r0, r3
 8009024:	f001 fc89 	bl	800a93a <SDMMC_GetResponse>
 8009028:	4603      	mov	r3, r0
 800902a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800902e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009032:	d102      	bne.n	800903a <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009034:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009038:	e0b0      	b.n	800919c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2140      	movs	r1, #64	; 0x40
 8009040:	4618      	mov	r0, r3
 8009042:	f001 fcb9 	bl	800a9b8 <SDMMC_CmdBlockLength>
 8009046:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	2b00      	cmp	r3, #0
 800904c:	d005      	beq.n	800905a <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 8009056:	6a3b      	ldr	r3, [r7, #32]
 8009058:	e0a0      	b.n	800919c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009062:	041b      	lsls	r3, r3, #16
 8009064:	4619      	mov	r1, r3
 8009066:	4610      	mov	r0, r2
 8009068:	f001 fdf4 	bl	800ac54 <SDMMC_CmdAppCommand>
 800906c:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800906e:	6a3b      	ldr	r3, [r7, #32]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d005      	beq.n	8009080 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800907c:	6a3b      	ldr	r3, [r7, #32]
 800907e:	e08d      	b.n	800919c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8009080:	f04f 33ff 	mov.w	r3, #4294967295
 8009084:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8009086:	2340      	movs	r3, #64	; 0x40
 8009088:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800908a:	2360      	movs	r3, #96	; 0x60
 800908c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800908e:	2302      	movs	r3, #2
 8009090:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8009092:	2300      	movs	r3, #0
 8009094:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009096:	2301      	movs	r3, #1
 8009098:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f107 0208 	add.w	r2, r7, #8
 80090a2:	4611      	mov	r1, r2
 80090a4:	4618      	mov	r0, r3
 80090a6:	f001 fc5b 	bl	800a960 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f001 fedc 	bl	800ae6c <SDMMC_CmdStatusRegister>
 80090b4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80090b6:	6a3b      	ldr	r3, [r7, #32]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d02b      	beq.n	8009114 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 80090c4:	6a3b      	ldr	r3, [r7, #32]
 80090c6:	e069      	b.n	800919c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d013      	beq.n	80090fe <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 80090d6:	2300      	movs	r3, #0
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090da:	e00d      	b.n	80090f8 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	4618      	mov	r0, r3
 80090e2:	f001 fbb5 	bl	800a850 <SDMMC_ReadFIFO>
 80090e6:	4602      	mov	r2, r0
 80090e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ea:	601a      	str	r2, [r3, #0]
        pData++;
 80090ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090ee:	3304      	adds	r3, #4
 80090f0:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 80090f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090f4:	3301      	adds	r3, #1
 80090f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	2b07      	cmp	r3, #7
 80090fc:	d9ee      	bls.n	80090dc <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80090fe:	f7f8 fa0b 	bl	8001518 <HAL_GetTick>
 8009102:	4602      	mov	r2, r0
 8009104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800910c:	d102      	bne.n	8009114 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800910e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009112:	e043      	b.n	800919c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800911a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800911e:	2b00      	cmp	r3, #0
 8009120:	d0d2      	beq.n	80090c8 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009128:	f003 0308 	and.w	r3, r3, #8
 800912c:	2b00      	cmp	r3, #0
 800912e:	d001      	beq.n	8009134 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8009130:	2308      	movs	r3, #8
 8009132:	e033      	b.n	800919c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800913a:	f003 0302 	and.w	r3, r3, #2
 800913e:	2b00      	cmp	r3, #0
 8009140:	d001      	beq.n	8009146 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009142:	2302      	movs	r3, #2
 8009144:	e02a      	b.n	800919c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800914c:	f003 0320 	and.w	r3, r3, #32
 8009150:	2b00      	cmp	r3, #0
 8009152:	d017      	beq.n	8009184 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8009154:	2320      	movs	r3, #32
 8009156:	e021      	b.n	800919c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	4618      	mov	r0, r3
 800915e:	f001 fb77 	bl	800a850 <SDMMC_ReadFIFO>
 8009162:	4602      	mov	r2, r0
 8009164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009166:	601a      	str	r2, [r3, #0]
    pData++;
 8009168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800916a:	3304      	adds	r3, #4
 800916c:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800916e:	f7f8 f9d3 	bl	8001518 <HAL_GetTick>
 8009172:	4602      	mov	r2, r0
 8009174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009176:	1ad3      	subs	r3, r2, r3
 8009178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800917c:	d102      	bne.n	8009184 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800917e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009182:	e00b      	b.n	800919c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800918a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1e2      	bne.n	8009158 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	4a03      	ldr	r2, [pc, #12]	; (80091a4 <SD_SendSDStatus+0x19c>)
 8009198:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800919a:	2300      	movs	r3, #0
}
 800919c:	4618      	mov	r0, r3
 800919e:	3730      	adds	r7, #48	; 0x30
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	18000f3a 	.word	0x18000f3a

080091a8 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d102      	bne.n	80091be <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80091b8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80091bc:	e018      	b.n	80091f0 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681a      	ldr	r2, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c6:	041b      	lsls	r3, r3, #16
 80091c8:	4619      	mov	r1, r3
 80091ca:	4610      	mov	r0, r2
 80091cc:	f001 fe2b 	bl	800ae26 <SDMMC_CmdSendStatus>
 80091d0:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d001      	beq.n	80091dc <SD_SendStatus+0x34>
  {
    return errorstate;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	e009      	b.n	80091f0 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2100      	movs	r1, #0
 80091e2:	4618      	mov	r0, r3
 80091e4:	f001 fba9 	bl	800a93a <SDMMC_GetResponse>
 80091e8:	4602      	mov	r2, r0
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b086      	sub	sp, #24
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]
 8009204:	2300      	movs	r3, #0
 8009206:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	2100      	movs	r1, #0
 800920e:	4618      	mov	r0, r3
 8009210:	f001 fb93 	bl	800a93a <SDMMC_GetResponse>
 8009214:	4603      	mov	r3, r0
 8009216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800921a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800921e:	d102      	bne.n	8009226 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8009220:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009224:	e02f      	b.n	8009286 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8009226:	f107 030c 	add.w	r3, r7, #12
 800922a:	4619      	mov	r1, r3
 800922c:	6878      	ldr	r0, [r7, #4]
 800922e:	f000 f879 	bl	8009324 <SD_FindSCR>
 8009232:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d001      	beq.n	800923e <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800923a:	697b      	ldr	r3, [r7, #20]
 800923c:	e023      	b.n	8009286 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800923e:	693b      	ldr	r3, [r7, #16]
 8009240:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d01c      	beq.n	8009282 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681a      	ldr	r2, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009250:	041b      	lsls	r3, r3, #16
 8009252:	4619      	mov	r1, r3
 8009254:	4610      	mov	r0, r2
 8009256:	f001 fcfd 	bl	800ac54 <SDMMC_CmdAppCommand>
 800925a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800925c:	697b      	ldr	r3, [r7, #20]
 800925e:	2b00      	cmp	r3, #0
 8009260:	d001      	beq.n	8009266 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	e00f      	b.n	8009286 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	2102      	movs	r1, #2
 800926c:	4618      	mov	r0, r3
 800926e:	f001 fd34 	bl	800acda <SDMMC_CmdBusWidth>
 8009272:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d001      	beq.n	800927e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800927a:	697b      	ldr	r3, [r7, #20]
 800927c:	e003      	b.n	8009286 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800927e:	2300      	movs	r3, #0
 8009280:	e001      	b.n	8009286 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009282:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8009286:	4618      	mov	r0, r3
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b086      	sub	sp, #24
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8009296:	2300      	movs	r3, #0
 8009298:	60fb      	str	r3, [r7, #12]
 800929a:	2300      	movs	r3, #0
 800929c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2100      	movs	r1, #0
 80092a4:	4618      	mov	r0, r3
 80092a6:	f001 fb48 	bl	800a93a <SDMMC_GetResponse>
 80092aa:	4603      	mov	r3, r0
 80092ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80092b4:	d102      	bne.n	80092bc <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80092b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80092ba:	e02f      	b.n	800931c <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80092bc:	f107 030c 	add.w	r3, r7, #12
 80092c0:	4619      	mov	r1, r3
 80092c2:	6878      	ldr	r0, [r7, #4]
 80092c4:	f000 f82e 	bl	8009324 <SD_FindSCR>
 80092c8:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d001      	beq.n	80092d4 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	e023      	b.n	800931c <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d01c      	beq.n	8009318 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681a      	ldr	r2, [r3, #0]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092e6:	041b      	lsls	r3, r3, #16
 80092e8:	4619      	mov	r1, r3
 80092ea:	4610      	mov	r0, r2
 80092ec:	f001 fcb2 	bl	800ac54 <SDMMC_CmdAppCommand>
 80092f0:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d001      	beq.n	80092fc <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	e00f      	b.n	800931c <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	2100      	movs	r1, #0
 8009302:	4618      	mov	r0, r3
 8009304:	f001 fce9 	bl	800acda <SDMMC_CmdBusWidth>
 8009308:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d001      	beq.n	8009314 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	e003      	b.n	800931c <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8009314:	2300      	movs	r3, #0
 8009316:	e001      	b.n	800931c <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8009318:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800931c:	4618      	mov	r0, r3
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b08e      	sub	sp, #56	; 0x38
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
 800932c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800932e:	f7f8 f8f3 	bl	8001518 <HAL_GetTick>
 8009332:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8009334:	2300      	movs	r3, #0
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8009338:	2300      	movs	r3, #0
 800933a:	60bb      	str	r3, [r7, #8]
 800933c:	2300      	movs	r3, #0
 800933e:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2108      	movs	r1, #8
 800934a:	4618      	mov	r0, r3
 800934c:	f001 fb34 	bl	800a9b8 <SDMMC_CmdBlockLength>
 8009350:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009354:	2b00      	cmp	r3, #0
 8009356:	d001      	beq.n	800935c <SD_FindSCR+0x38>
  {
    return errorstate;
 8009358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800935a:	e0ad      	b.n	80094b8 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681a      	ldr	r2, [r3, #0]
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009364:	041b      	lsls	r3, r3, #16
 8009366:	4619      	mov	r1, r3
 8009368:	4610      	mov	r0, r2
 800936a:	f001 fc73 	bl	800ac54 <SDMMC_CmdAppCommand>
 800936e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8009370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009372:	2b00      	cmp	r3, #0
 8009374:	d001      	beq.n	800937a <SD_FindSCR+0x56>
  {
    return errorstate;
 8009376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009378:	e09e      	b.n	80094b8 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800937a:	f04f 33ff 	mov.w	r3, #4294967295
 800937e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8009380:	2308      	movs	r3, #8
 8009382:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8009384:	2330      	movs	r3, #48	; 0x30
 8009386:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8009388:	2302      	movs	r3, #2
 800938a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800938c:	2300      	movs	r3, #0
 800938e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8009390:	2301      	movs	r3, #1
 8009392:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f107 0210 	add.w	r2, r7, #16
 800939c:	4611      	mov	r1, r2
 800939e:	4618      	mov	r0, r3
 80093a0:	f001 fade 	bl	800a960 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4618      	mov	r0, r3
 80093aa:	f001 fcb9 	bl	800ad20 <SDMMC_CmdSendSCR>
 80093ae:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d027      	beq.n	8009406 <SD_FindSCR+0xe2>
  {
    return errorstate;
 80093b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b8:	e07e      	b.n	80094b8 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d113      	bne.n	80093f0 <SD_FindSCR+0xcc>
 80093c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d110      	bne.n	80093f0 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	4618      	mov	r0, r3
 80093d4:	f001 fa3c 	bl	800a850 <SDMMC_ReadFIFO>
 80093d8:	4603      	mov	r3, r0
 80093da:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	4618      	mov	r0, r3
 80093e2:	f001 fa35 	bl	800a850 <SDMMC_ReadFIFO>
 80093e6:	4603      	mov	r3, r0
 80093e8:	60fb      	str	r3, [r7, #12]
      index++;
 80093ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093ec:	3301      	adds	r3, #1
 80093ee:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 80093f0:	f7f8 f892 	bl	8001518 <HAL_GetTick>
 80093f4:	4602      	mov	r2, r0
 80093f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093f8:	1ad3      	subs	r3, r2, r3
 80093fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093fe:	d102      	bne.n	8009406 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8009400:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009404:	e058      	b.n	80094b8 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800940c:	f240 532a 	movw	r3, #1322	; 0x52a
 8009410:	4013      	ands	r3, r2
 8009412:	2b00      	cmp	r3, #0
 8009414:	d0d1      	beq.n	80093ba <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800941c:	f003 0308 	and.w	r3, r3, #8
 8009420:	2b00      	cmp	r3, #0
 8009422:	d005      	beq.n	8009430 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	2208      	movs	r2, #8
 800942a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800942c:	2308      	movs	r3, #8
 800942e:	e043      	b.n	80094b8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d005      	beq.n	800944a <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	2202      	movs	r2, #2
 8009444:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8009446:	2302      	movs	r3, #2
 8009448:	e036      	b.n	80094b8 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b00      	cmp	r3, #0
 8009456:	d005      	beq.n	8009464 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2220      	movs	r2, #32
 800945e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8009460:	2320      	movs	r3, #32
 8009462:	e029      	b.n	80094b8 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a15      	ldr	r2, [pc, #84]	; (80094c0 <SD_FindSCR+0x19c>)
 800946a:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	061a      	lsls	r2, r3, #24
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	021b      	lsls	r3, r3, #8
 8009474:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8009478:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	0a1b      	lsrs	r3, r3, #8
 800947e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8009482:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	0e1b      	lsrs	r3, r3, #24
 8009488:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800948a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948c:	601a      	str	r2, [r3, #0]
    scr++;
 800948e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009490:	3304      	adds	r3, #4
 8009492:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	061a      	lsls	r2, r3, #24
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	021b      	lsls	r3, r3, #8
 800949c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80094a0:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	0a1b      	lsrs	r3, r3, #8
 80094a6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094aa:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	0e1b      	lsrs	r3, r3, #24
 80094b0:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3738      	adds	r7, #56	; 0x38
 80094bc:	46bd      	mov	sp, r7
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	18000f3a 	.word	0x18000f3a

080094c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 80094cc:	2300      	movs	r3, #0
 80094ce:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e0e2      	b.n	80096a0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	4a70      	ldr	r2, [pc, #448]	; (80096a8 <HAL_SPI_Init+0x1e4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d00f      	beq.n	800950a <HAL_SPI_Init+0x46>
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	4a6f      	ldr	r2, [pc, #444]	; (80096ac <HAL_SPI_Init+0x1e8>)
 80094f0:	4293      	cmp	r3, r2
 80094f2:	d00a      	beq.n	800950a <HAL_SPI_Init+0x46>
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a6d      	ldr	r2, [pc, #436]	; (80096b0 <HAL_SPI_Init+0x1ec>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d005      	beq.n	800950a <HAL_SPI_Init+0x46>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	68db      	ldr	r3, [r3, #12]
 8009502:	2b0f      	cmp	r3, #15
 8009504:	d901      	bls.n	800950a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	e0ca      	b.n	80096a0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f000 f8d2 	bl	80096b4 <SPI_GetPacketSize>
 8009510:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a64      	ldr	r2, [pc, #400]	; (80096a8 <HAL_SPI_Init+0x1e4>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d00c      	beq.n	8009536 <HAL_SPI_Init+0x72>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a62      	ldr	r2, [pc, #392]	; (80096ac <HAL_SPI_Init+0x1e8>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d007      	beq.n	8009536 <HAL_SPI_Init+0x72>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a61      	ldr	r2, [pc, #388]	; (80096b0 <HAL_SPI_Init+0x1ec>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d002      	beq.n	8009536 <HAL_SPI_Init+0x72>
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	2b08      	cmp	r3, #8
 8009534:	d811      	bhi.n	800955a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800953a:	4a5b      	ldr	r2, [pc, #364]	; (80096a8 <HAL_SPI_Init+0x1e4>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d009      	beq.n	8009554 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a59      	ldr	r2, [pc, #356]	; (80096ac <HAL_SPI_Init+0x1e8>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d004      	beq.n	8009554 <HAL_SPI_Init+0x90>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a58      	ldr	r2, [pc, #352]	; (80096b0 <HAL_SPI_Init+0x1ec>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d104      	bne.n	800955e <HAL_SPI_Init+0x9a>
 8009554:	68bb      	ldr	r3, [r7, #8]
 8009556:	2b10      	cmp	r3, #16
 8009558:	d901      	bls.n	800955e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e0a0      	b.n	80096a0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f7f7 fd22 	bl	8000fbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f022 0201 	bic.w	r2, r2, #1
 800958e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009598:	d110      	bne.n	80095bc <HAL_SPI_Init+0xf8>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80095a2:	d10b      	bne.n	80095bc <HAL_SPI_Init+0xf8>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d107      	bne.n	80095bc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80095ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	69da      	ldr	r2, [r3, #28]
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095c4:	431a      	orrs	r2, r3
 80095c6:	68fb      	ldr	r3, [r7, #12]
 80095c8:	431a      	orrs	r2, r3
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095ce:	ea42 0103 	orr.w	r1, r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	68da      	ldr	r2, [r3, #12]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	430a      	orrs	r2, r1
 80095dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	431a      	orrs	r2, r3
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095ec:	431a      	orrs	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	699b      	ldr	r3, [r3, #24]
 80095f2:	431a      	orrs	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	431a      	orrs	r2, r3
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	695b      	ldr	r3, [r3, #20]
 80095fe:	431a      	orrs	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	6a1b      	ldr	r3, [r3, #32]
 8009604:	431a      	orrs	r2, r3
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	431a      	orrs	r2, r3
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009610:	431a      	orrs	r2, r3
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	689b      	ldr	r3, [r3, #8]
 8009616:	431a      	orrs	r2, r3
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800961c:	ea42 0103 	orr.w	r1, r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	430a      	orrs	r2, r1
 800962a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d113      	bne.n	800965c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	689b      	ldr	r3, [r3, #8]
 800963a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009646:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	689b      	ldr	r3, [r3, #8]
 800964e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800965a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0201 	bic.w	r2, r2, #1
 800966a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009674:	2b00      	cmp	r3, #0
 8009676:	d00a      	beq.n	800968e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	430a      	orrs	r2, r1
 800968c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2200      	movs	r2, #0
 8009692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2201      	movs	r2, #1
 800969a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800969e:	2300      	movs	r3, #0
}
 80096a0:	4618      	mov	r0, r3
 80096a2:	3710      	adds	r7, #16
 80096a4:	46bd      	mov	sp, r7
 80096a6:	bd80      	pop	{r7, pc}
 80096a8:	40013000 	.word	0x40013000
 80096ac:	40003800 	.word	0x40003800
 80096b0:	40003c00 	.word	0x40003c00

080096b4 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80096b4:	b480      	push	{r7}
 80096b6:	b085      	sub	sp, #20
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c0:	095b      	lsrs	r3, r3, #5
 80096c2:	3301      	adds	r3, #1
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	68db      	ldr	r3, [r3, #12]
 80096ca:	3301      	adds	r3, #1
 80096cc:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096ce:	68bb      	ldr	r3, [r7, #8]
 80096d0:	3307      	adds	r3, #7
 80096d2:	08db      	lsrs	r3, r3, #3
 80096d4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	68fa      	ldr	r2, [r7, #12]
 80096da:	fb02 f303 	mul.w	r3, r2, r3
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3714      	adds	r7, #20
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b082      	sub	sp, #8
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d101      	bne.n	80096fc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096f8:	2301      	movs	r3, #1
 80096fa:	e042      	b.n	8009782 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009702:	2b00      	cmp	r3, #0
 8009704:	d106      	bne.n	8009714 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7f7 fc9e 	bl	8001050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2224      	movs	r2, #36	; 0x24
 8009718:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f022 0201 	bic.w	r2, r2, #1
 800972a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f82d 	bl	800978c <UART_SetConfig>
 8009732:	4603      	mov	r3, r0
 8009734:	2b01      	cmp	r3, #1
 8009736:	d101      	bne.n	800973c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009738:	2301      	movs	r3, #1
 800973a:	e022      	b.n	8009782 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	2b00      	cmp	r3, #0
 8009742:	d002      	beq.n	800974a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fdd1 	bl	800a2ec <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	685a      	ldr	r2, [r3, #4]
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009758:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	689a      	ldr	r2, [r3, #8]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009768:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	f042 0201 	orr.w	r2, r2, #1
 8009778:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f000 fe58 	bl	800a430 <UART_CheckIdleState>
 8009780:	4603      	mov	r3, r0
}
 8009782:	4618      	mov	r0, r3
 8009784:	3708      	adds	r7, #8
 8009786:	46bd      	mov	sp, r7
 8009788:	bd80      	pop	{r7, pc}
	...

0800978c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800978c:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009790:	b08e      	sub	sp, #56	; 0x38
 8009792:	af00      	add	r7, sp, #0
 8009794:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009796:	2300      	movs	r3, #0
 8009798:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	689a      	ldr	r2, [r3, #8]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	431a      	orrs	r2, r3
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	695b      	ldr	r3, [r3, #20]
 80097aa:	431a      	orrs	r2, r3
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097ba:	4313      	orrs	r3, r2
 80097bc:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	681a      	ldr	r2, [r3, #0]
 80097c4:	4bc1      	ldr	r3, [pc, #772]	; (8009acc <UART_SetConfig+0x340>)
 80097c6:	4013      	ands	r3, r2
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	6812      	ldr	r2, [r2, #0]
 80097cc:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80097ce:	430b      	orrs	r3, r1
 80097d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	68da      	ldr	r2, [r3, #12]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	430a      	orrs	r2, r1
 80097e6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	699b      	ldr	r3, [r3, #24]
 80097ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4ab7      	ldr	r2, [pc, #732]	; (8009ad0 <UART_SetConfig+0x344>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d004      	beq.n	8009802 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	6a1b      	ldr	r3, [r3, #32]
 80097fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097fe:	4313      	orrs	r3, r2
 8009800:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	689a      	ldr	r2, [r3, #8]
 8009808:	4bb2      	ldr	r3, [pc, #712]	; (8009ad4 <UART_SetConfig+0x348>)
 800980a:	4013      	ands	r3, r2
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	6812      	ldr	r2, [r2, #0]
 8009810:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009812:	430b      	orrs	r3, r1
 8009814:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981c:	f023 010f 	bic.w	r1, r3, #15
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	430a      	orrs	r2, r1
 800982a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	4aa9      	ldr	r2, [pc, #676]	; (8009ad8 <UART_SetConfig+0x34c>)
 8009832:	4293      	cmp	r3, r2
 8009834:	d177      	bne.n	8009926 <UART_SetConfig+0x19a>
 8009836:	4ba9      	ldr	r3, [pc, #676]	; (8009adc <UART_SetConfig+0x350>)
 8009838:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800983a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800983e:	2b28      	cmp	r3, #40	; 0x28
 8009840:	d86c      	bhi.n	800991c <UART_SetConfig+0x190>
 8009842:	a201      	add	r2, pc, #4	; (adr r2, 8009848 <UART_SetConfig+0xbc>)
 8009844:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009848:	080098ed 	.word	0x080098ed
 800984c:	0800991d 	.word	0x0800991d
 8009850:	0800991d 	.word	0x0800991d
 8009854:	0800991d 	.word	0x0800991d
 8009858:	0800991d 	.word	0x0800991d
 800985c:	0800991d 	.word	0x0800991d
 8009860:	0800991d 	.word	0x0800991d
 8009864:	0800991d 	.word	0x0800991d
 8009868:	080098f5 	.word	0x080098f5
 800986c:	0800991d 	.word	0x0800991d
 8009870:	0800991d 	.word	0x0800991d
 8009874:	0800991d 	.word	0x0800991d
 8009878:	0800991d 	.word	0x0800991d
 800987c:	0800991d 	.word	0x0800991d
 8009880:	0800991d 	.word	0x0800991d
 8009884:	0800991d 	.word	0x0800991d
 8009888:	080098fd 	.word	0x080098fd
 800988c:	0800991d 	.word	0x0800991d
 8009890:	0800991d 	.word	0x0800991d
 8009894:	0800991d 	.word	0x0800991d
 8009898:	0800991d 	.word	0x0800991d
 800989c:	0800991d 	.word	0x0800991d
 80098a0:	0800991d 	.word	0x0800991d
 80098a4:	0800991d 	.word	0x0800991d
 80098a8:	08009905 	.word	0x08009905
 80098ac:	0800991d 	.word	0x0800991d
 80098b0:	0800991d 	.word	0x0800991d
 80098b4:	0800991d 	.word	0x0800991d
 80098b8:	0800991d 	.word	0x0800991d
 80098bc:	0800991d 	.word	0x0800991d
 80098c0:	0800991d 	.word	0x0800991d
 80098c4:	0800991d 	.word	0x0800991d
 80098c8:	0800990d 	.word	0x0800990d
 80098cc:	0800991d 	.word	0x0800991d
 80098d0:	0800991d 	.word	0x0800991d
 80098d4:	0800991d 	.word	0x0800991d
 80098d8:	0800991d 	.word	0x0800991d
 80098dc:	0800991d 	.word	0x0800991d
 80098e0:	0800991d 	.word	0x0800991d
 80098e4:	0800991d 	.word	0x0800991d
 80098e8:	08009915 	.word	0x08009915
 80098ec:	2301      	movs	r3, #1
 80098ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098f2:	e233      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80098f4:	2304      	movs	r3, #4
 80098f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80098fa:	e22f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80098fc:	2308      	movs	r3, #8
 80098fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009902:	e22b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009904:	2310      	movs	r3, #16
 8009906:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800990a:	e227      	b.n	8009d5c <UART_SetConfig+0x5d0>
 800990c:	2320      	movs	r3, #32
 800990e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009912:	e223      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009914:	2340      	movs	r3, #64	; 0x40
 8009916:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800991a:	e21f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 800991c:	2380      	movs	r3, #128	; 0x80
 800991e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009922:	bf00      	nop
 8009924:	e21a      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a6d      	ldr	r2, [pc, #436]	; (8009ae0 <UART_SetConfig+0x354>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d132      	bne.n	8009996 <UART_SetConfig+0x20a>
 8009930:	4b6a      	ldr	r3, [pc, #424]	; (8009adc <UART_SetConfig+0x350>)
 8009932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009934:	f003 0307 	and.w	r3, r3, #7
 8009938:	2b05      	cmp	r3, #5
 800993a:	d827      	bhi.n	800998c <UART_SetConfig+0x200>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0x1b8>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	0800995d 	.word	0x0800995d
 8009948:	08009965 	.word	0x08009965
 800994c:	0800996d 	.word	0x0800996d
 8009950:	08009975 	.word	0x08009975
 8009954:	0800997d 	.word	0x0800997d
 8009958:	08009985 	.word	0x08009985
 800995c:	2300      	movs	r3, #0
 800995e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009962:	e1fb      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009964:	2304      	movs	r3, #4
 8009966:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800996a:	e1f7      	b.n	8009d5c <UART_SetConfig+0x5d0>
 800996c:	2308      	movs	r3, #8
 800996e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009972:	e1f3      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009974:	2310      	movs	r3, #16
 8009976:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800997a:	e1ef      	b.n	8009d5c <UART_SetConfig+0x5d0>
 800997c:	2320      	movs	r3, #32
 800997e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009982:	e1eb      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009984:	2340      	movs	r3, #64	; 0x40
 8009986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800998a:	e1e7      	b.n	8009d5c <UART_SetConfig+0x5d0>
 800998c:	2380      	movs	r3, #128	; 0x80
 800998e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009992:	bf00      	nop
 8009994:	e1e2      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	4a52      	ldr	r2, [pc, #328]	; (8009ae4 <UART_SetConfig+0x358>)
 800999c:	4293      	cmp	r3, r2
 800999e:	d132      	bne.n	8009a06 <UART_SetConfig+0x27a>
 80099a0:	4b4e      	ldr	r3, [pc, #312]	; (8009adc <UART_SetConfig+0x350>)
 80099a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80099a4:	f003 0307 	and.w	r3, r3, #7
 80099a8:	2b05      	cmp	r3, #5
 80099aa:	d827      	bhi.n	80099fc <UART_SetConfig+0x270>
 80099ac:	a201      	add	r2, pc, #4	; (adr r2, 80099b4 <UART_SetConfig+0x228>)
 80099ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099b2:	bf00      	nop
 80099b4:	080099cd 	.word	0x080099cd
 80099b8:	080099d5 	.word	0x080099d5
 80099bc:	080099dd 	.word	0x080099dd
 80099c0:	080099e5 	.word	0x080099e5
 80099c4:	080099ed 	.word	0x080099ed
 80099c8:	080099f5 	.word	0x080099f5
 80099cc:	2300      	movs	r3, #0
 80099ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099d2:	e1c3      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099d4:	2304      	movs	r3, #4
 80099d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099da:	e1bf      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099dc:	2308      	movs	r3, #8
 80099de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099e2:	e1bb      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099e4:	2310      	movs	r3, #16
 80099e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099ea:	e1b7      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099ec:	2320      	movs	r3, #32
 80099ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099f2:	e1b3      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099f4:	2340      	movs	r3, #64	; 0x40
 80099f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80099fa:	e1af      	b.n	8009d5c <UART_SetConfig+0x5d0>
 80099fc:	2380      	movs	r3, #128	; 0x80
 80099fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a02:	bf00      	nop
 8009a04:	e1aa      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	4a37      	ldr	r2, [pc, #220]	; (8009ae8 <UART_SetConfig+0x35c>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d132      	bne.n	8009a76 <UART_SetConfig+0x2ea>
 8009a10:	4b32      	ldr	r3, [pc, #200]	; (8009adc <UART_SetConfig+0x350>)
 8009a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a14:	f003 0307 	and.w	r3, r3, #7
 8009a18:	2b05      	cmp	r3, #5
 8009a1a:	d827      	bhi.n	8009a6c <UART_SetConfig+0x2e0>
 8009a1c:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <UART_SetConfig+0x298>)
 8009a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a22:	bf00      	nop
 8009a24:	08009a3d 	.word	0x08009a3d
 8009a28:	08009a45 	.word	0x08009a45
 8009a2c:	08009a4d 	.word	0x08009a4d
 8009a30:	08009a55 	.word	0x08009a55
 8009a34:	08009a5d 	.word	0x08009a5d
 8009a38:	08009a65 	.word	0x08009a65
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a42:	e18b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a44:	2304      	movs	r3, #4
 8009a46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a4a:	e187      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a4c:	2308      	movs	r3, #8
 8009a4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a52:	e183      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a54:	2310      	movs	r3, #16
 8009a56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a5a:	e17f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a5c:	2320      	movs	r3, #32
 8009a5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a62:	e17b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a64:	2340      	movs	r3, #64	; 0x40
 8009a66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a6a:	e177      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a6c:	2380      	movs	r3, #128	; 0x80
 8009a6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009a72:	bf00      	nop
 8009a74:	e172      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a1c      	ldr	r2, [pc, #112]	; (8009aec <UART_SetConfig+0x360>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d144      	bne.n	8009b0a <UART_SetConfig+0x37e>
 8009a80:	4b16      	ldr	r3, [pc, #88]	; (8009adc <UART_SetConfig+0x350>)
 8009a82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a84:	f003 0307 	and.w	r3, r3, #7
 8009a88:	2b05      	cmp	r3, #5
 8009a8a:	d839      	bhi.n	8009b00 <UART_SetConfig+0x374>
 8009a8c:	a201      	add	r2, pc, #4	; (adr r2, 8009a94 <UART_SetConfig+0x308>)
 8009a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a92:	bf00      	nop
 8009a94:	08009aad 	.word	0x08009aad
 8009a98:	08009ab5 	.word	0x08009ab5
 8009a9c:	08009abd 	.word	0x08009abd
 8009aa0:	08009ac5 	.word	0x08009ac5
 8009aa4:	08009af1 	.word	0x08009af1
 8009aa8:	08009af9 	.word	0x08009af9
 8009aac:	2300      	movs	r3, #0
 8009aae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ab2:	e153      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009ab4:	2304      	movs	r3, #4
 8009ab6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aba:	e14f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009abc:	2308      	movs	r3, #8
 8009abe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ac2:	e14b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009ac4:	2310      	movs	r3, #16
 8009ac6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009aca:	e147      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009acc:	cfff69f3 	.word	0xcfff69f3
 8009ad0:	58000c00 	.word	0x58000c00
 8009ad4:	11fff4ff 	.word	0x11fff4ff
 8009ad8:	40011000 	.word	0x40011000
 8009adc:	58024400 	.word	0x58024400
 8009ae0:	40004400 	.word	0x40004400
 8009ae4:	40004800 	.word	0x40004800
 8009ae8:	40004c00 	.word	0x40004c00
 8009aec:	40005000 	.word	0x40005000
 8009af0:	2320      	movs	r3, #32
 8009af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009af6:	e131      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009af8:	2340      	movs	r3, #64	; 0x40
 8009afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009afe:	e12d      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009b00:	2380      	movs	r3, #128	; 0x80
 8009b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009b06:	bf00      	nop
 8009b08:	e128      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4ab6      	ldr	r2, [pc, #728]	; (8009de8 <UART_SetConfig+0x65c>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d178      	bne.n	8009c06 <UART_SetConfig+0x47a>
 8009b14:	4bb5      	ldr	r3, [pc, #724]	; (8009dec <UART_SetConfig+0x660>)
 8009b16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009b1c:	2b28      	cmp	r3, #40	; 0x28
 8009b1e:	d86d      	bhi.n	8009bfc <UART_SetConfig+0x470>
 8009b20:	a201      	add	r2, pc, #4	; (adr r2, 8009b28 <UART_SetConfig+0x39c>)
 8009b22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b26:	bf00      	nop
 8009b28:	08009bcd 	.word	0x08009bcd
 8009b2c:	08009bfd 	.word	0x08009bfd
 8009b30:	08009bfd 	.word	0x08009bfd
 8009b34:	08009bfd 	.word	0x08009bfd
 8009b38:	08009bfd 	.word	0x08009bfd
 8009b3c:	08009bfd 	.word	0x08009bfd
 8009b40:	08009bfd 	.word	0x08009bfd
 8009b44:	08009bfd 	.word	0x08009bfd
 8009b48:	08009bd5 	.word	0x08009bd5
 8009b4c:	08009bfd 	.word	0x08009bfd
 8009b50:	08009bfd 	.word	0x08009bfd
 8009b54:	08009bfd 	.word	0x08009bfd
 8009b58:	08009bfd 	.word	0x08009bfd
 8009b5c:	08009bfd 	.word	0x08009bfd
 8009b60:	08009bfd 	.word	0x08009bfd
 8009b64:	08009bfd 	.word	0x08009bfd
 8009b68:	08009bdd 	.word	0x08009bdd
 8009b6c:	08009bfd 	.word	0x08009bfd
 8009b70:	08009bfd 	.word	0x08009bfd
 8009b74:	08009bfd 	.word	0x08009bfd
 8009b78:	08009bfd 	.word	0x08009bfd
 8009b7c:	08009bfd 	.word	0x08009bfd
 8009b80:	08009bfd 	.word	0x08009bfd
 8009b84:	08009bfd 	.word	0x08009bfd
 8009b88:	08009be5 	.word	0x08009be5
 8009b8c:	08009bfd 	.word	0x08009bfd
 8009b90:	08009bfd 	.word	0x08009bfd
 8009b94:	08009bfd 	.word	0x08009bfd
 8009b98:	08009bfd 	.word	0x08009bfd
 8009b9c:	08009bfd 	.word	0x08009bfd
 8009ba0:	08009bfd 	.word	0x08009bfd
 8009ba4:	08009bfd 	.word	0x08009bfd
 8009ba8:	08009bed 	.word	0x08009bed
 8009bac:	08009bfd 	.word	0x08009bfd
 8009bb0:	08009bfd 	.word	0x08009bfd
 8009bb4:	08009bfd 	.word	0x08009bfd
 8009bb8:	08009bfd 	.word	0x08009bfd
 8009bbc:	08009bfd 	.word	0x08009bfd
 8009bc0:	08009bfd 	.word	0x08009bfd
 8009bc4:	08009bfd 	.word	0x08009bfd
 8009bc8:	08009bf5 	.word	0x08009bf5
 8009bcc:	2301      	movs	r3, #1
 8009bce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bd2:	e0c3      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009bd4:	2304      	movs	r3, #4
 8009bd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bda:	e0bf      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009bdc:	2308      	movs	r3, #8
 8009bde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009be2:	e0bb      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009be4:	2310      	movs	r3, #16
 8009be6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bea:	e0b7      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009bec:	2320      	movs	r3, #32
 8009bee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bf2:	e0b3      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009bf4:	2340      	movs	r3, #64	; 0x40
 8009bf6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009bfa:	e0af      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009bfc:	2380      	movs	r3, #128	; 0x80
 8009bfe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c02:	bf00      	nop
 8009c04:	e0aa      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	4a79      	ldr	r2, [pc, #484]	; (8009df0 <UART_SetConfig+0x664>)
 8009c0c:	4293      	cmp	r3, r2
 8009c0e:	d132      	bne.n	8009c76 <UART_SetConfig+0x4ea>
 8009c10:	4b76      	ldr	r3, [pc, #472]	; (8009dec <UART_SetConfig+0x660>)
 8009c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c14:	f003 0307 	and.w	r3, r3, #7
 8009c18:	2b05      	cmp	r3, #5
 8009c1a:	d827      	bhi.n	8009c6c <UART_SetConfig+0x4e0>
 8009c1c:	a201      	add	r2, pc, #4	; (adr r2, 8009c24 <UART_SetConfig+0x498>)
 8009c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c22:	bf00      	nop
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c45 	.word	0x08009c45
 8009c2c:	08009c4d 	.word	0x08009c4d
 8009c30:	08009c55 	.word	0x08009c55
 8009c34:	08009c5d 	.word	0x08009c5d
 8009c38:	08009c65 	.word	0x08009c65
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c42:	e08b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c44:	2304      	movs	r3, #4
 8009c46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c4a:	e087      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c4c:	2308      	movs	r3, #8
 8009c4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c52:	e083      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c54:	2310      	movs	r3, #16
 8009c56:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c5a:	e07f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c5c:	2320      	movs	r3, #32
 8009c5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c62:	e07b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c64:	2340      	movs	r3, #64	; 0x40
 8009c66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c6a:	e077      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009c72:	bf00      	nop
 8009c74:	e072      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a5e      	ldr	r2, [pc, #376]	; (8009df4 <UART_SetConfig+0x668>)
 8009c7c:	4293      	cmp	r3, r2
 8009c7e:	d132      	bne.n	8009ce6 <UART_SetConfig+0x55a>
 8009c80:	4b5a      	ldr	r3, [pc, #360]	; (8009dec <UART_SetConfig+0x660>)
 8009c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c84:	f003 0307 	and.w	r3, r3, #7
 8009c88:	2b05      	cmp	r3, #5
 8009c8a:	d827      	bhi.n	8009cdc <UART_SetConfig+0x550>
 8009c8c:	a201      	add	r2, pc, #4	; (adr r2, 8009c94 <UART_SetConfig+0x508>)
 8009c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c92:	bf00      	nop
 8009c94:	08009cad 	.word	0x08009cad
 8009c98:	08009cb5 	.word	0x08009cb5
 8009c9c:	08009cbd 	.word	0x08009cbd
 8009ca0:	08009cc5 	.word	0x08009cc5
 8009ca4:	08009ccd 	.word	0x08009ccd
 8009ca8:	08009cd5 	.word	0x08009cd5
 8009cac:	2300      	movs	r3, #0
 8009cae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cb2:	e053      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009cb4:	2304      	movs	r3, #4
 8009cb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cba:	e04f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cc2:	e04b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009cc4:	2310      	movs	r3, #16
 8009cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cca:	e047      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009ccc:	2320      	movs	r3, #32
 8009cce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cd2:	e043      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009cd4:	2340      	movs	r3, #64	; 0x40
 8009cd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009cda:	e03f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009cdc:	2380      	movs	r3, #128	; 0x80
 8009cde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009ce2:	bf00      	nop
 8009ce4:	e03a      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a43      	ldr	r2, [pc, #268]	; (8009df8 <UART_SetConfig+0x66c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d132      	bne.n	8009d56 <UART_SetConfig+0x5ca>
 8009cf0:	4b3e      	ldr	r3, [pc, #248]	; (8009dec <UART_SetConfig+0x660>)
 8009cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009cf4:	f003 0307 	and.w	r3, r3, #7
 8009cf8:	2b05      	cmp	r3, #5
 8009cfa:	d827      	bhi.n	8009d4c <UART_SetConfig+0x5c0>
 8009cfc:	a201      	add	r2, pc, #4	; (adr r2, 8009d04 <UART_SetConfig+0x578>)
 8009cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d02:	bf00      	nop
 8009d04:	08009d1d 	.word	0x08009d1d
 8009d08:	08009d25 	.word	0x08009d25
 8009d0c:	08009d2d 	.word	0x08009d2d
 8009d10:	08009d35 	.word	0x08009d35
 8009d14:	08009d3d 	.word	0x08009d3d
 8009d18:	08009d45 	.word	0x08009d45
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d22:	e01b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d24:	2304      	movs	r3, #4
 8009d26:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d2a:	e017      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d2c:	2308      	movs	r3, #8
 8009d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d32:	e013      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d34:	2310      	movs	r3, #16
 8009d36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d3a:	e00f      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d3c:	2320      	movs	r3, #32
 8009d3e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d42:	e00b      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d44:	2340      	movs	r3, #64	; 0x40
 8009d46:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d4a:	e007      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d4c:	2380      	movs	r3, #128	; 0x80
 8009d4e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8009d52:	bf00      	nop
 8009d54:	e002      	b.n	8009d5c <UART_SetConfig+0x5d0>
 8009d56:	2380      	movs	r3, #128	; 0x80
 8009d58:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681b      	ldr	r3, [r3, #0]
 8009d60:	4a25      	ldr	r2, [pc, #148]	; (8009df8 <UART_SetConfig+0x66c>)
 8009d62:	4293      	cmp	r3, r2
 8009d64:	f040 80b8 	bne.w	8009ed8 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009d68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009d6c:	2b08      	cmp	r3, #8
 8009d6e:	d019      	beq.n	8009da4 <UART_SetConfig+0x618>
 8009d70:	2b08      	cmp	r3, #8
 8009d72:	dc04      	bgt.n	8009d7e <UART_SetConfig+0x5f2>
 8009d74:	2b02      	cmp	r3, #2
 8009d76:	d009      	beq.n	8009d8c <UART_SetConfig+0x600>
 8009d78:	2b04      	cmp	r3, #4
 8009d7a:	d00b      	beq.n	8009d94 <UART_SetConfig+0x608>
 8009d7c:	e042      	b.n	8009e04 <UART_SetConfig+0x678>
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d02b      	beq.n	8009dda <UART_SetConfig+0x64e>
 8009d82:	2b40      	cmp	r3, #64	; 0x40
 8009d84:	d02c      	beq.n	8009de0 <UART_SetConfig+0x654>
 8009d86:	2b10      	cmp	r3, #16
 8009d88:	d014      	beq.n	8009db4 <UART_SetConfig+0x628>
 8009d8a:	e03b      	b.n	8009e04 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8009d8c:	f7fd fa80 	bl	8007290 <HAL_RCCEx_GetD3PCLK1Freq>
 8009d90:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009d92:	e03d      	b.n	8009e10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009d94:	f107 0314 	add.w	r3, r7, #20
 8009d98:	4618      	mov	r0, r3
 8009d9a:	f7fd fa8f 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009d9e:	69bb      	ldr	r3, [r7, #24]
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009da2:	e035      	b.n	8009e10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4618      	mov	r0, r3
 8009daa:	f7fd fbd3 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009db2:	e02d      	b.n	8009e10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009db4:	4b0d      	ldr	r3, [pc, #52]	; (8009dec <UART_SetConfig+0x660>)
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	f003 0320 	and.w	r3, r3, #32
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009dc0:	4b0a      	ldr	r3, [pc, #40]	; (8009dec <UART_SetConfig+0x660>)
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	08db      	lsrs	r3, r3, #3
 8009dc6:	f003 0303 	and.w	r3, r3, #3
 8009dca:	4a0c      	ldr	r2, [pc, #48]	; (8009dfc <UART_SetConfig+0x670>)
 8009dcc:	fa22 f303 	lsr.w	r3, r2, r3
 8009dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009dd2:	e01d      	b.n	8009e10 <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8009dd4:	4b09      	ldr	r3, [pc, #36]	; (8009dfc <UART_SetConfig+0x670>)
 8009dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dd8:	e01a      	b.n	8009e10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009dda:	4b09      	ldr	r3, [pc, #36]	; (8009e00 <UART_SetConfig+0x674>)
 8009ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009dde:	e017      	b.n	8009e10 <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009de0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009de4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8009de6:	e013      	b.n	8009e10 <UART_SetConfig+0x684>
 8009de8:	40011400 	.word	0x40011400
 8009dec:	58024400 	.word	0x58024400
 8009df0:	40007800 	.word	0x40007800
 8009df4:	40007c00 	.word	0x40007c00
 8009df8:	58000c00 	.word	0x58000c00
 8009dfc:	03d09000 	.word	0x03d09000
 8009e00:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8009e04:	2300      	movs	r3, #0
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8009e08:	2301      	movs	r3, #1
 8009e0a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8009e0e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	f000 824d 	beq.w	800a2b2 <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e1c:	4aad      	ldr	r2, [pc, #692]	; (800a0d4 <UART_SetConfig+0x948>)
 8009e1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e22:	461a      	mov	r2, r3
 8009e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e26:	fbb3 f3f2 	udiv	r3, r3, r2
 8009e2a:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	4613      	mov	r3, r2
 8009e32:	005b      	lsls	r3, r3, #1
 8009e34:	4413      	add	r3, r2
 8009e36:	6a3a      	ldr	r2, [r7, #32]
 8009e38:	429a      	cmp	r2, r3
 8009e3a:	d305      	bcc.n	8009e48 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009e42:	6a3a      	ldr	r2, [r7, #32]
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d903      	bls.n	8009e50 <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009e4e:	e230      	b.n	800a2b2 <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e52:	4618      	mov	r0, r3
 8009e54:	f04f 0100 	mov.w	r1, #0
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e5c:	4a9d      	ldr	r2, [pc, #628]	; (800a0d4 <UART_SetConfig+0x948>)
 8009e5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009e62:	b29b      	uxth	r3, r3
 8009e64:	f04f 0400 	mov.w	r4, #0
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4623      	mov	r3, r4
 8009e6c:	f7f6 fa34 	bl	80002d8 <__aeabi_uldivmod>
 8009e70:	4603      	mov	r3, r0
 8009e72:	460c      	mov	r4, r1
 8009e74:	4619      	mov	r1, r3
 8009e76:	4622      	mov	r2, r4
 8009e78:	f04f 0300 	mov.w	r3, #0
 8009e7c:	f04f 0400 	mov.w	r4, #0
 8009e80:	0214      	lsls	r4, r2, #8
 8009e82:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8009e86:	020b      	lsls	r3, r1, #8
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	6852      	ldr	r2, [r2, #4]
 8009e8c:	0852      	lsrs	r2, r2, #1
 8009e8e:	4611      	mov	r1, r2
 8009e90:	f04f 0200 	mov.w	r2, #0
 8009e94:	eb13 0b01 	adds.w	fp, r3, r1
 8009e98:	eb44 0c02 	adc.w	ip, r4, r2
 8009e9c:	4658      	mov	r0, fp
 8009e9e:	4661      	mov	r1, ip
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	685b      	ldr	r3, [r3, #4]
 8009ea4:	f04f 0400 	mov.w	r4, #0
 8009ea8:	461a      	mov	r2, r3
 8009eaa:	4623      	mov	r3, r4
 8009eac:	f7f6 fa14 	bl	80002d8 <__aeabi_uldivmod>
 8009eb0:	4603      	mov	r3, r0
 8009eb2:	460c      	mov	r4, r1
 8009eb4:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009ebc:	d308      	bcc.n	8009ed0 <UART_SetConfig+0x744>
 8009ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ec0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ec4:	d204      	bcs.n	8009ed0 <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ecc:	60da      	str	r2, [r3, #12]
 8009ece:	e1f0      	b.n	800a2b2 <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8009ed6:	e1ec      	b.n	800a2b2 <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	69db      	ldr	r3, [r3, #28]
 8009edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ee0:	f040 8100 	bne.w	800a0e4 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8009ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009ee8:	2b40      	cmp	r3, #64	; 0x40
 8009eea:	f200 80b7 	bhi.w	800a05c <UART_SetConfig+0x8d0>
 8009eee:	a201      	add	r2, pc, #4	; (adr r2, 8009ef4 <UART_SetConfig+0x768>)
 8009ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ef4:	08009ff9 	.word	0x08009ff9
 8009ef8:	0800a001 	.word	0x0800a001
 8009efc:	0800a05d 	.word	0x0800a05d
 8009f00:	0800a05d 	.word	0x0800a05d
 8009f04:	0800a009 	.word	0x0800a009
 8009f08:	0800a05d 	.word	0x0800a05d
 8009f0c:	0800a05d 	.word	0x0800a05d
 8009f10:	0800a05d 	.word	0x0800a05d
 8009f14:	0800a019 	.word	0x0800a019
 8009f18:	0800a05d 	.word	0x0800a05d
 8009f1c:	0800a05d 	.word	0x0800a05d
 8009f20:	0800a05d 	.word	0x0800a05d
 8009f24:	0800a05d 	.word	0x0800a05d
 8009f28:	0800a05d 	.word	0x0800a05d
 8009f2c:	0800a05d 	.word	0x0800a05d
 8009f30:	0800a05d 	.word	0x0800a05d
 8009f34:	0800a029 	.word	0x0800a029
 8009f38:	0800a05d 	.word	0x0800a05d
 8009f3c:	0800a05d 	.word	0x0800a05d
 8009f40:	0800a05d 	.word	0x0800a05d
 8009f44:	0800a05d 	.word	0x0800a05d
 8009f48:	0800a05d 	.word	0x0800a05d
 8009f4c:	0800a05d 	.word	0x0800a05d
 8009f50:	0800a05d 	.word	0x0800a05d
 8009f54:	0800a05d 	.word	0x0800a05d
 8009f58:	0800a05d 	.word	0x0800a05d
 8009f5c:	0800a05d 	.word	0x0800a05d
 8009f60:	0800a05d 	.word	0x0800a05d
 8009f64:	0800a05d 	.word	0x0800a05d
 8009f68:	0800a05d 	.word	0x0800a05d
 8009f6c:	0800a05d 	.word	0x0800a05d
 8009f70:	0800a05d 	.word	0x0800a05d
 8009f74:	0800a04f 	.word	0x0800a04f
 8009f78:	0800a05d 	.word	0x0800a05d
 8009f7c:	0800a05d 	.word	0x0800a05d
 8009f80:	0800a05d 	.word	0x0800a05d
 8009f84:	0800a05d 	.word	0x0800a05d
 8009f88:	0800a05d 	.word	0x0800a05d
 8009f8c:	0800a05d 	.word	0x0800a05d
 8009f90:	0800a05d 	.word	0x0800a05d
 8009f94:	0800a05d 	.word	0x0800a05d
 8009f98:	0800a05d 	.word	0x0800a05d
 8009f9c:	0800a05d 	.word	0x0800a05d
 8009fa0:	0800a05d 	.word	0x0800a05d
 8009fa4:	0800a05d 	.word	0x0800a05d
 8009fa8:	0800a05d 	.word	0x0800a05d
 8009fac:	0800a05d 	.word	0x0800a05d
 8009fb0:	0800a05d 	.word	0x0800a05d
 8009fb4:	0800a05d 	.word	0x0800a05d
 8009fb8:	0800a05d 	.word	0x0800a05d
 8009fbc:	0800a05d 	.word	0x0800a05d
 8009fc0:	0800a05d 	.word	0x0800a05d
 8009fc4:	0800a05d 	.word	0x0800a05d
 8009fc8:	0800a05d 	.word	0x0800a05d
 8009fcc:	0800a05d 	.word	0x0800a05d
 8009fd0:	0800a05d 	.word	0x0800a05d
 8009fd4:	0800a05d 	.word	0x0800a05d
 8009fd8:	0800a05d 	.word	0x0800a05d
 8009fdc:	0800a05d 	.word	0x0800a05d
 8009fe0:	0800a05d 	.word	0x0800a05d
 8009fe4:	0800a05d 	.word	0x0800a05d
 8009fe8:	0800a05d 	.word	0x0800a05d
 8009fec:	0800a05d 	.word	0x0800a05d
 8009ff0:	0800a05d 	.word	0x0800a05d
 8009ff4:	0800a055 	.word	0x0800a055
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009ff8:	f7fb ffb8 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 8009ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8009ffe:	e033      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a000:	f7fb ffca 	bl	8005f98 <HAL_RCC_GetPCLK2Freq>
 800a004:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a006:	e02f      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a008:	f107 0314 	add.w	r3, r7, #20
 800a00c:	4618      	mov	r0, r3
 800a00e:	f7fd f955 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a016:	e027      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4618      	mov	r0, r3
 800a01e:	f7fd fa99 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a026:	e01f      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a028:	4b2b      	ldr	r3, [pc, #172]	; (800a0d8 <UART_SetConfig+0x94c>)
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f003 0320 	and.w	r3, r3, #32
 800a030:	2b00      	cmp	r3, #0
 800a032:	d009      	beq.n	800a048 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a034:	4b28      	ldr	r3, [pc, #160]	; (800a0d8 <UART_SetConfig+0x94c>)
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	08db      	lsrs	r3, r3, #3
 800a03a:	f003 0303 	and.w	r3, r3, #3
 800a03e:	4a27      	ldr	r2, [pc, #156]	; (800a0dc <UART_SetConfig+0x950>)
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
 800a044:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a046:	e00f      	b.n	800a068 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 800a048:	4b24      	ldr	r3, [pc, #144]	; (800a0dc <UART_SetConfig+0x950>)
 800a04a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a04c:	e00c      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a04e:	4b24      	ldr	r3, [pc, #144]	; (800a0e0 <UART_SetConfig+0x954>)
 800a050:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a052:	e009      	b.n	800a068 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a054:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a058:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a05a:	e005      	b.n	800a068 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 800a05c:	2300      	movs	r3, #0
 800a05e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a060:	2301      	movs	r3, #1
 800a062:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a066:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	f000 8121 	beq.w	800a2b2 <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a074:	4a17      	ldr	r2, [pc, #92]	; (800a0d4 <UART_SetConfig+0x948>)
 800a076:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a07a:	461a      	mov	r2, r3
 800a07c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a07e:	fbb3 f3f2 	udiv	r3, r3, r2
 800a082:	005a      	lsls	r2, r3, #1
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	685b      	ldr	r3, [r3, #4]
 800a088:	085b      	lsrs	r3, r3, #1
 800a08a:	441a      	add	r2, r3
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	fbb2 f3f3 	udiv	r3, r2, r3
 800a094:	b29b      	uxth	r3, r3
 800a096:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a098:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a09a:	2b0f      	cmp	r3, #15
 800a09c:	d916      	bls.n	800a0cc <UART_SetConfig+0x940>
 800a09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0a4:	d212      	bcs.n	800a0cc <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a0a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0a8:	b29b      	uxth	r3, r3
 800a0aa:	f023 030f 	bic.w	r3, r3, #15
 800a0ae:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a0b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0b2:	085b      	lsrs	r3, r3, #1
 800a0b4:	b29b      	uxth	r3, r3
 800a0b6:	f003 0307 	and.w	r3, r3, #7
 800a0ba:	b29a      	uxth	r2, r3
 800a0bc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a0c8:	60da      	str	r2, [r3, #12]
 800a0ca:	e0f2      	b.n	800a2b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a0cc:	2301      	movs	r3, #1
 800a0ce:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 800a0d2:	e0ee      	b.n	800a2b2 <UART_SetConfig+0xb26>
 800a0d4:	08010540 	.word	0x08010540
 800a0d8:	58024400 	.word	0x58024400
 800a0dc:	03d09000 	.word	0x03d09000
 800a0e0:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0e4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a0e8:	2b40      	cmp	r3, #64	; 0x40
 800a0ea:	f200 80b7 	bhi.w	800a25c <UART_SetConfig+0xad0>
 800a0ee:	a201      	add	r2, pc, #4	; (adr r2, 800a0f4 <UART_SetConfig+0x968>)
 800a0f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0f4:	0800a1f9 	.word	0x0800a1f9
 800a0f8:	0800a201 	.word	0x0800a201
 800a0fc:	0800a25d 	.word	0x0800a25d
 800a100:	0800a25d 	.word	0x0800a25d
 800a104:	0800a209 	.word	0x0800a209
 800a108:	0800a25d 	.word	0x0800a25d
 800a10c:	0800a25d 	.word	0x0800a25d
 800a110:	0800a25d 	.word	0x0800a25d
 800a114:	0800a219 	.word	0x0800a219
 800a118:	0800a25d 	.word	0x0800a25d
 800a11c:	0800a25d 	.word	0x0800a25d
 800a120:	0800a25d 	.word	0x0800a25d
 800a124:	0800a25d 	.word	0x0800a25d
 800a128:	0800a25d 	.word	0x0800a25d
 800a12c:	0800a25d 	.word	0x0800a25d
 800a130:	0800a25d 	.word	0x0800a25d
 800a134:	0800a229 	.word	0x0800a229
 800a138:	0800a25d 	.word	0x0800a25d
 800a13c:	0800a25d 	.word	0x0800a25d
 800a140:	0800a25d 	.word	0x0800a25d
 800a144:	0800a25d 	.word	0x0800a25d
 800a148:	0800a25d 	.word	0x0800a25d
 800a14c:	0800a25d 	.word	0x0800a25d
 800a150:	0800a25d 	.word	0x0800a25d
 800a154:	0800a25d 	.word	0x0800a25d
 800a158:	0800a25d 	.word	0x0800a25d
 800a15c:	0800a25d 	.word	0x0800a25d
 800a160:	0800a25d 	.word	0x0800a25d
 800a164:	0800a25d 	.word	0x0800a25d
 800a168:	0800a25d 	.word	0x0800a25d
 800a16c:	0800a25d 	.word	0x0800a25d
 800a170:	0800a25d 	.word	0x0800a25d
 800a174:	0800a24f 	.word	0x0800a24f
 800a178:	0800a25d 	.word	0x0800a25d
 800a17c:	0800a25d 	.word	0x0800a25d
 800a180:	0800a25d 	.word	0x0800a25d
 800a184:	0800a25d 	.word	0x0800a25d
 800a188:	0800a25d 	.word	0x0800a25d
 800a18c:	0800a25d 	.word	0x0800a25d
 800a190:	0800a25d 	.word	0x0800a25d
 800a194:	0800a25d 	.word	0x0800a25d
 800a198:	0800a25d 	.word	0x0800a25d
 800a19c:	0800a25d 	.word	0x0800a25d
 800a1a0:	0800a25d 	.word	0x0800a25d
 800a1a4:	0800a25d 	.word	0x0800a25d
 800a1a8:	0800a25d 	.word	0x0800a25d
 800a1ac:	0800a25d 	.word	0x0800a25d
 800a1b0:	0800a25d 	.word	0x0800a25d
 800a1b4:	0800a25d 	.word	0x0800a25d
 800a1b8:	0800a25d 	.word	0x0800a25d
 800a1bc:	0800a25d 	.word	0x0800a25d
 800a1c0:	0800a25d 	.word	0x0800a25d
 800a1c4:	0800a25d 	.word	0x0800a25d
 800a1c8:	0800a25d 	.word	0x0800a25d
 800a1cc:	0800a25d 	.word	0x0800a25d
 800a1d0:	0800a25d 	.word	0x0800a25d
 800a1d4:	0800a25d 	.word	0x0800a25d
 800a1d8:	0800a25d 	.word	0x0800a25d
 800a1dc:	0800a25d 	.word	0x0800a25d
 800a1e0:	0800a25d 	.word	0x0800a25d
 800a1e4:	0800a25d 	.word	0x0800a25d
 800a1e8:	0800a25d 	.word	0x0800a25d
 800a1ec:	0800a25d 	.word	0x0800a25d
 800a1f0:	0800a25d 	.word	0x0800a25d
 800a1f4:	0800a255 	.word	0x0800a255
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a1f8:	f7fb feb8 	bl	8005f6c <HAL_RCC_GetPCLK1Freq>
 800a1fc:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a1fe:	e033      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a200:	f7fb feca 	bl	8005f98 <HAL_RCC_GetPCLK2Freq>
 800a204:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800a206:	e02f      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a208:	f107 0314 	add.w	r3, r7, #20
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7fd f855 	bl	80072bc <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a212:	69bb      	ldr	r3, [r7, #24]
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a216:	e027      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a218:	f107 0308 	add.w	r3, r7, #8
 800a21c:	4618      	mov	r0, r3
 800a21e:	f7fd f999 	bl	8007554 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a226:	e01f      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a228:	4b2c      	ldr	r3, [pc, #176]	; (800a2dc <UART_SetConfig+0xb50>)
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	f003 0320 	and.w	r3, r3, #32
 800a230:	2b00      	cmp	r3, #0
 800a232:	d009      	beq.n	800a248 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a234:	4b29      	ldr	r3, [pc, #164]	; (800a2dc <UART_SetConfig+0xb50>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	08db      	lsrs	r3, r3, #3
 800a23a:	f003 0303 	and.w	r3, r3, #3
 800a23e:	4a28      	ldr	r2, [pc, #160]	; (800a2e0 <UART_SetConfig+0xb54>)
 800a240:	fa22 f303 	lsr.w	r3, r2, r3
 800a244:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a246:	e00f      	b.n	800a268 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 800a248:	4b25      	ldr	r3, [pc, #148]	; (800a2e0 <UART_SetConfig+0xb54>)
 800a24a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a24c:	e00c      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a24e:	4b25      	ldr	r3, [pc, #148]	; (800a2e4 <UART_SetConfig+0xb58>)
 800a250:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a252:	e009      	b.n	800a268 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a254:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a258:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800a25a:	e005      	b.n	800a268 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 800a25c:	2300      	movs	r3, #0
 800a25e:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800a260:	2301      	movs	r3, #1
 800a262:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 800a266:	bf00      	nop
    }

    if (pclk != 0U)
 800a268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d021      	beq.n	800a2b2 <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a272:	4a1d      	ldr	r2, [pc, #116]	; (800a2e8 <UART_SetConfig+0xb5c>)
 800a274:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a278:	461a      	mov	r2, r3
 800a27a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a27c:	fbb3 f2f2 	udiv	r2, r3, r2
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	085b      	lsrs	r3, r3, #1
 800a286:	441a      	add	r2, r3
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	685b      	ldr	r3, [r3, #4]
 800a28c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a290:	b29b      	uxth	r3, r3
 800a292:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2b0f      	cmp	r3, #15
 800a298:	d908      	bls.n	800a2ac <UART_SetConfig+0xb20>
 800a29a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a29c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2a0:	d204      	bcs.n	800a2ac <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a2a8:	60da      	str	r2, [r3, #12]
 800a2aa:	e002      	b.n	800a2b2 <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 800a2ac:	2301      	movs	r3, #1
 800a2ae:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800a2ce:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	3738      	adds	r7, #56	; 0x38
 800a2d6:	46bd      	mov	sp, r7
 800a2d8:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800a2dc:	58024400 	.word	0x58024400
 800a2e0:	03d09000 	.word	0x03d09000
 800a2e4:	003d0900 	.word	0x003d0900
 800a2e8:	08010540 	.word	0x08010540

0800a2ec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a2ec:	b480      	push	{r7}
 800a2ee:	b083      	sub	sp, #12
 800a2f0:	af00      	add	r7, sp, #0
 800a2f2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2f8:	f003 0301 	and.w	r3, r3, #1
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	d00a      	beq.n	800a316 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	685b      	ldr	r3, [r3, #4]
 800a306:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	430a      	orrs	r2, r1
 800a314:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d00a      	beq.n	800a338 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	685b      	ldr	r3, [r3, #4]
 800a328:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	430a      	orrs	r2, r1
 800a336:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a33c:	f003 0304 	and.w	r3, r3, #4
 800a340:	2b00      	cmp	r3, #0
 800a342:	d00a      	beq.n	800a35a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	430a      	orrs	r2, r1
 800a358:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a35e:	f003 0308 	and.w	r3, r3, #8
 800a362:	2b00      	cmp	r3, #0
 800a364:	d00a      	beq.n	800a37c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	430a      	orrs	r2, r1
 800a37a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a380:	f003 0310 	and.w	r3, r3, #16
 800a384:	2b00      	cmp	r3, #0
 800a386:	d00a      	beq.n	800a39e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	689b      	ldr	r3, [r3, #8]
 800a38e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	430a      	orrs	r2, r1
 800a39c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3a2:	f003 0320 	and.w	r3, r3, #32
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d00a      	beq.n	800a3c0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	689b      	ldr	r3, [r3, #8]
 800a3b0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	430a      	orrs	r2, r1
 800a3be:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a3c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d01a      	beq.n	800a402 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	685b      	ldr	r3, [r3, #4]
 800a3d2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	430a      	orrs	r2, r1
 800a3e0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3ea:	d10a      	bne.n	800a402 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	685b      	ldr	r3, [r3, #4]
 800a3f2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	430a      	orrs	r2, r1
 800a400:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d00a      	beq.n	800a424 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	685b      	ldr	r3, [r3, #4]
 800a414:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	430a      	orrs	r2, r1
 800a422:	605a      	str	r2, [r3, #4]
  }
}
 800a424:	bf00      	nop
 800a426:	370c      	adds	r7, #12
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b086      	sub	sp, #24
 800a434:	af02      	add	r7, sp, #8
 800a436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2200      	movs	r2, #0
 800a43c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a440:	f7f7 f86a 	bl	8001518 <HAL_GetTick>
 800a444:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f003 0308 	and.w	r3, r3, #8
 800a450:	2b08      	cmp	r3, #8
 800a452:	d10e      	bne.n	800a472 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a454:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a458:	9300      	str	r3, [sp, #0]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	2200      	movs	r2, #0
 800a45e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f000 f82c 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 800a468:	4603      	mov	r3, r0
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d001      	beq.n	800a472 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e022      	b.n	800a4b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b04      	cmp	r3, #4
 800a47e:	d10e      	bne.n	800a49e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a480:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	2200      	movs	r2, #0
 800a48a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a48e:	6878      	ldr	r0, [r7, #4]
 800a490:	f000 f816 	bl	800a4c0 <UART_WaitOnFlagUntilTimeout>
 800a494:	4603      	mov	r3, r0
 800a496:	2b00      	cmp	r3, #0
 800a498:	d001      	beq.n	800a49e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	e00c      	b.n	800a4b8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2220      	movs	r2, #32
 800a4a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a4b6:	2300      	movs	r3, #0
}
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	3710      	adds	r7, #16
 800a4bc:	46bd      	mov	sp, r7
 800a4be:	bd80      	pop	{r7, pc}

0800a4c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a4c0:	b580      	push	{r7, lr}
 800a4c2:	b084      	sub	sp, #16
 800a4c4:	af00      	add	r7, sp, #0
 800a4c6:	60f8      	str	r0, [r7, #12]
 800a4c8:	60b9      	str	r1, [r7, #8]
 800a4ca:	603b      	str	r3, [r7, #0]
 800a4cc:	4613      	mov	r3, r2
 800a4ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4d0:	e062      	b.n	800a598 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a4d2:	69bb      	ldr	r3, [r7, #24]
 800a4d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a4d8:	d05e      	beq.n	800a598 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a4da:	f7f7 f81d 	bl	8001518 <HAL_GetTick>
 800a4de:	4602      	mov	r2, r0
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	1ad3      	subs	r3, r2, r3
 800a4e4:	69ba      	ldr	r2, [r7, #24]
 800a4e6:	429a      	cmp	r2, r3
 800a4e8:	d302      	bcc.n	800a4f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800a4ea:	69bb      	ldr	r3, [r7, #24]
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d11d      	bne.n	800a52c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	681a      	ldr	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a4fe:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	689a      	ldr	r2, [r3, #8]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f022 0201 	bic.w	r2, r2, #1
 800a50e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2220      	movs	r2, #32
 800a514:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	2220      	movs	r2, #32
 800a51c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	2200      	movs	r2, #0
 800a524:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e045      	b.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f003 0304 	and.w	r3, r3, #4
 800a536:	2b00      	cmp	r3, #0
 800a538:	d02e      	beq.n	800a598 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	69db      	ldr	r3, [r3, #28]
 800a540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a548:	d126      	bne.n	800a598 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a552:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a562:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	689a      	ldr	r2, [r3, #8]
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f022 0201 	bic.w	r2, r2, #1
 800a572:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2220      	movs	r2, #32
 800a578:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	2220      	movs	r2, #32
 800a580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	2220      	movs	r2, #32
 800a588:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	2200      	movs	r2, #0
 800a590:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 800a594:	2303      	movs	r3, #3
 800a596:	e00f      	b.n	800a5b8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	69da      	ldr	r2, [r3, #28]
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	68ba      	ldr	r2, [r7, #8]
 800a5a4:	429a      	cmp	r2, r3
 800a5a6:	bf0c      	ite	eq
 800a5a8:	2301      	moveq	r3, #1
 800a5aa:	2300      	movne	r3, #0
 800a5ac:	b2db      	uxtb	r3, r3
 800a5ae:	461a      	mov	r2, r3
 800a5b0:	79fb      	ldrb	r3, [r7, #7]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d08d      	beq.n	800a4d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a5b6:	2300      	movs	r3, #0
}
 800a5b8:	4618      	mov	r0, r3
 800a5ba:	3710      	adds	r7, #16
 800a5bc:	46bd      	mov	sp, r7
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800a5c0:	b480      	push	{r7}
 800a5c2:	b085      	sub	sp, #20
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a5ce:	2b01      	cmp	r3, #1
 800a5d0:	d101      	bne.n	800a5d6 <HAL_UARTEx_DisableFifoMode+0x16>
 800a5d2:	2302      	movs	r3, #2
 800a5d4:	e027      	b.n	800a626 <HAL_UARTEx_DisableFifoMode+0x66>
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	2224      	movs	r2, #36	; 0x24
 800a5e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	681a      	ldr	r2, [r3, #0]
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f022 0201 	bic.w	r2, r2, #1
 800a5fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800a5fe:	68fb      	ldr	r3, [r7, #12]
 800a600:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800a604:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	2200      	movs	r2, #0
 800a60a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	68fa      	ldr	r2, [r7, #12]
 800a612:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	2220      	movs	r2, #32
 800a618:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	2200      	movs	r2, #0
 800a620:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a624:	2300      	movs	r3, #0
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr

0800a632 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a642:	2b01      	cmp	r3, #1
 800a644:	d101      	bne.n	800a64a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800a646:	2302      	movs	r3, #2
 800a648:	e02d      	b.n	800a6a6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	2224      	movs	r2, #36	; 0x24
 800a656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681a      	ldr	r2, [r3, #0]
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	f022 0201 	bic.w	r2, r2, #1
 800a670:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	689b      	ldr	r3, [r3, #8]
 800a678:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	683a      	ldr	r2, [r7, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f000 f850 	bl	800a72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	68fa      	ldr	r2, [r7, #12]
 800a692:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2220      	movs	r2, #32
 800a698:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a6a4:	2300      	movs	r3, #0
}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3710      	adds	r7, #16
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	bd80      	pop	{r7, pc}

0800a6ae <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800a6ae:	b580      	push	{r7, lr}
 800a6b0:	b084      	sub	sp, #16
 800a6b2:	af00      	add	r7, sp, #0
 800a6b4:	6078      	str	r0, [r7, #4]
 800a6b6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d101      	bne.n	800a6c6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800a6c2:	2302      	movs	r3, #2
 800a6c4:	e02d      	b.n	800a722 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	2224      	movs	r2, #36	; 0x24
 800a6d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	f022 0201 	bic.w	r2, r2, #1
 800a6ec:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	689b      	ldr	r3, [r3, #8]
 800a6f4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	683a      	ldr	r2, [r7, #0]
 800a6fe:	430a      	orrs	r2, r1
 800a700:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 f812 	bl	800a72c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	68fa      	ldr	r2, [r7, #12]
 800a70e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2220      	movs	r2, #32
 800a714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 800a720:	2300      	movs	r3, #0
}
 800a722:	4618      	mov	r0, r3
 800a724:	3710      	adds	r7, #16
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800a72c:	b480      	push	{r7}
 800a72e:	b089      	sub	sp, #36	; 0x24
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 800a734:	4a2f      	ldr	r2, [pc, #188]	; (800a7f4 <UARTEx_SetNbDataToProcess+0xc8>)
 800a736:	f107 0314 	add.w	r3, r7, #20
 800a73a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a73e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800a742:	4a2d      	ldr	r2, [pc, #180]	; (800a7f8 <UARTEx_SetNbDataToProcess+0xcc>)
 800a744:	f107 030c 	add.w	r3, r7, #12
 800a748:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a74c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a754:	2b00      	cmp	r3, #0
 800a756:	d108      	bne.n	800a76a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2201      	movs	r2, #1
 800a764:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800a768:	e03d      	b.n	800a7e6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800a76a:	2310      	movs	r3, #16
 800a76c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800a76e:	2310      	movs	r3, #16
 800a770:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	0e5b      	lsrs	r3, r3, #25
 800a77a:	b2db      	uxtb	r3, r3
 800a77c:	f003 0307 	and.w	r3, r3, #7
 800a780:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	689b      	ldr	r3, [r3, #8]
 800a788:	0f5b      	lsrs	r3, r3, #29
 800a78a:	b2db      	uxtb	r3, r3
 800a78c:	f003 0307 	and.w	r3, r3, #7
 800a790:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 800a792:	7fbb      	ldrb	r3, [r7, #30]
 800a794:	7f3a      	ldrb	r2, [r7, #28]
 800a796:	f107 0120 	add.w	r1, r7, #32
 800a79a:	440a      	add	r2, r1
 800a79c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a7a0:	fb02 f303 	mul.w	r3, r2, r3
 800a7a4:	7f3a      	ldrb	r2, [r7, #28]
 800a7a6:	f107 0120 	add.w	r1, r7, #32
 800a7aa:	440a      	add	r2, r1
 800a7ac:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a7b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7b4:	b29a      	uxth	r2, r3
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 800a7bc:	7ffb      	ldrb	r3, [r7, #31]
 800a7be:	7f7a      	ldrb	r2, [r7, #29]
 800a7c0:	f107 0120 	add.w	r1, r7, #32
 800a7c4:	440a      	add	r2, r1
 800a7c6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 800a7ca:	fb02 f303 	mul.w	r3, r2, r3
 800a7ce:	7f7a      	ldrb	r2, [r7, #29]
 800a7d0:	f107 0120 	add.w	r1, r7, #32
 800a7d4:	440a      	add	r2, r1
 800a7d6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 800a7da:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7de:	b29a      	uxth	r2, r3
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800a7e6:	bf00      	nop
 800a7e8:	3724      	adds	r7, #36	; 0x24
 800a7ea:	46bd      	mov	sp, r7
 800a7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f0:	4770      	bx	lr
 800a7f2:	bf00      	nop
 800a7f4:	080104d4 	.word	0x080104d4
 800a7f8:	080104dc 	.word	0x080104dc

0800a7fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800a7fc:	b084      	sub	sp, #16
 800a7fe:	b480      	push	{r7}
 800a800:	b085      	sub	sp, #20
 800a802:	af00      	add	r7, sp, #0
 800a804:	6078      	str	r0, [r7, #4]
 800a806:	f107 001c 	add.w	r0, r7, #28
 800a80a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800a80e:	2300      	movs	r3, #0
 800a810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800a812:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 800a814:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800a816:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800a818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 800a81a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800a81c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 800a81e:	431a      	orrs	r2, r3
             Init.ClockDiv
 800a820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 800a822:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800a824:	68fa      	ldr	r2, [r7, #12]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	685a      	ldr	r2, [r3, #4]
 800a82e:	4b07      	ldr	r3, [pc, #28]	; (800a84c <SDMMC_Init+0x50>)
 800a830:	4013      	ands	r3, r2
 800a832:	68fa      	ldr	r2, [r7, #12]
 800a834:	431a      	orrs	r2, r3
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800a83a:	2300      	movs	r3, #0
}
 800a83c:	4618      	mov	r0, r3
 800a83e:	3714      	adds	r7, #20
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	b004      	add	sp, #16
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	ffc02c00 	.word	0xffc02c00

0800a850 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800a85e:	4618      	mov	r0, r3
 800a860:	370c      	adds	r7, #12
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 800a86a:	b480      	push	{r7}
 800a86c:	b083      	sub	sp, #12
 800a86e:	af00      	add	r7, sp, #0
 800a870:	6078      	str	r0, [r7, #4]
 800a872:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 800a874:	683b      	ldr	r3, [r7, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a87e:	2300      	movs	r3, #0
}
 800a880:	4618      	mov	r0, r3
 800a882:	370c      	adds	r7, #12
 800a884:	46bd      	mov	sp, r7
 800a886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88a:	4770      	bx	lr

0800a88c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f043 0203 	orr.w	r2, r3, #3
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a8a0:	2300      	movs	r3, #0
}
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	370c      	adds	r7, #12
 800a8a6:	46bd      	mov	sp, r7
 800a8a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ac:	4770      	bx	lr

0800a8ae <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 800a8ae:	b480      	push	{r7}
 800a8b0:	b083      	sub	sp, #12
 800a8b2:	af00      	add	r7, sp, #0
 800a8b4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f003 0303 	and.w	r3, r3, #3
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	370c      	adds	r7, #12
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
	...

0800a8cc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a8cc:	b480      	push	{r7}
 800a8ce:	b085      	sub	sp, #20
 800a8d0:	af00      	add	r7, sp, #0
 800a8d2:	6078      	str	r0, [r7, #4]
 800a8d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	681a      	ldr	r2, [r3, #0]
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8ea:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a8f0:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a8f2:	683b      	ldr	r3, [r7, #0]
 800a8f4:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a8f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	68da      	ldr	r2, [r3, #12]
 800a902:	4b06      	ldr	r3, [pc, #24]	; (800a91c <SDMMC_SendCommand+0x50>)
 800a904:	4013      	ands	r3, r2
 800a906:	68fa      	ldr	r2, [r7, #12]
 800a908:	431a      	orrs	r2, r3
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a90e:	2300      	movs	r3, #0
}
 800a910:	4618      	mov	r0, r3
 800a912:	3714      	adds	r7, #20
 800a914:	46bd      	mov	sp, r7
 800a916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91a:	4770      	bx	lr
 800a91c:	fffee0c0 	.word	0xfffee0c0

0800a920 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a920:	b480      	push	{r7}
 800a922:	b083      	sub	sp, #12
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	691b      	ldr	r3, [r3, #16]
 800a92c:	b2db      	uxtb	r3, r3
}
 800a92e:	4618      	mov	r0, r3
 800a930:	370c      	adds	r7, #12
 800a932:	46bd      	mov	sp, r7
 800a934:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a938:	4770      	bx	lr

0800a93a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a93a:	b480      	push	{r7}
 800a93c:	b085      	sub	sp, #20
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	3314      	adds	r3, #20
 800a948:	461a      	mov	r2, r3
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	4413      	add	r3, r2
 800a94e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	681b      	ldr	r3, [r3, #0]
}
 800a954:	4618      	mov	r0, r3
 800a956:	3714      	adds	r7, #20
 800a958:	46bd      	mov	sp, r7
 800a95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95e:	4770      	bx	lr

0800a960 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a960:	b480      	push	{r7}
 800a962:	b085      	sub	sp, #20
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a96a:	2300      	movs	r3, #0
 800a96c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	685a      	ldr	r2, [r3, #4]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a97e:	683b      	ldr	r3, [r7, #0]
 800a980:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a986:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a98c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a98e:	683b      	ldr	r3, [r7, #0]
 800a990:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a992:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a994:	68fa      	ldr	r2, [r7, #12]
 800a996:	4313      	orrs	r3, r2
 800a998:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a99e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	431a      	orrs	r2, r3
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a9aa:	2300      	movs	r3, #0

}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b088      	sub	sp, #32
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
 800a9c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a9c6:	2310      	movs	r3, #16
 800a9c8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a9ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a9ce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a9d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a9d8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a9da:	f107 0308 	add.w	r3, r7, #8
 800a9de:	4619      	mov	r1, r3
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f7ff ff73 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a9e6:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ea:	2110      	movs	r1, #16
 800a9ec:	6878      	ldr	r0, [r7, #4]
 800a9ee:	f000 faaf 	bl	800af50 <SDMMC_GetCmdResp1>
 800a9f2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a9f4:	69fb      	ldr	r3, [r7, #28]
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3720      	adds	r7, #32
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}

0800a9fe <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b088      	sub	sp, #32
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
 800aa06:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa08:	683b      	ldr	r3, [r7, #0]
 800aa0a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800aa0c:	2311      	movs	r3, #17
 800aa0e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa10:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa16:	2300      	movs	r3, #0
 800aa18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa1e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa20:	f107 0308 	add.w	r3, r7, #8
 800aa24:	4619      	mov	r1, r3
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f7ff ff50 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aa2c:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa30:	2111      	movs	r1, #17
 800aa32:	6878      	ldr	r0, [r7, #4]
 800aa34:	f000 fa8c 	bl	800af50 <SDMMC_GetCmdResp1>
 800aa38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa3a:	69fb      	ldr	r3, [r7, #28]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3720      	adds	r7, #32
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800aa44:	b580      	push	{r7, lr}
 800aa46:	b088      	sub	sp, #32
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800aa52:	2312      	movs	r3, #18
 800aa54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa56:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aa5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aa5c:	2300      	movs	r3, #0
 800aa5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aa60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aa64:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aa66:	f107 0308 	add.w	r3, r7, #8
 800aa6a:	4619      	mov	r1, r3
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f7ff ff2d 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aa72:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa76:	2112      	movs	r1, #18
 800aa78:	6878      	ldr	r0, [r7, #4]
 800aa7a:	f000 fa69 	bl	800af50 <SDMMC_GetCmdResp1>
 800aa7e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aa80:	69fb      	ldr	r3, [r7, #28]
}
 800aa82:	4618      	mov	r0, r3
 800aa84:	3720      	adds	r7, #32
 800aa86:	46bd      	mov	sp, r7
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b088      	sub	sp, #32
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
 800aa92:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aa94:	683b      	ldr	r3, [r7, #0]
 800aa96:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800aa98:	2318      	movs	r3, #24
 800aa9a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aa9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aaa0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaa6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaac:	f107 0308 	add.w	r3, r7, #8
 800aab0:	4619      	mov	r1, r3
 800aab2:	6878      	ldr	r0, [r7, #4]
 800aab4:	f7ff ff0a 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800aab8:	f241 3288 	movw	r2, #5000	; 0x1388
 800aabc:	2118      	movs	r1, #24
 800aabe:	6878      	ldr	r0, [r7, #4]
 800aac0:	f000 fa46 	bl	800af50 <SDMMC_GetCmdResp1>
 800aac4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aac6:	69fb      	ldr	r3, [r7, #28]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	3720      	adds	r7, #32
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd80      	pop	{r7, pc}

0800aad0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800aad0:	b580      	push	{r7, lr}
 800aad2:	b088      	sub	sp, #32
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
 800aad8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800aade:	2319      	movs	r3, #25
 800aae0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aae6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aae8:	2300      	movs	r3, #0
 800aaea:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aaec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aaf0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aaf2:	f107 0308 	add.w	r3, r7, #8
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	6878      	ldr	r0, [r7, #4]
 800aafa:	f7ff fee7 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800aafe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab02:	2119      	movs	r1, #25
 800ab04:	6878      	ldr	r0, [r7, #4]
 800ab06:	f000 fa23 	bl	800af50 <SDMMC_GetCmdResp1>
 800ab0a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
}
 800ab0e:	4618      	mov	r0, r3
 800ab10:	3720      	adds	r7, #32
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
	...

0800ab18 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b088      	sub	sp, #32
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800ab20:	2300      	movs	r3, #0
 800ab22:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800ab24:	230c      	movs	r3, #12
 800ab26:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ab28:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ab2c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ab2e:	2300      	movs	r3, #0
 800ab30:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ab32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ab36:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	68db      	ldr	r3, [r3, #12]
 800ab3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	68db      	ldr	r3, [r3, #12]
 800ab48:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ab50:	f107 0308 	add.w	r3, r7, #8
 800ab54:	4619      	mov	r1, r3
 800ab56:	6878      	ldr	r0, [r7, #4]
 800ab58:	f7ff feb8 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800ab5c:	4a0b      	ldr	r2, [pc, #44]	; (800ab8c <SDMMC_CmdStopTransfer+0x74>)
 800ab5e:	210c      	movs	r1, #12
 800ab60:	6878      	ldr	r0, [r7, #4]
 800ab62:	f000 f9f5 	bl	800af50 <SDMMC_GetCmdResp1>
 800ab66:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 800ab74:	69fb      	ldr	r3, [r7, #28]
 800ab76:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ab7a:	d101      	bne.n	800ab80 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 800ab7c:	2300      	movs	r3, #0
 800ab7e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 800ab80:	69fb      	ldr	r3, [r7, #28]
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	05f5e100 	.word	0x05f5e100

0800ab90 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b08a      	sub	sp, #40	; 0x28
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	60f8      	str	r0, [r7, #12]
 800ab98:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aba0:	2307      	movs	r3, #7
 800aba2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aba8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abaa:	2300      	movs	r3, #0
 800abac:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abb2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abb4:	f107 0310 	add.w	r3, r7, #16
 800abb8:	4619      	mov	r1, r3
 800abba:	68f8      	ldr	r0, [r7, #12]
 800abbc:	f7ff fe86 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800abc0:	f241 3288 	movw	r2, #5000	; 0x1388
 800abc4:	2107      	movs	r1, #7
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f000 f9c2 	bl	800af50 <SDMMC_GetCmdResp1>
 800abcc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800abce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800abd0:	4618      	mov	r0, r3
 800abd2:	3728      	adds	r7, #40	; 0x28
 800abd4:	46bd      	mov	sp, r7
 800abd6:	bd80      	pop	{r7, pc}

0800abd8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800abd8:	b580      	push	{r7, lr}
 800abda:	b088      	sub	sp, #32
 800abdc:	af00      	add	r7, sp, #0
 800abde:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800abe0:	2300      	movs	r3, #0
 800abe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800abe8:	2300      	movs	r3, #0
 800abea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800abec:	2300      	movs	r3, #0
 800abee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800abf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800abf4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800abf6:	f107 0308 	add.w	r3, r7, #8
 800abfa:	4619      	mov	r1, r3
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f7ff fe65 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800ac02:	6878      	ldr	r0, [r7, #4]
 800ac04:	f000 f976 	bl	800aef4 <SDMMC_GetCmdError>
 800ac08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac0a:	69fb      	ldr	r3, [r7, #28]
}
 800ac0c:	4618      	mov	r0, r3
 800ac0e:	3720      	adds	r7, #32
 800ac10:	46bd      	mov	sp, r7
 800ac12:	bd80      	pop	{r7, pc}

0800ac14 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b088      	sub	sp, #32
 800ac18:	af00      	add	r7, sp, #0
 800ac1a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800ac1c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800ac20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800ac22:	2308      	movs	r3, #8
 800ac24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac26:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac34:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac36:	f107 0308 	add.w	r3, r7, #8
 800ac3a:	4619      	mov	r1, r3
 800ac3c:	6878      	ldr	r0, [r7, #4]
 800ac3e:	f7ff fe45 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800ac42:	6878      	ldr	r0, [r7, #4]
 800ac44:	f000 fb78 	bl	800b338 <SDMMC_GetCmdResp7>
 800ac48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac4a:	69fb      	ldr	r3, [r7, #28]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3720      	adds	r7, #32
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b088      	sub	sp, #32
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
 800ac5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800ac5e:	683b      	ldr	r3, [r7, #0]
 800ac60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800ac62:	2337      	movs	r3, #55	; 0x37
 800ac64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ac66:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ac6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ac70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ac74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ac76:	f107 0308 	add.w	r3, r7, #8
 800ac7a:	4619      	mov	r1, r3
 800ac7c:	6878      	ldr	r0, [r7, #4]
 800ac7e:	f7ff fe25 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800ac82:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac86:	2137      	movs	r1, #55	; 0x37
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 f961 	bl	800af50 <SDMMC_GetCmdResp1>
 800ac8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ac90:	69fb      	ldr	r3, [r7, #28]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3720      	adds	r7, #32
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b088      	sub	sp, #32
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800aca4:	683b      	ldr	r3, [r7, #0]
 800aca6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aca8:	2329      	movs	r3, #41	; 0x29
 800acaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acac:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acb2:	2300      	movs	r3, #0
 800acb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acb6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acbc:	f107 0308 	add.w	r3, r7, #8
 800acc0:	4619      	mov	r1, r3
 800acc2:	6878      	ldr	r0, [r7, #4]
 800acc4:	f7ff fe02 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	f000 fa7d 	bl	800b1c8 <SDMMC_GetCmdResp3>
 800acce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800acd0:	69fb      	ldr	r3, [r7, #28]
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3720      	adds	r7, #32
 800acd6:	46bd      	mov	sp, r7
 800acd8:	bd80      	pop	{r7, pc}

0800acda <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 800acda:	b580      	push	{r7, lr}
 800acdc:	b088      	sub	sp, #32
 800acde:	af00      	add	r7, sp, #0
 800ace0:	6078      	str	r0, [r7, #4]
 800ace2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 800ace8:	2306      	movs	r3, #6
 800acea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800acec:	f44f 7380 	mov.w	r3, #256	; 0x100
 800acf0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800acf2:	2300      	movs	r3, #0
 800acf4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800acf6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800acfa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800acfc:	f107 0308 	add.w	r3, r7, #8
 800ad00:	4619      	mov	r1, r3
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	f7ff fde2 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 800ad08:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad0c:	2106      	movs	r1, #6
 800ad0e:	6878      	ldr	r0, [r7, #4]
 800ad10:	f000 f91e 	bl	800af50 <SDMMC_GetCmdResp1>
 800ad14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad16:	69fb      	ldr	r3, [r7, #28]
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	3720      	adds	r7, #32
 800ad1c:	46bd      	mov	sp, r7
 800ad1e:	bd80      	pop	{r7, pc}

0800ad20 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 800ad28:	2300      	movs	r3, #0
 800ad2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 800ad2c:	2333      	movs	r3, #51	; 0x33
 800ad2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad30:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ad34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad36:	2300      	movs	r3, #0
 800ad38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad40:	f107 0308 	add.w	r3, r7, #8
 800ad44:	4619      	mov	r1, r3
 800ad46:	6878      	ldr	r0, [r7, #4]
 800ad48:	f7ff fdc0 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 800ad4c:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad50:	2133      	movs	r1, #51	; 0x33
 800ad52:	6878      	ldr	r0, [r7, #4]
 800ad54:	f000 f8fc 	bl	800af50 <SDMMC_GetCmdResp1>
 800ad58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad5a:	69fb      	ldr	r3, [r7, #28]
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3720      	adds	r7, #32
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b088      	sub	sp, #32
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800ad70:	2302      	movs	r3, #2
 800ad72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800ad74:	f44f 7340 	mov.w	r3, #768	; 0x300
 800ad78:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ad82:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad84:	f107 0308 	add.w	r3, r7, #8
 800ad88:	4619      	mov	r1, r3
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f7ff fd9e 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800ad90:	6878      	ldr	r0, [r7, #4]
 800ad92:	f000 f9cf 	bl	800b134 <SDMMC_GetCmdResp2>
 800ad96:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad98:	69fb      	ldr	r3, [r7, #28]
}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	3720      	adds	r7, #32
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}

0800ada2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ada2:	b580      	push	{r7, lr}
 800ada4:	b088      	sub	sp, #32
 800ada6:	af00      	add	r7, sp, #0
 800ada8:	6078      	str	r0, [r7, #4]
 800adaa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800adb0:	2309      	movs	r3, #9
 800adb2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800adb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 800adb8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adba:	2300      	movs	r3, #0
 800adbc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800adc2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adc4:	f107 0308 	add.w	r3, r7, #8
 800adc8:	4619      	mov	r1, r3
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f7ff fd7e 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f9af 	bl	800b134 <SDMMC_GetCmdResp2>
 800add6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800add8:	69fb      	ldr	r3, [r7, #28]
}
 800adda:	4618      	mov	r0, r3
 800addc:	3720      	adds	r7, #32
 800adde:	46bd      	mov	sp, r7
 800ade0:	bd80      	pop	{r7, pc}

0800ade2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800ade2:	b580      	push	{r7, lr}
 800ade4:	b088      	sub	sp, #32
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800adec:	2300      	movs	r3, #0
 800adee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800adf0:	2303      	movs	r3, #3
 800adf2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800adf4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800adf8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800adfa:	2300      	movs	r3, #0
 800adfc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adfe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae02:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae04:	f107 0308 	add.w	r3, r7, #8
 800ae08:	4619      	mov	r1, r3
 800ae0a:	6878      	ldr	r0, [r7, #4]
 800ae0c:	f7ff fd5e 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800ae10:	683a      	ldr	r2, [r7, #0]
 800ae12:	2103      	movs	r1, #3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 fa17 	bl	800b248 <SDMMC_GetCmdResp6>
 800ae1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae1c:	69fb      	ldr	r3, [r7, #28]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	3720      	adds	r7, #32
 800ae22:	46bd      	mov	sp, r7
 800ae24:	bd80      	pop	{r7, pc}

0800ae26 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800ae26:	b580      	push	{r7, lr}
 800ae28:	b088      	sub	sp, #32
 800ae2a:	af00      	add	r7, sp, #0
 800ae2c:	6078      	str	r0, [r7, #4]
 800ae2e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 800ae30:	683b      	ldr	r3, [r7, #0]
 800ae32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800ae34:	230d      	movs	r3, #13
 800ae36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae38:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae46:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae48:	f107 0308 	add.w	r3, r7, #8
 800ae4c:	4619      	mov	r1, r3
 800ae4e:	6878      	ldr	r0, [r7, #4]
 800ae50:	f7ff fd3c 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800ae54:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae58:	210d      	movs	r1, #13
 800ae5a:	6878      	ldr	r0, [r7, #4]
 800ae5c:	f000 f878 	bl	800af50 <SDMMC_GetCmdResp1>
 800ae60:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae62:	69fb      	ldr	r3, [r7, #28]
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3720      	adds	r7, #32
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b088      	sub	sp, #32
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 800ae74:	2300      	movs	r3, #0
 800ae76:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 800ae78:	230d      	movs	r3, #13
 800ae7a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800ae80:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae82:	2300      	movs	r3, #0
 800ae84:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800ae8a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae8c:	f107 0308 	add.w	r3, r7, #8
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fd1a 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 800ae98:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae9c:	210d      	movs	r1, #13
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f856 	bl	800af50 <SDMMC_GetCmdResp1>
 800aea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aea6:	69fb      	ldr	r3, [r7, #28]
}
 800aea8:	4618      	mov	r0, r3
 800aeaa:	3720      	adds	r7, #32
 800aeac:	46bd      	mov	sp, r7
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b088      	sub	sp, #32
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 800aeb8:	2300      	movs	r3, #0
 800aeba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 800aebc:	230b      	movs	r3, #11
 800aebe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aec0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800aec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aec6:	2300      	movs	r3, #0
 800aec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800aece:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aed0:	f107 0308 	add.w	r3, r7, #8
 800aed4:	4619      	mov	r1, r3
 800aed6:	6878      	ldr	r0, [r7, #4]
 800aed8:	f7ff fcf8 	bl	800a8cc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 800aedc:	f241 3288 	movw	r2, #5000	; 0x1388
 800aee0:	210b      	movs	r1, #11
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 f834 	bl	800af50 <SDMMC_GetCmdResp1>
 800aee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aeea:	69fb      	ldr	r3, [r7, #28]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3720      	adds	r7, #32
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}

0800aef4 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b085      	sub	sp, #20
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800aefc:	4b11      	ldr	r3, [pc, #68]	; (800af44 <SDMMC_GetCmdError+0x50>)
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	4a11      	ldr	r2, [pc, #68]	; (800af48 <SDMMC_GetCmdError+0x54>)
 800af02:	fba2 2303 	umull	r2, r3, r2, r3
 800af06:	0a5b      	lsrs	r3, r3, #9
 800af08:	f241 3288 	movw	r2, #5000	; 0x1388
 800af0c:	fb02 f303 	mul.w	r3, r2, r3
 800af10:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	1e5a      	subs	r2, r3, #1
 800af16:	60fa      	str	r2, [r7, #12]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d102      	bne.n	800af22 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af1c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af20:	e009      	b.n	800af36 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d0f1      	beq.n	800af12 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	4a06      	ldr	r2, [pc, #24]	; (800af4c <SDMMC_GetCmdError+0x58>)
 800af32:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 800af34:	2300      	movs	r3, #0
}
 800af36:	4618      	mov	r0, r3
 800af38:	3714      	adds	r7, #20
 800af3a:	46bd      	mov	sp, r7
 800af3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af40:	4770      	bx	lr
 800af42:	bf00      	nop
 800af44:	24000000 	.word	0x24000000
 800af48:	10624dd3 	.word	0x10624dd3
 800af4c:	002000c5 	.word	0x002000c5

0800af50 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b088      	sub	sp, #32
 800af54:	af00      	add	r7, sp, #0
 800af56:	60f8      	str	r0, [r7, #12]
 800af58:	460b      	mov	r3, r1
 800af5a:	607a      	str	r2, [r7, #4]
 800af5c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800af5e:	4b70      	ldr	r3, [pc, #448]	; (800b120 <SDMMC_GetCmdResp1+0x1d0>)
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	4a70      	ldr	r2, [pc, #448]	; (800b124 <SDMMC_GetCmdResp1+0x1d4>)
 800af64:	fba2 2303 	umull	r2, r3, r2, r3
 800af68:	0a5a      	lsrs	r2, r3, #9
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	fb02 f303 	mul.w	r3, r2, r3
 800af70:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800af72:	69fb      	ldr	r3, [r7, #28]
 800af74:	1e5a      	subs	r2, r3, #1
 800af76:	61fa      	str	r2, [r7, #28]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d102      	bne.n	800af82 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800af7c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800af80:	e0c9      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af86:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800af88:	69ba      	ldr	r2, [r7, #24]
 800af8a:	4b67      	ldr	r3, [pc, #412]	; (800b128 <SDMMC_GetCmdResp1+0x1d8>)
 800af8c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d0ef      	beq.n	800af72 <SDMMC_GetCmdResp1+0x22>
 800af92:	69bb      	ldr	r3, [r7, #24]
 800af94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d1ea      	bne.n	800af72 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afa0:	f003 0304 	and.w	r3, r3, #4
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d004      	beq.n	800afb2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	2204      	movs	r2, #4
 800afac:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800afae:	2304      	movs	r3, #4
 800afb0:	e0b1      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800afb6:	f003 0301 	and.w	r3, r3, #1
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d004      	beq.n	800afc8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afc4:	2301      	movs	r3, #1
 800afc6:	e0a6      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	4a58      	ldr	r2, [pc, #352]	; (800b12c <SDMMC_GetCmdResp1+0x1dc>)
 800afcc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800afce:	68f8      	ldr	r0, [r7, #12]
 800afd0:	f7ff fca6 	bl	800a920 <SDMMC_GetCommandResponse>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	7afb      	ldrb	r3, [r7, #11]
 800afda:	4293      	cmp	r3, r2
 800afdc:	d001      	beq.n	800afe2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800afde:	2301      	movs	r3, #1
 800afe0:	e099      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800afe2:	2100      	movs	r1, #0
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f7ff fca8 	bl	800a93a <SDMMC_GetResponse>
 800afea:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	4b50      	ldr	r3, [pc, #320]	; (800b130 <SDMMC_GetCmdResp1+0x1e0>)
 800aff0:	4013      	ands	r3, r2
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d101      	bne.n	800affa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800aff6:	2300      	movs	r3, #0
 800aff8:	e08d      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	da02      	bge.n	800b006 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b000:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b004:	e087      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b006:	697b      	ldr	r3, [r7, #20]
 800b008:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d001      	beq.n	800b014 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b010:	2340      	movs	r3, #64	; 0x40
 800b012:	e080      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b014:	697b      	ldr	r3, [r7, #20]
 800b016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d001      	beq.n	800b022 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b01e:	2380      	movs	r3, #128	; 0x80
 800b020:	e079      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b022:	697b      	ldr	r3, [r7, #20]
 800b024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d002      	beq.n	800b032 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b02c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b030:	e071      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b032:	697b      	ldr	r3, [r7, #20]
 800b034:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d002      	beq.n	800b042 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b03c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b040:	e069      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b042:	697b      	ldr	r3, [r7, #20]
 800b044:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d002      	beq.n	800b052 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b04c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b050:	e061      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d002      	beq.n	800b062 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b05c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b060:	e059      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d002      	beq.n	800b072 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b06c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b070:	e051      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d002      	beq.n	800b082 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b07c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b080:	e049      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b082:	697b      	ldr	r3, [r7, #20]
 800b084:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d002      	beq.n	800b092 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b08c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b090:	e041      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b092:	697b      	ldr	r3, [r7, #20]
 800b094:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b09c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b0a0:	e039      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b0a2:	697b      	ldr	r3, [r7, #20]
 800b0a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	d002      	beq.n	800b0b2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b0ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b0b0:	e031      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	d002      	beq.n	800b0c2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b0bc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b0c0:	e029      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b0c2:	697b      	ldr	r3, [r7, #20]
 800b0c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d002      	beq.n	800b0d2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b0cc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b0d0:	e021      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d002      	beq.n	800b0e2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b0dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b0e0:	e019      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b0e2:	697b      	ldr	r3, [r7, #20]
 800b0e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d002      	beq.n	800b0f2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b0ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b0f0:	e011      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b0f2:	697b      	ldr	r3, [r7, #20]
 800b0f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d002      	beq.n	800b102 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b0fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b100:	e009      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b102:	697b      	ldr	r3, [r7, #20]
 800b104:	f003 0308 	and.w	r3, r3, #8
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d002      	beq.n	800b112 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b10c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b110:	e001      	b.n	800b116 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b112:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b116:	4618      	mov	r0, r3
 800b118:	3720      	adds	r7, #32
 800b11a:	46bd      	mov	sp, r7
 800b11c:	bd80      	pop	{r7, pc}
 800b11e:	bf00      	nop
 800b120:	24000000 	.word	0x24000000
 800b124:	10624dd3 	.word	0x10624dd3
 800b128:	00200045 	.word	0x00200045
 800b12c:	002000c5 	.word	0x002000c5
 800b130:	fdffe008 	.word	0xfdffe008

0800b134 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b134:	b480      	push	{r7}
 800b136:	b085      	sub	sp, #20
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b13c:	4b1f      	ldr	r3, [pc, #124]	; (800b1bc <SDMMC_GetCmdResp2+0x88>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	4a1f      	ldr	r2, [pc, #124]	; (800b1c0 <SDMMC_GetCmdResp2+0x8c>)
 800b142:	fba2 2303 	umull	r2, r3, r2, r3
 800b146:	0a5b      	lsrs	r3, r3, #9
 800b148:	f241 3288 	movw	r2, #5000	; 0x1388
 800b14c:	fb02 f303 	mul.w	r3, r2, r3
 800b150:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	1e5a      	subs	r2, r3, #1
 800b156:	60fa      	str	r2, [r7, #12]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d102      	bne.n	800b162 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b15c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b160:	e026      	b.n	800b1b0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b166:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d0ef      	beq.n	800b152 <SDMMC_GetCmdResp2+0x1e>
 800b172:	68bb      	ldr	r3, [r7, #8]
 800b174:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d1ea      	bne.n	800b152 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b180:	f003 0304 	and.w	r3, r3, #4
 800b184:	2b00      	cmp	r3, #0
 800b186:	d004      	beq.n	800b192 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	2204      	movs	r2, #4
 800b18c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b18e:	2304      	movs	r3, #4
 800b190:	e00e      	b.n	800b1b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b196:	f003 0301 	and.w	r3, r3, #1
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d004      	beq.n	800b1a8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1a4:	2301      	movs	r3, #1
 800b1a6:	e003      	b.n	800b1b0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a06      	ldr	r2, [pc, #24]	; (800b1c4 <SDMMC_GetCmdResp2+0x90>)
 800b1ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b1ae:	2300      	movs	r3, #0
}
 800b1b0:	4618      	mov	r0, r3
 800b1b2:	3714      	adds	r7, #20
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ba:	4770      	bx	lr
 800b1bc:	24000000 	.word	0x24000000
 800b1c0:	10624dd3 	.word	0x10624dd3
 800b1c4:	002000c5 	.word	0x002000c5

0800b1c8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b1c8:	b480      	push	{r7}
 800b1ca:	b085      	sub	sp, #20
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b1d0:	4b1a      	ldr	r3, [pc, #104]	; (800b23c <SDMMC_GetCmdResp3+0x74>)
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	4a1a      	ldr	r2, [pc, #104]	; (800b240 <SDMMC_GetCmdResp3+0x78>)
 800b1d6:	fba2 2303 	umull	r2, r3, r2, r3
 800b1da:	0a5b      	lsrs	r3, r3, #9
 800b1dc:	f241 3288 	movw	r2, #5000	; 0x1388
 800b1e0:	fb02 f303 	mul.w	r3, r2, r3
 800b1e4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	1e5a      	subs	r2, r3, #1
 800b1ea:	60fa      	str	r2, [r7, #12]
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d102      	bne.n	800b1f6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b1f0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b1f4:	e01b      	b.n	800b22e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1fa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b202:	2b00      	cmp	r3, #0
 800b204:	d0ef      	beq.n	800b1e6 <SDMMC_GetCmdResp3+0x1e>
 800b206:	68bb      	ldr	r3, [r7, #8]
 800b208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d1ea      	bne.n	800b1e6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b214:	f003 0304 	and.w	r3, r3, #4
 800b218:	2b00      	cmp	r3, #0
 800b21a:	d004      	beq.n	800b226 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2204      	movs	r2, #4
 800b220:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b222:	2304      	movs	r3, #4
 800b224:	e003      	b.n	800b22e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	4a06      	ldr	r2, [pc, #24]	; (800b244 <SDMMC_GetCmdResp3+0x7c>)
 800b22a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3714      	adds	r7, #20
 800b232:	46bd      	mov	sp, r7
 800b234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b238:	4770      	bx	lr
 800b23a:	bf00      	nop
 800b23c:	24000000 	.word	0x24000000
 800b240:	10624dd3 	.word	0x10624dd3
 800b244:	002000c5 	.word	0x002000c5

0800b248 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b088      	sub	sp, #32
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	460b      	mov	r3, r1
 800b252:	607a      	str	r2, [r7, #4]
 800b254:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b256:	4b35      	ldr	r3, [pc, #212]	; (800b32c <SDMMC_GetCmdResp6+0xe4>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a35      	ldr	r2, [pc, #212]	; (800b330 <SDMMC_GetCmdResp6+0xe8>)
 800b25c:	fba2 2303 	umull	r2, r3, r2, r3
 800b260:	0a5b      	lsrs	r3, r3, #9
 800b262:	f241 3288 	movw	r2, #5000	; 0x1388
 800b266:	fb02 f303 	mul.w	r3, r2, r3
 800b26a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 800b26c:	69fb      	ldr	r3, [r7, #28]
 800b26e:	1e5a      	subs	r2, r3, #1
 800b270:	61fa      	str	r2, [r7, #28]
 800b272:	2b00      	cmp	r3, #0
 800b274:	d102      	bne.n	800b27c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b276:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b27a:	e052      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b280:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d0ef      	beq.n	800b26c <SDMMC_GetCmdResp6+0x24>
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1ea      	bne.n	800b26c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b296:	68fb      	ldr	r3, [r7, #12]
 800b298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b29a:	f003 0304 	and.w	r3, r3, #4
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d004      	beq.n	800b2ac <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	2204      	movs	r2, #4
 800b2a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b2a8:	2304      	movs	r3, #4
 800b2aa:	e03a      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2b0:	f003 0301 	and.w	r3, r3, #1
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d004      	beq.n	800b2c2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2201      	movs	r2, #1
 800b2bc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	e02f      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b2c2:	68f8      	ldr	r0, [r7, #12]
 800b2c4:	f7ff fb2c 	bl	800a920 <SDMMC_GetCommandResponse>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	461a      	mov	r2, r3
 800b2cc:	7afb      	ldrb	r3, [r7, #11]
 800b2ce:	4293      	cmp	r3, r2
 800b2d0:	d001      	beq.n	800b2d6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	e025      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	4a16      	ldr	r2, [pc, #88]	; (800b334 <SDMMC_GetCmdResp6+0xec>)
 800b2da:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b2dc:	2100      	movs	r1, #0
 800b2de:	68f8      	ldr	r0, [r7, #12]
 800b2e0:	f7ff fb2b 	bl	800a93a <SDMMC_GetResponse>
 800b2e4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b2e6:	697b      	ldr	r3, [r7, #20]
 800b2e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d106      	bne.n	800b2fe <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b2f0:	697b      	ldr	r3, [r7, #20]
 800b2f2:	0c1b      	lsrs	r3, r3, #16
 800b2f4:	b29a      	uxth	r2, r3
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 800b2fa:	2300      	movs	r3, #0
 800b2fc:	e011      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b2fe:	697b      	ldr	r3, [r7, #20]
 800b300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d002      	beq.n	800b30e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b308:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b30c:	e009      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b30e:	697b      	ldr	r3, [r7, #20]
 800b310:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d002      	beq.n	800b31e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b318:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b31c:	e001      	b.n	800b322 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b31e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b322:	4618      	mov	r0, r3
 800b324:	3720      	adds	r7, #32
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}
 800b32a:	bf00      	nop
 800b32c:	24000000 	.word	0x24000000
 800b330:	10624dd3 	.word	0x10624dd3
 800b334:	002000c5 	.word	0x002000c5

0800b338 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b338:	b480      	push	{r7}
 800b33a:	b085      	sub	sp, #20
 800b33c:	af00      	add	r7, sp, #0
 800b33e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b340:	4b22      	ldr	r3, [pc, #136]	; (800b3cc <SDMMC_GetCmdResp7+0x94>)
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	4a22      	ldr	r2, [pc, #136]	; (800b3d0 <SDMMC_GetCmdResp7+0x98>)
 800b346:	fba2 2303 	umull	r2, r3, r2, r3
 800b34a:	0a5b      	lsrs	r3, r3, #9
 800b34c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b350:	fb02 f303 	mul.w	r3, r2, r3
 800b354:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	1e5a      	subs	r2, r3, #1
 800b35a:	60fa      	str	r2, [r7, #12]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d102      	bne.n	800b366 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b360:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b364:	e02c      	b.n	800b3c0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b372:	2b00      	cmp	r3, #0
 800b374:	d0ef      	beq.n	800b356 <SDMMC_GetCmdResp7+0x1e>
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1ea      	bne.n	800b356 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d004      	beq.n	800b396 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	2204      	movs	r2, #4
 800b390:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b392:	2304      	movs	r3, #4
 800b394:	e014      	b.n	800b3c0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b39a:	f003 0301 	and.w	r3, r3, #1
 800b39e:	2b00      	cmp	r3, #0
 800b3a0:	d004      	beq.n	800b3ac <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b3a8:	2301      	movs	r3, #1
 800b3aa:	e009      	b.n	800b3c0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d002      	beq.n	800b3be <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	2240      	movs	r2, #64	; 0x40
 800b3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b3be:	2300      	movs	r3, #0

}
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	3714      	adds	r7, #20
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr
 800b3cc:	24000000 	.word	0x24000000
 800b3d0:	10624dd3 	.word	0x10624dd3

0800b3d4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	b580      	push	{r7, lr}
 800b3d8:	b084      	sub	sp, #16
 800b3da:	af00      	add	r7, sp, #0
 800b3dc:	6078      	str	r0, [r7, #4]
 800b3de:	f107 001c 	add.w	r0, r7, #28
 800b3e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b3e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d120      	bne.n	800b42e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	68da      	ldr	r2, [r3, #12]
 800b3fc:	4b25      	ldr	r3, [pc, #148]	; (800b494 <USB_CoreInit+0xc0>)
 800b3fe:	4013      	ands	r3, r2
 800b400:	687a      	ldr	r2, [r7, #4]
 800b402:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	68db      	ldr	r3, [r3, #12]
 800b408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b410:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b412:	2b01      	cmp	r3, #1
 800b414:	d105      	bne.n	800b422 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	68db      	ldr	r3, [r3, #12]
 800b41a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f001 fabe 	bl	800c9a4 <USB_CoreReset>
 800b428:	4603      	mov	r3, r0
 800b42a:	73fb      	strb	r3, [r7, #15]
 800b42c:	e01a      	b.n	800b464 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	68db      	ldr	r3, [r3, #12]
 800b432:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 800b43a:	6878      	ldr	r0, [r7, #4]
 800b43c:	f001 fab2 	bl	800c9a4 <USB_CoreReset>
 800b440:	4603      	mov	r3, r0
 800b442:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b44e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	639a      	str	r2, [r3, #56]	; 0x38
 800b456:	e005      	b.n	800b464 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b45c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b466:	2b01      	cmp	r3, #1
 800b468:	d10b      	bne.n	800b482 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	689b      	ldr	r3, [r3, #8]
 800b46e:	f043 0206 	orr.w	r2, r3, #6
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	689b      	ldr	r3, [r3, #8]
 800b47a:	f043 0220 	orr.w	r2, r3, #32
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b482:	7bfb      	ldrb	r3, [r7, #15]
}
 800b484:	4618      	mov	r0, r3
 800b486:	3710      	adds	r7, #16
 800b488:	46bd      	mov	sp, r7
 800b48a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b48e:	b004      	add	sp, #16
 800b490:	4770      	bx	lr
 800b492:	bf00      	nop
 800b494:	ffbdffbf 	.word	0xffbdffbf

0800b498 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b498:	b480      	push	{r7}
 800b49a:	b087      	sub	sp, #28
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	60f8      	str	r0, [r7, #12]
 800b4a0:	60b9      	str	r1, [r7, #8]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b4a6:	79fb      	ldrb	r3, [r7, #7]
 800b4a8:	2b02      	cmp	r3, #2
 800b4aa:	d165      	bne.n	800b578 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	4a41      	ldr	r2, [pc, #260]	; (800b5b4 <USB_SetTurnaroundTime+0x11c>)
 800b4b0:	4293      	cmp	r3, r2
 800b4b2:	d906      	bls.n	800b4c2 <USB_SetTurnaroundTime+0x2a>
 800b4b4:	68bb      	ldr	r3, [r7, #8]
 800b4b6:	4a40      	ldr	r2, [pc, #256]	; (800b5b8 <USB_SetTurnaroundTime+0x120>)
 800b4b8:	4293      	cmp	r3, r2
 800b4ba:	d802      	bhi.n	800b4c2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b4bc:	230f      	movs	r3, #15
 800b4be:	617b      	str	r3, [r7, #20]
 800b4c0:	e062      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	4a3c      	ldr	r2, [pc, #240]	; (800b5b8 <USB_SetTurnaroundTime+0x120>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d906      	bls.n	800b4d8 <USB_SetTurnaroundTime+0x40>
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	4a3b      	ldr	r2, [pc, #236]	; (800b5bc <USB_SetTurnaroundTime+0x124>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d802      	bhi.n	800b4d8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b4d2:	230e      	movs	r3, #14
 800b4d4:	617b      	str	r3, [r7, #20]
 800b4d6:	e057      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	4a38      	ldr	r2, [pc, #224]	; (800b5bc <USB_SetTurnaroundTime+0x124>)
 800b4dc:	4293      	cmp	r3, r2
 800b4de:	d906      	bls.n	800b4ee <USB_SetTurnaroundTime+0x56>
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	4a37      	ldr	r2, [pc, #220]	; (800b5c0 <USB_SetTurnaroundTime+0x128>)
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d802      	bhi.n	800b4ee <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b4e8:	230d      	movs	r3, #13
 800b4ea:	617b      	str	r3, [r7, #20]
 800b4ec:	e04c      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b4ee:	68bb      	ldr	r3, [r7, #8]
 800b4f0:	4a33      	ldr	r2, [pc, #204]	; (800b5c0 <USB_SetTurnaroundTime+0x128>)
 800b4f2:	4293      	cmp	r3, r2
 800b4f4:	d906      	bls.n	800b504 <USB_SetTurnaroundTime+0x6c>
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	4a32      	ldr	r2, [pc, #200]	; (800b5c4 <USB_SetTurnaroundTime+0x12c>)
 800b4fa:	4293      	cmp	r3, r2
 800b4fc:	d802      	bhi.n	800b504 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b4fe:	230c      	movs	r3, #12
 800b500:	617b      	str	r3, [r7, #20]
 800b502:	e041      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	4a2f      	ldr	r2, [pc, #188]	; (800b5c4 <USB_SetTurnaroundTime+0x12c>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d906      	bls.n	800b51a <USB_SetTurnaroundTime+0x82>
 800b50c:	68bb      	ldr	r3, [r7, #8]
 800b50e:	4a2e      	ldr	r2, [pc, #184]	; (800b5c8 <USB_SetTurnaroundTime+0x130>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d802      	bhi.n	800b51a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b514:	230b      	movs	r3, #11
 800b516:	617b      	str	r3, [r7, #20]
 800b518:	e036      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b51a:	68bb      	ldr	r3, [r7, #8]
 800b51c:	4a2a      	ldr	r2, [pc, #168]	; (800b5c8 <USB_SetTurnaroundTime+0x130>)
 800b51e:	4293      	cmp	r3, r2
 800b520:	d906      	bls.n	800b530 <USB_SetTurnaroundTime+0x98>
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	4a29      	ldr	r2, [pc, #164]	; (800b5cc <USB_SetTurnaroundTime+0x134>)
 800b526:	4293      	cmp	r3, r2
 800b528:	d802      	bhi.n	800b530 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b52a:	230a      	movs	r3, #10
 800b52c:	617b      	str	r3, [r7, #20]
 800b52e:	e02b      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b530:	68bb      	ldr	r3, [r7, #8]
 800b532:	4a26      	ldr	r2, [pc, #152]	; (800b5cc <USB_SetTurnaroundTime+0x134>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d906      	bls.n	800b546 <USB_SetTurnaroundTime+0xae>
 800b538:	68bb      	ldr	r3, [r7, #8]
 800b53a:	4a25      	ldr	r2, [pc, #148]	; (800b5d0 <USB_SetTurnaroundTime+0x138>)
 800b53c:	4293      	cmp	r3, r2
 800b53e:	d802      	bhi.n	800b546 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b540:	2309      	movs	r3, #9
 800b542:	617b      	str	r3, [r7, #20]
 800b544:	e020      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	4a21      	ldr	r2, [pc, #132]	; (800b5d0 <USB_SetTurnaroundTime+0x138>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d906      	bls.n	800b55c <USB_SetTurnaroundTime+0xc4>
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	4a20      	ldr	r2, [pc, #128]	; (800b5d4 <USB_SetTurnaroundTime+0x13c>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d802      	bhi.n	800b55c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b556:	2308      	movs	r3, #8
 800b558:	617b      	str	r3, [r7, #20]
 800b55a:	e015      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4a1d      	ldr	r2, [pc, #116]	; (800b5d4 <USB_SetTurnaroundTime+0x13c>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d906      	bls.n	800b572 <USB_SetTurnaroundTime+0xda>
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	4a1c      	ldr	r2, [pc, #112]	; (800b5d8 <USB_SetTurnaroundTime+0x140>)
 800b568:	4293      	cmp	r3, r2
 800b56a:	d802      	bhi.n	800b572 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b56c:	2307      	movs	r3, #7
 800b56e:	617b      	str	r3, [r7, #20]
 800b570:	e00a      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b572:	2306      	movs	r3, #6
 800b574:	617b      	str	r3, [r7, #20]
 800b576:	e007      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b578:	79fb      	ldrb	r3, [r7, #7]
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d102      	bne.n	800b584 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b57e:	2309      	movs	r3, #9
 800b580:	617b      	str	r3, [r7, #20]
 800b582:	e001      	b.n	800b588 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b584:	2309      	movs	r3, #9
 800b586:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	68db      	ldr	r3, [r3, #12]
 800b58c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	68da      	ldr	r2, [r3, #12]
 800b598:	697b      	ldr	r3, [r7, #20]
 800b59a:	029b      	lsls	r3, r3, #10
 800b59c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	371c      	adds	r7, #28
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	00d8acbf 	.word	0x00d8acbf
 800b5b8:	00e4e1bf 	.word	0x00e4e1bf
 800b5bc:	00f423ff 	.word	0x00f423ff
 800b5c0:	0106737f 	.word	0x0106737f
 800b5c4:	011a499f 	.word	0x011a499f
 800b5c8:	01312cff 	.word	0x01312cff
 800b5cc:	014ca43f 	.word	0x014ca43f
 800b5d0:	016e35ff 	.word	0x016e35ff
 800b5d4:	01a6ab1f 	.word	0x01a6ab1f
 800b5d8:	01e847ff 	.word	0x01e847ff

0800b5dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5dc:	b480      	push	{r7}
 800b5de:	b083      	sub	sp, #12
 800b5e0:	af00      	add	r7, sp, #0
 800b5e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	689b      	ldr	r3, [r3, #8]
 800b5e8:	f043 0201 	orr.w	r2, r3, #1
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	370c      	adds	r7, #12
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5fc:	4770      	bx	lr

0800b5fe <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b5fe:	b480      	push	{r7}
 800b600:	b083      	sub	sp, #12
 800b602:	af00      	add	r7, sp, #0
 800b604:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f023 0201 	bic.w	r2, r3, #1
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b612:	2300      	movs	r3, #0
}
 800b614:	4618      	mov	r0, r3
 800b616:	370c      	adds	r7, #12
 800b618:	46bd      	mov	sp, r7
 800b61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61e:	4770      	bx	lr

0800b620 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b620:	b580      	push	{r7, lr}
 800b622:	b082      	sub	sp, #8
 800b624:	af00      	add	r7, sp, #0
 800b626:	6078      	str	r0, [r7, #4]
 800b628:	460b      	mov	r3, r1
 800b62a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	68db      	ldr	r3, [r3, #12]
 800b630:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b638:	78fb      	ldrb	r3, [r7, #3]
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d106      	bne.n	800b64c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	60da      	str	r2, [r3, #12]
 800b64a:	e00b      	b.n	800b664 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800b64c:	78fb      	ldrb	r3, [r7, #3]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d106      	bne.n	800b660 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	60da      	str	r2, [r3, #12]
 800b65e:	e001      	b.n	800b664 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800b660:	2301      	movs	r3, #1
 800b662:	e003      	b.n	800b66c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800b664:	2032      	movs	r0, #50	; 0x32
 800b666:	f7f5 ff63 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 800b66a:	2300      	movs	r3, #0
}
 800b66c:	4618      	mov	r0, r3
 800b66e:	3708      	adds	r7, #8
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b674:	b084      	sub	sp, #16
 800b676:	b580      	push	{r7, lr}
 800b678:	b086      	sub	sp, #24
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b682:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b686:	2300      	movs	r3, #0
 800b688:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b68e:	2300      	movs	r3, #0
 800b690:	613b      	str	r3, [r7, #16]
 800b692:	e009      	b.n	800b6a8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b694:	687a      	ldr	r2, [r7, #4]
 800b696:	693b      	ldr	r3, [r7, #16]
 800b698:	3340      	adds	r3, #64	; 0x40
 800b69a:	009b      	lsls	r3, r3, #2
 800b69c:	4413      	add	r3, r2
 800b69e:	2200      	movs	r2, #0
 800b6a0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	3301      	adds	r3, #1
 800b6a6:	613b      	str	r3, [r7, #16]
 800b6a8:	693b      	ldr	r3, [r7, #16]
 800b6aa:	2b0e      	cmp	r3, #14
 800b6ac:	d9f2      	bls.n	800b694 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b6ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d11c      	bne.n	800b6ee <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6ba:	685b      	ldr	r3, [r3, #4]
 800b6bc:	68fa      	ldr	r2, [r7, #12]
 800b6be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b6c2:	f043 0302 	orr.w	r3, r3, #2
 800b6c6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6cc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	601a      	str	r2, [r3, #0]
 800b6ec:	e005      	b.n	800b6fa <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6f2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b700:	461a      	mov	r2, r3
 800b702:	2300      	movs	r3, #0
 800b704:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b706:	68fb      	ldr	r3, [r7, #12]
 800b708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b70c:	4619      	mov	r1, r3
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b714:	461a      	mov	r2, r3
 800b716:	680b      	ldr	r3, [r1, #0]
 800b718:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b71a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b71c:	2b01      	cmp	r3, #1
 800b71e:	d10c      	bne.n	800b73a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b722:	2b00      	cmp	r3, #0
 800b724:	d104      	bne.n	800b730 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b726:	2100      	movs	r1, #0
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f000 f949 	bl	800b9c0 <USB_SetDevSpeed>
 800b72e:	e008      	b.n	800b742 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b730:	2101      	movs	r1, #1
 800b732:	6878      	ldr	r0, [r7, #4]
 800b734:	f000 f944 	bl	800b9c0 <USB_SetDevSpeed>
 800b738:	e003      	b.n	800b742 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b73a:	2103      	movs	r1, #3
 800b73c:	6878      	ldr	r0, [r7, #4]
 800b73e:	f000 f93f 	bl	800b9c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b742:	2110      	movs	r1, #16
 800b744:	6878      	ldr	r0, [r7, #4]
 800b746:	f000 f8f3 	bl	800b930 <USB_FlushTxFifo>
 800b74a:	4603      	mov	r3, r0
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d001      	beq.n	800b754 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b750:	2301      	movs	r3, #1
 800b752:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f000 f911 	bl	800b97c <USB_FlushRxFifo>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d001      	beq.n	800b764 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b764:	68fb      	ldr	r3, [r7, #12]
 800b766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b76a:	461a      	mov	r2, r3
 800b76c:	2300      	movs	r3, #0
 800b76e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b770:	68fb      	ldr	r3, [r7, #12]
 800b772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b776:	461a      	mov	r2, r3
 800b778:	2300      	movs	r3, #0
 800b77a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b782:	461a      	mov	r2, r3
 800b784:	2300      	movs	r3, #0
 800b786:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b788:	2300      	movs	r3, #0
 800b78a:	613b      	str	r3, [r7, #16]
 800b78c:	e043      	b.n	800b816 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b78e:	693b      	ldr	r3, [r7, #16]
 800b790:	015a      	lsls	r2, r3, #5
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	4413      	add	r3, r2
 800b796:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7a4:	d118      	bne.n	800b7d8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b7a6:	693b      	ldr	r3, [r7, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d10a      	bne.n	800b7c2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b7ac:	693b      	ldr	r3, [r7, #16]
 800b7ae:	015a      	lsls	r2, r3, #5
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	4413      	add	r3, r2
 800b7b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7b8:	461a      	mov	r2, r3
 800b7ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b7be:	6013      	str	r3, [r2, #0]
 800b7c0:	e013      	b.n	800b7ea <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b7c2:	693b      	ldr	r3, [r7, #16]
 800b7c4:	015a      	lsls	r2, r3, #5
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	4413      	add	r3, r2
 800b7ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7ce:	461a      	mov	r2, r3
 800b7d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b7d4:	6013      	str	r3, [r2, #0]
 800b7d6:	e008      	b.n	800b7ea <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	015a      	lsls	r2, r3, #5
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	4413      	add	r3, r2
 800b7e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f6:	461a      	mov	r2, r3
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	015a      	lsls	r2, r3, #5
 800b800:	68fb      	ldr	r3, [r7, #12]
 800b802:	4413      	add	r3, r2
 800b804:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b808:	461a      	mov	r2, r3
 800b80a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b80e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	3301      	adds	r3, #1
 800b814:	613b      	str	r3, [r7, #16]
 800b816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b818:	693a      	ldr	r2, [r7, #16]
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d3b7      	bcc.n	800b78e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b81e:	2300      	movs	r3, #0
 800b820:	613b      	str	r3, [r7, #16]
 800b822:	e043      	b.n	800b8ac <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	015a      	lsls	r2, r3, #5
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	4413      	add	r3, r2
 800b82c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b836:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b83a:	d118      	bne.n	800b86e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d10a      	bne.n	800b858 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	015a      	lsls	r2, r3, #5
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	4413      	add	r3, r2
 800b84a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b84e:	461a      	mov	r2, r3
 800b850:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b854:	6013      	str	r3, [r2, #0]
 800b856:	e013      	b.n	800b880 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b858:	693b      	ldr	r3, [r7, #16]
 800b85a:	015a      	lsls	r2, r3, #5
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	4413      	add	r3, r2
 800b860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b864:	461a      	mov	r2, r3
 800b866:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b86a:	6013      	str	r3, [r2, #0]
 800b86c:	e008      	b.n	800b880 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b86e:	693b      	ldr	r3, [r7, #16]
 800b870:	015a      	lsls	r2, r3, #5
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	4413      	add	r3, r2
 800b876:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b87a:	461a      	mov	r2, r3
 800b87c:	2300      	movs	r3, #0
 800b87e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b880:	693b      	ldr	r3, [r7, #16]
 800b882:	015a      	lsls	r2, r3, #5
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	4413      	add	r3, r2
 800b888:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b88c:	461a      	mov	r2, r3
 800b88e:	2300      	movs	r3, #0
 800b890:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	015a      	lsls	r2, r3, #5
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	4413      	add	r3, r2
 800b89a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b89e:	461a      	mov	r2, r3
 800b8a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b8a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	613b      	str	r3, [r7, #16]
 800b8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8ae:	693a      	ldr	r2, [r7, #16]
 800b8b0:	429a      	cmp	r2, r3
 800b8b2:	d3b7      	bcc.n	800b824 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b8b4:	68fb      	ldr	r3, [r7, #12]
 800b8b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	68fa      	ldr	r2, [r7, #12]
 800b8be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b8c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b8c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	2200      	movs	r2, #0
 800b8cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b8d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	d105      	bne.n	800b8e8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	699b      	ldr	r3, [r3, #24]
 800b8e0:	f043 0210 	orr.w	r2, r3, #16
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	699a      	ldr	r2, [r3, #24]
 800b8ec:	4b0e      	ldr	r3, [pc, #56]	; (800b928 <USB_DevInit+0x2b4>)
 800b8ee:	4313      	orrs	r3, r2
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d005      	beq.n	800b906 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	699b      	ldr	r3, [r3, #24]
 800b8fe:	f043 0208 	orr.w	r2, r3, #8
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b908:	2b01      	cmp	r3, #1
 800b90a:	d105      	bne.n	800b918 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	699a      	ldr	r2, [r3, #24]
 800b910:	4b06      	ldr	r3, [pc, #24]	; (800b92c <USB_DevInit+0x2b8>)
 800b912:	4313      	orrs	r3, r2
 800b914:	687a      	ldr	r2, [r7, #4]
 800b916:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b918:	7dfb      	ldrb	r3, [r7, #23]
}
 800b91a:	4618      	mov	r0, r3
 800b91c:	3718      	adds	r7, #24
 800b91e:	46bd      	mov	sp, r7
 800b920:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b924:	b004      	add	sp, #16
 800b926:	4770      	bx	lr
 800b928:	803c3800 	.word	0x803c3800
 800b92c:	40000004 	.word	0x40000004

0800b930 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b930:	b480      	push	{r7}
 800b932:	b085      	sub	sp, #20
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800b93a:	2300      	movs	r3, #0
 800b93c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	019b      	lsls	r3, r3, #6
 800b942:	f043 0220 	orr.w	r2, r3, #32
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	3301      	adds	r3, #1
 800b94e:	60fb      	str	r3, [r7, #12]
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	4a09      	ldr	r2, [pc, #36]	; (800b978 <USB_FlushTxFifo+0x48>)
 800b954:	4293      	cmp	r3, r2
 800b956:	d901      	bls.n	800b95c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 800b958:	2303      	movs	r3, #3
 800b95a:	e006      	b.n	800b96a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	f003 0320 	and.w	r3, r3, #32
 800b964:	2b20      	cmp	r3, #32
 800b966:	d0f0      	beq.n	800b94a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 800b968:	2300      	movs	r3, #0
}
 800b96a:	4618      	mov	r0, r3
 800b96c:	3714      	adds	r7, #20
 800b96e:	46bd      	mov	sp, r7
 800b970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b974:	4770      	bx	lr
 800b976:	bf00      	nop
 800b978:	00030d40 	.word	0x00030d40

0800b97c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b97c:	b480      	push	{r7}
 800b97e:	b085      	sub	sp, #20
 800b980:	af00      	add	r7, sp, #0
 800b982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800b984:	2300      	movs	r3, #0
 800b986:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2210      	movs	r2, #16
 800b98c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	3301      	adds	r3, #1
 800b992:	60fb      	str	r3, [r7, #12]
 800b994:	68fb      	ldr	r3, [r7, #12]
 800b996:	4a09      	ldr	r2, [pc, #36]	; (800b9bc <USB_FlushRxFifo+0x40>)
 800b998:	4293      	cmp	r3, r2
 800b99a:	d901      	bls.n	800b9a0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800b99c:	2303      	movs	r3, #3
 800b99e:	e006      	b.n	800b9ae <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	691b      	ldr	r3, [r3, #16]
 800b9a4:	f003 0310 	and.w	r3, r3, #16
 800b9a8:	2b10      	cmp	r3, #16
 800b9aa:	d0f0      	beq.n	800b98e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800b9ac:	2300      	movs	r3, #0
}
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	3714      	adds	r7, #20
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b8:	4770      	bx	lr
 800b9ba:	bf00      	nop
 800b9bc:	00030d40 	.word	0x00030d40

0800b9c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b085      	sub	sp, #20
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
 800b9c8:	460b      	mov	r3, r1
 800b9ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	78fb      	ldrb	r3, [r7, #3]
 800b9da:	68f9      	ldr	r1, [r7, #12]
 800b9dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b9e4:	2300      	movs	r3, #0
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	3714      	adds	r7, #20
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b9f2:	b480      	push	{r7}
 800b9f4:	b087      	sub	sp, #28
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba04:	689b      	ldr	r3, [r3, #8]
 800ba06:	f003 0306 	and.w	r3, r3, #6
 800ba0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800ba0c:	68fb      	ldr	r3, [r7, #12]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d102      	bne.n	800ba18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800ba12:	2300      	movs	r3, #0
 800ba14:	75fb      	strb	r3, [r7, #23]
 800ba16:	e00a      	b.n	800ba2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	2b02      	cmp	r3, #2
 800ba1c:	d002      	beq.n	800ba24 <USB_GetDevSpeed+0x32>
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	2b06      	cmp	r3, #6
 800ba22:	d102      	bne.n	800ba2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ba24:	2302      	movs	r3, #2
 800ba26:	75fb      	strb	r3, [r7, #23]
 800ba28:	e001      	b.n	800ba2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800ba2a:	230f      	movs	r3, #15
 800ba2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800ba2e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ba30:	4618      	mov	r0, r3
 800ba32:	371c      	adds	r7, #28
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b085      	sub	sp, #20
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
 800ba44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba4a:	683b      	ldr	r3, [r7, #0]
 800ba4c:	781b      	ldrb	r3, [r3, #0]
 800ba4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba50:	683b      	ldr	r3, [r7, #0]
 800ba52:	785b      	ldrb	r3, [r3, #1]
 800ba54:	2b01      	cmp	r3, #1
 800ba56:	d139      	bne.n	800bacc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba5e:	69da      	ldr	r2, [r3, #28]
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	781b      	ldrb	r3, [r3, #0]
 800ba64:	f003 030f 	and.w	r3, r3, #15
 800ba68:	2101      	movs	r1, #1
 800ba6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	68f9      	ldr	r1, [r7, #12]
 800ba72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba76:	4313      	orrs	r3, r2
 800ba78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ba7a:	68bb      	ldr	r3, [r7, #8]
 800ba7c:	015a      	lsls	r2, r3, #5
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	4413      	add	r3, r2
 800ba82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d153      	bne.n	800bb38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ba90:	68bb      	ldr	r3, [r7, #8]
 800ba92:	015a      	lsls	r2, r3, #5
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	4413      	add	r3, r2
 800ba98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	683b      	ldr	r3, [r7, #0]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800baa6:	683b      	ldr	r3, [r7, #0]
 800baa8:	78db      	ldrb	r3, [r3, #3]
 800baaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800baac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800baae:	68bb      	ldr	r3, [r7, #8]
 800bab0:	059b      	lsls	r3, r3, #22
 800bab2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bab4:	431a      	orrs	r2, r3
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	0159      	lsls	r1, r3, #5
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	440b      	add	r3, r1
 800babe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bac2:	4619      	mov	r1, r3
 800bac4:	4b20      	ldr	r3, [pc, #128]	; (800bb48 <USB_ActivateEndpoint+0x10c>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	600b      	str	r3, [r1, #0]
 800baca:	e035      	b.n	800bb38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad2:	69da      	ldr	r2, [r3, #28]
 800bad4:	683b      	ldr	r3, [r7, #0]
 800bad6:	781b      	ldrb	r3, [r3, #0]
 800bad8:	f003 030f 	and.w	r3, r3, #15
 800badc:	2101      	movs	r1, #1
 800bade:	fa01 f303 	lsl.w	r3, r1, r3
 800bae2:	041b      	lsls	r3, r3, #16
 800bae4:	68f9      	ldr	r1, [r7, #12]
 800bae6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800baea:	4313      	orrs	r3, r2
 800baec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800baee:	68bb      	ldr	r3, [r7, #8]
 800baf0:	015a      	lsls	r2, r3, #5
 800baf2:	68fb      	ldr	r3, [r7, #12]
 800baf4:	4413      	add	r3, r2
 800baf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d119      	bne.n	800bb38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb04:	68bb      	ldr	r3, [r7, #8]
 800bb06:	015a      	lsls	r2, r3, #5
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	4413      	add	r3, r2
 800bb0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb10:	681a      	ldr	r2, [r3, #0]
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	689b      	ldr	r3, [r3, #8]
 800bb16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bb1a:	683b      	ldr	r3, [r7, #0]
 800bb1c:	78db      	ldrb	r3, [r3, #3]
 800bb1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bb20:	430b      	orrs	r3, r1
 800bb22:	431a      	orrs	r2, r3
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	0159      	lsls	r1, r3, #5
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	440b      	add	r3, r1
 800bb2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb30:	4619      	mov	r1, r3
 800bb32:	4b05      	ldr	r3, [pc, #20]	; (800bb48 <USB_ActivateEndpoint+0x10c>)
 800bb34:	4313      	orrs	r3, r2
 800bb36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bb38:	2300      	movs	r3, #0
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	10008000 	.word	0x10008000

0800bb4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b085      	sub	sp, #20
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	781b      	ldrb	r3, [r3, #0]
 800bb5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	785b      	ldrb	r3, [r3, #1]
 800bb64:	2b01      	cmp	r3, #1
 800bb66:	d161      	bne.n	800bc2c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	015a      	lsls	r2, r3, #5
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	4413      	add	r3, r2
 800bb70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb7e:	d11f      	bne.n	800bbc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800bb80:	68bb      	ldr	r3, [r7, #8]
 800bb82:	015a      	lsls	r2, r3, #5
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	4413      	add	r3, r2
 800bb88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	68ba      	ldr	r2, [r7, #8]
 800bb90:	0151      	lsls	r1, r2, #5
 800bb92:	68fa      	ldr	r2, [r7, #12]
 800bb94:	440a      	add	r2, r1
 800bb96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800bba0:	68bb      	ldr	r3, [r7, #8]
 800bba2:	015a      	lsls	r2, r3, #5
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	4413      	add	r3, r2
 800bba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	68ba      	ldr	r2, [r7, #8]
 800bbb0:	0151      	lsls	r1, r2, #5
 800bbb2:	68fa      	ldr	r2, [r7, #12]
 800bbb4:	440a      	add	r2, r1
 800bbb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bbba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bbc0:	68fb      	ldr	r3, [r7, #12]
 800bbc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	781b      	ldrb	r3, [r3, #0]
 800bbcc:	f003 030f 	and.w	r3, r3, #15
 800bbd0:	2101      	movs	r1, #1
 800bbd2:	fa01 f303 	lsl.w	r3, r1, r3
 800bbd6:	b29b      	uxth	r3, r3
 800bbd8:	43db      	mvns	r3, r3
 800bbda:	68f9      	ldr	r1, [r7, #12]
 800bbdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bbe0:	4013      	ands	r3, r2
 800bbe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800bbe4:	68fb      	ldr	r3, [r7, #12]
 800bbe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbea:	69da      	ldr	r2, [r3, #28]
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	781b      	ldrb	r3, [r3, #0]
 800bbf0:	f003 030f 	and.w	r3, r3, #15
 800bbf4:	2101      	movs	r1, #1
 800bbf6:	fa01 f303 	lsl.w	r3, r1, r3
 800bbfa:	b29b      	uxth	r3, r3
 800bbfc:	43db      	mvns	r3, r3
 800bbfe:	68f9      	ldr	r1, [r7, #12]
 800bc00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc04:	4013      	ands	r3, r2
 800bc06:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	015a      	lsls	r2, r3, #5
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc14:	681a      	ldr	r2, [r3, #0]
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	0159      	lsls	r1, r3, #5
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	440b      	add	r3, r1
 800bc1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc22:	4619      	mov	r1, r3
 800bc24:	4b35      	ldr	r3, [pc, #212]	; (800bcfc <USB_DeactivateEndpoint+0x1b0>)
 800bc26:	4013      	ands	r3, r2
 800bc28:	600b      	str	r3, [r1, #0]
 800bc2a:	e060      	b.n	800bcee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc2c:	68bb      	ldr	r3, [r7, #8]
 800bc2e:	015a      	lsls	r2, r3, #5
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc42:	d11f      	bne.n	800bc84 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	015a      	lsls	r2, r3, #5
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68ba      	ldr	r2, [r7, #8]
 800bc54:	0151      	lsls	r1, r2, #5
 800bc56:	68fa      	ldr	r2, [r7, #12]
 800bc58:	440a      	add	r2, r1
 800bc5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc62:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	015a      	lsls	r2, r3, #5
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	0151      	lsls	r1, r2, #5
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	440a      	add	r2, r1
 800bc7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bc7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bc8c:	683b      	ldr	r3, [r7, #0]
 800bc8e:	781b      	ldrb	r3, [r3, #0]
 800bc90:	f003 030f 	and.w	r3, r3, #15
 800bc94:	2101      	movs	r1, #1
 800bc96:	fa01 f303 	lsl.w	r3, r1, r3
 800bc9a:	041b      	lsls	r3, r3, #16
 800bc9c:	43db      	mvns	r3, r3
 800bc9e:	68f9      	ldr	r1, [r7, #12]
 800bca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bca4:	4013      	ands	r3, r2
 800bca6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcae:	69da      	ldr	r2, [r3, #28]
 800bcb0:	683b      	ldr	r3, [r7, #0]
 800bcb2:	781b      	ldrb	r3, [r3, #0]
 800bcb4:	f003 030f 	and.w	r3, r3, #15
 800bcb8:	2101      	movs	r1, #1
 800bcba:	fa01 f303 	lsl.w	r3, r1, r3
 800bcbe:	041b      	lsls	r3, r3, #16
 800bcc0:	43db      	mvns	r3, r3
 800bcc2:	68f9      	ldr	r1, [r7, #12]
 800bcc4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcc8:	4013      	ands	r3, r2
 800bcca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	015a      	lsls	r2, r3, #5
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	4413      	add	r3, r2
 800bcd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcd8:	681a      	ldr	r2, [r3, #0]
 800bcda:	68bb      	ldr	r3, [r7, #8]
 800bcdc:	0159      	lsls	r1, r3, #5
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	440b      	add	r3, r1
 800bce2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce6:	4619      	mov	r1, r3
 800bce8:	4b05      	ldr	r3, [pc, #20]	; (800bd00 <USB_DeactivateEndpoint+0x1b4>)
 800bcea:	4013      	ands	r3, r2
 800bcec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3714      	adds	r7, #20
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfa:	4770      	bx	lr
 800bcfc:	ec337800 	.word	0xec337800
 800bd00:	eff37800 	.word	0xeff37800

0800bd04 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b08a      	sub	sp, #40	; 0x28
 800bd08:	af02      	add	r7, sp, #8
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	4613      	mov	r3, r2
 800bd10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd12:	68fb      	ldr	r3, [r7, #12]
 800bd14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bd1c:	68bb      	ldr	r3, [r7, #8]
 800bd1e:	785b      	ldrb	r3, [r3, #1]
 800bd20:	2b01      	cmp	r3, #1
 800bd22:	f040 8163 	bne.w	800bfec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bd26:	68bb      	ldr	r3, [r7, #8]
 800bd28:	695b      	ldr	r3, [r3, #20]
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d132      	bne.n	800bd94 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bd2e:	69bb      	ldr	r3, [r7, #24]
 800bd30:	015a      	lsls	r2, r3, #5
 800bd32:	69fb      	ldr	r3, [r7, #28]
 800bd34:	4413      	add	r3, r2
 800bd36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd3a:	691a      	ldr	r2, [r3, #16]
 800bd3c:	69bb      	ldr	r3, [r7, #24]
 800bd3e:	0159      	lsls	r1, r3, #5
 800bd40:	69fb      	ldr	r3, [r7, #28]
 800bd42:	440b      	add	r3, r1
 800bd44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd48:	4619      	mov	r1, r3
 800bd4a:	4ba5      	ldr	r3, [pc, #660]	; (800bfe0 <USB_EPStartXfer+0x2dc>)
 800bd4c:	4013      	ands	r3, r2
 800bd4e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	015a      	lsls	r2, r3, #5
 800bd54:	69fb      	ldr	r3, [r7, #28]
 800bd56:	4413      	add	r3, r2
 800bd58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd5c:	691b      	ldr	r3, [r3, #16]
 800bd5e:	69ba      	ldr	r2, [r7, #24]
 800bd60:	0151      	lsls	r1, r2, #5
 800bd62:	69fa      	ldr	r2, [r7, #28]
 800bd64:	440a      	add	r2, r1
 800bd66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd6a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd70:	69bb      	ldr	r3, [r7, #24]
 800bd72:	015a      	lsls	r2, r3, #5
 800bd74:	69fb      	ldr	r3, [r7, #28]
 800bd76:	4413      	add	r3, r2
 800bd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd7c:	691a      	ldr	r2, [r3, #16]
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	0159      	lsls	r1, r3, #5
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	440b      	add	r3, r1
 800bd86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd8a:	4619      	mov	r1, r3
 800bd8c:	4b95      	ldr	r3, [pc, #596]	; (800bfe4 <USB_EPStartXfer+0x2e0>)
 800bd8e:	4013      	ands	r3, r2
 800bd90:	610b      	str	r3, [r1, #16]
 800bd92:	e074      	b.n	800be7e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bd94:	69bb      	ldr	r3, [r7, #24]
 800bd96:	015a      	lsls	r2, r3, #5
 800bd98:	69fb      	ldr	r3, [r7, #28]
 800bd9a:	4413      	add	r3, r2
 800bd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bda0:	691a      	ldr	r2, [r3, #16]
 800bda2:	69bb      	ldr	r3, [r7, #24]
 800bda4:	0159      	lsls	r1, r3, #5
 800bda6:	69fb      	ldr	r3, [r7, #28]
 800bda8:	440b      	add	r3, r1
 800bdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdae:	4619      	mov	r1, r3
 800bdb0:	4b8c      	ldr	r3, [pc, #560]	; (800bfe4 <USB_EPStartXfer+0x2e0>)
 800bdb2:	4013      	ands	r3, r2
 800bdb4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	015a      	lsls	r2, r3, #5
 800bdba:	69fb      	ldr	r3, [r7, #28]
 800bdbc:	4413      	add	r3, r2
 800bdbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdc2:	691a      	ldr	r2, [r3, #16]
 800bdc4:	69bb      	ldr	r3, [r7, #24]
 800bdc6:	0159      	lsls	r1, r3, #5
 800bdc8:	69fb      	ldr	r3, [r7, #28]
 800bdca:	440b      	add	r3, r1
 800bdcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	4b83      	ldr	r3, [pc, #524]	; (800bfe0 <USB_EPStartXfer+0x2dc>)
 800bdd4:	4013      	ands	r3, r2
 800bdd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	015a      	lsls	r2, r3, #5
 800bddc:	69fb      	ldr	r3, [r7, #28]
 800bdde:	4413      	add	r3, r2
 800bde0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bde4:	691a      	ldr	r2, [r3, #16]
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	6959      	ldr	r1, [r3, #20]
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	689b      	ldr	r3, [r3, #8]
 800bdee:	440b      	add	r3, r1
 800bdf0:	1e59      	subs	r1, r3, #1
 800bdf2:	68bb      	ldr	r3, [r7, #8]
 800bdf4:	689b      	ldr	r3, [r3, #8]
 800bdf6:	fbb1 f3f3 	udiv	r3, r1, r3
 800bdfa:	04d9      	lsls	r1, r3, #19
 800bdfc:	4b7a      	ldr	r3, [pc, #488]	; (800bfe8 <USB_EPStartXfer+0x2e4>)
 800bdfe:	400b      	ands	r3, r1
 800be00:	69b9      	ldr	r1, [r7, #24]
 800be02:	0148      	lsls	r0, r1, #5
 800be04:	69f9      	ldr	r1, [r7, #28]
 800be06:	4401      	add	r1, r0
 800be08:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be0c:	4313      	orrs	r3, r2
 800be0e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800be10:	69bb      	ldr	r3, [r7, #24]
 800be12:	015a      	lsls	r2, r3, #5
 800be14:	69fb      	ldr	r3, [r7, #28]
 800be16:	4413      	add	r3, r2
 800be18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be1c:	691a      	ldr	r2, [r3, #16]
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	695b      	ldr	r3, [r3, #20]
 800be22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be26:	69b9      	ldr	r1, [r7, #24]
 800be28:	0148      	lsls	r0, r1, #5
 800be2a:	69f9      	ldr	r1, [r7, #28]
 800be2c:	4401      	add	r1, r0
 800be2e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800be32:	4313      	orrs	r3, r2
 800be34:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	78db      	ldrb	r3, [r3, #3]
 800be3a:	2b01      	cmp	r3, #1
 800be3c:	d11f      	bne.n	800be7e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800be3e:	69bb      	ldr	r3, [r7, #24]
 800be40:	015a      	lsls	r2, r3, #5
 800be42:	69fb      	ldr	r3, [r7, #28]
 800be44:	4413      	add	r3, r2
 800be46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be4a:	691b      	ldr	r3, [r3, #16]
 800be4c:	69ba      	ldr	r2, [r7, #24]
 800be4e:	0151      	lsls	r1, r2, #5
 800be50:	69fa      	ldr	r2, [r7, #28]
 800be52:	440a      	add	r2, r1
 800be54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be58:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800be5c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800be5e:	69bb      	ldr	r3, [r7, #24]
 800be60:	015a      	lsls	r2, r3, #5
 800be62:	69fb      	ldr	r3, [r7, #28]
 800be64:	4413      	add	r3, r2
 800be66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6a:	691b      	ldr	r3, [r3, #16]
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	0151      	lsls	r1, r2, #5
 800be70:	69fa      	ldr	r2, [r7, #28]
 800be72:	440a      	add	r2, r1
 800be74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be78:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800be7c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800be7e:	79fb      	ldrb	r3, [r7, #7]
 800be80:	2b01      	cmp	r3, #1
 800be82:	d14b      	bne.n	800bf1c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	691b      	ldr	r3, [r3, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d009      	beq.n	800bea0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800be8c:	69bb      	ldr	r3, [r7, #24]
 800be8e:	015a      	lsls	r2, r3, #5
 800be90:	69fb      	ldr	r3, [r7, #28]
 800be92:	4413      	add	r3, r2
 800be94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be98:	461a      	mov	r2, r3
 800be9a:	68bb      	ldr	r3, [r7, #8]
 800be9c:	691b      	ldr	r3, [r3, #16]
 800be9e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800bea0:	68bb      	ldr	r3, [r7, #8]
 800bea2:	78db      	ldrb	r3, [r3, #3]
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d128      	bne.n	800befa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bea8:	69fb      	ldr	r3, [r7, #28]
 800beaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d110      	bne.n	800beda <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800beb8:	69bb      	ldr	r3, [r7, #24]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69fb      	ldr	r3, [r7, #28]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	69ba      	ldr	r2, [r7, #24]
 800bec8:	0151      	lsls	r1, r2, #5
 800beca:	69fa      	ldr	r2, [r7, #28]
 800becc:	440a      	add	r2, r1
 800bece:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bed2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bed6:	6013      	str	r3, [r2, #0]
 800bed8:	e00f      	b.n	800befa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800beda:	69bb      	ldr	r3, [r7, #24]
 800bedc:	015a      	lsls	r2, r3, #5
 800bede:	69fb      	ldr	r3, [r7, #28]
 800bee0:	4413      	add	r3, r2
 800bee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bee6:	681b      	ldr	r3, [r3, #0]
 800bee8:	69ba      	ldr	r2, [r7, #24]
 800beea:	0151      	lsls	r1, r2, #5
 800beec:	69fa      	ldr	r2, [r7, #28]
 800beee:	440a      	add	r2, r1
 800bef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bef8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	015a      	lsls	r2, r3, #5
 800befe:	69fb      	ldr	r3, [r7, #28]
 800bf00:	4413      	add	r3, r2
 800bf02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	69ba      	ldr	r2, [r7, #24]
 800bf0a:	0151      	lsls	r1, r2, #5
 800bf0c:	69fa      	ldr	r2, [r7, #28]
 800bf0e:	440a      	add	r2, r1
 800bf10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf14:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf18:	6013      	str	r3, [r2, #0]
 800bf1a:	e133      	b.n	800c184 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800bf1c:	69bb      	ldr	r3, [r7, #24]
 800bf1e:	015a      	lsls	r2, r3, #5
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	4413      	add	r3, r2
 800bf24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	69ba      	ldr	r2, [r7, #24]
 800bf2c:	0151      	lsls	r1, r2, #5
 800bf2e:	69fa      	ldr	r2, [r7, #28]
 800bf30:	440a      	add	r2, r1
 800bf32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bf3a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	78db      	ldrb	r3, [r3, #3]
 800bf40:	2b01      	cmp	r3, #1
 800bf42:	d015      	beq.n	800bf70 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800bf44:	68bb      	ldr	r3, [r7, #8]
 800bf46:	695b      	ldr	r3, [r3, #20]
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	f000 811b 	beq.w	800c184 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf56:	68bb      	ldr	r3, [r7, #8]
 800bf58:	781b      	ldrb	r3, [r3, #0]
 800bf5a:	f003 030f 	and.w	r3, r3, #15
 800bf5e:	2101      	movs	r1, #1
 800bf60:	fa01 f303 	lsl.w	r3, r1, r3
 800bf64:	69f9      	ldr	r1, [r7, #28]
 800bf66:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf6a:	4313      	orrs	r3, r2
 800bf6c:	634b      	str	r3, [r1, #52]	; 0x34
 800bf6e:	e109      	b.n	800c184 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf76:	689b      	ldr	r3, [r3, #8]
 800bf78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d110      	bne.n	800bfa2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800bf80:	69bb      	ldr	r3, [r7, #24]
 800bf82:	015a      	lsls	r2, r3, #5
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	4413      	add	r3, r2
 800bf88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	69ba      	ldr	r2, [r7, #24]
 800bf90:	0151      	lsls	r1, r2, #5
 800bf92:	69fa      	ldr	r2, [r7, #28]
 800bf94:	440a      	add	r2, r1
 800bf96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf9a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bf9e:	6013      	str	r3, [r2, #0]
 800bfa0:	e00f      	b.n	800bfc2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800bfa2:	69bb      	ldr	r3, [r7, #24]
 800bfa4:	015a      	lsls	r2, r3, #5
 800bfa6:	69fb      	ldr	r3, [r7, #28]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	69ba      	ldr	r2, [r7, #24]
 800bfb2:	0151      	lsls	r1, r2, #5
 800bfb4:	69fa      	ldr	r2, [r7, #28]
 800bfb6:	440a      	add	r2, r1
 800bfb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bfbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfc0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	68d9      	ldr	r1, [r3, #12]
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	781a      	ldrb	r2, [r3, #0]
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	695b      	ldr	r3, [r3, #20]
 800bfce:	b298      	uxth	r0, r3
 800bfd0:	79fb      	ldrb	r3, [r7, #7]
 800bfd2:	9300      	str	r3, [sp, #0]
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	68f8      	ldr	r0, [r7, #12]
 800bfd8:	f000 fa38 	bl	800c44c <USB_WritePacket>
 800bfdc:	e0d2      	b.n	800c184 <USB_EPStartXfer+0x480>
 800bfde:	bf00      	nop
 800bfe0:	e007ffff 	.word	0xe007ffff
 800bfe4:	fff80000 	.word	0xfff80000
 800bfe8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800bfec:	69bb      	ldr	r3, [r7, #24]
 800bfee:	015a      	lsls	r2, r3, #5
 800bff0:	69fb      	ldr	r3, [r7, #28]
 800bff2:	4413      	add	r3, r2
 800bff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bff8:	691a      	ldr	r2, [r3, #16]
 800bffa:	69bb      	ldr	r3, [r7, #24]
 800bffc:	0159      	lsls	r1, r3, #5
 800bffe:	69fb      	ldr	r3, [r7, #28]
 800c000:	440b      	add	r3, r1
 800c002:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c006:	4619      	mov	r1, r3
 800c008:	4b61      	ldr	r3, [pc, #388]	; (800c190 <USB_EPStartXfer+0x48c>)
 800c00a:	4013      	ands	r3, r2
 800c00c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c00e:	69bb      	ldr	r3, [r7, #24]
 800c010:	015a      	lsls	r2, r3, #5
 800c012:	69fb      	ldr	r3, [r7, #28]
 800c014:	4413      	add	r3, r2
 800c016:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c01a:	691a      	ldr	r2, [r3, #16]
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	0159      	lsls	r1, r3, #5
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	440b      	add	r3, r1
 800c024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c028:	4619      	mov	r1, r3
 800c02a:	4b5a      	ldr	r3, [pc, #360]	; (800c194 <USB_EPStartXfer+0x490>)
 800c02c:	4013      	ands	r3, r2
 800c02e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	695b      	ldr	r3, [r3, #20]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d123      	bne.n	800c080 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	015a      	lsls	r2, r3, #5
 800c03c:	69fb      	ldr	r3, [r7, #28]
 800c03e:	4413      	add	r3, r2
 800c040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c044:	691a      	ldr	r2, [r3, #16]
 800c046:	68bb      	ldr	r3, [r7, #8]
 800c048:	689b      	ldr	r3, [r3, #8]
 800c04a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c04e:	69b9      	ldr	r1, [r7, #24]
 800c050:	0148      	lsls	r0, r1, #5
 800c052:	69f9      	ldr	r1, [r7, #28]
 800c054:	4401      	add	r1, r0
 800c056:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c05a:	4313      	orrs	r3, r2
 800c05c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c05e:	69bb      	ldr	r3, [r7, #24]
 800c060:	015a      	lsls	r2, r3, #5
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	4413      	add	r3, r2
 800c066:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c06a:	691b      	ldr	r3, [r3, #16]
 800c06c:	69ba      	ldr	r2, [r7, #24]
 800c06e:	0151      	lsls	r1, r2, #5
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	440a      	add	r2, r1
 800c074:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c078:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c07c:	6113      	str	r3, [r2, #16]
 800c07e:	e033      	b.n	800c0e8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c080:	68bb      	ldr	r3, [r7, #8]
 800c082:	695a      	ldr	r2, [r3, #20]
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	689b      	ldr	r3, [r3, #8]
 800c088:	4413      	add	r3, r2
 800c08a:	1e5a      	subs	r2, r3, #1
 800c08c:	68bb      	ldr	r3, [r7, #8]
 800c08e:	689b      	ldr	r3, [r3, #8]
 800c090:	fbb2 f3f3 	udiv	r3, r2, r3
 800c094:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c096:	69bb      	ldr	r3, [r7, #24]
 800c098:	015a      	lsls	r2, r3, #5
 800c09a:	69fb      	ldr	r3, [r7, #28]
 800c09c:	4413      	add	r3, r2
 800c09e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0a2:	691a      	ldr	r2, [r3, #16]
 800c0a4:	8afb      	ldrh	r3, [r7, #22]
 800c0a6:	04d9      	lsls	r1, r3, #19
 800c0a8:	4b3b      	ldr	r3, [pc, #236]	; (800c198 <USB_EPStartXfer+0x494>)
 800c0aa:	400b      	ands	r3, r1
 800c0ac:	69b9      	ldr	r1, [r7, #24]
 800c0ae:	0148      	lsls	r0, r1, #5
 800c0b0:	69f9      	ldr	r1, [r7, #28]
 800c0b2:	4401      	add	r1, r0
 800c0b4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0b8:	4313      	orrs	r3, r2
 800c0ba:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800c0bc:	69bb      	ldr	r3, [r7, #24]
 800c0be:	015a      	lsls	r2, r3, #5
 800c0c0:	69fb      	ldr	r3, [r7, #28]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c0c8:	691a      	ldr	r2, [r3, #16]
 800c0ca:	68bb      	ldr	r3, [r7, #8]
 800c0cc:	689b      	ldr	r3, [r3, #8]
 800c0ce:	8af9      	ldrh	r1, [r7, #22]
 800c0d0:	fb01 f303 	mul.w	r3, r1, r3
 800c0d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0d8:	69b9      	ldr	r1, [r7, #24]
 800c0da:	0148      	lsls	r0, r1, #5
 800c0dc:	69f9      	ldr	r1, [r7, #28]
 800c0de:	4401      	add	r1, r0
 800c0e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c0e4:	4313      	orrs	r3, r2
 800c0e6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	2b01      	cmp	r3, #1
 800c0ec:	d10d      	bne.n	800c10a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c0ee:	68bb      	ldr	r3, [r7, #8]
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d009      	beq.n	800c10a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	68d9      	ldr	r1, [r3, #12]
 800c0fa:	69bb      	ldr	r3, [r7, #24]
 800c0fc:	015a      	lsls	r2, r3, #5
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	4413      	add	r3, r2
 800c102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c106:	460a      	mov	r2, r1
 800c108:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c10a:	68bb      	ldr	r3, [r7, #8]
 800c10c:	78db      	ldrb	r3, [r3, #3]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d128      	bne.n	800c164 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c118:	689b      	ldr	r3, [r3, #8]
 800c11a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d110      	bne.n	800c144 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c122:	69bb      	ldr	r3, [r7, #24]
 800c124:	015a      	lsls	r2, r3, #5
 800c126:	69fb      	ldr	r3, [r7, #28]
 800c128:	4413      	add	r3, r2
 800c12a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c12e:	681b      	ldr	r3, [r3, #0]
 800c130:	69ba      	ldr	r2, [r7, #24]
 800c132:	0151      	lsls	r1, r2, #5
 800c134:	69fa      	ldr	r2, [r7, #28]
 800c136:	440a      	add	r2, r1
 800c138:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c13c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c140:	6013      	str	r3, [r2, #0]
 800c142:	e00f      	b.n	800c164 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c144:	69bb      	ldr	r3, [r7, #24]
 800c146:	015a      	lsls	r2, r3, #5
 800c148:	69fb      	ldr	r3, [r7, #28]
 800c14a:	4413      	add	r3, r2
 800c14c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	69ba      	ldr	r2, [r7, #24]
 800c154:	0151      	lsls	r1, r2, #5
 800c156:	69fa      	ldr	r2, [r7, #28]
 800c158:	440a      	add	r2, r1
 800c15a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c15e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c162:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c164:	69bb      	ldr	r3, [r7, #24]
 800c166:	015a      	lsls	r2, r3, #5
 800c168:	69fb      	ldr	r3, [r7, #28]
 800c16a:	4413      	add	r3, r2
 800c16c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	69ba      	ldr	r2, [r7, #24]
 800c174:	0151      	lsls	r1, r2, #5
 800c176:	69fa      	ldr	r2, [r7, #28]
 800c178:	440a      	add	r2, r1
 800c17a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c17e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c182:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3720      	adds	r7, #32
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}
 800c18e:	bf00      	nop
 800c190:	fff80000 	.word	0xfff80000
 800c194:	e007ffff 	.word	0xe007ffff
 800c198:	1ff80000 	.word	0x1ff80000

0800c19c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b087      	sub	sp, #28
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60f8      	str	r0, [r7, #12]
 800c1a4:	60b9      	str	r1, [r7, #8]
 800c1a6:	4613      	mov	r3, r2
 800c1a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1aa:	68fb      	ldr	r3, [r7, #12]
 800c1ac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c1ae:	68bb      	ldr	r3, [r7, #8]
 800c1b0:	781b      	ldrb	r3, [r3, #0]
 800c1b2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	785b      	ldrb	r3, [r3, #1]
 800c1b8:	2b01      	cmp	r3, #1
 800c1ba:	f040 80cd 	bne.w	800c358 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c1be:	68bb      	ldr	r3, [r7, #8]
 800c1c0:	695b      	ldr	r3, [r3, #20]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d132      	bne.n	800c22c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c1c6:	693b      	ldr	r3, [r7, #16]
 800c1c8:	015a      	lsls	r2, r3, #5
 800c1ca:	697b      	ldr	r3, [r7, #20]
 800c1cc:	4413      	add	r3, r2
 800c1ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1d2:	691a      	ldr	r2, [r3, #16]
 800c1d4:	693b      	ldr	r3, [r7, #16]
 800c1d6:	0159      	lsls	r1, r3, #5
 800c1d8:	697b      	ldr	r3, [r7, #20]
 800c1da:	440b      	add	r3, r1
 800c1dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1e0:	4619      	mov	r1, r3
 800c1e2:	4b98      	ldr	r3, [pc, #608]	; (800c444 <USB_EP0StartXfer+0x2a8>)
 800c1e4:	4013      	ands	r3, r2
 800c1e6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	015a      	lsls	r2, r3, #5
 800c1ec:	697b      	ldr	r3, [r7, #20]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1f4:	691b      	ldr	r3, [r3, #16]
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	0151      	lsls	r1, r2, #5
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	440a      	add	r2, r1
 800c1fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c202:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c206:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	697b      	ldr	r3, [r7, #20]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	691a      	ldr	r2, [r3, #16]
 800c216:	693b      	ldr	r3, [r7, #16]
 800c218:	0159      	lsls	r1, r3, #5
 800c21a:	697b      	ldr	r3, [r7, #20]
 800c21c:	440b      	add	r3, r1
 800c21e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c222:	4619      	mov	r1, r3
 800c224:	4b88      	ldr	r3, [pc, #544]	; (800c448 <USB_EP0StartXfer+0x2ac>)
 800c226:	4013      	ands	r3, r2
 800c228:	610b      	str	r3, [r1, #16]
 800c22a:	e04e      	b.n	800c2ca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c22c:	693b      	ldr	r3, [r7, #16]
 800c22e:	015a      	lsls	r2, r3, #5
 800c230:	697b      	ldr	r3, [r7, #20]
 800c232:	4413      	add	r3, r2
 800c234:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c238:	691a      	ldr	r2, [r3, #16]
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	0159      	lsls	r1, r3, #5
 800c23e:	697b      	ldr	r3, [r7, #20]
 800c240:	440b      	add	r3, r1
 800c242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c246:	4619      	mov	r1, r3
 800c248:	4b7f      	ldr	r3, [pc, #508]	; (800c448 <USB_EP0StartXfer+0x2ac>)
 800c24a:	4013      	ands	r3, r2
 800c24c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	015a      	lsls	r2, r3, #5
 800c252:	697b      	ldr	r3, [r7, #20]
 800c254:	4413      	add	r3, r2
 800c256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c25a:	691a      	ldr	r2, [r3, #16]
 800c25c:	693b      	ldr	r3, [r7, #16]
 800c25e:	0159      	lsls	r1, r3, #5
 800c260:	697b      	ldr	r3, [r7, #20]
 800c262:	440b      	add	r3, r1
 800c264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c268:	4619      	mov	r1, r3
 800c26a:	4b76      	ldr	r3, [pc, #472]	; (800c444 <USB_EP0StartXfer+0x2a8>)
 800c26c:	4013      	ands	r3, r2
 800c26e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c270:	68bb      	ldr	r3, [r7, #8]
 800c272:	695a      	ldr	r2, [r3, #20]
 800c274:	68bb      	ldr	r3, [r7, #8]
 800c276:	689b      	ldr	r3, [r3, #8]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d903      	bls.n	800c284 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	689a      	ldr	r2, [r3, #8]
 800c280:	68bb      	ldr	r3, [r7, #8]
 800c282:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c284:	693b      	ldr	r3, [r7, #16]
 800c286:	015a      	lsls	r2, r3, #5
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	4413      	add	r3, r2
 800c28c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c290:	691b      	ldr	r3, [r3, #16]
 800c292:	693a      	ldr	r2, [r7, #16]
 800c294:	0151      	lsls	r1, r2, #5
 800c296:	697a      	ldr	r2, [r7, #20]
 800c298:	440a      	add	r2, r1
 800c29a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c29e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c2a2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c2a4:	693b      	ldr	r3, [r7, #16]
 800c2a6:	015a      	lsls	r2, r3, #5
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	4413      	add	r3, r2
 800c2ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2b0:	691a      	ldr	r2, [r3, #16]
 800c2b2:	68bb      	ldr	r3, [r7, #8]
 800c2b4:	695b      	ldr	r3, [r3, #20]
 800c2b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2ba:	6939      	ldr	r1, [r7, #16]
 800c2bc:	0148      	lsls	r0, r1, #5
 800c2be:	6979      	ldr	r1, [r7, #20]
 800c2c0:	4401      	add	r1, r0
 800c2c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	2b01      	cmp	r3, #1
 800c2ce:	d11e      	bne.n	800c30e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	691b      	ldr	r3, [r3, #16]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d009      	beq.n	800c2ec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c2d8:	693b      	ldr	r3, [r7, #16]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	697b      	ldr	r3, [r7, #20]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	68bb      	ldr	r3, [r7, #8]
 800c2e8:	691b      	ldr	r3, [r3, #16]
 800c2ea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	015a      	lsls	r2, r3, #5
 800c2f0:	697b      	ldr	r3, [r7, #20]
 800c2f2:	4413      	add	r3, r2
 800c2f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	693a      	ldr	r2, [r7, #16]
 800c2fc:	0151      	lsls	r1, r2, #5
 800c2fe:	697a      	ldr	r2, [r7, #20]
 800c300:	440a      	add	r2, r1
 800c302:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c306:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c30a:	6013      	str	r3, [r2, #0]
 800c30c:	e092      	b.n	800c434 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c30e:	693b      	ldr	r3, [r7, #16]
 800c310:	015a      	lsls	r2, r3, #5
 800c312:	697b      	ldr	r3, [r7, #20]
 800c314:	4413      	add	r3, r2
 800c316:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	693a      	ldr	r2, [r7, #16]
 800c31e:	0151      	lsls	r1, r2, #5
 800c320:	697a      	ldr	r2, [r7, #20]
 800c322:	440a      	add	r2, r1
 800c324:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c328:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c32c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	695b      	ldr	r3, [r3, #20]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d07e      	beq.n	800c434 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c336:	697b      	ldr	r3, [r7, #20]
 800c338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c33c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	781b      	ldrb	r3, [r3, #0]
 800c342:	f003 030f 	and.w	r3, r3, #15
 800c346:	2101      	movs	r1, #1
 800c348:	fa01 f303 	lsl.w	r3, r1, r3
 800c34c:	6979      	ldr	r1, [r7, #20]
 800c34e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c352:	4313      	orrs	r3, r2
 800c354:	634b      	str	r3, [r1, #52]	; 0x34
 800c356:	e06d      	b.n	800c434 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c358:	693b      	ldr	r3, [r7, #16]
 800c35a:	015a      	lsls	r2, r3, #5
 800c35c:	697b      	ldr	r3, [r7, #20]
 800c35e:	4413      	add	r3, r2
 800c360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c364:	691a      	ldr	r2, [r3, #16]
 800c366:	693b      	ldr	r3, [r7, #16]
 800c368:	0159      	lsls	r1, r3, #5
 800c36a:	697b      	ldr	r3, [r7, #20]
 800c36c:	440b      	add	r3, r1
 800c36e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c372:	4619      	mov	r1, r3
 800c374:	4b34      	ldr	r3, [pc, #208]	; (800c448 <USB_EP0StartXfer+0x2ac>)
 800c376:	4013      	ands	r3, r2
 800c378:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c37a:	693b      	ldr	r3, [r7, #16]
 800c37c:	015a      	lsls	r2, r3, #5
 800c37e:	697b      	ldr	r3, [r7, #20]
 800c380:	4413      	add	r3, r2
 800c382:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c386:	691a      	ldr	r2, [r3, #16]
 800c388:	693b      	ldr	r3, [r7, #16]
 800c38a:	0159      	lsls	r1, r3, #5
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	440b      	add	r3, r1
 800c390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c394:	4619      	mov	r1, r3
 800c396:	4b2b      	ldr	r3, [pc, #172]	; (800c444 <USB_EP0StartXfer+0x2a8>)
 800c398:	4013      	ands	r3, r2
 800c39a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	695b      	ldr	r3, [r3, #20]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d003      	beq.n	800c3ac <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	689a      	ldr	r2, [r3, #8]
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c3ac:	693b      	ldr	r3, [r7, #16]
 800c3ae:	015a      	lsls	r2, r3, #5
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	4413      	add	r3, r2
 800c3b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3b8:	691b      	ldr	r3, [r3, #16]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	0151      	lsls	r1, r2, #5
 800c3be:	697a      	ldr	r2, [r7, #20]
 800c3c0:	440a      	add	r2, r1
 800c3c2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c3ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800c3cc:	693b      	ldr	r3, [r7, #16]
 800c3ce:	015a      	lsls	r2, r3, #5
 800c3d0:	697b      	ldr	r3, [r7, #20]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3d8:	691a      	ldr	r2, [r3, #16]
 800c3da:	68bb      	ldr	r3, [r7, #8]
 800c3dc:	689b      	ldr	r3, [r3, #8]
 800c3de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c3e2:	6939      	ldr	r1, [r7, #16]
 800c3e4:	0148      	lsls	r0, r1, #5
 800c3e6:	6979      	ldr	r1, [r7, #20]
 800c3e8:	4401      	add	r1, r0
 800c3ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c3ee:	4313      	orrs	r3, r2
 800c3f0:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c3f2:	79fb      	ldrb	r3, [r7, #7]
 800c3f4:	2b01      	cmp	r3, #1
 800c3f6:	d10d      	bne.n	800c414 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	68db      	ldr	r3, [r3, #12]
 800c3fc:	2b00      	cmp	r3, #0
 800c3fe:	d009      	beq.n	800c414 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c400:	68bb      	ldr	r3, [r7, #8]
 800c402:	68d9      	ldr	r1, [r3, #12]
 800c404:	693b      	ldr	r3, [r7, #16]
 800c406:	015a      	lsls	r2, r3, #5
 800c408:	697b      	ldr	r3, [r7, #20]
 800c40a:	4413      	add	r3, r2
 800c40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c410:	460a      	mov	r2, r1
 800c412:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c414:	693b      	ldr	r3, [r7, #16]
 800c416:	015a      	lsls	r2, r3, #5
 800c418:	697b      	ldr	r3, [r7, #20]
 800c41a:	4413      	add	r3, r2
 800c41c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	693a      	ldr	r2, [r7, #16]
 800c424:	0151      	lsls	r1, r2, #5
 800c426:	697a      	ldr	r2, [r7, #20]
 800c428:	440a      	add	r2, r1
 800c42a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c42e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c432:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c434:	2300      	movs	r3, #0
}
 800c436:	4618      	mov	r0, r3
 800c438:	371c      	adds	r7, #28
 800c43a:	46bd      	mov	sp, r7
 800c43c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c440:	4770      	bx	lr
 800c442:	bf00      	nop
 800c444:	e007ffff 	.word	0xe007ffff
 800c448:	fff80000 	.word	0xfff80000

0800c44c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c44c:	b480      	push	{r7}
 800c44e:	b089      	sub	sp, #36	; 0x24
 800c450:	af00      	add	r7, sp, #0
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	4611      	mov	r1, r2
 800c458:	461a      	mov	r2, r3
 800c45a:	460b      	mov	r3, r1
 800c45c:	71fb      	strb	r3, [r7, #7]
 800c45e:	4613      	mov	r3, r2
 800c460:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c462:	68fb      	ldr	r3, [r7, #12]
 800c464:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 800c46a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d11a      	bne.n	800c4a8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c472:	88bb      	ldrh	r3, [r7, #4]
 800c474:	3303      	adds	r3, #3
 800c476:	089b      	lsrs	r3, r3, #2
 800c478:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c47a:	2300      	movs	r3, #0
 800c47c:	61bb      	str	r3, [r7, #24]
 800c47e:	e00f      	b.n	800c4a0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c480:	79fb      	ldrb	r3, [r7, #7]
 800c482:	031a      	lsls	r2, r3, #12
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	4413      	add	r3, r2
 800c488:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c48c:	461a      	mov	r2, r3
 800c48e:	69fb      	ldr	r3, [r7, #28]
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c494:	69fb      	ldr	r3, [r7, #28]
 800c496:	3304      	adds	r3, #4
 800c498:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c49a:	69bb      	ldr	r3, [r7, #24]
 800c49c:	3301      	adds	r3, #1
 800c49e:	61bb      	str	r3, [r7, #24]
 800c4a0:	69ba      	ldr	r2, [r7, #24]
 800c4a2:	693b      	ldr	r3, [r7, #16]
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d3eb      	bcc.n	800c480 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c4a8:	2300      	movs	r3, #0
}
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	3724      	adds	r7, #36	; 0x24
 800c4ae:	46bd      	mov	sp, r7
 800c4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b4:	4770      	bx	lr

0800c4b6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c4b6:	b480      	push	{r7}
 800c4b8:	b089      	sub	sp, #36	; 0x24
 800c4ba:	af00      	add	r7, sp, #0
 800c4bc:	60f8      	str	r0, [r7, #12]
 800c4be:	60b9      	str	r1, [r7, #8]
 800c4c0:	4613      	mov	r3, r2
 800c4c2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 800c4c8:	68bb      	ldr	r3, [r7, #8]
 800c4ca:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 800c4cc:	88fb      	ldrh	r3, [r7, #6]
 800c4ce:	3303      	adds	r3, #3
 800c4d0:	089b      	lsrs	r3, r3, #2
 800c4d2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61bb      	str	r3, [r7, #24]
 800c4d8:	e00b      	b.n	800c4f2 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c4da:	697b      	ldr	r3, [r7, #20]
 800c4dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e0:	681a      	ldr	r2, [r3, #0]
 800c4e2:	69fb      	ldr	r3, [r7, #28]
 800c4e4:	601a      	str	r2, [r3, #0]
    pDest++;
 800c4e6:	69fb      	ldr	r3, [r7, #28]
 800c4e8:	3304      	adds	r3, #4
 800c4ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800c4ec:	69bb      	ldr	r3, [r7, #24]
 800c4ee:	3301      	adds	r3, #1
 800c4f0:	61bb      	str	r3, [r7, #24]
 800c4f2:	69ba      	ldr	r2, [r7, #24]
 800c4f4:	693b      	ldr	r3, [r7, #16]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d3ef      	bcc.n	800c4da <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 800c4fa:	69fb      	ldr	r3, [r7, #28]
}
 800c4fc:	4618      	mov	r0, r3
 800c4fe:	3724      	adds	r7, #36	; 0x24
 800c500:	46bd      	mov	sp, r7
 800c502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c506:	4770      	bx	lr

0800c508 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c508:	b480      	push	{r7}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c516:	683b      	ldr	r3, [r7, #0]
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c51c:	683b      	ldr	r3, [r7, #0]
 800c51e:	785b      	ldrb	r3, [r3, #1]
 800c520:	2b01      	cmp	r3, #1
 800c522:	d12c      	bne.n	800c57e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	015a      	lsls	r2, r3, #5
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	4413      	add	r3, r2
 800c52c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	db12      	blt.n	800c55c <USB_EPSetStall+0x54>
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d00f      	beq.n	800c55c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c53c:	68bb      	ldr	r3, [r7, #8]
 800c53e:	015a      	lsls	r2, r3, #5
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	4413      	add	r3, r2
 800c544:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	68ba      	ldr	r2, [r7, #8]
 800c54c:	0151      	lsls	r1, r2, #5
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	440a      	add	r2, r1
 800c552:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c556:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c55a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	015a      	lsls	r2, r3, #5
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	4413      	add	r3, r2
 800c564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	68ba      	ldr	r2, [r7, #8]
 800c56c:	0151      	lsls	r1, r2, #5
 800c56e:	68fa      	ldr	r2, [r7, #12]
 800c570:	440a      	add	r2, r1
 800c572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c576:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c57a:	6013      	str	r3, [r2, #0]
 800c57c:	e02b      	b.n	800c5d6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	015a      	lsls	r2, r3, #5
 800c582:	68fb      	ldr	r3, [r7, #12]
 800c584:	4413      	add	r3, r2
 800c586:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	db12      	blt.n	800c5b6 <USB_EPSetStall+0xae>
 800c590:	68bb      	ldr	r3, [r7, #8]
 800c592:	2b00      	cmp	r3, #0
 800c594:	d00f      	beq.n	800c5b6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c596:	68bb      	ldr	r3, [r7, #8]
 800c598:	015a      	lsls	r2, r3, #5
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	4413      	add	r3, r2
 800c59e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	68ba      	ldr	r2, [r7, #8]
 800c5a6:	0151      	lsls	r1, r2, #5
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	440a      	add	r2, r1
 800c5ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5b0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5b4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	68ba      	ldr	r2, [r7, #8]
 800c5c6:	0151      	lsls	r1, r2, #5
 800c5c8:	68fa      	ldr	r2, [r7, #12]
 800c5ca:	440a      	add	r2, r1
 800c5cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c5d0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c5d4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c5d6:	2300      	movs	r3, #0
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3714      	adds	r7, #20
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e2:	4770      	bx	lr

0800c5e4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b085      	sub	sp, #20
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
 800c5ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c5f8:	683b      	ldr	r3, [r7, #0]
 800c5fa:	785b      	ldrb	r3, [r3, #1]
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d128      	bne.n	800c652 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800c600:	68bb      	ldr	r3, [r7, #8]
 800c602:	015a      	lsls	r2, r3, #5
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	4413      	add	r3, r2
 800c608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	68ba      	ldr	r2, [r7, #8]
 800c610:	0151      	lsls	r1, r2, #5
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	440a      	add	r2, r1
 800c616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c61a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c61e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c620:	683b      	ldr	r3, [r7, #0]
 800c622:	78db      	ldrb	r3, [r3, #3]
 800c624:	2b03      	cmp	r3, #3
 800c626:	d003      	beq.n	800c630 <USB_EPClearStall+0x4c>
 800c628:	683b      	ldr	r3, [r7, #0]
 800c62a:	78db      	ldrb	r3, [r3, #3]
 800c62c:	2b02      	cmp	r3, #2
 800c62e:	d138      	bne.n	800c6a2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	015a      	lsls	r2, r3, #5
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	4413      	add	r3, r2
 800c638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	68ba      	ldr	r2, [r7, #8]
 800c640:	0151      	lsls	r1, r2, #5
 800c642:	68fa      	ldr	r2, [r7, #12]
 800c644:	440a      	add	r2, r1
 800c646:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c64a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c64e:	6013      	str	r3, [r2, #0]
 800c650:	e027      	b.n	800c6a2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	015a      	lsls	r2, r3, #5
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	4413      	add	r3, r2
 800c65a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	68ba      	ldr	r2, [r7, #8]
 800c662:	0151      	lsls	r1, r2, #5
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	440a      	add	r2, r1
 800c668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c66c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800c670:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800c672:	683b      	ldr	r3, [r7, #0]
 800c674:	78db      	ldrb	r3, [r3, #3]
 800c676:	2b03      	cmp	r3, #3
 800c678:	d003      	beq.n	800c682 <USB_EPClearStall+0x9e>
 800c67a:	683b      	ldr	r3, [r7, #0]
 800c67c:	78db      	ldrb	r3, [r3, #3]
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d10f      	bne.n	800c6a2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	015a      	lsls	r2, r3, #5
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	4413      	add	r3, r2
 800c68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	68ba      	ldr	r2, [r7, #8]
 800c692:	0151      	lsls	r1, r2, #5
 800c694:	68fa      	ldr	r2, [r7, #12]
 800c696:	440a      	add	r2, r1
 800c698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c69c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c6a0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800c6a2:	2300      	movs	r3, #0
}
 800c6a4:	4618      	mov	r0, r3
 800c6a6:	3714      	adds	r7, #20
 800c6a8:	46bd      	mov	sp, r7
 800c6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6ae:	4770      	bx	lr

0800c6b0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	460b      	mov	r3, r1
 800c6ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	68fa      	ldr	r2, [r7, #12]
 800c6ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c6ce:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800c6d2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c6da:	681a      	ldr	r2, [r3, #0]
 800c6dc:	78fb      	ldrb	r3, [r7, #3]
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c6e4:	68f9      	ldr	r1, [r7, #12]
 800c6e6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c6ea:	4313      	orrs	r3, r2
 800c6ec:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c6ee:	2300      	movs	r3, #0
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3714      	adds	r7, #20
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fa:	4770      	bx	lr

0800c6fc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b084      	sub	sp, #16
 800c700:	af00      	add	r7, sp, #0
 800c702:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	68fa      	ldr	r2, [r7, #12]
 800c712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c716:	f023 0302 	bic.w	r3, r3, #2
 800c71a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c71c:	2003      	movs	r0, #3
 800c71e:	f7f4 ff07 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 800c722:	2300      	movs	r3, #0
}
 800c724:	4618      	mov	r0, r3
 800c726:	3710      	adds	r7, #16
 800c728:	46bd      	mov	sp, r7
 800c72a:	bd80      	pop	{r7, pc}

0800c72c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	68fa      	ldr	r2, [r7, #12]
 800c742:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c746:	f043 0302 	orr.w	r3, r3, #2
 800c74a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 800c74c:	2003      	movs	r0, #3
 800c74e:	f7f4 feef 	bl	8001530 <HAL_Delay>

  return HAL_OK;
 800c752:	2300      	movs	r3, #0
}
 800c754:	4618      	mov	r0, r3
 800c756:	3710      	adds	r7, #16
 800c758:	46bd      	mov	sp, r7
 800c75a:	bd80      	pop	{r7, pc}

0800c75c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c75c:	b480      	push	{r7}
 800c75e:	b085      	sub	sp, #20
 800c760:	af00      	add	r7, sp, #0
 800c762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	695b      	ldr	r3, [r3, #20]
 800c768:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	699b      	ldr	r3, [r3, #24]
 800c76e:	68fa      	ldr	r2, [r7, #12]
 800c770:	4013      	ands	r3, r2
 800c772:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c774:	68fb      	ldr	r3, [r7, #12]
}
 800c776:	4618      	mov	r0, r3
 800c778:	3714      	adds	r7, #20
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr

0800c782 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c782:	b480      	push	{r7}
 800c784:	b085      	sub	sp, #20
 800c786:	af00      	add	r7, sp, #0
 800c788:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c794:	699b      	ldr	r3, [r3, #24]
 800c796:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c798:	68fb      	ldr	r3, [r7, #12]
 800c79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c79e:	69db      	ldr	r3, [r3, #28]
 800c7a0:	68ba      	ldr	r2, [r7, #8]
 800c7a2:	4013      	ands	r3, r2
 800c7a4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c7a6:	68bb      	ldr	r3, [r7, #8]
 800c7a8:	0c1b      	lsrs	r3, r3, #16
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	3714      	adds	r7, #20
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c7b6:	b480      	push	{r7}
 800c7b8:	b085      	sub	sp, #20
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7c8:	699b      	ldr	r3, [r3, #24]
 800c7ca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c7d2:	69db      	ldr	r3, [r3, #28]
 800c7d4:	68ba      	ldr	r2, [r7, #8]
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c7da:	68bb      	ldr	r3, [r7, #8]
 800c7dc:	b29b      	uxth	r3, r3
}
 800c7de:	4618      	mov	r0, r3
 800c7e0:	3714      	adds	r7, #20
 800c7e2:	46bd      	mov	sp, r7
 800c7e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e8:	4770      	bx	lr

0800c7ea <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c7ea:	b480      	push	{r7}
 800c7ec:	b085      	sub	sp, #20
 800c7ee:	af00      	add	r7, sp, #0
 800c7f0:	6078      	str	r0, [r7, #4]
 800c7f2:	460b      	mov	r3, r1
 800c7f4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c7fa:	78fb      	ldrb	r3, [r7, #3]
 800c7fc:	015a      	lsls	r2, r3, #5
 800c7fe:	68fb      	ldr	r3, [r7, #12]
 800c800:	4413      	add	r3, r2
 800c802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c806:	689b      	ldr	r3, [r3, #8]
 800c808:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c810:	695b      	ldr	r3, [r3, #20]
 800c812:	68ba      	ldr	r2, [r7, #8]
 800c814:	4013      	ands	r3, r2
 800c816:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c818:	68bb      	ldr	r3, [r7, #8]
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	3714      	adds	r7, #20
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr

0800c826 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c826:	b480      	push	{r7}
 800c828:	b087      	sub	sp, #28
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c836:	697b      	ldr	r3, [r7, #20]
 800c838:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c846:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c848:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c84a:	78fb      	ldrb	r3, [r7, #3]
 800c84c:	f003 030f 	and.w	r3, r3, #15
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	fa22 f303 	lsr.w	r3, r2, r3
 800c856:	01db      	lsls	r3, r3, #7
 800c858:	b2db      	uxtb	r3, r3
 800c85a:	693a      	ldr	r2, [r7, #16]
 800c85c:	4313      	orrs	r3, r2
 800c85e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c860:	78fb      	ldrb	r3, [r7, #3]
 800c862:	015a      	lsls	r2, r3, #5
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	4413      	add	r3, r2
 800c868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c86c:	689b      	ldr	r3, [r3, #8]
 800c86e:	693a      	ldr	r2, [r7, #16]
 800c870:	4013      	ands	r3, r2
 800c872:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c874:	68bb      	ldr	r3, [r7, #8]
}
 800c876:	4618      	mov	r0, r3
 800c878:	371c      	adds	r7, #28
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr

0800c882 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c882:	b480      	push	{r7}
 800c884:	b083      	sub	sp, #12
 800c886:	af00      	add	r7, sp, #0
 800c888:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	695b      	ldr	r3, [r3, #20]
 800c88e:	f003 0301 	and.w	r3, r3, #1
}
 800c892:	4618      	mov	r0, r3
 800c894:	370c      	adds	r7, #12
 800c896:	46bd      	mov	sp, r7
 800c898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c89c:	4770      	bx	lr
	...

0800c8a0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c8a0:	b480      	push	{r7}
 800c8a2:	b085      	sub	sp, #20
 800c8a4:	af00      	add	r7, sp, #0
 800c8a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c8ac:	68fb      	ldr	r3, [r7, #12]
 800c8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8b2:	681a      	ldr	r2, [r3, #0]
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	4b09      	ldr	r3, [pc, #36]	; (800c8e4 <USB_ActivateSetup+0x44>)
 800c8be:	4013      	ands	r3, r2
 800c8c0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	68fa      	ldr	r2, [r7, #12]
 800c8cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c8d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8d4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c8d6:	2300      	movs	r3, #0
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr
 800c8e4:	fffff800 	.word	0xfffff800

0800c8e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b087      	sub	sp, #28
 800c8ec:	af00      	add	r7, sp, #0
 800c8ee:	60f8      	str	r0, [r7, #12]
 800c8f0:	460b      	mov	r3, r1
 800c8f2:	607a      	str	r2, [r7, #4]
 800c8f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	333c      	adds	r3, #60	; 0x3c
 800c8fe:	3304      	adds	r3, #4
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c904:	693b      	ldr	r3, [r7, #16]
 800c906:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <USB_EP0_OutStart+0xb8>)
 800c908:	4293      	cmp	r3, r2
 800c90a:	d90a      	bls.n	800c922 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c918:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c91c:	d101      	bne.n	800c922 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c91e:	2300      	movs	r3, #0
 800c920:	e037      	b.n	800c992 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c928:	461a      	mov	r2, r3
 800c92a:	2300      	movs	r3, #0
 800c92c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c92e:	697b      	ldr	r3, [r7, #20]
 800c930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c934:	691b      	ldr	r3, [r3, #16]
 800c936:	697a      	ldr	r2, [r7, #20]
 800c938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c93c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c940:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c942:	697b      	ldr	r3, [r7, #20]
 800c944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	697a      	ldr	r2, [r7, #20]
 800c94c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c950:	f043 0318 	orr.w	r3, r3, #24
 800c954:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c956:	697b      	ldr	r3, [r7, #20]
 800c958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c95c:	691b      	ldr	r3, [r3, #16]
 800c95e:	697a      	ldr	r2, [r7, #20]
 800c960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c964:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c968:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c96a:	7afb      	ldrb	r3, [r7, #11]
 800c96c:	2b01      	cmp	r3, #1
 800c96e:	d10f      	bne.n	800c990 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c970:	697b      	ldr	r3, [r7, #20]
 800c972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c976:	461a      	mov	r2, r3
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c97c:	697b      	ldr	r3, [r7, #20]
 800c97e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	697a      	ldr	r2, [r7, #20]
 800c986:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c98a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c98e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c990:	2300      	movs	r3, #0
}
 800c992:	4618      	mov	r0, r3
 800c994:	371c      	adds	r7, #28
 800c996:	46bd      	mov	sp, r7
 800c998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c99c:	4770      	bx	lr
 800c99e:	bf00      	nop
 800c9a0:	4f54300a 	.word	0x4f54300a

0800c9a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c9a4:	b480      	push	{r7}
 800c9a6:	b085      	sub	sp, #20
 800c9a8:	af00      	add	r7, sp, #0
 800c9aa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	60fb      	str	r3, [r7, #12]
 800c9b6:	68fb      	ldr	r3, [r7, #12]
 800c9b8:	4a13      	ldr	r2, [pc, #76]	; (800ca08 <USB_CoreReset+0x64>)
 800c9ba:	4293      	cmp	r3, r2
 800c9bc:	d901      	bls.n	800c9c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c9be:	2303      	movs	r3, #3
 800c9c0:	e01b      	b.n	800c9fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	daf2      	bge.n	800c9b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	691b      	ldr	r3, [r3, #16]
 800c9d2:	f043 0201 	orr.w	r2, r3, #1
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	3301      	adds	r3, #1
 800c9de:	60fb      	str	r3, [r7, #12]
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	4a09      	ldr	r2, [pc, #36]	; (800ca08 <USB_CoreReset+0x64>)
 800c9e4:	4293      	cmp	r3, r2
 800c9e6:	d901      	bls.n	800c9ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	e006      	b.n	800c9fa <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	691b      	ldr	r3, [r3, #16]
 800c9f0:	f003 0301 	and.w	r3, r3, #1
 800c9f4:	2b01      	cmp	r3, #1
 800c9f6:	d0f0      	beq.n	800c9da <USB_CoreReset+0x36>

  return HAL_OK;
 800c9f8:	2300      	movs	r3, #0
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3714      	adds	r7, #20
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca04:	4770      	bx	lr
 800ca06:	bf00      	nop
 800ca08:	00030d40 	.word	0x00030d40

0800ca0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca10:	4904      	ldr	r1, [pc, #16]	; (800ca24 <MX_FATFS_Init+0x18>)
 800ca12:	4805      	ldr	r0, [pc, #20]	; (800ca28 <MX_FATFS_Init+0x1c>)
 800ca14:	f002 ff52 	bl	800f8bc <FATFS_LinkDriver>
 800ca18:	4603      	mov	r3, r0
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	4b03      	ldr	r3, [pc, #12]	; (800ca2c <MX_FATFS_Init+0x20>)
 800ca1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca20:	bf00      	nop
 800ca22:	bd80      	pop	{r7, pc}
 800ca24:	240005e8 	.word	0x240005e8
 800ca28:	08010558 	.word	0x08010558
 800ca2c:	240005e4 	.word	0x240005e4

0800ca30 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ca30:	b580      	push	{r7, lr}
 800ca32:	b082      	sub	sp, #8
 800ca34:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ca36:	2300      	movs	r3, #0
 800ca38:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ca3a:	f000 f879 	bl	800cb30 <BSP_SD_IsDetected>
 800ca3e:	4603      	mov	r3, r0
 800ca40:	2b01      	cmp	r3, #1
 800ca42:	d001      	beq.n	800ca48 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ca44:	2302      	movs	r3, #2
 800ca46:	e012      	b.n	800ca6e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ca48:	480b      	ldr	r0, [pc, #44]	; (800ca78 <BSP_SD_Init+0x48>)
 800ca4a:	f7fb f97f 	bl	8007d4c <HAL_SD_Init>
 800ca4e:	4603      	mov	r3, r0
 800ca50:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800ca52:	79fb      	ldrb	r3, [r7, #7]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d109      	bne.n	800ca6c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 800ca58:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800ca5c:	4806      	ldr	r0, [pc, #24]	; (800ca78 <BSP_SD_Init+0x48>)
 800ca5e:	f7fc f843 	bl	8008ae8 <HAL_SD_ConfigWideBusOperation>
 800ca62:	4603      	mov	r3, r0
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d001      	beq.n	800ca6c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 800ca68:	2301      	movs	r3, #1
 800ca6a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800ca6c:	79fb      	ldrb	r3, [r7, #7]
}
 800ca6e:	4618      	mov	r0, r3
 800ca70:	3708      	adds	r7, #8
 800ca72:	46bd      	mov	sp, r7
 800ca74:	bd80      	pop	{r7, pc}
 800ca76:	bf00      	nop
 800ca78:	2400030c 	.word	0x2400030c

0800ca7c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b088      	sub	sp, #32
 800ca80:	af02      	add	r7, sp, #8
 800ca82:	60f8      	str	r0, [r7, #12]
 800ca84:	60b9      	str	r1, [r7, #8]
 800ca86:	607a      	str	r2, [r7, #4]
 800ca88:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	9300      	str	r3, [sp, #0]
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	68ba      	ldr	r2, [r7, #8]
 800ca96:	68f9      	ldr	r1, [r7, #12]
 800ca98:	4806      	ldr	r0, [pc, #24]	; (800cab4 <BSP_SD_ReadBlocks+0x38>)
 800ca9a:	f7fb fa7b 	bl	8007f94 <HAL_SD_ReadBlocks>
 800ca9e:	4603      	mov	r3, r0
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d001      	beq.n	800caa8 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800caa4:	2301      	movs	r3, #1
 800caa6:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800caa8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caaa:	4618      	mov	r0, r3
 800caac:	3718      	adds	r7, #24
 800caae:	46bd      	mov	sp, r7
 800cab0:	bd80      	pop	{r7, pc}
 800cab2:	bf00      	nop
 800cab4:	2400030c 	.word	0x2400030c

0800cab8 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cab8:	b580      	push	{r7, lr}
 800caba:	b088      	sub	sp, #32
 800cabc:	af02      	add	r7, sp, #8
 800cabe:	60f8      	str	r0, [r7, #12]
 800cac0:	60b9      	str	r1, [r7, #8]
 800cac2:	607a      	str	r2, [r7, #4]
 800cac4:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	9300      	str	r3, [sp, #0]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	68ba      	ldr	r2, [r7, #8]
 800cad2:	68f9      	ldr	r1, [r7, #12]
 800cad4:	4806      	ldr	r0, [pc, #24]	; (800caf0 <BSP_SD_WriteBlocks+0x38>)
 800cad6:	f7fb fbe7 	bl	80082a8 <HAL_SD_WriteBlocks>
 800cada:	4603      	mov	r3, r0
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d001      	beq.n	800cae4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cae0:	2301      	movs	r3, #1
 800cae2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cae4:	7dfb      	ldrb	r3, [r7, #23]
}
 800cae6:	4618      	mov	r0, r3
 800cae8:	3718      	adds	r7, #24
 800caea:	46bd      	mov	sp, r7
 800caec:	bd80      	pop	{r7, pc}
 800caee:	bf00      	nop
 800caf0:	2400030c 	.word	0x2400030c

0800caf4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800caf8:	4805      	ldr	r0, [pc, #20]	; (800cb10 <BSP_SD_GetCardState+0x1c>)
 800cafa:	f7fc f89f 	bl	8008c3c <HAL_SD_GetCardState>
 800cafe:	4603      	mov	r3, r0
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	bf14      	ite	ne
 800cb04:	2301      	movne	r3, #1
 800cb06:	2300      	moveq	r3, #0
 800cb08:	b2db      	uxtb	r3, r3
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	bd80      	pop	{r7, pc}
 800cb0e:	bf00      	nop
 800cb10:	2400030c 	.word	0x2400030c

0800cb14 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb14:	b580      	push	{r7, lr}
 800cb16:	b082      	sub	sp, #8
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cb1c:	6879      	ldr	r1, [r7, #4]
 800cb1e:	4803      	ldr	r0, [pc, #12]	; (800cb2c <BSP_SD_GetCardInfo+0x18>)
 800cb20:	f7fb ffb6 	bl	8008a90 <HAL_SD_GetCardInfo>
}
 800cb24:	bf00      	nop
 800cb26:	3708      	adds	r7, #8
 800cb28:	46bd      	mov	sp, r7
 800cb2a:	bd80      	pop	{r7, pc}
 800cb2c:	2400030c 	.word	0x2400030c

0800cb30 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b082      	sub	sp, #8
 800cb34:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb36:	2301      	movs	r3, #1
 800cb38:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cb3a:	f000 f80b 	bl	800cb54 <BSP_PlatformIsDetected>
 800cb3e:	4603      	mov	r3, r0
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d101      	bne.n	800cb48 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cb44:	2300      	movs	r3, #0
 800cb46:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cb48:	79fb      	ldrb	r3, [r7, #7]
 800cb4a:	b2db      	uxtb	r3, r3
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cb5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cb62:	4806      	ldr	r0, [pc, #24]	; (800cb7c <BSP_PlatformIsDetected+0x28>)
 800cb64:	f7f6 fffc 	bl	8003b60 <HAL_GPIO_ReadPin>
 800cb68:	4603      	mov	r3, r0
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d001      	beq.n	800cb72 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cb6e:	2300      	movs	r3, #0
 800cb70:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cb72:	79fb      	ldrb	r3, [r7, #7]
}
 800cb74:	4618      	mov	r0, r3
 800cb76:	3708      	adds	r7, #8
 800cb78:	46bd      	mov	sp, r7
 800cb7a:	bd80      	pop	{r7, pc}
 800cb7c:	58020000 	.word	0x58020000

0800cb80 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b082      	sub	sp, #8
 800cb84:	af00      	add	r7, sp, #0
 800cb86:	4603      	mov	r3, r0
 800cb88:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cb8a:	4b0b      	ldr	r3, [pc, #44]	; (800cbb8 <SD_CheckStatus+0x38>)
 800cb8c:	2201      	movs	r2, #1
 800cb8e:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cb90:	f7ff ffb0 	bl	800caf4 <BSP_SD_GetCardState>
 800cb94:	4603      	mov	r3, r0
 800cb96:	2b00      	cmp	r3, #0
 800cb98:	d107      	bne.n	800cbaa <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cb9a:	4b07      	ldr	r3, [pc, #28]	; (800cbb8 <SD_CheckStatus+0x38>)
 800cb9c:	781b      	ldrb	r3, [r3, #0]
 800cb9e:	b2db      	uxtb	r3, r3
 800cba0:	f023 0301 	bic.w	r3, r3, #1
 800cba4:	b2da      	uxtb	r2, r3
 800cba6:	4b04      	ldr	r3, [pc, #16]	; (800cbb8 <SD_CheckStatus+0x38>)
 800cba8:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbaa:	4b03      	ldr	r3, [pc, #12]	; (800cbb8 <SD_CheckStatus+0x38>)
 800cbac:	781b      	ldrb	r3, [r3, #0]
 800cbae:	b2db      	uxtb	r3, r3
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	2400000d 	.word	0x2400000d

0800cbbc <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b082      	sub	sp, #8
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	4603      	mov	r3, r0
 800cbc4:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cbc6:	4b0b      	ldr	r3, [pc, #44]	; (800cbf4 <SD_initialize+0x38>)
 800cbc8:	2201      	movs	r2, #1
 800cbca:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cbcc:	f7ff ff30 	bl	800ca30 <BSP_SD_Init>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d107      	bne.n	800cbe6 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cbd6:	79fb      	ldrb	r3, [r7, #7]
 800cbd8:	4618      	mov	r0, r3
 800cbda:	f7ff ffd1 	bl	800cb80 <SD_CheckStatus>
 800cbde:	4603      	mov	r3, r0
 800cbe0:	461a      	mov	r2, r3
 800cbe2:	4b04      	ldr	r3, [pc, #16]	; (800cbf4 <SD_initialize+0x38>)
 800cbe4:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cbe6:	4b03      	ldr	r3, [pc, #12]	; (800cbf4 <SD_initialize+0x38>)
 800cbe8:	781b      	ldrb	r3, [r3, #0]
 800cbea:	b2db      	uxtb	r3, r3
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3708      	adds	r7, #8
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}
 800cbf4:	2400000d 	.word	0x2400000d

0800cbf8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cbf8:	b580      	push	{r7, lr}
 800cbfa:	b082      	sub	sp, #8
 800cbfc:	af00      	add	r7, sp, #0
 800cbfe:	4603      	mov	r3, r0
 800cc00:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc02:	79fb      	ldrb	r3, [r7, #7]
 800cc04:	4618      	mov	r0, r3
 800cc06:	f7ff ffbb 	bl	800cb80 <SD_CheckStatus>
 800cc0a:	4603      	mov	r3, r0
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3708      	adds	r7, #8
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}

0800cc14 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b086      	sub	sp, #24
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
 800cc1e:	603b      	str	r3, [r7, #0]
 800cc20:	4603      	mov	r3, r0
 800cc22:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc24:	2301      	movs	r3, #1
 800cc26:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc28:	f04f 33ff 	mov.w	r3, #4294967295
 800cc2c:	683a      	ldr	r2, [r7, #0]
 800cc2e:	6879      	ldr	r1, [r7, #4]
 800cc30:	68b8      	ldr	r0, [r7, #8]
 800cc32:	f7ff ff23 	bl	800ca7c <BSP_SD_ReadBlocks>
 800cc36:	4603      	mov	r3, r0
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d107      	bne.n	800cc4c <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc3c:	bf00      	nop
 800cc3e:	f7ff ff59 	bl	800caf4 <BSP_SD_GetCardState>
 800cc42:	4603      	mov	r3, r0
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1fa      	bne.n	800cc3e <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc48:	2300      	movs	r3, #0
 800cc4a:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc4c:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc4e:	4618      	mov	r0, r3
 800cc50:	3718      	adds	r7, #24
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bd80      	pop	{r7, pc}

0800cc56 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cc56:	b580      	push	{r7, lr}
 800cc58:	b086      	sub	sp, #24
 800cc5a:	af00      	add	r7, sp, #0
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
 800cc60:	603b      	str	r3, [r7, #0]
 800cc62:	4603      	mov	r3, r0
 800cc64:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc66:	2301      	movs	r3, #1
 800cc68:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cc6a:	f04f 33ff 	mov.w	r3, #4294967295
 800cc6e:	683a      	ldr	r2, [r7, #0]
 800cc70:	6879      	ldr	r1, [r7, #4]
 800cc72:	68b8      	ldr	r0, [r7, #8]
 800cc74:	f7ff ff20 	bl	800cab8 <BSP_SD_WriteBlocks>
 800cc78:	4603      	mov	r3, r0
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d107      	bne.n	800cc8e <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cc7e:	bf00      	nop
 800cc80:	f7ff ff38 	bl	800caf4 <BSP_SD_GetCardState>
 800cc84:	4603      	mov	r3, r0
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d1fa      	bne.n	800cc80 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cc8e:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc90:	4618      	mov	r0, r3
 800cc92:	3718      	adds	r7, #24
 800cc94:	46bd      	mov	sp, r7
 800cc96:	bd80      	pop	{r7, pc}

0800cc98 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cc98:	b580      	push	{r7, lr}
 800cc9a:	b08c      	sub	sp, #48	; 0x30
 800cc9c:	af00      	add	r7, sp, #0
 800cc9e:	4603      	mov	r3, r0
 800cca0:	603a      	str	r2, [r7, #0]
 800cca2:	71fb      	strb	r3, [r7, #7]
 800cca4:	460b      	mov	r3, r1
 800cca6:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cca8:	2301      	movs	r3, #1
 800ccaa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800ccae:	4b25      	ldr	r3, [pc, #148]	; (800cd44 <SD_ioctl+0xac>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	b2db      	uxtb	r3, r3
 800ccb4:	f003 0301 	and.w	r3, r3, #1
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d001      	beq.n	800ccc0 <SD_ioctl+0x28>
 800ccbc:	2303      	movs	r3, #3
 800ccbe:	e03c      	b.n	800cd3a <SD_ioctl+0xa2>

  switch (cmd)
 800ccc0:	79bb      	ldrb	r3, [r7, #6]
 800ccc2:	2b03      	cmp	r3, #3
 800ccc4:	d834      	bhi.n	800cd30 <SD_ioctl+0x98>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <SD_ioctl+0x34>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800ccdd 	.word	0x0800ccdd
 800ccd0:	0800cce5 	.word	0x0800cce5
 800ccd4:	0800ccfd 	.word	0x0800ccfd
 800ccd8:	0800cd17 	.word	0x0800cd17
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800ccdc:	2300      	movs	r3, #0
 800ccde:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cce2:	e028      	b.n	800cd36 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cce4:	f107 0308 	add.w	r3, r7, #8
 800cce8:	4618      	mov	r0, r3
 800ccea:	f7ff ff13 	bl	800cb14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800ccee:	6a3a      	ldr	r2, [r7, #32]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800ccfa:	e01c      	b.n	800cd36 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800ccfc:	f107 0308 	add.w	r3, r7, #8
 800cd00:	4618      	mov	r0, r3
 800cd02:	f7ff ff07 	bl	800cb14 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd08:	b29a      	uxth	r2, r3
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd0e:	2300      	movs	r3, #0
 800cd10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd14:	e00f      	b.n	800cd36 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd16:	f107 0308 	add.w	r3, r7, #8
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	f7ff fefa 	bl	800cb14 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd22:	0a5a      	lsrs	r2, r3, #9
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd2e:	e002      	b.n	800cd36 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd30:	2304      	movs	r3, #4
 800cd32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	3730      	adds	r7, #48	; 0x30
 800cd3e:	46bd      	mov	sp, r7
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	2400000d 	.word	0x2400000d

0800cd48 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b084      	sub	sp, #16
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 800cd54:	f44f 701d 	mov.w	r0, #628	; 0x274
 800cd58:	f003 faac 	bl	80102b4 <malloc>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d105      	bne.n	800cd72 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	2200      	movs	r2, #0
 800cd6a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800cd6e:	2302      	movs	r3, #2
 800cd70:	e034      	b.n	800cddc <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	68fa      	ldr	r2, [r7, #12]
 800cd76:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	7c1b      	ldrb	r3, [r3, #16]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d115      	bne.n	800cdae <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cd82:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd86:	2202      	movs	r2, #2
 800cd88:	2101      	movs	r1, #1
 800cd8a:	6878      	ldr	r0, [r7, #4]
 800cd8c:	f003 f8f9 	bl	800ff82 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	2201      	movs	r2, #1
 800cd94:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 800cd98:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd9c:	2202      	movs	r2, #2
 800cd9e:	2181      	movs	r1, #129	; 0x81
 800cda0:	6878      	ldr	r0, [r7, #4]
 800cda2:	f003 f8ee 	bl	800ff82 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	2201      	movs	r2, #1
 800cdaa:	871a      	strh	r2, [r3, #56]	; 0x38
 800cdac:	e012      	b.n	800cdd4 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cdae:	2340      	movs	r3, #64	; 0x40
 800cdb0:	2202      	movs	r2, #2
 800cdb2:	2101      	movs	r1, #1
 800cdb4:	6878      	ldr	r0, [r7, #4]
 800cdb6:	f003 f8e4 	bl	800ff82 <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2201      	movs	r2, #1
 800cdbe:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 800cdc2:	2340      	movs	r3, #64	; 0x40
 800cdc4:	2202      	movs	r2, #2
 800cdc6:	2181      	movs	r1, #129	; 0x81
 800cdc8:	6878      	ldr	r0, [r7, #4]
 800cdca:	f003 f8da 	bl	800ff82 <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	2201      	movs	r2, #1
 800cdd2:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f000 f98e 	bl	800d0f6 <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 800cdda:	2300      	movs	r3, #0
}
 800cddc:	4618      	mov	r0, r3
 800cdde:	3710      	adds	r7, #16
 800cde0:	46bd      	mov	sp, r7
 800cde2:	bd80      	pop	{r7, pc}

0800cde4 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cde4:	b580      	push	{r7, lr}
 800cde6:	b082      	sub	sp, #8
 800cde8:	af00      	add	r7, sp, #0
 800cdea:	6078      	str	r0, [r7, #4]
 800cdec:	460b      	mov	r3, r1
 800cdee:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 800cdf0:	2101      	movs	r1, #1
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f003 f8eb 	bl	800ffce <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	2200      	movs	r2, #0
 800cdfc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 800ce00:	2181      	movs	r1, #129	; 0x81
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f003 f8e3 	bl	800ffce <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2200      	movs	r2, #0
 800ce0c:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 800ce0e:	6878      	ldr	r0, [r7, #4]
 800ce10:	f000 f9c7 	bl	800d1a2 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	d009      	beq.n	800ce32 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce24:	4618      	mov	r0, r3
 800ce26:	f003 fa4d 	bl	80102c4 <free>
    pdev->pClassData = NULL;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2200      	movs	r2, #0
 800ce2e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ce32:	2300      	movs	r3, #0
}
 800ce34:	4618      	mov	r0, r3
 800ce36:	3708      	adds	r7, #8
 800ce38:	46bd      	mov	sp, r7
 800ce3a:	bd80      	pop	{r7, pc}

0800ce3c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce3c:	b580      	push	{r7, lr}
 800ce3e:	b086      	sub	sp, #24
 800ce40:	af00      	add	r7, sp, #0
 800ce42:	6078      	str	r0, [r7, #4]
 800ce44:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ce4c:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 800ce52:	2300      	movs	r3, #0
 800ce54:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ce56:	683b      	ldr	r3, [r7, #0]
 800ce58:	781b      	ldrb	r3, [r3, #0]
 800ce5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d04d      	beq.n	800cefe <USBD_MSC_Setup+0xc2>
 800ce62:	2b20      	cmp	r3, #32
 800ce64:	f040 80c6 	bne.w	800cff4 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	785b      	ldrb	r3, [r3, #1]
 800ce6c:	2bfe      	cmp	r3, #254	; 0xfe
 800ce6e:	d002      	beq.n	800ce76 <USBD_MSC_Setup+0x3a>
 800ce70:	2bff      	cmp	r3, #255	; 0xff
 800ce72:	d024      	beq.n	800cebe <USBD_MSC_Setup+0x82>
 800ce74:	e03b      	b.n	800ceee <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	885b      	ldrh	r3, [r3, #2]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d118      	bne.n	800ceb0 <USBD_MSC_Setup+0x74>
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	88db      	ldrh	r3, [r3, #6]
 800ce82:	2b01      	cmp	r3, #1
 800ce84:	d114      	bne.n	800ceb0 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 800ce86:	683b      	ldr	r3, [r7, #0]
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	da0f      	bge.n	800ceb0 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800ce96:	699b      	ldr	r3, [r3, #24]
 800ce98:	4798      	blx	r3
 800ce9a:	4603      	mov	r3, r0
 800ce9c:	461a      	mov	r2, r3
 800ce9e:	693b      	ldr	r3, [r7, #16]
 800cea0:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 800cea2:	693b      	ldr	r3, [r7, #16]
 800cea4:	2201      	movs	r2, #1
 800cea6:	4619      	mov	r1, r3
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f002 fc58 	bl	800f75e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800ceae:	e025      	b.n	800cefc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800ceb0:	6839      	ldr	r1, [r7, #0]
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f002 fbe2 	bl	800f67c <USBD_CtlError>
        ret = USBD_FAIL;
 800ceb8:	2303      	movs	r3, #3
 800ceba:	75fb      	strb	r3, [r7, #23]
      break;
 800cebc:	e01e      	b.n	800cefc <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800cebe:	683b      	ldr	r3, [r7, #0]
 800cec0:	885b      	ldrh	r3, [r3, #2]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d10c      	bne.n	800cee0 <USBD_MSC_Setup+0xa4>
 800cec6:	683b      	ldr	r3, [r7, #0]
 800cec8:	88db      	ldrh	r3, [r3, #6]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d108      	bne.n	800cee0 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 800cece:	683b      	ldr	r3, [r7, #0]
 800ced0:	781b      	ldrb	r3, [r3, #0]
 800ced2:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	db03      	blt.n	800cee0 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 800ced8:	6878      	ldr	r0, [r7, #4]
 800ceda:	f000 f940 	bl	800d15e <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cede:	e00d      	b.n	800cefc <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 800cee0:	6839      	ldr	r1, [r7, #0]
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f002 fbca 	bl	800f67c <USBD_CtlError>
        ret = USBD_FAIL;
 800cee8:	2303      	movs	r3, #3
 800ceea:	75fb      	strb	r3, [r7, #23]
      break;
 800ceec:	e006      	b.n	800cefc <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 800ceee:	6839      	ldr	r1, [r7, #0]
 800cef0:	6878      	ldr	r0, [r7, #4]
 800cef2:	f002 fbc3 	bl	800f67c <USBD_CtlError>
      ret = USBD_FAIL;
 800cef6:	2303      	movs	r3, #3
 800cef8:	75fb      	strb	r3, [r7, #23]
      break;
 800cefa:	bf00      	nop
    }
    break;
 800cefc:	e081      	b.n	800d002 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cefe:	683b      	ldr	r3, [r7, #0]
 800cf00:	785b      	ldrb	r3, [r3, #1]
 800cf02:	2b0b      	cmp	r3, #11
 800cf04:	d86d      	bhi.n	800cfe2 <USBD_MSC_Setup+0x1a6>
 800cf06:	a201      	add	r2, pc, #4	; (adr r2, 800cf0c <USBD_MSC_Setup+0xd0>)
 800cf08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf0c:	0800cf3d 	.word	0x0800cf3d
 800cf10:	0800cfb3 	.word	0x0800cfb3
 800cf14:	0800cfe3 	.word	0x0800cfe3
 800cf18:	0800cfe3 	.word	0x0800cfe3
 800cf1c:	0800cfe3 	.word	0x0800cfe3
 800cf20:	0800cfe3 	.word	0x0800cfe3
 800cf24:	0800cfe3 	.word	0x0800cfe3
 800cf28:	0800cfe3 	.word	0x0800cfe3
 800cf2c:	0800cfe3 	.word	0x0800cfe3
 800cf30:	0800cfe3 	.word	0x0800cfe3
 800cf34:	0800cf65 	.word	0x0800cf65
 800cf38:	0800cf8d 	.word	0x0800cf8d
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf42:	2b03      	cmp	r3, #3
 800cf44:	d107      	bne.n	800cf56 <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800cf46:	f107 030e 	add.w	r3, r7, #14
 800cf4a:	2202      	movs	r2, #2
 800cf4c:	4619      	mov	r1, r3
 800cf4e:	6878      	ldr	r0, [r7, #4]
 800cf50:	f002 fc05 	bl	800f75e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf54:	e04d      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cf56:	6839      	ldr	r1, [r7, #0]
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f002 fb8f 	bl	800f67c <USBD_CtlError>
        ret = USBD_FAIL;
 800cf5e:	2303      	movs	r3, #3
 800cf60:	75fb      	strb	r3, [r7, #23]
      break;
 800cf62:	e046      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	d107      	bne.n	800cf7e <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 800cf6e:	693b      	ldr	r3, [r7, #16]
 800cf70:	3304      	adds	r3, #4
 800cf72:	2201      	movs	r2, #1
 800cf74:	4619      	mov	r1, r3
 800cf76:	6878      	ldr	r0, [r7, #4]
 800cf78:	f002 fbf1 	bl	800f75e <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cf7c:	e039      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cf7e:	6839      	ldr	r1, [r7, #0]
 800cf80:	6878      	ldr	r0, [r7, #4]
 800cf82:	f002 fb7b 	bl	800f67c <USBD_CtlError>
        ret = USBD_FAIL;
 800cf86:	2303      	movs	r3, #3
 800cf88:	75fb      	strb	r3, [r7, #23]
      break;
 800cf8a:	e032      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cf92:	2b03      	cmp	r3, #3
 800cf94:	d106      	bne.n	800cfa4 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 800cf96:	683b      	ldr	r3, [r7, #0]
 800cf98:	885b      	ldrh	r3, [r3, #2]
 800cf9a:	b2db      	uxtb	r3, r3
 800cf9c:	461a      	mov	r2, r3
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 800cfa2:	e026      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 800cfa4:	6839      	ldr	r1, [r7, #0]
 800cfa6:	6878      	ldr	r0, [r7, #4]
 800cfa8:	f002 fb68 	bl	800f67c <USBD_CtlError>
        ret = USBD_FAIL;
 800cfac:	2303      	movs	r3, #3
 800cfae:	75fb      	strb	r3, [r7, #23]
      break;
 800cfb0:	e01f      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfb8:	2b03      	cmp	r3, #3
 800cfba:	d119      	bne.n	800cff0 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	885b      	ldrh	r3, [r3, #2]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d115      	bne.n	800cff0 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 800cfc4:	683b      	ldr	r3, [r7, #0]
 800cfc6:	889b      	ldrh	r3, [r3, #4]
 800cfc8:	b2db      	uxtb	r3, r3
 800cfca:	4619      	mov	r1, r3
 800cfcc:	6878      	ldr	r0, [r7, #4]
 800cfce:	f003 f81d 	bl	801000c <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 800cfd2:	683b      	ldr	r3, [r7, #0]
 800cfd4:	889b      	ldrh	r3, [r3, #4]
 800cfd6:	b2db      	uxtb	r3, r3
 800cfd8:	4619      	mov	r1, r3
 800cfda:	6878      	ldr	r0, [r7, #4]
 800cfdc:	f000 fa5a 	bl	800d494 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 800cfe0:	e006      	b.n	800cff0 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 800cfe2:	6839      	ldr	r1, [r7, #0]
 800cfe4:	6878      	ldr	r0, [r7, #4]
 800cfe6:	f002 fb49 	bl	800f67c <USBD_CtlError>
      ret = USBD_FAIL;
 800cfea:	2303      	movs	r3, #3
 800cfec:	75fb      	strb	r3, [r7, #23]
      break;
 800cfee:	e000      	b.n	800cff2 <USBD_MSC_Setup+0x1b6>
      break;
 800cff0:	bf00      	nop
    }
    break;
 800cff2:	e006      	b.n	800d002 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 800cff4:	6839      	ldr	r1, [r7, #0]
 800cff6:	6878      	ldr	r0, [r7, #4]
 800cff8:	f002 fb40 	bl	800f67c <USBD_CtlError>
    ret = USBD_FAIL;
 800cffc:	2303      	movs	r3, #3
 800cffe:	75fb      	strb	r3, [r7, #23]
    break;
 800d000:	bf00      	nop
  }

  return (uint8_t)ret;
 800d002:	7dfb      	ldrb	r3, [r7, #23]
}
 800d004:	4618      	mov	r0, r3
 800d006:	3718      	adds	r7, #24
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b082      	sub	sp, #8
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	460b      	mov	r3, r1
 800d016:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 800d018:	78fb      	ldrb	r3, [r7, #3]
 800d01a:	4619      	mov	r1, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f000 f8d1 	bl	800d1c4 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 800d022:	2300      	movs	r3, #0
}
 800d024:	4618      	mov	r0, r3
 800d026:	3708      	adds	r7, #8
 800d028:	46bd      	mov	sp, r7
 800d02a:	bd80      	pop	{r7, pc}

0800d02c <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d02c:	b580      	push	{r7, lr}
 800d02e:	b082      	sub	sp, #8
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	460b      	mov	r3, r1
 800d036:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 800d038:	78fb      	ldrb	r3, [r7, #3]
 800d03a:	4619      	mov	r1, r3
 800d03c:	6878      	ldr	r0, [r7, #4]
 800d03e:	f000 f8f2 	bl	800d226 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 800d042:	2300      	movs	r3, #0
}
 800d044:	4618      	mov	r0, r3
 800d046:	3708      	adds	r7, #8
 800d048:	46bd      	mov	sp, r7
 800d04a:	bd80      	pop	{r7, pc}

0800d04c <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b083      	sub	sp, #12
 800d050:	af00      	add	r7, sp, #0
 800d052:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	2220      	movs	r2, #32
 800d058:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 800d05a:	4b03      	ldr	r3, [pc, #12]	; (800d068 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 800d05c:	4618      	mov	r0, r3
 800d05e:	370c      	adds	r7, #12
 800d060:	46bd      	mov	sp, r7
 800d062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d066:	4770      	bx	lr
 800d068:	24000048 	.word	0x24000048

0800d06c <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
 800d072:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2220      	movs	r2, #32
 800d078:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 800d07a:	4b03      	ldr	r3, [pc, #12]	; (800d088 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	370c      	adds	r7, #12
 800d080:	46bd      	mov	sp, r7
 800d082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d086:	4770      	bx	lr
 800d088:	24000068 	.word	0x24000068

0800d08c <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d08c:	b480      	push	{r7}
 800d08e:	b083      	sub	sp, #12
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2220      	movs	r2, #32
 800d098:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 800d09a:	4b03      	ldr	r3, [pc, #12]	; (800d0a8 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	370c      	adds	r7, #12
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr
 800d0a8:	24000088 	.word	0x24000088

0800d0ac <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d0ac:	b480      	push	{r7}
 800d0ae:	b083      	sub	sp, #12
 800d0b0:	af00      	add	r7, sp, #0
 800d0b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	220a      	movs	r2, #10
 800d0b8:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 800d0ba:	4b03      	ldr	r3, [pc, #12]	; (800d0c8 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d0bc:	4618      	mov	r0, r3
 800d0be:	370c      	adds	r7, #12
 800d0c0:	46bd      	mov	sp, r7
 800d0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0c6:	4770      	bx	lr
 800d0c8:	240000a8 	.word	0x240000a8

0800d0cc <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 800d0cc:	b480      	push	{r7}
 800d0ce:	b083      	sub	sp, #12
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
 800d0d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d0d6:	683b      	ldr	r3, [r7, #0]
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d101      	bne.n	800d0e0 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d0dc:	2303      	movs	r3, #3
 800d0de:	e004      	b.n	800d0ea <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	683a      	ldr	r2, [r7, #0]
 800d0e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800d0e8:	2300      	movs	r3, #0
}
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	370c      	adds	r7, #12
 800d0ee:	46bd      	mov	sp, r7
 800d0f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0f4:	4770      	bx	lr

0800d0f6 <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b084      	sub	sp, #16
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d104:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 800d106:	68fb      	ldr	r3, [r7, #12]
 800d108:	2200      	movs	r2, #0
 800d10a:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	2200      	movs	r2, #0
 800d110:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  hmsc->scsi_sense_head = 0U;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	2200      	movs	r2, #0
 800d11e:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	2200      	movs	r2, #0
 800d126:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	2000      	movs	r0, #0
 800d134:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 800d136:	2101      	movs	r1, #1
 800d138:	6878      	ldr	r0, [r7, #4]
 800d13a:	f002 ff67 	bl	801000c <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 800d13e:	2181      	movs	r1, #129	; 0x81
 800d140:	6878      	ldr	r0, [r7, #4]
 800d142:	f002 ff63 	bl	801000c <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d14c:	231f      	movs	r3, #31
 800d14e:	2101      	movs	r1, #1
 800d150:	6878      	ldr	r0, [r7, #4]
 800d152:	f003 f824 	bl	801019e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d156:	bf00      	nop
 800d158:	3710      	adds	r7, #16
 800d15a:	46bd      	mov	sp, r7
 800d15c:	bd80      	pop	{r7, pc}

0800d15e <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 800d15e:	b580      	push	{r7, lr}
 800d160:	b084      	sub	sp, #16
 800d162:	af00      	add	r7, sp, #0
 800d164:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d16c:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	2200      	movs	r2, #0
 800d172:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	2201      	movs	r2, #1
 800d178:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 800d17a:	2181      	movs	r1, #129	; 0x81
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f002 ff83 	bl	8010088 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 800d182:	2101      	movs	r1, #1
 800d184:	6878      	ldr	r0, [r7, #4]
 800d186:	f002 ff7f 	bl	8010088 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d18a:	68fb      	ldr	r3, [r7, #12]
 800d18c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d190:	231f      	movs	r3, #31
 800d192:	2101      	movs	r1, #1
 800d194:	6878      	ldr	r0, [r7, #4]
 800d196:	f003 f802 	bl	801019e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d19a:	bf00      	nop
 800d19c:	3710      	adds	r7, #16
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	bd80      	pop	{r7, pc}

0800d1a2 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 800d1a2:	b480      	push	{r7}
 800d1a4:	b085      	sub	sp, #20
 800d1a6:	af00      	add	r7, sp, #0
 800d1a8:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1b0:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	721a      	strb	r2, [r3, #8]
}
 800d1b8:	bf00      	nop
 800d1ba:	3714      	adds	r7, #20
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1c2:	4770      	bx	lr

0800d1c4 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
 800d1cc:	460b      	mov	r3, r1
 800d1ce:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d1d6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d1d8:	68fb      	ldr	r3, [r7, #12]
 800d1da:	7a1b      	ldrb	r3, [r3, #8]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d004      	beq.n	800d1ea <MSC_BOT_DataIn+0x26>
 800d1e0:	2b02      	cmp	r3, #2
 800d1e2:	db19      	blt.n	800d218 <MSC_BOT_DataIn+0x54>
 800d1e4:	2b04      	cmp	r3, #4
 800d1e6:	dc17      	bgt.n	800d218 <MSC_BOT_DataIn+0x54>
 800d1e8:	e011      	b.n	800d20e <MSC_BOT_DataIn+0x4a>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d1ea:	68fb      	ldr	r3, [r7, #12]
 800d1ec:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d1f0:	68fb      	ldr	r3, [r7, #12]
 800d1f2:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d1f6:	461a      	mov	r2, r3
 800d1f8:	6878      	ldr	r0, [r7, #4]
 800d1fa:	f000 f973 	bl	800d4e4 <SCSI_ProcessCmd>
 800d1fe:	4603      	mov	r3, r0
 800d200:	2b00      	cmp	r3, #0
 800d202:	da0b      	bge.n	800d21c <MSC_BOT_DataIn+0x58>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d204:	2101      	movs	r1, #1
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f8ea 	bl	800d3e0 <MSC_BOT_SendCSW>
    }
    break;
 800d20c:	e006      	b.n	800d21c <MSC_BOT_DataIn+0x58>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d20e:	2100      	movs	r1, #0
 800d210:	6878      	ldr	r0, [r7, #4]
 800d212:	f000 f8e5 	bl	800d3e0 <MSC_BOT_SendCSW>
    break;
 800d216:	e002      	b.n	800d21e <MSC_BOT_DataIn+0x5a>

  default:
    break;
 800d218:	bf00      	nop
 800d21a:	e000      	b.n	800d21e <MSC_BOT_DataIn+0x5a>
    break;
 800d21c:	bf00      	nop
  }
}
 800d21e:	bf00      	nop
 800d220:	3710      	adds	r7, #16
 800d222:	46bd      	mov	sp, r7
 800d224:	bd80      	pop	{r7, pc}

0800d226 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d226:	b580      	push	{r7, lr}
 800d228:	b084      	sub	sp, #16
 800d22a:	af00      	add	r7, sp, #0
 800d22c:	6078      	str	r0, [r7, #4]
 800d22e:	460b      	mov	r3, r1
 800d230:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d238:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	7a1b      	ldrb	r3, [r3, #8]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d002      	beq.n	800d248 <MSC_BOT_DataOut+0x22>
 800d242:	2b01      	cmp	r3, #1
 800d244:	d004      	beq.n	800d250 <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 800d246:	e015      	b.n	800d274 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 800d248:	6878      	ldr	r0, [r7, #4]
 800d24a:	f000 f817 	bl	800d27c <MSC_BOT_CBW_Decode>
      break;
 800d24e:	e011      	b.n	800d274 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d25c:	461a      	mov	r2, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f000 f940 	bl	800d4e4 <SCSI_ProcessCmd>
 800d264:	4603      	mov	r3, r0
 800d266:	2b00      	cmp	r3, #0
 800d268:	da03      	bge.n	800d272 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d26a:	2101      	movs	r1, #1
 800d26c:	6878      	ldr	r0, [r7, #4]
 800d26e:	f000 f8b7 	bl	800d3e0 <MSC_BOT_SendCSW>
      break;
 800d272:	bf00      	nop
  }
}
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}

0800d27c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b084      	sub	sp, #16
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d28a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	f8c3 2234 	str.w	r2, [r3, #564]	; 0x234
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 800d298:	68fb      	ldr	r3, [r7, #12]
 800d29a:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d2a4:	2101      	movs	r1, #1
 800d2a6:	6878      	ldr	r0, [r7, #4]
 800d2a8:	f002 ff9a 	bl	80101e0 <USBD_LL_GetRxDataSize>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b1f      	cmp	r3, #31
 800d2b0:	d114      	bne.n	800d2dc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 800d2b8:	4a32      	ldr	r2, [pc, #200]	; (800d384 <MSC_BOT_CBW_Decode+0x108>)
 800d2ba:	4293      	cmp	r3, r2
 800d2bc:	d10e      	bne.n	800d2dc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	f893 321d 	ldrb.w	r3, [r3, #541]	; 0x21d
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 800d2c4:	2b01      	cmp	r3, #1
 800d2c6:	d809      	bhi.n	800d2dc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d004      	beq.n	800d2dc <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength > 16U))
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 800d2d8:	2b10      	cmp	r3, #16
 800d2da:	d90e      	bls.n	800d2fa <MSC_BOT_CBW_Decode+0x7e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d2e2:	2320      	movs	r3, #32
 800d2e4:	2205      	movs	r2, #5
 800d2e6:	6878      	ldr	r0, [r7, #4]
 800d2e8:	f000 fcc9 	bl	800dc7e <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d2ec:	68fb      	ldr	r3, [r7, #12]
 800d2ee:	2202      	movs	r2, #2
 800d2f0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 800d2f2:	6878      	ldr	r0, [r7, #4]
 800d2f4:	f000 f8a0 	bl	800d438 <MSC_BOT_Abort>
 800d2f8:	e041      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f203 231f 	addw	r3, r3, #543	; 0x21f
 800d306:	461a      	mov	r2, r3
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f000 f8eb 	bl	800d4e4 <SCSI_ProcessCmd>
 800d30e:	4603      	mov	r3, r0
 800d310:	2b00      	cmp	r3, #0
 800d312:	da0c      	bge.n	800d32e <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	7a1b      	ldrb	r3, [r3, #8]
 800d318:	2b05      	cmp	r3, #5
 800d31a:	d104      	bne.n	800d326 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d31c:	2101      	movs	r1, #1
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f000 f85e 	bl	800d3e0 <MSC_BOT_SendCSW>
 800d324:	e02b      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d326:	6878      	ldr	r0, [r7, #4]
 800d328:	f000 f886 	bl	800d438 <MSC_BOT_Abort>
 800d32c:	e027      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	7a1b      	ldrb	r3, [r3, #8]
 800d332:	2b02      	cmp	r3, #2
 800d334:	d022      	beq.n	800d37c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d336:	68fb      	ldr	r3, [r7, #12]
 800d338:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	d01e      	beq.n	800d37c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 800d342:	2b03      	cmp	r3, #3
 800d344:	d01a      	beq.n	800d37c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	68db      	ldr	r3, [r3, #12]
 800d34a:	2b00      	cmp	r3, #0
 800d34c:	d009      	beq.n	800d362 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 800d34e:	68fb      	ldr	r3, [r7, #12]
 800d350:	f103 0110 	add.w	r1, r3, #16
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	68db      	ldr	r3, [r3, #12]
 800d358:	461a      	mov	r2, r3
 800d35a:	6878      	ldr	r0, [r7, #4]
 800d35c:	f000 f814 	bl	800d388 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 800d360:	e00d      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	68db      	ldr	r3, [r3, #12]
 800d366:	2b00      	cmp	r3, #0
 800d368:	d104      	bne.n	800d374 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800d36a:	2100      	movs	r1, #0
 800d36c:	6878      	ldr	r0, [r7, #4]
 800d36e:	f000 f837 	bl	800d3e0 <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 800d372:	e004      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 800d374:	6878      	ldr	r0, [r7, #4]
 800d376:	f000 f85f 	bl	800d438 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800d37a:	e000      	b.n	800d37e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800d37c:	bf00      	nop
    }
  }
}
 800d37e:	3710      	adds	r7, #16
 800d380:	46bd      	mov	sp, r7
 800d382:	bd80      	pop	{r7, pc}
 800d384:	43425355 	.word	0x43425355

0800d388 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b086      	sub	sp, #24
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	60f8      	str	r0, [r7, #12]
 800d390:	60b9      	str	r1, [r7, #8]
 800d392:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d39a:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d3a2:	687a      	ldr	r2, [r7, #4]
 800d3a4:	4293      	cmp	r3, r2
 800d3a6:	bf28      	it	cs
 800d3a8:	4613      	movcs	r3, r2
 800d3aa:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 800d3ac:	697b      	ldr	r3, [r7, #20]
 800d3ae:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	1ad2      	subs	r2, r2, r3
 800d3b6:	697b      	ldr	r3, [r7, #20]
 800d3b8:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	2204      	movs	r2, #4
 800d3c8:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	68ba      	ldr	r2, [r7, #8]
 800d3ce:	2181      	movs	r1, #129	; 0x81
 800d3d0:	68f8      	ldr	r0, [r7, #12]
 800d3d2:	f002 fec3 	bl	801015c <USBD_LL_Transmit>
}
 800d3d6:	bf00      	nop
 800d3d8:	3718      	adds	r7, #24
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
	...

0800d3e0 <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b084      	sub	sp, #16
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
 800d3e8:	460b      	mov	r3, r1
 800d3ea:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d3f2:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	4a0f      	ldr	r2, [pc, #60]	; (800d434 <MSC_BOT_SendCSW+0x54>)
 800d3f8:	f8c3 2230 	str.w	r2, [r3, #560]	; 0x230
  hmsc->csw.bStatus = CSW_Status;
 800d3fc:	68fb      	ldr	r3, [r7, #12]
 800d3fe:	78fa      	ldrb	r2, [r7, #3]
 800d400:	f883 223c 	strb.w	r2, [r3, #572]	; 0x23c
  hmsc->bot_state = USBD_BOT_IDLE;
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	2200      	movs	r2, #0
 800d408:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 800d40a:	68fb      	ldr	r3, [r7, #12]
 800d40c:	f503 720c 	add.w	r2, r3, #560	; 0x230
 800d410:	230d      	movs	r3, #13
 800d412:	2181      	movs	r1, #129	; 0x81
 800d414:	6878      	ldr	r0, [r7, #4]
 800d416:	f002 fea1 	bl	801015c <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f503 7204 	add.w	r2, r3, #528	; 0x210
 800d420:	231f      	movs	r3, #31
 800d422:	2101      	movs	r1, #1
 800d424:	6878      	ldr	r0, [r7, #4]
 800d426:	f002 feba 	bl	801019e <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 800d42a:	bf00      	nop
 800d42c:	3710      	adds	r7, #16
 800d42e:	46bd      	mov	sp, r7
 800d430:	bd80      	pop	{r7, pc}
 800d432:	bf00      	nop
 800d434:	53425355 	.word	0x53425355

0800d438 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b084      	sub	sp, #16
 800d43c:	af00      	add	r7, sp, #0
 800d43e:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d446:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d10c      	bne.n	800d46c <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
  if ((hmsc->cbw.bmFlags == 0U) &&
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d007      	beq.n	800d46c <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800d460:	2b00      	cmp	r3, #0
 800d462:	d103      	bne.n	800d46c <MSC_BOT_Abort+0x34>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d464:	2101      	movs	r1, #1
 800d466:	6878      	ldr	r0, [r7, #4]
 800d468:	f002 fdef 	bl	801004a <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d46c:	2181      	movs	r1, #129	; 0x81
 800d46e:	6878      	ldr	r0, [r7, #4]
 800d470:	f002 fdeb 	bl	801004a <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 800d474:	68fb      	ldr	r3, [r7, #12]
 800d476:	7a5b      	ldrb	r3, [r3, #9]
 800d478:	2b02      	cmp	r3, #2
 800d47a:	d107      	bne.n	800d48c <MSC_BOT_Abort+0x54>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d47c:	2181      	movs	r1, #129	; 0x81
 800d47e:	6878      	ldr	r0, [r7, #4]
 800d480:	f002 fde3 	bl	801004a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d484:	2101      	movs	r1, #1
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f002 fddf 	bl	801004a <USBD_LL_StallEP>
  }
}
 800d48c:	bf00      	nop
 800d48e:	3710      	adds	r7, #16
 800d490:	46bd      	mov	sp, r7
 800d492:	bd80      	pop	{r7, pc}

0800d494 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d494:	b580      	push	{r7, lr}
 800d496:	b084      	sub	sp, #16
 800d498:	af00      	add	r7, sp, #0
 800d49a:	6078      	str	r0, [r7, #4]
 800d49c:	460b      	mov	r3, r1
 800d49e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4a6:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	7a5b      	ldrb	r3, [r3, #9]
 800d4ac:	2b02      	cmp	r3, #2
 800d4ae:	d108      	bne.n	800d4c2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800d4b0:	2181      	movs	r1, #129	; 0x81
 800d4b2:	6878      	ldr	r0, [r7, #4]
 800d4b4:	f002 fdc9 	bl	801004a <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 800d4b8:	2101      	movs	r1, #1
 800d4ba:	6878      	ldr	r0, [r7, #4]
 800d4bc:	f002 fdc5 	bl	801004a <USBD_LL_StallEP>
 800d4c0:	e00d      	b.n	800d4de <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800d4c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	da08      	bge.n	800d4dc <MSC_BOT_CplClrFeature+0x48>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	7a5b      	ldrb	r3, [r3, #9]
 800d4ce:	2b01      	cmp	r3, #1
 800d4d0:	d004      	beq.n	800d4dc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800d4d2:	2101      	movs	r1, #1
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff ff83 	bl	800d3e0 <MSC_BOT_SendCSW>
 800d4da:	e000      	b.n	800d4de <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 800d4dc:	bf00      	nop
  }
}
 800d4de:	3710      	adds	r7, #16
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	bd80      	pop	{r7, pc}

0800d4e4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 800d4e4:	b580      	push	{r7, lr}
 800d4e6:	b086      	sub	sp, #24
 800d4e8:	af00      	add	r7, sp, #0
 800d4ea:	60f8      	str	r0, [r7, #12]
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	607a      	str	r2, [r7, #4]
 800d4f0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d4f8:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	781b      	ldrb	r3, [r3, #0]
 800d4fe:	2b25      	cmp	r3, #37	; 0x25
 800d500:	d06e      	beq.n	800d5e0 <SCSI_ProcessCmd+0xfc>
 800d502:	2b25      	cmp	r3, #37	; 0x25
 800d504:	dc11      	bgt.n	800d52a <SCSI_ProcessCmd+0x46>
 800d506:	2b1a      	cmp	r3, #26
 800d508:	d04f      	beq.n	800d5aa <SCSI_ProcessCmd+0xc6>
 800d50a:	2b1a      	cmp	r3, #26
 800d50c:	dc06      	bgt.n	800d51c <SCSI_ProcessCmd+0x38>
 800d50e:	2b03      	cmp	r3, #3
 800d510:	d027      	beq.n	800d562 <SCSI_ProcessCmd+0x7e>
 800d512:	2b12      	cmp	r3, #18
 800d514:	d02e      	beq.n	800d574 <SCSI_ProcessCmd+0x90>
 800d516:	2b00      	cmp	r3, #0
 800d518:	d01a      	beq.n	800d550 <SCSI_ProcessCmd+0x6c>
 800d51a:	e0a0      	b.n	800d65e <SCSI_ProcessCmd+0x17a>
 800d51c:	2b1e      	cmp	r3, #30
 800d51e:	d03b      	beq.n	800d598 <SCSI_ProcessCmd+0xb4>
 800d520:	2b23      	cmp	r3, #35	; 0x23
 800d522:	d054      	beq.n	800d5ce <SCSI_ProcessCmd+0xea>
 800d524:	2b1b      	cmp	r3, #27
 800d526:	d02e      	beq.n	800d586 <SCSI_ProcessCmd+0xa2>
 800d528:	e099      	b.n	800d65e <SCSI_ProcessCmd+0x17a>
 800d52a:	2b5a      	cmp	r3, #90	; 0x5a
 800d52c:	d046      	beq.n	800d5bc <SCSI_ProcessCmd+0xd8>
 800d52e:	2b5a      	cmp	r3, #90	; 0x5a
 800d530:	dc07      	bgt.n	800d542 <SCSI_ProcessCmd+0x5e>
 800d532:	2b2a      	cmp	r3, #42	; 0x2a
 800d534:	d078      	beq.n	800d628 <SCSI_ProcessCmd+0x144>
 800d536:	2b2f      	cmp	r3, #47	; 0x2f
 800d538:	f000 8088 	beq.w	800d64c <SCSI_ProcessCmd+0x168>
 800d53c:	2b28      	cmp	r3, #40	; 0x28
 800d53e:	d061      	beq.n	800d604 <SCSI_ProcessCmd+0x120>
 800d540:	e08d      	b.n	800d65e <SCSI_ProcessCmd+0x17a>
 800d542:	2ba8      	cmp	r3, #168	; 0xa8
 800d544:	d067      	beq.n	800d616 <SCSI_ProcessCmd+0x132>
 800d546:	2baa      	cmp	r3, #170	; 0xaa
 800d548:	d077      	beq.n	800d63a <SCSI_ProcessCmd+0x156>
 800d54a:	2b9e      	cmp	r3, #158	; 0x9e
 800d54c:	d051      	beq.n	800d5f2 <SCSI_ProcessCmd+0x10e>
 800d54e:	e086      	b.n	800d65e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 800d550:	7afb      	ldrb	r3, [r7, #11]
 800d552:	687a      	ldr	r2, [r7, #4]
 800d554:	4619      	mov	r1, r3
 800d556:	68f8      	ldr	r0, [r7, #12]
 800d558:	f000 f893 	bl	800d682 <SCSI_TestUnitReady>
 800d55c:	4603      	mov	r3, r0
 800d55e:	75fb      	strb	r3, [r7, #23]
    break;
 800d560:	e089      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 800d562:	7afb      	ldrb	r3, [r7, #11]
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	4619      	mov	r1, r3
 800d568:	68f8      	ldr	r0, [r7, #12]
 800d56a:	f000 fb0f 	bl	800db8c <SCSI_RequestSense>
 800d56e:	4603      	mov	r3, r0
 800d570:	75fb      	strb	r3, [r7, #23]
    break;
 800d572:	e080      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 800d574:	7afb      	ldrb	r3, [r7, #11]
 800d576:	687a      	ldr	r2, [r7, #4]
 800d578:	4619      	mov	r1, r3
 800d57a:	68f8      	ldr	r0, [r7, #12]
 800d57c:	f000 f8cc 	bl	800d718 <SCSI_Inquiry>
 800d580:	4603      	mov	r3, r0
 800d582:	75fb      	strb	r3, [r7, #23]
    break;
 800d584:	e077      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 800d586:	7afb      	ldrb	r3, [r7, #11]
 800d588:	687a      	ldr	r2, [r7, #4]
 800d58a:	4619      	mov	r1, r3
 800d58c:	68f8      	ldr	r0, [r7, #12]
 800d58e:	f000 fbb9 	bl	800dd04 <SCSI_StartStopUnit>
 800d592:	4603      	mov	r3, r0
 800d594:	75fb      	strb	r3, [r7, #23]
    break;
 800d596:	e06e      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 800d598:	7afb      	ldrb	r3, [r7, #11]
 800d59a:	687a      	ldr	r2, [r7, #4]
 800d59c:	4619      	mov	r1, r3
 800d59e:	68f8      	ldr	r0, [r7, #12]
 800d5a0:	f000 fbfb 	bl	800dd9a <SCSI_AllowPreventRemovable>
 800d5a4:	4603      	mov	r3, r0
 800d5a6:	75fb      	strb	r3, [r7, #23]
    break;
 800d5a8:	e065      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 800d5aa:	7afb      	ldrb	r3, [r7, #11]
 800d5ac:	687a      	ldr	r2, [r7, #4]
 800d5ae:	4619      	mov	r1, r3
 800d5b0:	68f8      	ldr	r0, [r7, #12]
 800d5b2:	f000 fa9f 	bl	800daf4 <SCSI_ModeSense6>
 800d5b6:	4603      	mov	r3, r0
 800d5b8:	75fb      	strb	r3, [r7, #23]
    break;
 800d5ba:	e05c      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 800d5bc:	7afb      	ldrb	r3, [r7, #11]
 800d5be:	687a      	ldr	r2, [r7, #4]
 800d5c0:	4619      	mov	r1, r3
 800d5c2:	68f8      	ldr	r0, [r7, #12]
 800d5c4:	f000 fabc 	bl	800db40 <SCSI_ModeSense10>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	75fb      	strb	r3, [r7, #23]
    break;
 800d5cc:	e053      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800d5ce:	7afb      	ldrb	r3, [r7, #11]
 800d5d0:	687a      	ldr	r2, [r7, #4]
 800d5d2:	4619      	mov	r1, r3
 800d5d4:	68f8      	ldr	r0, [r7, #12]
 800d5d6:	f000 fa20 	bl	800da1a <SCSI_ReadFormatCapacity>
 800d5da:	4603      	mov	r3, r0
 800d5dc:	75fb      	strb	r3, [r7, #23]
    break;
 800d5de:	e04a      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 800d5e0:	7afb      	ldrb	r3, [r7, #11]
 800d5e2:	687a      	ldr	r2, [r7, #4]
 800d5e4:	4619      	mov	r1, r3
 800d5e6:	68f8      	ldr	r0, [r7, #12]
 800d5e8:	f000 f904 	bl	800d7f4 <SCSI_ReadCapacity10>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	75fb      	strb	r3, [r7, #23]
    break;
 800d5f0:	e041      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 800d5f2:	7afb      	ldrb	r3, [r7, #11]
 800d5f4:	687a      	ldr	r2, [r7, #4]
 800d5f6:	4619      	mov	r1, r3
 800d5f8:	68f8      	ldr	r0, [r7, #12]
 800d5fa:	f000 f96a 	bl	800d8d2 <SCSI_ReadCapacity16>
 800d5fe:	4603      	mov	r3, r0
 800d600:	75fb      	strb	r3, [r7, #23]
    break;
 800d602:	e038      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 800d604:	7afb      	ldrb	r3, [r7, #11]
 800d606:	687a      	ldr	r2, [r7, #4]
 800d608:	4619      	mov	r1, r3
 800d60a:	68f8      	ldr	r0, [r7, #12]
 800d60c:	f000 fbe8 	bl	800dde0 <SCSI_Read10>
 800d610:	4603      	mov	r3, r0
 800d612:	75fb      	strb	r3, [r7, #23]
    break;
 800d614:	e02f      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 800d616:	7afb      	ldrb	r3, [r7, #11]
 800d618:	687a      	ldr	r2, [r7, #4]
 800d61a:	4619      	mov	r1, r3
 800d61c:	68f8      	ldr	r0, [r7, #12]
 800d61e:	f000 fc79 	bl	800df14 <SCSI_Read12>
 800d622:	4603      	mov	r3, r0
 800d624:	75fb      	strb	r3, [r7, #23]
    break;
 800d626:	e026      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 800d628:	7afb      	ldrb	r3, [r7, #11]
 800d62a:	687a      	ldr	r2, [r7, #4]
 800d62c:	4619      	mov	r1, r3
 800d62e:	68f8      	ldr	r0, [r7, #12]
 800d630:	f000 fd15 	bl	800e05e <SCSI_Write10>
 800d634:	4603      	mov	r3, r0
 800d636:	75fb      	strb	r3, [r7, #23]
    break;
 800d638:	e01d      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 800d63a:	7afb      	ldrb	r3, [r7, #11]
 800d63c:	687a      	ldr	r2, [r7, #4]
 800d63e:	4619      	mov	r1, r3
 800d640:	68f8      	ldr	r0, [r7, #12]
 800d642:	f000 fdcb 	bl	800e1dc <SCSI_Write12>
 800d646:	4603      	mov	r3, r0
 800d648:	75fb      	strb	r3, [r7, #23]
    break;
 800d64a:	e014      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 800d64c:	7afb      	ldrb	r3, [r7, #11]
 800d64e:	687a      	ldr	r2, [r7, #4]
 800d650:	4619      	mov	r1, r3
 800d652:	68f8      	ldr	r0, [r7, #12]
 800d654:	f000 fe91 	bl	800e37a <SCSI_Verify10>
 800d658:	4603      	mov	r3, r0
 800d65a:	75fb      	strb	r3, [r7, #23]
    break;
 800d65c:	e00b      	b.n	800d676 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 800d65e:	7af9      	ldrb	r1, [r7, #11]
 800d660:	2320      	movs	r3, #32
 800d662:	2205      	movs	r2, #5
 800d664:	68f8      	ldr	r0, [r7, #12]
 800d666:	f000 fb0a 	bl	800dc7e <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800d66a:	693b      	ldr	r3, [r7, #16]
 800d66c:	2202      	movs	r2, #2
 800d66e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 800d670:	23ff      	movs	r3, #255	; 0xff
 800d672:	75fb      	strb	r3, [r7, #23]
    break;
 800d674:	bf00      	nop
  }

  return ret;
 800d676:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800d67a:	4618      	mov	r0, r3
 800d67c:	3718      	adds	r7, #24
 800d67e:	46bd      	mov	sp, r7
 800d680:	bd80      	pop	{r7, pc}

0800d682 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d682:	b580      	push	{r7, lr}
 800d684:	b086      	sub	sp, #24
 800d686:	af00      	add	r7, sp, #0
 800d688:	60f8      	str	r0, [r7, #12]
 800d68a:	460b      	mov	r3, r1
 800d68c:	607a      	str	r2, [r7, #4]
 800d68e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d696:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 800d698:	697b      	ldr	r3, [r7, #20]
 800d69a:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d69e:	2b00      	cmp	r3, #0
 800d6a0:	d00a      	beq.n	800d6b8 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d6a2:	697b      	ldr	r3, [r7, #20]
 800d6a4:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d6a8:	2320      	movs	r3, #32
 800d6aa:	2205      	movs	r2, #5
 800d6ac:	68f8      	ldr	r0, [r7, #12]
 800d6ae:	f000 fae6 	bl	800dc7e <SCSI_SenseCode>

    return -1;
 800d6b2:	f04f 33ff 	mov.w	r3, #4294967295
 800d6b6:	e02a      	b.n	800d70e <SCSI_TestUnitReady+0x8c>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d10b      	bne.n	800d6da <SCSI_TestUnitReady+0x58>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d6c2:	7af9      	ldrb	r1, [r7, #11]
 800d6c4:	233a      	movs	r3, #58	; 0x3a
 800d6c6:	2202      	movs	r2, #2
 800d6c8:	68f8      	ldr	r0, [r7, #12]
 800d6ca:	f000 fad8 	bl	800dc7e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d6ce:	697b      	ldr	r3, [r7, #20]
 800d6d0:	2205      	movs	r2, #5
 800d6d2:	721a      	strb	r2, [r3, #8]
    return -1;
 800d6d4:	f04f 33ff 	mov.w	r3, #4294967295
 800d6d8:	e019      	b.n	800d70e <SCSI_TestUnitReady+0x8c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d6e0:	689b      	ldr	r3, [r3, #8]
 800d6e2:	7afa      	ldrb	r2, [r7, #11]
 800d6e4:	4610      	mov	r0, r2
 800d6e6:	4798      	blx	r3
 800d6e8:	4603      	mov	r3, r0
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d00b      	beq.n	800d706 <SCSI_TestUnitReady+0x84>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d6ee:	7af9      	ldrb	r1, [r7, #11]
 800d6f0:	233a      	movs	r3, #58	; 0x3a
 800d6f2:	2202      	movs	r2, #2
 800d6f4:	68f8      	ldr	r0, [r7, #12]
 800d6f6:	f000 fac2 	bl	800dc7e <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 800d6fa:	697b      	ldr	r3, [r7, #20]
 800d6fc:	2205      	movs	r2, #5
 800d6fe:	721a      	strb	r2, [r3, #8]

    return -1;
 800d700:	f04f 33ff 	mov.w	r3, #4294967295
 800d704:	e003      	b.n	800d70e <SCSI_TestUnitReady+0x8c>
  }
  hmsc->bot_data_length = 0U;
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	2200      	movs	r2, #0
 800d70a:	60da      	str	r2, [r3, #12]

  return 0;
 800d70c:	2300      	movs	r3, #0
}
 800d70e:	4618      	mov	r0, r3
 800d710:	3718      	adds	r7, #24
 800d712:	46bd      	mov	sp, r7
 800d714:	bd80      	pop	{r7, pc}
	...

0800d718 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d718:	b580      	push	{r7, lr}
 800d71a:	b088      	sub	sp, #32
 800d71c:	af00      	add	r7, sp, #0
 800d71e:	60f8      	str	r0, [r7, #12]
 800d720:	460b      	mov	r3, r1
 800d722:	607a      	str	r2, [r7, #4]
 800d724:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d726:	68fb      	ldr	r3, [r7, #12]
 800d728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d72c:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10a      	bne.n	800d74e <SCSI_Inquiry+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800d738:	69bb      	ldr	r3, [r7, #24]
 800d73a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d73e:	2320      	movs	r3, #32
 800d740:	2205      	movs	r2, #5
 800d742:	68f8      	ldr	r0, [r7, #12]
 800d744:	f000 fa9b 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800d748:	f04f 33ff 	mov.w	r3, #4294967295
 800d74c:	e04a      	b.n	800d7e4 <SCSI_Inquiry+0xcc>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	3301      	adds	r3, #1
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	f003 0301 	and.w	r3, r3, #1
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d020      	beq.n	800d79e <SCSI_Inquiry+0x86>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	3302      	adds	r3, #2
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d105      	bne.n	800d772 <SCSI_Inquiry+0x5a>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 800d766:	2206      	movs	r2, #6
 800d768:	4920      	ldr	r1, [pc, #128]	; (800d7ec <SCSI_Inquiry+0xd4>)
 800d76a:	69b8      	ldr	r0, [r7, #24]
 800d76c:	f000 ff50 	bl	800e610 <SCSI_UpdateBotData>
 800d770:	e037      	b.n	800d7e2 <SCSI_Inquiry+0xca>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3302      	adds	r3, #2
 800d776:	781b      	ldrb	r3, [r3, #0]
 800d778:	2b80      	cmp	r3, #128	; 0x80
 800d77a:	d105      	bne.n	800d788 <SCSI_Inquiry+0x70>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 800d77c:	2208      	movs	r2, #8
 800d77e:	491c      	ldr	r1, [pc, #112]	; (800d7f0 <SCSI_Inquiry+0xd8>)
 800d780:	69b8      	ldr	r0, [r7, #24]
 800d782:	f000 ff45 	bl	800e610 <SCSI_UpdateBotData>
 800d786:	e02c      	b.n	800d7e2 <SCSI_Inquiry+0xca>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800d78e:	2324      	movs	r3, #36	; 0x24
 800d790:	2205      	movs	r2, #5
 800d792:	68f8      	ldr	r0, [r7, #12]
 800d794:	f000 fa73 	bl	800dc7e <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 800d798:	f04f 33ff 	mov.w	r3, #4294967295
 800d79c:	e022      	b.n	800d7e4 <SCSI_Inquiry+0xcc>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d7a4:	69d9      	ldr	r1, [r3, #28]
 800d7a6:	7afa      	ldrb	r2, [r7, #11]
 800d7a8:	4613      	mov	r3, r2
 800d7aa:	00db      	lsls	r3, r3, #3
 800d7ac:	4413      	add	r3, r2
 800d7ae:	009b      	lsls	r3, r3, #2
 800d7b0:	440b      	add	r3, r1
 800d7b2:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 800d7b4:	697b      	ldr	r3, [r7, #20]
 800d7b6:	3304      	adds	r3, #4
 800d7b8:	781b      	ldrb	r3, [r3, #0]
 800d7ba:	b29b      	uxth	r3, r3
 800d7bc:	3305      	adds	r3, #5
 800d7be:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 800d7c0:	687b      	ldr	r3, [r7, #4]
 800d7c2:	3304      	adds	r3, #4
 800d7c4:	781b      	ldrb	r3, [r3, #0]
 800d7c6:	b29b      	uxth	r3, r3
 800d7c8:	8bfa      	ldrh	r2, [r7, #30]
 800d7ca:	429a      	cmp	r2, r3
 800d7cc:	d303      	bcc.n	800d7d6 <SCSI_Inquiry+0xbe>
    {
      len = params[4];
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	3304      	adds	r3, #4
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 800d7d6:	8bfb      	ldrh	r3, [r7, #30]
 800d7d8:	461a      	mov	r2, r3
 800d7da:	6979      	ldr	r1, [r7, #20]
 800d7dc:	69b8      	ldr	r0, [r7, #24]
 800d7de:	f000 ff17 	bl	800e610 <SCSI_UpdateBotData>
  }

  return 0;
 800d7e2:	2300      	movs	r3, #0
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3720      	adds	r7, #32
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}
 800d7ec:	240000b4 	.word	0x240000b4
 800d7f0:	240000bc 	.word	0x240000bc

0800d7f4 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d7f4:	b580      	push	{r7, lr}
 800d7f6:	b086      	sub	sp, #24
 800d7f8:	af00      	add	r7, sp, #0
 800d7fa:	60f8      	str	r0, [r7, #12]
 800d7fc:	460b      	mov	r3, r1
 800d7fe:	607a      	str	r2, [r7, #4]
 800d800:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d802:	68fb      	ldr	r3, [r7, #12]
 800d804:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d808:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d810:	685b      	ldr	r3, [r3, #4]
 800d812:	697a      	ldr	r2, [r7, #20]
 800d814:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d818:	697a      	ldr	r2, [r7, #20]
 800d81a:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d81e:	7af8      	ldrb	r0, [r7, #11]
 800d820:	4798      	blx	r3
 800d822:	4603      	mov	r3, r0
 800d824:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d826:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d104      	bne.n	800d838 <SCSI_ReadCapacity10+0x44>
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d834:	2b02      	cmp	r3, #2
 800d836:	d108      	bne.n	800d84a <SCSI_ReadCapacity10+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d838:	7af9      	ldrb	r1, [r7, #11]
 800d83a:	233a      	movs	r3, #58	; 0x3a
 800d83c:	2202      	movs	r2, #2
 800d83e:	68f8      	ldr	r0, [r7, #12]
 800d840:	f000 fa1d 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800d844:	f04f 33ff 	mov.w	r3, #4294967295
 800d848:	e03f      	b.n	800d8ca <SCSI_ReadCapacity10+0xd6>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d84a:	697b      	ldr	r3, [r7, #20]
 800d84c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d850:	3b01      	subs	r3, #1
 800d852:	0e1b      	lsrs	r3, r3, #24
 800d854:	b2da      	uxtb	r2, r3
 800d856:	697b      	ldr	r3, [r7, #20]
 800d858:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d860:	3b01      	subs	r3, #1
 800d862:	0c1b      	lsrs	r3, r3, #16
 800d864:	b2da      	uxtb	r2, r3
 800d866:	697b      	ldr	r3, [r7, #20]
 800d868:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d86a:	697b      	ldr	r3, [r7, #20]
 800d86c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d870:	3b01      	subs	r3, #1
 800d872:	0a1b      	lsrs	r3, r3, #8
 800d874:	b2da      	uxtb	r2, r3
 800d876:	697b      	ldr	r3, [r7, #20]
 800d878:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d87a:	697b      	ldr	r3, [r7, #20]
 800d87c:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d880:	b2db      	uxtb	r3, r3
 800d882:	3b01      	subs	r3, #1
 800d884:	b2da      	uxtb	r2, r3
 800d886:	697b      	ldr	r3, [r7, #20]
 800d888:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d88a:	697b      	ldr	r3, [r7, #20]
 800d88c:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d890:	161b      	asrs	r3, r3, #24
 800d892:	b2da      	uxtb	r2, r3
 800d894:	697b      	ldr	r3, [r7, #20]
 800d896:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d89e:	141b      	asrs	r3, r3, #16
 800d8a0:	b2da      	uxtb	r2, r3
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d8a6:	697b      	ldr	r3, [r7, #20]
 800d8a8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8ac:	0a1b      	lsrs	r3, r3, #8
 800d8ae:	b29b      	uxth	r3, r3
 800d8b0:	b2da      	uxtb	r2, r3
 800d8b2:	697b      	ldr	r3, [r7, #20]
 800d8b4:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d8bc:	b2da      	uxtb	r2, r3
 800d8be:	697b      	ldr	r3, [r7, #20]
 800d8c0:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 800d8c2:	697b      	ldr	r3, [r7, #20]
 800d8c4:	2208      	movs	r2, #8
 800d8c6:	60da      	str	r2, [r3, #12]

  return 0;
 800d8c8:	2300      	movs	r3, #0

}
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	3718      	adds	r7, #24
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	bd80      	pop	{r7, pc}

0800d8d2 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800d8d2:	b580      	push	{r7, lr}
 800d8d4:	b088      	sub	sp, #32
 800d8d6:	af00      	add	r7, sp, #0
 800d8d8:	60f8      	str	r0, [r7, #12]
 800d8da:	460b      	mov	r3, r1
 800d8dc:	607a      	str	r2, [r7, #4]
 800d8de:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800d8e0:	68fb      	ldr	r3, [r7, #12]
 800d8e2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800d8e6:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 800d8e8:	68fb      	ldr	r3, [r7, #12]
 800d8ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	69ba      	ldr	r2, [r7, #24]
 800d8f2:	f502 711a 	add.w	r1, r2, #616	; 0x268
 800d8f6:	69ba      	ldr	r2, [r7, #24]
 800d8f8:	f502 7219 	add.w	r2, r2, #612	; 0x264
 800d8fc:	7af8      	ldrb	r0, [r7, #11]
 800d8fe:	4798      	blx	r3
 800d900:	4603      	mov	r3, r0
 800d902:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800d904:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d104      	bne.n	800d916 <SCSI_ReadCapacity16+0x44>
 800d90c:	69bb      	ldr	r3, [r7, #24]
 800d90e:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800d912:	2b02      	cmp	r3, #2
 800d914:	d108      	bne.n	800d928 <SCSI_ReadCapacity16+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800d916:	7af9      	ldrb	r1, [r7, #11]
 800d918:	233a      	movs	r3, #58	; 0x3a
 800d91a:	2202      	movs	r2, #2
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f000 f9ae 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800d922:	f04f 33ff 	mov.w	r3, #4294967295
 800d926:	e074      	b.n	800da12 <SCSI_ReadCapacity16+0x140>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	330a      	adds	r3, #10
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	330b      	adds	r3, #11
 800d934:	781b      	ldrb	r3, [r3, #0]
 800d936:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d938:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	330c      	adds	r3, #12
 800d93e:	781b      	ldrb	r3, [r3, #0]
 800d940:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800d942:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800d944:	687a      	ldr	r2, [r7, #4]
 800d946:	320d      	adds	r2, #13
 800d948:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800d94a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d94c:	69bb      	ldr	r3, [r7, #24]
 800d94e:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d950:	2300      	movs	r3, #0
 800d952:	77fb      	strb	r3, [r7, #31]
 800d954:	e007      	b.n	800d966 <SCSI_ReadCapacity16+0x94>
  {
    hmsc->bot_data[idx] = 0U;
 800d956:	7ffb      	ldrb	r3, [r7, #31]
 800d958:	69ba      	ldr	r2, [r7, #24]
 800d95a:	4413      	add	r3, r2
 800d95c:	2200      	movs	r2, #0
 800d95e:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 800d960:	7ffb      	ldrb	r3, [r7, #31]
 800d962:	3301      	adds	r3, #1
 800d964:	77fb      	strb	r3, [r7, #31]
 800d966:	7ffa      	ldrb	r2, [r7, #31]
 800d968:	69bb      	ldr	r3, [r7, #24]
 800d96a:	68db      	ldr	r3, [r3, #12]
 800d96c:	429a      	cmp	r2, r3
 800d96e:	d3f2      	bcc.n	800d956 <SCSI_ReadCapacity16+0x84>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 800d970:	69bb      	ldr	r3, [r7, #24]
 800d972:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d976:	3b01      	subs	r3, #1
 800d978:	0e1b      	lsrs	r3, r3, #24
 800d97a:	b2da      	uxtb	r2, r3
 800d97c:	69bb      	ldr	r3, [r7, #24]
 800d97e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 800d980:	69bb      	ldr	r3, [r7, #24]
 800d982:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d986:	3b01      	subs	r3, #1
 800d988:	0c1b      	lsrs	r3, r3, #16
 800d98a:	b2da      	uxtb	r2, r3
 800d98c:	69bb      	ldr	r3, [r7, #24]
 800d98e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 800d990:	69bb      	ldr	r3, [r7, #24]
 800d992:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d996:	3b01      	subs	r3, #1
 800d998:	0a1b      	lsrs	r3, r3, #8
 800d99a:	b2da      	uxtb	r2, r3
 800d99c:	69bb      	ldr	r3, [r7, #24]
 800d99e:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 800d9a0:	69bb      	ldr	r3, [r7, #24]
 800d9a2:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800d9a6:	b2db      	uxtb	r3, r3
 800d9a8:	3b01      	subs	r3, #1
 800d9aa:	b2da      	uxtb	r2, r3
 800d9ac:	69bb      	ldr	r3, [r7, #24]
 800d9ae:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 800d9b0:	69bb      	ldr	r3, [r7, #24]
 800d9b2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9b6:	161b      	asrs	r3, r3, #24
 800d9b8:	b2da      	uxtb	r2, r3
 800d9ba:	69bb      	ldr	r3, [r7, #24]
 800d9bc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 800d9be:	69bb      	ldr	r3, [r7, #24]
 800d9c0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9c4:	141b      	asrs	r3, r3, #16
 800d9c6:	b2da      	uxtb	r2, r3
 800d9c8:	69bb      	ldr	r3, [r7, #24]
 800d9ca:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9d2:	0a1b      	lsrs	r3, r3, #8
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	69bb      	ldr	r3, [r7, #24]
 800d9da:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 800d9dc:	69bb      	ldr	r3, [r7, #24]
 800d9de:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800d9e2:	b2da      	uxtb	r2, r3
 800d9e4:	69bb      	ldr	r3, [r7, #24]
 800d9e6:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	330a      	adds	r3, #10
 800d9ec:	781b      	ldrb	r3, [r3, #0]
 800d9ee:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	330b      	adds	r3, #11
 800d9f4:	781b      	ldrb	r3, [r3, #0]
 800d9f6:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800d9f8:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	330c      	adds	r3, #12
 800d9fe:	781b      	ldrb	r3, [r3, #0]
 800da00:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 800da02:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	320d      	adds	r2, #13
 800da08:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 800da0a:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	60da      	str	r2, [r3, #12]

  return 0;
 800da10:	2300      	movs	r3, #0
}
 800da12:	4618      	mov	r0, r3
 800da14:	3720      	adds	r7, #32
 800da16:	46bd      	mov	sp, r7
 800da18:	bd80      	pop	{r7, pc}

0800da1a <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800da1a:	b580      	push	{r7, lr}
 800da1c:	b088      	sub	sp, #32
 800da1e:	af00      	add	r7, sp, #0
 800da20:	60f8      	str	r0, [r7, #12]
 800da22:	460b      	mov	r3, r1
 800da24:	607a      	str	r2, [r7, #4]
 800da26:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800da2e:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 800da30:	68fb      	ldr	r3, [r7, #12]
 800da32:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800da36:	685b      	ldr	r3, [r3, #4]
 800da38:	f107 0214 	add.w	r2, r7, #20
 800da3c:	f107 0110 	add.w	r1, r7, #16
 800da40:	7af8      	ldrb	r0, [r7, #11]
 800da42:	4798      	blx	r3
 800da44:	4603      	mov	r3, r0
 800da46:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 800da48:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d104      	bne.n	800da5a <SCSI_ReadFormatCapacity+0x40>
 800da50:	69bb      	ldr	r3, [r7, #24]
 800da52:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800da56:	2b02      	cmp	r3, #2
 800da58:	d108      	bne.n	800da6c <SCSI_ReadFormatCapacity+0x52>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800da5a:	7af9      	ldrb	r1, [r7, #11]
 800da5c:	233a      	movs	r3, #58	; 0x3a
 800da5e:	2202      	movs	r2, #2
 800da60:	68f8      	ldr	r0, [r7, #12]
 800da62:	f000 f90c 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800da66:	f04f 33ff 	mov.w	r3, #4294967295
 800da6a:	e03e      	b.n	800daea <SCSI_ReadFormatCapacity+0xd0>
  }

  for (i = 0U; i < 12U ; i++)
 800da6c:	2300      	movs	r3, #0
 800da6e:	83fb      	strh	r3, [r7, #30]
 800da70:	e007      	b.n	800da82 <SCSI_ReadFormatCapacity+0x68>
  {
    hmsc->bot_data[i] = 0U;
 800da72:	8bfb      	ldrh	r3, [r7, #30]
 800da74:	69ba      	ldr	r2, [r7, #24]
 800da76:	4413      	add	r3, r2
 800da78:	2200      	movs	r2, #0
 800da7a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 800da7c:	8bfb      	ldrh	r3, [r7, #30]
 800da7e:	3301      	adds	r3, #1
 800da80:	83fb      	strh	r3, [r7, #30]
 800da82:	8bfb      	ldrh	r3, [r7, #30]
 800da84:	2b0b      	cmp	r3, #11
 800da86:	d9f4      	bls.n	800da72 <SCSI_ReadFormatCapacity+0x58>
  }

  hmsc->bot_data[3] = 0x08U;
 800da88:	69bb      	ldr	r3, [r7, #24]
 800da8a:	2208      	movs	r2, #8
 800da8c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 800da8e:	693b      	ldr	r3, [r7, #16]
 800da90:	3b01      	subs	r3, #1
 800da92:	0e1b      	lsrs	r3, r3, #24
 800da94:	b2da      	uxtb	r2, r3
 800da96:	69bb      	ldr	r3, [r7, #24]
 800da98:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800da9a:	693b      	ldr	r3, [r7, #16]
 800da9c:	3b01      	subs	r3, #1
 800da9e:	0c1b      	lsrs	r3, r3, #16
 800daa0:	b2da      	uxtb	r2, r3
 800daa2:	69bb      	ldr	r3, [r7, #24]
 800daa4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800daa6:	693b      	ldr	r3, [r7, #16]
 800daa8:	3b01      	subs	r3, #1
 800daaa:	0a1b      	lsrs	r3, r3, #8
 800daac:	b2da      	uxtb	r2, r3
 800daae:	69bb      	ldr	r3, [r7, #24]
 800dab0:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 800dab2:	693b      	ldr	r3, [r7, #16]
 800dab4:	b2db      	uxtb	r3, r3
 800dab6:	3b01      	subs	r3, #1
 800dab8:	b2da      	uxtb	r2, r3
 800daba:	69bb      	ldr	r3, [r7, #24]
 800dabc:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 800dabe:	69bb      	ldr	r3, [r7, #24]
 800dac0:	2202      	movs	r2, #2
 800dac2:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 800dac4:	8abb      	ldrh	r3, [r7, #20]
 800dac6:	141b      	asrs	r3, r3, #16
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 800dace:	8abb      	ldrh	r3, [r7, #20]
 800dad0:	0a1b      	lsrs	r3, r3, #8
 800dad2:	b29b      	uxth	r3, r3
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	69bb      	ldr	r3, [r7, #24]
 800dad8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 800dada:	8abb      	ldrh	r3, [r7, #20]
 800dadc:	b2da      	uxtb	r2, r3
 800dade:	69bb      	ldr	r3, [r7, #24]
 800dae0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 800dae2:	69bb      	ldr	r3, [r7, #24]
 800dae4:	220c      	movs	r2, #12
 800dae6:	60da      	str	r2, [r3, #12]

  return 0;
 800dae8:	2300      	movs	r3, #0
}
 800daea:	4618      	mov	r0, r3
 800daec:	3720      	adds	r7, #32
 800daee:	46bd      	mov	sp, r7
 800daf0:	bd80      	pop	{r7, pc}
	...

0800daf4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b086      	sub	sp, #24
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	60f8      	str	r0, [r7, #12]
 800dafc:	460b      	mov	r3, r1
 800dafe:	607a      	str	r2, [r7, #4]
 800db00:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db08:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 800db0a:	2317      	movs	r3, #23
 800db0c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	3304      	adds	r3, #4
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	b29b      	uxth	r3, r3
 800db16:	8afa      	ldrh	r2, [r7, #22]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d303      	bcc.n	800db24 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	3304      	adds	r3, #4
 800db20:	781b      	ldrb	r3, [r3, #0]
 800db22:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 800db24:	8afb      	ldrh	r3, [r7, #22]
 800db26:	461a      	mov	r2, r3
 800db28:	4904      	ldr	r1, [pc, #16]	; (800db3c <SCSI_ModeSense6+0x48>)
 800db2a:	6938      	ldr	r0, [r7, #16]
 800db2c:	f000 fd70 	bl	800e610 <SCSI_UpdateBotData>

  return 0;
 800db30:	2300      	movs	r3, #0
}
 800db32:	4618      	mov	r0, r3
 800db34:	3718      	adds	r7, #24
 800db36:	46bd      	mov	sp, r7
 800db38:	bd80      	pop	{r7, pc}
 800db3a:	bf00      	nop
 800db3c:	240000c4 	.word	0x240000c4

0800db40 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	460b      	mov	r3, r1
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800db54:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 800db56:	231b      	movs	r3, #27
 800db58:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	3308      	adds	r3, #8
 800db5e:	781b      	ldrb	r3, [r3, #0]
 800db60:	b29b      	uxth	r3, r3
 800db62:	8afa      	ldrh	r2, [r7, #22]
 800db64:	429a      	cmp	r2, r3
 800db66:	d303      	bcc.n	800db70 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	3308      	adds	r3, #8
 800db6c:	781b      	ldrb	r3, [r3, #0]
 800db6e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 800db70:	8afb      	ldrh	r3, [r7, #22]
 800db72:	461a      	mov	r2, r3
 800db74:	4904      	ldr	r1, [pc, #16]	; (800db88 <SCSI_ModeSense10+0x48>)
 800db76:	6938      	ldr	r0, [r7, #16]
 800db78:	f000 fd4a 	bl	800e610 <SCSI_UpdateBotData>

  return 0;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}
 800db86:	bf00      	nop
 800db88:	240000dc 	.word	0x240000dc

0800db8c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800db8c:	b580      	push	{r7, lr}
 800db8e:	b086      	sub	sp, #24
 800db90:	af00      	add	r7, sp, #0
 800db92:	60f8      	str	r0, [r7, #12]
 800db94:	460b      	mov	r3, r1
 800db96:	607a      	str	r2, [r7, #4]
 800db98:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800db9a:	68fb      	ldr	r3, [r7, #12]
 800db9c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dba0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 800dba2:	693b      	ldr	r3, [r7, #16]
 800dba4:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d10a      	bne.n	800dbc2 <SCSI_RequestSense+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dbac:	693b      	ldr	r3, [r7, #16]
 800dbae:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dbb2:	2320      	movs	r3, #32
 800dbb4:	2205      	movs	r2, #5
 800dbb6:	68f8      	ldr	r0, [r7, #12]
 800dbb8:	f000 f861 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800dbbc:	f04f 33ff 	mov.w	r3, #4294967295
 800dbc0:	e059      	b.n	800dc76 <SCSI_RequestSense+0xea>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	75fb      	strb	r3, [r7, #23]
 800dbc6:	e007      	b.n	800dbd8 <SCSI_RequestSense+0x4c>
  {
    hmsc->bot_data[i] = 0U;
 800dbc8:	7dfb      	ldrb	r3, [r7, #23]
 800dbca:	693a      	ldr	r2, [r7, #16]
 800dbcc:	4413      	add	r3, r2
 800dbce:	2200      	movs	r2, #0
 800dbd0:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 800dbd2:	7dfb      	ldrb	r3, [r7, #23]
 800dbd4:	3301      	adds	r3, #1
 800dbd6:	75fb      	strb	r3, [r7, #23]
 800dbd8:	7dfb      	ldrb	r3, [r7, #23]
 800dbda:	2b11      	cmp	r3, #17
 800dbdc:	d9f4      	bls.n	800dbc8 <SCSI_RequestSense+0x3c>
  }

  hmsc->bot_data[0] = 0x70U;
 800dbde:	693b      	ldr	r3, [r7, #16]
 800dbe0:	2270      	movs	r2, #112	; 0x70
 800dbe2:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	220c      	movs	r2, #12
 800dbe8:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 800dbea:	693b      	ldr	r3, [r7, #16]
 800dbec:	f893 2260 	ldrb.w	r2, [r3, #608]	; 0x260
 800dbf0:	693b      	ldr	r3, [r7, #16]
 800dbf2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dbf6:	429a      	cmp	r2, r3
 800dbf8:	d02e      	beq.n	800dc58 <SCSI_RequestSense+0xcc>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 800dbfa:	693b      	ldr	r3, [r7, #16]
 800dbfc:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc00:	461a      	mov	r2, r3
 800dc02:	693b      	ldr	r3, [r7, #16]
 800dc04:	3248      	adds	r2, #72	; 0x48
 800dc06:	f813 2032 	ldrb.w	r2, [r3, r2, lsl #3]
 800dc0a:	693b      	ldr	r3, [r7, #16]
 800dc0c:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 800dc0e:	693b      	ldr	r3, [r7, #16]
 800dc10:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc14:	693a      	ldr	r2, [r7, #16]
 800dc16:	3348      	adds	r3, #72	; 0x48
 800dc18:	00db      	lsls	r3, r3, #3
 800dc1a:	4413      	add	r3, r2
 800dc1c:	791a      	ldrb	r2, [r3, #4]
 800dc1e:	693b      	ldr	r3, [r7, #16]
 800dc20:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc28:	693a      	ldr	r2, [r7, #16]
 800dc2a:	3348      	adds	r3, #72	; 0x48
 800dc2c:	00db      	lsls	r3, r3, #3
 800dc2e:	4413      	add	r3, r2
 800dc30:	795a      	ldrb	r2, [r3, #5]
 800dc32:	693b      	ldr	r3, [r7, #16]
 800dc34:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 800dc36:	693b      	ldr	r3, [r7, #16]
 800dc38:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc3c:	3301      	adds	r3, #1
 800dc3e:	b2da      	uxtb	r2, r3
 800dc40:	693b      	ldr	r3, [r7, #16]
 800dc42:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	f893 3260 	ldrb.w	r3, [r3, #608]	; 0x260
 800dc4c:	2b04      	cmp	r3, #4
 800dc4e:	d103      	bne.n	800dc58 <SCSI_RequestSense+0xcc>
    {
      hmsc->scsi_sense_head = 0U;
 800dc50:	693b      	ldr	r3, [r7, #16]
 800dc52:	2200      	movs	r2, #0
 800dc54:	f883 2260 	strb.w	r2, [r3, #608]	; 0x260
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 800dc58:	693b      	ldr	r3, [r7, #16]
 800dc5a:	2212      	movs	r2, #18
 800dc5c:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	3304      	adds	r3, #4
 800dc62:	781b      	ldrb	r3, [r3, #0]
 800dc64:	2b12      	cmp	r3, #18
 800dc66:	d805      	bhi.n	800dc74 <SCSI_RequestSense+0xe8>
  {
    hmsc->bot_data_length = params[4];
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	3304      	adds	r3, #4
 800dc6c:	781b      	ldrb	r3, [r3, #0]
 800dc6e:	461a      	mov	r2, r3
 800dc70:	693b      	ldr	r3, [r7, #16]
 800dc72:	60da      	str	r2, [r3, #12]
  }

  return 0;
 800dc74:	2300      	movs	r3, #0
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3718      	adds	r7, #24
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 800dc7e:	b480      	push	{r7}
 800dc80:	b085      	sub	sp, #20
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	6078      	str	r0, [r7, #4]
 800dc86:	4608      	mov	r0, r1
 800dc88:	4611      	mov	r1, r2
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	4603      	mov	r3, r0
 800dc8e:	70fb      	strb	r3, [r7, #3]
 800dc90:	460b      	mov	r3, r1
 800dc92:	70bb      	strb	r3, [r7, #2]
 800dc94:	4613      	mov	r3, r2
 800dc96:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dc9e:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dca6:	461a      	mov	r2, r3
 800dca8:	68fb      	ldr	r3, [r7, #12]
 800dcaa:	3248      	adds	r2, #72	; 0x48
 800dcac:	78b9      	ldrb	r1, [r7, #2]
 800dcae:	f803 1032 	strb.w	r1, [r3, r2, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcb8:	68fa      	ldr	r2, [r7, #12]
 800dcba:	3348      	adds	r3, #72	; 0x48
 800dcbc:	00db      	lsls	r3, r3, #3
 800dcbe:	4413      	add	r3, r2
 800dcc0:	787a      	ldrb	r2, [r7, #1]
 800dcc2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcca:	68fa      	ldr	r2, [r7, #12]
 800dccc:	3348      	adds	r3, #72	; 0x48
 800dcce:	00db      	lsls	r3, r3, #3
 800dcd0:	4413      	add	r3, r2
 800dcd2:	2200      	movs	r2, #0
 800dcd4:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcdc:	3301      	adds	r3, #1
 800dcde:	b2da      	uxtb	r2, r3
 800dce0:	68fb      	ldr	r3, [r7, #12]
 800dce2:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f893 3261 	ldrb.w	r3, [r3, #609]	; 0x261
 800dcec:	2b04      	cmp	r3, #4
 800dcee:	d103      	bne.n	800dcf8 <SCSI_SenseCode+0x7a>
  {
    hmsc->scsi_sense_tail = 0U;
 800dcf0:	68fb      	ldr	r3, [r7, #12]
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	f883 2261 	strb.w	r2, [r3, #609]	; 0x261
  }
}
 800dcf8:	bf00      	nop
 800dcfa:	3714      	adds	r7, #20
 800dcfc:	46bd      	mov	sp, r7
 800dcfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd02:	4770      	bx	lr

0800dd04 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd04:	b580      	push	{r7, lr}
 800dd06:	b086      	sub	sp, #24
 800dd08:	af00      	add	r7, sp, #0
 800dd0a:	60f8      	str	r0, [r7, #12]
 800dd0c:	460b      	mov	r3, r1
 800dd0e:	607a      	str	r2, [r7, #4]
 800dd10:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800dd18:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 800dd1a:	697b      	ldr	r3, [r7, #20]
 800dd1c:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800dd20:	2b01      	cmp	r3, #1
 800dd22:	d10f      	bne.n	800dd44 <SCSI_StartStopUnit+0x40>
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	3304      	adds	r3, #4
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	f003 0303 	and.w	r3, r3, #3
 800dd2e:	2b02      	cmp	r3, #2
 800dd30:	d108      	bne.n	800dd44 <SCSI_StartStopUnit+0x40>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800dd32:	7af9      	ldrb	r1, [r7, #11]
 800dd34:	2324      	movs	r3, #36	; 0x24
 800dd36:	2205      	movs	r2, #5
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ffa0 	bl	800dc7e <SCSI_SenseCode>

    return -1;
 800dd3e:	f04f 33ff 	mov.w	r3, #4294967295
 800dd42:	e026      	b.n	800dd92 <SCSI_StartStopUnit+0x8e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	3304      	adds	r3, #4
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	f003 0303 	and.w	r3, r3, #3
 800dd4e:	2b01      	cmp	r3, #1
 800dd50:	d104      	bne.n	800dd5c <SCSI_StartStopUnit+0x58>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd52:	697b      	ldr	r3, [r7, #20]
 800dd54:	2200      	movs	r2, #0
 800dd56:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dd5a:	e016      	b.n	800dd8a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	3304      	adds	r3, #4
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	f003 0303 	and.w	r3, r3, #3
 800dd66:	2b02      	cmp	r3, #2
 800dd68:	d104      	bne.n	800dd74 <SCSI_StartStopUnit+0x70>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	2202      	movs	r2, #2
 800dd6e:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800dd72:	e00a      	b.n	800dd8a <SCSI_StartStopUnit+0x86>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	3304      	adds	r3, #4
 800dd78:	781b      	ldrb	r3, [r3, #0]
 800dd7a:	f003 0303 	and.w	r3, r3, #3
 800dd7e:	2b03      	cmp	r3, #3
 800dd80:	d103      	bne.n	800dd8a <SCSI_StartStopUnit+0x86>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800dd82:	697b      	ldr	r3, [r7, #20]
 800dd84:	2200      	movs	r2, #0
 800dd86:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 800dd8a:	697b      	ldr	r3, [r7, #20]
 800dd8c:	2200      	movs	r2, #0
 800dd8e:	60da      	str	r2, [r3, #12]

  return 0;
 800dd90:	2300      	movs	r3, #0
}
 800dd92:	4618      	mov	r0, r3
 800dd94:	3718      	adds	r7, #24
 800dd96:	46bd      	mov	sp, r7
 800dd98:	bd80      	pop	{r7, pc}

0800dd9a <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dd9a:	b480      	push	{r7}
 800dd9c:	b087      	sub	sp, #28
 800dd9e:	af00      	add	r7, sp, #0
 800dda0:	60f8      	str	r0, [r7, #12]
 800dda2:	460b      	mov	r3, r1
 800dda4:	607a      	str	r2, [r7, #4]
 800dda6:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddae:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	3304      	adds	r3, #4
 800ddb4:	781b      	ldrb	r3, [r3, #0]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d104      	bne.n	800ddc4 <SCSI_AllowPreventRemovable+0x2a>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	2200      	movs	r2, #0
 800ddbe:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
 800ddc2:	e003      	b.n	800ddcc <SCSI_AllowPreventRemovable+0x32>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	2201      	movs	r2, #1
 800ddc8:	f883 2262 	strb.w	r2, [r3, #610]	; 0x262
  }

  hmsc->bot_data_length = 0U;
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2200      	movs	r2, #0
 800ddd0:	60da      	str	r2, [r3, #12]

  return 0;
 800ddd2:	2300      	movs	r3, #0
}
 800ddd4:	4618      	mov	r0, r3
 800ddd6:	371c      	adds	r7, #28
 800ddd8:	46bd      	mov	sp, r7
 800ddda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddde:	4770      	bx	lr

0800dde0 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800dde0:	b580      	push	{r7, lr}
 800dde2:	b086      	sub	sp, #24
 800dde4:	af00      	add	r7, sp, #0
 800dde6:	60f8      	str	r0, [r7, #12]
 800dde8:	460b      	mov	r3, r1
 800ddea:	607a      	str	r2, [r7, #4]
 800ddec:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ddf4:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800ddf6:	697b      	ldr	r3, [r7, #20]
 800ddf8:	7a1b      	ldrb	r3, [r3, #8]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d17c      	bne.n	800def8 <SCSI_Read10+0x118>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800ddfe:	697b      	ldr	r3, [r7, #20]
 800de00:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800de04:	b25b      	sxtb	r3, r3
 800de06:	2b00      	cmp	r3, #0
 800de08:	db0a      	blt.n	800de20 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800de0a:	697b      	ldr	r3, [r7, #20]
 800de0c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800de10:	2320      	movs	r3, #32
 800de12:	2205      	movs	r2, #5
 800de14:	68f8      	ldr	r0, [r7, #12]
 800de16:	f7ff ff32 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800de1a:	f04f 33ff 	mov.w	r3, #4294967295
 800de1e:	e075      	b.n	800df0c <SCSI_Read10+0x12c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800de20:	697b      	ldr	r3, [r7, #20]
 800de22:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800de26:	2b02      	cmp	r3, #2
 800de28:	d108      	bne.n	800de3c <SCSI_Read10+0x5c>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800de2a:	7af9      	ldrb	r1, [r7, #11]
 800de2c:	233a      	movs	r3, #58	; 0x3a
 800de2e:	2202      	movs	r2, #2
 800de30:	68f8      	ldr	r0, [r7, #12]
 800de32:	f7ff ff24 	bl	800dc7e <SCSI_SenseCode>

      return -1;
 800de36:	f04f 33ff 	mov.w	r3, #4294967295
 800de3a:	e067      	b.n	800df0c <SCSI_Read10+0x12c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800de3c:	68fb      	ldr	r3, [r7, #12]
 800de3e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800de42:	689b      	ldr	r3, [r3, #8]
 800de44:	7afa      	ldrb	r2, [r7, #11]
 800de46:	4610      	mov	r0, r2
 800de48:	4798      	blx	r3
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	d008      	beq.n	800de62 <SCSI_Read10+0x82>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800de50:	7af9      	ldrb	r1, [r7, #11]
 800de52:	233a      	movs	r3, #58	; 0x3a
 800de54:	2202      	movs	r2, #2
 800de56:	68f8      	ldr	r0, [r7, #12]
 800de58:	f7ff ff11 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800de5c:	f04f 33ff 	mov.w	r3, #4294967295
 800de60:	e054      	b.n	800df0c <SCSI_Read10+0x12c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	3302      	adds	r3, #2
 800de66:	781b      	ldrb	r3, [r3, #0]
 800de68:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	3303      	adds	r3, #3
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800de72:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	3304      	adds	r3, #4
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800de7c:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	3205      	adds	r2, #5
 800de82:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800de84:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800de86:	697b      	ldr	r3, [r7, #20]
 800de88:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	3307      	adds	r3, #7
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	021b      	lsls	r3, r3, #8
 800de94:	687a      	ldr	r2, [r7, #4]
 800de96:	3208      	adds	r2, #8
 800de98:	7812      	ldrb	r2, [r2, #0]
 800de9a:	431a      	orrs	r2, r3
 800de9c:	697b      	ldr	r3, [r7, #20]
 800de9e:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800dea2:	697b      	ldr	r3, [r7, #20]
 800dea4:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800dea8:	697b      	ldr	r3, [r7, #20]
 800deaa:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800deae:	7af9      	ldrb	r1, [r7, #11]
 800deb0:	68f8      	ldr	r0, [r7, #12]
 800deb2:	f000 fa95 	bl	800e3e0 <SCSI_CheckAddressRange>
 800deb6:	4603      	mov	r3, r0
 800deb8:	2b00      	cmp	r3, #0
 800deba:	da02      	bge.n	800dec2 <SCSI_Read10+0xe2>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800debc:	f04f 33ff 	mov.w	r3, #4294967295
 800dec0:	e024      	b.n	800df0c <SCSI_Read10+0x12c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800dec2:	697b      	ldr	r3, [r7, #20]
 800dec4:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800dec8:	697b      	ldr	r3, [r7, #20]
 800deca:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dece:	6979      	ldr	r1, [r7, #20]
 800ded0:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800ded4:	fb01 f303 	mul.w	r3, r1, r3
 800ded8:	429a      	cmp	r2, r3
 800deda:	d00a      	beq.n	800def2 <SCSI_Read10+0x112>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800dedc:	697b      	ldr	r3, [r7, #20]
 800dede:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800dee2:	2320      	movs	r3, #32
 800dee4:	2205      	movs	r2, #5
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f7ff fec9 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800deec:	f04f 33ff 	mov.w	r3, #4294967295
 800def0:	e00c      	b.n	800df0c <SCSI_Read10+0x12c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800def2:	697b      	ldr	r3, [r7, #20]
 800def4:	2202      	movs	r2, #2
 800def6:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800def8:	697b      	ldr	r3, [r7, #20]
 800defa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800defe:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800df00:	7afb      	ldrb	r3, [r7, #11]
 800df02:	4619      	mov	r1, r3
 800df04:	68f8      	ldr	r0, [r7, #12]
 800df06:	f000 fa8d 	bl	800e424 <SCSI_ProcessRead>
 800df0a:	4603      	mov	r3, r0
}
 800df0c:	4618      	mov	r0, r3
 800df0e:	3718      	adds	r7, #24
 800df10:	46bd      	mov	sp, r7
 800df12:	bd80      	pop	{r7, pc}

0800df14 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800df14:	b580      	push	{r7, lr}
 800df16:	b086      	sub	sp, #24
 800df18:	af00      	add	r7, sp, #0
 800df1a:	60f8      	str	r0, [r7, #12]
 800df1c:	460b      	mov	r3, r1
 800df1e:	607a      	str	r2, [r7, #4]
 800df20:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800df28:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800df2a:	697b      	ldr	r3, [r7, #20]
 800df2c:	7a1b      	ldrb	r3, [r3, #8]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	f040 8087 	bne.w	800e042 <SCSI_Read12+0x12e>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800df3a:	b25b      	sxtb	r3, r3
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	db0a      	blt.n	800df56 <SCSI_Read12+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800df40:	697b      	ldr	r3, [r7, #20]
 800df42:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800df46:	2320      	movs	r3, #32
 800df48:	2205      	movs	r2, #5
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f7ff fe97 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800df50:	f04f 33ff 	mov.w	r3, #4294967295
 800df54:	e07f      	b.n	800e056 <SCSI_Read12+0x142>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	f893 3262 	ldrb.w	r3, [r3, #610]	; 0x262
 800df5c:	2b02      	cmp	r3, #2
 800df5e:	d108      	bne.n	800df72 <SCSI_Read12+0x5e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df60:	7af9      	ldrb	r1, [r7, #11]
 800df62:	233a      	movs	r3, #58	; 0x3a
 800df64:	2202      	movs	r2, #2
 800df66:	68f8      	ldr	r0, [r7, #12]
 800df68:	f7ff fe89 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800df6c:	f04f 33ff 	mov.w	r3, #4294967295
 800df70:	e071      	b.n	800e056 <SCSI_Read12+0x142>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800df72:	68fb      	ldr	r3, [r7, #12]
 800df74:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800df78:	689b      	ldr	r3, [r3, #8]
 800df7a:	7afa      	ldrb	r2, [r7, #11]
 800df7c:	4610      	mov	r0, r2
 800df7e:	4798      	blx	r3
 800df80:	4603      	mov	r3, r0
 800df82:	2b00      	cmp	r3, #0
 800df84:	d008      	beq.n	800df98 <SCSI_Read12+0x84>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800df86:	7af9      	ldrb	r1, [r7, #11]
 800df88:	233a      	movs	r3, #58	; 0x3a
 800df8a:	2202      	movs	r2, #2
 800df8c:	68f8      	ldr	r0, [r7, #12]
 800df8e:	f7ff fe76 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800df92:	f04f 33ff 	mov.w	r3, #4294967295
 800df96:	e05e      	b.n	800e056 <SCSI_Read12+0x142>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	3302      	adds	r3, #2
 800df9c:	781b      	ldrb	r3, [r3, #0]
 800df9e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	3303      	adds	r3, #3
 800dfa4:	781b      	ldrb	r3, [r3, #0]
 800dfa6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfa8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	3304      	adds	r3, #4
 800dfae:	781b      	ldrb	r3, [r3, #0]
 800dfb0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800dfb2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	3205      	adds	r2, #5
 800dfb8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 800dfba:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	3306      	adds	r3, #6
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3307      	adds	r3, #7
 800dfce:	781b      	ldrb	r3, [r3, #0]
 800dfd0:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dfd2:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	3308      	adds	r3, #8
 800dfd8:	781b      	ldrb	r3, [r3, #0]
 800dfda:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800dfdc:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800dfde:	687a      	ldr	r2, [r7, #4]
 800dfe0:	3209      	adds	r2, #9
 800dfe2:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800dfe4:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800dfe6:	697b      	ldr	r3, [r7, #20]
 800dfe8:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800dfec:	697b      	ldr	r3, [r7, #20]
 800dfee:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800dff2:	697b      	ldr	r3, [r7, #20]
 800dff4:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800dff8:	7af9      	ldrb	r1, [r7, #11]
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f9f0 	bl	800e3e0 <SCSI_CheckAddressRange>
 800e000:	4603      	mov	r3, r0
 800e002:	2b00      	cmp	r3, #0
 800e004:	da02      	bge.n	800e00c <SCSI_Read12+0xf8>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e006:	f04f 33ff 	mov.w	r3, #4294967295
 800e00a:	e024      	b.n	800e056 <SCSI_Read12+0x142>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 800e00c:	697b      	ldr	r3, [r7, #20]
 800e00e:	f8d3 2218 	ldr.w	r2, [r3, #536]	; 0x218
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e018:	6979      	ldr	r1, [r7, #20]
 800e01a:	f8b1 1264 	ldrh.w	r1, [r1, #612]	; 0x264
 800e01e:	fb01 f303 	mul.w	r3, r1, r3
 800e022:	429a      	cmp	r2, r3
 800e024:	d00a      	beq.n	800e03c <SCSI_Read12+0x128>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e02c:	2320      	movs	r3, #32
 800e02e:	2205      	movs	r2, #5
 800e030:	68f8      	ldr	r0, [r7, #12]
 800e032:	f7ff fe24 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e036:	f04f 33ff 	mov.w	r3, #4294967295
 800e03a:	e00c      	b.n	800e056 <SCSI_Read12+0x142>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 800e03c:	697b      	ldr	r3, [r7, #20]
 800e03e:	2202      	movs	r2, #2
 800e040:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 800e042:	697b      	ldr	r3, [r7, #20]
 800e044:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e048:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 800e04a:	7afb      	ldrb	r3, [r7, #11]
 800e04c:	4619      	mov	r1, r3
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f000 f9e8 	bl	800e424 <SCSI_ProcessRead>
 800e054:	4603      	mov	r3, r0
}
 800e056:	4618      	mov	r0, r3
 800e058:	3718      	adds	r7, #24
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}

0800e05e <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e05e:	b580      	push	{r7, lr}
 800e060:	b086      	sub	sp, #24
 800e062:	af00      	add	r7, sp, #0
 800e064:	60f8      	str	r0, [r7, #12]
 800e066:	460b      	mov	r3, r1
 800e068:	607a      	str	r2, [r7, #4]
 800e06a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e06c:	68fb      	ldr	r3, [r7, #12]
 800e06e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e072:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e074:	697b      	ldr	r3, [r7, #20]
 800e076:	7a1b      	ldrb	r3, [r3, #8]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	f040 80a5 	bne.w	800e1c8 <SCSI_Write10+0x16a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e07e:	697b      	ldr	r3, [r7, #20]
 800e080:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e084:	2b00      	cmp	r3, #0
 800e086:	d10a      	bne.n	800e09e <SCSI_Write10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e088:	697b      	ldr	r3, [r7, #20]
 800e08a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e08e:	2320      	movs	r3, #32
 800e090:	2205      	movs	r2, #5
 800e092:	68f8      	ldr	r0, [r7, #12]
 800e094:	f7ff fdf3 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e098:	f04f 33ff 	mov.w	r3, #4294967295
 800e09c:	e09a      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e09e:	697b      	ldr	r3, [r7, #20]
 800e0a0:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e0a4:	b25b      	sxtb	r3, r3
 800e0a6:	2b00      	cmp	r3, #0
 800e0a8:	da0a      	bge.n	800e0c0 <SCSI_Write10+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e0aa:	697b      	ldr	r3, [r7, #20]
 800e0ac:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e0b0:	2320      	movs	r3, #32
 800e0b2:	2205      	movs	r2, #5
 800e0b4:	68f8      	ldr	r0, [r7, #12]
 800e0b6:	f7ff fde2 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e0ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e0be:	e089      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0c6:	689b      	ldr	r3, [r3, #8]
 800e0c8:	7afa      	ldrb	r2, [r7, #11]
 800e0ca:	4610      	mov	r0, r2
 800e0cc:	4798      	blx	r3
 800e0ce:	4603      	mov	r3, r0
 800e0d0:	2b00      	cmp	r3, #0
 800e0d2:	d008      	beq.n	800e0e6 <SCSI_Write10+0x88>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e0d4:	7af9      	ldrb	r1, [r7, #11]
 800e0d6:	233a      	movs	r3, #58	; 0x3a
 800e0d8:	2202      	movs	r2, #2
 800e0da:	68f8      	ldr	r0, [r7, #12]
 800e0dc:	f7ff fdcf 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e0e0:	f04f 33ff 	mov.w	r3, #4294967295
 800e0e4:	e076      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e0e6:	68fb      	ldr	r3, [r7, #12]
 800e0e8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e0ec:	68db      	ldr	r3, [r3, #12]
 800e0ee:	7afa      	ldrb	r2, [r7, #11]
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d008      	beq.n	800e10c <SCSI_Write10+0xae>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e0fa:	7af9      	ldrb	r1, [r7, #11]
 800e0fc:	2327      	movs	r3, #39	; 0x27
 800e0fe:	2202      	movs	r2, #2
 800e100:	68f8      	ldr	r0, [r7, #12]
 800e102:	f7ff fdbc 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e106:	f04f 33ff 	mov.w	r3, #4294967295
 800e10a:	e063      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	3302      	adds	r3, #2
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	3303      	adds	r3, #3
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e11c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	3304      	adds	r3, #4
 800e122:	781b      	ldrb	r3, [r3, #0]
 800e124:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e126:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e128:	687a      	ldr	r2, [r7, #4]
 800e12a:	3205      	adds	r2, #5
 800e12c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e12e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e130:	697b      	ldr	r3, [r7, #20]
 800e132:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	3307      	adds	r3, #7
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 800e13e:	687a      	ldr	r2, [r7, #4]
 800e140:	3208      	adds	r2, #8
 800e142:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 800e144:	431a      	orrs	r2, r3
 800e146:	697b      	ldr	r3, [r7, #20]
 800e148:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e14c:	697b      	ldr	r3, [r7, #20]
 800e14e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e152:	697b      	ldr	r3, [r7, #20]
 800e154:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e158:	7af9      	ldrb	r1, [r7, #11]
 800e15a:	68f8      	ldr	r0, [r7, #12]
 800e15c:	f000 f940 	bl	800e3e0 <SCSI_CheckAddressRange>
 800e160:	4603      	mov	r3, r0
 800e162:	2b00      	cmp	r3, #0
 800e164:	da02      	bge.n	800e16c <SCSI_Write10+0x10e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e166:	f04f 33ff 	mov.w	r3, #4294967295
 800e16a:	e033      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e172:	697a      	ldr	r2, [r7, #20]
 800e174:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e178:	fb02 f303 	mul.w	r3, r2, r3
 800e17c:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e17e:	697b      	ldr	r3, [r7, #20]
 800e180:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e184:	693a      	ldr	r2, [r7, #16]
 800e186:	429a      	cmp	r2, r3
 800e188:	d00a      	beq.n	800e1a0 <SCSI_Write10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e18a:	697b      	ldr	r3, [r7, #20]
 800e18c:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e190:	2320      	movs	r3, #32
 800e192:	2205      	movs	r2, #5
 800e194:	68f8      	ldr	r0, [r7, #12]
 800e196:	f7ff fd72 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e19a:	f04f 33ff 	mov.w	r3, #4294967295
 800e19e:	e019      	b.n	800e1d4 <SCSI_Write10+0x176>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1a6:	bf28      	it	cs
 800e1a8:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e1ac:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e1ae:	697b      	ldr	r3, [r7, #20]
 800e1b0:	2201      	movs	r2, #1
 800e1b2:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e1b4:	697b      	ldr	r3, [r7, #20]
 800e1b6:	f103 0210 	add.w	r2, r3, #16
 800e1ba:	693b      	ldr	r3, [r7, #16]
 800e1bc:	2101      	movs	r1, #1
 800e1be:	68f8      	ldr	r0, [r7, #12]
 800e1c0:	f001 ffed 	bl	801019e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e1c4:	2300      	movs	r3, #0
 800e1c6:	e005      	b.n	800e1d4 <SCSI_Write10+0x176>
    return SCSI_ProcessWrite(pdev, lun);
 800e1c8:	7afb      	ldrb	r3, [r7, #11]
 800e1ca:	4619      	mov	r1, r3
 800e1cc:	68f8      	ldr	r0, [r7, #12]
 800e1ce:	f000 f99c 	bl	800e50a <SCSI_ProcessWrite>
 800e1d2:	4603      	mov	r3, r0
}
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	3718      	adds	r7, #24
 800e1d8:	46bd      	mov	sp, r7
 800e1da:	bd80      	pop	{r7, pc}

0800e1dc <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b086      	sub	sp, #24
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	60f8      	str	r0, [r7, #12]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	607a      	str	r2, [r7, #4]
 800e1e8:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e1f0:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 800e1f2:	697b      	ldr	r3, [r7, #20]
 800e1f4:	7a1b      	ldrb	r3, [r3, #8]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	f040 80b5 	bne.w	800e366 <SCSI_Write12+0x18a>
  {
    if (hmsc->cbw.dDataLength == 0U)
 800e1fc:	697b      	ldr	r3, [r7, #20]
 800e1fe:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e202:	2b00      	cmp	r3, #0
 800e204:	d10a      	bne.n	800e21c <SCSI_Write12+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e206:	697b      	ldr	r3, [r7, #20]
 800e208:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e20c:	2320      	movs	r3, #32
 800e20e:	2205      	movs	r2, #5
 800e210:	68f8      	ldr	r0, [r7, #12]
 800e212:	f7ff fd34 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e216:	f04f 33ff 	mov.w	r3, #4294967295
 800e21a:	e0aa      	b.n	800e372 <SCSI_Write12+0x196>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	f893 321c 	ldrb.w	r3, [r3, #540]	; 0x21c
 800e222:	b25b      	sxtb	r3, r3
 800e224:	2b00      	cmp	r3, #0
 800e226:	da0a      	bge.n	800e23e <SCSI_Write12+0x62>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e228:	697b      	ldr	r3, [r7, #20]
 800e22a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e22e:	2320      	movs	r3, #32
 800e230:	2205      	movs	r2, #5
 800e232:	68f8      	ldr	r0, [r7, #12]
 800e234:	f7ff fd23 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e238:	f04f 33ff 	mov.w	r3, #4294967295
 800e23c:	e099      	b.n	800e372 <SCSI_Write12+0x196>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e244:	689b      	ldr	r3, [r3, #8]
 800e246:	7afa      	ldrb	r2, [r7, #11]
 800e248:	4610      	mov	r0, r2
 800e24a:	4798      	blx	r3
 800e24c:	4603      	mov	r3, r0
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d00b      	beq.n	800e26a <SCSI_Write12+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800e252:	7af9      	ldrb	r1, [r7, #11]
 800e254:	233a      	movs	r3, #58	; 0x3a
 800e256:	2202      	movs	r2, #2
 800e258:	68f8      	ldr	r0, [r7, #12]
 800e25a:	f7ff fd10 	bl	800dc7e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e25e:	697b      	ldr	r3, [r7, #20]
 800e260:	2205      	movs	r2, #5
 800e262:	721a      	strb	r2, [r3, #8]
      return -1;
 800e264:	f04f 33ff 	mov.w	r3, #4294967295
 800e268:	e083      	b.n	800e372 <SCSI_Write12+0x196>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e270:	68db      	ldr	r3, [r3, #12]
 800e272:	7afa      	ldrb	r2, [r7, #11]
 800e274:	4610      	mov	r0, r2
 800e276:	4798      	blx	r3
 800e278:	4603      	mov	r3, r0
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d00b      	beq.n	800e296 <SCSI_Write12+0xba>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 800e27e:	7af9      	ldrb	r1, [r7, #11]
 800e280:	2327      	movs	r3, #39	; 0x27
 800e282:	2202      	movs	r2, #2
 800e284:	68f8      	ldr	r0, [r7, #12]
 800e286:	f7ff fcfa 	bl	800dc7e <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 800e28a:	697b      	ldr	r3, [r7, #20]
 800e28c:	2205      	movs	r2, #5
 800e28e:	721a      	strb	r2, [r3, #8]
      return -1;
 800e290:	f04f 33ff 	mov.w	r3, #4294967295
 800e294:	e06d      	b.n	800e372 <SCSI_Write12+0x196>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	3302      	adds	r3, #2
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	3303      	adds	r3, #3
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2a6:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 800e2a8:	687b      	ldr	r3, [r7, #4]
 800e2aa:	3304      	adds	r3, #4
 800e2ac:	781b      	ldrb	r3, [r3, #0]
 800e2ae:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 800e2b0:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 800e2b2:	687a      	ldr	r2, [r7, #4]
 800e2b4:	3205      	adds	r2, #5
 800e2b6:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 800e2b8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	3306      	adds	r3, #6
 800e2c4:	781b      	ldrb	r3, [r3, #0]
 800e2c6:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	3307      	adds	r3, #7
 800e2cc:	781b      	ldrb	r3, [r3, #0]
 800e2ce:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e2d0:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	3308      	adds	r3, #8
 800e2d6:	781b      	ldrb	r3, [r3, #0]
 800e2d8:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 800e2da:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 800e2dc:	687a      	ldr	r2, [r7, #4]
 800e2de:	3209      	adds	r2, #9
 800e2e0:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 800e2e2:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 800e2e4:	697b      	ldr	r3, [r7, #20]
 800e2e6:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e2f0:	697b      	ldr	r3, [r7, #20]
 800e2f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e2f6:	7af9      	ldrb	r1, [r7, #11]
 800e2f8:	68f8      	ldr	r0, [r7, #12]
 800e2fa:	f000 f871 	bl	800e3e0 <SCSI_CheckAddressRange>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	da02      	bge.n	800e30a <SCSI_Write12+0x12e>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 800e304:	f04f 33ff 	mov.w	r3, #4294967295
 800e308:	e033      	b.n	800e372 <SCSI_Write12+0x196>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e30a:	697b      	ldr	r3, [r7, #20]
 800e30c:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e310:	697a      	ldr	r2, [r7, #20]
 800e312:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e316:	fb02 f303 	mul.w	r3, r2, r3
 800e31a:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800e322:	693a      	ldr	r2, [r7, #16]
 800e324:	429a      	cmp	r2, r3
 800e326:	d00a      	beq.n	800e33e <SCSI_Write12+0x162>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	f893 121d 	ldrb.w	r1, [r3, #541]	; 0x21d
 800e32e:	2320      	movs	r3, #32
 800e330:	2205      	movs	r2, #5
 800e332:	68f8      	ldr	r0, [r7, #12]
 800e334:	f7ff fca3 	bl	800dc7e <SCSI_SenseCode>
      return -1;
 800e338:	f04f 33ff 	mov.w	r3, #4294967295
 800e33c:	e019      	b.n	800e372 <SCSI_Write12+0x196>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e344:	bf28      	it	cs
 800e346:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e34a:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 800e34c:	697b      	ldr	r3, [r7, #20]
 800e34e:	2201      	movs	r2, #1
 800e350:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	f103 0210 	add.w	r2, r3, #16
 800e358:	693b      	ldr	r3, [r7, #16]
 800e35a:	2101      	movs	r1, #1
 800e35c:	68f8      	ldr	r0, [r7, #12]
 800e35e:	f001 ff1e 	bl	801019e <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 800e362:	2300      	movs	r3, #0
 800e364:	e005      	b.n	800e372 <SCSI_Write12+0x196>
    return SCSI_ProcessWrite(pdev, lun);
 800e366:	7afb      	ldrb	r3, [r7, #11]
 800e368:	4619      	mov	r1, r3
 800e36a:	68f8      	ldr	r0, [r7, #12]
 800e36c:	f000 f8cd 	bl	800e50a <SCSI_ProcessWrite>
 800e370:	4603      	mov	r3, r0
}
 800e372:	4618      	mov	r0, r3
 800e374:	3718      	adds	r7, #24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd80      	pop	{r7, pc}

0800e37a <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b086      	sub	sp, #24
 800e37e:	af00      	add	r7, sp, #0
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	460b      	mov	r3, r1
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e38e:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 800e390:	687b      	ldr	r3, [r7, #4]
 800e392:	3301      	adds	r3, #1
 800e394:	781b      	ldrb	r3, [r3, #0]
 800e396:	f003 0302 	and.w	r3, r3, #2
 800e39a:	2b00      	cmp	r3, #0
 800e39c:	d008      	beq.n	800e3b0 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 800e39e:	7af9      	ldrb	r1, [r7, #11]
 800e3a0:	2324      	movs	r3, #36	; 0x24
 800e3a2:	2205      	movs	r2, #5
 800e3a4:	68f8      	ldr	r0, [r7, #12]
 800e3a6:	f7ff fc6a 	bl	800dc7e <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 800e3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ae:	e013      	b.n	800e3d8 <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 800e3b0:	697b      	ldr	r3, [r7, #20]
 800e3b2:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e3b6:	697b      	ldr	r3, [r7, #20]
 800e3b8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e3bc:	7af9      	ldrb	r1, [r7, #11]
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f000 f80e 	bl	800e3e0 <SCSI_CheckAddressRange>
 800e3c4:	4603      	mov	r3, r0
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	da02      	bge.n	800e3d0 <SCSI_Verify10+0x56>
  {
    return -1; /* error */
 800e3ca:	f04f 33ff 	mov.w	r3, #4294967295
 800e3ce:	e003      	b.n	800e3d8 <SCSI_Verify10+0x5e>
  }

  hmsc->bot_data_length = 0U;
 800e3d0:	697b      	ldr	r3, [r7, #20]
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	60da      	str	r2, [r3, #12]

  return 0;
 800e3d6:	2300      	movs	r3, #0
}
 800e3d8:	4618      	mov	r0, r3
 800e3da:	3718      	adds	r7, #24
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}

0800e3e0 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 800e3e0:	b580      	push	{r7, lr}
 800e3e2:	b086      	sub	sp, #24
 800e3e4:	af00      	add	r7, sp, #0
 800e3e6:	60f8      	str	r0, [r7, #12]
 800e3e8:	607a      	str	r2, [r7, #4]
 800e3ea:	603b      	str	r3, [r7, #0]
 800e3ec:	460b      	mov	r3, r1
 800e3ee:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e3f6:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 800e3f8:	687a      	ldr	r2, [r7, #4]
 800e3fa:	683b      	ldr	r3, [r7, #0]
 800e3fc:	441a      	add	r2, r3
 800e3fe:	697b      	ldr	r3, [r7, #20]
 800e400:	f8d3 3268 	ldr.w	r3, [r3, #616]	; 0x268
 800e404:	429a      	cmp	r2, r3
 800e406:	d908      	bls.n	800e41a <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 800e408:	7af9      	ldrb	r1, [r7, #11]
 800e40a:	2321      	movs	r3, #33	; 0x21
 800e40c:	2205      	movs	r2, #5
 800e40e:	68f8      	ldr	r0, [r7, #12]
 800e410:	f7ff fc35 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800e414:	f04f 33ff 	mov.w	r3, #4294967295
 800e418:	e000      	b.n	800e41c <SCSI_CheckAddressRange+0x3c>
  }

  return 0;
 800e41a:	2300      	movs	r3, #0
}
 800e41c:	4618      	mov	r0, r3
 800e41e:	3718      	adds	r7, #24
 800e420:	46bd      	mov	sp, r7
 800e422:	bd80      	pop	{r7, pc}

0800e424 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e424:	b590      	push	{r4, r7, lr}
 800e426:	b085      	sub	sp, #20
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	460b      	mov	r3, r1
 800e42e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e436:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e43e:	68fa      	ldr	r2, [r7, #12]
 800e440:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e444:	fb02 f303 	mul.w	r3, r2, r3
 800e448:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e44a:	68bb      	ldr	r3, [r7, #8]
 800e44c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e450:	bf28      	it	cs
 800e452:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e456:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e45e:	691c      	ldr	r4, [r3, #16]
 800e460:	68fb      	ldr	r3, [r7, #12]
 800e462:	f103 0110 	add.w	r1, r3, #16
 800e466:	68fb      	ldr	r3, [r7, #12]
 800e468:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e472:	4618      	mov	r0, r3
 800e474:	68bb      	ldr	r3, [r7, #8]
 800e476:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 800e47a:	b29b      	uxth	r3, r3
 800e47c:	78f8      	ldrb	r0, [r7, #3]
 800e47e:	47a0      	blx	r4
 800e480:	4603      	mov	r3, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	da08      	bge.n	800e498 <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 800e486:	78f9      	ldrb	r1, [r7, #3]
 800e488:	2311      	movs	r3, #17
 800e48a:	2204      	movs	r2, #4
 800e48c:	6878      	ldr	r0, [r7, #4]
 800e48e:	f7ff fbf6 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800e492:	f04f 33ff 	mov.w	r3, #4294967295
 800e496:	e034      	b.n	800e502 <SCSI_ProcessRead+0xde>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	f103 0210 	add.w	r2, r3, #16
 800e49e:	68bb      	ldr	r3, [r7, #8]
 800e4a0:	2181      	movs	r1, #129	; 0x81
 800e4a2:	6878      	ldr	r0, [r7, #4]
 800e4a4:	f001 fe5a 	bl	801015c <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e4a8:	68fb      	ldr	r3, [r7, #12]
 800e4aa:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4b4:	4619      	mov	r1, r3
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4bc:	441a      	add	r2, r3
 800e4be:	68fb      	ldr	r3, [r7, #12]
 800e4c0:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e4c4:	68fb      	ldr	r3, [r7, #12]
 800e4c6:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	fbb3 f3f1 	udiv	r3, r3, r1
 800e4d8:	1ad2      	subs	r2, r2, r3
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 800e4e0:	68fb      	ldr	r3, [r7, #12]
 800e4e2:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	1ad2      	subs	r2, r2, r3
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e4f6:	2b00      	cmp	r3, #0
 800e4f8:	d102      	bne.n	800e500 <SCSI_ProcessRead+0xdc>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	2203      	movs	r2, #3
 800e4fe:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 800e500:	2300      	movs	r3, #0
}
 800e502:	4618      	mov	r0, r3
 800e504:	3714      	adds	r7, #20
 800e506:	46bd      	mov	sp, r7
 800e508:	bd90      	pop	{r4, r7, pc}

0800e50a <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 800e50a:	b590      	push	{r4, r7, lr}
 800e50c:	b085      	sub	sp, #20
 800e50e:	af00      	add	r7, sp, #0
 800e510:	6078      	str	r0, [r7, #4]
 800e512:	460b      	mov	r3, r1
 800e514:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800e51c:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 800e51e:	68fb      	ldr	r3, [r7, #12]
 800e520:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e524:	68fa      	ldr	r2, [r7, #12]
 800e526:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e52a:	fb02 f303 	mul.w	r3, r2, r3
 800e52e:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 800e530:	68bb      	ldr	r3, [r7, #8]
 800e532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e536:	bf28      	it	cs
 800e538:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e53c:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800e544:	695c      	ldr	r4, [r3, #20]
 800e546:	68fb      	ldr	r3, [r7, #12]
 800e548:	f103 0110 	add.w	r1, r3, #16
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e558:	4618      	mov	r0, r3
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 800e560:	b29b      	uxth	r3, r3
 800e562:	78f8      	ldrb	r0, [r7, #3]
 800e564:	47a0      	blx	r4
 800e566:	4603      	mov	r3, r0
 800e568:	2b00      	cmp	r3, #0
 800e56a:	da08      	bge.n	800e57e <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 800e56c:	78f9      	ldrb	r1, [r7, #3]
 800e56e:	2303      	movs	r3, #3
 800e570:	2204      	movs	r2, #4
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff fb83 	bl	800dc7e <SCSI_SenseCode>
    return -1;
 800e578:	f04f 33ff 	mov.w	r3, #4294967295
 800e57c:	e044      	b.n	800e608 <SCSI_ProcessWrite+0xfe>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 800e57e:	68fb      	ldr	r3, [r7, #12]
 800e580:	f8d3 226c 	ldr.w	r2, [r3, #620]	; 0x26c
 800e584:	68fb      	ldr	r3, [r7, #12]
 800e586:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e58a:	4619      	mov	r1, r3
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	fbb3 f3f1 	udiv	r3, r3, r1
 800e592:	441a      	add	r2, r3
 800e594:	68fb      	ldr	r3, [r7, #12]
 800e596:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 800e59a:	68fb      	ldr	r3, [r7, #12]
 800e59c:	f8d3 2270 	ldr.w	r2, [r3, #624]	; 0x270
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	f8b3 3264 	ldrh.w	r3, [r3, #612]	; 0x264
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	68bb      	ldr	r3, [r7, #8]
 800e5aa:	fbb3 f3f1 	udiv	r3, r3, r1
 800e5ae:	1ad2      	subs	r2, r2, r3
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	f8d3 2238 	ldr.w	r2, [r3, #568]	; 0x238
 800e5bc:	68bb      	ldr	r3, [r7, #8]
 800e5be:	1ad2      	subs	r2, r2, r3
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	f8c3 2238 	str.w	r2, [r3, #568]	; 0x238

  if (hmsc->scsi_blk_len == 0U)
 800e5c6:	68fb      	ldr	r3, [r7, #12]
 800e5c8:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d104      	bne.n	800e5da <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800e5d0:	2100      	movs	r1, #0
 800e5d2:	6878      	ldr	r0, [r7, #4]
 800e5d4:	f7fe ff04 	bl	800d3e0 <MSC_BOT_SendCSW>
 800e5d8:	e015      	b.n	800e606 <SCSI_ProcessWrite+0xfc>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 800e5da:	68fb      	ldr	r3, [r7, #12]
 800e5dc:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
 800e5e0:	68fa      	ldr	r2, [r7, #12]
 800e5e2:	f8b2 2264 	ldrh.w	r2, [r2, #612]	; 0x264
 800e5e6:	fb02 f303 	mul.w	r3, r2, r3
 800e5ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e5ee:	bf28      	it	cs
 800e5f0:	f44f 7300 	movcs.w	r3, #512	; 0x200
 800e5f4:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	f103 0210 	add.w	r2, r3, #16
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	2101      	movs	r1, #1
 800e600:	6878      	ldr	r0, [r7, #4]
 800e602:	f001 fdcc 	bl	801019e <USBD_LL_PrepareReceive>
  }

  return 0;
 800e606:	2300      	movs	r3, #0
}
 800e608:	4618      	mov	r0, r3
 800e60a:	3714      	adds	r7, #20
 800e60c:	46bd      	mov	sp, r7
 800e60e:	bd90      	pop	{r4, r7, pc}

0800e610 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 800e610:	b480      	push	{r7}
 800e612:	b087      	sub	sp, #28
 800e614:	af00      	add	r7, sp, #0
 800e616:	60f8      	str	r0, [r7, #12]
 800e618:	60b9      	str	r1, [r7, #8]
 800e61a:	4613      	mov	r3, r2
 800e61c:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 800e61e:	88fb      	ldrh	r3, [r7, #6]
 800e620:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 800e622:	8afa      	ldrh	r2, [r7, #22]
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 800e628:	e00b      	b.n	800e642 <SCSI_UpdateBotData+0x32>
  {
    len--;
 800e62a:	8afb      	ldrh	r3, [r7, #22]
 800e62c:	3b01      	subs	r3, #1
 800e62e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 800e630:	8afb      	ldrh	r3, [r7, #22]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	441a      	add	r2, r3
 800e636:	8afb      	ldrh	r3, [r7, #22]
 800e638:	7811      	ldrb	r1, [r2, #0]
 800e63a:	68fa      	ldr	r2, [r7, #12]
 800e63c:	4413      	add	r3, r2
 800e63e:	460a      	mov	r2, r1
 800e640:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 800e642:	8afb      	ldrh	r3, [r7, #22]
 800e644:	2b00      	cmp	r3, #0
 800e646:	d1f0      	bne.n	800e62a <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	371c      	adds	r7, #28
 800e64e:	46bd      	mov	sp, r7
 800e650:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e654:	4770      	bx	lr

0800e656 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e656:	b580      	push	{r7, lr}
 800e658:	b086      	sub	sp, #24
 800e65a:	af00      	add	r7, sp, #0
 800e65c:	60f8      	str	r0, [r7, #12]
 800e65e:	60b9      	str	r1, [r7, #8]
 800e660:	4613      	mov	r3, r2
 800e662:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e664:	68fb      	ldr	r3, [r7, #12]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d101      	bne.n	800e66e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800e66a:	2303      	movs	r3, #3
 800e66c:	e025      	b.n	800e6ba <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e674:	2b00      	cmp	r3, #0
 800e676:	d003      	beq.n	800e680 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800e678:	68fb      	ldr	r3, [r7, #12]
 800e67a:	2200      	movs	r2, #0
 800e67c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 800e686:	2b00      	cmp	r3, #0
 800e688:	d003      	beq.n	800e692 <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 800e68a:	68fb      	ldr	r3, [r7, #12]
 800e68c:	2200      	movs	r2, #0
 800e68e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e692:	68bb      	ldr	r3, [r7, #8]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d003      	beq.n	800e6a0 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	68ba      	ldr	r2, [r7, #8]
 800e69c:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e6a0:	68fb      	ldr	r3, [r7, #12]
 800e6a2:	2201      	movs	r2, #1
 800e6a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	79fa      	ldrb	r2, [r7, #7]
 800e6ac:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e6ae:	68f8      	ldr	r0, [r7, #12]
 800e6b0:	f001 fbfc 	bl	800feac <USBD_LL_Init>
 800e6b4:	4603      	mov	r3, r0
 800e6b6:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e6b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ba:	4618      	mov	r0, r3
 800e6bc:	3718      	adds	r7, #24
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	bd80      	pop	{r7, pc}

0800e6c2 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e6c2:	b580      	push	{r7, lr}
 800e6c4:	b084      	sub	sp, #16
 800e6c6:	af00      	add	r7, sp, #0
 800e6c8:	6078      	str	r0, [r7, #4]
 800e6ca:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e6cc:	2300      	movs	r3, #0
 800e6ce:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e6d0:	683b      	ldr	r3, [r7, #0]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d101      	bne.n	800e6da <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800e6d6:	2303      	movs	r3, #3
 800e6d8:	e010      	b.n	800e6fc <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	683a      	ldr	r2, [r7, #0]
 800e6de:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e6ea:	f107 020e 	add.w	r2, r7, #14
 800e6ee:	4610      	mov	r0, r2
 800e6f0:	4798      	blx	r3
 800e6f2:	4602      	mov	r2, r0
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 800e6fa:	2300      	movs	r3, #0
}
 800e6fc:	4618      	mov	r0, r3
 800e6fe:	3710      	adds	r7, #16
 800e700:	46bd      	mov	sp, r7
 800e702:	bd80      	pop	{r7, pc}

0800e704 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e704:	b580      	push	{r7, lr}
 800e706:	b082      	sub	sp, #8
 800e708:	af00      	add	r7, sp, #0
 800e70a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f001 fc1d 	bl	800ff4c <USBD_LL_Start>
 800e712:	4603      	mov	r3, r0
}
 800e714:	4618      	mov	r0, r3
 800e716:	3708      	adds	r7, #8
 800e718:	46bd      	mov	sp, r7
 800e71a:	bd80      	pop	{r7, pc}

0800e71c <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800e71c:	b480      	push	{r7}
 800e71e:	b083      	sub	sp, #12
 800e720:	af00      	add	r7, sp, #0
 800e722:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e724:	2300      	movs	r3, #0
}
 800e726:	4618      	mov	r0, r3
 800e728:	370c      	adds	r7, #12
 800e72a:	46bd      	mov	sp, r7
 800e72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e730:	4770      	bx	lr

0800e732 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e732:	b580      	push	{r7, lr}
 800e734:	b084      	sub	sp, #16
 800e736:	af00      	add	r7, sp, #0
 800e738:	6078      	str	r0, [r7, #4]
 800e73a:	460b      	mov	r3, r1
 800e73c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800e73e:	2303      	movs	r3, #3
 800e740:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d009      	beq.n	800e760 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	78fa      	ldrb	r2, [r7, #3]
 800e756:	4611      	mov	r1, r2
 800e758:	6878      	ldr	r0, [r7, #4]
 800e75a:	4798      	blx	r3
 800e75c:	4603      	mov	r3, r0
 800e75e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800e760:	7bfb      	ldrb	r3, [r7, #15]
}
 800e762:	4618      	mov	r0, r3
 800e764:	3710      	adds	r7, #16
 800e766:	46bd      	mov	sp, r7
 800e768:	bd80      	pop	{r7, pc}

0800e76a <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e76a:	b580      	push	{r7, lr}
 800e76c:	b082      	sub	sp, #8
 800e76e:	af00      	add	r7, sp, #0
 800e770:	6078      	str	r0, [r7, #4]
 800e772:	460b      	mov	r3, r1
 800e774:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e77c:	2b00      	cmp	r3, #0
 800e77e:	d007      	beq.n	800e790 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e786:	685b      	ldr	r3, [r3, #4]
 800e788:	78fa      	ldrb	r2, [r7, #3]
 800e78a:	4611      	mov	r1, r2
 800e78c:	6878      	ldr	r0, [r7, #4]
 800e78e:	4798      	blx	r3
  }

  return USBD_OK;
 800e790:	2300      	movs	r3, #0
}
 800e792:	4618      	mov	r0, r3
 800e794:	3708      	adds	r7, #8
 800e796:	46bd      	mov	sp, r7
 800e798:	bd80      	pop	{r7, pc}

0800e79a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e79a:	b580      	push	{r7, lr}
 800e79c:	b084      	sub	sp, #16
 800e79e:	af00      	add	r7, sp, #0
 800e7a0:	6078      	str	r0, [r7, #4]
 800e7a2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7aa:	6839      	ldr	r1, [r7, #0]
 800e7ac:	4618      	mov	r0, r3
 800e7ae:	f000 ff2b 	bl	800f608 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	2201      	movs	r2, #1
 800e7b6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e7c0:	461a      	mov	r2, r3
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e7ce:	f003 031f 	and.w	r3, r3, #31
 800e7d2:	2b01      	cmp	r3, #1
 800e7d4:	d00e      	beq.n	800e7f4 <USBD_LL_SetupStage+0x5a>
 800e7d6:	2b01      	cmp	r3, #1
 800e7d8:	d302      	bcc.n	800e7e0 <USBD_LL_SetupStage+0x46>
 800e7da:	2b02      	cmp	r3, #2
 800e7dc:	d014      	beq.n	800e808 <USBD_LL_SetupStage+0x6e>
 800e7de:	e01d      	b.n	800e81c <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7e6:	4619      	mov	r1, r3
 800e7e8:	6878      	ldr	r0, [r7, #4]
 800e7ea:	f000 fa17 	bl	800ec1c <USBD_StdDevReq>
 800e7ee:	4603      	mov	r3, r0
 800e7f0:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f2:	e020      	b.n	800e836 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e7fa:	4619      	mov	r1, r3
 800e7fc:	6878      	ldr	r0, [r7, #4]
 800e7fe:	f000 fa7b 	bl	800ecf8 <USBD_StdItfReq>
 800e802:	4603      	mov	r3, r0
 800e804:	73fb      	strb	r3, [r7, #15]
      break;
 800e806:	e016      	b.n	800e836 <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fab7 	bl	800ed84 <USBD_StdEPReq>
 800e816:	4603      	mov	r3, r0
 800e818:	73fb      	strb	r3, [r7, #15]
      break;
 800e81a:	e00c      	b.n	800e836 <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e822:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e826:	b2db      	uxtb	r3, r3
 800e828:	4619      	mov	r1, r3
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f001 fc0d 	bl	801004a <USBD_LL_StallEP>
 800e830:	4603      	mov	r3, r0
 800e832:	73fb      	strb	r3, [r7, #15]
      break;
 800e834:	bf00      	nop
  }

  return ret;
 800e836:	7bfb      	ldrb	r3, [r7, #15]
}
 800e838:	4618      	mov	r0, r3
 800e83a:	3710      	adds	r7, #16
 800e83c:	46bd      	mov	sp, r7
 800e83e:	bd80      	pop	{r7, pc}

0800e840 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e840:	b580      	push	{r7, lr}
 800e842:	b086      	sub	sp, #24
 800e844:	af00      	add	r7, sp, #0
 800e846:	60f8      	str	r0, [r7, #12]
 800e848:	460b      	mov	r3, r1
 800e84a:	607a      	str	r2, [r7, #4]
 800e84c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e84e:	7afb      	ldrb	r3, [r7, #11]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d137      	bne.n	800e8c4 <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 800e854:	68fb      	ldr	r3, [r7, #12]
 800e856:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e85a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e85c:	68fb      	ldr	r3, [r7, #12]
 800e85e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e862:	2b03      	cmp	r3, #3
 800e864:	d14a      	bne.n	800e8fc <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800e866:	693b      	ldr	r3, [r7, #16]
 800e868:	689a      	ldr	r2, [r3, #8]
 800e86a:	693b      	ldr	r3, [r7, #16]
 800e86c:	68db      	ldr	r3, [r3, #12]
 800e86e:	429a      	cmp	r2, r3
 800e870:	d913      	bls.n	800e89a <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	689a      	ldr	r2, [r3, #8]
 800e876:	693b      	ldr	r3, [r7, #16]
 800e878:	68db      	ldr	r3, [r3, #12]
 800e87a:	1ad2      	subs	r2, r2, r3
 800e87c:	693b      	ldr	r3, [r7, #16]
 800e87e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	68da      	ldr	r2, [r3, #12]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	689b      	ldr	r3, [r3, #8]
 800e888:	4293      	cmp	r3, r2
 800e88a:	bf28      	it	cs
 800e88c:	4613      	movcs	r3, r2
 800e88e:	461a      	mov	r2, r3
 800e890:	6879      	ldr	r1, [r7, #4]
 800e892:	68f8      	ldr	r0, [r7, #12]
 800e894:	f000 ff8f 	bl	800f7b6 <USBD_CtlContinueRx>
 800e898:	e030      	b.n	800e8fc <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e89a:	68fb      	ldr	r3, [r7, #12]
 800e89c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8a0:	691b      	ldr	r3, [r3, #16]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d00a      	beq.n	800e8bc <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	d105      	bne.n	800e8bc <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8b6:	691b      	ldr	r3, [r3, #16]
 800e8b8:	68f8      	ldr	r0, [r7, #12]
 800e8ba:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 800e8bc:	68f8      	ldr	r0, [r7, #12]
 800e8be:	f000 ff8b 	bl	800f7d8 <USBD_CtlSendStatus>
 800e8c2:	e01b      	b.n	800e8fc <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 800e8c4:	68fb      	ldr	r3, [r7, #12]
 800e8c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8ca:	699b      	ldr	r3, [r3, #24]
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d013      	beq.n	800e8f8 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800e8d6:	2b03      	cmp	r3, #3
 800e8d8:	d10e      	bne.n	800e8f8 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 800e8da:	68fb      	ldr	r3, [r7, #12]
 800e8dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e8e0:	699b      	ldr	r3, [r3, #24]
 800e8e2:	7afa      	ldrb	r2, [r7, #11]
 800e8e4:	4611      	mov	r1, r2
 800e8e6:	68f8      	ldr	r0, [r7, #12]
 800e8e8:	4798      	blx	r3
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800e8ee:	7dfb      	ldrb	r3, [r7, #23]
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	d003      	beq.n	800e8fc <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 800e8f4:	7dfb      	ldrb	r3, [r7, #23]
 800e8f6:	e002      	b.n	800e8fe <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800e8f8:	2303      	movs	r3, #3
 800e8fa:	e000      	b.n	800e8fe <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 800e8fc:	2300      	movs	r3, #0
}
 800e8fe:	4618      	mov	r0, r3
 800e900:	3718      	adds	r7, #24
 800e902:	46bd      	mov	sp, r7
 800e904:	bd80      	pop	{r7, pc}

0800e906 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800e906:	b580      	push	{r7, lr}
 800e908:	b086      	sub	sp, #24
 800e90a:	af00      	add	r7, sp, #0
 800e90c:	60f8      	str	r0, [r7, #12]
 800e90e:	460b      	mov	r3, r1
 800e910:	607a      	str	r2, [r7, #4]
 800e912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800e914:	7afb      	ldrb	r3, [r7, #11]
 800e916:	2b00      	cmp	r3, #0
 800e918:	d16a      	bne.n	800e9f0 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	3314      	adds	r3, #20
 800e91e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e926:	2b02      	cmp	r3, #2
 800e928:	d155      	bne.n	800e9d6 <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 800e92a:	693b      	ldr	r3, [r7, #16]
 800e92c:	689a      	ldr	r2, [r3, #8]
 800e92e:	693b      	ldr	r3, [r7, #16]
 800e930:	68db      	ldr	r3, [r3, #12]
 800e932:	429a      	cmp	r2, r3
 800e934:	d914      	bls.n	800e960 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800e936:	693b      	ldr	r3, [r7, #16]
 800e938:	689a      	ldr	r2, [r3, #8]
 800e93a:	693b      	ldr	r3, [r7, #16]
 800e93c:	68db      	ldr	r3, [r3, #12]
 800e93e:	1ad2      	subs	r2, r2, r3
 800e940:	693b      	ldr	r3, [r7, #16]
 800e942:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800e944:	693b      	ldr	r3, [r7, #16]
 800e946:	689b      	ldr	r3, [r3, #8]
 800e948:	461a      	mov	r2, r3
 800e94a:	6879      	ldr	r1, [r7, #4]
 800e94c:	68f8      	ldr	r0, [r7, #12]
 800e94e:	f000 ff21 	bl	800f794 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e952:	2300      	movs	r3, #0
 800e954:	2200      	movs	r2, #0
 800e956:	2100      	movs	r1, #0
 800e958:	68f8      	ldr	r0, [r7, #12]
 800e95a:	f001 fc20 	bl	801019e <USBD_LL_PrepareReceive>
 800e95e:	e03a      	b.n	800e9d6 <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800e960:	693b      	ldr	r3, [r7, #16]
 800e962:	68da      	ldr	r2, [r3, #12]
 800e964:	693b      	ldr	r3, [r7, #16]
 800e966:	689b      	ldr	r3, [r3, #8]
 800e968:	429a      	cmp	r2, r3
 800e96a:	d11c      	bne.n	800e9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	693b      	ldr	r3, [r7, #16]
 800e972:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800e974:	429a      	cmp	r2, r3
 800e976:	d316      	bcc.n	800e9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800e978:	693b      	ldr	r3, [r7, #16]
 800e97a:	685a      	ldr	r2, [r3, #4]
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800e982:	429a      	cmp	r2, r3
 800e984:	d20f      	bcs.n	800e9a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800e986:	2200      	movs	r2, #0
 800e988:	2100      	movs	r1, #0
 800e98a:	68f8      	ldr	r0, [r7, #12]
 800e98c:	f000 ff02 	bl	800f794 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800e990:	68fb      	ldr	r3, [r7, #12]
 800e992:	2200      	movs	r2, #0
 800e994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e998:	2300      	movs	r3, #0
 800e99a:	2200      	movs	r2, #0
 800e99c:	2100      	movs	r1, #0
 800e99e:	68f8      	ldr	r0, [r7, #12]
 800e9a0:	f001 fbfd 	bl	801019e <USBD_LL_PrepareReceive>
 800e9a4:	e017      	b.n	800e9d6 <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9a6:	68fb      	ldr	r3, [r7, #12]
 800e9a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9ac:	68db      	ldr	r3, [r3, #12]
 800e9ae:	2b00      	cmp	r3, #0
 800e9b0:	d00a      	beq.n	800e9c8 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9b2:	68fb      	ldr	r3, [r7, #12]
 800e9b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800e9b8:	2b03      	cmp	r3, #3
 800e9ba:	d105      	bne.n	800e9c8 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	68f8      	ldr	r0, [r7, #12]
 800e9c6:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9c8:	2180      	movs	r1, #128	; 0x80
 800e9ca:	68f8      	ldr	r0, [r7, #12]
 800e9cc:	f001 fb3d 	bl	801004a <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f000 ff14 	bl	800f7fe <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e9dc:	2b01      	cmp	r3, #1
 800e9de:	d123      	bne.n	800ea28 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 800e9e0:	68f8      	ldr	r0, [r7, #12]
 800e9e2:	f7ff fe9b 	bl	800e71c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	2200      	movs	r2, #0
 800e9ea:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800e9ee:	e01b      	b.n	800ea28 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e9f6:	695b      	ldr	r3, [r3, #20]
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d013      	beq.n	800ea24 <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 800ea02:	2b03      	cmp	r3, #3
 800ea04:	d10e      	bne.n	800ea24 <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 800ea06:	68fb      	ldr	r3, [r7, #12]
 800ea08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea0c:	695b      	ldr	r3, [r3, #20]
 800ea0e:	7afa      	ldrb	r2, [r7, #11]
 800ea10:	4611      	mov	r1, r2
 800ea12:	68f8      	ldr	r0, [r7, #12]
 800ea14:	4798      	blx	r3
 800ea16:	4603      	mov	r3, r0
 800ea18:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 800ea1a:	7dfb      	ldrb	r3, [r7, #23]
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d003      	beq.n	800ea28 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 800ea20:	7dfb      	ldrb	r3, [r7, #23]
 800ea22:	e002      	b.n	800ea2a <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800ea24:	2303      	movs	r3, #3
 800ea26:	e000      	b.n	800ea2a <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3718      	adds	r7, #24
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}

0800ea32 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	2201      	movs	r2, #1
 800ea3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	2200      	movs	r2, #0
 800ea46:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	2200      	movs	r2, #0
 800ea4e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	2200      	movs	r2, #0
 800ea54:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d009      	beq.n	800ea76 <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ea68:	685b      	ldr	r3, [r3, #4]
 800ea6a:	687a      	ldr	r2, [r7, #4]
 800ea6c:	6852      	ldr	r2, [r2, #4]
 800ea6e:	b2d2      	uxtb	r2, r2
 800ea70:	4611      	mov	r1, r2
 800ea72:	6878      	ldr	r0, [r7, #4]
 800ea74:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea76:	2340      	movs	r3, #64	; 0x40
 800ea78:	2200      	movs	r2, #0
 800ea7a:	2100      	movs	r1, #0
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f001 fa80 	bl	800ff82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2240      	movs	r2, #64	; 0x40
 800ea8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ea92:	2340      	movs	r3, #64	; 0x40
 800ea94:	2200      	movs	r2, #0
 800ea96:	2180      	movs	r1, #128	; 0x80
 800ea98:	6878      	ldr	r0, [r7, #4]
 800ea9a:	f001 fa72 	bl	800ff82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	2201      	movs	r2, #1
 800eaa2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2240      	movs	r2, #64	; 0x40
 800eaa8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800eaaa:	2300      	movs	r3, #0
}
 800eaac:	4618      	mov	r0, r3
 800eaae:	3708      	adds	r7, #8
 800eab0:	46bd      	mov	sp, r7
 800eab2:	bd80      	pop	{r7, pc}

0800eab4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
 800eabc:	460b      	mov	r3, r1
 800eabe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	78fa      	ldrb	r2, [r7, #3]
 800eac4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	370c      	adds	r7, #12
 800eacc:	46bd      	mov	sp, r7
 800eace:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead2:	4770      	bx	lr

0800ead4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ead4:	b480      	push	{r7}
 800ead6:	b083      	sub	sp, #12
 800ead8:	af00      	add	r7, sp, #0
 800eada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	2204      	movs	r2, #4
 800eaec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eaf0:	2300      	movs	r3, #0
}
 800eaf2:	4618      	mov	r0, r3
 800eaf4:	370c      	adds	r7, #12
 800eaf6:	46bd      	mov	sp, r7
 800eaf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eafc:	4770      	bx	lr

0800eafe <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800eafe:	b480      	push	{r7}
 800eb00:	b083      	sub	sp, #12
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb0c:	2b04      	cmp	r3, #4
 800eb0e:	d105      	bne.n	800eb1c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800eb1c:	2300      	movs	r3, #0
}
 800eb1e:	4618      	mov	r0, r3
 800eb20:	370c      	adds	r7, #12
 800eb22:	46bd      	mov	sp, r7
 800eb24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb28:	4770      	bx	lr

0800eb2a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800eb2a:	b580      	push	{r7, lr}
 800eb2c:	b082      	sub	sp, #8
 800eb2e:	af00      	add	r7, sp, #0
 800eb30:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb32:	687b      	ldr	r3, [r7, #4]
 800eb34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb38:	2b03      	cmp	r3, #3
 800eb3a:	d10b      	bne.n	800eb54 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb42:	69db      	ldr	r3, [r3, #28]
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d005      	beq.n	800eb54 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4e:	69db      	ldr	r3, [r3, #28]
 800eb50:	6878      	ldr	r0, [r7, #4]
 800eb52:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eb54:	2300      	movs	r3, #0
}
 800eb56:	4618      	mov	r0, r3
 800eb58:	3708      	adds	r7, #8
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd80      	pop	{r7, pc}

0800eb5e <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800eb5e:	b480      	push	{r7}
 800eb60:	b083      	sub	sp, #12
 800eb62:	af00      	add	r7, sp, #0
 800eb64:	6078      	str	r0, [r7, #4]
 800eb66:	460b      	mov	r3, r1
 800eb68:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb6a:	2300      	movs	r3, #0
}
 800eb6c:	4618      	mov	r0, r3
 800eb6e:	370c      	adds	r7, #12
 800eb70:	46bd      	mov	sp, r7
 800eb72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb76:	4770      	bx	lr

0800eb78 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800eb78:	b480      	push	{r7}
 800eb7a:	b083      	sub	sp, #12
 800eb7c:	af00      	add	r7, sp, #0
 800eb7e:	6078      	str	r0, [r7, #4]
 800eb80:	460b      	mov	r3, r1
 800eb82:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 800eb84:	2300      	movs	r3, #0
}
 800eb86:	4618      	mov	r0, r3
 800eb88:	370c      	adds	r7, #12
 800eb8a:	46bd      	mov	sp, r7
 800eb8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800eb92:	b480      	push	{r7}
 800eb94:	b083      	sub	sp, #12
 800eb96:	af00      	add	r7, sp, #0
 800eb98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800eb9a:	2300      	movs	r3, #0
}
 800eb9c:	4618      	mov	r0, r3
 800eb9e:	370c      	adds	r7, #12
 800eba0:	46bd      	mov	sp, r7
 800eba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eba6:	4770      	bx	lr

0800eba8 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebb0:	687b      	ldr	r3, [r7, #4]
 800ebb2:	2201      	movs	r2, #1
 800ebb4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 800ebb8:	687b      	ldr	r3, [r7, #4]
 800ebba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d009      	beq.n	800ebd6 <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ebc8:	685b      	ldr	r3, [r3, #4]
 800ebca:	687a      	ldr	r2, [r7, #4]
 800ebcc:	6852      	ldr	r2, [r2, #4]
 800ebce:	b2d2      	uxtb	r2, r2
 800ebd0:	4611      	mov	r1, r2
 800ebd2:	6878      	ldr	r0, [r7, #4]
 800ebd4:	4798      	blx	r3
  }

  return USBD_OK;
 800ebd6:	2300      	movs	r3, #0
}
 800ebd8:	4618      	mov	r0, r3
 800ebda:	3708      	adds	r7, #8
 800ebdc:	46bd      	mov	sp, r7
 800ebde:	bd80      	pop	{r7, pc}

0800ebe0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ebe0:	b480      	push	{r7}
 800ebe2:	b087      	sub	sp, #28
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	781b      	ldrb	r3, [r3, #0]
 800ebf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ebf2:	697b      	ldr	r3, [r7, #20]
 800ebf4:	3301      	adds	r3, #1
 800ebf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ebf8:	697b      	ldr	r3, [r7, #20]
 800ebfa:	781b      	ldrb	r3, [r3, #0]
 800ebfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ebfe:	8a3b      	ldrh	r3, [r7, #16]
 800ec00:	021b      	lsls	r3, r3, #8
 800ec02:	b21a      	sxth	r2, r3
 800ec04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ec08:	4313      	orrs	r3, r2
 800ec0a:	b21b      	sxth	r3, r3
 800ec0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ec0e:	89fb      	ldrh	r3, [r7, #14]
}
 800ec10:	4618      	mov	r0, r3
 800ec12:	371c      	adds	r7, #28
 800ec14:	46bd      	mov	sp, r7
 800ec16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1a:	4770      	bx	lr

0800ec1c <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ec1c:	b580      	push	{r7, lr}
 800ec1e:	b084      	sub	sp, #16
 800ec20:	af00      	add	r7, sp, #0
 800ec22:	6078      	str	r0, [r7, #4]
 800ec24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec26:	2300      	movs	r3, #0
 800ec28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ec2a:	683b      	ldr	r3, [r7, #0]
 800ec2c:	781b      	ldrb	r3, [r3, #0]
 800ec2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ec32:	2b20      	cmp	r3, #32
 800ec34:	d004      	beq.n	800ec40 <USBD_StdDevReq+0x24>
 800ec36:	2b40      	cmp	r3, #64	; 0x40
 800ec38:	d002      	beq.n	800ec40 <USBD_StdDevReq+0x24>
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d00a      	beq.n	800ec54 <USBD_StdDevReq+0x38>
 800ec3e:	e050      	b.n	800ece2 <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec46:	689b      	ldr	r3, [r3, #8]
 800ec48:	6839      	ldr	r1, [r7, #0]
 800ec4a:	6878      	ldr	r0, [r7, #4]
 800ec4c:	4798      	blx	r3
 800ec4e:	4603      	mov	r3, r0
 800ec50:	73fb      	strb	r3, [r7, #15]
    break;
 800ec52:	e04b      	b.n	800ecec <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800ec54:	683b      	ldr	r3, [r7, #0]
 800ec56:	785b      	ldrb	r3, [r3, #1]
 800ec58:	2b09      	cmp	r3, #9
 800ec5a:	d83c      	bhi.n	800ecd6 <USBD_StdDevReq+0xba>
 800ec5c:	a201      	add	r2, pc, #4	; (adr r2, 800ec64 <USBD_StdDevReq+0x48>)
 800ec5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec62:	bf00      	nop
 800ec64:	0800ecb9 	.word	0x0800ecb9
 800ec68:	0800eccd 	.word	0x0800eccd
 800ec6c:	0800ecd7 	.word	0x0800ecd7
 800ec70:	0800ecc3 	.word	0x0800ecc3
 800ec74:	0800ecd7 	.word	0x0800ecd7
 800ec78:	0800ec97 	.word	0x0800ec97
 800ec7c:	0800ec8d 	.word	0x0800ec8d
 800ec80:	0800ecd7 	.word	0x0800ecd7
 800ec84:	0800ecaf 	.word	0x0800ecaf
 800ec88:	0800eca1 	.word	0x0800eca1
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 800ec8c:	6839      	ldr	r1, [r7, #0]
 800ec8e:	6878      	ldr	r0, [r7, #4]
 800ec90:	f000 f9ce 	bl	800f030 <USBD_GetDescriptor>
      break;
 800ec94:	e024      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 800ec96:	6839      	ldr	r1, [r7, #0]
 800ec98:	6878      	ldr	r0, [r7, #4]
 800ec9a:	f000 fb33 	bl	800f304 <USBD_SetAddress>
      break;
 800ec9e:	e01f      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 800eca0:	6839      	ldr	r1, [r7, #0]
 800eca2:	6878      	ldr	r0, [r7, #4]
 800eca4:	f000 fb70 	bl	800f388 <USBD_SetConfig>
 800eca8:	4603      	mov	r3, r0
 800ecaa:	73fb      	strb	r3, [r7, #15]
      break;
 800ecac:	e018      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 800ecae:	6839      	ldr	r1, [r7, #0]
 800ecb0:	6878      	ldr	r0, [r7, #4]
 800ecb2:	f000 fc0d 	bl	800f4d0 <USBD_GetConfig>
      break;
 800ecb6:	e013      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 800ecb8:	6839      	ldr	r1, [r7, #0]
 800ecba:	6878      	ldr	r0, [r7, #4]
 800ecbc:	f000 fc3c 	bl	800f538 <USBD_GetStatus>
      break;
 800ecc0:	e00e      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 800ecc2:	6839      	ldr	r1, [r7, #0]
 800ecc4:	6878      	ldr	r0, [r7, #4]
 800ecc6:	f000 fc6a 	bl	800f59e <USBD_SetFeature>
      break;
 800ecca:	e009      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 800eccc:	6839      	ldr	r1, [r7, #0]
 800ecce:	6878      	ldr	r0, [r7, #4]
 800ecd0:	f000 fc79 	bl	800f5c6 <USBD_ClrFeature>
      break;
 800ecd4:	e004      	b.n	800ece0 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 800ecd6:	6839      	ldr	r1, [r7, #0]
 800ecd8:	6878      	ldr	r0, [r7, #4]
 800ecda:	f000 fccf 	bl	800f67c <USBD_CtlError>
      break;
 800ecde:	bf00      	nop
    }
    break;
 800ece0:	e004      	b.n	800ecec <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 800ece2:	6839      	ldr	r1, [r7, #0]
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f000 fcc9 	bl	800f67c <USBD_CtlError>
    break;
 800ecea:	bf00      	nop
  }

  return ret;
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecee:	4618      	mov	r0, r3
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
 800ecf6:	bf00      	nop

0800ecf8 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ecf8:	b580      	push	{r7, lr}
 800ecfa:	b084      	sub	sp, #16
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ed02:	2300      	movs	r3, #0
 800ed04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed06:	683b      	ldr	r3, [r7, #0]
 800ed08:	781b      	ldrb	r3, [r3, #0]
 800ed0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ed0e:	2b20      	cmp	r3, #32
 800ed10:	d003      	beq.n	800ed1a <USBD_StdItfReq+0x22>
 800ed12:	2b40      	cmp	r3, #64	; 0x40
 800ed14:	d001      	beq.n	800ed1a <USBD_StdItfReq+0x22>
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d12a      	bne.n	800ed70 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed20:	3b01      	subs	r3, #1
 800ed22:	2b02      	cmp	r3, #2
 800ed24:	d81d      	bhi.n	800ed62 <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ed26:	683b      	ldr	r3, [r7, #0]
 800ed28:	889b      	ldrh	r3, [r3, #4]
 800ed2a:	b2db      	uxtb	r3, r3
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d813      	bhi.n	800ed58 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed36:	689b      	ldr	r3, [r3, #8]
 800ed38:	6839      	ldr	r1, [r7, #0]
 800ed3a:	6878      	ldr	r0, [r7, #4]
 800ed3c:	4798      	blx	r3
 800ed3e:	4603      	mov	r3, r0
 800ed40:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	88db      	ldrh	r3, [r3, #6]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d110      	bne.n	800ed6c <USBD_StdItfReq+0x74>
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d10d      	bne.n	800ed6c <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 800ed50:	6878      	ldr	r0, [r7, #4]
 800ed52:	f000 fd41 	bl	800f7d8 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800ed56:	e009      	b.n	800ed6c <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 800ed58:	6839      	ldr	r1, [r7, #0]
 800ed5a:	6878      	ldr	r0, [r7, #4]
 800ed5c:	f000 fc8e 	bl	800f67c <USBD_CtlError>
      break;
 800ed60:	e004      	b.n	800ed6c <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 800ed62:	6839      	ldr	r1, [r7, #0]
 800ed64:	6878      	ldr	r0, [r7, #4]
 800ed66:	f000 fc89 	bl	800f67c <USBD_CtlError>
      break;
 800ed6a:	e000      	b.n	800ed6e <USBD_StdItfReq+0x76>
      break;
 800ed6c:	bf00      	nop
    }
    break;
 800ed6e:	e004      	b.n	800ed7a <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 800ed70:	6839      	ldr	r1, [r7, #0]
 800ed72:	6878      	ldr	r0, [r7, #4]
 800ed74:	f000 fc82 	bl	800f67c <USBD_CtlError>
    break;
 800ed78:	bf00      	nop
  }

  return ret;
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed7c:	4618      	mov	r0, r3
 800ed7e:	3710      	adds	r7, #16
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}

0800ed84 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed84:	b580      	push	{r7, lr}
 800ed86:	b084      	sub	sp, #16
 800ed88:	af00      	add	r7, sp, #0
 800ed8a:	6078      	str	r0, [r7, #4]
 800ed8c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800ed8e:	2300      	movs	r3, #0
 800ed90:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	889b      	ldrh	r3, [r3, #4]
 800ed96:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	781b      	ldrb	r3, [r3, #0]
 800ed9c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800eda0:	2b20      	cmp	r3, #32
 800eda2:	d004      	beq.n	800edae <USBD_StdEPReq+0x2a>
 800eda4:	2b40      	cmp	r3, #64	; 0x40
 800eda6:	d002      	beq.n	800edae <USBD_StdEPReq+0x2a>
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d00a      	beq.n	800edc2 <USBD_StdEPReq+0x3e>
 800edac:	e135      	b.n	800f01a <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800edae:	687b      	ldr	r3, [r7, #4]
 800edb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800edb4:	689b      	ldr	r3, [r3, #8]
 800edb6:	6839      	ldr	r1, [r7, #0]
 800edb8:	6878      	ldr	r0, [r7, #4]
 800edba:	4798      	blx	r3
 800edbc:	4603      	mov	r3, r0
 800edbe:	73fb      	strb	r3, [r7, #15]
    break;
 800edc0:	e130      	b.n	800f024 <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800edc2:	683b      	ldr	r3, [r7, #0]
 800edc4:	785b      	ldrb	r3, [r3, #1]
 800edc6:	2b01      	cmp	r3, #1
 800edc8:	d03e      	beq.n	800ee48 <USBD_StdEPReq+0xc4>
 800edca:	2b03      	cmp	r3, #3
 800edcc:	d002      	beq.n	800edd4 <USBD_StdEPReq+0x50>
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d077      	beq.n	800eec2 <USBD_StdEPReq+0x13e>
 800edd2:	e11c      	b.n	800f00e <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edda:	2b02      	cmp	r3, #2
 800eddc:	d002      	beq.n	800ede4 <USBD_StdEPReq+0x60>
 800edde:	2b03      	cmp	r3, #3
 800ede0:	d015      	beq.n	800ee0e <USBD_StdEPReq+0x8a>
 800ede2:	e02b      	b.n	800ee3c <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ede4:	7bbb      	ldrb	r3, [r7, #14]
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d00c      	beq.n	800ee04 <USBD_StdEPReq+0x80>
 800edea:	7bbb      	ldrb	r3, [r7, #14]
 800edec:	2b80      	cmp	r3, #128	; 0x80
 800edee:	d009      	beq.n	800ee04 <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800edf0:	7bbb      	ldrb	r3, [r7, #14]
 800edf2:	4619      	mov	r1, r3
 800edf4:	6878      	ldr	r0, [r7, #4]
 800edf6:	f001 f928 	bl	801004a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800edfa:	2180      	movs	r1, #128	; 0x80
 800edfc:	6878      	ldr	r0, [r7, #4]
 800edfe:	f001 f924 	bl	801004a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee02:	e020      	b.n	800ee46 <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 800ee04:	6839      	ldr	r1, [r7, #0]
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 fc38 	bl	800f67c <USBD_CtlError>
        break;
 800ee0c:	e01b      	b.n	800ee46 <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee0e:	683b      	ldr	r3, [r7, #0]
 800ee10:	885b      	ldrh	r3, [r3, #2]
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d10e      	bne.n	800ee34 <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ee16:	7bbb      	ldrb	r3, [r7, #14]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d00b      	beq.n	800ee34 <USBD_StdEPReq+0xb0>
 800ee1c:	7bbb      	ldrb	r3, [r7, #14]
 800ee1e:	2b80      	cmp	r3, #128	; 0x80
 800ee20:	d008      	beq.n	800ee34 <USBD_StdEPReq+0xb0>
 800ee22:	683b      	ldr	r3, [r7, #0]
 800ee24:	88db      	ldrh	r3, [r3, #6]
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d104      	bne.n	800ee34 <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee2a:	7bbb      	ldrb	r3, [r7, #14]
 800ee2c:	4619      	mov	r1, r3
 800ee2e:	6878      	ldr	r0, [r7, #4]
 800ee30:	f001 f90b 	bl	801004a <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 800ee34:	6878      	ldr	r0, [r7, #4]
 800ee36:	f000 fccf 	bl	800f7d8 <USBD_CtlSendStatus>

        break;
 800ee3a:	e004      	b.n	800ee46 <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 800ee3c:	6839      	ldr	r1, [r7, #0]
 800ee3e:	6878      	ldr	r0, [r7, #4]
 800ee40:	f000 fc1c 	bl	800f67c <USBD_CtlError>
        break;
 800ee44:	bf00      	nop
      }
      break;
 800ee46:	e0e7      	b.n	800f018 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee4e:	2b02      	cmp	r3, #2
 800ee50:	d002      	beq.n	800ee58 <USBD_StdEPReq+0xd4>
 800ee52:	2b03      	cmp	r3, #3
 800ee54:	d015      	beq.n	800ee82 <USBD_StdEPReq+0xfe>
 800ee56:	e02d      	b.n	800eeb4 <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ee58:	7bbb      	ldrb	r3, [r7, #14]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d00c      	beq.n	800ee78 <USBD_StdEPReq+0xf4>
 800ee5e:	7bbb      	ldrb	r3, [r7, #14]
 800ee60:	2b80      	cmp	r3, #128	; 0x80
 800ee62:	d009      	beq.n	800ee78 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 800ee64:	7bbb      	ldrb	r3, [r7, #14]
 800ee66:	4619      	mov	r1, r3
 800ee68:	6878      	ldr	r0, [r7, #4]
 800ee6a:	f001 f8ee 	bl	801004a <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ee6e:	2180      	movs	r1, #128	; 0x80
 800ee70:	6878      	ldr	r0, [r7, #4]
 800ee72:	f001 f8ea 	bl	801004a <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800ee76:	e023      	b.n	800eec0 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 800ee78:	6839      	ldr	r1, [r7, #0]
 800ee7a:	6878      	ldr	r0, [r7, #4]
 800ee7c:	f000 fbfe 	bl	800f67c <USBD_CtlError>
        break;
 800ee80:	e01e      	b.n	800eec0 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800ee82:	683b      	ldr	r3, [r7, #0]
 800ee84:	885b      	ldrh	r3, [r3, #2]
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d119      	bne.n	800eebe <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800ee8a:	7bbb      	ldrb	r3, [r7, #14]
 800ee8c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d004      	beq.n	800ee9e <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ee94:	7bbb      	ldrb	r3, [r7, #14]
 800ee96:	4619      	mov	r1, r3
 800ee98:	6878      	ldr	r0, [r7, #4]
 800ee9a:	f001 f8f5 	bl	8010088 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 800ee9e:	6878      	ldr	r0, [r7, #4]
 800eea0:	f000 fc9a 	bl	800f7d8 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eeaa:	689b      	ldr	r3, [r3, #8]
 800eeac:	6839      	ldr	r1, [r7, #0]
 800eeae:	6878      	ldr	r0, [r7, #4]
 800eeb0:	4798      	blx	r3
        }
        break;
 800eeb2:	e004      	b.n	800eebe <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 800eeb4:	6839      	ldr	r1, [r7, #0]
 800eeb6:	6878      	ldr	r0, [r7, #4]
 800eeb8:	f000 fbe0 	bl	800f67c <USBD_CtlError>
        break;
 800eebc:	e000      	b.n	800eec0 <USBD_StdEPReq+0x13c>
        break;
 800eebe:	bf00      	nop
      }
      break;
 800eec0:	e0aa      	b.n	800f018 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eec8:	2b02      	cmp	r3, #2
 800eeca:	d002      	beq.n	800eed2 <USBD_StdEPReq+0x14e>
 800eecc:	2b03      	cmp	r3, #3
 800eece:	d032      	beq.n	800ef36 <USBD_StdEPReq+0x1b2>
 800eed0:	e097      	b.n	800f002 <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800eed2:	7bbb      	ldrb	r3, [r7, #14]
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d007      	beq.n	800eee8 <USBD_StdEPReq+0x164>
 800eed8:	7bbb      	ldrb	r3, [r7, #14]
 800eeda:	2b80      	cmp	r3, #128	; 0x80
 800eedc:	d004      	beq.n	800eee8 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 800eede:	6839      	ldr	r1, [r7, #0]
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f000 fbcb 	bl	800f67c <USBD_CtlError>
          break;
 800eee6:	e091      	b.n	800f00c <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800eee8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800eeec:	2b00      	cmp	r3, #0
 800eeee:	da0b      	bge.n	800ef08 <USBD_StdEPReq+0x184>
 800eef0:	7bbb      	ldrb	r3, [r7, #14]
 800eef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800eef6:	4613      	mov	r3, r2
 800eef8:	009b      	lsls	r3, r3, #2
 800eefa:	4413      	add	r3, r2
 800eefc:	009b      	lsls	r3, r3, #2
 800eefe:	3310      	adds	r3, #16
 800ef00:	687a      	ldr	r2, [r7, #4]
 800ef02:	4413      	add	r3, r2
 800ef04:	3304      	adds	r3, #4
 800ef06:	e00b      	b.n	800ef20 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800ef08:	7bbb      	ldrb	r3, [r7, #14]
 800ef0a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef0e:	4613      	mov	r3, r2
 800ef10:	009b      	lsls	r3, r3, #2
 800ef12:	4413      	add	r3, r2
 800ef14:	009b      	lsls	r3, r3, #2
 800ef16:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800ef1a:	687a      	ldr	r2, [r7, #4]
 800ef1c:	4413      	add	r3, r2
 800ef1e:	3304      	adds	r3, #4
 800ef20:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	2200      	movs	r2, #0
 800ef26:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2202      	movs	r2, #2
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	6878      	ldr	r0, [r7, #4]
 800ef30:	f000 fc15 	bl	800f75e <USBD_CtlSendData>
        break;
 800ef34:	e06a      	b.n	800f00c <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 800ef36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	da11      	bge.n	800ef62 <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800ef3e:	7bbb      	ldrb	r3, [r7, #14]
 800ef40:	f003 020f 	and.w	r2, r3, #15
 800ef44:	6879      	ldr	r1, [r7, #4]
 800ef46:	4613      	mov	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	4413      	add	r3, r2
 800ef4c:	009b      	lsls	r3, r3, #2
 800ef4e:	440b      	add	r3, r1
 800ef50:	3324      	adds	r3, #36	; 0x24
 800ef52:	881b      	ldrh	r3, [r3, #0]
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d117      	bne.n	800ef88 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef58:	6839      	ldr	r1, [r7, #0]
 800ef5a:	6878      	ldr	r0, [r7, #4]
 800ef5c:	f000 fb8e 	bl	800f67c <USBD_CtlError>
            break;
 800ef60:	e054      	b.n	800f00c <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800ef62:	7bbb      	ldrb	r3, [r7, #14]
 800ef64:	f003 020f 	and.w	r2, r3, #15
 800ef68:	6879      	ldr	r1, [r7, #4]
 800ef6a:	4613      	mov	r3, r2
 800ef6c:	009b      	lsls	r3, r3, #2
 800ef6e:	4413      	add	r3, r2
 800ef70:	009b      	lsls	r3, r3, #2
 800ef72:	440b      	add	r3, r1
 800ef74:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ef78:	881b      	ldrh	r3, [r3, #0]
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	d104      	bne.n	800ef88 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 800ef7e:	6839      	ldr	r1, [r7, #0]
 800ef80:	6878      	ldr	r0, [r7, #4]
 800ef82:	f000 fb7b 	bl	800f67c <USBD_CtlError>
            break;
 800ef86:	e041      	b.n	800f00c <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ef88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	da0b      	bge.n	800efa8 <USBD_StdEPReq+0x224>
 800ef90:	7bbb      	ldrb	r3, [r7, #14]
 800ef92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ef96:	4613      	mov	r3, r2
 800ef98:	009b      	lsls	r3, r3, #2
 800ef9a:	4413      	add	r3, r2
 800ef9c:	009b      	lsls	r3, r3, #2
 800ef9e:	3310      	adds	r3, #16
 800efa0:	687a      	ldr	r2, [r7, #4]
 800efa2:	4413      	add	r3, r2
 800efa4:	3304      	adds	r3, #4
 800efa6:	e00b      	b.n	800efc0 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 800efa8:	7bbb      	ldrb	r3, [r7, #14]
 800efaa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800efae:	4613      	mov	r3, r2
 800efb0:	009b      	lsls	r3, r3, #2
 800efb2:	4413      	add	r3, r2
 800efb4:	009b      	lsls	r3, r3, #2
 800efb6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800efba:	687a      	ldr	r2, [r7, #4]
 800efbc:	4413      	add	r3, r2
 800efbe:	3304      	adds	r3, #4
 800efc0:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800efc2:	7bbb      	ldrb	r3, [r7, #14]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d002      	beq.n	800efce <USBD_StdEPReq+0x24a>
 800efc8:	7bbb      	ldrb	r3, [r7, #14]
 800efca:	2b80      	cmp	r3, #128	; 0x80
 800efcc:	d103      	bne.n	800efd6 <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 800efce:	68bb      	ldr	r3, [r7, #8]
 800efd0:	2200      	movs	r2, #0
 800efd2:	601a      	str	r2, [r3, #0]
 800efd4:	e00e      	b.n	800eff4 <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800efd6:	7bbb      	ldrb	r3, [r7, #14]
 800efd8:	4619      	mov	r1, r3
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f001 f873 	bl	80100c6 <USBD_LL_IsStallEP>
 800efe0:	4603      	mov	r3, r0
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	d003      	beq.n	800efee <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 800efe6:	68bb      	ldr	r3, [r7, #8]
 800efe8:	2201      	movs	r2, #1
 800efea:	601a      	str	r2, [r3, #0]
 800efec:	e002      	b.n	800eff4 <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 800efee:	68bb      	ldr	r3, [r7, #8]
 800eff0:	2200      	movs	r2, #0
 800eff2:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800eff4:	68bb      	ldr	r3, [r7, #8]
 800eff6:	2202      	movs	r2, #2
 800eff8:	4619      	mov	r1, r3
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fbaf 	bl	800f75e <USBD_CtlSendData>
          break;
 800f000:	e004      	b.n	800f00c <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 800f002:	6839      	ldr	r1, [r7, #0]
 800f004:	6878      	ldr	r0, [r7, #4]
 800f006:	f000 fb39 	bl	800f67c <USBD_CtlError>
        break;
 800f00a:	bf00      	nop
      }
      break;
 800f00c:	e004      	b.n	800f018 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fb33 	bl	800f67c <USBD_CtlError>
      break;
 800f016:	bf00      	nop
    }
    break;
 800f018:	e004      	b.n	800f024 <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 800f01a:	6839      	ldr	r1, [r7, #0]
 800f01c:	6878      	ldr	r0, [r7, #4]
 800f01e:	f000 fb2d 	bl	800f67c <USBD_CtlError>
    break;
 800f022:	bf00      	nop
  }

  return ret;
 800f024:	7bfb      	ldrb	r3, [r7, #15]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}
	...

0800f030 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f030:	b580      	push	{r7, lr}
 800f032:	b084      	sub	sp, #16
 800f034:	af00      	add	r7, sp, #0
 800f036:	6078      	str	r0, [r7, #4]
 800f038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f03a:	2300      	movs	r3, #0
 800f03c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f03e:	2300      	movs	r3, #0
 800f040:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f042:	2300      	movs	r3, #0
 800f044:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f046:	683b      	ldr	r3, [r7, #0]
 800f048:	885b      	ldrh	r3, [r3, #2]
 800f04a:	0a1b      	lsrs	r3, r3, #8
 800f04c:	b29b      	uxth	r3, r3
 800f04e:	3b01      	subs	r3, #1
 800f050:	2b06      	cmp	r3, #6
 800f052:	f200 8128 	bhi.w	800f2a6 <USBD_GetDescriptor+0x276>
 800f056:	a201      	add	r2, pc, #4	; (adr r2, 800f05c <USBD_GetDescriptor+0x2c>)
 800f058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f05c:	0800f079 	.word	0x0800f079
 800f060:	0800f091 	.word	0x0800f091
 800f064:	0800f0d1 	.word	0x0800f0d1
 800f068:	0800f2a7 	.word	0x0800f2a7
 800f06c:	0800f2a7 	.word	0x0800f2a7
 800f070:	0800f247 	.word	0x0800f247
 800f074:	0800f273 	.word	0x0800f273
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	7c12      	ldrb	r2, [r2, #16]
 800f084:	f107 0108 	add.w	r1, r7, #8
 800f088:	4610      	mov	r0, r2
 800f08a:	4798      	blx	r3
 800f08c:	60f8      	str	r0, [r7, #12]
    break;
 800f08e:	e112      	b.n	800f2b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f090:	687b      	ldr	r3, [r7, #4]
 800f092:	7c1b      	ldrb	r3, [r3, #16]
 800f094:	2b00      	cmp	r3, #0
 800f096:	d10d      	bne.n	800f0b4 <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f09e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f0a0:	f107 0208 	add.w	r2, r7, #8
 800f0a4:	4610      	mov	r0, r2
 800f0a6:	4798      	blx	r3
 800f0a8:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3301      	adds	r3, #1
 800f0ae:	2202      	movs	r2, #2
 800f0b0:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800f0b2:	e100      	b.n	800f2b6 <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f0ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0bc:	f107 0208 	add.w	r2, r7, #8
 800f0c0:	4610      	mov	r0, r2
 800f0c2:	4798      	blx	r3
 800f0c4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	2202      	movs	r2, #2
 800f0cc:	701a      	strb	r2, [r3, #0]
    break;
 800f0ce:	e0f2      	b.n	800f2b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	885b      	ldrh	r3, [r3, #2]
 800f0d4:	b2db      	uxtb	r3, r3
 800f0d6:	2b05      	cmp	r3, #5
 800f0d8:	f200 80ac 	bhi.w	800f234 <USBD_GetDescriptor+0x204>
 800f0dc:	a201      	add	r2, pc, #4	; (adr r2, 800f0e4 <USBD_GetDescriptor+0xb4>)
 800f0de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0e2:	bf00      	nop
 800f0e4:	0800f0fd 	.word	0x0800f0fd
 800f0e8:	0800f131 	.word	0x0800f131
 800f0ec:	0800f165 	.word	0x0800f165
 800f0f0:	0800f199 	.word	0x0800f199
 800f0f4:	0800f1cd 	.word	0x0800f1cd
 800f0f8:	0800f201 	.word	0x0800f201
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f0fc:	687b      	ldr	r3, [r7, #4]
 800f0fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f102:	685b      	ldr	r3, [r3, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00b      	beq.n	800f120 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f10e:	685b      	ldr	r3, [r3, #4]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	7c12      	ldrb	r2, [r2, #16]
 800f114:	f107 0108 	add.w	r1, r7, #8
 800f118:	4610      	mov	r0, r2
 800f11a:	4798      	blx	r3
 800f11c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f11e:	e091      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f120:	6839      	ldr	r1, [r7, #0]
 800f122:	6878      	ldr	r0, [r7, #4]
 800f124:	f000 faaa 	bl	800f67c <USBD_CtlError>
        err++;
 800f128:	7afb      	ldrb	r3, [r7, #11]
 800f12a:	3301      	adds	r3, #1
 800f12c:	72fb      	strb	r3, [r7, #11]
      break;
 800f12e:	e089      	b.n	800f244 <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f136:	689b      	ldr	r3, [r3, #8]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d00b      	beq.n	800f154 <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f142:	689b      	ldr	r3, [r3, #8]
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	7c12      	ldrb	r2, [r2, #16]
 800f148:	f107 0108 	add.w	r1, r7, #8
 800f14c:	4610      	mov	r0, r2
 800f14e:	4798      	blx	r3
 800f150:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f152:	e077      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f154:	6839      	ldr	r1, [r7, #0]
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 fa90 	bl	800f67c <USBD_CtlError>
        err++;
 800f15c:	7afb      	ldrb	r3, [r7, #11]
 800f15e:	3301      	adds	r3, #1
 800f160:	72fb      	strb	r3, [r7, #11]
      break;
 800f162:	e06f      	b.n	800f244 <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f16a:	68db      	ldr	r3, [r3, #12]
 800f16c:	2b00      	cmp	r3, #0
 800f16e:	d00b      	beq.n	800f188 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f176:	68db      	ldr	r3, [r3, #12]
 800f178:	687a      	ldr	r2, [r7, #4]
 800f17a:	7c12      	ldrb	r2, [r2, #16]
 800f17c:	f107 0108 	add.w	r1, r7, #8
 800f180:	4610      	mov	r0, r2
 800f182:	4798      	blx	r3
 800f184:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f186:	e05d      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f188:	6839      	ldr	r1, [r7, #0]
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f000 fa76 	bl	800f67c <USBD_CtlError>
        err++;
 800f190:	7afb      	ldrb	r3, [r7, #11]
 800f192:	3301      	adds	r3, #1
 800f194:	72fb      	strb	r3, [r7, #11]
      break;
 800f196:	e055      	b.n	800f244 <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f19e:	691b      	ldr	r3, [r3, #16]
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d00b      	beq.n	800f1bc <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1aa:	691b      	ldr	r3, [r3, #16]
 800f1ac:	687a      	ldr	r2, [r7, #4]
 800f1ae:	7c12      	ldrb	r2, [r2, #16]
 800f1b0:	f107 0108 	add.w	r1, r7, #8
 800f1b4:	4610      	mov	r0, r2
 800f1b6:	4798      	blx	r3
 800f1b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1ba:	e043      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	f000 fa5c 	bl	800f67c <USBD_CtlError>
        err++;
 800f1c4:	7afb      	ldrb	r3, [r7, #11]
 800f1c6:	3301      	adds	r3, #1
 800f1c8:	72fb      	strb	r3, [r7, #11]
      break;
 800f1ca:	e03b      	b.n	800f244 <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1d2:	695b      	ldr	r3, [r3, #20]
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d00b      	beq.n	800f1f0 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f1de:	695b      	ldr	r3, [r3, #20]
 800f1e0:	687a      	ldr	r2, [r7, #4]
 800f1e2:	7c12      	ldrb	r2, [r2, #16]
 800f1e4:	f107 0108 	add.w	r1, r7, #8
 800f1e8:	4610      	mov	r0, r2
 800f1ea:	4798      	blx	r3
 800f1ec:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f1ee:	e029      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f1f0:	6839      	ldr	r1, [r7, #0]
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f000 fa42 	bl	800f67c <USBD_CtlError>
        err++;
 800f1f8:	7afb      	ldrb	r3, [r7, #11]
 800f1fa:	3301      	adds	r3, #1
 800f1fc:	72fb      	strb	r3, [r7, #11]
      break;
 800f1fe:	e021      	b.n	800f244 <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f206:	699b      	ldr	r3, [r3, #24]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d00b      	beq.n	800f224 <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f212:	699b      	ldr	r3, [r3, #24]
 800f214:	687a      	ldr	r2, [r7, #4]
 800f216:	7c12      	ldrb	r2, [r2, #16]
 800f218:	f107 0108 	add.w	r1, r7, #8
 800f21c:	4610      	mov	r0, r2
 800f21e:	4798      	blx	r3
 800f220:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f222:	e00f      	b.n	800f244 <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 800f224:	6839      	ldr	r1, [r7, #0]
 800f226:	6878      	ldr	r0, [r7, #4]
 800f228:	f000 fa28 	bl	800f67c <USBD_CtlError>
        err++;
 800f22c:	7afb      	ldrb	r3, [r7, #11]
 800f22e:	3301      	adds	r3, #1
 800f230:	72fb      	strb	r3, [r7, #11]
      break;
 800f232:	e007      	b.n	800f244 <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 800f234:	6839      	ldr	r1, [r7, #0]
 800f236:	6878      	ldr	r0, [r7, #4]
 800f238:	f000 fa20 	bl	800f67c <USBD_CtlError>
      err++;
 800f23c:	7afb      	ldrb	r3, [r7, #11]
 800f23e:	3301      	adds	r3, #1
 800f240:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 800f242:	bf00      	nop
    }
    break;
 800f244:	e037      	b.n	800f2b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	7c1b      	ldrb	r3, [r3, #16]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d109      	bne.n	800f262 <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f256:	f107 0208 	add.w	r2, r7, #8
 800f25a:	4610      	mov	r0, r2
 800f25c:	4798      	blx	r3
 800f25e:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f260:	e029      	b.n	800f2b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f262:	6839      	ldr	r1, [r7, #0]
 800f264:	6878      	ldr	r0, [r7, #4]
 800f266:	f000 fa09 	bl	800f67c <USBD_CtlError>
      err++;
 800f26a:	7afb      	ldrb	r3, [r7, #11]
 800f26c:	3301      	adds	r3, #1
 800f26e:	72fb      	strb	r3, [r7, #11]
    break;
 800f270:	e021      	b.n	800f2b6 <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	7c1b      	ldrb	r3, [r3, #16]
 800f276:	2b00      	cmp	r3, #0
 800f278:	d10d      	bne.n	800f296 <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f282:	f107 0208 	add.w	r2, r7, #8
 800f286:	4610      	mov	r0, r2
 800f288:	4798      	blx	r3
 800f28a:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	3301      	adds	r3, #1
 800f290:	2207      	movs	r2, #7
 800f292:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 800f294:	e00f      	b.n	800f2b6 <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 800f296:	6839      	ldr	r1, [r7, #0]
 800f298:	6878      	ldr	r0, [r7, #4]
 800f29a:	f000 f9ef 	bl	800f67c <USBD_CtlError>
      err++;
 800f29e:	7afb      	ldrb	r3, [r7, #11]
 800f2a0:	3301      	adds	r3, #1
 800f2a2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2a4:	e007      	b.n	800f2b6 <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 800f2a6:	6839      	ldr	r1, [r7, #0]
 800f2a8:	6878      	ldr	r0, [r7, #4]
 800f2aa:	f000 f9e7 	bl	800f67c <USBD_CtlError>
    err++;
 800f2ae:	7afb      	ldrb	r3, [r7, #11]
 800f2b0:	3301      	adds	r3, #1
 800f2b2:	72fb      	strb	r3, [r7, #11]
    break;
 800f2b4:	bf00      	nop
  }

  if (err != 0U)
 800f2b6:	7afb      	ldrb	r3, [r7, #11]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d11e      	bne.n	800f2fa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	88db      	ldrh	r3, [r3, #6]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d016      	beq.n	800f2f2 <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 800f2c4:	893b      	ldrh	r3, [r7, #8]
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00e      	beq.n	800f2e8 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	88da      	ldrh	r2, [r3, #6]
 800f2ce:	893b      	ldrh	r3, [r7, #8]
 800f2d0:	4293      	cmp	r3, r2
 800f2d2:	bf28      	it	cs
 800f2d4:	4613      	movcs	r3, r2
 800f2d6:	b29b      	uxth	r3, r3
 800f2d8:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 800f2da:	893b      	ldrh	r3, [r7, #8]
 800f2dc:	461a      	mov	r2, r3
 800f2de:	68f9      	ldr	r1, [r7, #12]
 800f2e0:	6878      	ldr	r0, [r7, #4]
 800f2e2:	f000 fa3c 	bl	800f75e <USBD_CtlSendData>
 800f2e6:	e009      	b.n	800f2fc <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 800f2e8:	6839      	ldr	r1, [r7, #0]
 800f2ea:	6878      	ldr	r0, [r7, #4]
 800f2ec:	f000 f9c6 	bl	800f67c <USBD_CtlError>
 800f2f0:	e004      	b.n	800f2fc <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 800f2f2:	6878      	ldr	r0, [r7, #4]
 800f2f4:	f000 fa70 	bl	800f7d8 <USBD_CtlSendStatus>
 800f2f8:	e000      	b.n	800f2fc <USBD_GetDescriptor+0x2cc>
    return;
 800f2fa:	bf00      	nop
    }
  }
}
 800f2fc:	3710      	adds	r7, #16
 800f2fe:	46bd      	mov	sp, r7
 800f300:	bd80      	pop	{r7, pc}
 800f302:	bf00      	nop

0800f304 <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
 800f30c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f30e:	683b      	ldr	r3, [r7, #0]
 800f310:	889b      	ldrh	r3, [r3, #4]
 800f312:	2b00      	cmp	r3, #0
 800f314:	d130      	bne.n	800f378 <USBD_SetAddress+0x74>
 800f316:	683b      	ldr	r3, [r7, #0]
 800f318:	88db      	ldrh	r3, [r3, #6]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d12c      	bne.n	800f378 <USBD_SetAddress+0x74>
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	885b      	ldrh	r3, [r3, #2]
 800f322:	2b7f      	cmp	r3, #127	; 0x7f
 800f324:	d828      	bhi.n	800f378 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f326:	683b      	ldr	r3, [r7, #0]
 800f328:	885b      	ldrh	r3, [r3, #2]
 800f32a:	b2db      	uxtb	r3, r3
 800f32c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f330:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f338:	2b03      	cmp	r3, #3
 800f33a:	d104      	bne.n	800f346 <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 800f33c:	6839      	ldr	r1, [r7, #0]
 800f33e:	6878      	ldr	r0, [r7, #4]
 800f340:	f000 f99c 	bl	800f67c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f344:	e01c      	b.n	800f380 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	7bfa      	ldrb	r2, [r7, #15]
 800f34a:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f34e:	7bfb      	ldrb	r3, [r7, #15]
 800f350:	4619      	mov	r1, r3
 800f352:	6878      	ldr	r0, [r7, #4]
 800f354:	f000 fee3 	bl	801011e <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f358:	6878      	ldr	r0, [r7, #4]
 800f35a:	f000 fa3d 	bl	800f7d8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f35e:	7bfb      	ldrb	r3, [r7, #15]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d004      	beq.n	800f36e <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f364:	687b      	ldr	r3, [r7, #4]
 800f366:	2202      	movs	r2, #2
 800f368:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f36c:	e008      	b.n	800f380 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2201      	movs	r2, #1
 800f372:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f376:	e003      	b.n	800f380 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f378:	6839      	ldr	r1, [r7, #0]
 800f37a:	6878      	ldr	r0, [r7, #4]
 800f37c:	f000 f97e 	bl	800f67c <USBD_CtlError>
  }
}
 800f380:	bf00      	nop
 800f382:	3710      	adds	r7, #16
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f388:	b580      	push	{r7, lr}
 800f38a:	b084      	sub	sp, #16
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f392:	2300      	movs	r3, #0
 800f394:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f396:	683b      	ldr	r3, [r7, #0]
 800f398:	885b      	ldrh	r3, [r3, #2]
 800f39a:	b2da      	uxtb	r2, r3
 800f39c:	4b4b      	ldr	r3, [pc, #300]	; (800f4cc <USBD_SetConfig+0x144>)
 800f39e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f3a0:	4b4a      	ldr	r3, [pc, #296]	; (800f4cc <USBD_SetConfig+0x144>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	2b01      	cmp	r3, #1
 800f3a6:	d905      	bls.n	800f3b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f3a8:	6839      	ldr	r1, [r7, #0]
 800f3aa:	6878      	ldr	r0, [r7, #4]
 800f3ac:	f000 f966 	bl	800f67c <USBD_CtlError>
    return USBD_FAIL;
 800f3b0:	2303      	movs	r3, #3
 800f3b2:	e087      	b.n	800f4c4 <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f3ba:	2b02      	cmp	r3, #2
 800f3bc:	d002      	beq.n	800f3c4 <USBD_SetConfig+0x3c>
 800f3be:	2b03      	cmp	r3, #3
 800f3c0:	d025      	beq.n	800f40e <USBD_SetConfig+0x86>
 800f3c2:	e071      	b.n	800f4a8 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 800f3c4:	4b41      	ldr	r3, [pc, #260]	; (800f4cc <USBD_SetConfig+0x144>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d01c      	beq.n	800f406 <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 800f3cc:	4b3f      	ldr	r3, [pc, #252]	; (800f4cc <USBD_SetConfig+0x144>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	461a      	mov	r2, r3
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f3d6:	4b3d      	ldr	r3, [pc, #244]	; (800f4cc <USBD_SetConfig+0x144>)
 800f3d8:	781b      	ldrb	r3, [r3, #0]
 800f3da:	4619      	mov	r1, r3
 800f3dc:	6878      	ldr	r0, [r7, #4]
 800f3de:	f7ff f9a8 	bl	800e732 <USBD_SetClassConfig>
 800f3e2:	4603      	mov	r3, r0
 800f3e4:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 800f3e6:	7bfb      	ldrb	r3, [r7, #15]
 800f3e8:	2b00      	cmp	r3, #0
 800f3ea:	d004      	beq.n	800f3f6 <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 800f3ec:	6839      	ldr	r1, [r7, #0]
 800f3ee:	6878      	ldr	r0, [r7, #4]
 800f3f0:	f000 f944 	bl	800f67c <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f3f4:	e065      	b.n	800f4c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f3f6:	6878      	ldr	r0, [r7, #4]
 800f3f8:	f000 f9ee 	bl	800f7d8 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	2203      	movs	r2, #3
 800f400:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f404:	e05d      	b.n	800f4c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f406:	6878      	ldr	r0, [r7, #4]
 800f408:	f000 f9e6 	bl	800f7d8 <USBD_CtlSendStatus>
    break;
 800f40c:	e059      	b.n	800f4c2 <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 800f40e:	4b2f      	ldr	r3, [pc, #188]	; (800f4cc <USBD_SetConfig+0x144>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d112      	bne.n	800f43c <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	2202      	movs	r2, #2
 800f41a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 800f41e:	4b2b      	ldr	r3, [pc, #172]	; (800f4cc <USBD_SetConfig+0x144>)
 800f420:	781b      	ldrb	r3, [r3, #0]
 800f422:	461a      	mov	r2, r3
 800f424:	687b      	ldr	r3, [r7, #4]
 800f426:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f428:	4b28      	ldr	r3, [pc, #160]	; (800f4cc <USBD_SetConfig+0x144>)
 800f42a:	781b      	ldrb	r3, [r3, #0]
 800f42c:	4619      	mov	r1, r3
 800f42e:	6878      	ldr	r0, [r7, #4]
 800f430:	f7ff f99b 	bl	800e76a <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 800f434:	6878      	ldr	r0, [r7, #4]
 800f436:	f000 f9cf 	bl	800f7d8 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 800f43a:	e042      	b.n	800f4c2 <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 800f43c:	4b23      	ldr	r3, [pc, #140]	; (800f4cc <USBD_SetConfig+0x144>)
 800f43e:	781b      	ldrb	r3, [r3, #0]
 800f440:	461a      	mov	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	685b      	ldr	r3, [r3, #4]
 800f446:	429a      	cmp	r2, r3
 800f448:	d02a      	beq.n	800f4a0 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	685b      	ldr	r3, [r3, #4]
 800f44e:	b2db      	uxtb	r3, r3
 800f450:	4619      	mov	r1, r3
 800f452:	6878      	ldr	r0, [r7, #4]
 800f454:	f7ff f989 	bl	800e76a <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 800f458:	4b1c      	ldr	r3, [pc, #112]	; (800f4cc <USBD_SetConfig+0x144>)
 800f45a:	781b      	ldrb	r3, [r3, #0]
 800f45c:	461a      	mov	r2, r3
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 800f462:	4b1a      	ldr	r3, [pc, #104]	; (800f4cc <USBD_SetConfig+0x144>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	4619      	mov	r1, r3
 800f468:	6878      	ldr	r0, [r7, #4]
 800f46a:	f7ff f962 	bl	800e732 <USBD_SetClassConfig>
 800f46e:	4603      	mov	r3, r0
 800f470:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 800f472:	7bfb      	ldrb	r3, [r7, #15]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d00f      	beq.n	800f498 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 800f478:	6839      	ldr	r1, [r7, #0]
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	f000 f8fe 	bl	800f67c <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f480:	687b      	ldr	r3, [r7, #4]
 800f482:	685b      	ldr	r3, [r3, #4]
 800f484:	b2db      	uxtb	r3, r3
 800f486:	4619      	mov	r1, r3
 800f488:	6878      	ldr	r0, [r7, #4]
 800f48a:	f7ff f96e 	bl	800e76a <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	2202      	movs	r2, #2
 800f492:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 800f496:	e014      	b.n	800f4c2 <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 800f498:	6878      	ldr	r0, [r7, #4]
 800f49a:	f000 f99d 	bl	800f7d8 <USBD_CtlSendStatus>
    break;
 800f49e:	e010      	b.n	800f4c2 <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 800f4a0:	6878      	ldr	r0, [r7, #4]
 800f4a2:	f000 f999 	bl	800f7d8 <USBD_CtlSendStatus>
    break;
 800f4a6:	e00c      	b.n	800f4c2 <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 800f4a8:	6839      	ldr	r1, [r7, #0]
 800f4aa:	6878      	ldr	r0, [r7, #4]
 800f4ac:	f000 f8e6 	bl	800f67c <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f4b0:	4b06      	ldr	r3, [pc, #24]	; (800f4cc <USBD_SetConfig+0x144>)
 800f4b2:	781b      	ldrb	r3, [r3, #0]
 800f4b4:	4619      	mov	r1, r3
 800f4b6:	6878      	ldr	r0, [r7, #4]
 800f4b8:	f7ff f957 	bl	800e76a <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 800f4bc:	2303      	movs	r3, #3
 800f4be:	73fb      	strb	r3, [r7, #15]
    break;
 800f4c0:	bf00      	nop
  }

  return ret;
 800f4c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	3710      	adds	r7, #16
 800f4c8:	46bd      	mov	sp, r7
 800f4ca:	bd80      	pop	{r7, pc}
 800f4cc:	240001f0 	.word	0x240001f0

0800f4d0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f4d0:	b580      	push	{r7, lr}
 800f4d2:	b082      	sub	sp, #8
 800f4d4:	af00      	add	r7, sp, #0
 800f4d6:	6078      	str	r0, [r7, #4]
 800f4d8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	88db      	ldrh	r3, [r3, #6]
 800f4de:	2b01      	cmp	r3, #1
 800f4e0:	d004      	beq.n	800f4ec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f4e2:	6839      	ldr	r1, [r7, #0]
 800f4e4:	6878      	ldr	r0, [r7, #4]
 800f4e6:	f000 f8c9 	bl	800f67c <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 800f4ea:	e021      	b.n	800f530 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f4f2:	2b01      	cmp	r3, #1
 800f4f4:	db17      	blt.n	800f526 <USBD_GetConfig+0x56>
 800f4f6:	2b02      	cmp	r3, #2
 800f4f8:	dd02      	ble.n	800f500 <USBD_GetConfig+0x30>
 800f4fa:	2b03      	cmp	r3, #3
 800f4fc:	d00b      	beq.n	800f516 <USBD_GetConfig+0x46>
 800f4fe:	e012      	b.n	800f526 <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	3308      	adds	r3, #8
 800f50a:	2201      	movs	r2, #1
 800f50c:	4619      	mov	r1, r3
 800f50e:	6878      	ldr	r0, [r7, #4]
 800f510:	f000 f925 	bl	800f75e <USBD_CtlSendData>
      break;
 800f514:	e00c      	b.n	800f530 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f516:	687b      	ldr	r3, [r7, #4]
 800f518:	3304      	adds	r3, #4
 800f51a:	2201      	movs	r2, #1
 800f51c:	4619      	mov	r1, r3
 800f51e:	6878      	ldr	r0, [r7, #4]
 800f520:	f000 f91d 	bl	800f75e <USBD_CtlSendData>
      break;
 800f524:	e004      	b.n	800f530 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 800f526:	6839      	ldr	r1, [r7, #0]
 800f528:	6878      	ldr	r0, [r7, #4]
 800f52a:	f000 f8a7 	bl	800f67c <USBD_CtlError>
      break;
 800f52e:	bf00      	nop
}
 800f530:	bf00      	nop
 800f532:	3708      	adds	r7, #8
 800f534:	46bd      	mov	sp, r7
 800f536:	bd80      	pop	{r7, pc}

0800f538 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f538:	b580      	push	{r7, lr}
 800f53a:	b082      	sub	sp, #8
 800f53c:	af00      	add	r7, sp, #0
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f548:	3b01      	subs	r3, #1
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d81e      	bhi.n	800f58c <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 800f54e:	683b      	ldr	r3, [r7, #0]
 800f550:	88db      	ldrh	r3, [r3, #6]
 800f552:	2b02      	cmp	r3, #2
 800f554:	d004      	beq.n	800f560 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800f556:	6839      	ldr	r1, [r7, #0]
 800f558:	6878      	ldr	r0, [r7, #4]
 800f55a:	f000 f88f 	bl	800f67c <USBD_CtlError>
      break;
 800f55e:	e01a      	b.n	800f596 <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	2201      	movs	r2, #1
 800f564:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800f56c:	2b00      	cmp	r3, #0
 800f56e:	d005      	beq.n	800f57c <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	68db      	ldr	r3, [r3, #12]
 800f574:	f043 0202 	orr.w	r2, r3, #2
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	330c      	adds	r3, #12
 800f580:	2202      	movs	r2, #2
 800f582:	4619      	mov	r1, r3
 800f584:	6878      	ldr	r0, [r7, #4]
 800f586:	f000 f8ea 	bl	800f75e <USBD_CtlSendData>
    break;
 800f58a:	e004      	b.n	800f596 <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 800f58c:	6839      	ldr	r1, [r7, #0]
 800f58e:	6878      	ldr	r0, [r7, #4]
 800f590:	f000 f874 	bl	800f67c <USBD_CtlError>
    break;
 800f594:	bf00      	nop
  }
}
 800f596:	bf00      	nop
 800f598:	3708      	adds	r7, #8
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}

0800f59e <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f59e:	b580      	push	{r7, lr}
 800f5a0:	b082      	sub	sp, #8
 800f5a2:	af00      	add	r7, sp, #0
 800f5a4:	6078      	str	r0, [r7, #4]
 800f5a6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	885b      	ldrh	r3, [r3, #2]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d106      	bne.n	800f5be <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2201      	movs	r2, #1
 800f5b4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800f5b8:	6878      	ldr	r0, [r7, #4]
 800f5ba:	f000 f90d 	bl	800f7d8 <USBD_CtlSendStatus>
  }
}
 800f5be:	bf00      	nop
 800f5c0:	3708      	adds	r7, #8
 800f5c2:	46bd      	mov	sp, r7
 800f5c4:	bd80      	pop	{r7, pc}

0800f5c6 <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f5c6:	b580      	push	{r7, lr}
 800f5c8:	b082      	sub	sp, #8
 800f5ca:	af00      	add	r7, sp, #0
 800f5cc:	6078      	str	r0, [r7, #4]
 800f5ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f5d6:	3b01      	subs	r3, #1
 800f5d8:	2b02      	cmp	r3, #2
 800f5da:	d80b      	bhi.n	800f5f4 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800f5dc:	683b      	ldr	r3, [r7, #0]
 800f5de:	885b      	ldrh	r3, [r3, #2]
 800f5e0:	2b01      	cmp	r3, #1
 800f5e2:	d10c      	bne.n	800f5fe <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800f5ec:	6878      	ldr	r0, [r7, #4]
 800f5ee:	f000 f8f3 	bl	800f7d8 <USBD_CtlSendStatus>
      }
      break;
 800f5f2:	e004      	b.n	800f5fe <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 800f5f4:	6839      	ldr	r1, [r7, #0]
 800f5f6:	6878      	ldr	r0, [r7, #4]
 800f5f8:	f000 f840 	bl	800f67c <USBD_CtlError>
      break;
 800f5fc:	e000      	b.n	800f600 <USBD_ClrFeature+0x3a>
      break;
 800f5fe:	bf00      	nop
  }
}
 800f600:	bf00      	nop
 800f602:	3708      	adds	r7, #8
 800f604:	46bd      	mov	sp, r7
 800f606:	bd80      	pop	{r7, pc}

0800f608 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800f608:	b580      	push	{r7, lr}
 800f60a:	b084      	sub	sp, #16
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	6078      	str	r0, [r7, #4]
 800f610:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800f616:	68fb      	ldr	r3, [r7, #12]
 800f618:	781a      	ldrb	r2, [r3, #0]
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	3301      	adds	r3, #1
 800f622:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	781a      	ldrb	r2, [r3, #0]
 800f628:	687b      	ldr	r3, [r7, #4]
 800f62a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800f62c:	68fb      	ldr	r3, [r7, #12]
 800f62e:	3301      	adds	r3, #1
 800f630:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800f632:	68f8      	ldr	r0, [r7, #12]
 800f634:	f7ff fad4 	bl	800ebe0 <SWAPBYTE>
 800f638:	4603      	mov	r3, r0
 800f63a:	461a      	mov	r2, r3
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	3301      	adds	r3, #1
 800f644:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	3301      	adds	r3, #1
 800f64a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800f64c:	68f8      	ldr	r0, [r7, #12]
 800f64e:	f7ff fac7 	bl	800ebe0 <SWAPBYTE>
 800f652:	4603      	mov	r3, r0
 800f654:	461a      	mov	r2, r3
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	3301      	adds	r3, #1
 800f65e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	3301      	adds	r3, #1
 800f664:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800f666:	68f8      	ldr	r0, [r7, #12]
 800f668:	f7ff faba 	bl	800ebe0 <SWAPBYTE>
 800f66c:	4603      	mov	r3, r0
 800f66e:	461a      	mov	r2, r3
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	80da      	strh	r2, [r3, #6]
}
 800f674:	bf00      	nop
 800f676:	3710      	adds	r7, #16
 800f678:	46bd      	mov	sp, r7
 800f67a:	bd80      	pop	{r7, pc}

0800f67c <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f67c:	b580      	push	{r7, lr}
 800f67e:	b082      	sub	sp, #8
 800f680:	af00      	add	r7, sp, #0
 800f682:	6078      	str	r0, [r7, #4]
 800f684:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800f686:	2180      	movs	r1, #128	; 0x80
 800f688:	6878      	ldr	r0, [r7, #4]
 800f68a:	f000 fcde 	bl	801004a <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800f68e:	2100      	movs	r1, #0
 800f690:	6878      	ldr	r0, [r7, #4]
 800f692:	f000 fcda 	bl	801004a <USBD_LL_StallEP>
}
 800f696:	bf00      	nop
 800f698:	3708      	adds	r7, #8
 800f69a:	46bd      	mov	sp, r7
 800f69c:	bd80      	pop	{r7, pc}

0800f69e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b086      	sub	sp, #24
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	60f8      	str	r0, [r7, #12]
 800f6a6:	60b9      	str	r1, [r7, #8]
 800f6a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800f6aa:	2300      	movs	r3, #0
 800f6ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800f6ae:	68fb      	ldr	r3, [r7, #12]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d036      	beq.n	800f722 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800f6b8:	6938      	ldr	r0, [r7, #16]
 800f6ba:	f000 f836 	bl	800f72a <USBD_GetLen>
 800f6be:	4603      	mov	r3, r0
 800f6c0:	3301      	adds	r3, #1
 800f6c2:	b29b      	uxth	r3, r3
 800f6c4:	005b      	lsls	r3, r3, #1
 800f6c6:	b29a      	uxth	r2, r3
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800f6cc:	7dfb      	ldrb	r3, [r7, #23]
 800f6ce:	68ba      	ldr	r2, [r7, #8]
 800f6d0:	4413      	add	r3, r2
 800f6d2:	687a      	ldr	r2, [r7, #4]
 800f6d4:	7812      	ldrb	r2, [r2, #0]
 800f6d6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6d8:	7dfb      	ldrb	r3, [r7, #23]
 800f6da:	3301      	adds	r3, #1
 800f6dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800f6de:	7dfb      	ldrb	r3, [r7, #23]
 800f6e0:	68ba      	ldr	r2, [r7, #8]
 800f6e2:	4413      	add	r3, r2
 800f6e4:	2203      	movs	r2, #3
 800f6e6:	701a      	strb	r2, [r3, #0]
  idx++;
 800f6e8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ea:	3301      	adds	r3, #1
 800f6ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800f6ee:	e013      	b.n	800f718 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800f6f0:	7dfb      	ldrb	r3, [r7, #23]
 800f6f2:	68ba      	ldr	r2, [r7, #8]
 800f6f4:	4413      	add	r3, r2
 800f6f6:	693a      	ldr	r2, [r7, #16]
 800f6f8:	7812      	ldrb	r2, [r2, #0]
 800f6fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	3301      	adds	r3, #1
 800f700:	613b      	str	r3, [r7, #16]
    idx++;
 800f702:	7dfb      	ldrb	r3, [r7, #23]
 800f704:	3301      	adds	r3, #1
 800f706:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800f708:	7dfb      	ldrb	r3, [r7, #23]
 800f70a:	68ba      	ldr	r2, [r7, #8]
 800f70c:	4413      	add	r3, r2
 800f70e:	2200      	movs	r2, #0
 800f710:	701a      	strb	r2, [r3, #0]
    idx++;
 800f712:	7dfb      	ldrb	r3, [r7, #23]
 800f714:	3301      	adds	r3, #1
 800f716:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800f718:	693b      	ldr	r3, [r7, #16]
 800f71a:	781b      	ldrb	r3, [r3, #0]
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d1e7      	bne.n	800f6f0 <USBD_GetString+0x52>
 800f720:	e000      	b.n	800f724 <USBD_GetString+0x86>
    return;
 800f722:	bf00      	nop
  }
}
 800f724:	3718      	adds	r7, #24
 800f726:	46bd      	mov	sp, r7
 800f728:	bd80      	pop	{r7, pc}

0800f72a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800f72a:	b480      	push	{r7}
 800f72c:	b085      	sub	sp, #20
 800f72e:	af00      	add	r7, sp, #0
 800f730:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800f732:	2300      	movs	r3, #0
 800f734:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800f73a:	e005      	b.n	800f748 <USBD_GetLen+0x1e>
  {
    len++;
 800f73c:	7bfb      	ldrb	r3, [r7, #15]
 800f73e:	3301      	adds	r3, #1
 800f740:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800f742:	68bb      	ldr	r3, [r7, #8]
 800f744:	3301      	adds	r3, #1
 800f746:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800f748:	68bb      	ldr	r3, [r7, #8]
 800f74a:	781b      	ldrb	r3, [r3, #0]
 800f74c:	2b00      	cmp	r3, #0
 800f74e:	d1f5      	bne.n	800f73c <USBD_GetLen+0x12>
  }

  return len;
 800f750:	7bfb      	ldrb	r3, [r7, #15]
}
 800f752:	4618      	mov	r0, r3
 800f754:	3714      	adds	r7, #20
 800f756:	46bd      	mov	sp, r7
 800f758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f75c:	4770      	bx	lr

0800f75e <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f75e:	b580      	push	{r7, lr}
 800f760:	b084      	sub	sp, #16
 800f762:	af00      	add	r7, sp, #0
 800f764:	60f8      	str	r0, [r7, #12]
 800f766:	60b9      	str	r1, [r7, #8]
 800f768:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f76a:	68fb      	ldr	r3, [r7, #12]
 800f76c:	2202      	movs	r2, #2
 800f76e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	687a      	ldr	r2, [r7, #4]
 800f776:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	687a      	ldr	r2, [r7, #4]
 800f77c:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	68ba      	ldr	r2, [r7, #8]
 800f782:	2100      	movs	r1, #0
 800f784:	68f8      	ldr	r0, [r7, #12]
 800f786:	f000 fce9 	bl	801015c <USBD_LL_Transmit>

  return USBD_OK;
 800f78a:	2300      	movs	r3, #0
}
 800f78c:	4618      	mov	r0, r3
 800f78e:	3710      	adds	r7, #16
 800f790:	46bd      	mov	sp, r7
 800f792:	bd80      	pop	{r7, pc}

0800f794 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	2100      	movs	r1, #0
 800f7a6:	68f8      	ldr	r0, [r7, #12]
 800f7a8:	f000 fcd8 	bl	801015c <USBD_LL_Transmit>

  return USBD_OK;
 800f7ac:	2300      	movs	r3, #0
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	3710      	adds	r7, #16
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	bd80      	pop	{r7, pc}

0800f7b6 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f7b6:	b580      	push	{r7, lr}
 800f7b8:	b084      	sub	sp, #16
 800f7ba:	af00      	add	r7, sp, #0
 800f7bc:	60f8      	str	r0, [r7, #12]
 800f7be:	60b9      	str	r1, [r7, #8]
 800f7c0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	68ba      	ldr	r2, [r7, #8]
 800f7c6:	2100      	movs	r1, #0
 800f7c8:	68f8      	ldr	r0, [r7, #12]
 800f7ca:	f000 fce8 	bl	801019e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f7ce:	2300      	movs	r3, #0
}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3710      	adds	r7, #16
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b082      	sub	sp, #8
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2204      	movs	r2, #4
 800f7e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f7e8:	2300      	movs	r3, #0
 800f7ea:	2200      	movs	r2, #0
 800f7ec:	2100      	movs	r1, #0
 800f7ee:	6878      	ldr	r0, [r7, #4]
 800f7f0:	f000 fcb4 	bl	801015c <USBD_LL_Transmit>

  return USBD_OK;
 800f7f4:	2300      	movs	r3, #0
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3708      	adds	r7, #8
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f7fe:	b580      	push	{r7, lr}
 800f800:	b082      	sub	sp, #8
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2205      	movs	r2, #5
 800f80a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f80e:	2300      	movs	r3, #0
 800f810:	2200      	movs	r2, #0
 800f812:	2100      	movs	r1, #0
 800f814:	6878      	ldr	r0, [r7, #4]
 800f816:	f000 fcc2 	bl	801019e <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f81a:	2300      	movs	r3, #0
}
 800f81c:	4618      	mov	r0, r3
 800f81e:	3708      	adds	r7, #8
 800f820:	46bd      	mov	sp, r7
 800f822:	bd80      	pop	{r7, pc}

0800f824 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800f824:	b480      	push	{r7}
 800f826:	b087      	sub	sp, #28
 800f828:	af00      	add	r7, sp, #0
 800f82a:	60f8      	str	r0, [r7, #12]
 800f82c:	60b9      	str	r1, [r7, #8]
 800f82e:	4613      	mov	r3, r2
 800f830:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800f832:	2301      	movs	r3, #1
 800f834:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800f836:	2300      	movs	r3, #0
 800f838:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800f83a:	4b1f      	ldr	r3, [pc, #124]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f83c:	7a5b      	ldrb	r3, [r3, #9]
 800f83e:	b2db      	uxtb	r3, r3
 800f840:	2b00      	cmp	r3, #0
 800f842:	d131      	bne.n	800f8a8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800f844:	4b1c      	ldr	r3, [pc, #112]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f846:	7a5b      	ldrb	r3, [r3, #9]
 800f848:	b2db      	uxtb	r3, r3
 800f84a:	461a      	mov	r2, r3
 800f84c:	4b1a      	ldr	r3, [pc, #104]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f84e:	2100      	movs	r1, #0
 800f850:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800f852:	4b19      	ldr	r3, [pc, #100]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f854:	7a5b      	ldrb	r3, [r3, #9]
 800f856:	b2db      	uxtb	r3, r3
 800f858:	4a17      	ldr	r2, [pc, #92]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f85a:	009b      	lsls	r3, r3, #2
 800f85c:	4413      	add	r3, r2
 800f85e:	68fa      	ldr	r2, [r7, #12]
 800f860:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800f862:	4b15      	ldr	r3, [pc, #84]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f864:	7a5b      	ldrb	r3, [r3, #9]
 800f866:	b2db      	uxtb	r3, r3
 800f868:	461a      	mov	r2, r3
 800f86a:	4b13      	ldr	r3, [pc, #76]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f86c:	4413      	add	r3, r2
 800f86e:	79fa      	ldrb	r2, [r7, #7]
 800f870:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800f872:	4b11      	ldr	r3, [pc, #68]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f874:	7a5b      	ldrb	r3, [r3, #9]
 800f876:	b2db      	uxtb	r3, r3
 800f878:	1c5a      	adds	r2, r3, #1
 800f87a:	b2d1      	uxtb	r1, r2
 800f87c:	4a0e      	ldr	r2, [pc, #56]	; (800f8b8 <FATFS_LinkDriverEx+0x94>)
 800f87e:	7251      	strb	r1, [r2, #9]
 800f880:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800f882:	7dbb      	ldrb	r3, [r7, #22]
 800f884:	3330      	adds	r3, #48	; 0x30
 800f886:	b2da      	uxtb	r2, r3
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800f88c:	68bb      	ldr	r3, [r7, #8]
 800f88e:	3301      	adds	r3, #1
 800f890:	223a      	movs	r2, #58	; 0x3a
 800f892:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	3302      	adds	r3, #2
 800f898:	222f      	movs	r2, #47	; 0x2f
 800f89a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	3303      	adds	r3, #3
 800f8a0:	2200      	movs	r2, #0
 800f8a2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800f8a4:	2300      	movs	r3, #0
 800f8a6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800f8a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800f8aa:	4618      	mov	r0, r3
 800f8ac:	371c      	adds	r7, #28
 800f8ae:	46bd      	mov	sp, r7
 800f8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b4:	4770      	bx	lr
 800f8b6:	bf00      	nop
 800f8b8:	240001f4 	.word	0x240001f4

0800f8bc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b082      	sub	sp, #8
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	6078      	str	r0, [r7, #4]
 800f8c4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	6839      	ldr	r1, [r7, #0]
 800f8ca:	6878      	ldr	r0, [r7, #4]
 800f8cc:	f7ff ffaa 	bl	800f824 <FATFS_LinkDriverEx>
 800f8d0:	4603      	mov	r3, r0
}
 800f8d2:	4618      	mov	r0, r3
 800f8d4:	3708      	adds	r7, #8
 800f8d6:	46bd      	mov	sp, r7
 800f8d8:	bd80      	pop	{r7, pc}
	...

0800f8dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	4913      	ldr	r1, [pc, #76]	; (800f930 <MX_USB_DEVICE_Init+0x54>)
 800f8e4:	4813      	ldr	r0, [pc, #76]	; (800f934 <MX_USB_DEVICE_Init+0x58>)
 800f8e6:	f7fe feb6 	bl	800e656 <USBD_Init>
 800f8ea:	4603      	mov	r3, r0
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d001      	beq.n	800f8f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800f8f0:	f7f1 fa46 	bl	8000d80 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 800f8f4:	4910      	ldr	r1, [pc, #64]	; (800f938 <MX_USB_DEVICE_Init+0x5c>)
 800f8f6:	480f      	ldr	r0, [pc, #60]	; (800f934 <MX_USB_DEVICE_Init+0x58>)
 800f8f8:	f7fe fee3 	bl	800e6c2 <USBD_RegisterClass>
 800f8fc:	4603      	mov	r3, r0
 800f8fe:	2b00      	cmp	r3, #0
 800f900:	d001      	beq.n	800f906 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800f902:	f7f1 fa3d 	bl	8000d80 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 800f906:	490d      	ldr	r1, [pc, #52]	; (800f93c <MX_USB_DEVICE_Init+0x60>)
 800f908:	480a      	ldr	r0, [pc, #40]	; (800f934 <MX_USB_DEVICE_Init+0x58>)
 800f90a:	f7fd fbdf 	bl	800d0cc <USBD_MSC_RegisterStorage>
 800f90e:	4603      	mov	r3, r0
 800f910:	2b00      	cmp	r3, #0
 800f912:	d001      	beq.n	800f918 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800f914:	f7f1 fa34 	bl	8000d80 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800f918:	4806      	ldr	r0, [pc, #24]	; (800f934 <MX_USB_DEVICE_Init+0x58>)
 800f91a:	f7fe fef3 	bl	800e704 <USBD_Start>
 800f91e:	4603      	mov	r3, r0
 800f920:	2b00      	cmp	r3, #0
 800f922:	d001      	beq.n	800f928 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800f924:	f7f1 fa2c 	bl	8000d80 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800f928:	f7f5 fba8 	bl	800507c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800f92c:	bf00      	nop
 800f92e:	bd80      	pop	{r7, pc}
 800f930:	240000f8 	.word	0x240000f8
 800f934:	24000a4c 	.word	0x24000a4c
 800f938:	24000010 	.word	0x24000010
 800f93c:	24000148 	.word	0x24000148

0800f940 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f940:	b480      	push	{r7}
 800f942:	b083      	sub	sp, #12
 800f944:	af00      	add	r7, sp, #0
 800f946:	4603      	mov	r3, r0
 800f948:	6039      	str	r1, [r7, #0]
 800f94a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2212      	movs	r2, #18
 800f950:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800f952:	4b03      	ldr	r3, [pc, #12]	; (800f960 <USBD_FS_DeviceDescriptor+0x20>)
}
 800f954:	4618      	mov	r0, r3
 800f956:	370c      	adds	r7, #12
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr
 800f960:	24000114 	.word	0x24000114

0800f964 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f964:	b480      	push	{r7}
 800f966:	b083      	sub	sp, #12
 800f968:	af00      	add	r7, sp, #0
 800f96a:	4603      	mov	r3, r0
 800f96c:	6039      	str	r1, [r7, #0]
 800f96e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800f970:	683b      	ldr	r3, [r7, #0]
 800f972:	2204      	movs	r2, #4
 800f974:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800f976:	4b03      	ldr	r3, [pc, #12]	; (800f984 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800f978:	4618      	mov	r0, r3
 800f97a:	370c      	adds	r7, #12
 800f97c:	46bd      	mov	sp, r7
 800f97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f982:	4770      	bx	lr
 800f984:	24000128 	.word	0x24000128

0800f988 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	4603      	mov	r3, r0
 800f990:	6039      	str	r1, [r7, #0]
 800f992:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800f994:	79fb      	ldrb	r3, [r7, #7]
 800f996:	2b00      	cmp	r3, #0
 800f998:	d105      	bne.n	800f9a6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f99a:	683a      	ldr	r2, [r7, #0]
 800f99c:	4907      	ldr	r1, [pc, #28]	; (800f9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800f99e:	4808      	ldr	r0, [pc, #32]	; (800f9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f9a0:	f7ff fe7d 	bl	800f69e <USBD_GetString>
 800f9a4:	e004      	b.n	800f9b0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800f9a6:	683a      	ldr	r2, [r7, #0]
 800f9a8:	4904      	ldr	r1, [pc, #16]	; (800f9bc <USBD_FS_ProductStrDescriptor+0x34>)
 800f9aa:	4805      	ldr	r0, [pc, #20]	; (800f9c0 <USBD_FS_ProductStrDescriptor+0x38>)
 800f9ac:	f7ff fe77 	bl	800f69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800f9b0:	4b02      	ldr	r3, [pc, #8]	; (800f9bc <USBD_FS_ProductStrDescriptor+0x34>)
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	24000d1c 	.word	0x24000d1c
 800f9c0:	080104e4 	.word	0x080104e4

0800f9c4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b082      	sub	sp, #8
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	4603      	mov	r3, r0
 800f9cc:	6039      	str	r1, [r7, #0]
 800f9ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800f9d0:	683a      	ldr	r2, [r7, #0]
 800f9d2:	4904      	ldr	r1, [pc, #16]	; (800f9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800f9d4:	4804      	ldr	r0, [pc, #16]	; (800f9e8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800f9d6:	f7ff fe62 	bl	800f69e <USBD_GetString>
  return USBD_StrDesc;
 800f9da:	4b02      	ldr	r3, [pc, #8]	; (800f9e4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800f9dc:	4618      	mov	r0, r3
 800f9de:	3708      	adds	r7, #8
 800f9e0:	46bd      	mov	sp, r7
 800f9e2:	bd80      	pop	{r7, pc}
 800f9e4:	24000d1c 	.word	0x24000d1c
 800f9e8:	080104f8 	.word	0x080104f8

0800f9ec <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800f9ec:	b580      	push	{r7, lr}
 800f9ee:	b082      	sub	sp, #8
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	4603      	mov	r3, r0
 800f9f4:	6039      	str	r1, [r7, #0]
 800f9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800f9f8:	683b      	ldr	r3, [r7, #0]
 800f9fa:	221a      	movs	r2, #26
 800f9fc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800f9fe:	f000 f843 	bl	800fa88 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800fa02:	4b02      	ldr	r3, [pc, #8]	; (800fa0c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800fa04:	4618      	mov	r0, r3
 800fa06:	3708      	adds	r7, #8
 800fa08:	46bd      	mov	sp, r7
 800fa0a:	bd80      	pop	{r7, pc}
 800fa0c:	2400012c 	.word	0x2400012c

0800fa10 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa10:	b580      	push	{r7, lr}
 800fa12:	b082      	sub	sp, #8
 800fa14:	af00      	add	r7, sp, #0
 800fa16:	4603      	mov	r3, r0
 800fa18:	6039      	str	r1, [r7, #0]
 800fa1a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800fa1c:	79fb      	ldrb	r3, [r7, #7]
 800fa1e:	2b00      	cmp	r3, #0
 800fa20:	d105      	bne.n	800fa2e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa22:	683a      	ldr	r2, [r7, #0]
 800fa24:	4907      	ldr	r1, [pc, #28]	; (800fa44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa26:	4808      	ldr	r0, [pc, #32]	; (800fa48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa28:	f7ff fe39 	bl	800f69e <USBD_GetString>
 800fa2c:	e004      	b.n	800fa38 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800fa2e:	683a      	ldr	r2, [r7, #0]
 800fa30:	4904      	ldr	r1, [pc, #16]	; (800fa44 <USBD_FS_ConfigStrDescriptor+0x34>)
 800fa32:	4805      	ldr	r0, [pc, #20]	; (800fa48 <USBD_FS_ConfigStrDescriptor+0x38>)
 800fa34:	f7ff fe33 	bl	800f69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa38:	4b02      	ldr	r3, [pc, #8]	; (800fa44 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800fa3a:	4618      	mov	r0, r3
 800fa3c:	3708      	adds	r7, #8
 800fa3e:	46bd      	mov	sp, r7
 800fa40:	bd80      	pop	{r7, pc}
 800fa42:	bf00      	nop
 800fa44:	24000d1c 	.word	0x24000d1c
 800fa48:	0801050c 	.word	0x0801050c

0800fa4c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800fa4c:	b580      	push	{r7, lr}
 800fa4e:	b082      	sub	sp, #8
 800fa50:	af00      	add	r7, sp, #0
 800fa52:	4603      	mov	r3, r0
 800fa54:	6039      	str	r1, [r7, #0]
 800fa56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800fa58:	79fb      	ldrb	r3, [r7, #7]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d105      	bne.n	800fa6a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa5e:	683a      	ldr	r2, [r7, #0]
 800fa60:	4907      	ldr	r1, [pc, #28]	; (800fa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa62:	4808      	ldr	r0, [pc, #32]	; (800fa84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa64:	f7ff fe1b 	bl	800f69e <USBD_GetString>
 800fa68:	e004      	b.n	800fa74 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800fa6a:	683a      	ldr	r2, [r7, #0]
 800fa6c:	4904      	ldr	r1, [pc, #16]	; (800fa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800fa6e:	4805      	ldr	r0, [pc, #20]	; (800fa84 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800fa70:	f7ff fe15 	bl	800f69e <USBD_GetString>
  }
  return USBD_StrDesc;
 800fa74:	4b02      	ldr	r3, [pc, #8]	; (800fa80 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800fa76:	4618      	mov	r0, r3
 800fa78:	3708      	adds	r7, #8
 800fa7a:	46bd      	mov	sp, r7
 800fa7c:	bd80      	pop	{r7, pc}
 800fa7e:	bf00      	nop
 800fa80:	24000d1c 	.word	0x24000d1c
 800fa84:	08010518 	.word	0x08010518

0800fa88 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	b084      	sub	sp, #16
 800fa8c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800fa8e:	4b0f      	ldr	r3, [pc, #60]	; (800facc <Get_SerialNum+0x44>)
 800fa90:	681b      	ldr	r3, [r3, #0]
 800fa92:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800fa94:	4b0e      	ldr	r3, [pc, #56]	; (800fad0 <Get_SerialNum+0x48>)
 800fa96:	681b      	ldr	r3, [r3, #0]
 800fa98:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800fa9a:	4b0e      	ldr	r3, [pc, #56]	; (800fad4 <Get_SerialNum+0x4c>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800faa0:	68fa      	ldr	r2, [r7, #12]
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	4413      	add	r3, r2
 800faa6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800faa8:	68fb      	ldr	r3, [r7, #12]
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d009      	beq.n	800fac2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800faae:	2208      	movs	r2, #8
 800fab0:	4909      	ldr	r1, [pc, #36]	; (800fad8 <Get_SerialNum+0x50>)
 800fab2:	68f8      	ldr	r0, [r7, #12]
 800fab4:	f000 f814 	bl	800fae0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800fab8:	2204      	movs	r2, #4
 800faba:	4908      	ldr	r1, [pc, #32]	; (800fadc <Get_SerialNum+0x54>)
 800fabc:	68b8      	ldr	r0, [r7, #8]
 800fabe:	f000 f80f 	bl	800fae0 <IntToUnicode>
  }
}
 800fac2:	bf00      	nop
 800fac4:	3710      	adds	r7, #16
 800fac6:	46bd      	mov	sp, r7
 800fac8:	bd80      	pop	{r7, pc}
 800faca:	bf00      	nop
 800facc:	1ff1e800 	.word	0x1ff1e800
 800fad0:	1ff1e804 	.word	0x1ff1e804
 800fad4:	1ff1e808 	.word	0x1ff1e808
 800fad8:	2400012e 	.word	0x2400012e
 800fadc:	2400013e 	.word	0x2400013e

0800fae0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800fae0:	b480      	push	{r7}
 800fae2:	b087      	sub	sp, #28
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	4613      	mov	r3, r2
 800faec:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800faee:	2300      	movs	r3, #0
 800faf0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800faf2:	2300      	movs	r3, #0
 800faf4:	75fb      	strb	r3, [r7, #23]
 800faf6:	e027      	b.n	800fb48 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800faf8:	68fb      	ldr	r3, [r7, #12]
 800fafa:	0f1b      	lsrs	r3, r3, #28
 800fafc:	2b09      	cmp	r3, #9
 800fafe:	d80b      	bhi.n	800fb18 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	0f1b      	lsrs	r3, r3, #28
 800fb04:	b2da      	uxtb	r2, r3
 800fb06:	7dfb      	ldrb	r3, [r7, #23]
 800fb08:	005b      	lsls	r3, r3, #1
 800fb0a:	4619      	mov	r1, r3
 800fb0c:	68bb      	ldr	r3, [r7, #8]
 800fb0e:	440b      	add	r3, r1
 800fb10:	3230      	adds	r2, #48	; 0x30
 800fb12:	b2d2      	uxtb	r2, r2
 800fb14:	701a      	strb	r2, [r3, #0]
 800fb16:	e00a      	b.n	800fb2e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	0f1b      	lsrs	r3, r3, #28
 800fb1c:	b2da      	uxtb	r2, r3
 800fb1e:	7dfb      	ldrb	r3, [r7, #23]
 800fb20:	005b      	lsls	r3, r3, #1
 800fb22:	4619      	mov	r1, r3
 800fb24:	68bb      	ldr	r3, [r7, #8]
 800fb26:	440b      	add	r3, r1
 800fb28:	3237      	adds	r2, #55	; 0x37
 800fb2a:	b2d2      	uxtb	r2, r2
 800fb2c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	011b      	lsls	r3, r3, #4
 800fb32:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800fb34:	7dfb      	ldrb	r3, [r7, #23]
 800fb36:	005b      	lsls	r3, r3, #1
 800fb38:	3301      	adds	r3, #1
 800fb3a:	68ba      	ldr	r2, [r7, #8]
 800fb3c:	4413      	add	r3, r2
 800fb3e:	2200      	movs	r2, #0
 800fb40:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800fb42:	7dfb      	ldrb	r3, [r7, #23]
 800fb44:	3301      	adds	r3, #1
 800fb46:	75fb      	strb	r3, [r7, #23]
 800fb48:	7dfa      	ldrb	r2, [r7, #23]
 800fb4a:	79fb      	ldrb	r3, [r7, #7]
 800fb4c:	429a      	cmp	r2, r3
 800fb4e:	d3d3      	bcc.n	800faf8 <IntToUnicode+0x18>
  }
}
 800fb50:	bf00      	nop
 800fb52:	371c      	adds	r7, #28
 800fb54:	46bd      	mov	sp, r7
 800fb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb5a:	4770      	bx	lr

0800fb5c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	b083      	sub	sp, #12
 800fb60:	af00      	add	r7, sp, #0
 800fb62:	4603      	mov	r3, r0
 800fb64:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 800fb66:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800fb68:	4618      	mov	r0, r3
 800fb6a:	370c      	adds	r7, #12
 800fb6c:	46bd      	mov	sp, r7
 800fb6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb72:	4770      	bx	lr

0800fb74 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 800fb74:	b480      	push	{r7}
 800fb76:	b085      	sub	sp, #20
 800fb78:	af00      	add	r7, sp, #0
 800fb7a:	4603      	mov	r3, r0
 800fb7c:	60b9      	str	r1, [r7, #8]
 800fb7e:	607a      	str	r2, [r7, #4]
 800fb80:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 800fb82:	68bb      	ldr	r3, [r7, #8]
 800fb84:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800fb88:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 800fb8a:	687b      	ldr	r3, [r7, #4]
 800fb8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fb90:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 800fb92:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	3714      	adds	r7, #20
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr

0800fba0 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800fba0:	b480      	push	{r7}
 800fba2:	b083      	sub	sp, #12
 800fba4:	af00      	add	r7, sp, #0
 800fba6:	4603      	mov	r3, r0
 800fba8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800fbaa:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800fbac:	4618      	mov	r0, r3
 800fbae:	370c      	adds	r7, #12
 800fbb0:	46bd      	mov	sp, r7
 800fbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbb6:	4770      	bx	lr

0800fbb8 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 800fbb8:	b480      	push	{r7}
 800fbba:	b083      	sub	sp, #12
 800fbbc:	af00      	add	r7, sp, #0
 800fbbe:	4603      	mov	r3, r0
 800fbc0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 800fbc2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800fbc4:	4618      	mov	r0, r3
 800fbc6:	370c      	adds	r7, #12
 800fbc8:	46bd      	mov	sp, r7
 800fbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbce:	4770      	bx	lr

0800fbd0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fbd0:	b480      	push	{r7}
 800fbd2:	b085      	sub	sp, #20
 800fbd4:	af00      	add	r7, sp, #0
 800fbd6:	60b9      	str	r1, [r7, #8]
 800fbd8:	607a      	str	r2, [r7, #4]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	4603      	mov	r3, r0
 800fbde:	73fb      	strb	r3, [r7, #15]
 800fbe0:	4613      	mov	r3, r2
 800fbe2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
  return (USBD_OK);
 800fbe4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800fbe6:	4618      	mov	r0, r3
 800fbe8:	3714      	adds	r7, #20
 800fbea:	46bd      	mov	sp, r7
 800fbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbf0:	4770      	bx	lr

0800fbf2 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 800fbf2:	b480      	push	{r7}
 800fbf4:	b085      	sub	sp, #20
 800fbf6:	af00      	add	r7, sp, #0
 800fbf8:	60b9      	str	r1, [r7, #8]
 800fbfa:	607a      	str	r2, [r7, #4]
 800fbfc:	461a      	mov	r2, r3
 800fbfe:	4603      	mov	r3, r0
 800fc00:	73fb      	strb	r3, [r7, #15]
 800fc02:	4613      	mov	r3, r2
 800fc04:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
  return (USBD_OK);
 800fc06:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 800fc08:	4618      	mov	r0, r3
 800fc0a:	3714      	adds	r7, #20
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc12:	4770      	bx	lr

0800fc14 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 800fc14:	b480      	push	{r7}
 800fc16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 800fc18:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 800fc1a:	4618      	mov	r0, r3
 800fc1c:	46bd      	mov	sp, r7
 800fc1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc22:	4770      	bx	lr

0800fc24 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800fc24:	b580      	push	{r7, lr}
 800fc26:	b08a      	sub	sp, #40	; 0x28
 800fc28:	af00      	add	r7, sp, #0
 800fc2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800fc2c:	f107 0314 	add.w	r3, r7, #20
 800fc30:	2200      	movs	r2, #0
 800fc32:	601a      	str	r2, [r3, #0]
 800fc34:	605a      	str	r2, [r3, #4]
 800fc36:	609a      	str	r2, [r3, #8]
 800fc38:	60da      	str	r2, [r3, #12]
 800fc3a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4a1e      	ldr	r2, [pc, #120]	; (800fcbc <HAL_PCD_MspInit+0x98>)
 800fc42:	4293      	cmp	r3, r2
 800fc44:	d136      	bne.n	800fcb4 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800fc46:	4b1e      	ldr	r3, [pc, #120]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc4c:	4a1c      	ldr	r2, [pc, #112]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc4e:	f043 0301 	orr.w	r3, r3, #1
 800fc52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800fc56:	4b1a      	ldr	r3, [pc, #104]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800fc5c:	f003 0301 	and.w	r3, r3, #1
 800fc60:	613b      	str	r3, [r7, #16]
 800fc62:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800fc64:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800fc68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fc6a:	2302      	movs	r3, #2
 800fc6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fc6e:	2300      	movs	r3, #0
 800fc70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fc72:	2300      	movs	r3, #0
 800fc74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800fc76:	230a      	movs	r3, #10
 800fc78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fc7a:	f107 0314 	add.w	r3, r7, #20
 800fc7e:	4619      	mov	r1, r3
 800fc80:	4810      	ldr	r0, [pc, #64]	; (800fcc4 <HAL_PCD_MspInit+0xa0>)
 800fc82:	f7f3 fdbd 	bl	8003800 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800fc86:	4b0e      	ldr	r3, [pc, #56]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fc8c:	4a0c      	ldr	r2, [pc, #48]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fc92:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800fc96:	4b0a      	ldr	r3, [pc, #40]	; (800fcc0 <HAL_PCD_MspInit+0x9c>)
 800fc98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800fc9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800fca4:	2200      	movs	r2, #0
 800fca6:	2100      	movs	r1, #0
 800fca8:	2065      	movs	r0, #101	; 0x65
 800fcaa:	f7f1 fd4a 	bl	8001742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800fcae:	2065      	movs	r0, #101	; 0x65
 800fcb0:	f7f1 fd61 	bl	8001776 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800fcb4:	bf00      	nop
 800fcb6:	3728      	adds	r7, #40	; 0x28
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	bd80      	pop	{r7, pc}
 800fcbc:	40080000 	.word	0x40080000
 800fcc0:	58024400 	.word	0x58024400
 800fcc4:	58020000 	.word	0x58020000

0800fcc8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcc8:	b580      	push	{r7, lr}
 800fcca:	b082      	sub	sp, #8
 800fccc:	af00      	add	r7, sp, #0
 800fcce:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 800fcd6:	687b      	ldr	r3, [r7, #4]
 800fcd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800fcdc:	4619      	mov	r1, r3
 800fcde:	4610      	mov	r0, r2
 800fce0:	f7fe fd5b 	bl	800e79a <USBD_LL_SetupStage>
}
 800fce4:	bf00      	nop
 800fce6:	3708      	adds	r7, #8
 800fce8:	46bd      	mov	sp, r7
 800fcea:	bd80      	pop	{r7, pc}

0800fcec <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fcec:	b580      	push	{r7, lr}
 800fcee:	b082      	sub	sp, #8
 800fcf0:	af00      	add	r7, sp, #0
 800fcf2:	6078      	str	r0, [r7, #4]
 800fcf4:	460b      	mov	r3, r1
 800fcf6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fcfe:	78fa      	ldrb	r2, [r7, #3]
 800fd00:	6879      	ldr	r1, [r7, #4]
 800fd02:	4613      	mov	r3, r2
 800fd04:	00db      	lsls	r3, r3, #3
 800fd06:	1a9b      	subs	r3, r3, r2
 800fd08:	009b      	lsls	r3, r3, #2
 800fd0a:	440b      	add	r3, r1
 800fd0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800fd10:	681a      	ldr	r2, [r3, #0]
 800fd12:	78fb      	ldrb	r3, [r7, #3]
 800fd14:	4619      	mov	r1, r3
 800fd16:	f7fe fd93 	bl	800e840 <USBD_LL_DataOutStage>
}
 800fd1a:	bf00      	nop
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b082      	sub	sp, #8
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
 800fd2a:	460b      	mov	r3, r1
 800fd2c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 800fd34:	78fa      	ldrb	r2, [r7, #3]
 800fd36:	6879      	ldr	r1, [r7, #4]
 800fd38:	4613      	mov	r3, r2
 800fd3a:	00db      	lsls	r3, r3, #3
 800fd3c:	1a9b      	subs	r3, r3, r2
 800fd3e:	009b      	lsls	r3, r3, #2
 800fd40:	440b      	add	r3, r1
 800fd42:	3348      	adds	r3, #72	; 0x48
 800fd44:	681a      	ldr	r2, [r3, #0]
 800fd46:	78fb      	ldrb	r3, [r7, #3]
 800fd48:	4619      	mov	r1, r3
 800fd4a:	f7fe fddc 	bl	800e906 <USBD_LL_DataInStage>
}
 800fd4e:	bf00      	nop
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b082      	sub	sp, #8
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7fe fee0 	bl	800eb2a <USBD_LL_SOF>
}
 800fd6a:	bf00      	nop
 800fd6c:	3708      	adds	r7, #8
 800fd6e:	46bd      	mov	sp, r7
 800fd70:	bd80      	pop	{r7, pc}

0800fd72 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fd72:	b580      	push	{r7, lr}
 800fd74:	b084      	sub	sp, #16
 800fd76:	af00      	add	r7, sp, #0
 800fd78:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800fd7a:	2301      	movs	r3, #1
 800fd7c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	68db      	ldr	r3, [r3, #12]
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	d102      	bne.n	800fd8c <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800fd86:	2300      	movs	r3, #0
 800fd88:	73fb      	strb	r3, [r7, #15]
 800fd8a:	e008      	b.n	800fd9e <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	68db      	ldr	r3, [r3, #12]
 800fd90:	2b02      	cmp	r3, #2
 800fd92:	d102      	bne.n	800fd9a <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800fd94:	2301      	movs	r3, #1
 800fd96:	73fb      	strb	r3, [r7, #15]
 800fd98:	e001      	b.n	800fd9e <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800fd9a:	f7f0 fff1 	bl	8000d80 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fda4:	7bfa      	ldrb	r2, [r7, #15]
 800fda6:	4611      	mov	r1, r2
 800fda8:	4618      	mov	r0, r3
 800fdaa:	f7fe fe83 	bl	800eab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f7fe fe3c 	bl	800ea32 <USBD_LL_Reset>
}
 800fdba:	bf00      	nop
 800fdbc:	3710      	adds	r7, #16
 800fdbe:	46bd      	mov	sp, r7
 800fdc0:	bd80      	pop	{r7, pc}
	...

0800fdc4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fdc4:	b580      	push	{r7, lr}
 800fdc6:	b082      	sub	sp, #8
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f7fe fe7e 	bl	800ead4 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	687a      	ldr	r2, [r7, #4]
 800fde4:	6812      	ldr	r2, [r2, #0]
 800fde6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800fdea:	f043 0301 	orr.w	r3, r3, #1
 800fdee:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	6a1b      	ldr	r3, [r3, #32]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d005      	beq.n	800fe04 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800fdf8:	4b04      	ldr	r3, [pc, #16]	; (800fe0c <HAL_PCD_SuspendCallback+0x48>)
 800fdfa:	691b      	ldr	r3, [r3, #16]
 800fdfc:	4a03      	ldr	r2, [pc, #12]	; (800fe0c <HAL_PCD_SuspendCallback+0x48>)
 800fdfe:	f043 0306 	orr.w	r3, r3, #6
 800fe02:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800fe04:	bf00      	nop
 800fe06:	3708      	adds	r7, #8
 800fe08:	46bd      	mov	sp, r7
 800fe0a:	bd80      	pop	{r7, pc}
 800fe0c:	e000ed00 	.word	0xe000ed00

0800fe10 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe10:	b580      	push	{r7, lr}
 800fe12:	b082      	sub	sp, #8
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe1e:	4618      	mov	r0, r3
 800fe20:	f7fe fe6d 	bl	800eafe <USBD_LL_Resume>
}
 800fe24:	bf00      	nop
 800fe26:	3708      	adds	r7, #8
 800fe28:	46bd      	mov	sp, r7
 800fe2a:	bd80      	pop	{r7, pc}

0800fe2c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe2c:	b580      	push	{r7, lr}
 800fe2e:	b082      	sub	sp, #8
 800fe30:	af00      	add	r7, sp, #0
 800fe32:	6078      	str	r0, [r7, #4]
 800fe34:	460b      	mov	r3, r1
 800fe36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe3e:	78fa      	ldrb	r2, [r7, #3]
 800fe40:	4611      	mov	r1, r2
 800fe42:	4618      	mov	r0, r3
 800fe44:	f7fe fe98 	bl	800eb78 <USBD_LL_IsoOUTIncomplete>
}
 800fe48:	bf00      	nop
 800fe4a:	3708      	adds	r7, #8
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}

0800fe50 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe50:	b580      	push	{r7, lr}
 800fe52:	b082      	sub	sp, #8
 800fe54:	af00      	add	r7, sp, #0
 800fe56:	6078      	str	r0, [r7, #4]
 800fe58:	460b      	mov	r3, r1
 800fe5a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe62:	78fa      	ldrb	r2, [r7, #3]
 800fe64:	4611      	mov	r1, r2
 800fe66:	4618      	mov	r0, r3
 800fe68:	f7fe fe79 	bl	800eb5e <USBD_LL_IsoINIncomplete>
}
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe82:	4618      	mov	r0, r3
 800fe84:	f7fe fe85 	bl	800eb92 <USBD_LL_DevConnected>
}
 800fe88:	bf00      	nop
 800fe8a:	3708      	adds	r7, #8
 800fe8c:	46bd      	mov	sp, r7
 800fe8e:	bd80      	pop	{r7, pc}

0800fe90 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b082      	sub	sp, #8
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800fe9e:	4618      	mov	r0, r3
 800fea0:	f7fe fe82 	bl	800eba8 <USBD_LL_DevDisconnected>
}
 800fea4:	bf00      	nop
 800fea6:	3708      	adds	r7, #8
 800fea8:	46bd      	mov	sp, r7
 800feaa:	bd80      	pop	{r7, pc}

0800feac <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800feac:	b580      	push	{r7, lr}
 800feae:	b082      	sub	sp, #8
 800feb0:	af00      	add	r7, sp, #0
 800feb2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	781b      	ldrb	r3, [r3, #0]
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d13e      	bne.n	800ff3a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800febc:	4a21      	ldr	r2, [pc, #132]	; (800ff44 <USBD_LL_Init+0x98>)
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	4a1f      	ldr	r2, [pc, #124]	; (800ff44 <USBD_LL_Init+0x98>)
 800fec8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800fecc:	4b1d      	ldr	r3, [pc, #116]	; (800ff44 <USBD_LL_Init+0x98>)
 800fece:	4a1e      	ldr	r2, [pc, #120]	; (800ff48 <USBD_LL_Init+0x9c>)
 800fed0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800fed2:	4b1c      	ldr	r3, [pc, #112]	; (800ff44 <USBD_LL_Init+0x98>)
 800fed4:	2209      	movs	r2, #9
 800fed6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800fed8:	4b1a      	ldr	r3, [pc, #104]	; (800ff44 <USBD_LL_Init+0x98>)
 800feda:	2202      	movs	r2, #2
 800fedc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800fede:	4b19      	ldr	r3, [pc, #100]	; (800ff44 <USBD_LL_Init+0x98>)
 800fee0:	2200      	movs	r2, #0
 800fee2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800fee4:	4b17      	ldr	r3, [pc, #92]	; (800ff44 <USBD_LL_Init+0x98>)
 800fee6:	2202      	movs	r2, #2
 800fee8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800feea:	4b16      	ldr	r3, [pc, #88]	; (800ff44 <USBD_LL_Init+0x98>)
 800feec:	2200      	movs	r2, #0
 800feee:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800fef0:	4b14      	ldr	r3, [pc, #80]	; (800ff44 <USBD_LL_Init+0x98>)
 800fef2:	2200      	movs	r2, #0
 800fef4:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800fef6:	4b13      	ldr	r3, [pc, #76]	; (800ff44 <USBD_LL_Init+0x98>)
 800fef8:	2200      	movs	r2, #0
 800fefa:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800fefc:	4b11      	ldr	r3, [pc, #68]	; (800ff44 <USBD_LL_Init+0x98>)
 800fefe:	2200      	movs	r2, #0
 800ff00:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ff02:	4b10      	ldr	r3, [pc, #64]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ff08:	4b0e      	ldr	r3, [pc, #56]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff0a:	2200      	movs	r2, #0
 800ff0c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ff0e:	480d      	ldr	r0, [pc, #52]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff10:	f7f3 fe72 	bl	8003bf8 <HAL_PCD_Init>
 800ff14:	4603      	mov	r3, r0
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d001      	beq.n	800ff1e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800ff1a:	f7f0 ff31 	bl	8000d80 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ff1e:	2180      	movs	r1, #128	; 0x80
 800ff20:	4808      	ldr	r0, [pc, #32]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff22:	f7f5 f830 	bl	8004f86 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ff26:	2240      	movs	r2, #64	; 0x40
 800ff28:	2100      	movs	r1, #0
 800ff2a:	4806      	ldr	r0, [pc, #24]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff2c:	f7f4 ffe4 	bl	8004ef8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ff30:	2280      	movs	r2, #128	; 0x80
 800ff32:	2101      	movs	r1, #1
 800ff34:	4803      	ldr	r0, [pc, #12]	; (800ff44 <USBD_LL_Init+0x98>)
 800ff36:	f7f4 ffdf 	bl	8004ef8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ff3a:	2300      	movs	r3, #0
}
 800ff3c:	4618      	mov	r0, r3
 800ff3e:	3708      	adds	r7, #8
 800ff40:	46bd      	mov	sp, r7
 800ff42:	bd80      	pop	{r7, pc}
 800ff44:	24000f1c 	.word	0x24000f1c
 800ff48:	40080000 	.word	0x40080000

0800ff4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b084      	sub	sp, #16
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff54:	2300      	movs	r3, #0
 800ff56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ff62:	4618      	mov	r0, r3
 800ff64:	f7f3 ff6c 	bl	8003e40 <HAL_PCD_Start>
 800ff68:	4603      	mov	r3, r0
 800ff6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ff6c:	7bfb      	ldrb	r3, [r7, #15]
 800ff6e:	4618      	mov	r0, r3
 800ff70:	f000 f94a 	bl	8010208 <USBD_Get_USB_Status>
 800ff74:	4603      	mov	r3, r0
 800ff76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ff78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ff7a:	4618      	mov	r0, r3
 800ff7c:	3710      	adds	r7, #16
 800ff7e:	46bd      	mov	sp, r7
 800ff80:	bd80      	pop	{r7, pc}

0800ff82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ff82:	b580      	push	{r7, lr}
 800ff84:	b084      	sub	sp, #16
 800ff86:	af00      	add	r7, sp, #0
 800ff88:	6078      	str	r0, [r7, #4]
 800ff8a:	4608      	mov	r0, r1
 800ff8c:	4611      	mov	r1, r2
 800ff8e:	461a      	mov	r2, r3
 800ff90:	4603      	mov	r3, r0
 800ff92:	70fb      	strb	r3, [r7, #3]
 800ff94:	460b      	mov	r3, r1
 800ff96:	70bb      	strb	r3, [r7, #2]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ff9c:	2300      	movs	r3, #0
 800ff9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffa0:	2300      	movs	r3, #0
 800ffa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800ffaa:	78bb      	ldrb	r3, [r7, #2]
 800ffac:	883a      	ldrh	r2, [r7, #0]
 800ffae:	78f9      	ldrb	r1, [r7, #3]
 800ffb0:	f7f4 fb7d 	bl	80046ae <HAL_PCD_EP_Open>
 800ffb4:	4603      	mov	r3, r0
 800ffb6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ffb8:	7bfb      	ldrb	r3, [r7, #15]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f000 f924 	bl	8010208 <USBD_Get_USB_Status>
 800ffc0:	4603      	mov	r3, r0
 800ffc2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ffc4:	7bbb      	ldrb	r3, [r7, #14]
}
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	3710      	adds	r7, #16
 800ffca:	46bd      	mov	sp, r7
 800ffcc:	bd80      	pop	{r7, pc}

0800ffce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ffce:	b580      	push	{r7, lr}
 800ffd0:	b084      	sub	sp, #16
 800ffd2:	af00      	add	r7, sp, #0
 800ffd4:	6078      	str	r0, [r7, #4]
 800ffd6:	460b      	mov	r3, r1
 800ffd8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ffda:	2300      	movs	r3, #0
 800ffdc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ffde:	2300      	movs	r3, #0
 800ffe0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800ffe8:	78fa      	ldrb	r2, [r7, #3]
 800ffea:	4611      	mov	r1, r2
 800ffec:	4618      	mov	r0, r3
 800ffee:	f7f4 fbc6 	bl	800477e <HAL_PCD_EP_Close>
 800fff2:	4603      	mov	r3, r0
 800fff4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800fff6:	7bfb      	ldrb	r3, [r7, #15]
 800fff8:	4618      	mov	r0, r3
 800fffa:	f000 f905 	bl	8010208 <USBD_Get_USB_Status>
 800fffe:	4603      	mov	r3, r0
 8010000:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010002:	7bbb      	ldrb	r3, [r7, #14]
}
 8010004:	4618      	mov	r0, r3
 8010006:	3710      	adds	r7, #16
 8010008:	46bd      	mov	sp, r7
 801000a:	bd80      	pop	{r7, pc}

0801000c <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801000c:	b580      	push	{r7, lr}
 801000e:	b084      	sub	sp, #16
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
 8010014:	460b      	mov	r3, r1
 8010016:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010018:	2300      	movs	r3, #0
 801001a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010026:	78fa      	ldrb	r2, [r7, #3]
 8010028:	4611      	mov	r1, r2
 801002a:	4618      	mov	r0, r3
 801002c:	f7f4 fd58 	bl	8004ae0 <HAL_PCD_EP_Flush>
 8010030:	4603      	mov	r3, r0
 8010032:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010034:	7bfb      	ldrb	r3, [r7, #15]
 8010036:	4618      	mov	r0, r3
 8010038:	f000 f8e6 	bl	8010208 <USBD_Get_USB_Status>
 801003c:	4603      	mov	r3, r0
 801003e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010040:	7bbb      	ldrb	r3, [r7, #14]
}
 8010042:	4618      	mov	r0, r3
 8010044:	3710      	adds	r7, #16
 8010046:	46bd      	mov	sp, r7
 8010048:	bd80      	pop	{r7, pc}

0801004a <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801004a:	b580      	push	{r7, lr}
 801004c:	b084      	sub	sp, #16
 801004e:	af00      	add	r7, sp, #0
 8010050:	6078      	str	r0, [r7, #4]
 8010052:	460b      	mov	r3, r1
 8010054:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010056:	2300      	movs	r3, #0
 8010058:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801005a:	2300      	movs	r3, #0
 801005c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010064:	78fa      	ldrb	r2, [r7, #3]
 8010066:	4611      	mov	r1, r2
 8010068:	4618      	mov	r0, r3
 801006a:	f7f4 fc7f 	bl	800496c <HAL_PCD_EP_SetStall>
 801006e:	4603      	mov	r3, r0
 8010070:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010072:	7bfb      	ldrb	r3, [r7, #15]
 8010074:	4618      	mov	r0, r3
 8010076:	f000 f8c7 	bl	8010208 <USBD_Get_USB_Status>
 801007a:	4603      	mov	r3, r0
 801007c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801007e:	7bbb      	ldrb	r3, [r7, #14]
}
 8010080:	4618      	mov	r0, r3
 8010082:	3710      	adds	r7, #16
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b084      	sub	sp, #16
 801008c:	af00      	add	r7, sp, #0
 801008e:	6078      	str	r0, [r7, #4]
 8010090:	460b      	mov	r3, r1
 8010092:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8010094:	2300      	movs	r3, #0
 8010096:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010098:	2300      	movs	r3, #0
 801009a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100a2:	78fa      	ldrb	r2, [r7, #3]
 80100a4:	4611      	mov	r1, r2
 80100a6:	4618      	mov	r0, r3
 80100a8:	f7f4 fcc4 	bl	8004a34 <HAL_PCD_EP_ClrStall>
 80100ac:	4603      	mov	r3, r0
 80100ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80100b0:	7bfb      	ldrb	r3, [r7, #15]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f000 f8a8 	bl	8010208 <USBD_Get_USB_Status>
 80100b8:	4603      	mov	r3, r0
 80100ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80100bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80100be:	4618      	mov	r0, r3
 80100c0:	3710      	adds	r7, #16
 80100c2:	46bd      	mov	sp, r7
 80100c4:	bd80      	pop	{r7, pc}

080100c6 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80100c6:	b480      	push	{r7}
 80100c8:	b085      	sub	sp, #20
 80100ca:	af00      	add	r7, sp, #0
 80100cc:	6078      	str	r0, [r7, #4]
 80100ce:	460b      	mov	r3, r1
 80100d0:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80100d8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80100da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100de:	2b00      	cmp	r3, #0
 80100e0:	da0b      	bge.n	80100fa <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80100e2:	78fb      	ldrb	r3, [r7, #3]
 80100e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80100e8:	68f9      	ldr	r1, [r7, #12]
 80100ea:	4613      	mov	r3, r2
 80100ec:	00db      	lsls	r3, r3, #3
 80100ee:	1a9b      	subs	r3, r3, r2
 80100f0:	009b      	lsls	r3, r3, #2
 80100f2:	440b      	add	r3, r1
 80100f4:	333e      	adds	r3, #62	; 0x3e
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	e00b      	b.n	8010112 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80100fa:	78fb      	ldrb	r3, [r7, #3]
 80100fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8010100:	68f9      	ldr	r1, [r7, #12]
 8010102:	4613      	mov	r3, r2
 8010104:	00db      	lsls	r3, r3, #3
 8010106:	1a9b      	subs	r3, r3, r2
 8010108:	009b      	lsls	r3, r3, #2
 801010a:	440b      	add	r3, r1
 801010c:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010110:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010112:	4618      	mov	r0, r3
 8010114:	3714      	adds	r7, #20
 8010116:	46bd      	mov	sp, r7
 8010118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011c:	4770      	bx	lr

0801011e <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801011e:	b580      	push	{r7, lr}
 8010120:	b084      	sub	sp, #16
 8010122:	af00      	add	r7, sp, #0
 8010124:	6078      	str	r0, [r7, #4]
 8010126:	460b      	mov	r3, r1
 8010128:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801012a:	2300      	movs	r3, #0
 801012c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801012e:	2300      	movs	r3, #0
 8010130:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8010138:	78fa      	ldrb	r2, [r7, #3]
 801013a:	4611      	mov	r1, r2
 801013c:	4618      	mov	r0, r3
 801013e:	f7f4 fa91 	bl	8004664 <HAL_PCD_SetAddress>
 8010142:	4603      	mov	r3, r0
 8010144:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010146:	7bfb      	ldrb	r3, [r7, #15]
 8010148:	4618      	mov	r0, r3
 801014a:	f000 f85d 	bl	8010208 <USBD_Get_USB_Status>
 801014e:	4603      	mov	r3, r0
 8010150:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8010152:	7bbb      	ldrb	r3, [r7, #14]
}
 8010154:	4618      	mov	r0, r3
 8010156:	3710      	adds	r7, #16
 8010158:	46bd      	mov	sp, r7
 801015a:	bd80      	pop	{r7, pc}

0801015c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b086      	sub	sp, #24
 8010160:	af00      	add	r7, sp, #0
 8010162:	60f8      	str	r0, [r7, #12]
 8010164:	607a      	str	r2, [r7, #4]
 8010166:	603b      	str	r3, [r7, #0]
 8010168:	460b      	mov	r3, r1
 801016a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801016c:	2300      	movs	r3, #0
 801016e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010170:	2300      	movs	r3, #0
 8010172:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8010174:	68fb      	ldr	r3, [r7, #12]
 8010176:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 801017a:	7af9      	ldrb	r1, [r7, #11]
 801017c:	683b      	ldr	r3, [r7, #0]
 801017e:	687a      	ldr	r2, [r7, #4]
 8010180:	f7f4 fbaa 	bl	80048d8 <HAL_PCD_EP_Transmit>
 8010184:	4603      	mov	r3, r0
 8010186:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8010188:	7dfb      	ldrb	r3, [r7, #23]
 801018a:	4618      	mov	r0, r3
 801018c:	f000 f83c 	bl	8010208 <USBD_Get_USB_Status>
 8010190:	4603      	mov	r3, r0
 8010192:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8010194:	7dbb      	ldrb	r3, [r7, #22]
}
 8010196:	4618      	mov	r0, r3
 8010198:	3718      	adds	r7, #24
 801019a:	46bd      	mov	sp, r7
 801019c:	bd80      	pop	{r7, pc}

0801019e <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801019e:	b580      	push	{r7, lr}
 80101a0:	b086      	sub	sp, #24
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	60f8      	str	r0, [r7, #12]
 80101a6:	607a      	str	r2, [r7, #4]
 80101a8:	603b      	str	r3, [r7, #0]
 80101aa:	460b      	mov	r3, r1
 80101ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80101ae:	2300      	movs	r3, #0
 80101b0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80101b2:	2300      	movs	r3, #0
 80101b4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80101b6:	68fb      	ldr	r3, [r7, #12]
 80101b8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80101bc:	7af9      	ldrb	r1, [r7, #11]
 80101be:	683b      	ldr	r3, [r7, #0]
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	f7f4 fb26 	bl	8004812 <HAL_PCD_EP_Receive>
 80101c6:	4603      	mov	r3, r0
 80101c8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80101ca:	7dfb      	ldrb	r3, [r7, #23]
 80101cc:	4618      	mov	r0, r3
 80101ce:	f000 f81b 	bl	8010208 <USBD_Get_USB_Status>
 80101d2:	4603      	mov	r3, r0
 80101d4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80101d6:	7dbb      	ldrb	r3, [r7, #22]
}
 80101d8:	4618      	mov	r0, r3
 80101da:	3718      	adds	r7, #24
 80101dc:	46bd      	mov	sp, r7
 80101de:	bd80      	pop	{r7, pc}

080101e0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80101e0:	b580      	push	{r7, lr}
 80101e2:	b082      	sub	sp, #8
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
 80101e8:	460b      	mov	r3, r1
 80101ea:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80101f2:	78fa      	ldrb	r2, [r7, #3]
 80101f4:	4611      	mov	r1, r2
 80101f6:	4618      	mov	r0, r3
 80101f8:	f7f4 fb56 	bl	80048a8 <HAL_PCD_EP_GetRxCount>
 80101fc:	4603      	mov	r3, r0
}
 80101fe:	4618      	mov	r0, r3
 8010200:	3708      	adds	r7, #8
 8010202:	46bd      	mov	sp, r7
 8010204:	bd80      	pop	{r7, pc}
	...

08010208 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8010208:	b480      	push	{r7}
 801020a:	b085      	sub	sp, #20
 801020c:	af00      	add	r7, sp, #0
 801020e:	4603      	mov	r3, r0
 8010210:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8010212:	2300      	movs	r3, #0
 8010214:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8010216:	79fb      	ldrb	r3, [r7, #7]
 8010218:	2b03      	cmp	r3, #3
 801021a:	d817      	bhi.n	801024c <USBD_Get_USB_Status+0x44>
 801021c:	a201      	add	r2, pc, #4	; (adr r2, 8010224 <USBD_Get_USB_Status+0x1c>)
 801021e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010222:	bf00      	nop
 8010224:	08010235 	.word	0x08010235
 8010228:	0801023b 	.word	0x0801023b
 801022c:	08010241 	.word	0x08010241
 8010230:	08010247 	.word	0x08010247
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8010234:	2300      	movs	r3, #0
 8010236:	73fb      	strb	r3, [r7, #15]
    break;
 8010238:	e00b      	b.n	8010252 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 801023a:	2303      	movs	r3, #3
 801023c:	73fb      	strb	r3, [r7, #15]
    break;
 801023e:	e008      	b.n	8010252 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8010240:	2301      	movs	r3, #1
 8010242:	73fb      	strb	r3, [r7, #15]
    break;
 8010244:	e005      	b.n	8010252 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8010246:	2303      	movs	r3, #3
 8010248:	73fb      	strb	r3, [r7, #15]
    break;
 801024a:	e002      	b.n	8010252 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 801024c:	2303      	movs	r3, #3
 801024e:	73fb      	strb	r3, [r7, #15]
    break;
 8010250:	bf00      	nop
  }
  return usb_status;
 8010252:	7bfb      	ldrb	r3, [r7, #15]
}
 8010254:	4618      	mov	r0, r3
 8010256:	3714      	adds	r7, #20
 8010258:	46bd      	mov	sp, r7
 801025a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801025e:	4770      	bx	lr

08010260 <__errno>:
 8010260:	4b01      	ldr	r3, [pc, #4]	; (8010268 <__errno+0x8>)
 8010262:	6818      	ldr	r0, [r3, #0]
 8010264:	4770      	bx	lr
 8010266:	bf00      	nop
 8010268:	24000168 	.word	0x24000168

0801026c <__libc_init_array>:
 801026c:	b570      	push	{r4, r5, r6, lr}
 801026e:	4e0d      	ldr	r6, [pc, #52]	; (80102a4 <__libc_init_array+0x38>)
 8010270:	4c0d      	ldr	r4, [pc, #52]	; (80102a8 <__libc_init_array+0x3c>)
 8010272:	1ba4      	subs	r4, r4, r6
 8010274:	10a4      	asrs	r4, r4, #2
 8010276:	2500      	movs	r5, #0
 8010278:	42a5      	cmp	r5, r4
 801027a:	d109      	bne.n	8010290 <__libc_init_array+0x24>
 801027c:	4e0b      	ldr	r6, [pc, #44]	; (80102ac <__libc_init_array+0x40>)
 801027e:	4c0c      	ldr	r4, [pc, #48]	; (80102b0 <__libc_init_array+0x44>)
 8010280:	f000 f8f6 	bl	8010470 <_init>
 8010284:	1ba4      	subs	r4, r4, r6
 8010286:	10a4      	asrs	r4, r4, #2
 8010288:	2500      	movs	r5, #0
 801028a:	42a5      	cmp	r5, r4
 801028c:	d105      	bne.n	801029a <__libc_init_array+0x2e>
 801028e:	bd70      	pop	{r4, r5, r6, pc}
 8010290:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8010294:	4798      	blx	r3
 8010296:	3501      	adds	r5, #1
 8010298:	e7ee      	b.n	8010278 <__libc_init_array+0xc>
 801029a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801029e:	4798      	blx	r3
 80102a0:	3501      	adds	r5, #1
 80102a2:	e7f2      	b.n	801028a <__libc_init_array+0x1e>
 80102a4:	08010598 	.word	0x08010598
 80102a8:	08010598 	.word	0x08010598
 80102ac:	08010598 	.word	0x08010598
 80102b0:	0801059c 	.word	0x0801059c

080102b4 <malloc>:
 80102b4:	4b02      	ldr	r3, [pc, #8]	; (80102c0 <malloc+0xc>)
 80102b6:	4601      	mov	r1, r0
 80102b8:	6818      	ldr	r0, [r3, #0]
 80102ba:	f000 b86d 	b.w	8010398 <_malloc_r>
 80102be:	bf00      	nop
 80102c0:	24000168 	.word	0x24000168

080102c4 <free>:
 80102c4:	4b02      	ldr	r3, [pc, #8]	; (80102d0 <free+0xc>)
 80102c6:	4601      	mov	r1, r0
 80102c8:	6818      	ldr	r0, [r3, #0]
 80102ca:	f000 b817 	b.w	80102fc <_free_r>
 80102ce:	bf00      	nop
 80102d0:	24000168 	.word	0x24000168

080102d4 <memcpy>:
 80102d4:	b510      	push	{r4, lr}
 80102d6:	1e43      	subs	r3, r0, #1
 80102d8:	440a      	add	r2, r1
 80102da:	4291      	cmp	r1, r2
 80102dc:	d100      	bne.n	80102e0 <memcpy+0xc>
 80102de:	bd10      	pop	{r4, pc}
 80102e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80102e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80102e8:	e7f7      	b.n	80102da <memcpy+0x6>

080102ea <memset>:
 80102ea:	4402      	add	r2, r0
 80102ec:	4603      	mov	r3, r0
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d100      	bne.n	80102f4 <memset+0xa>
 80102f2:	4770      	bx	lr
 80102f4:	f803 1b01 	strb.w	r1, [r3], #1
 80102f8:	e7f9      	b.n	80102ee <memset+0x4>
	...

080102fc <_free_r>:
 80102fc:	b538      	push	{r3, r4, r5, lr}
 80102fe:	4605      	mov	r5, r0
 8010300:	2900      	cmp	r1, #0
 8010302:	d045      	beq.n	8010390 <_free_r+0x94>
 8010304:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010308:	1f0c      	subs	r4, r1, #4
 801030a:	2b00      	cmp	r3, #0
 801030c:	bfb8      	it	lt
 801030e:	18e4      	addlt	r4, r4, r3
 8010310:	f000 f8ac 	bl	801046c <__malloc_lock>
 8010314:	4a1f      	ldr	r2, [pc, #124]	; (8010394 <_free_r+0x98>)
 8010316:	6813      	ldr	r3, [r2, #0]
 8010318:	4610      	mov	r0, r2
 801031a:	b933      	cbnz	r3, 801032a <_free_r+0x2e>
 801031c:	6063      	str	r3, [r4, #4]
 801031e:	6014      	str	r4, [r2, #0]
 8010320:	4628      	mov	r0, r5
 8010322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010326:	f000 b8a2 	b.w	801046e <__malloc_unlock>
 801032a:	42a3      	cmp	r3, r4
 801032c:	d90c      	bls.n	8010348 <_free_r+0x4c>
 801032e:	6821      	ldr	r1, [r4, #0]
 8010330:	1862      	adds	r2, r4, r1
 8010332:	4293      	cmp	r3, r2
 8010334:	bf04      	itt	eq
 8010336:	681a      	ldreq	r2, [r3, #0]
 8010338:	685b      	ldreq	r3, [r3, #4]
 801033a:	6063      	str	r3, [r4, #4]
 801033c:	bf04      	itt	eq
 801033e:	1852      	addeq	r2, r2, r1
 8010340:	6022      	streq	r2, [r4, #0]
 8010342:	6004      	str	r4, [r0, #0]
 8010344:	e7ec      	b.n	8010320 <_free_r+0x24>
 8010346:	4613      	mov	r3, r2
 8010348:	685a      	ldr	r2, [r3, #4]
 801034a:	b10a      	cbz	r2, 8010350 <_free_r+0x54>
 801034c:	42a2      	cmp	r2, r4
 801034e:	d9fa      	bls.n	8010346 <_free_r+0x4a>
 8010350:	6819      	ldr	r1, [r3, #0]
 8010352:	1858      	adds	r0, r3, r1
 8010354:	42a0      	cmp	r0, r4
 8010356:	d10b      	bne.n	8010370 <_free_r+0x74>
 8010358:	6820      	ldr	r0, [r4, #0]
 801035a:	4401      	add	r1, r0
 801035c:	1858      	adds	r0, r3, r1
 801035e:	4282      	cmp	r2, r0
 8010360:	6019      	str	r1, [r3, #0]
 8010362:	d1dd      	bne.n	8010320 <_free_r+0x24>
 8010364:	6810      	ldr	r0, [r2, #0]
 8010366:	6852      	ldr	r2, [r2, #4]
 8010368:	605a      	str	r2, [r3, #4]
 801036a:	4401      	add	r1, r0
 801036c:	6019      	str	r1, [r3, #0]
 801036e:	e7d7      	b.n	8010320 <_free_r+0x24>
 8010370:	d902      	bls.n	8010378 <_free_r+0x7c>
 8010372:	230c      	movs	r3, #12
 8010374:	602b      	str	r3, [r5, #0]
 8010376:	e7d3      	b.n	8010320 <_free_r+0x24>
 8010378:	6820      	ldr	r0, [r4, #0]
 801037a:	1821      	adds	r1, r4, r0
 801037c:	428a      	cmp	r2, r1
 801037e:	bf04      	itt	eq
 8010380:	6811      	ldreq	r1, [r2, #0]
 8010382:	6852      	ldreq	r2, [r2, #4]
 8010384:	6062      	str	r2, [r4, #4]
 8010386:	bf04      	itt	eq
 8010388:	1809      	addeq	r1, r1, r0
 801038a:	6021      	streq	r1, [r4, #0]
 801038c:	605c      	str	r4, [r3, #4]
 801038e:	e7c7      	b.n	8010320 <_free_r+0x24>
 8010390:	bd38      	pop	{r3, r4, r5, pc}
 8010392:	bf00      	nop
 8010394:	24000200 	.word	0x24000200

08010398 <_malloc_r>:
 8010398:	b570      	push	{r4, r5, r6, lr}
 801039a:	1ccd      	adds	r5, r1, #3
 801039c:	f025 0503 	bic.w	r5, r5, #3
 80103a0:	3508      	adds	r5, #8
 80103a2:	2d0c      	cmp	r5, #12
 80103a4:	bf38      	it	cc
 80103a6:	250c      	movcc	r5, #12
 80103a8:	2d00      	cmp	r5, #0
 80103aa:	4606      	mov	r6, r0
 80103ac:	db01      	blt.n	80103b2 <_malloc_r+0x1a>
 80103ae:	42a9      	cmp	r1, r5
 80103b0:	d903      	bls.n	80103ba <_malloc_r+0x22>
 80103b2:	230c      	movs	r3, #12
 80103b4:	6033      	str	r3, [r6, #0]
 80103b6:	2000      	movs	r0, #0
 80103b8:	bd70      	pop	{r4, r5, r6, pc}
 80103ba:	f000 f857 	bl	801046c <__malloc_lock>
 80103be:	4a21      	ldr	r2, [pc, #132]	; (8010444 <_malloc_r+0xac>)
 80103c0:	6814      	ldr	r4, [r2, #0]
 80103c2:	4621      	mov	r1, r4
 80103c4:	b991      	cbnz	r1, 80103ec <_malloc_r+0x54>
 80103c6:	4c20      	ldr	r4, [pc, #128]	; (8010448 <_malloc_r+0xb0>)
 80103c8:	6823      	ldr	r3, [r4, #0]
 80103ca:	b91b      	cbnz	r3, 80103d4 <_malloc_r+0x3c>
 80103cc:	4630      	mov	r0, r6
 80103ce:	f000 f83d 	bl	801044c <_sbrk_r>
 80103d2:	6020      	str	r0, [r4, #0]
 80103d4:	4629      	mov	r1, r5
 80103d6:	4630      	mov	r0, r6
 80103d8:	f000 f838 	bl	801044c <_sbrk_r>
 80103dc:	1c43      	adds	r3, r0, #1
 80103de:	d124      	bne.n	801042a <_malloc_r+0x92>
 80103e0:	230c      	movs	r3, #12
 80103e2:	6033      	str	r3, [r6, #0]
 80103e4:	4630      	mov	r0, r6
 80103e6:	f000 f842 	bl	801046e <__malloc_unlock>
 80103ea:	e7e4      	b.n	80103b6 <_malloc_r+0x1e>
 80103ec:	680b      	ldr	r3, [r1, #0]
 80103ee:	1b5b      	subs	r3, r3, r5
 80103f0:	d418      	bmi.n	8010424 <_malloc_r+0x8c>
 80103f2:	2b0b      	cmp	r3, #11
 80103f4:	d90f      	bls.n	8010416 <_malloc_r+0x7e>
 80103f6:	600b      	str	r3, [r1, #0]
 80103f8:	50cd      	str	r5, [r1, r3]
 80103fa:	18cc      	adds	r4, r1, r3
 80103fc:	4630      	mov	r0, r6
 80103fe:	f000 f836 	bl	801046e <__malloc_unlock>
 8010402:	f104 000b 	add.w	r0, r4, #11
 8010406:	1d23      	adds	r3, r4, #4
 8010408:	f020 0007 	bic.w	r0, r0, #7
 801040c:	1ac3      	subs	r3, r0, r3
 801040e:	d0d3      	beq.n	80103b8 <_malloc_r+0x20>
 8010410:	425a      	negs	r2, r3
 8010412:	50e2      	str	r2, [r4, r3]
 8010414:	e7d0      	b.n	80103b8 <_malloc_r+0x20>
 8010416:	428c      	cmp	r4, r1
 8010418:	684b      	ldr	r3, [r1, #4]
 801041a:	bf16      	itet	ne
 801041c:	6063      	strne	r3, [r4, #4]
 801041e:	6013      	streq	r3, [r2, #0]
 8010420:	460c      	movne	r4, r1
 8010422:	e7eb      	b.n	80103fc <_malloc_r+0x64>
 8010424:	460c      	mov	r4, r1
 8010426:	6849      	ldr	r1, [r1, #4]
 8010428:	e7cc      	b.n	80103c4 <_malloc_r+0x2c>
 801042a:	1cc4      	adds	r4, r0, #3
 801042c:	f024 0403 	bic.w	r4, r4, #3
 8010430:	42a0      	cmp	r0, r4
 8010432:	d005      	beq.n	8010440 <_malloc_r+0xa8>
 8010434:	1a21      	subs	r1, r4, r0
 8010436:	4630      	mov	r0, r6
 8010438:	f000 f808 	bl	801044c <_sbrk_r>
 801043c:	3001      	adds	r0, #1
 801043e:	d0cf      	beq.n	80103e0 <_malloc_r+0x48>
 8010440:	6025      	str	r5, [r4, #0]
 8010442:	e7db      	b.n	80103fc <_malloc_r+0x64>
 8010444:	24000200 	.word	0x24000200
 8010448:	24000204 	.word	0x24000204

0801044c <_sbrk_r>:
 801044c:	b538      	push	{r3, r4, r5, lr}
 801044e:	4c06      	ldr	r4, [pc, #24]	; (8010468 <_sbrk_r+0x1c>)
 8010450:	2300      	movs	r3, #0
 8010452:	4605      	mov	r5, r0
 8010454:	4608      	mov	r0, r1
 8010456:	6023      	str	r3, [r4, #0]
 8010458:	f7f0 feec 	bl	8001234 <_sbrk>
 801045c:	1c43      	adds	r3, r0, #1
 801045e:	d102      	bne.n	8010466 <_sbrk_r+0x1a>
 8010460:	6823      	ldr	r3, [r4, #0]
 8010462:	b103      	cbz	r3, 8010466 <_sbrk_r+0x1a>
 8010464:	602b      	str	r3, [r5, #0]
 8010466:	bd38      	pop	{r3, r4, r5, pc}
 8010468:	24001324 	.word	0x24001324

0801046c <__malloc_lock>:
 801046c:	4770      	bx	lr

0801046e <__malloc_unlock>:
 801046e:	4770      	bx	lr

08010470 <_init>:
 8010470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010472:	bf00      	nop
 8010474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010476:	bc08      	pop	{r3}
 8010478:	469e      	mov	lr, r3
 801047a:	4770      	bx	lr

0801047c <_fini>:
 801047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801047e:	bf00      	nop
 8010480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010482:	bc08      	pop	{r3}
 8010484:	469e      	mov	lr, r3
 8010486:	4770      	bx	lr

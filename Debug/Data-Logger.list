
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a42c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000998  0801a6cc  0801a6cc  0002a6cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b064  0801b064  000301dc  2**0
                  CONTENTS
  4 .ARM          00000008  0801b064  0801b064  0002b064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b06c  0801b06c  000301dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b06c  0801b06c  0002b06c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b070  0801b070  0002b070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  24000000  0801b074  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000022d0  240001e0  0801b250  000301e0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  240024b0  0801b250  000324b0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a02d  00000000  00000000  0003020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007b2c  00000000  00000000  0007a237  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002420  00000000  00000000  00081d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002128  00000000  00000000  00084188  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000430f0  00000000  00000000  000862b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002816a  00000000  00000000  000c93a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178676  00000000  00000000  000f150a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00269b80  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009f80  00000000  00000000  00269bfc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001e0 	.word	0x240001e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801a6b4 	.word	0x0801a6b4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001e4 	.word	0x240001e4
 80002dc:	0801a6b4 	.word	0x0801a6b4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 fb56 	bl	8006d6c <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f006 fbc4 	bl	8006e58 <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fa5d 	bl	8003b94 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f006 fc0c 	bl	8006ef8 <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fa55 	bl	8003b94 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f006 fd8c 	bl	800720c <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fa4b 	bl	8003b94 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f006 fbd7 	bl	8006eb2 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
 8000714:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000716:	4b91      	ldr	r3, [pc, #580]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000718:	4a91      	ldr	r2, [pc, #580]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800071a:	2140      	movs	r1, #64	; 0x40
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f006 fc17 	bl	8006f50 <HAL_FDCAN_GetRxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	f040 8114 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
			      {
					uint32_t time = HAL_GetTick();
 800072a:	f003 ff1b 	bl	8004564 <HAL_GetTick>
 800072e:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000730:	2101      	movs	r1, #1
 8000732:	488c      	ldr	r0, [pc, #560]	; (8000964 <HAL_FDCAN_RxFifo0Callback+0x258>)
 8000734:	f007 fc55 	bl	8007fe2 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000738:	488b      	ldr	r0, [pc, #556]	; (8000968 <HAL_FDCAN_RxFifo0Callback+0x25c>)
 800073a:	f018 ff99 	bl	8019670 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 800073e:	4b88      	ldr	r3, [pc, #544]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000740:	699b      	ldr	r3, [r3, #24]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d17f      	bne.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						CanFrame.id = RxHeader.Identifier;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a88      	ldr	r2, [pc, #544]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800074c:	6013      	str	r3, [r2, #0]
						switch(RxHeader.DataLength/65536){
 800074e:	4b84      	ldr	r3, [pc, #528]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000750:	68db      	ldr	r3, [r3, #12]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	3b01      	subs	r3, #1
 8000756:	2b0e      	cmp	r3, #14
 8000758:	d85c      	bhi.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
 800075a:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <HAL_FDCAN_RxFifo0Callback+0x54>)
 800075c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000760:	0800079d 	.word	0x0800079d
 8000764:	080007a5 	.word	0x080007a5
 8000768:	080007ad 	.word	0x080007ad
 800076c:	080007b5 	.word	0x080007b5
 8000770:	080007bd 	.word	0x080007bd
 8000774:	080007c5 	.word	0x080007c5
 8000778:	080007cd 	.word	0x080007cd
 800077c:	080007d5 	.word	0x080007d5
 8000780:	080007dd 	.word	0x080007dd
 8000784:	080007e5 	.word	0x080007e5
 8000788:	080007ed 	.word	0x080007ed
 800078c:	080007f5 	.word	0x080007f5
 8000790:	080007fd 	.word	0x080007fd
 8000794:	08000805 	.word	0x08000805
 8000798:	0800080d 	.word	0x0800080d
							case 1:
								CanFrame.length = 1;
 800079c:	4b73      	ldr	r3, [pc, #460]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800079e:	2201      	movs	r2, #1
 80007a0:	715a      	strb	r2, [r3, #5]
								break;
 80007a2:	e037      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 2:
								CanFrame.length = 2;
 80007a4:	4b71      	ldr	r3, [pc, #452]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007a6:	2202      	movs	r2, #2
 80007a8:	715a      	strb	r2, [r3, #5]
								break;
 80007aa:	e033      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 3:
								CanFrame.length = 3;
 80007ac:	4b6f      	ldr	r3, [pc, #444]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ae:	2203      	movs	r2, #3
 80007b0:	715a      	strb	r2, [r3, #5]
								break;
 80007b2:	e02f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 4:
								CanFrame.length = 4;
 80007b4:	4b6d      	ldr	r3, [pc, #436]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007b6:	2204      	movs	r2, #4
 80007b8:	715a      	strb	r2, [r3, #5]
								break;
 80007ba:	e02b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 5:
								CanFrame.length = 5;
 80007bc:	4b6b      	ldr	r3, [pc, #428]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007be:	2205      	movs	r2, #5
 80007c0:	715a      	strb	r2, [r3, #5]
								break;
 80007c2:	e027      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 6:
								CanFrame.length = 6;
 80007c4:	4b69      	ldr	r3, [pc, #420]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007c6:	2206      	movs	r2, #6
 80007c8:	715a      	strb	r2, [r3, #5]
								break;
 80007ca:	e023      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 7:
								CanFrame.length = 7;
 80007cc:	4b67      	ldr	r3, [pc, #412]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ce:	2207      	movs	r2, #7
 80007d0:	715a      	strb	r2, [r3, #5]
								break;
 80007d2:	e01f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 8:
								CanFrame.length = 8;
 80007d4:	4b65      	ldr	r3, [pc, #404]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007d6:	2208      	movs	r2, #8
 80007d8:	715a      	strb	r2, [r3, #5]
								break;
 80007da:	e01b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 9:
								CanFrame.length = 12;
 80007dc:	4b63      	ldr	r3, [pc, #396]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007de:	220c      	movs	r2, #12
 80007e0:	715a      	strb	r2, [r3, #5]
								break;
 80007e2:	e017      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 10:
								CanFrame.length = 16;
 80007e4:	4b61      	ldr	r3, [pc, #388]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007e6:	2210      	movs	r2, #16
 80007e8:	715a      	strb	r2, [r3, #5]
								break;
 80007ea:	e013      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 11:
								CanFrame.length = 20;
 80007ec:	4b5f      	ldr	r3, [pc, #380]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007ee:	2214      	movs	r2, #20
 80007f0:	715a      	strb	r2, [r3, #5]
								break;
 80007f2:	e00f      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 12:
								CanFrame.length = 24;
 80007f4:	4b5d      	ldr	r3, [pc, #372]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007f6:	2218      	movs	r2, #24
 80007f8:	715a      	strb	r2, [r3, #5]
								break;
 80007fa:	e00b      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 13:
								CanFrame.length = 32;
 80007fc:	4b5b      	ldr	r3, [pc, #364]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 80007fe:	2220      	movs	r2, #32
 8000800:	715a      	strb	r2, [r3, #5]
								break;
 8000802:	e007      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 14:
								CanFrame.length = 48;
 8000804:	4b59      	ldr	r3, [pc, #356]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000806:	2230      	movs	r2, #48	; 0x30
 8000808:	715a      	strb	r2, [r3, #5]
								break;
 800080a:	e003      	b.n	8000814 <HAL_FDCAN_RxFifo0Callback+0x108>
							case 15:
								CanFrame.length = 64;
 800080c:	4b57      	ldr	r3, [pc, #348]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800080e:	2240      	movs	r2, #64	; 0x40
 8000810:	715a      	strb	r2, [r3, #5]
								break;
 8000812:	bf00      	nop
						}
						CanFrame.time = time;
 8000814:	4a55      	ldr	r2, [pc, #340]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000816:	68fb      	ldr	r3, [r7, #12]
 8000818:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 800081a:	4b55      	ldr	r3, [pc, #340]	; (8000970 <HAL_FDCAN_RxFifo0Callback+0x264>)
 800081c:	2201      	movs	r2, #1
 800081e:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000820:	4b52      	ldr	r3, [pc, #328]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000822:	795b      	ldrb	r3, [r3, #5]
 8000824:	461a      	mov	r2, r3
 8000826:	494d      	ldr	r1, [pc, #308]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000828:	4852      	ldr	r0, [pc, #328]	; (8000974 <HAL_FDCAN_RxFifo0Callback+0x268>)
 800082a:	f018 fdf1 	bl	8019410 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000830:	685b      	ldr	r3, [r3, #4]
 8000832:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000836:	d103      	bne.n	8000840 <HAL_FDCAN_RxFifo0Callback+0x134>
							CanFrame.extended = 1;
 8000838:	4b4c      	ldr	r3, [pc, #304]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 800083a:	2201      	movs	r2, #1
 800083c:	711a      	strb	r2, [r3, #4]
 800083e:	e002      	b.n	8000846 <HAL_FDCAN_RxFifo0Callback+0x13a>
						}
						else{
							CanFrame.extended = 0;
 8000840:	4b4a      	ldr	r3, [pc, #296]	; (800096c <HAL_FDCAN_RxFifo0Callback+0x260>)
 8000842:	2200      	movs	r2, #0
 8000844:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000846:	4b46      	ldr	r3, [pc, #280]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800084e:	f040 8080 	bne.w	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
						CanFDFrame.id = RxHeader.Identifier;
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a48      	ldr	r2, [pc, #288]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000858:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 800085a:	4b41      	ldr	r3, [pc, #260]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800085c:	68db      	ldr	r3, [r3, #12]
 800085e:	0c1b      	lsrs	r3, r3, #16
 8000860:	3b01      	subs	r3, #1
 8000862:	2b0e      	cmp	r3, #14
 8000864:	d85c      	bhi.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
 8000866:	a201      	add	r2, pc, #4	; (adr r2, 800086c <HAL_FDCAN_RxFifo0Callback+0x160>)
 8000868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800086c:	080008a9 	.word	0x080008a9
 8000870:	080008b1 	.word	0x080008b1
 8000874:	080008b9 	.word	0x080008b9
 8000878:	080008c1 	.word	0x080008c1
 800087c:	080008c9 	.word	0x080008c9
 8000880:	080008d1 	.word	0x080008d1
 8000884:	080008d9 	.word	0x080008d9
 8000888:	080008e1 	.word	0x080008e1
 800088c:	080008e9 	.word	0x080008e9
 8000890:	080008f1 	.word	0x080008f1
 8000894:	080008f9 	.word	0x080008f9
 8000898:	08000901 	.word	0x08000901
 800089c:	08000909 	.word	0x08000909
 80008a0:	08000911 	.word	0x08000911
 80008a4:	08000919 	.word	0x08000919
							case 1:
								CanFDFrame.length = 1;
 80008a8:	4b33      	ldr	r3, [pc, #204]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008aa:	2201      	movs	r2, #1
 80008ac:	609a      	str	r2, [r3, #8]
								break;
 80008ae:	e037      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 2:
								CanFDFrame.length = 2;
 80008b0:	4b31      	ldr	r3, [pc, #196]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008b2:	2202      	movs	r2, #2
 80008b4:	609a      	str	r2, [r3, #8]
								break;
 80008b6:	e033      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 3:
								CanFDFrame.length = 3;
 80008b8:	4b2f      	ldr	r3, [pc, #188]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ba:	2203      	movs	r2, #3
 80008bc:	609a      	str	r2, [r3, #8]
								break;
 80008be:	e02f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 4:
								CanFDFrame.length = 4;
 80008c0:	4b2d      	ldr	r3, [pc, #180]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008c2:	2204      	movs	r2, #4
 80008c4:	609a      	str	r2, [r3, #8]
								break;
 80008c6:	e02b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 5:
								CanFDFrame.length = 5;
 80008c8:	4b2b      	ldr	r3, [pc, #172]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ca:	2205      	movs	r2, #5
 80008cc:	609a      	str	r2, [r3, #8]
								break;
 80008ce:	e027      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 6:
								CanFDFrame.length = 6;
 80008d0:	4b29      	ldr	r3, [pc, #164]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008d2:	2206      	movs	r2, #6
 80008d4:	609a      	str	r2, [r3, #8]
								break;
 80008d6:	e023      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 7:
								CanFDFrame.length = 7;
 80008d8:	4b27      	ldr	r3, [pc, #156]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008da:	2207      	movs	r2, #7
 80008dc:	609a      	str	r2, [r3, #8]
								break;
 80008de:	e01f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 8:
								CanFDFrame.length = 8;
 80008e0:	4b25      	ldr	r3, [pc, #148]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008e2:	2208      	movs	r2, #8
 80008e4:	609a      	str	r2, [r3, #8]
								break;
 80008e6:	e01b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 9:
								CanFDFrame.length = 12;
 80008e8:	4b23      	ldr	r3, [pc, #140]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008ea:	220c      	movs	r2, #12
 80008ec:	609a      	str	r2, [r3, #8]
								break;
 80008ee:	e017      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 10:
								CanFDFrame.length = 16;
 80008f0:	4b21      	ldr	r3, [pc, #132]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008f2:	2210      	movs	r2, #16
 80008f4:	609a      	str	r2, [r3, #8]
								break;
 80008f6:	e013      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 11:
								CanFDFrame.length = 20;
 80008f8:	4b1f      	ldr	r3, [pc, #124]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 80008fa:	2214      	movs	r2, #20
 80008fc:	609a      	str	r2, [r3, #8]
								break;
 80008fe:	e00f      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 12:
								CanFDFrame.length = 24;
 8000900:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000902:	2218      	movs	r2, #24
 8000904:	609a      	str	r2, [r3, #8]
								break;
 8000906:	e00b      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 13:
								CanFDFrame.length = 32;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800090a:	2220      	movs	r2, #32
 800090c:	609a      	str	r2, [r3, #8]
								break;
 800090e:	e007      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 14:
								CanFDFrame.length = 48;
 8000910:	4b19      	ldr	r3, [pc, #100]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000912:	2230      	movs	r2, #48	; 0x30
 8000914:	609a      	str	r2, [r3, #8]
								break;
 8000916:	e003      	b.n	8000920 <HAL_FDCAN_RxFifo0Callback+0x214>
							case 15:
								CanFDFrame.length = 64;
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800091a:	2240      	movs	r2, #64	; 0x40
 800091c:	609a      	str	r2, [r3, #8]
								break;
 800091e:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000920:	4a15      	ldr	r2, [pc, #84]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <HAL_FDCAN_RxFifo0Callback+0x270>)
 8000928:	2201      	movs	r2, #1
 800092a:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800092e:	689b      	ldr	r3, [r3, #8]
 8000930:	461a      	mov	r2, r3
 8000932:	490a      	ldr	r1, [pc, #40]	; (800095c <HAL_FDCAN_RxFifo0Callback+0x250>)
 8000934:	4812      	ldr	r0, [pc, #72]	; (8000980 <HAL_FDCAN_RxFifo0Callback+0x274>)
 8000936:	f018 fd6b 	bl	8019410 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 800093a:	4b09      	ldr	r3, [pc, #36]	; (8000960 <HAL_FDCAN_RxFifo0Callback+0x254>)
 800093c:	685b      	ldr	r3, [r3, #4]
 800093e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000942:	d103      	bne.n	800094c <HAL_FDCAN_RxFifo0Callback+0x240>
							CanFDFrame.extended = 1;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 8000946:	2201      	movs	r2, #1
 8000948:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 800094a:	e002      	b.n	8000952 <HAL_FDCAN_RxFifo0Callback+0x246>
							CanFDFrame.extended = 0;
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_FDCAN_RxFifo0Callback+0x26c>)
 800094e:	2200      	movs	r2, #0
 8000950:	711a      	strb	r2, [r3, #4]
}
 8000952:	bf00      	nop
 8000954:	3710      	adds	r7, #16
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	24001000 	.word	0x24001000
 8000960:	24001090 	.word	0x24001090
 8000964:	58020400 	.word	0x58020400
 8000968:	0801a6cc 	.word	0x0801a6cc
 800096c:	240010b8 	.word	0x240010b8
 8000970:	24000200 	.word	0x24000200
 8000974:	240010c8 	.word	0x240010c8
 8000978:	24001040 	.word	0x24001040
 800097c:	240001fc 	.word	0x240001fc
 8000980:	24001050 	.word	0x24001050

08000984 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09e      	sub	sp, #120	; 0x78
 8000988:	af02      	add	r7, sp, #8
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	60b9      	str	r1, [r7, #8]
 800098e:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000990:	68b8      	ldr	r0, [r7, #8]
 8000992:	f7ff fca5 	bl	80002e0 <strlen>
 8000996:	4603      	mov	r3, r0
 8000998:	2b03      	cmp	r3, #3
 800099a:	d001      	beq.n	80009a0 <gps_msg_config+0x1c>
 800099c:	2301      	movs	r3, #1
 800099e:	e052      	b.n	8000a46 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 80009a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	9300      	str	r3, [sp, #0]
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	4a29      	ldr	r2, [pc, #164]	; (8000a50 <gps_msg_config+0xcc>)
 80009ac:	211f      	movs	r1, #31
 80009ae:	f018 fe77 	bl	80196a0 <sniprintf>

	int checksum_int = 0;
 80009b2:	2300      	movs	r3, #0
 80009b4:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009b6:	2300      	movs	r3, #0
 80009b8:	66bb      	str	r3, [r7, #104]	; 0x68
 80009ba:	e00b      	b.n	80009d4 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 80009bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009c2:	4413      	add	r3, r2
 80009c4:	781b      	ldrb	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ca:	4053      	eors	r3, r2
 80009cc:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 80009ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009d0:	3301      	adds	r3, #1
 80009d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80009d4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009da:	4413      	add	r3, r2
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d002      	beq.n	80009e8 <gps_msg_config+0x64>
 80009e2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80009e4:	2b1f      	cmp	r3, #31
 80009e6:	dde9      	ble.n	80009bc <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 80009e8:	f107 0040 	add.w	r0, r7, #64	; 0x40
 80009ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80009ee:	4a19      	ldr	r2, [pc, #100]	; (8000a54 <gps_msg_config+0xd0>)
 80009f0:	2107      	movs	r1, #7
 80009f2:	f018 fe55 	bl	80196a0 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 80009f6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80009fa:	f107 0014 	add.w	r0, r7, #20
 80009fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4613      	mov	r3, r2
 8000a06:	4a14      	ldr	r2, [pc, #80]	; (8000a58 <gps_msg_config+0xd4>)
 8000a08:	2129      	movs	r1, #41	; 0x29
 8000a0a:	f018 fe49 	bl	80196a0 <sniprintf>
	printf("\n\rSending: ");
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <gps_msg_config+0xd8>)
 8000a10:	f018 fdba 	bl	8019588 <iprintf>
	printf("%s", messagetosend);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4811      	ldr	r0, [pc, #68]	; (8000a60 <gps_msg_config+0xdc>)
 8000a1c:	f018 fdb4 	bl	8019588 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4618      	mov	r0, r3
 8000a26:	f7ff fc5b 	bl	80002e0 <strlen>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	b29a      	uxth	r2, r3
 8000a2e:	f107 0114 	add.w	r1, r7, #20
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	68f8      	ldr	r0, [r7, #12]
 8000a36:	f00f f87c 	bl	800fb32 <HAL_UART_Transmit>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <gps_msg_config+0xc0>
		Error_Handler();
 8000a40:	f003 f8a8 	bl	8003b94 <Error_Handler>
	}
	return 0;
 8000a44:	2300      	movs	r3, #0
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3770      	adds	r7, #112	; 0x70
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	0801a6e0 	.word	0x0801a6e0
 8000a54:	0801a6f8 	.word	0x0801a6f8
 8000a58:	0801a700 	.word	0x0801a700
 8000a5c:	0801a708 	.word	0x0801a708
 8000a60:	0801a714 	.word	0x0801a714

08000a64 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b08a      	sub	sp, #40	; 0x28
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	4608      	mov	r0, r1
 8000a6e:	4611      	mov	r1, r2
 8000a70:	461a      	mov	r2, r3
 8000a72:	4603      	mov	r3, r0
 8000a74:	817b      	strh	r3, [r7, #10]
 8000a76:	460b      	mov	r3, r1
 8000a78:	813b      	strh	r3, [r7, #8]
 8000a7a:	4613      	mov	r3, r2
 8000a7c:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000a7e:	2306      	movs	r3, #6
 8000a80:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000a82:	23b5      	movs	r3, #181	; 0xb5
 8000a84:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000a86:	2362      	movs	r3, #98	; 0x62
 8000a88:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000a8e:	2308      	movs	r3, #8
 8000a90:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000a92:	8bfb      	ldrh	r3, [r7, #30]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	b2db      	uxtb	r3, r3
 8000aa0:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8000aa6:	893b      	ldrh	r3, [r7, #8]
 8000aa8:	b2db      	uxtb	r3, r3
 8000aaa:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8000aac:	2300      	movs	r3, #0
 8000aae:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 8000ab0:	88fb      	ldrh	r3, [r7, #6]
 8000ab2:	b2db      	uxtb	r3, r3
 8000ab4:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8000aba:	2300      	movs	r3, #0
 8000abc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	623b      	str	r3, [r7, #32]
 8000aca:	e013      	b.n	8000af4 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8000acc:	f107 0210 	add.w	r2, r7, #16
 8000ad0:	6a3b      	ldr	r3, [r7, #32]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	781a      	ldrb	r2, [r3, #0]
 8000ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ada:	4413      	add	r3, r2
 8000adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 8000ae0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8000ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ae8:	4413      	add	r3, r2
 8000aea:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8000aee:	6a3b      	ldr	r3, [r7, #32]
 8000af0:	3301      	adds	r3, #1
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]
 8000af6:	2b0b      	cmp	r3, #11
 8000af8:	dde8      	ble.n	8000acc <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8000afa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000afe:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 8000b00:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000b04:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8000b06:	f107 0110 	add.w	r1, r7, #16
 8000b0a:	2364      	movs	r3, #100	; 0x64
 8000b0c:	220e      	movs	r2, #14
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f00f f80f 	bl	800fb32 <HAL_UART_Transmit>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d003      	beq.n	8000b22 <gps_rate_config+0xbe>
				Error_Handler();
 8000b1a:	f003 f83b 	bl	8003b94 <Error_Handler>
				return 1;
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <gps_rate_config+0xc0>
			}
		return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3728      	adds	r7, #40	; 0x28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
	  }
  }*/
  //for(int i=0; i<BUFFLENGTH; i++){
  	  		  //printf("%c", rxBuf[i]);
  	  //}
  GPS_flag = 1;
 8000b34:	4b04      	ldr	r3, [pc, #16]	; (8000b48 <HAL_UART_RxHalfCpltCallback+0x1c>)
 8000b36:	2201      	movs	r2, #1
 8000b38:	601a      	str	r2, [r3, #0]
  //WriteToBuff(rxBuf+70, BUFFLENGTH/2);
  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);*/
  //printf("GPS Recieved\n");

}
 8000b3a:	bf00      	nop
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	24000204 	.word	0x24000204

08000b4c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8000b58:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <NRF24_DelayMicroSeconds+0x38>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a0a      	ldr	r2, [pc, #40]	; (8000b88 <NRF24_DelayMicroSeconds+0x3c>)
 8000b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000b62:	0c9a      	lsrs	r2, r3, #18
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	fb02 f303 	mul.w	r3, r2, r3
 8000b6a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8000b6c:	bf00      	nop
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	1e5a      	subs	r2, r3, #1
 8000b72:	60fa      	str	r2, [r7, #12]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d1fa      	bne.n	8000b6e <NRF24_DelayMicroSeconds+0x22>
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	24000010 	.word	0x24000010
 8000b88:	165e9f81 	.word	0x165e9f81

08000b8c <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d008      	beq.n	8000bac <NRF24_csn+0x20>
 8000b9a:	4b0a      	ldr	r3, [pc, #40]	; (8000bc4 <NRF24_csn+0x38>)
 8000b9c:	6818      	ldr	r0, [r3, #0]
 8000b9e:	4b0a      	ldr	r3, [pc, #40]	; (8000bc8 <NRF24_csn+0x3c>)
 8000ba0:	881b      	ldrh	r3, [r3, #0]
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	f007 fa03 	bl	8007fb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 8000baa:	e007      	b.n	8000bbc <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8000bac:	4b05      	ldr	r3, [pc, #20]	; (8000bc4 <NRF24_csn+0x38>)
 8000bae:	6818      	ldr	r0, [r3, #0]
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <NRF24_csn+0x3c>)
 8000bb2:	881b      	ldrh	r3, [r3, #0]
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f007 f9fa 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000bbc:	bf00      	nop
 8000bbe:	3708      	adds	r7, #8
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	bd80      	pop	{r7, pc}
 8000bc4:	24000210 	.word	0x24000210
 8000bc8:	24000214 	.word	0x24000214

08000bcc <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d008      	beq.n	8000bec <NRF24_ce+0x20>
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <NRF24_ce+0x38>)
 8000bdc:	6818      	ldr	r0, [r3, #0]
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <NRF24_ce+0x3c>)
 8000be0:	881b      	ldrh	r3, [r3, #0]
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f007 f9e3 	bl	8007fb0 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 8000bea:	e007      	b.n	8000bfc <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <NRF24_ce+0x38>)
 8000bee:	6818      	ldr	r0, [r3, #0]
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <NRF24_ce+0x3c>)
 8000bf2:	881b      	ldrh	r3, [r3, #0]
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	f007 f9da 	bl	8007fb0 <HAL_GPIO_WritePin>
}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	24000210 	.word	0x24000210
 8000c08:	24000216 	.word	0x24000216

08000c0c <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b084      	sub	sp, #16
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 8000c16:	2000      	movs	r0, #0
 8000c18:	f7ff ffb8 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 031f 	and.w	r3, r3, #31
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c26:	f107 010c 	add.w	r1, r7, #12
 8000c2a:	2364      	movs	r3, #100	; 0x64
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	480a      	ldr	r0, [pc, #40]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c30:	f00d ff76 	bl	800eb20 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8000c34:	f107 030c 	add.w	r3, r7, #12
 8000c38:	1c59      	adds	r1, r3, #1
 8000c3a:	2364      	movs	r3, #100	; 0x64
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	4806      	ldr	r0, [pc, #24]	; (8000c58 <NRF24_read_register+0x4c>)
 8000c40:	f00e f960 	bl	800ef04 <HAL_SPI_Receive>
	retData = spiBuf[1];
 8000c44:	7b7b      	ldrb	r3, [r7, #13]
 8000c46:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff ff9f 	bl	8000b8c <NRF24_csn>
	return retData;
 8000c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3710      	adds	r7, #16
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	24000218 	.word	0x24000218

08000c5c <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	4603      	mov	r3, r0
 8000c64:	6039      	str	r1, [r7, #0]
 8000c66:	71fb      	strb	r3, [r7, #7]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000c6c:	2000      	movs	r0, #0
 8000c6e:	f7ff ff8d 	bl	8000b8c <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8000c72:	79fb      	ldrb	r3, [r7, #7]
 8000c74:	f003 031f 	and.w	r3, r3, #31
 8000c78:	b2db      	uxtb	r3, r3
 8000c7a:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000c7c:	f107 010c 	add.w	r1, r7, #12
 8000c80:	2364      	movs	r3, #100	; 0x64
 8000c82:	2201      	movs	r2, #1
 8000c84:	4808      	ldr	r0, [pc, #32]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c86:	f00d ff4b 	bl	800eb20 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8000c8a:	79bb      	ldrb	r3, [r7, #6]
 8000c8c:	b29a      	uxth	r2, r3
 8000c8e:	2364      	movs	r3, #100	; 0x64
 8000c90:	6839      	ldr	r1, [r7, #0]
 8000c92:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <NRF24_read_registerN+0x4c>)
 8000c94:	f00e f936 	bl	800ef04 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8000c98:	2001      	movs	r0, #1
 8000c9a:	f7ff ff77 	bl	8000b8c <NRF24_csn>
}
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	24000218 	.word	0x24000218

08000cac <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b084      	sub	sp, #16
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	71fb      	strb	r3, [r7, #7]
 8000cb8:	4613      	mov	r3, r2
 8000cba:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000cbc:	2000      	movs	r0, #0
 8000cbe:	f7ff ff65 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000cc2:	79fb      	ldrb	r3, [r7, #7]
 8000cc4:	f043 0320 	orr.w	r3, r3, #32
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8000ccc:	79bb      	ldrb	r3, [r7, #6]
 8000cce:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8000cd0:	f107 010c 	add.w	r1, r7, #12
 8000cd4:	2364      	movs	r3, #100	; 0x64
 8000cd6:	2202      	movs	r2, #2
 8000cd8:	4804      	ldr	r0, [pc, #16]	; (8000cec <NRF24_write_register+0x40>)
 8000cda:	f00d ff21 	bl	800eb20 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000cde:	2001      	movs	r0, #1
 8000ce0:	f7ff ff54 	bl	8000b8c <NRF24_csn>
}
 8000ce4:	bf00      	nop
 8000ce6:	3710      	adds	r7, #16
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	24000218 	.word	0x24000218

08000cf0 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b084      	sub	sp, #16
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	6039      	str	r1, [r7, #0]
 8000cfa:	71fb      	strb	r3, [r7, #7]
 8000cfc:	4613      	mov	r3, r2
 8000cfe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff ff43 	bl	8000b8c <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	f043 0320 	orr.w	r3, r3, #32
 8000d0c:	b2db      	uxtb	r3, r3
 8000d0e:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8000d10:	f107 010c 	add.w	r1, r7, #12
 8000d14:	2364      	movs	r3, #100	; 0x64
 8000d16:	2201      	movs	r2, #1
 8000d18:	4808      	ldr	r0, [pc, #32]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d1a:	f00d ff01 	bl	800eb20 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8000d1e:	79bb      	ldrb	r3, [r7, #6]
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	2364      	movs	r3, #100	; 0x64
 8000d24:	6839      	ldr	r1, [r7, #0]
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <NRF24_write_registerN+0x4c>)
 8000d28:	f00d fefa 	bl	800eb20 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff ff2d 	bl	8000b8c <NRF24_csn>
}
 8000d32:	bf00      	nop
 8000d34:	3710      	adds	r7, #16
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	24000218 	.word	0x24000218

08000d40 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	460b      	mov	r3, r1
 8000d4a:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f7ff ff1d 	bl	8000b8c <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8000d52:	23a0      	movs	r3, #160	; 0xa0
 8000d54:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8000d56:	f107 010f 	add.w	r1, r7, #15
 8000d5a:	2364      	movs	r3, #100	; 0x64
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	4808      	ldr	r0, [pc, #32]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d60:	f00d fede 	bl	800eb20 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8000d64:	78fb      	ldrb	r3, [r7, #3]
 8000d66:	b29a      	uxth	r2, r3
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	6879      	ldr	r1, [r7, #4]
 8000d6c:	4804      	ldr	r0, [pc, #16]	; (8000d80 <NRF24_write_payload+0x40>)
 8000d6e:	f00d fed7 	bl	800eb20 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8000d72:	2001      	movs	r0, #1
 8000d74:	f7ff ff0a 	bl	8000b8c <NRF24_csn>
}
 8000d78:	bf00      	nop
 8000d7a:	3710      	adds	r7, #16
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	24000218 	.word	0x24000218

08000d84 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8000d88:	21ff      	movs	r1, #255	; 0xff
 8000d8a:	20e1      	movs	r0, #225	; 0xe1
 8000d8c:	f7ff ff8e 	bl	8000cac <NRF24_write_register>
}
 8000d90:	bf00      	nop
 8000d92:	bd80      	pop	{r7, pc}

08000d94 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8000d98:	21ff      	movs	r1, #255	; 0xff
 8000d9a:	20e2      	movs	r0, #226	; 0xe2
 8000d9c:	f7ff ff86 	bl	8000cac <NRF24_write_register>
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff ff2e 	bl	8000c0c <NRF24_read_register>
 8000db0:	4603      	mov	r3, r0
 8000db2:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
	...

08000dc0 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	b580      	push	{r7, lr}
 8000dc4:	b084      	sub	sp, #16
 8000dc6:	af00      	add	r7, sp, #0
 8000dc8:	6078      	str	r0, [r7, #4]
 8000dca:	61fb      	str	r3, [r7, #28]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	807b      	strh	r3, [r7, #2]
 8000dd0:	4613      	mov	r3, r2
 8000dd2:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8000dd4:	4b66      	ldr	r3, [pc, #408]	; (8000f70 <NRF24_begin+0x1b0>)
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f107 031c 	add.w	r3, r7, #28
 8000ddc:	2288      	movs	r2, #136	; 0x88
 8000dde:	4619      	mov	r1, r3
 8000de0:	f018 fb16 	bl	8019410 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8000de4:	4a63      	ldr	r2, [pc, #396]	; (8000f74 <NRF24_begin+0x1b4>)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8000dea:	4a63      	ldr	r2, [pc, #396]	; (8000f78 <NRF24_begin+0x1b8>)
 8000dec:	887b      	ldrh	r3, [r7, #2]
 8000dee:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8000df0:	4a62      	ldr	r2, [pc, #392]	; (8000f7c <NRF24_begin+0x1bc>)
 8000df2:	883b      	ldrh	r3, [r7, #0]
 8000df4:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8000df6:	2001      	movs	r0, #1
 8000df8:	f7ff fec8 	bl	8000b8c <NRF24_csn>
	NRF24_ce(0);
 8000dfc:	2000      	movs	r0, #0
 8000dfe:	f7ff fee5 	bl	8000bcc <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8000e02:	2005      	movs	r0, #5
 8000e04:	f003 fbba 	bl	800457c <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8000e08:	2108      	movs	r1, #8
 8000e0a:	2000      	movs	r0, #0
 8000e0c:	f7ff ff4e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8000e10:	213f      	movs	r1, #63	; 0x3f
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff4a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8000e18:	2103      	movs	r1, #3
 8000e1a:	2002      	movs	r0, #2
 8000e1c:	f7ff ff46 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8000e20:	2103      	movs	r1, #3
 8000e22:	2003      	movs	r0, #3
 8000e24:	f7ff ff42 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8000e28:	2103      	movs	r1, #3
 8000e2a:	2004      	movs	r0, #4
 8000e2c:	f7ff ff3e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8000e30:	2102      	movs	r1, #2
 8000e32:	2005      	movs	r0, #5
 8000e34:	f7ff ff3a 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8000e38:	210f      	movs	r1, #15
 8000e3a:	2006      	movs	r0, #6
 8000e3c:	f7ff ff36 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8000e40:	210e      	movs	r1, #14
 8000e42:	2007      	movs	r0, #7
 8000e44:	f7ff ff32 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2008      	movs	r0, #8
 8000e4c:	f7ff ff2e 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8000e50:	2100      	movs	r1, #0
 8000e52:	2009      	movs	r0, #9
 8000e54:	f7ff ff2a 	bl	8000cac <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000e58:	23e7      	movs	r3, #231	; 0xe7
 8000e5a:	733b      	strb	r3, [r7, #12]
 8000e5c:	23e7      	movs	r3, #231	; 0xe7
 8000e5e:	72fb      	strb	r3, [r7, #11]
 8000e60:	23e7      	movs	r3, #231	; 0xe7
 8000e62:	72bb      	strb	r3, [r7, #10]
 8000e64:	23e7      	movs	r3, #231	; 0xe7
 8000e66:	727b      	strb	r3, [r7, #9]
 8000e68:	23e7      	movs	r3, #231	; 0xe7
 8000e6a:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8000e6c:	f107 0308 	add.w	r3, r7, #8
 8000e70:	2205      	movs	r2, #5
 8000e72:	4619      	mov	r1, r3
 8000e74:	200a      	movs	r0, #10
 8000e76:	f7ff ff3b 	bl	8000cf0 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8000e7a:	23c2      	movs	r3, #194	; 0xc2
 8000e7c:	733b      	strb	r3, [r7, #12]
 8000e7e:	23c2      	movs	r3, #194	; 0xc2
 8000e80:	72fb      	strb	r3, [r7, #11]
 8000e82:	23c2      	movs	r3, #194	; 0xc2
 8000e84:	72bb      	strb	r3, [r7, #10]
 8000e86:	23c2      	movs	r3, #194	; 0xc2
 8000e88:	727b      	strb	r3, [r7, #9]
 8000e8a:	23c2      	movs	r3, #194	; 0xc2
 8000e8c:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8000e8e:	f107 0308 	add.w	r3, r7, #8
 8000e92:	2205      	movs	r2, #5
 8000e94:	4619      	mov	r1, r3
 8000e96:	200b      	movs	r0, #11
 8000e98:	f7ff ff2a 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8000e9c:	21c3      	movs	r1, #195	; 0xc3
 8000e9e:	200c      	movs	r0, #12
 8000ea0:	f7ff ff04 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8000ea4:	21c4      	movs	r1, #196	; 0xc4
 8000ea6:	200d      	movs	r0, #13
 8000ea8:	f7ff ff00 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8000eac:	21c5      	movs	r1, #197	; 0xc5
 8000eae:	200e      	movs	r0, #14
 8000eb0:	f7ff fefc 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8000eb4:	21c6      	movs	r1, #198	; 0xc6
 8000eb6:	200f      	movs	r0, #15
 8000eb8:	f7ff fef8 	bl	8000cac <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8000ebc:	23e7      	movs	r3, #231	; 0xe7
 8000ebe:	733b      	strb	r3, [r7, #12]
 8000ec0:	23e7      	movs	r3, #231	; 0xe7
 8000ec2:	72fb      	strb	r3, [r7, #11]
 8000ec4:	23e7      	movs	r3, #231	; 0xe7
 8000ec6:	72bb      	strb	r3, [r7, #10]
 8000ec8:	23e7      	movs	r3, #231	; 0xe7
 8000eca:	727b      	strb	r3, [r7, #9]
 8000ecc:	23e7      	movs	r3, #231	; 0xe7
 8000ece:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8000ed0:	f107 0308 	add.w	r3, r7, #8
 8000ed4:	2205      	movs	r2, #5
 8000ed6:	4619      	mov	r1, r3
 8000ed8:	2010      	movs	r0, #16
 8000eda:	f7ff ff09 	bl	8000cf0 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8000ede:	2100      	movs	r1, #0
 8000ee0:	2011      	movs	r0, #17
 8000ee2:	f7ff fee3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	2012      	movs	r0, #18
 8000eea:	f7ff fedf 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8000eee:	2100      	movs	r1, #0
 8000ef0:	2013      	movs	r0, #19
 8000ef2:	f7ff fedb 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8000ef6:	2100      	movs	r1, #0
 8000ef8:	2014      	movs	r0, #20
 8000efa:	f7ff fed7 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8000efe:	2100      	movs	r1, #0
 8000f00:	2015      	movs	r0, #21
 8000f02:	f7ff fed3 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8000f06:	2100      	movs	r1, #0
 8000f08:	2016      	movs	r0, #22
 8000f0a:	f7ff fecf 	bl	8000cac <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8000f0e:	f000 fa89 	bl	8001424 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8000f12:	2100      	movs	r1, #0
 8000f14:	201c      	movs	r0, #28
 8000f16:	f7ff fec9 	bl	8000cac <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8000f1a:	2100      	movs	r1, #0
 8000f1c:	201d      	movs	r0, #29
 8000f1e:	f7ff fec5 	bl	8000cac <NRF24_write_register>
	printRadioSettings();
 8000f22:	f000 fa99 	bl	8001458 <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8000f26:	210f      	movs	r1, #15
 8000f28:	200f      	movs	r0, #15
 8000f2a:	f000 f8ad 	bl	8001088 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8000f2e:	2003      	movs	r0, #3
 8000f30:	f000 f927 	bl	8001182 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f000 f95d 	bl	80011f4 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8000f3a:	2002      	movs	r0, #2
 8000f3c:	f000 f9a0 	bl	8001280 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8000f40:	f000 f8f2 	bl	8001128 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8000f44:	2020      	movs	r0, #32
 8000f46:	f000 f8cf 	bl	80010e8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8000f4a:	f000 fa62 	bl	8001412 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8000f4e:	204c      	movs	r0, #76	; 0x4c
 8000f50:	f000 f8b5 	bl	80010be <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8000f54:	f7ff ff16 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f58:	f7ff ff1c 	bl	8000d94 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8000f5c:	f000 f9b8 	bl	80012d0 <NRF24_powerDown>
	
}
 8000f60:	bf00      	nop
 8000f62:	3710      	adds	r7, #16
 8000f64:	46bd      	mov	sp, r7
 8000f66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f6a:	b002      	add	sp, #8
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	24000218 	.word	0x24000218
 8000f74:	24000210 	.word	0x24000210
 8000f78:	24000214 	.word	0x24000214
 8000f7c:	24000216 	.word	0x24000216

08000f80 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8000f84:	2000      	movs	r0, #0
 8000f86:	f7ff fe21 	bl	8000bcc <NRF24_ce>
	NRF24_flush_tx();
 8000f8a:	f7ff fefb 	bl	8000d84 <NRF24_flush_tx>
	NRF24_flush_rx();
 8000f8e:	f7ff ff01 	bl	8000d94 <NRF24_flush_rx>
}
 8000f92:	bf00      	nop
 8000f94:	bd80      	pop	{r7, pc}
	...

08000f98 <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b086      	sub	sp, #24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8000fa4:	f000 fa35 	bl	8001412 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8000fa8:	78fb      	ldrb	r3, [r7, #3]
 8000faa:	4619      	mov	r1, r3
 8000fac:	6878      	ldr	r0, [r7, #4]
 8000fae:	f000 f9ce 	bl	800134e <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8000fb2:	f003 fad7 	bl	8004564 <HAL_GetTick>
 8000fb6:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8000fb8:	230a      	movs	r3, #10
 8000fba:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8000fbc:	f107 030d 	add.w	r3, r7, #13
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2008      	movs	r0, #8
 8000fc6:	f7ff fe49 	bl	8000c5c <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8000fca:	f7ff feeb 	bl	8000da4 <NRF24_get_status>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d107      	bne.n	8000fec <NRF24_write+0x54>
 8000fdc:	f003 fac2 	bl	8004564 <HAL_GetTick>
 8000fe0:	4602      	mov	r2, r0
 8000fe2:	697b      	ldr	r3, [r7, #20]
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	d8e7      	bhi.n	8000fbc <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8000fec:	f107 010b 	add.w	r1, r7, #11
 8000ff0:	f107 030c 	add.w	r3, r7, #12
 8000ff4:	4a0c      	ldr	r2, [pc, #48]	; (8001028 <NRF24_write+0x90>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f9d8 	bl	80013ac <NRF24_whatHappened>
	retStatus = tx_ok;
 8000ffc:	7b3b      	ldrb	r3, [r7, #12]
 8000ffe:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <NRF24_write+0x90>)
 8001002:	781b      	ldrb	r3, [r3, #0]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d005      	beq.n	8001014 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8001008:	f000 f886 	bl	8001118 <NRF24_getDynamicPayloadSize>
 800100c:	4603      	mov	r3, r0
 800100e:	461a      	mov	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <NRF24_write+0x94>)
 8001012:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8001014:	f000 f80c 	bl	8001030 <NRF24_available>
	NRF24_flush_tx();
 8001018:	f7ff feb4 	bl	8000d84 <NRF24_flush_tx>
	return retStatus;
 800101c:	7bbb      	ldrb	r3, [r7, #14]
}
 800101e:	4618      	mov	r0, r3
 8001020:	3718      	adds	r7, #24
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	24000208 	.word	0x24000208
 800102c:	24000209 	.word	0x24000209

08001030 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8001034:	2000      	movs	r0, #0
 8001036:	f000 f95a 	bl	80012ee <NRF24_availablePipe>
 800103a:	4603      	mov	r3, r0
}
 800103c:	4618      	mov	r0, r3
 800103e:	bd80      	pop	{r7, pc}

08001040 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 800104a:	463b      	mov	r3, r7
 800104c:	2205      	movs	r2, #5
 800104e:	4619      	mov	r1, r3
 8001050:	200a      	movs	r0, #10
 8001052:	f7ff fe4d 	bl	8000cf0 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8001056:	463b      	mov	r3, r7
 8001058:	2205      	movs	r2, #5
 800105a:	4619      	mov	r1, r3
 800105c:	2010      	movs	r0, #16
 800105e:	f7ff fe47 	bl	8000cf0 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 8001062:	2320      	movs	r3, #32
 8001064:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8001066:	4b07      	ldr	r3, [pc, #28]	; (8001084 <NRF24_openWritingPipe+0x44>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4293      	cmp	r3, r2
 800106e:	bf28      	it	cs
 8001070:	4613      	movcs	r3, r2
 8001072:	b2db      	uxtb	r3, r3
 8001074:	4619      	mov	r1, r3
 8001076:	2011      	movs	r0, #17
 8001078:	f7ff fe18 	bl	8000cac <NRF24_write_register>
}
 800107c:	bf00      	nop
 800107e:	3710      	adds	r7, #16
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}
 8001084:	2400020a 	.word	0x2400020a

08001088 <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	460a      	mov	r2, r1
 8001092:	71fb      	strb	r3, [r7, #7]
 8001094:	4613      	mov	r3, r2
 8001096:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 8001098:	79fb      	ldrb	r3, [r7, #7]
 800109a:	011b      	lsls	r3, r3, #4
 800109c:	b25a      	sxtb	r2, r3
 800109e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010a2:	f003 030f 	and.w	r3, r3, #15
 80010a6:	b25b      	sxtb	r3, r3
 80010a8:	4313      	orrs	r3, r2
 80010aa:	b25b      	sxtb	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2004      	movs	r0, #4
 80010b2:	f7ff fdfb 	bl	8000cac <NRF24_write_register>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b084      	sub	sp, #16
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 80010c8:	237f      	movs	r3, #127	; 0x7f
 80010ca:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 80010cc:	7bfa      	ldrb	r2, [r7, #15]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	4293      	cmp	r3, r2
 80010d2:	bf28      	it	cs
 80010d4:	4613      	movcs	r3, r2
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	4619      	mov	r1, r3
 80010da:	2005      	movs	r0, #5
 80010dc:	f7ff fde6 	bl	8000cac <NRF24_write_register>
}
 80010e0:	bf00      	nop
 80010e2:	3710      	adds	r7, #16
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}

080010e8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	4603      	mov	r3, r0
 80010f0:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 80010f2:	2320      	movs	r3, #32
 80010f4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4293      	cmp	r3, r2
 80010fc:	bf28      	it	cs
 80010fe:	4613      	movcs	r3, r2
 8001100:	b2da      	uxtb	r2, r3
 8001102:	4b04      	ldr	r3, [pc, #16]	; (8001114 <NRF24_setPayloadSize+0x2c>)
 8001104:	701a      	strb	r2, [r3, #0]
}
 8001106:	bf00      	nop
 8001108:	3714      	adds	r7, #20
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	2400020a 	.word	0x2400020a

08001118 <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 800111c:	2060      	movs	r0, #96	; 0x60
 800111e:	f7ff fd75 	bl	8000c0c <NRF24_read_register>
 8001122:	4603      	mov	r3, r0
}
 8001124:	4618      	mov	r0, r3
 8001126:	bd80      	pop	{r7, pc}

08001128 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800112c:	201d      	movs	r0, #29
 800112e:	f7ff fd6d 	bl	8000c0c <NRF24_read_register>
 8001132:	4603      	mov	r3, r0
 8001134:	f023 0304 	bic.w	r3, r3, #4
 8001138:	b2db      	uxtb	r3, r3
 800113a:	4619      	mov	r1, r3
 800113c:	201d      	movs	r0, #29
 800113e:	f7ff fdb5 	bl	8000cac <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 8001142:	2100      	movs	r1, #0
 8001144:	201c      	movs	r0, #28
 8001146:	f7ff fdb1 	bl	8000cac <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800114a:	4b02      	ldr	r3, [pc, #8]	; (8001154 <NRF24_disableDynamicPayloads+0x2c>)
 800114c:	2200      	movs	r2, #0
 800114e:	701a      	strb	r2, [r3, #0]
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}
 8001154:	2400020b 	.word	0x2400020b

08001158 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 8001162:	79fb      	ldrb	r3, [r7, #7]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d004      	beq.n	8001172 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 8001168:	213f      	movs	r1, #63	; 0x3f
 800116a:	2001      	movs	r0, #1
 800116c:	f7ff fd9e 	bl	8000cac <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001170:	e003      	b.n	800117a <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001172:	2100      	movs	r1, #0
 8001174:	2001      	movs	r0, #1
 8001176:	f7ff fd99 	bl	8000cac <NRF24_write_register>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001182:	b580      	push	{r7, lr}
 8001184:	b084      	sub	sp, #16
 8001186:	af00      	add	r7, sp, #0
 8001188:	4603      	mov	r3, r0
 800118a:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800118c:	2006      	movs	r0, #6
 800118e:	f7ff fd3d 	bl	8000c0c <NRF24_read_register>
 8001192:	4603      	mov	r3, r0
 8001194:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001196:	7bfb      	ldrb	r3, [r7, #15]
 8001198:	f023 0306 	bic.w	r3, r3, #6
 800119c:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800119e:	79fb      	ldrb	r3, [r7, #7]
 80011a0:	2b03      	cmp	r3, #3
 80011a2:	d104      	bne.n	80011ae <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011a4:	7bfb      	ldrb	r3, [r7, #15]
 80011a6:	f043 0306 	orr.w	r3, r3, #6
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e019      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 80011ae:	79fb      	ldrb	r3, [r7, #7]
 80011b0:	2b02      	cmp	r3, #2
 80011b2:	d104      	bne.n	80011be <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 80011b4:	7bfb      	ldrb	r3, [r7, #15]
 80011b6:	f043 0304 	orr.w	r3, r3, #4
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e011      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d104      	bne.n	80011ce <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 80011c4:	7bfb      	ldrb	r3, [r7, #15]
 80011c6:	f043 0302 	orr.w	r3, r3, #2
 80011ca:	73fb      	strb	r3, [r7, #15]
 80011cc:	e009      	b.n	80011e2 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d103      	bne.n	80011e2 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 80011da:	7bfb      	ldrb	r3, [r7, #15]
 80011dc:	f043 0306 	orr.w	r3, r3, #6
 80011e0:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
 80011e4:	4619      	mov	r1, r3
 80011e6:	2006      	movs	r0, #6
 80011e8:	f7ff fd60 	bl	8000cac <NRF24_write_register>
}
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 80011fe:	2300      	movs	r3, #0
 8001200:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001202:	2006      	movs	r0, #6
 8001204:	f7ff fd02 	bl	8000c0c <NRF24_read_register>
 8001208:	4603      	mov	r3, r0
 800120a:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <NRF24_setDataRate+0x88>)
 800120e:	2200      	movs	r2, #0
 8001210:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 8001212:	7bbb      	ldrb	r3, [r7, #14]
 8001214:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 8001218:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b02      	cmp	r3, #2
 800121e:	d107      	bne.n	8001230 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <NRF24_setDataRate+0x88>)
 8001222:	2200      	movs	r2, #0
 8001224:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 8001226:	7bbb      	ldrb	r3, [r7, #14]
 8001228:	f043 0320 	orr.w	r3, r3, #32
 800122c:	73bb      	strb	r3, [r7, #14]
 800122e:	e00d      	b.n	800124c <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d107      	bne.n	8001246 <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 8001236:	4b11      	ldr	r3, [pc, #68]	; (800127c <NRF24_setDataRate+0x88>)
 8001238:	2201      	movs	r2, #1
 800123a:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800123c:	7bbb      	ldrb	r3, [r7, #14]
 800123e:	f043 0308 	orr.w	r3, r3, #8
 8001242:	73bb      	strb	r3, [r7, #14]
 8001244:	e002      	b.n	800124c <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 8001246:	4b0d      	ldr	r3, [pc, #52]	; (800127c <NRF24_setDataRate+0x88>)
 8001248:	2200      	movs	r2, #0
 800124a:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800124c:	7bbb      	ldrb	r3, [r7, #14]
 800124e:	4619      	mov	r1, r3
 8001250:	2006      	movs	r0, #6
 8001252:	f7ff fd2b 	bl	8000cac <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 8001256:	2006      	movs	r0, #6
 8001258:	f7ff fcd8 	bl	8000c0c <NRF24_read_register>
 800125c:	4603      	mov	r3, r0
 800125e:	461a      	mov	r2, r3
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	4293      	cmp	r3, r2
 8001264:	d102      	bne.n	800126c <NRF24_setDataRate+0x78>
  {
    result = true;
 8001266:	2301      	movs	r3, #1
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e002      	b.n	8001272 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800126c:	4b03      	ldr	r3, [pc, #12]	; (800127c <NRF24_setDataRate+0x88>)
 800126e:	2200      	movs	r2, #0
 8001270:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3710      	adds	r7, #16
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	2400020c 	.word	0x2400020c

08001280 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fcbe 	bl	8000c0c <NRF24_read_register>
 8001290:	4603      	mov	r3, r0
 8001292:	f023 030c 	bic.w	r3, r3, #12
 8001296:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 8001298:	79fb      	ldrb	r3, [r7, #7]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d00f      	beq.n	80012be <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d104      	bne.n	80012ae <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 80012a4:	7bfb      	ldrb	r3, [r7, #15]
 80012a6:	f043 0308 	orr.w	r3, r3, #8
 80012aa:	73fb      	strb	r3, [r7, #15]
 80012ac:	e007      	b.n	80012be <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
 80012b0:	f043 0308 	orr.w	r3, r3, #8
 80012b4:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 80012b6:	7bfb      	ldrb	r3, [r7, #15]
 80012b8:	f043 0304 	orr.w	r3, r3, #4
 80012bc:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 80012be:	7bfb      	ldrb	r3, [r7, #15]
 80012c0:	4619      	mov	r1, r3
 80012c2:	2000      	movs	r0, #0
 80012c4:	f7ff fcf2 	bl	8000cac <NRF24_write_register>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 80012d4:	2000      	movs	r0, #0
 80012d6:	f7ff fc99 	bl	8000c0c <NRF24_read_register>
 80012da:	4603      	mov	r3, r0
 80012dc:	f023 0302 	bic.w	r3, r3, #2
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	4619      	mov	r1, r3
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff fce1 	bl	8000cac <NRF24_write_register>
}
 80012ea:	bf00      	nop
 80012ec:	bd80      	pop	{r7, pc}

080012ee <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b084      	sub	sp, #16
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 80012f6:	f7ff fd55 	bl	8000da4 <NRF24_get_status>
 80012fa:	4603      	mov	r3, r0
 80012fc:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 80012fe:	7bfb      	ldrb	r3, [r7, #15]
 8001300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001304:	2b00      	cmp	r3, #0
 8001306:	bf14      	ite	ne
 8001308:	2301      	movne	r3, #1
 800130a:	2300      	moveq	r3, #0
 800130c:	73bb      	strb	r3, [r7, #14]

  if (result)
 800130e:	7bbb      	ldrb	r3, [r7, #14]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d017      	beq.n	8001344 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d007      	beq.n	800132a <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800131a:	7bfb      	ldrb	r3, [r7, #15]
 800131c:	085b      	lsrs	r3, r3, #1
 800131e:	b2db      	uxtb	r3, r3
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	b2da      	uxtb	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800132a:	2140      	movs	r1, #64	; 0x40
 800132c:	2007      	movs	r0, #7
 800132e:	f7ff fcbd 	bl	8000cac <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	f003 0320 	and.w	r3, r3, #32
 8001338:	2b00      	cmp	r3, #0
 800133a:	d003      	beq.n	8001344 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800133c:	2120      	movs	r1, #32
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff fcb4 	bl	8000cac <NRF24_write_register>
    }
  }
  return result;
 8001344:	7bbb      	ldrb	r3, [r7, #14]
}
 8001346:	4618      	mov	r0, r3
 8001348:	3710      	adds	r7, #16
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800135a:	2000      	movs	r0, #0
 800135c:	f7ff fc36 	bl	8000bcc <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 8001360:	2000      	movs	r0, #0
 8001362:	f7ff fc53 	bl	8000c0c <NRF24_read_register>
 8001366:	4603      	mov	r3, r0
 8001368:	f043 0302 	orr.w	r3, r3, #2
 800136c:	b2db      	uxtb	r3, r3
 800136e:	f023 0301 	bic.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	4619      	mov	r1, r3
 8001376:	2000      	movs	r0, #0
 8001378:	f7ff fc98 	bl	8000cac <NRF24_write_register>
  NRF24_ce(1);
 800137c:	2001      	movs	r0, #1
 800137e:	f7ff fc25 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001382:	2096      	movs	r0, #150	; 0x96
 8001384:	f7ff fbe2 	bl	8000b4c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 8001388:	78fb      	ldrb	r3, [r7, #3]
 800138a:	4619      	mov	r1, r3
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7ff fcd7 	bl	8000d40 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001392:	2001      	movs	r0, #1
 8001394:	f7ff fc1a 	bl	8000bcc <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 8001398:	200f      	movs	r0, #15
 800139a:	f7ff fbd7 	bl	8000b4c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff fc14 	bl	8000bcc <NRF24_ce>
}
 80013a4:	bf00      	nop
 80013a6:	3708      	adds	r7, #8
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}

080013ac <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	60f8      	str	r0, [r7, #12]
 80013b4:	60b9      	str	r1, [r7, #8]
 80013b6:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 80013b8:	f7ff fcf4 	bl	8000da4 <NRF24_get_status>
 80013bc:	4603      	mov	r3, r0
 80013be:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	2200      	movs	r2, #0
 80013c4:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80013c6:	2170      	movs	r1, #112	; 0x70
 80013c8:	2007      	movs	r0, #7
 80013ca:	f7ff fc6f 	bl	8000cac <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	f003 0320 	and.w	r3, r3, #32
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	bf14      	ite	ne
 80013d8:	2301      	movne	r3, #1
 80013da:	2300      	moveq	r3, #0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 80013e2:	7dfb      	ldrb	r3, [r7, #23]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	bf14      	ite	ne
 80013ec:	2301      	movne	r3, #1
 80013ee:	2300      	moveq	r3, #0
 80013f0:	b2da      	uxtb	r2, r3
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 80013f6:	7dfb      	ldrb	r3, [r7, #23]
 80013f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	bf14      	ite	ne
 8001400:	2301      	movne	r3, #1
 8001402:	2300      	moveq	r3, #0
 8001404:	b2da      	uxtb	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	701a      	strb	r2, [r3, #0]
}
 800140a:	bf00      	nop
 800140c:	3718      	adds	r7, #24
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 8001416:	2170      	movs	r1, #112	; 0x70
 8001418:	2007      	movs	r0, #7
 800141a:	f7ff fc47 	bl	8000cac <NRF24_write_register>
}
 800141e:	bf00      	nop
 8001420:	bd80      	pop	{r7, pc}
	...

08001424 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b082      	sub	sp, #8
 8001428:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800142a:	2000      	movs	r0, #0
 800142c:	f7ff fbae 	bl	8000b8c <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 8001430:	2350      	movs	r3, #80	; 0x50
 8001432:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 8001434:	2373      	movs	r3, #115	; 0x73
 8001436:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 8001438:	1d39      	adds	r1, r7, #4
 800143a:	2364      	movs	r3, #100	; 0x64
 800143c:	2202      	movs	r2, #2
 800143e:	4805      	ldr	r0, [pc, #20]	; (8001454 <NRF24_ACTIVATE_cmd+0x30>)
 8001440:	f00d fb6e 	bl	800eb20 <HAL_SPI_Transmit>
	NRF24_csn(1);
 8001444:	2001      	movs	r0, #1
 8001446:	f7ff fba1 	bl	8000b8c <NRF24_csn>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000218 	.word	0x24000218

08001458 <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 8001458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800145a:	b0a1      	sub	sp, #132	; 0x84
 800145c:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800145e:	f107 0308 	add.w	r3, r7, #8
 8001462:	4ab6      	ldr	r2, [pc, #728]	; (800173c <printRadioSettings+0x2e4>)
 8001464:	461c      	mov	r4, r3
 8001466:	4615      	mov	r5, r2
 8001468:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800146c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800146e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001474:	682b      	ldr	r3, [r5, #0]
 8001476:	461a      	mov	r2, r3
 8001478:	8022      	strh	r2, [r4, #0]
 800147a:	3402      	adds	r4, #2
 800147c:	0c1b      	lsrs	r3, r3, #16
 800147e:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001480:	f107 0308 	add.w	r3, r7, #8
 8001484:	4618      	mov	r0, r3
 8001486:	f7fe ff2b 	bl	80002e0 <strlen>
 800148a:	4603      	mov	r3, r0
 800148c:	b29a      	uxth	r2, r3
 800148e:	f107 0108 	add.w	r1, r7, #8
 8001492:	230a      	movs	r3, #10
 8001494:	48aa      	ldr	r0, [pc, #680]	; (8001740 <printRadioSettings+0x2e8>)
 8001496:	f00e fb4c 	bl	800fb32 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800149a:	2000      	movs	r0, #0
 800149c:	f7ff fbb6 	bl	8000c0c <NRF24_read_register>
 80014a0:	4603      	mov	r3, r0
 80014a2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 80014a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014aa:	f003 0308 	and.w	r3, r3, #8
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d020      	beq.n	80014f4 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 80014b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d00b      	beq.n	80014d6 <printRadioSettings+0x7e>
 80014be:	f107 0308 	add.w	r3, r7, #8
 80014c2:	4aa0      	ldr	r2, [pc, #640]	; (8001744 <printRadioSettings+0x2ec>)
 80014c4:	461c      	mov	r4, r3
 80014c6:	4615      	mov	r5, r2
 80014c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014cc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80014d4:	e017      	b.n	8001506 <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4a9b      	ldr	r2, [pc, #620]	; (8001748 <printRadioSettings+0x2f0>)
 80014dc:	461c      	mov	r4, r3
 80014de:	4615      	mov	r5, r2
 80014e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014e4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014e8:	c403      	stmia	r4!, {r0, r1}
 80014ea:	8022      	strh	r2, [r4, #0]
 80014ec:	3402      	adds	r4, #2
 80014ee:	0c13      	lsrs	r3, r2, #16
 80014f0:	7023      	strb	r3, [r4, #0]
 80014f2:	e008      	b.n	8001506 <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 80014f4:	f107 0308 	add.w	r3, r7, #8
 80014f8:	4a94      	ldr	r2, [pc, #592]	; (800174c <printRadioSettings+0x2f4>)
 80014fa:	461c      	mov	r4, r3
 80014fc:	4615      	mov	r5, r2
 80014fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001500:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001502:	682b      	ldr	r3, [r5, #0]
 8001504:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4618      	mov	r0, r3
 800150c:	f7fe fee8 	bl	80002e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f107 0108 	add.w	r1, r7, #8
 8001518:	230a      	movs	r3, #10
 800151a:	4889      	ldr	r0, [pc, #548]	; (8001740 <printRadioSettings+0x2e8>)
 800151c:	f00e fb09 	bl	800fb32 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001520:	2001      	movs	r0, #1
 8001522:	f7ff fb73 	bl	8000c0c <NRF24_read_register>
 8001526:	4603      	mov	r3, r0
 8001528:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800152c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001530:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001534:	2b00      	cmp	r3, #0
 8001536:	bfcc      	ite	gt
 8001538:	2301      	movgt	r3, #1
 800153a:	2300      	movle	r3, #0
 800153c:	b2db      	uxtb	r3, r3
 800153e:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001540:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001544:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001548:	2b00      	cmp	r3, #0
 800154a:	bfcc      	ite	gt
 800154c:	2301      	movgt	r3, #1
 800154e:	2300      	movle	r3, #0
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001554:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001558:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800155c:	2b00      	cmp	r3, #0
 800155e:	bfcc      	ite	gt
 8001560:	2301      	movgt	r3, #1
 8001562:	2300      	movle	r3, #0
 8001564:	b2db      	uxtb	r3, r3
 8001566:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001568:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800156c:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001570:	2b00      	cmp	r3, #0
 8001572:	bfcc      	ite	gt
 8001574:	2301      	movgt	r3, #1
 8001576:	2300      	movle	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800157c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001580:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001584:	2b00      	cmp	r3, #0
 8001586:	bfcc      	ite	gt
 8001588:	2301      	movgt	r3, #1
 800158a:	2300      	movle	r3, #0
 800158c:	b2db      	uxtb	r3, r3
 800158e:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001590:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001594:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001598:	2b00      	cmp	r3, #0
 800159a:	bfcc      	ite	gt
 800159c:	2301      	movgt	r3, #1
 800159e:	2300      	movle	r3, #0
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f107 0008 	add.w	r0, r7, #8
 80015a6:	9303      	str	r3, [sp, #12]
 80015a8:	9402      	str	r4, [sp, #8]
 80015aa:	9101      	str	r1, [sp, #4]
 80015ac:	9200      	str	r2, [sp, #0]
 80015ae:	4633      	mov	r3, r6
 80015b0:	462a      	mov	r2, r5
 80015b2:	4967      	ldr	r1, [pc, #412]	; (8001750 <printRadioSettings+0x2f8>)
 80015b4:	f018 f8a8 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	4618      	mov	r0, r3
 80015be:	f7fe fe8f 	bl	80002e0 <strlen>
 80015c2:	4603      	mov	r3, r0
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	f107 0108 	add.w	r1, r7, #8
 80015ca:	230a      	movs	r3, #10
 80015cc:	485c      	ldr	r0, [pc, #368]	; (8001740 <printRadioSettings+0x2e8>)
 80015ce:	f00e fab0 	bl	800fb32 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 80015d2:	2002      	movs	r0, #2
 80015d4:	f7ff fb1a 	bl	8000c0c <NRF24_read_register>
 80015d8:	4603      	mov	r3, r0
 80015da:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015de:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015e2:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	bfcc      	ite	gt
 80015ea:	2301      	movgt	r3, #1
 80015ec:	2300      	movle	r3, #0
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80015f2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80015f6:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	bfcc      	ite	gt
 80015fe:	2301      	movgt	r3, #1
 8001600:	2300      	movle	r3, #0
 8001602:	b2db      	uxtb	r3, r3
 8001604:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001606:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800160a:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800160e:	2b00      	cmp	r3, #0
 8001610:	bfcc      	ite	gt
 8001612:	2301      	movgt	r3, #1
 8001614:	2300      	movle	r3, #0
 8001616:	b2db      	uxtb	r3, r3
 8001618:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800161a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800161e:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001622:	2b00      	cmp	r3, #0
 8001624:	bfcc      	ite	gt
 8001626:	2301      	movgt	r3, #1
 8001628:	2300      	movle	r3, #0
 800162a:	b2db      	uxtb	r3, r3
 800162c:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800162e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001632:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001636:	2b00      	cmp	r3, #0
 8001638:	bfcc      	ite	gt
 800163a:	2301      	movgt	r3, #1
 800163c:	2300      	movle	r3, #0
 800163e:	b2db      	uxtb	r3, r3
 8001640:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001642:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001646:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800164a:	2b00      	cmp	r3, #0
 800164c:	bfcc      	ite	gt
 800164e:	2301      	movgt	r3, #1
 8001650:	2300      	movle	r3, #0
 8001652:	b2db      	uxtb	r3, r3
 8001654:	f107 0008 	add.w	r0, r7, #8
 8001658:	9303      	str	r3, [sp, #12]
 800165a:	9402      	str	r4, [sp, #8]
 800165c:	9101      	str	r1, [sp, #4]
 800165e:	9200      	str	r2, [sp, #0]
 8001660:	4633      	mov	r3, r6
 8001662:	462a      	mov	r2, r5
 8001664:	493b      	ldr	r1, [pc, #236]	; (8001754 <printRadioSettings+0x2fc>)
 8001666:	f018 f84f 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	4618      	mov	r0, r3
 8001670:	f7fe fe36 	bl	80002e0 <strlen>
 8001674:	4603      	mov	r3, r0
 8001676:	b29a      	uxth	r2, r3
 8001678:	f107 0108 	add.w	r1, r7, #8
 800167c:	230a      	movs	r3, #10
 800167e:	4830      	ldr	r0, [pc, #192]	; (8001740 <printRadioSettings+0x2e8>)
 8001680:	f00e fa57 	bl	800fb32 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001684:	2003      	movs	r0, #3
 8001686:	f7ff fac1 	bl	8000c0c <NRF24_read_register>
 800168a:	4603      	mov	r3, r0
 800168c:	f003 0303 	and.w	r3, r3, #3
 8001690:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001694:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001698:	3302      	adds	r3, #2
 800169a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800169e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 80016a2:	f107 0308 	add.w	r3, r7, #8
 80016a6:	492c      	ldr	r1, [pc, #176]	; (8001758 <printRadioSettings+0x300>)
 80016a8:	4618      	mov	r0, r3
 80016aa:	f018 f82d 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	4618      	mov	r0, r3
 80016b4:	f7fe fe14 	bl	80002e0 <strlen>
 80016b8:	4603      	mov	r3, r0
 80016ba:	b29a      	uxth	r2, r3
 80016bc:	f107 0108 	add.w	r1, r7, #8
 80016c0:	230a      	movs	r3, #10
 80016c2:	481f      	ldr	r0, [pc, #124]	; (8001740 <printRadioSettings+0x2e8>)
 80016c4:	f00e fa35 	bl	800fb32 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 80016c8:	2005      	movs	r0, #5
 80016ca:	f7ff fa9f 	bl	8000c0c <NRF24_read_register>
 80016ce:	4603      	mov	r3, r0
 80016d0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 80016d4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80016d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80016dc:	f107 0308 	add.w	r3, r7, #8
 80016e0:	491e      	ldr	r1, [pc, #120]	; (800175c <printRadioSettings+0x304>)
 80016e2:	4618      	mov	r0, r3
 80016e4:	f018 f810 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80016e8:	f107 0308 	add.w	r3, r7, #8
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f107 0108 	add.w	r1, r7, #8
 80016fa:	230a      	movs	r3, #10
 80016fc:	4810      	ldr	r0, [pc, #64]	; (8001740 <printRadioSettings+0x2e8>)
 80016fe:	f00e fa18 	bl	800fb32 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001702:	2006      	movs	r0, #6
 8001704:	f7ff fa82 	bl	8000c0c <NRF24_read_register>
 8001708:	4603      	mov	r3, r0
 800170a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800170e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <printRadioSettings+0x30c>
 800171a:	f107 0308 	add.w	r3, r7, #8
 800171e:	4a10      	ldr	r2, [pc, #64]	; (8001760 <printRadioSettings+0x308>)
 8001720:	461c      	mov	r4, r3
 8001722:	4615      	mov	r5, r2
 8001724:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001726:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001728:	e895 0003 	ldmia.w	r5, {r0, r1}
 800172c:	6020      	str	r0, [r4, #0]
 800172e:	3404      	adds	r4, #4
 8001730:	8021      	strh	r1, [r4, #0]
 8001732:	3402      	adds	r4, #2
 8001734:	0c0b      	lsrs	r3, r1, #16
 8001736:	7023      	strb	r3, [r4, #0]
 8001738:	e023      	b.n	8001782 <printRadioSettings+0x32a>
 800173a:	bf00      	nop
 800173c:	0801a720 	.word	0x0801a720
 8001740:	240002a0 	.word	0x240002a0
 8001744:	0801a754 	.word	0x0801a754
 8001748:	0801a770 	.word	0x0801a770
 800174c:	0801a78c 	.word	0x0801a78c
 8001750:	0801a7a0 	.word	0x0801a7a0
 8001754:	0801a7e4 	.word	0x0801a7e4
 8001758:	0801a830 	.word	0x0801a830
 800175c:	0801a84c 	.word	0x0801a84c
 8001760:	0801a860 	.word	0x0801a860
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001764:	f107 0308 	add.w	r3, r7, #8
 8001768:	4a29      	ldr	r2, [pc, #164]	; (8001810 <printRadioSettings+0x3b8>)
 800176a:	461c      	mov	r4, r3
 800176c:	4615      	mov	r5, r2
 800176e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001776:	6020      	str	r0, [r4, #0]
 8001778:	3404      	adds	r4, #4
 800177a:	8021      	strh	r1, [r4, #0]
 800177c:	3402      	adds	r4, #2
 800177e:	0c0b      	lsrs	r3, r1, #16
 8001780:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	4618      	mov	r0, r3
 8001788:	f7fe fdaa 	bl	80002e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	230a      	movs	r3, #10
 8001796:	481f      	ldr	r0, [pc, #124]	; (8001814 <printRadioSettings+0x3bc>)
 8001798:	f00e f9cb 	bl	800fb32 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 800179c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017a0:	f003 0306 	and.w	r3, r3, #6
 80017a4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 80017a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 80017b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d109      	bne.n	80017ce <printRadioSettings+0x376>
 80017ba:	f107 0308 	add.w	r3, r7, #8
 80017be:	4a16      	ldr	r2, [pc, #88]	; (8001818 <printRadioSettings+0x3c0>)
 80017c0:	461c      	mov	r4, r3
 80017c2:	4615      	mov	r5, r2
 80017c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017c8:	682b      	ldr	r3, [r5, #0]
 80017ca:	6023      	str	r3, [r4, #0]
 80017cc:	e037      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 80017ce:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d109      	bne.n	80017ea <printRadioSettings+0x392>
 80017d6:	f107 0308 	add.w	r3, r7, #8
 80017da:	4a10      	ldr	r2, [pc, #64]	; (800181c <printRadioSettings+0x3c4>)
 80017dc:	461c      	mov	r4, r3
 80017de:	4615      	mov	r5, r2
 80017e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80017e4:	682b      	ldr	r3, [r5, #0]
 80017e6:	6023      	str	r3, [r4, #0]
 80017e8:	e029      	b.n	800183e <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 80017ea:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80017ee:	2b02      	cmp	r3, #2
 80017f0:	d118      	bne.n	8001824 <printRadioSettings+0x3cc>
 80017f2:	f107 0308 	add.w	r3, r7, #8
 80017f6:	4a0a      	ldr	r2, [pc, #40]	; (8001820 <printRadioSettings+0x3c8>)
 80017f8:	461c      	mov	r4, r3
 80017fa:	4615      	mov	r5, r2
 80017fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80017fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001800:	682b      	ldr	r3, [r5, #0]
 8001802:	461a      	mov	r2, r3
 8001804:	8022      	strh	r2, [r4, #0]
 8001806:	3402      	adds	r4, #2
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	7023      	strb	r3, [r4, #0]
 800180c:	e017      	b.n	800183e <printRadioSettings+0x3e6>
 800180e:	bf00      	nop
 8001810:	0801a878 	.word	0x0801a878
 8001814:	240002a0 	.word	0x240002a0
 8001818:	0801a890 	.word	0x0801a890
 800181c:	0801a8a4 	.word	0x0801a8a4
 8001820:	0801a8b8 	.word	0x0801a8b8
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001824:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001828:	2b03      	cmp	r3, #3
 800182a:	d108      	bne.n	800183e <printRadioSettings+0x3e6>
 800182c:	f107 0308 	add.w	r3, r7, #8
 8001830:	4ad7      	ldr	r2, [pc, #860]	; (8001b90 <printRadioSettings+0x738>)
 8001832:	461c      	mov	r4, r3
 8001834:	4615      	mov	r5, r2
 8001836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800183a:	682b      	ldr	r3, [r5, #0]
 800183c:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800183e:	f107 0308 	add.w	r3, r7, #8
 8001842:	4618      	mov	r0, r3
 8001844:	f7fe fd4c 	bl	80002e0 <strlen>
 8001848:	4603      	mov	r3, r0
 800184a:	b29a      	uxth	r2, r3
 800184c:	f107 0108 	add.w	r1, r7, #8
 8001850:	230a      	movs	r3, #10
 8001852:	48d0      	ldr	r0, [pc, #832]	; (8001b94 <printRadioSettings+0x73c>)
 8001854:	f00e f96d 	bl	800fb32 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001858:	463b      	mov	r3, r7
 800185a:	2205      	movs	r2, #5
 800185c:	4619      	mov	r1, r3
 800185e:	200a      	movs	r0, #10
 8001860:	f7ff f9fc 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001864:	793b      	ldrb	r3, [r7, #4]
 8001866:	461c      	mov	r4, r3
 8001868:	78fb      	ldrb	r3, [r7, #3]
 800186a:	461d      	mov	r5, r3
 800186c:	78bb      	ldrb	r3, [r7, #2]
 800186e:	787a      	ldrb	r2, [r7, #1]
 8001870:	7839      	ldrb	r1, [r7, #0]
 8001872:	f107 0008 	add.w	r0, r7, #8
 8001876:	9102      	str	r1, [sp, #8]
 8001878:	9201      	str	r2, [sp, #4]
 800187a:	9300      	str	r3, [sp, #0]
 800187c:	462b      	mov	r3, r5
 800187e:	4622      	mov	r2, r4
 8001880:	49c5      	ldr	r1, [pc, #788]	; (8001b98 <printRadioSettings+0x740>)
 8001882:	f017 ff41 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001886:	f107 0308 	add.w	r3, r7, #8
 800188a:	4618      	mov	r0, r3
 800188c:	f7fe fd28 	bl	80002e0 <strlen>
 8001890:	4603      	mov	r3, r0
 8001892:	b29a      	uxth	r2, r3
 8001894:	f107 0108 	add.w	r1, r7, #8
 8001898:	230a      	movs	r3, #10
 800189a:	48be      	ldr	r0, [pc, #760]	; (8001b94 <printRadioSettings+0x73c>)
 800189c:	f00e f949 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 80018a0:	463b      	mov	r3, r7
 80018a2:	2205      	movs	r2, #5
 80018a4:	4619      	mov	r1, r3
 80018a6:	200b      	movs	r0, #11
 80018a8:	f7ff f9d8 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80018ac:	793b      	ldrb	r3, [r7, #4]
 80018ae:	461c      	mov	r4, r3
 80018b0:	78fb      	ldrb	r3, [r7, #3]
 80018b2:	461d      	mov	r5, r3
 80018b4:	78bb      	ldrb	r3, [r7, #2]
 80018b6:	787a      	ldrb	r2, [r7, #1]
 80018b8:	7839      	ldrb	r1, [r7, #0]
 80018ba:	f107 0008 	add.w	r0, r7, #8
 80018be:	9102      	str	r1, [sp, #8]
 80018c0:	9201      	str	r2, [sp, #4]
 80018c2:	9300      	str	r3, [sp, #0]
 80018c4:	462b      	mov	r3, r5
 80018c6:	4622      	mov	r2, r4
 80018c8:	49b4      	ldr	r1, [pc, #720]	; (8001b9c <printRadioSettings+0x744>)
 80018ca:	f017 ff1d 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80018ce:	f107 0308 	add.w	r3, r7, #8
 80018d2:	4618      	mov	r0, r3
 80018d4:	f7fe fd04 	bl	80002e0 <strlen>
 80018d8:	4603      	mov	r3, r0
 80018da:	b29a      	uxth	r2, r3
 80018dc:	f107 0108 	add.w	r1, r7, #8
 80018e0:	230a      	movs	r3, #10
 80018e2:	48ac      	ldr	r0, [pc, #688]	; (8001b94 <printRadioSettings+0x73c>)
 80018e4:	f00e f925 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 80018e8:	463b      	mov	r3, r7
 80018ea:	2201      	movs	r2, #1
 80018ec:	4619      	mov	r1, r3
 80018ee:	200c      	movs	r0, #12
 80018f0:	f7ff f9b4 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 80018f4:	783b      	ldrb	r3, [r7, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 0308 	add.w	r3, r7, #8
 80018fc:	49a8      	ldr	r1, [pc, #672]	; (8001ba0 <printRadioSettings+0x748>)
 80018fe:	4618      	mov	r0, r3
 8001900:	f017 ff02 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001904:	f107 0308 	add.w	r3, r7, #8
 8001908:	4618      	mov	r0, r3
 800190a:	f7fe fce9 	bl	80002e0 <strlen>
 800190e:	4603      	mov	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	f107 0108 	add.w	r1, r7, #8
 8001916:	230a      	movs	r3, #10
 8001918:	489e      	ldr	r0, [pc, #632]	; (8001b94 <printRadioSettings+0x73c>)
 800191a:	f00e f90a 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800191e:	463b      	mov	r3, r7
 8001920:	2201      	movs	r2, #1
 8001922:	4619      	mov	r1, r3
 8001924:	200d      	movs	r0, #13
 8001926:	f7ff f999 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800192a:	783b      	ldrb	r3, [r7, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	f107 0308 	add.w	r3, r7, #8
 8001932:	499c      	ldr	r1, [pc, #624]	; (8001ba4 <printRadioSettings+0x74c>)
 8001934:	4618      	mov	r0, r3
 8001936:	f017 fee7 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800193a:	f107 0308 	add.w	r3, r7, #8
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fcce 	bl	80002e0 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	b29a      	uxth	r2, r3
 8001948:	f107 0108 	add.w	r1, r7, #8
 800194c:	230a      	movs	r3, #10
 800194e:	4891      	ldr	r0, [pc, #580]	; (8001b94 <printRadioSettings+0x73c>)
 8001950:	f00e f8ef 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001954:	463b      	mov	r3, r7
 8001956:	2201      	movs	r2, #1
 8001958:	4619      	mov	r1, r3
 800195a:	200e      	movs	r0, #14
 800195c:	f7ff f97e 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001960:	783b      	ldrb	r3, [r7, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	f107 0308 	add.w	r3, r7, #8
 8001968:	498f      	ldr	r1, [pc, #572]	; (8001ba8 <printRadioSettings+0x750>)
 800196a:	4618      	mov	r0, r3
 800196c:	f017 fecc 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001970:	f107 0308 	add.w	r3, r7, #8
 8001974:	4618      	mov	r0, r3
 8001976:	f7fe fcb3 	bl	80002e0 <strlen>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	f107 0108 	add.w	r1, r7, #8
 8001982:	230a      	movs	r3, #10
 8001984:	4883      	ldr	r0, [pc, #524]	; (8001b94 <printRadioSettings+0x73c>)
 8001986:	f00e f8d4 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800198a:	463b      	mov	r3, r7
 800198c:	2201      	movs	r2, #1
 800198e:	4619      	mov	r1, r3
 8001990:	200f      	movs	r0, #15
 8001992:	f7ff f963 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001996:	783b      	ldrb	r3, [r7, #0]
 8001998:	461a      	mov	r2, r3
 800199a:	f107 0308 	add.w	r3, r7, #8
 800199e:	4983      	ldr	r1, [pc, #524]	; (8001bac <printRadioSettings+0x754>)
 80019a0:	4618      	mov	r0, r3
 80019a2:	f017 feb1 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019a6:	f107 0308 	add.w	r3, r7, #8
 80019aa:	4618      	mov	r0, r3
 80019ac:	f7fe fc98 	bl	80002e0 <strlen>
 80019b0:	4603      	mov	r3, r0
 80019b2:	b29a      	uxth	r2, r3
 80019b4:	f107 0108 	add.w	r1, r7, #8
 80019b8:	230a      	movs	r3, #10
 80019ba:	4876      	ldr	r0, [pc, #472]	; (8001b94 <printRadioSettings+0x73c>)
 80019bc:	f00e f8b9 	bl	800fb32 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 80019c0:	463b      	mov	r3, r7
 80019c2:	2205      	movs	r2, #5
 80019c4:	4619      	mov	r1, r3
 80019c6:	2010      	movs	r0, #16
 80019c8:	f7ff f948 	bl	8000c5c <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 80019cc:	793b      	ldrb	r3, [r7, #4]
 80019ce:	461c      	mov	r4, r3
 80019d0:	78fb      	ldrb	r3, [r7, #3]
 80019d2:	461d      	mov	r5, r3
 80019d4:	78bb      	ldrb	r3, [r7, #2]
 80019d6:	787a      	ldrb	r2, [r7, #1]
 80019d8:	7839      	ldrb	r1, [r7, #0]
 80019da:	f107 0008 	add.w	r0, r7, #8
 80019de:	9102      	str	r1, [sp, #8]
 80019e0:	9201      	str	r2, [sp, #4]
 80019e2:	9300      	str	r3, [sp, #0]
 80019e4:	462b      	mov	r3, r5
 80019e6:	4622      	mov	r2, r4
 80019e8:	4971      	ldr	r1, [pc, #452]	; (8001bb0 <printRadioSettings+0x758>)
 80019ea:	f017 fe8d 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80019ee:	f107 0308 	add.w	r3, r7, #8
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7fe fc74 	bl	80002e0 <strlen>
 80019f8:	4603      	mov	r3, r0
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	f107 0108 	add.w	r1, r7, #8
 8001a00:	230a      	movs	r3, #10
 8001a02:	4864      	ldr	r0, [pc, #400]	; (8001b94 <printRadioSettings+0x73c>)
 8001a04:	f00e f895 	bl	800fb32 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001a08:	2011      	movs	r0, #17
 8001a0a:	f7ff f8ff 	bl	8000c0c <NRF24_read_register>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a18:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a1c:	f107 0308 	add.w	r3, r7, #8
 8001a20:	4964      	ldr	r1, [pc, #400]	; (8001bb4 <printRadioSettings+0x75c>)
 8001a22:	4618      	mov	r0, r3
 8001a24:	f017 fe70 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a28:	f107 0308 	add.w	r3, r7, #8
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7fe fc57 	bl	80002e0 <strlen>
 8001a32:	4603      	mov	r3, r0
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f107 0108 	add.w	r1, r7, #8
 8001a3a:	230a      	movs	r3, #10
 8001a3c:	4855      	ldr	r0, [pc, #340]	; (8001b94 <printRadioSettings+0x73c>)
 8001a3e:	f00e f878 	bl	800fb32 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001a42:	2012      	movs	r0, #18
 8001a44:	f7ff f8e2 	bl	8000c0c <NRF24_read_register>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a4e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a56:	f107 0308 	add.w	r3, r7, #8
 8001a5a:	4957      	ldr	r1, [pc, #348]	; (8001bb8 <printRadioSettings+0x760>)
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f017 fe53 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a62:	f107 0308 	add.w	r3, r7, #8
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7fe fc3a 	bl	80002e0 <strlen>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	f107 0108 	add.w	r1, r7, #8
 8001a74:	230a      	movs	r3, #10
 8001a76:	4847      	ldr	r0, [pc, #284]	; (8001b94 <printRadioSettings+0x73c>)
 8001a78:	f00e f85b 	bl	800fb32 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8001a7c:	2013      	movs	r0, #19
 8001a7e:	f7ff f8c5 	bl	8000c0c <NRF24_read_register>
 8001a82:	4603      	mov	r3, r0
 8001a84:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001a88:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a8c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a90:	f107 0308 	add.w	r3, r7, #8
 8001a94:	4949      	ldr	r1, [pc, #292]	; (8001bbc <printRadioSettings+0x764>)
 8001a96:	4618      	mov	r0, r3
 8001a98:	f017 fe36 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9c:	f107 0308 	add.w	r3, r7, #8
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f7fe fc1d 	bl	80002e0 <strlen>
 8001aa6:	4603      	mov	r3, r0
 8001aa8:	b29a      	uxth	r2, r3
 8001aaa:	f107 0108 	add.w	r1, r7, #8
 8001aae:	230a      	movs	r3, #10
 8001ab0:	4838      	ldr	r0, [pc, #224]	; (8001b94 <printRadioSettings+0x73c>)
 8001ab2:	f00e f83e 	bl	800fb32 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 8001ab6:	2014      	movs	r0, #20
 8001ab8:	f7ff f8a8 	bl	8000c0c <NRF24_read_register>
 8001abc:	4603      	mov	r3, r0
 8001abe:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001ac2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	493c      	ldr	r1, [pc, #240]	; (8001bc0 <printRadioSettings+0x768>)
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f017 fe19 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7fe fc00 	bl	80002e0 <strlen>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	f107 0108 	add.w	r1, r7, #8
 8001ae8:	230a      	movs	r3, #10
 8001aea:	482a      	ldr	r0, [pc, #168]	; (8001b94 <printRadioSettings+0x73c>)
 8001aec:	f00e f821 	bl	800fb32 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8001af0:	2015      	movs	r0, #21
 8001af2:	f7ff f88b 	bl	8000c0c <NRF24_read_register>
 8001af6:	4603      	mov	r3, r0
 8001af8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b04:	f107 0308 	add.w	r3, r7, #8
 8001b08:	492e      	ldr	r1, [pc, #184]	; (8001bc4 <printRadioSettings+0x76c>)
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f017 fdfc 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7fe fbe3 	bl	80002e0 <strlen>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	f107 0108 	add.w	r1, r7, #8
 8001b22:	230a      	movs	r3, #10
 8001b24:	481b      	ldr	r0, [pc, #108]	; (8001b94 <printRadioSettings+0x73c>)
 8001b26:	f00e f804 	bl	800fb32 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 8001b2a:	2016      	movs	r0, #22
 8001b2c:	f7ff f86e 	bl	8000c0c <NRF24_read_register>
 8001b30:	4603      	mov	r3, r0
 8001b32:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001b36:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b3e:	f107 0308 	add.w	r3, r7, #8
 8001b42:	4921      	ldr	r1, [pc, #132]	; (8001bc8 <printRadioSettings+0x770>)
 8001b44:	4618      	mov	r0, r3
 8001b46:	f017 fddf 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4a:	f107 0308 	add.w	r3, r7, #8
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fbc6 	bl	80002e0 <strlen>
 8001b54:	4603      	mov	r3, r0
 8001b56:	b29a      	uxth	r2, r3
 8001b58:	f107 0108 	add.w	r1, r7, #8
 8001b5c:	230a      	movs	r3, #10
 8001b5e:	480d      	ldr	r0, [pc, #52]	; (8001b94 <printRadioSettings+0x73c>)
 8001b60:	f00d ffe7 	bl	800fb32 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 8001b64:	201c      	movs	r0, #28
 8001b66:	f7ff f851 	bl	8000c0c <NRF24_read_register>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b70:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b74:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bfcc      	ite	gt
 8001b7c:	2301      	movgt	r3, #1
 8001b7e:	2300      	movle	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b84:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b88:	f003 0302 	and.w	r3, r3, #2
 8001b8c:	e01e      	b.n	8001bcc <printRadioSettings+0x774>
 8001b8e:	bf00      	nop
 8001b90:	0801a8cc 	.word	0x0801a8cc
 8001b94:	240002a0 	.word	0x240002a0
 8001b98:	0801a8e0 	.word	0x0801a8e0
 8001b9c:	0801a910 	.word	0x0801a910
 8001ba0:	0801a940 	.word	0x0801a940
 8001ba4:	0801a968 	.word	0x0801a968
 8001ba8:	0801a990 	.word	0x0801a990
 8001bac:	0801a9b8 	.word	0x0801a9b8
 8001bb0:	0801a9e0 	.word	0x0801a9e0
 8001bb4:	0801aa0c 	.word	0x0801aa0c
 8001bb8:	0801aa28 	.word	0x0801aa28
 8001bbc:	0801aa44 	.word	0x0801aa44
 8001bc0:	0801aa60 	.word	0x0801aa60
 8001bc4:	0801aa7c 	.word	0x0801aa7c
 8001bc8:	0801aa98 	.word	0x0801aa98
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	bfcc      	ite	gt
 8001bd0:	2301      	movgt	r3, #1
 8001bd2:	2300      	movle	r3, #0
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bdc:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	bfcc      	ite	gt
 8001be4:	2301      	movgt	r3, #1
 8001be6:	2300      	movle	r3, #0
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bf0:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	bfcc      	ite	gt
 8001bf8:	2301      	movgt	r3, #1
 8001bfa:	2300      	movle	r3, #0
 8001bfc:	b2db      	uxtb	r3, r3
 8001bfe:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c00:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c04:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	bfcc      	ite	gt
 8001c0c:	2301      	movgt	r3, #1
 8001c0e:	2300      	movle	r3, #0
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001c14:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c18:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	bfcc      	ite	gt
 8001c20:	2301      	movgt	r3, #1
 8001c22:	2300      	movle	r3, #0
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	f107 0008 	add.w	r0, r7, #8
 8001c2a:	9303      	str	r3, [sp, #12]
 8001c2c:	9402      	str	r4, [sp, #8]
 8001c2e:	9101      	str	r1, [sp, #4]
 8001c30:	9200      	str	r2, [sp, #0]
 8001c32:	4633      	mov	r3, r6
 8001c34:	462a      	mov	r2, r5
 8001c36:	494a      	ldr	r1, [pc, #296]	; (8001d60 <printRadioSettings+0x908>)
 8001c38:	f017 fd66 	bl	8019708 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c3c:	f107 0308 	add.w	r3, r7, #8
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7fe fb4d 	bl	80002e0 <strlen>
 8001c46:	4603      	mov	r3, r0
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	f107 0108 	add.w	r1, r7, #8
 8001c4e:	230a      	movs	r3, #10
 8001c50:	4844      	ldr	r0, [pc, #272]	; (8001d64 <printRadioSettings+0x90c>)
 8001c52:	f00d ff6e 	bl	800fb32 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 8001c56:	201d      	movs	r0, #29
 8001c58:	f7fe ffd8 	bl	8000c0c <NRF24_read_register>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 8001c62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d00c      	beq.n	8001c88 <printRadioSettings+0x830>
 8001c6e:	f107 0308 	add.w	r3, r7, #8
 8001c72:	4a3d      	ldr	r2, [pc, #244]	; (8001d68 <printRadioSettings+0x910>)
 8001c74:	461c      	mov	r4, r3
 8001c76:	4615      	mov	r5, r2
 8001c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c7c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c80:	6020      	str	r0, [r4, #0]
 8001c82:	3404      	adds	r4, #4
 8001c84:	8021      	strh	r1, [r4, #0]
 8001c86:	e00e      	b.n	8001ca6 <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 8001c88:	f107 0308 	add.w	r3, r7, #8
 8001c8c:	4a37      	ldr	r2, [pc, #220]	; (8001d6c <printRadioSettings+0x914>)
 8001c8e:	461c      	mov	r4, r3
 8001c90:	4615      	mov	r5, r2
 8001c92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c96:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001c9a:	6020      	str	r0, [r4, #0]
 8001c9c:	3404      	adds	r4, #4
 8001c9e:	8021      	strh	r1, [r4, #0]
 8001ca0:	3402      	adds	r4, #2
 8001ca2:	0c0b      	lsrs	r3, r1, #16
 8001ca4:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ca6:	f107 0308 	add.w	r3, r7, #8
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fb18 	bl	80002e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f107 0108 	add.w	r1, r7, #8
 8001cb8:	230a      	movs	r3, #10
 8001cba:	482a      	ldr	r0, [pc, #168]	; (8001d64 <printRadioSettings+0x90c>)
 8001cbc:	f00d ff39 	bl	800fb32 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8001cc0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d00b      	beq.n	8001ce4 <printRadioSettings+0x88c>
 8001ccc:	f107 0308 	add.w	r3, r7, #8
 8001cd0:	4a27      	ldr	r2, [pc, #156]	; (8001d70 <printRadioSettings+0x918>)
 8001cd2:	461c      	mov	r4, r3
 8001cd4:	4615      	mov	r5, r2
 8001cd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cda:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cde:	c403      	stmia	r4!, {r0, r1}
 8001ce0:	8022      	strh	r2, [r4, #0]
 8001ce2:	e00d      	b.n	8001d00 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8001ce4:	f107 0308 	add.w	r3, r7, #8
 8001ce8:	4a22      	ldr	r2, [pc, #136]	; (8001d74 <printRadioSettings+0x91c>)
 8001cea:	461c      	mov	r4, r3
 8001cec:	4615      	mov	r5, r2
 8001cee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cf0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cf2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001cf6:	c403      	stmia	r4!, {r0, r1}
 8001cf8:	8022      	strh	r2, [r4, #0]
 8001cfa:	3402      	adds	r4, #2
 8001cfc:	0c13      	lsrs	r3, r2, #16
 8001cfe:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d00:	f107 0308 	add.w	r3, r7, #8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe faeb 	bl	80002e0 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 0108 	add.w	r1, r7, #8
 8001d12:	230a      	movs	r3, #10
 8001d14:	4813      	ldr	r0, [pc, #76]	; (8001d64 <printRadioSettings+0x90c>)
 8001d16:	f00d ff0c 	bl	800fb32 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 8001d1a:	f107 0308 	add.w	r3, r7, #8
 8001d1e:	4a16      	ldr	r2, [pc, #88]	; (8001d78 <printRadioSettings+0x920>)
 8001d20:	461c      	mov	r4, r3
 8001d22:	4615      	mov	r5, r2
 8001d24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d30:	682b      	ldr	r3, [r5, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	8022      	strh	r2, [r4, #0]
 8001d36:	3402      	adds	r4, #2
 8001d38:	0c1b      	lsrs	r3, r3, #16
 8001d3a:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d3c:	f107 0308 	add.w	r3, r7, #8
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7fe facd 	bl	80002e0 <strlen>
 8001d46:	4603      	mov	r3, r0
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	f107 0108 	add.w	r1, r7, #8
 8001d4e:	230a      	movs	r3, #10
 8001d50:	4804      	ldr	r0, [pc, #16]	; (8001d64 <printRadioSettings+0x90c>)
 8001d52:	f00d feee 	bl	800fb32 <HAL_UART_Transmit>
}
 8001d56:	bf00      	nop
 8001d58:	3774      	adds	r7, #116	; 0x74
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	0801aab4 	.word	0x0801aab4
 8001d64:	240002a0 	.word	0x240002a0
 8001d68:	0801ab00 	.word	0x0801ab00
 8001d6c:	0801ab18 	.word	0x0801ab18
 8001d70:	0801ab30 	.word	0x0801ab30
 8001d74:	0801ab4c 	.word	0x0801ab4c
 8001d78:	0801a720 	.word	0x0801a720

08001d7c <WriteToBuff>:
#include <myprintf.h>


DataBuff DataBuffer = {.Data.DataBuff = 0, .counter = 0};

int WriteToBuff(char Data[], int len){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  if(len <= 1 || len >= Bufflength){
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	dd03      	ble.n	8001d94 <WriteToBuff+0x18>
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	db01      	blt.n	8001d98 <WriteToBuff+0x1c>
    return 3; //Dude dont try and break it
 8001d94:	2303      	movs	r3, #3
 8001d96:	e089      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter < Bufflength && DataBuffer.counter + len >= Bufflength){
 8001d98:	4b46      	ldr	r3, [pc, #280]	; (8001eb4 <WriteToBuff+0x138>)
 8001d9a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001da2:	d238      	bcs.n	8001e16 <WriteToBuff+0x9a>
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <WriteToBuff+0x138>)
 8001da6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	4413      	add	r3, r2
 8001dae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001db2:	d330      	bcc.n	8001e16 <WriteToBuff+0x9a>
    DataBuffer.counter = Bufflength;
 8001db4:	4b3f      	ldr	r3, [pc, #252]	; (8001eb4 <WriteToBuff+0x138>)
 8001db6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001dbe:	4b3d      	ldr	r3, [pc, #244]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001dc4:	4a3b      	ldr	r2, [pc, #236]	; (8001eb4 <WriteToBuff+0x138>)
 8001dc6:	4413      	add	r3, r2
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f017 fb1f 	bl	8019410 <memcpy>
    DataBuffer.counter += len;
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <WriteToBuff+0x138>)
 8001dd4:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	4413      	add	r3, r2
 8001ddc:	4a35      	ldr	r2, [pc, #212]	; (8001eb4 <WriteToBuff+0x138>)
 8001dde:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff1, sizeof(DataBuffer.Data.DataBuff1), &testByte) == 0){
 8001de2:	4b35      	ldr	r3, [pc, #212]	; (8001eb8 <WriteToBuff+0x13c>)
 8001de4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001de8:	4932      	ldr	r1, [pc, #200]	; (8001eb4 <WriteToBuff+0x138>)
 8001dea:	4834      	ldr	r0, [pc, #208]	; (8001ebc <WriteToBuff+0x140>)
 8001dec:	f016 fb5f 	bl	80184ae <f_write>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d10d      	bne.n	8001e12 <WriteToBuff+0x96>

      memset(DataBuffer.Data.DataBuff2, 0, sizeof(DataBuffer.Data.DataBuff2)); //Clear next buffer after writing
 8001df6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001dfa:	2100      	movs	r1, #0
 8001dfc:	4830      	ldr	r0, [pc, #192]	; (8001ec0 <WriteToBuff+0x144>)
 8001dfe:	f017 fb12 	bl	8019426 <memset>
    	f_sync(&myFILE);
 8001e02:	482e      	ldr	r0, [pc, #184]	; (8001ebc <WriteToBuff+0x140>)
 8001e04:	f016 fcc8 	bl	8018798 <f_sync>
      printf("Buffer 1 has been written\n");
 8001e08:	482e      	ldr	r0, [pc, #184]	; (8001ec4 <WriteToBuff+0x148>)
 8001e0a:	f017 fc31 	bl	8019670 <puts>
      return 1; //buffer 1 has been written
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e04c      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e12:	2304      	movs	r3, #4
 8001e14:	e04a      	b.n	8001eac <WriteToBuff+0x130>
  }

  if(DataBuffer.counter + len >= 2*Bufflength){
 8001e16:	4b27      	ldr	r3, [pc, #156]	; (8001eb4 <WriteToBuff+0x138>)
 8001e18:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001e24:	d32f      	bcc.n	8001e86 <WriteToBuff+0x10a>
    DataBuffer.counter = 0;
 8001e26:	4b23      	ldr	r3, [pc, #140]	; (8001eb4 <WriteToBuff+0x138>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e2e:	4b21      	ldr	r3, [pc, #132]	; (8001eb4 <WriteToBuff+0x138>)
 8001e30:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e34:	4a1f      	ldr	r2, [pc, #124]	; (8001eb4 <WriteToBuff+0x138>)
 8001e36:	4413      	add	r3, r2
 8001e38:	683a      	ldr	r2, [r7, #0]
 8001e3a:	6879      	ldr	r1, [r7, #4]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f017 fae7 	bl	8019410 <memcpy>
    DataBuffer.counter += len;
 8001e42:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <WriteToBuff+0x138>)
 8001e44:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	4a19      	ldr	r2, [pc, #100]	; (8001eb4 <WriteToBuff+0x138>)
 8001e4e:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
    if(f_write(&myFILE, DataBuffer.Data.DataBuff2, sizeof(DataBuffer.Data.DataBuff2), &testByte) == 0){
 8001e52:	4b19      	ldr	r3, [pc, #100]	; (8001eb8 <WriteToBuff+0x13c>)
 8001e54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e58:	4919      	ldr	r1, [pc, #100]	; (8001ec0 <WriteToBuff+0x144>)
 8001e5a:	4818      	ldr	r0, [pc, #96]	; (8001ebc <WriteToBuff+0x140>)
 8001e5c:	f016 fb27 	bl	80184ae <f_write>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d10d      	bne.n	8001e82 <WriteToBuff+0x106>
      memset(DataBuffer.Data.DataBuff1, 0, sizeof(DataBuffer.Data.DataBuff1)); //Clear next buffer after writing
 8001e66:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	4811      	ldr	r0, [pc, #68]	; (8001eb4 <WriteToBuff+0x138>)
 8001e6e:	f017 fada 	bl	8019426 <memset>
    	f_sync(&myFILE);
 8001e72:	4812      	ldr	r0, [pc, #72]	; (8001ebc <WriteToBuff+0x140>)
 8001e74:	f016 fc90 	bl	8018798 <f_sync>
      printf("Buffer 2 has been written\n");
 8001e78:	4813      	ldr	r0, [pc, #76]	; (8001ec8 <WriteToBuff+0x14c>)
 8001e7a:	f017 fbf9 	bl	8019670 <puts>
      return 2; //buffer 2 has been written
 8001e7e:	2302      	movs	r3, #2
 8001e80:	e014      	b.n	8001eac <WriteToBuff+0x130>
    }
    return 4; //could not write :(
 8001e82:	2304      	movs	r3, #4
 8001e84:	e012      	b.n	8001eac <WriteToBuff+0x130>
  }
/*if(DataBuffer.counter + len >= 2*Bufflength){
	f_write(&myFILE, DataBuffer.Data.DataBuff, sizeof(DataBuffer.Data.DataBuff), &testByte);
	DataBuffer.counter = 0;
}*/
  memcpy((DataBuffer.Data.DataBuff + DataBuffer.counter), Data, len);
 8001e86:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <WriteToBuff+0x138>)
 8001e88:	f8d3 3800 	ldr.w	r3, [r3, #2048]	; 0x800
 8001e8c:	4a09      	ldr	r2, [pc, #36]	; (8001eb4 <WriteToBuff+0x138>)
 8001e8e:	4413      	add	r3, r2
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	6879      	ldr	r1, [r7, #4]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f017 fabb 	bl	8019410 <memcpy>
  DataBuffer.counter += len;
 8001e9a:	4b06      	ldr	r3, [pc, #24]	; (8001eb4 <WriteToBuff+0x138>)
 8001e9c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	4a03      	ldr	r2, [pc, #12]	; (8001eb4 <WriteToBuff+0x138>)
 8001ea6:	f8c2 3800 	str.w	r3, [r2, #2048]	; 0x800
  return 0; //moved data to buffer
 8001eaa:	2300      	movs	r3, #0
}
 8001eac:	4618      	mov	r0, r3
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	2400032c 	.word	0x2400032c
 8001eb8:	240010d0 	.word	0x240010d0
 8001ebc:	24000b98 	.word	0x24000b98
 8001ec0:	2400072c 	.word	0x2400072c
 8001ec4:	0801ac64 	.word	0x0801ac64
 8001ec8:	0801ac80 	.word	0x0801ac80

08001ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001ed0:	f5ad 5def 	sub.w	sp, sp, #7648	; 0x1de0
 8001ed4:	b084      	sub	sp, #16
 8001ed6:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ed8:	f002 fabe 	bl	8004458 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001edc:	f001 f9ea 	bl	80032b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ee0:	f001 fd4a 	bl	8003978 <MX_GPIO_Init>
  MX_DMA_Init();
 8001ee4:	f001 fd28 	bl	8003938 <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8001ee8:	f001 fc16 	bl	8003718 <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8001eec:	f011 f956 	bl	801319c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 8001ef0:	f016 fd56 	bl	80189a0 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8001ef4:	f001 fae8 	bl	80034c8 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8001ef8:	f001 fb4c 	bl	8003594 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8001efc:	f001 fc84 	bl	8003808 <MX_UART8_Init>
  MX_USART3_UART_Init();
 8001f00:	f001 fcce 	bl	80038a0 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 8001f04:	f001 fc2a 	bl	800375c <MX_SPI1_Init>
  MX_RTC_Init();
 8001f08:	f001 fba8 	bl	800365c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8001f0c:	2101      	movs	r1, #1
 8001f0e:	48b9      	ldr	r0, [pc, #740]	; (80021f4 <main+0x328>)
 8001f10:	f006 f867 	bl	8007fe2 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 8001f14:	4cb8      	ldr	r4, [pc, #736]	; (80021f8 <main+0x32c>)
 8001f16:	4668      	mov	r0, sp
 8001f18:	1d23      	adds	r3, r4, #4
 8001f1a:	2284      	movs	r2, #132	; 0x84
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f017 fa77 	bl	8019410 <memcpy>
 8001f22:	6823      	ldr	r3, [r4, #0]
 8001f24:	2201      	movs	r2, #1
 8001f26:	2102      	movs	r1, #2
 8001f28:	48b4      	ldr	r0, [pc, #720]	; (80021fc <main+0x330>)
 8001f2a:	f7fe ff49 	bl	8000dc0 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 8001f2e:	f7ff f827 	bl	8000f80 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 8001f32:	4bb3      	ldr	r3, [pc, #716]	; (8002200 <main+0x334>)
 8001f34:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	4621      	mov	r1, r4
 8001f3c:	f7ff f880 	bl	8001040 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 8001f40:	2000      	movs	r0, #0
 8001f42:	f7ff f909 	bl	8001158 <NRF24_setAutoAck>
    NRF24_setChannel(42);
 8001f46:	202a      	movs	r0, #42	; 0x2a
 8001f48:	f7ff f8b9 	bl	80010be <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 8001f4c:	2020      	movs	r0, #32
 8001f4e:	f7ff f8cb 	bl	80010e8 <NRF24_setPayloadSize>

    printRadioSettings();
 8001f52:	f7ff fa81 	bl	8001458 <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 8001f56:	48ab      	ldr	r0, [pc, #684]	; (8002204 <main+0x338>)
 8001f58:	f017 fb8a 	bl	8019670 <puts>
  FDCAN_Config(&hfdcan1);
 8001f5c:	48aa      	ldr	r0, [pc, #680]	; (8002208 <main+0x33c>)
 8001f5e:	f7fe fb97 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 8001f62:	2246      	movs	r2, #70	; 0x46
 8001f64:	49a9      	ldr	r1, [pc, #676]	; (800220c <main+0x340>)
 8001f66:	48aa      	ldr	r0, [pc, #680]	; (8002210 <main+0x344>)
 8001f68:	f00d fe7a 	bl	800fc60 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 8001f6c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001f70:	f002 fb04 	bl	800457c <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8001f74:	2364      	movs	r3, #100	; 0x64
 8001f76:	f641 5222 	movw	r2, #7458	; 0x1d22
 8001f7a:	443a      	add	r2, r7
 8001f7c:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001f84:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8001f86:	2300      	movs	r3, #0
 8001f88:	f641 521e 	movw	r2, #7454	; 0x1d1e
 8001f8c:	443a      	add	r2, r7
 8001f8e:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8001f90:	f641 531e 	movw	r3, #7454	; 0x1d1e
 8001f94:	443b      	add	r3, r7
 8001f96:	881b      	ldrh	r3, [r3, #0]
 8001f98:	f507 52e9 	add.w	r2, r7, #7456	; 0x1d20
 8001f9c:	8812      	ldrh	r2, [r2, #0]
 8001f9e:	f641 5122 	movw	r1, #7458	; 0x1d22
 8001fa2:	4439      	add	r1, r7
 8001fa4:	8809      	ldrh	r1, [r1, #0]
 8001fa6:	489a      	ldr	r0, [pc, #616]	; (8002210 <main+0x344>)
 8001fa8:	f7fe fd5c 	bl	8000a64 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 8001fac:	2200      	movs	r2, #0
 8001fae:	4999      	ldr	r1, [pc, #612]	; (8002214 <main+0x348>)
 8001fb0:	4897      	ldr	r0, [pc, #604]	; (8002210 <main+0x344>)
 8001fb2:	f7fe fce7 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	4997      	ldr	r1, [pc, #604]	; (8002218 <main+0x34c>)
 8001fba:	4895      	ldr	r0, [pc, #596]	; (8002210 <main+0x344>)
 8001fbc:	f7fe fce2 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	4996      	ldr	r1, [pc, #600]	; (800221c <main+0x350>)
 8001fc4:	4892      	ldr	r0, [pc, #584]	; (8002210 <main+0x344>)
 8001fc6:	f7fe fcdd 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 8001fca:	2200      	movs	r2, #0
 8001fcc:	4994      	ldr	r1, [pc, #592]	; (8002220 <main+0x354>)
 8001fce:	4890      	ldr	r0, [pc, #576]	; (8002210 <main+0x344>)
 8001fd0:	f7fe fcd8 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	4993      	ldr	r1, [pc, #588]	; (8002224 <main+0x358>)
 8001fd8:	488d      	ldr	r0, [pc, #564]	; (8002210 <main+0x344>)
 8001fda:	f7fe fcd3 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8001fde:	2200      	movs	r2, #0
 8001fe0:	4991      	ldr	r1, [pc, #580]	; (8002228 <main+0x35c>)
 8001fe2:	488b      	ldr	r0, [pc, #556]	; (8002210 <main+0x344>)
 8001fe4:	f7fe fcce 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	4990      	ldr	r1, [pc, #576]	; (800222c <main+0x360>)
 8001fec:	4888      	ldr	r0, [pc, #544]	; (8002210 <main+0x344>)
 8001fee:	f7fe fcc9 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	498e      	ldr	r1, [pc, #568]	; (8002230 <main+0x364>)
 8001ff6:	4886      	ldr	r0, [pc, #536]	; (8002210 <main+0x344>)
 8001ff8:	f7fe fcc4 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	498d      	ldr	r1, [pc, #564]	; (8002234 <main+0x368>)
 8002000:	4883      	ldr	r0, [pc, #524]	; (8002210 <main+0x344>)
 8002002:	f7fe fcbf 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 8002006:	2200      	movs	r2, #0
 8002008:	498b      	ldr	r1, [pc, #556]	; (8002238 <main+0x36c>)
 800200a:	4881      	ldr	r0, [pc, #516]	; (8002210 <main+0x344>)
 800200c:	f7fe fcba 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 8002010:	2200      	movs	r2, #0
 8002012:	498a      	ldr	r1, [pc, #552]	; (800223c <main+0x370>)
 8002014:	487e      	ldr	r0, [pc, #504]	; (8002210 <main+0x344>)
 8002016:	f7fe fcb5 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 800201a:	2200      	movs	r2, #0
 800201c:	4988      	ldr	r1, [pc, #544]	; (8002240 <main+0x374>)
 800201e:	487c      	ldr	r0, [pc, #496]	; (8002210 <main+0x344>)
 8002020:	f7fe fcb0 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 8002024:	2200      	movs	r2, #0
 8002026:	4987      	ldr	r1, [pc, #540]	; (8002244 <main+0x378>)
 8002028:	4879      	ldr	r0, [pc, #484]	; (8002210 <main+0x344>)
 800202a:	f7fe fcab 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 800202e:	2200      	movs	r2, #0
 8002030:	4985      	ldr	r1, [pc, #532]	; (8002248 <main+0x37c>)
 8002032:	4877      	ldr	r0, [pc, #476]	; (8002210 <main+0x344>)
 8002034:	f7fe fca6 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 8002038:	2200      	movs	r2, #0
 800203a:	4984      	ldr	r1, [pc, #528]	; (800224c <main+0x380>)
 800203c:	4874      	ldr	r0, [pc, #464]	; (8002210 <main+0x344>)
 800203e:	f7fe fca1 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 8002042:	2201      	movs	r2, #1
 8002044:	4982      	ldr	r1, [pc, #520]	; (8002250 <main+0x384>)
 8002046:	4872      	ldr	r0, [pc, #456]	; (8002210 <main+0x344>)
 8002048:	f7fe fc9c 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 800204c:	2200      	movs	r2, #0
 800204e:	4981      	ldr	r1, [pc, #516]	; (8002254 <main+0x388>)
 8002050:	486f      	ldr	r0, [pc, #444]	; (8002210 <main+0x344>)
 8002052:	f7fe fc97 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 8002056:	2200      	movs	r2, #0
 8002058:	497f      	ldr	r1, [pc, #508]	; (8002258 <main+0x38c>)
 800205a:	486d      	ldr	r0, [pc, #436]	; (8002210 <main+0x344>)
 800205c:	f7fe fc92 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002060:	2200      	movs	r2, #0
 8002062:	497e      	ldr	r1, [pc, #504]	; (800225c <main+0x390>)
 8002064:	486a      	ldr	r0, [pc, #424]	; (8002210 <main+0x344>)
 8002066:	f7fe fc8d 	bl	8000984 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800206a:	2200      	movs	r2, #0
 800206c:	497c      	ldr	r1, [pc, #496]	; (8002260 <main+0x394>)
 800206e:	4868      	ldr	r0, [pc, #416]	; (8002210 <main+0x344>)
 8002070:	f7fe fc88 	bl	8000984 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002074:	2201      	movs	r2, #1
 8002076:	497b      	ldr	r1, [pc, #492]	; (8002264 <main+0x398>)
 8002078:	487b      	ldr	r0, [pc, #492]	; (8002268 <main+0x39c>)
 800207a:	f015 fed5 	bl	8017e28 <f_mount>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	f040 8148 	bne.w	8002316 <main+0x44a>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 8002086:	4a79      	ldr	r2, [pc, #484]	; (800226c <main+0x3a0>)
 8002088:	f641 5368 	movw	r3, #7528	; 0x1d68
 800208c:	443b      	add	r3, r7
 800208e:	441a      	add	r2, r3
 8002090:	4977      	ldr	r1, [pc, #476]	; (8002270 <main+0x3a4>)
 8002092:	4613      	mov	r3, r2
 8002094:	c903      	ldmia	r1, {r0, r1}
 8002096:	6018      	str	r0, [r3, #0]
 8002098:	3304      	adds	r3, #4
 800209a:	7019      	strb	r1, [r3, #0]
 800209c:	1d53      	adds	r3, r2, #5
 800209e:	2200      	movs	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
 80020a2:	605a      	str	r2, [r3, #4]
 80020a4:	609a      	str	r2, [r3, #8]
 80020a6:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 80020aa:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80020ae:	4a71      	ldr	r2, [pc, #452]	; (8002274 <main+0x3a8>)
 80020b0:	ca07      	ldmia	r2, {r0, r1, r2}
 80020b2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[1000];

      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 80020b6:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80020ba:	2201      	movs	r2, #1
 80020bc:	4619      	mov	r1, r3
 80020be:	486e      	ldr	r0, [pc, #440]	; (8002278 <main+0x3ac>)
 80020c0:	f015 fef8 	bl	8017eb4 <f_open>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b04      	cmp	r3, #4
 80020c8:	d153      	bne.n	8002172 <main+0x2a6>
        //If file doesnt exist creates a file using hard coded defualts and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 80020ca:	f507 6395 	add.w	r3, r7, #1192	; 0x4a8
 80020ce:	220a      	movs	r2, #10
 80020d0:	4619      	mov	r1, r3
 80020d2:	4869      	ldr	r0, [pc, #420]	; (8002278 <main+0x3ac>)
 80020d4:	f015 feee 	bl	8017eb4 <f_open>

        sprintf(ConfigParams, "ID,Device,Bytes,Rate(HZ),Type,Description\n");
 80020d8:	4b68      	ldr	r3, [pc, #416]	; (800227c <main+0x3b0>)
 80020da:	f641 5268 	movw	r2, #7528	; 0x1d68
 80020de:	443a      	add	r2, r7
 80020e0:	4413      	add	r3, r2
 80020e2:	4a67      	ldr	r2, [pc, #412]	; (8002280 <main+0x3b4>)
 80020e4:	461c      	mov	r4, r3
 80020e6:	4615      	mov	r5, r2
 80020e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80020ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80020f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80020f4:	c403      	stmia	r4!, {r0, r1}
 80020f6:	8022      	strh	r2, [r4, #0]
 80020f8:	3402      	adds	r4, #2
 80020fa:	0c13      	lsrs	r3, r2, #16
 80020fc:	7023      	strb	r3, [r4, #0]
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,0.20,uint32_t,HIGH:FileNO LOW:millis,\n");
 80020fe:	4b5f      	ldr	r3, [pc, #380]	; (800227c <main+0x3b0>)
 8002100:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002104:	443a      	add	r2, r7
 8002106:	4413      	add	r3, r2
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe f8e9 	bl	80002e0 <strlen>
 800210e:	4602      	mov	r2, r0
 8002110:	4b5a      	ldr	r3, [pc, #360]	; (800227c <main+0x3b0>)
 8002112:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002116:	4439      	add	r1, r7
 8002118:	440b      	add	r3, r1
 800211a:	4413      	add	r3, r2
 800211c:	4a59      	ldr	r2, [pc, #356]	; (8002284 <main+0x3b8>)
 800211e:	4614      	mov	r4, r2
 8002120:	469c      	mov	ip, r3
 8002122:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002126:	4665      	mov	r5, ip
 8002128:	4626      	mov	r6, r4
 800212a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800212c:	6028      	str	r0, [r5, #0]
 800212e:	6069      	str	r1, [r5, #4]
 8002130:	60aa      	str	r2, [r5, #8]
 8002132:	60eb      	str	r3, [r5, #12]
 8002134:	3410      	adds	r4, #16
 8002136:	f10c 0c10 	add.w	ip, ip, #16
 800213a:	4574      	cmp	r4, lr
 800213c:	d1f3      	bne.n	8002126 <main+0x25a>
 800213e:	4662      	mov	r2, ip
 8002140:	4623      	mov	r3, r4
 8002142:	cb03      	ldmia	r3!, {r0, r1}
 8002144:	6010      	str	r0, [r2, #0]
 8002146:	6051      	str	r1, [r2, #4]
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	7213      	strb	r3, [r2, #8]

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <main+0x3b0>)
 800214e:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002152:	443a      	add	r2, r7
 8002154:	4413      	add	r3, r2
 8002156:	4618      	mov	r0, r3
 8002158:	f7fe f8c2 	bl	80002e0 <strlen>
 800215c:	4602      	mov	r2, r0
 800215e:	4947      	ldr	r1, [pc, #284]	; (800227c <main+0x3b0>)
 8002160:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002164:	443b      	add	r3, r7
 8002166:	4419      	add	r1, r3
 8002168:	4b47      	ldr	r3, [pc, #284]	; (8002288 <main+0x3bc>)
 800216a:	4843      	ldr	r0, [pc, #268]	; (8002278 <main+0x3ac>)
 800216c:	f016 f99f 	bl	80184ae <f_write>
 8002170:	e011      	b.n	8002196 <main+0x2ca>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, strlen(ConfigParams), &ConfByteR);
 8002172:	4b42      	ldr	r3, [pc, #264]	; (800227c <main+0x3b0>)
 8002174:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002178:	443a      	add	r2, r7
 800217a:	4413      	add	r3, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f8af 	bl	80002e0 <strlen>
 8002182:	4602      	mov	r2, r0
 8002184:	493d      	ldr	r1, [pc, #244]	; (800227c <main+0x3b0>)
 8002186:	f641 5368 	movw	r3, #7528	; 0x1d68
 800218a:	443b      	add	r3, r7
 800218c:	4419      	add	r1, r3
 800218e:	4b3f      	ldr	r3, [pc, #252]	; (800228c <main+0x3c0>)
 8002190:	4839      	ldr	r0, [pc, #228]	; (8002278 <main+0x3ac>)
 8002192:	f016 f84d 	bl	8018230 <f_read>
      }
      f_close(&Config);
 8002196:	4838      	ldr	r0, [pc, #224]	; (8002278 <main+0x3ac>)
 8002198:	f016 fb7c 	bl	8018894 <f_close>
      //MAKE NEW FILE INCREMENTED BY 1
      
      strcpy(FilePath,Filename);
 800219c:	4a33      	ldr	r2, [pc, #204]	; (800226c <main+0x3a0>)
 800219e:	f641 5368 	movw	r3, #7528	; 0x1d68
 80021a2:	443b      	add	r3, r7
 80021a4:	441a      	add	r2, r3
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <main+0x3c4>)
 80021a8:	f641 5168 	movw	r1, #7528	; 0x1d68
 80021ac:	4439      	add	r1, r7
 80021ae:	440b      	add	r3, r1
 80021b0:	4611      	mov	r1, r2
 80021b2:	4618      	mov	r0, r3
 80021b4:	f017 fac8 	bl	8019748 <strcpy>
      int FilePathLen = strlen(Filename);
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <main+0x3a0>)
 80021ba:	f641 5268 	movw	r2, #7528	; 0x1d68
 80021be:	443a      	add	r2, r7
 80021c0:	4413      	add	r3, r2
 80021c2:	4618      	mov	r0, r3
 80021c4:	f7fe f88c 	bl	80002e0 <strlen>
 80021c8:	4603      	mov	r3, r0
 80021ca:	f641 5218 	movw	r2, #7448	; 0x1d18
 80021ce:	443a      	add	r2, r7
 80021d0:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80021d2:	f641 5318 	movw	r3, #7448	; 0x1d18
 80021d6:	443b      	add	r3, r7
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <main+0x3c4>)
 80021dc:	f641 5168 	movw	r1, #7528	; 0x1d68
 80021e0:	4439      	add	r1, r7
 80021e2:	440b      	add	r3, r1
 80021e4:	1898      	adds	r0, r3, r2
 80021e6:	4b2b      	ldr	r3, [pc, #172]	; (8002294 <main+0x3c8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	492a      	ldr	r1, [pc, #168]	; (8002298 <main+0x3cc>)
 80021ee:	f017 fa8b 	bl	8019708 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80021f2:	e079      	b.n	80022e8 <main+0x41c>
 80021f4:	58020400 	.word	0x58020400
 80021f8:	24001640 	.word	0x24001640
 80021fc:	58020000 	.word	0x58020000
 8002200:	24000000 	.word	0x24000000
 8002204:	0801ac9c 	.word	0x0801ac9c
 8002208:	24001514 	.word	0x24001514
 800220c:	24001304 	.word	0x24001304
 8002210:	240013c4 	.word	0x240013c4
 8002214:	0801aca8 	.word	0x0801aca8
 8002218:	0801acac 	.word	0x0801acac
 800221c:	0801acb0 	.word	0x0801acb0
 8002220:	0801acb4 	.word	0x0801acb4
 8002224:	0801acb8 	.word	0x0801acb8
 8002228:	0801acbc 	.word	0x0801acbc
 800222c:	0801acc0 	.word	0x0801acc0
 8002230:	0801acc4 	.word	0x0801acc4
 8002234:	0801acc8 	.word	0x0801acc8
 8002238:	0801accc 	.word	0x0801accc
 800223c:	0801acd0 	.word	0x0801acd0
 8002240:	0801acd4 	.word	0x0801acd4
 8002244:	0801acd8 	.word	0x0801acd8
 8002248:	0801acdc 	.word	0x0801acdc
 800224c:	0801ace0 	.word	0x0801ace0
 8002250:	0801ace4 	.word	0x0801ace4
 8002254:	0801ace8 	.word	0x0801ace8
 8002258:	0801acec 	.word	0x0801acec
 800225c:	0801acf0 	.word	0x0801acf0
 8002260:	0801acf4 	.word	0x0801acf4
 8002264:	24001770 	.word	0x24001770
 8002268:	24000dd0 	.word	0x24000dd0
 800226c:	ffffe74c 	.word	0xffffe74c
 8002270:	0801adc0 	.word	0x0801adc0
 8002274:	0801add4 	.word	0x0801add4
 8002278:	240010d4 	.word	0x240010d4
 800227c:	ffffe330 	.word	0xffffe330
 8002280:	0801acf8 	.word	0x0801acf8
 8002284:	0801ad24 	.word	0x0801ad24
 8002288:	24000dcc 	.word	0x24000dcc
 800228c:	24000dc8 	.word	0x24000dc8
 8002290:	ffffe298 	.word	0xffffe298
 8002294:	2400000c 	.word	0x2400000c
 8002298:	0801ad60 	.word	0x0801ad60
    	  f_close(&myFILE);
 800229c:	4896      	ldr	r0, [pc, #600]	; (80024f8 <main+0x62c>)
 800229e:	f016 faf9 	bl	8018894 <f_close>
        fileNum++;
 80022a2:	4b96      	ldr	r3, [pc, #600]	; (80024fc <main+0x630>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	3301      	adds	r3, #1
 80022a8:	4a94      	ldr	r2, [pc, #592]	; (80024fc <main+0x630>)
 80022aa:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 80022ac:	4a94      	ldr	r2, [pc, #592]	; (8002500 <main+0x634>)
 80022ae:	f641 5368 	movw	r3, #7528	; 0x1d68
 80022b2:	443b      	add	r3, r7
 80022b4:	441a      	add	r2, r3
 80022b6:	4b93      	ldr	r3, [pc, #588]	; (8002504 <main+0x638>)
 80022b8:	f641 5168 	movw	r1, #7528	; 0x1d68
 80022bc:	4439      	add	r1, r7
 80022be:	440b      	add	r3, r1
 80022c0:	4611      	mov	r1, r2
 80022c2:	4618      	mov	r0, r3
 80022c4:	f017 fa40 	bl	8019748 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80022c8:	f641 5318 	movw	r3, #7448	; 0x1d18
 80022cc:	443b      	add	r3, r7
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	4b8c      	ldr	r3, [pc, #560]	; (8002504 <main+0x638>)
 80022d2:	f641 5168 	movw	r1, #7528	; 0x1d68
 80022d6:	4439      	add	r1, r7
 80022d8:	440b      	add	r3, r1
 80022da:	1898      	adds	r0, r3, r2
 80022dc:	4b87      	ldr	r3, [pc, #540]	; (80024fc <main+0x630>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	461a      	mov	r2, r3
 80022e2:	4989      	ldr	r1, [pc, #548]	; (8002508 <main+0x63c>)
 80022e4:	f017 fa10 	bl	8019708 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 80022e8:	4b86      	ldr	r3, [pc, #536]	; (8002504 <main+0x638>)
 80022ea:	f641 5268 	movw	r2, #7528	; 0x1d68
 80022ee:	443a      	add	r2, r7
 80022f0:	4413      	add	r3, r2
 80022f2:	2201      	movs	r2, #1
 80022f4:	4619      	mov	r1, r3
 80022f6:	4880      	ldr	r0, [pc, #512]	; (80024f8 <main+0x62c>)
 80022f8:	f015 fddc 	bl	8017eb4 <f_open>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d0cc      	beq.n	800229c <main+0x3d0>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002302:	4b80      	ldr	r3, [pc, #512]	; (8002504 <main+0x638>)
 8002304:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002308:	443a      	add	r2, r7
 800230a:	4413      	add	r3, r2
 800230c:	220a      	movs	r2, #10
 800230e:	4619      	mov	r1, r3
 8002310:	4879      	ldr	r0, [pc, #484]	; (80024f8 <main+0x62c>)
 8002312:	f015 fdcf 	bl	8017eb4 <f_open>
  extern int GPS_flag;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002316:	4b7d      	ldr	r3, [pc, #500]	; (800250c <main+0x640>)
 8002318:	f641 5268 	movw	r2, #7528	; 0x1d68
 800231c:	443a      	add	r2, r7
 800231e:	4413      	add	r3, r2
 8002320:	4618      	mov	r0, r3
 8002322:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002326:	461a      	mov	r2, r3
 8002328:	2100      	movs	r1, #0
 800232a:	f017 f87c 	bl	8019426 <memset>
  CAN_FRAME Buffer[50] = {0};
 800232e:	4b78      	ldr	r3, [pc, #480]	; (8002510 <main+0x644>)
 8002330:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002334:	443a      	add	r2, r7
 8002336:	4413      	add	r3, r2
 8002338:	4618      	mov	r0, r3
 800233a:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 800233e:	461a      	mov	r2, r3
 8002340:	2100      	movs	r1, #0
 8002342:	f017 f870 	bl	8019426 <memset>
  uint32_t Tele_IDs[50] = {0};
 8002346:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800234a:	4618      	mov	r0, r3
 800234c:	23c8      	movs	r3, #200	; 0xc8
 800234e:	461a      	mov	r2, r3
 8002350:	2100      	movs	r1, #0
 8002352:	f017 f868 	bl	8019426 <memset>
  Tele_IDs[0] = 0x321;
 8002356:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 800235a:	f240 3221 	movw	r2, #801	; 0x321
 800235e:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002360:	4b6c      	ldr	r3, [pc, #432]	; (8002514 <main+0x648>)
 8002362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002366:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8002368:	f002 f8fc 	bl	8004564 <HAL_GetTick>
 800236c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002370:	443b      	add	r3, r7
 8002372:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002374:	2200      	movs	r2, #0
 8002376:	4967      	ldr	r1, [pc, #412]	; (8002514 <main+0x648>)
 8002378:	4867      	ldr	r0, [pc, #412]	; (8002518 <main+0x64c>)
 800237a:	f00a f955 	bl	800c628 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800237e:	2200      	movs	r2, #0
 8002380:	4966      	ldr	r1, [pc, #408]	; (800251c <main+0x650>)
 8002382:	4865      	ldr	r0, [pc, #404]	; (8002518 <main+0x64c>)
 8002384:	f00a fa34 	bl	800c7f0 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8002388:	4b62      	ldr	r3, [pc, #392]	; (8002514 <main+0x648>)
 800238a:	6859      	ldr	r1, [r3, #4]
 800238c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002390:	443b      	add	r3, r7
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <main+0x654>)
 8002396:	fba3 0302 	umull	r0, r3, r3, r2
 800239a:	099b      	lsrs	r3, r3, #6
 800239c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023a0:	fb00 f303 	mul.w	r3, r0, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	1acb      	subs	r3, r1, r3
 80023a8:	4a5a      	ldr	r2, [pc, #360]	; (8002514 <main+0x648>)
 80023aa:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 80023ac:	f641 5314 	movw	r3, #7444	; 0x1d14
 80023b0:	443b      	add	r3, r7
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a5a      	ldr	r2, [pc, #360]	; (8002520 <main+0x654>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	f641 5214 	movw	r2, #7444	; 0x1d14
 80023c0:	443a      	add	r2, r7
 80023c2:	6013      	str	r3, [r2, #0]
  sTime.Seconds -= LocalTime % 60;
 80023c4:	4b53      	ldr	r3, [pc, #332]	; (8002514 <main+0x648>)
 80023c6:	7898      	ldrb	r0, [r3, #2]
 80023c8:	f641 5314 	movw	r3, #7444	; 0x1d14
 80023cc:	443b      	add	r3, r7
 80023ce:	6819      	ldr	r1, [r3, #0]
 80023d0:	4b54      	ldr	r3, [pc, #336]	; (8002524 <main+0x658>)
 80023d2:	fba3 2301 	umull	r2, r3, r3, r1
 80023d6:	095a      	lsrs	r2, r3, #5
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	1aca      	subs	r2, r1, r3
 80023e2:	b2d3      	uxtb	r3, r2
 80023e4:	1ac3      	subs	r3, r0, r3
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	4b4a      	ldr	r3, [pc, #296]	; (8002514 <main+0x648>)
 80023ea:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 80023ec:	f641 5314 	movw	r3, #7444	; 0x1d14
 80023f0:	443b      	add	r3, r7
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a4b      	ldr	r2, [pc, #300]	; (8002524 <main+0x658>)
 80023f6:	fba2 2303 	umull	r2, r3, r2, r3
 80023fa:	095b      	lsrs	r3, r3, #5
 80023fc:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002400:	443a      	add	r2, r7
 8002402:	6013      	str	r3, [r2, #0]
  sTime.Minutes -= LocalTime % 60;
 8002404:	4b43      	ldr	r3, [pc, #268]	; (8002514 <main+0x648>)
 8002406:	7858      	ldrb	r0, [r3, #1]
 8002408:	f641 5314 	movw	r3, #7444	; 0x1d14
 800240c:	443b      	add	r3, r7
 800240e:	6819      	ldr	r1, [r3, #0]
 8002410:	4b44      	ldr	r3, [pc, #272]	; (8002524 <main+0x658>)
 8002412:	fba3 2301 	umull	r2, r3, r3, r1
 8002416:	095a      	lsrs	r2, r3, #5
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	1aca      	subs	r2, r1, r3
 8002422:	b2d3      	uxtb	r3, r2
 8002424:	1ac3      	subs	r3, r0, r3
 8002426:	b2da      	uxtb	r2, r3
 8002428:	4b3a      	ldr	r3, [pc, #232]	; (8002514 <main+0x648>)
 800242a:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 800242c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002430:	443b      	add	r3, r7
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <main+0x658>)
 8002436:	fba2 2303 	umull	r2, r3, r2, r3
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002440:	443a      	add	r2, r7
 8002442:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002444:	4b33      	ldr	r3, [pc, #204]	; (8002514 <main+0x648>)
 8002446:	7818      	ldrb	r0, [r3, #0]
 8002448:	f641 5314 	movw	r3, #7444	; 0x1d14
 800244c:	443b      	add	r3, r7
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	4b34      	ldr	r3, [pc, #208]	; (8002524 <main+0x658>)
 8002452:	fba3 2301 	umull	r2, r3, r3, r1
 8002456:	095a      	lsrs	r2, r3, #5
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	1aca      	subs	r2, r1, r3
 8002462:	b2d3      	uxtb	r3, r2
 8002464:	1ac3      	subs	r3, r0, r3
 8002466:	b2da      	uxtb	r2, r3
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <main+0x648>)
 800246a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[400];
  int CW = 0;
 800246c:	2300      	movs	r3, #0
 800246e:	f641 5264 	movw	r2, #7524	; 0x1d64
 8002472:	443a      	add	r2, r7
 8002474:	6013      	str	r3, [r2, #0]
  char CanFDWrite[400];
  int CFDW = 0;
 8002476:	2300      	movs	r3, #0
 8002478:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 800247c:	6013      	str	r3, [r2, #0]
  int AllowedTele = 10;
 800247e:	230a      	movs	r3, #10
 8002480:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8002484:	443a      	add	r2, r7
 8002486:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 8002488:	2300      	movs	r3, #0
 800248a:	f641 5258 	movw	r2, #7512	; 0x1d58
 800248e:	443a      	add	r2, r7
 8002490:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 8002492:	2300      	movs	r3, #0
 8002494:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002498:	443a      	add	r2, r7
 800249a:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 800249c:	2300      	movs	r3, #0
 800249e:	f641 5210 	movw	r2, #7440	; 0x1d10
 80024a2:	443a      	add	r2, r7
 80024a4:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 80024a6:	230a      	movs	r3, #10
 80024a8:	f641 520c 	movw	r2, #7436	; 0x1d0c
 80024ac:	443a      	add	r2, r7
 80024ae:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	f641 5208 	movw	r2, #7432	; 0x1d08
 80024b6:	443a      	add	r2, r7
 80024b8:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 80024ba:	2300      	movs	r3, #0
 80024bc:	f641 5204 	movw	r2, #7428	; 0x1d04
 80024c0:	443a      	add	r2, r7
 80024c2:	6013      	str	r3, [r2, #0]

  while (end_flag){
 80024c4:	f000 bed8 	b.w	8003278 <main+0x13ac>
    StartTime = HAL_GetTick();
 80024c8:	f002 f84c 	bl	8004564 <HAL_GetTick>
 80024cc:	f641 5308 	movw	r3, #7432	; 0x1d08
 80024d0:	443b      	add	r3, r7
 80024d2:	6018      	str	r0, [r3, #0]
	  if(GPS_flag){
 80024d4:	4b14      	ldr	r3, [pc, #80]	; (8002528 <main+0x65c>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d006      	beq.n	80024ea <main+0x61e>
		  WriteToBuff(rxBuf, sizeof(rxBuf));
 80024dc:	2146      	movs	r1, #70	; 0x46
 80024de:	4813      	ldr	r0, [pc, #76]	; (800252c <main+0x660>)
 80024e0:	f7ff fc4c 	bl	8001d7c <WriteToBuff>
		  GPS_flag=0;
 80024e4:	4b10      	ldr	r3, [pc, #64]	; (8002528 <main+0x65c>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
	  }
	  
	  for(int i = 0; i < AllowedTele; i++){
 80024ea:	2300      	movs	r3, #0
 80024ec:	f641 5250 	movw	r2, #7504	; 0x1d50
 80024f0:	443a      	add	r2, r7
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e2b0      	b.n	8002a58 <main+0xb8c>
 80024f6:	bf00      	nop
 80024f8:	24000b98 	.word	0x24000b98
 80024fc:	2400000c 	.word	0x2400000c
 8002500:	ffffe74c 	.word	0xffffe74c
 8002504:	ffffe298 	.word	0xffffe298
 8002508:	0801ad60 	.word	0x0801ad60
 800250c:	ffffeff8 	.word	0xffffeff8
 8002510:	ffffeb48 	.word	0xffffeb48
 8002514:	24000b30 	.word	0x24000b30
 8002518:	240014f0 	.word	0x240014f0
 800251c:	24000b44 	.word	0x24000b44
 8002520:	10624dd3 	.word	0x10624dd3
 8002524:	88888889 	.word	0x88888889
 8002528:	24000204 	.word	0x24000204
 800252c:	24001304 	.word	0x24001304
      //make packet (Time ID data)
      Txcnt = sprintf(myTxData,"%u %u",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 8002530:	4a80      	ldr	r2, [pc, #512]	; (8002734 <main+0x868>)
 8002532:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002536:	443b      	add	r3, r7
 8002538:	441a      	add	r2, r3
 800253a:	f641 5358 	movw	r3, #7512	; 0x1d58
 800253e:	443b      	add	r3, r7
 8002540:	6819      	ldr	r1, [r3, #0]
 8002542:	460b      	mov	r3, r1
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	440b      	add	r3, r1
 8002548:	011b      	lsls	r3, r3, #4
 800254a:	4413      	add	r3, r2
 800254c:	330c      	adds	r3, #12
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	4a78      	ldr	r2, [pc, #480]	; (8002734 <main+0x868>)
 8002552:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002556:	443b      	add	r3, r7
 8002558:	441a      	add	r2, r3
 800255a:	f641 5358 	movw	r3, #7512	; 0x1d58
 800255e:	443b      	add	r3, r7
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	460b      	mov	r3, r1
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	440b      	add	r3, r1
 8002568:	011b      	lsls	r3, r3, #4
 800256a:	4413      	add	r3, r2
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4602      	mov	r2, r0
 8002570:	4971      	ldr	r1, [pc, #452]	; (8002738 <main+0x86c>)
 8002572:	4872      	ldr	r0, [pc, #456]	; (800273c <main+0x870>)
 8002574:	f017 f8c8 	bl	8019708 <siprintf>
 8002578:	f641 5354 	movw	r3, #7508	; 0x1d54
 800257c:	443b      	add	r3, r7
 800257e:	6018      	str	r0, [r3, #0]
      TxDataSpace = 32 - Txcnt;
 8002580:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002584:	443b      	add	r3, r7
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f1c3 0320 	rsb	r3, r3, #32
 800258c:	f641 5210 	movw	r2, #7440	; 0x1d10
 8002590:	443a      	add	r2, r7
 8002592:	6013      	str	r3, [r2, #0]
      if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002594:	4a67      	ldr	r2, [pc, #412]	; (8002734 <main+0x868>)
 8002596:	f641 5368 	movw	r3, #7528	; 0x1d68
 800259a:	443b      	add	r3, r7
 800259c:	441a      	add	r2, r3
 800259e:	f641 5358 	movw	r3, #7512	; 0x1d58
 80025a2:	443b      	add	r3, r7
 80025a4:	6819      	ldr	r1, [r3, #0]
 80025a6:	460b      	mov	r3, r1
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	440b      	add	r3, r1
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	4413      	add	r3, r2
 80025b0:	3308      	adds	r3, #8
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	f641 5310 	movw	r3, #7440	; 0x1d10
 80025b8:	443b      	add	r3, r7
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	429a      	cmp	r2, r3
 80025be:	f240 81b1 	bls.w	8002924 <main+0xa58>
        for(int i = 0; i < TxDataSpace; i++){
 80025c2:	2300      	movs	r3, #0
 80025c4:	f641 524c 	movw	r2, #7500	; 0x1d4c
 80025c8:	443a      	add	r2, r7
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e031      	b.n	8002632 <main+0x766>
          Txcnt += sprintf(myTxData + Txcnt, "%x", FDBuffer[BuffIndex].data.bytes[i]);
 80025ce:	f641 5354 	movw	r3, #7508	; 0x1d54
 80025d2:	443b      	add	r3, r7
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a59      	ldr	r2, [pc, #356]	; (800273c <main+0x870>)
 80025d8:	1898      	adds	r0, r3, r2
 80025da:	4a56      	ldr	r2, [pc, #344]	; (8002734 <main+0x868>)
 80025dc:	f641 5368 	movw	r3, #7528	; 0x1d68
 80025e0:	443b      	add	r3, r7
 80025e2:	441a      	add	r2, r3
 80025e4:	f641 5358 	movw	r3, #7512	; 0x1d58
 80025e8:	443b      	add	r3, r7
 80025ea:	6819      	ldr	r1, [r3, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	440b      	add	r3, r1
 80025f2:	011b      	lsls	r3, r3, #4
 80025f4:	441a      	add	r2, r3
 80025f6:	f641 534c 	movw	r3, #7500	; 0x1d4c
 80025fa:	443b      	add	r3, r7
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	3310      	adds	r3, #16
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	494e      	ldr	r1, [pc, #312]	; (8002740 <main+0x874>)
 8002608:	f017 f87e 	bl	8019708 <siprintf>
 800260c:	4602      	mov	r2, r0
 800260e:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002612:	443b      	add	r3, r7
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4413      	add	r3, r2
 8002618:	f641 5254 	movw	r2, #7508	; 0x1d54
 800261c:	443a      	add	r2, r7
 800261e:	6013      	str	r3, [r2, #0]
        for(int i = 0; i < TxDataSpace; i++){
 8002620:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002624:	443b      	add	r3, r7
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	3301      	adds	r3, #1
 800262a:	f641 524c 	movw	r2, #7500	; 0x1d4c
 800262e:	443a      	add	r2, r7
 8002630:	6013      	str	r3, [r2, #0]
 8002632:	f641 534c 	movw	r3, #7500	; 0x1d4c
 8002636:	443b      	add	r3, r7
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	f641 5310 	movw	r3, #7440	; 0x1d10
 800263e:	443b      	add	r3, r7
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	429a      	cmp	r2, r3
 8002644:	dbc3      	blt.n	80025ce <main+0x702>
        }
        NRF24_write(myTxData, 32);
 8002646:	2120      	movs	r1, #32
 8002648:	483c      	ldr	r0, [pc, #240]	; (800273c <main+0x870>)
 800264a:	f7fe fca5 	bl	8000f98 <NRF24_write>
        Txcnt = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002654:	443a      	add	r2, r7
 8002656:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 8002658:	4a36      	ldr	r2, [pc, #216]	; (8002734 <main+0x868>)
 800265a:	f641 5368 	movw	r3, #7528	; 0x1d68
 800265e:	443b      	add	r3, r7
 8002660:	441a      	add	r2, r3
 8002662:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002666:	443b      	add	r3, r7
 8002668:	6819      	ldr	r1, [r3, #0]
 800266a:	460b      	mov	r3, r1
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	440b      	add	r3, r1
 8002670:	011b      	lsls	r3, r3, #4
 8002672:	4413      	add	r3, r2
 8002674:	3308      	adds	r3, #8
 8002676:	681a      	ldr	r2, [r3, #0]
 8002678:	f641 5310 	movw	r3, #7440	; 0x1d10
 800267c:	443b      	add	r3, r7
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b20      	cmp	r3, #32
 8002684:	f240 80d5 	bls.w	8002832 <main+0x966>
          for(int i = 0; i < 32; i++){
 8002688:	2300      	movs	r3, #0
 800268a:	f641 5248 	movw	r2, #7496	; 0x1d48
 800268e:	443a      	add	r2, r7
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	e031      	b.n	80026f8 <main+0x82c>
            Txcnt += sprintf(myTxData + Txcnt, "%x", FDBuffer[BuffIndex].data.bytes[i]);
 8002694:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002698:	443b      	add	r3, r7
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a27      	ldr	r2, [pc, #156]	; (800273c <main+0x870>)
 800269e:	1898      	adds	r0, r3, r2
 80026a0:	4a24      	ldr	r2, [pc, #144]	; (8002734 <main+0x868>)
 80026a2:	f641 5368 	movw	r3, #7528	; 0x1d68
 80026a6:	443b      	add	r3, r7
 80026a8:	441a      	add	r2, r3
 80026aa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80026ae:	443b      	add	r3, r7
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	460b      	mov	r3, r1
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	011b      	lsls	r3, r3, #4
 80026ba:	441a      	add	r2, r3
 80026bc:	f641 5348 	movw	r3, #7496	; 0x1d48
 80026c0:	443b      	add	r3, r7
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	3310      	adds	r3, #16
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	461a      	mov	r2, r3
 80026cc:	491c      	ldr	r1, [pc, #112]	; (8002740 <main+0x874>)
 80026ce:	f017 f81b 	bl	8019708 <siprintf>
 80026d2:	4602      	mov	r2, r0
 80026d4:	f641 5354 	movw	r3, #7508	; 0x1d54
 80026d8:	443b      	add	r3, r7
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4413      	add	r3, r2
 80026de:	f641 5254 	movw	r2, #7508	; 0x1d54
 80026e2:	443a      	add	r2, r7
 80026e4:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < 32; i++){
 80026e6:	f641 5348 	movw	r3, #7496	; 0x1d48
 80026ea:	443b      	add	r3, r7
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	3301      	adds	r3, #1
 80026f0:	f641 5248 	movw	r2, #7496	; 0x1d48
 80026f4:	443a      	add	r2, r7
 80026f6:	6013      	str	r3, [r2, #0]
 80026f8:	f641 5348 	movw	r3, #7496	; 0x1d48
 80026fc:	443b      	add	r3, r7
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2b1f      	cmp	r3, #31
 8002702:	ddc7      	ble.n	8002694 <main+0x7c8>
          }
          Txcnt = 0;
 8002704:	2300      	movs	r3, #0
 8002706:	f641 5254 	movw	r2, #7508	; 0x1d54
 800270a:	443a      	add	r2, r7
 800270c:	6013      	str	r3, [r2, #0]
          i++;
 800270e:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002712:	443b      	add	r3, r7
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	f641 5250 	movw	r2, #7504	; 0x1d50
 800271c:	443a      	add	r2, r7
 800271e:	6013      	str	r3, [r2, #0]
          NRF24_write(myTxData, 32);
 8002720:	2120      	movs	r1, #32
 8002722:	4806      	ldr	r0, [pc, #24]	; (800273c <main+0x870>)
 8002724:	f7fe fc38 	bl	8000f98 <NRF24_write>
          for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002728:	2300      	movs	r3, #0
 800272a:	f641 5244 	movw	r2, #7492	; 0x1d44
 800272e:	443a      	add	r2, r7
 8002730:	6013      	str	r3, [r2, #0]
 8002732:	e039      	b.n	80027a8 <main+0x8dc>
 8002734:	ffffeff8 	.word	0xffffeff8
 8002738:	0801ad68 	.word	0x0801ad68
 800273c:	24001450 	.word	0x24001450
 8002740:	0801ad70 	.word	0x0801ad70
            Txcnt += sprintf(myTxData + Txcnt, "%x", FDBuffer[BuffIndex].data.bytes[i]);
 8002744:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002748:	443b      	add	r3, r7
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a78      	ldr	r2, [pc, #480]	; (8002930 <main+0xa64>)
 800274e:	1898      	adds	r0, r3, r2
 8002750:	4a78      	ldr	r2, [pc, #480]	; (8002934 <main+0xa68>)
 8002752:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002756:	443b      	add	r3, r7
 8002758:	441a      	add	r2, r3
 800275a:	f641 5358 	movw	r3, #7512	; 0x1d58
 800275e:	443b      	add	r3, r7
 8002760:	6819      	ldr	r1, [r3, #0]
 8002762:	460b      	mov	r3, r1
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	441a      	add	r2, r3
 800276c:	f641 5344 	movw	r3, #7492	; 0x1d44
 8002770:	443b      	add	r3, r7
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4413      	add	r3, r2
 8002776:	3310      	adds	r3, #16
 8002778:	781b      	ldrb	r3, [r3, #0]
 800277a:	461a      	mov	r2, r3
 800277c:	496e      	ldr	r1, [pc, #440]	; (8002938 <main+0xa6c>)
 800277e:	f016 ffc3 	bl	8019708 <siprintf>
 8002782:	4602      	mov	r2, r0
 8002784:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002788:	443b      	add	r3, r7
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4413      	add	r3, r2
 800278e:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002792:	443a      	add	r2, r7
 8002794:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002796:	f641 5344 	movw	r3, #7492	; 0x1d44
 800279a:	443b      	add	r3, r7
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	f641 5244 	movw	r2, #7492	; 0x1d44
 80027a4:	443a      	add	r2, r7
 80027a6:	6013      	str	r3, [r2, #0]
 80027a8:	4a62      	ldr	r2, [pc, #392]	; (8002934 <main+0xa68>)
 80027aa:	f641 5368 	movw	r3, #7528	; 0x1d68
 80027ae:	443b      	add	r3, r7
 80027b0:	441a      	add	r2, r3
 80027b2:	f641 5358 	movw	r3, #7512	; 0x1d58
 80027b6:	443b      	add	r3, r7
 80027b8:	6819      	ldr	r1, [r3, #0]
 80027ba:	460b      	mov	r3, r1
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	440b      	add	r3, r1
 80027c0:	011b      	lsls	r3, r3, #4
 80027c2:	4413      	add	r3, r2
 80027c4:	3308      	adds	r3, #8
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	f641 5310 	movw	r3, #7440	; 0x1d10
 80027cc:	443b      	add	r3, r7
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f103 0220 	add.w	r2, r3, #32
 80027d6:	f641 5344 	movw	r3, #7492	; 0x1d44
 80027da:	443b      	add	r3, r7
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d8b0      	bhi.n	8002744 <main+0x878>
          }
          i++;
 80027e2:	f641 5350 	movw	r3, #7504	; 0x1d50
 80027e6:	443b      	add	r3, r7
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	3301      	adds	r3, #1
 80027ec:	f641 5250 	movw	r2, #7504	; 0x1d50
 80027f0:	443a      	add	r2, r7
 80027f2:	6013      	str	r3, [r2, #0]
          NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace+32);
 80027f4:	4a4f      	ldr	r2, [pc, #316]	; (8002934 <main+0xa68>)
 80027f6:	f641 5368 	movw	r3, #7528	; 0x1d68
 80027fa:	443b      	add	r3, r7
 80027fc:	441a      	add	r2, r3
 80027fe:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002802:	443b      	add	r3, r7
 8002804:	6819      	ldr	r1, [r3, #0]
 8002806:	460b      	mov	r3, r1
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	440b      	add	r3, r1
 800280c:	011b      	lsls	r3, r3, #4
 800280e:	4413      	add	r3, r2
 8002810:	3308      	adds	r3, #8
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b2da      	uxtb	r2, r3
 8002816:	f641 5310 	movw	r3, #7440	; 0x1d10
 800281a:	443b      	add	r3, r7
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	b2db      	uxtb	r3, r3
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	b2db      	uxtb	r3, r3
 8002824:	3320      	adds	r3, #32
 8002826:	b2db      	uxtb	r3, r3
 8002828:	4619      	mov	r1, r3
 800282a:	4841      	ldr	r0, [pc, #260]	; (8002930 <main+0xa64>)
 800282c:	f7fe fbb4 	bl	8000f98 <NRF24_write>
 8002830:	e0ea      	b.n	8002a08 <main+0xb3c>
        }else{
          Txcnt = 0;
 8002832:	2300      	movs	r3, #0
 8002834:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002838:	443a      	add	r2, r7
 800283a:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 800283c:	2300      	movs	r3, #0
 800283e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	e02e      	b.n	80028a4 <main+0x9d8>
            Txcnt += sprintf(myTxData + Txcnt, "%x", FDBuffer[BuffIndex].data.bytes[i]);
 8002846:	f641 5354 	movw	r3, #7508	; 0x1d54
 800284a:	443b      	add	r3, r7
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a38      	ldr	r2, [pc, #224]	; (8002930 <main+0xa64>)
 8002850:	1898      	adds	r0, r3, r2
 8002852:	4a38      	ldr	r2, [pc, #224]	; (8002934 <main+0xa68>)
 8002854:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002858:	443b      	add	r3, r7
 800285a:	441a      	add	r2, r3
 800285c:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002860:	443b      	add	r3, r7
 8002862:	6819      	ldr	r1, [r3, #0]
 8002864:	460b      	mov	r3, r1
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	440b      	add	r3, r1
 800286a:	011b      	lsls	r3, r3, #4
 800286c:	441a      	add	r2, r3
 800286e:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4413      	add	r3, r2
 8002876:	3310      	adds	r3, #16
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	461a      	mov	r2, r3
 800287c:	492e      	ldr	r1, [pc, #184]	; (8002938 <main+0xa6c>)
 800287e:	f016 ff43 	bl	8019708 <siprintf>
 8002882:	4602      	mov	r2, r0
 8002884:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002888:	443b      	add	r3, r7
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4413      	add	r3, r2
 800288e:	f641 5254 	movw	r2, #7508	; 0x1d54
 8002892:	443a      	add	r2, r7
 8002894:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 8002896:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	3301      	adds	r3, #1
 800289e:	f507 52ea 	add.w	r2, r7, #7488	; 0x1d40
 80028a2:	6013      	str	r3, [r2, #0]
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <main+0xa68>)
 80028a6:	f641 5368 	movw	r3, #7528	; 0x1d68
 80028aa:	443b      	add	r3, r7
 80028ac:	441a      	add	r2, r3
 80028ae:	f641 5358 	movw	r3, #7512	; 0x1d58
 80028b2:	443b      	add	r3, r7
 80028b4:	6819      	ldr	r1, [r3, #0]
 80028b6:	460b      	mov	r3, r1
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	011b      	lsls	r3, r3, #4
 80028be:	4413      	add	r3, r2
 80028c0:	3308      	adds	r3, #8
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	f641 5310 	movw	r3, #7440	; 0x1d10
 80028c8:	443b      	add	r3, r7
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	1ad2      	subs	r2, r2, r3
 80028ce:	f507 53ea 	add.w	r3, r7, #7488	; 0x1d40
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8b6      	bhi.n	8002846 <main+0x97a>
          }
          i++;
 80028d8:	f641 5350 	movw	r3, #7504	; 0x1d50
 80028dc:	443b      	add	r3, r7
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	3301      	adds	r3, #1
 80028e2:	f641 5250 	movw	r2, #7504	; 0x1d50
 80028e6:	443a      	add	r2, r7
 80028e8:	6013      	str	r3, [r2, #0]
          NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 80028ea:	4a12      	ldr	r2, [pc, #72]	; (8002934 <main+0xa68>)
 80028ec:	f641 5368 	movw	r3, #7528	; 0x1d68
 80028f0:	443b      	add	r3, r7
 80028f2:	441a      	add	r2, r3
 80028f4:	f641 5358 	movw	r3, #7512	; 0x1d58
 80028f8:	443b      	add	r3, r7
 80028fa:	6819      	ldr	r1, [r3, #0]
 80028fc:	460b      	mov	r3, r1
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	440b      	add	r3, r1
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	4413      	add	r3, r2
 8002906:	3308      	adds	r3, #8
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	b2da      	uxtb	r2, r3
 800290c:	f641 5310 	movw	r3, #7440	; 0x1d10
 8002910:	443b      	add	r3, r7
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	b2db      	uxtb	r3, r3
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	b2db      	uxtb	r3, r3
 800291a:	4619      	mov	r1, r3
 800291c:	4804      	ldr	r0, [pc, #16]	; (8002930 <main+0xa64>)
 800291e:	f7fe fb3b 	bl	8000f98 <NRF24_write>
 8002922:	e071      	b.n	8002a08 <main+0xb3c>
        }
      }
      else{
        for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 8002924:	2300      	movs	r3, #0
 8002926:	f641 523c 	movw	r2, #7484	; 0x1d3c
 800292a:	443a      	add	r2, r7
 800292c:	6013      	str	r3, [r2, #0]
 800292e:	e037      	b.n	80029a0 <main+0xad4>
 8002930:	24001450 	.word	0x24001450
 8002934:	ffffeff8 	.word	0xffffeff8
 8002938:	0801ad70 	.word	0x0801ad70
          Txcnt += sprintf(myTxData + Txcnt, "%x", FDBuffer[BuffIndex].data.bytes[i]);
 800293c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002940:	443b      	add	r3, r7
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4ab4      	ldr	r2, [pc, #720]	; (8002c18 <main+0xd4c>)
 8002946:	1898      	adds	r0, r3, r2
 8002948:	4ab4      	ldr	r2, [pc, #720]	; (8002c1c <main+0xd50>)
 800294a:	f641 5368 	movw	r3, #7528	; 0x1d68
 800294e:	443b      	add	r3, r7
 8002950:	441a      	add	r2, r3
 8002952:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002956:	443b      	add	r3, r7
 8002958:	6819      	ldr	r1, [r3, #0]
 800295a:	460b      	mov	r3, r1
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	440b      	add	r3, r1
 8002960:	011b      	lsls	r3, r3, #4
 8002962:	441a      	add	r2, r3
 8002964:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002968:	443b      	add	r3, r7
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4413      	add	r3, r2
 800296e:	3310      	adds	r3, #16
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	49aa      	ldr	r1, [pc, #680]	; (8002c20 <main+0xd54>)
 8002976:	f016 fec7 	bl	8019708 <siprintf>
 800297a:	4602      	mov	r2, r0
 800297c:	f641 5354 	movw	r3, #7508	; 0x1d54
 8002980:	443b      	add	r3, r7
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4413      	add	r3, r2
 8002986:	f641 5254 	movw	r2, #7508	; 0x1d54
 800298a:	443a      	add	r2, r7
 800298c:	6013      	str	r3, [r2, #0]
        for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800298e:	f641 533c 	movw	r3, #7484	; 0x1d3c
 8002992:	443b      	add	r3, r7
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	3301      	adds	r3, #1
 8002998:	f641 523c 	movw	r2, #7484	; 0x1d3c
 800299c:	443a      	add	r2, r7
 800299e:	6013      	str	r3, [r2, #0]
 80029a0:	4a9e      	ldr	r2, [pc, #632]	; (8002c1c <main+0xd50>)
 80029a2:	f641 5368 	movw	r3, #7528	; 0x1d68
 80029a6:	443b      	add	r3, r7
 80029a8:	441a      	add	r2, r3
 80029aa:	f641 5358 	movw	r3, #7512	; 0x1d58
 80029ae:	443b      	add	r3, r7
 80029b0:	6819      	ldr	r1, [r3, #0]
 80029b2:	460b      	mov	r3, r1
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	4413      	add	r3, r2
 80029bc:	3308      	adds	r3, #8
 80029be:	681a      	ldr	r2, [r3, #0]
 80029c0:	f641 533c 	movw	r3, #7484	; 0x1d3c
 80029c4:	443b      	add	r3, r7
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d8b7      	bhi.n	800293c <main+0xa70>
        }
        NRF24_write(myTxData, FDBuffer[BuffIndex].length + (32 - TxDataSpace));
 80029cc:	4a93      	ldr	r2, [pc, #588]	; (8002c1c <main+0xd50>)
 80029ce:	f641 5368 	movw	r3, #7528	; 0x1d68
 80029d2:	443b      	add	r3, r7
 80029d4:	441a      	add	r2, r3
 80029d6:	f641 5358 	movw	r3, #7512	; 0x1d58
 80029da:	443b      	add	r3, r7
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	460b      	mov	r3, r1
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	4413      	add	r3, r2
 80029e8:	3308      	adds	r3, #8
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	f641 5310 	movw	r3, #7440	; 0x1d10
 80029f2:	443b      	add	r3, r7
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	1ad3      	subs	r3, r2, r3
 80029fa:	b2db      	uxtb	r3, r3
 80029fc:	3320      	adds	r3, #32
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	4619      	mov	r1, r3
 8002a02:	4885      	ldr	r0, [pc, #532]	; (8002c18 <main+0xd4c>)
 8002a04:	f7fe fac8 	bl	8000f98 <NRF24_write>
      }
      BuffIndex++;
 8002a08:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002a0c:	443b      	add	r3, r7
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	3301      	adds	r3, #1
 8002a12:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002a16:	443a      	add	r2, r7
 8002a18:	6013      	str	r3, [r2, #0]
      if(FDBuffer[BuffIndex].id == 0){
 8002a1a:	4a80      	ldr	r2, [pc, #512]	; (8002c1c <main+0xd50>)
 8002a1c:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002a20:	443b      	add	r3, r7
 8002a22:	441a      	add	r2, r3
 8002a24:	f641 5358 	movw	r3, #7512	; 0x1d58
 8002a28:	443b      	add	r3, r7
 8002a2a:	6819      	ldr	r1, [r3, #0]
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	011b      	lsls	r3, r3, #4
 8002a34:	4413      	add	r3, r2
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d104      	bne.n	8002a46 <main+0xb7a>
        BuffIndex = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	f641 5258 	movw	r2, #7512	; 0x1d58
 8002a42:	443a      	add	r2, r7
 8002a44:	6013      	str	r3, [r2, #0]
	  for(int i = 0; i < AllowedTele; i++){
 8002a46:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002a4a:	443b      	add	r3, r7
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	3301      	adds	r3, #1
 8002a50:	f641 5250 	movw	r2, #7504	; 0x1d50
 8002a54:	443a      	add	r2, r7
 8002a56:	6013      	str	r3, [r2, #0]
 8002a58:	f641 5350 	movw	r3, #7504	; 0x1d50
 8002a5c:	443b      	add	r3, r7
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8002a64:	443b      	add	r3, r7
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	f6ff ad61 	blt.w	8002530 <main+0x664>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/
	  if(FDCAN_Flag){
 8002a6e:	4b6d      	ldr	r3, [pc, #436]	; (8002c24 <main+0xd58>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	f000 81d1 	beq.w	8002e1a <main+0xf4e>

		  RTC_TimeTypeDef lTime = sTime;
 8002a78:	4b6b      	ldr	r3, [pc, #428]	; (8002c28 <main+0xd5c>)
 8002a7a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002a7e:	443a      	add	r2, r7
 8002a80:	4413      	add	r3, r2
 8002a82:	4a6a      	ldr	r2, [pc, #424]	; (8002c2c <main+0xd60>)
 8002a84:	461c      	mov	r4, r3
 8002a86:	4615      	mov	r5, r2
 8002a88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a8c:	682b      	ldr	r3, [r5, #0]
 8002a8e:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 8002a90:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <main+0xd64>)
 8002a92:	68db      	ldr	r3, [r3, #12]
 8002a94:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002a98:	443a      	add	r2, r7
 8002a9a:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002a9c:	4b62      	ldr	r3, [pc, #392]	; (8002c28 <main+0xd5c>)
 8002a9e:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002aa2:	443a      	add	r2, r7
 8002aa4:	4413      	add	r3, r2
 8002aa6:	6859      	ldr	r1, [r3, #4]
 8002aa8:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002aac:	443b      	add	r3, r7
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4b60      	ldr	r3, [pc, #384]	; (8002c34 <main+0xd68>)
 8002ab2:	fba3 0302 	umull	r0, r3, r3, r2
 8002ab6:	099b      	lsrs	r3, r3, #6
 8002ab8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002abc:	fb00 f303 	mul.w	r3, r0, r3
 8002ac0:	1ad3      	subs	r3, r2, r3
 8002ac2:	18ca      	adds	r2, r1, r3
 8002ac4:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <main+0xd5c>)
 8002ac6:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002aca:	4439      	add	r1, r7
 8002acc:	440b      	add	r3, r1
 8002ace:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002ad0:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002ad4:	443b      	add	r3, r7
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a56      	ldr	r2, [pc, #344]	; (8002c34 <main+0xd68>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	099b      	lsrs	r3, r3, #6
 8002ae0:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002ae4:	443a      	add	r2, r7
 8002ae6:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <main+0xd5c>)
 8002aea:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002aee:	443a      	add	r2, r7
 8002af0:	4413      	add	r3, r2
 8002af2:	7898      	ldrb	r0, [r3, #2]
 8002af4:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002af8:	443b      	add	r3, r7
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	4b4e      	ldr	r3, [pc, #312]	; (8002c38 <main+0xd6c>)
 8002afe:	fba3 2301 	umull	r2, r3, r3, r1
 8002b02:	095a      	lsrs	r2, r3, #5
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	1aca      	subs	r2, r1, r3
 8002b0e:	b2d3      	uxtb	r3, r2
 8002b10:	4403      	add	r3, r0
 8002b12:	b2da      	uxtb	r2, r3
 8002b14:	4b44      	ldr	r3, [pc, #272]	; (8002c28 <main+0xd5c>)
 8002b16:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002b1a:	4439      	add	r1, r7
 8002b1c:	440b      	add	r3, r1
 8002b1e:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002b20:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002b24:	443b      	add	r3, r7
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a43      	ldr	r2, [pc, #268]	; (8002c38 <main+0xd6c>)
 8002b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b2e:	095b      	lsrs	r3, r3, #5
 8002b30:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002b34:	443a      	add	r2, r7
 8002b36:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002b38:	4b3b      	ldr	r3, [pc, #236]	; (8002c28 <main+0xd5c>)
 8002b3a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002b3e:	443a      	add	r2, r7
 8002b40:	4413      	add	r3, r2
 8002b42:	7858      	ldrb	r0, [r3, #1]
 8002b44:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002b48:	443b      	add	r3, r7
 8002b4a:	6819      	ldr	r1, [r3, #0]
 8002b4c:	4b3a      	ldr	r3, [pc, #232]	; (8002c38 <main+0xd6c>)
 8002b4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002b52:	095a      	lsrs	r2, r3, #5
 8002b54:	4613      	mov	r3, r2
 8002b56:	011b      	lsls	r3, r3, #4
 8002b58:	1a9b      	subs	r3, r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	1aca      	subs	r2, r1, r3
 8002b5e:	b2d3      	uxtb	r3, r2
 8002b60:	4403      	add	r3, r0
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	4b30      	ldr	r3, [pc, #192]	; (8002c28 <main+0xd5c>)
 8002b66:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002b6a:	4439      	add	r1, r7
 8002b6c:	440b      	add	r3, r1
 8002b6e:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002b70:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002b74:	443b      	add	r3, r7
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a2f      	ldr	r2, [pc, #188]	; (8002c38 <main+0xd6c>)
 8002b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7e:	095b      	lsrs	r3, r3, #5
 8002b80:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002b84:	443a      	add	r2, r7
 8002b86:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002b88:	4b27      	ldr	r3, [pc, #156]	; (8002c28 <main+0xd5c>)
 8002b8a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002b8e:	443a      	add	r2, r7
 8002b90:	4413      	add	r3, r2
 8002b92:	7818      	ldrb	r0, [r3, #0]
 8002b94:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002b98:	443b      	add	r3, r7
 8002b9a:	6819      	ldr	r1, [r3, #0]
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <main+0xd6c>)
 8002b9e:	fba3 2301 	umull	r2, r3, r3, r1
 8002ba2:	095a      	lsrs	r2, r3, #5
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	011b      	lsls	r3, r3, #4
 8002ba8:	1a9b      	subs	r3, r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	1aca      	subs	r2, r1, r3
 8002bae:	b2d3      	uxtb	r3, r2
 8002bb0:	4403      	add	r3, r0
 8002bb2:	b2da      	uxtb	r2, r3
 8002bb4:	4b1c      	ldr	r3, [pc, #112]	; (8002c28 <main+0xd5c>)
 8002bb6:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002bba:	4439      	add	r1, r7
 8002bbc:	440b      	add	r3, r1
 8002bbe:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bc0:	4b1e      	ldr	r3, [pc, #120]	; (8002c3c <main+0xd70>)
 8002bc2:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bc4:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bc6:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <main+0xd70>)
 8002bc8:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bca:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bcc:	4b1b      	ldr	r3, [pc, #108]	; (8002c3c <main+0xd70>)
 8002bce:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bd0:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bd2:	4b15      	ldr	r3, [pc, #84]	; (8002c28 <main+0xd5c>)
 8002bd4:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002bd8:	443a      	add	r2, r7
 8002bda:	4413      	add	r3, r2
 8002bdc:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bde:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002be0:	4b11      	ldr	r3, [pc, #68]	; (8002c28 <main+0xd5c>)
 8002be2:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002be6:	443a      	add	r2, r7
 8002be8:	4413      	add	r3, r2
 8002bea:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bec:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002bee:	4b0e      	ldr	r3, [pc, #56]	; (8002c28 <main+0xd5c>)
 8002bf0:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002bf4:	443a      	add	r2, r7
 8002bf6:	4413      	add	r3, r2
 8002bf8:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002bfa:	461e      	mov	r6, r3
 8002bfc:	4b0a      	ldr	r3, [pc, #40]	; (8002c28 <main+0xd5c>)
 8002bfe:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002c02:	443a      	add	r2, r7
 8002c04:	4413      	add	r3, r2
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	4a09      	ldr	r2, [pc, #36]	; (8002c30 <main+0xd64>)
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	f507 6099 	add.w	r0, r7, #1224	; 0x4c8
 8002c10:	9205      	str	r2, [sp, #20]
 8002c12:	9304      	str	r3, [sp, #16]
 8002c14:	9603      	str	r6, [sp, #12]
 8002c16:	e013      	b.n	8002c40 <main+0xd74>
 8002c18:	24001450 	.word	0x24001450
 8002c1c:	ffffeff8 	.word	0xffffeff8
 8002c20:	0801ad70 	.word	0x0801ad70
 8002c24:	240001fc 	.word	0x240001fc
 8002c28:	ffffe72c 	.word	0xffffe72c
 8002c2c:	24000b30 	.word	0x24000b30
 8002c30:	24001040 	.word	0x24001040
 8002c34:	10624dd3 	.word	0x10624dd3
 8002c38:	88888889 	.word	0x88888889
 8002c3c:	24000b44 	.word	0x24000b44
 8002c40:	9502      	str	r5, [sp, #8]
 8002c42:	9401      	str	r4, [sp, #4]
 8002c44:	9100      	str	r1, [sp, #0]
 8002c46:	4673      	mov	r3, lr
 8002c48:	4662      	mov	r2, ip
 8002c4a:	495d      	ldr	r1, [pc, #372]	; (8002dc0 <main+0xef4>)
 8002c4c:	f016 fd5c 	bl	8019708 <siprintf>
 8002c50:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002c54:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002c56:	2300      	movs	r3, #0
 8002c58:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002c5c:	443a      	add	r2, r7
 8002c5e:	6013      	str	r3, [r2, #0]
 8002c60:	e022      	b.n	8002ca8 <main+0xddc>
			  CFDW += sprintf(CanFDWrite + CFDW, "%c", CanFDFrame.data.bytes[i]);
 8002c62:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8002c6c:	18d0      	adds	r0, r2, r3
 8002c6e:	4a55      	ldr	r2, [pc, #340]	; (8002dc4 <main+0xef8>)
 8002c70:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002c74:	443b      	add	r3, r7
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4413      	add	r3, r2
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4951      	ldr	r1, [pc, #324]	; (8002dc8 <main+0xefc>)
 8002c82:	f016 fd41 	bl	8019708 <siprintf>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002c94:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002c96:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002c9a:	443b      	add	r3, r7
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	3301      	adds	r3, #1
 8002ca0:	f641 5238 	movw	r2, #7480	; 0x1d38
 8002ca4:	443a      	add	r2, r7
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	4b46      	ldr	r3, [pc, #280]	; (8002dc4 <main+0xef8>)
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	f641 5338 	movw	r3, #7480	; 0x1d38
 8002cb0:	443b      	add	r3, r7
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d8d4      	bhi.n	8002c62 <main+0xd96>
		  }
		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8002cb8:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f507 6299 	add.w	r2, r7, #1224	; 0x4c8
 8002cc2:	4413      	add	r3, r2
 8002cc4:	4a41      	ldr	r2, [pc, #260]	; (8002dcc <main+0xf00>)
 8002cc6:	8811      	ldrh	r1, [r2, #0]
 8002cc8:	7892      	ldrb	r2, [r2, #2]
 8002cca:	8019      	strh	r1, [r3, #0]
 8002ccc:	709a      	strb	r2, [r3, #2]
 8002cce:	2202      	movs	r2, #2
 8002cd0:	f507 53eb 	add.w	r3, r7, #7520	; 0x1d60
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002cdc:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 8002cde:	f507 6399 	add.w	r3, r7, #1224	; 0x4c8
 8002ce2:	f507 52eb 	add.w	r2, r7, #7520	; 0x1d60
 8002ce6:	6811      	ldr	r1, [r2, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff f847 	bl	8001d7c <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 8002cee:	2300      	movs	r3, #0
 8002cf0:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002cf4:	443a      	add	r2, r7
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	e084      	b.n	8002e04 <main+0xf38>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 8002cfa:	4b32      	ldr	r3, [pc, #200]	; (8002dc4 <main+0xef8>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 8002d02:	f641 5134 	movw	r1, #7476	; 0x1d34
 8002d06:	4439      	add	r1, r7
 8002d08:	6809      	ldr	r1, [r1, #0]
 8002d0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d16f      	bne.n	8002df2 <main+0xf26>
          for(int j = 0; j < 50; j++){
 8002d12:	2300      	movs	r3, #0
 8002d14:	f641 5230 	movw	r2, #7472	; 0x1d30
 8002d18:	443a      	add	r2, r7
 8002d1a:	6013      	str	r3, [r2, #0]
 8002d1c:	e063      	b.n	8002de6 <main+0xf1a>
            if(FDBuffer[j].id == CanFDFrame.id){
 8002d1e:	4a2c      	ldr	r2, [pc, #176]	; (8002dd0 <main+0xf04>)
 8002d20:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d24:	443b      	add	r3, r7
 8002d26:	441a      	add	r2, r3
 8002d28:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002d2c:	443b      	add	r3, r7
 8002d2e:	6819      	ldr	r1, [r3, #0]
 8002d30:	460b      	mov	r3, r1
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	4413      	add	r3, r2
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	4b21      	ldr	r3, [pc, #132]	; (8002dc4 <main+0xef8>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d115      	bne.n	8002d70 <main+0xea4>
              FDBuffer[j] = CanFDFrame;
 8002d44:	4a22      	ldr	r2, [pc, #136]	; (8002dd0 <main+0xf04>)
 8002d46:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d4a:	443b      	add	r3, r7
 8002d4c:	441a      	add	r2, r3
 8002d4e:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002d52:	443b      	add	r3, r7
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	460b      	mov	r3, r1
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	4413      	add	r3, r2
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <main+0xef8>)
 8002d62:	4618      	mov	r0, r3
 8002d64:	4611      	mov	r1, r2
 8002d66:	2350      	movs	r3, #80	; 0x50
 8002d68:	461a      	mov	r2, r3
 8002d6a:	f016 fb51 	bl	8019410 <memcpy>
              goto TeleDoneFD;
 8002d6e:	e051      	b.n	8002e14 <main+0xf48>
            }
            if(FDBuffer[j].id == 0){
 8002d70:	4a17      	ldr	r2, [pc, #92]	; (8002dd0 <main+0xf04>)
 8002d72:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d76:	443b      	add	r3, r7
 8002d78:	441a      	add	r2, r3
 8002d7a:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002d7e:	443b      	add	r3, r7
 8002d80:	6819      	ldr	r1, [r3, #0]
 8002d82:	460b      	mov	r3, r1
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	440b      	add	r3, r1
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	4413      	add	r3, r2
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d120      	bne.n	8002dd4 <main+0xf08>
              FDBuffer[j] = CanFDFrame;
 8002d92:	4a0f      	ldr	r2, [pc, #60]	; (8002dd0 <main+0xf04>)
 8002d94:	f641 5368 	movw	r3, #7528	; 0x1d68
 8002d98:	443b      	add	r3, r7
 8002d9a:	441a      	add	r2, r3
 8002d9c:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002da0:	443b      	add	r3, r7
 8002da2:	6819      	ldr	r1, [r3, #0]
 8002da4:	460b      	mov	r3, r1
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	011b      	lsls	r3, r3, #4
 8002dac:	4413      	add	r3, r2
 8002dae:	4a05      	ldr	r2, [pc, #20]	; (8002dc4 <main+0xef8>)
 8002db0:	4618      	mov	r0, r3
 8002db2:	4611      	mov	r1, r2
 8002db4:	2350      	movs	r3, #80	; 0x50
 8002db6:	461a      	mov	r2, r3
 8002db8:	f016 fb2a 	bl	8019410 <memcpy>
              goto TeleDoneFD;
 8002dbc:	e02a      	b.n	8002e14 <main+0xf48>
 8002dbe:	bf00      	nop
 8002dc0:	0801ad74 	.word	0x0801ad74
 8002dc4:	24001040 	.word	0x24001040
 8002dc8:	0801ad90 	.word	0x0801ad90
 8002dcc:	0801ad94 	.word	0x0801ad94
 8002dd0:	ffffeff8 	.word	0xffffeff8
          for(int j = 0; j < 50; j++){
 8002dd4:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002dd8:	443b      	add	r3, r7
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	f641 5230 	movw	r2, #7472	; 0x1d30
 8002de2:	443a      	add	r2, r7
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	f641 5330 	movw	r3, #7472	; 0x1d30
 8002dea:	443b      	add	r3, r7
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b31      	cmp	r3, #49	; 0x31
 8002df0:	dd95      	ble.n	8002d1e <main+0xe52>
      for(int i = 0; i <50; i++){
 8002df2:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002df6:	443b      	add	r3, r7
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	f641 5234 	movw	r2, #7476	; 0x1d34
 8002e00:	443a      	add	r2, r7
 8002e02:	6013      	str	r3, [r2, #0]
 8002e04:	f641 5334 	movw	r3, #7476	; 0x1d34
 8002e08:	443b      	add	r3, r7
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b31      	cmp	r3, #49	; 0x31
 8002e0e:	f77f af74 	ble.w	8002cfa <main+0xe2e>
            }
          }
        }
      }
TeleDoneFD:
 8002e12:	bf00      	nop
		  FDCAN_Flag = 0;
 8002e14:	4bad      	ldr	r3, [pc, #692]	; (80030cc <main+0x1200>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 8002e1a:	4bad      	ldr	r3, [pc, #692]	; (80030d0 <main+0x1204>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 81e7 	beq.w	80031f2 <main+0x1326>

		  RTC_TimeTypeDef lTime = sTime;
 8002e24:	4bab      	ldr	r3, [pc, #684]	; (80030d4 <main+0x1208>)
 8002e26:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002e2a:	443a      	add	r2, r7
 8002e2c:	4413      	add	r3, r2
 8002e2e:	4aaa      	ldr	r2, [pc, #680]	; (80030d8 <main+0x120c>)
 8002e30:	461c      	mov	r4, r3
 8002e32:	4615      	mov	r5, r2
 8002e34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002e36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002e38:	682b      	ldr	r3, [r5, #0]
 8002e3a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 8002e3c:	4ba7      	ldr	r3, [pc, #668]	; (80030dc <main+0x1210>)
 8002e3e:	689b      	ldr	r3, [r3, #8]
 8002e40:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002e44:	443a      	add	r2, r7
 8002e46:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8002e48:	4ba2      	ldr	r3, [pc, #648]	; (80030d4 <main+0x1208>)
 8002e4a:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002e4e:	443a      	add	r2, r7
 8002e50:	4413      	add	r3, r2
 8002e52:	6859      	ldr	r1, [r3, #4]
 8002e54:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002e58:	443b      	add	r3, r7
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4ba0      	ldr	r3, [pc, #640]	; (80030e0 <main+0x1214>)
 8002e5e:	fba3 0302 	umull	r0, r3, r3, r2
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e68:	fb00 f303 	mul.w	r3, r0, r3
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	18ca      	adds	r2, r1, r3
 8002e70:	4b98      	ldr	r3, [pc, #608]	; (80030d4 <main+0x1208>)
 8002e72:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002e76:	4439      	add	r1, r7
 8002e78:	440b      	add	r3, r1
 8002e7a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8002e7c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002e80:	443b      	add	r3, r7
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a96      	ldr	r2, [pc, #600]	; (80030e0 <main+0x1214>)
 8002e86:	fba2 2303 	umull	r2, r3, r2, r3
 8002e8a:	099b      	lsrs	r3, r3, #6
 8002e8c:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002e90:	443a      	add	r2, r7
 8002e92:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8002e94:	4b8f      	ldr	r3, [pc, #572]	; (80030d4 <main+0x1208>)
 8002e96:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002e9a:	443a      	add	r2, r7
 8002e9c:	4413      	add	r3, r2
 8002e9e:	7898      	ldrb	r0, [r3, #2]
 8002ea0:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002ea4:	443b      	add	r3, r7
 8002ea6:	6819      	ldr	r1, [r3, #0]
 8002ea8:	4b8e      	ldr	r3, [pc, #568]	; (80030e4 <main+0x1218>)
 8002eaa:	fba3 2301 	umull	r2, r3, r3, r1
 8002eae:	095a      	lsrs	r2, r3, #5
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	1aca      	subs	r2, r1, r3
 8002eba:	b2d3      	uxtb	r3, r2
 8002ebc:	4403      	add	r3, r0
 8002ebe:	b2da      	uxtb	r2, r3
 8002ec0:	4b84      	ldr	r3, [pc, #528]	; (80030d4 <main+0x1208>)
 8002ec2:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002ec6:	4439      	add	r1, r7
 8002ec8:	440b      	add	r3, r1
 8002eca:	709a      	strb	r2, [r3, #2]
		  LocalTime = LocalTime/60;
 8002ecc:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002ed0:	443b      	add	r3, r7
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a83      	ldr	r2, [pc, #524]	; (80030e4 <main+0x1218>)
 8002ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8002eda:	095b      	lsrs	r3, r3, #5
 8002edc:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002ee0:	443a      	add	r2, r7
 8002ee2:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 8002ee4:	4b7b      	ldr	r3, [pc, #492]	; (80030d4 <main+0x1208>)
 8002ee6:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002eea:	443a      	add	r2, r7
 8002eec:	4413      	add	r3, r2
 8002eee:	7858      	ldrb	r0, [r3, #1]
 8002ef0:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002ef4:	443b      	add	r3, r7
 8002ef6:	6819      	ldr	r1, [r3, #0]
 8002ef8:	4b7a      	ldr	r3, [pc, #488]	; (80030e4 <main+0x1218>)
 8002efa:	fba3 2301 	umull	r2, r3, r3, r1
 8002efe:	095a      	lsrs	r2, r3, #5
 8002f00:	4613      	mov	r3, r2
 8002f02:	011b      	lsls	r3, r3, #4
 8002f04:	1a9b      	subs	r3, r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	1aca      	subs	r2, r1, r3
 8002f0a:	b2d3      	uxtb	r3, r2
 8002f0c:	4403      	add	r3, r0
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	4b70      	ldr	r3, [pc, #448]	; (80030d4 <main+0x1208>)
 8002f12:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002f16:	4439      	add	r1, r7
 8002f18:	440b      	add	r3, r1
 8002f1a:	705a      	strb	r2, [r3, #1]
		  LocalTime = LocalTime/60;
 8002f1c:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002f20:	443b      	add	r3, r7
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a6f      	ldr	r2, [pc, #444]	; (80030e4 <main+0x1218>)
 8002f26:	fba2 2303 	umull	r2, r3, r2, r3
 8002f2a:	095b      	lsrs	r3, r3, #5
 8002f2c:	f641 5214 	movw	r2, #7444	; 0x1d14
 8002f30:	443a      	add	r2, r7
 8002f32:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8002f34:	4b67      	ldr	r3, [pc, #412]	; (80030d4 <main+0x1208>)
 8002f36:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002f3a:	443a      	add	r2, r7
 8002f3c:	4413      	add	r3, r2
 8002f3e:	7818      	ldrb	r0, [r3, #0]
 8002f40:	f641 5314 	movw	r3, #7444	; 0x1d14
 8002f44:	443b      	add	r3, r7
 8002f46:	6819      	ldr	r1, [r3, #0]
 8002f48:	4b66      	ldr	r3, [pc, #408]	; (80030e4 <main+0x1218>)
 8002f4a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f4e:	095a      	lsrs	r2, r3, #5
 8002f50:	4613      	mov	r3, r2
 8002f52:	011b      	lsls	r3, r3, #4
 8002f54:	1a9b      	subs	r3, r3, r2
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	1aca      	subs	r2, r1, r3
 8002f5a:	b2d3      	uxtb	r3, r2
 8002f5c:	4403      	add	r3, r0
 8002f5e:	b2da      	uxtb	r2, r3
 8002f60:	4b5c      	ldr	r3, [pc, #368]	; (80030d4 <main+0x1208>)
 8002f62:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002f66:	4439      	add	r1, r7
 8002f68:	440b      	add	r3, r1
 8002f6a:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f6c:	4b5e      	ldr	r3, [pc, #376]	; (80030e8 <main+0x121c>)
 8002f6e:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002f70:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f72:	4b5d      	ldr	r3, [pc, #372]	; (80030e8 <main+0x121c>)
 8002f74:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002f76:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f78:	4b5b      	ldr	r3, [pc, #364]	; (80030e8 <main+0x121c>)
 8002f7a:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002f7c:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f7e:	4b55      	ldr	r3, [pc, #340]	; (80030d4 <main+0x1208>)
 8002f80:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002f84:	443a      	add	r2, r7
 8002f86:	4413      	add	r3, r2
 8002f88:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002f8a:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f8c:	4b51      	ldr	r3, [pc, #324]	; (80030d4 <main+0x1208>)
 8002f8e:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002f92:	443a      	add	r2, r7
 8002f94:	4413      	add	r3, r2
 8002f96:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002f98:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 8002f9a:	4b4e      	ldr	r3, [pc, #312]	; (80030d4 <main+0x1208>)
 8002f9c:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002fa0:	443a      	add	r2, r7
 8002fa2:	4413      	add	r3, r2
 8002fa4:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8002fa6:	461e      	mov	r6, r3
 8002fa8:	4b4a      	ldr	r3, [pc, #296]	; (80030d4 <main+0x1208>)
 8002faa:	f641 5268 	movw	r2, #7528	; 0x1d68
 8002fae:	443a      	add	r2, r7
 8002fb0:	4413      	add	r3, r2
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	4a49      	ldr	r2, [pc, #292]	; (80030dc <main+0x1210>)
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	484c      	ldr	r0, [pc, #304]	; (80030ec <main+0x1220>)
 8002fba:	f641 5868 	movw	r8, #7528	; 0x1d68
 8002fbe:	44b8      	add	r8, r7
 8002fc0:	4440      	add	r0, r8
 8002fc2:	9205      	str	r2, [sp, #20]
 8002fc4:	9304      	str	r3, [sp, #16]
 8002fc6:	9603      	str	r6, [sp, #12]
 8002fc8:	9502      	str	r5, [sp, #8]
 8002fca:	9401      	str	r4, [sp, #4]
 8002fcc:	9100      	str	r1, [sp, #0]
 8002fce:	4673      	mov	r3, lr
 8002fd0:	4662      	mov	r2, ip
 8002fd2:	4947      	ldr	r1, [pc, #284]	; (80030f0 <main+0x1224>)
 8002fd4:	f016 fb98 	bl	8019708 <siprintf>
 8002fd8:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002fdc:	443b      	add	r3, r7
 8002fde:	6018      	str	r0, [r3, #0]
				  CanFrame.id);
		  for(int i = 0; i < CanFDFrame.length; i++){
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	f641 522c 	movw	r2, #7468	; 0x1d2c
 8002fe6:	443a      	add	r2, r7
 8002fe8:	6013      	str	r3, [r2, #0]
 8002fea:	e028      	b.n	800303e <main+0x1172>
			  CW += sprintf(CanWrite + CW, "%c", CanFrame.data.bytes[i]);
 8002fec:	f641 5364 	movw	r3, #7524	; 0x1d64
 8002ff0:	443b      	add	r3, r7
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	4b3d      	ldr	r3, [pc, #244]	; (80030ec <main+0x1220>)
 8002ff6:	f641 5168 	movw	r1, #7528	; 0x1d68
 8002ffa:	4439      	add	r1, r7
 8002ffc:	440b      	add	r3, r1
 8002ffe:	1898      	adds	r0, r3, r2
 8003000:	4a36      	ldr	r2, [pc, #216]	; (80030dc <main+0x1210>)
 8003002:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003006:	443b      	add	r3, r7
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4413      	add	r3, r2
 800300c:	3310      	adds	r3, #16
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	461a      	mov	r2, r3
 8003012:	4938      	ldr	r1, [pc, #224]	; (80030f4 <main+0x1228>)
 8003014:	f016 fb78 	bl	8019708 <siprintf>
 8003018:	4602      	mov	r2, r0
 800301a:	f641 5364 	movw	r3, #7524	; 0x1d64
 800301e:	443b      	add	r3, r7
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4413      	add	r3, r2
 8003024:	f641 5264 	movw	r2, #7524	; 0x1d64
 8003028:	443a      	add	r2, r7
 800302a:	6013      	str	r3, [r2, #0]
		  for(int i = 0; i < CanFDFrame.length; i++){
 800302c:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003030:	443b      	add	r3, r7
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	3301      	adds	r3, #1
 8003036:	f641 522c 	movw	r2, #7468	; 0x1d2c
 800303a:	443a      	add	r2, r7
 800303c:	6013      	str	r3, [r2, #0]
 800303e:	4b2e      	ldr	r3, [pc, #184]	; (80030f8 <main+0x122c>)
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	f641 532c 	movw	r3, #7468	; 0x1d2c
 8003046:	443b      	add	r3, r7
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	429a      	cmp	r2, r3
 800304c:	d8ce      	bhi.n	8002fec <main+0x1120>
		  }
		  CW += sprintf(CanWrite + CW, "\n\r");
 800304e:	f641 5364 	movw	r3, #7524	; 0x1d64
 8003052:	443b      	add	r3, r7
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4b25      	ldr	r3, [pc, #148]	; (80030ec <main+0x1220>)
 8003058:	f641 5168 	movw	r1, #7528	; 0x1d68
 800305c:	4439      	add	r1, r7
 800305e:	440b      	add	r3, r1
 8003060:	4413      	add	r3, r2
 8003062:	4a26      	ldr	r2, [pc, #152]	; (80030fc <main+0x1230>)
 8003064:	8811      	ldrh	r1, [r2, #0]
 8003066:	7892      	ldrb	r2, [r2, #2]
 8003068:	8019      	strh	r1, [r3, #0]
 800306a:	709a      	strb	r2, [r3, #2]
 800306c:	2202      	movs	r2, #2
 800306e:	f641 5364 	movw	r3, #7524	; 0x1d64
 8003072:	443b      	add	r3, r7
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4413      	add	r3, r2
 8003078:	f641 5264 	movw	r2, #7524	; 0x1d64
 800307c:	443a      	add	r2, r7
 800307e:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 8003080:	4b1a      	ldr	r3, [pc, #104]	; (80030ec <main+0x1220>)
 8003082:	f641 5268 	movw	r2, #7528	; 0x1d68
 8003086:	443a      	add	r2, r7
 8003088:	4413      	add	r3, r2
 800308a:	f641 5264 	movw	r2, #7524	; 0x1d64
 800308e:	443a      	add	r2, r7
 8003090:	6811      	ldr	r1, [r2, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fe fe72 	bl	8001d7c <WriteToBuff>

      for(int i = 0; i <50; i++){
 8003098:	2300      	movs	r3, #0
 800309a:	f641 5228 	movw	r2, #7464	; 0x1d28
 800309e:	443a      	add	r2, r7
 80030a0:	6013      	str	r3, [r2, #0]
 80030a2:	e099      	b.n	80031d8 <main+0x130c>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80030a4:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <main+0x1210>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f507 63fd 	add.w	r3, r7, #2024	; 0x7e8
 80030ac:	f641 5128 	movw	r1, #7464	; 0x1d28
 80030b0:	4439      	add	r1, r7
 80030b2:	6809      	ldr	r1, [r1, #0]
 80030b4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80030b8:	429a      	cmp	r2, r3
 80030ba:	f040 8084 	bne.w	80031c6 <main+0x12fa>
          for(int j = 0; j < 50; j++){
 80030be:	2300      	movs	r3, #0
 80030c0:	f641 5224 	movw	r2, #7460	; 0x1d24
 80030c4:	443a      	add	r2, r7
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	e077      	b.n	80031ba <main+0x12ee>
 80030ca:	bf00      	nop
 80030cc:	240001fc 	.word	0x240001fc
 80030d0:	24000200 	.word	0x24000200
 80030d4:	ffffe718 	.word	0xffffe718
 80030d8:	24000b30 	.word	0x24000b30
 80030dc:	240010b8 	.word	0x240010b8
 80030e0:	10624dd3 	.word	0x10624dd3
 80030e4:	88888889 	.word	0x88888889
 80030e8:	24000b44 	.word	0x24000b44
 80030ec:	ffffe8f0 	.word	0xffffe8f0
 80030f0:	0801ad74 	.word	0x0801ad74
 80030f4:	0801ad90 	.word	0x0801ad90
 80030f8:	24001040 	.word	0x24001040
 80030fc:	0801ad94 	.word	0x0801ad94
            if(Buffer[j].id == CanFrame.id){
 8003100:	4a66      	ldr	r2, [pc, #408]	; (800329c <main+0x13d0>)
 8003102:	f641 5368 	movw	r3, #7528	; 0x1d68
 8003106:	443b      	add	r3, r7
 8003108:	441a      	add	r2, r3
 800310a:	f641 5324 	movw	r3, #7460	; 0x1d24
 800310e:	443b      	add	r3, r7
 8003110:	6819      	ldr	r1, [r3, #0]
 8003112:	460b      	mov	r3, r1
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	440b      	add	r3, r1
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	4b60      	ldr	r3, [pc, #384]	; (80032a0 <main+0x13d4>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d117      	bne.n	8003156 <main+0x128a>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003126:	4a5d      	ldr	r2, [pc, #372]	; (800329c <main+0x13d0>)
 8003128:	f641 5368 	movw	r3, #7528	; 0x1d68
 800312c:	443b      	add	r3, r7
 800312e:	441a      	add	r2, r3
 8003130:	f641 5324 	movw	r3, #7460	; 0x1d24
 8003134:	443b      	add	r3, r7
 8003136:	6819      	ldr	r1, [r3, #0]
 8003138:	460b      	mov	r3, r1
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	440b      	add	r3, r1
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4413      	add	r3, r2
 8003142:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <main+0x13d4>)
 8003144:	461c      	mov	r4, r3
 8003146:	4615      	mov	r5, r2
 8003148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800314a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800314c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003150:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003154:	e04a      	b.n	80031ec <main+0x1320>
            }
            if(Buffer[j].id == 0){
 8003156:	4a51      	ldr	r2, [pc, #324]	; (800329c <main+0x13d0>)
 8003158:	f641 5368 	movw	r3, #7528	; 0x1d68
 800315c:	443b      	add	r3, r7
 800315e:	441a      	add	r2, r3
 8003160:	f641 5324 	movw	r3, #7460	; 0x1d24
 8003164:	443b      	add	r3, r7
 8003166:	6819      	ldr	r1, [r3, #0]
 8003168:	460b      	mov	r3, r1
 800316a:	005b      	lsls	r3, r3, #1
 800316c:	440b      	add	r3, r1
 800316e:	00db      	lsls	r3, r3, #3
 8003170:	4413      	add	r3, r2
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d117      	bne.n	80031a8 <main+0x12dc>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 8003178:	4a48      	ldr	r2, [pc, #288]	; (800329c <main+0x13d0>)
 800317a:	f641 5368 	movw	r3, #7528	; 0x1d68
 800317e:	443b      	add	r3, r7
 8003180:	441a      	add	r2, r3
 8003182:	f641 5324 	movw	r3, #7460	; 0x1d24
 8003186:	443b      	add	r3, r7
 8003188:	6819      	ldr	r1, [r3, #0]
 800318a:	460b      	mov	r3, r1
 800318c:	005b      	lsls	r3, r3, #1
 800318e:	440b      	add	r3, r1
 8003190:	00db      	lsls	r3, r3, #3
 8003192:	4413      	add	r3, r2
 8003194:	4a42      	ldr	r2, [pc, #264]	; (80032a0 <main+0x13d4>)
 8003196:	461c      	mov	r4, r3
 8003198:	4615      	mov	r5, r2
 800319a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800319c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800319e:	e895 0003 	ldmia.w	r5, {r0, r1}
 80031a2:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 80031a6:	e021      	b.n	80031ec <main+0x1320>
          for(int j = 0; j < 50; j++){
 80031a8:	f641 5324 	movw	r3, #7460	; 0x1d24
 80031ac:	443b      	add	r3, r7
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	3301      	adds	r3, #1
 80031b2:	f641 5224 	movw	r2, #7460	; 0x1d24
 80031b6:	443a      	add	r2, r7
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	f641 5324 	movw	r3, #7460	; 0x1d24
 80031be:	443b      	add	r3, r7
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2b31      	cmp	r3, #49	; 0x31
 80031c4:	dd9c      	ble.n	8003100 <main+0x1234>
      for(int i = 0; i <50; i++){
 80031c6:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031ca:	443b      	add	r3, r7
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	3301      	adds	r3, #1
 80031d0:	f641 5228 	movw	r2, #7464	; 0x1d28
 80031d4:	443a      	add	r2, r7
 80031d6:	6013      	str	r3, [r2, #0]
 80031d8:	f641 5328 	movw	r3, #7464	; 0x1d28
 80031dc:	443b      	add	r3, r7
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b31      	cmp	r3, #49	; 0x31
 80031e2:	f77f af5f 	ble.w	80030a4 <main+0x11d8>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 80031e6:	482f      	ldr	r0, [pc, #188]	; (80032a4 <main+0x13d8>)
 80031e8:	f016 f9ce 	bl	8019588 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 80031ec:	4b2e      	ldr	r3, [pc, #184]	; (80032a8 <main+0x13dc>)
 80031ee:	2200      	movs	r2, #0
 80031f0:	601a      	str	r2, [r3, #0]
	  }
	  //WriteToBuff(A, 2);
	  //HAL_Delay(1000);
	  //HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
    /* USER CODE END WHILE */
    EndTime = HAL_GetTick();
 80031f2:	f001 f9b7 	bl	8004564 <HAL_GetTick>
 80031f6:	f641 5304 	movw	r3, #7428	; 0x1d04
 80031fa:	443b      	add	r3, r7
 80031fc:	6018      	str	r0, [r3, #0]
    if(StartTime - EndTime > LoopTime + 5){
 80031fe:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003202:	443b      	add	r3, r7
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	f641 5304 	movw	r3, #7428	; 0x1d04
 800320a:	443b      	add	r3, r7
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	1ad2      	subs	r2, r2, r3
 8003210:	f641 530c 	movw	r3, #7436	; 0x1d0c
 8003214:	443b      	add	r3, r7
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	3305      	adds	r3, #5
 800321a:	429a      	cmp	r2, r3
 800321c:	d909      	bls.n	8003232 <main+0x1366>
      AllowedTele--;
 800321e:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003222:	443b      	add	r3, r7
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	3b01      	subs	r3, #1
 8003228:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800322c:	443a      	add	r2, r7
 800322e:	6013      	str	r3, [r2, #0]
 8003230:	e017      	b.n	8003262 <main+0x1396>
    }else if (StartTime - EndTime < LoopTime){
 8003232:	f641 5308 	movw	r3, #7432	; 0x1d08
 8003236:	443b      	add	r3, r7
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	f641 5304 	movw	r3, #7428	; 0x1d04
 800323e:	443b      	add	r3, r7
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	f641 520c 	movw	r2, #7436	; 0x1d0c
 8003248:	443a      	add	r2, r7
 800324a:	6812      	ldr	r2, [r2, #0]
 800324c:	429a      	cmp	r2, r3
 800324e:	d908      	bls.n	8003262 <main+0x1396>
      AllowedTele++;
 8003250:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003254:	443b      	add	r3, r7
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3301      	adds	r3, #1
 800325a:	f641 525c 	movw	r2, #7516	; 0x1d5c
 800325e:	443a      	add	r2, r7
 8003260:	6013      	str	r3, [r2, #0]
    }if (AllowedTele<1){
 8003262:	f641 535c 	movw	r3, #7516	; 0x1d5c
 8003266:	443b      	add	r3, r7
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	dc04      	bgt.n	8003278 <main+0x13ac>
    	AllowedTele = 1;
 800326e:	2301      	movs	r3, #1
 8003270:	f641 525c 	movw	r2, #7516	; 0x1d5c
 8003274:	443a      	add	r2, r7
 8003276:	6013      	str	r3, [r2, #0]
  while (end_flag){
 8003278:	4b0c      	ldr	r3, [pc, #48]	; (80032ac <main+0x13e0>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	f47f a923 	bne.w	80024c8 <main+0x5fc>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003282:	2101      	movs	r1, #1
 8003284:	480a      	ldr	r0, [pc, #40]	; (80032b0 <main+0x13e4>)
 8003286:	f004 feac 	bl	8007fe2 <HAL_GPIO_TogglePin>
 800328a:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 800328c:	4618      	mov	r0, r3
 800328e:	f507 57eb 	add.w	r7, r7, #7520	; 0x1d60
 8003292:	3708      	adds	r7, #8
 8003294:	46bd      	mov	sp, r7
 8003296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329a:	bf00      	nop
 800329c:	ffffeb48 	.word	0xffffeb48
 80032a0:	240010b8 	.word	0x240010b8
 80032a4:	0801ad98 	.word	0x0801ad98
 80032a8:	24000200 	.word	0x24000200
 80032ac:	24000008 	.word	0x24000008
 80032b0:	58020400 	.word	0x58020400

080032b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b0cc      	sub	sp, #304	; 0x130
 80032b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80032ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80032be:	224c      	movs	r2, #76	; 0x4c
 80032c0:	2100      	movs	r1, #0
 80032c2:	4618      	mov	r0, r3
 80032c4:	f016 f8af 	bl	8019426 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80032c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80032cc:	2220      	movs	r2, #32
 80032ce:	2100      	movs	r1, #0
 80032d0:	4618      	mov	r0, r3
 80032d2:	f016 f8a8 	bl	8019426 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80032d6:	f107 0308 	add.w	r3, r7, #8
 80032da:	4618      	mov	r0, r3
 80032dc:	23bc      	movs	r3, #188	; 0xbc
 80032de:	461a      	mov	r2, r3
 80032e0:	2100      	movs	r1, #0
 80032e2:	f016 f8a0 	bl	8019426 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80032e6:	2002      	movs	r0, #2
 80032e8:	f006 f976 	bl	80095d8 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80032ec:	1d3b      	adds	r3, r7, #4
 80032ee:	2200      	movs	r2, #0
 80032f0:	601a      	str	r2, [r3, #0]
 80032f2:	4b71      	ldr	r3, [pc, #452]	; (80034b8 <SystemClock_Config+0x204>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	4a70      	ldr	r2, [pc, #448]	; (80034b8 <SystemClock_Config+0x204>)
 80032f8:	f023 0301 	bic.w	r3, r3, #1
 80032fc:	62d3      	str	r3, [r2, #44]	; 0x2c
 80032fe:	4b6e      	ldr	r3, [pc, #440]	; (80034b8 <SystemClock_Config+0x204>)
 8003300:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003302:	f003 0201 	and.w	r2, r3, #1
 8003306:	1d3b      	adds	r3, r7, #4
 8003308:	601a      	str	r2, [r3, #0]
 800330a:	4b6c      	ldr	r3, [pc, #432]	; (80034bc <SystemClock_Config+0x208>)
 800330c:	699b      	ldr	r3, [r3, #24]
 800330e:	4a6b      	ldr	r2, [pc, #428]	; (80034bc <SystemClock_Config+0x208>)
 8003310:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003314:	6193      	str	r3, [r2, #24]
 8003316:	4b69      	ldr	r3, [pc, #420]	; (80034bc <SystemClock_Config+0x208>)
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 800331e:	1d3b      	adds	r3, r7, #4
 8003320:	601a      	str	r2, [r3, #0]
 8003322:	1d3b      	adds	r3, r7, #4
 8003324:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003326:	bf00      	nop
 8003328:	4b64      	ldr	r3, [pc, #400]	; (80034bc <SystemClock_Config+0x208>)
 800332a:	699b      	ldr	r3, [r3, #24]
 800332c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003334:	d1f8      	bne.n	8003328 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003336:	f006 f8b5 	bl	80094a4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800333a:	f001 f941 	bl	80045c0 <HAL_GetREVID>
 800333e:	4b60      	ldr	r3, [pc, #384]	; (80034c0 <SystemClock_Config+0x20c>)
 8003340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003342:	4a5f      	ldr	r2, [pc, #380]	; (80034c0 <SystemClock_Config+0x20c>)
 8003344:	f043 0318 	orr.w	r3, r3, #24
 8003348:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800334a:	4b5d      	ldr	r3, [pc, #372]	; (80034c0 <SystemClock_Config+0x20c>)
 800334c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800334e:	f023 0303 	bic.w	r3, r3, #3
 8003352:	4a5b      	ldr	r2, [pc, #364]	; (80034c0 <SystemClock_Config+0x20c>)
 8003354:	f043 0302 	orr.w	r3, r3, #2
 8003358:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 800335a:	2325      	movs	r3, #37	; 0x25
 800335c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003360:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003364:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003368:	2301      	movs	r3, #1
 800336a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800336e:	2301      	movs	r3, #1
 8003370:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003374:	2302      	movs	r3, #2
 8003376:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800337a:	2302      	movs	r3, #2
 800337c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003380:	2302      	movs	r3, #2
 8003382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003386:	2340      	movs	r3, #64	; 0x40
 8003388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 800338c:	2302      	movs	r3, #2
 800338e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8003392:	230a      	movs	r3, #10
 8003394:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003398:	2302      	movs	r3, #2
 800339a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800339e:	230c      	movs	r3, #12
 80033a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80033a4:	2300      	movs	r3, #0
 80033a6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b0:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80033b4:	4618      	mov	r0, r3
 80033b6:	f006 f99d 	bl	80096f4 <HAL_RCC_OscConfig>
 80033ba:	4603      	mov	r3, r0
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d001      	beq.n	80033c4 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80033c0:	f000 fbe8 	bl	8003b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033c4:	233f      	movs	r3, #63	; 0x3f
 80033c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033ca:	2303      	movs	r3, #3
 80033cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80033d0:	2300      	movs	r3, #0
 80033d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80033d6:	2308      	movs	r3, #8
 80033d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80033dc:	2340      	movs	r3, #64	; 0x40
 80033de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80033e2:	2340      	movs	r3, #64	; 0x40
 80033e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80033e8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80033f0:	2340      	movs	r3, #64	; 0x40
 80033f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033f6:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80033fa:	2102      	movs	r1, #2
 80033fc:	4618      	mov	r0, r3
 80033fe:	f006 fd89 	bl	8009f14 <HAL_RCC_ClockConfig>
 8003402:	4603      	mov	r3, r0
 8003404:	2b00      	cmp	r3, #0
 8003406:	d001      	beq.n	800340c <SystemClock_Config+0x158>
  {
    Error_Handler();
 8003408:	f000 fbc4 	bl	8003b94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 800340c:	f107 0308 	add.w	r3, r7, #8
 8003410:	4a2c      	ldr	r2, [pc, #176]	; (80034c4 <SystemClock_Config+0x210>)
 8003412:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003414:	f107 0308 	add.w	r3, r7, #8
 8003418:	2202      	movs	r2, #2
 800341a:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 800341c:	f107 0308 	add.w	r3, r7, #8
 8003420:	220c      	movs	r2, #12
 8003422:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	2203      	movs	r2, #3
 800342a:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800342c:	f107 0308 	add.w	r3, r7, #8
 8003430:	2202      	movs	r2, #2
 8003432:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003434:	f107 0308 	add.w	r3, r7, #8
 8003438:	2203      	movs	r2, #3
 800343a:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 800343c:	f107 0308 	add.w	r3, r7, #8
 8003440:	22c0      	movs	r2, #192	; 0xc0
 8003442:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003444:	f107 0308 	add.w	r3, r7, #8
 8003448:	2220      	movs	r2, #32
 800344a:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800344c:	f107 0308 	add.w	r3, r7, #8
 8003450:	2200      	movs	r2, #0
 8003452:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003454:	f107 0308 	add.w	r3, r7, #8
 8003458:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800345c:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 800345e:	f107 0308 	add.w	r3, r7, #8
 8003462:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003466:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003468:	f107 0308 	add.w	r3, r7, #8
 800346c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003470:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003472:	f107 0308 	add.w	r3, r7, #8
 8003476:	2200      	movs	r2, #0
 8003478:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800347a:	f107 0308 	add.w	r3, r7, #8
 800347e:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003482:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003486:	f107 0308 	add.w	r3, r7, #8
 800348a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800348e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003492:	f107 0308 	add.w	r3, r7, #8
 8003496:	4618      	mov	r0, r3
 8003498:	f007 f8ec 	bl	800a674 <HAL_RCCEx_PeriphCLKConfig>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 80034a2:	f000 fb77 	bl	8003b94 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 80034a6:	f006 feeb 	bl	800a280 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 80034aa:	f006 f8cf 	bl	800964c <HAL_PWREx_EnableUSBVoltageDetector>
}
 80034ae:	bf00      	nop
 80034b0:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	58000400 	.word	0x58000400
 80034bc:	58024800 	.word	0x58024800
 80034c0:	58024400 	.word	0x58024400
 80034c4:	00459002 	.word	0x00459002

080034c8 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80034cc:	4b2f      	ldr	r3, [pc, #188]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034ce:	4a30      	ldr	r2, [pc, #192]	; (8003590 <MX_FDCAN1_Init+0xc8>)
 80034d0:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 80034d2:	4b2e      	ldr	r3, [pc, #184]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034d4:	f44f 7240 	mov.w	r2, #768	; 0x300
 80034d8:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 80034da:	4b2c      	ldr	r3, [pc, #176]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034dc:	2200      	movs	r2, #0
 80034de:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 80034e0:	4b2a      	ldr	r3, [pc, #168]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034e2:	2200      	movs	r2, #0
 80034e4:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 80034e6:	4b29      	ldr	r3, [pc, #164]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034ee:	2200      	movs	r2, #0
 80034f0:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 80034f2:	4b26      	ldr	r3, [pc, #152]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034f4:	2201      	movs	r2, #1
 80034f6:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 80034f8:	4b24      	ldr	r3, [pc, #144]	; (800358c <MX_FDCAN1_Init+0xc4>)
 80034fa:	2217      	movs	r2, #23
 80034fc:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 80034fe:	4b23      	ldr	r3, [pc, #140]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003500:	2238      	movs	r2, #56	; 0x38
 8003502:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003504:	4b21      	ldr	r3, [pc, #132]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003506:	2217      	movs	r2, #23
 8003508:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800350a:	4b20      	ldr	r3, [pc, #128]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800350c:	2201      	movs	r2, #1
 800350e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003510:	4b1e      	ldr	r3, [pc, #120]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003512:	2205      	movs	r2, #5
 8003514:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003516:	4b1d      	ldr	r3, [pc, #116]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003518:	220a      	movs	r2, #10
 800351a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 800351c:	4b1b      	ldr	r3, [pc, #108]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800351e:	2205      	movs	r2, #5
 8003520:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003522:	4b1a      	ldr	r3, [pc, #104]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003524:	2200      	movs	r2, #0
 8003526:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8003528:	4b18      	ldr	r3, [pc, #96]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800352a:	2202      	movs	r2, #2
 800352c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 800352e:	4b17      	ldr	r3, [pc, #92]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003530:	2202      	movs	r2, #2
 8003532:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003534:	4b15      	ldr	r3, [pc, #84]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003536:	2240      	movs	r2, #64	; 0x40
 8003538:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 800353a:	4b14      	ldr	r3, [pc, #80]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800353c:	2212      	movs	r2, #18
 800353e:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003540:	4b12      	ldr	r3, [pc, #72]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003542:	2200      	movs	r2, #0
 8003544:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003546:	4b11      	ldr	r3, [pc, #68]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003548:	2204      	movs	r2, #4
 800354a:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800354c:	4b0f      	ldr	r3, [pc, #60]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800354e:	2200      	movs	r2, #0
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003552:	4b0e      	ldr	r3, [pc, #56]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003554:	2204      	movs	r2, #4
 8003556:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800355a:	2200      	movs	r2, #0
 800355c:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800355e:	4b0b      	ldr	r3, [pc, #44]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003560:	2200      	movs	r2, #0
 8003562:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8003564:	4b09      	ldr	r3, [pc, #36]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003566:	2200      	movs	r2, #0
 8003568:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800356a:	4b08      	ldr	r3, [pc, #32]	; (800358c <MX_FDCAN1_Init+0xc4>)
 800356c:	2200      	movs	r2, #0
 800356e:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003570:	4b06      	ldr	r3, [pc, #24]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003572:	2204      	movs	r2, #4
 8003574:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003576:	4805      	ldr	r0, [pc, #20]	; (800358c <MX_FDCAN1_Init+0xc4>)
 8003578:	f003 fa16 	bl	80069a8 <HAL_FDCAN_Init>
 800357c:	4603      	mov	r3, r0
 800357e:	2b00      	cmp	r3, #0
 8003580:	d001      	beq.n	8003586 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003582:	f000 fb07 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003586:	bf00      	nop
 8003588:	bd80      	pop	{r7, pc}
 800358a:	bf00      	nop
 800358c:	24001514 	.word	0x24001514
 8003590:	4000a000 	.word	0x4000a000

08003594 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003598:	4b2e      	ldr	r3, [pc, #184]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 800359a:	4a2f      	ldr	r2, [pc, #188]	; (8003658 <MX_FDCAN2_Init+0xc4>)
 800359c:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 800359e:	4b2d      	ldr	r3, [pc, #180]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035a0:	2200      	movs	r2, #0
 80035a2:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 80035a4:	4b2b      	ldr	r3, [pc, #172]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 80035aa:	4b2a      	ldr	r3, [pc, #168]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035ac:	2200      	movs	r2, #0
 80035ae:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 80035b0:	4b28      	ldr	r3, [pc, #160]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 80035b6:	4b27      	ldr	r3, [pc, #156]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 80035bc:	4b25      	ldr	r3, [pc, #148]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035be:	2201      	movs	r2, #1
 80035c0:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 80035c2:	4b24      	ldr	r3, [pc, #144]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 80035c8:	4b22      	ldr	r3, [pc, #136]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035ca:	2202      	movs	r2, #2
 80035cc:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 80035ce:	4b21      	ldr	r3, [pc, #132]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035d0:	2202      	movs	r2, #2
 80035d2:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 80035d4:	4b1f      	ldr	r3, [pc, #124]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 80035da:	4b1e      	ldr	r3, [pc, #120]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035dc:	2201      	movs	r2, #1
 80035de:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 80035e0:	4b1c      	ldr	r3, [pc, #112]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 80035e6:	4b1b      	ldr	r3, [pc, #108]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035e8:	2201      	movs	r2, #1
 80035ea:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 80035ec:	4b19      	ldr	r3, [pc, #100]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035ee:	2200      	movs	r2, #0
 80035f0:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 80035f2:	4b18      	ldr	r3, [pc, #96]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 80035f8:	4b16      	ldr	r3, [pc, #88]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 80035fa:	2200      	movs	r2, #0
 80035fc:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 80035fe:	4b15      	ldr	r3, [pc, #84]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003600:	2200      	movs	r2, #0
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003604:	4b13      	ldr	r3, [pc, #76]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003606:	2204      	movs	r2, #4
 8003608:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 800360a:	4b12      	ldr	r3, [pc, #72]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 800360c:	2200      	movs	r2, #0
 800360e:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003610:	4b10      	ldr	r3, [pc, #64]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003612:	2204      	movs	r2, #4
 8003614:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003616:	4b0f      	ldr	r3, [pc, #60]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003618:	2200      	movs	r2, #0
 800361a:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 800361e:	2204      	movs	r2, #4
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003622:	4b0c      	ldr	r3, [pc, #48]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003624:	2200      	movs	r2, #0
 8003626:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8003628:	4b0a      	ldr	r3, [pc, #40]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 800362a:	2200      	movs	r2, #0
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 800362e:	4b09      	ldr	r3, [pc, #36]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003630:	2200      	movs	r2, #0
 8003632:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003634:	4b07      	ldr	r3, [pc, #28]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003636:	2200      	movs	r2, #0
 8003638:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800363a:	4b06      	ldr	r3, [pc, #24]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 800363c:	2204      	movs	r2, #4
 800363e:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003640:	4804      	ldr	r0, [pc, #16]	; (8003654 <MX_FDCAN2_Init+0xc0>)
 8003642:	f003 f9b1 	bl	80069a8 <HAL_FDCAN_Init>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d001      	beq.n	8003650 <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 800364c:	f000 faa2 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003650:	bf00      	nop
 8003652:	bd80      	pop	{r7, pc}
 8003654:	240016c8 	.word	0x240016c8
 8003658:	4000a400 	.word	0x4000a400

0800365c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8003662:	1d3b      	adds	r3, r7, #4
 8003664:	2200      	movs	r2, #0
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	605a      	str	r2, [r3, #4]
 800366a:	609a      	str	r2, [r3, #8]
 800366c:	60da      	str	r2, [r3, #12]
 800366e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8003670:	2300      	movs	r3, #0
 8003672:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003674:	4b26      	ldr	r3, [pc, #152]	; (8003710 <MX_RTC_Init+0xb4>)
 8003676:	4a27      	ldr	r2, [pc, #156]	; (8003714 <MX_RTC_Init+0xb8>)
 8003678:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800367a:	4b25      	ldr	r3, [pc, #148]	; (8003710 <MX_RTC_Init+0xb4>)
 800367c:	2200      	movs	r2, #0
 800367e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8003680:	4b23      	ldr	r3, [pc, #140]	; (8003710 <MX_RTC_Init+0xb4>)
 8003682:	2201      	movs	r2, #1
 8003684:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8003686:	4b22      	ldr	r3, [pc, #136]	; (8003710 <MX_RTC_Init+0xb4>)
 8003688:	f244 0204 	movw	r2, #16388	; 0x4004
 800368c:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800368e:	4b20      	ldr	r3, [pc, #128]	; (8003710 <MX_RTC_Init+0xb4>)
 8003690:	2200      	movs	r2, #0
 8003692:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003694:	4b1e      	ldr	r3, [pc, #120]	; (8003710 <MX_RTC_Init+0xb4>)
 8003696:	2200      	movs	r2, #0
 8003698:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800369a:	4b1d      	ldr	r3, [pc, #116]	; (8003710 <MX_RTC_Init+0xb4>)
 800369c:	2200      	movs	r2, #0
 800369e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 80036a0:	4b1b      	ldr	r3, [pc, #108]	; (8003710 <MX_RTC_Init+0xb4>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80036a6:	481a      	ldr	r0, [pc, #104]	; (8003710 <MX_RTC_Init+0xb4>)
 80036a8:	f008 fea8 	bl	800c3fc <HAL_RTC_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 80036b2:	f000 fa6f 	bl	8003b94 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 80036b6:	2300      	movs	r3, #0
 80036b8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 80036ba:	2300      	movs	r3, #0
 80036bc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	2200      	movs	r2, #0
 80036ce:	4619      	mov	r1, r3
 80036d0:	480f      	ldr	r0, [pc, #60]	; (8003710 <MX_RTC_Init+0xb4>)
 80036d2:	f008 ff0b 	bl	800c4ec <HAL_RTC_SetTime>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 80036dc:	f000 fa5a 	bl	8003b94 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80036e0:	2301      	movs	r3, #1
 80036e2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80036e4:	2301      	movs	r3, #1
 80036e6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 1;
 80036e8:	2301      	movs	r3, #1
 80036ea:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0;
 80036ec:	2300      	movs	r3, #0
 80036ee:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80036f0:	463b      	mov	r3, r7
 80036f2:	2200      	movs	r2, #0
 80036f4:	4619      	mov	r1, r3
 80036f6:	4806      	ldr	r0, [pc, #24]	; (8003710 <MX_RTC_Init+0xb4>)
 80036f8:	f008 fff2 	bl	800c6e0 <HAL_RTC_SetDate>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <MX_RTC_Init+0xaa>
  {
    Error_Handler();
 8003702:	f000 fa47 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	3718      	adds	r7, #24
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
 800370e:	bf00      	nop
 8003710:	240014f0 	.word	0x240014f0
 8003714:	58004000 	.word	0x58004000

08003718 <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 800371c:	4b0d      	ldr	r3, [pc, #52]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 800371e:	4a0e      	ldr	r2, [pc, #56]	; (8003758 <MX_SDMMC1_SD_Init+0x40>)
 8003720:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003722:	4b0c      	ldr	r3, [pc, #48]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 8003724:	2200      	movs	r2, #0
 8003726:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003728:	4b0a      	ldr	r3, [pc, #40]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 800372e:	4b09      	ldr	r3, [pc, #36]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 8003730:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003734:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8003736:	4b07      	ldr	r3, [pc, #28]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 8003738:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800373c:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 800373e:	4b05      	ldr	r3, [pc, #20]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 8003740:	2200      	movs	r2, #0
 8003742:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003744:	4b03      	ldr	r3, [pc, #12]	; (8003754 <MX_SDMMC1_SD_Init+0x3c>)
 8003746:	2201      	movs	r2, #1
 8003748:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 800374a:	bf00      	nop
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	24001470 	.word	0x24001470
 8003758:	52007000 	.word	0x52007000

0800375c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003760:	4b27      	ldr	r3, [pc, #156]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003762:	4a28      	ldr	r2, [pc, #160]	; (8003804 <MX_SPI1_Init+0xa8>)
 8003764:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003766:	4b26      	ldr	r3, [pc, #152]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003768:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800376c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800376e:	4b24      	ldr	r3, [pc, #144]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003770:	2200      	movs	r2, #0
 8003772:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003776:	2207      	movs	r2, #7
 8003778:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800377a:	4b21      	ldr	r3, [pc, #132]	; (8003800 <MX_SPI1_Init+0xa4>)
 800377c:	2200      	movs	r2, #0
 800377e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003782:	2200      	movs	r2, #0
 8003784:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003786:	4b1e      	ldr	r3, [pc, #120]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003788:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800378c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800378e:	4b1c      	ldr	r3, [pc, #112]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003790:	f04f 42e0 	mov.w	r2, #1879048192	; 0x70000000
 8003794:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003796:	4b1a      	ldr	r3, [pc, #104]	; (8003800 <MX_SPI1_Init+0xa4>)
 8003798:	2200      	movs	r2, #0
 800379a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800379c:	4b18      	ldr	r3, [pc, #96]	; (8003800 <MX_SPI1_Init+0xa4>)
 800379e:	2200      	movs	r2, #0
 80037a0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037a2:	4b17      	ldr	r3, [pc, #92]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 80037a8:	4b15      	ldr	r3, [pc, #84]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80037ae:	4b14      	ldr	r3, [pc, #80]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80037b4:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80037b6:	4b12      	ldr	r3, [pc, #72]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80037bc:	4b10      	ldr	r3, [pc, #64]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037be:	2200      	movs	r2, #0
 80037c0:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037c2:	4b0f      	ldr	r3, [pc, #60]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80037c8:	4b0d      	ldr	r3, [pc, #52]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80037ce:	4b0c      	ldr	r3, [pc, #48]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037d0:	2200      	movs	r2, #0
 80037d2:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80037d4:	4b0a      	ldr	r3, [pc, #40]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037d6:	2200      	movs	r2, #0
 80037d8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80037da:	4b09      	ldr	r3, [pc, #36]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037dc:	2200      	movs	r2, #0
 80037de:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80037e0:	4b07      	ldr	r3, [pc, #28]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80037e6:	4b06      	ldr	r3, [pc, #24]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037ec:	4804      	ldr	r0, [pc, #16]	; (8003800 <MX_SPI1_Init+0xa4>)
 80037ee:	f00b f89f 	bl	800e930 <HAL_SPI_Init>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d001      	beq.n	80037fc <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 80037f8:	f000 f9cc 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80037fc:	bf00      	nop
 80037fe:	bd80      	pop	{r7, pc}
 8003800:	24001640 	.word	0x24001640
 8003804:	40013000 	.word	0x40013000

08003808 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 800380c:	4b22      	ldr	r3, [pc, #136]	; (8003898 <MX_UART8_Init+0x90>)
 800380e:	4a23      	ldr	r2, [pc, #140]	; (800389c <MX_UART8_Init+0x94>)
 8003810:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8003812:	4b21      	ldr	r3, [pc, #132]	; (8003898 <MX_UART8_Init+0x90>)
 8003814:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003818:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800381a:	4b1f      	ldr	r3, [pc, #124]	; (8003898 <MX_UART8_Init+0x90>)
 800381c:	2200      	movs	r2, #0
 800381e:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8003820:	4b1d      	ldr	r3, [pc, #116]	; (8003898 <MX_UART8_Init+0x90>)
 8003822:	2200      	movs	r2, #0
 8003824:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <MX_UART8_Init+0x90>)
 8003828:	2200      	movs	r2, #0
 800382a:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 800382c:	4b1a      	ldr	r3, [pc, #104]	; (8003898 <MX_UART8_Init+0x90>)
 800382e:	220c      	movs	r2, #12
 8003830:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003832:	4b19      	ldr	r3, [pc, #100]	; (8003898 <MX_UART8_Init+0x90>)
 8003834:	2200      	movs	r2, #0
 8003836:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8003838:	4b17      	ldr	r3, [pc, #92]	; (8003898 <MX_UART8_Init+0x90>)
 800383a:	2200      	movs	r2, #0
 800383c:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800383e:	4b16      	ldr	r3, [pc, #88]	; (8003898 <MX_UART8_Init+0x90>)
 8003840:	2200      	movs	r2, #0
 8003842:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003844:	4b14      	ldr	r3, [pc, #80]	; (8003898 <MX_UART8_Init+0x90>)
 8003846:	2200      	movs	r2, #0
 8003848:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800384a:	4b13      	ldr	r3, [pc, #76]	; (8003898 <MX_UART8_Init+0x90>)
 800384c:	2200      	movs	r2, #0
 800384e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8003850:	4811      	ldr	r0, [pc, #68]	; (8003898 <MX_UART8_Init+0x90>)
 8003852:	f00c f91e 	bl	800fa92 <HAL_UART_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 800385c:	f000 f99a 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003860:	2100      	movs	r1, #0
 8003862:	480d      	ldr	r0, [pc, #52]	; (8003898 <MX_UART8_Init+0x90>)
 8003864:	f00d faae 	bl	8010dc4 <HAL_UARTEx_SetTxFifoThreshold>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 800386e:	f000 f991 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003872:	2100      	movs	r1, #0
 8003874:	4808      	ldr	r0, [pc, #32]	; (8003898 <MX_UART8_Init+0x90>)
 8003876:	f00d fae3 	bl	8010e40 <HAL_UARTEx_SetRxFifoThreshold>
 800387a:	4603      	mov	r3, r0
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 8003880:	f000 f988 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 8003884:	4804      	ldr	r0, [pc, #16]	; (8003898 <MX_UART8_Init+0x90>)
 8003886:	f00d fa64 	bl	8010d52 <HAL_UARTEx_DisableFifoMode>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 8003890:	f000 f980 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8003894:	bf00      	nop
 8003896:	bd80      	pop	{r7, pc}
 8003898:	240015b4 	.word	0x240015b4
 800389c:	40007c00 	.word	0x40007c00

080038a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80038a4:	4b22      	ldr	r3, [pc, #136]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038a6:	4a23      	ldr	r2, [pc, #140]	; (8003934 <MX_USART3_UART_Init+0x94>)
 80038a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80038aa:	4b21      	ldr	r3, [pc, #132]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038ac:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80038b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80038b2:	4b1f      	ldr	r3, [pc, #124]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80038b8:	4b1d      	ldr	r3, [pc, #116]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80038be:	4b1c      	ldr	r3, [pc, #112]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80038c4:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038c6:	220c      	movs	r2, #12
 80038c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038ca:	4b19      	ldr	r3, [pc, #100]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80038d0:	4b17      	ldr	r3, [pc, #92]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038d6:	4b16      	ldr	r3, [pc, #88]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038d8:	2200      	movs	r2, #0
 80038da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80038dc:	4b14      	ldr	r3, [pc, #80]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038de:	2200      	movs	r2, #0
 80038e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038e2:	4b13      	ldr	r3, [pc, #76]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80038e8:	4811      	ldr	r0, [pc, #68]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038ea:	f00c f8d2 	bl	800fa92 <HAL_UART_Init>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d001      	beq.n	80038f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80038f4:	f000 f94e 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80038f8:	2100      	movs	r1, #0
 80038fa:	480d      	ldr	r0, [pc, #52]	; (8003930 <MX_USART3_UART_Init+0x90>)
 80038fc:	f00d fa62 	bl	8010dc4 <HAL_UARTEx_SetTxFifoThreshold>
 8003900:	4603      	mov	r3, r0
 8003902:	2b00      	cmp	r3, #0
 8003904:	d001      	beq.n	800390a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8003906:	f000 f945 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800390a:	2100      	movs	r1, #0
 800390c:	4808      	ldr	r0, [pc, #32]	; (8003930 <MX_USART3_UART_Init+0x90>)
 800390e:	f00d fa97 	bl	8010e40 <HAL_UARTEx_SetRxFifoThreshold>
 8003912:	4603      	mov	r3, r0
 8003914:	2b00      	cmp	r3, #0
 8003916:	d001      	beq.n	800391c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8003918:	f000 f93c 	bl	8003b94 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800391c:	4804      	ldr	r0, [pc, #16]	; (8003930 <MX_USART3_UART_Init+0x90>)
 800391e:	f00d fa18 	bl	8010d52 <HAL_UARTEx_DisableFifoMode>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8003928:	f000 f934 	bl	8003b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	bd80      	pop	{r7, pc}
 8003930:	240013c4 	.word	0x240013c4
 8003934:	40004800 	.word	0x40004800

08003938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800393e:	4b0d      	ldr	r3, [pc, #52]	; (8003974 <MX_DMA_Init+0x3c>)
 8003940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003944:	4a0b      	ldr	r2, [pc, #44]	; (8003974 <MX_DMA_Init+0x3c>)
 8003946:	f043 0301 	orr.w	r3, r3, #1
 800394a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800394e:	4b09      	ldr	r3, [pc, #36]	; (8003974 <MX_DMA_Init+0x3c>)
 8003950:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003954:	f003 0301 	and.w	r3, r3, #1
 8003958:	607b      	str	r3, [r7, #4]
 800395a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800395c:	2200      	movs	r2, #0
 800395e:	2100      	movs	r1, #0
 8003960:	200c      	movs	r0, #12
 8003962:	f000 ff14 	bl	800478e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8003966:	200c      	movs	r0, #12
 8003968:	f000 ff2b 	bl	80047c2 <HAL_NVIC_EnableIRQ>

}
 800396c:	bf00      	nop
 800396e:	3708      	adds	r7, #8
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	58024400 	.word	0x58024400

08003978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08c      	sub	sp, #48	; 0x30
 800397c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800397e:	f107 031c 	add.w	r3, r7, #28
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
 8003986:	605a      	str	r2, [r3, #4]
 8003988:	609a      	str	r2, [r3, #8]
 800398a:	60da      	str	r2, [r3, #12]
 800398c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800398e:	4b6d      	ldr	r3, [pc, #436]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003994:	4a6b      	ldr	r2, [pc, #428]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003996:	f043 0310 	orr.w	r3, r3, #16
 800399a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800399e:	4b69      	ldr	r3, [pc, #420]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	61bb      	str	r3, [r7, #24]
 80039aa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ac:	4b65      	ldr	r3, [pc, #404]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	4a64      	ldr	r2, [pc, #400]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039b4:	f043 0304 	orr.w	r3, r3, #4
 80039b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039bc:	4b61      	ldr	r3, [pc, #388]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80039ca:	4b5e      	ldr	r3, [pc, #376]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d0:	4a5c      	ldr	r2, [pc, #368]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80039d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039da:	4b5a      	ldr	r3, [pc, #360]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039e4:	613b      	str	r3, [r7, #16]
 80039e6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80039e8:	4b56      	ldr	r3, [pc, #344]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ee:	4a55      	ldr	r2, [pc, #340]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039f0:	f043 0301 	orr.w	r3, r3, #1
 80039f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f8:	4b52      	ldr	r3, [pc, #328]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fe:	f003 0301 	and.w	r3, r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a06:	4b4f      	ldr	r3, [pc, #316]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a0c:	4a4d      	ldr	r2, [pc, #308]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a0e:	f043 0302 	orr.w	r3, r3, #2
 8003a12:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a16:	4b4b      	ldr	r3, [pc, #300]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	60bb      	str	r3, [r7, #8]
 8003a22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a24:	4b47      	ldr	r3, [pc, #284]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a2a:	4a46      	ldr	r2, [pc, #280]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a2c:	f043 0308 	orr.w	r3, r3, #8
 8003a30:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003a34:	4b43      	ldr	r3, [pc, #268]	; (8003b44 <MX_GPIO_Init+0x1cc>)
 8003a36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003a3a:	f003 0308 	and.w	r3, r3, #8
 8003a3e:	607b      	str	r3, [r7, #4]
 8003a40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8003a42:	2200      	movs	r2, #0
 8003a44:	210c      	movs	r1, #12
 8003a46:	4840      	ldr	r0, [pc, #256]	; (8003b48 <MX_GPIO_Init+0x1d0>)
 8003a48:	f004 fab2 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	2103      	movs	r1, #3
 8003a50:	483e      	ldr	r0, [pc, #248]	; (8003b4c <MX_GPIO_Init+0x1d4>)
 8003a52:	f004 faad 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003a56:	2200      	movs	r2, #0
 8003a58:	2101      	movs	r1, #1
 8003a5a:	483d      	ldr	r0, [pc, #244]	; (8003b50 <MX_GPIO_Init+0x1d8>)
 8003a5c:	f004 faa8 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8003a60:	2201      	movs	r2, #1
 8003a62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003a66:	483b      	ldr	r0, [pc, #236]	; (8003b54 <MX_GPIO_Init+0x1dc>)
 8003a68:	f004 faa2 	bl	8007fb0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 8003a6c:	230c      	movs	r3, #12
 8003a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a70:	2301      	movs	r3, #1
 8003a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a74:	2300      	movs	r3, #0
 8003a76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003a7c:	f107 031c 	add.w	r3, r7, #28
 8003a80:	4619      	mov	r1, r3
 8003a82:	4831      	ldr	r0, [pc, #196]	; (8003b48 <MX_GPIO_Init+0x1d0>)
 8003a84:	f004 f8cc 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a94:	2300      	movs	r3, #0
 8003a96:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a98:	f107 031c 	add.w	r3, r7, #28
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	482b      	ldr	r0, [pc, #172]	; (8003b4c <MX_GPIO_Init+0x1d4>)
 8003aa0:	f004 f8be 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 8003aa4:	2304      	movs	r3, #4
 8003aa6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003aa8:	4b2b      	ldr	r3, [pc, #172]	; (8003b58 <MX_GPIO_Init+0x1e0>)
 8003aaa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aac:	2300      	movs	r3, #0
 8003aae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003ab0:	f107 031c 	add.w	r3, r7, #28
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	4825      	ldr	r0, [pc, #148]	; (8003b4c <MX_GPIO_Init+0x1d4>)
 8003ab8:	f004 f8b2 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003abc:	2301      	movs	r3, #1
 8003abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ac0:	2301      	movs	r3, #1
 8003ac2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003acc:	f107 031c 	add.w	r3, r7, #28
 8003ad0:	4619      	mov	r1, r3
 8003ad2:	481f      	ldr	r0, [pc, #124]	; (8003b50 <MX_GPIO_Init+0x1d8>)
 8003ad4:	f004 f8a4 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 8003ad8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003adc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <MX_GPIO_Init+0x1e0>)
 8003ae0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 8003ae6:	f107 031c 	add.w	r3, r7, #28
 8003aea:	4619      	mov	r1, r3
 8003aec:	4816      	ldr	r0, [pc, #88]	; (8003b48 <MX_GPIO_Init+0x1d0>)
 8003aee:	f004 f897 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8003af2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003af8:	2301      	movs	r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003afc:	2300      	movs	r3, #0
 8003afe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8003b04:	f107 031c 	add.w	r3, r7, #28
 8003b08:	4619      	mov	r1, r3
 8003b0a:	4812      	ldr	r0, [pc, #72]	; (8003b54 <MX_GPIO_Init+0x1dc>)
 8003b0c:	f004 f888 	bl	8007c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8003b10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b16:	2300      	movs	r3, #0
 8003b18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8003b1e:	f107 031c 	add.w	r3, r7, #28
 8003b22:	4619      	mov	r1, r3
 8003b24:	4809      	ldr	r0, [pc, #36]	; (8003b4c <MX_GPIO_Init+0x1d4>)
 8003b26:	f004 f87b 	bl	8007c20 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	2100      	movs	r1, #0
 8003b2e:	2017      	movs	r0, #23
 8003b30:	f000 fe2d 	bl	800478e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003b34:	2017      	movs	r0, #23
 8003b36:	f000 fe44 	bl	80047c2 <HAL_NVIC_EnableIRQ>

}
 8003b3a:	bf00      	nop
 8003b3c:	3730      	adds	r7, #48	; 0x30
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	58024400 	.word	0x58024400
 8003b48:	58021000 	.word	0x58021000
 8003b4c:	58020000 	.word	0x58020000
 8003b50:	58020400 	.word	0x58020400
 8003b54:	58020c00 	.word	0x58020c00
 8003b58:	11110000 	.word	0x11110000

08003b5c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  end_flag = 0;
 8003b66:	4b04      	ldr	r3, [pc, #16]	; (8003b78 <HAL_GPIO_EXTI_Callback+0x1c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]

}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr
 8003b78:	24000008 	.word	0x24000008

08003b7c <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8003b80:	4b03      	ldr	r3, [pc, #12]	; (8003b90 <HAL_PWR_PVDCallback+0x14>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
}
 8003b86:	bf00      	nop
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8e:	4770      	bx	lr
 8003b90:	24000008 	.word	0x24000008

08003b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b98:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 8003b9a:	4802      	ldr	r0, [pc, #8]	; (8003ba4 <Error_Handler+0x10>)
 8003b9c:	f015 fd68 	bl	8019670 <puts>
 8003ba0:	e7fb      	b.n	8003b9a <Error_Handler+0x6>
 8003ba2:	bf00      	nop
 8003ba4:	0801ade0 	.word	0x0801ade0

08003ba8 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003bb0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bb4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8003bb8:	f003 0301 	and.w	r3, r3, #1
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d013      	beq.n	8003be8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8003bc0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bc4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8003bc8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d00b      	beq.n	8003be8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8003bd0:	e000      	b.n	8003bd4 <ITM_SendChar+0x2c>
    {
      __NOP();
 8003bd2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8003bd4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d0f9      	beq.n	8003bd2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8003bde:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8003be8:	687b      	ldr	r3, [r7, #4]
}
 8003bea:	4618      	mov	r0, r3
 8003bec:	370c      	adds	r7, #12
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr

08003bf6 <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b086      	sub	sp, #24
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	60f8      	str	r0, [r7, #12]
 8003bfe:	60b9      	str	r1, [r7, #8]
 8003c00:	607a      	str	r2, [r7, #4]
  int i=0;
 8003c02:	2300      	movs	r3, #0
 8003c04:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8003c06:	2300      	movs	r3, #0
 8003c08:	617b      	str	r3, [r7, #20]
 8003c0a:	e009      	b.n	8003c20 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8003c0c:	68bb      	ldr	r3, [r7, #8]
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	60ba      	str	r2, [r7, #8]
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7ff ffc7 	bl	8003ba8 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	697a      	ldr	r2, [r7, #20]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	429a      	cmp	r2, r3
 8003c26:	dbf1      	blt.n	8003c0c <_write+0x16>
  return len;
 8003c28:	687b      	ldr	r3, [r7, #4]
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3718      	adds	r7, #24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b084      	sub	sp, #16
 8003c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8003c3a:	f107 0308 	add.w	r3, r7, #8
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]
 8003c42:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c44:	4b13      	ldr	r3, [pc, #76]	; (8003c94 <HAL_MspInit+0x60>)
 8003c46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c4a:	4a12      	ldr	r2, [pc, #72]	; (8003c94 <HAL_MspInit+0x60>)
 8003c4c:	f043 0302 	orr.w	r3, r3, #2
 8003c50:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003c54:	4b0f      	ldr	r3, [pc, #60]	; (8003c94 <HAL_MspInit+0x60>)
 8003c56:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	607b      	str	r3, [r7, #4]
 8003c60:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 8003c62:	2200      	movs	r2, #0
 8003c64:	2100      	movs	r1, #0
 8003c66:	2001      	movs	r0, #1
 8003c68:	f000 fd91 	bl	800478e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8003c6c:	2001      	movs	r0, #1
 8003c6e:	f000 fda8 	bl	80047c2 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8003c72:	23c0      	movs	r3, #192	; 0xc0
 8003c74:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 8003c76:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8003c7a:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8003c7c:	f107 0308 	add.w	r3, r7, #8
 8003c80:	4618      	mov	r0, r3
 8003c82:	f005 fc1f 	bl	80094c4 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8003c86:	f005 fc97 	bl	80095b8 <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c8a:	bf00      	nop
 8003c8c:	3710      	adds	r7, #16
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
 8003c92:	bf00      	nop
 8003c94:	58024400 	.word	0x58024400

08003c98 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ca0:	f107 031c 	add.w	r3, r7, #28
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
 8003ca8:	605a      	str	r2, [r3, #4]
 8003caa:	609a      	str	r2, [r3, #8]
 8003cac:	60da      	str	r2, [r3, #12]
 8003cae:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a48      	ldr	r2, [pc, #288]	; (8003dd8 <HAL_FDCAN_MspInit+0x140>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d14e      	bne.n	8003d58 <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003cba:	4b48      	ldr	r3, [pc, #288]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	4a46      	ldr	r2, [pc, #280]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003cc2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003cc4:	4b45      	ldr	r3, [pc, #276]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d10e      	bne.n	8003cea <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003ccc:	4b44      	ldr	r3, [pc, #272]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cce:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003cd2:	4a43      	ldr	r2, [pc, #268]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cd8:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003cdc:	4b40      	ldr	r3, [pc, #256]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cde:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ce6:	61bb      	str	r3, [r7, #24]
 8003ce8:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cea:	4b3d      	ldr	r3, [pc, #244]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003cf0:	4a3b      	ldr	r2, [pc, #236]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cf2:	f043 0302 	orr.w	r3, r3, #2
 8003cf6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003cfa:	4b39      	ldr	r3, [pc, #228]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d00:	f003 0302 	and.w	r3, r3, #2
 8003d04:	617b      	str	r3, [r7, #20]
 8003d06:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003d08:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d0e:	2302      	movs	r3, #2
 8003d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d12:	2300      	movs	r3, #0
 8003d14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d16:	2303      	movs	r3, #3
 8003d18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8003d1a:	2309      	movs	r3, #9
 8003d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d1e:	f107 031c 	add.w	r3, r7, #28
 8003d22:	4619      	mov	r1, r3
 8003d24:	482f      	ldr	r0, [pc, #188]	; (8003de4 <HAL_FDCAN_MspInit+0x14c>)
 8003d26:	f003 ff7b 	bl	8007c20 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 8003d2a:	2040      	movs	r0, #64	; 0x40
 8003d2c:	f004 f98e 	bl	800804c <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 8003d30:	2080      	movs	r0, #128	; 0x80
 8003d32:	f004 f98b 	bl	800804c <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8003d36:	2200      	movs	r2, #0
 8003d38:	2100      	movs	r1, #0
 8003d3a:	2013      	movs	r0, #19
 8003d3c:	f000 fd27 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8003d40:	2013      	movs	r0, #19
 8003d42:	f000 fd3e 	bl	80047c2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8003d46:	2200      	movs	r2, #0
 8003d48:	2100      	movs	r1, #0
 8003d4a:	2015      	movs	r0, #21
 8003d4c:	f000 fd1f 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8003d50:	2015      	movs	r0, #21
 8003d52:	f000 fd36 	bl	80047c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 8003d56:	e03b      	b.n	8003dd0 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4a22      	ldr	r2, [pc, #136]	; (8003de8 <HAL_FDCAN_MspInit+0x150>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d136      	bne.n	8003dd0 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3301      	adds	r3, #1
 8003d68:	4a1c      	ldr	r2, [pc, #112]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003d6a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8003d6c:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_FDCAN_MspInit+0x144>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d10e      	bne.n	8003d92 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8003d74:	4b1a      	ldr	r3, [pc, #104]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003d76:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d7a:	4a19      	ldr	r2, [pc, #100]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d80:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8003d84:	4b16      	ldr	r3, [pc, #88]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003d86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8003d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d8e:	613b      	str	r3, [r7, #16]
 8003d90:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d92:	4b13      	ldr	r3, [pc, #76]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003d98:	4a11      	ldr	r2, [pc, #68]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003d9a:	f043 0302 	orr.w	r3, r3, #2
 8003d9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003da2:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <HAL_FDCAN_MspInit+0x148>)
 8003da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da8:	f003 0302 	and.w	r3, r3, #2
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003db0:	2360      	movs	r3, #96	; 0x60
 8003db2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db4:	2302      	movs	r3, #2
 8003db6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8003dc0:	2309      	movs	r3, #9
 8003dc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	f107 031c 	add.w	r3, r7, #28
 8003dc8:	4619      	mov	r1, r3
 8003dca:	4806      	ldr	r0, [pc, #24]	; (8003de4 <HAL_FDCAN_MspInit+0x14c>)
 8003dcc:	f003 ff28 	bl	8007c20 <HAL_GPIO_Init>
}
 8003dd0:	bf00      	nop
 8003dd2:	3730      	adds	r7, #48	; 0x30
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	4000a000 	.word	0x4000a000
 8003ddc:	24000b48 	.word	0x24000b48
 8003de0:	58024400 	.word	0x58024400
 8003de4:	58020400 	.word	0x58020400
 8003de8:	4000a400 	.word	0x4000a400

08003dec <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_RTC_MspInit+0x2c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d105      	bne.n	8003e0a <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8003dfe:	4b07      	ldr	r3, [pc, #28]	; (8003e1c <HAL_RTC_MspInit+0x30>)
 8003e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e02:	4a06      	ldr	r2, [pc, #24]	; (8003e1c <HAL_RTC_MspInit+0x30>)
 8003e04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e08:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8003e0a:	bf00      	nop
 8003e0c:	370c      	adds	r7, #12
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	58004000 	.word	0x58004000
 8003e1c:	58024400 	.word	0x58024400

08003e20 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b08a      	sub	sp, #40	; 0x28
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e28:	f107 0314 	add.w	r3, r7, #20
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
 8003e30:	605a      	str	r2, [r3, #4]
 8003e32:	609a      	str	r2, [r3, #8]
 8003e34:	60da      	str	r2, [r3, #12]
 8003e36:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	4a2e      	ldr	r2, [pc, #184]	; (8003ef8 <HAL_SD_MspInit+0xd8>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d155      	bne.n	8003eee <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8003e42:	4b2e      	ldr	r3, [pc, #184]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e44:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e48:	4a2c      	ldr	r2, [pc, #176]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e4e:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 8003e52:	4b2a      	ldr	r3, [pc, #168]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e54:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e5c:	613b      	str	r3, [r7, #16]
 8003e5e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e60:	4b26      	ldr	r3, [pc, #152]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e66:	4a25      	ldr	r2, [pc, #148]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e68:	f043 0304 	orr.w	r3, r3, #4
 8003e6c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e70:	4b22      	ldr	r3, [pc, #136]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7e:	4b1f      	ldr	r3, [pc, #124]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e84:	4a1d      	ldr	r2, [pc, #116]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e86:	f043 0308 	orr.w	r3, r3, #8
 8003e8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <HAL_SD_MspInit+0xdc>)
 8003e90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003e94:	f003 0308 	and.w	r3, r3, #8
 8003e98:	60bb      	str	r3, [r7, #8]
 8003e9a:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8003e9c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8003ea0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ea2:	2302      	movs	r3, #2
 8003ea4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003eae:	230c      	movs	r3, #12
 8003eb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003eb2:	f107 0314 	add.w	r3, r7, #20
 8003eb6:	4619      	mov	r1, r3
 8003eb8:	4811      	ldr	r0, [pc, #68]	; (8003f00 <HAL_SD_MspInit+0xe0>)
 8003eba:	f003 feb1 	bl	8007c20 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec2:	2302      	movs	r3, #2
 8003ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8003ece:	230c      	movs	r3, #12
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ed2:	f107 0314 	add.w	r3, r7, #20
 8003ed6:	4619      	mov	r1, r3
 8003ed8:	480a      	ldr	r0, [pc, #40]	; (8003f04 <HAL_SD_MspInit+0xe4>)
 8003eda:	f003 fea1 	bl	8007c20 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8003ede:	2200      	movs	r2, #0
 8003ee0:	2100      	movs	r1, #0
 8003ee2:	2031      	movs	r0, #49	; 0x31
 8003ee4:	f000 fc53 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 8003ee8:	2031      	movs	r0, #49	; 0x31
 8003eea:	f000 fc6a 	bl	80047c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8003eee:	bf00      	nop
 8003ef0:	3728      	adds	r7, #40	; 0x28
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	bd80      	pop	{r7, pc}
 8003ef6:	bf00      	nop
 8003ef8:	52007000 	.word	0x52007000
 8003efc:	58024400 	.word	0x58024400
 8003f00:	58020800 	.word	0x58020800
 8003f04:	58020c00 	.word	0x58020c00

08003f08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b08a      	sub	sp, #40	; 0x28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	605a      	str	r2, [r3, #4]
 8003f1a:	609a      	str	r2, [r3, #8]
 8003f1c:	60da      	str	r2, [r3, #12]
 8003f1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a1a      	ldr	r2, [pc, #104]	; (8003f90 <HAL_SPI_MspInit+0x88>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d12d      	bne.n	8003f86 <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f2a:	4b1a      	ldr	r3, [pc, #104]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f2c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f30:	4a18      	ldr	r2, [pc, #96]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f32:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f36:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003f3a:	4b16      	ldr	r3, [pc, #88]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f3c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003f40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f44:	613b      	str	r3, [r7, #16]
 8003f46:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f48:	4b12      	ldr	r3, [pc, #72]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f4e:	4a11      	ldr	r2, [pc, #68]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f50:	f043 0301 	orr.w	r3, r3, #1
 8003f54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003f58:	4b0e      	ldr	r3, [pc, #56]	; (8003f94 <HAL_SPI_MspInit+0x8c>)
 8003f5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	60fb      	str	r3, [r7, #12]
 8003f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003f66:	23e0      	movs	r3, #224	; 0xe0
 8003f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f72:	2303      	movs	r3, #3
 8003f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003f76:	2305      	movs	r3, #5
 8003f78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f7a:	f107 0314 	add.w	r3, r7, #20
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4805      	ldr	r0, [pc, #20]	; (8003f98 <HAL_SPI_MspInit+0x90>)
 8003f82:	f003 fe4d 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003f86:	bf00      	nop
 8003f88:	3728      	adds	r7, #40	; 0x28
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	40013000 	.word	0x40013000
 8003f94:	58024400 	.word	0x58024400
 8003f98:	58020000 	.word	0x58020000

08003f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08c      	sub	sp, #48	; 0x30
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fa4:	f107 031c 	add.w	r3, r7, #28
 8003fa8:	2200      	movs	r2, #0
 8003faa:	601a      	str	r2, [r3, #0]
 8003fac:	605a      	str	r2, [r3, #4]
 8003fae:	609a      	str	r2, [r3, #8]
 8003fb0:	60da      	str	r2, [r3, #12]
 8003fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a4b      	ldr	r2, [pc, #300]	; (80040e8 <HAL_UART_MspInit+0x14c>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d12e      	bne.n	800401c <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003fbe:	4b4b      	ldr	r3, [pc, #300]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fc4:	4a49      	ldr	r2, [pc, #292]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fc6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fca:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003fce:	4b47      	ldr	r3, [pc, #284]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003fd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fd8:	61bb      	str	r3, [r7, #24]
 8003fda:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003fdc:	4b43      	ldr	r3, [pc, #268]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003fe2:	4a42      	ldr	r2, [pc, #264]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fe4:	f043 0310 	orr.w	r3, r3, #16
 8003fe8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003fec:	4b3f      	ldr	r3, [pc, #252]	; (80040ec <HAL_UART_MspInit+0x150>)
 8003fee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003ff2:	f003 0310 	and.w	r3, r3, #16
 8003ff6:	617b      	str	r3, [r7, #20]
 8003ff8:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffe:	2302      	movs	r3, #2
 8004000:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004002:	2300      	movs	r3, #0
 8004004:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004006:	2300      	movs	r3, #0
 8004008:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800400a:	2308      	movs	r3, #8
 800400c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800400e:	f107 031c 	add.w	r3, r7, #28
 8004012:	4619      	mov	r1, r3
 8004014:	4836      	ldr	r0, [pc, #216]	; (80040f0 <HAL_UART_MspInit+0x154>)
 8004016:	f003 fe03 	bl	8007c20 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800401a:	e061      	b.n	80040e0 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a34      	ldr	r2, [pc, #208]	; (80040f4 <HAL_UART_MspInit+0x158>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d15c      	bne.n	80040e0 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 8004026:	4b31      	ldr	r3, [pc, #196]	; (80040ec <HAL_UART_MspInit+0x150>)
 8004028:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <HAL_UART_MspInit+0x150>)
 800402e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004032:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004036:	4b2d      	ldr	r3, [pc, #180]	; (80040ec <HAL_UART_MspInit+0x150>)
 8004038:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800403c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004040:	613b      	str	r3, [r7, #16]
 8004042:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004044:	4b29      	ldr	r3, [pc, #164]	; (80040ec <HAL_UART_MspInit+0x150>)
 8004046:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800404a:	4a28      	ldr	r2, [pc, #160]	; (80040ec <HAL_UART_MspInit+0x150>)
 800404c:	f043 0308 	orr.w	r3, r3, #8
 8004050:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004054:	4b25      	ldr	r3, [pc, #148]	; (80040ec <HAL_UART_MspInit+0x150>)
 8004056:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004062:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004066:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004068:	2302      	movs	r3, #2
 800406a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406c:	2300      	movs	r3, #0
 800406e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004070:	2300      	movs	r3, #0
 8004072:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004074:	2307      	movs	r3, #7
 8004076:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004078:	f107 031c 	add.w	r3, r7, #28
 800407c:	4619      	mov	r1, r3
 800407e:	481e      	ldr	r0, [pc, #120]	; (80040f8 <HAL_UART_MspInit+0x15c>)
 8004080:	f003 fdce 	bl	8007c20 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004084:	4b1d      	ldr	r3, [pc, #116]	; (80040fc <HAL_UART_MspInit+0x160>)
 8004086:	4a1e      	ldr	r2, [pc, #120]	; (8004100 <HAL_UART_MspInit+0x164>)
 8004088:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800408a:	4b1c      	ldr	r3, [pc, #112]	; (80040fc <HAL_UART_MspInit+0x160>)
 800408c:	222d      	movs	r2, #45	; 0x2d
 800408e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004090:	4b1a      	ldr	r3, [pc, #104]	; (80040fc <HAL_UART_MspInit+0x160>)
 8004092:	2200      	movs	r2, #0
 8004094:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004096:	4b19      	ldr	r3, [pc, #100]	; (80040fc <HAL_UART_MspInit+0x160>)
 8004098:	2200      	movs	r2, #0
 800409a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800409c:	4b17      	ldr	r3, [pc, #92]	; (80040fc <HAL_UART_MspInit+0x160>)
 800409e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80040a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040a4:	4b15      	ldr	r3, [pc, #84]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80040aa:	4b14      	ldr	r3, [pc, #80]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040ac:	2200      	movs	r2, #0
 80040ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80040b0:	4b12      	ldr	r3, [pc, #72]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80040b6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80040b8:	4b10      	ldr	r3, [pc, #64]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80040be:	4b0f      	ldr	r3, [pc, #60]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80040c4:	480d      	ldr	r0, [pc, #52]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040c6:	f000 fb97 	bl	80047f8 <HAL_DMA_Init>
 80040ca:	4603      	mov	r3, r0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <HAL_UART_MspInit+0x138>
      Error_Handler();
 80040d0:	f7ff fd60 	bl	8003b94 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a09      	ldr	r2, [pc, #36]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040d8:	679a      	str	r2, [r3, #120]	; 0x78
 80040da:	4a08      	ldr	r2, [pc, #32]	; (80040fc <HAL_UART_MspInit+0x160>)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6393      	str	r3, [r2, #56]	; 0x38
}
 80040e0:	bf00      	nop
 80040e2:	3730      	adds	r7, #48	; 0x30
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40007c00 	.word	0x40007c00
 80040ec:	58024400 	.word	0x58024400
 80040f0:	58021000 	.word	0x58021000
 80040f4:	40004800 	.word	0x40004800
 80040f8:	58020c00 	.word	0x58020c00
 80040fc:	2400134c 	.word	0x2400134c
 8004100:	40020028 	.word	0x40020028

08004104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8004108:	f006 fa98 	bl	800a63c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800410c:	e7fe      	b.n	800410c <NMI_Handler+0x8>

0800410e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800410e:	b480      	push	{r7}
 8004110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004112:	e7fe      	b.n	8004112 <HardFault_Handler+0x4>

08004114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004114:	b480      	push	{r7}
 8004116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004118:	e7fe      	b.n	8004118 <MemManage_Handler+0x4>

0800411a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800411a:	b480      	push	{r7}
 800411c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800411e:	e7fe      	b.n	800411e <BusFault_Handler+0x4>

08004120 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004120:	b480      	push	{r7}
 8004122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004124:	e7fe      	b.n	8004124 <UsageFault_Handler+0x4>

08004126 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004126:	b480      	push	{r7}
 8004128:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800412a:	bf00      	nop
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr

08004142 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004142:	b480      	push	{r7}
 8004144:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004146:	bf00      	nop
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004154:	f000 f9f2 	bl	800453c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}

0800415c <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 800415c:	b580      	push	{r7, lr}
 800415e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 8004160:	f005 fa84 	bl	800966c <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 8004164:	bf00      	nop
 8004166:	bd80      	pop	{r7, pc}

08004168 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 800416c:	4802      	ldr	r0, [pc, #8]	; (8004178 <DMA1_Stream1_IRQHandler+0x10>)
 800416e:	f001 f909 	bl	8005384 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004172:	bf00      	nop
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	2400134c 	.word	0x2400134c

0800417c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004180:	4802      	ldr	r0, [pc, #8]	; (800418c <FDCAN1_IT0_IRQHandler+0x10>)
 8004182:	f003 f8bd 	bl	8007300 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004186:	bf00      	nop
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	24001514 	.word	0x24001514

08004190 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004194:	4802      	ldr	r0, [pc, #8]	; (80041a0 <FDCAN1_IT1_IRQHandler+0x10>)
 8004196:	f003 f8b3 	bl	8007300 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800419a:	bf00      	nop
 800419c:	bd80      	pop	{r7, pc}
 800419e:	bf00      	nop
 80041a0:	24001514 	.word	0x24001514

080041a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80041a8:	f44f 7000 	mov.w	r0, #512	; 0x200
 80041ac:	f003 ff34 	bl	8008018 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80041b0:	bf00      	nop
 80041b2:	bd80      	pop	{r7, pc}

080041b4 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 80041b8:	4802      	ldr	r0, [pc, #8]	; (80041c4 <SDMMC1_IRQHandler+0x10>)
 80041ba:	f009 f9c1 	bl	800d540 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 80041be:	bf00      	nop
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	24001470 	.word	0x24001470

080041c8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80041cc:	4802      	ldr	r0, [pc, #8]	; (80041d8 <OTG_FS_IRQHandler+0x10>)
 80041ce:	f004 f8b8 	bl	8008342 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80041d2:	bf00      	nop
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	240020a4 	.word	0x240020a4

080041dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b086      	sub	sp, #24
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e00a      	b.n	8004204 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80041ee:	f3af 8000 	nop.w
 80041f2:	4601      	mov	r1, r0
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	1c5a      	adds	r2, r3, #1
 80041f8:	60ba      	str	r2, [r7, #8]
 80041fa:	b2ca      	uxtb	r2, r1
 80041fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	3301      	adds	r3, #1
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697a      	ldr	r2, [r7, #20]
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	429a      	cmp	r2, r3
 800420a:	dbf0      	blt.n	80041ee <_read+0x12>
	}

return len;
 800420c:	687b      	ldr	r3, [r7, #4]
}
 800420e:	4618      	mov	r0, r3
 8004210:	3718      	adds	r7, #24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}

08004216 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004216:	b480      	push	{r7}
 8004218:	b083      	sub	sp, #12
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
	return -1;
 800421e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004222:	4618      	mov	r0, r3
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr

0800422e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800422e:	b480      	push	{r7}
 8004230:	b083      	sub	sp, #12
 8004232:	af00      	add	r7, sp, #0
 8004234:	6078      	str	r0, [r7, #4]
 8004236:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800423e:	605a      	str	r2, [r3, #4]
	return 0;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <_isatty>:

int _isatty(int file)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
	return 1;
 8004256:	2301      	movs	r3, #1
}
 8004258:	4618      	mov	r0, r3
 800425a:	370c      	adds	r7, #12
 800425c:	46bd      	mov	sp, r7
 800425e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004262:	4770      	bx	lr

08004264 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004264:	b480      	push	{r7}
 8004266:	b085      	sub	sp, #20
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	60b9      	str	r1, [r7, #8]
 800426e:	607a      	str	r2, [r7, #4]
	return 0;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3714      	adds	r7, #20
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004288:	4a14      	ldr	r2, [pc, #80]	; (80042dc <_sbrk+0x5c>)
 800428a:	4b15      	ldr	r3, [pc, #84]	; (80042e0 <_sbrk+0x60>)
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <_sbrk+0x64>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d102      	bne.n	80042a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800429c:	4b11      	ldr	r3, [pc, #68]	; (80042e4 <_sbrk+0x64>)
 800429e:	4a12      	ldr	r2, [pc, #72]	; (80042e8 <_sbrk+0x68>)
 80042a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042a2:	4b10      	ldr	r3, [pc, #64]	; (80042e4 <_sbrk+0x64>)
 80042a4:	681a      	ldr	r2, [r3, #0]
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	693a      	ldr	r2, [r7, #16]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d207      	bcs.n	80042c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80042b0:	f015 f874 	bl	801939c <__errno>
 80042b4:	4602      	mov	r2, r0
 80042b6:	230c      	movs	r3, #12
 80042b8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80042ba:	f04f 33ff 	mov.w	r3, #4294967295
 80042be:	e009      	b.n	80042d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80042c0:	4b08      	ldr	r3, [pc, #32]	; (80042e4 <_sbrk+0x64>)
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80042c6:	4b07      	ldr	r3, [pc, #28]	; (80042e4 <_sbrk+0x64>)
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	4413      	add	r3, r2
 80042ce:	4a05      	ldr	r2, [pc, #20]	; (80042e4 <_sbrk+0x64>)
 80042d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80042d2:	68fb      	ldr	r3, [r7, #12]
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	3718      	adds	r7, #24
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}
 80042dc:	24080000 	.word	0x24080000
 80042e0:	00000400 	.word	0x00000400
 80042e4:	24000b4c 	.word	0x24000b4c
 80042e8:	240024b0 	.word	0x240024b0

080042ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80042ec:	b480      	push	{r7}
 80042ee:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80042f0:	4b39      	ldr	r3, [pc, #228]	; (80043d8 <SystemInit+0xec>)
 80042f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f6:	4a38      	ldr	r2, [pc, #224]	; (80043d8 <SystemInit+0xec>)
 80042f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80042fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004300:	4b36      	ldr	r3, [pc, #216]	; (80043dc <SystemInit+0xf0>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 030f 	and.w	r3, r3, #15
 8004308:	2b06      	cmp	r3, #6
 800430a:	d807      	bhi.n	800431c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800430c:	4b33      	ldr	r3, [pc, #204]	; (80043dc <SystemInit+0xf0>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	4a31      	ldr	r2, [pc, #196]	; (80043dc <SystemInit+0xf0>)
 8004316:	f043 0307 	orr.w	r3, r3, #7
 800431a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800431c:	4b30      	ldr	r3, [pc, #192]	; (80043e0 <SystemInit+0xf4>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a2f      	ldr	r2, [pc, #188]	; (80043e0 <SystemInit+0xf4>)
 8004322:	f043 0301 	orr.w	r3, r3, #1
 8004326:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004328:	4b2d      	ldr	r3, [pc, #180]	; (80043e0 <SystemInit+0xf4>)
 800432a:	2200      	movs	r2, #0
 800432c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800432e:	4b2c      	ldr	r3, [pc, #176]	; (80043e0 <SystemInit+0xf4>)
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	492b      	ldr	r1, [pc, #172]	; (80043e0 <SystemInit+0xf4>)
 8004334:	4b2b      	ldr	r3, [pc, #172]	; (80043e4 <SystemInit+0xf8>)
 8004336:	4013      	ands	r3, r2
 8004338:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800433a:	4b28      	ldr	r3, [pc, #160]	; (80043dc <SystemInit+0xf0>)
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 030f 	and.w	r3, r3, #15
 8004342:	2b07      	cmp	r3, #7
 8004344:	d907      	bls.n	8004356 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004346:	4b25      	ldr	r3, [pc, #148]	; (80043dc <SystemInit+0xf0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f023 030f 	bic.w	r3, r3, #15
 800434e:	4a23      	ldr	r2, [pc, #140]	; (80043dc <SystemInit+0xf0>)
 8004350:	f043 0307 	orr.w	r3, r3, #7
 8004354:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004356:	4b22      	ldr	r3, [pc, #136]	; (80043e0 <SystemInit+0xf4>)
 8004358:	2200      	movs	r2, #0
 800435a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800435c:	4b20      	ldr	r3, [pc, #128]	; (80043e0 <SystemInit+0xf4>)
 800435e:	2200      	movs	r2, #0
 8004360:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004362:	4b1f      	ldr	r3, [pc, #124]	; (80043e0 <SystemInit+0xf4>)
 8004364:	2200      	movs	r2, #0
 8004366:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004368:	4b1d      	ldr	r3, [pc, #116]	; (80043e0 <SystemInit+0xf4>)
 800436a:	4a1f      	ldr	r2, [pc, #124]	; (80043e8 <SystemInit+0xfc>)
 800436c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800436e:	4b1c      	ldr	r3, [pc, #112]	; (80043e0 <SystemInit+0xf4>)
 8004370:	4a1e      	ldr	r2, [pc, #120]	; (80043ec <SystemInit+0x100>)
 8004372:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004374:	4b1a      	ldr	r3, [pc, #104]	; (80043e0 <SystemInit+0xf4>)
 8004376:	4a1e      	ldr	r2, [pc, #120]	; (80043f0 <SystemInit+0x104>)
 8004378:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800437a:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <SystemInit+0xf4>)
 800437c:	2200      	movs	r2, #0
 800437e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004380:	4b17      	ldr	r3, [pc, #92]	; (80043e0 <SystemInit+0xf4>)
 8004382:	4a1b      	ldr	r2, [pc, #108]	; (80043f0 <SystemInit+0x104>)
 8004384:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004386:	4b16      	ldr	r3, [pc, #88]	; (80043e0 <SystemInit+0xf4>)
 8004388:	2200      	movs	r2, #0
 800438a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800438c:	4b14      	ldr	r3, [pc, #80]	; (80043e0 <SystemInit+0xf4>)
 800438e:	4a18      	ldr	r2, [pc, #96]	; (80043f0 <SystemInit+0x104>)
 8004390:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004392:	4b13      	ldr	r3, [pc, #76]	; (80043e0 <SystemInit+0xf4>)
 8004394:	2200      	movs	r2, #0
 8004396:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004398:	4b11      	ldr	r3, [pc, #68]	; (80043e0 <SystemInit+0xf4>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a10      	ldr	r2, [pc, #64]	; (80043e0 <SystemInit+0xf4>)
 800439e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043a2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80043a4:	4b0e      	ldr	r3, [pc, #56]	; (80043e0 <SystemInit+0xf4>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80043aa:	4b12      	ldr	r3, [pc, #72]	; (80043f4 <SystemInit+0x108>)
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	4b12      	ldr	r3, [pc, #72]	; (80043f8 <SystemInit+0x10c>)
 80043b0:	4013      	ands	r3, r2
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b6:	d202      	bcs.n	80043be <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80043b8:	4b10      	ldr	r3, [pc, #64]	; (80043fc <SystemInit+0x110>)
 80043ba:	2201      	movs	r2, #1
 80043bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80043be:	4b10      	ldr	r3, [pc, #64]	; (8004400 <SystemInit+0x114>)
 80043c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80043c4:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80043c6:	4b04      	ldr	r3, [pc, #16]	; (80043d8 <SystemInit+0xec>)
 80043c8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80043cc:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 80043ce:	bf00      	nop
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	e000ed00 	.word	0xe000ed00
 80043dc:	52002000 	.word	0x52002000
 80043e0:	58024400 	.word	0x58024400
 80043e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80043e8:	02020200 	.word	0x02020200
 80043ec:	01ff0000 	.word	0x01ff0000
 80043f0:	01010280 	.word	0x01010280
 80043f4:	5c001000 	.word	0x5c001000
 80043f8:	ffff0000 	.word	0xffff0000
 80043fc:	51008108 	.word	0x51008108
 8004400:	52004000 	.word	0x52004000

08004404 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004404:	f8df d034 	ldr.w	sp, [pc, #52]	; 800443c <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004408:	f7ff ff70 	bl	80042ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800440c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800440e:	e003      	b.n	8004418 <LoopCopyDataInit>

08004410 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004410:	4b0b      	ldr	r3, [pc, #44]	; (8004440 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004412:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004414:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004416:	3104      	adds	r1, #4

08004418 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004418:	480a      	ldr	r0, [pc, #40]	; (8004444 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 800441a:	4b0b      	ldr	r3, [pc, #44]	; (8004448 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 800441c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800441e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004420:	d3f6      	bcc.n	8004410 <CopyDataInit>
  ldr  r2, =_sbss
 8004422:	4a0a      	ldr	r2, [pc, #40]	; (800444c <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004424:	e002      	b.n	800442c <LoopFillZerobss>

08004426 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004426:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004428:	f842 3b04 	str.w	r3, [r2], #4

0800442c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800442c:	4b08      	ldr	r3, [pc, #32]	; (8004450 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800442e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004430:	d3f9      	bcc.n	8004426 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004432:	f014 ffb9 	bl	80193a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004436:	f7fd fd49 	bl	8001ecc <main>
  bx  lr    
 800443a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800443c:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004440:	0801b074 	.word	0x0801b074
  ldr  r0, =_sdata
 8004444:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004448:	240001dc 	.word	0x240001dc
  ldr  r2, =_sbss
 800444c:	240001e0 	.word	0x240001e0
  ldr  r3, = _ebss
 8004450:	240024b0 	.word	0x240024b0

08004454 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004454:	e7fe      	b.n	8004454 <ADC3_IRQHandler>
	...

08004458 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b082      	sub	sp, #8
 800445c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800445e:	2003      	movs	r0, #3
 8004460:	f000 f98a 	bl	8004778 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004464:	f005 ff1c 	bl	800a2a0 <HAL_RCC_GetSysClockFreq>
 8004468:	4601      	mov	r1, r0
 800446a:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <HAL_Init+0x68>)
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	f003 030f 	and.w	r3, r3, #15
 8004474:	4a13      	ldr	r2, [pc, #76]	; (80044c4 <HAL_Init+0x6c>)
 8004476:	5cd3      	ldrb	r3, [r2, r3]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	fa21 f303 	lsr.w	r3, r1, r3
 8004480:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004482:	4b0f      	ldr	r3, [pc, #60]	; (80044c0 <HAL_Init+0x68>)
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	f003 030f 	and.w	r3, r3, #15
 800448a:	4a0e      	ldr	r2, [pc, #56]	; (80044c4 <HAL_Init+0x6c>)
 800448c:	5cd3      	ldrb	r3, [r2, r3]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	fa22 f303 	lsr.w	r3, r2, r3
 8004498:	4a0b      	ldr	r2, [pc, #44]	; (80044c8 <HAL_Init+0x70>)
 800449a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800449c:	4a0b      	ldr	r2, [pc, #44]	; (80044cc <HAL_Init+0x74>)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80044a2:	2000      	movs	r0, #0
 80044a4:	f000 f814 	bl	80044d0 <HAL_InitTick>
 80044a8:	4603      	mov	r3, r0
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d001      	beq.n	80044b2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e002      	b.n	80044b8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80044b2:	f7ff fbbf 	bl	8003c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80044b6:	2300      	movs	r3, #0
}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3708      	adds	r7, #8
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}
 80044c0:	58024400 	.word	0x58024400
 80044c4:	0801aed4 	.word	0x0801aed4
 80044c8:	24000014 	.word	0x24000014
 80044cc:	24000010 	.word	0x24000010

080044d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b082      	sub	sp, #8
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80044d8:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_InitTick+0x60>)
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d101      	bne.n	80044e4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e021      	b.n	8004528 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80044e4:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_InitTick+0x64>)
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	4b11      	ldr	r3, [pc, #68]	; (8004530 <HAL_InitTick+0x60>)
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	4619      	mov	r1, r3
 80044ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80044f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80044f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80044fa:	4618      	mov	r0, r3
 80044fc:	f000 f96f 	bl	80047de <HAL_SYSTICK_Config>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d001      	beq.n	800450a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e00e      	b.n	8004528 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b0f      	cmp	r3, #15
 800450e:	d80a      	bhi.n	8004526 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004510:	2200      	movs	r2, #0
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	f04f 30ff 	mov.w	r0, #4294967295
 8004518:	f000 f939 	bl	800478e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800451c:	4a06      	ldr	r2, [pc, #24]	; (8004538 <HAL_InitTick+0x68>)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004522:	2300      	movs	r3, #0
 8004524:	e000      	b.n	8004528 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
}
 8004528:	4618      	mov	r0, r3
 800452a:	3708      	adds	r7, #8
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}
 8004530:	2400001c 	.word	0x2400001c
 8004534:	24000010 	.word	0x24000010
 8004538:	24000018 	.word	0x24000018

0800453c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004540:	4b06      	ldr	r3, [pc, #24]	; (800455c <HAL_IncTick+0x20>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	461a      	mov	r2, r3
 8004546:	4b06      	ldr	r3, [pc, #24]	; (8004560 <HAL_IncTick+0x24>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4413      	add	r3, r2
 800454c:	4a04      	ldr	r2, [pc, #16]	; (8004560 <HAL_IncTick+0x24>)
 800454e:	6013      	str	r3, [r2, #0]
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	2400001c 	.word	0x2400001c
 8004560:	24001768 	.word	0x24001768

08004564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return uwTick;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_GetTick+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	24001768 	.word	0x24001768

0800457c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004584:	f7ff ffee 	bl	8004564 <HAL_GetTick>
 8004588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d005      	beq.n	80045a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004596:	4b09      	ldr	r3, [pc, #36]	; (80045bc <HAL_Delay+0x40>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	4413      	add	r3, r2
 80045a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80045a2:	bf00      	nop
 80045a4:	f7ff ffde 	bl	8004564 <HAL_GetTick>
 80045a8:	4602      	mov	r2, r0
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	68fa      	ldr	r2, [r7, #12]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d8f7      	bhi.n	80045a4 <HAL_Delay+0x28>
  {
  }
}
 80045b4:	bf00      	nop
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	2400001c 	.word	0x2400001c

080045c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80045c4:	4b03      	ldr	r3, [pc, #12]	; (80045d4 <HAL_GetREVID+0x14>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	0c1b      	lsrs	r3, r3, #16
}
 80045ca:	4618      	mov	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	5c001000 	.word	0x5c001000

080045d8 <__NVIC_SetPriorityGrouping>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b085      	sub	sp, #20
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f003 0307 	and.w	r3, r3, #7
 80045e6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80045e8:	4b0b      	ldr	r3, [pc, #44]	; (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 80045ea:	68db      	ldr	r3, [r3, #12]
 80045ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80045ee:	68ba      	ldr	r2, [r7, #8]
 80045f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80045f4:	4013      	ands	r3, r2
 80045f6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004600:	4b06      	ldr	r3, [pc, #24]	; (800461c <__NVIC_SetPriorityGrouping+0x44>)
 8004602:	4313      	orrs	r3, r2
 8004604:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004606:	4a04      	ldr	r2, [pc, #16]	; (8004618 <__NVIC_SetPriorityGrouping+0x40>)
 8004608:	68bb      	ldr	r3, [r7, #8]
 800460a:	60d3      	str	r3, [r2, #12]
}
 800460c:	bf00      	nop
 800460e:	3714      	adds	r7, #20
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000ed00 	.word	0xe000ed00
 800461c:	05fa0000 	.word	0x05fa0000

08004620 <__NVIC_GetPriorityGrouping>:
{
 8004620:	b480      	push	{r7}
 8004622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004624:	4b04      	ldr	r3, [pc, #16]	; (8004638 <__NVIC_GetPriorityGrouping+0x18>)
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	0a1b      	lsrs	r3, r3, #8
 800462a:	f003 0307 	and.w	r3, r3, #7
}
 800462e:	4618      	mov	r0, r3
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr
 8004638:	e000ed00 	.word	0xe000ed00

0800463c <__NVIC_EnableIRQ>:
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	4603      	mov	r3, r0
 8004644:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800464a:	2b00      	cmp	r3, #0
 800464c:	db0b      	blt.n	8004666 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800464e:	88fb      	ldrh	r3, [r7, #6]
 8004650:	f003 021f 	and.w	r2, r3, #31
 8004654:	4907      	ldr	r1, [pc, #28]	; (8004674 <__NVIC_EnableIRQ+0x38>)
 8004656:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800465a:	095b      	lsrs	r3, r3, #5
 800465c:	2001      	movs	r0, #1
 800465e:	fa00 f202 	lsl.w	r2, r0, r2
 8004662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004666:	bf00      	nop
 8004668:	370c      	adds	r7, #12
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	e000e100 	.word	0xe000e100

08004678 <__NVIC_SetPriority>:
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	4603      	mov	r3, r0
 8004680:	6039      	str	r1, [r7, #0]
 8004682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004688:	2b00      	cmp	r3, #0
 800468a:	db0a      	blt.n	80046a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	b2da      	uxtb	r2, r3
 8004690:	490c      	ldr	r1, [pc, #48]	; (80046c4 <__NVIC_SetPriority+0x4c>)
 8004692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004696:	0112      	lsls	r2, r2, #4
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	440b      	add	r3, r1
 800469c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80046a0:	e00a      	b.n	80046b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	b2da      	uxtb	r2, r3
 80046a6:	4908      	ldr	r1, [pc, #32]	; (80046c8 <__NVIC_SetPriority+0x50>)
 80046a8:	88fb      	ldrh	r3, [r7, #6]
 80046aa:	f003 030f 	and.w	r3, r3, #15
 80046ae:	3b04      	subs	r3, #4
 80046b0:	0112      	lsls	r2, r2, #4
 80046b2:	b2d2      	uxtb	r2, r2
 80046b4:	440b      	add	r3, r1
 80046b6:	761a      	strb	r2, [r3, #24]
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	e000e100 	.word	0xe000e100
 80046c8:	e000ed00 	.word	0xe000ed00

080046cc <NVIC_EncodePriority>:
{
 80046cc:	b480      	push	{r7}
 80046ce:	b089      	sub	sp, #36	; 0x24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f003 0307 	and.w	r3, r3, #7
 80046de:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	f1c3 0307 	rsb	r3, r3, #7
 80046e6:	2b04      	cmp	r3, #4
 80046e8:	bf28      	it	cs
 80046ea:	2304      	movcs	r3, #4
 80046ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	3304      	adds	r3, #4
 80046f2:	2b06      	cmp	r3, #6
 80046f4:	d902      	bls.n	80046fc <NVIC_EncodePriority+0x30>
 80046f6:	69fb      	ldr	r3, [r7, #28]
 80046f8:	3b03      	subs	r3, #3
 80046fa:	e000      	b.n	80046fe <NVIC_EncodePriority+0x32>
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004700:	f04f 32ff 	mov.w	r2, #4294967295
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43da      	mvns	r2, r3
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	401a      	ands	r2, r3
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004714:	f04f 31ff 	mov.w	r1, #4294967295
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	fa01 f303 	lsl.w	r3, r1, r3
 800471e:	43d9      	mvns	r1, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004724:	4313      	orrs	r3, r2
}
 8004726:	4618      	mov	r0, r3
 8004728:	3724      	adds	r7, #36	; 0x24
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
	...

08004734 <SysTick_Config>:
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	3b01      	subs	r3, #1
 8004740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004744:	d301      	bcc.n	800474a <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004746:	2301      	movs	r3, #1
 8004748:	e00f      	b.n	800476a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800474a:	4a0a      	ldr	r2, [pc, #40]	; (8004774 <SysTick_Config+0x40>)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	3b01      	subs	r3, #1
 8004750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004752:	210f      	movs	r1, #15
 8004754:	f04f 30ff 	mov.w	r0, #4294967295
 8004758:	f7ff ff8e 	bl	8004678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800475c:	4b05      	ldr	r3, [pc, #20]	; (8004774 <SysTick_Config+0x40>)
 800475e:	2200      	movs	r2, #0
 8004760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004762:	4b04      	ldr	r3, [pc, #16]	; (8004774 <SysTick_Config+0x40>)
 8004764:	2207      	movs	r2, #7
 8004766:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3708      	adds	r7, #8
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	e000e010 	.word	0xe000e010

08004778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b082      	sub	sp, #8
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f7ff ff29 	bl	80045d8 <__NVIC_SetPriorityGrouping>
}
 8004786:	bf00      	nop
 8004788:	3708      	adds	r7, #8
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}

0800478e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800478e:	b580      	push	{r7, lr}
 8004790:	b086      	sub	sp, #24
 8004792:	af00      	add	r7, sp, #0
 8004794:	4603      	mov	r3, r0
 8004796:	60b9      	str	r1, [r7, #8]
 8004798:	607a      	str	r2, [r7, #4]
 800479a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800479c:	f7ff ff40 	bl	8004620 <__NVIC_GetPriorityGrouping>
 80047a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	68b9      	ldr	r1, [r7, #8]
 80047a6:	6978      	ldr	r0, [r7, #20]
 80047a8:	f7ff ff90 	bl	80046cc <NVIC_EncodePriority>
 80047ac:	4602      	mov	r2, r0
 80047ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047b2:	4611      	mov	r1, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	f7ff ff5f 	bl	8004678 <__NVIC_SetPriority>
}
 80047ba:	bf00      	nop
 80047bc:	3718      	adds	r7, #24
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b082      	sub	sp, #8
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	4603      	mov	r3, r0
 80047ca:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80047cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80047d0:	4618      	mov	r0, r3
 80047d2:	f7ff ff33 	bl	800463c <__NVIC_EnableIRQ>
}
 80047d6:	bf00      	nop
 80047d8:	3708      	adds	r7, #8
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}

080047de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80047de:	b580      	push	{r7, lr}
 80047e0:	b082      	sub	sp, #8
 80047e2:	af00      	add	r7, sp, #0
 80047e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff ffa4 	bl	8004734 <SysTick_Config>
 80047ec:	4603      	mov	r3, r0
}
 80047ee:	4618      	mov	r0, r3
 80047f0:	3708      	adds	r7, #8
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bd80      	pop	{r7, pc}
	...

080047f8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b086      	sub	sp, #24
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004800:	f7ff feb0 	bl	8004564 <HAL_GetTick>
 8004804:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800480c:	2301      	movs	r3, #1
 800480e:	e316      	b.n	8004e3e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a66      	ldr	r2, [pc, #408]	; (80049b0 <HAL_DMA_Init+0x1b8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d04a      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a65      	ldr	r2, [pc, #404]	; (80049b4 <HAL_DMA_Init+0x1bc>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d045      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <HAL_DMA_Init+0x1c0>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d040      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a62      	ldr	r2, [pc, #392]	; (80049bc <HAL_DMA_Init+0x1c4>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d03b      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	4a60      	ldr	r2, [pc, #384]	; (80049c0 <HAL_DMA_Init+0x1c8>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d036      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	4a5f      	ldr	r2, [pc, #380]	; (80049c4 <HAL_DMA_Init+0x1cc>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d031      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a5d      	ldr	r2, [pc, #372]	; (80049c8 <HAL_DMA_Init+0x1d0>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d02c      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a5c      	ldr	r2, [pc, #368]	; (80049cc <HAL_DMA_Init+0x1d4>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d027      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	4a5a      	ldr	r2, [pc, #360]	; (80049d0 <HAL_DMA_Init+0x1d8>)
 8004866:	4293      	cmp	r3, r2
 8004868:	d022      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a59      	ldr	r2, [pc, #356]	; (80049d4 <HAL_DMA_Init+0x1dc>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d01d      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a57      	ldr	r2, [pc, #348]	; (80049d8 <HAL_DMA_Init+0x1e0>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d018      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a56      	ldr	r2, [pc, #344]	; (80049dc <HAL_DMA_Init+0x1e4>)
 8004884:	4293      	cmp	r3, r2
 8004886:	d013      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <HAL_DMA_Init+0x1e8>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a53      	ldr	r2, [pc, #332]	; (80049e4 <HAL_DMA_Init+0x1ec>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a51      	ldr	r2, [pc, #324]	; (80049e8 <HAL_DMA_Init+0x1f0>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d004      	beq.n	80048b0 <HAL_DMA_Init+0xb8>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a50      	ldr	r2, [pc, #320]	; (80049ec <HAL_DMA_Init+0x1f4>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d101      	bne.n	80048b4 <HAL_DMA_Init+0xbc>
 80048b0:	2301      	movs	r3, #1
 80048b2:	e000      	b.n	80048b6 <HAL_DMA_Init+0xbe>
 80048b4:	2300      	movs	r3, #0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	f000 813b 	beq.w	8004b32 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	4a37      	ldr	r2, [pc, #220]	; (80049b0 <HAL_DMA_Init+0x1b8>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d04a      	beq.n	800496c <HAL_DMA_Init+0x174>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a36      	ldr	r2, [pc, #216]	; (80049b4 <HAL_DMA_Init+0x1bc>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d045      	beq.n	800496c <HAL_DMA_Init+0x174>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	4a34      	ldr	r2, [pc, #208]	; (80049b8 <HAL_DMA_Init+0x1c0>)
 80048e6:	4293      	cmp	r3, r2
 80048e8:	d040      	beq.n	800496c <HAL_DMA_Init+0x174>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a33      	ldr	r2, [pc, #204]	; (80049bc <HAL_DMA_Init+0x1c4>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d03b      	beq.n	800496c <HAL_DMA_Init+0x174>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	4a31      	ldr	r2, [pc, #196]	; (80049c0 <HAL_DMA_Init+0x1c8>)
 80048fa:	4293      	cmp	r3, r2
 80048fc:	d036      	beq.n	800496c <HAL_DMA_Init+0x174>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	4a30      	ldr	r2, [pc, #192]	; (80049c4 <HAL_DMA_Init+0x1cc>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d031      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a2e      	ldr	r2, [pc, #184]	; (80049c8 <HAL_DMA_Init+0x1d0>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02c      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	4a2d      	ldr	r2, [pc, #180]	; (80049cc <HAL_DMA_Init+0x1d4>)
 8004918:	4293      	cmp	r3, r2
 800491a:	d027      	beq.n	800496c <HAL_DMA_Init+0x174>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2b      	ldr	r2, [pc, #172]	; (80049d0 <HAL_DMA_Init+0x1d8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d022      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a2a      	ldr	r2, [pc, #168]	; (80049d4 <HAL_DMA_Init+0x1dc>)
 800492c:	4293      	cmp	r3, r2
 800492e:	d01d      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	4a28      	ldr	r2, [pc, #160]	; (80049d8 <HAL_DMA_Init+0x1e0>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d018      	beq.n	800496c <HAL_DMA_Init+0x174>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a27      	ldr	r2, [pc, #156]	; (80049dc <HAL_DMA_Init+0x1e4>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	4a25      	ldr	r2, [pc, #148]	; (80049e0 <HAL_DMA_Init+0x1e8>)
 800494a:	4293      	cmp	r3, r2
 800494c:	d00e      	beq.n	800496c <HAL_DMA_Init+0x174>
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	4a24      	ldr	r2, [pc, #144]	; (80049e4 <HAL_DMA_Init+0x1ec>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d009      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a22      	ldr	r2, [pc, #136]	; (80049e8 <HAL_DMA_Init+0x1f0>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d004      	beq.n	800496c <HAL_DMA_Init+0x174>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a21      	ldr	r2, [pc, #132]	; (80049ec <HAL_DMA_Init+0x1f4>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <HAL_DMA_Init+0x186>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681a      	ldr	r2, [r3, #0]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f022 0201 	bic.w	r2, r2, #1
 800497a:	601a      	str	r2, [r3, #0]
 800497c:	e007      	b.n	800498e <HAL_DMA_Init+0x196>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f022 0201 	bic.w	r2, r2, #1
 800498c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800498e:	e02f      	b.n	80049f0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004990:	f7ff fde8 	bl	8004564 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b05      	cmp	r3, #5
 800499c:	d928      	bls.n	80049f0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2203      	movs	r2, #3
 80049a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	e246      	b.n	8004e3e <HAL_DMA_Init+0x646>
 80049b0:	40020010 	.word	0x40020010
 80049b4:	40020028 	.word	0x40020028
 80049b8:	40020040 	.word	0x40020040
 80049bc:	40020058 	.word	0x40020058
 80049c0:	40020070 	.word	0x40020070
 80049c4:	40020088 	.word	0x40020088
 80049c8:	400200a0 	.word	0x400200a0
 80049cc:	400200b8 	.word	0x400200b8
 80049d0:	40020410 	.word	0x40020410
 80049d4:	40020428 	.word	0x40020428
 80049d8:	40020440 	.word	0x40020440
 80049dc:	40020458 	.word	0x40020458
 80049e0:	40020470 	.word	0x40020470
 80049e4:	40020488 	.word	0x40020488
 80049e8:	400204a0 	.word	0x400204a0
 80049ec:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f003 0301 	and.w	r3, r3, #1
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1c8      	bne.n	8004990 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004a06:	697a      	ldr	r2, [r7, #20]
 8004a08:	4b83      	ldr	r3, [pc, #524]	; (8004c18 <HAL_DMA_Init+0x420>)
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8004a16:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004a22:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	699b      	ldr	r3, [r3, #24]
 8004a28:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004a2e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8004a36:	697a      	ldr	r2, [r7, #20]
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a40:	2b04      	cmp	r3, #4
 8004a42:	d107      	bne.n	8004a54 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4313      	orrs	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004a54:	4b71      	ldr	r3, [pc, #452]	; (8004c1c <HAL_DMA_Init+0x424>)
 8004a56:	681a      	ldr	r2, [r3, #0]
 8004a58:	4b71      	ldr	r3, [pc, #452]	; (8004c20 <HAL_DMA_Init+0x428>)
 8004a5a:	4013      	ands	r3, r2
 8004a5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a60:	d328      	bcc.n	8004ab4 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	2b28      	cmp	r3, #40	; 0x28
 8004a68:	d903      	bls.n	8004a72 <HAL_DMA_Init+0x27a>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a70:	d917      	bls.n	8004aa2 <HAL_DMA_Init+0x2aa>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	2b3e      	cmp	r3, #62	; 0x3e
 8004a78:	d903      	bls.n	8004a82 <HAL_DMA_Init+0x28a>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	2b42      	cmp	r3, #66	; 0x42
 8004a80:	d90f      	bls.n	8004aa2 <HAL_DMA_Init+0x2aa>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	2b46      	cmp	r3, #70	; 0x46
 8004a88:	d903      	bls.n	8004a92 <HAL_DMA_Init+0x29a>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	2b48      	cmp	r3, #72	; 0x48
 8004a90:	d907      	bls.n	8004aa2 <HAL_DMA_Init+0x2aa>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	2b4e      	cmp	r3, #78	; 0x4e
 8004a98:	d905      	bls.n	8004aa6 <HAL_DMA_Init+0x2ae>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	2b52      	cmp	r3, #82	; 0x52
 8004aa0:	d801      	bhi.n	8004aa6 <HAL_DMA_Init+0x2ae>
 8004aa2:	2301      	movs	r3, #1
 8004aa4:	e000      	b.n	8004aa8 <HAL_DMA_Init+0x2b0>
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ab2:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	697a      	ldr	r2, [r7, #20]
 8004aba:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	f023 0307 	bic.w	r3, r3, #7
 8004aca:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad0:	697a      	ldr	r2, [r7, #20]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d117      	bne.n	8004b0e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ae2:	697a      	ldr	r2, [r7, #20]
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d00e      	beq.n	8004b0e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004af0:	6878      	ldr	r0, [r7, #4]
 8004af2:	f001 fdcf 	bl	8006694 <DMA_CheckFifoParam>
 8004af6:	4603      	mov	r3, r0
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d008      	beq.n	8004b0e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2240      	movs	r2, #64	; 0x40
 8004b00:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2201      	movs	r2, #1
 8004b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e197      	b.n	8004e3e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	697a      	ldr	r2, [r7, #20]
 8004b14:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f001 fd0a 	bl	8006530 <DMA_CalcBaseAndBitshift>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b24:	f003 031f 	and.w	r3, r3, #31
 8004b28:	223f      	movs	r2, #63	; 0x3f
 8004b2a:	409a      	lsls	r2, r3
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]
 8004b30:	e0cd      	b.n	8004cce <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3b      	ldr	r2, [pc, #236]	; (8004c24 <HAL_DMA_Init+0x42c>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d022      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a39      	ldr	r2, [pc, #228]	; (8004c28 <HAL_DMA_Init+0x430>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01d      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a38      	ldr	r2, [pc, #224]	; (8004c2c <HAL_DMA_Init+0x434>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d018      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a36      	ldr	r2, [pc, #216]	; (8004c30 <HAL_DMA_Init+0x438>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d013      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a35      	ldr	r2, [pc, #212]	; (8004c34 <HAL_DMA_Init+0x43c>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d00e      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a33      	ldr	r2, [pc, #204]	; (8004c38 <HAL_DMA_Init+0x440>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d009      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a32      	ldr	r2, [pc, #200]	; (8004c3c <HAL_DMA_Init+0x444>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d004      	beq.n	8004b82 <HAL_DMA_Init+0x38a>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a30      	ldr	r2, [pc, #192]	; (8004c40 <HAL_DMA_Init+0x448>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d101      	bne.n	8004b86 <HAL_DMA_Init+0x38e>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e000      	b.n	8004b88 <HAL_DMA_Init+0x390>
 8004b86:	2300      	movs	r3, #0
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	f000 8097 	beq.w	8004cbc <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a24      	ldr	r2, [pc, #144]	; (8004c24 <HAL_DMA_Init+0x42c>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d021      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a22      	ldr	r2, [pc, #136]	; (8004c28 <HAL_DMA_Init+0x430>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d01c      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a21      	ldr	r2, [pc, #132]	; (8004c2c <HAL_DMA_Init+0x434>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d017      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a1f      	ldr	r2, [pc, #124]	; (8004c30 <HAL_DMA_Init+0x438>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d012      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a1e      	ldr	r2, [pc, #120]	; (8004c34 <HAL_DMA_Init+0x43c>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d00d      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a1c      	ldr	r2, [pc, #112]	; (8004c38 <HAL_DMA_Init+0x440>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d008      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a1b      	ldr	r2, [pc, #108]	; (8004c3c <HAL_DMA_Init+0x444>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d003      	beq.n	8004bdc <HAL_DMA_Init+0x3e4>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a19      	ldr	r2, [pc, #100]	; (8004c40 <HAL_DMA_Init+0x448>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2202      	movs	r2, #2
 8004bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4b12      	ldr	r3, [pc, #72]	; (8004c44 <HAL_DMA_Init+0x44c>)
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	689b      	ldr	r3, [r3, #8]
 8004c02:	2b40      	cmp	r3, #64	; 0x40
 8004c04:	d020      	beq.n	8004c48 <HAL_DMA_Init+0x450>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d102      	bne.n	8004c14 <HAL_DMA_Init+0x41c>
 8004c0e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c12:	e01a      	b.n	8004c4a <HAL_DMA_Init+0x452>
 8004c14:	2300      	movs	r3, #0
 8004c16:	e018      	b.n	8004c4a <HAL_DMA_Init+0x452>
 8004c18:	fe10803f 	.word	0xfe10803f
 8004c1c:	5c001000 	.word	0x5c001000
 8004c20:	ffff0000 	.word	0xffff0000
 8004c24:	58025408 	.word	0x58025408
 8004c28:	5802541c 	.word	0x5802541c
 8004c2c:	58025430 	.word	0x58025430
 8004c30:	58025444 	.word	0x58025444
 8004c34:	58025458 	.word	0x58025458
 8004c38:	5802546c 	.word	0x5802546c
 8004c3c:	58025480 	.word	0x58025480
 8004c40:	58025494 	.word	0x58025494
 8004c44:	fffe000f 	.word	0xfffe000f
 8004c48:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	68d2      	ldr	r2, [r2, #12]
 8004c4e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c50:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004c58:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004c60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004c68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004c70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6a1b      	ldr	r3, [r3, #32]
 8004c76:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004c78:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4b6e      	ldr	r3, [pc, #440]	; (8004e48 <HAL_DMA_Init+0x650>)
 8004c90:	4413      	add	r3, r2
 8004c92:	4a6e      	ldr	r2, [pc, #440]	; (8004e4c <HAL_DMA_Init+0x654>)
 8004c94:	fba2 2303 	umull	r2, r3, r2, r3
 8004c98:	091b      	lsrs	r3, r3, #4
 8004c9a:	009a      	lsls	r2, r3, #2
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 fc45 	bl	8006530 <DMA_CalcBaseAndBitshift>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cae:	f003 031f 	and.w	r3, r3, #31
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	409a      	lsls	r2, r3
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	605a      	str	r2, [r3, #4]
 8004cba:	e008      	b.n	8004cce <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2240      	movs	r2, #64	; 0x40
 8004cc0:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2203      	movs	r2, #3
 8004cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e0b7      	b.n	8004e3e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a5f      	ldr	r2, [pc, #380]	; (8004e50 <HAL_DMA_Init+0x658>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d072      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a5d      	ldr	r2, [pc, #372]	; (8004e54 <HAL_DMA_Init+0x65c>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d06d      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a5c      	ldr	r2, [pc, #368]	; (8004e58 <HAL_DMA_Init+0x660>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d068      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a5a      	ldr	r2, [pc, #360]	; (8004e5c <HAL_DMA_Init+0x664>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d063      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a59      	ldr	r2, [pc, #356]	; (8004e60 <HAL_DMA_Init+0x668>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d05e      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a57      	ldr	r2, [pc, #348]	; (8004e64 <HAL_DMA_Init+0x66c>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d059      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a56      	ldr	r2, [pc, #344]	; (8004e68 <HAL_DMA_Init+0x670>)
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d054      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a54      	ldr	r2, [pc, #336]	; (8004e6c <HAL_DMA_Init+0x674>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d04f      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a53      	ldr	r2, [pc, #332]	; (8004e70 <HAL_DMA_Init+0x678>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d04a      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a51      	ldr	r2, [pc, #324]	; (8004e74 <HAL_DMA_Init+0x67c>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d045      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a50      	ldr	r2, [pc, #320]	; (8004e78 <HAL_DMA_Init+0x680>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d040      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a4e      	ldr	r2, [pc, #312]	; (8004e7c <HAL_DMA_Init+0x684>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d03b      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a4d      	ldr	r2, [pc, #308]	; (8004e80 <HAL_DMA_Init+0x688>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d036      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a4b      	ldr	r2, [pc, #300]	; (8004e84 <HAL_DMA_Init+0x68c>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d031      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a4a      	ldr	r2, [pc, #296]	; (8004e88 <HAL_DMA_Init+0x690>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d02c      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a48      	ldr	r2, [pc, #288]	; (8004e8c <HAL_DMA_Init+0x694>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d027      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a47      	ldr	r2, [pc, #284]	; (8004e90 <HAL_DMA_Init+0x698>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d022      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a45      	ldr	r2, [pc, #276]	; (8004e94 <HAL_DMA_Init+0x69c>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d01d      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a44      	ldr	r2, [pc, #272]	; (8004e98 <HAL_DMA_Init+0x6a0>)
 8004d88:	4293      	cmp	r3, r2
 8004d8a:	d018      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a42      	ldr	r2, [pc, #264]	; (8004e9c <HAL_DMA_Init+0x6a4>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d013      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a41      	ldr	r2, [pc, #260]	; (8004ea0 <HAL_DMA_Init+0x6a8>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d00e      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a3f      	ldr	r2, [pc, #252]	; (8004ea4 <HAL_DMA_Init+0x6ac>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d009      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a3e      	ldr	r2, [pc, #248]	; (8004ea8 <HAL_DMA_Init+0x6b0>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d004      	beq.n	8004dbe <HAL_DMA_Init+0x5c6>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a3c      	ldr	r2, [pc, #240]	; (8004eac <HAL_DMA_Init+0x6b4>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d101      	bne.n	8004dc2 <HAL_DMA_Init+0x5ca>
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e000      	b.n	8004dc4 <HAL_DMA_Init+0x5cc>
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d032      	beq.n	8004e2e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f001 fcdf 	bl	800678c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	2b80      	cmp	r3, #128	; 0x80
 8004dd4:	d102      	bne.n	8004ddc <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2200      	movs	r2, #0
 8004dda:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	685a      	ldr	r2, [r3, #4]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004de4:	b2d2      	uxtb	r2, r2
 8004de6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004df0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d010      	beq.n	8004e1c <HAL_DMA_Init+0x624>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2b08      	cmp	r3, #8
 8004e00:	d80c      	bhi.n	8004e1c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 fd5c 	bl	80068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e14:	687a      	ldr	r2, [r7, #4]
 8004e16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004e18:	605a      	str	r2, [r3, #4]
 8004e1a:	e008      	b.n	8004e2e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2200      	movs	r2, #0
 8004e26:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2200      	movs	r2, #0
 8004e32:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	a7fdabf8 	.word	0xa7fdabf8
 8004e4c:	cccccccd 	.word	0xcccccccd
 8004e50:	40020010 	.word	0x40020010
 8004e54:	40020028 	.word	0x40020028
 8004e58:	40020040 	.word	0x40020040
 8004e5c:	40020058 	.word	0x40020058
 8004e60:	40020070 	.word	0x40020070
 8004e64:	40020088 	.word	0x40020088
 8004e68:	400200a0 	.word	0x400200a0
 8004e6c:	400200b8 	.word	0x400200b8
 8004e70:	40020410 	.word	0x40020410
 8004e74:	40020428 	.word	0x40020428
 8004e78:	40020440 	.word	0x40020440
 8004e7c:	40020458 	.word	0x40020458
 8004e80:	40020470 	.word	0x40020470
 8004e84:	40020488 	.word	0x40020488
 8004e88:	400204a0 	.word	0x400204a0
 8004e8c:	400204b8 	.word	0x400204b8
 8004e90:	58025408 	.word	0x58025408
 8004e94:	5802541c 	.word	0x5802541c
 8004e98:	58025430 	.word	0x58025430
 8004e9c:	58025444 	.word	0x58025444
 8004ea0:	58025458 	.word	0x58025458
 8004ea4:	5802546c 	.word	0x5802546c
 8004ea8:	58025480 	.word	0x58025480
 8004eac:	58025494 	.word	0x58025494

08004eb0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b086      	sub	sp, #24
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e226      	b.n	800531a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d101      	bne.n	8004eda <HAL_DMA_Start_IT+0x2a>
 8004ed6:	2302      	movs	r3, #2
 8004ed8:	e21f      	b.n	800531a <HAL_DMA_Start_IT+0x46a>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ee8:	b2db      	uxtb	r3, r3
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	f040 820a 	bne.w	8005304 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2200      	movs	r2, #0
 8004efc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a68      	ldr	r2, [pc, #416]	; (80050a4 <HAL_DMA_Start_IT+0x1f4>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d04a      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a66      	ldr	r2, [pc, #408]	; (80050a8 <HAL_DMA_Start_IT+0x1f8>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d045      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a65      	ldr	r2, [pc, #404]	; (80050ac <HAL_DMA_Start_IT+0x1fc>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d040      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a63      	ldr	r2, [pc, #396]	; (80050b0 <HAL_DMA_Start_IT+0x200>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a62      	ldr	r2, [pc, #392]	; (80050b4 <HAL_DMA_Start_IT+0x204>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a60      	ldr	r2, [pc, #384]	; (80050b8 <HAL_DMA_Start_IT+0x208>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d031      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a5f      	ldr	r2, [pc, #380]	; (80050bc <HAL_DMA_Start_IT+0x20c>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d02c      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5d      	ldr	r2, [pc, #372]	; (80050c0 <HAL_DMA_Start_IT+0x210>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d027      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a5c      	ldr	r2, [pc, #368]	; (80050c4 <HAL_DMA_Start_IT+0x214>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a5a      	ldr	r2, [pc, #360]	; (80050c8 <HAL_DMA_Start_IT+0x218>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a59      	ldr	r2, [pc, #356]	; (80050cc <HAL_DMA_Start_IT+0x21c>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a57      	ldr	r2, [pc, #348]	; (80050d0 <HAL_DMA_Start_IT+0x220>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a56      	ldr	r2, [pc, #344]	; (80050d4 <HAL_DMA_Start_IT+0x224>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a54      	ldr	r2, [pc, #336]	; (80050d8 <HAL_DMA_Start_IT+0x228>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a53      	ldr	r2, [pc, #332]	; (80050dc <HAL_DMA_Start_IT+0x22c>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_DMA_Start_IT+0xee>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a51      	ldr	r2, [pc, #324]	; (80050e0 <HAL_DMA_Start_IT+0x230>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d108      	bne.n	8004fb0 <HAL_DMA_Start_IT+0x100>
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681a      	ldr	r2, [r3, #0]
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f022 0201 	bic.w	r2, r2, #1
 8004fac:	601a      	str	r2, [r3, #0]
 8004fae:	e007      	b.n	8004fc0 <HAL_DMA_Start_IT+0x110>
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	68b9      	ldr	r1, [r7, #8]
 8004fc6:	68f8      	ldr	r0, [r7, #12]
 8004fc8:	f001 f906 	bl	80061d8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a34      	ldr	r2, [pc, #208]	; (80050a4 <HAL_DMA_Start_IT+0x1f4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d04a      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a33      	ldr	r2, [pc, #204]	; (80050a8 <HAL_DMA_Start_IT+0x1f8>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d045      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a31      	ldr	r2, [pc, #196]	; (80050ac <HAL_DMA_Start_IT+0x1fc>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d040      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <HAL_DMA_Start_IT+0x200>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d03b      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a2e      	ldr	r2, [pc, #184]	; (80050b4 <HAL_DMA_Start_IT+0x204>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d036      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2d      	ldr	r2, [pc, #180]	; (80050b8 <HAL_DMA_Start_IT+0x208>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d031      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <HAL_DMA_Start_IT+0x20c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d02c      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <HAL_DMA_Start_IT+0x210>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d027      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a28      	ldr	r2, [pc, #160]	; (80050c4 <HAL_DMA_Start_IT+0x214>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d022      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a27      	ldr	r2, [pc, #156]	; (80050c8 <HAL_DMA_Start_IT+0x218>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d01d      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a25      	ldr	r2, [pc, #148]	; (80050cc <HAL_DMA_Start_IT+0x21c>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d018      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a24      	ldr	r2, [pc, #144]	; (80050d0 <HAL_DMA_Start_IT+0x220>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d013      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a22      	ldr	r2, [pc, #136]	; (80050d4 <HAL_DMA_Start_IT+0x224>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d00e      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <HAL_DMA_Start_IT+0x228>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d009      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	4a1f      	ldr	r2, [pc, #124]	; (80050dc <HAL_DMA_Start_IT+0x22c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d004      	beq.n	800506c <HAL_DMA_Start_IT+0x1bc>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a1e      	ldr	r2, [pc, #120]	; (80050e0 <HAL_DMA_Start_IT+0x230>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d101      	bne.n	8005070 <HAL_DMA_Start_IT+0x1c0>
 800506c:	2301      	movs	r3, #1
 800506e:	e000      	b.n	8005072 <HAL_DMA_Start_IT+0x1c2>
 8005070:	2300      	movs	r3, #0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d036      	beq.n	80050e4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f023 021e 	bic.w	r2, r3, #30
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f042 0216 	orr.w	r2, r2, #22
 8005088:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508e:	2b00      	cmp	r3, #0
 8005090:	d03e      	beq.n	8005110 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0208 	orr.w	r2, r2, #8
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e035      	b.n	8005110 <HAL_DMA_Start_IT+0x260>
 80050a4:	40020010 	.word	0x40020010
 80050a8:	40020028 	.word	0x40020028
 80050ac:	40020040 	.word	0x40020040
 80050b0:	40020058 	.word	0x40020058
 80050b4:	40020070 	.word	0x40020070
 80050b8:	40020088 	.word	0x40020088
 80050bc:	400200a0 	.word	0x400200a0
 80050c0:	400200b8 	.word	0x400200b8
 80050c4:	40020410 	.word	0x40020410
 80050c8:	40020428 	.word	0x40020428
 80050cc:	40020440 	.word	0x40020440
 80050d0:	40020458 	.word	0x40020458
 80050d4:	40020470 	.word	0x40020470
 80050d8:	40020488 	.word	0x40020488
 80050dc:	400204a0 	.word	0x400204a0
 80050e0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f023 020e 	bic.w	r2, r3, #14
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f042 020a 	orr.w	r2, r2, #10
 80050f6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d007      	beq.n	8005110 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	681a      	ldr	r2, [r3, #0]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0204 	orr.w	r2, r2, #4
 800510e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_DMA_Start_IT+0x474>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d072      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a82      	ldr	r2, [pc, #520]	; (8005328 <HAL_DMA_Start_IT+0x478>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d06d      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a80      	ldr	r2, [pc, #512]	; (800532c <HAL_DMA_Start_IT+0x47c>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d068      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a7f      	ldr	r2, [pc, #508]	; (8005330 <HAL_DMA_Start_IT+0x480>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d063      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4a7d      	ldr	r2, [pc, #500]	; (8005334 <HAL_DMA_Start_IT+0x484>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d05e      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	4a7c      	ldr	r2, [pc, #496]	; (8005338 <HAL_DMA_Start_IT+0x488>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d059      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a7a      	ldr	r2, [pc, #488]	; (800533c <HAL_DMA_Start_IT+0x48c>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d054      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a79      	ldr	r2, [pc, #484]	; (8005340 <HAL_DMA_Start_IT+0x490>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d04f      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a77      	ldr	r2, [pc, #476]	; (8005344 <HAL_DMA_Start_IT+0x494>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d04a      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a76      	ldr	r2, [pc, #472]	; (8005348 <HAL_DMA_Start_IT+0x498>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d045      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a74      	ldr	r2, [pc, #464]	; (800534c <HAL_DMA_Start_IT+0x49c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d040      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a73      	ldr	r2, [pc, #460]	; (8005350 <HAL_DMA_Start_IT+0x4a0>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d03b      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a71      	ldr	r2, [pc, #452]	; (8005354 <HAL_DMA_Start_IT+0x4a4>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d036      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a70      	ldr	r2, [pc, #448]	; (8005358 <HAL_DMA_Start_IT+0x4a8>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d031      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a6e      	ldr	r2, [pc, #440]	; (800535c <HAL_DMA_Start_IT+0x4ac>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02c      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a6d      	ldr	r2, [pc, #436]	; (8005360 <HAL_DMA_Start_IT+0x4b0>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d027      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a6b      	ldr	r2, [pc, #428]	; (8005364 <HAL_DMA_Start_IT+0x4b4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a6a      	ldr	r2, [pc, #424]	; (8005368 <HAL_DMA_Start_IT+0x4b8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01d      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a68      	ldr	r2, [pc, #416]	; (800536c <HAL_DMA_Start_IT+0x4bc>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a67      	ldr	r2, [pc, #412]	; (8005370 <HAL_DMA_Start_IT+0x4c0>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a65      	ldr	r2, [pc, #404]	; (8005374 <HAL_DMA_Start_IT+0x4c4>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a64      	ldr	r2, [pc, #400]	; (8005378 <HAL_DMA_Start_IT+0x4c8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a62      	ldr	r2, [pc, #392]	; (800537c <HAL_DMA_Start_IT+0x4cc>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_DMA_Start_IT+0x350>
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a61      	ldr	r2, [pc, #388]	; (8005380 <HAL_DMA_Start_IT+0x4d0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d101      	bne.n	8005204 <HAL_DMA_Start_IT+0x354>
 8005200:	2301      	movs	r3, #1
 8005202:	e000      	b.n	8005206 <HAL_DMA_Start_IT+0x356>
 8005204:	2300      	movs	r3, #0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d01a      	beq.n	8005240 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d007      	beq.n	8005228 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005222:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005226:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522c:	2b00      	cmp	r3, #0
 800522e:	d007      	beq.n	8005240 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800523a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800523e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a37      	ldr	r2, [pc, #220]	; (8005324 <HAL_DMA_Start_IT+0x474>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d04a      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a36      	ldr	r2, [pc, #216]	; (8005328 <HAL_DMA_Start_IT+0x478>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d045      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a34      	ldr	r2, [pc, #208]	; (800532c <HAL_DMA_Start_IT+0x47c>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d040      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a33      	ldr	r2, [pc, #204]	; (8005330 <HAL_DMA_Start_IT+0x480>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d03b      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a31      	ldr	r2, [pc, #196]	; (8005334 <HAL_DMA_Start_IT+0x484>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d036      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a30      	ldr	r2, [pc, #192]	; (8005338 <HAL_DMA_Start_IT+0x488>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d031      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a2e      	ldr	r2, [pc, #184]	; (800533c <HAL_DMA_Start_IT+0x48c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02c      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_DMA_Start_IT+0x490>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d027      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a2b      	ldr	r2, [pc, #172]	; (8005344 <HAL_DMA_Start_IT+0x494>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <HAL_DMA_Start_IT+0x498>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a28      	ldr	r2, [pc, #160]	; (800534c <HAL_DMA_Start_IT+0x49c>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a27      	ldr	r2, [pc, #156]	; (8005350 <HAL_DMA_Start_IT+0x4a0>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <HAL_DMA_Start_IT+0x4a4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a24      	ldr	r2, [pc, #144]	; (8005358 <HAL_DMA_Start_IT+0x4a8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a22      	ldr	r2, [pc, #136]	; (800535c <HAL_DMA_Start_IT+0x4ac>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_DMA_Start_IT+0x430>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a21      	ldr	r2, [pc, #132]	; (8005360 <HAL_DMA_Start_IT+0x4b0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <HAL_DMA_Start_IT+0x442>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f042 0201 	orr.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e012      	b.n	8005318 <HAL_DMA_Start_IT+0x468>
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f042 0201 	orr.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]
 8005302:	e009      	b.n	8005318 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2200      	movs	r2, #0
 8005308:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005312:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005318:	7dfb      	ldrb	r3, [r7, #23]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	40020010 	.word	0x40020010
 8005328:	40020028 	.word	0x40020028
 800532c:	40020040 	.word	0x40020040
 8005330:	40020058 	.word	0x40020058
 8005334:	40020070 	.word	0x40020070
 8005338:	40020088 	.word	0x40020088
 800533c:	400200a0 	.word	0x400200a0
 8005340:	400200b8 	.word	0x400200b8
 8005344:	40020410 	.word	0x40020410
 8005348:	40020428 	.word	0x40020428
 800534c:	40020440 	.word	0x40020440
 8005350:	40020458 	.word	0x40020458
 8005354:	40020470 	.word	0x40020470
 8005358:	40020488 	.word	0x40020488
 800535c:	400204a0 	.word	0x400204a0
 8005360:	400204b8 	.word	0x400204b8
 8005364:	58025408 	.word	0x58025408
 8005368:	5802541c 	.word	0x5802541c
 800536c:	58025430 	.word	0x58025430
 8005370:	58025444 	.word	0x58025444
 8005374:	58025458 	.word	0x58025458
 8005378:	5802546c 	.word	0x5802546c
 800537c:	58025480 	.word	0x58025480
 8005380:	58025494 	.word	0x58025494

08005384 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800538c:	2300      	movs	r3, #0
 800538e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005390:	4b67      	ldr	r3, [pc, #412]	; (8005530 <HAL_DMA_IRQHandler+0x1ac>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	4a67      	ldr	r2, [pc, #412]	; (8005534 <HAL_DMA_IRQHandler+0x1b0>)
 8005396:	fba2 2303 	umull	r2, r3, r2, r3
 800539a:	0a9b      	lsrs	r3, r3, #10
 800539c:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053a8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80053aa:	6a3b      	ldr	r3, [r7, #32]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a5f      	ldr	r2, [pc, #380]	; (8005538 <HAL_DMA_IRQHandler+0x1b4>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d04a      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a5d      	ldr	r2, [pc, #372]	; (800553c <HAL_DMA_IRQHandler+0x1b8>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d045      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a5c      	ldr	r2, [pc, #368]	; (8005540 <HAL_DMA_IRQHandler+0x1bc>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d040      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a5a      	ldr	r2, [pc, #360]	; (8005544 <HAL_DMA_IRQHandler+0x1c0>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d03b      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a59      	ldr	r2, [pc, #356]	; (8005548 <HAL_DMA_IRQHandler+0x1c4>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d036      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a57      	ldr	r2, [pc, #348]	; (800554c <HAL_DMA_IRQHandler+0x1c8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d031      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a56      	ldr	r2, [pc, #344]	; (8005550 <HAL_DMA_IRQHandler+0x1cc>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d02c      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	4a54      	ldr	r2, [pc, #336]	; (8005554 <HAL_DMA_IRQHandler+0x1d0>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d027      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	4a53      	ldr	r2, [pc, #332]	; (8005558 <HAL_DMA_IRQHandler+0x1d4>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d022      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4a51      	ldr	r2, [pc, #324]	; (800555c <HAL_DMA_IRQHandler+0x1d8>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d01d      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	4a50      	ldr	r2, [pc, #320]	; (8005560 <HAL_DMA_IRQHandler+0x1dc>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d018      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a4e      	ldr	r2, [pc, #312]	; (8005564 <HAL_DMA_IRQHandler+0x1e0>)
 800542a:	4293      	cmp	r3, r2
 800542c:	d013      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a4d      	ldr	r2, [pc, #308]	; (8005568 <HAL_DMA_IRQHandler+0x1e4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d00e      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	4a4b      	ldr	r2, [pc, #300]	; (800556c <HAL_DMA_IRQHandler+0x1e8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d009      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4a4a      	ldr	r2, [pc, #296]	; (8005570 <HAL_DMA_IRQHandler+0x1ec>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_DMA_IRQHandler+0xd2>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4a48      	ldr	r2, [pc, #288]	; (8005574 <HAL_DMA_IRQHandler+0x1f0>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d101      	bne.n	800545a <HAL_DMA_IRQHandler+0xd6>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <HAL_DMA_IRQHandler+0xd8>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	f000 842b 	beq.w	8005cb8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005466:	f003 031f 	and.w	r3, r3, #31
 800546a:	2208      	movs	r2, #8
 800546c:	409a      	lsls	r2, r3
 800546e:	69bb      	ldr	r3, [r7, #24]
 8005470:	4013      	ands	r3, r2
 8005472:	2b00      	cmp	r3, #0
 8005474:	f000 80a2 	beq.w	80055bc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	4a2e      	ldr	r2, [pc, #184]	; (8005538 <HAL_DMA_IRQHandler+0x1b4>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d04a      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a2d      	ldr	r2, [pc, #180]	; (800553c <HAL_DMA_IRQHandler+0x1b8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d045      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a2b      	ldr	r2, [pc, #172]	; (8005540 <HAL_DMA_IRQHandler+0x1bc>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d040      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a2a      	ldr	r2, [pc, #168]	; (8005544 <HAL_DMA_IRQHandler+0x1c0>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d03b      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a28      	ldr	r2, [pc, #160]	; (8005548 <HAL_DMA_IRQHandler+0x1c4>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d036      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a27      	ldr	r2, [pc, #156]	; (800554c <HAL_DMA_IRQHandler+0x1c8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d031      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a25      	ldr	r2, [pc, #148]	; (8005550 <HAL_DMA_IRQHandler+0x1cc>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d02c      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a24      	ldr	r2, [pc, #144]	; (8005554 <HAL_DMA_IRQHandler+0x1d0>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a22      	ldr	r2, [pc, #136]	; (8005558 <HAL_DMA_IRQHandler+0x1d4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d022      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a21      	ldr	r2, [pc, #132]	; (800555c <HAL_DMA_IRQHandler+0x1d8>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d01d      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1f      	ldr	r2, [pc, #124]	; (8005560 <HAL_DMA_IRQHandler+0x1dc>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d018      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1e      	ldr	r2, [pc, #120]	; (8005564 <HAL_DMA_IRQHandler+0x1e0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d013      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a1c      	ldr	r2, [pc, #112]	; (8005568 <HAL_DMA_IRQHandler+0x1e4>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d00e      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a1b      	ldr	r2, [pc, #108]	; (800556c <HAL_DMA_IRQHandler+0x1e8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d009      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a19      	ldr	r2, [pc, #100]	; (8005570 <HAL_DMA_IRQHandler+0x1ec>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d004      	beq.n	8005518 <HAL_DMA_IRQHandler+0x194>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a18      	ldr	r2, [pc, #96]	; (8005574 <HAL_DMA_IRQHandler+0x1f0>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d12f      	bne.n	8005578 <HAL_DMA_IRQHandler+0x1f4>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0304 	and.w	r3, r3, #4
 8005522:	2b00      	cmp	r3, #0
 8005524:	bf14      	ite	ne
 8005526:	2301      	movne	r3, #1
 8005528:	2300      	moveq	r3, #0
 800552a:	b2db      	uxtb	r3, r3
 800552c:	e02e      	b.n	800558c <HAL_DMA_IRQHandler+0x208>
 800552e:	bf00      	nop
 8005530:	24000010 	.word	0x24000010
 8005534:	1b4e81b5 	.word	0x1b4e81b5
 8005538:	40020010 	.word	0x40020010
 800553c:	40020028 	.word	0x40020028
 8005540:	40020040 	.word	0x40020040
 8005544:	40020058 	.word	0x40020058
 8005548:	40020070 	.word	0x40020070
 800554c:	40020088 	.word	0x40020088
 8005550:	400200a0 	.word	0x400200a0
 8005554:	400200b8 	.word	0x400200b8
 8005558:	40020410 	.word	0x40020410
 800555c:	40020428 	.word	0x40020428
 8005560:	40020440 	.word	0x40020440
 8005564:	40020458 	.word	0x40020458
 8005568:	40020470 	.word	0x40020470
 800556c:	40020488 	.word	0x40020488
 8005570:	400204a0 	.word	0x400204a0
 8005574:	400204b8 	.word	0x400204b8
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	f003 0308 	and.w	r3, r3, #8
 8005582:	2b00      	cmp	r3, #0
 8005584:	bf14      	ite	ne
 8005586:	2301      	movne	r3, #1
 8005588:	2300      	moveq	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d015      	beq.n	80055bc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	681a      	ldr	r2, [r3, #0]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f022 0204 	bic.w	r2, r2, #4
 800559e:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a4:	f003 031f 	and.w	r3, r3, #31
 80055a8:	2208      	movs	r2, #8
 80055aa:	409a      	lsls	r2, r3
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055b4:	f043 0201 	orr.w	r2, r3, #1
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c0:	f003 031f 	and.w	r3, r3, #31
 80055c4:	69ba      	ldr	r2, [r7, #24]
 80055c6:	fa22 f303 	lsr.w	r3, r2, r3
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d06e      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4a69      	ldr	r2, [pc, #420]	; (800577c <HAL_DMA_IRQHandler+0x3f8>)
 80055d8:	4293      	cmp	r3, r2
 80055da:	d04a      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a67      	ldr	r2, [pc, #412]	; (8005780 <HAL_DMA_IRQHandler+0x3fc>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d045      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	4a66      	ldr	r2, [pc, #408]	; (8005784 <HAL_DMA_IRQHandler+0x400>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d040      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a64      	ldr	r2, [pc, #400]	; (8005788 <HAL_DMA_IRQHandler+0x404>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d03b      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a63      	ldr	r2, [pc, #396]	; (800578c <HAL_DMA_IRQHandler+0x408>)
 8005600:	4293      	cmp	r3, r2
 8005602:	d036      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	4a61      	ldr	r2, [pc, #388]	; (8005790 <HAL_DMA_IRQHandler+0x40c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d031      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a60      	ldr	r2, [pc, #384]	; (8005794 <HAL_DMA_IRQHandler+0x410>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d02c      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a5e      	ldr	r2, [pc, #376]	; (8005798 <HAL_DMA_IRQHandler+0x414>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d027      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a5d      	ldr	r2, [pc, #372]	; (800579c <HAL_DMA_IRQHandler+0x418>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d022      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a5b      	ldr	r2, [pc, #364]	; (80057a0 <HAL_DMA_IRQHandler+0x41c>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d01d      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a5a      	ldr	r2, [pc, #360]	; (80057a4 <HAL_DMA_IRQHandler+0x420>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d018      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a58      	ldr	r2, [pc, #352]	; (80057a8 <HAL_DMA_IRQHandler+0x424>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d013      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a57      	ldr	r2, [pc, #348]	; (80057ac <HAL_DMA_IRQHandler+0x428>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d00e      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	4a55      	ldr	r2, [pc, #340]	; (80057b0 <HAL_DMA_IRQHandler+0x42c>)
 800565a:	4293      	cmp	r3, r2
 800565c:	d009      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a54      	ldr	r2, [pc, #336]	; (80057b4 <HAL_DMA_IRQHandler+0x430>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d004      	beq.n	8005672 <HAL_DMA_IRQHandler+0x2ee>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a52      	ldr	r2, [pc, #328]	; (80057b8 <HAL_DMA_IRQHandler+0x434>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d10a      	bne.n	8005688 <HAL_DMA_IRQHandler+0x304>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	695b      	ldr	r3, [r3, #20]
 8005678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800567c:	2b00      	cmp	r3, #0
 800567e:	bf14      	ite	ne
 8005680:	2301      	movne	r3, #1
 8005682:	2300      	moveq	r3, #0
 8005684:	b2db      	uxtb	r3, r3
 8005686:	e003      	b.n	8005690 <HAL_DMA_IRQHandler+0x30c>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	2300      	movs	r3, #0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00d      	beq.n	80056b0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005698:	f003 031f 	and.w	r3, r3, #31
 800569c:	2201      	movs	r2, #1
 800569e:	409a      	lsls	r2, r3
 80056a0:	6a3b      	ldr	r3, [r7, #32]
 80056a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80056a8:	f043 0202 	orr.w	r2, r3, #2
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	2204      	movs	r2, #4
 80056ba:	409a      	lsls	r2, r3
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	4013      	ands	r3, r2
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	f000 808f 	beq.w	80057e4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a2c      	ldr	r2, [pc, #176]	; (800577c <HAL_DMA_IRQHandler+0x3f8>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d04a      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	; (8005780 <HAL_DMA_IRQHandler+0x3fc>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d045      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a29      	ldr	r2, [pc, #164]	; (8005784 <HAL_DMA_IRQHandler+0x400>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d040      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a27      	ldr	r2, [pc, #156]	; (8005788 <HAL_DMA_IRQHandler+0x404>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d03b      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a26      	ldr	r2, [pc, #152]	; (800578c <HAL_DMA_IRQHandler+0x408>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d036      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	4a24      	ldr	r2, [pc, #144]	; (8005790 <HAL_DMA_IRQHandler+0x40c>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d031      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a23      	ldr	r2, [pc, #140]	; (8005794 <HAL_DMA_IRQHandler+0x410>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d02c      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	4a21      	ldr	r2, [pc, #132]	; (8005798 <HAL_DMA_IRQHandler+0x414>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d027      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	4a20      	ldr	r2, [pc, #128]	; (800579c <HAL_DMA_IRQHandler+0x418>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d022      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <HAL_DMA_IRQHandler+0x41c>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d01d      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <HAL_DMA_IRQHandler+0x420>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d018      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a1b      	ldr	r2, [pc, #108]	; (80057a8 <HAL_DMA_IRQHandler+0x424>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d013      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a1a      	ldr	r2, [pc, #104]	; (80057ac <HAL_DMA_IRQHandler+0x428>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d00e      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a18      	ldr	r2, [pc, #96]	; (80057b0 <HAL_DMA_IRQHandler+0x42c>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d009      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a17      	ldr	r2, [pc, #92]	; (80057b4 <HAL_DMA_IRQHandler+0x430>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d004      	beq.n	8005766 <HAL_DMA_IRQHandler+0x3e2>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_DMA_IRQHandler+0x434>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d12a      	bne.n	80057bc <HAL_DMA_IRQHandler+0x438>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	f003 0302 	and.w	r3, r3, #2
 8005770:	2b00      	cmp	r3, #0
 8005772:	bf14      	ite	ne
 8005774:	2301      	movne	r3, #1
 8005776:	2300      	moveq	r3, #0
 8005778:	b2db      	uxtb	r3, r3
 800577a:	e023      	b.n	80057c4 <HAL_DMA_IRQHandler+0x440>
 800577c:	40020010 	.word	0x40020010
 8005780:	40020028 	.word	0x40020028
 8005784:	40020040 	.word	0x40020040
 8005788:	40020058 	.word	0x40020058
 800578c:	40020070 	.word	0x40020070
 8005790:	40020088 	.word	0x40020088
 8005794:	400200a0 	.word	0x400200a0
 8005798:	400200b8 	.word	0x400200b8
 800579c:	40020410 	.word	0x40020410
 80057a0:	40020428 	.word	0x40020428
 80057a4:	40020440 	.word	0x40020440
 80057a8:	40020458 	.word	0x40020458
 80057ac:	40020470 	.word	0x40020470
 80057b0:	40020488 	.word	0x40020488
 80057b4:	400204a0 	.word	0x400204a0
 80057b8:	400204b8 	.word	0x400204b8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2300      	movs	r3, #0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00d      	beq.n	80057e4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057cc:	f003 031f 	and.w	r3, r3, #31
 80057d0:	2204      	movs	r2, #4
 80057d2:	409a      	lsls	r2, r3
 80057d4:	6a3b      	ldr	r3, [r7, #32]
 80057d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057dc:	f043 0204 	orr.w	r2, r3, #4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057e8:	f003 031f 	and.w	r3, r3, #31
 80057ec:	2210      	movs	r2, #16
 80057ee:	409a      	lsls	r2, r3
 80057f0:	69bb      	ldr	r3, [r7, #24]
 80057f2:	4013      	ands	r3, r2
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	f000 80a6 	beq.w	8005946 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a85      	ldr	r2, [pc, #532]	; (8005a14 <HAL_DMA_IRQHandler+0x690>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d04a      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a83      	ldr	r2, [pc, #524]	; (8005a18 <HAL_DMA_IRQHandler+0x694>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d045      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4a82      	ldr	r2, [pc, #520]	; (8005a1c <HAL_DMA_IRQHandler+0x698>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d040      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4a80      	ldr	r2, [pc, #512]	; (8005a20 <HAL_DMA_IRQHandler+0x69c>)
 800581e:	4293      	cmp	r3, r2
 8005820:	d03b      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	4a7f      	ldr	r2, [pc, #508]	; (8005a24 <HAL_DMA_IRQHandler+0x6a0>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d036      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_DMA_IRQHandler+0x6a4>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d031      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a7c      	ldr	r2, [pc, #496]	; (8005a2c <HAL_DMA_IRQHandler+0x6a8>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d02c      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4a7a      	ldr	r2, [pc, #488]	; (8005a30 <HAL_DMA_IRQHandler+0x6ac>)
 8005846:	4293      	cmp	r3, r2
 8005848:	d027      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	4a79      	ldr	r2, [pc, #484]	; (8005a34 <HAL_DMA_IRQHandler+0x6b0>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d022      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a77      	ldr	r2, [pc, #476]	; (8005a38 <HAL_DMA_IRQHandler+0x6b4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d01d      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4a76      	ldr	r2, [pc, #472]	; (8005a3c <HAL_DMA_IRQHandler+0x6b8>)
 8005864:	4293      	cmp	r3, r2
 8005866:	d018      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	4a74      	ldr	r2, [pc, #464]	; (8005a40 <HAL_DMA_IRQHandler+0x6bc>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d013      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	4a73      	ldr	r2, [pc, #460]	; (8005a44 <HAL_DMA_IRQHandler+0x6c0>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d00e      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	4a71      	ldr	r2, [pc, #452]	; (8005a48 <HAL_DMA_IRQHandler+0x6c4>)
 8005882:	4293      	cmp	r3, r2
 8005884:	d009      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	4a70      	ldr	r2, [pc, #448]	; (8005a4c <HAL_DMA_IRQHandler+0x6c8>)
 800588c:	4293      	cmp	r3, r2
 800588e:	d004      	beq.n	800589a <HAL_DMA_IRQHandler+0x516>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a6e      	ldr	r2, [pc, #440]	; (8005a50 <HAL_DMA_IRQHandler+0x6cc>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d10a      	bne.n	80058b0 <HAL_DMA_IRQHandler+0x52c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	e009      	b.n	80058c4 <HAL_DMA_IRQHandler+0x540>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0304 	and.w	r3, r3, #4
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	bf14      	ite	ne
 80058be:	2301      	movne	r3, #1
 80058c0:	2300      	moveq	r3, #0
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d03e      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80058cc:	f003 031f 	and.w	r3, r3, #31
 80058d0:	2210      	movs	r2, #16
 80058d2:	409a      	lsls	r2, r3
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d018      	beq.n	8005918 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d108      	bne.n	8005906 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d024      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	4798      	blx	r3
 8005904:	e01f      	b.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590a:	2b00      	cmp	r3, #0
 800590c:	d01b      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005912:	6878      	ldr	r0, [r7, #4]
 8005914:	4798      	blx	r3
 8005916:	e016      	b.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005922:	2b00      	cmp	r3, #0
 8005924:	d107      	bne.n	8005936 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f022 0208 	bic.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	d003      	beq.n	8005946 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800594a:	f003 031f 	and.w	r3, r3, #31
 800594e:	2220      	movs	r2, #32
 8005950:	409a      	lsls	r2, r3
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	4013      	ands	r3, r2
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8110 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <HAL_DMA_IRQHandler+0x690>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2b      	ldr	r2, [pc, #172]	; (8005a18 <HAL_DMA_IRQHandler+0x694>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <HAL_DMA_IRQHandler+0x698>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <HAL_DMA_IRQHandler+0x69c>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a26      	ldr	r2, [pc, #152]	; (8005a24 <HAL_DMA_IRQHandler+0x6a0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <HAL_DMA_IRQHandler+0x6a4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a23      	ldr	r2, [pc, #140]	; (8005a2c <HAL_DMA_IRQHandler+0x6a8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a22      	ldr	r2, [pc, #136]	; (8005a30 <HAL_DMA_IRQHandler+0x6ac>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a20      	ldr	r2, [pc, #128]	; (8005a34 <HAL_DMA_IRQHandler+0x6b0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a1f      	ldr	r2, [pc, #124]	; (8005a38 <HAL_DMA_IRQHandler+0x6b4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a1d      	ldr	r2, [pc, #116]	; (8005a3c <HAL_DMA_IRQHandler+0x6b8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1c      	ldr	r2, [pc, #112]	; (8005a40 <HAL_DMA_IRQHandler+0x6bc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1a      	ldr	r2, [pc, #104]	; (8005a44 <HAL_DMA_IRQHandler+0x6c0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a19      	ldr	r2, [pc, #100]	; (8005a48 <HAL_DMA_IRQHandler+0x6c4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <HAL_DMA_IRQHandler+0x6c8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_IRQHandler+0x678>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a16      	ldr	r2, [pc, #88]	; (8005a50 <HAL_DMA_IRQHandler+0x6cc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d12b      	bne.n	8005a54 <HAL_DMA_IRQHandler+0x6d0>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	f003 0310 	and.w	r3, r3, #16
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	bf14      	ite	ne
 8005a0a:	2301      	movne	r3, #1
 8005a0c:	2300      	moveq	r3, #0
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	e02a      	b.n	8005a68 <HAL_DMA_IRQHandler+0x6e4>
 8005a12:	bf00      	nop
 8005a14:	40020010 	.word	0x40020010
 8005a18:	40020028 	.word	0x40020028
 8005a1c:	40020040 	.word	0x40020040
 8005a20:	40020058 	.word	0x40020058
 8005a24:	40020070 	.word	0x40020070
 8005a28:	40020088 	.word	0x40020088
 8005a2c:	400200a0 	.word	0x400200a0
 8005a30:	400200b8 	.word	0x400200b8
 8005a34:	40020410 	.word	0x40020410
 8005a38:	40020428 	.word	0x40020428
 8005a3c:	40020440 	.word	0x40020440
 8005a40:	40020458 	.word	0x40020458
 8005a44:	40020470 	.word	0x40020470
 8005a48:	40020488 	.word	0x40020488
 8005a4c:	400204a0 	.word	0x400204a0
 8005a50:	400204b8 	.word	0x400204b8
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 0302 	and.w	r3, r3, #2
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	bf14      	ite	ne
 8005a62:	2301      	movne	r3, #1
 8005a64:	2300      	moveq	r3, #0
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8087 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a72:	f003 031f 	and.w	r3, r3, #31
 8005a76:	2220      	movs	r2, #32
 8005a78:	409a      	lsls	r2, r3
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a84:	b2db      	uxtb	r3, r3
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d139      	bne.n	8005afe <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f022 0216 	bic.w	r2, r2, #22
 8005a98:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005aa8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d103      	bne.n	8005aba <HAL_DMA_IRQHandler+0x736>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0208 	bic.w	r2, r2, #8
 8005ac8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ace:	f003 031f 	and.w	r3, r3, #31
 8005ad2:	223f      	movs	r2, #63	; 0x3f
 8005ad4:	409a      	lsls	r2, r3
 8005ad6:	6a3b      	ldr	r3, [r7, #32]
 8005ad8:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2201      	movs	r2, #1
 8005ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 834a 	beq.w	8006188 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	4798      	blx	r3
          }
          return;
 8005afc:	e344      	b.n	8006188 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d018      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d108      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02c      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	4798      	blx	r3
 8005b2a:	e027      	b.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
 8005b3c:	e01e      	b.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	f000 8306 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b8a:	f003 0301 	and.w	r3, r3, #1
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	f000 8088 	beq.w	8005ca4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2204      	movs	r2, #4
 8005b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a7a      	ldr	r2, [pc, #488]	; (8005d8c <HAL_DMA_IRQHandler+0xa08>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d04a      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a79      	ldr	r2, [pc, #484]	; (8005d90 <HAL_DMA_IRQHandler+0xa0c>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d045      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a77      	ldr	r2, [pc, #476]	; (8005d94 <HAL_DMA_IRQHandler+0xa10>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d040      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a76      	ldr	r2, [pc, #472]	; (8005d98 <HAL_DMA_IRQHandler+0xa14>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d03b      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a74      	ldr	r2, [pc, #464]	; (8005d9c <HAL_DMA_IRQHandler+0xa18>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d036      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a73      	ldr	r2, [pc, #460]	; (8005da0 <HAL_DMA_IRQHandler+0xa1c>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d031      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a71      	ldr	r2, [pc, #452]	; (8005da4 <HAL_DMA_IRQHandler+0xa20>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d02c      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a70      	ldr	r2, [pc, #448]	; (8005da8 <HAL_DMA_IRQHandler+0xa24>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d027      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a6e      	ldr	r2, [pc, #440]	; (8005dac <HAL_DMA_IRQHandler+0xa28>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d022      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	4a6d      	ldr	r2, [pc, #436]	; (8005db0 <HAL_DMA_IRQHandler+0xa2c>)
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d01d      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	4a6b      	ldr	r2, [pc, #428]	; (8005db4 <HAL_DMA_IRQHandler+0xa30>)
 8005c06:	4293      	cmp	r3, r2
 8005c08:	d018      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a6a      	ldr	r2, [pc, #424]	; (8005db8 <HAL_DMA_IRQHandler+0xa34>)
 8005c10:	4293      	cmp	r3, r2
 8005c12:	d013      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	4a68      	ldr	r2, [pc, #416]	; (8005dbc <HAL_DMA_IRQHandler+0xa38>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d00e      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a67      	ldr	r2, [pc, #412]	; (8005dc0 <HAL_DMA_IRQHandler+0xa3c>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d009      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	4a65      	ldr	r2, [pc, #404]	; (8005dc4 <HAL_DMA_IRQHandler+0xa40>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d004      	beq.n	8005c3c <HAL_DMA_IRQHandler+0x8b8>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a64      	ldr	r2, [pc, #400]	; (8005dc8 <HAL_DMA_IRQHandler+0xa44>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d108      	bne.n	8005c4e <HAL_DMA_IRQHandler+0x8ca>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0201 	bic.w	r2, r2, #1
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e007      	b.n	8005c5e <HAL_DMA_IRQHandler+0x8da>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0201 	bic.w	r2, r2, #1
 8005c5c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3301      	adds	r3, #1
 8005c62:	60fb      	str	r3, [r7, #12]
 8005c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d307      	bcc.n	8005c7a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1f2      	bne.n	8005c5e <HAL_DMA_IRQHandler+0x8da>
 8005c78:	e000      	b.n	8005c7c <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005c7a:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d004      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2203      	movs	r2, #3
 8005c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005c9a:	e003      	b.n	8005ca4 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 8272 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	4798      	blx	r3
 8005cb6:	e26c      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a43      	ldr	r2, [pc, #268]	; (8005dcc <HAL_DMA_IRQHandler+0xa48>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d022      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a42      	ldr	r2, [pc, #264]	; (8005dd0 <HAL_DMA_IRQHandler+0xa4c>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d01d      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a40      	ldr	r2, [pc, #256]	; (8005dd4 <HAL_DMA_IRQHandler+0xa50>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d018      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a3f      	ldr	r2, [pc, #252]	; (8005dd8 <HAL_DMA_IRQHandler+0xa54>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d013      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a3d      	ldr	r2, [pc, #244]	; (8005ddc <HAL_DMA_IRQHandler+0xa58>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d00e      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a3c      	ldr	r2, [pc, #240]	; (8005de0 <HAL_DMA_IRQHandler+0xa5c>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d009      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a3a      	ldr	r2, [pc, #232]	; (8005de4 <HAL_DMA_IRQHandler+0xa60>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d004      	beq.n	8005d08 <HAL_DMA_IRQHandler+0x984>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a39      	ldr	r2, [pc, #228]	; (8005de8 <HAL_DMA_IRQHandler+0xa64>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d101      	bne.n	8005d0c <HAL_DMA_IRQHandler+0x988>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e000      	b.n	8005d0e <HAL_DMA_IRQHandler+0x98a>
 8005d0c:	2300      	movs	r3, #0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	f000 823f 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d20:	f003 031f 	and.w	r3, r3, #31
 8005d24:	2204      	movs	r2, #4
 8005d26:	409a      	lsls	r2, r3
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	4013      	ands	r3, r2
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80cd 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xb48>
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0304 	and.w	r3, r3, #4
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80c7 	beq.w	8005ecc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d42:	f003 031f 	and.w	r3, r3, #31
 8005d46:	2204      	movs	r2, #4
 8005d48:	409a      	lsls	r2, r3
 8005d4a:	69fb      	ldr	r3, [r7, #28]
 8005d4c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d049      	beq.n	8005dec <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	f000 8210 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d74:	e20a      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	f000 8206 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d84:	6878      	ldr	r0, [r7, #4]
 8005d86:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005d88:	e200      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
 8005d8a:	bf00      	nop
 8005d8c:	40020010 	.word	0x40020010
 8005d90:	40020028 	.word	0x40020028
 8005d94:	40020040 	.word	0x40020040
 8005d98:	40020058 	.word	0x40020058
 8005d9c:	40020070 	.word	0x40020070
 8005da0:	40020088 	.word	0x40020088
 8005da4:	400200a0 	.word	0x400200a0
 8005da8:	400200b8 	.word	0x400200b8
 8005dac:	40020410 	.word	0x40020410
 8005db0:	40020428 	.word	0x40020428
 8005db4:	40020440 	.word	0x40020440
 8005db8:	40020458 	.word	0x40020458
 8005dbc:	40020470 	.word	0x40020470
 8005dc0:	40020488 	.word	0x40020488
 8005dc4:	400204a0 	.word	0x400204a0
 8005dc8:	400204b8 	.word	0x400204b8
 8005dcc:	58025408 	.word	0x58025408
 8005dd0:	5802541c 	.word	0x5802541c
 8005dd4:	58025430 	.word	0x58025430
 8005dd8:	58025444 	.word	0x58025444
 8005ddc:	58025458 	.word	0x58025458
 8005de0:	5802546c 	.word	0x5802546c
 8005de4:	58025480 	.word	0x58025480
 8005de8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d160      	bne.n	8005eb8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	4a8c      	ldr	r2, [pc, #560]	; (800602c <HAL_DMA_IRQHandler+0xca8>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d04a      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a8a      	ldr	r2, [pc, #552]	; (8006030 <HAL_DMA_IRQHandler+0xcac>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d045      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a89      	ldr	r2, [pc, #548]	; (8006034 <HAL_DMA_IRQHandler+0xcb0>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d040      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a87      	ldr	r2, [pc, #540]	; (8006038 <HAL_DMA_IRQHandler+0xcb4>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d03b      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a86      	ldr	r2, [pc, #536]	; (800603c <HAL_DMA_IRQHandler+0xcb8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d036      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a84      	ldr	r2, [pc, #528]	; (8006040 <HAL_DMA_IRQHandler+0xcbc>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d031      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a83      	ldr	r2, [pc, #524]	; (8006044 <HAL_DMA_IRQHandler+0xcc0>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d02c      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a81      	ldr	r2, [pc, #516]	; (8006048 <HAL_DMA_IRQHandler+0xcc4>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d027      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a80      	ldr	r2, [pc, #512]	; (800604c <HAL_DMA_IRQHandler+0xcc8>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d022      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a7e      	ldr	r2, [pc, #504]	; (8006050 <HAL_DMA_IRQHandler+0xccc>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01d      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a7d      	ldr	r2, [pc, #500]	; (8006054 <HAL_DMA_IRQHandler+0xcd0>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d018      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a7b      	ldr	r2, [pc, #492]	; (8006058 <HAL_DMA_IRQHandler+0xcd4>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d013      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a7a      	ldr	r2, [pc, #488]	; (800605c <HAL_DMA_IRQHandler+0xcd8>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00e      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a78      	ldr	r2, [pc, #480]	; (8006060 <HAL_DMA_IRQHandler+0xcdc>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d009      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a77      	ldr	r2, [pc, #476]	; (8006064 <HAL_DMA_IRQHandler+0xce0>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d004      	beq.n	8005e96 <HAL_DMA_IRQHandler+0xb12>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a75      	ldr	r2, [pc, #468]	; (8006068 <HAL_DMA_IRQHandler+0xce4>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d108      	bne.n	8005ea8 <HAL_DMA_IRQHandler+0xb24>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	681a      	ldr	r2, [r3, #0]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f022 0208 	bic.w	r2, r2, #8
 8005ea4:	601a      	str	r2, [r3, #0]
 8005ea6:	e007      	b.n	8005eb8 <HAL_DMA_IRQHandler+0xb34>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	f022 0204 	bic.w	r2, r2, #4
 8005eb6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	f000 8165 	beq.w	800618c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005eca:	e15f      	b.n	800618c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed0:	f003 031f 	and.w	r3, r3, #31
 8005ed4:	2202      	movs	r2, #2
 8005ed6:	409a      	lsls	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f000 80c5 	beq.w	800606c <HAL_DMA_IRQHandler+0xce8>
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80bf 	beq.w	800606c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef2:	f003 031f 	and.w	r3, r3, #31
 8005ef6:	2202      	movs	r2, #2
 8005ef8:	409a      	lsls	r2, r3
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d018      	beq.n	8005f3a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d109      	bne.n	8005f26 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	f000 813a 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f24:	e134      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f000 8130 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005f38:	e12a      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	f003 0320 	and.w	r3, r3, #32
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d168      	bne.n	8006016 <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a38      	ldr	r2, [pc, #224]	; (800602c <HAL_DMA_IRQHandler+0xca8>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d04a      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a37      	ldr	r2, [pc, #220]	; (8006030 <HAL_DMA_IRQHandler+0xcac>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d045      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a35      	ldr	r2, [pc, #212]	; (8006034 <HAL_DMA_IRQHandler+0xcb0>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d040      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a34      	ldr	r2, [pc, #208]	; (8006038 <HAL_DMA_IRQHandler+0xcb4>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d03b      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a32      	ldr	r2, [pc, #200]	; (800603c <HAL_DMA_IRQHandler+0xcb8>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d036      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a31      	ldr	r2, [pc, #196]	; (8006040 <HAL_DMA_IRQHandler+0xcbc>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d031      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a2f      	ldr	r2, [pc, #188]	; (8006044 <HAL_DMA_IRQHandler+0xcc0>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d02c      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <HAL_DMA_IRQHandler+0xcc4>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d027      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a2c      	ldr	r2, [pc, #176]	; (800604c <HAL_DMA_IRQHandler+0xcc8>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d022      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a2b      	ldr	r2, [pc, #172]	; (8006050 <HAL_DMA_IRQHandler+0xccc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d01d      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a29      	ldr	r2, [pc, #164]	; (8006054 <HAL_DMA_IRQHandler+0xcd0>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d018      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a28      	ldr	r2, [pc, #160]	; (8006058 <HAL_DMA_IRQHandler+0xcd4>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d013      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a26      	ldr	r2, [pc, #152]	; (800605c <HAL_DMA_IRQHandler+0xcd8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00e      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a25      	ldr	r2, [pc, #148]	; (8006060 <HAL_DMA_IRQHandler+0xcdc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a23      	ldr	r2, [pc, #140]	; (8006064 <HAL_DMA_IRQHandler+0xce0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d004      	beq.n	8005fe4 <HAL_DMA_IRQHandler+0xc60>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a22      	ldr	r2, [pc, #136]	; (8006068 <HAL_DMA_IRQHandler+0xce4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d108      	bne.n	8005ff6 <HAL_DMA_IRQHandler+0xc72>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f022 0214 	bic.w	r2, r2, #20
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	e007      	b.n	8006006 <HAL_DMA_IRQHandler+0xc82>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f022 020a 	bic.w	r2, r2, #10
 8006004:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2200      	movs	r2, #0
 800600a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2201      	movs	r2, #1
 8006012:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800601a:	2b00      	cmp	r3, #0
 800601c:	f000 80b8 	beq.w	8006190 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006028:	e0b2      	b.n	8006190 <HAL_DMA_IRQHandler+0xe0c>
 800602a:	bf00      	nop
 800602c:	40020010 	.word	0x40020010
 8006030:	40020028 	.word	0x40020028
 8006034:	40020040 	.word	0x40020040
 8006038:	40020058 	.word	0x40020058
 800603c:	40020070 	.word	0x40020070
 8006040:	40020088 	.word	0x40020088
 8006044:	400200a0 	.word	0x400200a0
 8006048:	400200b8 	.word	0x400200b8
 800604c:	40020410 	.word	0x40020410
 8006050:	40020428 	.word	0x40020428
 8006054:	40020440 	.word	0x40020440
 8006058:	40020458 	.word	0x40020458
 800605c:	40020470 	.word	0x40020470
 8006060:	40020488 	.word	0x40020488
 8006064:	400204a0 	.word	0x400204a0
 8006068:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006070:	f003 031f 	and.w	r3, r3, #31
 8006074:	2208      	movs	r2, #8
 8006076:	409a      	lsls	r2, r3
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	4013      	ands	r3, r2
 800607c:	2b00      	cmp	r3, #0
 800607e:	f000 8088 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
 8006082:	693b      	ldr	r3, [r7, #16]
 8006084:	f003 0308 	and.w	r3, r3, #8
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 8082 	beq.w	8006192 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a41      	ldr	r2, [pc, #260]	; (8006198 <HAL_DMA_IRQHandler+0xe14>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a3f      	ldr	r2, [pc, #252]	; (800619c <HAL_DMA_IRQHandler+0xe18>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a3e      	ldr	r2, [pc, #248]	; (80061a0 <HAL_DMA_IRQHandler+0xe1c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a3c      	ldr	r2, [pc, #240]	; (80061a4 <HAL_DMA_IRQHandler+0xe20>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3b      	ldr	r2, [pc, #236]	; (80061a8 <HAL_DMA_IRQHandler+0xe24>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a39      	ldr	r2, [pc, #228]	; (80061ac <HAL_DMA_IRQHandler+0xe28>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a38      	ldr	r2, [pc, #224]	; (80061b0 <HAL_DMA_IRQHandler+0xe2c>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a36      	ldr	r2, [pc, #216]	; (80061b4 <HAL_DMA_IRQHandler+0xe30>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a35      	ldr	r2, [pc, #212]	; (80061b8 <HAL_DMA_IRQHandler+0xe34>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a33      	ldr	r2, [pc, #204]	; (80061bc <HAL_DMA_IRQHandler+0xe38>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a32      	ldr	r2, [pc, #200]	; (80061c0 <HAL_DMA_IRQHandler+0xe3c>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a30      	ldr	r2, [pc, #192]	; (80061c4 <HAL_DMA_IRQHandler+0xe40>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a2f      	ldr	r2, [pc, #188]	; (80061c8 <HAL_DMA_IRQHandler+0xe44>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a2d      	ldr	r2, [pc, #180]	; (80061cc <HAL_DMA_IRQHandler+0xe48>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a2c      	ldr	r2, [pc, #176]	; (80061d0 <HAL_DMA_IRQHandler+0xe4c>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0xdaa>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a2a      	ldr	r2, [pc, #168]	; (80061d4 <HAL_DMA_IRQHandler+0xe50>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d108      	bne.n	8006140 <HAL_DMA_IRQHandler+0xdbc>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 021c 	bic.w	r2, r2, #28
 800613c:	601a      	str	r2, [r3, #0]
 800613e:	e007      	b.n	8006150 <HAL_DMA_IRQHandler+0xdcc>
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	681a      	ldr	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f022 020e 	bic.w	r2, r2, #14
 800614e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2201      	movs	r2, #1
 800615a:	409a      	lsls	r2, r3
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800617a:	2b00      	cmp	r3, #0
 800617c:	d009      	beq.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	4798      	blx	r3
 8006186:	e004      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006188:	bf00      	nop
 800618a:	e002      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800618c:	bf00      	nop
 800618e:	e000      	b.n	8006192 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006190:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006192:	3728      	adds	r7, #40	; 0x28
 8006194:	46bd      	mov	sp, r7
 8006196:	bd80      	pop	{r7, pc}
 8006198:	40020010 	.word	0x40020010
 800619c:	40020028 	.word	0x40020028
 80061a0:	40020040 	.word	0x40020040
 80061a4:	40020058 	.word	0x40020058
 80061a8:	40020070 	.word	0x40020070
 80061ac:	40020088 	.word	0x40020088
 80061b0:	400200a0 	.word	0x400200a0
 80061b4:	400200b8 	.word	0x400200b8
 80061b8:	40020410 	.word	0x40020410
 80061bc:	40020428 	.word	0x40020428
 80061c0:	40020440 	.word	0x40020440
 80061c4:	40020458 	.word	0x40020458
 80061c8:	40020470 	.word	0x40020470
 80061cc:	40020488 	.word	0x40020488
 80061d0:	400204a0 	.word	0x400204a0
 80061d4:	400204b8 	.word	0x400204b8

080061d8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061d8:	b480      	push	{r7}
 80061da:	b087      	sub	sp, #28
 80061dc:	af00      	add	r7, sp, #0
 80061de:	60f8      	str	r0, [r7, #12]
 80061e0:	60b9      	str	r1, [r7, #8]
 80061e2:	607a      	str	r2, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061ea:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061f0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	4a84      	ldr	r2, [pc, #528]	; (8006408 <DMA_SetConfig+0x230>)
 80061f8:	4293      	cmp	r3, r2
 80061fa:	d072      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	4a82      	ldr	r2, [pc, #520]	; (800640c <DMA_SetConfig+0x234>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d06d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	4a81      	ldr	r2, [pc, #516]	; (8006410 <DMA_SetConfig+0x238>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d068      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a7f      	ldr	r2, [pc, #508]	; (8006414 <DMA_SetConfig+0x23c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d063      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	4a7e      	ldr	r2, [pc, #504]	; (8006418 <DMA_SetConfig+0x240>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d05e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4a7c      	ldr	r2, [pc, #496]	; (800641c <DMA_SetConfig+0x244>)
 800622a:	4293      	cmp	r3, r2
 800622c:	d059      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	4a7b      	ldr	r2, [pc, #492]	; (8006420 <DMA_SetConfig+0x248>)
 8006234:	4293      	cmp	r3, r2
 8006236:	d054      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4a79      	ldr	r2, [pc, #484]	; (8006424 <DMA_SetConfig+0x24c>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d04f      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	4a78      	ldr	r2, [pc, #480]	; (8006428 <DMA_SetConfig+0x250>)
 8006248:	4293      	cmp	r3, r2
 800624a:	d04a      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a76      	ldr	r2, [pc, #472]	; (800642c <DMA_SetConfig+0x254>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d045      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a75      	ldr	r2, [pc, #468]	; (8006430 <DMA_SetConfig+0x258>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d040      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a73      	ldr	r2, [pc, #460]	; (8006434 <DMA_SetConfig+0x25c>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d03b      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	4a72      	ldr	r2, [pc, #456]	; (8006438 <DMA_SetConfig+0x260>)
 8006270:	4293      	cmp	r3, r2
 8006272:	d036      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	4a70      	ldr	r2, [pc, #448]	; (800643c <DMA_SetConfig+0x264>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d031      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	4a6f      	ldr	r2, [pc, #444]	; (8006440 <DMA_SetConfig+0x268>)
 8006284:	4293      	cmp	r3, r2
 8006286:	d02c      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a6d      	ldr	r2, [pc, #436]	; (8006444 <DMA_SetConfig+0x26c>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d027      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	4a6c      	ldr	r2, [pc, #432]	; (8006448 <DMA_SetConfig+0x270>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d022      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a6a      	ldr	r2, [pc, #424]	; (800644c <DMA_SetConfig+0x274>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d01d      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	4a69      	ldr	r2, [pc, #420]	; (8006450 <DMA_SetConfig+0x278>)
 80062ac:	4293      	cmp	r3, r2
 80062ae:	d018      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	4a67      	ldr	r2, [pc, #412]	; (8006454 <DMA_SetConfig+0x27c>)
 80062b6:	4293      	cmp	r3, r2
 80062b8:	d013      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a66      	ldr	r2, [pc, #408]	; (8006458 <DMA_SetConfig+0x280>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d00e      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a64      	ldr	r2, [pc, #400]	; (800645c <DMA_SetConfig+0x284>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d009      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a63      	ldr	r2, [pc, #396]	; (8006460 <DMA_SetConfig+0x288>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d004      	beq.n	80062e2 <DMA_SetConfig+0x10a>
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a61      	ldr	r2, [pc, #388]	; (8006464 <DMA_SetConfig+0x28c>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d101      	bne.n	80062e6 <DMA_SetConfig+0x10e>
 80062e2:	2301      	movs	r3, #1
 80062e4:	e000      	b.n	80062e8 <DMA_SetConfig+0x110>
 80062e6:	2300      	movs	r3, #0
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d00d      	beq.n	8006308 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80062f4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d004      	beq.n	8006308 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006302:	68fa      	ldr	r2, [r7, #12]
 8006304:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006306:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	4a3e      	ldr	r2, [pc, #248]	; (8006408 <DMA_SetConfig+0x230>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d04a      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	4a3d      	ldr	r2, [pc, #244]	; (800640c <DMA_SetConfig+0x234>)
 8006318:	4293      	cmp	r3, r2
 800631a:	d045      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	4a3b      	ldr	r2, [pc, #236]	; (8006410 <DMA_SetConfig+0x238>)
 8006322:	4293      	cmp	r3, r2
 8006324:	d040      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	4a3a      	ldr	r2, [pc, #232]	; (8006414 <DMA_SetConfig+0x23c>)
 800632c:	4293      	cmp	r3, r2
 800632e:	d03b      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	4a38      	ldr	r2, [pc, #224]	; (8006418 <DMA_SetConfig+0x240>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d036      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	4a37      	ldr	r2, [pc, #220]	; (800641c <DMA_SetConfig+0x244>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d031      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	4a35      	ldr	r2, [pc, #212]	; (8006420 <DMA_SetConfig+0x248>)
 800634a:	4293      	cmp	r3, r2
 800634c:	d02c      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a34      	ldr	r2, [pc, #208]	; (8006424 <DMA_SetConfig+0x24c>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d027      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	4a32      	ldr	r2, [pc, #200]	; (8006428 <DMA_SetConfig+0x250>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d022      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	4a31      	ldr	r2, [pc, #196]	; (800642c <DMA_SetConfig+0x254>)
 8006368:	4293      	cmp	r3, r2
 800636a:	d01d      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	4a2f      	ldr	r2, [pc, #188]	; (8006430 <DMA_SetConfig+0x258>)
 8006372:	4293      	cmp	r3, r2
 8006374:	d018      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a2e      	ldr	r2, [pc, #184]	; (8006434 <DMA_SetConfig+0x25c>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d013      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <DMA_SetConfig+0x260>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d00e      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a2b      	ldr	r2, [pc, #172]	; (800643c <DMA_SetConfig+0x264>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d009      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a29      	ldr	r2, [pc, #164]	; (8006440 <DMA_SetConfig+0x268>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d004      	beq.n	80063a8 <DMA_SetConfig+0x1d0>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a28      	ldr	r2, [pc, #160]	; (8006444 <DMA_SetConfig+0x26c>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d101      	bne.n	80063ac <DMA_SetConfig+0x1d4>
 80063a8:	2301      	movs	r3, #1
 80063aa:	e000      	b.n	80063ae <DMA_SetConfig+0x1d6>
 80063ac:	2300      	movs	r3, #0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d05a      	beq.n	8006468 <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063b6:	f003 031f 	and.w	r3, r3, #31
 80063ba:	223f      	movs	r2, #63	; 0x3f
 80063bc:	409a      	lsls	r2, r3
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063d0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	683a      	ldr	r2, [r7, #0]
 80063d8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	2b40      	cmp	r3, #64	; 0x40
 80063e0:	d108      	bne.n	80063f4 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	68ba      	ldr	r2, [r7, #8]
 80063f0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80063f2:	e087      	b.n	8006504 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68ba      	ldr	r2, [r7, #8]
 80063fa:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	687a      	ldr	r2, [r7, #4]
 8006402:	60da      	str	r2, [r3, #12]
}
 8006404:	e07e      	b.n	8006504 <DMA_SetConfig+0x32c>
 8006406:	bf00      	nop
 8006408:	40020010 	.word	0x40020010
 800640c:	40020028 	.word	0x40020028
 8006410:	40020040 	.word	0x40020040
 8006414:	40020058 	.word	0x40020058
 8006418:	40020070 	.word	0x40020070
 800641c:	40020088 	.word	0x40020088
 8006420:	400200a0 	.word	0x400200a0
 8006424:	400200b8 	.word	0x400200b8
 8006428:	40020410 	.word	0x40020410
 800642c:	40020428 	.word	0x40020428
 8006430:	40020440 	.word	0x40020440
 8006434:	40020458 	.word	0x40020458
 8006438:	40020470 	.word	0x40020470
 800643c:	40020488 	.word	0x40020488
 8006440:	400204a0 	.word	0x400204a0
 8006444:	400204b8 	.word	0x400204b8
 8006448:	58025408 	.word	0x58025408
 800644c:	5802541c 	.word	0x5802541c
 8006450:	58025430 	.word	0x58025430
 8006454:	58025444 	.word	0x58025444
 8006458:	58025458 	.word	0x58025458
 800645c:	5802546c 	.word	0x5802546c
 8006460:	58025480 	.word	0x58025480
 8006464:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a28      	ldr	r2, [pc, #160]	; (8006510 <DMA_SetConfig+0x338>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d022      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a27      	ldr	r2, [pc, #156]	; (8006514 <DMA_SetConfig+0x33c>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d01d      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	4a25      	ldr	r2, [pc, #148]	; (8006518 <DMA_SetConfig+0x340>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d018      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a24      	ldr	r2, [pc, #144]	; (800651c <DMA_SetConfig+0x344>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d013      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a22      	ldr	r2, [pc, #136]	; (8006520 <DMA_SetConfig+0x348>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d00e      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a21      	ldr	r2, [pc, #132]	; (8006524 <DMA_SetConfig+0x34c>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d009      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a1f      	ldr	r2, [pc, #124]	; (8006528 <DMA_SetConfig+0x350>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d004      	beq.n	80064b8 <DMA_SetConfig+0x2e0>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4a1e      	ldr	r2, [pc, #120]	; (800652c <DMA_SetConfig+0x354>)
 80064b4:	4293      	cmp	r3, r2
 80064b6:	d101      	bne.n	80064bc <DMA_SetConfig+0x2e4>
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <DMA_SetConfig+0x2e6>
 80064bc:	2300      	movs	r3, #0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d020      	beq.n	8006504 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064c6:	f003 031f 	and.w	r3, r3, #31
 80064ca:	2201      	movs	r2, #1
 80064cc:	409a      	lsls	r2, r3
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	683a      	ldr	r2, [r7, #0]
 80064d8:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	2b40      	cmp	r3, #64	; 0x40
 80064e0:	d108      	bne.n	80064f4 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	68ba      	ldr	r2, [r7, #8]
 80064f0:	60da      	str	r2, [r3, #12]
}
 80064f2:	e007      	b.n	8006504 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	687a      	ldr	r2, [r7, #4]
 8006502:	60da      	str	r2, [r3, #12]
}
 8006504:	bf00      	nop
 8006506:	371c      	adds	r7, #28
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr
 8006510:	58025408 	.word	0x58025408
 8006514:	5802541c 	.word	0x5802541c
 8006518:	58025430 	.word	0x58025430
 800651c:	58025444 	.word	0x58025444
 8006520:	58025458 	.word	0x58025458
 8006524:	5802546c 	.word	0x5802546c
 8006528:	58025480 	.word	0x58025480
 800652c:	58025494 	.word	0x58025494

08006530 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a42      	ldr	r2, [pc, #264]	; (8006648 <DMA_CalcBaseAndBitshift+0x118>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d04a      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a41      	ldr	r2, [pc, #260]	; (800664c <DMA_CalcBaseAndBitshift+0x11c>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d045      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a3f      	ldr	r2, [pc, #252]	; (8006650 <DMA_CalcBaseAndBitshift+0x120>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d040      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a3e      	ldr	r2, [pc, #248]	; (8006654 <DMA_CalcBaseAndBitshift+0x124>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d03b      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a3c      	ldr	r2, [pc, #240]	; (8006658 <DMA_CalcBaseAndBitshift+0x128>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d036      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3b      	ldr	r2, [pc, #236]	; (800665c <DMA_CalcBaseAndBitshift+0x12c>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d031      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a39      	ldr	r2, [pc, #228]	; (8006660 <DMA_CalcBaseAndBitshift+0x130>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d02c      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a38      	ldr	r2, [pc, #224]	; (8006664 <DMA_CalcBaseAndBitshift+0x134>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d027      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a36      	ldr	r2, [pc, #216]	; (8006668 <DMA_CalcBaseAndBitshift+0x138>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d022      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a35      	ldr	r2, [pc, #212]	; (800666c <DMA_CalcBaseAndBitshift+0x13c>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d01d      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a33      	ldr	r2, [pc, #204]	; (8006670 <DMA_CalcBaseAndBitshift+0x140>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d018      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a32      	ldr	r2, [pc, #200]	; (8006674 <DMA_CalcBaseAndBitshift+0x144>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d013      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a30      	ldr	r2, [pc, #192]	; (8006678 <DMA_CalcBaseAndBitshift+0x148>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d00e      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a2f      	ldr	r2, [pc, #188]	; (800667c <DMA_CalcBaseAndBitshift+0x14c>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d009      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a2d      	ldr	r2, [pc, #180]	; (8006680 <DMA_CalcBaseAndBitshift+0x150>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d004      	beq.n	80065d8 <DMA_CalcBaseAndBitshift+0xa8>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a2c      	ldr	r2, [pc, #176]	; (8006684 <DMA_CalcBaseAndBitshift+0x154>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d101      	bne.n	80065dc <DMA_CalcBaseAndBitshift+0xac>
 80065d8:	2301      	movs	r3, #1
 80065da:	e000      	b.n	80065de <DMA_CalcBaseAndBitshift+0xae>
 80065dc:	2300      	movs	r3, #0
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d024      	beq.n	800662c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	b2db      	uxtb	r3, r3
 80065e8:	3b10      	subs	r3, #16
 80065ea:	4a27      	ldr	r2, [pc, #156]	; (8006688 <DMA_CalcBaseAndBitshift+0x158>)
 80065ec:	fba2 2303 	umull	r2, r3, r2, r3
 80065f0:	091b      	lsrs	r3, r3, #4
 80065f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	f003 0307 	and.w	r3, r3, #7
 80065fa:	4a24      	ldr	r2, [pc, #144]	; (800668c <DMA_CalcBaseAndBitshift+0x15c>)
 80065fc:	5cd3      	ldrb	r3, [r2, r3]
 80065fe:	461a      	mov	r2, r3
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d908      	bls.n	800661c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	461a      	mov	r2, r3
 8006610:	4b1f      	ldr	r3, [pc, #124]	; (8006690 <DMA_CalcBaseAndBitshift+0x160>)
 8006612:	4013      	ands	r3, r2
 8006614:	1d1a      	adds	r2, r3, #4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	659a      	str	r2, [r3, #88]	; 0x58
 800661a:	e00d      	b.n	8006638 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	461a      	mov	r2, r3
 8006622:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <DMA_CalcBaseAndBitshift+0x160>)
 8006624:	4013      	ands	r3, r2
 8006626:	687a      	ldr	r2, [r7, #4]
 8006628:	6593      	str	r3, [r2, #88]	; 0x58
 800662a:	e005      	b.n	8006638 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800663c:	4618      	mov	r0, r3
 800663e:	3714      	adds	r7, #20
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr
 8006648:	40020010 	.word	0x40020010
 800664c:	40020028 	.word	0x40020028
 8006650:	40020040 	.word	0x40020040
 8006654:	40020058 	.word	0x40020058
 8006658:	40020070 	.word	0x40020070
 800665c:	40020088 	.word	0x40020088
 8006660:	400200a0 	.word	0x400200a0
 8006664:	400200b8 	.word	0x400200b8
 8006668:	40020410 	.word	0x40020410
 800666c:	40020428 	.word	0x40020428
 8006670:	40020440 	.word	0x40020440
 8006674:	40020458 	.word	0x40020458
 8006678:	40020470 	.word	0x40020470
 800667c:	40020488 	.word	0x40020488
 8006680:	400204a0 	.word	0x400204a0
 8006684:	400204b8 	.word	0x400204b8
 8006688:	aaaaaaab 	.word	0xaaaaaaab
 800668c:	0801aee4 	.word	0x0801aee4
 8006690:	fffffc00 	.word	0xfffffc00

08006694 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006694:	b480      	push	{r7}
 8006696:	b085      	sub	sp, #20
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	699b      	ldr	r3, [r3, #24]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d120      	bne.n	80066ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066ac:	2b03      	cmp	r3, #3
 80066ae:	d858      	bhi.n	8006762 <DMA_CheckFifoParam+0xce>
 80066b0:	a201      	add	r2, pc, #4	; (adr r2, 80066b8 <DMA_CheckFifoParam+0x24>)
 80066b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066b6:	bf00      	nop
 80066b8:	080066c9 	.word	0x080066c9
 80066bc:	080066db 	.word	0x080066db
 80066c0:	080066c9 	.word	0x080066c9
 80066c4:	08006763 	.word	0x08006763
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d048      	beq.n	8006766 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066d8:	e045      	b.n	8006766 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80066e2:	d142      	bne.n	800676a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80066e8:	e03f      	b.n	800676a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80066f2:	d123      	bne.n	800673c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066f8:	2b03      	cmp	r3, #3
 80066fa:	d838      	bhi.n	800676e <DMA_CheckFifoParam+0xda>
 80066fc:	a201      	add	r2, pc, #4	; (adr r2, 8006704 <DMA_CheckFifoParam+0x70>)
 80066fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006702:	bf00      	nop
 8006704:	08006715 	.word	0x08006715
 8006708:	0800671b 	.word	0x0800671b
 800670c:	08006715 	.word	0x08006715
 8006710:	0800672d 	.word	0x0800672d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	73fb      	strb	r3, [r7, #15]
        break;
 8006718:	e030      	b.n	800677c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d025      	beq.n	8006772 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800672a:	e022      	b.n	8006772 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006730:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006734:	d11f      	bne.n	8006776 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800673a:	e01c      	b.n	8006776 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006740:	2b02      	cmp	r3, #2
 8006742:	d902      	bls.n	800674a <DMA_CheckFifoParam+0xb6>
 8006744:	2b03      	cmp	r3, #3
 8006746:	d003      	beq.n	8006750 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006748:	e018      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800674a:	2301      	movs	r3, #1
 800674c:	73fb      	strb	r3, [r7, #15]
        break;
 800674e:	e015      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00e      	beq.n	800677a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	73fb      	strb	r3, [r7, #15]
    break;
 8006760:	e00b      	b.n	800677a <DMA_CheckFifoParam+0xe6>
        break;
 8006762:	bf00      	nop
 8006764:	e00a      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006766:	bf00      	nop
 8006768:	e008      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 800676a:	bf00      	nop
 800676c:	e006      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 800676e:	bf00      	nop
 8006770:	e004      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006772:	bf00      	nop
 8006774:	e002      	b.n	800677c <DMA_CheckFifoParam+0xe8>
        break;
 8006776:	bf00      	nop
 8006778:	e000      	b.n	800677c <DMA_CheckFifoParam+0xe8>
    break;
 800677a:	bf00      	nop
    }
  }

  return status;
 800677c:	7bfb      	ldrb	r3, [r7, #15]
}
 800677e:	4618      	mov	r0, r3
 8006780:	3714      	adds	r7, #20
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
 800678a:	bf00      	nop

0800678c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a38      	ldr	r2, [pc, #224]	; (8006880 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d022      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a36      	ldr	r2, [pc, #216]	; (8006884 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d01d      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	4a35      	ldr	r2, [pc, #212]	; (8006888 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80067b4:	4293      	cmp	r3, r2
 80067b6:	d018      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	4a33      	ldr	r2, [pc, #204]	; (800688c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80067be:	4293      	cmp	r3, r2
 80067c0:	d013      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	4a32      	ldr	r2, [pc, #200]	; (8006890 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80067c8:	4293      	cmp	r3, r2
 80067ca:	d00e      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a30      	ldr	r2, [pc, #192]	; (8006894 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d009      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	4a2f      	ldr	r2, [pc, #188]	; (8006898 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80067dc:	4293      	cmp	r3, r2
 80067de:	d004      	beq.n	80067ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4a2d      	ldr	r2, [pc, #180]	; (800689c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d101      	bne.n	80067ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e000      	b.n	80067f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80067ee:	2300      	movs	r3, #0
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d01a      	beq.n	800682a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	3b08      	subs	r3, #8
 80067fc:	4a28      	ldr	r2, [pc, #160]	; (80068a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80067fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006802:	091b      	lsrs	r3, r3, #4
 8006804:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4b26      	ldr	r3, [pc, #152]	; (80068a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800680a:	4413      	add	r3, r2
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	461a      	mov	r2, r3
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a24      	ldr	r2, [pc, #144]	; (80068a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006818:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	f003 031f 	and.w	r3, r3, #31
 8006820:	2201      	movs	r2, #1
 8006822:	409a      	lsls	r2, r3
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006828:	e024      	b.n	8006874 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
 8006830:	3b10      	subs	r3, #16
 8006832:	4a1e      	ldr	r2, [pc, #120]	; (80068ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006834:	fba2 2303 	umull	r2, r3, r2, r3
 8006838:	091b      	lsrs	r3, r3, #4
 800683a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	4a1c      	ldr	r2, [pc, #112]	; (80068b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006840:	4293      	cmp	r3, r2
 8006842:	d806      	bhi.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006844:	68bb      	ldr	r3, [r7, #8]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d902      	bls.n	8006852 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	3308      	adds	r3, #8
 8006850:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4b18      	ldr	r3, [pc, #96]	; (80068b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006856:	4413      	add	r3, r2
 8006858:	009b      	lsls	r3, r3, #2
 800685a:	461a      	mov	r2, r3
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a16      	ldr	r2, [pc, #88]	; (80068bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006864:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f003 031f 	and.w	r3, r3, #31
 800686c:	2201      	movs	r2, #1
 800686e:	409a      	lsls	r2, r3
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006874:	bf00      	nop
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	58025408 	.word	0x58025408
 8006884:	5802541c 	.word	0x5802541c
 8006888:	58025430 	.word	0x58025430
 800688c:	58025444 	.word	0x58025444
 8006890:	58025458 	.word	0x58025458
 8006894:	5802546c 	.word	0x5802546c
 8006898:	58025480 	.word	0x58025480
 800689c:	58025494 	.word	0x58025494
 80068a0:	cccccccd 	.word	0xcccccccd
 80068a4:	16009600 	.word	0x16009600
 80068a8:	58025880 	.word	0x58025880
 80068ac:	aaaaaaab 	.word	0xaaaaaaab
 80068b0:	400204b8 	.word	0x400204b8
 80068b4:	4002040f 	.word	0x4002040f
 80068b8:	10008200 	.word	0x10008200
 80068bc:	40020880 	.word	0x40020880

080068c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b085      	sub	sp, #20
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d04a      	beq.n	800696c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	2b08      	cmp	r3, #8
 80068da:	d847      	bhi.n	800696c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a25      	ldr	r2, [pc, #148]	; (8006978 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d022      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a24      	ldr	r2, [pc, #144]	; (800697c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d01d      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	4a22      	ldr	r2, [pc, #136]	; (8006980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d018      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4a21      	ldr	r2, [pc, #132]	; (8006984 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d013      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	4a1f      	ldr	r2, [pc, #124]	; (8006988 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d00e      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a1e      	ldr	r2, [pc, #120]	; (800698c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d009      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a1c      	ldr	r2, [pc, #112]	; (8006990 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d004      	beq.n	800692c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a1b      	ldr	r2, [pc, #108]	; (8006994 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d101      	bne.n	8006930 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800692c:	2301      	movs	r3, #1
 800692e:	e000      	b.n	8006932 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006930:	2300      	movs	r3, #0
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00a      	beq.n	800694c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	4b17      	ldr	r3, [pc, #92]	; (8006998 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800693a:	4413      	add	r3, r2
 800693c:	009b      	lsls	r3, r3, #2
 800693e:	461a      	mov	r2, r3
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	4a15      	ldr	r2, [pc, #84]	; (800699c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006948:	671a      	str	r2, [r3, #112]	; 0x70
 800694a:	e009      	b.n	8006960 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	4b14      	ldr	r3, [pc, #80]	; (80069a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006950:	4413      	add	r3, r2
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	461a      	mov	r2, r3
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a11      	ldr	r2, [pc, #68]	; (80069a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800695e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	3b01      	subs	r3, #1
 8006964:	2201      	movs	r2, #1
 8006966:	409a      	lsls	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800696c:	bf00      	nop
 800696e:	3714      	adds	r7, #20
 8006970:	46bd      	mov	sp, r7
 8006972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006976:	4770      	bx	lr
 8006978:	58025408 	.word	0x58025408
 800697c:	5802541c 	.word	0x5802541c
 8006980:	58025430 	.word	0x58025430
 8006984:	58025444 	.word	0x58025444
 8006988:	58025458 	.word	0x58025458
 800698c:	5802546c 	.word	0x5802546c
 8006990:	58025480 	.word	0x58025480
 8006994:	58025494 	.word	0x58025494
 8006998:	1600963f 	.word	0x1600963f
 800699c:	58025940 	.word	0x58025940
 80069a0:	1000823f 	.word	0x1000823f
 80069a4:	40020940 	.word	0x40020940

080069a8 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b098      	sub	sp, #96	; 0x60
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80069b0:	4a84      	ldr	r2, [pc, #528]	; (8006bc4 <HAL_FDCAN_Init+0x21c>)
 80069b2:	f107 030c 	add.w	r3, r7, #12
 80069b6:	4611      	mov	r1, r2
 80069b8:	224c      	movs	r2, #76	; 0x4c
 80069ba:	4618      	mov	r0, r3
 80069bc:	f012 fd28 	bl	8019410 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d101      	bne.n	80069ca <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80069c6:	2301      	movs	r3, #1
 80069c8:	e1ca      	b.n	8006d60 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a7e      	ldr	r2, [pc, #504]	; (8006bc8 <HAL_FDCAN_Init+0x220>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d106      	bne.n	80069e2 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80069dc:	461a      	mov	r2, r3
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d106      	bne.n	80069fc <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f7fd f94e 	bl	8003c98 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	699a      	ldr	r2, [r3, #24]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f022 0210 	bic.w	r2, r2, #16
 8006a0a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a0c:	f7fd fdaa 	bl	8004564 <HAL_GetTick>
 8006a10:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a12:	e014      	b.n	8006a3e <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a14:	f7fd fda6 	bl	8004564 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	2b0a      	cmp	r3, #10
 8006a20:	d90d      	bls.n	8006a3e <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a28:	f043 0201 	orr.w	r2, r3, #1
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2203      	movs	r2, #3
 8006a36:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e190      	b.n	8006d60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	699b      	ldr	r3, [r3, #24]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d0e3      	beq.n	8006a14 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	699a      	ldr	r2, [r3, #24]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f042 0201 	orr.w	r2, r2, #1
 8006a5a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006a5c:	f7fd fd82 	bl	8004564 <HAL_GetTick>
 8006a60:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a62:	e014      	b.n	8006a8e <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8006a64:	f7fd fd7e 	bl	8004564 <HAL_GetTick>
 8006a68:	4602      	mov	r2, r0
 8006a6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a6c:	1ad3      	subs	r3, r2, r3
 8006a6e:	2b0a      	cmp	r3, #10
 8006a70:	d90d      	bls.n	8006a8e <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006a78:	f043 0201 	orr.w	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2203      	movs	r2, #3
 8006a86:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	e168      	b.n	8006d60 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	699b      	ldr	r3, [r3, #24]
 8006a94:	f003 0301 	and.w	r3, r3, #1
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d0e3      	beq.n	8006a64 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	699a      	ldr	r2, [r3, #24]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f042 0202 	orr.w	r2, r2, #2
 8006aaa:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	7c1b      	ldrb	r3, [r3, #16]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d108      	bne.n	8006ac6 <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	699a      	ldr	r2, [r3, #24]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ac2:	619a      	str	r2, [r3, #24]
 8006ac4:	e007      	b.n	8006ad6 <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	699a      	ldr	r2, [r3, #24]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ad4:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	7c5b      	ldrb	r3, [r3, #17]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d108      	bne.n	8006af0 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	699a      	ldr	r2, [r3, #24]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aec:	619a      	str	r2, [r3, #24]
 8006aee:	e007      	b.n	8006b00 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006afe:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	7c9b      	ldrb	r3, [r3, #18]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d108      	bne.n	8006b1a <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	699a      	ldr	r2, [r3, #24]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006b16:	619a      	str	r2, [r3, #24]
 8006b18:	e007      	b.n	8006b2a <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b28:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689a      	ldr	r2, [r3, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	430a      	orrs	r2, r1
 8006b3e:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	699a      	ldr	r2, [r3, #24]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8006b4e:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	691a      	ldr	r2, [r3, #16]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f022 0210 	bic.w	r2, r2, #16
 8006b5e:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	68db      	ldr	r3, [r3, #12]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d108      	bne.n	8006b7a <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	699a      	ldr	r2, [r3, #24]
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f042 0204 	orr.w	r2, r2, #4
 8006b76:	619a      	str	r2, [r3, #24]
 8006b78:	e030      	b.n	8006bdc <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d02c      	beq.n	8006bdc <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	68db      	ldr	r3, [r3, #12]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d020      	beq.n	8006bcc <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	699a      	ldr	r2, [r3, #24]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006b98:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	691a      	ldr	r2, [r3, #16]
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f042 0210 	orr.w	r2, r2, #16
 8006ba8:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	2b03      	cmp	r3, #3
 8006bb0:	d114      	bne.n	8006bdc <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	699a      	ldr	r2, [r3, #24]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f042 0220 	orr.w	r2, r2, #32
 8006bc0:	619a      	str	r2, [r3, #24]
 8006bc2:	e00b      	b.n	8006bdc <HAL_FDCAN_Init+0x234>
 8006bc4:	0801adf0 	.word	0x0801adf0
 8006bc8:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f042 0220 	orr.w	r2, r2, #32
 8006bda:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	3b01      	subs	r3, #1
 8006bea:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006bec:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8006bf4:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	3b01      	subs	r3, #1
 8006bfe:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8006c04:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8006c06:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	689b      	ldr	r3, [r3, #8]
 8006c0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c10:	d115      	bne.n	8006c3e <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c16:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c20:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c26:	3b01      	subs	r3, #1
 8006c28:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8006c2a:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	3b01      	subs	r3, #1
 8006c34:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8006c3a:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8006c3c:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d00a      	beq.n	8006c5c <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	430a      	orrs	r2, r1
 8006c58:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c64:	4413      	add	r3, r2
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d012      	beq.n	8006c90 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8006c72:	f023 0107 	bic.w	r1, r3, #7
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006c80:	4413      	add	r3, r2
 8006c82:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	430a      	orrs	r2, r1
 8006c8c:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d012      	beq.n	8006cbe <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006ca0:	f023 0107 	bic.w	r1, r3, #7
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cae:	4413      	add	r3, r2
 8006cb0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	430a      	orrs	r2, r1
 8006cba:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d013      	beq.n	8006cee <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cce:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	009b      	lsls	r3, r3, #2
 8006cd8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006cdc:	4413      	add	r3, r2
 8006cde:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006ce2:	011a      	lsls	r2, r3, #4
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	430a      	orrs	r2, r1
 8006cea:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d013      	beq.n	8006d1e <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8006cfe:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8006d0c:	4413      	add	r3, r2
 8006d0e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8006d12:	021a      	lsls	r2, r3, #8
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	4a11      	ldr	r2, [pc, #68]	; (8006d68 <HAL_FDCAN_Init+0x3c0>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d107      	bne.n	8006d38 <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	689a      	ldr	r2, [r3, #8]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	f022 0203 	bic.w	r2, r2, #3
 8006d36:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f000 fddf 	bl	8007914 <FDCAN_CalcultateRamBlockAddresses>
 8006d56:	4603      	mov	r3, r0
 8006d58:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8006d5c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3760      	adds	r7, #96	; 0x60
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}
 8006d68:	4000a000 	.word	0x4000a000

08006d6c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006d7c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8006d7e:	7bfb      	ldrb	r3, [r7, #15]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d002      	beq.n	8006d8a <HAL_FDCAN_ConfigFilter+0x1e>
 8006d84:	7bfb      	ldrb	r3, [r7, #15]
 8006d86:	2b02      	cmp	r3, #2
 8006d88:	d157      	bne.n	8006e3a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d12b      	bne.n	8006dea <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	2b07      	cmp	r3, #7
 8006d98:	d10d      	bne.n	8006db6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8006d9a:	683b      	ldr	r3, [r7, #0]
 8006d9c:	691b      	ldr	r3, [r3, #16]
 8006d9e:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	69db      	ldr	r3, [r3, #28]
 8006da4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8006da6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8006dac:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8006dae:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e00e      	b.n	8006dd4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	68db      	ldr	r3, [r3, #12]
 8006dc0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006dc2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8006dca:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	009b      	lsls	r3, r3, #2
 8006dde:	4413      	add	r3, r2
 8006de0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	697a      	ldr	r2, [r7, #20]
 8006de6:	601a      	str	r2, [r3, #0]
 8006de8:	e025      	b.n	8006e36 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	68db      	ldr	r3, [r3, #12]
 8006dee:	075a      	lsls	r2, r3, #29
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	691b      	ldr	r3, [r3, #16]
 8006df4:	4313      	orrs	r3, r2
 8006df6:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	68db      	ldr	r3, [r3, #12]
 8006dfc:	2b07      	cmp	r3, #7
 8006dfe:	d103      	bne.n	8006e08 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	699b      	ldr	r3, [r3, #24]
 8006e04:	613b      	str	r3, [r7, #16]
 8006e06:	e006      	b.n	8006e16 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8006e08:	683b      	ldr	r3, [r7, #0]
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	079a      	lsls	r2, r3, #30
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	695b      	ldr	r3, [r3, #20]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	4413      	add	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8006e24:	68bb      	ldr	r3, [r7, #8]
 8006e26:	697a      	ldr	r2, [r7, #20]
 8006e28:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8006e30:	68bb      	ldr	r3, [r7, #8]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8006e36:	2300      	movs	r3, #0
 8006e38:	e008      	b.n	8006e4c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e40:	f043 0202 	orr.w	r2, r3, #2
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006e4a:	2301      	movs	r3, #1
  }
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	371c      	adds	r7, #28
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr

08006e58 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b085      	sub	sp, #20
 8006e5c:	af00      	add	r7, sp, #0
 8006e5e:	60f8      	str	r0, [r7, #12]
 8006e60:	60b9      	str	r1, [r7, #8]
 8006e62:	607a      	str	r2, [r7, #4]
 8006e64:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006e6c:	b2db      	uxtb	r3, r3
 8006e6e:	2b01      	cmp	r3, #1
 8006e70:	d110      	bne.n	8006e94 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e7a:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8006e80:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8006e88:	69ba      	ldr	r2, [r7, #24]
 8006e8a:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8006e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8006e90:	2300      	movs	r3, #0
 8006e92:	e008      	b.n	8006ea6 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006e9a:	f043 0204 	orr.w	r2, r3, #4
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006ea4:	2301      	movs	r3, #1
  }
}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3714      	adds	r7, #20
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb0:	4770      	bx	lr

08006eb2 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8006eb2:	b480      	push	{r7}
 8006eb4:	b083      	sub	sp, #12
 8006eb6:	af00      	add	r7, sp, #0
 8006eb8:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006ec0:	b2db      	uxtb	r3, r3
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	d109      	bne.n	8006eda <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68da      	ldr	r2, [r3, #12]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8006ed4:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	e008      	b.n	8006eec <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006ee0:	f043 0204 	orr.w	r2, r3, #4
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
  }
}
 8006eec:	4618      	mov	r0, r3
 8006eee:	370c      	adds	r7, #12
 8006ef0:	46bd      	mov	sp, r7
 8006ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef6:	4770      	bx	lr

08006ef8 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8006ef8:	b480      	push	{r7}
 8006efa:	b083      	sub	sp, #12
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f06:	b2db      	uxtb	r3, r3
 8006f08:	2b01      	cmp	r3, #1
 8006f0a:	d111      	bne.n	8006f30 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	699a      	ldr	r2, [r3, #24]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f022 0201 	bic.w	r2, r2, #1
 8006f22:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	e008      	b.n	8006f42 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f36:	f043 0204 	orr.w	r2, r3, #4
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
  }
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
	...

08006f50 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b08b      	sub	sp, #44	; 0x2c
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8006f68:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 8006f6a:	7efb      	ldrb	r3, [r7, #27]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	f040 813b 	bne.w	80071e8 <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2b40      	cmp	r3, #64	; 0x40
 8006f76:	d145      	bne.n	8007004 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8006f80:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d109      	bne.n	8006f9c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006f8e:	f043 0220 	orr.w	r2, r3, #32
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	e12e      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fa4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d109      	bne.n	8006fc0 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fb2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	e11c      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fc8:	0e1b      	lsrs	r3, r3, #24
 8006fca:	f003 0301 	and.w	r3, r3, #1
 8006fce:	2b01      	cmp	r3, #1
 8006fd0:	d103      	bne.n	8006fda <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006fe2:	0a1b      	lsrs	r3, r3, #8
 8006fe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fe8:	69fa      	ldr	r2, [r7, #28]
 8006fea:	4413      	add	r3, r2
 8006fec:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ff6:	69f9      	ldr	r1, [r7, #28]
 8006ff8:	fb01 f303 	mul.w	r3, r1, r3
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	4413      	add	r3, r2
 8007000:	627b      	str	r3, [r7, #36]	; 0x24
 8007002:	e061      	b.n	80070c8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b41      	cmp	r3, #65	; 0x41
 8007008:	d145      	bne.n	8007096 <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007012:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d109      	bne.n	800702e <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007020:	f043 0220 	orr.w	r2, r3, #32
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800702a:	2301      	movs	r3, #1
 800702c:	e0e5      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800703a:	2b00      	cmp	r3, #0
 800703c:	d109      	bne.n	8007052 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007044:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0d3      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800705a:	0e1b      	lsrs	r3, r3, #24
 800705c:	f003 0301 	and.w	r3, r3, #1
 8007060:	2b01      	cmp	r3, #1
 8007062:	d103      	bne.n	800706c <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007074:	0a1b      	lsrs	r3, r3, #8
 8007076:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	4413      	add	r3, r2
 800707e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007088:	69f9      	ldr	r1, [r7, #28]
 800708a:	fb01 f303 	mul.w	r3, r1, r3
 800708e:	009b      	lsls	r3, r3, #2
 8007090:	4413      	add	r3, r2
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
 8007094:	e018      	b.n	80070c8 <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	429a      	cmp	r2, r3
 800709e:	d309      	bcc.n	80070b4 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80070a6:	f043 0220 	orr.w	r2, r3, #32
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e0a2      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070bc:	68b9      	ldr	r1, [r7, #8]
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	4413      	add	r3, r2
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80070c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d107      	bne.n	80070ec <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80070dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	0c9b      	lsrs	r3, r3, #18
 80070e2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	601a      	str	r2, [r3, #0]
 80070ea:	e005      	b.n	80070f8 <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80070ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80070f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8007110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007112:	3304      	adds	r3, #4
 8007114:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	b29a      	uxth	r2, r3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8007120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800712c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8007144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	0e1b      	lsrs	r3, r3, #24
 800714a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8007152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	0fda      	lsrs	r2, r3, #31
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800715c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800715e:	3304      	adds	r3, #4
 8007160:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8007166:	2300      	movs	r3, #0
 8007168:	623b      	str	r3, [r7, #32]
 800716a:	e00a      	b.n	8007182 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800716c:	697a      	ldr	r2, [r7, #20]
 800716e:	6a3b      	ldr	r3, [r7, #32]
 8007170:	441a      	add	r2, r3
 8007172:	6839      	ldr	r1, [r7, #0]
 8007174:	6a3b      	ldr	r3, [r7, #32]
 8007176:	440b      	add	r3, r1
 8007178:	7812      	ldrb	r2, [r2, #0]
 800717a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	3301      	adds	r3, #1
 8007180:	623b      	str	r3, [r7, #32]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	0c1b      	lsrs	r3, r3, #16
 8007188:	4a1f      	ldr	r2, [pc, #124]	; (8007208 <HAL_FDCAN_GetRxMessage+0x2b8>)
 800718a:	5cd3      	ldrb	r3, [r2, r3]
 800718c:	461a      	mov	r2, r3
 800718e:	6a3b      	ldr	r3, [r7, #32]
 8007190:	4293      	cmp	r3, r2
 8007192:	d3eb      	bcc.n	800716c <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b40      	cmp	r3, #64	; 0x40
 8007198:	d105      	bne.n	80071a6 <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69fa      	ldr	r2, [r7, #28]
 80071a0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80071a4:	e01e      	b.n	80071e4 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80071a6:	68bb      	ldr	r3, [r7, #8]
 80071a8:	2b41      	cmp	r3, #65	; 0x41
 80071aa:	d105      	bne.n	80071b8 <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69fa      	ldr	r2, [r7, #28]
 80071b2:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80071b6:	e015      	b.n	80071e4 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	2b1f      	cmp	r3, #31
 80071bc:	d808      	bhi.n	80071d0 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2101      	movs	r1, #1
 80071c4:	68ba      	ldr	r2, [r7, #8]
 80071c6:	fa01 f202 	lsl.w	r2, r1, r2
 80071ca:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80071ce:	e009      	b.n	80071e4 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	f003 021f 	and.w	r2, r3, #31
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2101      	movs	r1, #1
 80071dc:	fa01 f202 	lsl.w	r2, r1, r2
 80071e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80071e4:	2300      	movs	r3, #0
 80071e6:	e008      	b.n	80071fa <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80071ee:	f043 0208 	orr.w	r2, r3, #8
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80071f8:	2301      	movs	r3, #1
  }
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	372c      	adds	r7, #44	; 0x2c
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	0801aeec 	.word	0x0801aeec

0800720c <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 800720c:	b480      	push	{r7}
 800720e:	b087      	sub	sp, #28
 8007210:	af00      	add	r7, sp, #0
 8007212:	60f8      	str	r0, [r7, #12]
 8007214:	60b9      	str	r1, [r7, #8]
 8007216:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800721e:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007220:	7dfb      	ldrb	r3, [r7, #23]
 8007222:	2b01      	cmp	r3, #1
 8007224:	d002      	beq.n	800722c <HAL_FDCAN_ActivateNotification+0x20>
 8007226:	7dfb      	ldrb	r3, [r7, #23]
 8007228:	2b02      	cmp	r3, #2
 800722a:	d155      	bne.n	80072d8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	4013      	ands	r3, r2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d108      	bne.n	800724c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f042 0201 	orr.w	r2, r2, #1
 8007248:	65da      	str	r2, [r3, #92]	; 0x5c
 800724a:	e014      	b.n	8007276 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4013      	ands	r3, r2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	d108      	bne.n	800726e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	f042 0202 	orr.w	r2, r2, #2
 800726a:	65da      	str	r2, [r3, #92]	; 0x5c
 800726c:	e003      	b.n	8007276 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	2203      	movs	r2, #3
 8007274:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800727c:	2b00      	cmp	r3, #0
 800727e:	d009      	beq.n	8007294 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	687a      	ldr	r2, [r7, #4]
 800728e:	430a      	orrs	r2, r1
 8007290:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	430a      	orrs	r2, r1
 80072ae:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80072b8:	68ba      	ldr	r2, [r7, #8]
 80072ba:	4b0f      	ldr	r3, [pc, #60]	; (80072f8 <HAL_FDCAN_ActivateNotification+0xec>)
 80072bc:	4013      	ands	r3, r2
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	430b      	orrs	r3, r1
 80072c4:	6553      	str	r3, [r2, #84]	; 0x54
 80072c6:	4b0d      	ldr	r3, [pc, #52]	; (80072fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80072c8:	695a      	ldr	r2, [r3, #20]
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	0f9b      	lsrs	r3, r3, #30
 80072ce:	490b      	ldr	r1, [pc, #44]	; (80072fc <HAL_FDCAN_ActivateNotification+0xf0>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80072d4:	2300      	movs	r3, #0
 80072d6:	e008      	b.n	80072ea <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072de:	f043 0202 	orr.w	r2, r3, #2
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
  }
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	371c      	adds	r7, #28
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr
 80072f6:	bf00      	nop
 80072f8:	3fcfffff 	.word	0x3fcfffff
 80072fc:	4000a800 	.word	0x4000a800

08007300 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b092      	sub	sp, #72	; 0x48
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007308:	4b90      	ldr	r3, [pc, #576]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 800730a:	691b      	ldr	r3, [r3, #16]
 800730c:	079b      	lsls	r3, r3, #30
 800730e:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007310:	4b8e      	ldr	r3, [pc, #568]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 8007312:	695b      	ldr	r3, [r3, #20]
 8007314:	079b      	lsls	r3, r3, #30
 8007316:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007318:	4013      	ands	r3, r2
 800731a:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007322:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007326:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007330:	4013      	ands	r3, r2
 8007332:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800733a:	f003 030f 	and.w	r3, r3, #15
 800733e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007346:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007348:	4013      	ands	r3, r2
 800734a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007356:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800735e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007360:	4013      	ands	r3, r2
 8007362:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800736a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800736e:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007376:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007378:	4013      	ands	r3, r2
 800737a:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007382:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007386:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007390:	4013      	ands	r3, r2
 8007392:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d011      	beq.n	80073c6 <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d00a      	beq.n	80073c6 <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073b8:	651a      	str	r2, [r3, #80]	; 0x50
 80073ba:	4b64      	ldr	r3, [pc, #400]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 80073bc:	2200      	movs	r2, #0
 80073be:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80073c0:	6878      	ldr	r0, [r7, #4]
 80073c2:	f000 fa5a 	bl	800787a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80073cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d01e      	beq.n	8007412 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d017      	beq.n	8007412 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80073ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80073f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80073f6:	4013      	ands	r3, r2
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007402:	651a      	str	r2, [r3, #80]	; 0x50
 8007404:	4b51      	ldr	r3, [pc, #324]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 8007406:	2200      	movs	r2, #0
 8007408:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800740a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fa0b 	bl	8007828 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007412:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007414:	2b00      	cmp	r3, #0
 8007416:	d00d      	beq.n	8007434 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800741e:	4b4c      	ldr	r3, [pc, #304]	; (8007550 <HAL_FDCAN_IRQHandler+0x250>)
 8007420:	400b      	ands	r3, r1
 8007422:	6513      	str	r3, [r2, #80]	; 0x50
 8007424:	4a49      	ldr	r2, [pc, #292]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 8007426:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007428:	0f9b      	lsrs	r3, r3, #30
 800742a:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 800742c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f000 f9c4 	bl	80077bc <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007434:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00d      	beq.n	8007456 <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007440:	4b43      	ldr	r3, [pc, #268]	; (8007550 <HAL_FDCAN_IRQHandler+0x250>)
 8007442:	400b      	ands	r3, r1
 8007444:	6513      	str	r3, [r2, #80]	; 0x50
 8007446:	4a41      	ldr	r2, [pc, #260]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 8007448:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800744a:	0f9b      	lsrs	r3, r3, #30
 800744c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800744e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 f9be 	bl	80077d2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007456:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007458:	2b00      	cmp	r3, #0
 800745a:	d00d      	beq.n	8007478 <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681a      	ldr	r2, [r3, #0]
 8007460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007462:	4b3b      	ldr	r3, [pc, #236]	; (8007550 <HAL_FDCAN_IRQHandler+0x250>)
 8007464:	400b      	ands	r3, r1
 8007466:	6513      	str	r3, [r2, #80]	; 0x50
 8007468:	4a38      	ldr	r2, [pc, #224]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 800746a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746c:	0f9b      	lsrs	r3, r3, #30
 800746e:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007470:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007472:	6878      	ldr	r0, [r7, #4]
 8007474:	f7f9 f94a 	bl	800070c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007478:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007484:	4b32      	ldr	r3, [pc, #200]	; (8007550 <HAL_FDCAN_IRQHandler+0x250>)
 8007486:	400b      	ands	r3, r1
 8007488:	6513      	str	r3, [r2, #80]	; 0x50
 800748a:	4a30      	ldr	r2, [pc, #192]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 800748c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800748e:	0f9b      	lsrs	r3, r3, #30
 8007490:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007492:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007494:	6878      	ldr	r0, [r7, #4]
 8007496:	f000 f9a7 	bl	80077e8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d011      	beq.n	80074cc <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074be:	651a      	str	r2, [r3, #80]	; 0x50
 80074c0:	4b22      	ldr	r3, [pc, #136]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f999 	bl	80077fe <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d01e      	beq.n	8007518 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d017      	beq.n	8007518 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074f0:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80074fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074fc:	4013      	ands	r3, r2
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007508:	651a      	str	r2, [r3, #80]	; 0x50
 800750a:	4b10      	ldr	r3, [pc, #64]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 800750c:	2200      	movs	r2, #0
 800750e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007510:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 f97d 	bl	8007812 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d016      	beq.n	8007554 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800752c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d00f      	beq.n	8007554 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800753c:	651a      	str	r2, [r3, #80]	; 0x50
 800753e:	4b03      	ldr	r3, [pc, #12]	; (800754c <HAL_FDCAN_IRQHandler+0x24c>)
 8007540:	2200      	movs	r2, #0
 8007542:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 f97a 	bl	800783e <HAL_FDCAN_RxBufferNewMessageCallback>
 800754a:	e003      	b.n	8007554 <HAL_FDCAN_IRQHandler+0x254>
 800754c:	4000a800 	.word	0x4000a800
 8007550:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800755a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d011      	beq.n	8007586 <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007568:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00a      	beq.n	8007586 <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007578:	651a      	str	r2, [r3, #80]	; 0x50
 800757a:	4b8d      	ldr	r3, [pc, #564]	; (80077b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800757c:	2200      	movs	r2, #0
 800757e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007580:	6878      	ldr	r0, [r7, #4]
 8007582:	f000 f966 	bl	8007852 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007590:	2b00      	cmp	r3, #0
 8007592:	d011      	beq.n	80075b8 <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d00a      	beq.n	80075b8 <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80075aa:	651a      	str	r2, [r3, #80]	; 0x50
 80075ac:	4b80      	ldr	r3, [pc, #512]	; (80077b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f957 	bl	8007866 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d016      	beq.n	80075f4 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d00f      	beq.n	80075f4 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80075dc:	651a      	str	r2, [r3, #80]	; 0x50
 80075de:	4b74      	ldr	r3, [pc, #464]	; (80077b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 80075e0:	2200      	movs	r2, #0
 80075e2:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80075ea:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80075f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d00d      	beq.n	8007616 <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007600:	4b6c      	ldr	r3, [pc, #432]	; (80077b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007602:	400b      	ands	r3, r1
 8007604:	6513      	str	r3, [r2, #80]	; 0x50
 8007606:	4a6a      	ldr	r2, [pc, #424]	; (80077b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760a:	0f9b      	lsrs	r3, r3, #30
 800760c:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800760e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007610:	6878      	ldr	r0, [r7, #4]
 8007612:	f000 f946 	bl	80078a2 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007618:	2b00      	cmp	r3, #0
 800761a:	d011      	beq.n	8007640 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681a      	ldr	r2, [r3, #0]
 8007620:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007622:	4b64      	ldr	r3, [pc, #400]	; (80077b4 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007624:	400b      	ands	r3, r1
 8007626:	6513      	str	r3, [r2, #80]	; 0x50
 8007628:	4a61      	ldr	r2, [pc, #388]	; (80077b0 <HAL_FDCAN_IRQHandler+0x4b0>)
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	0f9b      	lsrs	r3, r3, #30
 800762e:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	431a      	orrs	r2, r3
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a5c      	ldr	r2, [pc, #368]	; (80077b8 <HAL_FDCAN_IRQHandler+0x4b8>)
 8007646:	4293      	cmp	r3, r2
 8007648:	f040 80a6 	bne.w	8007798 <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	689b      	ldr	r3, [r3, #8]
 8007652:	f003 0303 	and.w	r3, r3, #3
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 809e 	beq.w	8007798 <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	6a1b      	ldr	r3, [r3, #32]
 8007662:	f003 030f 	and.w	r3, r3, #15
 8007666:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007670:	4013      	ands	r3, r2
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	685b      	ldr	r3, [r3, #4]
 8007678:	6a1b      	ldr	r3, [r3, #32]
 800767a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800767e:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007686:	6a3a      	ldr	r2, [r7, #32]
 8007688:	4013      	ands	r3, r2
 800768a:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	6a1b      	ldr	r3, [r3, #32]
 8007692:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007696:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	69fa      	ldr	r2, [r7, #28]
 80076a0:	4013      	ands	r3, r2
 80076a2:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	685b      	ldr	r3, [r3, #4]
 80076a8:	6a1b      	ldr	r3, [r3, #32]
 80076aa:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 80076ae:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	4013      	ands	r3, r2
 80076ba:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	6a1b      	ldr	r3, [r3, #32]
 80076c2:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 80076c6:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	685b      	ldr	r3, [r3, #4]
 80076cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076ce:	697a      	ldr	r2, [r7, #20]
 80076d0:	4013      	ands	r3, r2
 80076d2:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076e0:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 80076e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 f8e7 	bl	80078b8 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 80076ea:	6a3b      	ldr	r3, [r7, #32]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d007      	beq.n	8007700 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 80076f8:	6a39      	ldr	r1, [r7, #32]
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f000 f8e7 	bl	80078ce <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d01b      	beq.n	8007746 <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	6a1b      	ldr	r3, [r3, #32]
 8007714:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007718:	2b00      	cmp	r3, #0
 800771a:	d014      	beq.n	8007746 <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007722:	0c1b      	lsrs	r3, r3, #16
 8007724:	b29b      	uxth	r3, r3
 8007726:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	685b      	ldr	r3, [r3, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800772e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007732:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	2240      	movs	r2, #64	; 0x40
 800773a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800773c:	68fa      	ldr	r2, [r7, #12]
 800773e:	6939      	ldr	r1, [r7, #16]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f000 f8cf 	bl	80078e4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007746:	69fb      	ldr	r3, [r7, #28]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d007      	beq.n	800775c <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	69fa      	ldr	r2, [r7, #28]
 8007752:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007754:	69f9      	ldr	r1, [r7, #28]
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f8d0 	bl	80078fc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800775c:	69bb      	ldr	r3, [r7, #24]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d00b      	beq.n	800777a <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	685b      	ldr	r3, [r3, #4]
 8007766:	69ba      	ldr	r2, [r7, #24]
 8007768:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007770:	69bb      	ldr	r3, [r7, #24]
 8007772:	431a      	orrs	r2, r3
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800777a:	697b      	ldr	r3, [r7, #20]
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00b      	beq.n	8007798 <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	697a      	ldr	r2, [r7, #20]
 8007786:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	431a      	orrs	r2, r3
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d002      	beq.n	80077a8 <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 f873 	bl	800788e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80077a8:	bf00      	nop
 80077aa:	3748      	adds	r7, #72	; 0x48
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	4000a800 	.word	0x4000a800
 80077b4:	3fcfffff 	.word	0x3fcfffff
 80077b8:	4000a000 	.word	0x4000a000

080077bc <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 80077c6:	bf00      	nop
 80077c8:	370c      	adds	r7, #12
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr

080077d2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 80077d2:	b480      	push	{r7}
 80077d4:	b083      	sub	sp, #12
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
 80077da:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
 80077f0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 80077f2:	bf00      	nop
 80077f4:	370c      	adds	r7, #12
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80077fe:	b480      	push	{r7}
 8007800:	b083      	sub	sp, #12
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8007806:	bf00      	nop
 8007808:	370c      	adds	r7, #12
 800780a:	46bd      	mov	sp, r7
 800780c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007810:	4770      	bx	lr

08007812 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007812:	b480      	push	{r7}
 8007814:	b083      	sub	sp, #12
 8007816:	af00      	add	r7, sp, #0
 8007818:	6078      	str	r0, [r7, #4]
 800781a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8007828:	b480      	push	{r7}
 800782a:	b083      	sub	sp, #12
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
 8007830:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8007832:	bf00      	nop
 8007834:	370c      	adds	r7, #12
 8007836:	46bd      	mov	sp, r7
 8007838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800783c:	4770      	bx	lr

0800783e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800783e:	b480      	push	{r7}
 8007840:	b083      	sub	sp, #12
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8007846:	bf00      	nop
 8007848:	370c      	adds	r7, #12
 800784a:	46bd      	mov	sp, r7
 800784c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007850:	4770      	bx	lr

08007852 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007852:	b480      	push	{r7}
 8007854:	b083      	sub	sp, #12
 8007856:	af00      	add	r7, sp, #0
 8007858:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800785a:	bf00      	nop
 800785c:	370c      	adds	r7, #12
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8007866:	b480      	push	{r7}
 8007868:	b083      	sub	sp, #12
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800786e:	bf00      	nop
 8007870:	370c      	adds	r7, #12
 8007872:	46bd      	mov	sp, r7
 8007874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007878:	4770      	bx	lr

0800787a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800787a:	b480      	push	{r7}
 800787c:	b083      	sub	sp, #12
 800787e:	af00      	add	r7, sp, #0
 8007880:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8007882:	bf00      	nop
 8007884:	370c      	adds	r7, #12
 8007886:	46bd      	mov	sp, r7
 8007888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788c:	4770      	bx	lr

0800788e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800788e:	b480      	push	{r7}
 8007890:	b083      	sub	sp, #12
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8007896:	bf00      	nop
 8007898:	370c      	adds	r7, #12
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr

080078a2 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80078a2:	b480      	push	{r7}
 80078a4:	b083      	sub	sp, #12
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
 80078aa:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80078ac:	bf00      	nop
 80078ae:	370c      	adds	r7, #12
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 80078b8:	b480      	push	{r7}
 80078ba:	b083      	sub	sp, #12
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 80078c2:	bf00      	nop
 80078c4:	370c      	adds	r7, #12
 80078c6:	46bd      	mov	sp, r7
 80078c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078cc:	4770      	bx	lr

080078ce <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 80078ce:	b480      	push	{r7}
 80078d0:	b083      	sub	sp, #12
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 80078d8:	bf00      	nop
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b085      	sub	sp, #20
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	60b9      	str	r1, [r7, #8]
 80078ee:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 80078f0:	bf00      	nop
 80078f2:	3714      	adds	r7, #20
 80078f4:	46bd      	mov	sp, r7
 80078f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fa:	4770      	bx	lr

080078fc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b083      	sub	sp, #12
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
	...

08007914 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8007914:	b480      	push	{r7}
 8007916:	b085      	sub	sp, #20
 8007918:	af00      	add	r7, sp, #0
 800791a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007920:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800792a:	4ba7      	ldr	r3, [pc, #668]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800792c:	4013      	ands	r3, r2
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	0091      	lsls	r1, r2, #2
 8007932:	687a      	ldr	r2, [r7, #4]
 8007934:	6812      	ldr	r2, [r2, #0]
 8007936:	430b      	orrs	r3, r1
 8007938:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007944:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800794c:	041a      	lsls	r2, r3, #16
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	430a      	orrs	r2, r1
 8007954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800796a:	4b97      	ldr	r3, [pc, #604]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800796c:	4013      	ands	r3, r2
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	0091      	lsls	r1, r2, #2
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	6812      	ldr	r2, [r2, #0]
 8007976:	430b      	orrs	r3, r1
 8007978:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007984:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800798c:	041a      	lsls	r2, r3, #16
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800799c:	005b      	lsls	r3, r3, #1
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 80079ac:	4b86      	ldr	r3, [pc, #536]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079ae:	4013      	ands	r3, r2
 80079b0:	68ba      	ldr	r2, [r7, #8]
 80079b2:	0091      	lsls	r1, r2, #2
 80079b4:	687a      	ldr	r2, [r7, #4]
 80079b6:	6812      	ldr	r2, [r2, #0]
 80079b8:	430b      	orrs	r3, r1
 80079ba:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80079c6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079ce:	041a      	lsls	r2, r3, #16
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	430a      	orrs	r2, r1
 80079d6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80079e2:	fb02 f303 	mul.w	r3, r2, r3
 80079e6:	68ba      	ldr	r2, [r7, #8]
 80079e8:	4413      	add	r3, r2
 80079ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80079f4:	4b74      	ldr	r3, [pc, #464]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80079f6:	4013      	ands	r3, r2
 80079f8:	68ba      	ldr	r2, [r7, #8]
 80079fa:	0091      	lsls	r1, r2, #2
 80079fc:	687a      	ldr	r2, [r7, #4]
 80079fe:	6812      	ldr	r2, [r2, #0]
 8007a00:	430b      	orrs	r3, r1
 8007a02:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007a0e:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a16:	041a      	lsls	r2, r3, #16
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	430a      	orrs	r2, r1
 8007a1e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007a2a:	fb02 f303 	mul.w	r3, r2, r3
 8007a2e:	68ba      	ldr	r2, [r7, #8]
 8007a30:	4413      	add	r3, r2
 8007a32:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007a3c:	4b62      	ldr	r3, [pc, #392]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a3e:	4013      	ands	r3, r2
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	0091      	lsls	r1, r2, #2
 8007a44:	687a      	ldr	r2, [r7, #4]
 8007a46:	6812      	ldr	r2, [r2, #0]
 8007a48:	430b      	orrs	r3, r1
 8007a4a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a52:	687a      	ldr	r2, [r7, #4]
 8007a54:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007a56:	fb02 f303 	mul.w	r3, r2, r3
 8007a5a:	68ba      	ldr	r2, [r7, #8]
 8007a5c:	4413      	add	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8007a68:	4b57      	ldr	r3, [pc, #348]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007a6a:	4013      	ands	r3, r2
 8007a6c:	68ba      	ldr	r2, [r7, #8]
 8007a6e:	0091      	lsls	r1, r2, #2
 8007a70:	687a      	ldr	r2, [r7, #4]
 8007a72:	6812      	ldr	r2, [r2, #0]
 8007a74:	430b      	orrs	r3, r1
 8007a76:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007a82:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8a:	041a      	lsls	r2, r3, #16
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	430a      	orrs	r2, r1
 8007a92:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a9a:	005b      	lsls	r3, r3, #1
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8007aaa:	4b47      	ldr	r3, [pc, #284]	; (8007bc8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8007aac:	4013      	ands	r3, r2
 8007aae:	68ba      	ldr	r2, [r7, #8]
 8007ab0:	0091      	lsls	r1, r2, #2
 8007ab2:	687a      	ldr	r2, [r7, #4]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	430b      	orrs	r3, r1
 8007ab8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ac4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007acc:	041a      	lsls	r2, r3, #16
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007ae0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ae8:	061a      	lsls	r2, r3, #24
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	430a      	orrs	r2, r1
 8007af0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007af8:	4b34      	ldr	r3, [pc, #208]	; (8007bcc <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8007afa:	4413      	add	r3, r2
 8007afc:	009a      	lsls	r2, r3, #2
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b0a:	009b      	lsls	r3, r3, #2
 8007b0c:	441a      	add	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	00db      	lsls	r3, r3, #3
 8007b1c:	441a      	add	r2, r3
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b2a:	6879      	ldr	r1, [r7, #4]
 8007b2c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8007b2e:	fb01 f303 	mul.w	r3, r1, r3
 8007b32:	009b      	lsls	r3, r3, #2
 8007b34:	441a      	add	r2, r3
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b42:	6879      	ldr	r1, [r7, #4]
 8007b44:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8007b46:	fb01 f303 	mul.w	r3, r1, r3
 8007b4a:	009b      	lsls	r3, r3, #2
 8007b4c:	441a      	add	r2, r3
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5a:	6879      	ldr	r1, [r7, #4]
 8007b5c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8007b5e:	fb01 f303 	mul.w	r3, r1, r3
 8007b62:	009b      	lsls	r3, r3, #2
 8007b64:	441a      	add	r2, r3
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b76:	00db      	lsls	r3, r3, #3
 8007b78:	441a      	add	r2, r3
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b8a:	6879      	ldr	r1, [r7, #4]
 8007b8c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007b8e:	fb01 f303 	mul.w	r3, r1, r3
 8007b92:	009b      	lsls	r3, r3, #2
 8007b94:	441a      	add	r2, r3
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8007baa:	fb01 f303 	mul.w	r3, r1, r3
 8007bae:	009b      	lsls	r3, r3, #2
 8007bb0:	441a      	add	r2, r3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bbe:	4a04      	ldr	r2, [pc, #16]	; (8007bd0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d915      	bls.n	8007bf0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8007bc4:	e006      	b.n	8007bd4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8007bc6:	bf00      	nop
 8007bc8:	ffff0003 	.word	0xffff0003
 8007bcc:	10002b00 	.word	0x10002b00
 8007bd0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007bda:	f043 0220 	orr.w	r2, r3, #32
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2203      	movs	r2, #3
 8007be8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e010      	b.n	8007c12 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bf4:	60fb      	str	r3, [r7, #12]
 8007bf6:	e005      	b.n	8007c04 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	2200      	movs	r2, #0
 8007bfc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	3304      	adds	r3, #4
 8007c02:	60fb      	str	r3, [r7, #12]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	429a      	cmp	r2, r3
 8007c0e:	d3f3      	bcc.n	8007bf8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop

08007c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	; 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007c2e:	4b89      	ldr	r3, [pc, #548]	; (8007e54 <HAL_GPIO_Init+0x234>)
 8007c30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007c32:	e194      	b.n	8007f5e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	2101      	movs	r1, #1
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c40:	4013      	ands	r3, r2
 8007c42:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	f000 8186 	beq.w	8007f58 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d00b      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d007      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007c60:	2b11      	cmp	r3, #17
 8007c62:	d003      	beq.n	8007c6c <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	685b      	ldr	r3, [r3, #4]
 8007c68:	2b12      	cmp	r3, #18
 8007c6a:	d130      	bne.n	8007cce <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007c72:	69fb      	ldr	r3, [r7, #28]
 8007c74:	005b      	lsls	r3, r3, #1
 8007c76:	2203      	movs	r2, #3
 8007c78:	fa02 f303 	lsl.w	r3, r2, r3
 8007c7c:	43db      	mvns	r3, r3
 8007c7e:	69ba      	ldr	r2, [r7, #24]
 8007c80:	4013      	ands	r3, r2
 8007c82:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	68da      	ldr	r2, [r3, #12]
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	005b      	lsls	r3, r3, #1
 8007c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c90:	69ba      	ldr	r2, [r7, #24]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	69ba      	ldr	r2, [r7, #24]
 8007c9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	685b      	ldr	r3, [r3, #4]
 8007ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	69fb      	ldr	r3, [r7, #28]
 8007ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8007caa:	43db      	mvns	r3, r3
 8007cac:	69ba      	ldr	r2, [r7, #24]
 8007cae:	4013      	ands	r3, r2
 8007cb0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	091b      	lsrs	r3, r3, #4
 8007cb8:	f003 0201 	and.w	r2, r3, #1
 8007cbc:	69fb      	ldr	r3, [r7, #28]
 8007cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8007cc2:	69ba      	ldr	r2, [r7, #24]
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	69ba      	ldr	r2, [r7, #24]
 8007ccc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	2203      	movs	r2, #3
 8007cda:	fa02 f303 	lsl.w	r3, r2, r3
 8007cde:	43db      	mvns	r3, r3
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	689a      	ldr	r2, [r3, #8]
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	005b      	lsls	r3, r3, #1
 8007cee:	fa02 f303 	lsl.w	r3, r2, r3
 8007cf2:	69ba      	ldr	r2, [r7, #24]
 8007cf4:	4313      	orrs	r3, r2
 8007cf6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d003      	beq.n	8007d0e <HAL_GPIO_Init+0xee>
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	2b12      	cmp	r3, #18
 8007d0c:	d123      	bne.n	8007d56 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d0e:	69fb      	ldr	r3, [r7, #28]
 8007d10:	08da      	lsrs	r2, r3, #3
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	3208      	adds	r2, #8
 8007d16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d1c:	69fb      	ldr	r3, [r7, #28]
 8007d1e:	f003 0307 	and.w	r3, r3, #7
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	220f      	movs	r2, #15
 8007d26:	fa02 f303 	lsl.w	r3, r2, r3
 8007d2a:	43db      	mvns	r3, r3
 8007d2c:	69ba      	ldr	r2, [r7, #24]
 8007d2e:	4013      	ands	r3, r2
 8007d30:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007d32:	683b      	ldr	r3, [r7, #0]
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f003 0307 	and.w	r3, r3, #7
 8007d3c:	009b      	lsls	r3, r3, #2
 8007d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d42:	69ba      	ldr	r2, [r7, #24]
 8007d44:	4313      	orrs	r3, r2
 8007d46:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007d48:	69fb      	ldr	r3, [r7, #28]
 8007d4a:	08da      	lsrs	r2, r3, #3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	3208      	adds	r2, #8
 8007d50:	69b9      	ldr	r1, [r7, #24]
 8007d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007d5c:	69fb      	ldr	r3, [r7, #28]
 8007d5e:	005b      	lsls	r3, r3, #1
 8007d60:	2203      	movs	r2, #3
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	43db      	mvns	r3, r3
 8007d68:	69ba      	ldr	r2, [r7, #24]
 8007d6a:	4013      	ands	r3, r2
 8007d6c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	f003 0203 	and.w	r2, r3, #3
 8007d76:	69fb      	ldr	r3, [r7, #28]
 8007d78:	005b      	lsls	r3, r3, #1
 8007d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	4313      	orrs	r3, r2
 8007d82:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	69ba      	ldr	r2, [r7, #24]
 8007d88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	685b      	ldr	r3, [r3, #4]
 8007d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	f000 80e0 	beq.w	8007f58 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d98:	4b2f      	ldr	r3, [pc, #188]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007d9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007d9e:	4a2e      	ldr	r2, [pc, #184]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007da0:	f043 0302 	orr.w	r3, r3, #2
 8007da4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007da8:	4b2b      	ldr	r3, [pc, #172]	; (8007e58 <HAL_GPIO_Init+0x238>)
 8007daa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	60fb      	str	r3, [r7, #12]
 8007db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007db6:	4a29      	ldr	r2, [pc, #164]	; (8007e5c <HAL_GPIO_Init+0x23c>)
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	089b      	lsrs	r3, r3, #2
 8007dbc:	3302      	adds	r3, #2
 8007dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007dc4:	69fb      	ldr	r3, [r7, #28]
 8007dc6:	f003 0303 	and.w	r3, r3, #3
 8007dca:	009b      	lsls	r3, r3, #2
 8007dcc:	220f      	movs	r2, #15
 8007dce:	fa02 f303 	lsl.w	r3, r2, r3
 8007dd2:	43db      	mvns	r3, r3
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	4013      	ands	r3, r2
 8007dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a20      	ldr	r2, [pc, #128]	; (8007e60 <HAL_GPIO_Init+0x240>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d052      	beq.n	8007e88 <HAL_GPIO_Init+0x268>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a1f      	ldr	r2, [pc, #124]	; (8007e64 <HAL_GPIO_Init+0x244>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d031      	beq.n	8007e4e <HAL_GPIO_Init+0x22e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a1e      	ldr	r2, [pc, #120]	; (8007e68 <HAL_GPIO_Init+0x248>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d02b      	beq.n	8007e4a <HAL_GPIO_Init+0x22a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a1d      	ldr	r2, [pc, #116]	; (8007e6c <HAL_GPIO_Init+0x24c>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d025      	beq.n	8007e46 <HAL_GPIO_Init+0x226>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a1c      	ldr	r2, [pc, #112]	; (8007e70 <HAL_GPIO_Init+0x250>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d01f      	beq.n	8007e42 <HAL_GPIO_Init+0x222>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a1b      	ldr	r2, [pc, #108]	; (8007e74 <HAL_GPIO_Init+0x254>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d019      	beq.n	8007e3e <HAL_GPIO_Init+0x21e>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a1a      	ldr	r2, [pc, #104]	; (8007e78 <HAL_GPIO_Init+0x258>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d013      	beq.n	8007e3a <HAL_GPIO_Init+0x21a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a19      	ldr	r2, [pc, #100]	; (8007e7c <HAL_GPIO_Init+0x25c>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d00d      	beq.n	8007e36 <HAL_GPIO_Init+0x216>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a18      	ldr	r2, [pc, #96]	; (8007e80 <HAL_GPIO_Init+0x260>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d007      	beq.n	8007e32 <HAL_GPIO_Init+0x212>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a17      	ldr	r2, [pc, #92]	; (8007e84 <HAL_GPIO_Init+0x264>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d101      	bne.n	8007e2e <HAL_GPIO_Init+0x20e>
 8007e2a:	2309      	movs	r3, #9
 8007e2c:	e02d      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e2e:	230a      	movs	r3, #10
 8007e30:	e02b      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e32:	2308      	movs	r3, #8
 8007e34:	e029      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e36:	2307      	movs	r3, #7
 8007e38:	e027      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e3a:	2306      	movs	r3, #6
 8007e3c:	e025      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e3e:	2305      	movs	r3, #5
 8007e40:	e023      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e42:	2304      	movs	r3, #4
 8007e44:	e021      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e46:	2303      	movs	r3, #3
 8007e48:	e01f      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e01d      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e01b      	b.n	8007e8a <HAL_GPIO_Init+0x26a>
 8007e52:	bf00      	nop
 8007e54:	58000080 	.word	0x58000080
 8007e58:	58024400 	.word	0x58024400
 8007e5c:	58000400 	.word	0x58000400
 8007e60:	58020000 	.word	0x58020000
 8007e64:	58020400 	.word	0x58020400
 8007e68:	58020800 	.word	0x58020800
 8007e6c:	58020c00 	.word	0x58020c00
 8007e70:	58021000 	.word	0x58021000
 8007e74:	58021400 	.word	0x58021400
 8007e78:	58021800 	.word	0x58021800
 8007e7c:	58021c00 	.word	0x58021c00
 8007e80:	58022000 	.word	0x58022000
 8007e84:	58022400 	.word	0x58022400
 8007e88:	2300      	movs	r3, #0
 8007e8a:	69fa      	ldr	r2, [r7, #28]
 8007e8c:	f002 0203 	and.w	r2, r2, #3
 8007e90:	0092      	lsls	r2, r2, #2
 8007e92:	4093      	lsls	r3, r2
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007e9a:	4938      	ldr	r1, [pc, #224]	; (8007f7c <HAL_GPIO_Init+0x35c>)
 8007e9c:	69fb      	ldr	r3, [r7, #28]
 8007e9e:	089b      	lsrs	r3, r3, #2
 8007ea0:	3302      	adds	r3, #2
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	43db      	mvns	r3, r3
 8007eb2:	69ba      	ldr	r2, [r7, #24]
 8007eb4:	4013      	ands	r3, r2
 8007eb6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d003      	beq.n	8007ecc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007ec4:	69ba      	ldr	r2, [r7, #24]
 8007ec6:	693b      	ldr	r3, [r7, #16]
 8007ec8:	4313      	orrs	r3, r2
 8007eca:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	69ba      	ldr	r2, [r7, #24]
 8007ed0:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	685b      	ldr	r3, [r3, #4]
 8007ed6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	43db      	mvns	r3, r3
 8007edc:	69ba      	ldr	r2, [r7, #24]
 8007ede:	4013      	ands	r3, r2
 8007ee0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d003      	beq.n	8007ef6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8007eee:	69ba      	ldr	r2, [r7, #24]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	69ba      	ldr	r2, [r7, #24]
 8007efa:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007efc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	43db      	mvns	r3, r3
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007f0e:	683b      	ldr	r3, [r7, #0]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d003      	beq.n	8007f22 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f22:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f26:	69bb      	ldr	r3, [r7, #24]
 8007f28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f2a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	43db      	mvns	r3, r3
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4013      	ands	r3, r2
 8007f3a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	685b      	ldr	r3, [r3, #4]
 8007f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d003      	beq.n	8007f50 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8007f48:	69ba      	ldr	r2, [r7, #24]
 8007f4a:	693b      	ldr	r3, [r7, #16]
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f50:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8007f58:	69fb      	ldr	r3, [r7, #28]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	681a      	ldr	r2, [r3, #0]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	fa22 f303 	lsr.w	r3, r2, r3
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	f47f ae63 	bne.w	8007c34 <HAL_GPIO_Init+0x14>
  }
}
 8007f6e:	bf00      	nop
 8007f70:	3724      	adds	r7, #36	; 0x24
 8007f72:	46bd      	mov	sp, r7
 8007f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f78:	4770      	bx	lr
 8007f7a:	bf00      	nop
 8007f7c:	58000400 	.word	0x58000400

08007f80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007f80:	b480      	push	{r7}
 8007f82:	b085      	sub	sp, #20
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	691a      	ldr	r2, [r3, #16]
 8007f90:	887b      	ldrh	r3, [r7, #2]
 8007f92:	4013      	ands	r3, r2
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d002      	beq.n	8007f9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007f98:	2301      	movs	r3, #1
 8007f9a:	73fb      	strb	r3, [r7, #15]
 8007f9c:	e001      	b.n	8007fa2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	3714      	adds	r7, #20
 8007fa8:	46bd      	mov	sp, r7
 8007faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fae:	4770      	bx	lr

08007fb0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b083      	sub	sp, #12
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	460b      	mov	r3, r1
 8007fba:	807b      	strh	r3, [r7, #2]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007fc0:	787b      	ldrb	r3, [r7, #1]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d003      	beq.n	8007fce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007fc6:	887a      	ldrh	r2, [r7, #2]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007fcc:	e003      	b.n	8007fd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007fce:	887b      	ldrh	r3, [r7, #2]
 8007fd0:	041a      	lsls	r2, r3, #16
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	619a      	str	r2, [r3, #24]
}
 8007fd6:	bf00      	nop
 8007fd8:	370c      	adds	r7, #12
 8007fda:	46bd      	mov	sp, r7
 8007fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fe0:	4770      	bx	lr

08007fe2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007fe2:	b480      	push	{r7}
 8007fe4:	b083      	sub	sp, #12
 8007fe6:	af00      	add	r7, sp, #0
 8007fe8:	6078      	str	r0, [r7, #4]
 8007fea:	460b      	mov	r3, r1
 8007fec:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	695a      	ldr	r2, [r3, #20]
 8007ff2:	887b      	ldrh	r3, [r7, #2]
 8007ff4:	401a      	ands	r2, r3
 8007ff6:	887b      	ldrh	r3, [r7, #2]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d104      	bne.n	8008006 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007ffc:	887b      	ldrh	r3, [r7, #2]
 8007ffe:	041a      	lsls	r2, r3, #16
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008004:	e002      	b.n	800800c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8008006:	887a      	ldrh	r2, [r7, #2]
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	619a      	str	r2, [r3, #24]
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	4603      	mov	r3, r0
 8008020:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008026:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800802a:	88fb      	ldrh	r3, [r7, #6]
 800802c:	4013      	ands	r3, r2
 800802e:	2b00      	cmp	r3, #0
 8008030:	d008      	beq.n	8008044 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8008032:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8008036:	88fb      	ldrh	r3, [r7, #6]
 8008038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800803c:	88fb      	ldrh	r3, [r7, #6]
 800803e:	4618      	mov	r0, r3
 8008040:	f7fb fd8c 	bl	8003b5c <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8008044:	bf00      	nop
 8008046:	3708      	adds	r7, #8
 8008048:	46bd      	mov	sp, r7
 800804a:	bd80      	pop	{r7, pc}

0800804c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800804c:	b480      	push	{r7}
 800804e:	b085      	sub	sp, #20
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008054:	4b0d      	ldr	r3, [pc, #52]	; (800808c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800805a:	4a0c      	ldr	r2, [pc, #48]	; (800808c <HAL_I2CEx_EnableFastModePlus+0x40>)
 800805c:	f043 0302 	orr.w	r3, r3, #2
 8008060:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8008064:	4b09      	ldr	r3, [pc, #36]	; (800808c <HAL_I2CEx_EnableFastModePlus+0x40>)
 8008066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800806a:	f003 0302 	and.w	r3, r3, #2
 800806e:	60fb      	str	r3, [r7, #12]
 8008070:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008072:	4b07      	ldr	r3, [pc, #28]	; (8008090 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008074:	685a      	ldr	r2, [r3, #4]
 8008076:	4906      	ldr	r1, [pc, #24]	; (8008090 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4313      	orrs	r3, r2
 800807c:	604b      	str	r3, [r1, #4]
}
 800807e:	bf00      	nop
 8008080:	3714      	adds	r7, #20
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	58024400 	.word	0x58024400
 8008090:	58000400 	.word	0x58000400

08008094 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008094:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008096:	b08f      	sub	sp, #60	; 0x3c
 8008098:	af0a      	add	r7, sp, #40	; 0x28
 800809a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d101      	bne.n	80080a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e116      	b.n	80082d4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d106      	bne.n	80080c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	2200      	movs	r2, #0
 80080bc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80080c0:	6878      	ldr	r0, [r7, #4]
 80080c2:	f010 fe4d 	bl	8018d60 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	2203      	movs	r2, #3
 80080ca:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80080ce:	68bb      	ldr	r3, [r7, #8]
 80080d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d102      	bne.n	80080e0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4618      	mov	r0, r3
 80080e6:	f009 fe52 	bl	8011d8e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	603b      	str	r3, [r7, #0]
 80080f0:	687e      	ldr	r6, [r7, #4]
 80080f2:	466d      	mov	r5, sp
 80080f4:	f106 0410 	add.w	r4, r6, #16
 80080f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80080fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80080fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008100:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008104:	e885 0003 	stmia.w	r5, {r0, r1}
 8008108:	1d33      	adds	r3, r6, #4
 800810a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800810c:	6838      	ldr	r0, [r7, #0]
 800810e:	f009 fd29 	bl	8011b64 <USB_CoreInit>
 8008112:	4603      	mov	r3, r0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d005      	beq.n	8008124 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2202      	movs	r2, #2
 800811c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008120:	2301      	movs	r3, #1
 8008122:	e0d7      	b.n	80082d4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	2100      	movs	r1, #0
 800812a:	4618      	mov	r0, r3
 800812c:	f009 fe40 	bl	8011db0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008130:	2300      	movs	r3, #0
 8008132:	73fb      	strb	r3, [r7, #15]
 8008134:	e04a      	b.n	80081cc <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8008136:	7bfa      	ldrb	r2, [r7, #15]
 8008138:	6879      	ldr	r1, [r7, #4]
 800813a:	4613      	mov	r3, r2
 800813c:	00db      	lsls	r3, r3, #3
 800813e:	1a9b      	subs	r3, r3, r2
 8008140:	009b      	lsls	r3, r3, #2
 8008142:	440b      	add	r3, r1
 8008144:	333d      	adds	r3, #61	; 0x3d
 8008146:	2201      	movs	r2, #1
 8008148:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800814a:	7bfa      	ldrb	r2, [r7, #15]
 800814c:	6879      	ldr	r1, [r7, #4]
 800814e:	4613      	mov	r3, r2
 8008150:	00db      	lsls	r3, r3, #3
 8008152:	1a9b      	subs	r3, r3, r2
 8008154:	009b      	lsls	r3, r3, #2
 8008156:	440b      	add	r3, r1
 8008158:	333c      	adds	r3, #60	; 0x3c
 800815a:	7bfa      	ldrb	r2, [r7, #15]
 800815c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800815e:	7bfa      	ldrb	r2, [r7, #15]
 8008160:	7bfb      	ldrb	r3, [r7, #15]
 8008162:	b298      	uxth	r0, r3
 8008164:	6879      	ldr	r1, [r7, #4]
 8008166:	4613      	mov	r3, r2
 8008168:	00db      	lsls	r3, r3, #3
 800816a:	1a9b      	subs	r3, r3, r2
 800816c:	009b      	lsls	r3, r3, #2
 800816e:	440b      	add	r3, r1
 8008170:	3342      	adds	r3, #66	; 0x42
 8008172:	4602      	mov	r2, r0
 8008174:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008176:	7bfa      	ldrb	r2, [r7, #15]
 8008178:	6879      	ldr	r1, [r7, #4]
 800817a:	4613      	mov	r3, r2
 800817c:	00db      	lsls	r3, r3, #3
 800817e:	1a9b      	subs	r3, r3, r2
 8008180:	009b      	lsls	r3, r3, #2
 8008182:	440b      	add	r3, r1
 8008184:	333f      	adds	r3, #63	; 0x3f
 8008186:	2200      	movs	r2, #0
 8008188:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800818a:	7bfa      	ldrb	r2, [r7, #15]
 800818c:	6879      	ldr	r1, [r7, #4]
 800818e:	4613      	mov	r3, r2
 8008190:	00db      	lsls	r3, r3, #3
 8008192:	1a9b      	subs	r3, r3, r2
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	440b      	add	r3, r1
 8008198:	3344      	adds	r3, #68	; 0x44
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800819e:	7bfa      	ldrb	r2, [r7, #15]
 80081a0:	6879      	ldr	r1, [r7, #4]
 80081a2:	4613      	mov	r3, r2
 80081a4:	00db      	lsls	r3, r3, #3
 80081a6:	1a9b      	subs	r3, r3, r2
 80081a8:	009b      	lsls	r3, r3, #2
 80081aa:	440b      	add	r3, r1
 80081ac:	3348      	adds	r3, #72	; 0x48
 80081ae:	2200      	movs	r2, #0
 80081b0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80081b2:	7bfa      	ldrb	r2, [r7, #15]
 80081b4:	6879      	ldr	r1, [r7, #4]
 80081b6:	4613      	mov	r3, r2
 80081b8:	00db      	lsls	r3, r3, #3
 80081ba:	1a9b      	subs	r3, r3, r2
 80081bc:	009b      	lsls	r3, r3, #2
 80081be:	440b      	add	r3, r1
 80081c0:	3350      	adds	r3, #80	; 0x50
 80081c2:	2200      	movs	r2, #0
 80081c4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081c6:	7bfb      	ldrb	r3, [r7, #15]
 80081c8:	3301      	adds	r3, #1
 80081ca:	73fb      	strb	r3, [r7, #15]
 80081cc:	7bfa      	ldrb	r2, [r7, #15]
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	685b      	ldr	r3, [r3, #4]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d3af      	bcc.n	8008136 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]
 80081da:	e044      	b.n	8008266 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80081dc:	7bfa      	ldrb	r2, [r7, #15]
 80081de:	6879      	ldr	r1, [r7, #4]
 80081e0:	4613      	mov	r3, r2
 80081e2:	00db      	lsls	r3, r3, #3
 80081e4:	1a9b      	subs	r3, r3, r2
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	440b      	add	r3, r1
 80081ea:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 80081ee:	2200      	movs	r2, #0
 80081f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80081f2:	7bfa      	ldrb	r2, [r7, #15]
 80081f4:	6879      	ldr	r1, [r7, #4]
 80081f6:	4613      	mov	r3, r2
 80081f8:	00db      	lsls	r3, r3, #3
 80081fa:	1a9b      	subs	r3, r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008204:	7bfa      	ldrb	r2, [r7, #15]
 8008206:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008208:	7bfa      	ldrb	r2, [r7, #15]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800821a:	2200      	movs	r2, #0
 800821c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800821e:	7bfa      	ldrb	r2, [r7, #15]
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	4613      	mov	r3, r2
 8008224:	00db      	lsls	r3, r3, #3
 8008226:	1a9b      	subs	r3, r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	440b      	add	r3, r1
 800822c:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008230:	2200      	movs	r2, #0
 8008232:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008234:	7bfa      	ldrb	r2, [r7, #15]
 8008236:	6879      	ldr	r1, [r7, #4]
 8008238:	4613      	mov	r3, r2
 800823a:	00db      	lsls	r3, r3, #3
 800823c:	1a9b      	subs	r3, r3, r2
 800823e:	009b      	lsls	r3, r3, #2
 8008240:	440b      	add	r3, r1
 8008242:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008246:	2200      	movs	r2, #0
 8008248:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800824a:	7bfa      	ldrb	r2, [r7, #15]
 800824c:	6879      	ldr	r1, [r7, #4]
 800824e:	4613      	mov	r3, r2
 8008250:	00db      	lsls	r3, r3, #3
 8008252:	1a9b      	subs	r3, r3, r2
 8008254:	009b      	lsls	r3, r3, #2
 8008256:	440b      	add	r3, r1
 8008258:	f503 7304 	add.w	r3, r3, #528	; 0x210
 800825c:	2200      	movs	r2, #0
 800825e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	3301      	adds	r3, #1
 8008264:	73fb      	strb	r3, [r7, #15]
 8008266:	7bfa      	ldrb	r2, [r7, #15]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	429a      	cmp	r2, r3
 800826e:	d3b5      	bcc.n	80081dc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	603b      	str	r3, [r7, #0]
 8008276:	687e      	ldr	r6, [r7, #4]
 8008278:	466d      	mov	r5, sp
 800827a:	f106 0410 	add.w	r4, r6, #16
 800827e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008280:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008282:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008284:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008286:	e894 0003 	ldmia.w	r4, {r0, r1}
 800828a:	e885 0003 	stmia.w	r5, {r0, r1}
 800828e:	1d33      	adds	r3, r6, #4
 8008290:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008292:	6838      	ldr	r0, [r7, #0]
 8008294:	f009 fdb6 	bl	8011e04 <USB_DevInit>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d005      	beq.n	80082aa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2202      	movs	r2, #2
 80082a2:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80082a6:	2301      	movs	r3, #1
 80082a8:	e014      	b.n	80082d4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d102      	bne.n	80082c8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f001 f8be 	bl	8009444 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4618      	mov	r0, r3
 80082ce:	f00a fdf5 	bl	8012ebc <USB_DevDisconnect>

  return HAL_OK;
 80082d2:	2300      	movs	r3, #0
}
 80082d4:	4618      	mov	r0, r3
 80082d6:	3714      	adds	r7, #20
 80082d8:	46bd      	mov	sp, r7
 80082da:	bdf0      	pop	{r4, r5, r6, r7, pc}

080082dc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80082dc:	b580      	push	{r7, lr}
 80082de:	b084      	sub	sp, #16
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80082f0:	2b01      	cmp	r3, #1
 80082f2:	d101      	bne.n	80082f8 <HAL_PCD_Start+0x1c>
 80082f4:	2302      	movs	r3, #2
 80082f6:	e020      	b.n	800833a <HAL_PCD_Start+0x5e>
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2201      	movs	r2, #1
 80082fc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008304:	2b01      	cmp	r3, #1
 8008306:	d109      	bne.n	800831c <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800830c:	2b01      	cmp	r3, #1
 800830e:	d005      	beq.n	800831c <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008314:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	4618      	mov	r0, r3
 8008322:	f00a fdb3 	bl	8012e8c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	4618      	mov	r0, r3
 800832c:	f009 fd1e 	bl	8011d6c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2200      	movs	r2, #0
 8008334:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008338:	2300      	movs	r3, #0
}
 800833a:	4618      	mov	r0, r3
 800833c:	3710      	adds	r7, #16
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}

08008342 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008342:	b590      	push	{r4, r7, lr}
 8008344:	b08d      	sub	sp, #52	; 0x34
 8008346:	af00      	add	r7, sp, #0
 8008348:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008350:	6a3b      	ldr	r3, [r7, #32]
 8008352:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	4618      	mov	r0, r3
 800835a:	f00a fe5a 	bl	8013012 <USB_GetMode>
 800835e:	4603      	mov	r3, r0
 8008360:	2b00      	cmp	r3, #0
 8008362:	f040 83ca 	bne.w	8008afa <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4618      	mov	r0, r3
 800836c:	f00a fdbe 	bl	8012eec <USB_ReadInterrupts>
 8008370:	4603      	mov	r3, r0
 8008372:	2b00      	cmp	r3, #0
 8008374:	f000 83c0 	beq.w	8008af8 <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4618      	mov	r0, r3
 800837e:	f00a fdb5 	bl	8012eec <USB_ReadInterrupts>
 8008382:	4603      	mov	r3, r0
 8008384:	f003 0302 	and.w	r3, r3, #2
 8008388:	2b02      	cmp	r3, #2
 800838a:	d107      	bne.n	800839c <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	695a      	ldr	r2, [r3, #20]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f002 0202 	and.w	r2, r2, #2
 800839a:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4618      	mov	r0, r3
 80083a2:	f00a fda3 	bl	8012eec <USB_ReadInterrupts>
 80083a6:	4603      	mov	r3, r0
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	2b10      	cmp	r3, #16
 80083ae:	d161      	bne.n	8008474 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 0210 	bic.w	r2, r2, #16
 80083be:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 80083c0:	6a3b      	ldr	r3, [r7, #32]
 80083c2:	6a1b      	ldr	r3, [r3, #32]
 80083c4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f003 020f 	and.w	r2, r3, #15
 80083cc:	4613      	mov	r3, r2
 80083ce:	00db      	lsls	r3, r3, #3
 80083d0:	1a9b      	subs	r3, r3, r2
 80083d2:	009b      	lsls	r3, r3, #2
 80083d4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80083d8:	687a      	ldr	r2, [r7, #4]
 80083da:	4413      	add	r3, r2
 80083dc:	3304      	adds	r3, #4
 80083de:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80083e0:	69bb      	ldr	r3, [r7, #24]
 80083e2:	0c5b      	lsrs	r3, r3, #17
 80083e4:	f003 030f 	and.w	r3, r3, #15
 80083e8:	2b02      	cmp	r3, #2
 80083ea:	d124      	bne.n	8008436 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80083f2:	4013      	ands	r3, r2
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d035      	beq.n	8008464 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80083f8:	697b      	ldr	r3, [r7, #20]
 80083fa:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 80083fc:	69bb      	ldr	r3, [r7, #24]
 80083fe:	091b      	lsrs	r3, r3, #4
 8008400:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008402:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008406:	b29b      	uxth	r3, r3
 8008408:	461a      	mov	r2, r3
 800840a:	6a38      	ldr	r0, [r7, #32]
 800840c:	f00a fc1b 	bl	8012c46 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	69bb      	ldr	r3, [r7, #24]
 8008416:	091b      	lsrs	r3, r3, #4
 8008418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800841c:	441a      	add	r2, r3
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008422:	697b      	ldr	r3, [r7, #20]
 8008424:	699a      	ldr	r2, [r3, #24]
 8008426:	69bb      	ldr	r3, [r7, #24]
 8008428:	091b      	lsrs	r3, r3, #4
 800842a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800842e:	441a      	add	r2, r3
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	619a      	str	r2, [r3, #24]
 8008434:	e016      	b.n	8008464 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	0c5b      	lsrs	r3, r3, #17
 800843a:	f003 030f 	and.w	r3, r3, #15
 800843e:	2b06      	cmp	r3, #6
 8008440:	d110      	bne.n	8008464 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008448:	2208      	movs	r2, #8
 800844a:	4619      	mov	r1, r3
 800844c:	6a38      	ldr	r0, [r7, #32]
 800844e:	f00a fbfa 	bl	8012c46 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	699a      	ldr	r2, [r3, #24]
 8008456:	69bb      	ldr	r3, [r7, #24]
 8008458:	091b      	lsrs	r3, r3, #4
 800845a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800845e:	441a      	add	r2, r3
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	699a      	ldr	r2, [r3, #24]
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f042 0210 	orr.w	r2, r2, #16
 8008472:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	4618      	mov	r0, r3
 800847a:	f00a fd37 	bl	8012eec <USB_ReadInterrupts>
 800847e:	4603      	mov	r3, r0
 8008480:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008484:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008488:	d16e      	bne.n	8008568 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800848a:	2300      	movs	r3, #0
 800848c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4618      	mov	r0, r3
 8008494:	f00a fd3d 	bl	8012f12 <USB_ReadDevAllOutEpInterrupt>
 8008498:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800849a:	e062      	b.n	8008562 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d057      	beq.n	8008556 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80084ac:	b2d2      	uxtb	r2, r2
 80084ae:	4611      	mov	r1, r2
 80084b0:	4618      	mov	r0, r3
 80084b2:	f00a fd62 	bl	8012f7a <USB_ReadDevOutEPInterrupt>
 80084b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	f003 0301 	and.w	r3, r3, #1
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d00c      	beq.n	80084dc <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	015a      	lsls	r2, r3, #5
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	4413      	add	r3, r2
 80084ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084ce:	461a      	mov	r2, r3
 80084d0:	2301      	movs	r3, #1
 80084d2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80084d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084d6:	6878      	ldr	r0, [r7, #4]
 80084d8:	f000 fe0a 	bl	80090f0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80084dc:	693b      	ldr	r3, [r7, #16]
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00c      	beq.n	8008500 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	015a      	lsls	r2, r3, #5
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	4413      	add	r3, r2
 80084ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084f2:	461a      	mov	r2, r3
 80084f4:	2308      	movs	r3, #8
 80084f6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80084f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80084fa:	6878      	ldr	r0, [r7, #4]
 80084fc:	f000 ff04 	bl	8009308 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f003 0310 	and.w	r3, r3, #16
 8008506:	2b00      	cmp	r3, #0
 8008508:	d008      	beq.n	800851c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800850a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800850c:	015a      	lsls	r2, r3, #5
 800850e:	69fb      	ldr	r3, [r7, #28]
 8008510:	4413      	add	r3, r2
 8008512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008516:	461a      	mov	r2, r3
 8008518:	2310      	movs	r3, #16
 800851a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d008      	beq.n	8008538 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	015a      	lsls	r2, r3, #5
 800852a:	69fb      	ldr	r3, [r7, #28]
 800852c:	4413      	add	r3, r2
 800852e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008532:	461a      	mov	r2, r3
 8008534:	2320      	movs	r3, #32
 8008536:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008538:	693b      	ldr	r3, [r7, #16]
 800853a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800853e:	2b00      	cmp	r3, #0
 8008540:	d009      	beq.n	8008556 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008544:	015a      	lsls	r2, r3, #5
 8008546:	69fb      	ldr	r3, [r7, #28]
 8008548:	4413      	add	r3, r2
 800854a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854e:	461a      	mov	r2, r3
 8008550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008554:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008558:	3301      	adds	r3, #1
 800855a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800855c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800855e:	085b      	lsrs	r3, r3, #1
 8008560:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008564:	2b00      	cmp	r3, #0
 8008566:	d199      	bne.n	800849c <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	4618      	mov	r0, r3
 800856e:	f00a fcbd 	bl	8012eec <USB_ReadInterrupts>
 8008572:	4603      	mov	r3, r0
 8008574:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008578:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800857c:	f040 80c0 	bne.w	8008700 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	f00a fcde 	bl	8012f46 <USB_ReadDevAllInEpInterrupt>
 800858a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800858c:	2300      	movs	r3, #0
 800858e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008590:	e0b2      	b.n	80086f8 <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008594:	f003 0301 	and.w	r3, r3, #1
 8008598:	2b00      	cmp	r3, #0
 800859a:	f000 80a7 	beq.w	80086ec <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085a4:	b2d2      	uxtb	r2, r2
 80085a6:	4611      	mov	r1, r2
 80085a8:	4618      	mov	r0, r3
 80085aa:	f00a fd04 	bl	8012fb6 <USB_ReadDevInEPInterrupt>
 80085ae:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80085b0:	693b      	ldr	r3, [r7, #16]
 80085b2:	f003 0301 	and.w	r3, r3, #1
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d057      	beq.n	800866a <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80085ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	2201      	movs	r2, #1
 80085c2:	fa02 f303 	lsl.w	r3, r2, r3
 80085c6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80085c8:	69fb      	ldr	r3, [r7, #28]
 80085ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80085ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	43db      	mvns	r3, r3
 80085d4:	69f9      	ldr	r1, [r7, #28]
 80085d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80085da:	4013      	ands	r3, r2
 80085dc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80085de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e0:	015a      	lsls	r2, r3, #5
 80085e2:	69fb      	ldr	r3, [r7, #28]
 80085e4:	4413      	add	r3, r2
 80085e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80085ea:	461a      	mov	r2, r3
 80085ec:	2301      	movs	r3, #1
 80085ee:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	691b      	ldr	r3, [r3, #16]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d132      	bne.n	800865e <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80085f8:	6879      	ldr	r1, [r7, #4]
 80085fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085fc:	4613      	mov	r3, r2
 80085fe:	00db      	lsls	r3, r3, #3
 8008600:	1a9b      	subs	r3, r3, r2
 8008602:	009b      	lsls	r3, r3, #2
 8008604:	440b      	add	r3, r1
 8008606:	3348      	adds	r3, #72	; 0x48
 8008608:	6819      	ldr	r1, [r3, #0]
 800860a:	6878      	ldr	r0, [r7, #4]
 800860c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800860e:	4613      	mov	r3, r2
 8008610:	00db      	lsls	r3, r3, #3
 8008612:	1a9b      	subs	r3, r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	4403      	add	r3, r0
 8008618:	3344      	adds	r3, #68	; 0x44
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4419      	add	r1, r3
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008622:	4613      	mov	r3, r2
 8008624:	00db      	lsls	r3, r3, #3
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	4403      	add	r3, r0
 800862c:	3348      	adds	r3, #72	; 0x48
 800862e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008632:	2b00      	cmp	r3, #0
 8008634:	d113      	bne.n	800865e <HAL_PCD_IRQHandler+0x31c>
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800863a:	4613      	mov	r3, r2
 800863c:	00db      	lsls	r3, r3, #3
 800863e:	1a9b      	subs	r3, r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	440b      	add	r3, r1
 8008644:	3350      	adds	r3, #80	; 0x50
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d108      	bne.n	800865e <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	6818      	ldr	r0, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008656:	461a      	mov	r2, r3
 8008658:	2101      	movs	r1, #1
 800865a:	f00a fd0d 	bl	8013078 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800865e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008660:	b2db      	uxtb	r3, r3
 8008662:	4619      	mov	r1, r3
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f010 fbfa 	bl	8018e5e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	f003 0308 	and.w	r3, r3, #8
 8008670:	2b00      	cmp	r3, #0
 8008672:	d008      	beq.n	8008686 <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	4413      	add	r3, r2
 800867c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008680:	461a      	mov	r2, r3
 8008682:	2308      	movs	r3, #8
 8008684:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008686:	693b      	ldr	r3, [r7, #16]
 8008688:	f003 0310 	and.w	r3, r3, #16
 800868c:	2b00      	cmp	r3, #0
 800868e:	d008      	beq.n	80086a2 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	69fb      	ldr	r3, [r7, #28]
 8008696:	4413      	add	r3, r2
 8008698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800869c:	461a      	mov	r2, r3
 800869e:	2310      	movs	r3, #16
 80086a0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80086a2:	693b      	ldr	r3, [r7, #16]
 80086a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d008      	beq.n	80086be <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80086ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086b8:	461a      	mov	r2, r3
 80086ba:	2340      	movs	r3, #64	; 0x40
 80086bc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	f003 0302 	and.w	r3, r3, #2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d008      	beq.n	80086da <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80086c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ca:	015a      	lsls	r2, r3, #5
 80086cc:	69fb      	ldr	r3, [r7, #28]
 80086ce:	4413      	add	r3, r2
 80086d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086d4:	461a      	mov	r2, r3
 80086d6:	2302      	movs	r3, #2
 80086d8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d003      	beq.n	80086ec <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80086e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80086e6:	6878      	ldr	r0, [r7, #4]
 80086e8:	f000 fc75 	bl	8008fd6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	3301      	adds	r3, #1
 80086f0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	085b      	lsrs	r3, r3, #1
 80086f6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80086f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f47f af49 	bne.w	8008592 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4618      	mov	r0, r3
 8008706:	f00a fbf1 	bl	8012eec <USB_ReadInterrupts>
 800870a:	4603      	mov	r3, r0
 800870c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008710:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008714:	d122      	bne.n	800875c <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008716:	69fb      	ldr	r3, [r7, #28]
 8008718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800871c:	685b      	ldr	r3, [r3, #4]
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008724:	f023 0301 	bic.w	r3, r3, #1
 8008728:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008730:	2b01      	cmp	r3, #1
 8008732:	d108      	bne.n	8008746 <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800873c:	2100      	movs	r1, #0
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f000 fea4 	bl	800948c <HAL_PCDEx_LPM_Callback>
 8008744:	e002      	b.n	800874c <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f010 fc00 	bl	8018f4c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	695a      	ldr	r2, [r3, #20]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800875a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4618      	mov	r0, r3
 8008762:	f00a fbc3 	bl	8012eec <USB_ReadInterrupts>
 8008766:	4603      	mov	r3, r0
 8008768:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800876c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008770:	d112      	bne.n	8008798 <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8008772:	69fb      	ldr	r3, [r7, #28]
 8008774:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008778:	689b      	ldr	r3, [r3, #8]
 800877a:	f003 0301 	and.w	r3, r3, #1
 800877e:	2b01      	cmp	r3, #1
 8008780:	d102      	bne.n	8008788 <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	f010 fbbc 	bl	8018f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	695a      	ldr	r2, [r3, #20]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8008796:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4618      	mov	r0, r3
 800879e:	f00a fba5 	bl	8012eec <USB_ReadInterrupts>
 80087a2:	4603      	mov	r3, r0
 80087a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80087ac:	d121      	bne.n	80087f2 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	695a      	ldr	r2, [r3, #20]
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80087bc:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d111      	bne.n	80087ec <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	2201      	movs	r2, #1
 80087cc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087d6:	089b      	lsrs	r3, r3, #2
 80087d8:	f003 020f 	and.w	r2, r3, #15
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80087e2:	2101      	movs	r1, #1
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 fe51 	bl	800948c <HAL_PCDEx_LPM_Callback>
 80087ea:	e002      	b.n	80087f2 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f010 fb87 	bl	8018f00 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f00a fb78 	bl	8012eec <USB_ReadInterrupts>
 80087fc:	4603      	mov	r3, r0
 80087fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008802:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008806:	f040 80c7 	bne.w	8008998 <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008810:	685b      	ldr	r3, [r3, #4]
 8008812:	69fa      	ldr	r2, [r7, #28]
 8008814:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008818:	f023 0301 	bic.w	r3, r3, #1
 800881c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2110      	movs	r1, #16
 8008824:	4618      	mov	r0, r3
 8008826:	f009 fc4b 	bl	80120c0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800882a:	2300      	movs	r3, #0
 800882c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800882e:	e056      	b.n	80088de <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8008830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008832:	015a      	lsls	r2, r3, #5
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4413      	add	r3, r2
 8008838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800883c:	461a      	mov	r2, r3
 800883e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008842:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	440a      	add	r2, r1
 800885a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800885e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008862:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008874:	0151      	lsls	r1, r2, #5
 8008876:	69fa      	ldr	r2, [r7, #28]
 8008878:	440a      	add	r2, r1
 800887a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800887e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8008882:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8008884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008886:	015a      	lsls	r2, r3, #5
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	4413      	add	r3, r2
 800888c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008890:	461a      	mov	r2, r3
 8008892:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008896:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800889a:	015a      	lsls	r2, r3, #5
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088a8:	0151      	lsls	r1, r2, #5
 80088aa:	69fa      	ldr	r2, [r7, #28]
 80088ac:	440a      	add	r2, r1
 80088ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088b2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80088b6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ba:	015a      	lsls	r2, r3, #5
 80088bc:	69fb      	ldr	r3, [r7, #28]
 80088be:	4413      	add	r3, r2
 80088c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088c8:	0151      	lsls	r1, r2, #5
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	440a      	add	r2, r1
 80088ce:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088d6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	3301      	adds	r3, #1
 80088dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	685b      	ldr	r3, [r3, #4]
 80088e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80088e4:	429a      	cmp	r2, r3
 80088e6:	d3a3      	bcc.n	8008830 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80088e8:	69fb      	ldr	r3, [r7, #28]
 80088ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088ee:	69db      	ldr	r3, [r3, #28]
 80088f0:	69fa      	ldr	r2, [r7, #28]
 80088f2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088f6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80088fa:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008900:	2b00      	cmp	r3, #0
 8008902:	d016      	beq.n	8008932 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8008904:	69fb      	ldr	r3, [r7, #28]
 8008906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800890a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800890e:	69fa      	ldr	r2, [r7, #28]
 8008910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008914:	f043 030b 	orr.w	r3, r3, #11
 8008918:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800891c:	69fb      	ldr	r3, [r7, #28]
 800891e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008922:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008924:	69fa      	ldr	r2, [r7, #28]
 8008926:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800892a:	f043 030b 	orr.w	r3, r3, #11
 800892e:	6453      	str	r3, [r2, #68]	; 0x44
 8008930:	e015      	b.n	800895e <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008938:	695a      	ldr	r2, [r3, #20]
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008940:	4619      	mov	r1, r3
 8008942:	f242 032b 	movw	r3, #8235	; 0x202b
 8008946:	4313      	orrs	r3, r2
 8008948:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800894a:	69fb      	ldr	r3, [r7, #28]
 800894c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008950:	691b      	ldr	r3, [r3, #16]
 8008952:	69fa      	ldr	r2, [r7, #28]
 8008954:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008958:	f043 030b 	orr.w	r3, r3, #11
 800895c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	69fa      	ldr	r2, [r7, #28]
 8008968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8008970:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6818      	ldr	r0, [r3, #0]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8008982:	461a      	mov	r2, r3
 8008984:	f00a fb78 	bl	8013078 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	695a      	ldr	r2, [r3, #20]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8008996:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	4618      	mov	r0, r3
 800899e:	f00a faa5 	bl	8012eec <USB_ReadInterrupts>
 80089a2:	4603      	mov	r3, r0
 80089a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80089a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80089ac:	d124      	bne.n	80089f8 <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f00a fb3c 	bl	8013030 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	4618      	mov	r0, r3
 80089be:	f009 fbe0 	bl	8012182 <USB_GetDevSpeed>
 80089c2:	4603      	mov	r3, r0
 80089c4:	461a      	mov	r2, r3
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	f001 fdd9 	bl	800a584 <HAL_RCC_GetHCLKFreq>
 80089d2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80089d8:	b2db      	uxtb	r3, r3
 80089da:	461a      	mov	r2, r3
 80089dc:	4620      	mov	r0, r4
 80089de:	f009 f923 	bl	8011c28 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f010 fa63 	bl	8018eae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	695a      	ldr	r2, [r3, #20]
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80089f6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4618      	mov	r0, r3
 80089fe:	f00a fa75 	bl	8012eec <USB_ReadInterrupts>
 8008a02:	4603      	mov	r3, r0
 8008a04:	f003 0308 	and.w	r3, r3, #8
 8008a08:	2b08      	cmp	r3, #8
 8008a0a:	d10a      	bne.n	8008a22 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f010 fa40 	bl	8018e92 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	695a      	ldr	r2, [r3, #20]
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	f002 0208 	and.w	r2, r2, #8
 8008a20:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4618      	mov	r0, r3
 8008a28:	f00a fa60 	bl	8012eec <USB_ReadInterrupts>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008a32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a36:	d10f      	bne.n	8008a58 <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a38:	2300      	movs	r3, #0
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	b2db      	uxtb	r3, r3
 8008a40:	4619      	mov	r1, r3
 8008a42:	6878      	ldr	r0, [r7, #4]
 8008a44:	f010 faa2 	bl	8018f8c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	695a      	ldr	r2, [r3, #20]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8008a56:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	f00a fa45 	bl	8012eec <USB_ReadInterrupts>
 8008a62:	4603      	mov	r3, r0
 8008a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008a6c:	d10f      	bne.n	8008a8e <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	4619      	mov	r1, r3
 8008a78:	6878      	ldr	r0, [r7, #4]
 8008a7a:	f010 fa75 	bl	8018f68 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	695a      	ldr	r2, [r3, #20]
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8008a8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	4618      	mov	r0, r3
 8008a94:	f00a fa2a 	bl	8012eec <USB_ReadInterrupts>
 8008a98:	4603      	mov	r3, r0
 8008a9a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008a9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008aa2:	d10a      	bne.n	8008aba <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8008aa4:	6878      	ldr	r0, [r7, #4]
 8008aa6:	f010 fa83 	bl	8018fb0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	695a      	ldr	r2, [r3, #20]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8008ab8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f00a fa14 	bl	8012eec <USB_ReadInterrupts>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	f003 0304 	and.w	r3, r3, #4
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	d115      	bne.n	8008afa <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8008ad6:	69bb      	ldr	r3, [r7, #24]
 8008ad8:	f003 0304 	and.w	r3, r3, #4
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d002      	beq.n	8008ae6 <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8008ae0:	6878      	ldr	r0, [r7, #4]
 8008ae2:	f010 fa73 	bl	8018fcc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	6859      	ldr	r1, [r3, #4]
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	69ba      	ldr	r2, [r7, #24]
 8008af2:	430a      	orrs	r2, r1
 8008af4:	605a      	str	r2, [r3, #4]
 8008af6:	e000      	b.n	8008afa <HAL_PCD_IRQHandler+0x7b8>
      return;
 8008af8:	bf00      	nop
    }
  }
}
 8008afa:	3734      	adds	r7, #52	; 0x34
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd90      	pop	{r4, r7, pc}

08008b00 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	6078      	str	r0, [r7, #4]
 8008b08:	460b      	mov	r3, r1
 8008b0a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b12:	2b01      	cmp	r3, #1
 8008b14:	d101      	bne.n	8008b1a <HAL_PCD_SetAddress+0x1a>
 8008b16:	2302      	movs	r3, #2
 8008b18:	e013      	b.n	8008b42 <HAL_PCD_SetAddress+0x42>
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	2201      	movs	r2, #1
 8008b1e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	78fa      	ldrb	r2, [r7, #3]
 8008b26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	4611      	mov	r1, r2
 8008b32:	4618      	mov	r0, r3
 8008b34:	f00a f984 	bl	8012e40 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008b40:	2300      	movs	r3, #0
}
 8008b42:	4618      	mov	r0, r3
 8008b44:	3708      	adds	r7, #8
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}

08008b4a <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8008b4a:	b580      	push	{r7, lr}
 8008b4c:	b084      	sub	sp, #16
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	4608      	mov	r0, r1
 8008b54:	4611      	mov	r1, r2
 8008b56:	461a      	mov	r2, r3
 8008b58:	4603      	mov	r3, r0
 8008b5a:	70fb      	strb	r3, [r7, #3]
 8008b5c:	460b      	mov	r3, r1
 8008b5e:	803b      	strh	r3, [r7, #0]
 8008b60:	4613      	mov	r3, r2
 8008b62:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8008b64:	2300      	movs	r3, #0
 8008b66:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008b68:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	da0f      	bge.n	8008b90 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008b70:	78fb      	ldrb	r3, [r7, #3]
 8008b72:	f003 020f 	and.w	r2, r3, #15
 8008b76:	4613      	mov	r3, r2
 8008b78:	00db      	lsls	r3, r3, #3
 8008b7a:	1a9b      	subs	r3, r3, r2
 8008b7c:	009b      	lsls	r3, r3, #2
 8008b7e:	3338      	adds	r3, #56	; 0x38
 8008b80:	687a      	ldr	r2, [r7, #4]
 8008b82:	4413      	add	r3, r2
 8008b84:	3304      	adds	r3, #4
 8008b86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	705a      	strb	r2, [r3, #1]
 8008b8e:	e00f      	b.n	8008bb0 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008b90:	78fb      	ldrb	r3, [r7, #3]
 8008b92:	f003 020f 	and.w	r2, r3, #15
 8008b96:	4613      	mov	r3, r2
 8008b98:	00db      	lsls	r3, r3, #3
 8008b9a:	1a9b      	subs	r3, r3, r2
 8008b9c:	009b      	lsls	r3, r3, #2
 8008b9e:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008ba2:	687a      	ldr	r2, [r7, #4]
 8008ba4:	4413      	add	r3, r2
 8008ba6:	3304      	adds	r3, #4
 8008ba8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8008bb0:	78fb      	ldrb	r3, [r7, #3]
 8008bb2:	f003 030f 	and.w	r3, r3, #15
 8008bb6:	b2da      	uxtb	r2, r3
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8008bbc:	883a      	ldrh	r2, [r7, #0]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	78ba      	ldrb	r2, [r7, #2]
 8008bc6:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	785b      	ldrb	r3, [r3, #1]
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d004      	beq.n	8008bda <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	781b      	ldrb	r3, [r3, #0]
 8008bd4:	b29a      	uxth	r2, r3
 8008bd6:	68fb      	ldr	r3, [r7, #12]
 8008bd8:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8008bda:	78bb      	ldrb	r3, [r7, #2]
 8008bdc:	2b02      	cmp	r3, #2
 8008bde:	d102      	bne.n	8008be6 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8008be0:	68fb      	ldr	r3, [r7, #12]
 8008be2:	2200      	movs	r2, #0
 8008be4:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d101      	bne.n	8008bf4 <HAL_PCD_EP_Open+0xaa>
 8008bf0:	2302      	movs	r3, #2
 8008bf2:	e00e      	b.n	8008c12 <HAL_PCD_EP_Open+0xc8>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	68f9      	ldr	r1, [r7, #12]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f009 fae2 	bl	80121cc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8008c10:	7afb      	ldrb	r3, [r7, #11]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3710      	adds	r7, #16
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}

08008c1a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008c1a:	b580      	push	{r7, lr}
 8008c1c:	b084      	sub	sp, #16
 8008c1e:	af00      	add	r7, sp, #0
 8008c20:	6078      	str	r0, [r7, #4]
 8008c22:	460b      	mov	r3, r1
 8008c24:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8008c26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	da0f      	bge.n	8008c4e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008c2e:	78fb      	ldrb	r3, [r7, #3]
 8008c30:	f003 020f 	and.w	r2, r3, #15
 8008c34:	4613      	mov	r3, r2
 8008c36:	00db      	lsls	r3, r3, #3
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	3338      	adds	r3, #56	; 0x38
 8008c3e:	687a      	ldr	r2, [r7, #4]
 8008c40:	4413      	add	r3, r2
 8008c42:	3304      	adds	r3, #4
 8008c44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	2201      	movs	r2, #1
 8008c4a:	705a      	strb	r2, [r3, #1]
 8008c4c:	e00f      	b.n	8008c6e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008c4e:	78fb      	ldrb	r3, [r7, #3]
 8008c50:	f003 020f 	and.w	r2, r3, #15
 8008c54:	4613      	mov	r3, r2
 8008c56:	00db      	lsls	r3, r3, #3
 8008c58:	1a9b      	subs	r3, r3, r2
 8008c5a:	009b      	lsls	r3, r3, #2
 8008c5c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	4413      	add	r3, r2
 8008c64:	3304      	adds	r3, #4
 8008c66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2200      	movs	r2, #0
 8008c6c:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8008c6e:	78fb      	ldrb	r3, [r7, #3]
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	b2da      	uxtb	r2, r3
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008c80:	2b01      	cmp	r3, #1
 8008c82:	d101      	bne.n	8008c88 <HAL_PCD_EP_Close+0x6e>
 8008c84:	2302      	movs	r3, #2
 8008c86:	e00e      	b.n	8008ca6 <HAL_PCD_EP_Close+0x8c>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	68f9      	ldr	r1, [r7, #12]
 8008c96:	4618      	mov	r0, r3
 8008c98:	f009 fb20 	bl	80122dc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008ca4:	2300      	movs	r3, #0
}
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	3710      	adds	r7, #16
 8008caa:	46bd      	mov	sp, r7
 8008cac:	bd80      	pop	{r7, pc}

08008cae <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008cae:	b580      	push	{r7, lr}
 8008cb0:	b086      	sub	sp, #24
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
 8008cba:	460b      	mov	r3, r1
 8008cbc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008cbe:	7afb      	ldrb	r3, [r7, #11]
 8008cc0:	f003 020f 	and.w	r2, r3, #15
 8008cc4:	4613      	mov	r3, r2
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	1a9b      	subs	r3, r3, r2
 8008cca:	009b      	lsls	r3, r3, #2
 8008ccc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008cd0:	68fa      	ldr	r2, [r7, #12]
 8008cd2:	4413      	add	r3, r2
 8008cd4:	3304      	adds	r3, #4
 8008cd6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	687a      	ldr	r2, [r7, #4]
 8008cdc:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	683a      	ldr	r2, [r7, #0]
 8008ce2:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	2200      	movs	r2, #0
 8008cee:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008cf0:	7afb      	ldrb	r3, [r7, #11]
 8008cf2:	f003 030f 	and.w	r3, r3, #15
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	691b      	ldr	r3, [r3, #16]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d102      	bne.n	8008d0a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	697b      	ldr	r3, [r7, #20]
 8008d08:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008d0a:	7afb      	ldrb	r3, [r7, #11]
 8008d0c:	f003 030f 	and.w	r3, r3, #15
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d109      	bne.n	8008d28 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	6818      	ldr	r0, [r3, #0]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	691b      	ldr	r3, [r3, #16]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	461a      	mov	r2, r3
 8008d20:	6979      	ldr	r1, [r7, #20]
 8008d22:	f009 fe03 	bl	801292c <USB_EP0StartXfer>
 8008d26:	e008      	b.n	8008d3a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6818      	ldr	r0, [r3, #0]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	461a      	mov	r2, r3
 8008d34:	6979      	ldr	r1, [r7, #20]
 8008d36:	f009 fbad 	bl	8012494 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008d3a:	2300      	movs	r3, #0
}
 8008d3c:	4618      	mov	r0, r3
 8008d3e:	3718      	adds	r7, #24
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bd80      	pop	{r7, pc}

08008d44 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8008d50:	78fb      	ldrb	r3, [r7, #3]
 8008d52:	f003 020f 	and.w	r2, r3, #15
 8008d56:	6879      	ldr	r1, [r7, #4]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	00db      	lsls	r3, r3, #3
 8008d5c:	1a9b      	subs	r3, r3, r2
 8008d5e:	009b      	lsls	r3, r3, #2
 8008d60:	440b      	add	r3, r1
 8008d62:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8008d66:	681b      	ldr	r3, [r3, #0]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	370c      	adds	r7, #12
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr

08008d74 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b086      	sub	sp, #24
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	60f8      	str	r0, [r7, #12]
 8008d7c:	607a      	str	r2, [r7, #4]
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	460b      	mov	r3, r1
 8008d82:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008d84:	7afb      	ldrb	r3, [r7, #11]
 8008d86:	f003 020f 	and.w	r2, r3, #15
 8008d8a:	4613      	mov	r3, r2
 8008d8c:	00db      	lsls	r3, r3, #3
 8008d8e:	1a9b      	subs	r3, r3, r2
 8008d90:	009b      	lsls	r3, r3, #2
 8008d92:	3338      	adds	r3, #56	; 0x38
 8008d94:	68fa      	ldr	r2, [r7, #12]
 8008d96:	4413      	add	r3, r2
 8008d98:	3304      	adds	r3, #4
 8008d9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8008d9c:	697b      	ldr	r3, [r7, #20]
 8008d9e:	687a      	ldr	r2, [r7, #4]
 8008da0:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	683a      	ldr	r2, [r7, #0]
 8008da6:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	2200      	movs	r2, #0
 8008dac:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8008dae:	697b      	ldr	r3, [r7, #20]
 8008db0:	2201      	movs	r2, #1
 8008db2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008db4:	7afb      	ldrb	r3, [r7, #11]
 8008db6:	f003 030f 	and.w	r3, r3, #15
 8008dba:	b2da      	uxtb	r2, r3
 8008dbc:	697b      	ldr	r3, [r7, #20]
 8008dbe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	691b      	ldr	r3, [r3, #16]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d102      	bne.n	8008dce <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8008dc8:	687a      	ldr	r2, [r7, #4]
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008dce:	7afb      	ldrb	r3, [r7, #11]
 8008dd0:	f003 030f 	and.w	r3, r3, #15
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d109      	bne.n	8008dec <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	6818      	ldr	r0, [r3, #0]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	691b      	ldr	r3, [r3, #16]
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	461a      	mov	r2, r3
 8008de4:	6979      	ldr	r1, [r7, #20]
 8008de6:	f009 fda1 	bl	801292c <USB_EP0StartXfer>
 8008dea:	e008      	b.n	8008dfe <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	6818      	ldr	r0, [r3, #0]
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	691b      	ldr	r3, [r3, #16]
 8008df4:	b2db      	uxtb	r3, r3
 8008df6:	461a      	mov	r2, r3
 8008df8:	6979      	ldr	r1, [r7, #20]
 8008dfa:	f009 fb4b 	bl	8012494 <USB_EPStartXfer>
  }

  return HAL_OK;
 8008dfe:	2300      	movs	r3, #0
}
 8008e00:	4618      	mov	r0, r3
 8008e02:	3718      	adds	r7, #24
 8008e04:	46bd      	mov	sp, r7
 8008e06:	bd80      	pop	{r7, pc}

08008e08 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	460b      	mov	r3, r1
 8008e12:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8008e14:	78fb      	ldrb	r3, [r7, #3]
 8008e16:	f003 020f 	and.w	r2, r3, #15
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	685b      	ldr	r3, [r3, #4]
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d901      	bls.n	8008e26 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8008e22:	2301      	movs	r3, #1
 8008e24:	e050      	b.n	8008ec8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008e26:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	da0f      	bge.n	8008e4e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008e2e:	78fb      	ldrb	r3, [r7, #3]
 8008e30:	f003 020f 	and.w	r2, r3, #15
 8008e34:	4613      	mov	r3, r2
 8008e36:	00db      	lsls	r3, r3, #3
 8008e38:	1a9b      	subs	r3, r3, r2
 8008e3a:	009b      	lsls	r3, r3, #2
 8008e3c:	3338      	adds	r3, #56	; 0x38
 8008e3e:	687a      	ldr	r2, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	3304      	adds	r3, #4
 8008e44:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	2201      	movs	r2, #1
 8008e4a:	705a      	strb	r2, [r3, #1]
 8008e4c:	e00d      	b.n	8008e6a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8008e4e:	78fa      	ldrb	r2, [r7, #3]
 8008e50:	4613      	mov	r3, r2
 8008e52:	00db      	lsls	r3, r3, #3
 8008e54:	1a9b      	subs	r3, r3, r2
 8008e56:	009b      	lsls	r3, r3, #2
 8008e58:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	4413      	add	r3, r2
 8008e60:	3304      	adds	r3, #4
 8008e62:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	2200      	movs	r2, #0
 8008e68:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008e70:	78fb      	ldrb	r3, [r7, #3]
 8008e72:	f003 030f 	and.w	r3, r3, #15
 8008e76:	b2da      	uxtb	r2, r3
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008e82:	2b01      	cmp	r3, #1
 8008e84:	d101      	bne.n	8008e8a <HAL_PCD_EP_SetStall+0x82>
 8008e86:	2302      	movs	r3, #2
 8008e88:	e01e      	b.n	8008ec8 <HAL_PCD_EP_SetStall+0xc0>
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2201      	movs	r2, #1
 8008e8e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	68f9      	ldr	r1, [r7, #12]
 8008e98:	4618      	mov	r0, r3
 8008e9a:	f009 fefd 	bl	8012c98 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8008e9e:	78fb      	ldrb	r3, [r7, #3]
 8008ea0:	f003 030f 	and.w	r3, r3, #15
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d10a      	bne.n	8008ebe <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6818      	ldr	r0, [r3, #0]
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	691b      	ldr	r3, [r3, #16]
 8008eb0:	b2d9      	uxtb	r1, r3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008eb8:	461a      	mov	r2, r3
 8008eba:	f00a f8dd 	bl	8013078 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	460b      	mov	r3, r1
 8008eda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8008edc:	78fb      	ldrb	r3, [r7, #3]
 8008ede:	f003 020f 	and.w	r2, r3, #15
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d901      	bls.n	8008eee <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8008eea:	2301      	movs	r3, #1
 8008eec:	e042      	b.n	8008f74 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8008eee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	da0f      	bge.n	8008f16 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8008ef6:	78fb      	ldrb	r3, [r7, #3]
 8008ef8:	f003 020f 	and.w	r2, r3, #15
 8008efc:	4613      	mov	r3, r2
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	1a9b      	subs	r3, r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	3338      	adds	r3, #56	; 0x38
 8008f06:	687a      	ldr	r2, [r7, #4]
 8008f08:	4413      	add	r3, r2
 8008f0a:	3304      	adds	r3, #4
 8008f0c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	2201      	movs	r2, #1
 8008f12:	705a      	strb	r2, [r3, #1]
 8008f14:	e00f      	b.n	8008f36 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8008f16:	78fb      	ldrb	r3, [r7, #3]
 8008f18:	f003 020f 	and.w	r2, r3, #15
 8008f1c:	4613      	mov	r3, r2
 8008f1e:	00db      	lsls	r3, r3, #3
 8008f20:	1a9b      	subs	r3, r3, r2
 8008f22:	009b      	lsls	r3, r3, #2
 8008f24:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008f28:	687a      	ldr	r2, [r7, #4]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	3304      	adds	r3, #4
 8008f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	2200      	movs	r2, #0
 8008f3a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8008f3c:	78fb      	ldrb	r3, [r7, #3]
 8008f3e:	f003 030f 	and.w	r3, r3, #15
 8008f42:	b2da      	uxtb	r2, r3
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f4e:	2b01      	cmp	r3, #1
 8008f50:	d101      	bne.n	8008f56 <HAL_PCD_EP_ClrStall+0x86>
 8008f52:	2302      	movs	r3, #2
 8008f54:	e00e      	b.n	8008f74 <HAL_PCD_EP_ClrStall+0xa4>
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	68f9      	ldr	r1, [r7, #12]
 8008f64:	4618      	mov	r0, r3
 8008f66:	f009 ff05 	bl	8012d74 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008f72:	2300      	movs	r3, #0
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b082      	sub	sp, #8
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	460b      	mov	r3, r1
 8008f86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d101      	bne.n	8008f96 <HAL_PCD_EP_Flush+0x1a>
 8008f92:	2302      	movs	r3, #2
 8008f94:	e01b      	b.n	8008fce <HAL_PCD_EP_Flush+0x52>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	2201      	movs	r2, #1
 8008f9a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8008f9e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	da09      	bge.n	8008fba <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	78fb      	ldrb	r3, [r7, #3]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	4619      	mov	r1, r3
 8008fb2:	4610      	mov	r0, r2
 8008fb4:	f009 f884 	bl	80120c0 <USB_FlushTxFifo>
 8008fb8:	e004      	b.n	8008fc4 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	4618      	mov	r0, r3
 8008fc0:	f009 f8a4 	bl	801210c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	3708      	adds	r7, #8
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd80      	pop	{r7, pc}

08008fd6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b08a      	sub	sp, #40	; 0x28
 8008fda:	af02      	add	r7, sp, #8
 8008fdc:	6078      	str	r0, [r7, #4]
 8008fde:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	4613      	mov	r3, r2
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	1a9b      	subs	r3, r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	3338      	adds	r3, #56	; 0x38
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	3304      	adds	r3, #4
 8008ffc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	699a      	ldr	r2, [r3, #24]
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	695b      	ldr	r3, [r3, #20]
 8009006:	429a      	cmp	r2, r3
 8009008:	d901      	bls.n	800900e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800900a:	2301      	movs	r3, #1
 800900c:	e06c      	b.n	80090e8 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	695a      	ldr	r2, [r3, #20]
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	699b      	ldr	r3, [r3, #24]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	689b      	ldr	r3, [r3, #8]
 800901e:	69fa      	ldr	r2, [r7, #28]
 8009020:	429a      	cmp	r2, r3
 8009022:	d902      	bls.n	800902a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800902a:	69fb      	ldr	r3, [r7, #28]
 800902c:	3303      	adds	r3, #3
 800902e:	089b      	lsrs	r3, r3, #2
 8009030:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009032:	e02b      	b.n	800908c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	695a      	ldr	r2, [r3, #20]
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	699b      	ldr	r3, [r3, #24]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	69fa      	ldr	r2, [r7, #28]
 8009046:	429a      	cmp	r2, r3
 8009048:	d902      	bls.n	8009050 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	689b      	ldr	r3, [r3, #8]
 800904e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8009050:	69fb      	ldr	r3, [r7, #28]
 8009052:	3303      	adds	r3, #3
 8009054:	089b      	lsrs	r3, r3, #2
 8009056:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	68d9      	ldr	r1, [r3, #12]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	b2da      	uxtb	r2, r3
 8009060:	69fb      	ldr	r3, [r7, #28]
 8009062:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8009068:	b2db      	uxtb	r3, r3
 800906a:	9300      	str	r3, [sp, #0]
 800906c:	4603      	mov	r3, r0
 800906e:	6978      	ldr	r0, [r7, #20]
 8009070:	f009 fdb4 	bl	8012bdc <USB_WritePacket>

    ep->xfer_buff  += len;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	68da      	ldr	r2, [r3, #12]
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	441a      	add	r2, r3
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	699a      	ldr	r2, [r3, #24]
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	441a      	add	r2, r3
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	015a      	lsls	r2, r3, #5
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	4413      	add	r3, r2
 8009094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009098:	699b      	ldr	r3, [r3, #24]
 800909a:	b29b      	uxth	r3, r3
 800909c:	69ba      	ldr	r2, [r7, #24]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d809      	bhi.n	80090b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d203      	bcs.n	80090b6 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	695b      	ldr	r3, [r3, #20]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d1be      	bne.n	8009034 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	695a      	ldr	r2, [r3, #20]
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	699b      	ldr	r3, [r3, #24]
 80090be:	429a      	cmp	r2, r3
 80090c0:	d811      	bhi.n	80090e6 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	f003 030f 	and.w	r3, r3, #15
 80090c8:	2201      	movs	r2, #1
 80090ca:	fa02 f303 	lsl.w	r3, r2, r3
 80090ce:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80090d8:	68bb      	ldr	r3, [r7, #8]
 80090da:	43db      	mvns	r3, r3
 80090dc:	6939      	ldr	r1, [r7, #16]
 80090de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80090e2:	4013      	ands	r3, r2
 80090e4:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3720      	adds	r7, #32
 80090ec:	46bd      	mov	sp, r7
 80090ee:	bd80      	pop	{r7, pc}

080090f0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	b086      	sub	sp, #24
 80090f4:	af00      	add	r7, sp, #0
 80090f6:	6078      	str	r0, [r7, #4]
 80090f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009100:	697b      	ldr	r3, [r7, #20]
 8009102:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	333c      	adds	r3, #60	; 0x3c
 8009108:	3304      	adds	r3, #4
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	015a      	lsls	r2, r3, #5
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	4413      	add	r3, r2
 8009116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	691b      	ldr	r3, [r3, #16]
 8009122:	2b01      	cmp	r3, #1
 8009124:	f040 80a0 	bne.w	8009268 <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d015      	beq.n	800915e <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	4a72      	ldr	r2, [pc, #456]	; (8009300 <PCD_EP_OutXfrComplete_int+0x210>)
 8009136:	4293      	cmp	r3, r2
 8009138:	f240 80dd 	bls.w	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009142:	2b00      	cmp	r3, #0
 8009144:	f000 80d7 	beq.w	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	015a      	lsls	r2, r3, #5
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	4413      	add	r3, r2
 8009150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009154:	461a      	mov	r2, r3
 8009156:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800915a:	6093      	str	r3, [r2, #8]
 800915c:	e0cb      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	f003 0320 	and.w	r3, r3, #32
 8009164:	2b00      	cmp	r3, #0
 8009166:	d009      	beq.n	800917c <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	015a      	lsls	r2, r3, #5
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009174:	461a      	mov	r2, r3
 8009176:	2320      	movs	r3, #32
 8009178:	6093      	str	r3, [r2, #8]
 800917a:	e0bc      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009182:	2b00      	cmp	r3, #0
 8009184:	f040 80b7 	bne.w	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	4a5d      	ldr	r2, [pc, #372]	; (8009300 <PCD_EP_OutXfrComplete_int+0x210>)
 800918c:	4293      	cmp	r3, r2
 800918e:	d90f      	bls.n	80091b0 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009196:	2b00      	cmp	r3, #0
 8009198:	d00a      	beq.n	80091b0 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800919a:	683b      	ldr	r3, [r7, #0]
 800919c:	015a      	lsls	r2, r3, #5
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	4413      	add	r3, r2
 80091a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a6:	461a      	mov	r2, r3
 80091a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80091ac:	6093      	str	r3, [r2, #8]
 80091ae:	e0a2      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 80091b0:	6879      	ldr	r1, [r7, #4]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	4613      	mov	r3, r2
 80091b6:	00db      	lsls	r3, r3, #3
 80091b8:	1a9b      	subs	r3, r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	440b      	add	r3, r1
 80091be:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80091c2:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	0159      	lsls	r1, r3, #5
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	440b      	add	r3, r1
 80091cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 80091d6:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 80091d8:	6878      	ldr	r0, [r7, #4]
 80091da:	683a      	ldr	r2, [r7, #0]
 80091dc:	4613      	mov	r3, r2
 80091de:	00db      	lsls	r3, r3, #3
 80091e0:	1a9b      	subs	r3, r3, r2
 80091e2:	009b      	lsls	r3, r3, #2
 80091e4:	4403      	add	r3, r0
 80091e6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80091ea:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 80091ec:	6879      	ldr	r1, [r7, #4]
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	4613      	mov	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80091fe:	6819      	ldr	r1, [r3, #0]
 8009200:	6878      	ldr	r0, [r7, #4]
 8009202:	683a      	ldr	r2, [r7, #0]
 8009204:	4613      	mov	r3, r2
 8009206:	00db      	lsls	r3, r3, #3
 8009208:	1a9b      	subs	r3, r3, r2
 800920a:	009b      	lsls	r3, r3, #2
 800920c:	4403      	add	r3, r0
 800920e:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4419      	add	r1, r3
 8009216:	6878      	ldr	r0, [r7, #4]
 8009218:	683a      	ldr	r2, [r7, #0]
 800921a:	4613      	mov	r3, r2
 800921c:	00db      	lsls	r3, r3, #3
 800921e:	1a9b      	subs	r3, r3, r2
 8009220:	009b      	lsls	r3, r3, #2
 8009222:	4403      	add	r3, r0
 8009224:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009228:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d114      	bne.n	800925a <PCD_EP_OutXfrComplete_int+0x16a>
 8009230:	6879      	ldr	r1, [r7, #4]
 8009232:	683a      	ldr	r2, [r7, #0]
 8009234:	4613      	mov	r3, r2
 8009236:	00db      	lsls	r3, r3, #3
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d108      	bne.n	800925a <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6818      	ldr	r0, [r3, #0]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009252:	461a      	mov	r2, r3
 8009254:	2101      	movs	r1, #1
 8009256:	f009 ff0f 	bl	8013078 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	b2db      	uxtb	r3, r3
 800925e:	4619      	mov	r1, r3
 8009260:	6878      	ldr	r0, [r7, #4]
 8009262:	f00f fde1 	bl	8018e28 <HAL_PCD_DataOutStageCallback>
 8009266:	e046      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	4a26      	ldr	r2, [pc, #152]	; (8009304 <PCD_EP_OutXfrComplete_int+0x214>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d124      	bne.n	80092ba <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009270:	68bb      	ldr	r3, [r7, #8]
 8009272:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00a      	beq.n	8009290 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800927a:	683b      	ldr	r3, [r7, #0]
 800927c:	015a      	lsls	r2, r3, #5
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	4413      	add	r3, r2
 8009282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009286:	461a      	mov	r2, r3
 8009288:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800928c:	6093      	str	r3, [r2, #8]
 800928e:	e032      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009290:	68bb      	ldr	r3, [r7, #8]
 8009292:	f003 0320 	and.w	r3, r3, #32
 8009296:	2b00      	cmp	r3, #0
 8009298:	d008      	beq.n	80092ac <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800929a:	683b      	ldr	r3, [r7, #0]
 800929c:	015a      	lsls	r2, r3, #5
 800929e:	693b      	ldr	r3, [r7, #16]
 80092a0:	4413      	add	r3, r2
 80092a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092a6:	461a      	mov	r2, r3
 80092a8:	2320      	movs	r3, #32
 80092aa:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	4619      	mov	r1, r3
 80092b2:	6878      	ldr	r0, [r7, #4]
 80092b4:	f00f fdb8 	bl	8018e28 <HAL_PCD_DataOutStageCallback>
 80092b8:	e01d      	b.n	80092f6 <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d114      	bne.n	80092ea <PCD_EP_OutXfrComplete_int+0x1fa>
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	4613      	mov	r3, r2
 80092c6:	00db      	lsls	r3, r3, #3
 80092c8:	1a9b      	subs	r3, r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	440b      	add	r3, r1
 80092ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d108      	bne.n	80092ea <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6818      	ldr	r0, [r3, #0]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80092e2:	461a      	mov	r2, r3
 80092e4:	2100      	movs	r1, #0
 80092e6:	f009 fec7 	bl	8013078 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	4619      	mov	r1, r3
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f00f fd99 	bl	8018e28 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80092f6:	2300      	movs	r3, #0
}
 80092f8:	4618      	mov	r0, r3
 80092fa:	3718      	adds	r7, #24
 80092fc:	46bd      	mov	sp, r7
 80092fe:	bd80      	pop	{r7, pc}
 8009300:	4f54300a 	.word	0x4f54300a
 8009304:	4f54310a 	.word	0x4f54310a

08009308 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b086      	sub	sp, #24
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
 8009310:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009318:	697b      	ldr	r3, [r7, #20]
 800931a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	333c      	adds	r3, #60	; 0x3c
 8009320:	3304      	adds	r3, #4
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009326:	683b      	ldr	r3, [r7, #0]
 8009328:	015a      	lsls	r2, r3, #5
 800932a:	693b      	ldr	r3, [r7, #16]
 800932c:	4413      	add	r3, r2
 800932e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009332:	689b      	ldr	r3, [r3, #8]
 8009334:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	4a15      	ldr	r2, [pc, #84]	; (8009390 <PCD_EP_OutSetupPacket_int+0x88>)
 800933a:	4293      	cmp	r3, r2
 800933c:	d90e      	bls.n	800935c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009344:	2b00      	cmp	r3, #0
 8009346:	d009      	beq.n	800935c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	015a      	lsls	r2, r3, #5
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	4413      	add	r3, r2
 8009350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009354:	461a      	mov	r2, r3
 8009356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800935a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f00f fd51 	bl	8018e04 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	4a0a      	ldr	r2, [pc, #40]	; (8009390 <PCD_EP_OutSetupPacket_int+0x88>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d90c      	bls.n	8009384 <PCD_EP_OutSetupPacket_int+0x7c>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	691b      	ldr	r3, [r3, #16]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d108      	bne.n	8009384 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	6818      	ldr	r0, [r3, #0]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800937c:	461a      	mov	r2, r3
 800937e:	2101      	movs	r1, #1
 8009380:	f009 fe7a 	bl	8013078 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009384:	2300      	movs	r3, #0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}
 800938e:	bf00      	nop
 8009390:	4f54300a 	.word	0x4f54300a

08009394 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009394:	b480      	push	{r7}
 8009396:	b085      	sub	sp, #20
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
 80093a0:	4613      	mov	r3, r2
 80093a2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093aa:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80093ac:	78fb      	ldrb	r3, [r7, #3]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d107      	bne.n	80093c2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80093b2:	883b      	ldrh	r3, [r7, #0]
 80093b4:	0419      	lsls	r1, r3, #16
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	68ba      	ldr	r2, [r7, #8]
 80093bc:	430a      	orrs	r2, r1
 80093be:	629a      	str	r2, [r3, #40]	; 0x28
 80093c0:	e028      	b.n	8009414 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093c8:	0c1b      	lsrs	r3, r3, #16
 80093ca:	68ba      	ldr	r2, [r7, #8]
 80093cc:	4413      	add	r3, r2
 80093ce:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093d0:	2300      	movs	r3, #0
 80093d2:	73fb      	strb	r3, [r7, #15]
 80093d4:	e00d      	b.n	80093f2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	7bfb      	ldrb	r3, [r7, #15]
 80093dc:	3340      	adds	r3, #64	; 0x40
 80093de:	009b      	lsls	r3, r3, #2
 80093e0:	4413      	add	r3, r2
 80093e2:	685b      	ldr	r3, [r3, #4]
 80093e4:	0c1b      	lsrs	r3, r3, #16
 80093e6:	68ba      	ldr	r2, [r7, #8]
 80093e8:	4413      	add	r3, r2
 80093ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
 80093ee:	3301      	adds	r3, #1
 80093f0:	73fb      	strb	r3, [r7, #15]
 80093f2:	7bfa      	ldrb	r2, [r7, #15]
 80093f4:	78fb      	ldrb	r3, [r7, #3]
 80093f6:	3b01      	subs	r3, #1
 80093f8:	429a      	cmp	r2, r3
 80093fa:	d3ec      	bcc.n	80093d6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80093fc:	883b      	ldrh	r3, [r7, #0]
 80093fe:	0418      	lsls	r0, r3, #16
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6819      	ldr	r1, [r3, #0]
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	3b01      	subs	r3, #1
 8009408:	68ba      	ldr	r2, [r7, #8]
 800940a:	4302      	orrs	r2, r0
 800940c:	3340      	adds	r3, #64	; 0x40
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	440b      	add	r3, r1
 8009412:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009414:	2300      	movs	r3, #0
}
 8009416:	4618      	mov	r0, r3
 8009418:	3714      	adds	r7, #20
 800941a:	46bd      	mov	sp, r7
 800941c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009420:	4770      	bx	lr

08009422 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009422:	b480      	push	{r7}
 8009424:	b083      	sub	sp, #12
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
 800942a:	460b      	mov	r3, r1
 800942c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	887a      	ldrh	r2, [r7, #2]
 8009434:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009436:	2300      	movs	r3, #0
}
 8009438:	4618      	mov	r0, r3
 800943a:	370c      	adds	r7, #12
 800943c:	46bd      	mov	sp, r7
 800943e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009442:	4770      	bx	lr

08009444 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009444:	b480      	push	{r7}
 8009446:	b085      	sub	sp, #20
 8009448:	af00      	add	r7, sp, #0
 800944a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	2201      	movs	r2, #1
 8009456:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	699b      	ldr	r3, [r3, #24]
 8009466:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <HAL_PCDEx_ActivateLPM+0x44>)
 8009474:	4313      	orrs	r3, r2
 8009476:	68fa      	ldr	r2, [r7, #12]
 8009478:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800947a:	2300      	movs	r3, #0
}
 800947c:	4618      	mov	r0, r3
 800947e:	3714      	adds	r7, #20
 8009480:	46bd      	mov	sp, r7
 8009482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009486:	4770      	bx	lr
 8009488:	10000003 	.word	0x10000003

0800948c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	6078      	str	r0, [r7, #4]
 8009494:	460b      	mov	r3, r1
 8009496:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009498:	bf00      	nop
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a2:	4770      	bx	lr

080094a4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 80094a4:	b480      	push	{r7}
 80094a6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 80094a8:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a04      	ldr	r2, [pc, #16]	; (80094c0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80094ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80094b2:	6013      	str	r3, [r2, #0]
}
 80094b4:	bf00      	nop
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	58024800 	.word	0x58024800

080094c4 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2b00      	cmp	r3, #0
 80094d0:	d069      	beq.n	80095a6 <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 80094d2:	4b38      	ldr	r3, [pc, #224]	; (80095b4 <HAL_PWR_ConfigPVD+0xf0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4935      	ldr	r1, [pc, #212]	; (80095b4 <HAL_PWR_ConfigPVD+0xf0>)
 80094e0:	4313      	orrs	r3, r2
 80094e2:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 80094e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80094f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80094f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 80094f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80094fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009500:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009508:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 800950c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009516:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800951a:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 800951c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009520:	685b      	ldr	r3, [r3, #4]
 8009522:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009526:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800952a:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d009      	beq.n	800954c <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8009538:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800953c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009540:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009544:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009548:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009554:	2b00      	cmp	r3, #0
 8009556:	d009      	beq.n	800956c <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8009558:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800955c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009560:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009564:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009568:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685b      	ldr	r3, [r3, #4]
 8009570:	f003 0301 	and.w	r3, r3, #1
 8009574:	2b00      	cmp	r3, #0
 8009576:	d007      	beq.n	8009588 <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8009578:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009582:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009586:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	f003 0302 	and.w	r3, r3, #2
 8009590:	2b00      	cmp	r3, #0
 8009592:	d009      	beq.n	80095a8 <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8009594:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009598:	685b      	ldr	r3, [r3, #4]
 800959a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800959e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80095a2:	6053      	str	r3, [r2, #4]
 80095a4:	e000      	b.n	80095a8 <HAL_PWR_ConfigPVD+0xe4>
    return;
 80095a6:	bf00      	nop
  }
}
 80095a8:	370c      	adds	r7, #12
 80095aa:	46bd      	mov	sp, r7
 80095ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	58024800 	.word	0x58024800

080095b8 <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 80095b8:	b480      	push	{r7}
 80095ba:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 80095bc:	4b05      	ldr	r3, [pc, #20]	; (80095d4 <HAL_PWR_EnablePVD+0x1c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a04      	ldr	r2, [pc, #16]	; (80095d4 <HAL_PWR_EnablePVD+0x1c>)
 80095c2:	f043 0310 	orr.w	r3, r3, #16
 80095c6:	6013      	str	r3, [r2, #0]
}
 80095c8:	bf00      	nop
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr
 80095d2:	bf00      	nop
 80095d4:	58024800 	.word	0x58024800

080095d8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b084      	sub	sp, #16
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80095e0:	4b19      	ldr	r3, [pc, #100]	; (8009648 <HAL_PWREx_ConfigSupply+0x70>)
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f003 0304 	and.w	r3, r3, #4
 80095e8:	2b04      	cmp	r3, #4
 80095ea:	d00a      	beq.n	8009602 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80095ec:	4b16      	ldr	r3, [pc, #88]	; (8009648 <HAL_PWREx_ConfigSupply+0x70>)
 80095ee:	68db      	ldr	r3, [r3, #12]
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	687a      	ldr	r2, [r7, #4]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d001      	beq.n	80095fe <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	e01f      	b.n	800963e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80095fe:	2300      	movs	r3, #0
 8009600:	e01d      	b.n	800963e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009602:	4b11      	ldr	r3, [pc, #68]	; (8009648 <HAL_PWREx_ConfigSupply+0x70>)
 8009604:	68db      	ldr	r3, [r3, #12]
 8009606:	f023 0207 	bic.w	r2, r3, #7
 800960a:	490f      	ldr	r1, [pc, #60]	; (8009648 <HAL_PWREx_ConfigSupply+0x70>)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	4313      	orrs	r3, r2
 8009610:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009612:	f7fa ffa7 	bl	8004564 <HAL_GetTick>
 8009616:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009618:	e009      	b.n	800962e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800961a:	f7fa ffa3 	bl	8004564 <HAL_GetTick>
 800961e:	4602      	mov	r2, r0
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	1ad3      	subs	r3, r2, r3
 8009624:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009628:	d901      	bls.n	800962e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800962a:	2301      	movs	r3, #1
 800962c:	e007      	b.n	800963e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800962e:	4b06      	ldr	r3, [pc, #24]	; (8009648 <HAL_PWREx_ConfigSupply+0x70>)
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009636:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800963a:	d1ee      	bne.n	800961a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800963c:	2300      	movs	r3, #0
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
 8009646:	bf00      	nop
 8009648:	58024800 	.word	0x58024800

0800964c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800964c:	b480      	push	{r7}
 800964e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009650:	4b05      	ldr	r3, [pc, #20]	; (8009668 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009652:	68db      	ldr	r3, [r3, #12]
 8009654:	4a04      	ldr	r2, [pc, #16]	; (8009668 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009656:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800965a:	60d3      	str	r3, [r2, #12]
}
 800965c:	bf00      	nop
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	58024800 	.word	0x58024800

0800966c <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8009670:	4b1b      	ldr	r3, [pc, #108]	; (80096e0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	f003 0310 	and.w	r3, r3, #16
 8009678:	2b00      	cmp	r3, #0
 800967a:	d014      	beq.n	80096a6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 800967c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009680:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009684:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800968c:	d10b      	bne.n	80096a6 <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 800968e:	f7fa fa75 	bl	8003b7c <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8009692:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009696:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800969a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800969e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 80096a6:	4b0e      	ldr	r3, [pc, #56]	; (80096e0 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d014      	beq.n	80096dc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 80096b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80096be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80096c2:	d10b      	bne.n	80096dc <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 80096c4:	f000 f80e 	bl	80096e4 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 80096c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80096cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80096d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80096d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 80096dc:	bf00      	nop
 80096de:	bd80      	pop	{r7, pc}
 80096e0:	58024800 	.word	0x58024800

080096e4 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 80096e4:	b480      	push	{r7}
 80096e6:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 80096e8:	bf00      	nop
 80096ea:	46bd      	mov	sp, r7
 80096ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f0:	4770      	bx	lr
	...

080096f4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b08c      	sub	sp, #48	; 0x30
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d101      	bne.n	8009706 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e3ff      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	2b00      	cmp	r3, #0
 8009710:	f000 8087 	beq.w	8009822 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009714:	4b99      	ldr	r3, [pc, #612]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009716:	691b      	ldr	r3, [r3, #16]
 8009718:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800971c:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800971e:	4b97      	ldr	r3, [pc, #604]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009722:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009726:	2b10      	cmp	r3, #16
 8009728:	d007      	beq.n	800973a <HAL_RCC_OscConfig+0x46>
 800972a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800972c:	2b18      	cmp	r3, #24
 800972e:	d110      	bne.n	8009752 <HAL_RCC_OscConfig+0x5e>
 8009730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009732:	f003 0303 	and.w	r3, r3, #3
 8009736:	2b02      	cmp	r3, #2
 8009738:	d10b      	bne.n	8009752 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800973a:	4b90      	ldr	r3, [pc, #576]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009742:	2b00      	cmp	r3, #0
 8009744:	d06c      	beq.n	8009820 <HAL_RCC_OscConfig+0x12c>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d168      	bne.n	8009820 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	e3d9      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	685b      	ldr	r3, [r3, #4]
 8009756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800975a:	d106      	bne.n	800976a <HAL_RCC_OscConfig+0x76>
 800975c:	4b87      	ldr	r3, [pc, #540]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	4a86      	ldr	r2, [pc, #536]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009762:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009766:	6013      	str	r3, [r2, #0]
 8009768:	e02e      	b.n	80097c8 <HAL_RCC_OscConfig+0xd4>
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	685b      	ldr	r3, [r3, #4]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d10c      	bne.n	800978c <HAL_RCC_OscConfig+0x98>
 8009772:	4b82      	ldr	r3, [pc, #520]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a81      	ldr	r2, [pc, #516]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009778:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800977c:	6013      	str	r3, [r2, #0]
 800977e:	4b7f      	ldr	r3, [pc, #508]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	4a7e      	ldr	r2, [pc, #504]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009784:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009788:	6013      	str	r3, [r2, #0]
 800978a:	e01d      	b.n	80097c8 <HAL_RCC_OscConfig+0xd4>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009794:	d10c      	bne.n	80097b0 <HAL_RCC_OscConfig+0xbc>
 8009796:	4b79      	ldr	r3, [pc, #484]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a78      	ldr	r2, [pc, #480]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800979c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4b76      	ldr	r3, [pc, #472]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4a75      	ldr	r2, [pc, #468]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80097ac:	6013      	str	r3, [r2, #0]
 80097ae:	e00b      	b.n	80097c8 <HAL_RCC_OscConfig+0xd4>
 80097b0:	4b72      	ldr	r3, [pc, #456]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	4a71      	ldr	r2, [pc, #452]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80097ba:	6013      	str	r3, [r2, #0]
 80097bc:	4b6f      	ldr	r3, [pc, #444]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a6e      	ldr	r2, [pc, #440]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80097c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	685b      	ldr	r3, [r3, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d013      	beq.n	80097f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097d0:	f7fa fec8 	bl	8004564 <HAL_GetTick>
 80097d4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097d6:	e008      	b.n	80097ea <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097d8:	f7fa fec4 	bl	8004564 <HAL_GetTick>
 80097dc:	4602      	mov	r2, r0
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	1ad3      	subs	r3, r2, r3
 80097e2:	2b64      	cmp	r3, #100	; 0x64
 80097e4:	d901      	bls.n	80097ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80097e6:	2303      	movs	r3, #3
 80097e8:	e38d      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097ea:	4b64      	ldr	r3, [pc, #400]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d0f0      	beq.n	80097d8 <HAL_RCC_OscConfig+0xe4>
 80097f6:	e014      	b.n	8009822 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80097f8:	f7fa feb4 	bl	8004564 <HAL_GetTick>
 80097fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097fe:	e008      	b.n	8009812 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009800:	f7fa feb0 	bl	8004564 <HAL_GetTick>
 8009804:	4602      	mov	r2, r0
 8009806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009808:	1ad3      	subs	r3, r2, r3
 800980a:	2b64      	cmp	r3, #100	; 0x64
 800980c:	d901      	bls.n	8009812 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800980e:	2303      	movs	r3, #3
 8009810:	e379      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009812:	4b5a      	ldr	r3, [pc, #360]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800981a:	2b00      	cmp	r3, #0
 800981c:	d1f0      	bne.n	8009800 <HAL_RCC_OscConfig+0x10c>
 800981e:	e000      	b.n	8009822 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f003 0302 	and.w	r3, r3, #2
 800982a:	2b00      	cmp	r3, #0
 800982c:	f000 80ae 	beq.w	800998c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009830:	4b52      	ldr	r3, [pc, #328]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009832:	691b      	ldr	r3, [r3, #16]
 8009834:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009838:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800983a:	4b50      	ldr	r3, [pc, #320]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800983c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800983e:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009840:	6a3b      	ldr	r3, [r7, #32]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d007      	beq.n	8009856 <HAL_RCC_OscConfig+0x162>
 8009846:	6a3b      	ldr	r3, [r7, #32]
 8009848:	2b18      	cmp	r3, #24
 800984a:	d13a      	bne.n	80098c2 <HAL_RCC_OscConfig+0x1ce>
 800984c:	69fb      	ldr	r3, [r7, #28]
 800984e:	f003 0303 	and.w	r3, r3, #3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d135      	bne.n	80098c2 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009856:	4b49      	ldr	r3, [pc, #292]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f003 0304 	and.w	r3, r3, #4
 800985e:	2b00      	cmp	r3, #0
 8009860:	d005      	beq.n	800986e <HAL_RCC_OscConfig+0x17a>
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	2b00      	cmp	r3, #0
 8009868:	d101      	bne.n	800986e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800986a:	2301      	movs	r3, #1
 800986c:	e34b      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800986e:	f7fa fea7 	bl	80045c0 <HAL_GetREVID>
 8009872:	4602      	mov	r2, r0
 8009874:	f241 0303 	movw	r3, #4099	; 0x1003
 8009878:	429a      	cmp	r2, r3
 800987a:	d817      	bhi.n	80098ac <HAL_RCC_OscConfig+0x1b8>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	691b      	ldr	r3, [r3, #16]
 8009880:	2b40      	cmp	r3, #64	; 0x40
 8009882:	d108      	bne.n	8009896 <HAL_RCC_OscConfig+0x1a2>
 8009884:	4b3d      	ldr	r3, [pc, #244]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800988c:	4a3b      	ldr	r2, [pc, #236]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800988e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009892:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009894:	e07a      	b.n	800998c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009896:	4b39      	ldr	r3, [pc, #228]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	691b      	ldr	r3, [r3, #16]
 80098a2:	031b      	lsls	r3, r3, #12
 80098a4:	4935      	ldr	r1, [pc, #212]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098a6:	4313      	orrs	r3, r2
 80098a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098aa:	e06f      	b.n	800998c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80098ac:	4b33      	ldr	r3, [pc, #204]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	061b      	lsls	r3, r3, #24
 80098ba:	4930      	ldr	r1, [pc, #192]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098bc:	4313      	orrs	r3, r2
 80098be:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80098c0:	e064      	b.n	800998c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d045      	beq.n	8009956 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80098ca:	4b2c      	ldr	r3, [pc, #176]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f023 0219 	bic.w	r2, r3, #25
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	68db      	ldr	r3, [r3, #12]
 80098d6:	4929      	ldr	r1, [pc, #164]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098d8:	4313      	orrs	r3, r2
 80098da:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098dc:	f7fa fe42 	bl	8004564 <HAL_GetTick>
 80098e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098e2:	e008      	b.n	80098f6 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098e4:	f7fa fe3e 	bl	8004564 <HAL_GetTick>
 80098e8:	4602      	mov	r2, r0
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	1ad3      	subs	r3, r2, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d901      	bls.n	80098f6 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 80098f2:	2303      	movs	r3, #3
 80098f4:	e307      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098f6:	4b21      	ldr	r3, [pc, #132]	; (800997c <HAL_RCC_OscConfig+0x288>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	f003 0304 	and.w	r3, r3, #4
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d0f0      	beq.n	80098e4 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009902:	f7fa fe5d 	bl	80045c0 <HAL_GetREVID>
 8009906:	4602      	mov	r2, r0
 8009908:	f241 0303 	movw	r3, #4099	; 0x1003
 800990c:	429a      	cmp	r2, r3
 800990e:	d817      	bhi.n	8009940 <HAL_RCC_OscConfig+0x24c>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	2b40      	cmp	r3, #64	; 0x40
 8009916:	d108      	bne.n	800992a <HAL_RCC_OscConfig+0x236>
 8009918:	4b18      	ldr	r3, [pc, #96]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800991a:	685b      	ldr	r3, [r3, #4]
 800991c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009920:	4a16      	ldr	r2, [pc, #88]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009922:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009926:	6053      	str	r3, [r2, #4]
 8009928:	e030      	b.n	800998c <HAL_RCC_OscConfig+0x298>
 800992a:	4b14      	ldr	r3, [pc, #80]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	031b      	lsls	r3, r3, #12
 8009938:	4910      	ldr	r1, [pc, #64]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800993a:	4313      	orrs	r3, r2
 800993c:	604b      	str	r3, [r1, #4]
 800993e:	e025      	b.n	800998c <HAL_RCC_OscConfig+0x298>
 8009940:	4b0e      	ldr	r3, [pc, #56]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	691b      	ldr	r3, [r3, #16]
 800994c:	061b      	lsls	r3, r3, #24
 800994e:	490b      	ldr	r1, [pc, #44]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009950:	4313      	orrs	r3, r2
 8009952:	604b      	str	r3, [r1, #4]
 8009954:	e01a      	b.n	800998c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009956:	4b09      	ldr	r3, [pc, #36]	; (800997c <HAL_RCC_OscConfig+0x288>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a08      	ldr	r2, [pc, #32]	; (800997c <HAL_RCC_OscConfig+0x288>)
 800995c:	f023 0301 	bic.w	r3, r3, #1
 8009960:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009962:	f7fa fdff 	bl	8004564 <HAL_GetTick>
 8009966:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009968:	e00a      	b.n	8009980 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800996a:	f7fa fdfb 	bl	8004564 <HAL_GetTick>
 800996e:	4602      	mov	r2, r0
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	1ad3      	subs	r3, r2, r3
 8009974:	2b02      	cmp	r3, #2
 8009976:	d903      	bls.n	8009980 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e2c4      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
 800997c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009980:	4ba4      	ldr	r3, [pc, #656]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	f003 0304 	and.w	r3, r3, #4
 8009988:	2b00      	cmp	r3, #0
 800998a:	d1ee      	bne.n	800996a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f003 0310 	and.w	r3, r3, #16
 8009994:	2b00      	cmp	r3, #0
 8009996:	f000 80a9 	beq.w	8009aec <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800999a:	4b9e      	ldr	r3, [pc, #632]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 800999c:	691b      	ldr	r3, [r3, #16]
 800999e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80099a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80099a4:	4b9b      	ldr	r3, [pc, #620]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 80099a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d007      	beq.n	80099c0 <HAL_RCC_OscConfig+0x2cc>
 80099b0:	69bb      	ldr	r3, [r7, #24]
 80099b2:	2b18      	cmp	r3, #24
 80099b4:	d13a      	bne.n	8009a2c <HAL_RCC_OscConfig+0x338>
 80099b6:	697b      	ldr	r3, [r7, #20]
 80099b8:	f003 0303 	and.w	r3, r3, #3
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d135      	bne.n	8009a2c <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099c0:	4b94      	ldr	r3, [pc, #592]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d005      	beq.n	80099d8 <HAL_RCC_OscConfig+0x2e4>
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	69db      	ldr	r3, [r3, #28]
 80099d0:	2b80      	cmp	r3, #128	; 0x80
 80099d2:	d001      	beq.n	80099d8 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 80099d4:	2301      	movs	r3, #1
 80099d6:	e296      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80099d8:	f7fa fdf2 	bl	80045c0 <HAL_GetREVID>
 80099dc:	4602      	mov	r2, r0
 80099de:	f241 0303 	movw	r3, #4099	; 0x1003
 80099e2:	429a      	cmp	r2, r3
 80099e4:	d817      	bhi.n	8009a16 <HAL_RCC_OscConfig+0x322>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6a1b      	ldr	r3, [r3, #32]
 80099ea:	2b20      	cmp	r3, #32
 80099ec:	d108      	bne.n	8009a00 <HAL_RCC_OscConfig+0x30c>
 80099ee:	4b89      	ldr	r3, [pc, #548]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80099f6:	4a87      	ldr	r2, [pc, #540]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 80099f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80099fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80099fe:	e075      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a00:	4b84      	ldr	r3, [pc, #528]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a02:	685b      	ldr	r3, [r3, #4]
 8009a04:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6a1b      	ldr	r3, [r3, #32]
 8009a0c:	069b      	lsls	r3, r3, #26
 8009a0e:	4981      	ldr	r1, [pc, #516]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a10:	4313      	orrs	r3, r2
 8009a12:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a14:	e06a      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a16:	4b7f      	ldr	r3, [pc, #508]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a18:	68db      	ldr	r3, [r3, #12]
 8009a1a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a1b      	ldr	r3, [r3, #32]
 8009a22:	061b      	lsls	r3, r3, #24
 8009a24:	497b      	ldr	r1, [pc, #492]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a26:	4313      	orrs	r3, r2
 8009a28:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a2a:	e05f      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	69db      	ldr	r3, [r3, #28]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d042      	beq.n	8009aba <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009a34:	4b77      	ldr	r3, [pc, #476]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a76      	ldr	r2, [pc, #472]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a40:	f7fa fd90 	bl	8004564 <HAL_GetTick>
 8009a44:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a46:	e008      	b.n	8009a5a <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009a48:	f7fa fd8c 	bl	8004564 <HAL_GetTick>
 8009a4c:	4602      	mov	r2, r0
 8009a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a50:	1ad3      	subs	r3, r2, r3
 8009a52:	2b02      	cmp	r3, #2
 8009a54:	d901      	bls.n	8009a5a <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8009a56:	2303      	movs	r3, #3
 8009a58:	e255      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009a5a:	4b6e      	ldr	r3, [pc, #440]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d0f0      	beq.n	8009a48 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a66:	f7fa fdab 	bl	80045c0 <HAL_GetREVID>
 8009a6a:	4602      	mov	r2, r0
 8009a6c:	f241 0303 	movw	r3, #4099	; 0x1003
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d817      	bhi.n	8009aa4 <HAL_RCC_OscConfig+0x3b0>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	6a1b      	ldr	r3, [r3, #32]
 8009a78:	2b20      	cmp	r3, #32
 8009a7a:	d108      	bne.n	8009a8e <HAL_RCC_OscConfig+0x39a>
 8009a7c:	4b65      	ldr	r3, [pc, #404]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a7e:	685b      	ldr	r3, [r3, #4]
 8009a80:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009a84:	4a63      	ldr	r2, [pc, #396]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a86:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009a8a:	6053      	str	r3, [r2, #4]
 8009a8c:	e02e      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
 8009a8e:	4b61      	ldr	r3, [pc, #388]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a90:	685b      	ldr	r3, [r3, #4]
 8009a92:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a1b      	ldr	r3, [r3, #32]
 8009a9a:	069b      	lsls	r3, r3, #26
 8009a9c:	495d      	ldr	r1, [pc, #372]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	604b      	str	r3, [r1, #4]
 8009aa2:	e023      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
 8009aa4:	4b5b      	ldr	r3, [pc, #364]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009aa6:	68db      	ldr	r3, [r3, #12]
 8009aa8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	6a1b      	ldr	r3, [r3, #32]
 8009ab0:	061b      	lsls	r3, r3, #24
 8009ab2:	4958      	ldr	r1, [pc, #352]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	60cb      	str	r3, [r1, #12]
 8009ab8:	e018      	b.n	8009aec <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009aba:	4b56      	ldr	r3, [pc, #344]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	4a55      	ldr	r2, [pc, #340]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009ac4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009ac6:	f7fa fd4d 	bl	8004564 <HAL_GetTick>
 8009aca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009acc:	e008      	b.n	8009ae0 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009ace:	f7fa fd49 	bl	8004564 <HAL_GetTick>
 8009ad2:	4602      	mov	r2, r0
 8009ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ad6:	1ad3      	subs	r3, r2, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d901      	bls.n	8009ae0 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 8009adc:	2303      	movs	r3, #3
 8009ade:	e212      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ae0:	4b4c      	ldr	r3, [pc, #304]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1f0      	bne.n	8009ace <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f003 0308 	and.w	r3, r3, #8
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d036      	beq.n	8009b66 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	695b      	ldr	r3, [r3, #20]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d019      	beq.n	8009b34 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009b00:	4b44      	ldr	r3, [pc, #272]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b04:	4a43      	ldr	r2, [pc, #268]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b06:	f043 0301 	orr.w	r3, r3, #1
 8009b0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b0c:	f7fa fd2a 	bl	8004564 <HAL_GetTick>
 8009b10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b12:	e008      	b.n	8009b26 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b14:	f7fa fd26 	bl	8004564 <HAL_GetTick>
 8009b18:	4602      	mov	r2, r0
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b1c:	1ad3      	subs	r3, r2, r3
 8009b1e:	2b02      	cmp	r3, #2
 8009b20:	d901      	bls.n	8009b26 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8009b22:	2303      	movs	r3, #3
 8009b24:	e1ef      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009b26:	4b3b      	ldr	r3, [pc, #236]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b2a:	f003 0302 	and.w	r3, r3, #2
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d0f0      	beq.n	8009b14 <HAL_RCC_OscConfig+0x420>
 8009b32:	e018      	b.n	8009b66 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009b34:	4b37      	ldr	r3, [pc, #220]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b38:	4a36      	ldr	r2, [pc, #216]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b3a:	f023 0301 	bic.w	r3, r3, #1
 8009b3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b40:	f7fa fd10 	bl	8004564 <HAL_GetTick>
 8009b44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b46:	e008      	b.n	8009b5a <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009b48:	f7fa fd0c 	bl	8004564 <HAL_GetTick>
 8009b4c:	4602      	mov	r2, r0
 8009b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b50:	1ad3      	subs	r3, r2, r3
 8009b52:	2b02      	cmp	r3, #2
 8009b54:	d901      	bls.n	8009b5a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8009b56:	2303      	movs	r3, #3
 8009b58:	e1d5      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b5a:	4b2e      	ldr	r3, [pc, #184]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b5e:	f003 0302 	and.w	r3, r3, #2
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d1f0      	bne.n	8009b48 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f003 0320 	and.w	r3, r3, #32
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d036      	beq.n	8009be0 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	699b      	ldr	r3, [r3, #24]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d019      	beq.n	8009bae <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009b7a:	4b26      	ldr	r3, [pc, #152]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	4a25      	ldr	r2, [pc, #148]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009b80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009b84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009b86:	f7fa fced 	bl	8004564 <HAL_GetTick>
 8009b8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009b8c:	e008      	b.n	8009ba0 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009b8e:	f7fa fce9 	bl	8004564 <HAL_GetTick>
 8009b92:	4602      	mov	r2, r0
 8009b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b96:	1ad3      	subs	r3, r2, r3
 8009b98:	2b02      	cmp	r3, #2
 8009b9a:	d901      	bls.n	8009ba0 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8009b9c:	2303      	movs	r3, #3
 8009b9e:	e1b2      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009ba0:	4b1c      	ldr	r3, [pc, #112]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d0f0      	beq.n	8009b8e <HAL_RCC_OscConfig+0x49a>
 8009bac:	e018      	b.n	8009be0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009bae:	4b19      	ldr	r3, [pc, #100]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a18      	ldr	r2, [pc, #96]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009bb8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009bba:	f7fa fcd3 	bl	8004564 <HAL_GetTick>
 8009bbe:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bc0:	e008      	b.n	8009bd4 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009bc2:	f7fa fccf 	bl	8004564 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d901      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e198      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009bd4:	4b0f      	ldr	r3, [pc, #60]	; (8009c14 <HAL_RCC_OscConfig+0x520>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d1f0      	bne.n	8009bc2 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f003 0304 	and.w	r3, r3, #4
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	f000 8085 	beq.w	8009cf8 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009bee:	4b0a      	ldr	r3, [pc, #40]	; (8009c18 <HAL_RCC_OscConfig+0x524>)
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	4a09      	ldr	r2, [pc, #36]	; (8009c18 <HAL_RCC_OscConfig+0x524>)
 8009bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009bf8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009bfa:	f7fa fcb3 	bl	8004564 <HAL_GetTick>
 8009bfe:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c00:	e00c      	b.n	8009c1c <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009c02:	f7fa fcaf 	bl	8004564 <HAL_GetTick>
 8009c06:	4602      	mov	r2, r0
 8009c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c0a:	1ad3      	subs	r3, r2, r3
 8009c0c:	2b64      	cmp	r3, #100	; 0x64
 8009c0e:	d905      	bls.n	8009c1c <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 8009c10:	2303      	movs	r3, #3
 8009c12:	e178      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
 8009c14:	58024400 	.word	0x58024400
 8009c18:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009c1c:	4b96      	ldr	r3, [pc, #600]	; (8009e78 <HAL_RCC_OscConfig+0x784>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d0ec      	beq.n	8009c02 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	689b      	ldr	r3, [r3, #8]
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d106      	bne.n	8009c3e <HAL_RCC_OscConfig+0x54a>
 8009c30:	4b92      	ldr	r3, [pc, #584]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c34:	4a91      	ldr	r2, [pc, #580]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c36:	f043 0301 	orr.w	r3, r3, #1
 8009c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8009c3c:	e02d      	b.n	8009c9a <HAL_RCC_OscConfig+0x5a6>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d10c      	bne.n	8009c60 <HAL_RCC_OscConfig+0x56c>
 8009c46:	4b8d      	ldr	r3, [pc, #564]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c4a:	4a8c      	ldr	r2, [pc, #560]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c4c:	f023 0301 	bic.w	r3, r3, #1
 8009c50:	6713      	str	r3, [r2, #112]	; 0x70
 8009c52:	4b8a      	ldr	r3, [pc, #552]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c56:	4a89      	ldr	r2, [pc, #548]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c58:	f023 0304 	bic.w	r3, r3, #4
 8009c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c5e:	e01c      	b.n	8009c9a <HAL_RCC_OscConfig+0x5a6>
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	2b05      	cmp	r3, #5
 8009c66:	d10c      	bne.n	8009c82 <HAL_RCC_OscConfig+0x58e>
 8009c68:	4b84      	ldr	r3, [pc, #528]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c6c:	4a83      	ldr	r2, [pc, #524]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c6e:	f043 0304 	orr.w	r3, r3, #4
 8009c72:	6713      	str	r3, [r2, #112]	; 0x70
 8009c74:	4b81      	ldr	r3, [pc, #516]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c78:	4a80      	ldr	r2, [pc, #512]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c7a:	f043 0301 	orr.w	r3, r3, #1
 8009c7e:	6713      	str	r3, [r2, #112]	; 0x70
 8009c80:	e00b      	b.n	8009c9a <HAL_RCC_OscConfig+0x5a6>
 8009c82:	4b7e      	ldr	r3, [pc, #504]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c86:	4a7d      	ldr	r2, [pc, #500]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c88:	f023 0301 	bic.w	r3, r3, #1
 8009c8c:	6713      	str	r3, [r2, #112]	; 0x70
 8009c8e:	4b7b      	ldr	r3, [pc, #492]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c92:	4a7a      	ldr	r2, [pc, #488]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009c94:	f023 0304 	bic.w	r3, r3, #4
 8009c98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d015      	beq.n	8009cce <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009ca2:	f7fa fc5f 	bl	8004564 <HAL_GetTick>
 8009ca6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ca8:	e00a      	b.n	8009cc0 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009caa:	f7fa fc5b 	bl	8004564 <HAL_GetTick>
 8009cae:	4602      	mov	r2, r0
 8009cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb2:	1ad3      	subs	r3, r2, r3
 8009cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009cb8:	4293      	cmp	r3, r2
 8009cba:	d901      	bls.n	8009cc0 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 8009cbc:	2303      	movs	r3, #3
 8009cbe:	e122      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009cc0:	4b6e      	ldr	r3, [pc, #440]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cc4:	f003 0302 	and.w	r3, r3, #2
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d0ee      	beq.n	8009caa <HAL_RCC_OscConfig+0x5b6>
 8009ccc:	e014      	b.n	8009cf8 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009cce:	f7fa fc49 	bl	8004564 <HAL_GetTick>
 8009cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cd4:	e00a      	b.n	8009cec <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009cd6:	f7fa fc45 	bl	8004564 <HAL_GetTick>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ce4:	4293      	cmp	r3, r2
 8009ce6:	d901      	bls.n	8009cec <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	e10c      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009cec:	4b63      	ldr	r3, [pc, #396]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009cf0:	f003 0302 	and.w	r3, r3, #2
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d1ee      	bne.n	8009cd6 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	f000 8101 	beq.w	8009f04 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009d02:	4b5e      	ldr	r3, [pc, #376]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d04:	691b      	ldr	r3, [r3, #16]
 8009d06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d0a:	2b18      	cmp	r3, #24
 8009d0c:	f000 80bc 	beq.w	8009e88 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d14:	2b02      	cmp	r3, #2
 8009d16:	f040 8095 	bne.w	8009e44 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d1a:	4b58      	ldr	r3, [pc, #352]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	4a57      	ldr	r2, [pc, #348]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009d26:	f7fa fc1d 	bl	8004564 <HAL_GetTick>
 8009d2a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d2c:	e008      	b.n	8009d40 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d2e:	f7fa fc19 	bl	8004564 <HAL_GetTick>
 8009d32:	4602      	mov	r2, r0
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	1ad3      	subs	r3, r2, r3
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d901      	bls.n	8009d40 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 8009d3c:	2303      	movs	r3, #3
 8009d3e:	e0e2      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009d40:	4b4e      	ldr	r3, [pc, #312]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f0      	bne.n	8009d2e <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d4c:	4b4b      	ldr	r3, [pc, #300]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d4e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009d50:	4b4b      	ldr	r3, [pc, #300]	; (8009e80 <HAL_RCC_OscConfig+0x78c>)
 8009d52:	4013      	ands	r3, r2
 8009d54:	687a      	ldr	r2, [r7, #4]
 8009d56:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009d5c:	0112      	lsls	r2, r2, #4
 8009d5e:	430a      	orrs	r2, r1
 8009d60:	4946      	ldr	r1, [pc, #280]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	628b      	str	r3, [r1, #40]	; 0x28
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d6a:	3b01      	subs	r3, #1
 8009d6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009d74:	3b01      	subs	r3, #1
 8009d76:	025b      	lsls	r3, r3, #9
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	431a      	orrs	r2, r3
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	3b01      	subs	r3, #1
 8009d82:	041b      	lsls	r3, r3, #16
 8009d84:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d88:	431a      	orrs	r2, r3
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	061b      	lsls	r3, r3, #24
 8009d92:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d96:	4939      	ldr	r1, [pc, #228]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009d9c:	4b37      	ldr	r3, [pc, #220]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009da0:	4a36      	ldr	r2, [pc, #216]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009da2:	f023 0301 	bic.w	r3, r3, #1
 8009da6:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009da8:	4b34      	ldr	r3, [pc, #208]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009dac:	4b35      	ldr	r3, [pc, #212]	; (8009e84 <HAL_RCC_OscConfig+0x790>)
 8009dae:	4013      	ands	r3, r2
 8009db0:	687a      	ldr	r2, [r7, #4]
 8009db2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009db4:	00d2      	lsls	r2, r2, #3
 8009db6:	4931      	ldr	r1, [pc, #196]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009db8:	4313      	orrs	r3, r2
 8009dba:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009dbc:	4b2f      	ldr	r3, [pc, #188]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	f023 020c 	bic.w	r2, r3, #12
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc8:	492c      	ldr	r1, [pc, #176]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009dce:	4b2b      	ldr	r3, [pc, #172]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dd2:	f023 0202 	bic.w	r2, r3, #2
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dda:	4928      	ldr	r1, [pc, #160]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009ddc:	4313      	orrs	r3, r2
 8009dde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009de0:	4b26      	ldr	r3, [pc, #152]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009de4:	4a25      	ldr	r2, [pc, #148]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dea:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009dec:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df0:	4a22      	ldr	r2, [pc, #136]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009df2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009df6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009df8:	4b20      	ldr	r3, [pc, #128]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dfc:	4a1f      	ldr	r2, [pc, #124]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009dfe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009e02:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009e04:	4b1d      	ldr	r3, [pc, #116]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e08:	4a1c      	ldr	r2, [pc, #112]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e0a:	f043 0301 	orr.w	r3, r3, #1
 8009e0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009e10:	4b1a      	ldr	r3, [pc, #104]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a19      	ldr	r2, [pc, #100]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009e1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e1c:	f7fa fba2 	bl	8004564 <HAL_GetTick>
 8009e20:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e22:	e008      	b.n	8009e36 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e24:	f7fa fb9e 	bl	8004564 <HAL_GetTick>
 8009e28:	4602      	mov	r2, r0
 8009e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	d901      	bls.n	8009e36 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 8009e32:	2303      	movs	r3, #3
 8009e34:	e067      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d0f0      	beq.n	8009e24 <HAL_RCC_OscConfig+0x730>
 8009e42:	e05f      	b.n	8009f04 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4a0c      	ldr	r2, [pc, #48]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e50:	f7fa fb88 	bl	8004564 <HAL_GetTick>
 8009e54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e56:	e008      	b.n	8009e6a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e58:	f7fa fb84 	bl	8004564 <HAL_GetTick>
 8009e5c:	4602      	mov	r2, r0
 8009e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e60:	1ad3      	subs	r3, r2, r3
 8009e62:	2b02      	cmp	r3, #2
 8009e64:	d901      	bls.n	8009e6a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8009e66:	2303      	movs	r3, #3
 8009e68:	e04d      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e6a:	4b04      	ldr	r3, [pc, #16]	; (8009e7c <HAL_RCC_OscConfig+0x788>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d1f0      	bne.n	8009e58 <HAL_RCC_OscConfig+0x764>
 8009e76:	e045      	b.n	8009f04 <HAL_RCC_OscConfig+0x810>
 8009e78:	58024800 	.word	0x58024800
 8009e7c:	58024400 	.word	0x58024400
 8009e80:	fffffc0c 	.word	0xfffffc0c
 8009e84:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009e88:	4b21      	ldr	r3, [pc, #132]	; (8009f10 <HAL_RCC_OscConfig+0x81c>)
 8009e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009e8e:	4b20      	ldr	r3, [pc, #128]	; (8009f10 <HAL_RCC_OscConfig+0x81c>)
 8009e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e98:	2b01      	cmp	r3, #1
 8009e9a:	d031      	beq.n	8009f00 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e9c:	693b      	ldr	r3, [r7, #16]
 8009e9e:	f003 0203 	and.w	r2, r3, #3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ea6:	429a      	cmp	r2, r3
 8009ea8:	d12a      	bne.n	8009f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009eaa:	693b      	ldr	r3, [r7, #16]
 8009eac:	091b      	lsrs	r3, r3, #4
 8009eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009eb6:	429a      	cmp	r2, r3
 8009eb8:	d122      	bne.n	8009f00 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ec4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009ec6:	429a      	cmp	r2, r3
 8009ec8:	d11a      	bne.n	8009f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	0a5b      	lsrs	r3, r3, #9
 8009ece:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009ed6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d111      	bne.n	8009f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	0c1b      	lsrs	r3, r3, #16
 8009ee0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ee8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009eea:	429a      	cmp	r2, r3
 8009eec:	d108      	bne.n	8009f00 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	0e1b      	lsrs	r3, r3, #24
 8009ef2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009efa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009efc:	429a      	cmp	r2, r3
 8009efe:	d001      	beq.n	8009f04 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 8009f00:	2301      	movs	r3, #1
 8009f02:	e000      	b.n	8009f06 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 8009f04:	2300      	movs	r3, #0
}
 8009f06:	4618      	mov	r0, r3
 8009f08:	3730      	adds	r7, #48	; 0x30
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	58024400 	.word	0x58024400

08009f14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b086      	sub	sp, #24
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
 8009f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d101      	bne.n	8009f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	e19c      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009f28:	4b8a      	ldr	r3, [pc, #552]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f003 030f 	and.w	r3, r3, #15
 8009f30:	683a      	ldr	r2, [r7, #0]
 8009f32:	429a      	cmp	r2, r3
 8009f34:	d910      	bls.n	8009f58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009f36:	4b87      	ldr	r3, [pc, #540]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f023 020f 	bic.w	r2, r3, #15
 8009f3e:	4985      	ldr	r1, [pc, #532]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009f46:	4b83      	ldr	r3, [pc, #524]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 030f 	and.w	r3, r3, #15
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	429a      	cmp	r2, r3
 8009f52:	d001      	beq.n	8009f58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009f54:	2301      	movs	r3, #1
 8009f56:	e184      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f003 0304 	and.w	r3, r3, #4
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d010      	beq.n	8009f86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	691a      	ldr	r2, [r3, #16]
 8009f68:	4b7b      	ldr	r3, [pc, #492]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009f6a:	699b      	ldr	r3, [r3, #24]
 8009f6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f70:	429a      	cmp	r2, r3
 8009f72:	d908      	bls.n	8009f86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009f74:	4b78      	ldr	r3, [pc, #480]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009f76:	699b      	ldr	r3, [r3, #24]
 8009f78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	4975      	ldr	r1, [pc, #468]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009f82:	4313      	orrs	r3, r2
 8009f84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f003 0308 	and.w	r3, r3, #8
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d010      	beq.n	8009fb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	695a      	ldr	r2, [r3, #20]
 8009f96:	4b70      	ldr	r3, [pc, #448]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009f98:	69db      	ldr	r3, [r3, #28]
 8009f9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009f9e:	429a      	cmp	r2, r3
 8009fa0:	d908      	bls.n	8009fb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009fa2:	4b6d      	ldr	r3, [pc, #436]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	695b      	ldr	r3, [r3, #20]
 8009fae:	496a      	ldr	r1, [pc, #424]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	f003 0310 	and.w	r3, r3, #16
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d010      	beq.n	8009fe2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	699a      	ldr	r2, [r3, #24]
 8009fc4:	4b64      	ldr	r3, [pc, #400]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009fc6:	69db      	ldr	r3, [r3, #28]
 8009fc8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d908      	bls.n	8009fe2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009fd0:	4b61      	ldr	r3, [pc, #388]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	699b      	ldr	r3, [r3, #24]
 8009fdc:	495e      	ldr	r1, [pc, #376]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	f003 0320 	and.w	r3, r3, #32
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d010      	beq.n	800a010 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	69da      	ldr	r2, [r3, #28]
 8009ff2:	4b59      	ldr	r3, [pc, #356]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 8009ff4:	6a1b      	ldr	r3, [r3, #32]
 8009ff6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d908      	bls.n	800a010 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8009ffe:	4b56      	ldr	r3, [pc, #344]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a000:	6a1b      	ldr	r3, [r3, #32]
 800a002:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	4953      	ldr	r1, [pc, #332]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0302 	and.w	r3, r3, #2
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d010      	beq.n	800a03e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	68da      	ldr	r2, [r3, #12]
 800a020:	4b4d      	ldr	r3, [pc, #308]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a022:	699b      	ldr	r3, [r3, #24]
 800a024:	f003 030f 	and.w	r3, r3, #15
 800a028:	429a      	cmp	r2, r3
 800a02a:	d908      	bls.n	800a03e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a02c:	4b4a      	ldr	r3, [pc, #296]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a02e:	699b      	ldr	r3, [r3, #24]
 800a030:	f023 020f 	bic.w	r2, r3, #15
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	4947      	ldr	r1, [pc, #284]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a03a:	4313      	orrs	r3, r2
 800a03c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	f003 0301 	and.w	r3, r3, #1
 800a046:	2b00      	cmp	r3, #0
 800a048:	d055      	beq.n	800a0f6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a04a:	4b43      	ldr	r3, [pc, #268]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a04c:	699b      	ldr	r3, [r3, #24]
 800a04e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	4940      	ldr	r1, [pc, #256]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a058:	4313      	orrs	r3, r2
 800a05a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	2b02      	cmp	r3, #2
 800a062:	d107      	bne.n	800a074 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a064:	4b3c      	ldr	r3, [pc, #240]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d121      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a070:	2301      	movs	r3, #1
 800a072:	e0f6      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	2b03      	cmp	r3, #3
 800a07a:	d107      	bne.n	800a08c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a07c:	4b36      	ldr	r3, [pc, #216]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a084:	2b00      	cmp	r3, #0
 800a086:	d115      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a088:	2301      	movs	r3, #1
 800a08a:	e0ea      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	685b      	ldr	r3, [r3, #4]
 800a090:	2b01      	cmp	r3, #1
 800a092:	d107      	bne.n	800a0a4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a094:	4b30      	ldr	r3, [pc, #192]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d109      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0a0:	2301      	movs	r3, #1
 800a0a2:	e0de      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a0a4:	4b2c      	ldr	r3, [pc, #176]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d101      	bne.n	800a0b4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0d6      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a0b4:	4b28      	ldr	r3, [pc, #160]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a0b6:	691b      	ldr	r3, [r3, #16]
 800a0b8:	f023 0207 	bic.w	r2, r3, #7
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	685b      	ldr	r3, [r3, #4]
 800a0c0:	4925      	ldr	r1, [pc, #148]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a0c6:	f7fa fa4d 	bl	8004564 <HAL_GetTick>
 800a0ca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0cc:	e00a      	b.n	800a0e4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a0ce:	f7fa fa49 	bl	8004564 <HAL_GetTick>
 800a0d2:	4602      	mov	r2, r0
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	1ad3      	subs	r3, r2, r3
 800a0d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d901      	bls.n	800a0e4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a0e0:	2303      	movs	r3, #3
 800a0e2:	e0be      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a0e4:	4b1c      	ldr	r3, [pc, #112]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a0e6:	691b      	ldr	r3, [r3, #16]
 800a0e8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	00db      	lsls	r3, r3, #3
 800a0f2:	429a      	cmp	r2, r3
 800a0f4:	d1eb      	bne.n	800a0ce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f003 0302 	and.w	r3, r3, #2
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d010      	beq.n	800a124 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	68da      	ldr	r2, [r3, #12]
 800a106:	4b14      	ldr	r3, [pc, #80]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a108:	699b      	ldr	r3, [r3, #24]
 800a10a:	f003 030f 	and.w	r3, r3, #15
 800a10e:	429a      	cmp	r2, r3
 800a110:	d208      	bcs.n	800a124 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a112:	4b11      	ldr	r3, [pc, #68]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a114:	699b      	ldr	r3, [r3, #24]
 800a116:	f023 020f 	bic.w	r2, r3, #15
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	490e      	ldr	r1, [pc, #56]	; (800a158 <HAL_RCC_ClockConfig+0x244>)
 800a120:	4313      	orrs	r3, r2
 800a122:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a124:	4b0b      	ldr	r3, [pc, #44]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 030f 	and.w	r3, r3, #15
 800a12c:	683a      	ldr	r2, [r7, #0]
 800a12e:	429a      	cmp	r2, r3
 800a130:	d214      	bcs.n	800a15c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a132:	4b08      	ldr	r3, [pc, #32]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f023 020f 	bic.w	r2, r3, #15
 800a13a:	4906      	ldr	r1, [pc, #24]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	4313      	orrs	r3, r2
 800a140:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a142:	4b04      	ldr	r3, [pc, #16]	; (800a154 <HAL_RCC_ClockConfig+0x240>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	f003 030f 	and.w	r3, r3, #15
 800a14a:	683a      	ldr	r2, [r7, #0]
 800a14c:	429a      	cmp	r2, r3
 800a14e:	d005      	beq.n	800a15c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a150:	2301      	movs	r3, #1
 800a152:	e086      	b.n	800a262 <HAL_RCC_ClockConfig+0x34e>
 800a154:	52002000 	.word	0x52002000
 800a158:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	f003 0304 	and.w	r3, r3, #4
 800a164:	2b00      	cmp	r3, #0
 800a166:	d010      	beq.n	800a18a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691a      	ldr	r2, [r3, #16]
 800a16c:	4b3f      	ldr	r3, [pc, #252]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a16e:	699b      	ldr	r3, [r3, #24]
 800a170:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a174:	429a      	cmp	r2, r3
 800a176:	d208      	bcs.n	800a18a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a178:	4b3c      	ldr	r3, [pc, #240]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a17a:	699b      	ldr	r3, [r3, #24]
 800a17c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	691b      	ldr	r3, [r3, #16]
 800a184:	4939      	ldr	r1, [pc, #228]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a186:	4313      	orrs	r3, r2
 800a188:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0308 	and.w	r3, r3, #8
 800a192:	2b00      	cmp	r3, #0
 800a194:	d010      	beq.n	800a1b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	695a      	ldr	r2, [r3, #20]
 800a19a:	4b34      	ldr	r3, [pc, #208]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1a2:	429a      	cmp	r2, r3
 800a1a4:	d208      	bcs.n	800a1b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1a6:	4b31      	ldr	r3, [pc, #196]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1a8:	69db      	ldr	r3, [r3, #28]
 800a1aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	492e      	ldr	r1, [pc, #184]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1b4:	4313      	orrs	r3, r2
 800a1b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	f003 0310 	and.w	r3, r3, #16
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d010      	beq.n	800a1e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	699a      	ldr	r2, [r3, #24]
 800a1c8:	4b28      	ldr	r3, [pc, #160]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1ca:	69db      	ldr	r3, [r3, #28]
 800a1cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a1d0:	429a      	cmp	r2, r3
 800a1d2:	d208      	bcs.n	800a1e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1d4:	4b25      	ldr	r3, [pc, #148]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1d6:	69db      	ldr	r3, [r3, #28]
 800a1d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	699b      	ldr	r3, [r3, #24]
 800a1e0:	4922      	ldr	r1, [pc, #136]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1e2:	4313      	orrs	r3, r2
 800a1e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f003 0320 	and.w	r3, r3, #32
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d010      	beq.n	800a214 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	69da      	ldr	r2, [r3, #28]
 800a1f6:	4b1d      	ldr	r3, [pc, #116]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a1f8:	6a1b      	ldr	r3, [r3, #32]
 800a1fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a1fe:	429a      	cmp	r2, r3
 800a200:	d208      	bcs.n	800a214 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a202:	4b1a      	ldr	r3, [pc, #104]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a204:	6a1b      	ldr	r3, [r3, #32]
 800a206:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a20a:	687b      	ldr	r3, [r7, #4]
 800a20c:	69db      	ldr	r3, [r3, #28]
 800a20e:	4917      	ldr	r1, [pc, #92]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a210:	4313      	orrs	r3, r2
 800a212:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a214:	f000 f844 	bl	800a2a0 <HAL_RCC_GetSysClockFreq>
 800a218:	4601      	mov	r1, r0
 800a21a:	4b14      	ldr	r3, [pc, #80]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a21c:	699b      	ldr	r3, [r3, #24]
 800a21e:	0a1b      	lsrs	r3, r3, #8
 800a220:	f003 030f 	and.w	r3, r3, #15
 800a224:	4a12      	ldr	r2, [pc, #72]	; (800a270 <HAL_RCC_ClockConfig+0x35c>)
 800a226:	5cd3      	ldrb	r3, [r2, r3]
 800a228:	f003 031f 	and.w	r3, r3, #31
 800a22c:	fa21 f303 	lsr.w	r3, r1, r3
 800a230:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a232:	4b0e      	ldr	r3, [pc, #56]	; (800a26c <HAL_RCC_ClockConfig+0x358>)
 800a234:	699b      	ldr	r3, [r3, #24]
 800a236:	f003 030f 	and.w	r3, r3, #15
 800a23a:	4a0d      	ldr	r2, [pc, #52]	; (800a270 <HAL_RCC_ClockConfig+0x35c>)
 800a23c:	5cd3      	ldrb	r3, [r2, r3]
 800a23e:	f003 031f 	and.w	r3, r3, #31
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	fa22 f303 	lsr.w	r3, r2, r3
 800a248:	4a0a      	ldr	r2, [pc, #40]	; (800a274 <HAL_RCC_ClockConfig+0x360>)
 800a24a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a24c:	4a0a      	ldr	r2, [pc, #40]	; (800a278 <HAL_RCC_ClockConfig+0x364>)
 800a24e:	693b      	ldr	r3, [r7, #16]
 800a250:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a252:	4b0a      	ldr	r3, [pc, #40]	; (800a27c <HAL_RCC_ClockConfig+0x368>)
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	4618      	mov	r0, r3
 800a258:	f7fa f93a 	bl	80044d0 <HAL_InitTick>
 800a25c:	4603      	mov	r3, r0
 800a25e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3718      	adds	r7, #24
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	58024400 	.word	0x58024400
 800a270:	0801aed4 	.word	0x0801aed4
 800a274:	24000014 	.word	0x24000014
 800a278:	24000010 	.word	0x24000010
 800a27c:	24000018 	.word	0x24000018

0800a280 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a280:	b480      	push	{r7}
 800a282:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a284:	4b05      	ldr	r3, [pc, #20]	; (800a29c <HAL_RCC_EnableCSS+0x1c>)
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	4a04      	ldr	r2, [pc, #16]	; (800a29c <HAL_RCC_EnableCSS+0x1c>)
 800a28a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a28e:	6013      	str	r3, [r2, #0]
}
 800a290:	bf00      	nop
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr
 800a29a:	bf00      	nop
 800a29c:	58024400 	.word	0x58024400

0800a2a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a2a0:	b480      	push	{r7}
 800a2a2:	b089      	sub	sp, #36	; 0x24
 800a2a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a2a6:	4baf      	ldr	r3, [pc, #700]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a2ae:	2b18      	cmp	r3, #24
 800a2b0:	f200 814e 	bhi.w	800a550 <HAL_RCC_GetSysClockFreq+0x2b0>
 800a2b4:	a201      	add	r2, pc, #4	; (adr r2, 800a2bc <HAL_RCC_GetSysClockFreq+0x1c>)
 800a2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ba:	bf00      	nop
 800a2bc:	0800a321 	.word	0x0800a321
 800a2c0:	0800a551 	.word	0x0800a551
 800a2c4:	0800a551 	.word	0x0800a551
 800a2c8:	0800a551 	.word	0x0800a551
 800a2cc:	0800a551 	.word	0x0800a551
 800a2d0:	0800a551 	.word	0x0800a551
 800a2d4:	0800a551 	.word	0x0800a551
 800a2d8:	0800a551 	.word	0x0800a551
 800a2dc:	0800a347 	.word	0x0800a347
 800a2e0:	0800a551 	.word	0x0800a551
 800a2e4:	0800a551 	.word	0x0800a551
 800a2e8:	0800a551 	.word	0x0800a551
 800a2ec:	0800a551 	.word	0x0800a551
 800a2f0:	0800a551 	.word	0x0800a551
 800a2f4:	0800a551 	.word	0x0800a551
 800a2f8:	0800a551 	.word	0x0800a551
 800a2fc:	0800a34d 	.word	0x0800a34d
 800a300:	0800a551 	.word	0x0800a551
 800a304:	0800a551 	.word	0x0800a551
 800a308:	0800a551 	.word	0x0800a551
 800a30c:	0800a551 	.word	0x0800a551
 800a310:	0800a551 	.word	0x0800a551
 800a314:	0800a551 	.word	0x0800a551
 800a318:	0800a551 	.word	0x0800a551
 800a31c:	0800a353 	.word	0x0800a353
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a320:	4b90      	ldr	r3, [pc, #576]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 0320 	and.w	r3, r3, #32
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d009      	beq.n	800a340 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a32c:	4b8d      	ldr	r3, [pc, #564]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	08db      	lsrs	r3, r3, #3
 800a332:	f003 0303 	and.w	r3, r3, #3
 800a336:	4a8c      	ldr	r2, [pc, #560]	; (800a568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a338:	fa22 f303 	lsr.w	r3, r2, r3
 800a33c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a33e:	e10a      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a340:	4b89      	ldr	r3, [pc, #548]	; (800a568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a342:	61bb      	str	r3, [r7, #24]
    break;
 800a344:	e107      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a346:	4b89      	ldr	r3, [pc, #548]	; (800a56c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a348:	61bb      	str	r3, [r7, #24]
    break;
 800a34a:	e104      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a34c:	4b88      	ldr	r3, [pc, #544]	; (800a570 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800a34e:	61bb      	str	r3, [r7, #24]
    break;
 800a350:	e101      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a352:	4b84      	ldr	r3, [pc, #528]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a35c:	4b81      	ldr	r3, [pc, #516]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a35e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a360:	091b      	lsrs	r3, r3, #4
 800a362:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a366:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a368:	4b7e      	ldr	r3, [pc, #504]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a36a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a36c:	f003 0301 	and.w	r3, r3, #1
 800a370:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a372:	4b7c      	ldr	r3, [pc, #496]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	08db      	lsrs	r3, r3, #3
 800a378:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	fb02 f303 	mul.w	r3, r2, r3
 800a382:	ee07 3a90 	vmov	s15, r3
 800a386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a38a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	2b00      	cmp	r3, #0
 800a392:	f000 80da 	beq.w	800a54a <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800a396:	697b      	ldr	r3, [r7, #20]
 800a398:	2b01      	cmp	r3, #1
 800a39a:	d05a      	beq.n	800a452 <HAL_RCC_GetSysClockFreq+0x1b2>
 800a39c:	2b01      	cmp	r3, #1
 800a39e:	d302      	bcc.n	800a3a6 <HAL_RCC_GetSysClockFreq+0x106>
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d078      	beq.n	800a496 <HAL_RCC_GetSysClockFreq+0x1f6>
 800a3a4:	e099      	b.n	800a4da <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3a6:	4b6f      	ldr	r3, [pc, #444]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f003 0320 	and.w	r3, r3, #32
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d02d      	beq.n	800a40e <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a3b2:	4b6c      	ldr	r3, [pc, #432]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	08db      	lsrs	r3, r3, #3
 800a3b8:	f003 0303 	and.w	r3, r3, #3
 800a3bc:	4a6a      	ldr	r2, [pc, #424]	; (800a568 <HAL_RCC_GetSysClockFreq+0x2c8>)
 800a3be:	fa22 f303 	lsr.w	r3, r2, r3
 800a3c2:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	ee07 3a90 	vmov	s15, r3
 800a3ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	ee07 3a90 	vmov	s15, r3
 800a3d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a3d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a3dc:	4b61      	ldr	r3, [pc, #388]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a3de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a3e4:	ee07 3a90 	vmov	s15, r3
 800a3e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a3ec:	ed97 6a02 	vldr	s12, [r7, #8]
 800a3f0:	eddf 5a60 	vldr	s11, [pc, #384]	; 800a574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a3f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a3f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a3fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a400:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a404:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a408:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a40c:	e087      	b.n	800a51e <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a40e:	693b      	ldr	r3, [r7, #16]
 800a410:	ee07 3a90 	vmov	s15, r3
 800a414:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a418:	eddf 6a57 	vldr	s13, [pc, #348]	; 800a578 <HAL_RCC_GetSysClockFreq+0x2d8>
 800a41c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a420:	4b50      	ldr	r3, [pc, #320]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a424:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a428:	ee07 3a90 	vmov	s15, r3
 800a42c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a430:	ed97 6a02 	vldr	s12, [r7, #8]
 800a434:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800a574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a438:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a43c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a440:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a444:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a448:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a44c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a450:	e065      	b.n	800a51e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a452:	693b      	ldr	r3, [r7, #16]
 800a454:	ee07 3a90 	vmov	s15, r3
 800a458:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a45c:	eddf 6a47 	vldr	s13, [pc, #284]	; 800a57c <HAL_RCC_GetSysClockFreq+0x2dc>
 800a460:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a464:	4b3f      	ldr	r3, [pc, #252]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a468:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a46c:	ee07 3a90 	vmov	s15, r3
 800a470:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a474:	ed97 6a02 	vldr	s12, [r7, #8]
 800a478:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800a574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a47c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a480:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a484:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a488:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a48c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a490:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a494:	e043      	b.n	800a51e <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a496:	693b      	ldr	r3, [r7, #16]
 800a498:	ee07 3a90 	vmov	s15, r3
 800a49c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4a0:	eddf 6a37 	vldr	s13, [pc, #220]	; 800a580 <HAL_RCC_GetSysClockFreq+0x2e0>
 800a4a4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4a8:	4b2e      	ldr	r3, [pc, #184]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4bc:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800a574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a4c0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4c4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4c8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4cc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4d4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a4d8:	e021      	b.n	800a51e <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	ee07 3a90 	vmov	s15, r3
 800a4e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4e4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800a57c <HAL_RCC_GetSysClockFreq+0x2dc>
 800a4e8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4ec:	4b1d      	ldr	r3, [pc, #116]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4f4:	ee07 3a90 	vmov	s15, r3
 800a4f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4fc:	ed97 6a02 	vldr	s12, [r7, #8]
 800a500:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800a574 <HAL_RCC_GetSysClockFreq+0x2d4>
 800a504:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a508:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a50c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a510:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a514:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a518:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a51c:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a51e:	4b11      	ldr	r3, [pc, #68]	; (800a564 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800a520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a522:	0a5b      	lsrs	r3, r3, #9
 800a524:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a528:	3301      	adds	r3, #1
 800a52a:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	ee07 3a90 	vmov	s15, r3
 800a532:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a536:	edd7 6a07 	vldr	s13, [r7, #28]
 800a53a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a53e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a542:	ee17 3a90 	vmov	r3, s15
 800a546:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a548:	e005      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800a54a:	2300      	movs	r3, #0
 800a54c:	61bb      	str	r3, [r7, #24]
    break;
 800a54e:	e002      	b.n	800a556 <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800a550:	4b06      	ldr	r3, [pc, #24]	; (800a56c <HAL_RCC_GetSysClockFreq+0x2cc>)
 800a552:	61bb      	str	r3, [r7, #24]
    break;
 800a554:	bf00      	nop
  }

  return sysclockfreq;
 800a556:	69bb      	ldr	r3, [r7, #24]
}
 800a558:	4618      	mov	r0, r3
 800a55a:	3724      	adds	r7, #36	; 0x24
 800a55c:	46bd      	mov	sp, r7
 800a55e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a562:	4770      	bx	lr
 800a564:	58024400 	.word	0x58024400
 800a568:	03d09000 	.word	0x03d09000
 800a56c:	003d0900 	.word	0x003d0900
 800a570:	017d7840 	.word	0x017d7840
 800a574:	46000000 	.word	0x46000000
 800a578:	4c742400 	.word	0x4c742400
 800a57c:	4a742400 	.word	0x4a742400
 800a580:	4bbebc20 	.word	0x4bbebc20

0800a584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a58a:	f7ff fe89 	bl	800a2a0 <HAL_RCC_GetSysClockFreq>
 800a58e:	4601      	mov	r1, r0
 800a590:	4b10      	ldr	r3, [pc, #64]	; (800a5d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a592:	699b      	ldr	r3, [r3, #24]
 800a594:	0a1b      	lsrs	r3, r3, #8
 800a596:	f003 030f 	and.w	r3, r3, #15
 800a59a:	4a0f      	ldr	r2, [pc, #60]	; (800a5d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a59c:	5cd3      	ldrb	r3, [r2, r3]
 800a59e:	f003 031f 	and.w	r3, r3, #31
 800a5a2:	fa21 f303 	lsr.w	r3, r1, r3
 800a5a6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a5a8:	4b0a      	ldr	r3, [pc, #40]	; (800a5d4 <HAL_RCC_GetHCLKFreq+0x50>)
 800a5aa:	699b      	ldr	r3, [r3, #24]
 800a5ac:	f003 030f 	and.w	r3, r3, #15
 800a5b0:	4a09      	ldr	r2, [pc, #36]	; (800a5d8 <HAL_RCC_GetHCLKFreq+0x54>)
 800a5b2:	5cd3      	ldrb	r3, [r2, r3]
 800a5b4:	f003 031f 	and.w	r3, r3, #31
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	fa22 f303 	lsr.w	r3, r2, r3
 800a5be:	4a07      	ldr	r2, [pc, #28]	; (800a5dc <HAL_RCC_GetHCLKFreq+0x58>)
 800a5c0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a5c2:	4a07      	ldr	r2, [pc, #28]	; (800a5e0 <HAL_RCC_GetHCLKFreq+0x5c>)
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a5c8:	4b04      	ldr	r3, [pc, #16]	; (800a5dc <HAL_RCC_GetHCLKFreq+0x58>)
 800a5ca:	681b      	ldr	r3, [r3, #0]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3708      	adds	r7, #8
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	58024400 	.word	0x58024400
 800a5d8:	0801aed4 	.word	0x0801aed4
 800a5dc:	24000014 	.word	0x24000014
 800a5e0:	24000010 	.word	0x24000010

0800a5e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a5e4:	b580      	push	{r7, lr}
 800a5e6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a5e8:	f7ff ffcc 	bl	800a584 <HAL_RCC_GetHCLKFreq>
 800a5ec:	4601      	mov	r1, r0
 800a5ee:	4b06      	ldr	r3, [pc, #24]	; (800a608 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a5f0:	69db      	ldr	r3, [r3, #28]
 800a5f2:	091b      	lsrs	r3, r3, #4
 800a5f4:	f003 0307 	and.w	r3, r3, #7
 800a5f8:	4a04      	ldr	r2, [pc, #16]	; (800a60c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a5fa:	5cd3      	ldrb	r3, [r2, r3]
 800a5fc:	f003 031f 	and.w	r3, r3, #31
 800a600:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a604:	4618      	mov	r0, r3
 800a606:	bd80      	pop	{r7, pc}
 800a608:	58024400 	.word	0x58024400
 800a60c:	0801aed4 	.word	0x0801aed4

0800a610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a610:	b580      	push	{r7, lr}
 800a612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a614:	f7ff ffb6 	bl	800a584 <HAL_RCC_GetHCLKFreq>
 800a618:	4601      	mov	r1, r0
 800a61a:	4b06      	ldr	r3, [pc, #24]	; (800a634 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	0a1b      	lsrs	r3, r3, #8
 800a620:	f003 0307 	and.w	r3, r3, #7
 800a624:	4a04      	ldr	r2, [pc, #16]	; (800a638 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a626:	5cd3      	ldrb	r3, [r2, r3]
 800a628:	f003 031f 	and.w	r3, r3, #31
 800a62c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a630:	4618      	mov	r0, r3
 800a632:	bd80      	pop	{r7, pc}
 800a634:	58024400 	.word	0x58024400
 800a638:	0801aed4 	.word	0x0801aed4

0800a63c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800a640:	4b07      	ldr	r3, [pc, #28]	; (800a660 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a644:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a64c:	d105      	bne.n	800a65a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800a64e:	f000 f809 	bl	800a664 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800a652:	4b03      	ldr	r3, [pc, #12]	; (800a660 <HAL_RCC_NMI_IRQHandler+0x24>)
 800a654:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a658:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800a65a:	bf00      	nop
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	58024400 	.word	0x58024400

0800a664 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800a664:	b480      	push	{r7}
 800a666:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800a668:	bf00      	nop
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
	...

0800a674 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b086      	sub	sp, #24
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a67c:	2300      	movs	r3, #0
 800a67e:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a680:	2300      	movs	r3, #0
 800a682:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d03d      	beq.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a698:	d013      	beq.n	800a6c2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a69a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a69e:	d802      	bhi.n	800a6a6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d007      	beq.n	800a6b4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800a6a4:	e01f      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
 800a6a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a6aa:	d013      	beq.n	800a6d4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800a6ac:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a6b0:	d01c      	beq.n	800a6ec <HAL_RCCEx_PeriphCLKConfig+0x78>
 800a6b2:	e018      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6b4:	4baf      	ldr	r3, [pc, #700]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b8:	4aae      	ldr	r2, [pc, #696]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6c0:	e015      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	3304      	adds	r3, #4
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fd33 	bl	800c134 <RCCEx_PLL2_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6d2:	e00c      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3324      	adds	r3, #36	; 0x24
 800a6d8:	2102      	movs	r1, #2
 800a6da:	4618      	mov	r0, r3
 800a6dc:	f001 fddc 	bl	800c298 <RCCEx_PLL3_Config>
 800a6e0:	4603      	mov	r3, r0
 800a6e2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a6e4:	e003      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
      break;
 800a6ea:	e000      	b.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800a6ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a6ee:	7dfb      	ldrb	r3, [r7, #23]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d109      	bne.n	800a708 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a6f4:	4b9f      	ldr	r3, [pc, #636]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a6f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a6f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a700:	499c      	ldr	r1, [pc, #624]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a702:	4313      	orrs	r3, r2
 800a704:	650b      	str	r3, [r1, #80]	; 0x50
 800a706:	e001      	b.n	800a70c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a708:	7dfb      	ldrb	r3, [r7, #23]
 800a70a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a714:	2b00      	cmp	r3, #0
 800a716:	d03d      	beq.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a71c:	2b04      	cmp	r3, #4
 800a71e:	d826      	bhi.n	800a76e <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800a720:	a201      	add	r2, pc, #4	; (adr r2, 800a728 <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800a722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a726:	bf00      	nop
 800a728:	0800a73d 	.word	0x0800a73d
 800a72c:	0800a74b 	.word	0x0800a74b
 800a730:	0800a75d 	.word	0x0800a75d
 800a734:	0800a775 	.word	0x0800a775
 800a738:	0800a775 	.word	0x0800a775
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a73c:	4b8d      	ldr	r3, [pc, #564]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a740:	4a8c      	ldr	r2, [pc, #560]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a742:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a746:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a748:	e015      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	3304      	adds	r3, #4
 800a74e:	2100      	movs	r1, #0
 800a750:	4618      	mov	r0, r3
 800a752:	f001 fcef 	bl	800c134 <RCCEx_PLL2_Config>
 800a756:	4603      	mov	r3, r0
 800a758:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a75a:	e00c      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	3324      	adds	r3, #36	; 0x24
 800a760:	2100      	movs	r1, #0
 800a762:	4618      	mov	r0, r3
 800a764:	f001 fd98 	bl	800c298 <RCCEx_PLL3_Config>
 800a768:	4603      	mov	r3, r0
 800a76a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a76c:	e003      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a76e:	2301      	movs	r3, #1
 800a770:	75fb      	strb	r3, [r7, #23]
      break;
 800a772:	e000      	b.n	800a776 <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800a774:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a776:	7dfb      	ldrb	r3, [r7, #23]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d109      	bne.n	800a790 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a77c:	4b7d      	ldr	r3, [pc, #500]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a77e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a780:	f023 0207 	bic.w	r2, r3, #7
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a788:	497a      	ldr	r1, [pc, #488]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a78a:	4313      	orrs	r3, r2
 800a78c:	650b      	str	r3, [r1, #80]	; 0x50
 800a78e:	e001      	b.n	800a794 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a790:	7dfb      	ldrb	r3, [r7, #23]
 800a792:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d03e      	beq.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a4:	2b80      	cmp	r3, #128	; 0x80
 800a7a6:	d01c      	beq.n	800a7e2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800a7a8:	2b80      	cmp	r3, #128	; 0x80
 800a7aa:	d804      	bhi.n	800a7b6 <HAL_RCCEx_PeriphCLKConfig+0x142>
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d008      	beq.n	800a7c2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a7b0:	2b40      	cmp	r3, #64	; 0x40
 800a7b2:	d00d      	beq.n	800a7d0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800a7b4:	e01e      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800a7b6:	2bc0      	cmp	r3, #192	; 0xc0
 800a7b8:	d01f      	beq.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0x186>
 800a7ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7be:	d01e      	beq.n	800a7fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800a7c0:	e018      	b.n	800a7f4 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7c2:	4b6c      	ldr	r3, [pc, #432]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7c6:	4a6b      	ldr	r2, [pc, #428]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a7c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7cc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7ce:	e017      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	3304      	adds	r3, #4
 800a7d4:	2100      	movs	r1, #0
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	f001 fcac 	bl	800c134 <RCCEx_PLL2_Config>
 800a7dc:	4603      	mov	r3, r0
 800a7de:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7e0:	e00e      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	3324      	adds	r3, #36	; 0x24
 800a7e6:	2100      	movs	r1, #0
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	f001 fd55 	bl	800c298 <RCCEx_PLL3_Config>
 800a7ee:	4603      	mov	r3, r0
 800a7f0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a7f2:	e005      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a7f4:	2301      	movs	r3, #1
 800a7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a7f8:	e002      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a7fa:	bf00      	nop
 800a7fc:	e000      	b.n	800a800 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800a7fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a800:	7dfb      	ldrb	r3, [r7, #23]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d109      	bne.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a806:	4b5b      	ldr	r3, [pc, #364]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a80a:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a812:	4958      	ldr	r1, [pc, #352]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a814:	4313      	orrs	r3, r2
 800a816:	650b      	str	r3, [r1, #80]	; 0x50
 800a818:	e001      	b.n	800a81e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81a:	7dfb      	ldrb	r3, [r7, #23]
 800a81c:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a826:	2b00      	cmp	r3, #0
 800a828:	d044      	beq.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a830:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a834:	d01f      	beq.n	800a876 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a836:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a83a:	d805      	bhi.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d00a      	beq.n	800a856 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800a840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a844:	d00e      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800a846:	e01f      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x214>
 800a848:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a84c:	d01f      	beq.n	800a88e <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800a84e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a852:	d01e      	beq.n	800a892 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800a854:	e018      	b.n	800a888 <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a856:	4b47      	ldr	r3, [pc, #284]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a85a:	4a46      	ldr	r2, [pc, #280]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a85c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a860:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a862:	e017      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	3304      	adds	r3, #4
 800a868:	2100      	movs	r1, #0
 800a86a:	4618      	mov	r0, r3
 800a86c:	f001 fc62 	bl	800c134 <RCCEx_PLL2_Config>
 800a870:	4603      	mov	r3, r0
 800a872:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a874:	e00e      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	3324      	adds	r3, #36	; 0x24
 800a87a:	2100      	movs	r1, #0
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 fd0b 	bl	800c298 <RCCEx_PLL3_Config>
 800a882:	4603      	mov	r3, r0
 800a884:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a886:	e005      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a888:	2301      	movs	r3, #1
 800a88a:	75fb      	strb	r3, [r7, #23]
      break;
 800a88c:	e002      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a88e:	bf00      	nop
 800a890:	e000      	b.n	800a894 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800a892:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d10a      	bne.n	800a8b0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a89a:	4b36      	ldr	r3, [pc, #216]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a89c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a89e:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8a8:	4932      	ldr	r1, [pc, #200]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	658b      	str	r3, [r1, #88]	; 0x58
 800a8ae:	e001      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
 800a8b2:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d044      	beq.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a8c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8ca:	d01f      	beq.n	800a90c <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a8cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a8d0:	d805      	bhi.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00a      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x278>
 800a8d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a8da:	d00e      	beq.n	800a8fa <HAL_RCCEx_PeriphCLKConfig+0x286>
 800a8dc:	e01f      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800a8de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a8e2:	d01f      	beq.n	800a924 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800a8e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a8e8:	d01e      	beq.n	800a928 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800a8ea:	e018      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8ec:	4b21      	ldr	r3, [pc, #132]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8f0:	4a20      	ldr	r2, [pc, #128]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a8f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a8f6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a8f8:	e017      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	2100      	movs	r1, #0
 800a900:	4618      	mov	r0, r3
 800a902:	f001 fc17 	bl	800c134 <RCCEx_PLL2_Config>
 800a906:	4603      	mov	r3, r0
 800a908:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a90a:	e00e      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	3324      	adds	r3, #36	; 0x24
 800a910:	2100      	movs	r1, #0
 800a912:	4618      	mov	r0, r3
 800a914:	f001 fcc0 	bl	800c298 <RCCEx_PLL3_Config>
 800a918:	4603      	mov	r3, r0
 800a91a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a91c:	e005      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a91e:	2301      	movs	r3, #1
 800a920:	75fb      	strb	r3, [r7, #23]
      break;
 800a922:	e002      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a924:	bf00      	nop
 800a926:	e000      	b.n	800a92a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800a928:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a92a:	7dfb      	ldrb	r3, [r7, #23]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d10a      	bne.n	800a946 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a930:	4b10      	ldr	r3, [pc, #64]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a934:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a93e:	490d      	ldr	r1, [pc, #52]	; (800a974 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800a940:	4313      	orrs	r3, r2
 800a942:	658b      	str	r3, [r1, #88]	; 0x58
 800a944:	e001      	b.n	800a94a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a946:	7dfb      	ldrb	r3, [r7, #23]
 800a948:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a952:	2b00      	cmp	r3, #0
 800a954:	d035      	beq.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a95a:	2b10      	cmp	r3, #16
 800a95c:	d00c      	beq.n	800a978 <HAL_RCCEx_PeriphCLKConfig+0x304>
 800a95e:	2b10      	cmp	r3, #16
 800a960:	d802      	bhi.n	800a968 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800a962:	2b00      	cmp	r3, #0
 800a964:	d01b      	beq.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800a966:	e017      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a968:	2b20      	cmp	r3, #32
 800a96a:	d00c      	beq.n	800a986 <HAL_RCCEx_PeriphCLKConfig+0x312>
 800a96c:	2b30      	cmp	r3, #48	; 0x30
 800a96e:	d018      	beq.n	800a9a2 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800a970:	e012      	b.n	800a998 <HAL_RCCEx_PeriphCLKConfig+0x324>
 800a972:	bf00      	nop
 800a974:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a978:	4baf      	ldr	r3, [pc, #700]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a97c:	4aae      	ldr	r2, [pc, #696]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a97e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a982:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a984:	e00e      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	3304      	adds	r3, #4
 800a98a:	2102      	movs	r1, #2
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 fbd1 	bl	800c134 <RCCEx_PLL2_Config>
 800a992:	4603      	mov	r3, r0
 800a994:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800a996:	e005      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	75fb      	strb	r3, [r7, #23]
      break;
 800a99c:	e002      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a99e:	bf00      	nop
 800a9a0:	e000      	b.n	800a9a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800a9a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a9a4:	7dfb      	ldrb	r3, [r7, #23]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d109      	bne.n	800a9be <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a9aa:	4ba3      	ldr	r3, [pc, #652]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9ae:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a9b6:	49a0      	ldr	r1, [pc, #640]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9b8:	4313      	orrs	r3, r2
 800a9ba:	64cb      	str	r3, [r1, #76]	; 0x4c
 800a9bc:	e001      	b.n	800a9c2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a9be:	7dfb      	ldrb	r3, [r7, #23]
 800a9c0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d042      	beq.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9d6:	d01f      	beq.n	800aa18 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800a9d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9dc:	d805      	bhi.n	800a9ea <HAL_RCCEx_PeriphCLKConfig+0x376>
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d00a      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x384>
 800a9e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9e6:	d00e      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x392>
 800a9e8:	e01f      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800a9ea:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a9ee:	d01f      	beq.n	800aa30 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800a9f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9f4:	d01e      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800a9f6:	e018      	b.n	800aa2a <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9f8:	4b8f      	ldr	r3, [pc, #572]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9fc:	4a8e      	ldr	r2, [pc, #568]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800a9fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa04:	e017      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	3304      	adds	r3, #4
 800aa0a:	2100      	movs	r1, #0
 800aa0c:	4618      	mov	r0, r3
 800aa0e:	f001 fb91 	bl	800c134 <RCCEx_PLL2_Config>
 800aa12:	4603      	mov	r3, r0
 800aa14:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa16:	e00e      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	3324      	adds	r3, #36	; 0x24
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	4618      	mov	r0, r3
 800aa20:	f001 fc3a 	bl	800c298 <RCCEx_PLL3_Config>
 800aa24:	4603      	mov	r3, r0
 800aa26:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aa28:	e005      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa2e:	e002      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa30:	bf00      	nop
 800aa32:	e000      	b.n	800aa36 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800aa34:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa36:	7dfb      	ldrb	r3, [r7, #23]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d109      	bne.n	800aa50 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800aa3c:	4b7e      	ldr	r3, [pc, #504]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa40:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa48:	497b      	ldr	r1, [pc, #492]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	650b      	str	r3, [r1, #80]	; 0x50
 800aa4e:	e001      	b.n	800aa54 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa50:	7dfb      	ldrb	r3, [r7, #23]
 800aa52:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d042      	beq.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa68:	d01b      	beq.n	800aaa2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800aa6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800aa6e:	d805      	bhi.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x408>
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d022      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x446>
 800aa74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa78:	d00a      	beq.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800aa7a:	e01b      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800aa7c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800aa80:	d01d      	beq.n	800aabe <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800aa82:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800aa86:	d01c      	beq.n	800aac2 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800aa88:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800aa8c:	d01b      	beq.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x452>
 800aa8e:	e011      	b.n	800aab4 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3304      	adds	r3, #4
 800aa94:	2101      	movs	r1, #1
 800aa96:	4618      	mov	r0, r3
 800aa98:	f001 fb4c 	bl	800c134 <RCCEx_PLL2_Config>
 800aa9c:	4603      	mov	r3, r0
 800aa9e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aaa0:	e012      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	3324      	adds	r3, #36	; 0x24
 800aaa6:	2101      	movs	r1, #1
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f001 fbf5 	bl	800c298 <RCCEx_PLL3_Config>
 800aaae:	4603      	mov	r3, r0
 800aab0:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800aab2:	e009      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aab4:	2301      	movs	r3, #1
 800aab6:	75fb      	strb	r3, [r7, #23]
      break;
 800aab8:	e006      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aaba:	bf00      	nop
 800aabc:	e004      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aabe:	bf00      	nop
 800aac0:	e002      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aac2:	bf00      	nop
 800aac4:	e000      	b.n	800aac8 <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800aac6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aac8:	7dfb      	ldrb	r3, [r7, #23]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d109      	bne.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800aace:	4b5a      	ldr	r3, [pc, #360]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aad0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aad2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aada:	4957      	ldr	r1, [pc, #348]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aadc:	4313      	orrs	r3, r2
 800aade:	650b      	str	r3, [r1, #80]	; 0x50
 800aae0:	e001      	b.n	800aae6 <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aae2:	7dfb      	ldrb	r3, [r7, #23]
 800aae4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d044      	beq.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800aaf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aafc:	d01b      	beq.n	800ab36 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800aafe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab02:	d805      	bhi.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d022      	beq.n	800ab4e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800ab08:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab0c:	d00a      	beq.n	800ab24 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800ab0e:	e01b      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800ab10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab14:	d01d      	beq.n	800ab52 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800ab16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ab1a:	d01c      	beq.n	800ab56 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800ab1c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ab20:	d01b      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800ab22:	e011      	b.n	800ab48 <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	3304      	adds	r3, #4
 800ab28:	2101      	movs	r1, #1
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f001 fb02 	bl	800c134 <RCCEx_PLL2_Config>
 800ab30:	4603      	mov	r3, r0
 800ab32:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab34:	e012      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	3324      	adds	r3, #36	; 0x24
 800ab3a:	2101      	movs	r1, #1
 800ab3c:	4618      	mov	r0, r3
 800ab3e:	f001 fbab 	bl	800c298 <RCCEx_PLL3_Config>
 800ab42:	4603      	mov	r3, r0
 800ab44:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ab46:	e009      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ab48:	2301      	movs	r3, #1
 800ab4a:	75fb      	strb	r3, [r7, #23]
      break;
 800ab4c:	e006      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab4e:	bf00      	nop
 800ab50:	e004      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab52:	bf00      	nop
 800ab54:	e002      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab56:	bf00      	nop
 800ab58:	e000      	b.n	800ab5c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800ab5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab5c:	7dfb      	ldrb	r3, [r7, #23]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d10a      	bne.n	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ab62:	4b35      	ldr	r3, [pc, #212]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab66:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ab70:	4931      	ldr	r1, [pc, #196]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ab72:	4313      	orrs	r3, r2
 800ab74:	658b      	str	r3, [r1, #88]	; 0x58
 800ab76:	e001      	b.n	800ab7c <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab78:	7dfb      	ldrb	r3, [r7, #23]
 800ab7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d02d      	beq.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ab90:	d005      	beq.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ab92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ab96:	d009      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x538>
 800ab98:	2b00      	cmp	r3, #0
 800ab9a:	d013      	beq.n	800abc4 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ab9c:	e00f      	b.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab9e:	4b26      	ldr	r3, [pc, #152]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aba2:	4a25      	ldr	r2, [pc, #148]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800aba4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aba8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abaa:	e00c      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	3304      	adds	r3, #4
 800abb0:	2101      	movs	r1, #1
 800abb2:	4618      	mov	r0, r3
 800abb4:	f001 fabe 	bl	800c134 <RCCEx_PLL2_Config>
 800abb8:	4603      	mov	r3, r0
 800abba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800abbc:	e003      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800abbe:	2301      	movs	r3, #1
 800abc0:	75fb      	strb	r3, [r7, #23]
      break;
 800abc2:	e000      	b.n	800abc6 <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800abc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d109      	bne.n	800abe0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800abcc:	4b1a      	ldr	r3, [pc, #104]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800abd8:	4917      	ldr	r1, [pc, #92]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800abda:	4313      	orrs	r3, r2
 800abdc:	650b      	str	r3, [r1, #80]	; 0x50
 800abde:	e001      	b.n	800abe4 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abe0:	7dfb      	ldrb	r3, [r7, #23]
 800abe2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800abec:	2b00      	cmp	r3, #0
 800abee:	d035      	beq.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800abf4:	2b03      	cmp	r3, #3
 800abf6:	d81b      	bhi.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800abf8:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800abfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abfe:	bf00      	nop
 800ac00:	0800ac3d 	.word	0x0800ac3d
 800ac04:	0800ac11 	.word	0x0800ac11
 800ac08:	0800ac1f 	.word	0x0800ac1f
 800ac0c:	0800ac3d 	.word	0x0800ac3d
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac10:	4b09      	ldr	r3, [pc, #36]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac14:	4a08      	ldr	r2, [pc, #32]	; (800ac38 <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800ac16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ac1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac1c:	e00f      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	3304      	adds	r3, #4
 800ac22:	2102      	movs	r1, #2
 800ac24:	4618      	mov	r0, r3
 800ac26:	f001 fa85 	bl	800c134 <RCCEx_PLL2_Config>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ac2e:	e006      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	75fb      	strb	r3, [r7, #23]
      break;
 800ac34:	e003      	b.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800ac36:	bf00      	nop
 800ac38:	58024400 	.word	0x58024400
      break;
 800ac3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac3e:	7dfb      	ldrb	r3, [r7, #23]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d109      	bne.n	800ac58 <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ac44:	4bba      	ldr	r3, [pc, #744]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac48:	f023 0203 	bic.w	r2, r3, #3
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ac50:	49b7      	ldr	r1, [pc, #732]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ac52:	4313      	orrs	r3, r2
 800ac54:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ac56:	e001      	b.n	800ac5c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	f000 8086 	beq.w	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ac6a:	4bb2      	ldr	r3, [pc, #712]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	4ab1      	ldr	r2, [pc, #708]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ac74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ac76:	f7f9 fc75 	bl	8004564 <HAL_GetTick>
 800ac7a:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac7c:	e009      	b.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ac7e:	f7f9 fc71 	bl	8004564 <HAL_GetTick>
 800ac82:	4602      	mov	r2, r0
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	1ad3      	subs	r3, r2, r3
 800ac88:	2b64      	cmp	r3, #100	; 0x64
 800ac8a:	d902      	bls.n	800ac92 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800ac8c:	2303      	movs	r3, #3
 800ac8e:	75fb      	strb	r3, [r7, #23]
        break;
 800ac90:	e005      	b.n	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ac92:	4ba8      	ldr	r3, [pc, #672]	; (800af34 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800ac94:	681b      	ldr	r3, [r3, #0]
 800ac96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d0ef      	beq.n	800ac7e <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d166      	bne.n	800ad72 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aca4:	4ba2      	ldr	r3, [pc, #648]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aca6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800acae:	4053      	eors	r3, r2
 800acb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d013      	beq.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800acb8:	4b9d      	ldr	r3, [pc, #628]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800acc0:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800acc2:	4b9b      	ldr	r3, [pc, #620]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acc6:	4a9a      	ldr	r2, [pc, #616]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800accc:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800acce:	4b98      	ldr	r3, [pc, #608]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800acd2:	4a97      	ldr	r2, [pc, #604]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800acd8:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800acda:	4a95      	ldr	r2, [pc, #596]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ace6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acea:	d115      	bne.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800acec:	f7f9 fc3a 	bl	8004564 <HAL_GetTick>
 800acf0:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800acf2:	e00b      	b.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800acf4:	f7f9 fc36 	bl	8004564 <HAL_GetTick>
 800acf8:	4602      	mov	r2, r0
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	1ad3      	subs	r3, r2, r3
 800acfe:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad02:	4293      	cmp	r3, r2
 800ad04:	d902      	bls.n	800ad0c <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800ad06:	2303      	movs	r3, #3
 800ad08:	75fb      	strb	r3, [r7, #23]
            break;
 800ad0a:	e005      	b.n	800ad18 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ad0c:	4b88      	ldr	r3, [pc, #544]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad10:	f003 0302 	and.w	r3, r3, #2
 800ad14:	2b00      	cmp	r3, #0
 800ad16:	d0ed      	beq.n	800acf4 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800ad18:	7dfb      	ldrb	r3, [r7, #23]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d126      	bne.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad28:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad2c:	d10d      	bne.n	800ad4a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800ad2e:	4b80      	ldr	r3, [pc, #512]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad30:	691b      	ldr	r3, [r3, #16]
 800ad32:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad3c:	0919      	lsrs	r1, r3, #4
 800ad3e:	4b7e      	ldr	r3, [pc, #504]	; (800af38 <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800ad40:	400b      	ands	r3, r1
 800ad42:	497b      	ldr	r1, [pc, #492]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad44:	4313      	orrs	r3, r2
 800ad46:	610b      	str	r3, [r1, #16]
 800ad48:	e005      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800ad4a:	4b79      	ldr	r3, [pc, #484]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad4c:	691b      	ldr	r3, [r3, #16]
 800ad4e:	4a78      	ldr	r2, [pc, #480]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ad54:	6113      	str	r3, [r2, #16]
 800ad56:	4b76      	ldr	r3, [pc, #472]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad58:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ad60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ad64:	4972      	ldr	r1, [pc, #456]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ad66:	4313      	orrs	r3, r2
 800ad68:	670b      	str	r3, [r1, #112]	; 0x70
 800ad6a:	e004      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ad6c:	7dfb      	ldrb	r3, [r7, #23]
 800ad6e:	75bb      	strb	r3, [r7, #22]
 800ad70:	e001      	b.n	800ad76 <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad72:	7dfb      	ldrb	r3, [r7, #23]
 800ad74:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f003 0301 	and.w	r3, r3, #1
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	d07d      	beq.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ad86:	2b28      	cmp	r3, #40	; 0x28
 800ad88:	d866      	bhi.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800ad8a:	a201      	add	r2, pc, #4	; (adr r2, 800ad90 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800ad8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad90:	0800ae5f 	.word	0x0800ae5f
 800ad94:	0800ae59 	.word	0x0800ae59
 800ad98:	0800ae59 	.word	0x0800ae59
 800ad9c:	0800ae59 	.word	0x0800ae59
 800ada0:	0800ae59 	.word	0x0800ae59
 800ada4:	0800ae59 	.word	0x0800ae59
 800ada8:	0800ae59 	.word	0x0800ae59
 800adac:	0800ae59 	.word	0x0800ae59
 800adb0:	0800ae35 	.word	0x0800ae35
 800adb4:	0800ae59 	.word	0x0800ae59
 800adb8:	0800ae59 	.word	0x0800ae59
 800adbc:	0800ae59 	.word	0x0800ae59
 800adc0:	0800ae59 	.word	0x0800ae59
 800adc4:	0800ae59 	.word	0x0800ae59
 800adc8:	0800ae59 	.word	0x0800ae59
 800adcc:	0800ae59 	.word	0x0800ae59
 800add0:	0800ae47 	.word	0x0800ae47
 800add4:	0800ae59 	.word	0x0800ae59
 800add8:	0800ae59 	.word	0x0800ae59
 800addc:	0800ae59 	.word	0x0800ae59
 800ade0:	0800ae59 	.word	0x0800ae59
 800ade4:	0800ae59 	.word	0x0800ae59
 800ade8:	0800ae59 	.word	0x0800ae59
 800adec:	0800ae59 	.word	0x0800ae59
 800adf0:	0800ae5f 	.word	0x0800ae5f
 800adf4:	0800ae59 	.word	0x0800ae59
 800adf8:	0800ae59 	.word	0x0800ae59
 800adfc:	0800ae59 	.word	0x0800ae59
 800ae00:	0800ae59 	.word	0x0800ae59
 800ae04:	0800ae59 	.word	0x0800ae59
 800ae08:	0800ae59 	.word	0x0800ae59
 800ae0c:	0800ae59 	.word	0x0800ae59
 800ae10:	0800ae5f 	.word	0x0800ae5f
 800ae14:	0800ae59 	.word	0x0800ae59
 800ae18:	0800ae59 	.word	0x0800ae59
 800ae1c:	0800ae59 	.word	0x0800ae59
 800ae20:	0800ae59 	.word	0x0800ae59
 800ae24:	0800ae59 	.word	0x0800ae59
 800ae28:	0800ae59 	.word	0x0800ae59
 800ae2c:	0800ae59 	.word	0x0800ae59
 800ae30:	0800ae5f 	.word	0x0800ae5f
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	3304      	adds	r3, #4
 800ae38:	2101      	movs	r1, #1
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f001 f97a 	bl	800c134 <RCCEx_PLL2_Config>
 800ae40:	4603      	mov	r3, r0
 800ae42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae44:	e00c      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	3324      	adds	r3, #36	; 0x24
 800ae4a:	2101      	movs	r1, #1
 800ae4c:	4618      	mov	r0, r3
 800ae4e:	f001 fa23 	bl	800c298 <RCCEx_PLL3_Config>
 800ae52:	4603      	mov	r3, r0
 800ae54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800ae56:	e003      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ae58:	2301      	movs	r3, #1
 800ae5a:	75fb      	strb	r3, [r7, #23]
      break;
 800ae5c:	e000      	b.n	800ae60 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800ae5e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ae60:	7dfb      	ldrb	r3, [r7, #23]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d109      	bne.n	800ae7a <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800ae66:	4b32      	ldr	r3, [pc, #200]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ae6a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae72:	492f      	ldr	r1, [pc, #188]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800ae74:	4313      	orrs	r3, r2
 800ae76:	654b      	str	r3, [r1, #84]	; 0x54
 800ae78:	e001      	b.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae7a:	7dfb      	ldrb	r3, [r7, #23]
 800ae7c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	f003 0302 	and.w	r3, r3, #2
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d037      	beq.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ae8e:	2b05      	cmp	r3, #5
 800ae90:	d820      	bhi.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800ae92:	a201      	add	r2, pc, #4	; (adr r2, 800ae98 <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800ae94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae98:	0800aedb 	.word	0x0800aedb
 800ae9c:	0800aeb1 	.word	0x0800aeb1
 800aea0:	0800aec3 	.word	0x0800aec3
 800aea4:	0800aedb 	.word	0x0800aedb
 800aea8:	0800aedb 	.word	0x0800aedb
 800aeac:	0800aedb 	.word	0x0800aedb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	2101      	movs	r1, #1
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f001 f93c 	bl	800c134 <RCCEx_PLL2_Config>
 800aebc:	4603      	mov	r3, r0
 800aebe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800aec0:	e00c      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	3324      	adds	r3, #36	; 0x24
 800aec6:	2101      	movs	r1, #1
 800aec8:	4618      	mov	r0, r3
 800aeca:	f001 f9e5 	bl	800c298 <RCCEx_PLL3_Config>
 800aece:	4603      	mov	r3, r0
 800aed0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800aed2:	e003      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800aed4:	2301      	movs	r3, #1
 800aed6:	75fb      	strb	r3, [r7, #23]
      break;
 800aed8:	e000      	b.n	800aedc <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800aeda:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aedc:	7dfb      	ldrb	r3, [r7, #23]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d109      	bne.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800aee2:	4b13      	ldr	r3, [pc, #76]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	f023 0207 	bic.w	r2, r3, #7
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800aeee:	4910      	ldr	r1, [pc, #64]	; (800af30 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800aef0:	4313      	orrs	r3, r2
 800aef2:	654b      	str	r3, [r1, #84]	; 0x54
 800aef4:	e001      	b.n	800aefa <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aef6:	7dfb      	ldrb	r3, [r7, #23]
 800aef8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 0304 	and.w	r3, r3, #4
 800af02:	2b00      	cmp	r3, #0
 800af04:	d040      	beq.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af0c:	2b05      	cmp	r3, #5
 800af0e:	d827      	bhi.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800af10:	a201      	add	r2, pc, #4	; (adr r2, 800af18 <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800af12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af16:	bf00      	nop
 800af18:	0800af67 	.word	0x0800af67
 800af1c:	0800af3d 	.word	0x0800af3d
 800af20:	0800af4f 	.word	0x0800af4f
 800af24:	0800af67 	.word	0x0800af67
 800af28:	0800af67 	.word	0x0800af67
 800af2c:	0800af67 	.word	0x0800af67
 800af30:	58024400 	.word	0x58024400
 800af34:	58024800 	.word	0x58024800
 800af38:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	3304      	adds	r3, #4
 800af40:	2101      	movs	r1, #1
 800af42:	4618      	mov	r0, r3
 800af44:	f001 f8f6 	bl	800c134 <RCCEx_PLL2_Config>
 800af48:	4603      	mov	r3, r0
 800af4a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af4c:	e00c      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	3324      	adds	r3, #36	; 0x24
 800af52:	2101      	movs	r1, #1
 800af54:	4618      	mov	r0, r3
 800af56:	f001 f99f 	bl	800c298 <RCCEx_PLL3_Config>
 800af5a:	4603      	mov	r3, r0
 800af5c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800af5e:	e003      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af60:	2301      	movs	r3, #1
 800af62:	75fb      	strb	r3, [r7, #23]
      break;
 800af64:	e000      	b.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800af66:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af68:	7dfb      	ldrb	r3, [r7, #23]
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d10a      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800af6e:	4bb2      	ldr	r3, [pc, #712]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800af70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af72:	f023 0207 	bic.w	r2, r3, #7
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af7c:	49ae      	ldr	r1, [pc, #696]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	658b      	str	r3, [r1, #88]	; 0x58
 800af82:	e001      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 0320 	and.w	r3, r3, #32
 800af90:	2b00      	cmp	r3, #0
 800af92:	d044      	beq.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af9e:	d01b      	beq.n	800afd8 <HAL_RCCEx_PeriphCLKConfig+0x964>
 800afa0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800afa4:	d805      	bhi.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d022      	beq.n	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800afaa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afae:	d00a      	beq.n	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x952>
 800afb0:	e01b      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x976>
 800afb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800afb6:	d01d      	beq.n	800aff4 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800afb8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800afbc:	d01c      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x984>
 800afbe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800afc2:	d01b      	beq.n	800affc <HAL_RCCEx_PeriphCLKConfig+0x988>
 800afc4:	e011      	b.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	3304      	adds	r3, #4
 800afca:	2100      	movs	r1, #0
 800afcc:	4618      	mov	r0, r3
 800afce:	f001 f8b1 	bl	800c134 <RCCEx_PLL2_Config>
 800afd2:	4603      	mov	r3, r0
 800afd4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800afd6:	e012      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	3324      	adds	r3, #36	; 0x24
 800afdc:	2102      	movs	r1, #2
 800afde:	4618      	mov	r0, r3
 800afe0:	f001 f95a 	bl	800c298 <RCCEx_PLL3_Config>
 800afe4:	4603      	mov	r3, r0
 800afe6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800afe8:	e009      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	75fb      	strb	r3, [r7, #23]
      break;
 800afee:	e006      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800aff0:	bf00      	nop
 800aff2:	e004      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800aff4:	bf00      	nop
 800aff6:	e002      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800aff8:	bf00      	nop
 800affa:	e000      	b.n	800affe <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800affc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800affe:	7dfb      	ldrb	r3, [r7, #23]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d10a      	bne.n	800b01a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b004:	4b8c      	ldr	r3, [pc, #560]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b006:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b008:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b012:	4989      	ldr	r1, [pc, #548]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b014:	4313      	orrs	r3, r2
 800b016:	654b      	str	r3, [r1, #84]	; 0x54
 800b018:	e001      	b.n	800b01e <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b01a:	7dfb      	ldrb	r3, [r7, #23]
 800b01c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b026:	2b00      	cmp	r3, #0
 800b028:	d044      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b030:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b034:	d01b      	beq.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b036:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b03a:	d805      	bhi.n	800b048 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d022      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b044:	d00a      	beq.n	800b05c <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b046:	e01b      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b04c:	d01d      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b04e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b052:	d01c      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b054:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b058:	d01b      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b05a:	e011      	b.n	800b080 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3304      	adds	r3, #4
 800b060:	2100      	movs	r1, #0
 800b062:	4618      	mov	r0, r3
 800b064:	f001 f866 	bl	800c134 <RCCEx_PLL2_Config>
 800b068:	4603      	mov	r3, r0
 800b06a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b06c:	e012      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3324      	adds	r3, #36	; 0x24
 800b072:	2102      	movs	r1, #2
 800b074:	4618      	mov	r0, r3
 800b076:	f001 f90f 	bl	800c298 <RCCEx_PLL3_Config>
 800b07a:	4603      	mov	r3, r0
 800b07c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b07e:	e009      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b080:	2301      	movs	r3, #1
 800b082:	75fb      	strb	r3, [r7, #23]
      break;
 800b084:	e006      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b086:	bf00      	nop
 800b088:	e004      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b08a:	bf00      	nop
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d10a      	bne.n	800b0b0 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b09a:	4b67      	ldr	r3, [pc, #412]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b09c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b09e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b0a8:	4963      	ldr	r1, [pc, #396]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	658b      	str	r3, [r1, #88]	; 0x58
 800b0ae:	e001      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0b0:	7dfb      	ldrb	r3, [r7, #23]
 800b0b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d044      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0ca:	d01b      	beq.n	800b104 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b0cc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b0d0:	d805      	bhi.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d022      	beq.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b0d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0da:	d00a      	beq.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b0dc:	e01b      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b0de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0e2:	d01d      	beq.n	800b120 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b0e4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b0e8:	d01c      	beq.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b0ea:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b0ee:	d01b      	beq.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b0f0:	e011      	b.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	3304      	adds	r3, #4
 800b0f6:	2100      	movs	r1, #0
 800b0f8:	4618      	mov	r0, r3
 800b0fa:	f001 f81b 	bl	800c134 <RCCEx_PLL2_Config>
 800b0fe:	4603      	mov	r3, r0
 800b100:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b102:	e012      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	3324      	adds	r3, #36	; 0x24
 800b108:	2102      	movs	r1, #2
 800b10a:	4618      	mov	r0, r3
 800b10c:	f001 f8c4 	bl	800c298 <RCCEx_PLL3_Config>
 800b110:	4603      	mov	r3, r0
 800b112:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b114:	e009      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	75fb      	strb	r3, [r7, #23]
      break;
 800b11a:	e006      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b11c:	bf00      	nop
 800b11e:	e004      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b120:	bf00      	nop
 800b122:	e002      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b124:	bf00      	nop
 800b126:	e000      	b.n	800b12a <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b128:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b12a:	7dfb      	ldrb	r3, [r7, #23]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10a      	bne.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b130:	4b41      	ldr	r3, [pc, #260]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b134:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b13e:	493e      	ldr	r1, [pc, #248]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b140:	4313      	orrs	r3, r2
 800b142:	658b      	str	r3, [r1, #88]	; 0x58
 800b144:	e001      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b146:	7dfb      	ldrb	r3, [r7, #23]
 800b148:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	f003 0308 	and.w	r3, r3, #8
 800b152:	2b00      	cmp	r3, #0
 800b154:	d01a      	beq.n	800b18c <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b160:	d10a      	bne.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	3324      	adds	r3, #36	; 0x24
 800b166:	2102      	movs	r1, #2
 800b168:	4618      	mov	r0, r3
 800b16a:	f001 f895 	bl	800c298 <RCCEx_PLL3_Config>
 800b16e:	4603      	mov	r3, r0
 800b170:	2b00      	cmp	r3, #0
 800b172:	d001      	beq.n	800b178 <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800b174:	2301      	movs	r3, #1
 800b176:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b178:	4b2f      	ldr	r3, [pc, #188]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b17a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b17c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b186:	492c      	ldr	r1, [pc, #176]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	f003 0310 	and.w	r3, r3, #16
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01a      	beq.n	800b1ce <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b19e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1a2:	d10a      	bne.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3324      	adds	r3, #36	; 0x24
 800b1a8:	2102      	movs	r1, #2
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	f001 f874 	bl	800c298 <RCCEx_PLL3_Config>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d001      	beq.n	800b1ba <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b1ba:	4b1f      	ldr	r3, [pc, #124]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1c8:	491b      	ldr	r1, [pc, #108]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b1ca:	4313      	orrs	r3, r2
 800b1cc:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d032      	beq.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b1e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1e4:	d00d      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800b1e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b1ea:	d016      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d111      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	3304      	adds	r3, #4
 800b1f4:	2100      	movs	r1, #0
 800b1f6:	4618      	mov	r0, r3
 800b1f8:	f000 ff9c 	bl	800c134 <RCCEx_PLL2_Config>
 800b1fc:	4603      	mov	r3, r0
 800b1fe:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b200:	e00c      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3324      	adds	r3, #36	; 0x24
 800b206:	2102      	movs	r1, #2
 800b208:	4618      	mov	r0, r3
 800b20a:	f001 f845 	bl	800c298 <RCCEx_PLL3_Config>
 800b20e:	4603      	mov	r3, r0
 800b210:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b212:	e003      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b214:	2301      	movs	r3, #1
 800b216:	75fb      	strb	r3, [r7, #23]
      break;
 800b218:	e000      	b.n	800b21c <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800b21a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b21c:	7dfb      	ldrb	r3, [r7, #23]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d10c      	bne.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b222:	4b05      	ldr	r3, [pc, #20]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b226:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b230:	4901      	ldr	r1, [pc, #4]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b232:	4313      	orrs	r3, r2
 800b234:	658b      	str	r3, [r1, #88]	; 0x58
 800b236:	e003      	b.n	800b240 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800b238:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b23c:	7dfb      	ldrb	r3, [r7, #23]
 800b23e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	681b      	ldr	r3, [r3, #0]
 800b244:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b248:	2b00      	cmp	r3, #0
 800b24a:	d02f      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b252:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b256:	d00c      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b258:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b25c:	d015      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800b25e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b262:	d10f      	bne.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b264:	4b79      	ldr	r3, [pc, #484]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b268:	4a78      	ldr	r2, [pc, #480]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b26a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b26e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b270:	e00c      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3324      	adds	r3, #36	; 0x24
 800b276:	2101      	movs	r1, #1
 800b278:	4618      	mov	r0, r3
 800b27a:	f001 f80d 	bl	800c298 <RCCEx_PLL3_Config>
 800b27e:	4603      	mov	r3, r0
 800b280:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b282:	e003      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b284:	2301      	movs	r3, #1
 800b286:	75fb      	strb	r3, [r7, #23]
      break;
 800b288:	e000      	b.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800b28a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b28c:	7dfb      	ldrb	r3, [r7, #23]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d10a      	bne.n	800b2a8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b292:	4b6e      	ldr	r3, [pc, #440]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b296:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b2a0:	496a      	ldr	r1, [pc, #424]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	654b      	str	r3, [r1, #84]	; 0x54
 800b2a6:	e001      	b.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
 800b2aa:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d029      	beq.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d003      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800b2c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2c4:	d007      	beq.n	800b2d6 <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800b2c6:	e00f      	b.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2c8:	4b60      	ldr	r3, [pc, #384]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2cc:	4a5f      	ldr	r2, [pc, #380]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2d2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b2d4:	e00b      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	2102      	movs	r1, #2
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 ff29 	bl	800c134 <RCCEx_PLL2_Config>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b2e6:	e002      	b.n	800b2ee <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800b2e8:	2301      	movs	r3, #1
 800b2ea:	75fb      	strb	r3, [r7, #23]
      break;
 800b2ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ee:	7dfb      	ldrb	r3, [r7, #23]
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d109      	bne.n	800b308 <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b2f4:	4b55      	ldr	r3, [pc, #340]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b2f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2f8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b300:	4952      	ldr	r1, [pc, #328]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b302:	4313      	orrs	r3, r2
 800b304:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b306:	e001      	b.n	800b30c <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b308:	7dfb      	ldrb	r3, [r7, #23]
 800b30a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b314:	2b00      	cmp	r3, #0
 800b316:	d00a      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	3324      	adds	r3, #36	; 0x24
 800b31c:	2102      	movs	r1, #2
 800b31e:	4618      	mov	r0, r3
 800b320:	f000 ffba 	bl	800c298 <RCCEx_PLL3_Config>
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d001      	beq.n	800b32e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800b32a:	2301      	movs	r3, #1
 800b32c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b336:	2b00      	cmp	r3, #0
 800b338:	d02f      	beq.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b33e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b342:	d00c      	beq.n	800b35e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b348:	d802      	bhi.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d011      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800b34e:	e00d      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800b350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b354:	d00f      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800b356:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b35a:	d00e      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800b35c:	e006      	b.n	800b36c <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b35e:	4b3b      	ldr	r3, [pc, #236]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b362:	4a3a      	ldr	r2, [pc, #232]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b368:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b36a:	e007      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b36c:	2301      	movs	r3, #1
 800b36e:	75fb      	strb	r3, [r7, #23]
      break;
 800b370:	e004      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b372:	bf00      	nop
 800b374:	e002      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b376:	bf00      	nop
 800b378:	e000      	b.n	800b37c <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800b37a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d109      	bne.n	800b396 <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b382:	4b32      	ldr	r3, [pc, #200]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b384:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b38e:	492f      	ldr	r1, [pc, #188]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b390:	4313      	orrs	r3, r2
 800b392:	654b      	str	r3, [r1, #84]	; 0x54
 800b394:	e001      	b.n	800b39a <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b396:	7dfb      	ldrb	r3, [r7, #23]
 800b398:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d008      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b3a6:	4b29      	ldr	r3, [pc, #164]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3aa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3b2:	4926      	ldr	r1, [pc, #152]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3b4:	4313      	orrs	r3, r2
 800b3b6:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	681b      	ldr	r3, [r3, #0]
 800b3bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d009      	beq.n	800b3d8 <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b3c4:	4b21      	ldr	r3, [pc, #132]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3c6:	691b      	ldr	r3, [r3, #16]
 800b3c8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b3d2:	491e      	ldr	r1, [pc, #120]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3d4:	4313      	orrs	r3, r2
 800b3d6:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d008      	beq.n	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b3e4:	4b19      	ldr	r3, [pc, #100]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b3e8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b3f0:	4916      	ldr	r1, [pc, #88]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d00d      	beq.n	800b41e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b402:	4b12      	ldr	r3, [pc, #72]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b404:	691b      	ldr	r3, [r3, #16]
 800b406:	4a11      	ldr	r2, [pc, #68]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b408:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b40c:	6113      	str	r3, [r2, #16]
 800b40e:	4b0f      	ldr	r3, [pc, #60]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b410:	691a      	ldr	r2, [r3, #16]
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b418:	490c      	ldr	r1, [pc, #48]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b41a:	4313      	orrs	r3, r2
 800b41c:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	da08      	bge.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b426:	4b09      	ldr	r3, [pc, #36]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b42a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b432:	4906      	ldr	r1, [pc, #24]	; (800b44c <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800b434:	4313      	orrs	r3, r2
 800b436:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800b438:	7dbb      	ldrb	r3, [r7, #22]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d101      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800b43e:	2300      	movs	r3, #0
 800b440:	e000      	b.n	800b444 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800b442:	2301      	movs	r3, #1
}
 800b444:	4618      	mov	r0, r3
 800b446:	3718      	adds	r7, #24
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}
 800b44c:	58024400 	.word	0x58024400

0800b450 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b090      	sub	sp, #64	; 0x40
 800b454:	af00      	add	r7, sp, #0
 800b456:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b45e:	d150      	bne.n	800b502 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800b460:	4ba1      	ldr	r3, [pc, #644]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	f003 0307 	and.w	r3, r3, #7
 800b468:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	2b04      	cmp	r3, #4
 800b46e:	d844      	bhi.n	800b4fa <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800b470:	a201      	add	r2, pc, #4	; (adr r2, 800b478 <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800b472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b476:	bf00      	nop
 800b478:	0800b48d 	.word	0x0800b48d
 800b47c:	0800b49d 	.word	0x0800b49d
 800b480:	0800b4ad 	.word	0x0800b4ad
 800b484:	0800b4f5 	.word	0x0800b4f5
 800b488:	0800b4bd 	.word	0x0800b4bd
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b48c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b490:	4618      	mov	r0, r3
 800b492:	f000 fd03 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b498:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b49a:	e241      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b49c:	f107 0318 	add.w	r3, r7, #24
 800b4a0:	4618      	mov	r0, r3
 800b4a2:	f000 fa63 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b4a6:	69bb      	ldr	r3, [r7, #24]
 800b4a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4aa:	e239      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b4ac:	f107 030c 	add.w	r3, r7, #12
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 fba7 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ba:	e231      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b4bc:	4b8a      	ldr	r3, [pc, #552]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b4be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b4c4:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b4c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d102      	bne.n	800b4d2 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b4cc:	4b87      	ldr	r3, [pc, #540]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b4d0:	e226      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b4d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4d4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4d8:	d102      	bne.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800b4da:	4b85      	ldr	r3, [pc, #532]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4de:	e21f      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4e6:	d102      	bne.n	800b4ee <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800b4e8:	4b82      	ldr	r3, [pc, #520]	; (800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b4ea:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4ec:	e218      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4f2:	e215      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b4f4:	4b80      	ldr	r3, [pc, #512]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b4f6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4f8:	e212      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b4fe:	bf00      	nop
 800b500:	e20e      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b508:	d14f      	bne.n	800b5aa <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800b50a:	4b77      	ldr	r3, [pc, #476]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b50c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b50e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800b512:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b516:	2b80      	cmp	r3, #128	; 0x80
 800b518:	d01c      	beq.n	800b554 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800b51a:	2b80      	cmp	r3, #128	; 0x80
 800b51c:	d804      	bhi.n	800b528 <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d008      	beq.n	800b534 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800b522:	2b40      	cmp	r3, #64	; 0x40
 800b524:	d00e      	beq.n	800b544 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800b526:	e03c      	b.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800b528:	2bc0      	cmp	r3, #192	; 0xc0
 800b52a:	d037      	beq.n	800b59c <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800b52c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b530:	d018      	beq.n	800b564 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800b532:	e036      	b.n	800b5a2 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b538:	4618      	mov	r0, r3
 800b53a:	f000 fcaf 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b53e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b540:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b542:	e1ed      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b544:	f107 0318 	add.w	r3, r7, #24
 800b548:	4618      	mov	r0, r3
 800b54a:	f000 fa0f 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b552:	e1e5      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b554:	f107 030c 	add.w	r3, r7, #12
 800b558:	4618      	mov	r0, r3
 800b55a:	f000 fb53 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b562:	e1dd      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b564:	4b60      	ldr	r3, [pc, #384]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b568:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b56c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b56e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b570:	2b00      	cmp	r3, #0
 800b572:	d102      	bne.n	800b57a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b574:	4b5d      	ldr	r3, [pc, #372]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b576:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b578:	e1d2      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b57a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b57c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b580:	d102      	bne.n	800b588 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800b582:	4b5b      	ldr	r3, [pc, #364]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b584:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b586:	e1cb      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b58a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b58e:	d102      	bne.n	800b596 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800b590:	4b58      	ldr	r3, [pc, #352]	; (800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b592:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b594:	e1c4      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b596:	2300      	movs	r3, #0
 800b598:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b59a:	e1c1      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b59c:	4b56      	ldr	r3, [pc, #344]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b59e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a0:	e1be      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5a6:	bf00      	nop
 800b5a8:	e1ba      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b5b0:	d153      	bne.n	800b65a <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800b5b2:	4b4d      	ldr	r3, [pc, #308]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b5b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b5b6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800b5ba:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b5bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5c2:	d01f      	beq.n	800b604 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800b5c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b5c8:	d805      	bhi.n	800b5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d00a      	beq.n	800b5e4 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800b5ce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b5d2:	d00f      	beq.n	800b5f4 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800b5d4:	e03d      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800b5d6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b5da:	d037      	beq.n	800b64c <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800b5dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b5e0:	d018      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800b5e2:	e036      	b.n	800b652 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b5e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f000 fc57 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b5ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b5f2:	e195      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5f4:	f107 0318 	add.w	r3, r7, #24
 800b5f8:	4618      	mov	r0, r3
 800b5fa:	f000 f9b7 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b602:	e18d      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b604:	f107 030c 	add.w	r3, r7, #12
 800b608:	4618      	mov	r0, r3
 800b60a:	f000 fafb 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b612:	e185      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b614:	4b34      	ldr	r3, [pc, #208]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b618:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b61c:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b61e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b620:	2b00      	cmp	r3, #0
 800b622:	d102      	bne.n	800b62a <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b624:	4b31      	ldr	r3, [pc, #196]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b626:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b628:	e17a      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b62a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b62c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b630:	d102      	bne.n	800b638 <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800b632:	4b2f      	ldr	r3, [pc, #188]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b634:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b636:	e173      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b63e:	d102      	bne.n	800b646 <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800b640:	4b2c      	ldr	r3, [pc, #176]	; (800b6f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800b642:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b644:	e16c      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b646:	2300      	movs	r3, #0
 800b648:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b64a:	e169      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b64c:	4b2a      	ldr	r3, [pc, #168]	; (800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800b64e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b650:	e166      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b652:	2300      	movs	r3, #0
 800b654:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b656:	bf00      	nop
 800b658:	e162      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b660:	d15d      	bne.n	800b71e <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800b662:	4b21      	ldr	r3, [pc, #132]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b666:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b66a:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800b66c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b66e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b672:	d01f      	beq.n	800b6b4 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800b674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b678:	d805      	bhi.n	800b686 <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d00a      	beq.n	800b694 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800b67e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b682:	d00f      	beq.n	800b6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800b684:	e047      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800b686:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b68a:	d041      	beq.n	800b710 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800b68c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b690:	d018      	beq.n	800b6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800b692:	e040      	b.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b694:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 fbff 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b69e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6a0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6a2:	e13d      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b6a4:	f107 0318 	add.w	r3, r7, #24
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	f000 f95f 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6b2:	e135      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b6b4:	f107 030c 	add.w	r3, r7, #12
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	f000 faa3 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b6be:	68fb      	ldr	r3, [r7, #12]
 800b6c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6c2:	e12d      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b6c4:	4b08      	ldr	r3, [pc, #32]	; (800b6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800b6c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b6cc:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b6ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d102      	bne.n	800b6da <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b6d4:	4b05      	ldr	r3, [pc, #20]	; (800b6ec <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800b6d6:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b6d8:	e122      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b6da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6dc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6e0:	d10c      	bne.n	800b6fc <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800b6e2:	4b03      	ldr	r3, [pc, #12]	; (800b6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800b6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b6e6:	e11b      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800b6e8:	58024400 	.word	0x58024400
 800b6ec:	03d09000 	.word	0x03d09000
 800b6f0:	003d0900 	.word	0x003d0900
 800b6f4:	017d7840 	.word	0x017d7840
 800b6f8:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b702:	d102      	bne.n	800b70a <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800b704:	4b89      	ldr	r3, [pc, #548]	; (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b706:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b708:	e10a      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b70a:	2300      	movs	r3, #0
 800b70c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b70e:	e107      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b710:	4b87      	ldr	r3, [pc, #540]	; (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b714:	e104      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b71a:	bf00      	nop
 800b71c:	e100      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b724:	d153      	bne.n	800b7ce <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800b726:	4b83      	ldr	r3, [pc, #524]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b72a:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b72e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b730:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b736:	d01f      	beq.n	800b778 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800b738:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b73c:	d805      	bhi.n	800b74a <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d00a      	beq.n	800b758 <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800b742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b746:	d00f      	beq.n	800b768 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800b748:	e03d      	b.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800b74a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b74e:	d037      	beq.n	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800b750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b754:	d018      	beq.n	800b788 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800b756:	e036      	b.n	800b7c6 <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b75c:	4618      	mov	r0, r3
 800b75e:	f000 fb9d 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b764:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b766:	e0db      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b768:	f107 0318 	add.w	r3, r7, #24
 800b76c:	4618      	mov	r0, r3
 800b76e:	f000 f8fd 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b776:	e0d3      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b778:	f107 030c 	add.w	r3, r7, #12
 800b77c:	4618      	mov	r0, r3
 800b77e:	f000 fa41 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b786:	e0cb      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b788:	4b6a      	ldr	r3, [pc, #424]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b78a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b78c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b790:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b794:	2b00      	cmp	r3, #0
 800b796:	d102      	bne.n	800b79e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b798:	4b67      	ldr	r3, [pc, #412]	; (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b79a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b79c:	e0c0      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b79e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b7a4:	d102      	bne.n	800b7ac <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800b7a6:	4b65      	ldr	r3, [pc, #404]	; (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7aa:	e0b9      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b7ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b7ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b7b2:	d102      	bne.n	800b7ba <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800b7b4:	4b5d      	ldr	r3, [pc, #372]	; (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b7b6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7b8:	e0b2      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7be:	e0af      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7c0:	4b5b      	ldr	r3, [pc, #364]	; (800b930 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800b7c2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7c4:	e0ac      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b7ca:	bf00      	nop
 800b7cc:	e0a8      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800b7d4:	d13d      	bne.n	800b852 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800b7d6:	4b57      	ldr	r3, [pc, #348]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b7d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b7da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b7de:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b7e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b7e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7e6:	d00c      	beq.n	800b802 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800b7e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b7ec:	d011      	beq.n	800b812 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d12b      	bne.n	800b84a <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b7f2:	f107 0318 	add.w	r3, r7, #24
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f000 f8b8 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b7fc:	69bb      	ldr	r3, [r7, #24]
 800b7fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b800:	e08e      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b802:	f107 030c 	add.w	r3, r7, #12
 800b806:	4618      	mov	r0, r3
 800b808:	f000 f9fc 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b810:	e086      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800b812:	4b48      	ldr	r3, [pc, #288]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b816:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b81a:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800b81c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d102      	bne.n	800b828 <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800b822:	4b45      	ldr	r3, [pc, #276]	; (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b824:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800b826:	e07b      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800b828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b82a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b82e:	d102      	bne.n	800b836 <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800b830:	4b42      	ldr	r3, [pc, #264]	; (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b832:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b834:	e074      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800b836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b838:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b83c:	d102      	bne.n	800b844 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800b83e:	4b3b      	ldr	r3, [pc, #236]	; (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b840:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b842:	e06d      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800b844:	2300      	movs	r3, #0
 800b846:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b848:	e06a      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b84a:	2300      	movs	r3, #0
 800b84c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b84e:	bf00      	nop
 800b850:	e066      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b858:	d11f      	bne.n	800b89a <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800b85a:	4b36      	ldr	r3, [pc, #216]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b85c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b85e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b862:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b864:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800b86a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b86e:	d008      	beq.n	800b882 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800b870:	e00f      	b.n	800b892 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b872:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b876:	4618      	mov	r0, r3
 800b878:	f000 fb10 	bl	800be9c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b87e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b880:	e04e      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b882:	f107 0318 	add.w	r3, r7, #24
 800b886:	4618      	mov	r0, r3
 800b888:	f000 f870 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b88c:	6a3b      	ldr	r3, [r7, #32]
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b890:	e046      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800b892:	2300      	movs	r3, #0
 800b894:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b896:	bf00      	nop
 800b898:	e042      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b8a0:	d13c      	bne.n	800b91c <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800b8a2:	4b24      	ldr	r3, [pc, #144]	; (800b934 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800b8a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b8a6:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b8aa:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800b8ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b2:	d01e      	beq.n	800b8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800b8b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8b8:	d805      	bhi.n	800b8c6 <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d00d      	beq.n	800b8da <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800b8be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b8c2:	d00e      	beq.n	800b8e2 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800b8c4:	e026      	b.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800b8c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ca:	d01d      	beq.n	800b908 <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800b8cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8d0:	d01d      	beq.n	800b90e <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800b8d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8d6:	d014      	beq.n	800b902 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800b8d8:	e01c      	b.n	800b914 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b8da:	f000 f831 	bl	800b940 <HAL_RCCEx_GetD3PCLK1Freq>
 800b8de:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800b8e0:	e01e      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b8e2:	f107 0318 	add.w	r3, r7, #24
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	f000 f840 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b8f0:	e016      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b8f2:	f107 030c 	add.w	r3, r7, #12
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f000 f984 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b8fc:	693b      	ldr	r3, [r7, #16]
 800b8fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b900:	e00e      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800b902:	4b0d      	ldr	r3, [pc, #52]	; (800b938 <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800b904:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b906:	e00b      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800b908:	4b0c      	ldr	r3, [pc, #48]	; (800b93c <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800b90a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b90c:	e008      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800b90e:	4b07      	ldr	r3, [pc, #28]	; (800b92c <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800b910:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b912:	e005      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800b914:	2300      	movs	r3, #0
 800b916:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800b918:	bf00      	nop
 800b91a:	e001      	b.n	800b920 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800b920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b922:	4618      	mov	r0, r3
 800b924:	3740      	adds	r7, #64	; 0x40
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	017d7840 	.word	0x017d7840
 800b930:	00bb8000 	.word	0x00bb8000
 800b934:	58024400 	.word	0x58024400
 800b938:	03d09000 	.word	0x03d09000
 800b93c:	003d0900 	.word	0x003d0900

0800b940 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b944:	f7fe fe1e 	bl	800a584 <HAL_RCC_GetHCLKFreq>
 800b948:	4601      	mov	r1, r0
 800b94a:	4b06      	ldr	r3, [pc, #24]	; (800b964 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b94c:	6a1b      	ldr	r3, [r3, #32]
 800b94e:	091b      	lsrs	r3, r3, #4
 800b950:	f003 0307 	and.w	r3, r3, #7
 800b954:	4a04      	ldr	r2, [pc, #16]	; (800b968 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b956:	5cd3      	ldrb	r3, [r2, r3]
 800b958:	f003 031f 	and.w	r3, r3, #31
 800b95c:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b960:	4618      	mov	r0, r3
 800b962:	bd80      	pop	{r7, pc}
 800b964:	58024400 	.word	0x58024400
 800b968:	0801aed4 	.word	0x0801aed4

0800b96c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b96c:	b480      	push	{r7}
 800b96e:	b089      	sub	sp, #36	; 0x24
 800b970:	af00      	add	r7, sp, #0
 800b972:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b974:	4b9d      	ldr	r3, [pc, #628]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b978:	f003 0303 	and.w	r3, r3, #3
 800b97c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b97e:	4b9b      	ldr	r3, [pc, #620]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b982:	0b1b      	lsrs	r3, r3, #12
 800b984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b988:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b98a:	4b98      	ldr	r3, [pc, #608]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b98c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b98e:	091b      	lsrs	r3, r3, #4
 800b990:	f003 0301 	and.w	r3, r3, #1
 800b994:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b996:	4b95      	ldr	r3, [pc, #596]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b99a:	08db      	lsrs	r3, r3, #3
 800b99c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b9a0:	693a      	ldr	r2, [r7, #16]
 800b9a2:	fb02 f303 	mul.w	r3, r2, r3
 800b9a6:	ee07 3a90 	vmov	s15, r3
 800b9aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ae:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b9b2:	697b      	ldr	r3, [r7, #20]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	f000 810a 	beq.w	800bbce <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	2b01      	cmp	r3, #1
 800b9be:	d05a      	beq.n	800ba76 <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800b9c0:	2b01      	cmp	r3, #1
 800b9c2:	d302      	bcc.n	800b9ca <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800b9c4:	2b02      	cmp	r3, #2
 800b9c6:	d078      	beq.n	800baba <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800b9c8:	e099      	b.n	800bafe <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b9ca:	4b88      	ldr	r3, [pc, #544]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	f003 0320 	and.w	r3, r3, #32
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d02d      	beq.n	800ba32 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b9d6:	4b85      	ldr	r3, [pc, #532]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	08db      	lsrs	r3, r3, #3
 800b9dc:	f003 0303 	and.w	r3, r3, #3
 800b9e0:	4a83      	ldr	r2, [pc, #524]	; (800bbf0 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800b9e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b9e6:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	ee07 3a90 	vmov	s15, r3
 800b9ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	ee07 3a90 	vmov	s15, r3
 800b9f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9fc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba00:	4b7a      	ldr	r3, [pc, #488]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba08:	ee07 3a90 	vmov	s15, r3
 800ba0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba10:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba14:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba18:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba1c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba20:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba24:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba2c:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800ba30:	e087      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	ee07 3a90 	vmov	s15, r3
 800ba38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba3c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bbf8 <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800ba40:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba44:	4b69      	ldr	r3, [pc, #420]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba4c:	ee07 3a90 	vmov	s15, r3
 800ba50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba54:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba58:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800ba5c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba60:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba64:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba70:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba74:	e065      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	ee07 3a90 	vmov	s15, r3
 800ba7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba80:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800ba84:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba88:	4b58      	ldr	r3, [pc, #352]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800ba8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ba8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba90:	ee07 3a90 	vmov	s15, r3
 800ba94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba98:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba9c:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800baa0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baa4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baa8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bab0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bab4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bab8:	e043      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800baba:	697b      	ldr	r3, [r7, #20]
 800babc:	ee07 3a90 	vmov	s15, r3
 800bac0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bac4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bc00 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800bac8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bacc:	4b47      	ldr	r3, [pc, #284]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bad0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bad4:	ee07 3a90 	vmov	s15, r3
 800bad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800badc:	ed97 6a03 	vldr	s12, [r7, #12]
 800bae0:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bae4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bae8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800baec:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800baf0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800baf4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800baf8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bafc:	e021      	b.n	800bb42 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800bafe:	697b      	ldr	r3, [r7, #20]
 800bb00:	ee07 3a90 	vmov	s15, r3
 800bb04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb08:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800bbfc <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800bb0c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb10:	4b36      	ldr	r3, [pc, #216]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb18:	ee07 3a90 	vmov	s15, r3
 800bb1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb20:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb24:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bbf4 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800bb28:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb2c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb30:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb34:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb38:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb3c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bb40:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800bb42:	4b2a      	ldr	r3, [pc, #168]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb46:	0a5b      	lsrs	r3, r3, #9
 800bb48:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb4c:	ee07 3a90 	vmov	s15, r3
 800bb50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb54:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb58:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb5c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb64:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb68:	ee17 2a90 	vmov	r2, s15
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800bb70:	4b1e      	ldr	r3, [pc, #120]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bb72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb74:	0c1b      	lsrs	r3, r3, #16
 800bb76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bb7a:	ee07 3a90 	vmov	s15, r3
 800bb7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb82:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bb86:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bb8a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bb8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bb92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bb96:	ee17 2a90 	vmov	r2, s15
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800bb9e:	4b13      	ldr	r3, [pc, #76]	; (800bbec <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800bba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bba2:	0e1b      	lsrs	r3, r3, #24
 800bba4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bba8:	ee07 3a90 	vmov	s15, r3
 800bbac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bbb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bbb8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bbbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bbc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bbc4:	ee17 2a90 	vmov	r2, s15
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800bbcc:	e008      	b.n	800bbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2200      	movs	r2, #0
 800bbd2:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	2200      	movs	r2, #0
 800bbde:	609a      	str	r2, [r3, #8]
}
 800bbe0:	bf00      	nop
 800bbe2:	3724      	adds	r7, #36	; 0x24
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbea:	4770      	bx	lr
 800bbec:	58024400 	.word	0x58024400
 800bbf0:	03d09000 	.word	0x03d09000
 800bbf4:	46000000 	.word	0x46000000
 800bbf8:	4c742400 	.word	0x4c742400
 800bbfc:	4a742400 	.word	0x4a742400
 800bc00:	4bbebc20 	.word	0x4bbebc20

0800bc04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b089      	sub	sp, #36	; 0x24
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bc0c:	4b9d      	ldr	r3, [pc, #628]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc10:	f003 0303 	and.w	r3, r3, #3
 800bc14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800bc16:	4b9b      	ldr	r3, [pc, #620]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc1a:	0d1b      	lsrs	r3, r3, #20
 800bc1c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bc20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800bc22:	4b98      	ldr	r3, [pc, #608]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc26:	0a1b      	lsrs	r3, r3, #8
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800bc2e:	4b95      	ldr	r3, [pc, #596]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bc38:	693a      	ldr	r2, [r7, #16]
 800bc3a:	fb02 f303 	mul.w	r3, r2, r3
 800bc3e:	ee07 3a90 	vmov	s15, r3
 800bc42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	f000 810a 	beq.w	800be66 <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800bc52:	69bb      	ldr	r3, [r7, #24]
 800bc54:	2b01      	cmp	r3, #1
 800bc56:	d05a      	beq.n	800bd0e <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800bc58:	2b01      	cmp	r3, #1
 800bc5a:	d302      	bcc.n	800bc62 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800bc5c:	2b02      	cmp	r3, #2
 800bc5e:	d078      	beq.n	800bd52 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800bc60:	e099      	b.n	800bd96 <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bc62:	4b88      	ldr	r3, [pc, #544]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f003 0320 	and.w	r3, r3, #32
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d02d      	beq.n	800bcca <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bc6e:	4b85      	ldr	r3, [pc, #532]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	08db      	lsrs	r3, r3, #3
 800bc74:	f003 0303 	and.w	r3, r3, #3
 800bc78:	4a83      	ldr	r2, [pc, #524]	; (800be88 <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800bc7a:	fa22 f303 	lsr.w	r3, r2, r3
 800bc7e:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bc80:	68bb      	ldr	r3, [r7, #8]
 800bc82:	ee07 3a90 	vmov	s15, r3
 800bc86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc8a:	697b      	ldr	r3, [r7, #20]
 800bc8c:	ee07 3a90 	vmov	s15, r3
 800bc90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc98:	4b7a      	ldr	r3, [pc, #488]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bc9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bca0:	ee07 3a90 	vmov	s15, r3
 800bca4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bca8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcac:	eddf 5a77 	vldr	s11, [pc, #476]	; 800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bcb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcc4:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bcc8:	e087      	b.n	800bdda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	ee07 3a90 	vmov	s15, r3
 800bcd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcd4:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800be90 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800bcd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcdc:	4b69      	ldr	r3, [pc, #420]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bcde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bce0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bce4:	ee07 3a90 	vmov	s15, r3
 800bce8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bcf0:	eddf 5a66 	vldr	s11, [pc, #408]	; 800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bcf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd08:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd0c:	e065      	b.n	800bdda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	ee07 3a90 	vmov	s15, r3
 800bd14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd18:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bd1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd20:	4b58      	ldr	r3, [pc, #352]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd28:	ee07 3a90 	vmov	s15, r3
 800bd2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd30:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd34:	eddf 5a55 	vldr	s11, [pc, #340]	; 800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd4c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd50:	e043      	b.n	800bdda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd52:	697b      	ldr	r3, [r7, #20]
 800bd54:	ee07 3a90 	vmov	s15, r3
 800bd58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd5c:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800be98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800bd60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd64:	4b47      	ldr	r3, [pc, #284]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bd66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd6c:	ee07 3a90 	vmov	s15, r3
 800bd70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd74:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd78:	eddf 5a44 	vldr	s11, [pc, #272]	; 800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bd7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd90:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bd94:	e021      	b.n	800bdda <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	ee07 3a90 	vmov	s15, r3
 800bd9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bda0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800be94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800bda4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bda8:	4b36      	ldr	r3, [pc, #216]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bdb0:	ee07 3a90 	vmov	s15, r3
 800bdb4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdb8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdbc:	eddf 5a33 	vldr	s11, [pc, #204]	; 800be8c <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800bdc0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdc4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdc8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdcc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdd0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdd4:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bdd8:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800bdda:	4b2a      	ldr	r3, [pc, #168]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	0a5b      	lsrs	r3, r3, #9
 800bde0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bde4:	ee07 3a90 	vmov	s15, r3
 800bde8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bdf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bdf4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bdf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bdfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be00:	ee17 2a90 	vmov	r2, s15
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800be08:	4b1e      	ldr	r3, [pc, #120]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be0c:	0c1b      	lsrs	r3, r3, #16
 800be0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be12:	ee07 3a90 	vmov	s15, r3
 800be16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be1a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be22:	edd7 6a07 	vldr	s13, [r7, #28]
 800be26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be2e:	ee17 2a90 	vmov	r2, s15
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800be36:	4b13      	ldr	r3, [pc, #76]	; (800be84 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3a:	0e1b      	lsrs	r3, r3, #24
 800be3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800be40:	ee07 3a90 	vmov	s15, r3
 800be44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800be4c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800be50:	edd7 6a07 	vldr	s13, [r7, #28]
 800be54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800be58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800be5c:	ee17 2a90 	vmov	r2, s15
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800be64:	e008      	b.n	800be78 <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	2200      	movs	r2, #0
 800be6a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2200      	movs	r2, #0
 800be70:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2200      	movs	r2, #0
 800be76:	609a      	str	r2, [r3, #8]
}
 800be78:	bf00      	nop
 800be7a:	3724      	adds	r7, #36	; 0x24
 800be7c:	46bd      	mov	sp, r7
 800be7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be82:	4770      	bx	lr
 800be84:	58024400 	.word	0x58024400
 800be88:	03d09000 	.word	0x03d09000
 800be8c:	46000000 	.word	0x46000000
 800be90:	4c742400 	.word	0x4c742400
 800be94:	4a742400 	.word	0x4a742400
 800be98:	4bbebc20 	.word	0x4bbebc20

0800be9c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b089      	sub	sp, #36	; 0x24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bea4:	4b9d      	ldr	r3, [pc, #628]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bea8:	f003 0303 	and.w	r3, r3, #3
 800beac:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800beae:	4b9b      	ldr	r3, [pc, #620]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800beb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800beb2:	091b      	lsrs	r3, r3, #4
 800beb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800beb8:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800beba:	4b98      	ldr	r3, [pc, #608]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bebe:	f003 0301 	and.w	r3, r3, #1
 800bec2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bec4:	4b95      	ldr	r3, [pc, #596]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bec8:	08db      	lsrs	r3, r3, #3
 800beca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bece:	693a      	ldr	r2, [r7, #16]
 800bed0:	fb02 f303 	mul.w	r3, r2, r3
 800bed4:	ee07 3a90 	vmov	s15, r3
 800bed8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bedc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	f000 810a 	beq.w	800c0fc <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	2b01      	cmp	r3, #1
 800beec:	d05a      	beq.n	800bfa4 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800beee:	2b01      	cmp	r3, #1
 800bef0:	d302      	bcc.n	800bef8 <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800bef2:	2b02      	cmp	r3, #2
 800bef4:	d078      	beq.n	800bfe8 <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800bef6:	e099      	b.n	800c02c <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bef8:	4b88      	ldr	r3, [pc, #544]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0320 	and.w	r3, r3, #32
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d02d      	beq.n	800bf60 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bf04:	4b85      	ldr	r3, [pc, #532]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	08db      	lsrs	r3, r3, #3
 800bf0a:	f003 0303 	and.w	r3, r3, #3
 800bf0e:	4a84      	ldr	r2, [pc, #528]	; (800c120 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800bf10:	fa22 f303 	lsr.w	r3, r2, r3
 800bf14:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf16:	68bb      	ldr	r3, [r7, #8]
 800bf18:	ee07 3a90 	vmov	s15, r3
 800bf1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	ee07 3a90 	vmov	s15, r3
 800bf26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf2e:	4b7b      	ldr	r3, [pc, #492]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf36:	ee07 3a90 	vmov	s15, r3
 800bf3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf42:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c124 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf5a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800bf5e:	e087      	b.n	800c070 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bf60:	697b      	ldr	r3, [r7, #20]
 800bf62:	ee07 3a90 	vmov	s15, r3
 800bf66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf6a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c128 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800bf6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bf72:	4b6a      	ldr	r3, [pc, #424]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bf74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf7a:	ee07 3a90 	vmov	s15, r3
 800bf7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bf82:	ed97 6a03 	vldr	s12, [r7, #12]
 800bf86:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c124 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bf8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bf8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bf92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bf96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfa2:	e065      	b.n	800c070 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	ee07 3a90 	vmov	s15, r3
 800bfaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bfae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c12c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800bfb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bfb6:	4b59      	ldr	r3, [pc, #356]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bfbe:	ee07 3a90 	vmov	s15, r3
 800bfc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bfc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800bfca:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c124 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800bfce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bfd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bfd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bfda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bfde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800bfe6:	e043      	b.n	800c070 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bfe8:	697b      	ldr	r3, [r7, #20]
 800bfea:	ee07 3a90 	vmov	s15, r3
 800bfee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bff2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c130 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bff6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bffa:	4b48      	ldr	r3, [pc, #288]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800bffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bffe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c002:	ee07 3a90 	vmov	s15, r3
 800c006:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c00a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c00e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c124 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c012:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c016:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c01a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c01e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c022:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c026:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c02a:	e021      	b.n	800c070 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c02c:	697b      	ldr	r3, [r7, #20]
 800c02e:	ee07 3a90 	vmov	s15, r3
 800c032:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c036:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c12c <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c03a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c03e:	4b37      	ldr	r3, [pc, #220]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c042:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c046:	ee07 3a90 	vmov	s15, r3
 800c04a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c04e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c052:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c124 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c056:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c05a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c05e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c062:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c06e:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c070:	4b2a      	ldr	r3, [pc, #168]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c074:	0a5b      	lsrs	r3, r3, #9
 800c076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c07a:	ee07 3a90 	vmov	s15, r3
 800c07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c086:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c08a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c08e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c092:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c096:	ee17 2a90 	vmov	r2, s15
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c09e:	4b1f      	ldr	r3, [pc, #124]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a2:	0c1b      	lsrs	r3, r3, #16
 800c0a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0a8:	ee07 3a90 	vmov	s15, r3
 800c0ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0b8:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0c4:	ee17 2a90 	vmov	r2, s15
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c0cc:	4b13      	ldr	r3, [pc, #76]	; (800c11c <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0d0:	0e1b      	lsrs	r3, r3, #24
 800c0d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c0d6:	ee07 3a90 	vmov	s15, r3
 800c0da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c0de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c0e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c0e6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c0ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c0ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c0f2:	ee17 2a90 	vmov	r2, s15
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c0fa:	e008      	b.n	800c10e <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	2200      	movs	r2, #0
 800c106:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2200      	movs	r2, #0
 800c10c:	609a      	str	r2, [r3, #8]
}
 800c10e:	bf00      	nop
 800c110:	3724      	adds	r7, #36	; 0x24
 800c112:	46bd      	mov	sp, r7
 800c114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c118:	4770      	bx	lr
 800c11a:	bf00      	nop
 800c11c:	58024400 	.word	0x58024400
 800c120:	03d09000 	.word	0x03d09000
 800c124:	46000000 	.word	0x46000000
 800c128:	4c742400 	.word	0x4c742400
 800c12c:	4a742400 	.word	0x4a742400
 800c130:	4bbebc20 	.word	0x4bbebc20

0800c134 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c134:	b580      	push	{r7, lr}
 800c136:	b084      	sub	sp, #16
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
 800c13c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c13e:	2300      	movs	r3, #0
 800c140:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c142:	4b53      	ldr	r3, [pc, #332]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c146:	f003 0303 	and.w	r3, r3, #3
 800c14a:	2b03      	cmp	r3, #3
 800c14c:	d101      	bne.n	800c152 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c14e:	2301      	movs	r3, #1
 800c150:	e099      	b.n	800c286 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c152:	4b4f      	ldr	r3, [pc, #316]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	4a4e      	ldr	r2, [pc, #312]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c158:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c15c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c15e:	f7f8 fa01 	bl	8004564 <HAL_GetTick>
 800c162:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c164:	e008      	b.n	800c178 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c166:	f7f8 f9fd 	bl	8004564 <HAL_GetTick>
 800c16a:	4602      	mov	r2, r0
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	1ad3      	subs	r3, r2, r3
 800c170:	2b02      	cmp	r3, #2
 800c172:	d901      	bls.n	800c178 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c174:	2303      	movs	r3, #3
 800c176:	e086      	b.n	800c286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c178:	4b45      	ldr	r3, [pc, #276]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c180:	2b00      	cmp	r3, #0
 800c182:	d1f0      	bne.n	800c166 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c184:	4b42      	ldr	r3, [pc, #264]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c188:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	031b      	lsls	r3, r3, #12
 800c192:	493f      	ldr	r1, [pc, #252]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c194:	4313      	orrs	r3, r2
 800c196:	628b      	str	r3, [r1, #40]	; 0x28
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	3b01      	subs	r3, #1
 800c19e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	689b      	ldr	r3, [r3, #8]
 800c1a6:	3b01      	subs	r3, #1
 800c1a8:	025b      	lsls	r3, r3, #9
 800c1aa:	b29b      	uxth	r3, r3
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	68db      	ldr	r3, [r3, #12]
 800c1b2:	3b01      	subs	r3, #1
 800c1b4:	041b      	lsls	r3, r3, #16
 800c1b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1ba:	431a      	orrs	r2, r3
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	691b      	ldr	r3, [r3, #16]
 800c1c0:	3b01      	subs	r3, #1
 800c1c2:	061b      	lsls	r3, r3, #24
 800c1c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1c8:	4931      	ldr	r1, [pc, #196]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c1ce:	4b30      	ldr	r3, [pc, #192]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	695b      	ldr	r3, [r3, #20]
 800c1da:	492d      	ldr	r1, [pc, #180]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1dc:	4313      	orrs	r3, r2
 800c1de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c1e0:	4b2b      	ldr	r3, [pc, #172]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1e4:	f023 0220 	bic.w	r2, r3, #32
 800c1e8:	687b      	ldr	r3, [r7, #4]
 800c1ea:	699b      	ldr	r3, [r3, #24]
 800c1ec:	4928      	ldr	r1, [pc, #160]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1ee:	4313      	orrs	r3, r2
 800c1f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c1f2:	4b27      	ldr	r3, [pc, #156]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1f6:	4a26      	ldr	r2, [pc, #152]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c1f8:	f023 0310 	bic.w	r3, r3, #16
 800c1fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c1fe:	4b24      	ldr	r3, [pc, #144]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c202:	4b24      	ldr	r3, [pc, #144]	; (800c294 <RCCEx_PLL2_Config+0x160>)
 800c204:	4013      	ands	r3, r2
 800c206:	687a      	ldr	r2, [r7, #4]
 800c208:	69d2      	ldr	r2, [r2, #28]
 800c20a:	00d2      	lsls	r2, r2, #3
 800c20c:	4920      	ldr	r1, [pc, #128]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c20e:	4313      	orrs	r3, r2
 800c210:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c212:	4b1f      	ldr	r3, [pc, #124]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c216:	4a1e      	ldr	r2, [pc, #120]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c218:	f043 0310 	orr.w	r3, r3, #16
 800c21c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c21e:	683b      	ldr	r3, [r7, #0]
 800c220:	2b00      	cmp	r3, #0
 800c222:	d106      	bne.n	800c232 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c224:	4b1a      	ldr	r3, [pc, #104]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c228:	4a19      	ldr	r2, [pc, #100]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c22a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c22e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c230:	e00f      	b.n	800c252 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	2b01      	cmp	r3, #1
 800c236:	d106      	bne.n	800c246 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c238:	4b15      	ldr	r3, [pc, #84]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c23a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c23c:	4a14      	ldr	r2, [pc, #80]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c23e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c242:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c244:	e005      	b.n	800c252 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c246:	4b12      	ldr	r3, [pc, #72]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24a:	4a11      	ldr	r2, [pc, #68]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c24c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c250:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c252:	4b0f      	ldr	r3, [pc, #60]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	4a0e      	ldr	r2, [pc, #56]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c258:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c25c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c25e:	f7f8 f981 	bl	8004564 <HAL_GetTick>
 800c262:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c264:	e008      	b.n	800c278 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c266:	f7f8 f97d 	bl	8004564 <HAL_GetTick>
 800c26a:	4602      	mov	r2, r0
 800c26c:	68bb      	ldr	r3, [r7, #8]
 800c26e:	1ad3      	subs	r3, r2, r3
 800c270:	2b02      	cmp	r3, #2
 800c272:	d901      	bls.n	800c278 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c274:	2303      	movs	r3, #3
 800c276:	e006      	b.n	800c286 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c278:	4b05      	ldr	r3, [pc, #20]	; (800c290 <RCCEx_PLL2_Config+0x15c>)
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0f0      	beq.n	800c266 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c284:	7bfb      	ldrb	r3, [r7, #15]
}
 800c286:	4618      	mov	r0, r3
 800c288:	3710      	adds	r7, #16
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}
 800c28e:	bf00      	nop
 800c290:	58024400 	.word	0x58024400
 800c294:	ffff0007 	.word	0xffff0007

0800c298 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c298:	b580      	push	{r7, lr}
 800c29a:	b084      	sub	sp, #16
 800c29c:	af00      	add	r7, sp, #0
 800c29e:	6078      	str	r0, [r7, #4]
 800c2a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c2a2:	2300      	movs	r3, #0
 800c2a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c2a6:	4b53      	ldr	r3, [pc, #332]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2aa:	f003 0303 	and.w	r3, r3, #3
 800c2ae:	2b03      	cmp	r3, #3
 800c2b0:	d101      	bne.n	800c2b6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c2b2:	2301      	movs	r3, #1
 800c2b4:	e099      	b.n	800c3ea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c2b6:	4b4f      	ldr	r3, [pc, #316]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a4e      	ldr	r2, [pc, #312]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c2c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c2c2:	f7f8 f94f 	bl	8004564 <HAL_GetTick>
 800c2c6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2c8:	e008      	b.n	800c2dc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c2ca:	f7f8 f94b 	bl	8004564 <HAL_GetTick>
 800c2ce:	4602      	mov	r2, r0
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	1ad3      	subs	r3, r2, r3
 800c2d4:	2b02      	cmp	r3, #2
 800c2d6:	d901      	bls.n	800c2dc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c2d8:	2303      	movs	r3, #3
 800c2da:	e086      	b.n	800c3ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c2dc:	4b45      	ldr	r3, [pc, #276]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2e4:	2b00      	cmp	r3, #0
 800c2e6:	d1f0      	bne.n	800c2ca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c2e8:	4b42      	ldr	r3, [pc, #264]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2ec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	051b      	lsls	r3, r3, #20
 800c2f6:	493f      	ldr	r1, [pc, #252]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c2f8:	4313      	orrs	r3, r2
 800c2fa:	628b      	str	r3, [r1, #40]	; 0x28
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	685b      	ldr	r3, [r3, #4]
 800c300:	3b01      	subs	r3, #1
 800c302:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	689b      	ldr	r3, [r3, #8]
 800c30a:	3b01      	subs	r3, #1
 800c30c:	025b      	lsls	r3, r3, #9
 800c30e:	b29b      	uxth	r3, r3
 800c310:	431a      	orrs	r2, r3
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	68db      	ldr	r3, [r3, #12]
 800c316:	3b01      	subs	r3, #1
 800c318:	041b      	lsls	r3, r3, #16
 800c31a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c31e:	431a      	orrs	r2, r3
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	691b      	ldr	r3, [r3, #16]
 800c324:	3b01      	subs	r3, #1
 800c326:	061b      	lsls	r3, r3, #24
 800c328:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c32c:	4931      	ldr	r1, [pc, #196]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c32e:	4313      	orrs	r3, r2
 800c330:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c332:	4b30      	ldr	r3, [pc, #192]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c336:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	695b      	ldr	r3, [r3, #20]
 800c33e:	492d      	ldr	r1, [pc, #180]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c340:	4313      	orrs	r3, r2
 800c342:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c344:	4b2b      	ldr	r3, [pc, #172]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c348:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	699b      	ldr	r3, [r3, #24]
 800c350:	4928      	ldr	r1, [pc, #160]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c352:	4313      	orrs	r3, r2
 800c354:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c356:	4b27      	ldr	r3, [pc, #156]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c35a:	4a26      	ldr	r2, [pc, #152]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c35c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c360:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c362:	4b24      	ldr	r3, [pc, #144]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c364:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c366:	4b24      	ldr	r3, [pc, #144]	; (800c3f8 <RCCEx_PLL3_Config+0x160>)
 800c368:	4013      	ands	r3, r2
 800c36a:	687a      	ldr	r2, [r7, #4]
 800c36c:	69d2      	ldr	r2, [r2, #28]
 800c36e:	00d2      	lsls	r2, r2, #3
 800c370:	4920      	ldr	r1, [pc, #128]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c372:	4313      	orrs	r3, r2
 800c374:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c376:	4b1f      	ldr	r3, [pc, #124]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	4a1e      	ldr	r2, [pc, #120]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c37c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c380:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c388:	4b1a      	ldr	r3, [pc, #104]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c38a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c38c:	4a19      	ldr	r2, [pc, #100]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c38e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c392:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c394:	e00f      	b.n	800c3b6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800c396:	683b      	ldr	r3, [r7, #0]
 800c398:	2b01      	cmp	r3, #1
 800c39a:	d106      	bne.n	800c3aa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c39c:	4b15      	ldr	r3, [pc, #84]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3a0:	4a14      	ldr	r2, [pc, #80]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c3a6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c3a8:	e005      	b.n	800c3b6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c3aa:	4b12      	ldr	r3, [pc, #72]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ae:	4a11      	ldr	r2, [pc, #68]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c3b4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c3b6:	4b0f      	ldr	r3, [pc, #60]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4a0e      	ldr	r2, [pc, #56]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c3c2:	f7f8 f8cf 	bl	8004564 <HAL_GetTick>
 800c3c6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3c8:	e008      	b.n	800c3dc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800c3ca:	f7f8 f8cb 	bl	8004564 <HAL_GetTick>
 800c3ce:	4602      	mov	r2, r0
 800c3d0:	68bb      	ldr	r3, [r7, #8]
 800c3d2:	1ad3      	subs	r3, r2, r3
 800c3d4:	2b02      	cmp	r3, #2
 800c3d6:	d901      	bls.n	800c3dc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c3d8:	2303      	movs	r3, #3
 800c3da:	e006      	b.n	800c3ea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c3dc:	4b05      	ldr	r3, [pc, #20]	; (800c3f4 <RCCEx_PLL3_Config+0x15c>)
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d0f0      	beq.n	800c3ca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c3e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3710      	adds	r7, #16
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	58024400 	.word	0x58024400
 800c3f8:	ffff0007 	.word	0xffff0007

0800c3fc <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800c404:	2301      	movs	r3, #1
 800c406:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d067      	beq.n	800c4de <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800c414:	b2db      	uxtb	r3, r3
 800c416:	2b00      	cmp	r3, #0
 800c418:	d106      	bne.n	800c428 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	2200      	movs	r2, #0
 800c41e:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f7f7 fce2 	bl	8003dec <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	2202      	movs	r2, #2
 800c42c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	22ca      	movs	r2, #202	; 0xca
 800c436:	625a      	str	r2, [r3, #36]	; 0x24
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	2253      	movs	r2, #83	; 0x53
 800c43e:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800c440:	6878      	ldr	r0, [r7, #4]
 800c442:	f000 fa49 	bl	800c8d8 <RTC_EnterInitMode>
 800c446:	4603      	mov	r3, r0
 800c448:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800c44a:	7bfb      	ldrb	r3, [r7, #15]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d13b      	bne.n	800c4c8 <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	6899      	ldr	r1, [r3, #8]
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	681a      	ldr	r2, [r3, #0]
 800c45a:	4b23      	ldr	r3, [pc, #140]	; (800c4e8 <HAL_RTC_Init+0xec>)
 800c45c:	400b      	ands	r3, r1
 800c45e:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	6899      	ldr	r1, [r3, #8]
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	685a      	ldr	r2, [r3, #4]
 800c46a:	687b      	ldr	r3, [r7, #4]
 800c46c:	691b      	ldr	r3, [r3, #16]
 800c46e:	431a      	orrs	r2, r3
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	699b      	ldr	r3, [r3, #24]
 800c474:	431a      	orrs	r2, r3
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	430a      	orrs	r2, r1
 800c47c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	689b      	ldr	r3, [r3, #8]
 800c482:	0419      	lsls	r1, r3, #16
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68da      	ldr	r2, [r3, #12]
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	430a      	orrs	r2, r1
 800c48e:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fa51 	bl	800c938 <RTC_ExitInitMode>
 800c496:	4603      	mov	r3, r0
 800c498:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800c49a:	7bfb      	ldrb	r3, [r7, #15]
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d113      	bne.n	800c4c8 <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0203 	bic.w	r2, r2, #3
 800c4ae:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	69da      	ldr	r2, [r3, #28]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	695b      	ldr	r3, [r3, #20]
 800c4be:	431a      	orrs	r2, r3
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	430a      	orrs	r2, r1
 800c4c6:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	22ff      	movs	r2, #255	; 0xff
 800c4ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800c4d0:	7bfb      	ldrb	r3, [r7, #15]
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d103      	bne.n	800c4de <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	2201      	movs	r2, #1
 800c4da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800c4de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	3710      	adds	r7, #16
 800c4e4:	46bd      	mov	sp, r7
 800c4e6:	bd80      	pop	{r7, pc}
 800c4e8:	ff8fffbf 	.word	0xff8fffbf

0800c4ec <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c4ec:	b590      	push	{r4, r7, lr}
 800c4ee:	b087      	sub	sp, #28
 800c4f0:	af00      	add	r7, sp, #0
 800c4f2:	60f8      	str	r0, [r7, #12]
 800c4f4:	60b9      	str	r1, [r7, #8]
 800c4f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c4f8:	68fb      	ldr	r3, [r7, #12]
 800c4fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d101      	bne.n	800c506 <HAL_RTC_SetTime+0x1a>
 800c502:	2302      	movs	r3, #2
 800c504:	e089      	b.n	800c61a <HAL_RTC_SetTime+0x12e>
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	2201      	movs	r2, #1
 800c50a:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2202      	movs	r2, #2
 800c512:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c516:	68fb      	ldr	r3, [r7, #12]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	22ca      	movs	r2, #202	; 0xca
 800c51c:	625a      	str	r2, [r3, #36]	; 0x24
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	2253      	movs	r2, #83	; 0x53
 800c524:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c526:	68f8      	ldr	r0, [r7, #12]
 800c528:	f000 f9d6 	bl	800c8d8 <RTC_EnterInitMode>
 800c52c:	4603      	mov	r3, r0
 800c52e:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c530:	7cfb      	ldrb	r3, [r7, #19]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d161      	bne.n	800c5fa <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d126      	bne.n	800c58a <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c546:	2b00      	cmp	r3, #0
 800c548:	d102      	bne.n	800c550 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c54a:	68bb      	ldr	r3, [r7, #8]
 800c54c:	2200      	movs	r2, #0
 800c54e:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	781b      	ldrb	r3, [r3, #0]
 800c554:	4618      	mov	r0, r3
 800c556:	f000 fa2d 	bl	800c9b4 <RTC_ByteToBcd2>
 800c55a:	4603      	mov	r3, r0
 800c55c:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	785b      	ldrb	r3, [r3, #1]
 800c562:	4618      	mov	r0, r3
 800c564:	f000 fa26 	bl	800c9b4 <RTC_ByteToBcd2>
 800c568:	4603      	mov	r3, r0
 800c56a:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c56c:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c56e:	68bb      	ldr	r3, [r7, #8]
 800c570:	789b      	ldrb	r3, [r3, #2]
 800c572:	4618      	mov	r0, r3
 800c574:	f000 fa1e 	bl	800c9b4 <RTC_ByteToBcd2>
 800c578:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c57a:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c57e:	68bb      	ldr	r3, [r7, #8]
 800c580:	78db      	ldrb	r3, [r3, #3]
 800c582:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c584:	4313      	orrs	r3, r2
 800c586:	617b      	str	r3, [r7, #20]
 800c588:	e018      	b.n	800c5bc <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	689b      	ldr	r3, [r3, #8]
 800c590:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c594:	2b00      	cmp	r3, #0
 800c596:	d102      	bne.n	800c59e <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800c598:	68bb      	ldr	r3, [r7, #8]
 800c59a:	2200      	movs	r2, #0
 800c59c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	781b      	ldrb	r3, [r3, #0]
 800c5a2:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	785b      	ldrb	r3, [r3, #1]
 800c5a8:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5aa:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800c5ac:	68ba      	ldr	r2, [r7, #8]
 800c5ae:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800c5b0:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800c5b2:	68bb      	ldr	r3, [r7, #8]
 800c5b4:	78db      	ldrb	r3, [r3, #3]
 800c5b6:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	681a      	ldr	r2, [r3, #0]
 800c5c0:	6979      	ldr	r1, [r7, #20]
 800c5c2:	4b18      	ldr	r3, [pc, #96]	; (800c624 <HAL_RTC_SetTime+0x138>)
 800c5c4:	400b      	ands	r3, r1
 800c5c6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	689a      	ldr	r2, [r3, #8]
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800c5d6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	6899      	ldr	r1, [r3, #8]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	68da      	ldr	r2, [r3, #12]
 800c5e2:	68bb      	ldr	r3, [r7, #8]
 800c5e4:	691b      	ldr	r3, [r3, #16]
 800c5e6:	431a      	orrs	r2, r3
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	430a      	orrs	r2, r1
 800c5ee:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c5f0:	68f8      	ldr	r0, [r7, #12]
 800c5f2:	f000 f9a1 	bl	800c938 <RTC_ExitInitMode>
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	22ff      	movs	r2, #255	; 0xff
 800c600:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c602:	7cfb      	ldrb	r3, [r7, #19]
 800c604:	2b00      	cmp	r3, #0
 800c606:	d103      	bne.n	800c610 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	2201      	movs	r2, #1
 800c60c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	2200      	movs	r2, #0
 800c614:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c618:	7cfb      	ldrb	r3, [r7, #19]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	371c      	adds	r7, #28
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd90      	pop	{r4, r7, pc}
 800c622:	bf00      	nop
 800c624:	007f7f7f 	.word	0x007f7f7f

0800c628 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	60f8      	str	r0, [r7, #12]
 800c630:	60b9      	str	r1, [r7, #8]
 800c632:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	681b      	ldr	r3, [r3, #0]
 800c638:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	691b      	ldr	r3, [r3, #16]
 800c644:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	681a      	ldr	r2, [r3, #0]
 800c652:	4b22      	ldr	r3, [pc, #136]	; (800c6dc <HAL_RTC_GetTime+0xb4>)
 800c654:	4013      	ands	r3, r2
 800c656:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	0c1b      	lsrs	r3, r3, #16
 800c65c:	b2db      	uxtb	r3, r3
 800c65e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c662:	b2da      	uxtb	r2, r3
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800c668:	697b      	ldr	r3, [r7, #20]
 800c66a:	0a1b      	lsrs	r3, r3, #8
 800c66c:	b2db      	uxtb	r3, r3
 800c66e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c672:	b2da      	uxtb	r2, r3
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800c678:	697b      	ldr	r3, [r7, #20]
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c680:	b2da      	uxtb	r2, r3
 800c682:	68bb      	ldr	r3, [r7, #8]
 800c684:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800c686:	697b      	ldr	r3, [r7, #20]
 800c688:	0d9b      	lsrs	r3, r3, #22
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	b2da      	uxtb	r2, r3
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d11a      	bne.n	800c6d2 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f000 f9a7 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c6a6:	4603      	mov	r3, r0
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	68bb      	ldr	r3, [r7, #8]
 800c6ac:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800c6ae:	68bb      	ldr	r3, [r7, #8]
 800c6b0:	785b      	ldrb	r3, [r3, #1]
 800c6b2:	4618      	mov	r0, r3
 800c6b4:	f000 f99e 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c6b8:	4603      	mov	r3, r0
 800c6ba:	461a      	mov	r2, r3
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800c6c0:	68bb      	ldr	r3, [r7, #8]
 800c6c2:	789b      	ldrb	r3, [r3, #2]
 800c6c4:	4618      	mov	r0, r3
 800c6c6:	f000 f995 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	461a      	mov	r2, r3
 800c6ce:	68bb      	ldr	r3, [r7, #8]
 800c6d0:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800c6d2:	2300      	movs	r3, #0
}
 800c6d4:	4618      	mov	r0, r3
 800c6d6:	3718      	adds	r7, #24
 800c6d8:	46bd      	mov	sp, r7
 800c6da:	bd80      	pop	{r7, pc}
 800c6dc:	007f7f7f 	.word	0x007f7f7f

0800c6e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c6e0:	b590      	push	{r4, r7, lr}
 800c6e2:	b087      	sub	sp, #28
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 800c6f2:	2b01      	cmp	r3, #1
 800c6f4:	d101      	bne.n	800c6fa <HAL_RTC_SetDate+0x1a>
 800c6f6:	2302      	movs	r3, #2
 800c6f8:	e073      	b.n	800c7e2 <HAL_RTC_SetDate+0x102>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	2201      	movs	r2, #1
 800c6fe:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	2202      	movs	r2, #2
 800c706:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d10e      	bne.n	800c72e <HAL_RTC_SetDate+0x4e>
 800c710:	68bb      	ldr	r3, [r7, #8]
 800c712:	785b      	ldrb	r3, [r3, #1]
 800c714:	f003 0310 	and.w	r3, r3, #16
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d008      	beq.n	800c72e <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	785b      	ldrb	r3, [r3, #1]
 800c720:	f023 0310 	bic.w	r3, r3, #16
 800c724:	b2db      	uxtb	r3, r3
 800c726:	330a      	adds	r3, #10
 800c728:	b2da      	uxtb	r2, r3
 800c72a:	68bb      	ldr	r3, [r7, #8]
 800c72c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d11c      	bne.n	800c76e <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	78db      	ldrb	r3, [r3, #3]
 800c738:	4618      	mov	r0, r3
 800c73a:	f000 f93b 	bl	800c9b4 <RTC_ByteToBcd2>
 800c73e:	4603      	mov	r3, r0
 800c740:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c742:	68bb      	ldr	r3, [r7, #8]
 800c744:	785b      	ldrb	r3, [r3, #1]
 800c746:	4618      	mov	r0, r3
 800c748:	f000 f934 	bl	800c9b4 <RTC_ByteToBcd2>
 800c74c:	4603      	mov	r3, r0
 800c74e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c750:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	789b      	ldrb	r3, [r3, #2]
 800c756:	4618      	mov	r0, r3
 800c758:	f000 f92c 	bl	800c9b4 <RTC_ByteToBcd2>
 800c75c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800c75e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	781b      	ldrb	r3, [r3, #0]
 800c766:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800c768:	4313      	orrs	r3, r2
 800c76a:	617b      	str	r3, [r7, #20]
 800c76c:	e00e      	b.n	800c78c <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	78db      	ldrb	r3, [r3, #3]
 800c772:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c774:	68bb      	ldr	r3, [r7, #8]
 800c776:	785b      	ldrb	r3, [r3, #1]
 800c778:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c77a:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800c77c:	68ba      	ldr	r2, [r7, #8]
 800c77e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800c780:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800c782:	68bb      	ldr	r3, [r7, #8]
 800c784:	781b      	ldrb	r3, [r3, #0]
 800c786:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800c788:	4313      	orrs	r3, r2
 800c78a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800c78c:	68fb      	ldr	r3, [r7, #12]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	22ca      	movs	r2, #202	; 0xca
 800c792:	625a      	str	r2, [r3, #36]	; 0x24
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2253      	movs	r2, #83	; 0x53
 800c79a:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800c79c:	68f8      	ldr	r0, [r7, #12]
 800c79e:	f000 f89b 	bl	800c8d8 <RTC_EnterInitMode>
 800c7a2:	4603      	mov	r3, r0
 800c7a4:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800c7a6:	7cfb      	ldrb	r3, [r7, #19]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d10a      	bne.n	800c7c2 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800c7ac:	68fb      	ldr	r3, [r7, #12]
 800c7ae:	681a      	ldr	r2, [r3, #0]
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	4b0e      	ldr	r3, [pc, #56]	; (800c7ec <HAL_RTC_SetDate+0x10c>)
 800c7b4:	400b      	ands	r3, r1
 800c7b6:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800c7b8:	68f8      	ldr	r0, [r7, #12]
 800c7ba:	f000 f8bd 	bl	800c938 <RTC_ExitInitMode>
 800c7be:	4603      	mov	r3, r0
 800c7c0:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	22ff      	movs	r2, #255	; 0xff
 800c7c8:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800c7ca:	7cfb      	ldrb	r3, [r7, #19]
 800c7cc:	2b00      	cmp	r3, #0
 800c7ce:	d103      	bne.n	800c7d8 <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	2201      	movs	r2, #1
 800c7d4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800c7d8:	68fb      	ldr	r3, [r7, #12]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800c7e0:	7cfb      	ldrb	r3, [r7, #19]


}
 800c7e2:	4618      	mov	r0, r3
 800c7e4:	371c      	adds	r7, #28
 800c7e6:	46bd      	mov	sp, r7
 800c7e8:	bd90      	pop	{r4, r7, pc}
 800c7ea:	bf00      	nop
 800c7ec:	00ffff3f 	.word	0x00ffff3f

0800c7f0 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800c7f0:	b580      	push	{r7, lr}
 800c7f2:	b086      	sub	sp, #24
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	60f8      	str	r0, [r7, #12]
 800c7f8:	60b9      	str	r1, [r7, #8]
 800c7fa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	685a      	ldr	r2, [r3, #4]
 800c802:	4b21      	ldr	r3, [pc, #132]	; (800c888 <HAL_RTC_GetDate+0x98>)
 800c804:	4013      	ands	r3, r2
 800c806:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800c808:	697b      	ldr	r3, [r7, #20]
 800c80a:	0c1b      	lsrs	r3, r3, #16
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	68bb      	ldr	r3, [r7, #8]
 800c810:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	0a1b      	lsrs	r3, r3, #8
 800c816:	b2db      	uxtb	r3, r3
 800c818:	f003 031f 	and.w	r3, r3, #31
 800c81c:	b2da      	uxtb	r2, r3
 800c81e:	68bb      	ldr	r3, [r7, #8]
 800c820:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	b2db      	uxtb	r3, r3
 800c826:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c82a:	b2da      	uxtb	r2, r3
 800c82c:	68bb      	ldr	r3, [r7, #8]
 800c82e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	0b5b      	lsrs	r3, r3, #13
 800c834:	b2db      	uxtb	r3, r3
 800c836:	f003 0307 	and.w	r3, r3, #7
 800c83a:	b2da      	uxtb	r2, r3
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d11a      	bne.n	800c87c <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	78db      	ldrb	r3, [r3, #3]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f000 f8d2 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c850:	4603      	mov	r3, r0
 800c852:	461a      	mov	r2, r3
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800c858:	68bb      	ldr	r3, [r7, #8]
 800c85a:	785b      	ldrb	r3, [r3, #1]
 800c85c:	4618      	mov	r0, r3
 800c85e:	f000 f8c9 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c862:	4603      	mov	r3, r0
 800c864:	461a      	mov	r2, r3
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800c86a:	68bb      	ldr	r3, [r7, #8]
 800c86c:	789b      	ldrb	r3, [r3, #2]
 800c86e:	4618      	mov	r0, r3
 800c870:	f000 f8c0 	bl	800c9f4 <RTC_Bcd2ToByte>
 800c874:	4603      	mov	r3, r0
 800c876:	461a      	mov	r2, r3
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800c87c:	2300      	movs	r3, #0
}
 800c87e:	4618      	mov	r0, r3
 800c880:	3718      	adds	r7, #24
 800c882:	46bd      	mov	sp, r7
 800c884:	bd80      	pop	{r7, pc}
 800c886:	bf00      	nop
 800c888:	00ffff3f 	.word	0x00ffff3f

0800c88c <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800c88c:	b580      	push	{r7, lr}
 800c88e:	b084      	sub	sp, #16
 800c890:	af00      	add	r7, sp, #0
 800c892:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	68da      	ldr	r2, [r3, #12]
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800c8a2:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800c8a4:	f7f7 fe5e 	bl	8004564 <HAL_GetTick>
 800c8a8:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8aa:	e009      	b.n	800c8c0 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800c8ac:	f7f7 fe5a 	bl	8004564 <HAL_GetTick>
 800c8b0:	4602      	mov	r2, r0
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	1ad3      	subs	r3, r2, r3
 800c8b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c8ba:	d901      	bls.n	800c8c0 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800c8bc:	2303      	movs	r3, #3
 800c8be:	e007      	b.n	800c8d0 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	68db      	ldr	r3, [r3, #12]
 800c8c6:	f003 0320 	and.w	r3, r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d0ee      	beq.n	800c8ac <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3710      	adds	r7, #16
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	bd80      	pop	{r7, pc}

0800c8d8 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800c8d8:	b580      	push	{r7, lr}
 800c8da:	b084      	sub	sp, #16
 800c8dc:	af00      	add	r7, sp, #0
 800c8de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d11d      	bne.n	800c92e <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	681b      	ldr	r3, [r3, #0]
 800c8f6:	f04f 32ff 	mov.w	r2, #4294967295
 800c8fa:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800c8fc:	f7f7 fe32 	bl	8004564 <HAL_GetTick>
 800c900:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c902:	e00d      	b.n	800c920 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800c904:	f7f7 fe2e 	bl	8004564 <HAL_GetTick>
 800c908:	4602      	mov	r2, r0
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c912:	d905      	bls.n	800c920 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800c914:	2303      	movs	r3, #3
 800c916:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2203      	movs	r2, #3
 800c91c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	68db      	ldr	r3, [r3, #12]
 800c926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d0ea      	beq.n	800c904 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800c92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c930:	4618      	mov	r0, r3
 800c932:	3710      	adds	r7, #16
 800c934:	46bd      	mov	sp, r7
 800c936:	bd80      	pop	{r7, pc}

0800c938 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b084      	sub	sp, #16
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c940:	2300      	movs	r3, #0
 800c942:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800c944:	4b1a      	ldr	r3, [pc, #104]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c946:	68db      	ldr	r3, [r3, #12]
 800c948:	4a19      	ldr	r2, [pc, #100]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c94a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c94e:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800c950:	4b17      	ldr	r3, [pc, #92]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	f003 0320 	and.w	r3, r3, #32
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d10c      	bne.n	800c976 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff ff95 	bl	800c88c <HAL_RTC_WaitForSynchro>
 800c962:	4603      	mov	r3, r0
 800c964:	2b00      	cmp	r3, #0
 800c966:	d01e      	beq.n	800c9a6 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	2203      	movs	r2, #3
 800c96c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c970:	2303      	movs	r3, #3
 800c972:	73fb      	strb	r3, [r7, #15]
 800c974:	e017      	b.n	800c9a6 <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c976:	4b0e      	ldr	r3, [pc, #56]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c978:	689b      	ldr	r3, [r3, #8]
 800c97a:	4a0d      	ldr	r2, [pc, #52]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c97c:	f023 0320 	bic.w	r3, r3, #32
 800c980:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800c982:	6878      	ldr	r0, [r7, #4]
 800c984:	f7ff ff82 	bl	800c88c <HAL_RTC_WaitForSynchro>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d005      	beq.n	800c99a <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2203      	movs	r2, #3
 800c992:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800c996:	2303      	movs	r3, #3
 800c998:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800c99a:	4b05      	ldr	r3, [pc, #20]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c99c:	689b      	ldr	r3, [r3, #8]
 800c99e:	4a04      	ldr	r2, [pc, #16]	; (800c9b0 <RTC_ExitInitMode+0x78>)
 800c9a0:	f043 0320 	orr.w	r3, r3, #32
 800c9a4:	6093      	str	r3, [r2, #8]
  }

  return status;
 800c9a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	3710      	adds	r7, #16
 800c9ac:	46bd      	mov	sp, r7
 800c9ae:	bd80      	pop	{r7, pc}
 800c9b0:	58004000 	.word	0x58004000

0800c9b4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b085      	sub	sp, #20
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	4603      	mov	r3, r0
 800c9bc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800c9c2:	79fb      	ldrb	r3, [r7, #7]
 800c9c4:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800c9c6:	e005      	b.n	800c9d4 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800c9c8:	68fb      	ldr	r3, [r7, #12]
 800c9ca:	3301      	adds	r3, #1
 800c9cc:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800c9ce:	7afb      	ldrb	r3, [r7, #11]
 800c9d0:	3b0a      	subs	r3, #10
 800c9d2:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800c9d4:	7afb      	ldrb	r3, [r7, #11]
 800c9d6:	2b09      	cmp	r3, #9
 800c9d8:	d8f6      	bhi.n	800c9c8 <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	b2db      	uxtb	r3, r3
 800c9de:	011b      	lsls	r3, r3, #4
 800c9e0:	b2da      	uxtb	r2, r3
 800c9e2:	7afb      	ldrb	r3, [r7, #11]
 800c9e4:	4313      	orrs	r3, r2
 800c9e6:	b2db      	uxtb	r3, r3
}
 800c9e8:	4618      	mov	r0, r3
 800c9ea:	3714      	adds	r7, #20
 800c9ec:	46bd      	mov	sp, r7
 800c9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9f2:	4770      	bx	lr

0800c9f4 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	4603      	mov	r3, r0
 800c9fc:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800c9fe:	79fb      	ldrb	r3, [r7, #7]
 800ca00:	091b      	lsrs	r3, r3, #4
 800ca02:	b2db      	uxtb	r3, r3
 800ca04:	461a      	mov	r2, r3
 800ca06:	0092      	lsls	r2, r2, #2
 800ca08:	4413      	add	r3, r2
 800ca0a:	005b      	lsls	r3, r3, #1
 800ca0c:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	f003 030f 	and.w	r3, r3, #15
 800ca14:	b2da      	uxtb	r2, r3
 800ca16:	7bfb      	ldrb	r3, [r7, #15]
 800ca18:	4413      	add	r3, r2
 800ca1a:	b2db      	uxtb	r3, r3
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3714      	adds	r7, #20
 800ca20:	46bd      	mov	sp, r7
 800ca22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca26:	4770      	bx	lr

0800ca28 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b08a      	sub	sp, #40	; 0x28
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d101      	bne.n	800ca3a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800ca36:	2301      	movs	r3, #1
 800ca38:	e07c      	b.n	800cb34 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ca40:	b2db      	uxtb	r3, r3
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d10c      	bne.n	800ca60 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2200      	movs	r2, #0
 800ca4a:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	699b      	ldr	r3, [r3, #24]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d102      	bne.n	800ca5a <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2202      	movs	r2, #2
 800ca58:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7f7 f9e0 	bl	8003e20 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	2203      	movs	r2, #3
 800ca64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800ca68:	6878      	ldr	r0, [r7, #4]
 800ca6a:	f000 f867 	bl	800cb3c <HAL_SD_InitCard>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d001      	beq.n	800ca78 <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800ca74:	2301      	movs	r3, #1
 800ca76:	e05d      	b.n	800cb34 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800ca78:	f107 0308 	add.w	r3, r7, #8
 800ca7c:	4619      	mov	r1, r3
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	f001 f8ce 	bl	800dc20 <HAL_SD_GetCardStatus>
 800ca84:	4603      	mov	r3, r0
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d001      	beq.n	800ca8e <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800ca8a:	2301      	movs	r3, #1
 800ca8c:	e052      	b.n	800cb34 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800ca8e:	7e3b      	ldrb	r3, [r7, #24]
 800ca90:	b2db      	uxtb	r3, r3
 800ca92:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800ca94:	7e7b      	ldrb	r3, [r7, #25]
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca9e:	2b01      	cmp	r3, #1
 800caa0:	d10a      	bne.n	800cab8 <HAL_SD_Init+0x90>
 800caa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d102      	bne.n	800caae <HAL_SD_Init+0x86>
 800caa8:	6a3b      	ldr	r3, [r7, #32]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d004      	beq.n	800cab8 <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cab4:	65da      	str	r2, [r3, #92]	; 0x5c
 800cab6:	e00b      	b.n	800cad0 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cabc:	2b01      	cmp	r3, #1
 800cabe:	d104      	bne.n	800caca <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cac6:	65da      	str	r2, [r3, #92]	; 0x5c
 800cac8:	e002      	b.n	800cad0 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2200      	movs	r2, #0
 800cace:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	4619      	mov	r1, r3
 800cad6:	6878      	ldr	r0, [r7, #4]
 800cad8:	f001 f984 	bl	800dde4 <HAL_SD_ConfigWideBusOperation>
 800cadc:	4603      	mov	r3, r0
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d001      	beq.n	800cae6 <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800cae2:	2301      	movs	r3, #1
 800cae4:	e026      	b.n	800cb34 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800cae6:	f7f7 fd3d 	bl	8004564 <HAL_GetTick>
 800caea:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800caec:	e011      	b.n	800cb12 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800caee:	f7f7 fd39 	bl	8004564 <HAL_GetTick>
 800caf2:	4602      	mov	r2, r0
 800caf4:	69fb      	ldr	r3, [r7, #28]
 800caf6:	1ad3      	subs	r3, r2, r3
 800caf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cafc:	d109      	bne.n	800cb12 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800cb04:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2201      	movs	r2, #1
 800cb0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800cb0e:	2303      	movs	r3, #3
 800cb10:	e010      	b.n	800cb34 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f001 fa10 	bl	800df38 <HAL_SD_GetCardState>
 800cb18:	4603      	mov	r3, r0
 800cb1a:	2b04      	cmp	r3, #4
 800cb1c:	d1e7      	bne.n	800caee <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2200      	movs	r2, #0
 800cb22:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2200      	movs	r2, #0
 800cb28:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	2201      	movs	r2, #1
 800cb2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800cb32:	2300      	movs	r3, #0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3728      	adds	r7, #40	; 0x28
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800cb3c:	b5b0      	push	{r4, r5, r7, lr}
 800cb3e:	b08e      	sub	sp, #56	; 0x38
 800cb40:	af04      	add	r7, sp, #16
 800cb42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800cb44:	2300      	movs	r3, #0
 800cb46:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800cb48:	2300      	movs	r3, #0
 800cb4a:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800cb50:	2300      	movs	r3, #0
 800cb52:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800cb54:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800cb58:	f7fe fc7a 	bl	800b450 <HAL_RCCEx_GetPeriphCLKFreq>
 800cb5c:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800cb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb60:	0a1b      	lsrs	r3, r3, #8
 800cb62:	4a40      	ldr	r2, [pc, #256]	; (800cc64 <HAL_SD_InitCard+0x128>)
 800cb64:	fba2 2303 	umull	r2, r3, r2, r3
 800cb68:	091b      	lsrs	r3, r3, #4
 800cb6a:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	699b      	ldr	r3, [r3, #24]
 800cb70:	2b02      	cmp	r3, #2
 800cb72:	d107      	bne.n	800cb84 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	f042 0210 	orr.w	r2, r2, #16
 800cb82:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681d      	ldr	r5, [r3, #0]
 800cb88:	466c      	mov	r4, sp
 800cb8a:	f107 0314 	add.w	r3, r7, #20
 800cb8e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800cb92:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800cb96:	f107 0308 	add.w	r3, r7, #8
 800cb9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800cb9c:	4628      	mov	r0, r5
 800cb9e:	f004 f9f5 	bl	8010f8c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	681b      	ldr	r3, [r3, #0]
 800cba6:	4618      	mov	r0, r3
 800cba8:	f004 fa38 	bl	801101c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	005b      	lsls	r3, r3, #1
 800cbb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cbb2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbb6:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800cbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d008      	beq.n	800cbd0 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800cbbe:	4a2a      	ldr	r2, [pc, #168]	; (800cc68 <HAL_SD_InitCard+0x12c>)
 800cbc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	4618      	mov	r0, r3
 800cbca:	f7f7 fcd7 	bl	800457c <HAL_Delay>
 800cbce:	e002      	b.n	800cbd6 <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800cbd0:	2002      	movs	r0, #2
 800cbd2:	f7f7 fcd3 	bl	800457c <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f001 fa8c 	bl	800e0f4 <SD_PowerON>
 800cbdc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cbde:	6a3b      	ldr	r3, [r7, #32]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d00b      	beq.n	800cbfc <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	2201      	movs	r2, #1
 800cbe8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cbf0:	6a3b      	ldr	r3, [r7, #32]
 800cbf2:	431a      	orrs	r2, r3
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e02e      	b.n	800cc5a <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800cbfc:	6878      	ldr	r0, [r7, #4]
 800cbfe:	f001 f9bb 	bl	800df78 <SD_InitCard>
 800cc02:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc04:	6a3b      	ldr	r3, [r7, #32]
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d00b      	beq.n	800cc22 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc16:	6a3b      	ldr	r3, [r7, #32]
 800cc18:	431a      	orrs	r2, r3
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc1e:	2301      	movs	r3, #1
 800cc20:	e01b      	b.n	800cc5a <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	f44f 7100 	mov.w	r1, #512	; 0x200
 800cc2a:	4618      	mov	r0, r3
 800cc2c:	f004 fa8c 	bl	8011148 <SDMMC_CmdBlockLength>
 800cc30:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800cc32:	6a3b      	ldr	r3, [r7, #32]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d00f      	beq.n	800cc58 <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	4a0b      	ldr	r2, [pc, #44]	; (800cc6c <HAL_SD_InitCard+0x130>)
 800cc3e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc44:	6a3b      	ldr	r3, [r7, #32]
 800cc46:	431a      	orrs	r2, r3
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800cc54:	2301      	movs	r3, #1
 800cc56:	e000      	b.n	800cc5a <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3728      	adds	r7, #40	; 0x28
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bdb0      	pop	{r4, r5, r7, pc}
 800cc62:	bf00      	nop
 800cc64:	014f8b59 	.word	0x014f8b59
 800cc68:	00012110 	.word	0x00012110
 800cc6c:	1fe00fff 	.word	0x1fe00fff

0800cc70 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b092      	sub	sp, #72	; 0x48
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	60f8      	str	r0, [r7, #12]
 800cc78:	60b9      	str	r1, [r7, #8]
 800cc7a:	607a      	str	r2, [r7, #4]
 800cc7c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cc7e:	f7f7 fc71 	bl	8004564 <HAL_GetTick>
 800cc82:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cc88:	68bb      	ldr	r3, [r7, #8]
 800cc8a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cc8c:	68bb      	ldr	r3, [r7, #8]
 800cc8e:	2b00      	cmp	r3, #0
 800cc90:	d107      	bne.n	800cca2 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cc92:	68fb      	ldr	r3, [r7, #12]
 800cc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cc96:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	e167      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	f040 815a 	bne.w	800cf64 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800ccb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccb8:	683b      	ldr	r3, [r7, #0]
 800ccba:	441a      	add	r2, r3
 800ccbc:	68fb      	ldr	r3, [r7, #12]
 800ccbe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d907      	bls.n	800ccd4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccc8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800ccd0:	2301      	movs	r3, #1
 800ccd2:	e14e      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2203      	movs	r2, #3
 800ccd8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	2200      	movs	r2, #0
 800cce2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce8:	2b01      	cmp	r3, #1
 800ccea:	d002      	beq.n	800ccf2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccee:	025b      	lsls	r3, r3, #9
 800ccf0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ccf2:	f04f 33ff 	mov.w	r3, #4294967295
 800ccf6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	025b      	lsls	r3, r3, #9
 800ccfc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800ccfe:	2390      	movs	r3, #144	; 0x90
 800cd00:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800cd02:	2302      	movs	r3, #2
 800cd04:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800cd06:	2300      	movs	r3, #0
 800cd08:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800cd0a:	2300      	movs	r3, #0
 800cd0c:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f107 0214 	add.w	r2, r7, #20
 800cd16:	4611      	mov	r1, r2
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f004 f9e9 	bl	80110f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800cd1e:	68fb      	ldr	r3, [r7, #12]
 800cd20:	681b      	ldr	r3, [r3, #0]
 800cd22:	68da      	ldr	r2, [r3, #12]
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd2c:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	2b01      	cmp	r3, #1
 800cd32:	d90a      	bls.n	800cd4a <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	2202      	movs	r2, #2
 800cd38:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd40:	4618      	mov	r0, r3
 800cd42:	f004 fa47 	bl	80111d4 <SDMMC_CmdReadMultiBlock>
 800cd46:	6478      	str	r0, [r7, #68]	; 0x44
 800cd48:	e009      	b.n	800cd5e <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2201      	movs	r2, #1
 800cd4e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800cd56:	4618      	mov	r0, r3
 800cd58:	f004 fa19 	bl	801118e <SDMMC_CmdReadSingleBlock>
 800cd5c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800cd5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d012      	beq.n	800cd8a <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cd64:	68fb      	ldr	r3, [r7, #12]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	4a84      	ldr	r2, [pc, #528]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800cd6a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd72:	431a      	orrs	r2, r3
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2201      	movs	r2, #1
 800cd7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	2200      	movs	r2, #0
 800cd84:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cd86:	2301      	movs	r3, #1
 800cd88:	e0f3      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800cd8a:	69bb      	ldr	r3, [r7, #24]
 800cd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800cd8e:	e058      	b.n	800ce42 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d033      	beq.n	800ce06 <HAL_SD_ReadBlocks+0x196>
 800cd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cda0:	2b1f      	cmp	r3, #31
 800cda2:	d930      	bls.n	800ce06 <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800cda4:	2300      	movs	r3, #0
 800cda6:	643b      	str	r3, [r7, #64]	; 0x40
 800cda8:	e027      	b.n	800cdfa <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	4618      	mov	r0, r3
 800cdb0:	f004 f916 	bl	8010fe0 <SDMMC_ReadFIFO>
 800cdb4:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	b2da      	uxtb	r2, r3
 800cdba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdbc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdc0:	3301      	adds	r3, #1
 800cdc2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800cdc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdc6:	0a1b      	lsrs	r3, r3, #8
 800cdc8:	b2da      	uxtb	r2, r3
 800cdca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdcc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdd0:	3301      	adds	r3, #1
 800cdd2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800cdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd6:	0c1b      	lsrs	r3, r3, #16
 800cdd8:	b2da      	uxtb	r2, r3
 800cdda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cddc:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cde0:	3301      	adds	r3, #1
 800cde2:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800cde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cde6:	0e1b      	lsrs	r3, r3, #24
 800cde8:	b2da      	uxtb	r2, r3
 800cdea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdec:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800cdee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdf0:	3301      	adds	r3, #1
 800cdf2:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800cdf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdf6:	3301      	adds	r3, #1
 800cdf8:	643b      	str	r3, [r7, #64]	; 0x40
 800cdfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cdfc:	2b07      	cmp	r3, #7
 800cdfe:	d9d4      	bls.n	800cdaa <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800ce00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce02:	3b20      	subs	r3, #32
 800ce04:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800ce06:	f7f7 fbad 	bl	8004564 <HAL_GetTick>
 800ce0a:	4602      	mov	r2, r0
 800ce0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce0e:	1ad3      	subs	r3, r2, r3
 800ce10:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d902      	bls.n	800ce1c <HAL_SD_ReadBlocks+0x1ac>
 800ce16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d112      	bne.n	800ce42 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	4a56      	ldr	r2, [pc, #344]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800ce22:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800ce24:	68fb      	ldr	r3, [r7, #12]
 800ce26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800ce2c:	68fb      	ldr	r3, [r7, #12]
 800ce2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	2201      	movs	r2, #1
 800ce34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800ce38:	68fb      	ldr	r3, [r7, #12]
 800ce3a:	2200      	movs	r2, #0
 800ce3c:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800ce3e:	2303      	movs	r3, #3
 800ce40:	e097      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce48:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d09f      	beq.n	800cd90 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	68da      	ldr	r2, [r3, #12]
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ce5e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800ce60:	68fb      	ldr	r3, [r7, #12]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d022      	beq.n	800ceb4 <HAL_SD_ReadBlocks+0x244>
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	2b01      	cmp	r3, #1
 800ce72:	d91f      	bls.n	800ceb4 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800ce74:	68fb      	ldr	r3, [r7, #12]
 800ce76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ce78:	2b03      	cmp	r3, #3
 800ce7a:	d01b      	beq.n	800ceb4 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	4618      	mov	r0, r3
 800ce82:	f004 fa11 	bl	80112a8 <SDMMC_CmdStopTransfer>
 800ce86:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800ce88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce8a:	2b00      	cmp	r3, #0
 800ce8c:	d012      	beq.n	800ceb4 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4a3a      	ldr	r2, [pc, #232]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800ce94:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800ce96:	68fb      	ldr	r3, [r7, #12]
 800ce98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ce9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ce9c:	431a      	orrs	r2, r3
 800ce9e:	68fb      	ldr	r3, [r7, #12]
 800cea0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800cea2:	68fb      	ldr	r3, [r7, #12]
 800cea4:	2201      	movs	r2, #1
 800cea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	2200      	movs	r2, #0
 800ceae:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800ceb0:	2301      	movs	r3, #1
 800ceb2:	e05e      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceba:	f003 0308 	and.w	r3, r3, #8
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d012      	beq.n	800cee8 <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cec2:	68fb      	ldr	r3, [r7, #12]
 800cec4:	681b      	ldr	r3, [r3, #0]
 800cec6:	4a2d      	ldr	r2, [pc, #180]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800cec8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800ceca:	68fb      	ldr	r3, [r7, #12]
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	f043 0208 	orr.w	r2, r3, #8
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800ced6:	68fb      	ldr	r3, [r7, #12]
 800ced8:	2201      	movs	r2, #1
 800ceda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cede:	68fb      	ldr	r3, [r7, #12]
 800cee0:	2200      	movs	r2, #0
 800cee2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cee4:	2301      	movs	r3, #1
 800cee6:	e044      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ceee:	f003 0302 	and.w	r3, r3, #2
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d012      	beq.n	800cf1c <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cef6:	68fb      	ldr	r3, [r7, #12]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	4a20      	ldr	r2, [pc, #128]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800cefe:	68fb      	ldr	r3, [r7, #12]
 800cf00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf02:	f043 0202 	orr.w	r2, r3, #2
 800cf06:	68fb      	ldr	r3, [r7, #12]
 800cf08:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	2201      	movs	r2, #1
 800cf0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf12:	68fb      	ldr	r3, [r7, #12]
 800cf14:	2200      	movs	r2, #0
 800cf16:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf18:	2301      	movs	r3, #1
 800cf1a:	e02a      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cf22:	f003 0320 	and.w	r3, r3, #32
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d012      	beq.n	800cf50 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	4a13      	ldr	r2, [pc, #76]	; (800cf7c <HAL_SD_ReadBlocks+0x30c>)
 800cf30:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf36:	f043 0220 	orr.w	r2, r3, #32
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	2201      	movs	r2, #1
 800cf42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800cf46:	68fb      	ldr	r3, [r7, #12]
 800cf48:	2200      	movs	r2, #0
 800cf4a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800cf4c:	2301      	movs	r3, #1
 800cf4e:	e010      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	4a0a      	ldr	r2, [pc, #40]	; (800cf80 <HAL_SD_ReadBlocks+0x310>)
 800cf56:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	2201      	movs	r2, #1
 800cf5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800cf60:	2300      	movs	r3, #0
 800cf62:	e006      	b.n	800cf72 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf68:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cf70:	2301      	movs	r3, #1
  }
}
 800cf72:	4618      	mov	r0, r3
 800cf74:	3748      	adds	r7, #72	; 0x48
 800cf76:	46bd      	mov	sp, r7
 800cf78:	bd80      	pop	{r7, pc}
 800cf7a:	bf00      	nop
 800cf7c:	1fe00fff 	.word	0x1fe00fff
 800cf80:	18000f3a 	.word	0x18000f3a

0800cf84 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800cf84:	b580      	push	{r7, lr}
 800cf86:	b092      	sub	sp, #72	; 0x48
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	60f8      	str	r0, [r7, #12]
 800cf8c:	60b9      	str	r1, [r7, #8]
 800cf8e:	607a      	str	r2, [r7, #4]
 800cf90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800cf92:	f7f7 fae7 	bl	8004564 <HAL_GetTick>
 800cf96:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d107      	bne.n	800cfb6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfaa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800cfae:	68fb      	ldr	r3, [r7, #12]
 800cfb0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800cfb2:	2301      	movs	r3, #1
 800cfb4:	e16b      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	2b01      	cmp	r3, #1
 800cfc0:	f040 815e 	bne.w	800d280 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800cfca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800cfcc:	683b      	ldr	r3, [r7, #0]
 800cfce:	441a      	add	r2, r3
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d907      	bls.n	800cfe8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfdc:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	e152      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2203      	movs	r2, #3
 800cfec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800cff0:	68fb      	ldr	r3, [r7, #12]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2200      	movs	r2, #0
 800cff6:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800cff8:	68fb      	ldr	r3, [r7, #12]
 800cffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d002      	beq.n	800d006 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d000:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d002:	025b      	lsls	r3, r3, #9
 800d004:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d006:	f04f 33ff 	mov.w	r3, #4294967295
 800d00a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	025b      	lsls	r3, r3, #9
 800d010:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d012:	2390      	movs	r3, #144	; 0x90
 800d014:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d016:	2300      	movs	r3, #0
 800d018:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d01a:	2300      	movs	r3, #0
 800d01c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d01e:	2300      	movs	r3, #0
 800d020:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	f107 0218 	add.w	r2, r7, #24
 800d02a:	4611      	mov	r1, r2
 800d02c:	4618      	mov	r0, r3
 800d02e:	f004 f85f 	bl	80110f0 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	68da      	ldr	r2, [r3, #12]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d040:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	2b01      	cmp	r3, #1
 800d046:	d90a      	bls.n	800d05e <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	2220      	movs	r2, #32
 800d04c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d054:	4618      	mov	r0, r3
 800d056:	f004 f903 	bl	8011260 <SDMMC_CmdWriteMultiBlock>
 800d05a:	6478      	str	r0, [r7, #68]	; 0x44
 800d05c:	e009      	b.n	800d072 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d05e:	68fb      	ldr	r3, [r7, #12]
 800d060:	2210      	movs	r2, #16
 800d062:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	681b      	ldr	r3, [r3, #0]
 800d068:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d06a:	4618      	mov	r0, r3
 800d06c:	f004 f8d5 	bl	801121a <SDMMC_CmdWriteSingleBlock>
 800d070:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d072:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d074:	2b00      	cmp	r3, #0
 800d076:	d012      	beq.n	800d09e <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a86      	ldr	r2, [pc, #536]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d07e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d080:	68fb      	ldr	r3, [r7, #12]
 800d082:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d084:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d086:	431a      	orrs	r2, r3
 800d088:	68fb      	ldr	r3, [r7, #12]
 800d08a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	2201      	movs	r2, #1
 800d090:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	2200      	movs	r2, #0
 800d098:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d09a:	2301      	movs	r3, #1
 800d09c:	e0f7      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d09e:	69fb      	ldr	r3, [r7, #28]
 800d0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d0a2:	e05c      	b.n	800d15e <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d037      	beq.n	800d122 <HAL_SD_WriteBlocks+0x19e>
 800d0b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d0b4:	2b1f      	cmp	r3, #31
 800d0b6:	d934      	bls.n	800d122 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d0b8:	2300      	movs	r3, #0
 800d0ba:	643b      	str	r3, [r7, #64]	; 0x40
 800d0bc:	e02b      	b.n	800d116 <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c0:	781b      	ldrb	r3, [r3, #0]
 800d0c2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0c6:	3301      	adds	r3, #1
 800d0c8:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0cc:	781b      	ldrb	r3, [r3, #0]
 800d0ce:	021a      	lsls	r2, r3, #8
 800d0d0:	697b      	ldr	r3, [r7, #20]
 800d0d2:	4313      	orrs	r3, r2
 800d0d4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0d8:	3301      	adds	r3, #1
 800d0da:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d0dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0de:	781b      	ldrb	r3, [r3, #0]
 800d0e0:	041a      	lsls	r2, r3, #16
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	4313      	orrs	r3, r2
 800d0e6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0ea:	3301      	adds	r3, #1
 800d0ec:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d0ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0f0:	781b      	ldrb	r3, [r3, #0]
 800d0f2:	061a      	lsls	r2, r3, #24
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	4313      	orrs	r3, r2
 800d0f8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d0fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d0fc:	3301      	adds	r3, #1
 800d0fe:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	f107 0214 	add.w	r2, r7, #20
 800d108:	4611      	mov	r1, r2
 800d10a:	4618      	mov	r0, r3
 800d10c:	f003 ff75 	bl	8010ffa <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d112:	3301      	adds	r3, #1
 800d114:	643b      	str	r3, [r7, #64]	; 0x40
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	2b07      	cmp	r3, #7
 800d11a:	d9d0      	bls.n	800d0be <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d11c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11e:	3b20      	subs	r3, #32
 800d120:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d122:	f7f7 fa1f 	bl	8004564 <HAL_GetTick>
 800d126:	4602      	mov	r2, r0
 800d128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d12a:	1ad3      	subs	r3, r2, r3
 800d12c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d12e:	429a      	cmp	r2, r3
 800d130:	d902      	bls.n	800d138 <HAL_SD_WriteBlocks+0x1b4>
 800d132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d134:	2b00      	cmp	r3, #0
 800d136:	d112      	bne.n	800d15e <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	4a56      	ldr	r2, [pc, #344]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d13e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d144:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d146:	431a      	orrs	r2, r3
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2201      	movs	r2, #1
 800d150:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	2200      	movs	r2, #0
 800d158:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d15a:	2303      	movs	r3, #3
 800d15c:	e097      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	681b      	ldr	r3, [r3, #0]
 800d162:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d164:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d09b      	beq.n	800d0a4 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d16c:	68fb      	ldr	r3, [r7, #12]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	68da      	ldr	r2, [r3, #12]
 800d172:	68fb      	ldr	r3, [r7, #12]
 800d174:	681b      	ldr	r3, [r3, #0]
 800d176:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d17a:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d182:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d186:	2b00      	cmp	r3, #0
 800d188:	d022      	beq.n	800d1d0 <HAL_SD_WriteBlocks+0x24c>
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	2b01      	cmp	r3, #1
 800d18e:	d91f      	bls.n	800d1d0 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d194:	2b03      	cmp	r3, #3
 800d196:	d01b      	beq.n	800d1d0 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f004 f883 	bl	80112a8 <SDMMC_CmdStopTransfer>
 800d1a2:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d1a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d012      	beq.n	800d1d0 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1aa:	68fb      	ldr	r3, [r7, #12]
 800d1ac:	681b      	ldr	r3, [r3, #0]
 800d1ae:	4a3a      	ldr	r2, [pc, #232]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d1b0:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1b8:	431a      	orrs	r2, r3
 800d1ba:	68fb      	ldr	r3, [r7, #12]
 800d1bc:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	2201      	movs	r2, #1
 800d1c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2200      	movs	r2, #0
 800d1ca:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	e05e      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1d6:	f003 0308 	and.w	r3, r3, #8
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d012      	beq.n	800d204 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	4a2d      	ldr	r2, [pc, #180]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d1e4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
 800d1e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1ea:	f043 0208 	orr.w	r2, r3, #8
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	2201      	movs	r2, #1
 800d1f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d1fa:	68fb      	ldr	r3, [r7, #12]
 800d1fc:	2200      	movs	r2, #0
 800d1fe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d200:	2301      	movs	r3, #1
 800d202:	e044      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d204:	68fb      	ldr	r3, [r7, #12]
 800d206:	681b      	ldr	r3, [r3, #0]
 800d208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d20a:	f003 0302 	and.w	r3, r3, #2
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d012      	beq.n	800d238 <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	4a20      	ldr	r2, [pc, #128]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d218:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d21e:	f043 0202 	orr.w	r2, r3, #2
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	2201      	movs	r2, #1
 800d22a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d22e:	68fb      	ldr	r3, [r7, #12]
 800d230:	2200      	movs	r2, #0
 800d232:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d234:	2301      	movs	r3, #1
 800d236:	e02a      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800d238:	68fb      	ldr	r3, [r7, #12]
 800d23a:	681b      	ldr	r3, [r3, #0]
 800d23c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d23e:	f003 0310 	and.w	r3, r3, #16
 800d242:	2b00      	cmp	r3, #0
 800d244:	d012      	beq.n	800d26c <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	4a13      	ldr	r2, [pc, #76]	; (800d298 <HAL_SD_WriteBlocks+0x314>)
 800d24c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d252:	f043 0210 	orr.w	r2, r3, #16
 800d256:	68fb      	ldr	r3, [r7, #12]
 800d258:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	2201      	movs	r2, #1
 800d25e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	2200      	movs	r2, #0
 800d266:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d268:	2301      	movs	r3, #1
 800d26a:	e010      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	681b      	ldr	r3, [r3, #0]
 800d270:	4a0a      	ldr	r2, [pc, #40]	; (800d29c <HAL_SD_WriteBlocks+0x318>)
 800d272:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2201      	movs	r2, #1
 800d278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d27c:	2300      	movs	r3, #0
 800d27e:	e006      	b.n	800d28e <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d284:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d288:	68fb      	ldr	r3, [r7, #12]
 800d28a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d28c:	2301      	movs	r3, #1
  }
}
 800d28e:	4618      	mov	r0, r3
 800d290:	3748      	adds	r7, #72	; 0x48
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	1fe00fff 	.word	0x1fe00fff
 800d29c:	18000f3a 	.word	0x18000f3a

0800d2a0 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b08c      	sub	sp, #48	; 0x30
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	60f8      	str	r0, [r7, #12]
 800d2a8:	60b9      	str	r1, [r7, #8]
 800d2aa:	607a      	str	r2, [r7, #4]
 800d2ac:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d2b2:	68bb      	ldr	r3, [r7, #8]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d107      	bne.n	800d2c8 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d2b8:	68fb      	ldr	r3, [r7, #12]
 800d2ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2bc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d2c4:	2301      	movs	r3, #1
 800d2c6:	e08d      	b.n	800d3e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	2b01      	cmp	r3, #1
 800d2d2:	f040 8086 	bne.w	800d3e2 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2200      	movs	r2, #0
 800d2da:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d2dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d2de:	683b      	ldr	r3, [r7, #0]
 800d2e0:	441a      	add	r2, r3
 800d2e2:	68fb      	ldr	r3, [r7, #12]
 800d2e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d907      	bls.n	800d2fa <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d2ee:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e074      	b.n	800d3e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	2203      	movs	r2, #3
 800d2fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	2200      	movs	r2, #0
 800d308:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	68ba      	ldr	r2, [r7, #8]
 800d30e:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d310:	683b      	ldr	r3, [r7, #0]
 800d312:	025a      	lsls	r2, r3, #9
 800d314:	68fb      	ldr	r3, [r7, #12]
 800d316:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d002      	beq.n	800d326 <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800d320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d322:	025b      	lsls	r3, r3, #9
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d326:	f04f 33ff 	mov.w	r3, #4294967295
 800d32a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d32c:	683b      	ldr	r3, [r7, #0]
 800d32e:	025b      	lsls	r3, r3, #9
 800d330:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d332:	2390      	movs	r3, #144	; 0x90
 800d334:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d336:	2302      	movs	r3, #2
 800d338:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d33a:	2300      	movs	r3, #0
 800d33c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d33e:	2300      	movs	r3, #0
 800d340:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f107 0210 	add.w	r2, r7, #16
 800d34a:	4611      	mov	r1, r2
 800d34c:	4618      	mov	r0, r3
 800d34e:	f003 fecf 	bl	80110f0 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	68da      	ldr	r2, [r3, #12]
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d360:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	681b      	ldr	r3, [r3, #0]
 800d36e:	2201      	movs	r2, #1
 800d370:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b01      	cmp	r3, #1
 800d376:	d90a      	bls.n	800d38e <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d378:	68fb      	ldr	r3, [r7, #12]
 800d37a:	2282      	movs	r2, #130	; 0x82
 800d37c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d37e:	68fb      	ldr	r3, [r7, #12]
 800d380:	681b      	ldr	r3, [r3, #0]
 800d382:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d384:	4618      	mov	r0, r3
 800d386:	f003 ff25 	bl	80111d4 <SDMMC_CmdReadMultiBlock>
 800d38a:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d38c:	e009      	b.n	800d3a2 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d38e:	68fb      	ldr	r3, [r7, #12]
 800d390:	2281      	movs	r2, #129	; 0x81
 800d392:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d394:	68fb      	ldr	r3, [r7, #12]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d39a:	4618      	mov	r0, r3
 800d39c:	f003 fef7 	bl	801118e <SDMMC_CmdReadSingleBlock>
 800d3a0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d3a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d012      	beq.n	800d3ce <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	4a0f      	ldr	r2, [pc, #60]	; (800d3ec <HAL_SD_ReadBlocks_DMA+0x14c>)
 800d3ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d3b0:	68fb      	ldr	r3, [r7, #12]
 800d3b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3b6:	431a      	orrs	r2, r3
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2201      	movs	r2, #1
 800d3c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d3ca:	2301      	movs	r3, #1
 800d3cc:	e00a      	b.n	800d3e4 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800d3dc:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800d3de:	2300      	movs	r3, #0
 800d3e0:	e000      	b.n	800d3e4 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d3e2:	2302      	movs	r3, #2
  }
}
 800d3e4:	4618      	mov	r0, r3
 800d3e6:	3730      	adds	r7, #48	; 0x30
 800d3e8:	46bd      	mov	sp, r7
 800d3ea:	bd80      	pop	{r7, pc}
 800d3ec:	1fe00fff 	.word	0x1fe00fff

0800d3f0 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b08c      	sub	sp, #48	; 0x30
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	60f8      	str	r0, [r7, #12]
 800d3f8:	60b9      	str	r1, [r7, #8]
 800d3fa:	607a      	str	r2, [r7, #4]
 800d3fc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800d402:	68bb      	ldr	r3, [r7, #8]
 800d404:	2b00      	cmp	r3, #0
 800d406:	d107      	bne.n	800d418 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d40c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d414:	2301      	movs	r3, #1
 800d416:	e08d      	b.n	800d534 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d41e:	b2db      	uxtb	r3, r3
 800d420:	2b01      	cmp	r3, #1
 800d422:	f040 8086 	bne.w	800d532 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2200      	movs	r2, #0
 800d42a:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d42c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d42e:	683b      	ldr	r3, [r7, #0]
 800d430:	441a      	add	r2, r3
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d436:	429a      	cmp	r2, r3
 800d438:	d907      	bls.n	800d44a <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d43e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d446:	2301      	movs	r3, #1
 800d448:	e074      	b.n	800d534 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	2203      	movs	r2, #3
 800d44e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	2200      	movs	r2, #0
 800d458:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	68ba      	ldr	r2, [r7, #8]
 800d45e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800d460:	683b      	ldr	r3, [r7, #0]
 800d462:	025a      	lsls	r2, r3, #9
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d002      	beq.n	800d476 <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800d470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d472:	025b      	lsls	r3, r3, #9
 800d474:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d476:	f04f 33ff 	mov.w	r3, #4294967295
 800d47a:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800d47c:	683b      	ldr	r3, [r7, #0]
 800d47e:	025b      	lsls	r3, r3, #9
 800d480:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d482:	2390      	movs	r3, #144	; 0x90
 800d484:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d486:	2300      	movs	r3, #0
 800d488:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d48a:	2300      	movs	r3, #0
 800d48c:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d48e:	2300      	movs	r3, #0
 800d490:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	f107 0210 	add.w	r2, r7, #16
 800d49a:	4611      	mov	r1, r2
 800d49c:	4618      	mov	r0, r3
 800d49e:	f003 fe27 	bl	80110f0 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	68da      	ldr	r2, [r3, #12]
 800d4a8:	68fb      	ldr	r3, [r7, #12]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d4b0:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	681b      	ldr	r3, [r3, #0]
 800d4be:	2201      	movs	r2, #1
 800d4c0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d4c2:	683b      	ldr	r3, [r7, #0]
 800d4c4:	2b01      	cmp	r3, #1
 800d4c6:	d90a      	bls.n	800d4de <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	22a0      	movs	r2, #160	; 0xa0
 800d4cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d4ce:	68fb      	ldr	r3, [r7, #12]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4d4:	4618      	mov	r0, r3
 800d4d6:	f003 fec3 	bl	8011260 <SDMMC_CmdWriteMultiBlock>
 800d4da:	62f8      	str	r0, [r7, #44]	; 0x2c
 800d4dc:	e009      	b.n	800d4f2 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	2290      	movs	r2, #144	; 0x90
 800d4e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d4ea:	4618      	mov	r0, r3
 800d4ec:	f003 fe95 	bl	801121a <SDMMC_CmdWriteSingleBlock>
 800d4f0:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d4f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d012      	beq.n	800d51e <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	4a0f      	ldr	r2, [pc, #60]	; (800d53c <HAL_SD_WriteBlocks_DMA+0x14c>)
 800d4fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d504:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d506:	431a      	orrs	r2, r3
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	2201      	movs	r2, #1
 800d510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	2200      	movs	r2, #0
 800d518:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d51a:	2301      	movs	r3, #1
 800d51c:	e00a      	b.n	800d534 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	681b      	ldr	r3, [r3, #0]
 800d522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800d52c:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800d52e:	2300      	movs	r3, #0
 800d530:	e000      	b.n	800d534 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800d532:	2302      	movs	r3, #2
  }
}
 800d534:	4618      	mov	r0, r3
 800d536:	3730      	adds	r7, #48	; 0x30
 800d538:	46bd      	mov	sp, r7
 800d53a:	bd80      	pop	{r7, pc}
 800d53c:	1fe00fff 	.word	0x1fe00fff

0800d540 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800d540:	b580      	push	{r7, lr}
 800d542:	b084      	sub	sp, #16
 800d544:	af00      	add	r7, sp, #0
 800d546:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d54c:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681b      	ldr	r3, [r3, #0]
 800d552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d554:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d008      	beq.n	800d56e <HAL_SD_IRQHandler+0x2e>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f003 0308 	and.w	r3, r3, #8
 800d562:	2b00      	cmp	r3, #0
 800d564:	d003      	beq.n	800d56e <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800d566:	6878      	ldr	r0, [r7, #4]
 800d568:	f001 f92a 	bl	800e7c0 <SD_Read_IT>
 800d56c:	e19a      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d574:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d578:	2b00      	cmp	r3, #0
 800d57a:	f000 80ac 	beq.w	800d6d6 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800d57e:	687b      	ldr	r3, [r7, #4]
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d586:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681a      	ldr	r2, [r3, #0]
 800d592:	4b9d      	ldr	r3, [pc, #628]	; (800d808 <HAL_SD_IRQHandler+0x2c8>)
 800d594:	400b      	ands	r3, r1
 800d596:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d5a6:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	68da      	ldr	r2, [r3, #12]
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d5b6:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	f003 0308 	and.w	r3, r3, #8
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d038      	beq.n	800d634 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	f003 0302 	and.w	r3, r3, #2
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d104      	bne.n	800d5d6 <HAL_SD_IRQHandler+0x96>
 800d5cc:	68fb      	ldr	r3, [r7, #12]
 800d5ce:	f003 0320 	and.w	r3, r3, #32
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d011      	beq.n	800d5fa <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	4618      	mov	r0, r3
 800d5dc:	f003 fe64 	bl	80112a8 <SDMMC_CmdStopTransfer>
 800d5e0:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d5e2:	68bb      	ldr	r3, [r7, #8]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d008      	beq.n	800d5fa <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800d5f4:	6878      	ldr	r0, [r7, #4]
 800d5f6:	f000 f959 	bl	800d8ac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	4a83      	ldr	r2, [pc, #524]	; (800d80c <HAL_SD_IRQHandler+0x2cc>)
 800d600:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	2201      	movs	r2, #1
 800d606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	2200      	movs	r2, #0
 800d60e:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	f003 0301 	and.w	r3, r3, #1
 800d616:	2b00      	cmp	r3, #0
 800d618:	d104      	bne.n	800d624 <HAL_SD_IRQHandler+0xe4>
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	f003 0302 	and.w	r3, r3, #2
 800d620:	2b00      	cmp	r3, #0
 800d622:	d003      	beq.n	800d62c <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800d624:	6878      	ldr	r0, [r7, #4]
 800d626:	f005 fe55 	bl	80132d4 <HAL_SD_RxCpltCallback>
 800d62a:	e13b      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800d62c:	6878      	ldr	r0, [r7, #4]
 800d62e:	f005 fe47 	bl	80132c0 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800d632:	e137      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d634:	68fb      	ldr	r3, [r7, #12]
 800d636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d63a:	2b00      	cmp	r3, #0
 800d63c:	f000 8132 	beq.w	800d8a4 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	2200      	movs	r2, #0
 800d646:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	681b      	ldr	r3, [r3, #0]
 800d64c:	2200      	movs	r2, #0
 800d64e:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	2200      	movs	r2, #0
 800d656:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d658:	68fb      	ldr	r3, [r7, #12]
 800d65a:	f003 0302 	and.w	r3, r3, #2
 800d65e:	2b00      	cmp	r3, #0
 800d660:	d104      	bne.n	800d66c <HAL_SD_IRQHandler+0x12c>
 800d662:	68fb      	ldr	r3, [r7, #12]
 800d664:	f003 0320 	and.w	r3, r3, #32
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d011      	beq.n	800d690 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4618      	mov	r0, r3
 800d672:	f003 fe19 	bl	80112a8 <SDMMC_CmdStopTransfer>
 800d676:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800d678:	68bb      	ldr	r3, [r7, #8]
 800d67a:	2b00      	cmp	r3, #0
 800d67c:	d008      	beq.n	800d690 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d682:	68bb      	ldr	r3, [r7, #8]
 800d684:	431a      	orrs	r2, r3
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800d68a:	6878      	ldr	r0, [r7, #4]
 800d68c:	f000 f90e 	bl	800d8ac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2201      	movs	r2, #1
 800d694:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	f003 0310 	and.w	r3, r3, #16
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d104      	bne.n	800d6b2 <HAL_SD_IRQHandler+0x172>
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	f003 0320 	and.w	r3, r3, #32
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d002      	beq.n	800d6b8 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800d6b2:	6878      	ldr	r0, [r7, #4]
 800d6b4:	f005 fe04 	bl	80132c0 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f003 0301 	and.w	r3, r3, #1
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d105      	bne.n	800d6ce <HAL_SD_IRQHandler+0x18e>
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	f003 0302 	and.w	r3, r3, #2
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	f000 80eb 	beq.w	800d8a4 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800d6ce:	6878      	ldr	r0, [r7, #4]
 800d6d0:	f005 fe00 	bl	80132d4 <HAL_SD_RxCpltCallback>
}
 800d6d4:	e0e6      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d008      	beq.n	800d6f6 <HAL_SD_IRQHandler+0x1b6>
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	f003 0308 	and.w	r3, r3, #8
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d003      	beq.n	800d6f6 <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f001 f8ac 	bl	800e84c <SD_Write_IT>
 800d6f4:	e0d6      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fc:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800d700:	2b00      	cmp	r3, #0
 800d702:	f000 80a2 	beq.w	800d84a <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d70c:	f003 0302 	and.w	r3, r3, #2
 800d710:	2b00      	cmp	r3, #0
 800d712:	d005      	beq.n	800d720 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d718:	f043 0202 	orr.w	r2, r3, #2
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d726:	f003 0308 	and.w	r3, r3, #8
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d005      	beq.n	800d73a <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d732:	f043 0208 	orr.w	r2, r3, #8
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d740:	f003 0320 	and.w	r3, r3, #32
 800d744:	2b00      	cmp	r3, #0
 800d746:	d005      	beq.n	800d754 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d748:	687b      	ldr	r3, [r7, #4]
 800d74a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d74c:	f043 0220 	orr.w	r2, r3, #32
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d75a:	f003 0310 	and.w	r3, r3, #16
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d005      	beq.n	800d76e <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d766:	f043 0210 	orr.w	r2, r3, #16
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	4a26      	ldr	r2, [pc, #152]	; (800d80c <HAL_SD_IRQHandler+0x2cc>)
 800d774:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	681b      	ldr	r3, [r3, #0]
 800d77a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800d784:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	68da      	ldr	r2, [r3, #12]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d794:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	681b      	ldr	r3, [r3, #0]
 800d79a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800d7a4:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	68da      	ldr	r2, [r3, #12]
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800d7b4:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	681b      	ldr	r3, [r3, #0]
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	f003 fd74 	bl	80112a8 <SDMMC_CmdStopTransfer>
 800d7c0:	4602      	mov	r2, r0
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7c6:	431a      	orrs	r2, r3
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	68da      	ldr	r2, [r3, #12]
 800d7d2:	687b      	ldr	r3, [r7, #4]
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d7da:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d7e4:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	f003 0308 	and.w	r3, r3, #8
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d00f      	beq.n	800d810 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2201      	movs	r2, #1
 800d7f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7f8:	687b      	ldr	r3, [r7, #4]
 800d7fa:	2200      	movs	r2, #0
 800d7fc:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800d7fe:	6878      	ldr	r0, [r7, #4]
 800d800:	f000 f854 	bl	800d8ac <HAL_SD_ErrorCallback>
}
 800d804:	e04e      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
 800d806:	bf00      	nop
 800d808:	ffff3ec5 	.word	0xffff3ec5
 800d80c:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d816:	2b00      	cmp	r3, #0
 800d818:	d044      	beq.n	800d8a4 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81e:	2b00      	cmp	r3, #0
 800d820:	d040      	beq.n	800d8a4 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	681b      	ldr	r3, [r3, #0]
 800d826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	681b      	ldr	r3, [r3, #0]
 800d82c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800d830:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	2200      	movs	r2, #0
 800d838:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800d842:	6878      	ldr	r0, [r7, #4]
 800d844:	f000 f832 	bl	800d8ac <HAL_SD_ErrorCallback>
}
 800d848:	e02c      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	681b      	ldr	r3, [r3, #0]
 800d84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d850:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d854:	2b00      	cmp	r3, #0
 800d856:	d025      	beq.n	800d8a4 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d860:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d868:	f003 0304 	and.w	r3, r3, #4
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10c      	bne.n	800d88a <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	f003 0320 	and.w	r3, r3, #32
 800d876:	2b00      	cmp	r3, #0
 800d878:	d003      	beq.n	800d882 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800d87a:	6878      	ldr	r0, [r7, #4]
 800d87c:	f001 f84e 	bl	800e91c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800d880:	e010      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800d882:	6878      	ldr	r0, [r7, #4]
 800d884:	f001 f836 	bl	800e8f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800d888:	e00c      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800d88a:	68fb      	ldr	r3, [r7, #12]
 800d88c:	f003 0320 	and.w	r3, r3, #32
 800d890:	2b00      	cmp	r3, #0
 800d892:	d003      	beq.n	800d89c <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800d894:	6878      	ldr	r0, [r7, #4]
 800d896:	f001 f837 	bl	800e908 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800d89a:	e003      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f001 f81f 	bl	800e8e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800d8a2:	e7ff      	b.n	800d8a4 <HAL_SD_IRQHandler+0x364>
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800d8ac:	b480      	push	{r7}
 800d8ae:	b083      	sub	sp, #12
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800d8b4:	bf00      	nop
 800d8b6:	370c      	adds	r7, #12
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8be:	4770      	bx	lr

0800d8c0 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800d8c0:	b480      	push	{r7}
 800d8c2:	b083      	sub	sp, #12
 800d8c4:	af00      	add	r7, sp, #0
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800d8ca:	bf00      	nop
 800d8cc:	370c      	adds	r7, #12
 800d8ce:	46bd      	mov	sp, r7
 800d8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d4:	4770      	bx	lr
	...

0800d8d8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800d8d8:	b480      	push	{r7}
 800d8da:	b083      	sub	sp, #12
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8e6:	0f9b      	lsrs	r3, r3, #30
 800d8e8:	b2da      	uxtb	r2, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d8f2:	0e9b      	lsrs	r3, r3, #26
 800d8f4:	b2db      	uxtb	r3, r3
 800d8f6:	f003 030f 	and.w	r3, r3, #15
 800d8fa:	b2da      	uxtb	r2, r3
 800d8fc:	683b      	ldr	r3, [r7, #0]
 800d8fe:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d904:	0e1b      	lsrs	r3, r3, #24
 800d906:	b2db      	uxtb	r3, r3
 800d908:	f003 0303 	and.w	r3, r3, #3
 800d90c:	b2da      	uxtb	r2, r3
 800d90e:	683b      	ldr	r3, [r7, #0]
 800d910:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d916:	0c1b      	lsrs	r3, r3, #16
 800d918:	b2da      	uxtb	r2, r3
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d922:	0a1b      	lsrs	r3, r3, #8
 800d924:	b2da      	uxtb	r2, r3
 800d926:	683b      	ldr	r3, [r7, #0]
 800d928:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800d92a:	687b      	ldr	r3, [r7, #4]
 800d92c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d92e:	b2da      	uxtb	r2, r3
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d938:	0d1b      	lsrs	r3, r3, #20
 800d93a:	b29a      	uxth	r2, r3
 800d93c:	683b      	ldr	r3, [r7, #0]
 800d93e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d944:	0c1b      	lsrs	r3, r3, #16
 800d946:	b2db      	uxtb	r3, r3
 800d948:	f003 030f 	and.w	r3, r3, #15
 800d94c:	b2da      	uxtb	r2, r3
 800d94e:	683b      	ldr	r3, [r7, #0]
 800d950:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d956:	0bdb      	lsrs	r3, r3, #15
 800d958:	b2db      	uxtb	r3, r3
 800d95a:	f003 0301 	and.w	r3, r3, #1
 800d95e:	b2da      	uxtb	r2, r3
 800d960:	683b      	ldr	r3, [r7, #0]
 800d962:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d968:	0b9b      	lsrs	r3, r3, #14
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	f003 0301 	and.w	r3, r3, #1
 800d970:	b2da      	uxtb	r2, r3
 800d972:	683b      	ldr	r3, [r7, #0]
 800d974:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d97a:	0b5b      	lsrs	r3, r3, #13
 800d97c:	b2db      	uxtb	r3, r3
 800d97e:	f003 0301 	and.w	r3, r3, #1
 800d982:	b2da      	uxtb	r2, r3
 800d984:	683b      	ldr	r3, [r7, #0]
 800d986:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d98c:	0b1b      	lsrs	r3, r3, #12
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	f003 0301 	and.w	r3, r3, #1
 800d994:	b2da      	uxtb	r2, r3
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800d99a:	683b      	ldr	r3, [r7, #0]
 800d99c:	2200      	movs	r2, #0
 800d99e:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800d9a0:	687b      	ldr	r3, [r7, #4]
 800d9a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d163      	bne.n	800da70 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9ac:	009a      	lsls	r2, r3, #2
 800d9ae:	f640 73fc 	movw	r3, #4092	; 0xffc
 800d9b2:	4013      	ands	r3, r2
 800d9b4:	687a      	ldr	r2, [r7, #4]
 800d9b6:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800d9b8:	0f92      	lsrs	r2, r2, #30
 800d9ba:	431a      	orrs	r2, r3
 800d9bc:	683b      	ldr	r3, [r7, #0]
 800d9be:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9c4:	0edb      	lsrs	r3, r3, #27
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	f003 0307 	and.w	r3, r3, #7
 800d9cc:	b2da      	uxtb	r2, r3
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9d6:	0e1b      	lsrs	r3, r3, #24
 800d9d8:	b2db      	uxtb	r3, r3
 800d9da:	f003 0307 	and.w	r3, r3, #7
 800d9de:	b2da      	uxtb	r2, r3
 800d9e0:	683b      	ldr	r3, [r7, #0]
 800d9e2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9e8:	0d5b      	lsrs	r3, r3, #21
 800d9ea:	b2db      	uxtb	r3, r3
 800d9ec:	f003 0307 	and.w	r3, r3, #7
 800d9f0:	b2da      	uxtb	r2, r3
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d9fa:	0c9b      	lsrs	r3, r3, #18
 800d9fc:	b2db      	uxtb	r3, r3
 800d9fe:	f003 0307 	and.w	r3, r3, #7
 800da02:	b2da      	uxtb	r2, r3
 800da04:	683b      	ldr	r3, [r7, #0]
 800da06:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800da08:	687b      	ldr	r3, [r7, #4]
 800da0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da0c:	0bdb      	lsrs	r3, r3, #15
 800da0e:	b2db      	uxtb	r3, r3
 800da10:	f003 0307 	and.w	r3, r3, #7
 800da14:	b2da      	uxtb	r2, r3
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	691b      	ldr	r3, [r3, #16]
 800da1e:	1c5a      	adds	r2, r3, #1
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	7e1b      	ldrb	r3, [r3, #24]
 800da28:	b2db      	uxtb	r3, r3
 800da2a:	f003 0307 	and.w	r3, r3, #7
 800da2e:	3302      	adds	r3, #2
 800da30:	2201      	movs	r2, #1
 800da32:	fa02 f303 	lsl.w	r3, r2, r3
 800da36:	687a      	ldr	r2, [r7, #4]
 800da38:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800da3a:	fb02 f203 	mul.w	r2, r2, r3
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	7a1b      	ldrb	r3, [r3, #8]
 800da46:	b2db      	uxtb	r3, r3
 800da48:	f003 030f 	and.w	r3, r3, #15
 800da4c:	2201      	movs	r2, #1
 800da4e:	409a      	lsls	r2, r3
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800da58:	687a      	ldr	r2, [r7, #4]
 800da5a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800da5c:	0a52      	lsrs	r2, r2, #9
 800da5e:	fb02 f203 	mul.w	r2, r2, r3
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	f44f 7200 	mov.w	r2, #512	; 0x200
 800da6c:	659a      	str	r2, [r3, #88]	; 0x58
 800da6e:	e031      	b.n	800dad4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da74:	2b01      	cmp	r3, #1
 800da76:	d11d      	bne.n	800dab4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800da7c:	041b      	lsls	r3, r3, #16
 800da7e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800da86:	0c1b      	lsrs	r3, r3, #16
 800da88:	431a      	orrs	r2, r3
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800da8e:	683b      	ldr	r3, [r7, #0]
 800da90:	691b      	ldr	r3, [r3, #16]
 800da92:	3301      	adds	r3, #1
 800da94:	029a      	lsls	r2, r3, #10
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800daa8:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	659a      	str	r2, [r3, #88]	; 0x58
 800dab2:	e00f      	b.n	800dad4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	4a58      	ldr	r2, [pc, #352]	; (800dc1c <HAL_SD_GetCardCSD+0x344>)
 800daba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800dad0:	2301      	movs	r3, #1
 800dad2:	e09d      	b.n	800dc10 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dad8:	0b9b      	lsrs	r3, r3, #14
 800dada:	b2db      	uxtb	r3, r3
 800dadc:	f003 0301 	and.w	r3, r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	683b      	ldr	r3, [r7, #0]
 800dae4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800daea:	09db      	lsrs	r3, r3, #7
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800daf2:	b2da      	uxtb	r2, r3
 800daf4:	683b      	ldr	r3, [r7, #0]
 800daf6:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800dafc:	b2db      	uxtb	r3, r3
 800dafe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db02:	b2da      	uxtb	r2, r3
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db0c:	0fdb      	lsrs	r3, r3, #31
 800db0e:	b2da      	uxtb	r2, r3
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db18:	0f5b      	lsrs	r3, r3, #29
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	f003 0303 	and.w	r3, r3, #3
 800db20:	b2da      	uxtb	r2, r3
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db2a:	0e9b      	lsrs	r3, r3, #26
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	f003 0307 	and.w	r3, r3, #7
 800db32:	b2da      	uxtb	r2, r3
 800db34:	683b      	ldr	r3, [r7, #0]
 800db36:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db3c:	0d9b      	lsrs	r3, r3, #22
 800db3e:	b2db      	uxtb	r3, r3
 800db40:	f003 030f 	and.w	r3, r3, #15
 800db44:	b2da      	uxtb	r2, r3
 800db46:	683b      	ldr	r3, [r7, #0]
 800db48:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db4e:	0d5b      	lsrs	r3, r3, #21
 800db50:	b2db      	uxtb	r3, r3
 800db52:	f003 0301 	and.w	r3, r3, #1
 800db56:	b2da      	uxtb	r2, r3
 800db58:	683b      	ldr	r3, [r7, #0]
 800db5a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800db5e:	683b      	ldr	r3, [r7, #0]
 800db60:	2200      	movs	r2, #0
 800db62:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db6a:	0c1b      	lsrs	r3, r3, #16
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	f003 0301 	and.w	r3, r3, #1
 800db72:	b2da      	uxtb	r2, r3
 800db74:	683b      	ldr	r3, [r7, #0]
 800db76:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db7e:	0bdb      	lsrs	r3, r3, #15
 800db80:	b2db      	uxtb	r3, r3
 800db82:	f003 0301 	and.w	r3, r3, #1
 800db86:	b2da      	uxtb	r2, r3
 800db88:	683b      	ldr	r3, [r7, #0]
 800db8a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800db92:	0b9b      	lsrs	r3, r3, #14
 800db94:	b2db      	uxtb	r3, r3
 800db96:	f003 0301 	and.w	r3, r3, #1
 800db9a:	b2da      	uxtb	r2, r3
 800db9c:	683b      	ldr	r3, [r7, #0]
 800db9e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dba6:	0b5b      	lsrs	r3, r3, #13
 800dba8:	b2db      	uxtb	r3, r3
 800dbaa:	f003 0301 	and.w	r3, r3, #1
 800dbae:	b2da      	uxtb	r2, r3
 800dbb0:	683b      	ldr	r3, [r7, #0]
 800dbb2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbba:	0b1b      	lsrs	r3, r3, #12
 800dbbc:	b2db      	uxtb	r3, r3
 800dbbe:	f003 0301 	and.w	r3, r3, #1
 800dbc2:	b2da      	uxtb	r2, r3
 800dbc4:	683b      	ldr	r3, [r7, #0]
 800dbc6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbce:	0a9b      	lsrs	r3, r3, #10
 800dbd0:	b2db      	uxtb	r3, r3
 800dbd2:	f003 0303 	and.w	r3, r3, #3
 800dbd6:	b2da      	uxtb	r2, r3
 800dbd8:	683b      	ldr	r3, [r7, #0]
 800dbda:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbe2:	0a1b      	lsrs	r3, r3, #8
 800dbe4:	b2db      	uxtb	r3, r3
 800dbe6:	f003 0303 	and.w	r3, r3, #3
 800dbea:	b2da      	uxtb	r2, r3
 800dbec:	683b      	ldr	r3, [r7, #0]
 800dbee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800dbf2:	687b      	ldr	r3, [r7, #4]
 800dbf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dbf6:	085b      	lsrs	r3, r3, #1
 800dbf8:	b2db      	uxtb	r3, r3
 800dbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	683b      	ldr	r3, [r7, #0]
 800dc02:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800dc0e:	2300      	movs	r3, #0
}
 800dc10:	4618      	mov	r0, r3
 800dc12:	370c      	adds	r7, #12
 800dc14:	46bd      	mov	sp, r7
 800dc16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc1a:	4770      	bx	lr
 800dc1c:	1fe00fff 	.word	0x1fe00fff

0800dc20 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b094      	sub	sp, #80	; 0x50
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	6078      	str	r0, [r7, #4]
 800dc28:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800dc2a:	2300      	movs	r3, #0
 800dc2c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800dc30:	f107 0308 	add.w	r3, r7, #8
 800dc34:	4619      	mov	r1, r3
 800dc36:	6878      	ldr	r0, [r7, #4]
 800dc38:	f000 fb64 	bl	800e304 <SD_SendSDStatus>
 800dc3c:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dc3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d011      	beq.n	800dc68 <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	681b      	ldr	r3, [r3, #0]
 800dc48:	4a4f      	ldr	r2, [pc, #316]	; (800dd88 <HAL_SD_GetCardStatus+0x168>)
 800dc4a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800dc4c:	687b      	ldr	r3, [r7, #4]
 800dc4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc52:	431a      	orrs	r2, r3
 800dc54:	687b      	ldr	r3, [r7, #4]
 800dc56:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dc60:	2301      	movs	r3, #1
 800dc62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800dc66:	e070      	b.n	800dd4a <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800dc68:	68bb      	ldr	r3, [r7, #8]
 800dc6a:	099b      	lsrs	r3, r3, #6
 800dc6c:	b2db      	uxtb	r3, r3
 800dc6e:	f003 0303 	and.w	r3, r3, #3
 800dc72:	b2da      	uxtb	r2, r3
 800dc74:	683b      	ldr	r3, [r7, #0]
 800dc76:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800dc78:	68bb      	ldr	r3, [r7, #8]
 800dc7a:	095b      	lsrs	r3, r3, #5
 800dc7c:	b2db      	uxtb	r3, r3
 800dc7e:	f003 0301 	and.w	r3, r3, #1
 800dc82:	b2da      	uxtb	r2, r3
 800dc84:	683b      	ldr	r3, [r7, #0]
 800dc86:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800dc88:	68bb      	ldr	r3, [r7, #8]
 800dc8a:	0a1b      	lsrs	r3, r3, #8
 800dc8c:	b29b      	uxth	r3, r3
 800dc8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	68bb      	ldr	r3, [r7, #8]
 800dc96:	0e1b      	lsrs	r3, r3, #24
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	b29a      	uxth	r2, r3
 800dc9e:	683b      	ldr	r3, [r7, #0]
 800dca0:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	061a      	lsls	r2, r3, #24
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	021b      	lsls	r3, r3, #8
 800dcaa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcae:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	0a1b      	lsrs	r3, r3, #8
 800dcb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcb8:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	0e1b      	lsrs	r3, r3, #24
 800dcbe:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800dcc0:	683b      	ldr	r3, [r7, #0]
 800dcc2:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	b2da      	uxtb	r2, r3
 800dcc8:	683b      	ldr	r3, [r7, #0]
 800dcca:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800dccc:	693b      	ldr	r3, [r7, #16]
 800dcce:	0a1b      	lsrs	r3, r3, #8
 800dcd0:	b2da      	uxtb	r2, r3
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	0d1b      	lsrs	r3, r3, #20
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 030f 	and.w	r3, r3, #15
 800dce0:	b2da      	uxtb	r2, r3
 800dce2:	683b      	ldr	r3, [r7, #0]
 800dce4:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	0c1b      	lsrs	r3, r3, #16
 800dcea:	b29b      	uxth	r3, r3
 800dcec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800dcf0:	b29a      	uxth	r2, r3
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	b29b      	uxth	r3, r3
 800dcf6:	b2db      	uxtb	r3, r3
 800dcf8:	b29b      	uxth	r3, r3
 800dcfa:	4313      	orrs	r3, r2
 800dcfc:	b29a      	uxth	r2, r3
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800dd02:	697b      	ldr	r3, [r7, #20]
 800dd04:	0a9b      	lsrs	r3, r3, #10
 800dd06:	b2db      	uxtb	r3, r3
 800dd08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dd0c:	b2da      	uxtb	r2, r3
 800dd0e:	683b      	ldr	r3, [r7, #0]
 800dd10:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	0a1b      	lsrs	r3, r3, #8
 800dd16:	b2db      	uxtb	r3, r3
 800dd18:	f003 0303 	and.w	r3, r3, #3
 800dd1c:	b2da      	uxtb	r2, r3
 800dd1e:	683b      	ldr	r3, [r7, #0]
 800dd20:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800dd22:	697b      	ldr	r3, [r7, #20]
 800dd24:	091b      	lsrs	r3, r3, #4
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	f003 030f 	and.w	r3, r3, #15
 800dd2c:	b2da      	uxtb	r2, r3
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800dd32:	697b      	ldr	r3, [r7, #20]
 800dd34:	b2db      	uxtb	r3, r3
 800dd36:	f003 030f 	and.w	r3, r3, #15
 800dd3a:	b2da      	uxtb	r2, r3
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800dd40:	69bb      	ldr	r3, [r7, #24]
 800dd42:	0e1b      	lsrs	r3, r3, #24
 800dd44:	b2da      	uxtb	r2, r3
 800dd46:	683b      	ldr	r3, [r7, #0]
 800dd48:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	681b      	ldr	r3, [r3, #0]
 800dd4e:	f44f 7100 	mov.w	r1, #512	; 0x200
 800dd52:	4618      	mov	r0, r3
 800dd54:	f003 f9f8 	bl	8011148 <SDMMC_CmdBlockLength>
 800dd58:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800dd5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d00d      	beq.n	800dd7c <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a08      	ldr	r2, [pc, #32]	; (800dd88 <HAL_SD_GetCardStatus+0x168>)
 800dd66:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dd6c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	2201      	movs	r2, #1
 800dd72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800dd76:	2301      	movs	r3, #1
 800dd78:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800dd7c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800dd80:	4618      	mov	r0, r3
 800dd82:	3750      	adds	r7, #80	; 0x50
 800dd84:	46bd      	mov	sp, r7
 800dd86:	bd80      	pop	{r7, pc}
 800dd88:	1fe00fff 	.word	0x1fe00fff

0800dd8c <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800dd8c:	b480      	push	{r7}
 800dd8e:	b083      	sub	sp, #12
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800dda2:	683b      	ldr	r3, [r7, #0]
 800dda4:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ddaa:	683b      	ldr	r3, [r7, #0]
 800ddac:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ddba:	683b      	ldr	r3, [r7, #0]
 800ddbc:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ddc2:	683b      	ldr	r3, [r7, #0]
 800ddc4:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ddd2:	683b      	ldr	r3, [r7, #0]
 800ddd4:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800ddd6:	2300      	movs	r3, #0
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	370c      	adds	r7, #12
 800dddc:	46bd      	mov	sp, r7
 800ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde2:	4770      	bx	lr

0800dde4 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800dde4:	b5b0      	push	{r4, r5, r7, lr}
 800dde6:	b08e      	sub	sp, #56	; 0x38
 800dde8:	af04      	add	r7, sp, #16
 800ddea:	6078      	str	r0, [r7, #4]
 800ddec:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800ddee:	2300      	movs	r3, #0
 800ddf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	2203      	movs	r2, #3
 800ddf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800ddfc:	687b      	ldr	r3, [r7, #4]
 800ddfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800de00:	2b03      	cmp	r3, #3
 800de02:	d02e      	beq.n	800de62 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de0a:	d106      	bne.n	800de1a <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de10:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	639a      	str	r2, [r3, #56]	; 0x38
 800de18:	e029      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de20:	d10a      	bne.n	800de38 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800de22:	6878      	ldr	r0, [r7, #4]
 800de24:	f000 fb66 	bl	800e4f4 <SD_WideBus_Enable>
 800de28:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	431a      	orrs	r2, r3
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	639a      	str	r2, [r3, #56]	; 0x38
 800de36:	e01a      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d10a      	bne.n	800de54 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f000 fba3 	bl	800e58a <SD_WideBus_Disable>
 800de44:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de4a:	6a3b      	ldr	r3, [r7, #32]
 800de4c:	431a      	orrs	r2, r3
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	639a      	str	r2, [r3, #56]	; 0x38
 800de52:	e00c      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de58:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	639a      	str	r2, [r3, #56]	; 0x38
 800de60:	e005      	b.n	800de6e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de66:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de72:	2b00      	cmp	r3, #0
 800de74:	d007      	beq.n	800de86 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a2e      	ldr	r2, [pc, #184]	; (800df34 <HAL_SD_ConfigWideBusOperation+0x150>)
 800de7c:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800de7e:	2301      	movs	r3, #1
 800de80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800de84:	e034      	b.n	800def0 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	685b      	ldr	r3, [r3, #4]
 800de8a:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800de8c:	687b      	ldr	r3, [r7, #4]
 800de8e:	689b      	ldr	r3, [r3, #8]
 800de90:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800de92:	683b      	ldr	r3, [r7, #0]
 800de94:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800de9c:	687b      	ldr	r3, [r7, #4]
 800de9e:	695b      	ldr	r3, [r3, #20]
 800dea0:	2b03      	cmp	r3, #3
 800dea2:	d903      	bls.n	800deac <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	61bb      	str	r3, [r7, #24]
 800deaa:	e012      	b.n	800ded2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800deb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800deb4:	d103      	bne.n	800debe <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800deb6:	687b      	ldr	r3, [r7, #4]
 800deb8:	695b      	ldr	r3, [r3, #20]
 800deba:	61bb      	str	r3, [r7, #24]
 800debc:	e009      	b.n	800ded2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800dec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dec6:	d102      	bne.n	800dece <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800dec8:	2302      	movs	r3, #2
 800deca:	61bb      	str	r3, [r7, #24]
 800decc:	e001      	b.n	800ded2 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800dece:	2304      	movs	r3, #4
 800ded0:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	681d      	ldr	r5, [r3, #0]
 800ded6:	466c      	mov	r4, sp
 800ded8:	f107 0314 	add.w	r3, r7, #20
 800dedc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dee0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800dee4:	f107 0308 	add.w	r3, r7, #8
 800dee8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800deea:	4628      	mov	r0, r5
 800deec:	f003 f84e 	bl	8010f8c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800def8:	4618      	mov	r0, r3
 800defa:	f003 f925 	bl	8011148 <SDMMC_CmdBlockLength>
 800defe:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df00:	6a3b      	ldr	r3, [r7, #32]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d00c      	beq.n	800df20 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	4a0a      	ldr	r2, [pc, #40]	; (800df34 <HAL_SD_ConfigWideBusOperation+0x150>)
 800df0c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df12:	6a3b      	ldr	r3, [r7, #32]
 800df14:	431a      	orrs	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800df1a:	2301      	movs	r3, #1
 800df1c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2201      	movs	r2, #1
 800df24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800df28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3728      	adds	r7, #40	; 0x28
 800df30:	46bd      	mov	sp, r7
 800df32:	bdb0      	pop	{r4, r5, r7, pc}
 800df34:	1fe00fff 	.word	0x1fe00fff

0800df38 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b086      	sub	sp, #24
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800df40:	2300      	movs	r3, #0
 800df42:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800df44:	f107 030c 	add.w	r3, r7, #12
 800df48:	4619      	mov	r1, r3
 800df4a:	6878      	ldr	r0, [r7, #4]
 800df4c:	f000 faaa 	bl	800e4a4 <SD_SendStatus>
 800df50:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800df52:	697b      	ldr	r3, [r7, #20]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d005      	beq.n	800df64 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df5c:	697b      	ldr	r3, [r7, #20]
 800df5e:	431a      	orrs	r2, r3
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	0a5b      	lsrs	r3, r3, #9
 800df68:	f003 030f 	and.w	r3, r3, #15
 800df6c:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800df6e:	693b      	ldr	r3, [r7, #16]
}
 800df70:	4618      	mov	r0, r3
 800df72:	3718      	adds	r7, #24
 800df74:	46bd      	mov	sp, r7
 800df76:	bd80      	pop	{r7, pc}

0800df78 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800df78:	b590      	push	{r4, r7, lr}
 800df7a:	b091      	sub	sp, #68	; 0x44
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800df80:	2301      	movs	r3, #1
 800df82:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4618      	mov	r0, r3
 800df8a:	f003 f858 	bl	801103e <SDMMC_GetPowerState>
 800df8e:	4603      	mov	r3, r0
 800df90:	2b00      	cmp	r3, #0
 800df92:	d102      	bne.n	800df9a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800df94:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800df98:	e0a8      	b.n	800e0ec <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800df9e:	2b03      	cmp	r3, #3
 800dfa0:	d02e      	beq.n	800e000 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	f003 faa4 	bl	80114f4 <SDMMC_CmdSendCID>
 800dfac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800dfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d001      	beq.n	800dfb8 <SD_InitCard+0x40>
    {
      return errorstate;
 800dfb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb6:	e099      	b.n	800e0ec <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	2100      	movs	r1, #0
 800dfbe:	4618      	mov	r0, r3
 800dfc0:	f003 f883 	bl	80110ca <SDMMC_GetResponse>
 800dfc4:	4602      	mov	r2, r0
 800dfc6:	687b      	ldr	r3, [r7, #4]
 800dfc8:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	2104      	movs	r1, #4
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	f003 f87a 	bl	80110ca <SDMMC_GetResponse>
 800dfd6:	4602      	mov	r2, r0
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	681b      	ldr	r3, [r3, #0]
 800dfe0:	2108      	movs	r1, #8
 800dfe2:	4618      	mov	r0, r3
 800dfe4:	f003 f871 	bl	80110ca <SDMMC_GetResponse>
 800dfe8:	4602      	mov	r2, r0
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	210c      	movs	r1, #12
 800dff4:	4618      	mov	r0, r3
 800dff6:	f003 f868 	bl	80110ca <SDMMC_GetResponse>
 800dffa:	4602      	mov	r2, r0
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e004:	2b03      	cmp	r3, #3
 800e006:	d00d      	beq.n	800e024 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	f107 020e 	add.w	r2, r7, #14
 800e010:	4611      	mov	r1, r2
 800e012:	4618      	mov	r0, r3
 800e014:	f003 faad 	bl	8011572 <SDMMC_CmdSetRelAdd>
 800e018:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e01a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d001      	beq.n	800e024 <SD_InitCard+0xac>
    {
      return errorstate;
 800e020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e022:	e063      	b.n	800e0ec <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e028:	2b03      	cmp	r3, #3
 800e02a:	d036      	beq.n	800e09a <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e02c:	89fb      	ldrh	r3, [r7, #14]
 800e02e:	461a      	mov	r2, r3
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681a      	ldr	r2, [r3, #0]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e03c:	041b      	lsls	r3, r3, #16
 800e03e:	4619      	mov	r1, r3
 800e040:	4610      	mov	r0, r2
 800e042:	f003 fa76 	bl	8011532 <SDMMC_CmdSendCSD>
 800e046:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d001      	beq.n	800e052 <SD_InitCard+0xda>
    {
      return errorstate;
 800e04e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e050:	e04c      	b.n	800e0ec <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	681b      	ldr	r3, [r3, #0]
 800e056:	2100      	movs	r1, #0
 800e058:	4618      	mov	r0, r3
 800e05a:	f003 f836 	bl	80110ca <SDMMC_GetResponse>
 800e05e:	4602      	mov	r2, r0
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	681b      	ldr	r3, [r3, #0]
 800e068:	2104      	movs	r1, #4
 800e06a:	4618      	mov	r0, r3
 800e06c:	f003 f82d 	bl	80110ca <SDMMC_GetResponse>
 800e070:	4602      	mov	r2, r0
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	681b      	ldr	r3, [r3, #0]
 800e07a:	2108      	movs	r1, #8
 800e07c:	4618      	mov	r0, r3
 800e07e:	f003 f824 	bl	80110ca <SDMMC_GetResponse>
 800e082:	4602      	mov	r2, r0
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	210c      	movs	r1, #12
 800e08e:	4618      	mov	r0, r3
 800e090:	f003 f81b 	bl	80110ca <SDMMC_GetResponse>
 800e094:	4602      	mov	r2, r0
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	2104      	movs	r1, #4
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	f003 f812 	bl	80110ca <SDMMC_GetResponse>
 800e0a6:	4603      	mov	r3, r0
 800e0a8:	0d1a      	lsrs	r2, r3, #20
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e0ae:	f107 0310 	add.w	r3, r7, #16
 800e0b2:	4619      	mov	r1, r3
 800e0b4:	6878      	ldr	r0, [r7, #4]
 800e0b6:	f7ff fc0f 	bl	800d8d8 <HAL_SD_GetCardCSD>
 800e0ba:	4603      	mov	r3, r0
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d002      	beq.n	800e0c6 <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e0c0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0c4:	e012      	b.n	800e0ec <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6819      	ldr	r1, [r3, #0]
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ce:	041b      	lsls	r3, r3, #16
 800e0d0:	f04f 0400 	mov.w	r4, #0
 800e0d4:	461a      	mov	r2, r3
 800e0d6:	4623      	mov	r3, r4
 800e0d8:	4608      	mov	r0, r1
 800e0da:	f003 f921 	bl	8011320 <SDMMC_CmdSelDesel>
 800e0de:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e0e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d001      	beq.n	800e0ea <SD_InitCard+0x172>
  {
    return errorstate;
 800e0e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0e8:	e000      	b.n	800e0ec <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e0ea:	2300      	movs	r3, #0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3744      	adds	r7, #68	; 0x44
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd90      	pop	{r4, r7, pc}

0800e0f4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b088      	sub	sp, #32
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e100:	2300      	movs	r3, #0
 800e102:	61fb      	str	r3, [r7, #28]
 800e104:	2300      	movs	r3, #0
 800e106:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e108:	f7f6 fa2c 	bl	8004564 <HAL_GetTick>
 800e10c:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	4618      	mov	r0, r3
 800e114:	f003 f928 	bl	8011368 <SDMMC_CmdGoIdleState>
 800e118:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e11a:	693b      	ldr	r3, [r7, #16]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d001      	beq.n	800e124 <SD_PowerON+0x30>
  {
    return errorstate;
 800e120:	693b      	ldr	r3, [r7, #16]
 800e122:	e0e9      	b.n	800e2f8 <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	681b      	ldr	r3, [r3, #0]
 800e128:	4618      	mov	r0, r3
 800e12a:	f003 f93b 	bl	80113a4 <SDMMC_CmdOperCond>
 800e12e:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	2b00      	cmp	r3, #0
 800e134:	d00d      	beq.n	800e152 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e136:	687b      	ldr	r3, [r7, #4]
 800e138:	2200      	movs	r2, #0
 800e13a:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4618      	mov	r0, r3
 800e142:	f003 f911 	bl	8011368 <SDMMC_CmdGoIdleState>
 800e146:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e148:	693b      	ldr	r3, [r7, #16]
 800e14a:	2b00      	cmp	r3, #0
 800e14c:	d004      	beq.n	800e158 <SD_PowerON+0x64>
    {
      return errorstate;
 800e14e:	693b      	ldr	r3, [r7, #16]
 800e150:	e0d2      	b.n	800e2f8 <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	2201      	movs	r2, #1
 800e156:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e158:	687b      	ldr	r3, [r7, #4]
 800e15a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e15c:	2b01      	cmp	r3, #1
 800e15e:	d137      	bne.n	800e1d0 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	2100      	movs	r1, #0
 800e166:	4618      	mov	r0, r3
 800e168:	f003 f93c 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e16c:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e16e:	693b      	ldr	r3, [r7, #16]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d02d      	beq.n	800e1d0 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e174:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e178:	e0be      	b.n	800e2f8 <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2100      	movs	r1, #0
 800e180:	4618      	mov	r0, r3
 800e182:	f003 f92f 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e186:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e188:	693b      	ldr	r3, [r7, #16]
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <SD_PowerON+0x9e>
    {
      return errorstate;
 800e18e:	693b      	ldr	r3, [r7, #16]
 800e190:	e0b2      	b.n	800e2f8 <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	495a      	ldr	r1, [pc, #360]	; (800e300 <SD_PowerON+0x20c>)
 800e198:	4618      	mov	r0, r3
 800e19a:	f003 f946 	bl	801142a <SDMMC_CmdAppOperCommand>
 800e19e:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e1a0:	693b      	ldr	r3, [r7, #16]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d002      	beq.n	800e1ac <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e1a6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e1aa:	e0a5      	b.n	800e2f8 <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	2100      	movs	r1, #0
 800e1b2:	4618      	mov	r0, r3
 800e1b4:	f002 ff89 	bl	80110ca <SDMMC_GetResponse>
 800e1b8:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800e1ba:	69fb      	ldr	r3, [r7, #28]
 800e1bc:	0fdb      	lsrs	r3, r3, #31
 800e1be:	2b01      	cmp	r3, #1
 800e1c0:	d101      	bne.n	800e1c6 <SD_PowerON+0xd2>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	e000      	b.n	800e1c8 <SD_PowerON+0xd4>
 800e1c6:	2300      	movs	r3, #0
 800e1c8:	61bb      	str	r3, [r7, #24]

    count++;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1d6:	4293      	cmp	r3, r2
 800e1d8:	d802      	bhi.n	800e1e0 <SD_PowerON+0xec>
 800e1da:	69bb      	ldr	r3, [r7, #24]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d0cc      	beq.n	800e17a <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800e1e6:	4293      	cmp	r3, r2
 800e1e8:	d902      	bls.n	800e1f0 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e1ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e1ee:	e083      	b.n	800e2f8 <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800e1f0:	69fb      	ldr	r3, [r7, #28]
 800e1f2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d07d      	beq.n	800e2f6 <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	699b      	ldr	r3, [r3, #24]
 800e204:	2b02      	cmp	r3, #2
 800e206:	d176      	bne.n	800e2f6 <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800e208:	69fb      	ldr	r3, [r7, #28]
 800e20a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d071      	beq.n	800e2f6 <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e218:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	681a      	ldr	r2, [r3, #0]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	f042 0208 	orr.w	r2, r2, #8
 800e228:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800e22a:	687b      	ldr	r3, [r7, #4]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	4618      	mov	r0, r3
 800e230:	f003 fa06 	bl	8011640 <SDMMC_CmdVoltageSwitch>
 800e234:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800e236:	693b      	ldr	r3, [r7, #16]
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d00c      	beq.n	800e256 <SD_PowerON+0x162>
        {
          return errorstate;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	e05b      	b.n	800e2f8 <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e240:	f7f6 f990 	bl	8004564 <HAL_GetTick>
 800e244:	4602      	mov	r2, r0
 800e246:	697b      	ldr	r3, [r7, #20]
 800e248:	1ad3      	subs	r3, r2, r3
 800e24a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e24e:	d102      	bne.n	800e256 <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800e250:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e254:	e050      	b.n	800e2f8 <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e25c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e260:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800e264:	d1ec      	bne.n	800e240 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800e26e:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e276:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e27a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e27e:	d002      	beq.n	800e286 <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800e280:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e284:	e038      	b.n	800e2f8 <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800e286:	2001      	movs	r0, #1
 800e288:	f7ff fb1a 	bl	800d8c0 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800e28c:	687b      	ldr	r3, [r7, #4]
 800e28e:	681b      	ldr	r3, [r3, #0]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	f042 0204 	orr.w	r2, r2, #4
 800e29a:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e29c:	e00a      	b.n	800e2b4 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e29e:	f7f6 f961 	bl	8004564 <HAL_GetTick>
 800e2a2:	4602      	mov	r2, r0
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	1ad3      	subs	r3, r2, r3
 800e2a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e2ac:	d102      	bne.n	800e2b4 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800e2ae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e2b2:	e021      	b.n	800e2f8 <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	681b      	ldr	r3, [r3, #0]
 800e2b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e2be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e2c2:	d1ec      	bne.n	800e29e <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800e2cc:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	681b      	ldr	r3, [r3, #0]
 800e2d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e2d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e2d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e2dc:	d102      	bne.n	800e2e4 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800e2de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800e2e2:	e009      	b.n	800e2f8 <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2213      	movs	r2, #19
 800e2ea:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	f04f 32ff 	mov.w	r2, #4294967295
 800e2f4:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800e2f6:	2300      	movs	r3, #0
}
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3720      	adds	r7, #32
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	c1100000 	.word	0xc1100000

0800e304 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b08c      	sub	sp, #48	; 0x30
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e30e:	f7f6 f929 	bl	8004564 <HAL_GetTick>
 800e312:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	2100      	movs	r1, #0
 800e31e:	4618      	mov	r0, r3
 800e320:	f002 fed3 	bl	80110ca <SDMMC_GetResponse>
 800e324:	4603      	mov	r3, r0
 800e326:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e32a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e32e:	d102      	bne.n	800e336 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e330:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e334:	e0b0      	b.n	800e498 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	2140      	movs	r1, #64	; 0x40
 800e33c:	4618      	mov	r0, r3
 800e33e:	f002 ff03 	bl	8011148 <SDMMC_CmdBlockLength>
 800e342:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e344:	6a3b      	ldr	r3, [r7, #32]
 800e346:	2b00      	cmp	r3, #0
 800e348:	d005      	beq.n	800e356 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	e0a0      	b.n	800e498 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e356:	687b      	ldr	r3, [r7, #4]
 800e358:	681a      	ldr	r2, [r3, #0]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e35e:	041b      	lsls	r3, r3, #16
 800e360:	4619      	mov	r1, r3
 800e362:	4610      	mov	r0, r2
 800e364:	f003 f83e 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e368:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d005      	beq.n	800e37c <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e370:	687b      	ldr	r3, [r7, #4]
 800e372:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e378:	6a3b      	ldr	r3, [r7, #32]
 800e37a:	e08d      	b.n	800e498 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e37c:	f04f 33ff 	mov.w	r3, #4294967295
 800e380:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800e382:	2340      	movs	r3, #64	; 0x40
 800e384:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800e386:	2360      	movs	r3, #96	; 0x60
 800e388:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e38a:	2302      	movs	r3, #2
 800e38c:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e38e:	2300      	movs	r3, #0
 800e390:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e392:	2301      	movs	r3, #1
 800e394:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f107 0208 	add.w	r2, r7, #8
 800e39e:	4611      	mov	r1, r2
 800e3a0:	4618      	mov	r0, r3
 800e3a2:	f002 fea5 	bl	80110f0 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	681b      	ldr	r3, [r3, #0]
 800e3aa:	4618      	mov	r0, r3
 800e3ac:	f003 f926 	bl	80115fc <SDMMC_CmdStatusRegister>
 800e3b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e3b2:	6a3b      	ldr	r3, [r7, #32]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d02b      	beq.n	800e410 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800e3c0:	6a3b      	ldr	r3, [r7, #32]
 800e3c2:	e069      	b.n	800e498 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e3ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d013      	beq.n	800e3fa <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800e3d2:	2300      	movs	r3, #0
 800e3d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3d6:	e00d      	b.n	800e3f4 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	4618      	mov	r0, r3
 800e3de:	f002 fdff 	bl	8010fe0 <SDMMC_ReadFIFO>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3e6:	601a      	str	r2, [r3, #0]
        pData++;
 800e3e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e3ea:	3304      	adds	r3, #4
 800e3ec:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800e3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3f6:	2b07      	cmp	r3, #7
 800e3f8:	d9ee      	bls.n	800e3d8 <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e3fa:	f7f6 f8b3 	bl	8004564 <HAL_GetTick>
 800e3fe:	4602      	mov	r2, r0
 800e400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e402:	1ad3      	subs	r3, r2, r3
 800e404:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e408:	d102      	bne.n	800e410 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e40a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e40e:	e043      	b.n	800e498 <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e416:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d0d2      	beq.n	800e3c4 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e424:	f003 0308 	and.w	r3, r3, #8
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d001      	beq.n	800e430 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e42c:	2308      	movs	r3, #8
 800e42e:	e033      	b.n	800e498 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e436:	f003 0302 	and.w	r3, r3, #2
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d001      	beq.n	800e442 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e43e:	2302      	movs	r3, #2
 800e440:	e02a      	b.n	800e498 <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e448:	f003 0320 	and.w	r3, r3, #32
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d017      	beq.n	800e480 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800e450:	2320      	movs	r3, #32
 800e452:	e021      	b.n	800e498 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800e454:	687b      	ldr	r3, [r7, #4]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4618      	mov	r0, r3
 800e45a:	f002 fdc1 	bl	8010fe0 <SDMMC_ReadFIFO>
 800e45e:	4602      	mov	r2, r0
 800e460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e462:	601a      	str	r2, [r3, #0]
    pData++;
 800e464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e466:	3304      	adds	r3, #4
 800e468:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e46a:	f7f6 f87b 	bl	8004564 <HAL_GetTick>
 800e46e:	4602      	mov	r2, r0
 800e470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e472:	1ad3      	subs	r3, r2, r3
 800e474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e478:	d102      	bne.n	800e480 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e47a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e47e:	e00b      	b.n	800e498 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	681b      	ldr	r3, [r3, #0]
 800e484:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e48a:	2b00      	cmp	r3, #0
 800e48c:	d1e2      	bne.n	800e454 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	4a03      	ldr	r2, [pc, #12]	; (800e4a0 <SD_SendSDStatus+0x19c>)
 800e494:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800e496:	2300      	movs	r3, #0
}
 800e498:	4618      	mov	r0, r3
 800e49a:	3730      	adds	r7, #48	; 0x30
 800e49c:	46bd      	mov	sp, r7
 800e49e:	bd80      	pop	{r7, pc}
 800e4a0:	18000f3a 	.word	0x18000f3a

0800e4a4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800e4a4:	b580      	push	{r7, lr}
 800e4a6:	b084      	sub	sp, #16
 800e4a8:	af00      	add	r7, sp, #0
 800e4aa:	6078      	str	r0, [r7, #4]
 800e4ac:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800e4ae:	683b      	ldr	r3, [r7, #0]
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	d102      	bne.n	800e4ba <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800e4b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e4b8:	e018      	b.n	800e4ec <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681a      	ldr	r2, [r3, #0]
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e4c2:	041b      	lsls	r3, r3, #16
 800e4c4:	4619      	mov	r1, r3
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	f003 f875 	bl	80115b6 <SDMMC_CmdSendStatus>
 800e4cc:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d001      	beq.n	800e4d8 <SD_SendStatus+0x34>
  {
    return errorstate;
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	e009      	b.n	800e4ec <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	2100      	movs	r1, #0
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f002 fdf3 	bl	80110ca <SDMMC_GetResponse>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800e4ea:	2300      	movs	r3, #0
}
 800e4ec:	4618      	mov	r0, r3
 800e4ee:	3710      	adds	r7, #16
 800e4f0:	46bd      	mov	sp, r7
 800e4f2:	bd80      	pop	{r7, pc}

0800e4f4 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b086      	sub	sp, #24
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	60fb      	str	r3, [r7, #12]
 800e500:	2300      	movs	r3, #0
 800e502:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	2100      	movs	r1, #0
 800e50a:	4618      	mov	r0, r3
 800e50c:	f002 fddd 	bl	80110ca <SDMMC_GetResponse>
 800e510:	4603      	mov	r3, r0
 800e512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e51a:	d102      	bne.n	800e522 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e51c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e520:	e02f      	b.n	800e582 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e522:	f107 030c 	add.w	r3, r7, #12
 800e526:	4619      	mov	r1, r3
 800e528:	6878      	ldr	r0, [r7, #4]
 800e52a:	f000 f879 	bl	800e620 <SD_FindSCR>
 800e52e:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e530:	697b      	ldr	r3, [r7, #20]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d001      	beq.n	800e53a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800e536:	697b      	ldr	r3, [r7, #20]
 800e538:	e023      	b.n	800e582 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e53a:	693b      	ldr	r3, [r7, #16]
 800e53c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e540:	2b00      	cmp	r3, #0
 800e542:	d01c      	beq.n	800e57e <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	681a      	ldr	r2, [r3, #0]
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e54c:	041b      	lsls	r3, r3, #16
 800e54e:	4619      	mov	r1, r3
 800e550:	4610      	mov	r0, r2
 800e552:	f002 ff47 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e556:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e558:	697b      	ldr	r3, [r7, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d001      	beq.n	800e562 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800e55e:	697b      	ldr	r3, [r7, #20]
 800e560:	e00f      	b.n	800e582 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	2102      	movs	r1, #2
 800e568:	4618      	mov	r0, r3
 800e56a:	f002 ff7e 	bl	801146a <SDMMC_CmdBusWidth>
 800e56e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e570:	697b      	ldr	r3, [r7, #20]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d001      	beq.n	800e57a <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800e576:	697b      	ldr	r3, [r7, #20]
 800e578:	e003      	b.n	800e582 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e57a:	2300      	movs	r3, #0
 800e57c:	e001      	b.n	800e582 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e57e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e582:	4618      	mov	r0, r3
 800e584:	3718      	adds	r7, #24
 800e586:	46bd      	mov	sp, r7
 800e588:	bd80      	pop	{r7, pc}

0800e58a <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800e58a:	b580      	push	{r7, lr}
 800e58c:	b086      	sub	sp, #24
 800e58e:	af00      	add	r7, sp, #0
 800e590:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800e592:	2300      	movs	r3, #0
 800e594:	60fb      	str	r3, [r7, #12]
 800e596:	2300      	movs	r3, #0
 800e598:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	681b      	ldr	r3, [r3, #0]
 800e59e:	2100      	movs	r1, #0
 800e5a0:	4618      	mov	r0, r3
 800e5a2:	f002 fd92 	bl	80110ca <SDMMC_GetResponse>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e5ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800e5b0:	d102      	bne.n	800e5b8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800e5b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e5b6:	e02f      	b.n	800e618 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800e5b8:	f107 030c 	add.w	r3, r7, #12
 800e5bc:	4619      	mov	r1, r3
 800e5be:	6878      	ldr	r0, [r7, #4]
 800e5c0:	f000 f82e 	bl	800e620 <SD_FindSCR>
 800e5c4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	2b00      	cmp	r3, #0
 800e5ca:	d001      	beq.n	800e5d0 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800e5cc:	697b      	ldr	r3, [r7, #20]
 800e5ce:	e023      	b.n	800e618 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800e5d0:	693b      	ldr	r3, [r7, #16]
 800e5d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d01c      	beq.n	800e614 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681a      	ldr	r2, [r3, #0]
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5e2:	041b      	lsls	r3, r3, #16
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	4610      	mov	r0, r2
 800e5e8:	f002 fefc 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e5ec:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e5ee:	697b      	ldr	r3, [r7, #20]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d001      	beq.n	800e5f8 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800e5f4:	697b      	ldr	r3, [r7, #20]
 800e5f6:	e00f      	b.n	800e618 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	2100      	movs	r1, #0
 800e5fe:	4618      	mov	r0, r3
 800e600:	f002 ff33 	bl	801146a <SDMMC_CmdBusWidth>
 800e604:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	2b00      	cmp	r3, #0
 800e60a:	d001      	beq.n	800e610 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800e60c:	697b      	ldr	r3, [r7, #20]
 800e60e:	e003      	b.n	800e618 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800e610:	2300      	movs	r3, #0
 800e612:	e001      	b.n	800e618 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800e618:	4618      	mov	r0, r3
 800e61a:	3718      	adds	r7, #24
 800e61c:	46bd      	mov	sp, r7
 800e61e:	bd80      	pop	{r7, pc}

0800e620 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800e620:	b580      	push	{r7, lr}
 800e622:	b08e      	sub	sp, #56	; 0x38
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800e62a:	f7f5 ff9b 	bl	8004564 <HAL_GetTick>
 800e62e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800e630:	2300      	movs	r3, #0
 800e632:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800e634:	2300      	movs	r3, #0
 800e636:	60bb      	str	r3, [r7, #8]
 800e638:	2300      	movs	r3, #0
 800e63a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800e63c:	683b      	ldr	r3, [r7, #0]
 800e63e:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	681b      	ldr	r3, [r3, #0]
 800e644:	2108      	movs	r1, #8
 800e646:	4618      	mov	r0, r3
 800e648:	f002 fd7e 	bl	8011148 <SDMMC_CmdBlockLength>
 800e64c:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e64e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e650:	2b00      	cmp	r3, #0
 800e652:	d001      	beq.n	800e658 <SD_FindSCR+0x38>
  {
    return errorstate;
 800e654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e656:	e0ad      	b.n	800e7b4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	681a      	ldr	r2, [r3, #0]
 800e65c:	687b      	ldr	r3, [r7, #4]
 800e65e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e660:	041b      	lsls	r3, r3, #16
 800e662:	4619      	mov	r1, r3
 800e664:	4610      	mov	r0, r2
 800e666:	f002 febd 	bl	80113e4 <SDMMC_CmdAppCommand>
 800e66a:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e66c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e66e:	2b00      	cmp	r3, #0
 800e670:	d001      	beq.n	800e676 <SD_FindSCR+0x56>
  {
    return errorstate;
 800e672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e674:	e09e      	b.n	800e7b4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800e676:	f04f 33ff 	mov.w	r3, #4294967295
 800e67a:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800e67c:	2308      	movs	r3, #8
 800e67e:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800e680:	2330      	movs	r3, #48	; 0x30
 800e682:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800e684:	2302      	movs	r3, #2
 800e686:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800e688:	2300      	movs	r3, #0
 800e68a:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800e68c:	2301      	movs	r3, #1
 800e68e:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	681b      	ldr	r3, [r3, #0]
 800e694:	f107 0210 	add.w	r2, r7, #16
 800e698:	4611      	mov	r1, r2
 800e69a:	4618      	mov	r0, r3
 800e69c:	f002 fd28 	bl	80110f0 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	4618      	mov	r0, r3
 800e6a6:	f002 ff03 	bl	80114b0 <SDMMC_CmdSendSCR>
 800e6aa:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800e6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6ae:	2b00      	cmp	r3, #0
 800e6b0:	d027      	beq.n	800e702 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800e6b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e6b4:	e07e      	b.n	800e7b4 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e6c0:	2b00      	cmp	r3, #0
 800e6c2:	d113      	bne.n	800e6ec <SD_FindSCR+0xcc>
 800e6c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d110      	bne.n	800e6ec <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	681b      	ldr	r3, [r3, #0]
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f002 fc86 	bl	8010fe0 <SDMMC_ReadFIFO>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	4618      	mov	r0, r3
 800e6de:	f002 fc7f 	bl	8010fe0 <SDMMC_ReadFIFO>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	60fb      	str	r3, [r7, #12]
      index++;
 800e6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e8:	3301      	adds	r3, #1
 800e6ea:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800e6ec:	f7f5 ff3a 	bl	8004564 <HAL_GetTick>
 800e6f0:	4602      	mov	r2, r0
 800e6f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6f4:	1ad3      	subs	r3, r2, r3
 800e6f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e6fa:	d102      	bne.n	800e702 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800e6fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800e700:	e058      	b.n	800e7b4 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e708:	f240 532a 	movw	r3, #1322	; 0x52a
 800e70c:	4013      	ands	r3, r2
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d0d1      	beq.n	800e6b6 <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	681b      	ldr	r3, [r3, #0]
 800e716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e718:	f003 0308 	and.w	r3, r3, #8
 800e71c:	2b00      	cmp	r3, #0
 800e71e:	d005      	beq.n	800e72c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	2208      	movs	r2, #8
 800e726:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800e728:	2308      	movs	r3, #8
 800e72a:	e043      	b.n	800e7b4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e732:	f003 0302 	and.w	r3, r3, #2
 800e736:	2b00      	cmp	r3, #0
 800e738:	d005      	beq.n	800e746 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	681b      	ldr	r3, [r3, #0]
 800e73e:	2202      	movs	r2, #2
 800e740:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800e742:	2302      	movs	r3, #2
 800e744:	e036      	b.n	800e7b4 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	681b      	ldr	r3, [r3, #0]
 800e74a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e74c:	f003 0320 	and.w	r3, r3, #32
 800e750:	2b00      	cmp	r3, #0
 800e752:	d005      	beq.n	800e760 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	2220      	movs	r2, #32
 800e75a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800e75c:	2320      	movs	r3, #32
 800e75e:	e029      	b.n	800e7b4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a15      	ldr	r2, [pc, #84]	; (800e7bc <SD_FindSCR+0x19c>)
 800e766:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	061a      	lsls	r2, r3, #24
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	021b      	lsls	r3, r3, #8
 800e770:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e774:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	0a1b      	lsrs	r3, r3, #8
 800e77a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e77e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	0e1b      	lsrs	r3, r3, #24
 800e784:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800e786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e788:	601a      	str	r2, [r3, #0]
    scr++;
 800e78a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e78c:	3304      	adds	r3, #4
 800e78e:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e790:	68bb      	ldr	r3, [r7, #8]
 800e792:	061a      	lsls	r2, r3, #24
 800e794:	68bb      	ldr	r3, [r7, #8]
 800e796:	021b      	lsls	r3, r3, #8
 800e798:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e79c:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e79e:	68bb      	ldr	r3, [r7, #8]
 800e7a0:	0a1b      	lsrs	r3, r3, #8
 800e7a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7a6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800e7a8:	68bb      	ldr	r3, [r7, #8]
 800e7aa:	0e1b      	lsrs	r3, r3, #24
 800e7ac:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800e7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7b0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800e7b2:	2300      	movs	r3, #0
}
 800e7b4:	4618      	mov	r0, r3
 800e7b6:	3738      	adds	r7, #56	; 0x38
 800e7b8:	46bd      	mov	sp, r7
 800e7ba:	bd80      	pop	{r7, pc}
 800e7bc:	18000f3a 	.word	0x18000f3a

0800e7c0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800e7c0:	b580      	push	{r7, lr}
 800e7c2:	b086      	sub	sp, #24
 800e7c4:	af00      	add	r7, sp, #0
 800e7c6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e7cc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7d2:	2b1f      	cmp	r3, #31
 800e7d4:	d936      	bls.n	800e844 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800e7d6:	2300      	movs	r3, #0
 800e7d8:	617b      	str	r3, [r7, #20]
 800e7da:	e027      	b.n	800e82c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	4618      	mov	r0, r3
 800e7e2:	f002 fbfd 	bl	8010fe0 <SDMMC_ReadFIFO>
 800e7e6:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	b2da      	uxtb	r2, r3
 800e7ec:	693b      	ldr	r3, [r7, #16]
 800e7ee:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e7f0:	693b      	ldr	r3, [r7, #16]
 800e7f2:	3301      	adds	r3, #1
 800e7f4:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	0a1b      	lsrs	r3, r3, #8
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	693b      	ldr	r3, [r7, #16]
 800e7fe:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e800:	693b      	ldr	r3, [r7, #16]
 800e802:	3301      	adds	r3, #1
 800e804:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800e806:	68fb      	ldr	r3, [r7, #12]
 800e808:	0c1b      	lsrs	r3, r3, #16
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	693b      	ldr	r3, [r7, #16]
 800e80e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	3301      	adds	r3, #1
 800e814:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	0e1b      	lsrs	r3, r3, #24
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	693b      	ldr	r3, [r7, #16]
 800e81e:	701a      	strb	r2, [r3, #0]
      tmp++;
 800e820:	693b      	ldr	r3, [r7, #16]
 800e822:	3301      	adds	r3, #1
 800e824:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800e826:	697b      	ldr	r3, [r7, #20]
 800e828:	3301      	adds	r3, #1
 800e82a:	617b      	str	r3, [r7, #20]
 800e82c:	697b      	ldr	r3, [r7, #20]
 800e82e:	2b07      	cmp	r3, #7
 800e830:	d9d4      	bls.n	800e7dc <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	693a      	ldr	r2, [r7, #16]
 800e836:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800e838:	687b      	ldr	r3, [r7, #4]
 800e83a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e83c:	f1a3 0220 	sub.w	r2, r3, #32
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800e844:	bf00      	nop
 800e846:	3718      	adds	r7, #24
 800e848:	46bd      	mov	sp, r7
 800e84a:	bd80      	pop	{r7, pc}

0800e84c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800e84c:	b580      	push	{r7, lr}
 800e84e:	b086      	sub	sp, #24
 800e850:	af00      	add	r7, sp, #0
 800e852:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	6a1b      	ldr	r3, [r3, #32]
 800e858:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e85e:	2b1f      	cmp	r3, #31
 800e860:	d93a      	bls.n	800e8d8 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800e862:	2300      	movs	r3, #0
 800e864:	617b      	str	r3, [r7, #20]
 800e866:	e02b      	b.n	800e8c0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800e868:	693b      	ldr	r3, [r7, #16]
 800e86a:	781b      	ldrb	r3, [r3, #0]
 800e86c:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e86e:	693b      	ldr	r3, [r7, #16]
 800e870:	3301      	adds	r3, #1
 800e872:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	781b      	ldrb	r3, [r3, #0]
 800e878:	021a      	lsls	r2, r3, #8
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	4313      	orrs	r3, r2
 800e87e:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	3301      	adds	r3, #1
 800e884:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800e886:	693b      	ldr	r3, [r7, #16]
 800e888:	781b      	ldrb	r3, [r3, #0]
 800e88a:	041a      	lsls	r2, r3, #16
 800e88c:	68fb      	ldr	r3, [r7, #12]
 800e88e:	4313      	orrs	r3, r2
 800e890:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e892:	693b      	ldr	r3, [r7, #16]
 800e894:	3301      	adds	r3, #1
 800e896:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	781b      	ldrb	r3, [r3, #0]
 800e89c:	061a      	lsls	r2, r3, #24
 800e89e:	68fb      	ldr	r3, [r7, #12]
 800e8a0:	4313      	orrs	r3, r2
 800e8a2:	60fb      	str	r3, [r7, #12]
      tmp++;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	f107 020c 	add.w	r2, r7, #12
 800e8b2:	4611      	mov	r1, r2
 800e8b4:	4618      	mov	r0, r3
 800e8b6:	f002 fba0 	bl	8010ffa <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800e8ba:	697b      	ldr	r3, [r7, #20]
 800e8bc:	3301      	adds	r3, #1
 800e8be:	617b      	str	r3, [r7, #20]
 800e8c0:	697b      	ldr	r3, [r7, #20]
 800e8c2:	2b07      	cmp	r3, #7
 800e8c4:	d9d0      	bls.n	800e868 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	693a      	ldr	r2, [r7, #16]
 800e8ca:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e8d0:	f1a3 0220 	sub.w	r2, r3, #32
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800e8d8:	bf00      	nop
 800e8da:	3718      	adds	r7, #24
 800e8dc:	46bd      	mov	sp, r7
 800e8de:	bd80      	pop	{r7, pc}

0800e8e0 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8e0:	b480      	push	{r7}
 800e8e2:	b083      	sub	sp, #12
 800e8e4:	af00      	add	r7, sp, #0
 800e8e6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e8e8:	bf00      	nop
 800e8ea:	370c      	adds	r7, #12
 800e8ec:	46bd      	mov	sp, r7
 800e8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8f2:	4770      	bx	lr

0800e8f4 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b083      	sub	sp, #12
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e8fc:	bf00      	nop
 800e8fe:	370c      	adds	r7, #12
 800e900:	46bd      	mov	sp, r7
 800e902:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e906:	4770      	bx	lr

0800e908 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800e908:	b480      	push	{r7}
 800e90a:	b083      	sub	sp, #12
 800e90c:	af00      	add	r7, sp, #0
 800e90e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800e910:	bf00      	nop
 800e912:	370c      	adds	r7, #12
 800e914:	46bd      	mov	sp, r7
 800e916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e91a:	4770      	bx	lr

0800e91c <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b083      	sub	sp, #12
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800e924:	bf00      	nop
 800e926:	370c      	adds	r7, #12
 800e928:	46bd      	mov	sp, r7
 800e92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e92e:	4770      	bx	lr

0800e930 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800e930:	b580      	push	{r7, lr}
 800e932:	b084      	sub	sp, #16
 800e934:	af00      	add	r7, sp, #0
 800e936:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800e938:	2300      	movs	r3, #0
 800e93a:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d101      	bne.n	800e946 <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800e942:	2301      	movs	r3, #1
 800e944:	e0e2      	b.n	800eb0c <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	2200      	movs	r2, #0
 800e94a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	681b      	ldr	r3, [r3, #0]
 800e950:	4a70      	ldr	r2, [pc, #448]	; (800eb14 <HAL_SPI_Init+0x1e4>)
 800e952:	4293      	cmp	r3, r2
 800e954:	d00f      	beq.n	800e976 <HAL_SPI_Init+0x46>
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	681b      	ldr	r3, [r3, #0]
 800e95a:	4a6f      	ldr	r2, [pc, #444]	; (800eb18 <HAL_SPI_Init+0x1e8>)
 800e95c:	4293      	cmp	r3, r2
 800e95e:	d00a      	beq.n	800e976 <HAL_SPI_Init+0x46>
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	4a6d      	ldr	r2, [pc, #436]	; (800eb1c <HAL_SPI_Init+0x1ec>)
 800e966:	4293      	cmp	r3, r2
 800e968:	d005      	beq.n	800e976 <HAL_SPI_Init+0x46>
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	68db      	ldr	r3, [r3, #12]
 800e96e:	2b0f      	cmp	r3, #15
 800e970:	d901      	bls.n	800e976 <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800e972:	2301      	movs	r3, #1
 800e974:	e0ca      	b.n	800eb0c <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f001 f870 	bl	800fa5c <SPI_GetPacketSize>
 800e97c:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	4a64      	ldr	r2, [pc, #400]	; (800eb14 <HAL_SPI_Init+0x1e4>)
 800e984:	4293      	cmp	r3, r2
 800e986:	d00c      	beq.n	800e9a2 <HAL_SPI_Init+0x72>
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	681b      	ldr	r3, [r3, #0]
 800e98c:	4a62      	ldr	r2, [pc, #392]	; (800eb18 <HAL_SPI_Init+0x1e8>)
 800e98e:	4293      	cmp	r3, r2
 800e990:	d007      	beq.n	800e9a2 <HAL_SPI_Init+0x72>
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	4a61      	ldr	r2, [pc, #388]	; (800eb1c <HAL_SPI_Init+0x1ec>)
 800e998:	4293      	cmp	r3, r2
 800e99a:	d002      	beq.n	800e9a2 <HAL_SPI_Init+0x72>
 800e99c:	68bb      	ldr	r3, [r7, #8]
 800e99e:	2b08      	cmp	r3, #8
 800e9a0:	d811      	bhi.n	800e9c6 <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800e9a6:	4a5b      	ldr	r2, [pc, #364]	; (800eb14 <HAL_SPI_Init+0x1e4>)
 800e9a8:	4293      	cmp	r3, r2
 800e9aa:	d009      	beq.n	800e9c0 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800e9ac:	687b      	ldr	r3, [r7, #4]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	4a59      	ldr	r2, [pc, #356]	; (800eb18 <HAL_SPI_Init+0x1e8>)
 800e9b2:	4293      	cmp	r3, r2
 800e9b4:	d004      	beq.n	800e9c0 <HAL_SPI_Init+0x90>
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	4a58      	ldr	r2, [pc, #352]	; (800eb1c <HAL_SPI_Init+0x1ec>)
 800e9bc:	4293      	cmp	r3, r2
 800e9be:	d104      	bne.n	800e9ca <HAL_SPI_Init+0x9a>
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	2b10      	cmp	r3, #16
 800e9c4:	d901      	bls.n	800e9ca <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800e9c6:	2301      	movs	r3, #1
 800e9c8:	e0a0      	b.n	800eb0c <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800e9d0:	b2db      	uxtb	r3, r3
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d106      	bne.n	800e9e4 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	2200      	movs	r2, #0
 800e9da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800e9de:	6878      	ldr	r0, [r7, #4]
 800e9e0:	f7f5 fa92 	bl	8003f08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	2202      	movs	r2, #2
 800e9e8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	681a      	ldr	r2, [r3, #0]
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	681b      	ldr	r3, [r3, #0]
 800e9f6:	f022 0201 	bic.w	r2, r2, #1
 800e9fa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	699b      	ldr	r3, [r3, #24]
 800ea00:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ea04:	d110      	bne.n	800ea28 <HAL_SPI_Init+0xf8>
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	685b      	ldr	r3, [r3, #4]
 800ea0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ea0e:	d10b      	bne.n	800ea28 <HAL_SPI_Init+0xf8>
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d107      	bne.n	800ea28 <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681a      	ldr	r2, [r3, #0]
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ea26:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	69da      	ldr	r2, [r3, #28]
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea30:	431a      	orrs	r2, r3
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	431a      	orrs	r2, r3
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea3a:	ea42 0103 	orr.w	r1, r2, r3
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	68da      	ldr	r2, [r3, #12]
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	430a      	orrs	r2, r1
 800ea48:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ea52:	431a      	orrs	r2, r3
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ea58:	431a      	orrs	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	699b      	ldr	r3, [r3, #24]
 800ea5e:	431a      	orrs	r2, r3
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	691b      	ldr	r3, [r3, #16]
 800ea64:	431a      	orrs	r2, r3
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	695b      	ldr	r3, [r3, #20]
 800ea6a:	431a      	orrs	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	6a1b      	ldr	r3, [r3, #32]
 800ea70:	431a      	orrs	r2, r3
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	431a      	orrs	r2, r3
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ea7c:	431a      	orrs	r2, r3
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	689b      	ldr	r3, [r3, #8]
 800ea82:	431a      	orrs	r2, r3
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ea88:	ea42 0103 	orr.w	r1, r2, r3
 800ea8c:	687b      	ldr	r3, [r7, #4]
 800ea8e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	681b      	ldr	r3, [r3, #0]
 800ea94:	430a      	orrs	r2, r1
 800ea96:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d113      	bne.n	800eac8 <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	689b      	ldr	r3, [r3, #8]
 800eaa6:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800eab2:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	689b      	ldr	r3, [r3, #8]
 800eaba:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800eac6:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	681b      	ldr	r3, [r3, #0]
 800eacc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	f022 0201 	bic.w	r2, r2, #1
 800ead6:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	685b      	ldr	r3, [r3, #4]
 800eadc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d00a      	beq.n	800eafa <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	68db      	ldr	r3, [r3, #12]
 800eaea:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	430a      	orrs	r2, r1
 800eaf8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2200      	movs	r2, #0
 800eafe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2201      	movs	r2, #1
 800eb06:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3710      	adds	r7, #16
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd80      	pop	{r7, pc}
 800eb14:	40013000 	.word	0x40013000
 800eb18:	40003800 	.word	0x40003800
 800eb1c:	40003c00 	.word	0x40003c00

0800eb20 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b08a      	sub	sp, #40	; 0x28
 800eb24:	af02      	add	r7, sp, #8
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	603b      	str	r3, [r7, #0]
 800eb2c:	4613      	mov	r3, r2
 800eb2e:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	3320      	adds	r3, #32
 800eb36:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800eb38:	2300      	movs	r3, #0
 800eb3a:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800eb42:	2b01      	cmp	r3, #1
 800eb44:	d101      	bne.n	800eb4a <HAL_SPI_Transmit+0x2a>
 800eb46:	2302      	movs	r3, #2
 800eb48:	e1d7      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	2201      	movs	r2, #1
 800eb4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800eb52:	f7f5 fd07 	bl	8004564 <HAL_GetTick>
 800eb56:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800eb58:	68fb      	ldr	r3, [r7, #12]
 800eb5a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d007      	beq.n	800eb74 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800eb64:	2302      	movs	r3, #2
 800eb66:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	2200      	movs	r2, #0
 800eb6c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb70:	7efb      	ldrb	r3, [r7, #27]
 800eb72:	e1c2      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d002      	beq.n	800eb80 <HAL_SPI_Transmit+0x60>
 800eb7a:	88fb      	ldrh	r3, [r7, #6]
 800eb7c:	2b00      	cmp	r3, #0
 800eb7e:	d107      	bne.n	800eb90 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800eb80:	2301      	movs	r3, #1
 800eb82:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800eb84:	68fb      	ldr	r3, [r7, #12]
 800eb86:	2200      	movs	r2, #0
 800eb88:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800eb8c:	7efb      	ldrb	r3, [r7, #27]
 800eb8e:	e1b4      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2203      	movs	r2, #3
 800eb94:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800eb98:	68fb      	ldr	r3, [r7, #12]
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	68ba      	ldr	r2, [r7, #8]
 800eba4:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800eba6:	68fb      	ldr	r3, [r7, #12]
 800eba8:	88fa      	ldrh	r2, [r7, #6]
 800ebaa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800ebae:	68fb      	ldr	r3, [r7, #12]
 800ebb0:	88fa      	ldrh	r2, [r7, #6]
 800ebb2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800ebb6:	68fb      	ldr	r3, [r7, #12]
 800ebb8:	2200      	movs	r2, #0
 800ebba:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	2200      	movs	r2, #0
 800ebc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800ebcc:	68fb      	ldr	r3, [r7, #12]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	689b      	ldr	r3, [r3, #8]
 800ebdc:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800ebe0:	d107      	bne.n	800ebf2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	681a      	ldr	r2, [r3, #0]
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ebf0:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800ebf2:	68fb      	ldr	r3, [r7, #12]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	685a      	ldr	r2, [r3, #4]
 800ebf8:	4b96      	ldr	r3, [pc, #600]	; (800ee54 <HAL_SPI_Transmit+0x334>)
 800ebfa:	4013      	ands	r3, r2
 800ebfc:	88f9      	ldrh	r1, [r7, #6]
 800ebfe:	68fa      	ldr	r2, [r7, #12]
 800ec00:	6812      	ldr	r2, [r2, #0]
 800ec02:	430b      	orrs	r3, r1
 800ec04:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	681b      	ldr	r3, [r3, #0]
 800ec0a:	681a      	ldr	r2, [r3, #0]
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	f042 0201 	orr.w	r2, r2, #1
 800ec14:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	685b      	ldr	r3, [r3, #4]
 800ec1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ec1e:	d107      	bne.n	800ec30 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800ec20:	68fb      	ldr	r3, [r7, #12]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	681a      	ldr	r2, [r3, #0]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	681b      	ldr	r3, [r3, #0]
 800ec2a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ec2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800ec30:	68fb      	ldr	r3, [r7, #12]
 800ec32:	68db      	ldr	r3, [r3, #12]
 800ec34:	2b0f      	cmp	r3, #15
 800ec36:	d947      	bls.n	800ecc8 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ec38:	e03f      	b.n	800ecba <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ec3a:	68fb      	ldr	r3, [r7, #12]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	695b      	ldr	r3, [r3, #20]
 800ec40:	f003 0302 	and.w	r3, r3, #2
 800ec44:	2b02      	cmp	r3, #2
 800ec46:	d114      	bne.n	800ec72 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	6812      	ldr	r2, [r2, #0]
 800ec52:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800ec54:	68fb      	ldr	r3, [r7, #12]
 800ec56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ec58:	1d1a      	adds	r2, r3, #4
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800ec5e:	68fb      	ldr	r3, [r7, #12]
 800ec60:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ec64:	b29b      	uxth	r3, r3
 800ec66:	3b01      	subs	r3, #1
 800ec68:	b29a      	uxth	r2, r3
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ec70:	e023      	b.n	800ecba <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ec72:	f7f5 fc77 	bl	8004564 <HAL_GetTick>
 800ec76:	4602      	mov	r2, r0
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	1ad3      	subs	r3, r2, r3
 800ec7c:	683a      	ldr	r2, [r7, #0]
 800ec7e:	429a      	cmp	r2, r3
 800ec80:	d803      	bhi.n	800ec8a <HAL_SPI_Transmit+0x16a>
 800ec82:	683b      	ldr	r3, [r7, #0]
 800ec84:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec88:	d102      	bne.n	800ec90 <HAL_SPI_Transmit+0x170>
 800ec8a:	683b      	ldr	r3, [r7, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d114      	bne.n	800ecba <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ec90:	68f8      	ldr	r0, [r7, #12]
 800ec92:	f000 fe15 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ec96:	68fb      	ldr	r3, [r7, #12]
 800ec98:	2200      	movs	r2, #0
 800ec9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ec9e:	68fb      	ldr	r3, [r7, #12]
 800eca0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eca4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800eca8:	68fb      	ldr	r3, [r7, #12]
 800ecaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	2201      	movs	r2, #1
 800ecb2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ecb6:	2301      	movs	r3, #1
 800ecb8:	e11f      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ecba:	68fb      	ldr	r3, [r7, #12]
 800ecbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ecc0:	b29b      	uxth	r3, r3
 800ecc2:	2b00      	cmp	r3, #0
 800ecc4:	d1b9      	bne.n	800ec3a <HAL_SPI_Transmit+0x11a>
 800ecc6:	e0f2      	b.n	800eeae <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	68db      	ldr	r3, [r3, #12]
 800eccc:	2b07      	cmp	r3, #7
 800ecce:	f240 80e7 	bls.w	800eea0 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800ecd2:	e05d      	b.n	800ed90 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ecd4:	68fb      	ldr	r3, [r7, #12]
 800ecd6:	681b      	ldr	r3, [r3, #0]
 800ecd8:	695b      	ldr	r3, [r3, #20]
 800ecda:	f003 0302 	and.w	r3, r3, #2
 800ecde:	2b02      	cmp	r3, #2
 800ece0:	d132      	bne.n	800ed48 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ece2:	68fb      	ldr	r3, [r7, #12]
 800ece4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ece8:	b29b      	uxth	r3, r3
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d918      	bls.n	800ed20 <HAL_SPI_Transmit+0x200>
 800ecee:	68fb      	ldr	r3, [r7, #12]
 800ecf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d014      	beq.n	800ed20 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ecf6:	68fb      	ldr	r3, [r7, #12]
 800ecf8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	6812      	ldr	r2, [r2, #0]
 800ed00:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed06:	1d1a      	adds	r2, r3, #4
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ed0c:	68fb      	ldr	r3, [r7, #12]
 800ed0e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed12:	b29b      	uxth	r3, r3
 800ed14:	3b02      	subs	r3, #2
 800ed16:	b29a      	uxth	r2, r3
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed1e:	e037      	b.n	800ed90 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ed20:	68fb      	ldr	r3, [r7, #12]
 800ed22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed24:	881a      	ldrh	r2, [r3, #0]
 800ed26:	69fb      	ldr	r3, [r7, #28]
 800ed28:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ed2e:	1c9a      	adds	r2, r3, #2
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed3a:	b29b      	uxth	r3, r3
 800ed3c:	3b01      	subs	r3, #1
 800ed3e:	b29a      	uxth	r2, r3
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ed46:	e023      	b.n	800ed90 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ed48:	f7f5 fc0c 	bl	8004564 <HAL_GetTick>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	697b      	ldr	r3, [r7, #20]
 800ed50:	1ad3      	subs	r3, r2, r3
 800ed52:	683a      	ldr	r2, [r7, #0]
 800ed54:	429a      	cmp	r2, r3
 800ed56:	d803      	bhi.n	800ed60 <HAL_SPI_Transmit+0x240>
 800ed58:	683b      	ldr	r3, [r7, #0]
 800ed5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed5e:	d102      	bne.n	800ed66 <HAL_SPI_Transmit+0x246>
 800ed60:	683b      	ldr	r3, [r7, #0]
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d114      	bne.n	800ed90 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ed66:	68f8      	ldr	r0, [r7, #12]
 800ed68:	f000 fdaa 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ed74:	68fb      	ldr	r3, [r7, #12]
 800ed76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed7a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ed7e:	68fb      	ldr	r3, [r7, #12]
 800ed80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ed84:	68fb      	ldr	r3, [r7, #12]
 800ed86:	2201      	movs	r2, #1
 800ed88:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ed8c:	2301      	movs	r3, #1
 800ed8e:	e0b4      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800ed90:	68fb      	ldr	r3, [r7, #12]
 800ed92:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ed96:	b29b      	uxth	r3, r3
 800ed98:	2b00      	cmp	r3, #0
 800ed9a:	d19b      	bne.n	800ecd4 <HAL_SPI_Transmit+0x1b4>
 800ed9c:	e087      	b.n	800eeae <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	695b      	ldr	r3, [r3, #20]
 800eda4:	f003 0302 	and.w	r3, r3, #2
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	d155      	bne.n	800ee58 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edb2:	b29b      	uxth	r3, r3
 800edb4:	2b03      	cmp	r3, #3
 800edb6:	d918      	bls.n	800edea <HAL_SPI_Transmit+0x2ca>
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edbc:	2b40      	cmp	r3, #64	; 0x40
 800edbe:	d914      	bls.n	800edea <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800edc4:	68fb      	ldr	r3, [r7, #12]
 800edc6:	681b      	ldr	r3, [r3, #0]
 800edc8:	6812      	ldr	r2, [r2, #0]
 800edca:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800edd0:	1d1a      	adds	r2, r3, #4
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800edd6:	68fb      	ldr	r3, [r7, #12]
 800edd8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eddc:	b29b      	uxth	r3, r3
 800edde:	3b04      	subs	r3, #4
 800ede0:	b29a      	uxth	r2, r3
 800ede2:	68fb      	ldr	r3, [r7, #12]
 800ede4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ede8:	e05a      	b.n	800eea0 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800edf0:	b29b      	uxth	r3, r3
 800edf2:	2b01      	cmp	r3, #1
 800edf4:	d917      	bls.n	800ee26 <HAL_SPI_Transmit+0x306>
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	d013      	beq.n	800ee26 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800edfe:	68fb      	ldr	r3, [r7, #12]
 800ee00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee02:	881a      	ldrh	r2, [r3, #0]
 800ee04:	69fb      	ldr	r3, [r7, #28]
 800ee06:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ee08:	68fb      	ldr	r3, [r7, #12]
 800ee0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee0c:	1c9a      	adds	r2, r3, #2
 800ee0e:	68fb      	ldr	r3, [r7, #12]
 800ee10:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ee12:	68fb      	ldr	r3, [r7, #12]
 800ee14:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee18:	b29b      	uxth	r3, r3
 800ee1a:	3b02      	subs	r3, #2
 800ee1c:	b29a      	uxth	r2, r3
 800ee1e:	68fb      	ldr	r3, [r7, #12]
 800ee20:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee24:	e03c      	b.n	800eea0 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ee2a:	68fb      	ldr	r3, [r7, #12]
 800ee2c:	681b      	ldr	r3, [r3, #0]
 800ee2e:	3320      	adds	r3, #32
 800ee30:	7812      	ldrb	r2, [r2, #0]
 800ee32:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ee38:	1c5a      	adds	r2, r3, #1
 800ee3a:	68fb      	ldr	r3, [r7, #12]
 800ee3c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ee3e:	68fb      	ldr	r3, [r7, #12]
 800ee40:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ee44:	b29b      	uxth	r3, r3
 800ee46:	3b01      	subs	r3, #1
 800ee48:	b29a      	uxth	r2, r3
 800ee4a:	68fb      	ldr	r3, [r7, #12]
 800ee4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800ee50:	e026      	b.n	800eea0 <HAL_SPI_Transmit+0x380>
 800ee52:	bf00      	nop
 800ee54:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ee58:	f7f5 fb84 	bl	8004564 <HAL_GetTick>
 800ee5c:	4602      	mov	r2, r0
 800ee5e:	697b      	ldr	r3, [r7, #20]
 800ee60:	1ad3      	subs	r3, r2, r3
 800ee62:	683a      	ldr	r2, [r7, #0]
 800ee64:	429a      	cmp	r2, r3
 800ee66:	d803      	bhi.n	800ee70 <HAL_SPI_Transmit+0x350>
 800ee68:	683b      	ldr	r3, [r7, #0]
 800ee6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee6e:	d102      	bne.n	800ee76 <HAL_SPI_Transmit+0x356>
 800ee70:	683b      	ldr	r3, [r7, #0]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d114      	bne.n	800eea0 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800ee76:	68f8      	ldr	r0, [r7, #12]
 800ee78:	f000 fd22 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	2200      	movs	r2, #0
 800ee80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800ee84:	68fb      	ldr	r3, [r7, #12]
 800ee86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ee8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800ee94:	68fb      	ldr	r3, [r7, #12]
 800ee96:	2201      	movs	r2, #1
 800ee98:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e02c      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800eea6:	b29b      	uxth	r3, r3
 800eea8:	2b00      	cmp	r3, #0
 800eeaa:	f47f af78 	bne.w	800ed9e <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800eeae:	683b      	ldr	r3, [r7, #0]
 800eeb0:	9300      	str	r3, [sp, #0]
 800eeb2:	697b      	ldr	r3, [r7, #20]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	2108      	movs	r1, #8
 800eeb8:	68f8      	ldr	r0, [r7, #12]
 800eeba:	f000 fda1 	bl	800fa00 <SPI_WaitOnFlagUntilTimeout>
 800eebe:	4603      	mov	r3, r0
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d007      	beq.n	800eed4 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eeca:	f043 0220 	orr.w	r2, r3, #32
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800eed4:	68f8      	ldr	r0, [r7, #12]
 800eed6:	f000 fcf3 	bl	800f8c0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	2200      	movs	r2, #0
 800eede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	2201      	movs	r2, #1
 800eee6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d001      	beq.n	800eef8 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800eef4:	2301      	movs	r3, #1
 800eef6:	e000      	b.n	800eefa <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800eef8:	7efb      	ldrb	r3, [r7, #27]
}
 800eefa:	4618      	mov	r0, r3
 800eefc:	3720      	adds	r7, #32
 800eefe:	46bd      	mov	sp, r7
 800ef00:	bd80      	pop	{r7, pc}
 800ef02:	bf00      	nop

0800ef04 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b08a      	sub	sp, #40	; 0x28
 800ef08:	af02      	add	r7, sp, #8
 800ef0a:	60f8      	str	r0, [r7, #12]
 800ef0c:	60b9      	str	r1, [r7, #8]
 800ef0e:	603b      	str	r3, [r7, #0]
 800ef10:	4613      	mov	r3, r2
 800ef12:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ef14:	2300      	movs	r3, #0
 800ef16:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800ef18:	68fb      	ldr	r3, [r7, #12]
 800ef1a:	681b      	ldr	r3, [r3, #0]
 800ef1c:	3330      	adds	r3, #48	; 0x30
 800ef1e:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800ef28:	d112      	bne.n	800ef50 <HAL_SPI_Receive+0x4c>
 800ef2a:	68fb      	ldr	r3, [r7, #12]
 800ef2c:	689b      	ldr	r3, [r3, #8]
 800ef2e:	2b00      	cmp	r3, #0
 800ef30:	d10e      	bne.n	800ef50 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	2204      	movs	r2, #4
 800ef36:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800ef3a:	88fa      	ldrh	r2, [r7, #6]
 800ef3c:	683b      	ldr	r3, [r7, #0]
 800ef3e:	9300      	str	r3, [sp, #0]
 800ef40:	4613      	mov	r3, r2
 800ef42:	68ba      	ldr	r2, [r7, #8]
 800ef44:	68b9      	ldr	r1, [r7, #8]
 800ef46:	68f8      	ldr	r0, [r7, #12]
 800ef48:	f000 f9ce 	bl	800f2e8 <HAL_SPI_TransmitReceive>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	e1c7      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ef56:	2b01      	cmp	r3, #1
 800ef58:	d101      	bne.n	800ef5e <HAL_SPI_Receive+0x5a>
 800ef5a:	2302      	movs	r3, #2
 800ef5c:	e1c0      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
 800ef5e:	68fb      	ldr	r3, [r7, #12]
 800ef60:	2201      	movs	r2, #1
 800ef62:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ef66:	f7f5 fafd 	bl	8004564 <HAL_GetTick>
 800ef6a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b01      	cmp	r3, #1
 800ef76:	d007      	beq.n	800ef88 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800ef78:	2302      	movs	r3, #2
 800ef7a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef7c:	68fb      	ldr	r3, [r7, #12]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800ef84:	7ffb      	ldrb	r3, [r7, #31]
 800ef86:	e1ab      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	2b00      	cmp	r3, #0
 800ef8c:	d002      	beq.n	800ef94 <HAL_SPI_Receive+0x90>
 800ef8e:	88fb      	ldrh	r3, [r7, #6]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d107      	bne.n	800efa4 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800ef94:	2301      	movs	r3, #1
 800ef96:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800ef98:	68fb      	ldr	r3, [r7, #12]
 800ef9a:	2200      	movs	r2, #0
 800ef9c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800efa0:	7ffb      	ldrb	r3, [r7, #31]
 800efa2:	e19d      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	2204      	movs	r2, #4
 800efa8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800efac:	68fb      	ldr	r3, [r7, #12]
 800efae:	2200      	movs	r2, #0
 800efb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	68ba      	ldr	r2, [r7, #8]
 800efb8:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	88fa      	ldrh	r2, [r7, #6]
 800efbe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800efc2:	68fb      	ldr	r3, [r7, #12]
 800efc4:	88fa      	ldrh	r2, [r7, #6]
 800efc6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800efca:	68fb      	ldr	r3, [r7, #12]
 800efcc:	2200      	movs	r2, #0
 800efce:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800efd0:	68fb      	ldr	r3, [r7, #12]
 800efd2:	2200      	movs	r2, #0
 800efd4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	2200      	movs	r2, #0
 800efdc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	2200      	movs	r2, #0
 800efe4:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800efe6:	68fb      	ldr	r3, [r7, #12]
 800efe8:	2200      	movs	r2, #0
 800efea:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	689b      	ldr	r3, [r3, #8]
 800eff0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800eff4:	d107      	bne.n	800f006 <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800eff6:	68fb      	ldr	r3, [r7, #12]
 800eff8:	681b      	ldr	r3, [r3, #0]
 800effa:	681a      	ldr	r2, [r3, #0]
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f004:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	685a      	ldr	r2, [r3, #4]
 800f00c:	4b94      	ldr	r3, [pc, #592]	; (800f260 <HAL_SPI_Receive+0x35c>)
 800f00e:	4013      	ands	r3, r2
 800f010:	88f9      	ldrh	r1, [r7, #6]
 800f012:	68fa      	ldr	r2, [r7, #12]
 800f014:	6812      	ldr	r2, [r2, #0]
 800f016:	430b      	orrs	r3, r1
 800f018:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	681a      	ldr	r2, [r3, #0]
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	f042 0201 	orr.w	r2, r2, #1
 800f028:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f02a:	68fb      	ldr	r3, [r7, #12]
 800f02c:	685b      	ldr	r3, [r3, #4]
 800f02e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f032:	d107      	bne.n	800f044 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f034:	68fb      	ldr	r3, [r7, #12]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	681a      	ldr	r2, [r3, #0]
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f042:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f044:	68fb      	ldr	r3, [r7, #12]
 800f046:	68db      	ldr	r3, [r3, #12]
 800f048:	2b0f      	cmp	r3, #15
 800f04a:	d948      	bls.n	800f0de <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f04c:	e040      	b.n	800f0d0 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f04e:	68fb      	ldr	r3, [r7, #12]
 800f050:	681b      	ldr	r3, [r3, #0]
 800f052:	695a      	ldr	r2, [r3, #20]
 800f054:	f248 0308 	movw	r3, #32776	; 0x8008
 800f058:	4013      	ands	r3, r2
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d014      	beq.n	800f088 <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f066:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f068:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f06e:	1d1a      	adds	r2, r3, #4
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f07a:	b29b      	uxth	r3, r3
 800f07c:	3b01      	subs	r3, #1
 800f07e:	b29a      	uxth	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f086:	e023      	b.n	800f0d0 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f088:	f7f5 fa6c 	bl	8004564 <HAL_GetTick>
 800f08c:	4602      	mov	r2, r0
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	1ad3      	subs	r3, r2, r3
 800f092:	683a      	ldr	r2, [r7, #0]
 800f094:	429a      	cmp	r2, r3
 800f096:	d803      	bhi.n	800f0a0 <HAL_SPI_Receive+0x19c>
 800f098:	683b      	ldr	r3, [r7, #0]
 800f09a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f09e:	d102      	bne.n	800f0a6 <HAL_SPI_Receive+0x1a2>
 800f0a0:	683b      	ldr	r3, [r7, #0]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d114      	bne.n	800f0d0 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f0a6:	68f8      	ldr	r0, [r7, #12]
 800f0a8:	f000 fc0a 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f0ac:	68fb      	ldr	r3, [r7, #12]
 800f0ae:	2200      	movs	r2, #0
 800f0b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f0b4:	68fb      	ldr	r3, [r7, #12]
 800f0b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0ba:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2201      	movs	r2, #1
 800f0c8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f0cc:	2301      	movs	r3, #1
 800f0ce:	e107      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f0d6:	b29b      	uxth	r3, r3
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d1b8      	bne.n	800f04e <HAL_SPI_Receive+0x14a>
 800f0dc:	e0ed      	b.n	800f2ba <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	68db      	ldr	r3, [r3, #12]
 800f0e2:	2b07      	cmp	r3, #7
 800f0e4:	f240 80e2 	bls.w	800f2ac <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f0e8:	e05b      	b.n	800f1a2 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	695b      	ldr	r3, [r3, #20]
 800f0f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d030      	beq.n	800f15a <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f0f8:	68fb      	ldr	r3, [r7, #12]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	695b      	ldr	r3, [r3, #20]
 800f0fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f102:	2b00      	cmp	r3, #0
 800f104:	d014      	beq.n	800f130 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	681a      	ldr	r2, [r3, #0]
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f10e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f110:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f112:	68fb      	ldr	r3, [r7, #12]
 800f114:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f116:	1d1a      	adds	r2, r3, #4
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f122:	b29b      	uxth	r3, r3
 800f124:	3b02      	subs	r3, #2
 800f126:	b29a      	uxth	r2, r3
 800f128:	68fb      	ldr	r3, [r7, #12]
 800f12a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f12e:	e038      	b.n	800f1a2 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f134:	69ba      	ldr	r2, [r7, #24]
 800f136:	8812      	ldrh	r2, [r2, #0]
 800f138:	b292      	uxth	r2, r2
 800f13a:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f140:	1c9a      	adds	r2, r3, #2
 800f142:	68fb      	ldr	r3, [r7, #12]
 800f144:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	3b01      	subs	r3, #1
 800f150:	b29a      	uxth	r2, r3
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f158:	e023      	b.n	800f1a2 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f15a:	f7f5 fa03 	bl	8004564 <HAL_GetTick>
 800f15e:	4602      	mov	r2, r0
 800f160:	697b      	ldr	r3, [r7, #20]
 800f162:	1ad3      	subs	r3, r2, r3
 800f164:	683a      	ldr	r2, [r7, #0]
 800f166:	429a      	cmp	r2, r3
 800f168:	d803      	bhi.n	800f172 <HAL_SPI_Receive+0x26e>
 800f16a:	683b      	ldr	r3, [r7, #0]
 800f16c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f170:	d102      	bne.n	800f178 <HAL_SPI_Receive+0x274>
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	2b00      	cmp	r3, #0
 800f176:	d114      	bne.n	800f1a2 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f178:	68f8      	ldr	r0, [r7, #12]
 800f17a:	f000 fba1 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	2200      	movs	r2, #0
 800f182:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f18c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f196:	68fb      	ldr	r3, [r7, #12]
 800f198:	2201      	movs	r2, #1
 800f19a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f19e:	2301      	movs	r3, #1
 800f1a0:	e09e      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f1a2:	68fb      	ldr	r3, [r7, #12]
 800f1a4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1a8:	b29b      	uxth	r3, r3
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d19d      	bne.n	800f0ea <HAL_SPI_Receive+0x1e6>
 800f1ae:	e084      	b.n	800f2ba <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	681b      	ldr	r3, [r3, #0]
 800f1b4:	695b      	ldr	r3, [r3, #20]
 800f1b6:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f1ba:	2b00      	cmp	r3, #0
 800f1bc:	d052      	beq.n	800f264 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	681b      	ldr	r3, [r3, #0]
 800f1c2:	695b      	ldr	r3, [r3, #20]
 800f1c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d014      	beq.n	800f1f6 <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f1cc:	68fb      	ldr	r3, [r7, #12]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	68fb      	ldr	r3, [r7, #12]
 800f1d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f1d6:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f1d8:	68fb      	ldr	r3, [r7, #12]
 800f1da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f1dc:	1d1a      	adds	r2, r3, #4
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1e8:	b29b      	uxth	r3, r3
 800f1ea:	3b04      	subs	r3, #4
 800f1ec:	b29a      	uxth	r2, r3
 800f1ee:	68fb      	ldr	r3, [r7, #12]
 800f1f0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1f4:	e05a      	b.n	800f2ac <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f1f6:	68fb      	ldr	r3, [r7, #12]
 800f1f8:	681b      	ldr	r3, [r3, #0]
 800f1fa:	695b      	ldr	r3, [r3, #20]
 800f1fc:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f200:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f204:	d914      	bls.n	800f230 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f206:	68fb      	ldr	r3, [r7, #12]
 800f208:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f20a:	69ba      	ldr	r2, [r7, #24]
 800f20c:	8812      	ldrh	r2, [r2, #0]
 800f20e:	b292      	uxth	r2, r2
 800f210:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f216:	1c9a      	adds	r2, r3, #2
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f222:	b29b      	uxth	r3, r3
 800f224:	3b02      	subs	r3, #2
 800f226:	b29a      	uxth	r2, r3
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f22e:	e03d      	b.n	800f2ac <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f230:	68fb      	ldr	r3, [r7, #12]
 800f232:	681b      	ldr	r3, [r3, #0]
 800f234:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f238:	68fb      	ldr	r3, [r7, #12]
 800f23a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f23c:	7812      	ldrb	r2, [r2, #0]
 800f23e:	b2d2      	uxtb	r2, r2
 800f240:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f242:	68fb      	ldr	r3, [r7, #12]
 800f244:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f246:	1c5a      	adds	r2, r3, #1
 800f248:	68fb      	ldr	r3, [r7, #12]
 800f24a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f252:	b29b      	uxth	r3, r3
 800f254:	3b01      	subs	r3, #1
 800f256:	b29a      	uxth	r2, r3
 800f258:	68fb      	ldr	r3, [r7, #12]
 800f25a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f25e:	e025      	b.n	800f2ac <HAL_SPI_Receive+0x3a8>
 800f260:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f264:	f7f5 f97e 	bl	8004564 <HAL_GetTick>
 800f268:	4602      	mov	r2, r0
 800f26a:	697b      	ldr	r3, [r7, #20]
 800f26c:	1ad3      	subs	r3, r2, r3
 800f26e:	683a      	ldr	r2, [r7, #0]
 800f270:	429a      	cmp	r2, r3
 800f272:	d803      	bhi.n	800f27c <HAL_SPI_Receive+0x378>
 800f274:	683b      	ldr	r3, [r7, #0]
 800f276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f27a:	d102      	bne.n	800f282 <HAL_SPI_Receive+0x37e>
 800f27c:	683b      	ldr	r3, [r7, #0]
 800f27e:	2b00      	cmp	r3, #0
 800f280:	d114      	bne.n	800f2ac <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f282:	68f8      	ldr	r0, [r7, #12]
 800f284:	f000 fb1c 	bl	800f8c0 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	2200      	movs	r2, #0
 800f28c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f290:	68fb      	ldr	r3, [r7, #12]
 800f292:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f2a0:	68fb      	ldr	r3, [r7, #12]
 800f2a2:	2201      	movs	r2, #1
 800f2a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f2a8:	2301      	movs	r3, #1
 800f2aa:	e019      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f2ac:	68fb      	ldr	r3, [r7, #12]
 800f2ae:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f2b2:	b29b      	uxth	r3, r3
 800f2b4:	2b00      	cmp	r3, #0
 800f2b6:	f47f af7b 	bne.w	800f1b0 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f2ba:	68f8      	ldr	r0, [r7, #12]
 800f2bc:	f000 fb00 	bl	800f8c0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	2200      	movs	r2, #0
 800f2c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	2201      	movs	r2, #1
 800f2cc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d001      	beq.n	800f2de <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800f2da:	2301      	movs	r3, #1
 800f2dc:	e000      	b.n	800f2e0 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800f2de:	7ffb      	ldrb	r3, [r7, #31]
}
 800f2e0:	4618      	mov	r0, r3
 800f2e2:	3720      	adds	r7, #32
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	bd80      	pop	{r7, pc}

0800f2e8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800f2e8:	b580      	push	{r7, lr}
 800f2ea:	b08e      	sub	sp, #56	; 0x38
 800f2ec:	af02      	add	r7, sp, #8
 800f2ee:	60f8      	str	r0, [r7, #12]
 800f2f0:	60b9      	str	r1, [r7, #8]
 800f2f2:	607a      	str	r2, [r7, #4]
 800f2f4:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f2fc:	68fb      	ldr	r3, [r7, #12]
 800f2fe:	681b      	ldr	r3, [r3, #0]
 800f300:	3320      	adds	r3, #32
 800f302:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f304:	68fb      	ldr	r3, [r7, #12]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	3330      	adds	r3, #48	; 0x30
 800f30a:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f30c:	68fb      	ldr	r3, [r7, #12]
 800f30e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f312:	2b01      	cmp	r3, #1
 800f314:	d101      	bne.n	800f31a <HAL_SPI_TransmitReceive+0x32>
 800f316:	2302      	movs	r3, #2
 800f318:	e2ce      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
 800f31a:	68fb      	ldr	r3, [r7, #12]
 800f31c:	2201      	movs	r2, #1
 800f31e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f322:	f7f5 f91f 	bl	8004564 <HAL_GetTick>
 800f326:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800f328:	887b      	ldrh	r3, [r7, #2]
 800f32a:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800f32c:	887b      	ldrh	r3, [r7, #2]
 800f32e:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800f330:	68fb      	ldr	r3, [r7, #12]
 800f332:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f336:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800f338:	68fb      	ldr	r3, [r7, #12]
 800f33a:	685b      	ldr	r3, [r3, #4]
 800f33c:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800f33e:	7efb      	ldrb	r3, [r7, #27]
 800f340:	2b01      	cmp	r3, #1
 800f342:	d014      	beq.n	800f36e <HAL_SPI_TransmitReceive+0x86>
 800f344:	697b      	ldr	r3, [r7, #20]
 800f346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f34a:	d106      	bne.n	800f35a <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800f34c:	68fb      	ldr	r3, [r7, #12]
 800f34e:	689b      	ldr	r3, [r3, #8]
 800f350:	2b00      	cmp	r3, #0
 800f352:	d102      	bne.n	800f35a <HAL_SPI_TransmitReceive+0x72>
 800f354:	7efb      	ldrb	r3, [r7, #27]
 800f356:	2b04      	cmp	r3, #4
 800f358:	d009      	beq.n	800f36e <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800f35a:	2302      	movs	r3, #2
 800f35c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f360:	68fb      	ldr	r3, [r7, #12]
 800f362:	2200      	movs	r2, #0
 800f364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f368:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f36c:	e2a4      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	2b00      	cmp	r3, #0
 800f372:	d005      	beq.n	800f380 <HAL_SPI_TransmitReceive+0x98>
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d002      	beq.n	800f380 <HAL_SPI_TransmitReceive+0x98>
 800f37a:	887b      	ldrh	r3, [r7, #2]
 800f37c:	2b00      	cmp	r3, #0
 800f37e:	d109      	bne.n	800f394 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800f380:	2301      	movs	r3, #1
 800f382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	2200      	movs	r2, #0
 800f38a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f38e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f392:	e291      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f39a:	b2db      	uxtb	r3, r3
 800f39c:	2b04      	cmp	r3, #4
 800f39e:	d003      	beq.n	800f3a8 <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800f3a0:	68fb      	ldr	r3, [r7, #12]
 800f3a2:	2205      	movs	r2, #5
 800f3a4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800f3b6:	68fb      	ldr	r3, [r7, #12]
 800f3b8:	887a      	ldrh	r2, [r7, #2]
 800f3ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800f3be:	68fb      	ldr	r3, [r7, #12]
 800f3c0:	887a      	ldrh	r2, [r7, #2]
 800f3c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	68ba      	ldr	r2, [r7, #8]
 800f3ca:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800f3cc:	68fb      	ldr	r3, [r7, #12]
 800f3ce:	887a      	ldrh	r2, [r7, #2]
 800f3d0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800f3d4:	68fb      	ldr	r3, [r7, #12]
 800f3d6:	887a      	ldrh	r2, [r7, #2]
 800f3d8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f3e2:	68fb      	ldr	r3, [r7, #12]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f3e8:	68fb      	ldr	r3, [r7, #12]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	685a      	ldr	r2, [r3, #4]
 800f3ee:	4b9f      	ldr	r3, [pc, #636]	; (800f66c <HAL_SPI_TransmitReceive+0x384>)
 800f3f0:	4013      	ands	r3, r2
 800f3f2:	8879      	ldrh	r1, [r7, #2]
 800f3f4:	68fa      	ldr	r2, [r7, #12]
 800f3f6:	6812      	ldr	r2, [r2, #0]
 800f3f8:	430b      	orrs	r3, r1
 800f3fa:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	681b      	ldr	r3, [r3, #0]
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	681b      	ldr	r3, [r3, #0]
 800f406:	f042 0201 	orr.w	r2, r2, #1
 800f40a:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	685b      	ldr	r3, [r3, #4]
 800f410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f414:	d107      	bne.n	800f426 <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	681a      	ldr	r2, [r3, #0]
 800f41c:	68fb      	ldr	r3, [r7, #12]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f424:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	68db      	ldr	r3, [r3, #12]
 800f42a:	2b0f      	cmp	r3, #15
 800f42c:	d970      	bls.n	800f510 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f42e:	e068      	b.n	800f502 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	695b      	ldr	r3, [r3, #20]
 800f436:	f003 0302 	and.w	r3, r3, #2
 800f43a:	2b02      	cmp	r3, #2
 800f43c:	d11a      	bne.n	800f474 <HAL_SPI_TransmitReceive+0x18c>
 800f43e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f440:	2b00      	cmp	r3, #0
 800f442:	d017      	beq.n	800f474 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	681b      	ldr	r3, [r3, #0]
 800f44c:	6812      	ldr	r2, [r2, #0]
 800f44e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f454:	1d1a      	adds	r2, r3, #4
 800f456:	68fb      	ldr	r3, [r7, #12]
 800f458:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800f45a:	68fb      	ldr	r3, [r7, #12]
 800f45c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f460:	b29b      	uxth	r3, r3
 800f462:	3b01      	subs	r3, #1
 800f464:	b29a      	uxth	r2, r3
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f472:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800f474:	68fb      	ldr	r3, [r7, #12]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	695a      	ldr	r2, [r3, #20]
 800f47a:	f248 0308 	movw	r3, #32776	; 0x8008
 800f47e:	4013      	ands	r3, r2
 800f480:	2b00      	cmp	r3, #0
 800f482:	d01a      	beq.n	800f4ba <HAL_SPI_TransmitReceive+0x1d2>
 800f484:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f486:	2b00      	cmp	r3, #0
 800f488:	d017      	beq.n	800f4ba <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f48a:	68fb      	ldr	r3, [r7, #12]
 800f48c:	681a      	ldr	r2, [r3, #0]
 800f48e:	68fb      	ldr	r3, [r7, #12]
 800f490:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f492:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f494:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f496:	68fb      	ldr	r3, [r7, #12]
 800f498:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f49a:	1d1a      	adds	r2, r3, #4
 800f49c:	68fb      	ldr	r3, [r7, #12]
 800f49e:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4a6:	b29b      	uxth	r3, r3
 800f4a8:	3b01      	subs	r3, #1
 800f4aa:	b29a      	uxth	r2, r3
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800f4b2:	68fb      	ldr	r3, [r7, #12]
 800f4b4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f4b8:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f4ba:	f7f5 f853 	bl	8004564 <HAL_GetTick>
 800f4be:	4602      	mov	r2, r0
 800f4c0:	69fb      	ldr	r3, [r7, #28]
 800f4c2:	1ad3      	subs	r3, r2, r3
 800f4c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d803      	bhi.n	800f4d2 <HAL_SPI_TransmitReceive+0x1ea>
 800f4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4d0:	d102      	bne.n	800f4d8 <HAL_SPI_TransmitReceive+0x1f0>
 800f4d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d114      	bne.n	800f502 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f4d8:	68f8      	ldr	r0, [r7, #12]
 800f4da:	f000 f9f1 	bl	800f8c0 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	2200      	movs	r2, #0
 800f4e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f4ec:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f4f0:	68fb      	ldr	r3, [r7, #12]
 800f4f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f4f6:	68fb      	ldr	r3, [r7, #12]
 800f4f8:	2201      	movs	r2, #1
 800f4fa:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f4fe:	2301      	movs	r3, #1
 800f500:	e1da      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f502:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f504:	2b00      	cmp	r3, #0
 800f506:	d193      	bne.n	800f430 <HAL_SPI_TransmitReceive+0x148>
 800f508:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d190      	bne.n	800f430 <HAL_SPI_TransmitReceive+0x148>
 800f50e:	e1ac      	b.n	800f86a <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f510:	68fb      	ldr	r3, [r7, #12]
 800f512:	68db      	ldr	r3, [r3, #12]
 800f514:	2b07      	cmp	r3, #7
 800f516:	f240 81a0 	bls.w	800f85a <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f51a:	e0a9      	b.n	800f670 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800f51c:	68fb      	ldr	r3, [r7, #12]
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	695b      	ldr	r3, [r3, #20]
 800f522:	f003 0302 	and.w	r3, r3, #2
 800f526:	2b02      	cmp	r3, #2
 800f528:	d139      	bne.n	800f59e <HAL_SPI_TransmitReceive+0x2b6>
 800f52a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f52c:	2b00      	cmp	r3, #0
 800f52e:	d036      	beq.n	800f59e <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f530:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f532:	2b01      	cmp	r3, #1
 800f534:	d91c      	bls.n	800f570 <HAL_SPI_TransmitReceive+0x288>
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d018      	beq.n	800f570 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f53e:	68fb      	ldr	r3, [r7, #12]
 800f540:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	681b      	ldr	r3, [r3, #0]
 800f546:	6812      	ldr	r2, [r2, #0]
 800f548:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f54a:	68fb      	ldr	r3, [r7, #12]
 800f54c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f54e:	1d1a      	adds	r2, r3, #4
 800f550:	68fb      	ldr	r3, [r7, #12]
 800f552:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f554:	68fb      	ldr	r3, [r7, #12]
 800f556:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f55a:	b29b      	uxth	r3, r3
 800f55c:	3b02      	subs	r3, #2
 800f55e:	b29a      	uxth	r2, r3
 800f560:	68fb      	ldr	r3, [r7, #12]
 800f562:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f56c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f56e:	e016      	b.n	800f59e <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f574:	881a      	ldrh	r2, [r3, #0]
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f57a:	68fb      	ldr	r3, [r7, #12]
 800f57c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f57e:	1c9a      	adds	r2, r3, #2
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f58a:	b29b      	uxth	r3, r3
 800f58c:	3b01      	subs	r3, #1
 800f58e:	b29a      	uxth	r2, r3
 800f590:	68fb      	ldr	r3, [r7, #12]
 800f592:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f59c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f59e:	68fb      	ldr	r3, [r7, #12]
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	695b      	ldr	r3, [r3, #20]
 800f5a4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d03a      	beq.n	800f622 <HAL_SPI_TransmitReceive+0x33a>
 800f5ac:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d037      	beq.n	800f622 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f5b2:	68fb      	ldr	r3, [r7, #12]
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	695b      	ldr	r3, [r3, #20]
 800f5b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d018      	beq.n	800f5f2 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f5c0:	68fb      	ldr	r3, [r7, #12]
 800f5c2:	681a      	ldr	r2, [r3, #0]
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f5ca:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f5cc:	68fb      	ldr	r3, [r7, #12]
 800f5ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5d0:	1d1a      	adds	r2, r3, #4
 800f5d2:	68fb      	ldr	r3, [r7, #12]
 800f5d4:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5dc:	b29b      	uxth	r3, r3
 800f5de:	3b02      	subs	r3, #2
 800f5e0:	b29a      	uxth	r2, r3
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f5e8:	68fb      	ldr	r3, [r7, #12]
 800f5ea:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f5ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f5f0:	e017      	b.n	800f622 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f5f2:	68fb      	ldr	r3, [r7, #12]
 800f5f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f5f6:	6a3a      	ldr	r2, [r7, #32]
 800f5f8:	8812      	ldrh	r2, [r2, #0]
 800f5fa:	b292      	uxth	r2, r2
 800f5fc:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f602:	1c9a      	adds	r2, r3, #2
 800f604:	68fb      	ldr	r3, [r7, #12]
 800f606:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f60e:	b29b      	uxth	r3, r3
 800f610:	3b01      	subs	r3, #1
 800f612:	b29a      	uxth	r2, r3
 800f614:	68fb      	ldr	r3, [r7, #12]
 800f616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f61a:	68fb      	ldr	r3, [r7, #12]
 800f61c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f620:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f622:	f7f4 ff9f 	bl	8004564 <HAL_GetTick>
 800f626:	4602      	mov	r2, r0
 800f628:	69fb      	ldr	r3, [r7, #28]
 800f62a:	1ad3      	subs	r3, r2, r3
 800f62c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f62e:	429a      	cmp	r2, r3
 800f630:	d803      	bhi.n	800f63a <HAL_SPI_TransmitReceive+0x352>
 800f632:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f638:	d102      	bne.n	800f640 <HAL_SPI_TransmitReceive+0x358>
 800f63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d117      	bne.n	800f670 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f640:	68f8      	ldr	r0, [r7, #12]
 800f642:	f000 f93d 	bl	800f8c0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f646:	68fb      	ldr	r3, [r7, #12]
 800f648:	2200      	movs	r2, #0
 800f64a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f64e:	68fb      	ldr	r3, [r7, #12]
 800f650:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f654:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f65e:	68fb      	ldr	r3, [r7, #12]
 800f660:	2201      	movs	r2, #1
 800f662:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f666:	2301      	movs	r3, #1
 800f668:	e126      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
 800f66a:	bf00      	nop
 800f66c:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f670:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f672:	2b00      	cmp	r3, #0
 800f674:	f47f af52 	bne.w	800f51c <HAL_SPI_TransmitReceive+0x234>
 800f678:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	f47f af4e 	bne.w	800f51c <HAL_SPI_TransmitReceive+0x234>
 800f680:	e0f3      	b.n	800f86a <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800f682:	68fb      	ldr	r3, [r7, #12]
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	695b      	ldr	r3, [r3, #20]
 800f688:	f003 0302 	and.w	r3, r3, #2
 800f68c:	2b02      	cmp	r3, #2
 800f68e:	d15a      	bne.n	800f746 <HAL_SPI_TransmitReceive+0x45e>
 800f690:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f692:	2b00      	cmp	r3, #0
 800f694:	d057      	beq.n	800f746 <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f698:	2b03      	cmp	r3, #3
 800f69a:	d91c      	bls.n	800f6d6 <HAL_SPI_TransmitReceive+0x3ee>
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6a0:	2b40      	cmp	r3, #64	; 0x40
 800f6a2:	d918      	bls.n	800f6d6 <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6a8:	68fb      	ldr	r3, [r7, #12]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	6812      	ldr	r2, [r2, #0]
 800f6ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6b4:	1d1a      	adds	r2, r3, #4
 800f6b6:	68fb      	ldr	r3, [r7, #12]
 800f6b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6c0:	b29b      	uxth	r3, r3
 800f6c2:	3b04      	subs	r3, #4
 800f6c4:	b29a      	uxth	r2, r3
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6d2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f6d4:	e037      	b.n	800f746 <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f6d6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d91b      	bls.n	800f714 <HAL_SPI_TransmitReceive+0x42c>
 800f6dc:	68fb      	ldr	r3, [r7, #12]
 800f6de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d017      	beq.n	800f714 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f6e4:	68fb      	ldr	r3, [r7, #12]
 800f6e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6e8:	881a      	ldrh	r2, [r3, #0]
 800f6ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6ec:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f6ee:	68fb      	ldr	r3, [r7, #12]
 800f6f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6f2:	1c9a      	adds	r2, r3, #2
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f6f8:	68fb      	ldr	r3, [r7, #12]
 800f6fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6fe:	b29b      	uxth	r3, r3
 800f700:	3b02      	subs	r3, #2
 800f702:	b29a      	uxth	r2, r3
 800f704:	68fb      	ldr	r3, [r7, #12]
 800f706:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f710:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800f712:	e018      	b.n	800f746 <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f714:	68fb      	ldr	r3, [r7, #12]
 800f716:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	681b      	ldr	r3, [r3, #0]
 800f71c:	3320      	adds	r3, #32
 800f71e:	7812      	ldrb	r2, [r2, #0]
 800f720:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f726:	1c5a      	adds	r2, r3, #1
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f732:	b29b      	uxth	r3, r3
 800f734:	3b01      	subs	r3, #1
 800f736:	b29a      	uxth	r2, r3
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f744:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800f746:	68fb      	ldr	r3, [r7, #12]
 800f748:	681b      	ldr	r3, [r3, #0]
 800f74a:	695b      	ldr	r3, [r3, #20]
 800f74c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f750:	2b00      	cmp	r3, #0
 800f752:	d05e      	beq.n	800f812 <HAL_SPI_TransmitReceive+0x52a>
 800f754:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f756:	2b00      	cmp	r3, #0
 800f758:	d05b      	beq.n	800f812 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	681b      	ldr	r3, [r3, #0]
 800f75e:	695b      	ldr	r3, [r3, #20]
 800f760:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f764:	2b00      	cmp	r3, #0
 800f766:	d018      	beq.n	800f79a <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	681a      	ldr	r2, [r3, #0]
 800f76c:	68fb      	ldr	r3, [r7, #12]
 800f76e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f770:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f772:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f778:	1d1a      	adds	r2, r3, #4
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f784:	b29b      	uxth	r3, r3
 800f786:	3b04      	subs	r3, #4
 800f788:	b29a      	uxth	r2, r3
 800f78a:	68fb      	ldr	r3, [r7, #12]
 800f78c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f796:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f798:	e03b      	b.n	800f812 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800f79a:	68fb      	ldr	r3, [r7, #12]
 800f79c:	681b      	ldr	r3, [r3, #0]
 800f79e:	695b      	ldr	r3, [r3, #20]
 800f7a0:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800f7a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800f7a8:	d918      	bls.n	800f7dc <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f7aa:	68fb      	ldr	r3, [r7, #12]
 800f7ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7ae:	6a3a      	ldr	r2, [r7, #32]
 800f7b0:	8812      	ldrh	r2, [r2, #0]
 800f7b2:	b292      	uxth	r2, r2
 800f7b4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f7b6:	68fb      	ldr	r3, [r7, #12]
 800f7b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7ba:	1c9a      	adds	r2, r3, #2
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7c6:	b29b      	uxth	r3, r3
 800f7c8:	3b02      	subs	r3, #2
 800f7ca:	b29a      	uxth	r2, r3
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7d8:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800f7da:	e01a      	b.n	800f812 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7e8:	7812      	ldrb	r2, [r2, #0]
 800f7ea:	b2d2      	uxtb	r2, r2
 800f7ec:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	68fb      	ldr	r3, [r7, #12]
 800f7f6:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	3b01      	subs	r3, #1
 800f802:	b29a      	uxth	r2, r3
 800f804:	68fb      	ldr	r3, [r7, #12]
 800f806:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f810:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f812:	f7f4 fea7 	bl	8004564 <HAL_GetTick>
 800f816:	4602      	mov	r2, r0
 800f818:	69fb      	ldr	r3, [r7, #28]
 800f81a:	1ad3      	subs	r3, r2, r3
 800f81c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f81e:	429a      	cmp	r2, r3
 800f820:	d803      	bhi.n	800f82a <HAL_SPI_TransmitReceive+0x542>
 800f822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f824:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f828:	d102      	bne.n	800f830 <HAL_SPI_TransmitReceive+0x548>
 800f82a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d114      	bne.n	800f85a <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800f830:	68f8      	ldr	r0, [r7, #12]
 800f832:	f000 f845 	bl	800f8c0 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f844:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	2201      	movs	r2, #1
 800f852:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800f856:	2301      	movs	r3, #1
 800f858:	e02e      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800f85a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f47f af10 	bne.w	800f682 <HAL_SPI_TransmitReceive+0x39a>
 800f862:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800f864:	2b00      	cmp	r3, #0
 800f866:	f47f af0c 	bne.w	800f682 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f86a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f86c:	9300      	str	r3, [sp, #0]
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	2200      	movs	r2, #0
 800f872:	2108      	movs	r1, #8
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 f8c3 	bl	800fa00 <SPI_WaitOnFlagUntilTimeout>
 800f87a:	4603      	mov	r3, r0
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d007      	beq.n	800f890 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f886:	f043 0220 	orr.w	r2, r3, #32
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f000 f815 	bl	800f8c0 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f896:	68fb      	ldr	r3, [r7, #12]
 800f898:	2200      	movs	r2, #0
 800f89a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f89e:	68fb      	ldr	r3, [r7, #12]
 800f8a0:	2201      	movs	r2, #1
 800f8a2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f8ac:	2b00      	cmp	r3, #0
 800f8ae:	d001      	beq.n	800f8b4 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 800f8b0:	2301      	movs	r3, #1
 800f8b2:	e001      	b.n	800f8b8 <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 800f8b4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800f8b8:	4618      	mov	r0, r3
 800f8ba:	3730      	adds	r7, #48	; 0x30
 800f8bc:	46bd      	mov	sp, r7
 800f8be:	bd80      	pop	{r7, pc}

0800f8c0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800f8c0:	b480      	push	{r7}
 800f8c2:	b085      	sub	sp, #20
 800f8c4:	af00      	add	r7, sp, #0
 800f8c6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	695b      	ldr	r3, [r3, #20]
 800f8ce:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	681b      	ldr	r3, [r3, #0]
 800f8d4:	699a      	ldr	r2, [r3, #24]
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	f042 0208 	orr.w	r2, r2, #8
 800f8de:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	681b      	ldr	r3, [r3, #0]
 800f8e4:	699a      	ldr	r2, [r3, #24]
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	681b      	ldr	r3, [r3, #0]
 800f8ea:	f042 0210 	orr.w	r2, r2, #16
 800f8ee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	687b      	ldr	r3, [r7, #4]
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	f022 0201 	bic.w	r2, r2, #1
 800f8fe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6919      	ldr	r1, [r3, #16]
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	681a      	ldr	r2, [r3, #0]
 800f90a:	4b3c      	ldr	r3, [pc, #240]	; (800f9fc <SPI_CloseTransfer+0x13c>)
 800f90c:	400b      	ands	r3, r1
 800f90e:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800f910:	687b      	ldr	r3, [r7, #4]
 800f912:	681b      	ldr	r3, [r3, #0]
 800f914:	689a      	ldr	r2, [r3, #8]
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	681b      	ldr	r3, [r3, #0]
 800f91a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800f91e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f926:	b2db      	uxtb	r3, r3
 800f928:	2b04      	cmp	r3, #4
 800f92a:	d014      	beq.n	800f956 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800f92c:	68fb      	ldr	r3, [r7, #12]
 800f92e:	f003 0320 	and.w	r3, r3, #32
 800f932:	2b00      	cmp	r3, #0
 800f934:	d00f      	beq.n	800f956 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f93c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	699a      	ldr	r2, [r3, #24]
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	f042 0220 	orr.w	r2, r2, #32
 800f954:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f95c:	b2db      	uxtb	r3, r3
 800f95e:	2b03      	cmp	r3, #3
 800f960:	d014      	beq.n	800f98c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800f962:	68fb      	ldr	r3, [r7, #12]
 800f964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f968:	2b00      	cmp	r3, #0
 800f96a:	d00f      	beq.n	800f98c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f972:	f043 0204 	orr.w	r2, r3, #4
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	699a      	ldr	r2, [r3, #24]
 800f982:	687b      	ldr	r3, [r7, #4]
 800f984:	681b      	ldr	r3, [r3, #0]
 800f986:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800f98a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800f992:	2b00      	cmp	r3, #0
 800f994:	d00f      	beq.n	800f9b6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f99c:	f043 0201 	orr.w	r2, r3, #1
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	699a      	ldr	r2, [r3, #24]
 800f9ac:	687b      	ldr	r3, [r7, #4]
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f9b4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800f9b6:	68fb      	ldr	r3, [r7, #12]
 800f9b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d00f      	beq.n	800f9e0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9c6:	f043 0208 	orr.w	r2, r3, #8
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	681b      	ldr	r3, [r3, #0]
 800f9d4:	699a      	ldr	r2, [r3, #24]
 800f9d6:	687b      	ldr	r3, [r7, #4]
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800f9de:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	2200      	movs	r2, #0
 800f9ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800f9f0:	bf00      	nop
 800f9f2:	3714      	adds	r7, #20
 800f9f4:	46bd      	mov	sp, r7
 800f9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9fa:	4770      	bx	lr
 800f9fc:	fffffc90 	.word	0xfffffc90

0800fa00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800fa00:	b580      	push	{r7, lr}
 800fa02:	b084      	sub	sp, #16
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	60f8      	str	r0, [r7, #12]
 800fa08:	60b9      	str	r1, [r7, #8]
 800fa0a:	603b      	str	r3, [r7, #0]
 800fa0c:	4613      	mov	r3, r2
 800fa0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa10:	e010      	b.n	800fa34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fa12:	f7f4 fda7 	bl	8004564 <HAL_GetTick>
 800fa16:	4602      	mov	r2, r0
 800fa18:	683b      	ldr	r3, [r7, #0]
 800fa1a:	1ad3      	subs	r3, r2, r3
 800fa1c:	69ba      	ldr	r2, [r7, #24]
 800fa1e:	429a      	cmp	r2, r3
 800fa20:	d803      	bhi.n	800fa2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800fa22:	69bb      	ldr	r3, [r7, #24]
 800fa24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa28:	d102      	bne.n	800fa30 <SPI_WaitOnFlagUntilTimeout+0x30>
 800fa2a:	69bb      	ldr	r3, [r7, #24]
 800fa2c:	2b00      	cmp	r3, #0
 800fa2e:	d101      	bne.n	800fa34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800fa30:	2303      	movs	r3, #3
 800fa32:	e00f      	b.n	800fa54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	681b      	ldr	r3, [r3, #0]
 800fa38:	695a      	ldr	r2, [r3, #20]
 800fa3a:	68bb      	ldr	r3, [r7, #8]
 800fa3c:	4013      	ands	r3, r2
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	bf0c      	ite	eq
 800fa44:	2301      	moveq	r3, #1
 800fa46:	2300      	movne	r3, #0
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	79fb      	ldrb	r3, [r7, #7]
 800fa4e:	429a      	cmp	r2, r3
 800fa50:	d0df      	beq.n	800fa12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800fa52:	2300      	movs	r3, #0
}
 800fa54:	4618      	mov	r0, r3
 800fa56:	3710      	adds	r7, #16
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800fa5c:	b480      	push	{r7}
 800fa5e:	b085      	sub	sp, #20
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fa68:	095b      	lsrs	r3, r3, #5
 800fa6a:	3301      	adds	r3, #1
 800fa6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	68db      	ldr	r3, [r3, #12]
 800fa72:	3301      	adds	r3, #1
 800fa74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	3307      	adds	r3, #7
 800fa7a:	08db      	lsrs	r3, r3, #3
 800fa7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	68fa      	ldr	r2, [r7, #12]
 800fa82:	fb02 f303 	mul.w	r3, r2, r3
}
 800fa86:	4618      	mov	r0, r3
 800fa88:	3714      	adds	r7, #20
 800fa8a:	46bd      	mov	sp, r7
 800fa8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa90:	4770      	bx	lr

0800fa92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fa92:	b580      	push	{r7, lr}
 800fa94:	b082      	sub	sp, #8
 800fa96:	af00      	add	r7, sp, #0
 800fa98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d101      	bne.n	800faa4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800faa0:	2301      	movs	r3, #1
 800faa2:	e042      	b.n	800fb2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800faaa:	2b00      	cmp	r3, #0
 800faac:	d106      	bne.n	800fabc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	2200      	movs	r2, #0
 800fab2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f7f4 fa70 	bl	8003f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	2224      	movs	r2, #36	; 0x24
 800fac0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	681a      	ldr	r2, [r3, #0]
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	681b      	ldr	r3, [r3, #0]
 800face:	f022 0201 	bic.w	r2, r2, #1
 800fad2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fad4:	6878      	ldr	r0, [r7, #4]
 800fad6:	f000 f95f 	bl	800fd98 <UART_SetConfig>
 800fada:	4603      	mov	r3, r0
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d101      	bne.n	800fae4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800fae0:	2301      	movs	r3, #1
 800fae2:	e022      	b.n	800fb2a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fae8:	2b00      	cmp	r3, #0
 800faea:	d002      	beq.n	800faf2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800faec:	6878      	ldr	r0, [r7, #4]
 800faee:	f000 ff03 	bl	80108f8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	681b      	ldr	r3, [r3, #0]
 800faf6:	685a      	ldr	r2, [r3, #4]
 800faf8:	687b      	ldr	r3, [r7, #4]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800fb00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	681b      	ldr	r3, [r3, #0]
 800fb06:	689a      	ldr	r2, [r3, #8]
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	681b      	ldr	r3, [r3, #0]
 800fb0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800fb10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	681a      	ldr	r2, [r3, #0]
 800fb18:	687b      	ldr	r3, [r7, #4]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f042 0201 	orr.w	r2, r2, #1
 800fb20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fb22:	6878      	ldr	r0, [r7, #4]
 800fb24:	f000 ff8a 	bl	8010a3c <UART_CheckIdleState>
 800fb28:	4603      	mov	r3, r0
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3708      	adds	r7, #8
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}

0800fb32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fb32:	b580      	push	{r7, lr}
 800fb34:	b08a      	sub	sp, #40	; 0x28
 800fb36:	af02      	add	r7, sp, #8
 800fb38:	60f8      	str	r0, [r7, #12]
 800fb3a:	60b9      	str	r1, [r7, #8]
 800fb3c:	603b      	str	r3, [r7, #0]
 800fb3e:	4613      	mov	r3, r2
 800fb40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fb42:	68fb      	ldr	r3, [r7, #12]
 800fb44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fb48:	2b20      	cmp	r3, #32
 800fb4a:	f040 8083 	bne.w	800fc54 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800fb4e:	68bb      	ldr	r3, [r7, #8]
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d002      	beq.n	800fb5a <HAL_UART_Transmit+0x28>
 800fb54:	88fb      	ldrh	r3, [r7, #6]
 800fb56:	2b00      	cmp	r3, #0
 800fb58:	d101      	bne.n	800fb5e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fb5a:	2301      	movs	r3, #1
 800fb5c:	e07b      	b.n	800fc56 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fb64:	2b01      	cmp	r3, #1
 800fb66:	d101      	bne.n	800fb6c <HAL_UART_Transmit+0x3a>
 800fb68:	2302      	movs	r3, #2
 800fb6a:	e074      	b.n	800fc56 <HAL_UART_Transmit+0x124>
 800fb6c:	68fb      	ldr	r3, [r7, #12]
 800fb6e:	2201      	movs	r2, #1
 800fb70:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	2200      	movs	r2, #0
 800fb78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	2221      	movs	r2, #33	; 0x21
 800fb80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800fb84:	f7f4 fcee 	bl	8004564 <HAL_GetTick>
 800fb88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800fb8a:	68fb      	ldr	r3, [r7, #12]
 800fb8c:	88fa      	ldrh	r2, [r7, #6]
 800fb8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800fb92:	68fb      	ldr	r3, [r7, #12]
 800fb94:	88fa      	ldrh	r2, [r7, #6]
 800fb96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fb9a:	68fb      	ldr	r3, [r7, #12]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800fba2:	d108      	bne.n	800fbb6 <HAL_UART_Transmit+0x84>
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	691b      	ldr	r3, [r3, #16]
 800fba8:	2b00      	cmp	r3, #0
 800fbaa:	d104      	bne.n	800fbb6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800fbac:	2300      	movs	r3, #0
 800fbae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800fbb0:	68bb      	ldr	r3, [r7, #8]
 800fbb2:	61bb      	str	r3, [r7, #24]
 800fbb4:	e003      	b.n	800fbbe <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fbba:	2300      	movs	r3, #0
 800fbbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800fbbe:	68fb      	ldr	r3, [r7, #12]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 800fbc6:	e02c      	b.n	800fc22 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	9300      	str	r3, [sp, #0]
 800fbcc:	697b      	ldr	r3, [r7, #20]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	2180      	movs	r1, #128	; 0x80
 800fbd2:	68f8      	ldr	r0, [r7, #12]
 800fbd4:	f000 ff7a 	bl	8010acc <UART_WaitOnFlagUntilTimeout>
 800fbd8:	4603      	mov	r3, r0
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d001      	beq.n	800fbe2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800fbde:	2303      	movs	r3, #3
 800fbe0:	e039      	b.n	800fc56 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d10b      	bne.n	800fc00 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fbe8:	69bb      	ldr	r3, [r7, #24]
 800fbea:	881b      	ldrh	r3, [r3, #0]
 800fbec:	461a      	mov	r2, r3
 800fbee:	68fb      	ldr	r3, [r7, #12]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800fbf6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800fbf8:	69bb      	ldr	r3, [r7, #24]
 800fbfa:	3302      	adds	r3, #2
 800fbfc:	61bb      	str	r3, [r7, #24]
 800fbfe:	e007      	b.n	800fc10 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	781a      	ldrb	r2, [r3, #0]
 800fc04:	68fb      	ldr	r3, [r7, #12]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800fc0a:	69fb      	ldr	r3, [r7, #28]
 800fc0c:	3301      	adds	r3, #1
 800fc0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fc10:	68fb      	ldr	r3, [r7, #12]
 800fc12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc16:	b29b      	uxth	r3, r3
 800fc18:	3b01      	subs	r3, #1
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	68fb      	ldr	r3, [r7, #12]
 800fc1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800fc22:	68fb      	ldr	r3, [r7, #12]
 800fc24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800fc28:	b29b      	uxth	r3, r3
 800fc2a:	2b00      	cmp	r3, #0
 800fc2c:	d1cc      	bne.n	800fbc8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	9300      	str	r3, [sp, #0]
 800fc32:	697b      	ldr	r3, [r7, #20]
 800fc34:	2200      	movs	r2, #0
 800fc36:	2140      	movs	r1, #64	; 0x40
 800fc38:	68f8      	ldr	r0, [r7, #12]
 800fc3a:	f000 ff47 	bl	8010acc <UART_WaitOnFlagUntilTimeout>
 800fc3e:	4603      	mov	r3, r0
 800fc40:	2b00      	cmp	r3, #0
 800fc42:	d001      	beq.n	800fc48 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800fc44:	2303      	movs	r3, #3
 800fc46:	e006      	b.n	800fc56 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800fc48:	68fb      	ldr	r3, [r7, #12]
 800fc4a:	2220      	movs	r2, #32
 800fc4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800fc50:	2300      	movs	r3, #0
 800fc52:	e000      	b.n	800fc56 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800fc54:	2302      	movs	r3, #2
  }
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	3720      	adds	r7, #32
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	bd80      	pop	{r7, pc}
	...

0800fc60 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800fc60:	b580      	push	{r7, lr}
 800fc62:	b084      	sub	sp, #16
 800fc64:	af00      	add	r7, sp, #0
 800fc66:	60f8      	str	r0, [r7, #12]
 800fc68:	60b9      	str	r1, [r7, #8]
 800fc6a:	4613      	mov	r3, r2
 800fc6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fc74:	2b20      	cmp	r3, #32
 800fc76:	d170      	bne.n	800fd5a <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	2b00      	cmp	r3, #0
 800fc7c:	d002      	beq.n	800fc84 <HAL_UART_Receive_DMA+0x24>
 800fc7e:	88fb      	ldrh	r3, [r7, #6]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d101      	bne.n	800fc88 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800fc84:	2301      	movs	r3, #1
 800fc86:	e069      	b.n	800fd5c <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 800fc88:	68fb      	ldr	r3, [r7, #12]
 800fc8a:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800fc8e:	2b01      	cmp	r3, #1
 800fc90:	d101      	bne.n	800fc96 <HAL_UART_Receive_DMA+0x36>
 800fc92:	2302      	movs	r3, #2
 800fc94:	e062      	b.n	800fd5c <HAL_UART_Receive_DMA+0xfc>
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	2201      	movs	r2, #1
 800fc9a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 800fc9e:	68fb      	ldr	r3, [r7, #12]
 800fca0:	68ba      	ldr	r2, [r7, #8]
 800fca2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 800fca4:	68fb      	ldr	r3, [r7, #12]
 800fca6:	88fa      	ldrh	r2, [r7, #6]
 800fca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2200      	movs	r2, #0
 800fcb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	2222      	movs	r2, #34	; 0x22
 800fcb8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcc0:	2b00      	cmp	r3, #0
 800fcc2:	d02c      	beq.n	800fd1e <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcc8:	4a26      	ldr	r2, [pc, #152]	; (800fd64 <HAL_UART_Receive_DMA+0x104>)
 800fcca:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800fccc:	68fb      	ldr	r3, [r7, #12]
 800fcce:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcd0:	4a25      	ldr	r2, [pc, #148]	; (800fd68 <HAL_UART_Receive_DMA+0x108>)
 800fcd2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 800fcd4:	68fb      	ldr	r3, [r7, #12]
 800fcd6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fcd8:	4a24      	ldr	r2, [pc, #144]	; (800fd6c <HAL_UART_Receive_DMA+0x10c>)
 800fcda:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fce0:	2200      	movs	r2, #0
 800fce2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6f98      	ldr	r0, [r3, #120]	; 0x78
 800fce8:	68fb      	ldr	r3, [r7, #12]
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	3324      	adds	r3, #36	; 0x24
 800fcee:	4619      	mov	r1, r3
 800fcf0:	68fb      	ldr	r3, [r7, #12]
 800fcf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcf4:	461a      	mov	r2, r3
 800fcf6:	88fb      	ldrh	r3, [r7, #6]
 800fcf8:	f7f5 f8da 	bl	8004eb0 <HAL_DMA_Start_IT>
 800fcfc:	4603      	mov	r3, r0
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d00d      	beq.n	800fd1e <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800fd02:	68fb      	ldr	r3, [r7, #12]
 800fd04:	2210      	movs	r2, #16
 800fd06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800fd0a:	68fb      	ldr	r3, [r7, #12]
 800fd0c:	2200      	movs	r2, #0
 800fd0e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800fd12:	68fb      	ldr	r3, [r7, #12]
 800fd14:	2220      	movs	r2, #32
 800fd16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e01e      	b.n	800fd5c <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	2200      	movs	r2, #0
 800fd22:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fd26:	68fb      	ldr	r3, [r7, #12]
 800fd28:	681b      	ldr	r3, [r3, #0]
 800fd2a:	681a      	ldr	r2, [r3, #0]
 800fd2c:	68fb      	ldr	r3, [r7, #12]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800fd34:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	689a      	ldr	r2, [r3, #8]
 800fd3c:	68fb      	ldr	r3, [r7, #12]
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	f042 0201 	orr.w	r2, r2, #1
 800fd44:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	681b      	ldr	r3, [r3, #0]
 800fd4a:	689a      	ldr	r2, [r3, #8]
 800fd4c:	68fb      	ldr	r3, [r7, #12]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800fd54:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 800fd56:	2300      	movs	r3, #0
 800fd58:	e000      	b.n	800fd5c <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 800fd5a:	2302      	movs	r3, #2
  }
}
 800fd5c:	4618      	mov	r0, r3
 800fd5e:	3710      	adds	r7, #16
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	08010c51 	.word	0x08010c51
 800fd68:	08010cb7 	.word	0x08010cb7
 800fd6c:	08010cd3 	.word	0x08010cd3

0800fd70 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800fd70:	b480      	push	{r7}
 800fd72:	b083      	sub	sp, #12
 800fd74:	af00      	add	r7, sp, #0
 800fd76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800fd78:	bf00      	nop
 800fd7a:	370c      	adds	r7, #12
 800fd7c:	46bd      	mov	sp, r7
 800fd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd82:	4770      	bx	lr

0800fd84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fd84:	b480      	push	{r7}
 800fd86:	b083      	sub	sp, #12
 800fd88:	af00      	add	r7, sp, #0
 800fd8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800fd8c:	bf00      	nop
 800fd8e:	370c      	adds	r7, #12
 800fd90:	46bd      	mov	sp, r7
 800fd92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd96:	4770      	bx	lr

0800fd98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800fd98:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800fd9c:	b08e      	sub	sp, #56	; 0x38
 800fd9e:	af00      	add	r7, sp, #0
 800fda0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800fda2:	2300      	movs	r3, #0
 800fda4:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	689a      	ldr	r2, [r3, #8]
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	691b      	ldr	r3, [r3, #16]
 800fdb0:	431a      	orrs	r2, r3
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	431a      	orrs	r2, r3
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	69db      	ldr	r3, [r3, #28]
 800fdbc:	4313      	orrs	r3, r2
 800fdbe:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fdc4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fdc6:	4313      	orrs	r3, r2
 800fdc8:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	681b      	ldr	r3, [r3, #0]
 800fdce:	681a      	ldr	r2, [r3, #0]
 800fdd0:	4bc1      	ldr	r3, [pc, #772]	; (80100d8 <UART_SetConfig+0x340>)
 800fdd2:	4013      	ands	r3, r2
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	6812      	ldr	r2, [r2, #0]
 800fdd8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fdda:	430b      	orrs	r3, r1
 800fddc:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800fdde:	687b      	ldr	r3, [r7, #4]
 800fde0:	681b      	ldr	r3, [r3, #0]
 800fde2:	685b      	ldr	r3, [r3, #4]
 800fde4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	68da      	ldr	r2, [r3, #12]
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	681b      	ldr	r3, [r3, #0]
 800fdf0:	430a      	orrs	r2, r1
 800fdf2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	699b      	ldr	r3, [r3, #24]
 800fdf8:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	4ab7      	ldr	r2, [pc, #732]	; (80100dc <UART_SetConfig+0x344>)
 800fe00:	4293      	cmp	r3, r2
 800fe02:	d004      	beq.n	800fe0e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	6a1b      	ldr	r3, [r3, #32]
 800fe08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fe0a:	4313      	orrs	r3, r2
 800fe0c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	689a      	ldr	r2, [r3, #8]
 800fe14:	4bb2      	ldr	r3, [pc, #712]	; (80100e0 <UART_SetConfig+0x348>)
 800fe16:	4013      	ands	r3, r2
 800fe18:	687a      	ldr	r2, [r7, #4]
 800fe1a:	6812      	ldr	r2, [r2, #0]
 800fe1c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800fe1e:	430b      	orrs	r3, r1
 800fe20:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe28:	f023 010f 	bic.w	r1, r3, #15
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	681b      	ldr	r3, [r3, #0]
 800fe34:	430a      	orrs	r2, r1
 800fe36:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800fe38:	687b      	ldr	r3, [r7, #4]
 800fe3a:	681b      	ldr	r3, [r3, #0]
 800fe3c:	4aa9      	ldr	r2, [pc, #676]	; (80100e4 <UART_SetConfig+0x34c>)
 800fe3e:	4293      	cmp	r3, r2
 800fe40:	d177      	bne.n	800ff32 <UART_SetConfig+0x19a>
 800fe42:	4ba9      	ldr	r3, [pc, #676]	; (80100e8 <UART_SetConfig+0x350>)
 800fe44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fe4a:	2b28      	cmp	r3, #40	; 0x28
 800fe4c:	d86c      	bhi.n	800ff28 <UART_SetConfig+0x190>
 800fe4e:	a201      	add	r2, pc, #4	; (adr r2, 800fe54 <UART_SetConfig+0xbc>)
 800fe50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe54:	0800fef9 	.word	0x0800fef9
 800fe58:	0800ff29 	.word	0x0800ff29
 800fe5c:	0800ff29 	.word	0x0800ff29
 800fe60:	0800ff29 	.word	0x0800ff29
 800fe64:	0800ff29 	.word	0x0800ff29
 800fe68:	0800ff29 	.word	0x0800ff29
 800fe6c:	0800ff29 	.word	0x0800ff29
 800fe70:	0800ff29 	.word	0x0800ff29
 800fe74:	0800ff01 	.word	0x0800ff01
 800fe78:	0800ff29 	.word	0x0800ff29
 800fe7c:	0800ff29 	.word	0x0800ff29
 800fe80:	0800ff29 	.word	0x0800ff29
 800fe84:	0800ff29 	.word	0x0800ff29
 800fe88:	0800ff29 	.word	0x0800ff29
 800fe8c:	0800ff29 	.word	0x0800ff29
 800fe90:	0800ff29 	.word	0x0800ff29
 800fe94:	0800ff09 	.word	0x0800ff09
 800fe98:	0800ff29 	.word	0x0800ff29
 800fe9c:	0800ff29 	.word	0x0800ff29
 800fea0:	0800ff29 	.word	0x0800ff29
 800fea4:	0800ff29 	.word	0x0800ff29
 800fea8:	0800ff29 	.word	0x0800ff29
 800feac:	0800ff29 	.word	0x0800ff29
 800feb0:	0800ff29 	.word	0x0800ff29
 800feb4:	0800ff11 	.word	0x0800ff11
 800feb8:	0800ff29 	.word	0x0800ff29
 800febc:	0800ff29 	.word	0x0800ff29
 800fec0:	0800ff29 	.word	0x0800ff29
 800fec4:	0800ff29 	.word	0x0800ff29
 800fec8:	0800ff29 	.word	0x0800ff29
 800fecc:	0800ff29 	.word	0x0800ff29
 800fed0:	0800ff29 	.word	0x0800ff29
 800fed4:	0800ff19 	.word	0x0800ff19
 800fed8:	0800ff29 	.word	0x0800ff29
 800fedc:	0800ff29 	.word	0x0800ff29
 800fee0:	0800ff29 	.word	0x0800ff29
 800fee4:	0800ff29 	.word	0x0800ff29
 800fee8:	0800ff29 	.word	0x0800ff29
 800feec:	0800ff29 	.word	0x0800ff29
 800fef0:	0800ff29 	.word	0x0800ff29
 800fef4:	0800ff21 	.word	0x0800ff21
 800fef8:	2301      	movs	r3, #1
 800fefa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fefe:	e233      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff00:	2304      	movs	r3, #4
 800ff02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff06:	e22f      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff08:	2308      	movs	r3, #8
 800ff0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff0e:	e22b      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff10:	2310      	movs	r3, #16
 800ff12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff16:	e227      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff18:	2320      	movs	r3, #32
 800ff1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff1e:	e223      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff20:	2340      	movs	r3, #64	; 0x40
 800ff22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff26:	e21f      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff28:	2380      	movs	r3, #128	; 0x80
 800ff2a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff2e:	bf00      	nop
 800ff30:	e21a      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	4a6d      	ldr	r2, [pc, #436]	; (80100ec <UART_SetConfig+0x354>)
 800ff38:	4293      	cmp	r3, r2
 800ff3a:	d132      	bne.n	800ffa2 <UART_SetConfig+0x20a>
 800ff3c:	4b6a      	ldr	r3, [pc, #424]	; (80100e8 <UART_SetConfig+0x350>)
 800ff3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ff40:	f003 0307 	and.w	r3, r3, #7
 800ff44:	2b05      	cmp	r3, #5
 800ff46:	d827      	bhi.n	800ff98 <UART_SetConfig+0x200>
 800ff48:	a201      	add	r2, pc, #4	; (adr r2, 800ff50 <UART_SetConfig+0x1b8>)
 800ff4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff4e:	bf00      	nop
 800ff50:	0800ff69 	.word	0x0800ff69
 800ff54:	0800ff71 	.word	0x0800ff71
 800ff58:	0800ff79 	.word	0x0800ff79
 800ff5c:	0800ff81 	.word	0x0800ff81
 800ff60:	0800ff89 	.word	0x0800ff89
 800ff64:	0800ff91 	.word	0x0800ff91
 800ff68:	2300      	movs	r3, #0
 800ff6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff6e:	e1fb      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff70:	2304      	movs	r3, #4
 800ff72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff76:	e1f7      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff78:	2308      	movs	r3, #8
 800ff7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff7e:	e1f3      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff80:	2310      	movs	r3, #16
 800ff82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff86:	e1ef      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff88:	2320      	movs	r3, #32
 800ff8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff8e:	e1eb      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff90:	2340      	movs	r3, #64	; 0x40
 800ff92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff96:	e1e7      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ff98:	2380      	movs	r3, #128	; 0x80
 800ff9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ff9e:	bf00      	nop
 800ffa0:	e1e2      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	681b      	ldr	r3, [r3, #0]
 800ffa6:	4a52      	ldr	r2, [pc, #328]	; (80100f0 <UART_SetConfig+0x358>)
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d132      	bne.n	8010012 <UART_SetConfig+0x27a>
 800ffac:	4b4e      	ldr	r3, [pc, #312]	; (80100e8 <UART_SetConfig+0x350>)
 800ffae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ffb0:	f003 0307 	and.w	r3, r3, #7
 800ffb4:	2b05      	cmp	r3, #5
 800ffb6:	d827      	bhi.n	8010008 <UART_SetConfig+0x270>
 800ffb8:	a201      	add	r2, pc, #4	; (adr r2, 800ffc0 <UART_SetConfig+0x228>)
 800ffba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffbe:	bf00      	nop
 800ffc0:	0800ffd9 	.word	0x0800ffd9
 800ffc4:	0800ffe1 	.word	0x0800ffe1
 800ffc8:	0800ffe9 	.word	0x0800ffe9
 800ffcc:	0800fff1 	.word	0x0800fff1
 800ffd0:	0800fff9 	.word	0x0800fff9
 800ffd4:	08010001 	.word	0x08010001
 800ffd8:	2300      	movs	r3, #0
 800ffda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffde:	e1c3      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ffe0:	2304      	movs	r3, #4
 800ffe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffe6:	e1bf      	b.n	8010368 <UART_SetConfig+0x5d0>
 800ffe8:	2308      	movs	r3, #8
 800ffea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800ffee:	e1bb      	b.n	8010368 <UART_SetConfig+0x5d0>
 800fff0:	2310      	movs	r3, #16
 800fff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fff6:	e1b7      	b.n	8010368 <UART_SetConfig+0x5d0>
 800fff8:	2320      	movs	r3, #32
 800fffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800fffe:	e1b3      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010000:	2340      	movs	r3, #64	; 0x40
 8010002:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010006:	e1af      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010008:	2380      	movs	r3, #128	; 0x80
 801000a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801000e:	bf00      	nop
 8010010:	e1aa      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4a37      	ldr	r2, [pc, #220]	; (80100f4 <UART_SetConfig+0x35c>)
 8010018:	4293      	cmp	r3, r2
 801001a:	d132      	bne.n	8010082 <UART_SetConfig+0x2ea>
 801001c:	4b32      	ldr	r3, [pc, #200]	; (80100e8 <UART_SetConfig+0x350>)
 801001e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010020:	f003 0307 	and.w	r3, r3, #7
 8010024:	2b05      	cmp	r3, #5
 8010026:	d827      	bhi.n	8010078 <UART_SetConfig+0x2e0>
 8010028:	a201      	add	r2, pc, #4	; (adr r2, 8010030 <UART_SetConfig+0x298>)
 801002a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801002e:	bf00      	nop
 8010030:	08010049 	.word	0x08010049
 8010034:	08010051 	.word	0x08010051
 8010038:	08010059 	.word	0x08010059
 801003c:	08010061 	.word	0x08010061
 8010040:	08010069 	.word	0x08010069
 8010044:	08010071 	.word	0x08010071
 8010048:	2300      	movs	r3, #0
 801004a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801004e:	e18b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010050:	2304      	movs	r3, #4
 8010052:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010056:	e187      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010058:	2308      	movs	r3, #8
 801005a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801005e:	e183      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010060:	2310      	movs	r3, #16
 8010062:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010066:	e17f      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010068:	2320      	movs	r3, #32
 801006a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801006e:	e17b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010070:	2340      	movs	r3, #64	; 0x40
 8010072:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010076:	e177      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010078:	2380      	movs	r3, #128	; 0x80
 801007a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801007e:	bf00      	nop
 8010080:	e172      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	681b      	ldr	r3, [r3, #0]
 8010086:	4a1c      	ldr	r2, [pc, #112]	; (80100f8 <UART_SetConfig+0x360>)
 8010088:	4293      	cmp	r3, r2
 801008a:	d144      	bne.n	8010116 <UART_SetConfig+0x37e>
 801008c:	4b16      	ldr	r3, [pc, #88]	; (80100e8 <UART_SetConfig+0x350>)
 801008e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010090:	f003 0307 	and.w	r3, r3, #7
 8010094:	2b05      	cmp	r3, #5
 8010096:	d839      	bhi.n	801010c <UART_SetConfig+0x374>
 8010098:	a201      	add	r2, pc, #4	; (adr r2, 80100a0 <UART_SetConfig+0x308>)
 801009a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801009e:	bf00      	nop
 80100a0:	080100b9 	.word	0x080100b9
 80100a4:	080100c1 	.word	0x080100c1
 80100a8:	080100c9 	.word	0x080100c9
 80100ac:	080100d1 	.word	0x080100d1
 80100b0:	080100fd 	.word	0x080100fd
 80100b4:	08010105 	.word	0x08010105
 80100b8:	2300      	movs	r3, #0
 80100ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100be:	e153      	b.n	8010368 <UART_SetConfig+0x5d0>
 80100c0:	2304      	movs	r3, #4
 80100c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100c6:	e14f      	b.n	8010368 <UART_SetConfig+0x5d0>
 80100c8:	2308      	movs	r3, #8
 80100ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100ce:	e14b      	b.n	8010368 <UART_SetConfig+0x5d0>
 80100d0:	2310      	movs	r3, #16
 80100d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80100d6:	e147      	b.n	8010368 <UART_SetConfig+0x5d0>
 80100d8:	cfff69f3 	.word	0xcfff69f3
 80100dc:	58000c00 	.word	0x58000c00
 80100e0:	11fff4ff 	.word	0x11fff4ff
 80100e4:	40011000 	.word	0x40011000
 80100e8:	58024400 	.word	0x58024400
 80100ec:	40004400 	.word	0x40004400
 80100f0:	40004800 	.word	0x40004800
 80100f4:	40004c00 	.word	0x40004c00
 80100f8:	40005000 	.word	0x40005000
 80100fc:	2320      	movs	r3, #32
 80100fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010102:	e131      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010104:	2340      	movs	r3, #64	; 0x40
 8010106:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801010a:	e12d      	b.n	8010368 <UART_SetConfig+0x5d0>
 801010c:	2380      	movs	r3, #128	; 0x80
 801010e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010112:	bf00      	nop
 8010114:	e128      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	681b      	ldr	r3, [r3, #0]
 801011a:	4ab6      	ldr	r2, [pc, #728]	; (80103f4 <UART_SetConfig+0x65c>)
 801011c:	4293      	cmp	r3, r2
 801011e:	d178      	bne.n	8010212 <UART_SetConfig+0x47a>
 8010120:	4bb5      	ldr	r3, [pc, #724]	; (80103f8 <UART_SetConfig+0x660>)
 8010122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010124:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8010128:	2b28      	cmp	r3, #40	; 0x28
 801012a:	d86d      	bhi.n	8010208 <UART_SetConfig+0x470>
 801012c:	a201      	add	r2, pc, #4	; (adr r2, 8010134 <UART_SetConfig+0x39c>)
 801012e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010132:	bf00      	nop
 8010134:	080101d9 	.word	0x080101d9
 8010138:	08010209 	.word	0x08010209
 801013c:	08010209 	.word	0x08010209
 8010140:	08010209 	.word	0x08010209
 8010144:	08010209 	.word	0x08010209
 8010148:	08010209 	.word	0x08010209
 801014c:	08010209 	.word	0x08010209
 8010150:	08010209 	.word	0x08010209
 8010154:	080101e1 	.word	0x080101e1
 8010158:	08010209 	.word	0x08010209
 801015c:	08010209 	.word	0x08010209
 8010160:	08010209 	.word	0x08010209
 8010164:	08010209 	.word	0x08010209
 8010168:	08010209 	.word	0x08010209
 801016c:	08010209 	.word	0x08010209
 8010170:	08010209 	.word	0x08010209
 8010174:	080101e9 	.word	0x080101e9
 8010178:	08010209 	.word	0x08010209
 801017c:	08010209 	.word	0x08010209
 8010180:	08010209 	.word	0x08010209
 8010184:	08010209 	.word	0x08010209
 8010188:	08010209 	.word	0x08010209
 801018c:	08010209 	.word	0x08010209
 8010190:	08010209 	.word	0x08010209
 8010194:	080101f1 	.word	0x080101f1
 8010198:	08010209 	.word	0x08010209
 801019c:	08010209 	.word	0x08010209
 80101a0:	08010209 	.word	0x08010209
 80101a4:	08010209 	.word	0x08010209
 80101a8:	08010209 	.word	0x08010209
 80101ac:	08010209 	.word	0x08010209
 80101b0:	08010209 	.word	0x08010209
 80101b4:	080101f9 	.word	0x080101f9
 80101b8:	08010209 	.word	0x08010209
 80101bc:	08010209 	.word	0x08010209
 80101c0:	08010209 	.word	0x08010209
 80101c4:	08010209 	.word	0x08010209
 80101c8:	08010209 	.word	0x08010209
 80101cc:	08010209 	.word	0x08010209
 80101d0:	08010209 	.word	0x08010209
 80101d4:	08010201 	.word	0x08010201
 80101d8:	2301      	movs	r3, #1
 80101da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101de:	e0c3      	b.n	8010368 <UART_SetConfig+0x5d0>
 80101e0:	2304      	movs	r3, #4
 80101e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101e6:	e0bf      	b.n	8010368 <UART_SetConfig+0x5d0>
 80101e8:	2308      	movs	r3, #8
 80101ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101ee:	e0bb      	b.n	8010368 <UART_SetConfig+0x5d0>
 80101f0:	2310      	movs	r3, #16
 80101f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101f6:	e0b7      	b.n	8010368 <UART_SetConfig+0x5d0>
 80101f8:	2320      	movs	r3, #32
 80101fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80101fe:	e0b3      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010200:	2340      	movs	r3, #64	; 0x40
 8010202:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010206:	e0af      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010208:	2380      	movs	r3, #128	; 0x80
 801020a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801020e:	bf00      	nop
 8010210:	e0aa      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	4a79      	ldr	r2, [pc, #484]	; (80103fc <UART_SetConfig+0x664>)
 8010218:	4293      	cmp	r3, r2
 801021a:	d132      	bne.n	8010282 <UART_SetConfig+0x4ea>
 801021c:	4b76      	ldr	r3, [pc, #472]	; (80103f8 <UART_SetConfig+0x660>)
 801021e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010220:	f003 0307 	and.w	r3, r3, #7
 8010224:	2b05      	cmp	r3, #5
 8010226:	d827      	bhi.n	8010278 <UART_SetConfig+0x4e0>
 8010228:	a201      	add	r2, pc, #4	; (adr r2, 8010230 <UART_SetConfig+0x498>)
 801022a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801022e:	bf00      	nop
 8010230:	08010249 	.word	0x08010249
 8010234:	08010251 	.word	0x08010251
 8010238:	08010259 	.word	0x08010259
 801023c:	08010261 	.word	0x08010261
 8010240:	08010269 	.word	0x08010269
 8010244:	08010271 	.word	0x08010271
 8010248:	2300      	movs	r3, #0
 801024a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801024e:	e08b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010250:	2304      	movs	r3, #4
 8010252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010256:	e087      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010258:	2308      	movs	r3, #8
 801025a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801025e:	e083      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010260:	2310      	movs	r3, #16
 8010262:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010266:	e07f      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010268:	2320      	movs	r3, #32
 801026a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801026e:	e07b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010270:	2340      	movs	r3, #64	; 0x40
 8010272:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010276:	e077      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010278:	2380      	movs	r3, #128	; 0x80
 801027a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801027e:	bf00      	nop
 8010280:	e072      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	681b      	ldr	r3, [r3, #0]
 8010286:	4a5e      	ldr	r2, [pc, #376]	; (8010400 <UART_SetConfig+0x668>)
 8010288:	4293      	cmp	r3, r2
 801028a:	d132      	bne.n	80102f2 <UART_SetConfig+0x55a>
 801028c:	4b5a      	ldr	r3, [pc, #360]	; (80103f8 <UART_SetConfig+0x660>)
 801028e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010290:	f003 0307 	and.w	r3, r3, #7
 8010294:	2b05      	cmp	r3, #5
 8010296:	d827      	bhi.n	80102e8 <UART_SetConfig+0x550>
 8010298:	a201      	add	r2, pc, #4	; (adr r2, 80102a0 <UART_SetConfig+0x508>)
 801029a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801029e:	bf00      	nop
 80102a0:	080102b9 	.word	0x080102b9
 80102a4:	080102c1 	.word	0x080102c1
 80102a8:	080102c9 	.word	0x080102c9
 80102ac:	080102d1 	.word	0x080102d1
 80102b0:	080102d9 	.word	0x080102d9
 80102b4:	080102e1 	.word	0x080102e1
 80102b8:	2300      	movs	r3, #0
 80102ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102be:	e053      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102c0:	2304      	movs	r3, #4
 80102c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102c6:	e04f      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102c8:	2308      	movs	r3, #8
 80102ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ce:	e04b      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102d0:	2310      	movs	r3, #16
 80102d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102d6:	e047      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102d8:	2320      	movs	r3, #32
 80102da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102de:	e043      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102e0:	2340      	movs	r3, #64	; 0x40
 80102e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102e6:	e03f      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102e8:	2380      	movs	r3, #128	; 0x80
 80102ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80102ee:	bf00      	nop
 80102f0:	e03a      	b.n	8010368 <UART_SetConfig+0x5d0>
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	681b      	ldr	r3, [r3, #0]
 80102f6:	4a43      	ldr	r2, [pc, #268]	; (8010404 <UART_SetConfig+0x66c>)
 80102f8:	4293      	cmp	r3, r2
 80102fa:	d132      	bne.n	8010362 <UART_SetConfig+0x5ca>
 80102fc:	4b3e      	ldr	r3, [pc, #248]	; (80103f8 <UART_SetConfig+0x660>)
 80102fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010300:	f003 0307 	and.w	r3, r3, #7
 8010304:	2b05      	cmp	r3, #5
 8010306:	d827      	bhi.n	8010358 <UART_SetConfig+0x5c0>
 8010308:	a201      	add	r2, pc, #4	; (adr r2, 8010310 <UART_SetConfig+0x578>)
 801030a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801030e:	bf00      	nop
 8010310:	08010329 	.word	0x08010329
 8010314:	08010331 	.word	0x08010331
 8010318:	08010339 	.word	0x08010339
 801031c:	08010341 	.word	0x08010341
 8010320:	08010349 	.word	0x08010349
 8010324:	08010351 	.word	0x08010351
 8010328:	2302      	movs	r3, #2
 801032a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801032e:	e01b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010330:	2304      	movs	r3, #4
 8010332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010336:	e017      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010338:	2308      	movs	r3, #8
 801033a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801033e:	e013      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010340:	2310      	movs	r3, #16
 8010342:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010346:	e00f      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010348:	2320      	movs	r3, #32
 801034a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801034e:	e00b      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010350:	2340      	movs	r3, #64	; 0x40
 8010352:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010356:	e007      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010358:	2380      	movs	r3, #128	; 0x80
 801035a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801035e:	bf00      	nop
 8010360:	e002      	b.n	8010368 <UART_SetConfig+0x5d0>
 8010362:	2380      	movs	r3, #128	; 0x80
 8010364:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	4a25      	ldr	r2, [pc, #148]	; (8010404 <UART_SetConfig+0x66c>)
 801036e:	4293      	cmp	r3, r2
 8010370:	f040 80b8 	bne.w	80104e4 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010374:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010378:	2b08      	cmp	r3, #8
 801037a:	d019      	beq.n	80103b0 <UART_SetConfig+0x618>
 801037c:	2b08      	cmp	r3, #8
 801037e:	dc04      	bgt.n	801038a <UART_SetConfig+0x5f2>
 8010380:	2b02      	cmp	r3, #2
 8010382:	d009      	beq.n	8010398 <UART_SetConfig+0x600>
 8010384:	2b04      	cmp	r3, #4
 8010386:	d00b      	beq.n	80103a0 <UART_SetConfig+0x608>
 8010388:	e042      	b.n	8010410 <UART_SetConfig+0x678>
 801038a:	2b20      	cmp	r3, #32
 801038c:	d02b      	beq.n	80103e6 <UART_SetConfig+0x64e>
 801038e:	2b40      	cmp	r3, #64	; 0x40
 8010390:	d02c      	beq.n	80103ec <UART_SetConfig+0x654>
 8010392:	2b10      	cmp	r3, #16
 8010394:	d014      	beq.n	80103c0 <UART_SetConfig+0x628>
 8010396:	e03b      	b.n	8010410 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010398:	f7fb fad2 	bl	800b940 <HAL_RCCEx_GetD3PCLK1Freq>
 801039c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801039e:	e03d      	b.n	801041c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80103a0:	f107 0314 	add.w	r3, r7, #20
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fb fae1 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80103aa:	69bb      	ldr	r3, [r7, #24]
 80103ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103ae:	e035      	b.n	801041c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80103b0:	f107 0308 	add.w	r3, r7, #8
 80103b4:	4618      	mov	r0, r3
 80103b6:	f7fb fc25 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103be:	e02d      	b.n	801041c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80103c0:	4b0d      	ldr	r3, [pc, #52]	; (80103f8 <UART_SetConfig+0x660>)
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	f003 0320 	and.w	r3, r3, #32
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d009      	beq.n	80103e0 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80103cc:	4b0a      	ldr	r3, [pc, #40]	; (80103f8 <UART_SetConfig+0x660>)
 80103ce:	681b      	ldr	r3, [r3, #0]
 80103d0:	08db      	lsrs	r3, r3, #3
 80103d2:	f003 0303 	and.w	r3, r3, #3
 80103d6:	4a0c      	ldr	r2, [pc, #48]	; (8010408 <UART_SetConfig+0x670>)
 80103d8:	fa22 f303 	lsr.w	r3, r2, r3
 80103dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80103de:	e01d      	b.n	801041c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 80103e0:	4b09      	ldr	r3, [pc, #36]	; (8010408 <UART_SetConfig+0x670>)
 80103e2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103e4:	e01a      	b.n	801041c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80103e6:	4b09      	ldr	r3, [pc, #36]	; (801040c <UART_SetConfig+0x674>)
 80103e8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103ea:	e017      	b.n	801041c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80103ec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80103f0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80103f2:	e013      	b.n	801041c <UART_SetConfig+0x684>
 80103f4:	40011400 	.word	0x40011400
 80103f8:	58024400 	.word	0x58024400
 80103fc:	40007800 	.word	0x40007800
 8010400:	40007c00 	.word	0x40007c00
 8010404:	58000c00 	.word	0x58000c00
 8010408:	03d09000 	.word	0x03d09000
 801040c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010410:	2300      	movs	r3, #0
 8010412:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010414:	2301      	movs	r3, #1
 8010416:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 801041a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801041c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801041e:	2b00      	cmp	r3, #0
 8010420:	f000 824d 	beq.w	80108be <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010424:	687b      	ldr	r3, [r7, #4]
 8010426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010428:	4aad      	ldr	r2, [pc, #692]	; (80106e0 <UART_SetConfig+0x948>)
 801042a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801042e:	461a      	mov	r2, r3
 8010430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010432:	fbb3 f3f2 	udiv	r3, r3, r2
 8010436:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	685a      	ldr	r2, [r3, #4]
 801043c:	4613      	mov	r3, r2
 801043e:	005b      	lsls	r3, r3, #1
 8010440:	4413      	add	r3, r2
 8010442:	6a3a      	ldr	r2, [r7, #32]
 8010444:	429a      	cmp	r2, r3
 8010446:	d305      	bcc.n	8010454 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	685b      	ldr	r3, [r3, #4]
 801044c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801044e:	6a3a      	ldr	r2, [r7, #32]
 8010450:	429a      	cmp	r2, r3
 8010452:	d903      	bls.n	801045c <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8010454:	2301      	movs	r3, #1
 8010456:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 801045a:	e230      	b.n	80108be <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801045c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801045e:	4618      	mov	r0, r3
 8010460:	f04f 0100 	mov.w	r1, #0
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010468:	4a9d      	ldr	r2, [pc, #628]	; (80106e0 <UART_SetConfig+0x948>)
 801046a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801046e:	b29b      	uxth	r3, r3
 8010470:	f04f 0400 	mov.w	r4, #0
 8010474:	461a      	mov	r2, r3
 8010476:	4623      	mov	r3, r4
 8010478:	f7ef ff8a 	bl	8000390 <__aeabi_uldivmod>
 801047c:	4603      	mov	r3, r0
 801047e:	460c      	mov	r4, r1
 8010480:	4619      	mov	r1, r3
 8010482:	4622      	mov	r2, r4
 8010484:	f04f 0300 	mov.w	r3, #0
 8010488:	f04f 0400 	mov.w	r4, #0
 801048c:	0214      	lsls	r4, r2, #8
 801048e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8010492:	020b      	lsls	r3, r1, #8
 8010494:	687a      	ldr	r2, [r7, #4]
 8010496:	6852      	ldr	r2, [r2, #4]
 8010498:	0852      	lsrs	r2, r2, #1
 801049a:	4611      	mov	r1, r2
 801049c:	f04f 0200 	mov.w	r2, #0
 80104a0:	eb13 0b01 	adds.w	fp, r3, r1
 80104a4:	eb44 0c02 	adc.w	ip, r4, r2
 80104a8:	4658      	mov	r0, fp
 80104aa:	4661      	mov	r1, ip
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	685b      	ldr	r3, [r3, #4]
 80104b0:	f04f 0400 	mov.w	r4, #0
 80104b4:	461a      	mov	r2, r3
 80104b6:	4623      	mov	r3, r4
 80104b8:	f7ef ff6a 	bl	8000390 <__aeabi_uldivmod>
 80104bc:	4603      	mov	r3, r0
 80104be:	460c      	mov	r4, r1
 80104c0:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80104c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104c8:	d308      	bcc.n	80104dc <UART_SetConfig+0x744>
 80104ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80104cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104d0:	d204      	bcs.n	80104dc <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80104d8:	60da      	str	r2, [r3, #12]
 80104da:	e1f0      	b.n	80108be <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 80104dc:	2301      	movs	r3, #1
 80104de:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80104e2:	e1ec      	b.n	80108be <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80104ec:	f040 8100 	bne.w	80106f0 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 80104f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80104f4:	2b40      	cmp	r3, #64	; 0x40
 80104f6:	f200 80b7 	bhi.w	8010668 <UART_SetConfig+0x8d0>
 80104fa:	a201      	add	r2, pc, #4	; (adr r2, 8010500 <UART_SetConfig+0x768>)
 80104fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010500:	08010605 	.word	0x08010605
 8010504:	0801060d 	.word	0x0801060d
 8010508:	08010669 	.word	0x08010669
 801050c:	08010669 	.word	0x08010669
 8010510:	08010615 	.word	0x08010615
 8010514:	08010669 	.word	0x08010669
 8010518:	08010669 	.word	0x08010669
 801051c:	08010669 	.word	0x08010669
 8010520:	08010625 	.word	0x08010625
 8010524:	08010669 	.word	0x08010669
 8010528:	08010669 	.word	0x08010669
 801052c:	08010669 	.word	0x08010669
 8010530:	08010669 	.word	0x08010669
 8010534:	08010669 	.word	0x08010669
 8010538:	08010669 	.word	0x08010669
 801053c:	08010669 	.word	0x08010669
 8010540:	08010635 	.word	0x08010635
 8010544:	08010669 	.word	0x08010669
 8010548:	08010669 	.word	0x08010669
 801054c:	08010669 	.word	0x08010669
 8010550:	08010669 	.word	0x08010669
 8010554:	08010669 	.word	0x08010669
 8010558:	08010669 	.word	0x08010669
 801055c:	08010669 	.word	0x08010669
 8010560:	08010669 	.word	0x08010669
 8010564:	08010669 	.word	0x08010669
 8010568:	08010669 	.word	0x08010669
 801056c:	08010669 	.word	0x08010669
 8010570:	08010669 	.word	0x08010669
 8010574:	08010669 	.word	0x08010669
 8010578:	08010669 	.word	0x08010669
 801057c:	08010669 	.word	0x08010669
 8010580:	0801065b 	.word	0x0801065b
 8010584:	08010669 	.word	0x08010669
 8010588:	08010669 	.word	0x08010669
 801058c:	08010669 	.word	0x08010669
 8010590:	08010669 	.word	0x08010669
 8010594:	08010669 	.word	0x08010669
 8010598:	08010669 	.word	0x08010669
 801059c:	08010669 	.word	0x08010669
 80105a0:	08010669 	.word	0x08010669
 80105a4:	08010669 	.word	0x08010669
 80105a8:	08010669 	.word	0x08010669
 80105ac:	08010669 	.word	0x08010669
 80105b0:	08010669 	.word	0x08010669
 80105b4:	08010669 	.word	0x08010669
 80105b8:	08010669 	.word	0x08010669
 80105bc:	08010669 	.word	0x08010669
 80105c0:	08010669 	.word	0x08010669
 80105c4:	08010669 	.word	0x08010669
 80105c8:	08010669 	.word	0x08010669
 80105cc:	08010669 	.word	0x08010669
 80105d0:	08010669 	.word	0x08010669
 80105d4:	08010669 	.word	0x08010669
 80105d8:	08010669 	.word	0x08010669
 80105dc:	08010669 	.word	0x08010669
 80105e0:	08010669 	.word	0x08010669
 80105e4:	08010669 	.word	0x08010669
 80105e8:	08010669 	.word	0x08010669
 80105ec:	08010669 	.word	0x08010669
 80105f0:	08010669 	.word	0x08010669
 80105f4:	08010669 	.word	0x08010669
 80105f8:	08010669 	.word	0x08010669
 80105fc:	08010669 	.word	0x08010669
 8010600:	08010661 	.word	0x08010661
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010604:	f7f9 ffee 	bl	800a5e4 <HAL_RCC_GetPCLK1Freq>
 8010608:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801060a:	e033      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801060c:	f7fa f800 	bl	800a610 <HAL_RCC_GetPCLK2Freq>
 8010610:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010612:	e02f      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010614:	f107 0314 	add.w	r3, r7, #20
 8010618:	4618      	mov	r0, r3
 801061a:	f7fb f9a7 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801061e:	69bb      	ldr	r3, [r7, #24]
 8010620:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010622:	e027      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010624:	f107 0308 	add.w	r3, r7, #8
 8010628:	4618      	mov	r0, r3
 801062a:	f7fb faeb 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801062e:	68fb      	ldr	r3, [r7, #12]
 8010630:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010632:	e01f      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010634:	4b2b      	ldr	r3, [pc, #172]	; (80106e4 <UART_SetConfig+0x94c>)
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	f003 0320 	and.w	r3, r3, #32
 801063c:	2b00      	cmp	r3, #0
 801063e:	d009      	beq.n	8010654 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010640:	4b28      	ldr	r3, [pc, #160]	; (80106e4 <UART_SetConfig+0x94c>)
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	08db      	lsrs	r3, r3, #3
 8010646:	f003 0303 	and.w	r3, r3, #3
 801064a:	4a27      	ldr	r2, [pc, #156]	; (80106e8 <UART_SetConfig+0x950>)
 801064c:	fa22 f303 	lsr.w	r3, r2, r3
 8010650:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010652:	e00f      	b.n	8010674 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8010654:	4b24      	ldr	r3, [pc, #144]	; (80106e8 <UART_SetConfig+0x950>)
 8010656:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010658:	e00c      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801065a:	4b24      	ldr	r3, [pc, #144]	; (80106ec <UART_SetConfig+0x954>)
 801065c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801065e:	e009      	b.n	8010674 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010660:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010664:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010666:	e005      	b.n	8010674 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8010668:	2300      	movs	r3, #0
 801066a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801066c:	2301      	movs	r3, #1
 801066e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010672:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010676:	2b00      	cmp	r3, #0
 8010678:	f000 8121 	beq.w	80108be <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010680:	4a17      	ldr	r2, [pc, #92]	; (80106e0 <UART_SetConfig+0x948>)
 8010682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010686:	461a      	mov	r2, r3
 8010688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801068a:	fbb3 f3f2 	udiv	r3, r3, r2
 801068e:	005a      	lsls	r2, r3, #1
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	685b      	ldr	r3, [r3, #4]
 8010694:	085b      	lsrs	r3, r3, #1
 8010696:	441a      	add	r2, r3
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	685b      	ldr	r3, [r3, #4]
 801069c:	fbb2 f3f3 	udiv	r3, r2, r3
 80106a0:	b29b      	uxth	r3, r3
 80106a2:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80106a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106a6:	2b0f      	cmp	r3, #15
 80106a8:	d916      	bls.n	80106d8 <UART_SetConfig+0x940>
 80106aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80106b0:	d212      	bcs.n	80106d8 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80106b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106b4:	b29b      	uxth	r3, r3
 80106b6:	f023 030f 	bic.w	r3, r3, #15
 80106ba:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80106bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106be:	085b      	lsrs	r3, r3, #1
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	f003 0307 	and.w	r3, r3, #7
 80106c6:	b29a      	uxth	r2, r3
 80106c8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80106ca:	4313      	orrs	r3, r2
 80106cc:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80106d4:	60da      	str	r2, [r3, #12]
 80106d6:	e0f2      	b.n	80108be <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80106d8:	2301      	movs	r3, #1
 80106da:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80106de:	e0ee      	b.n	80108be <UART_SetConfig+0xb26>
 80106e0:	0801aefc 	.word	0x0801aefc
 80106e4:	58024400 	.word	0x58024400
 80106e8:	03d09000 	.word	0x03d09000
 80106ec:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 80106f0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80106f4:	2b40      	cmp	r3, #64	; 0x40
 80106f6:	f200 80b7 	bhi.w	8010868 <UART_SetConfig+0xad0>
 80106fa:	a201      	add	r2, pc, #4	; (adr r2, 8010700 <UART_SetConfig+0x968>)
 80106fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010700:	08010805 	.word	0x08010805
 8010704:	0801080d 	.word	0x0801080d
 8010708:	08010869 	.word	0x08010869
 801070c:	08010869 	.word	0x08010869
 8010710:	08010815 	.word	0x08010815
 8010714:	08010869 	.word	0x08010869
 8010718:	08010869 	.word	0x08010869
 801071c:	08010869 	.word	0x08010869
 8010720:	08010825 	.word	0x08010825
 8010724:	08010869 	.word	0x08010869
 8010728:	08010869 	.word	0x08010869
 801072c:	08010869 	.word	0x08010869
 8010730:	08010869 	.word	0x08010869
 8010734:	08010869 	.word	0x08010869
 8010738:	08010869 	.word	0x08010869
 801073c:	08010869 	.word	0x08010869
 8010740:	08010835 	.word	0x08010835
 8010744:	08010869 	.word	0x08010869
 8010748:	08010869 	.word	0x08010869
 801074c:	08010869 	.word	0x08010869
 8010750:	08010869 	.word	0x08010869
 8010754:	08010869 	.word	0x08010869
 8010758:	08010869 	.word	0x08010869
 801075c:	08010869 	.word	0x08010869
 8010760:	08010869 	.word	0x08010869
 8010764:	08010869 	.word	0x08010869
 8010768:	08010869 	.word	0x08010869
 801076c:	08010869 	.word	0x08010869
 8010770:	08010869 	.word	0x08010869
 8010774:	08010869 	.word	0x08010869
 8010778:	08010869 	.word	0x08010869
 801077c:	08010869 	.word	0x08010869
 8010780:	0801085b 	.word	0x0801085b
 8010784:	08010869 	.word	0x08010869
 8010788:	08010869 	.word	0x08010869
 801078c:	08010869 	.word	0x08010869
 8010790:	08010869 	.word	0x08010869
 8010794:	08010869 	.word	0x08010869
 8010798:	08010869 	.word	0x08010869
 801079c:	08010869 	.word	0x08010869
 80107a0:	08010869 	.word	0x08010869
 80107a4:	08010869 	.word	0x08010869
 80107a8:	08010869 	.word	0x08010869
 80107ac:	08010869 	.word	0x08010869
 80107b0:	08010869 	.word	0x08010869
 80107b4:	08010869 	.word	0x08010869
 80107b8:	08010869 	.word	0x08010869
 80107bc:	08010869 	.word	0x08010869
 80107c0:	08010869 	.word	0x08010869
 80107c4:	08010869 	.word	0x08010869
 80107c8:	08010869 	.word	0x08010869
 80107cc:	08010869 	.word	0x08010869
 80107d0:	08010869 	.word	0x08010869
 80107d4:	08010869 	.word	0x08010869
 80107d8:	08010869 	.word	0x08010869
 80107dc:	08010869 	.word	0x08010869
 80107e0:	08010869 	.word	0x08010869
 80107e4:	08010869 	.word	0x08010869
 80107e8:	08010869 	.word	0x08010869
 80107ec:	08010869 	.word	0x08010869
 80107f0:	08010869 	.word	0x08010869
 80107f4:	08010869 	.word	0x08010869
 80107f8:	08010869 	.word	0x08010869
 80107fc:	08010869 	.word	0x08010869
 8010800:	08010861 	.word	0x08010861
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010804:	f7f9 feee 	bl	800a5e4 <HAL_RCC_GetPCLK1Freq>
 8010808:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801080a:	e033      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801080c:	f7f9 ff00 	bl	800a610 <HAL_RCC_GetPCLK2Freq>
 8010810:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010812:	e02f      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010814:	f107 0314 	add.w	r3, r7, #20
 8010818:	4618      	mov	r0, r3
 801081a:	f7fb f8a7 	bl	800b96c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801081e:	69bb      	ldr	r3, [r7, #24]
 8010820:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010822:	e027      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010824:	f107 0308 	add.w	r3, r7, #8
 8010828:	4618      	mov	r0, r3
 801082a:	f7fb f9eb 	bl	800bc04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801082e:	68fb      	ldr	r3, [r7, #12]
 8010830:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010832:	e01f      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010834:	4b2c      	ldr	r3, [pc, #176]	; (80108e8 <UART_SetConfig+0xb50>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	f003 0320 	and.w	r3, r3, #32
 801083c:	2b00      	cmp	r3, #0
 801083e:	d009      	beq.n	8010854 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010840:	4b29      	ldr	r3, [pc, #164]	; (80108e8 <UART_SetConfig+0xb50>)
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	08db      	lsrs	r3, r3, #3
 8010846:	f003 0303 	and.w	r3, r3, #3
 801084a:	4a28      	ldr	r2, [pc, #160]	; (80108ec <UART_SetConfig+0xb54>)
 801084c:	fa22 f303 	lsr.w	r3, r2, r3
 8010850:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010852:	e00f      	b.n	8010874 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 8010854:	4b25      	ldr	r3, [pc, #148]	; (80108ec <UART_SetConfig+0xb54>)
 8010856:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010858:	e00c      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801085a:	4b25      	ldr	r3, [pc, #148]	; (80108f0 <UART_SetConfig+0xb58>)
 801085c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 801085e:	e009      	b.n	8010874 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010860:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010864:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010866:	e005      	b.n	8010874 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 8010868:	2300      	movs	r3, #0
 801086a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 801086c:	2301      	movs	r3, #1
 801086e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010872:	bf00      	nop
    }

    if (pclk != 0U)
 8010874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010876:	2b00      	cmp	r3, #0
 8010878:	d021      	beq.n	80108be <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801087a:	687b      	ldr	r3, [r7, #4]
 801087c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801087e:	4a1d      	ldr	r2, [pc, #116]	; (80108f4 <UART_SetConfig+0xb5c>)
 8010880:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010884:	461a      	mov	r2, r3
 8010886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010888:	fbb3 f2f2 	udiv	r2, r3, r2
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	685b      	ldr	r3, [r3, #4]
 8010890:	085b      	lsrs	r3, r3, #1
 8010892:	441a      	add	r2, r3
 8010894:	687b      	ldr	r3, [r7, #4]
 8010896:	685b      	ldr	r3, [r3, #4]
 8010898:	fbb2 f3f3 	udiv	r3, r2, r3
 801089c:	b29b      	uxth	r3, r3
 801089e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80108a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a2:	2b0f      	cmp	r3, #15
 80108a4:	d908      	bls.n	80108b8 <UART_SetConfig+0xb20>
 80108a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80108a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80108ac:	d204      	bcs.n	80108b8 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80108b4:	60da      	str	r2, [r3, #12]
 80108b6:	e002      	b.n	80108be <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 80108b8:	2301      	movs	r3, #1
 80108ba:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80108be:	687b      	ldr	r3, [r7, #4]
 80108c0:	2201      	movs	r2, #1
 80108c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2201      	movs	r2, #1
 80108ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80108ce:	687b      	ldr	r3, [r7, #4]
 80108d0:	2200      	movs	r2, #0
 80108d2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2200      	movs	r2, #0
 80108d8:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80108da:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 80108de:	4618      	mov	r0, r3
 80108e0:	3738      	adds	r7, #56	; 0x38
 80108e2:	46bd      	mov	sp, r7
 80108e4:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80108e8:	58024400 	.word	0x58024400
 80108ec:	03d09000 	.word	0x03d09000
 80108f0:	003d0900 	.word	0x003d0900
 80108f4:	0801aefc 	.word	0x0801aefc

080108f8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80108f8:	b480      	push	{r7}
 80108fa:	b083      	sub	sp, #12
 80108fc:	af00      	add	r7, sp, #0
 80108fe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010904:	f003 0301 	and.w	r3, r3, #1
 8010908:	2b00      	cmp	r3, #0
 801090a:	d00a      	beq.n	8010922 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	681b      	ldr	r3, [r3, #0]
 8010910:	685b      	ldr	r3, [r3, #4]
 8010912:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	430a      	orrs	r2, r1
 8010920:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010926:	f003 0302 	and.w	r3, r3, #2
 801092a:	2b00      	cmp	r3, #0
 801092c:	d00a      	beq.n	8010944 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801092e:	687b      	ldr	r3, [r7, #4]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	685b      	ldr	r3, [r3, #4]
 8010934:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010938:	687b      	ldr	r3, [r7, #4]
 801093a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	430a      	orrs	r2, r1
 8010942:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010944:	687b      	ldr	r3, [r7, #4]
 8010946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010948:	f003 0304 	and.w	r3, r3, #4
 801094c:	2b00      	cmp	r3, #0
 801094e:	d00a      	beq.n	8010966 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	681b      	ldr	r3, [r3, #0]
 8010962:	430a      	orrs	r2, r1
 8010964:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801096a:	f003 0308 	and.w	r3, r3, #8
 801096e:	2b00      	cmp	r3, #0
 8010970:	d00a      	beq.n	8010988 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	681b      	ldr	r3, [r3, #0]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010980:	687b      	ldr	r3, [r7, #4]
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	430a      	orrs	r2, r1
 8010986:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010988:	687b      	ldr	r3, [r7, #4]
 801098a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801098c:	f003 0310 	and.w	r3, r3, #16
 8010990:	2b00      	cmp	r3, #0
 8010992:	d00a      	beq.n	80109aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	681b      	ldr	r3, [r3, #0]
 8010998:	689b      	ldr	r3, [r3, #8]
 801099a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	681b      	ldr	r3, [r3, #0]
 80109a6:	430a      	orrs	r2, r1
 80109a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109ae:	f003 0320 	and.w	r3, r3, #32
 80109b2:	2b00      	cmp	r3, #0
 80109b4:	d00a      	beq.n	80109cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	681b      	ldr	r3, [r3, #0]
 80109ba:	689b      	ldr	r3, [r3, #8]
 80109bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	681b      	ldr	r3, [r3, #0]
 80109c8:	430a      	orrs	r2, r1
 80109ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d01a      	beq.n	8010a0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	681b      	ldr	r3, [r3, #0]
 80109dc:	685b      	ldr	r3, [r3, #4]
 80109de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80109e6:	687b      	ldr	r3, [r7, #4]
 80109e8:	681b      	ldr	r3, [r3, #0]
 80109ea:	430a      	orrs	r2, r1
 80109ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80109f6:	d10a      	bne.n	8010a0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80109f8:	687b      	ldr	r3, [r7, #4]
 80109fa:	681b      	ldr	r3, [r3, #0]
 80109fc:	685b      	ldr	r3, [r3, #4]
 80109fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	681b      	ldr	r3, [r3, #0]
 8010a0a:	430a      	orrs	r2, r1
 8010a0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010a0e:	687b      	ldr	r3, [r7, #4]
 8010a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010a12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a16:	2b00      	cmp	r3, #0
 8010a18:	d00a      	beq.n	8010a30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010a1a:	687b      	ldr	r3, [r7, #4]
 8010a1c:	681b      	ldr	r3, [r3, #0]
 8010a1e:	685b      	ldr	r3, [r3, #4]
 8010a20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	430a      	orrs	r2, r1
 8010a2e:	605a      	str	r2, [r3, #4]
  }
}
 8010a30:	bf00      	nop
 8010a32:	370c      	adds	r7, #12
 8010a34:	46bd      	mov	sp, r7
 8010a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a3a:	4770      	bx	lr

08010a3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010a3c:	b580      	push	{r7, lr}
 8010a3e:	b086      	sub	sp, #24
 8010a40:	af02      	add	r7, sp, #8
 8010a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	2200      	movs	r2, #0
 8010a48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8010a4c:	f7f3 fd8a 	bl	8004564 <HAL_GetTick>
 8010a50:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010a52:	687b      	ldr	r3, [r7, #4]
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	f003 0308 	and.w	r3, r3, #8
 8010a5c:	2b08      	cmp	r3, #8
 8010a5e:	d10e      	bne.n	8010a7e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a64:	9300      	str	r3, [sp, #0]
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	2200      	movs	r2, #0
 8010a6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010a6e:	6878      	ldr	r0, [r7, #4]
 8010a70:	f000 f82c 	bl	8010acc <UART_WaitOnFlagUntilTimeout>
 8010a74:	4603      	mov	r3, r0
 8010a76:	2b00      	cmp	r3, #0
 8010a78:	d001      	beq.n	8010a7e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010a7a:	2303      	movs	r3, #3
 8010a7c:	e022      	b.n	8010ac4 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010a7e:	687b      	ldr	r3, [r7, #4]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	f003 0304 	and.w	r3, r3, #4
 8010a88:	2b04      	cmp	r3, #4
 8010a8a:	d10e      	bne.n	8010aaa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010a8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010a90:	9300      	str	r3, [sp, #0]
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	2200      	movs	r2, #0
 8010a96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8010a9a:	6878      	ldr	r0, [r7, #4]
 8010a9c:	f000 f816 	bl	8010acc <UART_WaitOnFlagUntilTimeout>
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	2b00      	cmp	r3, #0
 8010aa4:	d001      	beq.n	8010aaa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010aa6:	2303      	movs	r3, #3
 8010aa8:	e00c      	b.n	8010ac4 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010aaa:	687b      	ldr	r3, [r7, #4]
 8010aac:	2220      	movs	r2, #32
 8010aae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8010ab2:	687b      	ldr	r3, [r7, #4]
 8010ab4:	2220      	movs	r2, #32
 8010ab6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	2200      	movs	r2, #0
 8010abe:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010ac2:	2300      	movs	r3, #0
}
 8010ac4:	4618      	mov	r0, r3
 8010ac6:	3710      	adds	r7, #16
 8010ac8:	46bd      	mov	sp, r7
 8010aca:	bd80      	pop	{r7, pc}

08010acc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010acc:	b580      	push	{r7, lr}
 8010ace:	b084      	sub	sp, #16
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	60f8      	str	r0, [r7, #12]
 8010ad4:	60b9      	str	r1, [r7, #8]
 8010ad6:	603b      	str	r3, [r7, #0]
 8010ad8:	4613      	mov	r3, r2
 8010ada:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010adc:	e062      	b.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010ade:	69bb      	ldr	r3, [r7, #24]
 8010ae0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010ae4:	d05e      	beq.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010ae6:	f7f3 fd3d 	bl	8004564 <HAL_GetTick>
 8010aea:	4602      	mov	r2, r0
 8010aec:	683b      	ldr	r3, [r7, #0]
 8010aee:	1ad3      	subs	r3, r2, r3
 8010af0:	69ba      	ldr	r2, [r7, #24]
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d302      	bcc.n	8010afc <UART_WaitOnFlagUntilTimeout+0x30>
 8010af6:	69bb      	ldr	r3, [r7, #24]
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d11d      	bne.n	8010b38 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	681b      	ldr	r3, [r3, #0]
 8010b00:	681a      	ldr	r2, [r3, #0]
 8010b02:	68fb      	ldr	r3, [r7, #12]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b0a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	689a      	ldr	r2, [r3, #8]
 8010b12:	68fb      	ldr	r3, [r7, #12]
 8010b14:	681b      	ldr	r3, [r3, #0]
 8010b16:	f022 0201 	bic.w	r2, r2, #1
 8010b1a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8010b1c:	68fb      	ldr	r3, [r7, #12]
 8010b1e:	2220      	movs	r2, #32
 8010b20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8010b24:	68fb      	ldr	r3, [r7, #12]
 8010b26:	2220      	movs	r2, #32
 8010b28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2200      	movs	r2, #0
 8010b30:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8010b34:	2303      	movs	r3, #3
 8010b36:	e045      	b.n	8010bc4 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010b38:	68fb      	ldr	r3, [r7, #12]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	681b      	ldr	r3, [r3, #0]
 8010b3e:	f003 0304 	and.w	r3, r3, #4
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d02e      	beq.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	69db      	ldr	r3, [r3, #28]
 8010b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010b50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010b54:	d126      	bne.n	8010ba4 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	681b      	ldr	r3, [r3, #0]
 8010b5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010b5e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8010b60:	68fb      	ldr	r3, [r7, #12]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	681a      	ldr	r2, [r3, #0]
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8010b6e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	689a      	ldr	r2, [r3, #8]
 8010b76:	68fb      	ldr	r3, [r7, #12]
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	f022 0201 	bic.w	r2, r2, #1
 8010b7e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	2220      	movs	r2, #32
 8010b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8010b88:	68fb      	ldr	r3, [r7, #12]
 8010b8a:	2220      	movs	r2, #32
 8010b8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010b90:	68fb      	ldr	r3, [r7, #12]
 8010b92:	2220      	movs	r2, #32
 8010b94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	2200      	movs	r2, #0
 8010b9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8010ba0:	2303      	movs	r3, #3
 8010ba2:	e00f      	b.n	8010bc4 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	69da      	ldr	r2, [r3, #28]
 8010baa:	68bb      	ldr	r3, [r7, #8]
 8010bac:	4013      	ands	r3, r2
 8010bae:	68ba      	ldr	r2, [r7, #8]
 8010bb0:	429a      	cmp	r2, r3
 8010bb2:	bf0c      	ite	eq
 8010bb4:	2301      	moveq	r3, #1
 8010bb6:	2300      	movne	r3, #0
 8010bb8:	b2db      	uxtb	r3, r3
 8010bba:	461a      	mov	r2, r3
 8010bbc:	79fb      	ldrb	r3, [r7, #7]
 8010bbe:	429a      	cmp	r2, r3
 8010bc0:	d08d      	beq.n	8010ade <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010bc2:	2300      	movs	r3, #0
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3710      	adds	r7, #16
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bd80      	pop	{r7, pc}

08010bcc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010bcc:	b480      	push	{r7}
 8010bce:	b083      	sub	sp, #12
 8010bd0:	af00      	add	r7, sp, #0
 8010bd2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	681b      	ldr	r3, [r3, #0]
 8010bd8:	681a      	ldr	r2, [r3, #0]
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8010be2:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	681b      	ldr	r3, [r3, #0]
 8010be8:	689a      	ldr	r2, [r3, #8]
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	681b      	ldr	r3, [r3, #0]
 8010bee:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8010bf2:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010bf4:	687b      	ldr	r3, [r7, #4]
 8010bf6:	2220      	movs	r2, #32
 8010bf8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 8010bfc:	bf00      	nop
 8010bfe:	370c      	adds	r7, #12
 8010c00:	46bd      	mov	sp, r7
 8010c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c06:	4770      	bx	lr

08010c08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8010c08:	b480      	push	{r7}
 8010c0a:	b083      	sub	sp, #12
 8010c0c:	af00      	add	r7, sp, #0
 8010c0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	681a      	ldr	r2, [r3, #0]
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	681b      	ldr	r3, [r3, #0]
 8010c1a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8010c1e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	681b      	ldr	r3, [r3, #0]
 8010c24:	6899      	ldr	r1, [r3, #8]
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	681a      	ldr	r2, [r3, #0]
 8010c2a:	4b08      	ldr	r3, [pc, #32]	; (8010c4c <UART_EndRxTransfer+0x44>)
 8010c2c:	400b      	ands	r3, r1
 8010c2e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2220      	movs	r2, #32
 8010c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8010c3e:	bf00      	nop
 8010c40:	370c      	adds	r7, #12
 8010c42:	46bd      	mov	sp, r7
 8010c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c48:	4770      	bx	lr
 8010c4a:	bf00      	nop
 8010c4c:	effffffe 	.word	0xeffffffe

08010c50 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	b084      	sub	sp, #16
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c5c:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	69db      	ldr	r3, [r3, #28]
 8010c62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010c66:	d01f      	beq.n	8010ca8 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 8010c68:	68fb      	ldr	r3, [r7, #12]
 8010c6a:	2200      	movs	r2, #0
 8010c6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	681b      	ldr	r3, [r3, #0]
 8010c74:	681a      	ldr	r2, [r3, #0]
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	681b      	ldr	r3, [r3, #0]
 8010c7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8010c7e:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	689a      	ldr	r2, [r3, #8]
 8010c86:	68fb      	ldr	r3, [r7, #12]
 8010c88:	681b      	ldr	r3, [r3, #0]
 8010c8a:	f022 0201 	bic.w	r2, r2, #1
 8010c8e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	689a      	ldr	r2, [r3, #8]
 8010c96:	68fb      	ldr	r3, [r7, #12]
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8010c9e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8010ca0:	68fb      	ldr	r3, [r7, #12]
 8010ca2:	2220      	movs	r2, #32
 8010ca4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8010ca8:	68f8      	ldr	r0, [r7, #12]
 8010caa:	f7ff f861 	bl	800fd70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cae:	bf00      	nop
 8010cb0:	3710      	adds	r7, #16
 8010cb2:	46bd      	mov	sp, r7
 8010cb4:	bd80      	pop	{r7, pc}

08010cb6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010cb6:	b580      	push	{r7, lr}
 8010cb8:	b084      	sub	sp, #16
 8010cba:	af00      	add	r7, sp, #0
 8010cbc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cc2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8010cc4:	68f8      	ldr	r0, [r7, #12]
 8010cc6:	f7ef ff31 	bl	8000b2c <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010cca:	bf00      	nop
 8010ccc:	3710      	adds	r7, #16
 8010cce:	46bd      	mov	sp, r7
 8010cd0:	bd80      	pop	{r7, pc}

08010cd2 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010cd2:	b580      	push	{r7, lr}
 8010cd4:	b086      	sub	sp, #24
 8010cd6:	af00      	add	r7, sp, #0
 8010cd8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010cde:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010ce0:	697b      	ldr	r3, [r7, #20]
 8010ce2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010ce6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010ce8:	697b      	ldr	r3, [r7, #20]
 8010cea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010cee:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010cf0:	697b      	ldr	r3, [r7, #20]
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	689b      	ldr	r3, [r3, #8]
 8010cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010cfa:	2b80      	cmp	r3, #128	; 0x80
 8010cfc:	d109      	bne.n	8010d12 <UART_DMAError+0x40>
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	2b21      	cmp	r3, #33	; 0x21
 8010d02:	d106      	bne.n	8010d12 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010d04:	697b      	ldr	r3, [r7, #20]
 8010d06:	2200      	movs	r2, #0
 8010d08:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 8010d0c:	6978      	ldr	r0, [r7, #20]
 8010d0e:	f7ff ff5d 	bl	8010bcc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010d12:	697b      	ldr	r3, [r7, #20]
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	689b      	ldr	r3, [r3, #8]
 8010d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010d1c:	2b40      	cmp	r3, #64	; 0x40
 8010d1e:	d109      	bne.n	8010d34 <UART_DMAError+0x62>
 8010d20:	68fb      	ldr	r3, [r7, #12]
 8010d22:	2b22      	cmp	r3, #34	; 0x22
 8010d24:	d106      	bne.n	8010d34 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010d26:	697b      	ldr	r3, [r7, #20]
 8010d28:	2200      	movs	r2, #0
 8010d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 8010d2e:	6978      	ldr	r0, [r7, #20]
 8010d30:	f7ff ff6a 	bl	8010c08 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8010d34:	697b      	ldr	r3, [r7, #20]
 8010d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010d3a:	f043 0210 	orr.w	r2, r3, #16
 8010d3e:	697b      	ldr	r3, [r7, #20]
 8010d40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8010d44:	6978      	ldr	r0, [r7, #20]
 8010d46:	f7ff f81d 	bl	800fd84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010d4a:	bf00      	nop
 8010d4c:	3718      	adds	r7, #24
 8010d4e:	46bd      	mov	sp, r7
 8010d50:	bd80      	pop	{r7, pc}

08010d52 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010d52:	b480      	push	{r7}
 8010d54:	b085      	sub	sp, #20
 8010d56:	af00      	add	r7, sp, #0
 8010d58:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010d60:	2b01      	cmp	r3, #1
 8010d62:	d101      	bne.n	8010d68 <HAL_UARTEx_DisableFifoMode+0x16>
 8010d64:	2302      	movs	r3, #2
 8010d66:	e027      	b.n	8010db8 <HAL_UARTEx_DisableFifoMode+0x66>
 8010d68:	687b      	ldr	r3, [r7, #4]
 8010d6a:	2201      	movs	r2, #1
 8010d6c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	2224      	movs	r2, #36	; 0x24
 8010d74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	681a      	ldr	r2, [r3, #0]
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	f022 0201 	bic.w	r2, r2, #1
 8010d8e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8010d90:	68fb      	ldr	r3, [r7, #12]
 8010d92:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8010d96:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	681b      	ldr	r3, [r3, #0]
 8010da2:	68fa      	ldr	r2, [r7, #12]
 8010da4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	2220      	movs	r2, #32
 8010daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010db6:	2300      	movs	r3, #0
}
 8010db8:	4618      	mov	r0, r3
 8010dba:	3714      	adds	r7, #20
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dc2:	4770      	bx	lr

08010dc4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	6078      	str	r0, [r7, #4]
 8010dcc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d101      	bne.n	8010ddc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010dd8:	2302      	movs	r3, #2
 8010dda:	e02d      	b.n	8010e38 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	2201      	movs	r2, #1
 8010de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2224      	movs	r2, #36	; 0x24
 8010de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	681b      	ldr	r3, [r3, #0]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010df4:	687b      	ldr	r3, [r7, #4]
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	681a      	ldr	r2, [r3, #0]
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	681b      	ldr	r3, [r3, #0]
 8010dfe:	f022 0201 	bic.w	r2, r2, #1
 8010e02:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010e04:	687b      	ldr	r3, [r7, #4]
 8010e06:	681b      	ldr	r3, [r3, #0]
 8010e08:	689b      	ldr	r3, [r3, #8]
 8010e0a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	683a      	ldr	r2, [r7, #0]
 8010e14:	430a      	orrs	r2, r1
 8010e16:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e18:	6878      	ldr	r0, [r7, #4]
 8010e1a:	f000 f84f 	bl	8010ebc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e1e:	687b      	ldr	r3, [r7, #4]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	68fa      	ldr	r2, [r7, #12]
 8010e24:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010e26:	687b      	ldr	r3, [r7, #4]
 8010e28:	2220      	movs	r2, #32
 8010e2a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010e36:	2300      	movs	r3, #0
}
 8010e38:	4618      	mov	r0, r3
 8010e3a:	3710      	adds	r7, #16
 8010e3c:	46bd      	mov	sp, r7
 8010e3e:	bd80      	pop	{r7, pc}

08010e40 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b084      	sub	sp, #16
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010e50:	2b01      	cmp	r3, #1
 8010e52:	d101      	bne.n	8010e58 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010e54:	2302      	movs	r3, #2
 8010e56:	e02d      	b.n	8010eb4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	2201      	movs	r2, #1
 8010e5c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8010e60:	687b      	ldr	r3, [r7, #4]
 8010e62:	2224      	movs	r2, #36	; 0x24
 8010e64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	681b      	ldr	r3, [r3, #0]
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	681b      	ldr	r3, [r3, #0]
 8010e74:	681a      	ldr	r2, [r3, #0]
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	681b      	ldr	r3, [r3, #0]
 8010e7a:	f022 0201 	bic.w	r2, r2, #1
 8010e7e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8010e80:	687b      	ldr	r3, [r7, #4]
 8010e82:	681b      	ldr	r3, [r3, #0]
 8010e84:	689b      	ldr	r3, [r3, #8]
 8010e86:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	683a      	ldr	r2, [r7, #0]
 8010e90:	430a      	orrs	r2, r1
 8010e92:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010e94:	6878      	ldr	r0, [r7, #4]
 8010e96:	f000 f811 	bl	8010ebc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	68fa      	ldr	r2, [r7, #12]
 8010ea0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	2220      	movs	r2, #32
 8010ea6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8010eaa:	687b      	ldr	r3, [r7, #4]
 8010eac:	2200      	movs	r2, #0
 8010eae:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8010eb2:	2300      	movs	r3, #0
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3710      	adds	r7, #16
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}

08010ebc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8010ebc:	b480      	push	{r7}
 8010ebe:	b089      	sub	sp, #36	; 0x24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8010ec4:	4a2f      	ldr	r2, [pc, #188]	; (8010f84 <UARTEx_SetNbDataToProcess+0xc8>)
 8010ec6:	f107 0314 	add.w	r3, r7, #20
 8010eca:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010ece:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8010ed2:	4a2d      	ldr	r2, [pc, #180]	; (8010f88 <UARTEx_SetNbDataToProcess+0xcc>)
 8010ed4:	f107 030c 	add.w	r3, r7, #12
 8010ed8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010edc:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8010ee0:	687b      	ldr	r3, [r7, #4]
 8010ee2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d108      	bne.n	8010efa <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8010ee8:	687b      	ldr	r3, [r7, #4]
 8010eea:	2201      	movs	r2, #1
 8010eec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	2201      	movs	r2, #1
 8010ef4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010ef8:	e03d      	b.n	8010f76 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010efa:	2310      	movs	r3, #16
 8010efc:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010efe:	2310      	movs	r3, #16
 8010f00:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	689b      	ldr	r3, [r3, #8]
 8010f08:	0e5b      	lsrs	r3, r3, #25
 8010f0a:	b2db      	uxtb	r3, r3
 8010f0c:	f003 0307 	and.w	r3, r3, #7
 8010f10:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	689b      	ldr	r3, [r3, #8]
 8010f18:	0f5b      	lsrs	r3, r3, #29
 8010f1a:	b2db      	uxtb	r3, r3
 8010f1c:	f003 0307 	and.w	r3, r3, #7
 8010f20:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8010f22:	7fbb      	ldrb	r3, [r7, #30]
 8010f24:	7f3a      	ldrb	r2, [r7, #28]
 8010f26:	f107 0120 	add.w	r1, r7, #32
 8010f2a:	440a      	add	r2, r1
 8010f2c:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f30:	fb02 f303 	mul.w	r3, r2, r3
 8010f34:	7f3a      	ldrb	r2, [r7, #28]
 8010f36:	f107 0120 	add.w	r1, r7, #32
 8010f3a:	440a      	add	r2, r1
 8010f3c:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f44:	b29a      	uxth	r2, r3
 8010f46:	687b      	ldr	r3, [r7, #4]
 8010f48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8010f4c:	7ffb      	ldrb	r3, [r7, #31]
 8010f4e:	7f7a      	ldrb	r2, [r7, #29]
 8010f50:	f107 0120 	add.w	r1, r7, #32
 8010f54:	440a      	add	r2, r1
 8010f56:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8010f5a:	fb02 f303 	mul.w	r3, r2, r3
 8010f5e:	7f7a      	ldrb	r2, [r7, #29]
 8010f60:	f107 0120 	add.w	r1, r7, #32
 8010f64:	440a      	add	r2, r1
 8010f66:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8010f6a:	fb93 f3f2 	sdiv	r3, r3, r2
 8010f6e:	b29a      	uxth	r2, r3
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010f76:	bf00      	nop
 8010f78:	3724      	adds	r7, #36	; 0x24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f80:	4770      	bx	lr
 8010f82:	bf00      	nop
 8010f84:	0801ae3c 	.word	0x0801ae3c
 8010f88:	0801ae44 	.word	0x0801ae44

08010f8c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8010f8c:	b084      	sub	sp, #16
 8010f8e:	b480      	push	{r7}
 8010f90:	b085      	sub	sp, #20
 8010f92:	af00      	add	r7, sp, #0
 8010f94:	6078      	str	r0, [r7, #4]
 8010f96:	f107 001c 	add.w	r0, r7, #28
 8010f9a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8010f9e:	2300      	movs	r3, #0
 8010fa0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8010fa2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8010fa4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8010fa6:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8010fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 8010faa:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8010fac:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 8010fae:	431a      	orrs	r2, r3
             Init.ClockDiv
 8010fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8010fb2:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8010fb4:	68fa      	ldr	r2, [r7, #12]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	685a      	ldr	r2, [r3, #4]
 8010fbe:	4b07      	ldr	r3, [pc, #28]	; (8010fdc <SDMMC_Init+0x50>)
 8010fc0:	4013      	ands	r3, r2
 8010fc2:	68fa      	ldr	r2, [r7, #12]
 8010fc4:	431a      	orrs	r2, r3
 8010fc6:	687b      	ldr	r3, [r7, #4]
 8010fc8:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8010fca:	2300      	movs	r3, #0
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3714      	adds	r7, #20
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd6:	b004      	add	sp, #16
 8010fd8:	4770      	bx	lr
 8010fda:	bf00      	nop
 8010fdc:	ffc02c00 	.word	0xffc02c00

08010fe0 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8010fe0:	b480      	push	{r7}
 8010fe2:	b083      	sub	sp, #12
 8010fe4:	af00      	add	r7, sp, #0
 8010fe6:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8010fe8:	687b      	ldr	r3, [r7, #4]
 8010fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	370c      	adds	r7, #12
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff8:	4770      	bx	lr

08010ffa <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8010ffa:	b480      	push	{r7}
 8010ffc:	b083      	sub	sp, #12
 8010ffe:	af00      	add	r7, sp, #0
 8011000:	6078      	str	r0, [r7, #4]
 8011002:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011004:	683b      	ldr	r3, [r7, #0]
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801100e:	2300      	movs	r3, #0
}
 8011010:	4618      	mov	r0, r3
 8011012:	370c      	adds	r7, #12
 8011014:	46bd      	mov	sp, r7
 8011016:	f85d 7b04 	ldr.w	r7, [sp], #4
 801101a:	4770      	bx	lr

0801101c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801101c:	b480      	push	{r7}
 801101e:	b083      	sub	sp, #12
 8011020:	af00      	add	r7, sp, #0
 8011022:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 8011024:	687b      	ldr	r3, [r7, #4]
 8011026:	681b      	ldr	r3, [r3, #0]
 8011028:	f043 0203 	orr.w	r2, r3, #3
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8011030:	2300      	movs	r3, #0
}
 8011032:	4618      	mov	r0, r3
 8011034:	370c      	adds	r7, #12
 8011036:	46bd      	mov	sp, r7
 8011038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801103c:	4770      	bx	lr

0801103e <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 801103e:	b480      	push	{r7}
 8011040:	b083      	sub	sp, #12
 8011042:	af00      	add	r7, sp, #0
 8011044:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	681b      	ldr	r3, [r3, #0]
 801104a:	f003 0303 	and.w	r3, r3, #3
}
 801104e:	4618      	mov	r0, r3
 8011050:	370c      	adds	r7, #12
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr
	...

0801105c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 801105c:	b480      	push	{r7}
 801105e:	b085      	sub	sp, #20
 8011060:	af00      	add	r7, sp, #0
 8011062:	6078      	str	r0, [r7, #4]
 8011064:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8011066:	2300      	movs	r3, #0
 8011068:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 801106a:	683b      	ldr	r3, [r7, #0]
 801106c:	681a      	ldr	r2, [r3, #0]
 801106e:	687b      	ldr	r3, [r7, #4]
 8011070:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011072:	683b      	ldr	r3, [r7, #0]
 8011074:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8011076:	683b      	ldr	r3, [r7, #0]
 8011078:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 801107a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 801107c:	683b      	ldr	r3, [r7, #0]
 801107e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011080:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011082:	683b      	ldr	r3, [r7, #0]
 8011084:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011086:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011088:	68fa      	ldr	r2, [r7, #12]
 801108a:	4313      	orrs	r3, r2
 801108c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	68da      	ldr	r2, [r3, #12]
 8011092:	4b06      	ldr	r3, [pc, #24]	; (80110ac <SDMMC_SendCommand+0x50>)
 8011094:	4013      	ands	r3, r2
 8011096:	68fa      	ldr	r2, [r7, #12]
 8011098:	431a      	orrs	r2, r3
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801109e:	2300      	movs	r3, #0
}
 80110a0:	4618      	mov	r0, r3
 80110a2:	3714      	adds	r7, #20
 80110a4:	46bd      	mov	sp, r7
 80110a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110aa:	4770      	bx	lr
 80110ac:	fffee0c0 	.word	0xfffee0c0

080110b0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80110b0:	b480      	push	{r7}
 80110b2:	b083      	sub	sp, #12
 80110b4:	af00      	add	r7, sp, #0
 80110b6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	691b      	ldr	r3, [r3, #16]
 80110bc:	b2db      	uxtb	r3, r3
}
 80110be:	4618      	mov	r0, r3
 80110c0:	370c      	adds	r7, #12
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr

080110ca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 80110ca:	b480      	push	{r7}
 80110cc:	b085      	sub	sp, #20
 80110ce:	af00      	add	r7, sp, #0
 80110d0:	6078      	str	r0, [r7, #4]
 80110d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	3314      	adds	r3, #20
 80110d8:	461a      	mov	r2, r3
 80110da:	683b      	ldr	r3, [r7, #0]
 80110dc:	4413      	add	r3, r2
 80110de:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	681b      	ldr	r3, [r3, #0]
}
 80110e4:	4618      	mov	r0, r3
 80110e6:	3714      	adds	r7, #20
 80110e8:	46bd      	mov	sp, r7
 80110ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ee:	4770      	bx	lr

080110f0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 80110f0:	b480      	push	{r7}
 80110f2:	b085      	sub	sp, #20
 80110f4:	af00      	add	r7, sp, #0
 80110f6:	6078      	str	r0, [r7, #4]
 80110f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80110fa:	2300      	movs	r3, #0
 80110fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 80110fe:	683b      	ldr	r3, [r7, #0]
 8011100:	681a      	ldr	r2, [r3, #0]
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	685a      	ldr	r2, [r3, #4]
 801110a:	687b      	ldr	r3, [r7, #4]
 801110c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801110e:	683b      	ldr	r3, [r7, #0]
 8011110:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011112:	683b      	ldr	r3, [r7, #0]
 8011114:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011116:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011118:	683b      	ldr	r3, [r7, #0]
 801111a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801111c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8011122:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011124:	68fa      	ldr	r2, [r7, #12]
 8011126:	4313      	orrs	r3, r2
 8011128:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 801112a:	687b      	ldr	r3, [r7, #4]
 801112c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801112e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8011132:	68fb      	ldr	r3, [r7, #12]
 8011134:	431a      	orrs	r2, r3
 8011136:	687b      	ldr	r3, [r7, #4]
 8011138:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 801113a:	2300      	movs	r3, #0

}
 801113c:	4618      	mov	r0, r3
 801113e:	3714      	adds	r7, #20
 8011140:	46bd      	mov	sp, r7
 8011142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011146:	4770      	bx	lr

08011148 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b088      	sub	sp, #32
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
 8011150:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8011152:	683b      	ldr	r3, [r7, #0]
 8011154:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8011156:	2310      	movs	r3, #16
 8011158:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801115a:	f44f 7380 	mov.w	r3, #256	; 0x100
 801115e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011160:	2300      	movs	r3, #0
 8011162:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011164:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011168:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801116a:	f107 0308 	add.w	r3, r7, #8
 801116e:	4619      	mov	r1, r3
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f7ff ff73 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8011176:	f241 3288 	movw	r2, #5000	; 0x1388
 801117a:	2110      	movs	r1, #16
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f000 faaf 	bl	80116e0 <SDMMC_GetCmdResp1>
 8011182:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011184:	69fb      	ldr	r3, [r7, #28]
}
 8011186:	4618      	mov	r0, r3
 8011188:	3720      	adds	r7, #32
 801118a:	46bd      	mov	sp, r7
 801118c:	bd80      	pop	{r7, pc}

0801118e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 801118e:	b580      	push	{r7, lr}
 8011190:	b088      	sub	sp, #32
 8011192:	af00      	add	r7, sp, #0
 8011194:	6078      	str	r0, [r7, #4]
 8011196:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011198:	683b      	ldr	r3, [r7, #0]
 801119a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 801119c:	2311      	movs	r3, #17
 801119e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111a6:	2300      	movs	r3, #0
 80111a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111ae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111b0:	f107 0308 	add.w	r3, r7, #8
 80111b4:	4619      	mov	r1, r3
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7ff ff50 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 80111bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80111c0:	2111      	movs	r1, #17
 80111c2:	6878      	ldr	r0, [r7, #4]
 80111c4:	f000 fa8c 	bl	80116e0 <SDMMC_GetCmdResp1>
 80111c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80111ca:	69fb      	ldr	r3, [r7, #28]
}
 80111cc:	4618      	mov	r0, r3
 80111ce:	3720      	adds	r7, #32
 80111d0:	46bd      	mov	sp, r7
 80111d2:	bd80      	pop	{r7, pc}

080111d4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b088      	sub	sp, #32
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
 80111dc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 80111de:	683b      	ldr	r3, [r7, #0]
 80111e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 80111e2:	2312      	movs	r3, #18
 80111e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80111e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80111ea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80111ec:	2300      	movs	r3, #0
 80111ee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80111f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80111f4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80111f6:	f107 0308 	add.w	r3, r7, #8
 80111fa:	4619      	mov	r1, r3
 80111fc:	6878      	ldr	r0, [r7, #4]
 80111fe:	f7ff ff2d 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011202:	f241 3288 	movw	r2, #5000	; 0x1388
 8011206:	2112      	movs	r1, #18
 8011208:	6878      	ldr	r0, [r7, #4]
 801120a:	f000 fa69 	bl	80116e0 <SDMMC_GetCmdResp1>
 801120e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011210:	69fb      	ldr	r3, [r7, #28]
}
 8011212:	4618      	mov	r0, r3
 8011214:	3720      	adds	r7, #32
 8011216:	46bd      	mov	sp, r7
 8011218:	bd80      	pop	{r7, pc}

0801121a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 801121a:	b580      	push	{r7, lr}
 801121c:	b088      	sub	sp, #32
 801121e:	af00      	add	r7, sp, #0
 8011220:	6078      	str	r0, [r7, #4]
 8011222:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011224:	683b      	ldr	r3, [r7, #0]
 8011226:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011228:	2318      	movs	r3, #24
 801122a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801122c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011230:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011232:	2300      	movs	r3, #0
 8011234:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011236:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801123a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801123c:	f107 0308 	add.w	r3, r7, #8
 8011240:	4619      	mov	r1, r3
 8011242:	6878      	ldr	r0, [r7, #4]
 8011244:	f7ff ff0a 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011248:	f241 3288 	movw	r2, #5000	; 0x1388
 801124c:	2118      	movs	r1, #24
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f000 fa46 	bl	80116e0 <SDMMC_GetCmdResp1>
 8011254:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011256:	69fb      	ldr	r3, [r7, #28]
}
 8011258:	4618      	mov	r0, r3
 801125a:	3720      	adds	r7, #32
 801125c:	46bd      	mov	sp, r7
 801125e:	bd80      	pop	{r7, pc}

08011260 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b088      	sub	sp, #32
 8011264:	af00      	add	r7, sp, #0
 8011266:	6078      	str	r0, [r7, #4]
 8011268:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 801126a:	683b      	ldr	r3, [r7, #0]
 801126c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 801126e:	2319      	movs	r3, #25
 8011270:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011272:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011276:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011278:	2300      	movs	r3, #0
 801127a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801127c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011280:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011282:	f107 0308 	add.w	r3, r7, #8
 8011286:	4619      	mov	r1, r3
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f7ff fee7 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 801128e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011292:	2119      	movs	r1, #25
 8011294:	6878      	ldr	r0, [r7, #4]
 8011296:	f000 fa23 	bl	80116e0 <SDMMC_GetCmdResp1>
 801129a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801129c:	69fb      	ldr	r3, [r7, #28]
}
 801129e:	4618      	mov	r0, r3
 80112a0:	3720      	adds	r7, #32
 80112a2:	46bd      	mov	sp, r7
 80112a4:	bd80      	pop	{r7, pc}
	...

080112a8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b088      	sub	sp, #32
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 80112b0:	2300      	movs	r3, #0
 80112b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 80112b4:	230c      	movs	r3, #12
 80112b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80112b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80112bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80112be:	2300      	movs	r3, #0
 80112c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80112c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80112c6:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	68db      	ldr	r3, [r3, #12]
 80112cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	68db      	ldr	r3, [r3, #12]
 80112d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80112e0:	f107 0308 	add.w	r3, r7, #8
 80112e4:	4619      	mov	r1, r3
 80112e6:	6878      	ldr	r0, [r7, #4]
 80112e8:	f7ff feb8 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80112ec:	4a0b      	ldr	r2, [pc, #44]	; (801131c <SDMMC_CmdStopTransfer+0x74>)
 80112ee:	210c      	movs	r1, #12
 80112f0:	6878      	ldr	r0, [r7, #4]
 80112f2:	f000 f9f5 	bl	80116e0 <SDMMC_GetCmdResp1>
 80112f6:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	68db      	ldr	r3, [r3, #12]
 80112fc:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011304:	69fb      	ldr	r3, [r7, #28]
 8011306:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 801130a:	d101      	bne.n	8011310 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 801130c:	2300      	movs	r3, #0
 801130e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011310:	69fb      	ldr	r3, [r7, #28]
}
 8011312:	4618      	mov	r0, r3
 8011314:	3720      	adds	r7, #32
 8011316:	46bd      	mov	sp, r7
 8011318:	bd80      	pop	{r7, pc}
 801131a:	bf00      	nop
 801131c:	05f5e100 	.word	0x05f5e100

08011320 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b08a      	sub	sp, #40	; 0x28
 8011324:	af00      	add	r7, sp, #0
 8011326:	60f8      	str	r0, [r7, #12]
 8011328:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 801132c:	683b      	ldr	r3, [r7, #0]
 801132e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011330:	2307      	movs	r3, #7
 8011332:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011334:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011338:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801133a:	2300      	movs	r3, #0
 801133c:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801133e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011342:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011344:	f107 0310 	add.w	r3, r7, #16
 8011348:	4619      	mov	r1, r3
 801134a:	68f8      	ldr	r0, [r7, #12]
 801134c:	f7ff fe86 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011350:	f241 3288 	movw	r2, #5000	; 0x1388
 8011354:	2107      	movs	r1, #7
 8011356:	68f8      	ldr	r0, [r7, #12]
 8011358:	f000 f9c2 	bl	80116e0 <SDMMC_GetCmdResp1>
 801135c:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 801135e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011360:	4618      	mov	r0, r3
 8011362:	3728      	adds	r7, #40	; 0x28
 8011364:	46bd      	mov	sp, r7
 8011366:	bd80      	pop	{r7, pc}

08011368 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011368:	b580      	push	{r7, lr}
 801136a:	b088      	sub	sp, #32
 801136c:	af00      	add	r7, sp, #0
 801136e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011370:	2300      	movs	r3, #0
 8011372:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011374:	2300      	movs	r3, #0
 8011376:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011378:	2300      	movs	r3, #0
 801137a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801137c:	2300      	movs	r3, #0
 801137e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011380:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011384:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011386:	f107 0308 	add.w	r3, r7, #8
 801138a:	4619      	mov	r1, r3
 801138c:	6878      	ldr	r0, [r7, #4]
 801138e:	f7ff fe65 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f000 f976 	bl	8011684 <SDMMC_GetCmdError>
 8011398:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801139a:	69fb      	ldr	r3, [r7, #28]
}
 801139c:	4618      	mov	r0, r3
 801139e:	3720      	adds	r7, #32
 80113a0:	46bd      	mov	sp, r7
 80113a2:	bd80      	pop	{r7, pc}

080113a4 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b088      	sub	sp, #32
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80113ac:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80113b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80113b2:	2308      	movs	r3, #8
 80113b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113bc:	2300      	movs	r3, #0
 80113be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80113c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80113c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80113c6:	f107 0308 	add.w	r3, r7, #8
 80113ca:	4619      	mov	r1, r3
 80113cc:	6878      	ldr	r0, [r7, #4]
 80113ce:	f7ff fe45 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 80113d2:	6878      	ldr	r0, [r7, #4]
 80113d4:	f000 fb78 	bl	8011ac8 <SDMMC_GetCmdResp7>
 80113d8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80113da:	69fb      	ldr	r3, [r7, #28]
}
 80113dc:	4618      	mov	r0, r3
 80113de:	3720      	adds	r7, #32
 80113e0:	46bd      	mov	sp, r7
 80113e2:	bd80      	pop	{r7, pc}

080113e4 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80113e4:	b580      	push	{r7, lr}
 80113e6:	b088      	sub	sp, #32
 80113e8:	af00      	add	r7, sp, #0
 80113ea:	6078      	str	r0, [r7, #4]
 80113ec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80113ee:	683b      	ldr	r3, [r7, #0]
 80113f0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80113f2:	2337      	movs	r3, #55	; 0x37
 80113f4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80113f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80113fa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80113fc:	2300      	movs	r3, #0
 80113fe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011400:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011404:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011406:	f107 0308 	add.w	r3, r7, #8
 801140a:	4619      	mov	r1, r3
 801140c:	6878      	ldr	r0, [r7, #4]
 801140e:	f7ff fe25 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011412:	f241 3288 	movw	r2, #5000	; 0x1388
 8011416:	2137      	movs	r1, #55	; 0x37
 8011418:	6878      	ldr	r0, [r7, #4]
 801141a:	f000 f961 	bl	80116e0 <SDMMC_GetCmdResp1>
 801141e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011420:	69fb      	ldr	r3, [r7, #28]
}
 8011422:	4618      	mov	r0, r3
 8011424:	3720      	adds	r7, #32
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}

0801142a <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 801142a:	b580      	push	{r7, lr}
 801142c:	b088      	sub	sp, #32
 801142e:	af00      	add	r7, sp, #0
 8011430:	6078      	str	r0, [r7, #4]
 8011432:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011434:	683b      	ldr	r3, [r7, #0]
 8011436:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011438:	2329      	movs	r3, #41	; 0x29
 801143a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801143c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011440:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011442:	2300      	movs	r3, #0
 8011444:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801144a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801144c:	f107 0308 	add.w	r3, r7, #8
 8011450:	4619      	mov	r1, r3
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f7ff fe02 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011458:	6878      	ldr	r0, [r7, #4]
 801145a:	f000 fa7d 	bl	8011958 <SDMMC_GetCmdResp3>
 801145e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011460:	69fb      	ldr	r3, [r7, #28]
}
 8011462:	4618      	mov	r0, r3
 8011464:	3720      	adds	r7, #32
 8011466:	46bd      	mov	sp, r7
 8011468:	bd80      	pop	{r7, pc}

0801146a <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 801146a:	b580      	push	{r7, lr}
 801146c:	b088      	sub	sp, #32
 801146e:	af00      	add	r7, sp, #0
 8011470:	6078      	str	r0, [r7, #4]
 8011472:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011474:	683b      	ldr	r3, [r7, #0]
 8011476:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011478:	2306      	movs	r3, #6
 801147a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801147c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011480:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011482:	2300      	movs	r3, #0
 8011484:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011486:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801148a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801148c:	f107 0308 	add.w	r3, r7, #8
 8011490:	4619      	mov	r1, r3
 8011492:	6878      	ldr	r0, [r7, #4]
 8011494:	f7ff fde2 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011498:	f241 3288 	movw	r2, #5000	; 0x1388
 801149c:	2106      	movs	r1, #6
 801149e:	6878      	ldr	r0, [r7, #4]
 80114a0:	f000 f91e 	bl	80116e0 <SDMMC_GetCmdResp1>
 80114a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114a6:	69fb      	ldr	r3, [r7, #28]
}
 80114a8:	4618      	mov	r0, r3
 80114aa:	3720      	adds	r7, #32
 80114ac:	46bd      	mov	sp, r7
 80114ae:	bd80      	pop	{r7, pc}

080114b0 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 80114b0:	b580      	push	{r7, lr}
 80114b2:	b088      	sub	sp, #32
 80114b4:	af00      	add	r7, sp, #0
 80114b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80114b8:	2300      	movs	r3, #0
 80114ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80114bc:	2333      	movs	r3, #51	; 0x33
 80114be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80114c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80114c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80114c6:	2300      	movs	r3, #0
 80114c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80114ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80114ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80114d0:	f107 0308 	add.w	r3, r7, #8
 80114d4:	4619      	mov	r1, r3
 80114d6:	6878      	ldr	r0, [r7, #4]
 80114d8:	f7ff fdc0 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 80114dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80114e0:	2133      	movs	r1, #51	; 0x33
 80114e2:	6878      	ldr	r0, [r7, #4]
 80114e4:	f000 f8fc 	bl	80116e0 <SDMMC_GetCmdResp1>
 80114e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80114ea:	69fb      	ldr	r3, [r7, #28]
}
 80114ec:	4618      	mov	r0, r3
 80114ee:	3720      	adds	r7, #32
 80114f0:	46bd      	mov	sp, r7
 80114f2:	bd80      	pop	{r7, pc}

080114f4 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80114f4:	b580      	push	{r7, lr}
 80114f6:	b088      	sub	sp, #32
 80114f8:	af00      	add	r7, sp, #0
 80114fa:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80114fc:	2300      	movs	r3, #0
 80114fe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011500:	2302      	movs	r3, #2
 8011502:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011504:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011508:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801150a:	2300      	movs	r3, #0
 801150c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801150e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011512:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011514:	f107 0308 	add.w	r3, r7, #8
 8011518:	4619      	mov	r1, r3
 801151a:	6878      	ldr	r0, [r7, #4]
 801151c:	f7ff fd9e 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011520:	6878      	ldr	r0, [r7, #4]
 8011522:	f000 f9cf 	bl	80118c4 <SDMMC_GetCmdResp2>
 8011526:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011528:	69fb      	ldr	r3, [r7, #28]
}
 801152a:	4618      	mov	r0, r3
 801152c:	3720      	adds	r7, #32
 801152e:	46bd      	mov	sp, r7
 8011530:	bd80      	pop	{r7, pc}

08011532 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011532:	b580      	push	{r7, lr}
 8011534:	b088      	sub	sp, #32
 8011536:	af00      	add	r7, sp, #0
 8011538:	6078      	str	r0, [r7, #4]
 801153a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011540:	2309      	movs	r3, #9
 8011542:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011544:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011548:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801154a:	2300      	movs	r3, #0
 801154c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801154e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011552:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011554:	f107 0308 	add.w	r3, r7, #8
 8011558:	4619      	mov	r1, r3
 801155a:	6878      	ldr	r0, [r7, #4]
 801155c:	f7ff fd7e 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011560:	6878      	ldr	r0, [r7, #4]
 8011562:	f000 f9af 	bl	80118c4 <SDMMC_GetCmdResp2>
 8011566:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011568:	69fb      	ldr	r3, [r7, #28]
}
 801156a:	4618      	mov	r0, r3
 801156c:	3720      	adds	r7, #32
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}

08011572 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011572:	b580      	push	{r7, lr}
 8011574:	b088      	sub	sp, #32
 8011576:	af00      	add	r7, sp, #0
 8011578:	6078      	str	r0, [r7, #4]
 801157a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 801157c:	2300      	movs	r3, #0
 801157e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011580:	2303      	movs	r3, #3
 8011582:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011588:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 801158a:	2300      	movs	r3, #0
 801158c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801158e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011592:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011594:	f107 0308 	add.w	r3, r7, #8
 8011598:	4619      	mov	r1, r3
 801159a:	6878      	ldr	r0, [r7, #4]
 801159c:	f7ff fd5e 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80115a0:	683a      	ldr	r2, [r7, #0]
 80115a2:	2103      	movs	r1, #3
 80115a4:	6878      	ldr	r0, [r7, #4]
 80115a6:	f000 fa17 	bl	80119d8 <SDMMC_GetCmdResp6>
 80115aa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115ac:	69fb      	ldr	r3, [r7, #28]
}
 80115ae:	4618      	mov	r0, r3
 80115b0:	3720      	adds	r7, #32
 80115b2:	46bd      	mov	sp, r7
 80115b4:	bd80      	pop	{r7, pc}

080115b6 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80115b6:	b580      	push	{r7, lr}
 80115b8:	b088      	sub	sp, #32
 80115ba:	af00      	add	r7, sp, #0
 80115bc:	6078      	str	r0, [r7, #4]
 80115be:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80115c4:	230d      	movs	r3, #13
 80115c6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80115c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80115cc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80115ce:	2300      	movs	r3, #0
 80115d0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80115d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80115d6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80115d8:	f107 0308 	add.w	r3, r7, #8
 80115dc:	4619      	mov	r1, r3
 80115de:	6878      	ldr	r0, [r7, #4]
 80115e0:	f7ff fd3c 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 80115e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80115e8:	210d      	movs	r1, #13
 80115ea:	6878      	ldr	r0, [r7, #4]
 80115ec:	f000 f878 	bl	80116e0 <SDMMC_GetCmdResp1>
 80115f0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80115f2:	69fb      	ldr	r3, [r7, #28]
}
 80115f4:	4618      	mov	r0, r3
 80115f6:	3720      	adds	r7, #32
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}

080115fc <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b088      	sub	sp, #32
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011604:	2300      	movs	r3, #0
 8011606:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011608:	230d      	movs	r3, #13
 801160a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011610:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011612:	2300      	movs	r3, #0
 8011614:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011616:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801161a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 801161c:	f107 0308 	add.w	r3, r7, #8
 8011620:	4619      	mov	r1, r3
 8011622:	6878      	ldr	r0, [r7, #4]
 8011624:	f7ff fd1a 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011628:	f241 3288 	movw	r2, #5000	; 0x1388
 801162c:	210d      	movs	r1, #13
 801162e:	6878      	ldr	r0, [r7, #4]
 8011630:	f000 f856 	bl	80116e0 <SDMMC_GetCmdResp1>
 8011634:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011636:	69fb      	ldr	r3, [r7, #28]
}
 8011638:	4618      	mov	r0, r3
 801163a:	3720      	adds	r7, #32
 801163c:	46bd      	mov	sp, r7
 801163e:	bd80      	pop	{r7, pc}

08011640 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011640:	b580      	push	{r7, lr}
 8011642:	b088      	sub	sp, #32
 8011644:	af00      	add	r7, sp, #0
 8011646:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011648:	2300      	movs	r3, #0
 801164a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 801164c:	230b      	movs	r3, #11
 801164e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011650:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011654:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011656:	2300      	movs	r3, #0
 8011658:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 801165a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801165e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011660:	f107 0308 	add.w	r3, r7, #8
 8011664:	4619      	mov	r1, r3
 8011666:	6878      	ldr	r0, [r7, #4]
 8011668:	f7ff fcf8 	bl	801105c <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 801166c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011670:	210b      	movs	r1, #11
 8011672:	6878      	ldr	r0, [r7, #4]
 8011674:	f000 f834 	bl	80116e0 <SDMMC_GetCmdResp1>
 8011678:	61f8      	str	r0, [r7, #28]

  return errorstate;
 801167a:	69fb      	ldr	r3, [r7, #28]
}
 801167c:	4618      	mov	r0, r3
 801167e:	3720      	adds	r7, #32
 8011680:	46bd      	mov	sp, r7
 8011682:	bd80      	pop	{r7, pc}

08011684 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801168c:	4b11      	ldr	r3, [pc, #68]	; (80116d4 <SDMMC_GetCmdError+0x50>)
 801168e:	681b      	ldr	r3, [r3, #0]
 8011690:	4a11      	ldr	r2, [pc, #68]	; (80116d8 <SDMMC_GetCmdError+0x54>)
 8011692:	fba2 2303 	umull	r2, r3, r2, r3
 8011696:	0a5b      	lsrs	r3, r3, #9
 8011698:	f241 3288 	movw	r2, #5000	; 0x1388
 801169c:	fb02 f303 	mul.w	r3, r2, r3
 80116a0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80116a2:	68fb      	ldr	r3, [r7, #12]
 80116a4:	1e5a      	subs	r2, r3, #1
 80116a6:	60fa      	str	r2, [r7, #12]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d102      	bne.n	80116b2 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80116ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80116b0:	e009      	b.n	80116c6 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80116b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d0f1      	beq.n	80116a2 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80116be:	687b      	ldr	r3, [r7, #4]
 80116c0:	4a06      	ldr	r2, [pc, #24]	; (80116dc <SDMMC_GetCmdError+0x58>)
 80116c2:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 80116c4:	2300      	movs	r3, #0
}
 80116c6:	4618      	mov	r0, r3
 80116c8:	3714      	adds	r7, #20
 80116ca:	46bd      	mov	sp, r7
 80116cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116d0:	4770      	bx	lr
 80116d2:	bf00      	nop
 80116d4:	24000010 	.word	0x24000010
 80116d8:	10624dd3 	.word	0x10624dd3
 80116dc:	002000c5 	.word	0x002000c5

080116e0 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80116e0:	b580      	push	{r7, lr}
 80116e2:	b088      	sub	sp, #32
 80116e4:	af00      	add	r7, sp, #0
 80116e6:	60f8      	str	r0, [r7, #12]
 80116e8:	460b      	mov	r3, r1
 80116ea:	607a      	str	r2, [r7, #4]
 80116ec:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 80116ee:	4b70      	ldr	r3, [pc, #448]	; (80118b0 <SDMMC_GetCmdResp1+0x1d0>)
 80116f0:	681b      	ldr	r3, [r3, #0]
 80116f2:	4a70      	ldr	r2, [pc, #448]	; (80118b4 <SDMMC_GetCmdResp1+0x1d4>)
 80116f4:	fba2 2303 	umull	r2, r3, r2, r3
 80116f8:	0a5a      	lsrs	r2, r3, #9
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	fb02 f303 	mul.w	r3, r2, r3
 8011700:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011702:	69fb      	ldr	r3, [r7, #28]
 8011704:	1e5a      	subs	r2, r3, #1
 8011706:	61fa      	str	r2, [r7, #28]
 8011708:	2b00      	cmp	r3, #0
 801170a:	d102      	bne.n	8011712 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 801170c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011710:	e0c9      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011712:	68fb      	ldr	r3, [r7, #12]
 8011714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011716:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011718:	69ba      	ldr	r2, [r7, #24]
 801171a:	4b67      	ldr	r3, [pc, #412]	; (80118b8 <SDMMC_GetCmdResp1+0x1d8>)
 801171c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801171e:	2b00      	cmp	r3, #0
 8011720:	d0ef      	beq.n	8011702 <SDMMC_GetCmdResp1+0x22>
 8011722:	69bb      	ldr	r3, [r7, #24]
 8011724:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011728:	2b00      	cmp	r3, #0
 801172a:	d1ea      	bne.n	8011702 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801172c:	68fb      	ldr	r3, [r7, #12]
 801172e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011730:	f003 0304 	and.w	r3, r3, #4
 8011734:	2b00      	cmp	r3, #0
 8011736:	d004      	beq.n	8011742 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011738:	68fb      	ldr	r3, [r7, #12]
 801173a:	2204      	movs	r2, #4
 801173c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801173e:	2304      	movs	r3, #4
 8011740:	e0b1      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011746:	f003 0301 	and.w	r3, r3, #1
 801174a:	2b00      	cmp	r3, #0
 801174c:	d004      	beq.n	8011758 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	2201      	movs	r2, #1
 8011752:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011754:	2301      	movs	r3, #1
 8011756:	e0a6      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011758:	68fb      	ldr	r3, [r7, #12]
 801175a:	4a58      	ldr	r2, [pc, #352]	; (80118bc <SDMMC_GetCmdResp1+0x1dc>)
 801175c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 801175e:	68f8      	ldr	r0, [r7, #12]
 8011760:	f7ff fca6 	bl	80110b0 <SDMMC_GetCommandResponse>
 8011764:	4603      	mov	r3, r0
 8011766:	461a      	mov	r2, r3
 8011768:	7afb      	ldrb	r3, [r7, #11]
 801176a:	4293      	cmp	r3, r2
 801176c:	d001      	beq.n	8011772 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 801176e:	2301      	movs	r3, #1
 8011770:	e099      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011772:	2100      	movs	r1, #0
 8011774:	68f8      	ldr	r0, [r7, #12]
 8011776:	f7ff fca8 	bl	80110ca <SDMMC_GetResponse>
 801177a:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 801177c:	697a      	ldr	r2, [r7, #20]
 801177e:	4b50      	ldr	r3, [pc, #320]	; (80118c0 <SDMMC_GetCmdResp1+0x1e0>)
 8011780:	4013      	ands	r3, r2
 8011782:	2b00      	cmp	r3, #0
 8011784:	d101      	bne.n	801178a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8011786:	2300      	movs	r3, #0
 8011788:	e08d      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801178a:	697b      	ldr	r3, [r7, #20]
 801178c:	2b00      	cmp	r3, #0
 801178e:	da02      	bge.n	8011796 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8011790:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8011794:	e087      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8011796:	697b      	ldr	r3, [r7, #20]
 8011798:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801179c:	2b00      	cmp	r3, #0
 801179e:	d001      	beq.n	80117a4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80117a0:	2340      	movs	r3, #64	; 0x40
 80117a2:	e080      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80117a4:	697b      	ldr	r3, [r7, #20]
 80117a6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	d001      	beq.n	80117b2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80117ae:	2380      	movs	r3, #128	; 0x80
 80117b0:	e079      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80117b2:	697b      	ldr	r3, [r7, #20]
 80117b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d002      	beq.n	80117c2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80117bc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80117c0:	e071      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80117c2:	697b      	ldr	r3, [r7, #20]
 80117c4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d002      	beq.n	80117d2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80117cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80117d0:	e069      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80117d2:	697b      	ldr	r3, [r7, #20]
 80117d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80117d8:	2b00      	cmp	r3, #0
 80117da:	d002      	beq.n	80117e2 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80117dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80117e0:	e061      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80117e2:	697b      	ldr	r3, [r7, #20]
 80117e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80117e8:	2b00      	cmp	r3, #0
 80117ea:	d002      	beq.n	80117f2 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80117ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80117f0:	e059      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80117f2:	697b      	ldr	r3, [r7, #20]
 80117f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80117f8:	2b00      	cmp	r3, #0
 80117fa:	d002      	beq.n	8011802 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80117fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011800:	e051      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8011808:	2b00      	cmp	r3, #0
 801180a:	d002      	beq.n	8011812 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801180c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011810:	e049      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8011812:	697b      	ldr	r3, [r7, #20]
 8011814:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8011818:	2b00      	cmp	r3, #0
 801181a:	d002      	beq.n	8011822 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801181c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011820:	e041      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8011822:	697b      	ldr	r3, [r7, #20]
 8011824:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8011828:	2b00      	cmp	r3, #0
 801182a:	d002      	beq.n	8011832 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 801182c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8011830:	e039      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8011832:	697b      	ldr	r3, [r7, #20]
 8011834:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8011838:	2b00      	cmp	r3, #0
 801183a:	d002      	beq.n	8011842 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 801183c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8011840:	e031      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8011848:	2b00      	cmp	r3, #0
 801184a:	d002      	beq.n	8011852 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 801184c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011850:	e029      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8011852:	697b      	ldr	r3, [r7, #20]
 8011854:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8011858:	2b00      	cmp	r3, #0
 801185a:	d002      	beq.n	8011862 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 801185c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8011860:	e021      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8011862:	697b      	ldr	r3, [r7, #20]
 8011864:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011868:	2b00      	cmp	r3, #0
 801186a:	d002      	beq.n	8011872 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 801186c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8011870:	e019      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8011872:	697b      	ldr	r3, [r7, #20]
 8011874:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011878:	2b00      	cmp	r3, #0
 801187a:	d002      	beq.n	8011882 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 801187c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011880:	e011      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8011882:	697b      	ldr	r3, [r7, #20]
 8011884:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8011888:	2b00      	cmp	r3, #0
 801188a:	d002      	beq.n	8011892 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801188c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8011890:	e009      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8011892:	697b      	ldr	r3, [r7, #20]
 8011894:	f003 0308 	and.w	r3, r3, #8
 8011898:	2b00      	cmp	r3, #0
 801189a:	d002      	beq.n	80118a2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801189c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80118a0:	e001      	b.n	80118a6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80118a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80118a6:	4618      	mov	r0, r3
 80118a8:	3720      	adds	r7, #32
 80118aa:	46bd      	mov	sp, r7
 80118ac:	bd80      	pop	{r7, pc}
 80118ae:	bf00      	nop
 80118b0:	24000010 	.word	0x24000010
 80118b4:	10624dd3 	.word	0x10624dd3
 80118b8:	00200045 	.word	0x00200045
 80118bc:	002000c5 	.word	0x002000c5
 80118c0:	fdffe008 	.word	0xfdffe008

080118c4 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80118c4:	b480      	push	{r7}
 80118c6:	b085      	sub	sp, #20
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80118cc:	4b1f      	ldr	r3, [pc, #124]	; (801194c <SDMMC_GetCmdResp2+0x88>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	4a1f      	ldr	r2, [pc, #124]	; (8011950 <SDMMC_GetCmdResp2+0x8c>)
 80118d2:	fba2 2303 	umull	r2, r3, r2, r3
 80118d6:	0a5b      	lsrs	r3, r3, #9
 80118d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80118dc:	fb02 f303 	mul.w	r3, r2, r3
 80118e0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80118e2:	68fb      	ldr	r3, [r7, #12]
 80118e4:	1e5a      	subs	r2, r3, #1
 80118e6:	60fa      	str	r2, [r7, #12]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d102      	bne.n	80118f2 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80118ec:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80118f0:	e026      	b.n	8011940 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80118f6:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80118f8:	68bb      	ldr	r3, [r7, #8]
 80118fa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d0ef      	beq.n	80118e2 <SDMMC_GetCmdResp2+0x1e>
 8011902:	68bb      	ldr	r3, [r7, #8]
 8011904:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011908:	2b00      	cmp	r3, #0
 801190a:	d1ea      	bne.n	80118e2 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011910:	f003 0304 	and.w	r3, r3, #4
 8011914:	2b00      	cmp	r3, #0
 8011916:	d004      	beq.n	8011922 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	2204      	movs	r2, #4
 801191c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801191e:	2304      	movs	r3, #4
 8011920:	e00e      	b.n	8011940 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011926:	f003 0301 	and.w	r3, r3, #1
 801192a:	2b00      	cmp	r3, #0
 801192c:	d004      	beq.n	8011938 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	2201      	movs	r2, #1
 8011932:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011934:	2301      	movs	r3, #1
 8011936:	e003      	b.n	8011940 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	4a06      	ldr	r2, [pc, #24]	; (8011954 <SDMMC_GetCmdResp2+0x90>)
 801193c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801193e:	2300      	movs	r3, #0
}
 8011940:	4618      	mov	r0, r3
 8011942:	3714      	adds	r7, #20
 8011944:	46bd      	mov	sp, r7
 8011946:	f85d 7b04 	ldr.w	r7, [sp], #4
 801194a:	4770      	bx	lr
 801194c:	24000010 	.word	0x24000010
 8011950:	10624dd3 	.word	0x10624dd3
 8011954:	002000c5 	.word	0x002000c5

08011958 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011960:	4b1a      	ldr	r3, [pc, #104]	; (80119cc <SDMMC_GetCmdResp3+0x74>)
 8011962:	681b      	ldr	r3, [r3, #0]
 8011964:	4a1a      	ldr	r2, [pc, #104]	; (80119d0 <SDMMC_GetCmdResp3+0x78>)
 8011966:	fba2 2303 	umull	r2, r3, r2, r3
 801196a:	0a5b      	lsrs	r3, r3, #9
 801196c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011970:	fb02 f303 	mul.w	r3, r2, r3
 8011974:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	1e5a      	subs	r2, r3, #1
 801197a:	60fa      	str	r2, [r7, #12]
 801197c:	2b00      	cmp	r3, #0
 801197e:	d102      	bne.n	8011986 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011980:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011984:	e01b      	b.n	80119be <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801198a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801198c:	68bb      	ldr	r3, [r7, #8]
 801198e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011992:	2b00      	cmp	r3, #0
 8011994:	d0ef      	beq.n	8011976 <SDMMC_GetCmdResp3+0x1e>
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801199c:	2b00      	cmp	r3, #0
 801199e:	d1ea      	bne.n	8011976 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80119a0:	687b      	ldr	r3, [r7, #4]
 80119a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119a4:	f003 0304 	and.w	r3, r3, #4
 80119a8:	2b00      	cmp	r3, #0
 80119aa:	d004      	beq.n	80119b6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80119ac:	687b      	ldr	r3, [r7, #4]
 80119ae:	2204      	movs	r2, #4
 80119b0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80119b2:	2304      	movs	r3, #4
 80119b4:	e003      	b.n	80119be <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	4a06      	ldr	r2, [pc, #24]	; (80119d4 <SDMMC_GetCmdResp3+0x7c>)
 80119ba:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80119bc:	2300      	movs	r3, #0
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3714      	adds	r7, #20
 80119c2:	46bd      	mov	sp, r7
 80119c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c8:	4770      	bx	lr
 80119ca:	bf00      	nop
 80119cc:	24000010 	.word	0x24000010
 80119d0:	10624dd3 	.word	0x10624dd3
 80119d4:	002000c5 	.word	0x002000c5

080119d8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80119d8:	b580      	push	{r7, lr}
 80119da:	b088      	sub	sp, #32
 80119dc:	af00      	add	r7, sp, #0
 80119de:	60f8      	str	r0, [r7, #12]
 80119e0:	460b      	mov	r3, r1
 80119e2:	607a      	str	r2, [r7, #4]
 80119e4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80119e6:	4b35      	ldr	r3, [pc, #212]	; (8011abc <SDMMC_GetCmdResp6+0xe4>)
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	4a35      	ldr	r2, [pc, #212]	; (8011ac0 <SDMMC_GetCmdResp6+0xe8>)
 80119ec:	fba2 2303 	umull	r2, r3, r2, r3
 80119f0:	0a5b      	lsrs	r3, r3, #9
 80119f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80119f6:	fb02 f303 	mul.w	r3, r2, r3
 80119fa:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80119fc:	69fb      	ldr	r3, [r7, #28]
 80119fe:	1e5a      	subs	r2, r3, #1
 8011a00:	61fa      	str	r2, [r7, #28]
 8011a02:	2b00      	cmp	r3, #0
 8011a04:	d102      	bne.n	8011a0c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011a06:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011a0a:	e052      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a10:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a12:	69bb      	ldr	r3, [r7, #24]
 8011a14:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011a18:	2b00      	cmp	r3, #0
 8011a1a:	d0ef      	beq.n	80119fc <SDMMC_GetCmdResp6+0x24>
 8011a1c:	69bb      	ldr	r3, [r7, #24]
 8011a1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	d1ea      	bne.n	80119fc <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a2a:	f003 0304 	and.w	r3, r3, #4
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d004      	beq.n	8011a3c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	2204      	movs	r2, #4
 8011a36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011a38:	2304      	movs	r3, #4
 8011a3a:	e03a      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011a40:	f003 0301 	and.w	r3, r3, #1
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d004      	beq.n	8011a52 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011a48:	68fb      	ldr	r3, [r7, #12]
 8011a4a:	2201      	movs	r2, #1
 8011a4c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a4e:	2301      	movs	r3, #1
 8011a50:	e02f      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011a52:	68f8      	ldr	r0, [r7, #12]
 8011a54:	f7ff fb2c 	bl	80110b0 <SDMMC_GetCommandResponse>
 8011a58:	4603      	mov	r3, r0
 8011a5a:	461a      	mov	r2, r3
 8011a5c:	7afb      	ldrb	r3, [r7, #11]
 8011a5e:	4293      	cmp	r3, r2
 8011a60:	d001      	beq.n	8011a66 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011a62:	2301      	movs	r3, #1
 8011a64:	e025      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011a66:	68fb      	ldr	r3, [r7, #12]
 8011a68:	4a16      	ldr	r2, [pc, #88]	; (8011ac4 <SDMMC_GetCmdResp6+0xec>)
 8011a6a:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011a6c:	2100      	movs	r1, #0
 8011a6e:	68f8      	ldr	r0, [r7, #12]
 8011a70:	f7ff fb2b 	bl	80110ca <SDMMC_GetResponse>
 8011a74:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8011a76:	697b      	ldr	r3, [r7, #20]
 8011a78:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8011a7c:	2b00      	cmp	r3, #0
 8011a7e:	d106      	bne.n	8011a8e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8011a80:	697b      	ldr	r3, [r7, #20]
 8011a82:	0c1b      	lsrs	r3, r3, #16
 8011a84:	b29a      	uxth	r2, r3
 8011a86:	687b      	ldr	r3, [r7, #4]
 8011a88:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e011      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011a94:	2b00      	cmp	r3, #0
 8011a96:	d002      	beq.n	8011a9e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8011a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8011a9c:	e009      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8011a9e:	697b      	ldr	r3, [r7, #20]
 8011aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011aa4:	2b00      	cmp	r3, #0
 8011aa6:	d002      	beq.n	8011aae <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8011aa8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011aac:	e001      	b.n	8011ab2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8011aae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8011ab2:	4618      	mov	r0, r3
 8011ab4:	3720      	adds	r7, #32
 8011ab6:	46bd      	mov	sp, r7
 8011ab8:	bd80      	pop	{r7, pc}
 8011aba:	bf00      	nop
 8011abc:	24000010 	.word	0x24000010
 8011ac0:	10624dd3 	.word	0x10624dd3
 8011ac4:	002000c5 	.word	0x002000c5

08011ac8 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8011ac8:	b480      	push	{r7}
 8011aca:	b085      	sub	sp, #20
 8011acc:	af00      	add	r7, sp, #0
 8011ace:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011ad0:	4b22      	ldr	r3, [pc, #136]	; (8011b5c <SDMMC_GetCmdResp7+0x94>)
 8011ad2:	681b      	ldr	r3, [r3, #0]
 8011ad4:	4a22      	ldr	r2, [pc, #136]	; (8011b60 <SDMMC_GetCmdResp7+0x98>)
 8011ad6:	fba2 2303 	umull	r2, r3, r2, r3
 8011ada:	0a5b      	lsrs	r3, r3, #9
 8011adc:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ae0:	fb02 f303 	mul.w	r3, r2, r3
 8011ae4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	1e5a      	subs	r2, r3, #1
 8011aea:	60fa      	str	r2, [r7, #12]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d102      	bne.n	8011af6 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011af0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011af4:	e02c      	b.n	8011b50 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8011af6:	687b      	ldr	r3, [r7, #4]
 8011af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011afa:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011afc:	68bb      	ldr	r3, [r7, #8]
 8011afe:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d0ef      	beq.n	8011ae6 <SDMMC_GetCmdResp7+0x1e>
 8011b06:	68bb      	ldr	r3, [r7, #8]
 8011b08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d1ea      	bne.n	8011ae6 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011b10:	687b      	ldr	r3, [r7, #4]
 8011b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b14:	f003 0304 	and.w	r3, r3, #4
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d004      	beq.n	8011b26 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011b1c:	687b      	ldr	r3, [r7, #4]
 8011b1e:	2204      	movs	r2, #4
 8011b20:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011b22:	2304      	movs	r3, #4
 8011b24:	e014      	b.n	8011b50 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011b26:	687b      	ldr	r3, [r7, #4]
 8011b28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b2a:	f003 0301 	and.w	r3, r3, #1
 8011b2e:	2b00      	cmp	r3, #0
 8011b30:	d004      	beq.n	8011b3c <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	2201      	movs	r2, #1
 8011b36:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011b38:	2301      	movs	r3, #1
 8011b3a:	e009      	b.n	8011b50 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d002      	beq.n	8011b4e <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	2240      	movs	r2, #64	; 0x40
 8011b4c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8011b4e:	2300      	movs	r3, #0

}
 8011b50:	4618      	mov	r0, r3
 8011b52:	3714      	adds	r7, #20
 8011b54:	46bd      	mov	sp, r7
 8011b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b5a:	4770      	bx	lr
 8011b5c:	24000010 	.word	0x24000010
 8011b60:	10624dd3 	.word	0x10624dd3

08011b64 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011b64:	b084      	sub	sp, #16
 8011b66:	b580      	push	{r7, lr}
 8011b68:	b084      	sub	sp, #16
 8011b6a:	af00      	add	r7, sp, #0
 8011b6c:	6078      	str	r0, [r7, #4]
 8011b6e:	f107 001c 	add.w	r0, r7, #28
 8011b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011b78:	2b01      	cmp	r3, #1
 8011b7a:	d120      	bne.n	8011bbe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011b7c:	687b      	ldr	r3, [r7, #4]
 8011b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	68da      	ldr	r2, [r3, #12]
 8011b8c:	4b25      	ldr	r3, [pc, #148]	; (8011c24 <USB_CoreInit+0xc0>)
 8011b8e:	4013      	ands	r3, r2
 8011b90:	687a      	ldr	r2, [r7, #4]
 8011b92:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8011b94:	687b      	ldr	r3, [r7, #4]
 8011b96:	68db      	ldr	r3, [r3, #12]
 8011b98:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8011ba0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011ba2:	2b01      	cmp	r3, #1
 8011ba4:	d105      	bne.n	8011bb2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8011ba6:	687b      	ldr	r3, [r7, #4]
 8011ba8:	68db      	ldr	r3, [r3, #12]
 8011baa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8011bb2:	6878      	ldr	r0, [r7, #4]
 8011bb4:	f001 fabe 	bl	8013134 <USB_CoreReset>
 8011bb8:	4603      	mov	r3, r0
 8011bba:	73fb      	strb	r3, [r7, #15]
 8011bbc:	e01a      	b.n	8011bf4 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	68db      	ldr	r3, [r3, #12]
 8011bc2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8011bca:	6878      	ldr	r0, [r7, #4]
 8011bcc:	f001 fab2 	bl	8013134 <USB_CoreReset>
 8011bd0:	4603      	mov	r3, r0
 8011bd2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8011bd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011bd6:	2b00      	cmp	r3, #0
 8011bd8:	d106      	bne.n	8011be8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bde:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	639a      	str	r2, [r3, #56]	; 0x38
 8011be6:	e005      	b.n	8011bf4 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011bec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8011bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011bf6:	2b01      	cmp	r3, #1
 8011bf8:	d10b      	bne.n	8011c12 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8011bfa:	687b      	ldr	r3, [r7, #4]
 8011bfc:	689b      	ldr	r3, [r3, #8]
 8011bfe:	f043 0206 	orr.w	r2, r3, #6
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	689b      	ldr	r3, [r3, #8]
 8011c0a:	f043 0220 	orr.w	r2, r3, #32
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8011c12:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c14:	4618      	mov	r0, r3
 8011c16:	3710      	adds	r7, #16
 8011c18:	46bd      	mov	sp, r7
 8011c1a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8011c1e:	b004      	add	sp, #16
 8011c20:	4770      	bx	lr
 8011c22:	bf00      	nop
 8011c24:	ffbdffbf 	.word	0xffbdffbf

08011c28 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8011c28:	b480      	push	{r7}
 8011c2a:	b087      	sub	sp, #28
 8011c2c:	af00      	add	r7, sp, #0
 8011c2e:	60f8      	str	r0, [r7, #12]
 8011c30:	60b9      	str	r1, [r7, #8]
 8011c32:	4613      	mov	r3, r2
 8011c34:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8011c36:	79fb      	ldrb	r3, [r7, #7]
 8011c38:	2b02      	cmp	r3, #2
 8011c3a:	d165      	bne.n	8011d08 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8011c3c:	68bb      	ldr	r3, [r7, #8]
 8011c3e:	4a41      	ldr	r2, [pc, #260]	; (8011d44 <USB_SetTurnaroundTime+0x11c>)
 8011c40:	4293      	cmp	r3, r2
 8011c42:	d906      	bls.n	8011c52 <USB_SetTurnaroundTime+0x2a>
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	4a40      	ldr	r2, [pc, #256]	; (8011d48 <USB_SetTurnaroundTime+0x120>)
 8011c48:	4293      	cmp	r3, r2
 8011c4a:	d802      	bhi.n	8011c52 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8011c4c:	230f      	movs	r3, #15
 8011c4e:	617b      	str	r3, [r7, #20]
 8011c50:	e062      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8011c52:	68bb      	ldr	r3, [r7, #8]
 8011c54:	4a3c      	ldr	r2, [pc, #240]	; (8011d48 <USB_SetTurnaroundTime+0x120>)
 8011c56:	4293      	cmp	r3, r2
 8011c58:	d906      	bls.n	8011c68 <USB_SetTurnaroundTime+0x40>
 8011c5a:	68bb      	ldr	r3, [r7, #8]
 8011c5c:	4a3b      	ldr	r2, [pc, #236]	; (8011d4c <USB_SetTurnaroundTime+0x124>)
 8011c5e:	4293      	cmp	r3, r2
 8011c60:	d802      	bhi.n	8011c68 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8011c62:	230e      	movs	r3, #14
 8011c64:	617b      	str	r3, [r7, #20]
 8011c66:	e057      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8011c68:	68bb      	ldr	r3, [r7, #8]
 8011c6a:	4a38      	ldr	r2, [pc, #224]	; (8011d4c <USB_SetTurnaroundTime+0x124>)
 8011c6c:	4293      	cmp	r3, r2
 8011c6e:	d906      	bls.n	8011c7e <USB_SetTurnaroundTime+0x56>
 8011c70:	68bb      	ldr	r3, [r7, #8]
 8011c72:	4a37      	ldr	r2, [pc, #220]	; (8011d50 <USB_SetTurnaroundTime+0x128>)
 8011c74:	4293      	cmp	r3, r2
 8011c76:	d802      	bhi.n	8011c7e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8011c78:	230d      	movs	r3, #13
 8011c7a:	617b      	str	r3, [r7, #20]
 8011c7c:	e04c      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8011c7e:	68bb      	ldr	r3, [r7, #8]
 8011c80:	4a33      	ldr	r2, [pc, #204]	; (8011d50 <USB_SetTurnaroundTime+0x128>)
 8011c82:	4293      	cmp	r3, r2
 8011c84:	d906      	bls.n	8011c94 <USB_SetTurnaroundTime+0x6c>
 8011c86:	68bb      	ldr	r3, [r7, #8]
 8011c88:	4a32      	ldr	r2, [pc, #200]	; (8011d54 <USB_SetTurnaroundTime+0x12c>)
 8011c8a:	4293      	cmp	r3, r2
 8011c8c:	d802      	bhi.n	8011c94 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8011c8e:	230c      	movs	r3, #12
 8011c90:	617b      	str	r3, [r7, #20]
 8011c92:	e041      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8011c94:	68bb      	ldr	r3, [r7, #8]
 8011c96:	4a2f      	ldr	r2, [pc, #188]	; (8011d54 <USB_SetTurnaroundTime+0x12c>)
 8011c98:	4293      	cmp	r3, r2
 8011c9a:	d906      	bls.n	8011caa <USB_SetTurnaroundTime+0x82>
 8011c9c:	68bb      	ldr	r3, [r7, #8]
 8011c9e:	4a2e      	ldr	r2, [pc, #184]	; (8011d58 <USB_SetTurnaroundTime+0x130>)
 8011ca0:	4293      	cmp	r3, r2
 8011ca2:	d802      	bhi.n	8011caa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8011ca4:	230b      	movs	r3, #11
 8011ca6:	617b      	str	r3, [r7, #20]
 8011ca8:	e036      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8011caa:	68bb      	ldr	r3, [r7, #8]
 8011cac:	4a2a      	ldr	r2, [pc, #168]	; (8011d58 <USB_SetTurnaroundTime+0x130>)
 8011cae:	4293      	cmp	r3, r2
 8011cb0:	d906      	bls.n	8011cc0 <USB_SetTurnaroundTime+0x98>
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	4a29      	ldr	r2, [pc, #164]	; (8011d5c <USB_SetTurnaroundTime+0x134>)
 8011cb6:	4293      	cmp	r3, r2
 8011cb8:	d802      	bhi.n	8011cc0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8011cba:	230a      	movs	r3, #10
 8011cbc:	617b      	str	r3, [r7, #20]
 8011cbe:	e02b      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8011cc0:	68bb      	ldr	r3, [r7, #8]
 8011cc2:	4a26      	ldr	r2, [pc, #152]	; (8011d5c <USB_SetTurnaroundTime+0x134>)
 8011cc4:	4293      	cmp	r3, r2
 8011cc6:	d906      	bls.n	8011cd6 <USB_SetTurnaroundTime+0xae>
 8011cc8:	68bb      	ldr	r3, [r7, #8]
 8011cca:	4a25      	ldr	r2, [pc, #148]	; (8011d60 <USB_SetTurnaroundTime+0x138>)
 8011ccc:	4293      	cmp	r3, r2
 8011cce:	d802      	bhi.n	8011cd6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8011cd0:	2309      	movs	r3, #9
 8011cd2:	617b      	str	r3, [r7, #20]
 8011cd4:	e020      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	4a21      	ldr	r2, [pc, #132]	; (8011d60 <USB_SetTurnaroundTime+0x138>)
 8011cda:	4293      	cmp	r3, r2
 8011cdc:	d906      	bls.n	8011cec <USB_SetTurnaroundTime+0xc4>
 8011cde:	68bb      	ldr	r3, [r7, #8]
 8011ce0:	4a20      	ldr	r2, [pc, #128]	; (8011d64 <USB_SetTurnaroundTime+0x13c>)
 8011ce2:	4293      	cmp	r3, r2
 8011ce4:	d802      	bhi.n	8011cec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8011ce6:	2308      	movs	r3, #8
 8011ce8:	617b      	str	r3, [r7, #20]
 8011cea:	e015      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8011cec:	68bb      	ldr	r3, [r7, #8]
 8011cee:	4a1d      	ldr	r2, [pc, #116]	; (8011d64 <USB_SetTurnaroundTime+0x13c>)
 8011cf0:	4293      	cmp	r3, r2
 8011cf2:	d906      	bls.n	8011d02 <USB_SetTurnaroundTime+0xda>
 8011cf4:	68bb      	ldr	r3, [r7, #8]
 8011cf6:	4a1c      	ldr	r2, [pc, #112]	; (8011d68 <USB_SetTurnaroundTime+0x140>)
 8011cf8:	4293      	cmp	r3, r2
 8011cfa:	d802      	bhi.n	8011d02 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8011cfc:	2307      	movs	r3, #7
 8011cfe:	617b      	str	r3, [r7, #20]
 8011d00:	e00a      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8011d02:	2306      	movs	r3, #6
 8011d04:	617b      	str	r3, [r7, #20]
 8011d06:	e007      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8011d08:	79fb      	ldrb	r3, [r7, #7]
 8011d0a:	2b00      	cmp	r3, #0
 8011d0c:	d102      	bne.n	8011d14 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8011d0e:	2309      	movs	r3, #9
 8011d10:	617b      	str	r3, [r7, #20]
 8011d12:	e001      	b.n	8011d18 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8011d14:	2309      	movs	r3, #9
 8011d16:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	68db      	ldr	r3, [r3, #12]
 8011d1c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8011d20:	68fb      	ldr	r3, [r7, #12]
 8011d22:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8011d24:	68fb      	ldr	r3, [r7, #12]
 8011d26:	68da      	ldr	r2, [r3, #12]
 8011d28:	697b      	ldr	r3, [r7, #20]
 8011d2a:	029b      	lsls	r3, r3, #10
 8011d2c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8011d30:	431a      	orrs	r2, r3
 8011d32:	68fb      	ldr	r3, [r7, #12]
 8011d34:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8011d36:	2300      	movs	r3, #0
}
 8011d38:	4618      	mov	r0, r3
 8011d3a:	371c      	adds	r7, #28
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d42:	4770      	bx	lr
 8011d44:	00d8acbf 	.word	0x00d8acbf
 8011d48:	00e4e1bf 	.word	0x00e4e1bf
 8011d4c:	00f423ff 	.word	0x00f423ff
 8011d50:	0106737f 	.word	0x0106737f
 8011d54:	011a499f 	.word	0x011a499f
 8011d58:	01312cff 	.word	0x01312cff
 8011d5c:	014ca43f 	.word	0x014ca43f
 8011d60:	016e35ff 	.word	0x016e35ff
 8011d64:	01a6ab1f 	.word	0x01a6ab1f
 8011d68:	01e847ff 	.word	0x01e847ff

08011d6c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d6c:	b480      	push	{r7}
 8011d6e:	b083      	sub	sp, #12
 8011d70:	af00      	add	r7, sp, #0
 8011d72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	689b      	ldr	r3, [r3, #8]
 8011d78:	f043 0201 	orr.w	r2, r3, #1
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011d80:	2300      	movs	r3, #0
}
 8011d82:	4618      	mov	r0, r3
 8011d84:	370c      	adds	r7, #12
 8011d86:	46bd      	mov	sp, r7
 8011d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d8c:	4770      	bx	lr

08011d8e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8011d8e:	b480      	push	{r7}
 8011d90:	b083      	sub	sp, #12
 8011d92:	af00      	add	r7, sp, #0
 8011d94:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8011d96:	687b      	ldr	r3, [r7, #4]
 8011d98:	689b      	ldr	r3, [r3, #8]
 8011d9a:	f023 0201 	bic.w	r2, r3, #1
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8011da2:	2300      	movs	r3, #0
}
 8011da4:	4618      	mov	r0, r3
 8011da6:	370c      	adds	r7, #12
 8011da8:	46bd      	mov	sp, r7
 8011daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dae:	4770      	bx	lr

08011db0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8011db0:	b580      	push	{r7, lr}
 8011db2:	b082      	sub	sp, #8
 8011db4:	af00      	add	r7, sp, #0
 8011db6:	6078      	str	r0, [r7, #4]
 8011db8:	460b      	mov	r3, r1
 8011dba:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8011dc8:	78fb      	ldrb	r3, [r7, #3]
 8011dca:	2b01      	cmp	r3, #1
 8011dcc:	d106      	bne.n	8011ddc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8011dce:	687b      	ldr	r3, [r7, #4]
 8011dd0:	68db      	ldr	r3, [r3, #12]
 8011dd2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8011dd6:	687b      	ldr	r3, [r7, #4]
 8011dd8:	60da      	str	r2, [r3, #12]
 8011dda:	e00b      	b.n	8011df4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8011ddc:	78fb      	ldrb	r3, [r7, #3]
 8011dde:	2b00      	cmp	r3, #0
 8011de0:	d106      	bne.n	8011df0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8011de2:	687b      	ldr	r3, [r7, #4]
 8011de4:	68db      	ldr	r3, [r3, #12]
 8011de6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	60da      	str	r2, [r3, #12]
 8011dee:	e001      	b.n	8011df4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8011df0:	2301      	movs	r3, #1
 8011df2:	e003      	b.n	8011dfc <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8011df4:	2032      	movs	r0, #50	; 0x32
 8011df6:	f7f2 fbc1 	bl	800457c <HAL_Delay>

  return HAL_OK;
 8011dfa:	2300      	movs	r3, #0
}
 8011dfc:	4618      	mov	r0, r3
 8011dfe:	3708      	adds	r7, #8
 8011e00:	46bd      	mov	sp, r7
 8011e02:	bd80      	pop	{r7, pc}

08011e04 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8011e04:	b084      	sub	sp, #16
 8011e06:	b580      	push	{r7, lr}
 8011e08:	b086      	sub	sp, #24
 8011e0a:	af00      	add	r7, sp, #0
 8011e0c:	6078      	str	r0, [r7, #4]
 8011e0e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8011e12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8011e16:	2300      	movs	r3, #0
 8011e18:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8011e1a:	687b      	ldr	r3, [r7, #4]
 8011e1c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8011e1e:	2300      	movs	r3, #0
 8011e20:	613b      	str	r3, [r7, #16]
 8011e22:	e009      	b.n	8011e38 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8011e24:	687a      	ldr	r2, [r7, #4]
 8011e26:	693b      	ldr	r3, [r7, #16]
 8011e28:	3340      	adds	r3, #64	; 0x40
 8011e2a:	009b      	lsls	r3, r3, #2
 8011e2c:	4413      	add	r3, r2
 8011e2e:	2200      	movs	r2, #0
 8011e30:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8011e32:	693b      	ldr	r3, [r7, #16]
 8011e34:	3301      	adds	r3, #1
 8011e36:	613b      	str	r3, [r7, #16]
 8011e38:	693b      	ldr	r3, [r7, #16]
 8011e3a:	2b0e      	cmp	r3, #14
 8011e3c:	d9f2      	bls.n	8011e24 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8011e3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011e40:	2b00      	cmp	r3, #0
 8011e42:	d11c      	bne.n	8011e7e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e4a:	685b      	ldr	r3, [r3, #4]
 8011e4c:	68fa      	ldr	r2, [r7, #12]
 8011e4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011e52:	f043 0302 	orr.w	r3, r3, #2
 8011e56:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e5c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8011e64:	687b      	ldr	r3, [r7, #4]
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	681b      	ldr	r3, [r3, #0]
 8011e74:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	601a      	str	r2, [r3, #0]
 8011e7c:	e005      	b.n	8011e8a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e82:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8011e86:	687b      	ldr	r3, [r7, #4]
 8011e88:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8011e8a:	68fb      	ldr	r3, [r7, #12]
 8011e8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011e90:	461a      	mov	r2, r3
 8011e92:	2300      	movs	r3, #0
 8011e94:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8011e96:	68fb      	ldr	r3, [r7, #12]
 8011e98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011e9c:	4619      	mov	r1, r3
 8011e9e:	68fb      	ldr	r3, [r7, #12]
 8011ea0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011ea4:	461a      	mov	r2, r3
 8011ea6:	680b      	ldr	r3, [r1, #0]
 8011ea8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8011eaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011eac:	2b01      	cmp	r3, #1
 8011eae:	d10c      	bne.n	8011eca <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8011eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eb2:	2b00      	cmp	r3, #0
 8011eb4:	d104      	bne.n	8011ec0 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8011eb6:	2100      	movs	r1, #0
 8011eb8:	6878      	ldr	r0, [r7, #4]
 8011eba:	f000 f949 	bl	8012150 <USB_SetDevSpeed>
 8011ebe:	e008      	b.n	8011ed2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8011ec0:	2101      	movs	r1, #1
 8011ec2:	6878      	ldr	r0, [r7, #4]
 8011ec4:	f000 f944 	bl	8012150 <USB_SetDevSpeed>
 8011ec8:	e003      	b.n	8011ed2 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8011eca:	2103      	movs	r1, #3
 8011ecc:	6878      	ldr	r0, [r7, #4]
 8011ece:	f000 f93f 	bl	8012150 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8011ed2:	2110      	movs	r1, #16
 8011ed4:	6878      	ldr	r0, [r7, #4]
 8011ed6:	f000 f8f3 	bl	80120c0 <USB_FlushTxFifo>
 8011eda:	4603      	mov	r3, r0
 8011edc:	2b00      	cmp	r3, #0
 8011ede:	d001      	beq.n	8011ee4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8011ee0:	2301      	movs	r3, #1
 8011ee2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8011ee4:	6878      	ldr	r0, [r7, #4]
 8011ee6:	f000 f911 	bl	801210c <USB_FlushRxFifo>
 8011eea:	4603      	mov	r3, r0
 8011eec:	2b00      	cmp	r3, #0
 8011eee:	d001      	beq.n	8011ef4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8011ef0:	2301      	movs	r3, #1
 8011ef2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8011ef4:	68fb      	ldr	r3, [r7, #12]
 8011ef6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011efa:	461a      	mov	r2, r3
 8011efc:	2300      	movs	r3, #0
 8011efe:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8011f00:	68fb      	ldr	r3, [r7, #12]
 8011f02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f06:	461a      	mov	r2, r3
 8011f08:	2300      	movs	r3, #0
 8011f0a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8011f12:	461a      	mov	r2, r3
 8011f14:	2300      	movs	r3, #0
 8011f16:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011f18:	2300      	movs	r3, #0
 8011f1a:	613b      	str	r3, [r7, #16]
 8011f1c:	e043      	b.n	8011fa6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8011f1e:	693b      	ldr	r3, [r7, #16]
 8011f20:	015a      	lsls	r2, r3, #5
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	4413      	add	r3, r2
 8011f26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011f34:	d118      	bne.n	8011f68 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d10a      	bne.n	8011f52 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	015a      	lsls	r2, r3, #5
 8011f40:	68fb      	ldr	r3, [r7, #12]
 8011f42:	4413      	add	r3, r2
 8011f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f48:	461a      	mov	r2, r3
 8011f4a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011f4e:	6013      	str	r3, [r2, #0]
 8011f50:	e013      	b.n	8011f7a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8011f52:	693b      	ldr	r3, [r7, #16]
 8011f54:	015a      	lsls	r2, r3, #5
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	4413      	add	r3, r2
 8011f5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f5e:	461a      	mov	r2, r3
 8011f60:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011f64:	6013      	str	r3, [r2, #0]
 8011f66:	e008      	b.n	8011f7a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	015a      	lsls	r2, r3, #5
 8011f6c:	68fb      	ldr	r3, [r7, #12]
 8011f6e:	4413      	add	r3, r2
 8011f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f74:	461a      	mov	r2, r3
 8011f76:	2300      	movs	r3, #0
 8011f78:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8011f7a:	693b      	ldr	r3, [r7, #16]
 8011f7c:	015a      	lsls	r2, r3, #5
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	4413      	add	r3, r2
 8011f82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f86:	461a      	mov	r2, r3
 8011f88:	2300      	movs	r3, #0
 8011f8a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8011f8c:	693b      	ldr	r3, [r7, #16]
 8011f8e:	015a      	lsls	r2, r3, #5
 8011f90:	68fb      	ldr	r3, [r7, #12]
 8011f92:	4413      	add	r3, r2
 8011f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8011f98:	461a      	mov	r2, r3
 8011f9a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8011f9e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	3301      	adds	r3, #1
 8011fa4:	613b      	str	r3, [r7, #16]
 8011fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa8:	693a      	ldr	r2, [r7, #16]
 8011faa:	429a      	cmp	r2, r3
 8011fac:	d3b7      	bcc.n	8011f1e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8011fae:	2300      	movs	r3, #0
 8011fb0:	613b      	str	r3, [r7, #16]
 8011fb2:	e043      	b.n	801203c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8011fb4:	693b      	ldr	r3, [r7, #16]
 8011fb6:	015a      	lsls	r2, r3, #5
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	4413      	add	r3, r2
 8011fbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fc0:	681b      	ldr	r3, [r3, #0]
 8011fc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8011fc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8011fca:	d118      	bne.n	8011ffe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8011fcc:	693b      	ldr	r3, [r7, #16]
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d10a      	bne.n	8011fe8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8011fd2:	693b      	ldr	r3, [r7, #16]
 8011fd4:	015a      	lsls	r2, r3, #5
 8011fd6:	68fb      	ldr	r3, [r7, #12]
 8011fd8:	4413      	add	r3, r2
 8011fda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011fde:	461a      	mov	r2, r3
 8011fe0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8011fe4:	6013      	str	r3, [r2, #0]
 8011fe6:	e013      	b.n	8012010 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	015a      	lsls	r2, r3, #5
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	4413      	add	r3, r2
 8011ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8011ff4:	461a      	mov	r2, r3
 8011ff6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8011ffa:	6013      	str	r3, [r2, #0]
 8011ffc:	e008      	b.n	8012010 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8011ffe:	693b      	ldr	r3, [r7, #16]
 8012000:	015a      	lsls	r2, r3, #5
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	4413      	add	r3, r2
 8012006:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801200a:	461a      	mov	r2, r3
 801200c:	2300      	movs	r3, #0
 801200e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012010:	693b      	ldr	r3, [r7, #16]
 8012012:	015a      	lsls	r2, r3, #5
 8012014:	68fb      	ldr	r3, [r7, #12]
 8012016:	4413      	add	r3, r2
 8012018:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801201c:	461a      	mov	r2, r3
 801201e:	2300      	movs	r3, #0
 8012020:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8012022:	693b      	ldr	r3, [r7, #16]
 8012024:	015a      	lsls	r2, r3, #5
 8012026:	68fb      	ldr	r3, [r7, #12]
 8012028:	4413      	add	r3, r2
 801202a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801202e:	461a      	mov	r2, r3
 8012030:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8012034:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012036:	693b      	ldr	r3, [r7, #16]
 8012038:	3301      	adds	r3, #1
 801203a:	613b      	str	r3, [r7, #16]
 801203c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801203e:	693a      	ldr	r2, [r7, #16]
 8012040:	429a      	cmp	r2, r3
 8012042:	d3b7      	bcc.n	8011fb4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8012044:	68fb      	ldr	r3, [r7, #12]
 8012046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801204a:	691b      	ldr	r3, [r3, #16]
 801204c:	68fa      	ldr	r2, [r7, #12]
 801204e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012052:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012056:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8012058:	687b      	ldr	r3, [r7, #4]
 801205a:	2200      	movs	r2, #0
 801205c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8012064:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8012066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012068:	2b00      	cmp	r3, #0
 801206a:	d105      	bne.n	8012078 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 801206c:	687b      	ldr	r3, [r7, #4]
 801206e:	699b      	ldr	r3, [r3, #24]
 8012070:	f043 0210 	orr.w	r2, r3, #16
 8012074:	687b      	ldr	r3, [r7, #4]
 8012076:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8012078:	687b      	ldr	r3, [r7, #4]
 801207a:	699a      	ldr	r2, [r3, #24]
 801207c:	4b0e      	ldr	r3, [pc, #56]	; (80120b8 <USB_DevInit+0x2b4>)
 801207e:	4313      	orrs	r3, r2
 8012080:	687a      	ldr	r2, [r7, #4]
 8012082:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012086:	2b00      	cmp	r3, #0
 8012088:	d005      	beq.n	8012096 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801208a:	687b      	ldr	r3, [r7, #4]
 801208c:	699b      	ldr	r3, [r3, #24]
 801208e:	f043 0208 	orr.w	r2, r3, #8
 8012092:	687b      	ldr	r3, [r7, #4]
 8012094:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012098:	2b01      	cmp	r3, #1
 801209a:	d105      	bne.n	80120a8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	699a      	ldr	r2, [r3, #24]
 80120a0:	4b06      	ldr	r3, [pc, #24]	; (80120bc <USB_DevInit+0x2b8>)
 80120a2:	4313      	orrs	r3, r2
 80120a4:	687a      	ldr	r2, [r7, #4]
 80120a6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80120a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80120aa:	4618      	mov	r0, r3
 80120ac:	3718      	adds	r7, #24
 80120ae:	46bd      	mov	sp, r7
 80120b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80120b4:	b004      	add	sp, #16
 80120b6:	4770      	bx	lr
 80120b8:	803c3800 	.word	0x803c3800
 80120bc:	40000004 	.word	0x40000004

080120c0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80120c0:	b480      	push	{r7}
 80120c2:	b085      	sub	sp, #20
 80120c4:	af00      	add	r7, sp, #0
 80120c6:	6078      	str	r0, [r7, #4]
 80120c8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 80120ca:	2300      	movs	r3, #0
 80120cc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	019b      	lsls	r3, r3, #6
 80120d2:	f043 0220 	orr.w	r2, r3, #32
 80120d6:	687b      	ldr	r3, [r7, #4]
 80120d8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80120da:	68fb      	ldr	r3, [r7, #12]
 80120dc:	3301      	adds	r3, #1
 80120de:	60fb      	str	r3, [r7, #12]
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	4a09      	ldr	r2, [pc, #36]	; (8012108 <USB_FlushTxFifo+0x48>)
 80120e4:	4293      	cmp	r3, r2
 80120e6:	d901      	bls.n	80120ec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80120e8:	2303      	movs	r3, #3
 80120ea:	e006      	b.n	80120fa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	691b      	ldr	r3, [r3, #16]
 80120f0:	f003 0320 	and.w	r3, r3, #32
 80120f4:	2b20      	cmp	r3, #32
 80120f6:	d0f0      	beq.n	80120da <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3714      	adds	r7, #20
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop
 8012108:	00030d40 	.word	0x00030d40

0801210c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801210c:	b480      	push	{r7}
 801210e:	b085      	sub	sp, #20
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012114:	2300      	movs	r3, #0
 8012116:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	2210      	movs	r2, #16
 801211c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801211e:	68fb      	ldr	r3, [r7, #12]
 8012120:	3301      	adds	r3, #1
 8012122:	60fb      	str	r3, [r7, #12]
 8012124:	68fb      	ldr	r3, [r7, #12]
 8012126:	4a09      	ldr	r2, [pc, #36]	; (801214c <USB_FlushRxFifo+0x40>)
 8012128:	4293      	cmp	r3, r2
 801212a:	d901      	bls.n	8012130 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 801212c:	2303      	movs	r3, #3
 801212e:	e006      	b.n	801213e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8012130:	687b      	ldr	r3, [r7, #4]
 8012132:	691b      	ldr	r3, [r3, #16]
 8012134:	f003 0310 	and.w	r3, r3, #16
 8012138:	2b10      	cmp	r3, #16
 801213a:	d0f0      	beq.n	801211e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 801213c:	2300      	movs	r3, #0
}
 801213e:	4618      	mov	r0, r3
 8012140:	3714      	adds	r7, #20
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	00030d40 	.word	0x00030d40

08012150 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	460b      	mov	r3, r1
 801215a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801215c:	687b      	ldr	r3, [r7, #4]
 801215e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	78fb      	ldrb	r3, [r7, #3]
 801216a:	68f9      	ldr	r1, [r7, #12]
 801216c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012170:	4313      	orrs	r3, r2
 8012172:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8012174:	2300      	movs	r3, #0
}
 8012176:	4618      	mov	r0, r3
 8012178:	3714      	adds	r7, #20
 801217a:	46bd      	mov	sp, r7
 801217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012180:	4770      	bx	lr

08012182 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012182:	b480      	push	{r7}
 8012184:	b087      	sub	sp, #28
 8012186:	af00      	add	r7, sp, #0
 8012188:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801218a:	687b      	ldr	r3, [r7, #4]
 801218c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 801218e:	693b      	ldr	r3, [r7, #16]
 8012190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012194:	689b      	ldr	r3, [r3, #8]
 8012196:	f003 0306 	and.w	r3, r3, #6
 801219a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d102      	bne.n	80121a8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80121a2:	2300      	movs	r3, #0
 80121a4:	75fb      	strb	r3, [r7, #23]
 80121a6:	e00a      	b.n	80121be <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80121a8:	68fb      	ldr	r3, [r7, #12]
 80121aa:	2b02      	cmp	r3, #2
 80121ac:	d002      	beq.n	80121b4 <USB_GetDevSpeed+0x32>
 80121ae:	68fb      	ldr	r3, [r7, #12]
 80121b0:	2b06      	cmp	r3, #6
 80121b2:	d102      	bne.n	80121ba <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80121b4:	2302      	movs	r3, #2
 80121b6:	75fb      	strb	r3, [r7, #23]
 80121b8:	e001      	b.n	80121be <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80121ba:	230f      	movs	r3, #15
 80121bc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80121be:	7dfb      	ldrb	r3, [r7, #23]
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	371c      	adds	r7, #28
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr

080121cc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80121cc:	b480      	push	{r7}
 80121ce:	b085      	sub	sp, #20
 80121d0:	af00      	add	r7, sp, #0
 80121d2:	6078      	str	r0, [r7, #4]
 80121d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	781b      	ldrb	r3, [r3, #0]
 80121de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80121e0:	683b      	ldr	r3, [r7, #0]
 80121e2:	785b      	ldrb	r3, [r3, #1]
 80121e4:	2b01      	cmp	r3, #1
 80121e6:	d139      	bne.n	801225c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80121e8:	68fb      	ldr	r3, [r7, #12]
 80121ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80121ee:	69da      	ldr	r2, [r3, #28]
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	781b      	ldrb	r3, [r3, #0]
 80121f4:	f003 030f 	and.w	r3, r3, #15
 80121f8:	2101      	movs	r1, #1
 80121fa:	fa01 f303 	lsl.w	r3, r1, r3
 80121fe:	b29b      	uxth	r3, r3
 8012200:	68f9      	ldr	r1, [r7, #12]
 8012202:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012206:	4313      	orrs	r3, r2
 8012208:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 801220a:	68bb      	ldr	r3, [r7, #8]
 801220c:	015a      	lsls	r2, r3, #5
 801220e:	68fb      	ldr	r3, [r7, #12]
 8012210:	4413      	add	r3, r2
 8012212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012216:	681b      	ldr	r3, [r3, #0]
 8012218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801221c:	2b00      	cmp	r3, #0
 801221e:	d153      	bne.n	80122c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012220:	68bb      	ldr	r3, [r7, #8]
 8012222:	015a      	lsls	r2, r3, #5
 8012224:	68fb      	ldr	r3, [r7, #12]
 8012226:	4413      	add	r3, r2
 8012228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801222c:	681a      	ldr	r2, [r3, #0]
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	689b      	ldr	r3, [r3, #8]
 8012232:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012236:	683b      	ldr	r3, [r7, #0]
 8012238:	78db      	ldrb	r3, [r3, #3]
 801223a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 801223c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 801223e:	68bb      	ldr	r3, [r7, #8]
 8012240:	059b      	lsls	r3, r3, #22
 8012242:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012244:	431a      	orrs	r2, r3
 8012246:	68bb      	ldr	r3, [r7, #8]
 8012248:	0159      	lsls	r1, r3, #5
 801224a:	68fb      	ldr	r3, [r7, #12]
 801224c:	440b      	add	r3, r1
 801224e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012252:	4619      	mov	r1, r3
 8012254:	4b20      	ldr	r3, [pc, #128]	; (80122d8 <USB_ActivateEndpoint+0x10c>)
 8012256:	4313      	orrs	r3, r2
 8012258:	600b      	str	r3, [r1, #0]
 801225a:	e035      	b.n	80122c8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 801225c:	68fb      	ldr	r3, [r7, #12]
 801225e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012262:	69da      	ldr	r2, [r3, #28]
 8012264:	683b      	ldr	r3, [r7, #0]
 8012266:	781b      	ldrb	r3, [r3, #0]
 8012268:	f003 030f 	and.w	r3, r3, #15
 801226c:	2101      	movs	r1, #1
 801226e:	fa01 f303 	lsl.w	r3, r1, r3
 8012272:	041b      	lsls	r3, r3, #16
 8012274:	68f9      	ldr	r1, [r7, #12]
 8012276:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 801227a:	4313      	orrs	r3, r2
 801227c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 801227e:	68bb      	ldr	r3, [r7, #8]
 8012280:	015a      	lsls	r2, r3, #5
 8012282:	68fb      	ldr	r3, [r7, #12]
 8012284:	4413      	add	r3, r2
 8012286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801228a:	681b      	ldr	r3, [r3, #0]
 801228c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012290:	2b00      	cmp	r3, #0
 8012292:	d119      	bne.n	80122c8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012294:	68bb      	ldr	r3, [r7, #8]
 8012296:	015a      	lsls	r2, r3, #5
 8012298:	68fb      	ldr	r3, [r7, #12]
 801229a:	4413      	add	r3, r2
 801229c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122a0:	681a      	ldr	r2, [r3, #0]
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	689b      	ldr	r3, [r3, #8]
 80122a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	78db      	ldrb	r3, [r3, #3]
 80122ae:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80122b0:	430b      	orrs	r3, r1
 80122b2:	431a      	orrs	r2, r3
 80122b4:	68bb      	ldr	r3, [r7, #8]
 80122b6:	0159      	lsls	r1, r3, #5
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	440b      	add	r3, r1
 80122bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80122c0:	4619      	mov	r1, r3
 80122c2:	4b05      	ldr	r3, [pc, #20]	; (80122d8 <USB_ActivateEndpoint+0x10c>)
 80122c4:	4313      	orrs	r3, r2
 80122c6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80122c8:	2300      	movs	r3, #0
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	3714      	adds	r7, #20
 80122ce:	46bd      	mov	sp, r7
 80122d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d4:	4770      	bx	lr
 80122d6:	bf00      	nop
 80122d8:	10008000 	.word	0x10008000

080122dc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80122dc:	b480      	push	{r7}
 80122de:	b085      	sub	sp, #20
 80122e0:	af00      	add	r7, sp, #0
 80122e2:	6078      	str	r0, [r7, #4]
 80122e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80122ea:	683b      	ldr	r3, [r7, #0]
 80122ec:	781b      	ldrb	r3, [r3, #0]
 80122ee:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80122f0:	683b      	ldr	r3, [r7, #0]
 80122f2:	785b      	ldrb	r3, [r3, #1]
 80122f4:	2b01      	cmp	r3, #1
 80122f6:	d161      	bne.n	80123bc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	015a      	lsls	r2, r3, #5
 80122fc:	68fb      	ldr	r3, [r7, #12]
 80122fe:	4413      	add	r3, r2
 8012300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801230a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801230e:	d11f      	bne.n	8012350 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	015a      	lsls	r2, r3, #5
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	4413      	add	r3, r2
 8012318:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801231c:	681b      	ldr	r3, [r3, #0]
 801231e:	68ba      	ldr	r2, [r7, #8]
 8012320:	0151      	lsls	r1, r2, #5
 8012322:	68fa      	ldr	r2, [r7, #12]
 8012324:	440a      	add	r2, r1
 8012326:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801232a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801232e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012330:	68bb      	ldr	r3, [r7, #8]
 8012332:	015a      	lsls	r2, r3, #5
 8012334:	68fb      	ldr	r3, [r7, #12]
 8012336:	4413      	add	r3, r2
 8012338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	68ba      	ldr	r2, [r7, #8]
 8012340:	0151      	lsls	r1, r2, #5
 8012342:	68fa      	ldr	r2, [r7, #12]
 8012344:	440a      	add	r2, r1
 8012346:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801234a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801234e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012350:	68fb      	ldr	r3, [r7, #12]
 8012352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012356:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	781b      	ldrb	r3, [r3, #0]
 801235c:	f003 030f 	and.w	r3, r3, #15
 8012360:	2101      	movs	r1, #1
 8012362:	fa01 f303 	lsl.w	r3, r1, r3
 8012366:	b29b      	uxth	r3, r3
 8012368:	43db      	mvns	r3, r3
 801236a:	68f9      	ldr	r1, [r7, #12]
 801236c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012370:	4013      	ands	r3, r2
 8012372:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801237a:	69da      	ldr	r2, [r3, #28]
 801237c:	683b      	ldr	r3, [r7, #0]
 801237e:	781b      	ldrb	r3, [r3, #0]
 8012380:	f003 030f 	and.w	r3, r3, #15
 8012384:	2101      	movs	r1, #1
 8012386:	fa01 f303 	lsl.w	r3, r1, r3
 801238a:	b29b      	uxth	r3, r3
 801238c:	43db      	mvns	r3, r3
 801238e:	68f9      	ldr	r1, [r7, #12]
 8012390:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012394:	4013      	ands	r3, r2
 8012396:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012398:	68bb      	ldr	r3, [r7, #8]
 801239a:	015a      	lsls	r2, r3, #5
 801239c:	68fb      	ldr	r3, [r7, #12]
 801239e:	4413      	add	r3, r2
 80123a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123a4:	681a      	ldr	r2, [r3, #0]
 80123a6:	68bb      	ldr	r3, [r7, #8]
 80123a8:	0159      	lsls	r1, r3, #5
 80123aa:	68fb      	ldr	r3, [r7, #12]
 80123ac:	440b      	add	r3, r1
 80123ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80123b2:	4619      	mov	r1, r3
 80123b4:	4b35      	ldr	r3, [pc, #212]	; (801248c <USB_DeactivateEndpoint+0x1b0>)
 80123b6:	4013      	ands	r3, r2
 80123b8:	600b      	str	r3, [r1, #0]
 80123ba:	e060      	b.n	801247e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80123bc:	68bb      	ldr	r3, [r7, #8]
 80123be:	015a      	lsls	r2, r3, #5
 80123c0:	68fb      	ldr	r3, [r7, #12]
 80123c2:	4413      	add	r3, r2
 80123c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80123ce:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80123d2:	d11f      	bne.n	8012414 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80123d4:	68bb      	ldr	r3, [r7, #8]
 80123d6:	015a      	lsls	r2, r3, #5
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	4413      	add	r3, r2
 80123dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80123e0:	681b      	ldr	r3, [r3, #0]
 80123e2:	68ba      	ldr	r2, [r7, #8]
 80123e4:	0151      	lsls	r1, r2, #5
 80123e6:	68fa      	ldr	r2, [r7, #12]
 80123e8:	440a      	add	r2, r1
 80123ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80123ee:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80123f2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80123f4:	68bb      	ldr	r3, [r7, #8]
 80123f6:	015a      	lsls	r2, r3, #5
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	4413      	add	r3, r2
 80123fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	68ba      	ldr	r2, [r7, #8]
 8012404:	0151      	lsls	r1, r2, #5
 8012406:	68fa      	ldr	r2, [r7, #12]
 8012408:	440a      	add	r2, r1
 801240a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801240e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012412:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801241a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801241c:	683b      	ldr	r3, [r7, #0]
 801241e:	781b      	ldrb	r3, [r3, #0]
 8012420:	f003 030f 	and.w	r3, r3, #15
 8012424:	2101      	movs	r1, #1
 8012426:	fa01 f303 	lsl.w	r3, r1, r3
 801242a:	041b      	lsls	r3, r3, #16
 801242c:	43db      	mvns	r3, r3
 801242e:	68f9      	ldr	r1, [r7, #12]
 8012430:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012434:	4013      	ands	r3, r2
 8012436:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801243e:	69da      	ldr	r2, [r3, #28]
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	781b      	ldrb	r3, [r3, #0]
 8012444:	f003 030f 	and.w	r3, r3, #15
 8012448:	2101      	movs	r1, #1
 801244a:	fa01 f303 	lsl.w	r3, r1, r3
 801244e:	041b      	lsls	r3, r3, #16
 8012450:	43db      	mvns	r3, r3
 8012452:	68f9      	ldr	r1, [r7, #12]
 8012454:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012458:	4013      	ands	r3, r2
 801245a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 801245c:	68bb      	ldr	r3, [r7, #8]
 801245e:	015a      	lsls	r2, r3, #5
 8012460:	68fb      	ldr	r3, [r7, #12]
 8012462:	4413      	add	r3, r2
 8012464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012468:	681a      	ldr	r2, [r3, #0]
 801246a:	68bb      	ldr	r3, [r7, #8]
 801246c:	0159      	lsls	r1, r3, #5
 801246e:	68fb      	ldr	r3, [r7, #12]
 8012470:	440b      	add	r3, r1
 8012472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012476:	4619      	mov	r1, r3
 8012478:	4b05      	ldr	r3, [pc, #20]	; (8012490 <USB_DeactivateEndpoint+0x1b4>)
 801247a:	4013      	ands	r3, r2
 801247c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 801247e:	2300      	movs	r3, #0
}
 8012480:	4618      	mov	r0, r3
 8012482:	3714      	adds	r7, #20
 8012484:	46bd      	mov	sp, r7
 8012486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801248a:	4770      	bx	lr
 801248c:	ec337800 	.word	0xec337800
 8012490:	eff37800 	.word	0xeff37800

08012494 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012494:	b580      	push	{r7, lr}
 8012496:	b08a      	sub	sp, #40	; 0x28
 8012498:	af02      	add	r7, sp, #8
 801249a:	60f8      	str	r0, [r7, #12]
 801249c:	60b9      	str	r1, [r7, #8]
 801249e:	4613      	mov	r3, r2
 80124a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80124a2:	68fb      	ldr	r3, [r7, #12]
 80124a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80124a6:	68bb      	ldr	r3, [r7, #8]
 80124a8:	781b      	ldrb	r3, [r3, #0]
 80124aa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80124ac:	68bb      	ldr	r3, [r7, #8]
 80124ae:	785b      	ldrb	r3, [r3, #1]
 80124b0:	2b01      	cmp	r3, #1
 80124b2:	f040 8163 	bne.w	801277c <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80124b6:	68bb      	ldr	r3, [r7, #8]
 80124b8:	695b      	ldr	r3, [r3, #20]
 80124ba:	2b00      	cmp	r3, #0
 80124bc:	d132      	bne.n	8012524 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80124be:	69bb      	ldr	r3, [r7, #24]
 80124c0:	015a      	lsls	r2, r3, #5
 80124c2:	69fb      	ldr	r3, [r7, #28]
 80124c4:	4413      	add	r3, r2
 80124c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ca:	691a      	ldr	r2, [r3, #16]
 80124cc:	69bb      	ldr	r3, [r7, #24]
 80124ce:	0159      	lsls	r1, r3, #5
 80124d0:	69fb      	ldr	r3, [r7, #28]
 80124d2:	440b      	add	r3, r1
 80124d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124d8:	4619      	mov	r1, r3
 80124da:	4ba5      	ldr	r3, [pc, #660]	; (8012770 <USB_EPStartXfer+0x2dc>)
 80124dc:	4013      	ands	r3, r2
 80124de:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80124e0:	69bb      	ldr	r3, [r7, #24]
 80124e2:	015a      	lsls	r2, r3, #5
 80124e4:	69fb      	ldr	r3, [r7, #28]
 80124e6:	4413      	add	r3, r2
 80124e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80124ec:	691b      	ldr	r3, [r3, #16]
 80124ee:	69ba      	ldr	r2, [r7, #24]
 80124f0:	0151      	lsls	r1, r2, #5
 80124f2:	69fa      	ldr	r2, [r7, #28]
 80124f4:	440a      	add	r2, r1
 80124f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80124fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80124fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012500:	69bb      	ldr	r3, [r7, #24]
 8012502:	015a      	lsls	r2, r3, #5
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	4413      	add	r3, r2
 8012508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801250c:	691a      	ldr	r2, [r3, #16]
 801250e:	69bb      	ldr	r3, [r7, #24]
 8012510:	0159      	lsls	r1, r3, #5
 8012512:	69fb      	ldr	r3, [r7, #28]
 8012514:	440b      	add	r3, r1
 8012516:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801251a:	4619      	mov	r1, r3
 801251c:	4b95      	ldr	r3, [pc, #596]	; (8012774 <USB_EPStartXfer+0x2e0>)
 801251e:	4013      	ands	r3, r2
 8012520:	610b      	str	r3, [r1, #16]
 8012522:	e074      	b.n	801260e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012524:	69bb      	ldr	r3, [r7, #24]
 8012526:	015a      	lsls	r2, r3, #5
 8012528:	69fb      	ldr	r3, [r7, #28]
 801252a:	4413      	add	r3, r2
 801252c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012530:	691a      	ldr	r2, [r3, #16]
 8012532:	69bb      	ldr	r3, [r7, #24]
 8012534:	0159      	lsls	r1, r3, #5
 8012536:	69fb      	ldr	r3, [r7, #28]
 8012538:	440b      	add	r3, r1
 801253a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801253e:	4619      	mov	r1, r3
 8012540:	4b8c      	ldr	r3, [pc, #560]	; (8012774 <USB_EPStartXfer+0x2e0>)
 8012542:	4013      	ands	r3, r2
 8012544:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012546:	69bb      	ldr	r3, [r7, #24]
 8012548:	015a      	lsls	r2, r3, #5
 801254a:	69fb      	ldr	r3, [r7, #28]
 801254c:	4413      	add	r3, r2
 801254e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012552:	691a      	ldr	r2, [r3, #16]
 8012554:	69bb      	ldr	r3, [r7, #24]
 8012556:	0159      	lsls	r1, r3, #5
 8012558:	69fb      	ldr	r3, [r7, #28]
 801255a:	440b      	add	r3, r1
 801255c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012560:	4619      	mov	r1, r3
 8012562:	4b83      	ldr	r3, [pc, #524]	; (8012770 <USB_EPStartXfer+0x2dc>)
 8012564:	4013      	ands	r3, r2
 8012566:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012568:	69bb      	ldr	r3, [r7, #24]
 801256a:	015a      	lsls	r2, r3, #5
 801256c:	69fb      	ldr	r3, [r7, #28]
 801256e:	4413      	add	r3, r2
 8012570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012574:	691a      	ldr	r2, [r3, #16]
 8012576:	68bb      	ldr	r3, [r7, #8]
 8012578:	6959      	ldr	r1, [r3, #20]
 801257a:	68bb      	ldr	r3, [r7, #8]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	440b      	add	r3, r1
 8012580:	1e59      	subs	r1, r3, #1
 8012582:	68bb      	ldr	r3, [r7, #8]
 8012584:	689b      	ldr	r3, [r3, #8]
 8012586:	fbb1 f3f3 	udiv	r3, r1, r3
 801258a:	04d9      	lsls	r1, r3, #19
 801258c:	4b7a      	ldr	r3, [pc, #488]	; (8012778 <USB_EPStartXfer+0x2e4>)
 801258e:	400b      	ands	r3, r1
 8012590:	69b9      	ldr	r1, [r7, #24]
 8012592:	0148      	lsls	r0, r1, #5
 8012594:	69f9      	ldr	r1, [r7, #28]
 8012596:	4401      	add	r1, r0
 8012598:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 801259c:	4313      	orrs	r3, r2
 801259e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80125a0:	69bb      	ldr	r3, [r7, #24]
 80125a2:	015a      	lsls	r2, r3, #5
 80125a4:	69fb      	ldr	r3, [r7, #28]
 80125a6:	4413      	add	r3, r2
 80125a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125ac:	691a      	ldr	r2, [r3, #16]
 80125ae:	68bb      	ldr	r3, [r7, #8]
 80125b0:	695b      	ldr	r3, [r3, #20]
 80125b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80125b6:	69b9      	ldr	r1, [r7, #24]
 80125b8:	0148      	lsls	r0, r1, #5
 80125ba:	69f9      	ldr	r1, [r7, #28]
 80125bc:	4401      	add	r1, r0
 80125be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80125c2:	4313      	orrs	r3, r2
 80125c4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80125c6:	68bb      	ldr	r3, [r7, #8]
 80125c8:	78db      	ldrb	r3, [r3, #3]
 80125ca:	2b01      	cmp	r3, #1
 80125cc:	d11f      	bne.n	801260e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80125ce:	69bb      	ldr	r3, [r7, #24]
 80125d0:	015a      	lsls	r2, r3, #5
 80125d2:	69fb      	ldr	r3, [r7, #28]
 80125d4:	4413      	add	r3, r2
 80125d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125da:	691b      	ldr	r3, [r3, #16]
 80125dc:	69ba      	ldr	r2, [r7, #24]
 80125de:	0151      	lsls	r1, r2, #5
 80125e0:	69fa      	ldr	r2, [r7, #28]
 80125e2:	440a      	add	r2, r1
 80125e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80125e8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80125ec:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80125ee:	69bb      	ldr	r3, [r7, #24]
 80125f0:	015a      	lsls	r2, r3, #5
 80125f2:	69fb      	ldr	r3, [r7, #28]
 80125f4:	4413      	add	r3, r2
 80125f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80125fa:	691b      	ldr	r3, [r3, #16]
 80125fc:	69ba      	ldr	r2, [r7, #24]
 80125fe:	0151      	lsls	r1, r2, #5
 8012600:	69fa      	ldr	r2, [r7, #28]
 8012602:	440a      	add	r2, r1
 8012604:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012608:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801260c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 801260e:	79fb      	ldrb	r3, [r7, #7]
 8012610:	2b01      	cmp	r3, #1
 8012612:	d14b      	bne.n	80126ac <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012614:	68bb      	ldr	r3, [r7, #8]
 8012616:	691b      	ldr	r3, [r3, #16]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d009      	beq.n	8012630 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 801261c:	69bb      	ldr	r3, [r7, #24]
 801261e:	015a      	lsls	r2, r3, #5
 8012620:	69fb      	ldr	r3, [r7, #28]
 8012622:	4413      	add	r3, r2
 8012624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012628:	461a      	mov	r2, r3
 801262a:	68bb      	ldr	r3, [r7, #8]
 801262c:	691b      	ldr	r3, [r3, #16]
 801262e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	78db      	ldrb	r3, [r3, #3]
 8012634:	2b01      	cmp	r3, #1
 8012636:	d128      	bne.n	801268a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012638:	69fb      	ldr	r3, [r7, #28]
 801263a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801263e:	689b      	ldr	r3, [r3, #8]
 8012640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012644:	2b00      	cmp	r3, #0
 8012646:	d110      	bne.n	801266a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012648:	69bb      	ldr	r3, [r7, #24]
 801264a:	015a      	lsls	r2, r3, #5
 801264c:	69fb      	ldr	r3, [r7, #28]
 801264e:	4413      	add	r3, r2
 8012650:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012654:	681b      	ldr	r3, [r3, #0]
 8012656:	69ba      	ldr	r2, [r7, #24]
 8012658:	0151      	lsls	r1, r2, #5
 801265a:	69fa      	ldr	r2, [r7, #28]
 801265c:	440a      	add	r2, r1
 801265e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012662:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012666:	6013      	str	r3, [r2, #0]
 8012668:	e00f      	b.n	801268a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 801266a:	69bb      	ldr	r3, [r7, #24]
 801266c:	015a      	lsls	r2, r3, #5
 801266e:	69fb      	ldr	r3, [r7, #28]
 8012670:	4413      	add	r3, r2
 8012672:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012676:	681b      	ldr	r3, [r3, #0]
 8012678:	69ba      	ldr	r2, [r7, #24]
 801267a:	0151      	lsls	r1, r2, #5
 801267c:	69fa      	ldr	r2, [r7, #28]
 801267e:	440a      	add	r2, r1
 8012680:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012684:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012688:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801268a:	69bb      	ldr	r3, [r7, #24]
 801268c:	015a      	lsls	r2, r3, #5
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	4413      	add	r3, r2
 8012692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012696:	681b      	ldr	r3, [r3, #0]
 8012698:	69ba      	ldr	r2, [r7, #24]
 801269a:	0151      	lsls	r1, r2, #5
 801269c:	69fa      	ldr	r2, [r7, #28]
 801269e:	440a      	add	r2, r1
 80126a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126a4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126a8:	6013      	str	r3, [r2, #0]
 80126aa:	e133      	b.n	8012914 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	015a      	lsls	r2, r3, #5
 80126b0:	69fb      	ldr	r3, [r7, #28]
 80126b2:	4413      	add	r3, r2
 80126b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80126b8:	681b      	ldr	r3, [r3, #0]
 80126ba:	69ba      	ldr	r2, [r7, #24]
 80126bc:	0151      	lsls	r1, r2, #5
 80126be:	69fa      	ldr	r2, [r7, #28]
 80126c0:	440a      	add	r2, r1
 80126c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80126c6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80126ca:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80126cc:	68bb      	ldr	r3, [r7, #8]
 80126ce:	78db      	ldrb	r3, [r3, #3]
 80126d0:	2b01      	cmp	r3, #1
 80126d2:	d015      	beq.n	8012700 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80126d4:	68bb      	ldr	r3, [r7, #8]
 80126d6:	695b      	ldr	r3, [r3, #20]
 80126d8:	2b00      	cmp	r3, #0
 80126da:	f000 811b 	beq.w	8012914 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80126de:	69fb      	ldr	r3, [r7, #28]
 80126e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	781b      	ldrb	r3, [r3, #0]
 80126ea:	f003 030f 	and.w	r3, r3, #15
 80126ee:	2101      	movs	r1, #1
 80126f0:	fa01 f303 	lsl.w	r3, r1, r3
 80126f4:	69f9      	ldr	r1, [r7, #28]
 80126f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80126fa:	4313      	orrs	r3, r2
 80126fc:	634b      	str	r3, [r1, #52]	; 0x34
 80126fe:	e109      	b.n	8012914 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012700:	69fb      	ldr	r3, [r7, #28]
 8012702:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012706:	689b      	ldr	r3, [r3, #8]
 8012708:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801270c:	2b00      	cmp	r3, #0
 801270e:	d110      	bne.n	8012732 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	015a      	lsls	r2, r3, #5
 8012714:	69fb      	ldr	r3, [r7, #28]
 8012716:	4413      	add	r3, r2
 8012718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801271c:	681b      	ldr	r3, [r3, #0]
 801271e:	69ba      	ldr	r2, [r7, #24]
 8012720:	0151      	lsls	r1, r2, #5
 8012722:	69fa      	ldr	r2, [r7, #28]
 8012724:	440a      	add	r2, r1
 8012726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801272a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801272e:	6013      	str	r3, [r2, #0]
 8012730:	e00f      	b.n	8012752 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012732:	69bb      	ldr	r3, [r7, #24]
 8012734:	015a      	lsls	r2, r3, #5
 8012736:	69fb      	ldr	r3, [r7, #28]
 8012738:	4413      	add	r3, r2
 801273a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	69ba      	ldr	r2, [r7, #24]
 8012742:	0151      	lsls	r1, r2, #5
 8012744:	69fa      	ldr	r2, [r7, #28]
 8012746:	440a      	add	r2, r1
 8012748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801274c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012750:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012752:	68bb      	ldr	r3, [r7, #8]
 8012754:	68d9      	ldr	r1, [r3, #12]
 8012756:	68bb      	ldr	r3, [r7, #8]
 8012758:	781a      	ldrb	r2, [r3, #0]
 801275a:	68bb      	ldr	r3, [r7, #8]
 801275c:	695b      	ldr	r3, [r3, #20]
 801275e:	b298      	uxth	r0, r3
 8012760:	79fb      	ldrb	r3, [r7, #7]
 8012762:	9300      	str	r3, [sp, #0]
 8012764:	4603      	mov	r3, r0
 8012766:	68f8      	ldr	r0, [r7, #12]
 8012768:	f000 fa38 	bl	8012bdc <USB_WritePacket>
 801276c:	e0d2      	b.n	8012914 <USB_EPStartXfer+0x480>
 801276e:	bf00      	nop
 8012770:	e007ffff 	.word	0xe007ffff
 8012774:	fff80000 	.word	0xfff80000
 8012778:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801277c:	69bb      	ldr	r3, [r7, #24]
 801277e:	015a      	lsls	r2, r3, #5
 8012780:	69fb      	ldr	r3, [r7, #28]
 8012782:	4413      	add	r3, r2
 8012784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012788:	691a      	ldr	r2, [r3, #16]
 801278a:	69bb      	ldr	r3, [r7, #24]
 801278c:	0159      	lsls	r1, r3, #5
 801278e:	69fb      	ldr	r3, [r7, #28]
 8012790:	440b      	add	r3, r1
 8012792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012796:	4619      	mov	r1, r3
 8012798:	4b61      	ldr	r3, [pc, #388]	; (8012920 <USB_EPStartXfer+0x48c>)
 801279a:	4013      	ands	r3, r2
 801279c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801279e:	69bb      	ldr	r3, [r7, #24]
 80127a0:	015a      	lsls	r2, r3, #5
 80127a2:	69fb      	ldr	r3, [r7, #28]
 80127a4:	4413      	add	r3, r2
 80127a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127aa:	691a      	ldr	r2, [r3, #16]
 80127ac:	69bb      	ldr	r3, [r7, #24]
 80127ae:	0159      	lsls	r1, r3, #5
 80127b0:	69fb      	ldr	r3, [r7, #28]
 80127b2:	440b      	add	r3, r1
 80127b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127b8:	4619      	mov	r1, r3
 80127ba:	4b5a      	ldr	r3, [pc, #360]	; (8012924 <USB_EPStartXfer+0x490>)
 80127bc:	4013      	ands	r3, r2
 80127be:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 80127c0:	68bb      	ldr	r3, [r7, #8]
 80127c2:	695b      	ldr	r3, [r3, #20]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d123      	bne.n	8012810 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80127c8:	69bb      	ldr	r3, [r7, #24]
 80127ca:	015a      	lsls	r2, r3, #5
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	4413      	add	r3, r2
 80127d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127d4:	691a      	ldr	r2, [r3, #16]
 80127d6:	68bb      	ldr	r3, [r7, #8]
 80127d8:	689b      	ldr	r3, [r3, #8]
 80127da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80127de:	69b9      	ldr	r1, [r7, #24]
 80127e0:	0148      	lsls	r0, r1, #5
 80127e2:	69f9      	ldr	r1, [r7, #28]
 80127e4:	4401      	add	r1, r0
 80127e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80127ea:	4313      	orrs	r3, r2
 80127ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80127ee:	69bb      	ldr	r3, [r7, #24]
 80127f0:	015a      	lsls	r2, r3, #5
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	4413      	add	r3, r2
 80127f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80127fa:	691b      	ldr	r3, [r3, #16]
 80127fc:	69ba      	ldr	r2, [r7, #24]
 80127fe:	0151      	lsls	r1, r2, #5
 8012800:	69fa      	ldr	r2, [r7, #28]
 8012802:	440a      	add	r2, r1
 8012804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012808:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801280c:	6113      	str	r3, [r2, #16]
 801280e:	e033      	b.n	8012878 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8012810:	68bb      	ldr	r3, [r7, #8]
 8012812:	695a      	ldr	r2, [r3, #20]
 8012814:	68bb      	ldr	r3, [r7, #8]
 8012816:	689b      	ldr	r3, [r3, #8]
 8012818:	4413      	add	r3, r2
 801281a:	1e5a      	subs	r2, r3, #1
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	689b      	ldr	r3, [r3, #8]
 8012820:	fbb2 f3f3 	udiv	r3, r2, r3
 8012824:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8012826:	69bb      	ldr	r3, [r7, #24]
 8012828:	015a      	lsls	r2, r3, #5
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	4413      	add	r3, r2
 801282e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012832:	691a      	ldr	r2, [r3, #16]
 8012834:	8afb      	ldrh	r3, [r7, #22]
 8012836:	04d9      	lsls	r1, r3, #19
 8012838:	4b3b      	ldr	r3, [pc, #236]	; (8012928 <USB_EPStartXfer+0x494>)
 801283a:	400b      	ands	r3, r1
 801283c:	69b9      	ldr	r1, [r7, #24]
 801283e:	0148      	lsls	r0, r1, #5
 8012840:	69f9      	ldr	r1, [r7, #28]
 8012842:	4401      	add	r1, r0
 8012844:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012848:	4313      	orrs	r3, r2
 801284a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 801284c:	69bb      	ldr	r3, [r7, #24]
 801284e:	015a      	lsls	r2, r3, #5
 8012850:	69fb      	ldr	r3, [r7, #28]
 8012852:	4413      	add	r3, r2
 8012854:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012858:	691a      	ldr	r2, [r3, #16]
 801285a:	68bb      	ldr	r3, [r7, #8]
 801285c:	689b      	ldr	r3, [r3, #8]
 801285e:	8af9      	ldrh	r1, [r7, #22]
 8012860:	fb01 f303 	mul.w	r3, r1, r3
 8012864:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012868:	69b9      	ldr	r1, [r7, #24]
 801286a:	0148      	lsls	r0, r1, #5
 801286c:	69f9      	ldr	r1, [r7, #28]
 801286e:	4401      	add	r1, r0
 8012870:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012874:	4313      	orrs	r3, r2
 8012876:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012878:	79fb      	ldrb	r3, [r7, #7]
 801287a:	2b01      	cmp	r3, #1
 801287c:	d10d      	bne.n	801289a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	68db      	ldr	r3, [r3, #12]
 8012882:	2b00      	cmp	r3, #0
 8012884:	d009      	beq.n	801289a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012886:	68bb      	ldr	r3, [r7, #8]
 8012888:	68d9      	ldr	r1, [r3, #12]
 801288a:	69bb      	ldr	r3, [r7, #24]
 801288c:	015a      	lsls	r2, r3, #5
 801288e:	69fb      	ldr	r3, [r7, #28]
 8012890:	4413      	add	r3, r2
 8012892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012896:	460a      	mov	r2, r1
 8012898:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801289a:	68bb      	ldr	r3, [r7, #8]
 801289c:	78db      	ldrb	r3, [r3, #3]
 801289e:	2b01      	cmp	r3, #1
 80128a0:	d128      	bne.n	80128f4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80128a2:	69fb      	ldr	r3, [r7, #28]
 80128a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128a8:	689b      	ldr	r3, [r3, #8]
 80128aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d110      	bne.n	80128d4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80128b2:	69bb      	ldr	r3, [r7, #24]
 80128b4:	015a      	lsls	r2, r3, #5
 80128b6:	69fb      	ldr	r3, [r7, #28]
 80128b8:	4413      	add	r3, r2
 80128ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	69ba      	ldr	r2, [r7, #24]
 80128c2:	0151      	lsls	r1, r2, #5
 80128c4:	69fa      	ldr	r2, [r7, #28]
 80128c6:	440a      	add	r2, r1
 80128c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80128d0:	6013      	str	r3, [r2, #0]
 80128d2:	e00f      	b.n	80128f4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80128d4:	69bb      	ldr	r3, [r7, #24]
 80128d6:	015a      	lsls	r2, r3, #5
 80128d8:	69fb      	ldr	r3, [r7, #28]
 80128da:	4413      	add	r3, r2
 80128dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128e0:	681b      	ldr	r3, [r3, #0]
 80128e2:	69ba      	ldr	r2, [r7, #24]
 80128e4:	0151      	lsls	r1, r2, #5
 80128e6:	69fa      	ldr	r2, [r7, #28]
 80128e8:	440a      	add	r2, r1
 80128ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80128ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80128f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80128f4:	69bb      	ldr	r3, [r7, #24]
 80128f6:	015a      	lsls	r2, r3, #5
 80128f8:	69fb      	ldr	r3, [r7, #28]
 80128fa:	4413      	add	r3, r2
 80128fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	69ba      	ldr	r2, [r7, #24]
 8012904:	0151      	lsls	r1, r2, #5
 8012906:	69fa      	ldr	r2, [r7, #28]
 8012908:	440a      	add	r2, r1
 801290a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801290e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012912:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012914:	2300      	movs	r3, #0
}
 8012916:	4618      	mov	r0, r3
 8012918:	3720      	adds	r7, #32
 801291a:	46bd      	mov	sp, r7
 801291c:	bd80      	pop	{r7, pc}
 801291e:	bf00      	nop
 8012920:	fff80000 	.word	0xfff80000
 8012924:	e007ffff 	.word	0xe007ffff
 8012928:	1ff80000 	.word	0x1ff80000

0801292c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 801292c:	b480      	push	{r7}
 801292e:	b087      	sub	sp, #28
 8012930:	af00      	add	r7, sp, #0
 8012932:	60f8      	str	r0, [r7, #12]
 8012934:	60b9      	str	r1, [r7, #8]
 8012936:	4613      	mov	r3, r2
 8012938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 801293e:	68bb      	ldr	r3, [r7, #8]
 8012940:	781b      	ldrb	r3, [r3, #0]
 8012942:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012944:	68bb      	ldr	r3, [r7, #8]
 8012946:	785b      	ldrb	r3, [r3, #1]
 8012948:	2b01      	cmp	r3, #1
 801294a:	f040 80cd 	bne.w	8012ae8 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 801294e:	68bb      	ldr	r3, [r7, #8]
 8012950:	695b      	ldr	r3, [r3, #20]
 8012952:	2b00      	cmp	r3, #0
 8012954:	d132      	bne.n	80129bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012956:	693b      	ldr	r3, [r7, #16]
 8012958:	015a      	lsls	r2, r3, #5
 801295a:	697b      	ldr	r3, [r7, #20]
 801295c:	4413      	add	r3, r2
 801295e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012962:	691a      	ldr	r2, [r3, #16]
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	0159      	lsls	r1, r3, #5
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	440b      	add	r3, r1
 801296c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012970:	4619      	mov	r1, r3
 8012972:	4b98      	ldr	r3, [pc, #608]	; (8012bd4 <USB_EP0StartXfer+0x2a8>)
 8012974:	4013      	ands	r3, r2
 8012976:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012978:	693b      	ldr	r3, [r7, #16]
 801297a:	015a      	lsls	r2, r3, #5
 801297c:	697b      	ldr	r3, [r7, #20]
 801297e:	4413      	add	r3, r2
 8012980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012984:	691b      	ldr	r3, [r3, #16]
 8012986:	693a      	ldr	r2, [r7, #16]
 8012988:	0151      	lsls	r1, r2, #5
 801298a:	697a      	ldr	r2, [r7, #20]
 801298c:	440a      	add	r2, r1
 801298e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012992:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012996:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	015a      	lsls	r2, r3, #5
 801299c:	697b      	ldr	r3, [r7, #20]
 801299e:	4413      	add	r3, r2
 80129a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129a4:	691a      	ldr	r2, [r3, #16]
 80129a6:	693b      	ldr	r3, [r7, #16]
 80129a8:	0159      	lsls	r1, r3, #5
 80129aa:	697b      	ldr	r3, [r7, #20]
 80129ac:	440b      	add	r3, r1
 80129ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129b2:	4619      	mov	r1, r3
 80129b4:	4b88      	ldr	r3, [pc, #544]	; (8012bd8 <USB_EP0StartXfer+0x2ac>)
 80129b6:	4013      	ands	r3, r2
 80129b8:	610b      	str	r3, [r1, #16]
 80129ba:	e04e      	b.n	8012a5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80129bc:	693b      	ldr	r3, [r7, #16]
 80129be:	015a      	lsls	r2, r3, #5
 80129c0:	697b      	ldr	r3, [r7, #20]
 80129c2:	4413      	add	r3, r2
 80129c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129c8:	691a      	ldr	r2, [r3, #16]
 80129ca:	693b      	ldr	r3, [r7, #16]
 80129cc:	0159      	lsls	r1, r3, #5
 80129ce:	697b      	ldr	r3, [r7, #20]
 80129d0:	440b      	add	r3, r1
 80129d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129d6:	4619      	mov	r1, r3
 80129d8:	4b7f      	ldr	r3, [pc, #508]	; (8012bd8 <USB_EP0StartXfer+0x2ac>)
 80129da:	4013      	ands	r3, r2
 80129dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	015a      	lsls	r2, r3, #5
 80129e2:	697b      	ldr	r3, [r7, #20]
 80129e4:	4413      	add	r3, r2
 80129e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129ea:	691a      	ldr	r2, [r3, #16]
 80129ec:	693b      	ldr	r3, [r7, #16]
 80129ee:	0159      	lsls	r1, r3, #5
 80129f0:	697b      	ldr	r3, [r7, #20]
 80129f2:	440b      	add	r3, r1
 80129f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80129f8:	4619      	mov	r1, r3
 80129fa:	4b76      	ldr	r3, [pc, #472]	; (8012bd4 <USB_EP0StartXfer+0x2a8>)
 80129fc:	4013      	ands	r3, r2
 80129fe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8012a00:	68bb      	ldr	r3, [r7, #8]
 8012a02:	695a      	ldr	r2, [r3, #20]
 8012a04:	68bb      	ldr	r3, [r7, #8]
 8012a06:	689b      	ldr	r3, [r3, #8]
 8012a08:	429a      	cmp	r2, r3
 8012a0a:	d903      	bls.n	8012a14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8012a0c:	68bb      	ldr	r3, [r7, #8]
 8012a0e:	689a      	ldr	r2, [r3, #8]
 8012a10:	68bb      	ldr	r3, [r7, #8]
 8012a12:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012a14:	693b      	ldr	r3, [r7, #16]
 8012a16:	015a      	lsls	r2, r3, #5
 8012a18:	697b      	ldr	r3, [r7, #20]
 8012a1a:	4413      	add	r3, r2
 8012a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a20:	691b      	ldr	r3, [r3, #16]
 8012a22:	693a      	ldr	r2, [r7, #16]
 8012a24:	0151      	lsls	r1, r2, #5
 8012a26:	697a      	ldr	r2, [r7, #20]
 8012a28:	440a      	add	r2, r1
 8012a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012a34:	693b      	ldr	r3, [r7, #16]
 8012a36:	015a      	lsls	r2, r3, #5
 8012a38:	697b      	ldr	r3, [r7, #20]
 8012a3a:	4413      	add	r3, r2
 8012a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a40:	691a      	ldr	r2, [r3, #16]
 8012a42:	68bb      	ldr	r3, [r7, #8]
 8012a44:	695b      	ldr	r3, [r3, #20]
 8012a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012a4a:	6939      	ldr	r1, [r7, #16]
 8012a4c:	0148      	lsls	r0, r1, #5
 8012a4e:	6979      	ldr	r1, [r7, #20]
 8012a50:	4401      	add	r1, r0
 8012a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012a56:	4313      	orrs	r3, r2
 8012a58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8012a5a:	79fb      	ldrb	r3, [r7, #7]
 8012a5c:	2b01      	cmp	r3, #1
 8012a5e:	d11e      	bne.n	8012a9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012a60:	68bb      	ldr	r3, [r7, #8]
 8012a62:	691b      	ldr	r3, [r3, #16]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d009      	beq.n	8012a7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012a68:	693b      	ldr	r3, [r7, #16]
 8012a6a:	015a      	lsls	r2, r3, #5
 8012a6c:	697b      	ldr	r3, [r7, #20]
 8012a6e:	4413      	add	r3, r2
 8012a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a74:	461a      	mov	r2, r3
 8012a76:	68bb      	ldr	r3, [r7, #8]
 8012a78:	691b      	ldr	r3, [r3, #16]
 8012a7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a7c:	693b      	ldr	r3, [r7, #16]
 8012a7e:	015a      	lsls	r2, r3, #5
 8012a80:	697b      	ldr	r3, [r7, #20]
 8012a82:	4413      	add	r3, r2
 8012a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a88:	681b      	ldr	r3, [r3, #0]
 8012a8a:	693a      	ldr	r2, [r7, #16]
 8012a8c:	0151      	lsls	r1, r2, #5
 8012a8e:	697a      	ldr	r2, [r7, #20]
 8012a90:	440a      	add	r2, r1
 8012a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012a9a:	6013      	str	r3, [r2, #0]
 8012a9c:	e092      	b.n	8012bc4 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012a9e:	693b      	ldr	r3, [r7, #16]
 8012aa0:	015a      	lsls	r2, r3, #5
 8012aa2:	697b      	ldr	r3, [r7, #20]
 8012aa4:	4413      	add	r3, r2
 8012aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aaa:	681b      	ldr	r3, [r3, #0]
 8012aac:	693a      	ldr	r2, [r7, #16]
 8012aae:	0151      	lsls	r1, r2, #5
 8012ab0:	697a      	ldr	r2, [r7, #20]
 8012ab2:	440a      	add	r2, r1
 8012ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012abc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	695b      	ldr	r3, [r3, #20]
 8012ac2:	2b00      	cmp	r3, #0
 8012ac4:	d07e      	beq.n	8012bc4 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012acc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012ace:	68bb      	ldr	r3, [r7, #8]
 8012ad0:	781b      	ldrb	r3, [r3, #0]
 8012ad2:	f003 030f 	and.w	r3, r3, #15
 8012ad6:	2101      	movs	r1, #1
 8012ad8:	fa01 f303 	lsl.w	r3, r1, r3
 8012adc:	6979      	ldr	r1, [r7, #20]
 8012ade:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012ae2:	4313      	orrs	r3, r2
 8012ae4:	634b      	str	r3, [r1, #52]	; 0x34
 8012ae6:	e06d      	b.n	8012bc4 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	015a      	lsls	r2, r3, #5
 8012aec:	697b      	ldr	r3, [r7, #20]
 8012aee:	4413      	add	r3, r2
 8012af0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012af4:	691a      	ldr	r2, [r3, #16]
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	0159      	lsls	r1, r3, #5
 8012afa:	697b      	ldr	r3, [r7, #20]
 8012afc:	440b      	add	r3, r1
 8012afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b02:	4619      	mov	r1, r3
 8012b04:	4b34      	ldr	r3, [pc, #208]	; (8012bd8 <USB_EP0StartXfer+0x2ac>)
 8012b06:	4013      	ands	r3, r2
 8012b08:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8012b0a:	693b      	ldr	r3, [r7, #16]
 8012b0c:	015a      	lsls	r2, r3, #5
 8012b0e:	697b      	ldr	r3, [r7, #20]
 8012b10:	4413      	add	r3, r2
 8012b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b16:	691a      	ldr	r2, [r3, #16]
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	0159      	lsls	r1, r3, #5
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	440b      	add	r3, r1
 8012b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b24:	4619      	mov	r1, r3
 8012b26:	4b2b      	ldr	r3, [pc, #172]	; (8012bd4 <USB_EP0StartXfer+0x2a8>)
 8012b28:	4013      	ands	r3, r2
 8012b2a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 8012b2c:	68bb      	ldr	r3, [r7, #8]
 8012b2e:	695b      	ldr	r3, [r3, #20]
 8012b30:	2b00      	cmp	r3, #0
 8012b32:	d003      	beq.n	8012b3c <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	689a      	ldr	r2, [r3, #8]
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8012b3c:	693b      	ldr	r3, [r7, #16]
 8012b3e:	015a      	lsls	r2, r3, #5
 8012b40:	697b      	ldr	r3, [r7, #20]
 8012b42:	4413      	add	r3, r2
 8012b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b48:	691b      	ldr	r3, [r3, #16]
 8012b4a:	693a      	ldr	r2, [r7, #16]
 8012b4c:	0151      	lsls	r1, r2, #5
 8012b4e:	697a      	ldr	r2, [r7, #20]
 8012b50:	440a      	add	r2, r1
 8012b52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012b56:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012b5a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8012b5c:	693b      	ldr	r3, [r7, #16]
 8012b5e:	015a      	lsls	r2, r3, #5
 8012b60:	697b      	ldr	r3, [r7, #20]
 8012b62:	4413      	add	r3, r2
 8012b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b68:	691a      	ldr	r2, [r3, #16]
 8012b6a:	68bb      	ldr	r3, [r7, #8]
 8012b6c:	689b      	ldr	r3, [r3, #8]
 8012b6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012b72:	6939      	ldr	r1, [r7, #16]
 8012b74:	0148      	lsls	r0, r1, #5
 8012b76:	6979      	ldr	r1, [r7, #20]
 8012b78:	4401      	add	r1, r0
 8012b7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8012b7e:	4313      	orrs	r3, r2
 8012b80:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8012b82:	79fb      	ldrb	r3, [r7, #7]
 8012b84:	2b01      	cmp	r3, #1
 8012b86:	d10d      	bne.n	8012ba4 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8012b88:	68bb      	ldr	r3, [r7, #8]
 8012b8a:	68db      	ldr	r3, [r3, #12]
 8012b8c:	2b00      	cmp	r3, #0
 8012b8e:	d009      	beq.n	8012ba4 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	68d9      	ldr	r1, [r3, #12]
 8012b94:	693b      	ldr	r3, [r7, #16]
 8012b96:	015a      	lsls	r2, r3, #5
 8012b98:	697b      	ldr	r3, [r7, #20]
 8012b9a:	4413      	add	r3, r2
 8012b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ba0:	460a      	mov	r2, r1
 8012ba2:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	015a      	lsls	r2, r3, #5
 8012ba8:	697b      	ldr	r3, [r7, #20]
 8012baa:	4413      	add	r3, r2
 8012bac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012bb0:	681b      	ldr	r3, [r3, #0]
 8012bb2:	693a      	ldr	r2, [r7, #16]
 8012bb4:	0151      	lsls	r1, r2, #5
 8012bb6:	697a      	ldr	r2, [r7, #20]
 8012bb8:	440a      	add	r2, r1
 8012bba:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012bbe:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012bc2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012bc4:	2300      	movs	r3, #0
}
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	371c      	adds	r7, #28
 8012bca:	46bd      	mov	sp, r7
 8012bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd0:	4770      	bx	lr
 8012bd2:	bf00      	nop
 8012bd4:	e007ffff 	.word	0xe007ffff
 8012bd8:	fff80000 	.word	0xfff80000

08012bdc <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8012bdc:	b480      	push	{r7}
 8012bde:	b089      	sub	sp, #36	; 0x24
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	60f8      	str	r0, [r7, #12]
 8012be4:	60b9      	str	r1, [r7, #8]
 8012be6:	4611      	mov	r1, r2
 8012be8:	461a      	mov	r2, r3
 8012bea:	460b      	mov	r3, r1
 8012bec:	71fb      	strb	r3, [r7, #7]
 8012bee:	4613      	mov	r3, r2
 8012bf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8012bf6:	68bb      	ldr	r3, [r7, #8]
 8012bf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8012bfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8012bfe:	2b00      	cmp	r3, #0
 8012c00:	d11a      	bne.n	8012c38 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8012c02:	88bb      	ldrh	r3, [r7, #4]
 8012c04:	3303      	adds	r3, #3
 8012c06:	089b      	lsrs	r3, r3, #2
 8012c08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8012c0a:	2300      	movs	r3, #0
 8012c0c:	61bb      	str	r3, [r7, #24]
 8012c0e:	e00f      	b.n	8012c30 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8012c10:	79fb      	ldrb	r3, [r7, #7]
 8012c12:	031a      	lsls	r2, r3, #12
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	4413      	add	r3, r2
 8012c18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	69fb      	ldr	r3, [r7, #28]
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8012c24:	69fb      	ldr	r3, [r7, #28]
 8012c26:	3304      	adds	r3, #4
 8012c28:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8012c2a:	69bb      	ldr	r3, [r7, #24]
 8012c2c:	3301      	adds	r3, #1
 8012c2e:	61bb      	str	r3, [r7, #24]
 8012c30:	69ba      	ldr	r2, [r7, #24]
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	429a      	cmp	r2, r3
 8012c36:	d3eb      	bcc.n	8012c10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8012c38:	2300      	movs	r3, #0
}
 8012c3a:	4618      	mov	r0, r3
 8012c3c:	3724      	adds	r7, #36	; 0x24
 8012c3e:	46bd      	mov	sp, r7
 8012c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c44:	4770      	bx	lr

08012c46 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8012c46:	b480      	push	{r7}
 8012c48:	b089      	sub	sp, #36	; 0x24
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	60f8      	str	r0, [r7, #12]
 8012c4e:	60b9      	str	r1, [r7, #8]
 8012c50:	4613      	mov	r3, r2
 8012c52:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8012c58:	68bb      	ldr	r3, [r7, #8]
 8012c5a:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8012c5c:	88fb      	ldrh	r3, [r7, #6]
 8012c5e:	3303      	adds	r3, #3
 8012c60:	089b      	lsrs	r3, r3, #2
 8012c62:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8012c64:	2300      	movs	r3, #0
 8012c66:	61bb      	str	r3, [r7, #24]
 8012c68:	e00b      	b.n	8012c82 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8012c6a:	697b      	ldr	r3, [r7, #20]
 8012c6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8012c70:	681a      	ldr	r2, [r3, #0]
 8012c72:	69fb      	ldr	r3, [r7, #28]
 8012c74:	601a      	str	r2, [r3, #0]
    pDest++;
 8012c76:	69fb      	ldr	r3, [r7, #28]
 8012c78:	3304      	adds	r3, #4
 8012c7a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8012c7c:	69bb      	ldr	r3, [r7, #24]
 8012c7e:	3301      	adds	r3, #1
 8012c80:	61bb      	str	r3, [r7, #24]
 8012c82:	69ba      	ldr	r2, [r7, #24]
 8012c84:	693b      	ldr	r3, [r7, #16]
 8012c86:	429a      	cmp	r2, r3
 8012c88:	d3ef      	bcc.n	8012c6a <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8012c8a:	69fb      	ldr	r3, [r7, #28]
}
 8012c8c:	4618      	mov	r0, r3
 8012c8e:	3724      	adds	r7, #36	; 0x24
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr

08012c98 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012c98:	b480      	push	{r7}
 8012c9a:	b085      	sub	sp, #20
 8012c9c:	af00      	add	r7, sp, #0
 8012c9e:	6078      	str	r0, [r7, #4]
 8012ca0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012cac:	683b      	ldr	r3, [r7, #0]
 8012cae:	785b      	ldrb	r3, [r3, #1]
 8012cb0:	2b01      	cmp	r3, #1
 8012cb2:	d12c      	bne.n	8012d0e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012cb4:	68bb      	ldr	r3, [r7, #8]
 8012cb6:	015a      	lsls	r2, r3, #5
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	4413      	add	r3, r2
 8012cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	db12      	blt.n	8012cec <USB_EPSetStall+0x54>
 8012cc6:	68bb      	ldr	r3, [r7, #8]
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	d00f      	beq.n	8012cec <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8012ccc:	68bb      	ldr	r3, [r7, #8]
 8012cce:	015a      	lsls	r2, r3, #5
 8012cd0:	68fb      	ldr	r3, [r7, #12]
 8012cd2:	4413      	add	r3, r2
 8012cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cd8:	681b      	ldr	r3, [r3, #0]
 8012cda:	68ba      	ldr	r2, [r7, #8]
 8012cdc:	0151      	lsls	r1, r2, #5
 8012cde:	68fa      	ldr	r2, [r7, #12]
 8012ce0:	440a      	add	r2, r1
 8012ce2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ce6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012cea:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8012cec:	68bb      	ldr	r3, [r7, #8]
 8012cee:	015a      	lsls	r2, r3, #5
 8012cf0:	68fb      	ldr	r3, [r7, #12]
 8012cf2:	4413      	add	r3, r2
 8012cf4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	68ba      	ldr	r2, [r7, #8]
 8012cfc:	0151      	lsls	r1, r2, #5
 8012cfe:	68fa      	ldr	r2, [r7, #12]
 8012d00:	440a      	add	r2, r1
 8012d02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d0a:	6013      	str	r3, [r2, #0]
 8012d0c:	e02b      	b.n	8012d66 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8012d0e:	68bb      	ldr	r3, [r7, #8]
 8012d10:	015a      	lsls	r2, r3, #5
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	4413      	add	r3, r2
 8012d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	2b00      	cmp	r3, #0
 8012d1e:	db12      	blt.n	8012d46 <USB_EPSetStall+0xae>
 8012d20:	68bb      	ldr	r3, [r7, #8]
 8012d22:	2b00      	cmp	r3, #0
 8012d24:	d00f      	beq.n	8012d46 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	015a      	lsls	r2, r3, #5
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	4413      	add	r3, r2
 8012d2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	0151      	lsls	r1, r2, #5
 8012d38:	68fa      	ldr	r2, [r7, #12]
 8012d3a:	440a      	add	r2, r1
 8012d3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d40:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8012d44:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8012d46:	68bb      	ldr	r3, [r7, #8]
 8012d48:	015a      	lsls	r2, r3, #5
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	4413      	add	r3, r2
 8012d4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	68ba      	ldr	r2, [r7, #8]
 8012d56:	0151      	lsls	r1, r2, #5
 8012d58:	68fa      	ldr	r2, [r7, #12]
 8012d5a:	440a      	add	r2, r1
 8012d5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012d64:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8012d66:	2300      	movs	r3, #0
}
 8012d68:	4618      	mov	r0, r3
 8012d6a:	3714      	adds	r7, #20
 8012d6c:	46bd      	mov	sp, r7
 8012d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d72:	4770      	bx	lr

08012d74 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012d74:	b480      	push	{r7}
 8012d76:	b085      	sub	sp, #20
 8012d78:	af00      	add	r7, sp, #0
 8012d7a:	6078      	str	r0, [r7, #4]
 8012d7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	781b      	ldrb	r3, [r3, #0]
 8012d86:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012d88:	683b      	ldr	r3, [r7, #0]
 8012d8a:	785b      	ldrb	r3, [r3, #1]
 8012d8c:	2b01      	cmp	r3, #1
 8012d8e:	d128      	bne.n	8012de2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	015a      	lsls	r2, r3, #5
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	4413      	add	r3, r2
 8012d98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d9c:	681b      	ldr	r3, [r3, #0]
 8012d9e:	68ba      	ldr	r2, [r7, #8]
 8012da0:	0151      	lsls	r1, r2, #5
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	440a      	add	r2, r1
 8012da6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012daa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012dae:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012db0:	683b      	ldr	r3, [r7, #0]
 8012db2:	78db      	ldrb	r3, [r3, #3]
 8012db4:	2b03      	cmp	r3, #3
 8012db6:	d003      	beq.n	8012dc0 <USB_EPClearStall+0x4c>
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	78db      	ldrb	r3, [r3, #3]
 8012dbc:	2b02      	cmp	r3, #2
 8012dbe:	d138      	bne.n	8012e32 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012dc0:	68bb      	ldr	r3, [r7, #8]
 8012dc2:	015a      	lsls	r2, r3, #5
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dcc:	681b      	ldr	r3, [r3, #0]
 8012dce:	68ba      	ldr	r2, [r7, #8]
 8012dd0:	0151      	lsls	r1, r2, #5
 8012dd2:	68fa      	ldr	r2, [r7, #12]
 8012dd4:	440a      	add	r2, r1
 8012dd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012dda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012dde:	6013      	str	r3, [r2, #0]
 8012de0:	e027      	b.n	8012e32 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	015a      	lsls	r2, r3, #5
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	4413      	add	r3, r2
 8012dea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	68ba      	ldr	r2, [r7, #8]
 8012df2:	0151      	lsls	r1, r2, #5
 8012df4:	68fa      	ldr	r2, [r7, #12]
 8012df6:	440a      	add	r2, r1
 8012df8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012dfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8012e00:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8012e02:	683b      	ldr	r3, [r7, #0]
 8012e04:	78db      	ldrb	r3, [r3, #3]
 8012e06:	2b03      	cmp	r3, #3
 8012e08:	d003      	beq.n	8012e12 <USB_EPClearStall+0x9e>
 8012e0a:	683b      	ldr	r3, [r7, #0]
 8012e0c:	78db      	ldrb	r3, [r3, #3]
 8012e0e:	2b02      	cmp	r3, #2
 8012e10:	d10f      	bne.n	8012e32 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	015a      	lsls	r2, r3, #5
 8012e16:	68fb      	ldr	r3, [r7, #12]
 8012e18:	4413      	add	r3, r2
 8012e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	68ba      	ldr	r2, [r7, #8]
 8012e22:	0151      	lsls	r1, r2, #5
 8012e24:	68fa      	ldr	r2, [r7, #12]
 8012e26:	440a      	add	r2, r1
 8012e28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012e2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012e30:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3714      	adds	r7, #20
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e3e:	4770      	bx	lr

08012e40 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8012e40:	b480      	push	{r7}
 8012e42:	b085      	sub	sp, #20
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	460b      	mov	r3, r1
 8012e4a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e4c:	687b      	ldr	r3, [r7, #4]
 8012e4e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e56:	681b      	ldr	r3, [r3, #0]
 8012e58:	68fa      	ldr	r2, [r7, #12]
 8012e5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012e5e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8012e62:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8012e64:	68fb      	ldr	r3, [r7, #12]
 8012e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e6a:	681a      	ldr	r2, [r3, #0]
 8012e6c:	78fb      	ldrb	r3, [r7, #3]
 8012e6e:	011b      	lsls	r3, r3, #4
 8012e70:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8012e74:	68f9      	ldr	r1, [r7, #12]
 8012e76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012e7a:	4313      	orrs	r3, r2
 8012e7c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8012e7e:	2300      	movs	r3, #0
}
 8012e80:	4618      	mov	r0, r3
 8012e82:	3714      	adds	r7, #20
 8012e84:	46bd      	mov	sp, r7
 8012e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e8a:	4770      	bx	lr

08012e8c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012e8c:	b580      	push	{r7, lr}
 8012e8e:	b084      	sub	sp, #16
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012e94:	687b      	ldr	r3, [r7, #4]
 8012e96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012e9e:	685b      	ldr	r3, [r3, #4]
 8012ea0:	68fa      	ldr	r2, [r7, #12]
 8012ea2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ea6:	f023 0302 	bic.w	r3, r3, #2
 8012eaa:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012eac:	2003      	movs	r0, #3
 8012eae:	f7f1 fb65 	bl	800457c <HAL_Delay>

  return HAL_OK;
 8012eb2:	2300      	movs	r3, #0
}
 8012eb4:	4618      	mov	r0, r3
 8012eb6:	3710      	adds	r7, #16
 8012eb8:	46bd      	mov	sp, r7
 8012eba:	bd80      	pop	{r7, pc}

08012ebc <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8012ebc:	b580      	push	{r7, lr}
 8012ebe:	b084      	sub	sp, #16
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ece:	685b      	ldr	r3, [r3, #4]
 8012ed0:	68fa      	ldr	r2, [r7, #12]
 8012ed2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8012ed6:	f043 0302 	orr.w	r3, r3, #2
 8012eda:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8012edc:	2003      	movs	r0, #3
 8012ede:	f7f1 fb4d 	bl	800457c <HAL_Delay>

  return HAL_OK;
 8012ee2:	2300      	movs	r3, #0
}
 8012ee4:	4618      	mov	r0, r3
 8012ee6:	3710      	adds	r7, #16
 8012ee8:	46bd      	mov	sp, r7
 8012eea:	bd80      	pop	{r7, pc}

08012eec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8012eec:	b480      	push	{r7}
 8012eee:	b085      	sub	sp, #20
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	695b      	ldr	r3, [r3, #20]
 8012ef8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	699b      	ldr	r3, [r3, #24]
 8012efe:	68fa      	ldr	r2, [r7, #12]
 8012f00:	4013      	ands	r3, r2
 8012f02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8012f04:	68fb      	ldr	r3, [r7, #12]
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	3714      	adds	r7, #20
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f12:	b480      	push	{r7}
 8012f14:	b085      	sub	sp, #20
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f24:	699b      	ldr	r3, [r3, #24]
 8012f26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f28:	68fb      	ldr	r3, [r7, #12]
 8012f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f2e:	69db      	ldr	r3, [r3, #28]
 8012f30:	68ba      	ldr	r2, [r7, #8]
 8012f32:	4013      	ands	r3, r2
 8012f34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8012f36:	68bb      	ldr	r3, [r7, #8]
 8012f38:	0c1b      	lsrs	r3, r3, #16
}
 8012f3a:	4618      	mov	r0, r3
 8012f3c:	3714      	adds	r7, #20
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f44:	4770      	bx	lr

08012f46 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8012f46:	b480      	push	{r7}
 8012f48:	b085      	sub	sp, #20
 8012f4a:	af00      	add	r7, sp, #0
 8012f4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f58:	699b      	ldr	r3, [r3, #24]
 8012f5a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8012f5c:	68fb      	ldr	r3, [r7, #12]
 8012f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f62:	69db      	ldr	r3, [r3, #28]
 8012f64:	68ba      	ldr	r2, [r7, #8]
 8012f66:	4013      	ands	r3, r2
 8012f68:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8012f6a:	68bb      	ldr	r3, [r7, #8]
 8012f6c:	b29b      	uxth	r3, r3
}
 8012f6e:	4618      	mov	r0, r3
 8012f70:	3714      	adds	r7, #20
 8012f72:	46bd      	mov	sp, r7
 8012f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f78:	4770      	bx	lr

08012f7a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012f7a:	b480      	push	{r7}
 8012f7c:	b085      	sub	sp, #20
 8012f7e:	af00      	add	r7, sp, #0
 8012f80:	6078      	str	r0, [r7, #4]
 8012f82:	460b      	mov	r3, r1
 8012f84:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012f86:	687b      	ldr	r3, [r7, #4]
 8012f88:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8012f8a:	78fb      	ldrb	r3, [r7, #3]
 8012f8c:	015a      	lsls	r2, r3, #5
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	4413      	add	r3, r2
 8012f92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012f96:	689b      	ldr	r3, [r3, #8]
 8012f98:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8012f9a:	68fb      	ldr	r3, [r7, #12]
 8012f9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fa0:	695b      	ldr	r3, [r3, #20]
 8012fa2:	68ba      	ldr	r2, [r7, #8]
 8012fa4:	4013      	ands	r3, r2
 8012fa6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8012fa8:	68bb      	ldr	r3, [r7, #8]
}
 8012faa:	4618      	mov	r0, r3
 8012fac:	3714      	adds	r7, #20
 8012fae:	46bd      	mov	sp, r7
 8012fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fb4:	4770      	bx	lr

08012fb6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8012fb6:	b480      	push	{r7}
 8012fb8:	b087      	sub	sp, #28
 8012fba:	af00      	add	r7, sp, #0
 8012fbc:	6078      	str	r0, [r7, #4]
 8012fbe:	460b      	mov	r3, r1
 8012fc0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012fc2:	687b      	ldr	r3, [r7, #4]
 8012fc4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8012fc6:	697b      	ldr	r3, [r7, #20]
 8012fc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fcc:	691b      	ldr	r3, [r3, #16]
 8012fce:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8012fd0:	697b      	ldr	r3, [r7, #20]
 8012fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012fd8:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8012fda:	78fb      	ldrb	r3, [r7, #3]
 8012fdc:	f003 030f 	and.w	r3, r3, #15
 8012fe0:	68fa      	ldr	r2, [r7, #12]
 8012fe2:	fa22 f303 	lsr.w	r3, r2, r3
 8012fe6:	01db      	lsls	r3, r3, #7
 8012fe8:	b2db      	uxtb	r3, r3
 8012fea:	693a      	ldr	r2, [r7, #16]
 8012fec:	4313      	orrs	r3, r2
 8012fee:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8012ff0:	78fb      	ldrb	r3, [r7, #3]
 8012ff2:	015a      	lsls	r2, r3, #5
 8012ff4:	697b      	ldr	r3, [r7, #20]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ffc:	689b      	ldr	r3, [r3, #8]
 8012ffe:	693a      	ldr	r2, [r7, #16]
 8013000:	4013      	ands	r3, r2
 8013002:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013004:	68bb      	ldr	r3, [r7, #8]
}
 8013006:	4618      	mov	r0, r3
 8013008:	371c      	adds	r7, #28
 801300a:	46bd      	mov	sp, r7
 801300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013010:	4770      	bx	lr

08013012 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013012:	b480      	push	{r7}
 8013014:	b083      	sub	sp, #12
 8013016:	af00      	add	r7, sp, #0
 8013018:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	695b      	ldr	r3, [r3, #20]
 801301e:	f003 0301 	and.w	r3, r3, #1
}
 8013022:	4618      	mov	r0, r3
 8013024:	370c      	adds	r7, #12
 8013026:	46bd      	mov	sp, r7
 8013028:	f85d 7b04 	ldr.w	r7, [sp], #4
 801302c:	4770      	bx	lr
	...

08013030 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8013030:	b480      	push	{r7}
 8013032:	b085      	sub	sp, #20
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801303c:	68fb      	ldr	r3, [r7, #12]
 801303e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013042:	681a      	ldr	r2, [r3, #0]
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801304a:	4619      	mov	r1, r3
 801304c:	4b09      	ldr	r3, [pc, #36]	; (8013074 <USB_ActivateSetup+0x44>)
 801304e:	4013      	ands	r3, r2
 8013050:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8013052:	68fb      	ldr	r3, [r7, #12]
 8013054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013058:	685b      	ldr	r3, [r3, #4]
 801305a:	68fa      	ldr	r2, [r7, #12]
 801305c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013060:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8013064:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8013066:	2300      	movs	r3, #0
}
 8013068:	4618      	mov	r0, r3
 801306a:	3714      	adds	r7, #20
 801306c:	46bd      	mov	sp, r7
 801306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013072:	4770      	bx	lr
 8013074:	fffff800 	.word	0xfffff800

08013078 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8013078:	b480      	push	{r7}
 801307a:	b087      	sub	sp, #28
 801307c:	af00      	add	r7, sp, #0
 801307e:	60f8      	str	r0, [r7, #12]
 8013080:	460b      	mov	r3, r1
 8013082:	607a      	str	r2, [r7, #4]
 8013084:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801308a:	68fb      	ldr	r3, [r7, #12]
 801308c:	333c      	adds	r3, #60	; 0x3c
 801308e:	3304      	adds	r3, #4
 8013090:	681b      	ldr	r3, [r3, #0]
 8013092:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013094:	693b      	ldr	r3, [r7, #16]
 8013096:	4a26      	ldr	r2, [pc, #152]	; (8013130 <USB_EP0_OutStart+0xb8>)
 8013098:	4293      	cmp	r3, r2
 801309a:	d90a      	bls.n	80130b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801309c:	697b      	ldr	r3, [r7, #20]
 801309e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130a2:	681b      	ldr	r3, [r3, #0]
 80130a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80130a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80130ac:	d101      	bne.n	80130b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80130ae:	2300      	movs	r3, #0
 80130b0:	e037      	b.n	8013122 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80130b2:	697b      	ldr	r3, [r7, #20]
 80130b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b8:	461a      	mov	r2, r3
 80130ba:	2300      	movs	r3, #0
 80130bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	697a      	ldr	r2, [r7, #20]
 80130c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80130d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80130d2:	697b      	ldr	r3, [r7, #20]
 80130d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d8:	691b      	ldr	r3, [r3, #16]
 80130da:	697a      	ldr	r2, [r7, #20]
 80130dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130e0:	f043 0318 	orr.w	r3, r3, #24
 80130e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80130e6:	697b      	ldr	r3, [r7, #20]
 80130e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130ec:	691b      	ldr	r3, [r3, #16]
 80130ee:	697a      	ldr	r2, [r7, #20]
 80130f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80130f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80130f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80130fa:	7afb      	ldrb	r3, [r7, #11]
 80130fc:	2b01      	cmp	r3, #1
 80130fe:	d10f      	bne.n	8013120 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013100:	697b      	ldr	r3, [r7, #20]
 8013102:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013106:	461a      	mov	r2, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	697a      	ldr	r2, [r7, #20]
 8013116:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801311a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801311e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013120:	2300      	movs	r3, #0
}
 8013122:	4618      	mov	r0, r3
 8013124:	371c      	adds	r7, #28
 8013126:	46bd      	mov	sp, r7
 8013128:	f85d 7b04 	ldr.w	r7, [sp], #4
 801312c:	4770      	bx	lr
 801312e:	bf00      	nop
 8013130:	4f54300a 	.word	0x4f54300a

08013134 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8013134:	b480      	push	{r7}
 8013136:	b085      	sub	sp, #20
 8013138:	af00      	add	r7, sp, #0
 801313a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 801313c:	2300      	movs	r3, #0
 801313e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8013140:	68fb      	ldr	r3, [r7, #12]
 8013142:	3301      	adds	r3, #1
 8013144:	60fb      	str	r3, [r7, #12]
 8013146:	68fb      	ldr	r3, [r7, #12]
 8013148:	4a13      	ldr	r2, [pc, #76]	; (8013198 <USB_CoreReset+0x64>)
 801314a:	4293      	cmp	r3, r2
 801314c:	d901      	bls.n	8013152 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801314e:	2303      	movs	r3, #3
 8013150:	e01b      	b.n	801318a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013152:	687b      	ldr	r3, [r7, #4]
 8013154:	691b      	ldr	r3, [r3, #16]
 8013156:	2b00      	cmp	r3, #0
 8013158:	daf2      	bge.n	8013140 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801315a:	2300      	movs	r3, #0
 801315c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	691b      	ldr	r3, [r3, #16]
 8013162:	f043 0201 	orr.w	r2, r3, #1
 8013166:	687b      	ldr	r3, [r7, #4]
 8013168:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	3301      	adds	r3, #1
 801316e:	60fb      	str	r3, [r7, #12]
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	4a09      	ldr	r2, [pc, #36]	; (8013198 <USB_CoreReset+0x64>)
 8013174:	4293      	cmp	r3, r2
 8013176:	d901      	bls.n	801317c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8013178:	2303      	movs	r3, #3
 801317a:	e006      	b.n	801318a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	691b      	ldr	r3, [r3, #16]
 8013180:	f003 0301 	and.w	r3, r3, #1
 8013184:	2b01      	cmp	r3, #1
 8013186:	d0f0      	beq.n	801316a <USB_CoreReset+0x36>

  return HAL_OK;
 8013188:	2300      	movs	r3, #0
}
 801318a:	4618      	mov	r0, r3
 801318c:	3714      	adds	r7, #20
 801318e:	46bd      	mov	sp, r7
 8013190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013194:	4770      	bx	lr
 8013196:	bf00      	nop
 8013198:	00030d40 	.word	0x00030d40

0801319c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 801319c:	b580      	push	{r7, lr}
 801319e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80131a0:	4904      	ldr	r1, [pc, #16]	; (80131b4 <MX_FATFS_Init+0x18>)
 80131a2:	4805      	ldr	r0, [pc, #20]	; (80131b8 <MX_FATFS_Init+0x1c>)
 80131a4:	f005 fbec 	bl	8018980 <FATFS_LinkDriver>
 80131a8:	4603      	mov	r3, r0
 80131aa:	461a      	mov	r2, r3
 80131ac:	4b03      	ldr	r3, [pc, #12]	; (80131bc <MX_FATFS_Init+0x20>)
 80131ae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80131b0:	bf00      	nop
 80131b2:	bd80      	pop	{r7, pc}
 80131b4:	24001770 	.word	0x24001770
 80131b8:	0801af14 	.word	0x0801af14
 80131bc:	2400176c 	.word	0x2400176c

080131c0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80131c0:	b480      	push	{r7}
 80131c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80131c4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80131c6:	4618      	mov	r0, r3
 80131c8:	46bd      	mov	sp, r7
 80131ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ce:	4770      	bx	lr

080131d0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80131d0:	b580      	push	{r7, lr}
 80131d2:	b082      	sub	sp, #8
 80131d4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80131d6:	2300      	movs	r3, #0
 80131d8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80131da:	f000 f885 	bl	80132e8 <BSP_SD_IsDetected>
 80131de:	4603      	mov	r3, r0
 80131e0:	2b01      	cmp	r3, #1
 80131e2:	d001      	beq.n	80131e8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 80131e4:	2302      	movs	r3, #2
 80131e6:	e012      	b.n	801320e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 80131e8:	480b      	ldr	r0, [pc, #44]	; (8013218 <BSP_SD_Init+0x48>)
 80131ea:	f7f9 fc1d 	bl	800ca28 <HAL_SD_Init>
 80131ee:	4603      	mov	r3, r0
 80131f0:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 80131f2:	79fb      	ldrb	r3, [r7, #7]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d109      	bne.n	801320c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 80131f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80131fc:	4806      	ldr	r0, [pc, #24]	; (8013218 <BSP_SD_Init+0x48>)
 80131fe:	f7fa fdf1 	bl	800dde4 <HAL_SD_ConfigWideBusOperation>
 8013202:	4603      	mov	r3, r0
 8013204:	2b00      	cmp	r3, #0
 8013206:	d001      	beq.n	801320c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013208:	2301      	movs	r3, #1
 801320a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 801320c:	79fb      	ldrb	r3, [r7, #7]
}
 801320e:	4618      	mov	r0, r3
 8013210:	3708      	adds	r7, #8
 8013212:	46bd      	mov	sp, r7
 8013214:	bd80      	pop	{r7, pc}
 8013216:	bf00      	nop
 8013218:	24001470 	.word	0x24001470

0801321c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	b086      	sub	sp, #24
 8013220:	af00      	add	r7, sp, #0
 8013222:	60f8      	str	r0, [r7, #12]
 8013224:	60b9      	str	r1, [r7, #8]
 8013226:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013228:	2300      	movs	r3, #0
 801322a:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	68ba      	ldr	r2, [r7, #8]
 8013230:	68f9      	ldr	r1, [r7, #12]
 8013232:	4806      	ldr	r0, [pc, #24]	; (801324c <BSP_SD_ReadBlocks_DMA+0x30>)
 8013234:	f7fa f834 	bl	800d2a0 <HAL_SD_ReadBlocks_DMA>
 8013238:	4603      	mov	r3, r0
 801323a:	2b00      	cmp	r3, #0
 801323c:	d001      	beq.n	8013242 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 801323e:	2301      	movs	r3, #1
 8013240:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013242:	7dfb      	ldrb	r3, [r7, #23]
}
 8013244:	4618      	mov	r0, r3
 8013246:	3718      	adds	r7, #24
 8013248:	46bd      	mov	sp, r7
 801324a:	bd80      	pop	{r7, pc}
 801324c:	24001470 	.word	0x24001470

08013250 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b086      	sub	sp, #24
 8013254:	af00      	add	r7, sp, #0
 8013256:	60f8      	str	r0, [r7, #12]
 8013258:	60b9      	str	r1, [r7, #8]
 801325a:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 801325c:	2300      	movs	r3, #0
 801325e:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	68ba      	ldr	r2, [r7, #8]
 8013264:	68f9      	ldr	r1, [r7, #12]
 8013266:	4806      	ldr	r0, [pc, #24]	; (8013280 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013268:	f7fa f8c2 	bl	800d3f0 <HAL_SD_WriteBlocks_DMA>
 801326c:	4603      	mov	r3, r0
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013272:	2301      	movs	r3, #1
 8013274:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013276:	7dfb      	ldrb	r3, [r7, #23]
}
 8013278:	4618      	mov	r0, r3
 801327a:	3718      	adds	r7, #24
 801327c:	46bd      	mov	sp, r7
 801327e:	bd80      	pop	{r7, pc}
 8013280:	24001470 	.word	0x24001470

08013284 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013284:	b580      	push	{r7, lr}
 8013286:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013288:	4805      	ldr	r0, [pc, #20]	; (80132a0 <BSP_SD_GetCardState+0x1c>)
 801328a:	f7fa fe55 	bl	800df38 <HAL_SD_GetCardState>
 801328e:	4603      	mov	r3, r0
 8013290:	2b04      	cmp	r3, #4
 8013292:	bf14      	ite	ne
 8013294:	2301      	movne	r3, #1
 8013296:	2300      	moveq	r3, #0
 8013298:	b2db      	uxtb	r3, r3
}
 801329a:	4618      	mov	r0, r3
 801329c:	bd80      	pop	{r7, pc}
 801329e:	bf00      	nop
 80132a0:	24001470 	.word	0x24001470

080132a4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80132a4:	b580      	push	{r7, lr}
 80132a6:	b082      	sub	sp, #8
 80132a8:	af00      	add	r7, sp, #0
 80132aa:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 80132ac:	6879      	ldr	r1, [r7, #4]
 80132ae:	4803      	ldr	r0, [pc, #12]	; (80132bc <BSP_SD_GetCardInfo+0x18>)
 80132b0:	f7fa fd6c 	bl	800dd8c <HAL_SD_GetCardInfo>
}
 80132b4:	bf00      	nop
 80132b6:	3708      	adds	r7, #8
 80132b8:	46bd      	mov	sp, r7
 80132ba:	bd80      	pop	{r7, pc}
 80132bc:	24001470 	.word	0x24001470

080132c0 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 80132c0:	b580      	push	{r7, lr}
 80132c2:	b082      	sub	sp, #8
 80132c4:	af00      	add	r7, sp, #0
 80132c6:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 80132c8:	f000 f9a0 	bl	801360c <BSP_SD_WriteCpltCallback>
}
 80132cc:	bf00      	nop
 80132ce:	3708      	adds	r7, #8
 80132d0:	46bd      	mov	sp, r7
 80132d2:	bd80      	pop	{r7, pc}

080132d4 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 80132dc:	f000 f9a2 	bl	8013624 <BSP_SD_ReadCpltCallback>
}
 80132e0:	bf00      	nop
 80132e2:	3708      	adds	r7, #8
 80132e4:	46bd      	mov	sp, r7
 80132e6:	bd80      	pop	{r7, pc}

080132e8 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80132e8:	b580      	push	{r7, lr}
 80132ea:	b082      	sub	sp, #8
 80132ec:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80132ee:	2301      	movs	r3, #1
 80132f0:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 80132f2:	f000 f80b 	bl	801330c <BSP_PlatformIsDetected>
 80132f6:	4603      	mov	r3, r0
 80132f8:	2b00      	cmp	r3, #0
 80132fa:	d101      	bne.n	8013300 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 80132fc:	2300      	movs	r3, #0
 80132fe:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013300:	79fb      	ldrb	r3, [r7, #7]
 8013302:	b2db      	uxtb	r3, r3
}
 8013304:	4618      	mov	r0, r3
 8013306:	3708      	adds	r7, #8
 8013308:	46bd      	mov	sp, r7
 801330a:	bd80      	pop	{r7, pc}

0801330c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 801330c:	b580      	push	{r7, lr}
 801330e:	b082      	sub	sp, #8
 8013310:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013312:	2301      	movs	r3, #1
 8013314:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013316:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801331a:	4806      	ldr	r0, [pc, #24]	; (8013334 <BSP_PlatformIsDetected+0x28>)
 801331c:	f7f4 fe30 	bl	8007f80 <HAL_GPIO_ReadPin>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	d001      	beq.n	801332a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013326:	2300      	movs	r3, #0
 8013328:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 801332a:	79fb      	ldrb	r3, [r7, #7]
}
 801332c:	4618      	mov	r0, r3
 801332e:	3708      	adds	r7, #8
 8013330:	46bd      	mov	sp, r7
 8013332:	bd80      	pop	{r7, pc}
 8013334:	58020000 	.word	0x58020000

08013338 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013338:	b580      	push	{r7, lr}
 801333a:	b084      	sub	sp, #16
 801333c:	af00      	add	r7, sp, #0
 801333e:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013340:	f7f1 f910 	bl	8004564 <HAL_GetTick>
 8013344:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013346:	e006      	b.n	8013356 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013348:	f7ff ff9c 	bl	8013284 <BSP_SD_GetCardState>
 801334c:	4603      	mov	r3, r0
 801334e:	2b00      	cmp	r3, #0
 8013350:	d101      	bne.n	8013356 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013352:	2300      	movs	r3, #0
 8013354:	e009      	b.n	801336a <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013356:	f7f1 f905 	bl	8004564 <HAL_GetTick>
 801335a:	4602      	mov	r2, r0
 801335c:	68fb      	ldr	r3, [r7, #12]
 801335e:	1ad3      	subs	r3, r2, r3
 8013360:	687a      	ldr	r2, [r7, #4]
 8013362:	429a      	cmp	r2, r3
 8013364:	d8f0      	bhi.n	8013348 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013366:	f04f 33ff 	mov.w	r3, #4294967295
}
 801336a:	4618      	mov	r0, r3
 801336c:	3710      	adds	r7, #16
 801336e:	46bd      	mov	sp, r7
 8013370:	bd80      	pop	{r7, pc}
	...

08013374 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013374:	b580      	push	{r7, lr}
 8013376:	b082      	sub	sp, #8
 8013378:	af00      	add	r7, sp, #0
 801337a:	4603      	mov	r3, r0
 801337c:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 801337e:	4b0b      	ldr	r3, [pc, #44]	; (80133ac <SD_CheckStatus+0x38>)
 8013380:	2201      	movs	r2, #1
 8013382:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013384:	f7ff ff7e 	bl	8013284 <BSP_SD_GetCardState>
 8013388:	4603      	mov	r3, r0
 801338a:	2b00      	cmp	r3, #0
 801338c:	d107      	bne.n	801339e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 801338e:	4b07      	ldr	r3, [pc, #28]	; (80133ac <SD_CheckStatus+0x38>)
 8013390:	781b      	ldrb	r3, [r3, #0]
 8013392:	b2db      	uxtb	r3, r3
 8013394:	f023 0301 	bic.w	r3, r3, #1
 8013398:	b2da      	uxtb	r2, r3
 801339a:	4b04      	ldr	r3, [pc, #16]	; (80133ac <SD_CheckStatus+0x38>)
 801339c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 801339e:	4b03      	ldr	r3, [pc, #12]	; (80133ac <SD_CheckStatus+0x38>)
 80133a0:	781b      	ldrb	r3, [r3, #0]
 80133a2:	b2db      	uxtb	r3, r3
}
 80133a4:	4618      	mov	r0, r3
 80133a6:	3708      	adds	r7, #8
 80133a8:	46bd      	mov	sp, r7
 80133aa:	bd80      	pop	{r7, pc}
 80133ac:	2400001d 	.word	0x2400001d

080133b0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80133b0:	b580      	push	{r7, lr}
 80133b2:	b082      	sub	sp, #8
 80133b4:	af00      	add	r7, sp, #0
 80133b6:	4603      	mov	r3, r0
 80133b8:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80133ba:	f7ff ff09 	bl	80131d0 <BSP_SD_Init>
 80133be:	4603      	mov	r3, r0
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d107      	bne.n	80133d4 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 80133c4:	79fb      	ldrb	r3, [r7, #7]
 80133c6:	4618      	mov	r0, r3
 80133c8:	f7ff ffd4 	bl	8013374 <SD_CheckStatus>
 80133cc:	4603      	mov	r3, r0
 80133ce:	461a      	mov	r2, r3
 80133d0:	4b04      	ldr	r3, [pc, #16]	; (80133e4 <SD_initialize+0x34>)
 80133d2:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 80133d4:	4b03      	ldr	r3, [pc, #12]	; (80133e4 <SD_initialize+0x34>)
 80133d6:	781b      	ldrb	r3, [r3, #0]
 80133d8:	b2db      	uxtb	r3, r3
}
 80133da:	4618      	mov	r0, r3
 80133dc:	3708      	adds	r7, #8
 80133de:	46bd      	mov	sp, r7
 80133e0:	bd80      	pop	{r7, pc}
 80133e2:	bf00      	nop
 80133e4:	2400001d 	.word	0x2400001d

080133e8 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 80133e8:	b580      	push	{r7, lr}
 80133ea:	b082      	sub	sp, #8
 80133ec:	af00      	add	r7, sp, #0
 80133ee:	4603      	mov	r3, r0
 80133f0:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 80133f2:	79fb      	ldrb	r3, [r7, #7]
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7ff ffbd 	bl	8013374 <SD_CheckStatus>
 80133fa:	4603      	mov	r3, r0
}
 80133fc:	4618      	mov	r0, r3
 80133fe:	3708      	adds	r7, #8
 8013400:	46bd      	mov	sp, r7
 8013402:	bd80      	pop	{r7, pc}

08013404 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013404:	b580      	push	{r7, lr}
 8013406:	b086      	sub	sp, #24
 8013408:	af00      	add	r7, sp, #0
 801340a:	60b9      	str	r1, [r7, #8]
 801340c:	607a      	str	r2, [r7, #4]
 801340e:	603b      	str	r3, [r7, #0]
 8013410:	4603      	mov	r3, r0
 8013412:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013414:	2301      	movs	r3, #1
 8013416:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013418:	f247 5030 	movw	r0, #30000	; 0x7530
 801341c:	f7ff ff8c 	bl	8013338 <SD_CheckStatusWithTimeout>
 8013420:	4603      	mov	r3, r0
 8013422:	2b00      	cmp	r3, #0
 8013424:	da01      	bge.n	801342a <SD_read+0x26>
  {
    return res;
 8013426:	7dfb      	ldrb	r3, [r7, #23]
 8013428:	e03b      	b.n	80134a2 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 801342a:	683a      	ldr	r2, [r7, #0]
 801342c:	6879      	ldr	r1, [r7, #4]
 801342e:	68b8      	ldr	r0, [r7, #8]
 8013430:	f7ff fef4 	bl	801321c <BSP_SD_ReadBlocks_DMA>
 8013434:	4603      	mov	r3, r0
 8013436:	2b00      	cmp	r3, #0
 8013438:	d132      	bne.n	80134a0 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 801343a:	4b1c      	ldr	r3, [pc, #112]	; (80134ac <SD_read+0xa8>)
 801343c:	2200      	movs	r2, #0
 801343e:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013440:	f7f1 f890 	bl	8004564 <HAL_GetTick>
 8013444:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013446:	bf00      	nop
 8013448:	4b18      	ldr	r3, [pc, #96]	; (80134ac <SD_read+0xa8>)
 801344a:	681b      	ldr	r3, [r3, #0]
 801344c:	2b00      	cmp	r3, #0
 801344e:	d108      	bne.n	8013462 <SD_read+0x5e>
 8013450:	f7f1 f888 	bl	8004564 <HAL_GetTick>
 8013454:	4602      	mov	r2, r0
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	1ad3      	subs	r3, r2, r3
 801345a:	f247 522f 	movw	r2, #29999	; 0x752f
 801345e:	4293      	cmp	r3, r2
 8013460:	d9f2      	bls.n	8013448 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8013462:	4b12      	ldr	r3, [pc, #72]	; (80134ac <SD_read+0xa8>)
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	2b00      	cmp	r3, #0
 8013468:	d102      	bne.n	8013470 <SD_read+0x6c>
      {
        res = RES_ERROR;
 801346a:	2301      	movs	r3, #1
 801346c:	75fb      	strb	r3, [r7, #23]
 801346e:	e017      	b.n	80134a0 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013470:	4b0e      	ldr	r3, [pc, #56]	; (80134ac <SD_read+0xa8>)
 8013472:	2200      	movs	r2, #0
 8013474:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013476:	f7f1 f875 	bl	8004564 <HAL_GetTick>
 801347a:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801347c:	e007      	b.n	801348e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801347e:	f7ff ff01 	bl	8013284 <BSP_SD_GetCardState>
 8013482:	4603      	mov	r3, r0
 8013484:	2b00      	cmp	r3, #0
 8013486:	d102      	bne.n	801348e <SD_read+0x8a>
          {
            res = RES_OK;
 8013488:	2300      	movs	r3, #0
 801348a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 801348c:	e008      	b.n	80134a0 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801348e:	f7f1 f869 	bl	8004564 <HAL_GetTick>
 8013492:	4602      	mov	r2, r0
 8013494:	693b      	ldr	r3, [r7, #16]
 8013496:	1ad3      	subs	r3, r2, r3
 8013498:	f247 522f 	movw	r2, #29999	; 0x752f
 801349c:	4293      	cmp	r3, r2
 801349e:	d9ee      	bls.n	801347e <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 80134a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bd80      	pop	{r7, pc}
 80134aa:	bf00      	nop
 80134ac:	24000b54 	.word	0x24000b54

080134b0 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80134b0:	b580      	push	{r7, lr}
 80134b2:	b086      	sub	sp, #24
 80134b4:	af00      	add	r7, sp, #0
 80134b6:	60b9      	str	r1, [r7, #8]
 80134b8:	607a      	str	r2, [r7, #4]
 80134ba:	603b      	str	r3, [r7, #0]
 80134bc:	4603      	mov	r3, r0
 80134be:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80134c0:	2301      	movs	r3, #1
 80134c2:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 80134c4:	4b24      	ldr	r3, [pc, #144]	; (8013558 <SD_write+0xa8>)
 80134c6:	2200      	movs	r2, #0
 80134c8:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 80134ca:	f247 5030 	movw	r0, #30000	; 0x7530
 80134ce:	f7ff ff33 	bl	8013338 <SD_CheckStatusWithTimeout>
 80134d2:	4603      	mov	r3, r0
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	da01      	bge.n	80134dc <SD_write+0x2c>
  {
    return res;
 80134d8:	7dfb      	ldrb	r3, [r7, #23]
 80134da:	e038      	b.n	801354e <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 80134dc:	683a      	ldr	r2, [r7, #0]
 80134de:	6879      	ldr	r1, [r7, #4]
 80134e0:	68b8      	ldr	r0, [r7, #8]
 80134e2:	f7ff feb5 	bl	8013250 <BSP_SD_WriteBlocks_DMA>
 80134e6:	4603      	mov	r3, r0
 80134e8:	2b00      	cmp	r3, #0
 80134ea:	d12f      	bne.n	801354c <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 80134ec:	f7f1 f83a 	bl	8004564 <HAL_GetTick>
 80134f0:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80134f2:	bf00      	nop
 80134f4:	4b18      	ldr	r3, [pc, #96]	; (8013558 <SD_write+0xa8>)
 80134f6:	681b      	ldr	r3, [r3, #0]
 80134f8:	2b00      	cmp	r3, #0
 80134fa:	d108      	bne.n	801350e <SD_write+0x5e>
 80134fc:	f7f1 f832 	bl	8004564 <HAL_GetTick>
 8013500:	4602      	mov	r2, r0
 8013502:	693b      	ldr	r3, [r7, #16]
 8013504:	1ad3      	subs	r3, r2, r3
 8013506:	f247 522f 	movw	r2, #29999	; 0x752f
 801350a:	4293      	cmp	r3, r2
 801350c:	d9f2      	bls.n	80134f4 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 801350e:	4b12      	ldr	r3, [pc, #72]	; (8013558 <SD_write+0xa8>)
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	2b00      	cmp	r3, #0
 8013514:	d102      	bne.n	801351c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013516:	2301      	movs	r3, #1
 8013518:	75fb      	strb	r3, [r7, #23]
 801351a:	e017      	b.n	801354c <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 801351c:	4b0e      	ldr	r3, [pc, #56]	; (8013558 <SD_write+0xa8>)
 801351e:	2200      	movs	r2, #0
 8013520:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013522:	f7f1 f81f 	bl	8004564 <HAL_GetTick>
 8013526:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013528:	e007      	b.n	801353a <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 801352a:	f7ff feab 	bl	8013284 <BSP_SD_GetCardState>
 801352e:	4603      	mov	r3, r0
 8013530:	2b00      	cmp	r3, #0
 8013532:	d102      	bne.n	801353a <SD_write+0x8a>
          {
            res = RES_OK;
 8013534:	2300      	movs	r3, #0
 8013536:	75fb      	strb	r3, [r7, #23]
            break;
 8013538:	e008      	b.n	801354c <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 801353a:	f7f1 f813 	bl	8004564 <HAL_GetTick>
 801353e:	4602      	mov	r2, r0
 8013540:	693b      	ldr	r3, [r7, #16]
 8013542:	1ad3      	subs	r3, r2, r3
 8013544:	f247 522f 	movw	r2, #29999	; 0x752f
 8013548:	4293      	cmp	r3, r2
 801354a:	d9ee      	bls.n	801352a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 801354c:	7dfb      	ldrb	r3, [r7, #23]
}
 801354e:	4618      	mov	r0, r3
 8013550:	3718      	adds	r7, #24
 8013552:	46bd      	mov	sp, r7
 8013554:	bd80      	pop	{r7, pc}
 8013556:	bf00      	nop
 8013558:	24000b50 	.word	0x24000b50

0801355c <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 801355c:	b580      	push	{r7, lr}
 801355e:	b08c      	sub	sp, #48	; 0x30
 8013560:	af00      	add	r7, sp, #0
 8013562:	4603      	mov	r3, r0
 8013564:	603a      	str	r2, [r7, #0]
 8013566:	71fb      	strb	r3, [r7, #7]
 8013568:	460b      	mov	r3, r1
 801356a:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 801356c:	2301      	movs	r3, #1
 801356e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013572:	4b25      	ldr	r3, [pc, #148]	; (8013608 <SD_ioctl+0xac>)
 8013574:	781b      	ldrb	r3, [r3, #0]
 8013576:	b2db      	uxtb	r3, r3
 8013578:	f003 0301 	and.w	r3, r3, #1
 801357c:	2b00      	cmp	r3, #0
 801357e:	d001      	beq.n	8013584 <SD_ioctl+0x28>
 8013580:	2303      	movs	r3, #3
 8013582:	e03c      	b.n	80135fe <SD_ioctl+0xa2>

  switch (cmd)
 8013584:	79bb      	ldrb	r3, [r7, #6]
 8013586:	2b03      	cmp	r3, #3
 8013588:	d834      	bhi.n	80135f4 <SD_ioctl+0x98>
 801358a:	a201      	add	r2, pc, #4	; (adr r2, 8013590 <SD_ioctl+0x34>)
 801358c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013590:	080135a1 	.word	0x080135a1
 8013594:	080135a9 	.word	0x080135a9
 8013598:	080135c1 	.word	0x080135c1
 801359c:	080135db 	.word	0x080135db
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 80135a0:	2300      	movs	r3, #0
 80135a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135a6:	e028      	b.n	80135fa <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 80135a8:	f107 0308 	add.w	r3, r7, #8
 80135ac:	4618      	mov	r0, r3
 80135ae:	f7ff fe79 	bl	80132a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 80135b2:	6a3a      	ldr	r2, [r7, #32]
 80135b4:	683b      	ldr	r3, [r7, #0]
 80135b6:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80135b8:	2300      	movs	r3, #0
 80135ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135be:	e01c      	b.n	80135fa <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80135c0:	f107 0308 	add.w	r3, r7, #8
 80135c4:	4618      	mov	r0, r3
 80135c6:	f7ff fe6d 	bl	80132a4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 80135ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135cc:	b29a      	uxth	r2, r3
 80135ce:	683b      	ldr	r3, [r7, #0]
 80135d0:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 80135d2:	2300      	movs	r3, #0
 80135d4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135d8:	e00f      	b.n	80135fa <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80135da:	f107 0308 	add.w	r3, r7, #8
 80135de:	4618      	mov	r0, r3
 80135e0:	f7ff fe60 	bl	80132a4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80135e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80135e6:	0a5a      	lsrs	r2, r3, #9
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80135ec:	2300      	movs	r3, #0
 80135ee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80135f2:	e002      	b.n	80135fa <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80135f4:	2304      	movs	r3, #4
 80135f6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80135fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80135fe:	4618      	mov	r0, r3
 8013600:	3730      	adds	r7, #48	; 0x30
 8013602:	46bd      	mov	sp, r7
 8013604:	bd80      	pop	{r7, pc}
 8013606:	bf00      	nop
 8013608:	2400001d 	.word	0x2400001d

0801360c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 801360c:	b480      	push	{r7}
 801360e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013610:	4b03      	ldr	r3, [pc, #12]	; (8013620 <BSP_SD_WriteCpltCallback+0x14>)
 8013612:	2201      	movs	r2, #1
 8013614:	601a      	str	r2, [r3, #0]
}
 8013616:	bf00      	nop
 8013618:	46bd      	mov	sp, r7
 801361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801361e:	4770      	bx	lr
 8013620:	24000b50 	.word	0x24000b50

08013624 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013624:	b480      	push	{r7}
 8013626:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013628:	4b03      	ldr	r3, [pc, #12]	; (8013638 <BSP_SD_ReadCpltCallback+0x14>)
 801362a:	2201      	movs	r2, #1
 801362c:	601a      	str	r2, [r3, #0]
}
 801362e:	bf00      	nop
 8013630:	46bd      	mov	sp, r7
 8013632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013636:	4770      	bx	lr
 8013638:	24000b54 	.word	0x24000b54

0801363c <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801363c:	b580      	push	{r7, lr}
 801363e:	b084      	sub	sp, #16
 8013640:	af00      	add	r7, sp, #0
 8013642:	6078      	str	r0, [r7, #4]
 8013644:	460b      	mov	r3, r1
 8013646:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013648:	f248 0074 	movw	r0, #32884	; 0x8074
 801364c:	f005 fed0 	bl	80193f0 <malloc>
 8013650:	4603      	mov	r3, r0
 8013652:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013654:	68fb      	ldr	r3, [r7, #12]
 8013656:	2b00      	cmp	r3, #0
 8013658:	d105      	bne.n	8013666 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 801365a:	687b      	ldr	r3, [r7, #4]
 801365c:	2200      	movs	r2, #0
 801365e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013662:	2302      	movs	r3, #2
 8013664:	e034      	b.n	80136d0 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	68fa      	ldr	r2, [r7, #12]
 801366a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	7c1b      	ldrb	r3, [r3, #16]
 8013672:	2b00      	cmp	r3, #0
 8013674:	d115      	bne.n	80136a2 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013676:	f44f 7300 	mov.w	r3, #512	; 0x200
 801367a:	2202      	movs	r2, #2
 801367c:	2101      	movs	r1, #1
 801367e:	6878      	ldr	r0, [r7, #4]
 8013680:	f005 fd1d 	bl	80190be <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	2201      	movs	r2, #1
 8013688:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 801368c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013690:	2202      	movs	r2, #2
 8013692:	2181      	movs	r1, #129	; 0x81
 8013694:	6878      	ldr	r0, [r7, #4]
 8013696:	f005 fd12 	bl	80190be <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2201      	movs	r2, #1
 801369e:	871a      	strh	r2, [r3, #56]	; 0x38
 80136a0:	e012      	b.n	80136c8 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80136a2:	2340      	movs	r3, #64	; 0x40
 80136a4:	2202      	movs	r2, #2
 80136a6:	2101      	movs	r1, #1
 80136a8:	6878      	ldr	r0, [r7, #4]
 80136aa:	f005 fd08 	bl	80190be <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 80136ae:	687b      	ldr	r3, [r7, #4]
 80136b0:	2201      	movs	r2, #1
 80136b2:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 80136b6:	2340      	movs	r3, #64	; 0x40
 80136b8:	2202      	movs	r2, #2
 80136ba:	2181      	movs	r1, #129	; 0x81
 80136bc:	6878      	ldr	r0, [r7, #4]
 80136be:	f005 fcfe 	bl	80190be <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 80136c2:	687b      	ldr	r3, [r7, #4]
 80136c4:	2201      	movs	r2, #1
 80136c6:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 80136c8:	6878      	ldr	r0, [r7, #4]
 80136ca:	f000 f98e 	bl	80139ea <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 80136ce:	2300      	movs	r3, #0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3710      	adds	r7, #16
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd80      	pop	{r7, pc}

080136d8 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80136d8:	b580      	push	{r7, lr}
 80136da:	b082      	sub	sp, #8
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	460b      	mov	r3, r1
 80136e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 80136e4:	2101      	movs	r1, #1
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f005 fd0f 	bl	801910a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	2200      	movs	r2, #0
 80136f0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 80136f4:	2181      	movs	r1, #129	; 0x81
 80136f6:	6878      	ldr	r0, [r7, #4]
 80136f8:	f005 fd07 	bl	801910a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 80136fc:	687b      	ldr	r3, [r7, #4]
 80136fe:	2200      	movs	r2, #0
 8013700:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013702:	6878      	ldr	r0, [r7, #4]
 8013704:	f000 f9cf 	bl	8013aa6 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801370e:	2b00      	cmp	r3, #0
 8013710:	d009      	beq.n	8013726 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013718:	4618      	mov	r0, r3
 801371a:	f005 fe71 	bl	8019400 <free>
    pdev->pClassData = NULL;
 801371e:	687b      	ldr	r3, [r7, #4]
 8013720:	2200      	movs	r2, #0
 8013722:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013726:	2300      	movs	r3, #0
}
 8013728:	4618      	mov	r0, r3
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801373a:	687b      	ldr	r3, [r7, #4]
 801373c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013740:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013742:	2300      	movs	r3, #0
 8013744:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013746:	2300      	movs	r3, #0
 8013748:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801374a:	683b      	ldr	r3, [r7, #0]
 801374c:	781b      	ldrb	r3, [r3, #0]
 801374e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013752:	2b00      	cmp	r3, #0
 8013754:	d04d      	beq.n	80137f2 <USBD_MSC_Setup+0xc2>
 8013756:	2b20      	cmp	r3, #32
 8013758:	f040 80c6 	bne.w	80138e8 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 801375c:	683b      	ldr	r3, [r7, #0]
 801375e:	785b      	ldrb	r3, [r3, #1]
 8013760:	2bfe      	cmp	r3, #254	; 0xfe
 8013762:	d002      	beq.n	801376a <USBD_MSC_Setup+0x3a>
 8013764:	2bff      	cmp	r3, #255	; 0xff
 8013766:	d024      	beq.n	80137b2 <USBD_MSC_Setup+0x82>
 8013768:	e03b      	b.n	80137e2 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 801376a:	683b      	ldr	r3, [r7, #0]
 801376c:	885b      	ldrh	r3, [r3, #2]
 801376e:	2b00      	cmp	r3, #0
 8013770:	d118      	bne.n	80137a4 <USBD_MSC_Setup+0x74>
 8013772:	683b      	ldr	r3, [r7, #0]
 8013774:	88db      	ldrh	r3, [r3, #6]
 8013776:	2b01      	cmp	r3, #1
 8013778:	d114      	bne.n	80137a4 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 801377a:	683b      	ldr	r3, [r7, #0]
 801377c:	781b      	ldrb	r3, [r3, #0]
 801377e:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013780:	2b00      	cmp	r3, #0
 8013782:	da0f      	bge.n	80137a4 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8013784:	687b      	ldr	r3, [r7, #4]
 8013786:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801378a:	699b      	ldr	r3, [r3, #24]
 801378c:	4798      	blx	r3
 801378e:	4603      	mov	r3, r0
 8013790:	461a      	mov	r2, r3
 8013792:	693b      	ldr	r3, [r7, #16]
 8013794:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8013796:	693b      	ldr	r3, [r7, #16]
 8013798:	2201      	movs	r2, #1
 801379a:	4619      	mov	r1, r3
 801379c:	6878      	ldr	r0, [r7, #4]
 801379e:	f002 fdaa 	bl	80162f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80137a2:	e025      	b.n	80137f0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80137a4:	6839      	ldr	r1, [r7, #0]
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f002 fd34 	bl	8016214 <USBD_CtlError>
        ret = USBD_FAIL;
 80137ac:	2303      	movs	r3, #3
 80137ae:	75fb      	strb	r3, [r7, #23]
      break;
 80137b0:	e01e      	b.n	80137f0 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80137b2:	683b      	ldr	r3, [r7, #0]
 80137b4:	885b      	ldrh	r3, [r3, #2]
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	d10c      	bne.n	80137d4 <USBD_MSC_Setup+0xa4>
 80137ba:	683b      	ldr	r3, [r7, #0]
 80137bc:	88db      	ldrh	r3, [r3, #6]
 80137be:	2b00      	cmp	r3, #0
 80137c0:	d108      	bne.n	80137d4 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 80137c2:	683b      	ldr	r3, [r7, #0]
 80137c4:	781b      	ldrb	r3, [r3, #0]
 80137c6:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 80137c8:	2b00      	cmp	r3, #0
 80137ca:	db03      	blt.n	80137d4 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 80137cc:	6878      	ldr	r0, [r7, #4]
 80137ce:	f000 f947 	bl	8013a60 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80137d2:	e00d      	b.n	80137f0 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 80137d4:	6839      	ldr	r1, [r7, #0]
 80137d6:	6878      	ldr	r0, [r7, #4]
 80137d8:	f002 fd1c 	bl	8016214 <USBD_CtlError>
        ret = USBD_FAIL;
 80137dc:	2303      	movs	r3, #3
 80137de:	75fb      	strb	r3, [r7, #23]
      break;
 80137e0:	e006      	b.n	80137f0 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 80137e2:	6839      	ldr	r1, [r7, #0]
 80137e4:	6878      	ldr	r0, [r7, #4]
 80137e6:	f002 fd15 	bl	8016214 <USBD_CtlError>
      ret = USBD_FAIL;
 80137ea:	2303      	movs	r3, #3
 80137ec:	75fb      	strb	r3, [r7, #23]
      break;
 80137ee:	bf00      	nop
    }
    break;
 80137f0:	e081      	b.n	80138f6 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80137f2:	683b      	ldr	r3, [r7, #0]
 80137f4:	785b      	ldrb	r3, [r3, #1]
 80137f6:	2b0b      	cmp	r3, #11
 80137f8:	d86d      	bhi.n	80138d6 <USBD_MSC_Setup+0x1a6>
 80137fa:	a201      	add	r2, pc, #4	; (adr r2, 8013800 <USBD_MSC_Setup+0xd0>)
 80137fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013800:	08013831 	.word	0x08013831
 8013804:	080138a7 	.word	0x080138a7
 8013808:	080138d7 	.word	0x080138d7
 801380c:	080138d7 	.word	0x080138d7
 8013810:	080138d7 	.word	0x080138d7
 8013814:	080138d7 	.word	0x080138d7
 8013818:	080138d7 	.word	0x080138d7
 801381c:	080138d7 	.word	0x080138d7
 8013820:	080138d7 	.word	0x080138d7
 8013824:	080138d7 	.word	0x080138d7
 8013828:	08013859 	.word	0x08013859
 801382c:	08013881 	.word	0x08013881
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013830:	687b      	ldr	r3, [r7, #4]
 8013832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013836:	2b03      	cmp	r3, #3
 8013838:	d107      	bne.n	801384a <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801383a:	f107 030e 	add.w	r3, r7, #14
 801383e:	2202      	movs	r2, #2
 8013840:	4619      	mov	r1, r3
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f002 fd57 	bl	80162f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013848:	e04d      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 801384a:	6839      	ldr	r1, [r7, #0]
 801384c:	6878      	ldr	r0, [r7, #4]
 801384e:	f002 fce1 	bl	8016214 <USBD_CtlError>
        ret = USBD_FAIL;
 8013852:	2303      	movs	r3, #3
 8013854:	75fb      	strb	r3, [r7, #23]
      break;
 8013856:	e046      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013858:	687b      	ldr	r3, [r7, #4]
 801385a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801385e:	2b03      	cmp	r3, #3
 8013860:	d107      	bne.n	8013872 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 8013862:	693b      	ldr	r3, [r7, #16]
 8013864:	3304      	adds	r3, #4
 8013866:	2201      	movs	r2, #1
 8013868:	4619      	mov	r1, r3
 801386a:	6878      	ldr	r0, [r7, #4]
 801386c:	f002 fd43 	bl	80162f6 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013870:	e039      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013872:	6839      	ldr	r1, [r7, #0]
 8013874:	6878      	ldr	r0, [r7, #4]
 8013876:	f002 fccd 	bl	8016214 <USBD_CtlError>
        ret = USBD_FAIL;
 801387a:	2303      	movs	r3, #3
 801387c:	75fb      	strb	r3, [r7, #23]
      break;
 801387e:	e032      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8013886:	2b03      	cmp	r3, #3
 8013888:	d106      	bne.n	8013898 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801388a:	683b      	ldr	r3, [r7, #0]
 801388c:	885b      	ldrh	r3, [r3, #2]
 801388e:	b2db      	uxtb	r3, r3
 8013890:	461a      	mov	r2, r3
 8013892:	693b      	ldr	r3, [r7, #16]
 8013894:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8013896:	e026      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8013898:	6839      	ldr	r1, [r7, #0]
 801389a:	6878      	ldr	r0, [r7, #4]
 801389c:	f002 fcba 	bl	8016214 <USBD_CtlError>
        ret = USBD_FAIL;
 80138a0:	2303      	movs	r3, #3
 80138a2:	75fb      	strb	r3, [r7, #23]
      break;
 80138a4:	e01f      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80138ac:	2b03      	cmp	r3, #3
 80138ae:	d119      	bne.n	80138e4 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 80138b0:	683b      	ldr	r3, [r7, #0]
 80138b2:	885b      	ldrh	r3, [r3, #2]
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d115      	bne.n	80138e4 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 80138b8:	683b      	ldr	r3, [r7, #0]
 80138ba:	889b      	ldrh	r3, [r3, #4]
 80138bc:	b2db      	uxtb	r3, r3
 80138be:	4619      	mov	r1, r3
 80138c0:	6878      	ldr	r0, [r7, #4]
 80138c2:	f005 fc41 	bl	8019148 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 80138c6:	683b      	ldr	r3, [r7, #0]
 80138c8:	889b      	ldrh	r3, [r3, #4]
 80138ca:	b2db      	uxtb	r3, r3
 80138cc:	4619      	mov	r1, r3
 80138ce:	6878      	ldr	r0, [r7, #4]
 80138d0:	f000 fa90 	bl	8013df4 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 80138d4:	e006      	b.n	80138e4 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 80138d6:	6839      	ldr	r1, [r7, #0]
 80138d8:	6878      	ldr	r0, [r7, #4]
 80138da:	f002 fc9b 	bl	8016214 <USBD_CtlError>
      ret = USBD_FAIL;
 80138de:	2303      	movs	r3, #3
 80138e0:	75fb      	strb	r3, [r7, #23]
      break;
 80138e2:	e000      	b.n	80138e6 <USBD_MSC_Setup+0x1b6>
      break;
 80138e4:	bf00      	nop
    }
    break;
 80138e6:	e006      	b.n	80138f6 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 80138e8:	6839      	ldr	r1, [r7, #0]
 80138ea:	6878      	ldr	r0, [r7, #4]
 80138ec:	f002 fc92 	bl	8016214 <USBD_CtlError>
    ret = USBD_FAIL;
 80138f0:	2303      	movs	r3, #3
 80138f2:	75fb      	strb	r3, [r7, #23]
    break;
 80138f4:	bf00      	nop
  }

  return (uint8_t)ret;
 80138f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80138f8:	4618      	mov	r0, r3
 80138fa:	3718      	adds	r7, #24
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}

08013900 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013900:	b580      	push	{r7, lr}
 8013902:	b082      	sub	sp, #8
 8013904:	af00      	add	r7, sp, #0
 8013906:	6078      	str	r0, [r7, #4]
 8013908:	460b      	mov	r3, r1
 801390a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801390c:	78fb      	ldrb	r3, [r7, #3]
 801390e:	4619      	mov	r1, r3
 8013910:	6878      	ldr	r0, [r7, #4]
 8013912:	f000 f8d9 	bl	8013ac8 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8013916:	2300      	movs	r3, #0
}
 8013918:	4618      	mov	r0, r3
 801391a:	3708      	adds	r7, #8
 801391c:	46bd      	mov	sp, r7
 801391e:	bd80      	pop	{r7, pc}

08013920 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013920:	b580      	push	{r7, lr}
 8013922:	b082      	sub	sp, #8
 8013924:	af00      	add	r7, sp, #0
 8013926:	6078      	str	r0, [r7, #4]
 8013928:	460b      	mov	r3, r1
 801392a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 801392c:	78fb      	ldrb	r3, [r7, #3]
 801392e:	4619      	mov	r1, r3
 8013930:	6878      	ldr	r0, [r7, #4]
 8013932:	f000 f8fd 	bl	8013b30 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 8013936:	2300      	movs	r3, #0
}
 8013938:	4618      	mov	r0, r3
 801393a:	3708      	adds	r7, #8
 801393c:	46bd      	mov	sp, r7
 801393e:	bd80      	pop	{r7, pc}

08013940 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8013940:	b480      	push	{r7}
 8013942:	b083      	sub	sp, #12
 8013944:	af00      	add	r7, sp, #0
 8013946:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	2220      	movs	r2, #32
 801394c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 801394e:	4b03      	ldr	r3, [pc, #12]	; (801395c <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8013950:	4618      	mov	r0, r3
 8013952:	370c      	adds	r7, #12
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	24000058 	.word	0x24000058

08013960 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8013960:	b480      	push	{r7}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2220      	movs	r2, #32
 801396c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 801396e:	4b03      	ldr	r3, [pc, #12]	; (801397c <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8013970:	4618      	mov	r0, r3
 8013972:	370c      	adds	r7, #12
 8013974:	46bd      	mov	sp, r7
 8013976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801397a:	4770      	bx	lr
 801397c:	24000078 	.word	0x24000078

08013980 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013980:	b480      	push	{r7}
 8013982:	b083      	sub	sp, #12
 8013984:	af00      	add	r7, sp, #0
 8013986:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	2220      	movs	r2, #32
 801398c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801398e:	4b03      	ldr	r3, [pc, #12]	; (801399c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8013990:	4618      	mov	r0, r3
 8013992:	370c      	adds	r7, #12
 8013994:	46bd      	mov	sp, r7
 8013996:	f85d 7b04 	ldr.w	r7, [sp], #4
 801399a:	4770      	bx	lr
 801399c:	24000098 	.word	0x24000098

080139a0 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80139a0:	b480      	push	{r7}
 80139a2:	b083      	sub	sp, #12
 80139a4:	af00      	add	r7, sp, #0
 80139a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	220a      	movs	r2, #10
 80139ac:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 80139ae:	4b03      	ldr	r3, [pc, #12]	; (80139bc <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 80139b0:	4618      	mov	r0, r3
 80139b2:	370c      	adds	r7, #12
 80139b4:	46bd      	mov	sp, r7
 80139b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ba:	4770      	bx	lr
 80139bc:	240000b8 	.word	0x240000b8

080139c0 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 80139c0:	b480      	push	{r7}
 80139c2:	b083      	sub	sp, #12
 80139c4:	af00      	add	r7, sp, #0
 80139c6:	6078      	str	r0, [r7, #4]
 80139c8:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80139ca:	683b      	ldr	r3, [r7, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d101      	bne.n	80139d4 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80139d0:	2303      	movs	r3, #3
 80139d2:	e004      	b.n	80139de <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 80139d4:	687b      	ldr	r3, [r7, #4]
 80139d6:	683a      	ldr	r2, [r7, #0]
 80139d8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80139dc:	2300      	movs	r3, #0
}
 80139de:	4618      	mov	r0, r3
 80139e0:	370c      	adds	r7, #12
 80139e2:	46bd      	mov	sp, r7
 80139e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139e8:	4770      	bx	lr

080139ea <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 80139ea:	b580      	push	{r7, lr}
 80139ec:	b084      	sub	sp, #16
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80139f8:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	2200      	movs	r2, #0
 80139fe:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	2200      	movs	r2, #0
 8013a04:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8013a06:	68fa      	ldr	r2, [r7, #12]
 8013a08:	f248 0361 	movw	r3, #32865	; 0x8061
 8013a0c:	4413      	add	r3, r2
 8013a0e:	2200      	movs	r2, #0
 8013a10:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8013a12:	68fa      	ldr	r2, [r7, #12]
 8013a14:	f248 0360 	movw	r3, #32864	; 0x8060
 8013a18:	4413      	add	r3, r2
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8013a1e:	68fa      	ldr	r2, [r7, #12]
 8013a20:	f248 0362 	movw	r3, #32866	; 0x8062
 8013a24:	4413      	add	r3, r2
 8013a26:	2200      	movs	r2, #0
 8013a28:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8013a30:	681b      	ldr	r3, [r3, #0]
 8013a32:	2000      	movs	r0, #0
 8013a34:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 8013a36:	2101      	movs	r1, #1
 8013a38:	6878      	ldr	r0, [r7, #4]
 8013a3a:	f005 fb85 	bl	8019148 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 8013a3e:	2181      	movs	r1, #129	; 0x81
 8013a40:	6878      	ldr	r0, [r7, #4]
 8013a42:	f005 fb81 	bl	8019148 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	f248 0210 	movw	r2, #32784	; 0x8010
 8013a4c:	441a      	add	r2, r3
 8013a4e:	231f      	movs	r3, #31
 8013a50:	2101      	movs	r1, #1
 8013a52:	6878      	ldr	r0, [r7, #4]
 8013a54:	f005 fc41 	bl	80192da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013a58:	bf00      	nop
 8013a5a:	3710      	adds	r7, #16
 8013a5c:	46bd      	mov	sp, r7
 8013a5e:	bd80      	pop	{r7, pc}

08013a60 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 8013a60:	b580      	push	{r7, lr}
 8013a62:	b084      	sub	sp, #16
 8013a64:	af00      	add	r7, sp, #0
 8013a66:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013a68:	687b      	ldr	r3, [r7, #4]
 8013a6a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013a6e:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 8013a70:	68fb      	ldr	r3, [r7, #12]
 8013a72:	2200      	movs	r2, #0
 8013a74:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8013a76:	68fb      	ldr	r3, [r7, #12]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 8013a7c:	2181      	movs	r1, #129	; 0x81
 8013a7e:	6878      	ldr	r0, [r7, #4]
 8013a80:	f005 fba0 	bl	80191c4 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8013a84:	2101      	movs	r1, #1
 8013a86:	6878      	ldr	r0, [r7, #4]
 8013a88:	f005 fb9c 	bl	80191c4 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	f248 0210 	movw	r2, #32784	; 0x8010
 8013a92:	441a      	add	r2, r3
 8013a94:	231f      	movs	r3, #31
 8013a96:	2101      	movs	r1, #1
 8013a98:	6878      	ldr	r0, [r7, #4]
 8013a9a:	f005 fc1e 	bl	80192da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013a9e:	bf00      	nop
 8013aa0:	3710      	adds	r7, #16
 8013aa2:	46bd      	mov	sp, r7
 8013aa4:	bd80      	pop	{r7, pc}

08013aa6 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8013aa6:	b480      	push	{r7}
 8013aa8:	b085      	sub	sp, #20
 8013aaa:	af00      	add	r7, sp, #0
 8013aac:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013aae:	687b      	ldr	r3, [r7, #4]
 8013ab0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ab4:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	721a      	strb	r2, [r3, #8]
}
 8013abc:	bf00      	nop
 8013abe:	3714      	adds	r7, #20
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ac6:	4770      	bx	lr

08013ac8 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013ac8:	b580      	push	{r7, lr}
 8013aca:	b084      	sub	sp, #16
 8013acc:	af00      	add	r7, sp, #0
 8013ace:	6078      	str	r0, [r7, #4]
 8013ad0:	460b      	mov	r3, r1
 8013ad2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ada:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	7a1b      	ldrb	r3, [r3, #8]
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	d004      	beq.n	8013aee <MSC_BOT_DataIn+0x26>
 8013ae4:	2b02      	cmp	r3, #2
 8013ae6:	db1c      	blt.n	8013b22 <MSC_BOT_DataIn+0x5a>
 8013ae8:	2b04      	cmp	r3, #4
 8013aea:	dc1a      	bgt.n	8013b22 <MSC_BOT_DataIn+0x5a>
 8013aec:	e014      	b.n	8013b18 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013aee:	68fa      	ldr	r2, [r7, #12]
 8013af0:	f248 031d 	movw	r3, #32797	; 0x801d
 8013af4:	4413      	add	r3, r2
 8013af6:	7819      	ldrb	r1, [r3, #0]
 8013af8:	68fa      	ldr	r2, [r7, #12]
 8013afa:	f248 031f 	movw	r3, #32799	; 0x801f
 8013afe:	4413      	add	r3, r2
 8013b00:	461a      	mov	r2, r3
 8013b02:	6878      	ldr	r0, [r7, #4]
 8013b04:	f000 f99e 	bl	8013e44 <SCSI_ProcessCmd>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	da0b      	bge.n	8013b26 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b0e:	2101      	movs	r1, #1
 8013b10:	6878      	ldr	r0, [r7, #4]
 8013b12:	f000 f90b 	bl	8013d2c <MSC_BOT_SendCSW>
    }
    break;
 8013b16:	e006      	b.n	8013b26 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013b18:	2100      	movs	r1, #0
 8013b1a:	6878      	ldr	r0, [r7, #4]
 8013b1c:	f000 f906 	bl	8013d2c <MSC_BOT_SendCSW>
    break;
 8013b20:	e002      	b.n	8013b28 <MSC_BOT_DataIn+0x60>

  default:
    break;
 8013b22:	bf00      	nop
 8013b24:	e000      	b.n	8013b28 <MSC_BOT_DataIn+0x60>
    break;
 8013b26:	bf00      	nop
  }
}
 8013b28:	bf00      	nop
 8013b2a:	3710      	adds	r7, #16
 8013b2c:	46bd      	mov	sp, r7
 8013b2e:	bd80      	pop	{r7, pc}

08013b30 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
 8013b38:	460b      	mov	r3, r1
 8013b3a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b42:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	7a1b      	ldrb	r3, [r3, #8]
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	d002      	beq.n	8013b52 <MSC_BOT_DataOut+0x22>
 8013b4c:	2b01      	cmp	r3, #1
 8013b4e:	d004      	beq.n	8013b5a <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 8013b50:	e018      	b.n	8013b84 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 8013b52:	6878      	ldr	r0, [r7, #4]
 8013b54:	f000 f81a 	bl	8013b8c <MSC_BOT_CBW_Decode>
      break;
 8013b58:	e014      	b.n	8013b84 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013b5a:	68fa      	ldr	r2, [r7, #12]
 8013b5c:	f248 031d 	movw	r3, #32797	; 0x801d
 8013b60:	4413      	add	r3, r2
 8013b62:	7819      	ldrb	r1, [r3, #0]
 8013b64:	68fa      	ldr	r2, [r7, #12]
 8013b66:	f248 031f 	movw	r3, #32799	; 0x801f
 8013b6a:	4413      	add	r3, r2
 8013b6c:	461a      	mov	r2, r3
 8013b6e:	6878      	ldr	r0, [r7, #4]
 8013b70:	f000 f968 	bl	8013e44 <SCSI_ProcessCmd>
 8013b74:	4603      	mov	r3, r0
 8013b76:	2b00      	cmp	r3, #0
 8013b78:	da03      	bge.n	8013b82 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013b7a:	2101      	movs	r1, #1
 8013b7c:	6878      	ldr	r0, [r7, #4]
 8013b7e:	f000 f8d5 	bl	8013d2c <MSC_BOT_SendCSW>
      break;
 8013b82:	bf00      	nop
  }
}
 8013b84:	bf00      	nop
 8013b86:	3710      	adds	r7, #16
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b084      	sub	sp, #16
 8013b90:	af00      	add	r7, sp, #0
 8013b92:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013b9a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 8013b9c:	68fa      	ldr	r2, [r7, #12]
 8013b9e:	f248 0314 	movw	r3, #32788	; 0x8014
 8013ba2:	4413      	add	r3, r2
 8013ba4:	681a      	ldr	r2, [r3, #0]
 8013ba6:	68f9      	ldr	r1, [r7, #12]
 8013ba8:	f248 0334 	movw	r3, #32820	; 0x8034
 8013bac:	440b      	add	r3, r1
 8013bae:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8013bb0:	68fa      	ldr	r2, [r7, #12]
 8013bb2:	f248 0318 	movw	r3, #32792	; 0x8018
 8013bb6:	4413      	add	r3, r2
 8013bb8:	681a      	ldr	r2, [r3, #0]
 8013bba:	68f9      	ldr	r1, [r7, #12]
 8013bbc:	f248 0338 	movw	r3, #32824	; 0x8038
 8013bc0:	440b      	add	r3, r1
 8013bc2:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013bc4:	2101      	movs	r1, #1
 8013bc6:	6878      	ldr	r0, [r7, #4]
 8013bc8:	f005 fba8 	bl	801931c <USBD_LL_GetRxDataSize>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b1f      	cmp	r3, #31
 8013bd0:	d11c      	bne.n	8013c0c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	f248 0310 	movw	r3, #32784	; 0x8010
 8013bd8:	4413      	add	r3, r2
 8013bda:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8013bdc:	4a38      	ldr	r2, [pc, #224]	; (8013cc0 <MSC_BOT_CBW_Decode+0x134>)
 8013bde:	4293      	cmp	r3, r2
 8013be0:	d114      	bne.n	8013c0c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013be2:	68fa      	ldr	r2, [r7, #12]
 8013be4:	f248 031d 	movw	r3, #32797	; 0x801d
 8013be8:	4413      	add	r3, r2
 8013bea:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8013bec:	2b01      	cmp	r3, #1
 8013bee:	d80d      	bhi.n	8013c0c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013bf0:	68fa      	ldr	r2, [r7, #12]
 8013bf2:	f248 031e 	movw	r3, #32798	; 0x801e
 8013bf6:	4413      	add	r3, r2
 8013bf8:	781b      	ldrb	r3, [r3, #0]
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d006      	beq.n	8013c0c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 8013bfe:	68fa      	ldr	r2, [r7, #12]
 8013c00:	f248 031e 	movw	r3, #32798	; 0x801e
 8013c04:	4413      	add	r3, r2
 8013c06:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8013c08:	2b10      	cmp	r3, #16
 8013c0a:	d910      	bls.n	8013c2e <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8013c0c:	68fa      	ldr	r2, [r7, #12]
 8013c0e:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c12:	4413      	add	r3, r2
 8013c14:	7819      	ldrb	r1, [r3, #0]
 8013c16:	2320      	movs	r3, #32
 8013c18:	2205      	movs	r2, #5
 8013c1a:	6878      	ldr	r0, [r7, #4]
 8013c1c:	f000 fd36 	bl	801468c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013c20:	68fb      	ldr	r3, [r7, #12]
 8013c22:	2202      	movs	r2, #2
 8013c24:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 8013c26:	6878      	ldr	r0, [r7, #4]
 8013c28:	f000 f8b2 	bl	8013d90 <MSC_BOT_Abort>
 8013c2c:	e044      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8013c2e:	68fa      	ldr	r2, [r7, #12]
 8013c30:	f248 031d 	movw	r3, #32797	; 0x801d
 8013c34:	4413      	add	r3, r2
 8013c36:	7819      	ldrb	r1, [r3, #0]
 8013c38:	68fa      	ldr	r2, [r7, #12]
 8013c3a:	f248 031f 	movw	r3, #32799	; 0x801f
 8013c3e:	4413      	add	r3, r2
 8013c40:	461a      	mov	r2, r3
 8013c42:	6878      	ldr	r0, [r7, #4]
 8013c44:	f000 f8fe 	bl	8013e44 <SCSI_ProcessCmd>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	da0c      	bge.n	8013c68 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 8013c4e:	68fb      	ldr	r3, [r7, #12]
 8013c50:	7a1b      	ldrb	r3, [r3, #8]
 8013c52:	2b05      	cmp	r3, #5
 8013c54:	d104      	bne.n	8013c60 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013c56:	2101      	movs	r1, #1
 8013c58:	6878      	ldr	r0, [r7, #4]
 8013c5a:	f000 f867 	bl	8013d2c <MSC_BOT_SendCSW>
 8013c5e:	e02b      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013c60:	6878      	ldr	r0, [r7, #4]
 8013c62:	f000 f895 	bl	8013d90 <MSC_BOT_Abort>
 8013c66:	e027      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013c68:	68fb      	ldr	r3, [r7, #12]
 8013c6a:	7a1b      	ldrb	r3, [r3, #8]
 8013c6c:	2b02      	cmp	r3, #2
 8013c6e:	d022      	beq.n	8013cb6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013c70:	68fb      	ldr	r3, [r7, #12]
 8013c72:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 8013c74:	2b01      	cmp	r3, #1
 8013c76:	d01e      	beq.n	8013cb6 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 8013c78:	68fb      	ldr	r3, [r7, #12]
 8013c7a:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 8013c7c:	2b03      	cmp	r3, #3
 8013c7e:	d01a      	beq.n	8013cb6 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8013c80:	68fb      	ldr	r3, [r7, #12]
 8013c82:	68db      	ldr	r3, [r3, #12]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d009      	beq.n	8013c9c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8013c88:	68fb      	ldr	r3, [r7, #12]
 8013c8a:	f103 0110 	add.w	r1, r3, #16
 8013c8e:	68fb      	ldr	r3, [r7, #12]
 8013c90:	68db      	ldr	r3, [r3, #12]
 8013c92:	461a      	mov	r2, r3
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f000 f815 	bl	8013cc4 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8013c9a:	e00d      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	68db      	ldr	r3, [r3, #12]
 8013ca0:	2b00      	cmp	r3, #0
 8013ca2:	d104      	bne.n	8013cae <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8013ca4:	2100      	movs	r1, #0
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f000 f840 	bl	8013d2c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8013cac:	e004      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8013cae:	6878      	ldr	r0, [r7, #4]
 8013cb0:	f000 f86e 	bl	8013d90 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8013cb4:	e000      	b.n	8013cb8 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8013cb6:	bf00      	nop
    }
  }
}
 8013cb8:	3710      	adds	r7, #16
 8013cba:	46bd      	mov	sp, r7
 8013cbc:	bd80      	pop	{r7, pc}
 8013cbe:	bf00      	nop
 8013cc0:	43425355 	.word	0x43425355

08013cc4 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b086      	sub	sp, #24
 8013cc8:	af00      	add	r7, sp, #0
 8013cca:	60f8      	str	r0, [r7, #12]
 8013ccc:	60b9      	str	r1, [r7, #8]
 8013cce:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013cd0:	68fb      	ldr	r3, [r7, #12]
 8013cd2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013cd6:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8013cd8:	697a      	ldr	r2, [r7, #20]
 8013cda:	f248 0318 	movw	r3, #32792	; 0x8018
 8013cde:	4413      	add	r3, r2
 8013ce0:	681b      	ldr	r3, [r3, #0]
 8013ce2:	687a      	ldr	r2, [r7, #4]
 8013ce4:	4293      	cmp	r3, r2
 8013ce6:	bf28      	it	cs
 8013ce8:	4613      	movcs	r3, r2
 8013cea:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 8013cec:	697a      	ldr	r2, [r7, #20]
 8013cee:	f248 0338 	movw	r3, #32824	; 0x8038
 8013cf2:	4413      	add	r3, r2
 8013cf4:	681a      	ldr	r2, [r3, #0]
 8013cf6:	687b      	ldr	r3, [r7, #4]
 8013cf8:	1ad2      	subs	r2, r2, r3
 8013cfa:	6979      	ldr	r1, [r7, #20]
 8013cfc:	f248 0338 	movw	r3, #32824	; 0x8038
 8013d00:	440b      	add	r3, r1
 8013d02:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8013d04:	697a      	ldr	r2, [r7, #20]
 8013d06:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d0a:	4413      	add	r3, r2
 8013d0c:	2200      	movs	r2, #0
 8013d0e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8013d10:	697b      	ldr	r3, [r7, #20]
 8013d12:	2204      	movs	r2, #4
 8013d14:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8013d16:	693b      	ldr	r3, [r7, #16]
 8013d18:	68ba      	ldr	r2, [r7, #8]
 8013d1a:	2181      	movs	r1, #129	; 0x81
 8013d1c:	68f8      	ldr	r0, [r7, #12]
 8013d1e:	f005 fabb 	bl	8019298 <USBD_LL_Transmit>
}
 8013d22:	bf00      	nop
 8013d24:	3718      	adds	r7, #24
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
	...

08013d2c <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 8013d2c:	b580      	push	{r7, lr}
 8013d2e:	b084      	sub	sp, #16
 8013d30:	af00      	add	r7, sp, #0
 8013d32:	6078      	str	r0, [r7, #4]
 8013d34:	460b      	mov	r3, r1
 8013d36:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d38:	687b      	ldr	r3, [r7, #4]
 8013d3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d3e:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 8013d40:	68fa      	ldr	r2, [r7, #12]
 8013d42:	f248 0330 	movw	r3, #32816	; 0x8030
 8013d46:	4413      	add	r3, r2
 8013d48:	4a10      	ldr	r2, [pc, #64]	; (8013d8c <MSC_BOT_SendCSW+0x60>)
 8013d4a:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 8013d4c:	68fa      	ldr	r2, [r7, #12]
 8013d4e:	f248 033c 	movw	r3, #32828	; 0x803c
 8013d52:	4413      	add	r3, r2
 8013d54:	78fa      	ldrb	r2, [r7, #3]
 8013d56:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 8013d58:	68fb      	ldr	r3, [r7, #12]
 8013d5a:	2200      	movs	r2, #0
 8013d5c:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	f248 0230 	movw	r2, #32816	; 0x8030
 8013d64:	441a      	add	r2, r3
 8013d66:	230d      	movs	r3, #13
 8013d68:	2181      	movs	r1, #129	; 0x81
 8013d6a:	6878      	ldr	r0, [r7, #4]
 8013d6c:	f005 fa94 	bl	8019298 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 8013d70:	68fb      	ldr	r3, [r7, #12]
 8013d72:	f248 0210 	movw	r2, #32784	; 0x8010
 8013d76:	441a      	add	r2, r3
 8013d78:	231f      	movs	r3, #31
 8013d7a:	2101      	movs	r1, #1
 8013d7c:	6878      	ldr	r0, [r7, #4]
 8013d7e:	f005 faac 	bl	80192da <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8013d82:	bf00      	nop
 8013d84:	3710      	adds	r7, #16
 8013d86:	46bd      	mov	sp, r7
 8013d88:	bd80      	pop	{r7, pc}
 8013d8a:	bf00      	nop
 8013d8c:	53425355 	.word	0x53425355

08013d90 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8013d90:	b580      	push	{r7, lr}
 8013d92:	b084      	sub	sp, #16
 8013d94:	af00      	add	r7, sp, #0
 8013d96:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013d98:	687b      	ldr	r3, [r7, #4]
 8013d9a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013d9e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8013da0:	68fa      	ldr	r2, [r7, #12]
 8013da2:	f248 031c 	movw	r3, #32796	; 0x801c
 8013da6:	4413      	add	r3, r2
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	2b00      	cmp	r3, #0
 8013dac:	d10e      	bne.n	8013dcc <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 8013dae:	68fa      	ldr	r2, [r7, #12]
 8013db0:	f248 0318 	movw	r3, #32792	; 0x8018
 8013db4:	4413      	add	r3, r2
 8013db6:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8013db8:	2b00      	cmp	r3, #0
 8013dba:	d007      	beq.n	8013dcc <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8013dbc:	68fb      	ldr	r3, [r7, #12]
 8013dbe:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8013dc0:	2b00      	cmp	r3, #0
 8013dc2:	d103      	bne.n	8013dcc <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013dc4:	2101      	movs	r1, #1
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	f005 f9dd 	bl	8019186 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013dcc:	2181      	movs	r1, #129	; 0x81
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f005 f9d9 	bl	8019186 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8013dd4:	68fb      	ldr	r3, [r7, #12]
 8013dd6:	7a5b      	ldrb	r3, [r3, #9]
 8013dd8:	2b02      	cmp	r3, #2
 8013dda:	d107      	bne.n	8013dec <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013ddc:	2181      	movs	r1, #129	; 0x81
 8013dde:	6878      	ldr	r0, [r7, #4]
 8013de0:	f005 f9d1 	bl	8019186 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013de4:	2101      	movs	r1, #1
 8013de6:	6878      	ldr	r0, [r7, #4]
 8013de8:	f005 f9cd 	bl	8019186 <USBD_LL_StallEP>
  }
}
 8013dec:	bf00      	nop
 8013dee:	3710      	adds	r7, #16
 8013df0:	46bd      	mov	sp, r7
 8013df2:	bd80      	pop	{r7, pc}

08013df4 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013df4:	b580      	push	{r7, lr}
 8013df6:	b084      	sub	sp, #16
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
 8013dfc:	460b      	mov	r3, r1
 8013dfe:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e06:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8013e08:	68fb      	ldr	r3, [r7, #12]
 8013e0a:	7a5b      	ldrb	r3, [r3, #9]
 8013e0c:	2b02      	cmp	r3, #2
 8013e0e:	d108      	bne.n	8013e22 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8013e10:	2181      	movs	r1, #129	; 0x81
 8013e12:	6878      	ldr	r0, [r7, #4]
 8013e14:	f005 f9b7 	bl	8019186 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8013e18:	2101      	movs	r1, #1
 8013e1a:	6878      	ldr	r0, [r7, #4]
 8013e1c:	f005 f9b3 	bl	8019186 <USBD_LL_StallEP>
 8013e20:	e00d      	b.n	8013e3e <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 8013e22:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	da08      	bge.n	8013e3c <MSC_BOT_CplClrFeature+0x48>
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	7a5b      	ldrb	r3, [r3, #9]
 8013e2e:	2b01      	cmp	r3, #1
 8013e30:	d004      	beq.n	8013e3c <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8013e32:	2101      	movs	r1, #1
 8013e34:	6878      	ldr	r0, [r7, #4]
 8013e36:	f7ff ff79 	bl	8013d2c <MSC_BOT_SendCSW>
 8013e3a:	e000      	b.n	8013e3e <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 8013e3c:	bf00      	nop
  }
}
 8013e3e:	3710      	adds	r7, #16
 8013e40:	46bd      	mov	sp, r7
 8013e42:	bd80      	pop	{r7, pc}

08013e44 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 8013e44:	b580      	push	{r7, lr}
 8013e46:	b086      	sub	sp, #24
 8013e48:	af00      	add	r7, sp, #0
 8013e4a:	60f8      	str	r0, [r7, #12]
 8013e4c:	460b      	mov	r3, r1
 8013e4e:	607a      	str	r2, [r7, #4]
 8013e50:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013e52:	68fb      	ldr	r3, [r7, #12]
 8013e54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013e58:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	781b      	ldrb	r3, [r3, #0]
 8013e5e:	2b25      	cmp	r3, #37	; 0x25
 8013e60:	d06e      	beq.n	8013f40 <SCSI_ProcessCmd+0xfc>
 8013e62:	2b25      	cmp	r3, #37	; 0x25
 8013e64:	dc11      	bgt.n	8013e8a <SCSI_ProcessCmd+0x46>
 8013e66:	2b1a      	cmp	r3, #26
 8013e68:	d04f      	beq.n	8013f0a <SCSI_ProcessCmd+0xc6>
 8013e6a:	2b1a      	cmp	r3, #26
 8013e6c:	dc06      	bgt.n	8013e7c <SCSI_ProcessCmd+0x38>
 8013e6e:	2b03      	cmp	r3, #3
 8013e70:	d027      	beq.n	8013ec2 <SCSI_ProcessCmd+0x7e>
 8013e72:	2b12      	cmp	r3, #18
 8013e74:	d02e      	beq.n	8013ed4 <SCSI_ProcessCmd+0x90>
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d01a      	beq.n	8013eb0 <SCSI_ProcessCmd+0x6c>
 8013e7a:	e0a0      	b.n	8013fbe <SCSI_ProcessCmd+0x17a>
 8013e7c:	2b1e      	cmp	r3, #30
 8013e7e:	d03b      	beq.n	8013ef8 <SCSI_ProcessCmd+0xb4>
 8013e80:	2b23      	cmp	r3, #35	; 0x23
 8013e82:	d054      	beq.n	8013f2e <SCSI_ProcessCmd+0xea>
 8013e84:	2b1b      	cmp	r3, #27
 8013e86:	d02e      	beq.n	8013ee6 <SCSI_ProcessCmd+0xa2>
 8013e88:	e099      	b.n	8013fbe <SCSI_ProcessCmd+0x17a>
 8013e8a:	2b5a      	cmp	r3, #90	; 0x5a
 8013e8c:	d046      	beq.n	8013f1c <SCSI_ProcessCmd+0xd8>
 8013e8e:	2b5a      	cmp	r3, #90	; 0x5a
 8013e90:	dc07      	bgt.n	8013ea2 <SCSI_ProcessCmd+0x5e>
 8013e92:	2b2a      	cmp	r3, #42	; 0x2a
 8013e94:	d078      	beq.n	8013f88 <SCSI_ProcessCmd+0x144>
 8013e96:	2b2f      	cmp	r3, #47	; 0x2f
 8013e98:	f000 8088 	beq.w	8013fac <SCSI_ProcessCmd+0x168>
 8013e9c:	2b28      	cmp	r3, #40	; 0x28
 8013e9e:	d061      	beq.n	8013f64 <SCSI_ProcessCmd+0x120>
 8013ea0:	e08d      	b.n	8013fbe <SCSI_ProcessCmd+0x17a>
 8013ea2:	2ba8      	cmp	r3, #168	; 0xa8
 8013ea4:	d067      	beq.n	8013f76 <SCSI_ProcessCmd+0x132>
 8013ea6:	2baa      	cmp	r3, #170	; 0xaa
 8013ea8:	d077      	beq.n	8013f9a <SCSI_ProcessCmd+0x156>
 8013eaa:	2b9e      	cmp	r3, #158	; 0x9e
 8013eac:	d051      	beq.n	8013f52 <SCSI_ProcessCmd+0x10e>
 8013eae:	e086      	b.n	8013fbe <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8013eb0:	7afb      	ldrb	r3, [r7, #11]
 8013eb2:	687a      	ldr	r2, [r7, #4]
 8013eb4:	4619      	mov	r1, r3
 8013eb6:	68f8      	ldr	r0, [r7, #12]
 8013eb8:	f000 f893 	bl	8013fe2 <SCSI_TestUnitReady>
 8013ebc:	4603      	mov	r3, r0
 8013ebe:	75fb      	strb	r3, [r7, #23]
    break;
 8013ec0:	e089      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8013ec2:	7afb      	ldrb	r3, [r7, #11]
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	4619      	mov	r1, r3
 8013ec8:	68f8      	ldr	r0, [r7, #12]
 8013eca:	f000 fb47 	bl	801455c <SCSI_RequestSense>
 8013ece:	4603      	mov	r3, r0
 8013ed0:	75fb      	strb	r3, [r7, #23]
    break;
 8013ed2:	e080      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8013ed4:	7afb      	ldrb	r3, [r7, #11]
 8013ed6:	687a      	ldr	r2, [r7, #4]
 8013ed8:	4619      	mov	r1, r3
 8013eda:	68f8      	ldr	r0, [r7, #12]
 8013edc:	f000 f8d2 	bl	8014084 <SCSI_Inquiry>
 8013ee0:	4603      	mov	r3, r0
 8013ee2:	75fb      	strb	r3, [r7, #23]
    break;
 8013ee4:	e077      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8013ee6:	7afb      	ldrb	r3, [r7, #11]
 8013ee8:	687a      	ldr	r2, [r7, #4]
 8013eea:	4619      	mov	r1, r3
 8013eec:	68f8      	ldr	r0, [r7, #12]
 8013eee:	f000 fc27 	bl	8014740 <SCSI_StartStopUnit>
 8013ef2:	4603      	mov	r3, r0
 8013ef4:	75fb      	strb	r3, [r7, #23]
    break;
 8013ef6:	e06e      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8013ef8:	7afb      	ldrb	r3, [r7, #11]
 8013efa:	687a      	ldr	r2, [r7, #4]
 8013efc:	4619      	mov	r1, r3
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	f000 fc71 	bl	80147e6 <SCSI_AllowPreventRemovable>
 8013f04:	4603      	mov	r3, r0
 8013f06:	75fb      	strb	r3, [r7, #23]
    break;
 8013f08:	e065      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 8013f0a:	7afb      	ldrb	r3, [r7, #11]
 8013f0c:	687a      	ldr	r2, [r7, #4]
 8013f0e:	4619      	mov	r1, r3
 8013f10:	68f8      	ldr	r0, [r7, #12]
 8013f12:	f000 fad7 	bl	80144c4 <SCSI_ModeSense6>
 8013f16:	4603      	mov	r3, r0
 8013f18:	75fb      	strb	r3, [r7, #23]
    break;
 8013f1a:	e05c      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 8013f1c:	7afb      	ldrb	r3, [r7, #11]
 8013f1e:	687a      	ldr	r2, [r7, #4]
 8013f20:	4619      	mov	r1, r3
 8013f22:	68f8      	ldr	r0, [r7, #12]
 8013f24:	f000 faf4 	bl	8014510 <SCSI_ModeSense10>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	75fb      	strb	r3, [r7, #23]
    break;
 8013f2c:	e053      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 8013f2e:	7afb      	ldrb	r3, [r7, #11]
 8013f30:	687a      	ldr	r2, [r7, #4]
 8013f32:	4619      	mov	r1, r3
 8013f34:	68f8      	ldr	r0, [r7, #12]
 8013f36:	f000 fa56 	bl	80143e6 <SCSI_ReadFormatCapacity>
 8013f3a:	4603      	mov	r3, r0
 8013f3c:	75fb      	strb	r3, [r7, #23]
    break;
 8013f3e:	e04a      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 8013f40:	7afb      	ldrb	r3, [r7, #11]
 8013f42:	687a      	ldr	r2, [r7, #4]
 8013f44:	4619      	mov	r1, r3
 8013f46:	68f8      	ldr	r0, [r7, #12]
 8013f48:	f000 f910 	bl	801416c <SCSI_ReadCapacity10>
 8013f4c:	4603      	mov	r3, r0
 8013f4e:	75fb      	strb	r3, [r7, #23]
    break;
 8013f50:	e041      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 8013f52:	7afb      	ldrb	r3, [r7, #11]
 8013f54:	687a      	ldr	r2, [r7, #4]
 8013f56:	4619      	mov	r1, r3
 8013f58:	68f8      	ldr	r0, [r7, #12]
 8013f5a:	f000 f98b 	bl	8014274 <SCSI_ReadCapacity16>
 8013f5e:	4603      	mov	r3, r0
 8013f60:	75fb      	strb	r3, [r7, #23]
    break;
 8013f62:	e038      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 8013f64:	7afb      	ldrb	r3, [r7, #11]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	4619      	mov	r1, r3
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f000 fc62 	bl	8014834 <SCSI_Read10>
 8013f70:	4603      	mov	r3, r0
 8013f72:	75fb      	strb	r3, [r7, #23]
    break;
 8013f74:	e02f      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 8013f76:	7afb      	ldrb	r3, [r7, #11]
 8013f78:	687a      	ldr	r2, [r7, #4]
 8013f7a:	4619      	mov	r1, r3
 8013f7c:	68f8      	ldr	r0, [r7, #12]
 8013f7e:	f000 fd0b 	bl	8014998 <SCSI_Read12>
 8013f82:	4603      	mov	r3, r0
 8013f84:	75fb      	strb	r3, [r7, #23]
    break;
 8013f86:	e026      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8013f88:	7afb      	ldrb	r3, [r7, #11]
 8013f8a:	687a      	ldr	r2, [r7, #4]
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	68f8      	ldr	r0, [r7, #12]
 8013f90:	f000 fdbe 	bl	8014b10 <SCSI_Write10>
 8013f94:	4603      	mov	r3, r0
 8013f96:	75fb      	strb	r3, [r7, #23]
    break;
 8013f98:	e01d      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 8013f9a:	7afb      	ldrb	r3, [r7, #11]
 8013f9c:	687a      	ldr	r2, [r7, #4]
 8013f9e:	4619      	mov	r1, r3
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f000 fe8d 	bl	8014cc0 <SCSI_Write12>
 8013fa6:	4603      	mov	r3, r0
 8013fa8:	75fb      	strb	r3, [r7, #23]
    break;
 8013faa:	e014      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 8013fac:	7afb      	ldrb	r3, [r7, #11]
 8013fae:	687a      	ldr	r2, [r7, #4]
 8013fb0:	4619      	mov	r1, r3
 8013fb2:	68f8      	ldr	r0, [r7, #12]
 8013fb4:	f000 ff6c 	bl	8014e90 <SCSI_Verify10>
 8013fb8:	4603      	mov	r3, r0
 8013fba:	75fb      	strb	r3, [r7, #23]
    break;
 8013fbc:	e00b      	b.n	8013fd6 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 8013fbe:	7af9      	ldrb	r1, [r7, #11]
 8013fc0:	2320      	movs	r3, #32
 8013fc2:	2205      	movs	r2, #5
 8013fc4:	68f8      	ldr	r0, [r7, #12]
 8013fc6:	f000 fb61 	bl	801468c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 8013fca:	693b      	ldr	r3, [r7, #16]
 8013fcc:	2202      	movs	r2, #2
 8013fce:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8013fd0:	23ff      	movs	r3, #255	; 0xff
 8013fd2:	75fb      	strb	r3, [r7, #23]
    break;
 8013fd4:	bf00      	nop
  }

  return ret;
 8013fd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013fda:	4618      	mov	r0, r3
 8013fdc:	3718      	adds	r7, #24
 8013fde:	46bd      	mov	sp, r7
 8013fe0:	bd80      	pop	{r7, pc}

08013fe2 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8013fe2:	b580      	push	{r7, lr}
 8013fe4:	b086      	sub	sp, #24
 8013fe6:	af00      	add	r7, sp, #0
 8013fe8:	60f8      	str	r0, [r7, #12]
 8013fea:	460b      	mov	r3, r1
 8013fec:	607a      	str	r2, [r7, #4]
 8013fee:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013ff0:	68fb      	ldr	r3, [r7, #12]
 8013ff2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013ff6:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8013ff8:	697a      	ldr	r2, [r7, #20]
 8013ffa:	f248 0318 	movw	r3, #32792	; 0x8018
 8013ffe:	4413      	add	r3, r2
 8014000:	681b      	ldr	r3, [r3, #0]
 8014002:	2b00      	cmp	r3, #0
 8014004:	d00c      	beq.n	8014020 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014006:	697a      	ldr	r2, [r7, #20]
 8014008:	f248 031d 	movw	r3, #32797	; 0x801d
 801400c:	4413      	add	r3, r2
 801400e:	7819      	ldrb	r1, [r3, #0]
 8014010:	2320      	movs	r3, #32
 8014012:	2205      	movs	r2, #5
 8014014:	68f8      	ldr	r0, [r7, #12]
 8014016:	f000 fb39 	bl	801468c <SCSI_SenseCode>

    return -1;
 801401a:	f04f 33ff 	mov.w	r3, #4294967295
 801401e:	e02c      	b.n	801407a <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8014020:	697a      	ldr	r2, [r7, #20]
 8014022:	f248 0362 	movw	r3, #32866	; 0x8062
 8014026:	4413      	add	r3, r2
 8014028:	781b      	ldrb	r3, [r3, #0]
 801402a:	2b02      	cmp	r3, #2
 801402c:	d10b      	bne.n	8014046 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801402e:	7af9      	ldrb	r1, [r7, #11]
 8014030:	233a      	movs	r3, #58	; 0x3a
 8014032:	2202      	movs	r2, #2
 8014034:	68f8      	ldr	r0, [r7, #12]
 8014036:	f000 fb29 	bl	801468c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 801403a:	697b      	ldr	r3, [r7, #20]
 801403c:	2205      	movs	r2, #5
 801403e:	721a      	strb	r2, [r3, #8]
    return -1;
 8014040:	f04f 33ff 	mov.w	r3, #4294967295
 8014044:	e019      	b.n	801407a <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014046:	68fb      	ldr	r3, [r7, #12]
 8014048:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801404c:	689b      	ldr	r3, [r3, #8]
 801404e:	7afa      	ldrb	r2, [r7, #11]
 8014050:	4610      	mov	r0, r2
 8014052:	4798      	blx	r3
 8014054:	4603      	mov	r3, r0
 8014056:	2b00      	cmp	r3, #0
 8014058:	d00b      	beq.n	8014072 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801405a:	7af9      	ldrb	r1, [r7, #11]
 801405c:	233a      	movs	r3, #58	; 0x3a
 801405e:	2202      	movs	r2, #2
 8014060:	68f8      	ldr	r0, [r7, #12]
 8014062:	f000 fb13 	bl	801468c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	2205      	movs	r2, #5
 801406a:	721a      	strb	r2, [r3, #8]

    return -1;
 801406c:	f04f 33ff 	mov.w	r3, #4294967295
 8014070:	e003      	b.n	801407a <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	2200      	movs	r2, #0
 8014076:	60da      	str	r2, [r3, #12]

  return 0;
 8014078:	2300      	movs	r3, #0
}
 801407a:	4618      	mov	r0, r3
 801407c:	3718      	adds	r7, #24
 801407e:	46bd      	mov	sp, r7
 8014080:	bd80      	pop	{r7, pc}
	...

08014084 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014084:	b580      	push	{r7, lr}
 8014086:	b088      	sub	sp, #32
 8014088:	af00      	add	r7, sp, #0
 801408a:	60f8      	str	r0, [r7, #12]
 801408c:	460b      	mov	r3, r1
 801408e:	607a      	str	r2, [r7, #4]
 8014090:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014092:	68fb      	ldr	r3, [r7, #12]
 8014094:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014098:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801409a:	69ba      	ldr	r2, [r7, #24]
 801409c:	f248 0318 	movw	r3, #32792	; 0x8018
 80140a0:	4413      	add	r3, r2
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d10c      	bne.n	80140c2 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80140a8:	69ba      	ldr	r2, [r7, #24]
 80140aa:	f248 031d 	movw	r3, #32797	; 0x801d
 80140ae:	4413      	add	r3, r2
 80140b0:	7819      	ldrb	r1, [r3, #0]
 80140b2:	2320      	movs	r3, #32
 80140b4:	2205      	movs	r2, #5
 80140b6:	68f8      	ldr	r0, [r7, #12]
 80140b8:	f000 fae8 	bl	801468c <SCSI_SenseCode>
    return -1;
 80140bc:	f04f 33ff 	mov.w	r3, #4294967295
 80140c0:	e04c      	b.n	801415c <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 80140c2:	687b      	ldr	r3, [r7, #4]
 80140c4:	3301      	adds	r3, #1
 80140c6:	781b      	ldrb	r3, [r3, #0]
 80140c8:	f003 0301 	and.w	r3, r3, #1
 80140cc:	2b00      	cmp	r3, #0
 80140ce:	d022      	beq.n	8014116 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	3302      	adds	r3, #2
 80140d4:	781b      	ldrb	r3, [r3, #0]
 80140d6:	2b00      	cmp	r3, #0
 80140d8:	d105      	bne.n	80140e6 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 80140da:	2206      	movs	r2, #6
 80140dc:	4921      	ldr	r1, [pc, #132]	; (8014164 <SCSI_Inquiry+0xe0>)
 80140de:	69b8      	ldr	r0, [r7, #24]
 80140e0:	f001 f862 	bl	80151a8 <SCSI_UpdateBotData>
 80140e4:	e039      	b.n	801415a <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	3302      	adds	r3, #2
 80140ea:	781b      	ldrb	r3, [r3, #0]
 80140ec:	2b80      	cmp	r3, #128	; 0x80
 80140ee:	d105      	bne.n	80140fc <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 80140f0:	2208      	movs	r2, #8
 80140f2:	491d      	ldr	r1, [pc, #116]	; (8014168 <SCSI_Inquiry+0xe4>)
 80140f4:	69b8      	ldr	r0, [r7, #24]
 80140f6:	f001 f857 	bl	80151a8 <SCSI_UpdateBotData>
 80140fa:	e02e      	b.n	801415a <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 80140fc:	69ba      	ldr	r2, [r7, #24]
 80140fe:	f248 031d 	movw	r3, #32797	; 0x801d
 8014102:	4413      	add	r3, r2
 8014104:	7819      	ldrb	r1, [r3, #0]
 8014106:	2324      	movs	r3, #36	; 0x24
 8014108:	2205      	movs	r2, #5
 801410a:	68f8      	ldr	r0, [r7, #12]
 801410c:	f000 fabe 	bl	801468c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014110:	f04f 33ff 	mov.w	r3, #4294967295
 8014114:	e022      	b.n	801415c <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801411c:	69d9      	ldr	r1, [r3, #28]
 801411e:	7afa      	ldrb	r2, [r7, #11]
 8014120:	4613      	mov	r3, r2
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	4413      	add	r3, r2
 8014126:	009b      	lsls	r3, r3, #2
 8014128:	440b      	add	r3, r1
 801412a:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	3304      	adds	r3, #4
 8014130:	781b      	ldrb	r3, [r3, #0]
 8014132:	b29b      	uxth	r3, r3
 8014134:	3305      	adds	r3, #5
 8014136:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	3304      	adds	r3, #4
 801413c:	781b      	ldrb	r3, [r3, #0]
 801413e:	b29b      	uxth	r3, r3
 8014140:	8bfa      	ldrh	r2, [r7, #30]
 8014142:	429a      	cmp	r2, r3
 8014144:	d303      	bcc.n	801414e <SCSI_Inquiry+0xca>
    {
      len = params[4];
 8014146:	687b      	ldr	r3, [r7, #4]
 8014148:	3304      	adds	r3, #4
 801414a:	781b      	ldrb	r3, [r3, #0]
 801414c:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 801414e:	8bfb      	ldrh	r3, [r7, #30]
 8014150:	461a      	mov	r2, r3
 8014152:	6979      	ldr	r1, [r7, #20]
 8014154:	69b8      	ldr	r0, [r7, #24]
 8014156:	f001 f827 	bl	80151a8 <SCSI_UpdateBotData>
  }

  return 0;
 801415a:	2300      	movs	r3, #0
}
 801415c:	4618      	mov	r0, r3
 801415e:	3720      	adds	r7, #32
 8014160:	46bd      	mov	sp, r7
 8014162:	bd80      	pop	{r7, pc}
 8014164:	240000c4 	.word	0x240000c4
 8014168:	240000cc 	.word	0x240000cc

0801416c <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801416c:	b590      	push	{r4, r7, lr}
 801416e:	b087      	sub	sp, #28
 8014170:	af00      	add	r7, sp, #0
 8014172:	60f8      	str	r0, [r7, #12]
 8014174:	460b      	mov	r3, r1
 8014176:	607a      	str	r2, [r7, #4]
 8014178:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801417a:	68fb      	ldr	r3, [r7, #12]
 801417c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014180:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014188:	685c      	ldr	r4, [r3, #4]
 801418a:	697a      	ldr	r2, [r7, #20]
 801418c:	f248 0368 	movw	r3, #32872	; 0x8068
 8014190:	4413      	add	r3, r2
 8014192:	6979      	ldr	r1, [r7, #20]
 8014194:	f248 0264 	movw	r2, #32868	; 0x8064
 8014198:	440a      	add	r2, r1
 801419a:	7af8      	ldrb	r0, [r7, #11]
 801419c:	4619      	mov	r1, r3
 801419e:	47a0      	blx	r4
 80141a0:	4603      	mov	r3, r0
 80141a2:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80141a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d106      	bne.n	80141ba <SCSI_ReadCapacity10+0x4e>
 80141ac:	697a      	ldr	r2, [r7, #20]
 80141ae:	f248 0362 	movw	r3, #32866	; 0x8062
 80141b2:	4413      	add	r3, r2
 80141b4:	781b      	ldrb	r3, [r3, #0]
 80141b6:	2b02      	cmp	r3, #2
 80141b8:	d108      	bne.n	80141cc <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80141ba:	7af9      	ldrb	r1, [r7, #11]
 80141bc:	233a      	movs	r3, #58	; 0x3a
 80141be:	2202      	movs	r2, #2
 80141c0:	68f8      	ldr	r0, [r7, #12]
 80141c2:	f000 fa63 	bl	801468c <SCSI_SenseCode>
    return -1;
 80141c6:	f04f 33ff 	mov.w	r3, #4294967295
 80141ca:	e04f      	b.n	801426c <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 80141cc:	697a      	ldr	r2, [r7, #20]
 80141ce:	f248 0368 	movw	r3, #32872	; 0x8068
 80141d2:	4413      	add	r3, r2
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	3b01      	subs	r3, #1
 80141d8:	0e1b      	lsrs	r3, r3, #24
 80141da:	b2da      	uxtb	r2, r3
 80141dc:	697b      	ldr	r3, [r7, #20]
 80141de:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 80141e0:	697a      	ldr	r2, [r7, #20]
 80141e2:	f248 0368 	movw	r3, #32872	; 0x8068
 80141e6:	4413      	add	r3, r2
 80141e8:	681b      	ldr	r3, [r3, #0]
 80141ea:	3b01      	subs	r3, #1
 80141ec:	0c1b      	lsrs	r3, r3, #16
 80141ee:	b2da      	uxtb	r2, r3
 80141f0:	697b      	ldr	r3, [r7, #20]
 80141f2:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 80141f4:	697a      	ldr	r2, [r7, #20]
 80141f6:	f248 0368 	movw	r3, #32872	; 0x8068
 80141fa:	4413      	add	r3, r2
 80141fc:	681b      	ldr	r3, [r3, #0]
 80141fe:	3b01      	subs	r3, #1
 8014200:	0a1b      	lsrs	r3, r3, #8
 8014202:	b2da      	uxtb	r2, r3
 8014204:	697b      	ldr	r3, [r7, #20]
 8014206:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014208:	697a      	ldr	r2, [r7, #20]
 801420a:	f248 0368 	movw	r3, #32872	; 0x8068
 801420e:	4413      	add	r3, r2
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	b2db      	uxtb	r3, r3
 8014214:	3b01      	subs	r3, #1
 8014216:	b2da      	uxtb	r2, r3
 8014218:	697b      	ldr	r3, [r7, #20]
 801421a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801421c:	697a      	ldr	r2, [r7, #20]
 801421e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014222:	4413      	add	r3, r2
 8014224:	881b      	ldrh	r3, [r3, #0]
 8014226:	161b      	asrs	r3, r3, #24
 8014228:	b2da      	uxtb	r2, r3
 801422a:	697b      	ldr	r3, [r7, #20]
 801422c:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801422e:	697a      	ldr	r2, [r7, #20]
 8014230:	f248 0364 	movw	r3, #32868	; 0x8064
 8014234:	4413      	add	r3, r2
 8014236:	881b      	ldrh	r3, [r3, #0]
 8014238:	141b      	asrs	r3, r3, #16
 801423a:	b2da      	uxtb	r2, r3
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014240:	697a      	ldr	r2, [r7, #20]
 8014242:	f248 0364 	movw	r3, #32868	; 0x8064
 8014246:	4413      	add	r3, r2
 8014248:	881b      	ldrh	r3, [r3, #0]
 801424a:	0a1b      	lsrs	r3, r3, #8
 801424c:	b29b      	uxth	r3, r3
 801424e:	b2da      	uxtb	r2, r3
 8014250:	697b      	ldr	r3, [r7, #20]
 8014252:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014254:	697a      	ldr	r2, [r7, #20]
 8014256:	f248 0364 	movw	r3, #32868	; 0x8064
 801425a:	4413      	add	r3, r2
 801425c:	881b      	ldrh	r3, [r3, #0]
 801425e:	b2da      	uxtb	r2, r3
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014264:	697b      	ldr	r3, [r7, #20]
 8014266:	2208      	movs	r2, #8
 8014268:	60da      	str	r2, [r3, #12]

  return 0;
 801426a:	2300      	movs	r3, #0

}
 801426c:	4618      	mov	r0, r3
 801426e:	371c      	adds	r7, #28
 8014270:	46bd      	mov	sp, r7
 8014272:	bd90      	pop	{r4, r7, pc}

08014274 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014274:	b590      	push	{r4, r7, lr}
 8014276:	b089      	sub	sp, #36	; 0x24
 8014278:	af00      	add	r7, sp, #0
 801427a:	60f8      	str	r0, [r7, #12]
 801427c:	460b      	mov	r3, r1
 801427e:	607a      	str	r2, [r7, #4]
 8014280:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014282:	68fb      	ldr	r3, [r7, #12]
 8014284:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014288:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 801428a:	68fb      	ldr	r3, [r7, #12]
 801428c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014290:	685c      	ldr	r4, [r3, #4]
 8014292:	69ba      	ldr	r2, [r7, #24]
 8014294:	f248 0368 	movw	r3, #32872	; 0x8068
 8014298:	4413      	add	r3, r2
 801429a:	69b9      	ldr	r1, [r7, #24]
 801429c:	f248 0264 	movw	r2, #32868	; 0x8064
 80142a0:	440a      	add	r2, r1
 80142a2:	7af8      	ldrb	r0, [r7, #11]
 80142a4:	4619      	mov	r1, r3
 80142a6:	47a0      	blx	r4
 80142a8:	4603      	mov	r3, r0
 80142aa:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 80142ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80142b0:	2b00      	cmp	r3, #0
 80142b2:	d106      	bne.n	80142c2 <SCSI_ReadCapacity16+0x4e>
 80142b4:	69ba      	ldr	r2, [r7, #24]
 80142b6:	f248 0362 	movw	r3, #32866	; 0x8062
 80142ba:	4413      	add	r3, r2
 80142bc:	781b      	ldrb	r3, [r3, #0]
 80142be:	2b02      	cmp	r3, #2
 80142c0:	d108      	bne.n	80142d4 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80142c2:	7af9      	ldrb	r1, [r7, #11]
 80142c4:	233a      	movs	r3, #58	; 0x3a
 80142c6:	2202      	movs	r2, #2
 80142c8:	68f8      	ldr	r0, [r7, #12]
 80142ca:	f000 f9df 	bl	801468c <SCSI_SenseCode>
    return -1;
 80142ce:	f04f 33ff 	mov.w	r3, #4294967295
 80142d2:	e084      	b.n	80143de <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142d4:	687b      	ldr	r3, [r7, #4]
 80142d6:	330a      	adds	r3, #10
 80142d8:	781b      	ldrb	r3, [r3, #0]
 80142da:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	330b      	adds	r3, #11
 80142e0:	781b      	ldrb	r3, [r3, #0]
 80142e2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142e4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80142e6:	687b      	ldr	r3, [r7, #4]
 80142e8:	330c      	adds	r3, #12
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80142ee:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80142f0:	687a      	ldr	r2, [r7, #4]
 80142f2:	320d      	adds	r2, #13
 80142f4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80142f6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80142f8:	69bb      	ldr	r3, [r7, #24]
 80142fa:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 80142fc:	2300      	movs	r3, #0
 80142fe:	77fb      	strb	r3, [r7, #31]
 8014300:	e007      	b.n	8014312 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014302:	7ffb      	ldrb	r3, [r7, #31]
 8014304:	69ba      	ldr	r2, [r7, #24]
 8014306:	4413      	add	r3, r2
 8014308:	2200      	movs	r2, #0
 801430a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 801430c:	7ffb      	ldrb	r3, [r7, #31]
 801430e:	3301      	adds	r3, #1
 8014310:	77fb      	strb	r3, [r7, #31]
 8014312:	7ffa      	ldrb	r2, [r7, #31]
 8014314:	69bb      	ldr	r3, [r7, #24]
 8014316:	68db      	ldr	r3, [r3, #12]
 8014318:	429a      	cmp	r2, r3
 801431a:	d3f2      	bcc.n	8014302 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 801431c:	69ba      	ldr	r2, [r7, #24]
 801431e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014322:	4413      	add	r3, r2
 8014324:	681b      	ldr	r3, [r3, #0]
 8014326:	3b01      	subs	r3, #1
 8014328:	0e1b      	lsrs	r3, r3, #24
 801432a:	b2da      	uxtb	r2, r3
 801432c:	69bb      	ldr	r3, [r7, #24]
 801432e:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014330:	69ba      	ldr	r2, [r7, #24]
 8014332:	f248 0368 	movw	r3, #32872	; 0x8068
 8014336:	4413      	add	r3, r2
 8014338:	681b      	ldr	r3, [r3, #0]
 801433a:	3b01      	subs	r3, #1
 801433c:	0c1b      	lsrs	r3, r3, #16
 801433e:	b2da      	uxtb	r2, r3
 8014340:	69bb      	ldr	r3, [r7, #24]
 8014342:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014344:	69ba      	ldr	r2, [r7, #24]
 8014346:	f248 0368 	movw	r3, #32872	; 0x8068
 801434a:	4413      	add	r3, r2
 801434c:	681b      	ldr	r3, [r3, #0]
 801434e:	3b01      	subs	r3, #1
 8014350:	0a1b      	lsrs	r3, r3, #8
 8014352:	b2da      	uxtb	r2, r3
 8014354:	69bb      	ldr	r3, [r7, #24]
 8014356:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014358:	69ba      	ldr	r2, [r7, #24]
 801435a:	f248 0368 	movw	r3, #32872	; 0x8068
 801435e:	4413      	add	r3, r2
 8014360:	681b      	ldr	r3, [r3, #0]
 8014362:	b2db      	uxtb	r3, r3
 8014364:	3b01      	subs	r3, #1
 8014366:	b2da      	uxtb	r2, r3
 8014368:	69bb      	ldr	r3, [r7, #24]
 801436a:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 801436c:	69ba      	ldr	r2, [r7, #24]
 801436e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014372:	4413      	add	r3, r2
 8014374:	881b      	ldrh	r3, [r3, #0]
 8014376:	161b      	asrs	r3, r3, #24
 8014378:	b2da      	uxtb	r2, r3
 801437a:	69bb      	ldr	r3, [r7, #24]
 801437c:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 801437e:	69ba      	ldr	r2, [r7, #24]
 8014380:	f248 0364 	movw	r3, #32868	; 0x8064
 8014384:	4413      	add	r3, r2
 8014386:	881b      	ldrh	r3, [r3, #0]
 8014388:	141b      	asrs	r3, r3, #16
 801438a:	b2da      	uxtb	r2, r3
 801438c:	69bb      	ldr	r3, [r7, #24]
 801438e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014390:	69ba      	ldr	r2, [r7, #24]
 8014392:	f248 0364 	movw	r3, #32868	; 0x8064
 8014396:	4413      	add	r3, r2
 8014398:	881b      	ldrh	r3, [r3, #0]
 801439a:	0a1b      	lsrs	r3, r3, #8
 801439c:	b29b      	uxth	r3, r3
 801439e:	b2da      	uxtb	r2, r3
 80143a0:	69bb      	ldr	r3, [r7, #24]
 80143a2:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 80143a4:	69ba      	ldr	r2, [r7, #24]
 80143a6:	f248 0364 	movw	r3, #32868	; 0x8064
 80143aa:	4413      	add	r3, r2
 80143ac:	881b      	ldrh	r3, [r3, #0]
 80143ae:	b2da      	uxtb	r2, r3
 80143b0:	69bb      	ldr	r3, [r7, #24]
 80143b2:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143b4:	687b      	ldr	r3, [r7, #4]
 80143b6:	330a      	adds	r3, #10
 80143b8:	781b      	ldrb	r3, [r3, #0]
 80143ba:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	330b      	adds	r3, #11
 80143c0:	781b      	ldrb	r3, [r3, #0]
 80143c2:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143c4:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 80143c6:	687b      	ldr	r3, [r7, #4]
 80143c8:	330c      	adds	r3, #12
 80143ca:	781b      	ldrb	r3, [r3, #0]
 80143cc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 80143ce:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 80143d0:	687a      	ldr	r2, [r7, #4]
 80143d2:	320d      	adds	r2, #13
 80143d4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 80143d6:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 80143d8:	69bb      	ldr	r3, [r7, #24]
 80143da:	60da      	str	r2, [r3, #12]

  return 0;
 80143dc:	2300      	movs	r3, #0
}
 80143de:	4618      	mov	r0, r3
 80143e0:	3724      	adds	r7, #36	; 0x24
 80143e2:	46bd      	mov	sp, r7
 80143e4:	bd90      	pop	{r4, r7, pc}

080143e6 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80143e6:	b580      	push	{r7, lr}
 80143e8:	b088      	sub	sp, #32
 80143ea:	af00      	add	r7, sp, #0
 80143ec:	60f8      	str	r0, [r7, #12]
 80143ee:	460b      	mov	r3, r1
 80143f0:	607a      	str	r2, [r7, #4]
 80143f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80143f4:	68fb      	ldr	r3, [r7, #12]
 80143f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143fa:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 80143fc:	68fb      	ldr	r3, [r7, #12]
 80143fe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014402:	685b      	ldr	r3, [r3, #4]
 8014404:	f107 0214 	add.w	r2, r7, #20
 8014408:	f107 0110 	add.w	r1, r7, #16
 801440c:	7af8      	ldrb	r0, [r7, #11]
 801440e:	4798      	blx	r3
 8014410:	4603      	mov	r3, r0
 8014412:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014414:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014418:	2b00      	cmp	r3, #0
 801441a:	d106      	bne.n	801442a <SCSI_ReadFormatCapacity+0x44>
 801441c:	69ba      	ldr	r2, [r7, #24]
 801441e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014422:	4413      	add	r3, r2
 8014424:	781b      	ldrb	r3, [r3, #0]
 8014426:	2b02      	cmp	r3, #2
 8014428:	d108      	bne.n	801443c <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801442a:	7af9      	ldrb	r1, [r7, #11]
 801442c:	233a      	movs	r3, #58	; 0x3a
 801442e:	2202      	movs	r2, #2
 8014430:	68f8      	ldr	r0, [r7, #12]
 8014432:	f000 f92b 	bl	801468c <SCSI_SenseCode>
    return -1;
 8014436:	f04f 33ff 	mov.w	r3, #4294967295
 801443a:	e03e      	b.n	80144ba <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 801443c:	2300      	movs	r3, #0
 801443e:	83fb      	strh	r3, [r7, #30]
 8014440:	e007      	b.n	8014452 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014442:	8bfb      	ldrh	r3, [r7, #30]
 8014444:	69ba      	ldr	r2, [r7, #24]
 8014446:	4413      	add	r3, r2
 8014448:	2200      	movs	r2, #0
 801444a:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 801444c:	8bfb      	ldrh	r3, [r7, #30]
 801444e:	3301      	adds	r3, #1
 8014450:	83fb      	strh	r3, [r7, #30]
 8014452:	8bfb      	ldrh	r3, [r7, #30]
 8014454:	2b0b      	cmp	r3, #11
 8014456:	d9f4      	bls.n	8014442 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8014458:	69bb      	ldr	r3, [r7, #24]
 801445a:	2208      	movs	r2, #8
 801445c:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 801445e:	693b      	ldr	r3, [r7, #16]
 8014460:	3b01      	subs	r3, #1
 8014462:	0e1b      	lsrs	r3, r3, #24
 8014464:	b2da      	uxtb	r2, r3
 8014466:	69bb      	ldr	r3, [r7, #24]
 8014468:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	3b01      	subs	r3, #1
 801446e:	0c1b      	lsrs	r3, r3, #16
 8014470:	b2da      	uxtb	r2, r3
 8014472:	69bb      	ldr	r3, [r7, #24]
 8014474:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	3b01      	subs	r3, #1
 801447a:	0a1b      	lsrs	r3, r3, #8
 801447c:	b2da      	uxtb	r2, r3
 801447e:	69bb      	ldr	r3, [r7, #24]
 8014480:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014482:	693b      	ldr	r3, [r7, #16]
 8014484:	b2db      	uxtb	r3, r3
 8014486:	3b01      	subs	r3, #1
 8014488:	b2da      	uxtb	r2, r3
 801448a:	69bb      	ldr	r3, [r7, #24]
 801448c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 801448e:	69bb      	ldr	r3, [r7, #24]
 8014490:	2202      	movs	r2, #2
 8014492:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014494:	8abb      	ldrh	r3, [r7, #20]
 8014496:	141b      	asrs	r3, r3, #16
 8014498:	b2da      	uxtb	r2, r3
 801449a:	69bb      	ldr	r3, [r7, #24]
 801449c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 801449e:	8abb      	ldrh	r3, [r7, #20]
 80144a0:	0a1b      	lsrs	r3, r3, #8
 80144a2:	b29b      	uxth	r3, r3
 80144a4:	b2da      	uxtb	r2, r3
 80144a6:	69bb      	ldr	r3, [r7, #24]
 80144a8:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 80144aa:	8abb      	ldrh	r3, [r7, #20]
 80144ac:	b2da      	uxtb	r2, r3
 80144ae:	69bb      	ldr	r3, [r7, #24]
 80144b0:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 80144b2:	69bb      	ldr	r3, [r7, #24]
 80144b4:	220c      	movs	r2, #12
 80144b6:	60da      	str	r2, [r3, #12]

  return 0;
 80144b8:	2300      	movs	r3, #0
}
 80144ba:	4618      	mov	r0, r3
 80144bc:	3720      	adds	r7, #32
 80144be:	46bd      	mov	sp, r7
 80144c0:	bd80      	pop	{r7, pc}
	...

080144c4 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80144c4:	b580      	push	{r7, lr}
 80144c6:	b086      	sub	sp, #24
 80144c8:	af00      	add	r7, sp, #0
 80144ca:	60f8      	str	r0, [r7, #12]
 80144cc:	460b      	mov	r3, r1
 80144ce:	607a      	str	r2, [r7, #4]
 80144d0:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80144d2:	68fb      	ldr	r3, [r7, #12]
 80144d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80144d8:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 80144da:	2317      	movs	r3, #23
 80144dc:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	3304      	adds	r3, #4
 80144e2:	781b      	ldrb	r3, [r3, #0]
 80144e4:	b29b      	uxth	r3, r3
 80144e6:	8afa      	ldrh	r2, [r7, #22]
 80144e8:	429a      	cmp	r2, r3
 80144ea:	d303      	bcc.n	80144f4 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 80144ec:	687b      	ldr	r3, [r7, #4]
 80144ee:	3304      	adds	r3, #4
 80144f0:	781b      	ldrb	r3, [r3, #0]
 80144f2:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 80144f4:	8afb      	ldrh	r3, [r7, #22]
 80144f6:	461a      	mov	r2, r3
 80144f8:	4904      	ldr	r1, [pc, #16]	; (801450c <SCSI_ModeSense6+0x48>)
 80144fa:	6938      	ldr	r0, [r7, #16]
 80144fc:	f000 fe54 	bl	80151a8 <SCSI_UpdateBotData>

  return 0;
 8014500:	2300      	movs	r3, #0
}
 8014502:	4618      	mov	r0, r3
 8014504:	3718      	adds	r7, #24
 8014506:	46bd      	mov	sp, r7
 8014508:	bd80      	pop	{r7, pc}
 801450a:	bf00      	nop
 801450c:	240000d4 	.word	0x240000d4

08014510 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014510:	b580      	push	{r7, lr}
 8014512:	b086      	sub	sp, #24
 8014514:	af00      	add	r7, sp, #0
 8014516:	60f8      	str	r0, [r7, #12]
 8014518:	460b      	mov	r3, r1
 801451a:	607a      	str	r2, [r7, #4]
 801451c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801451e:	68fb      	ldr	r3, [r7, #12]
 8014520:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014524:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014526:	231b      	movs	r3, #27
 8014528:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	3308      	adds	r3, #8
 801452e:	781b      	ldrb	r3, [r3, #0]
 8014530:	b29b      	uxth	r3, r3
 8014532:	8afa      	ldrh	r2, [r7, #22]
 8014534:	429a      	cmp	r2, r3
 8014536:	d303      	bcc.n	8014540 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	3308      	adds	r3, #8
 801453c:	781b      	ldrb	r3, [r3, #0]
 801453e:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014540:	8afb      	ldrh	r3, [r7, #22]
 8014542:	461a      	mov	r2, r3
 8014544:	4904      	ldr	r1, [pc, #16]	; (8014558 <SCSI_ModeSense10+0x48>)
 8014546:	6938      	ldr	r0, [r7, #16]
 8014548:	f000 fe2e 	bl	80151a8 <SCSI_UpdateBotData>

  return 0;
 801454c:	2300      	movs	r3, #0
}
 801454e:	4618      	mov	r0, r3
 8014550:	3718      	adds	r7, #24
 8014552:	46bd      	mov	sp, r7
 8014554:	bd80      	pop	{r7, pc}
 8014556:	bf00      	nop
 8014558:	240000ec 	.word	0x240000ec

0801455c <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 801455c:	b580      	push	{r7, lr}
 801455e:	b086      	sub	sp, #24
 8014560:	af00      	add	r7, sp, #0
 8014562:	60f8      	str	r0, [r7, #12]
 8014564:	460b      	mov	r3, r1
 8014566:	607a      	str	r2, [r7, #4]
 8014568:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014570:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8014572:	693a      	ldr	r2, [r7, #16]
 8014574:	f248 0318 	movw	r3, #32792	; 0x8018
 8014578:	4413      	add	r3, r2
 801457a:	681b      	ldr	r3, [r3, #0]
 801457c:	2b00      	cmp	r3, #0
 801457e:	d10c      	bne.n	801459a <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014580:	693a      	ldr	r2, [r7, #16]
 8014582:	f248 031d 	movw	r3, #32797	; 0x801d
 8014586:	4413      	add	r3, r2
 8014588:	7819      	ldrb	r1, [r3, #0]
 801458a:	2320      	movs	r3, #32
 801458c:	2205      	movs	r2, #5
 801458e:	68f8      	ldr	r0, [r7, #12]
 8014590:	f000 f87c 	bl	801468c <SCSI_SenseCode>
    return -1;
 8014594:	f04f 33ff 	mov.w	r3, #4294967295
 8014598:	e074      	b.n	8014684 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 801459a:	2300      	movs	r3, #0
 801459c:	75fb      	strb	r3, [r7, #23]
 801459e:	e007      	b.n	80145b0 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 80145a0:	7dfb      	ldrb	r3, [r7, #23]
 80145a2:	693a      	ldr	r2, [r7, #16]
 80145a4:	4413      	add	r3, r2
 80145a6:	2200      	movs	r2, #0
 80145a8:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 80145aa:	7dfb      	ldrb	r3, [r7, #23]
 80145ac:	3301      	adds	r3, #1
 80145ae:	75fb      	strb	r3, [r7, #23]
 80145b0:	7dfb      	ldrb	r3, [r7, #23]
 80145b2:	2b11      	cmp	r3, #17
 80145b4:	d9f4      	bls.n	80145a0 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 80145b6:	693b      	ldr	r3, [r7, #16]
 80145b8:	2270      	movs	r2, #112	; 0x70
 80145ba:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 80145bc:	693b      	ldr	r3, [r7, #16]
 80145be:	220c      	movs	r2, #12
 80145c0:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 80145c2:	693a      	ldr	r2, [r7, #16]
 80145c4:	f248 0360 	movw	r3, #32864	; 0x8060
 80145c8:	4413      	add	r3, r2
 80145ca:	781a      	ldrb	r2, [r3, #0]
 80145cc:	6939      	ldr	r1, [r7, #16]
 80145ce:	f248 0361 	movw	r3, #32865	; 0x8061
 80145d2:	440b      	add	r3, r1
 80145d4:	781b      	ldrb	r3, [r3, #0]
 80145d6:	429a      	cmp	r2, r3
 80145d8:	d045      	beq.n	8014666 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 80145da:	693a      	ldr	r2, [r7, #16]
 80145dc:	f248 0360 	movw	r3, #32864	; 0x8060
 80145e0:	4413      	add	r3, r2
 80145e2:	781b      	ldrb	r3, [r3, #0]
 80145e4:	4619      	mov	r1, r3
 80145e6:	693a      	ldr	r2, [r7, #16]
 80145e8:	f241 0308 	movw	r3, #4104	; 0x1008
 80145ec:	440b      	add	r3, r1
 80145ee:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 80145f2:	693b      	ldr	r3, [r7, #16]
 80145f4:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 80145f6:	693a      	ldr	r2, [r7, #16]
 80145f8:	f248 0360 	movw	r3, #32864	; 0x8060
 80145fc:	4413      	add	r3, r2
 80145fe:	781b      	ldrb	r3, [r3, #0]
 8014600:	4619      	mov	r1, r3
 8014602:	693a      	ldr	r2, [r7, #16]
 8014604:	f241 0308 	movw	r3, #4104	; 0x1008
 8014608:	440b      	add	r3, r1
 801460a:	00db      	lsls	r3, r3, #3
 801460c:	4413      	add	r3, r2
 801460e:	791a      	ldrb	r2, [r3, #4]
 8014610:	693b      	ldr	r3, [r7, #16]
 8014612:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014614:	693a      	ldr	r2, [r7, #16]
 8014616:	f248 0360 	movw	r3, #32864	; 0x8060
 801461a:	4413      	add	r3, r2
 801461c:	781b      	ldrb	r3, [r3, #0]
 801461e:	4619      	mov	r1, r3
 8014620:	693a      	ldr	r2, [r7, #16]
 8014622:	f241 0308 	movw	r3, #4104	; 0x1008
 8014626:	440b      	add	r3, r1
 8014628:	00db      	lsls	r3, r3, #3
 801462a:	4413      	add	r3, r2
 801462c:	795a      	ldrb	r2, [r3, #5]
 801462e:	693b      	ldr	r3, [r7, #16]
 8014630:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014632:	693a      	ldr	r2, [r7, #16]
 8014634:	f248 0360 	movw	r3, #32864	; 0x8060
 8014638:	4413      	add	r3, r2
 801463a:	781b      	ldrb	r3, [r3, #0]
 801463c:	3301      	adds	r3, #1
 801463e:	b2d9      	uxtb	r1, r3
 8014640:	693a      	ldr	r2, [r7, #16]
 8014642:	f248 0360 	movw	r3, #32864	; 0x8060
 8014646:	4413      	add	r3, r2
 8014648:	460a      	mov	r2, r1
 801464a:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 801464c:	693a      	ldr	r2, [r7, #16]
 801464e:	f248 0360 	movw	r3, #32864	; 0x8060
 8014652:	4413      	add	r3, r2
 8014654:	781b      	ldrb	r3, [r3, #0]
 8014656:	2b04      	cmp	r3, #4
 8014658:	d105      	bne.n	8014666 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 801465a:	693a      	ldr	r2, [r7, #16]
 801465c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014660:	4413      	add	r3, r2
 8014662:	2200      	movs	r2, #0
 8014664:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014666:	693b      	ldr	r3, [r7, #16]
 8014668:	2212      	movs	r2, #18
 801466a:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 801466c:	687b      	ldr	r3, [r7, #4]
 801466e:	3304      	adds	r3, #4
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	2b12      	cmp	r3, #18
 8014674:	d805      	bhi.n	8014682 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	3304      	adds	r3, #4
 801467a:	781b      	ldrb	r3, [r3, #0]
 801467c:	461a      	mov	r2, r3
 801467e:	693b      	ldr	r3, [r7, #16]
 8014680:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014682:	2300      	movs	r3, #0
}
 8014684:	4618      	mov	r0, r3
 8014686:	3718      	adds	r7, #24
 8014688:	46bd      	mov	sp, r7
 801468a:	bd80      	pop	{r7, pc}

0801468c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 801468c:	b480      	push	{r7}
 801468e:	b085      	sub	sp, #20
 8014690:	af00      	add	r7, sp, #0
 8014692:	6078      	str	r0, [r7, #4]
 8014694:	4608      	mov	r0, r1
 8014696:	4611      	mov	r1, r2
 8014698:	461a      	mov	r2, r3
 801469a:	4603      	mov	r3, r0
 801469c:	70fb      	strb	r3, [r7, #3]
 801469e:	460b      	mov	r3, r1
 80146a0:	70bb      	strb	r3, [r7, #2]
 80146a2:	4613      	mov	r3, r2
 80146a4:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80146ac:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 80146ae:	68fa      	ldr	r2, [r7, #12]
 80146b0:	f248 0361 	movw	r3, #32865	; 0x8061
 80146b4:	4413      	add	r3, r2
 80146b6:	781b      	ldrb	r3, [r3, #0]
 80146b8:	4619      	mov	r1, r3
 80146ba:	68fa      	ldr	r2, [r7, #12]
 80146bc:	f241 0308 	movw	r3, #4104	; 0x1008
 80146c0:	440b      	add	r3, r1
 80146c2:	78b9      	ldrb	r1, [r7, #2]
 80146c4:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 80146c8:	68fa      	ldr	r2, [r7, #12]
 80146ca:	f248 0361 	movw	r3, #32865	; 0x8061
 80146ce:	4413      	add	r3, r2
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	4619      	mov	r1, r3
 80146d4:	68fa      	ldr	r2, [r7, #12]
 80146d6:	f241 0308 	movw	r3, #4104	; 0x1008
 80146da:	440b      	add	r3, r1
 80146dc:	00db      	lsls	r3, r3, #3
 80146de:	4413      	add	r3, r2
 80146e0:	787a      	ldrb	r2, [r7, #1]
 80146e2:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 80146e4:	68fa      	ldr	r2, [r7, #12]
 80146e6:	f248 0361 	movw	r3, #32865	; 0x8061
 80146ea:	4413      	add	r3, r2
 80146ec:	781b      	ldrb	r3, [r3, #0]
 80146ee:	4619      	mov	r1, r3
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	f241 0308 	movw	r3, #4104	; 0x1008
 80146f6:	440b      	add	r3, r1
 80146f8:	00db      	lsls	r3, r3, #3
 80146fa:	4413      	add	r3, r2
 80146fc:	2200      	movs	r2, #0
 80146fe:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014700:	68fa      	ldr	r2, [r7, #12]
 8014702:	f248 0361 	movw	r3, #32865	; 0x8061
 8014706:	4413      	add	r3, r2
 8014708:	781b      	ldrb	r3, [r3, #0]
 801470a:	3301      	adds	r3, #1
 801470c:	b2d9      	uxtb	r1, r3
 801470e:	68fa      	ldr	r2, [r7, #12]
 8014710:	f248 0361 	movw	r3, #32865	; 0x8061
 8014714:	4413      	add	r3, r2
 8014716:	460a      	mov	r2, r1
 8014718:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 801471a:	68fa      	ldr	r2, [r7, #12]
 801471c:	f248 0361 	movw	r3, #32865	; 0x8061
 8014720:	4413      	add	r3, r2
 8014722:	781b      	ldrb	r3, [r3, #0]
 8014724:	2b04      	cmp	r3, #4
 8014726:	d105      	bne.n	8014734 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8014728:	68fa      	ldr	r2, [r7, #12]
 801472a:	f248 0361 	movw	r3, #32865	; 0x8061
 801472e:	4413      	add	r3, r2
 8014730:	2200      	movs	r2, #0
 8014732:	701a      	strb	r2, [r3, #0]
  }
}
 8014734:	bf00      	nop
 8014736:	3714      	adds	r7, #20
 8014738:	46bd      	mov	sp, r7
 801473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801473e:	4770      	bx	lr

08014740 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014740:	b580      	push	{r7, lr}
 8014742:	b086      	sub	sp, #24
 8014744:	af00      	add	r7, sp, #0
 8014746:	60f8      	str	r0, [r7, #12]
 8014748:	460b      	mov	r3, r1
 801474a:	607a      	str	r2, [r7, #4]
 801474c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801474e:	68fb      	ldr	r3, [r7, #12]
 8014750:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014754:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014756:	697a      	ldr	r2, [r7, #20]
 8014758:	f248 0362 	movw	r3, #32866	; 0x8062
 801475c:	4413      	add	r3, r2
 801475e:	781b      	ldrb	r3, [r3, #0]
 8014760:	2b01      	cmp	r3, #1
 8014762:	d10f      	bne.n	8014784 <SCSI_StartStopUnit+0x44>
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	3304      	adds	r3, #4
 8014768:	781b      	ldrb	r3, [r3, #0]
 801476a:	f003 0303 	and.w	r3, r3, #3
 801476e:	2b02      	cmp	r3, #2
 8014770:	d108      	bne.n	8014784 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014772:	7af9      	ldrb	r1, [r7, #11]
 8014774:	2324      	movs	r3, #36	; 0x24
 8014776:	2205      	movs	r2, #5
 8014778:	68f8      	ldr	r0, [r7, #12]
 801477a:	f7ff ff87 	bl	801468c <SCSI_SenseCode>

    return -1;
 801477e:	f04f 33ff 	mov.w	r3, #4294967295
 8014782:	e02c      	b.n	80147de <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	3304      	adds	r3, #4
 8014788:	781b      	ldrb	r3, [r3, #0]
 801478a:	f003 0303 	and.w	r3, r3, #3
 801478e:	2b01      	cmp	r3, #1
 8014790:	d106      	bne.n	80147a0 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014792:	697a      	ldr	r2, [r7, #20]
 8014794:	f248 0362 	movw	r3, #32866	; 0x8062
 8014798:	4413      	add	r3, r2
 801479a:	2200      	movs	r2, #0
 801479c:	701a      	strb	r2, [r3, #0]
 801479e:	e01a      	b.n	80147d6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 80147a0:	687b      	ldr	r3, [r7, #4]
 80147a2:	3304      	adds	r3, #4
 80147a4:	781b      	ldrb	r3, [r3, #0]
 80147a6:	f003 0303 	and.w	r3, r3, #3
 80147aa:	2b02      	cmp	r3, #2
 80147ac:	d106      	bne.n	80147bc <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 80147ae:	697a      	ldr	r2, [r7, #20]
 80147b0:	f248 0362 	movw	r3, #32866	; 0x8062
 80147b4:	4413      	add	r3, r2
 80147b6:	2202      	movs	r2, #2
 80147b8:	701a      	strb	r2, [r3, #0]
 80147ba:	e00c      	b.n	80147d6 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	3304      	adds	r3, #4
 80147c0:	781b      	ldrb	r3, [r3, #0]
 80147c2:	f003 0303 	and.w	r3, r3, #3
 80147c6:	2b03      	cmp	r3, #3
 80147c8:	d105      	bne.n	80147d6 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 80147ca:	697a      	ldr	r2, [r7, #20]
 80147cc:	f248 0362 	movw	r3, #32866	; 0x8062
 80147d0:	4413      	add	r3, r2
 80147d2:	2200      	movs	r2, #0
 80147d4:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 80147d6:	697b      	ldr	r3, [r7, #20]
 80147d8:	2200      	movs	r2, #0
 80147da:	60da      	str	r2, [r3, #12]

  return 0;
 80147dc:	2300      	movs	r3, #0
}
 80147de:	4618      	mov	r0, r3
 80147e0:	3718      	adds	r7, #24
 80147e2:	46bd      	mov	sp, r7
 80147e4:	bd80      	pop	{r7, pc}

080147e6 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80147e6:	b480      	push	{r7}
 80147e8:	b087      	sub	sp, #28
 80147ea:	af00      	add	r7, sp, #0
 80147ec:	60f8      	str	r0, [r7, #12]
 80147ee:	460b      	mov	r3, r1
 80147f0:	607a      	str	r2, [r7, #4]
 80147f2:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80147f4:	68fb      	ldr	r3, [r7, #12]
 80147f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80147fa:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	3304      	adds	r3, #4
 8014800:	781b      	ldrb	r3, [r3, #0]
 8014802:	2b00      	cmp	r3, #0
 8014804:	d106      	bne.n	8014814 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8014806:	697a      	ldr	r2, [r7, #20]
 8014808:	f248 0362 	movw	r3, #32866	; 0x8062
 801480c:	4413      	add	r3, r2
 801480e:	2200      	movs	r2, #0
 8014810:	701a      	strb	r2, [r3, #0]
 8014812:	e005      	b.n	8014820 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8014814:	697a      	ldr	r2, [r7, #20]
 8014816:	f248 0362 	movw	r3, #32866	; 0x8062
 801481a:	4413      	add	r3, r2
 801481c:	2201      	movs	r2, #1
 801481e:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 8014820:	697b      	ldr	r3, [r7, #20]
 8014822:	2200      	movs	r2, #0
 8014824:	60da      	str	r2, [r3, #12]

  return 0;
 8014826:	2300      	movs	r3, #0
}
 8014828:	4618      	mov	r0, r3
 801482a:	371c      	adds	r7, #28
 801482c:	46bd      	mov	sp, r7
 801482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014832:	4770      	bx	lr

08014834 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b086      	sub	sp, #24
 8014838:	af00      	add	r7, sp, #0
 801483a:	60f8      	str	r0, [r7, #12]
 801483c:	460b      	mov	r3, r1
 801483e:	607a      	str	r2, [r7, #4]
 8014840:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014848:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801484a:	697b      	ldr	r3, [r7, #20]
 801484c:	7a1b      	ldrb	r3, [r3, #8]
 801484e:	2b00      	cmp	r3, #0
 8014850:	f040 8094 	bne.w	801497c <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8014854:	697a      	ldr	r2, [r7, #20]
 8014856:	f248 031c 	movw	r3, #32796	; 0x801c
 801485a:	4413      	add	r3, r2
 801485c:	781b      	ldrb	r3, [r3, #0]
 801485e:	b25b      	sxtb	r3, r3
 8014860:	2b00      	cmp	r3, #0
 8014862:	db0c      	blt.n	801487e <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014864:	697a      	ldr	r2, [r7, #20]
 8014866:	f248 031d 	movw	r3, #32797	; 0x801d
 801486a:	4413      	add	r3, r2
 801486c:	7819      	ldrb	r1, [r3, #0]
 801486e:	2320      	movs	r3, #32
 8014870:	2205      	movs	r2, #5
 8014872:	68f8      	ldr	r0, [r7, #12]
 8014874:	f7ff ff0a 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014878:	f04f 33ff 	mov.w	r3, #4294967295
 801487c:	e088      	b.n	8014990 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 801487e:	697a      	ldr	r2, [r7, #20]
 8014880:	f248 0362 	movw	r3, #32866	; 0x8062
 8014884:	4413      	add	r3, r2
 8014886:	781b      	ldrb	r3, [r3, #0]
 8014888:	2b02      	cmp	r3, #2
 801488a:	d108      	bne.n	801489e <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801488c:	7af9      	ldrb	r1, [r7, #11]
 801488e:	233a      	movs	r3, #58	; 0x3a
 8014890:	2202      	movs	r2, #2
 8014892:	68f8      	ldr	r0, [r7, #12]
 8014894:	f7ff fefa 	bl	801468c <SCSI_SenseCode>

      return -1;
 8014898:	f04f 33ff 	mov.w	r3, #4294967295
 801489c:	e078      	b.n	8014990 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801489e:	68fb      	ldr	r3, [r7, #12]
 80148a0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148a4:	689b      	ldr	r3, [r3, #8]
 80148a6:	7afa      	ldrb	r2, [r7, #11]
 80148a8:	4610      	mov	r0, r2
 80148aa:	4798      	blx	r3
 80148ac:	4603      	mov	r3, r0
 80148ae:	2b00      	cmp	r3, #0
 80148b0:	d008      	beq.n	80148c4 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148b2:	7af9      	ldrb	r1, [r7, #11]
 80148b4:	233a      	movs	r3, #58	; 0x3a
 80148b6:	2202      	movs	r2, #2
 80148b8:	68f8      	ldr	r0, [r7, #12]
 80148ba:	f7ff fee7 	bl	801468c <SCSI_SenseCode>
      return -1;
 80148be:	f04f 33ff 	mov.w	r3, #4294967295
 80148c2:	e065      	b.n	8014990 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	3302      	adds	r3, #2
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	3303      	adds	r3, #3
 80148d0:	781b      	ldrb	r3, [r3, #0]
 80148d2:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148d4:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	3304      	adds	r3, #4
 80148da:	781b      	ldrb	r3, [r3, #0]
 80148dc:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80148de:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80148e0:	687a      	ldr	r2, [r7, #4]
 80148e2:	3205      	adds	r2, #5
 80148e4:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80148e6:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80148e8:	6979      	ldr	r1, [r7, #20]
 80148ea:	f248 036c 	movw	r3, #32876	; 0x806c
 80148ee:	440b      	add	r3, r1
 80148f0:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 80148f2:	687b      	ldr	r3, [r7, #4]
 80148f4:	3307      	adds	r3, #7
 80148f6:	781b      	ldrb	r3, [r3, #0]
 80148f8:	021b      	lsls	r3, r3, #8
 80148fa:	687a      	ldr	r2, [r7, #4]
 80148fc:	3208      	adds	r2, #8
 80148fe:	7812      	ldrb	r2, [r2, #0]
 8014900:	431a      	orrs	r2, r3
 8014902:	6979      	ldr	r1, [r7, #20]
 8014904:	f248 0370 	movw	r3, #32880	; 0x8070
 8014908:	440b      	add	r3, r1
 801490a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801490c:	697a      	ldr	r2, [r7, #20]
 801490e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014912:	4413      	add	r3, r2
 8014914:	6818      	ldr	r0, [r3, #0]
 8014916:	697a      	ldr	r2, [r7, #20]
 8014918:	f248 0370 	movw	r3, #32880	; 0x8070
 801491c:	4413      	add	r3, r2
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	7af9      	ldrb	r1, [r7, #11]
 8014922:	4602      	mov	r2, r0
 8014924:	68f8      	ldr	r0, [r7, #12]
 8014926:	f000 faeb 	bl	8014f00 <SCSI_CheckAddressRange>
 801492a:	4603      	mov	r3, r0
 801492c:	2b00      	cmp	r3, #0
 801492e:	da02      	bge.n	8014936 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014930:	f04f 33ff 	mov.w	r3, #4294967295
 8014934:	e02c      	b.n	8014990 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014936:	697a      	ldr	r2, [r7, #20]
 8014938:	f248 0318 	movw	r3, #32792	; 0x8018
 801493c:	4413      	add	r3, r2
 801493e:	681a      	ldr	r2, [r3, #0]
 8014940:	6979      	ldr	r1, [r7, #20]
 8014942:	f248 0370 	movw	r3, #32880	; 0x8070
 8014946:	440b      	add	r3, r1
 8014948:	6819      	ldr	r1, [r3, #0]
 801494a:	6978      	ldr	r0, [r7, #20]
 801494c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014950:	4403      	add	r3, r0
 8014952:	881b      	ldrh	r3, [r3, #0]
 8014954:	fb03 f301 	mul.w	r3, r3, r1
 8014958:	429a      	cmp	r2, r3
 801495a:	d00c      	beq.n	8014976 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801495c:	697a      	ldr	r2, [r7, #20]
 801495e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014962:	4413      	add	r3, r2
 8014964:	7819      	ldrb	r1, [r3, #0]
 8014966:	2320      	movs	r3, #32
 8014968:	2205      	movs	r2, #5
 801496a:	68f8      	ldr	r0, [r7, #12]
 801496c:	f7ff fe8e 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014970:	f04f 33ff 	mov.w	r3, #4294967295
 8014974:	e00c      	b.n	8014990 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014976:	697b      	ldr	r3, [r7, #20]
 8014978:	2202      	movs	r2, #2
 801497a:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 801497c:	697b      	ldr	r3, [r7, #20]
 801497e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014982:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014984:	7afb      	ldrb	r3, [r7, #11]
 8014986:	4619      	mov	r1, r3
 8014988:	68f8      	ldr	r0, [r7, #12]
 801498a:	f000 fadd 	bl	8014f48 <SCSI_ProcessRead>
 801498e:	4603      	mov	r3, r0
}
 8014990:	4618      	mov	r0, r3
 8014992:	3718      	adds	r7, #24
 8014994:	46bd      	mov	sp, r7
 8014996:	bd80      	pop	{r7, pc}

08014998 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014998:	b580      	push	{r7, lr}
 801499a:	b086      	sub	sp, #24
 801499c:	af00      	add	r7, sp, #0
 801499e:	60f8      	str	r0, [r7, #12]
 80149a0:	460b      	mov	r3, r1
 80149a2:	607a      	str	r2, [r7, #4]
 80149a4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80149a6:	68fb      	ldr	r3, [r7, #12]
 80149a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80149ac:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80149ae:	697b      	ldr	r3, [r7, #20]
 80149b0:	7a1b      	ldrb	r3, [r3, #8]
 80149b2:	2b00      	cmp	r3, #0
 80149b4:	f040 809e 	bne.w	8014af4 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80149b8:	697a      	ldr	r2, [r7, #20]
 80149ba:	f248 031c 	movw	r3, #32796	; 0x801c
 80149be:	4413      	add	r3, r2
 80149c0:	781b      	ldrb	r3, [r3, #0]
 80149c2:	b25b      	sxtb	r3, r3
 80149c4:	2b00      	cmp	r3, #0
 80149c6:	db0c      	blt.n	80149e2 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80149c8:	697a      	ldr	r2, [r7, #20]
 80149ca:	f248 031d 	movw	r3, #32797	; 0x801d
 80149ce:	4413      	add	r3, r2
 80149d0:	7819      	ldrb	r1, [r3, #0]
 80149d2:	2320      	movs	r3, #32
 80149d4:	2205      	movs	r2, #5
 80149d6:	68f8      	ldr	r0, [r7, #12]
 80149d8:	f7ff fe58 	bl	801468c <SCSI_SenseCode>
      return -1;
 80149dc:	f04f 33ff 	mov.w	r3, #4294967295
 80149e0:	e092      	b.n	8014b08 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80149e2:	697a      	ldr	r2, [r7, #20]
 80149e4:	f248 0362 	movw	r3, #32866	; 0x8062
 80149e8:	4413      	add	r3, r2
 80149ea:	781b      	ldrb	r3, [r3, #0]
 80149ec:	2b02      	cmp	r3, #2
 80149ee:	d108      	bne.n	8014a02 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80149f0:	7af9      	ldrb	r1, [r7, #11]
 80149f2:	233a      	movs	r3, #58	; 0x3a
 80149f4:	2202      	movs	r2, #2
 80149f6:	68f8      	ldr	r0, [r7, #12]
 80149f8:	f7ff fe48 	bl	801468c <SCSI_SenseCode>
      return -1;
 80149fc:	f04f 33ff 	mov.w	r3, #4294967295
 8014a00:	e082      	b.n	8014b08 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a08:	689b      	ldr	r3, [r3, #8]
 8014a0a:	7afa      	ldrb	r2, [r7, #11]
 8014a0c:	4610      	mov	r0, r2
 8014a0e:	4798      	blx	r3
 8014a10:	4603      	mov	r3, r0
 8014a12:	2b00      	cmp	r3, #0
 8014a14:	d008      	beq.n	8014a28 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a16:	7af9      	ldrb	r1, [r7, #11]
 8014a18:	233a      	movs	r3, #58	; 0x3a
 8014a1a:	2202      	movs	r2, #2
 8014a1c:	68f8      	ldr	r0, [r7, #12]
 8014a1e:	f7ff fe35 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014a22:	f04f 33ff 	mov.w	r3, #4294967295
 8014a26:	e06f      	b.n	8014b08 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a28:	687b      	ldr	r3, [r7, #4]
 8014a2a:	3302      	adds	r3, #2
 8014a2c:	781b      	ldrb	r3, [r3, #0]
 8014a2e:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	3303      	adds	r3, #3
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a38:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8014a3a:	687b      	ldr	r3, [r7, #4]
 8014a3c:	3304      	adds	r3, #4
 8014a3e:	781b      	ldrb	r3, [r3, #0]
 8014a40:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014a42:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	3205      	adds	r2, #5
 8014a48:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8014a4a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014a4c:	6979      	ldr	r1, [r7, #20]
 8014a4e:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a52:	440b      	add	r3, r1
 8014a54:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a56:	687b      	ldr	r3, [r7, #4]
 8014a58:	3306      	adds	r3, #6
 8014a5a:	781b      	ldrb	r3, [r3, #0]
 8014a5c:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	3307      	adds	r3, #7
 8014a62:	781b      	ldrb	r3, [r3, #0]
 8014a64:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a66:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014a68:	687b      	ldr	r3, [r7, #4]
 8014a6a:	3308      	adds	r3, #8
 8014a6c:	781b      	ldrb	r3, [r3, #0]
 8014a6e:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014a70:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014a72:	687a      	ldr	r2, [r7, #4]
 8014a74:	3209      	adds	r2, #9
 8014a76:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014a78:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014a7a:	6979      	ldr	r1, [r7, #20]
 8014a7c:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a80:	440b      	add	r3, r1
 8014a82:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014a84:	697a      	ldr	r2, [r7, #20]
 8014a86:	f248 036c 	movw	r3, #32876	; 0x806c
 8014a8a:	4413      	add	r3, r2
 8014a8c:	6818      	ldr	r0, [r3, #0]
 8014a8e:	697a      	ldr	r2, [r7, #20]
 8014a90:	f248 0370 	movw	r3, #32880	; 0x8070
 8014a94:	4413      	add	r3, r2
 8014a96:	681b      	ldr	r3, [r3, #0]
 8014a98:	7af9      	ldrb	r1, [r7, #11]
 8014a9a:	4602      	mov	r2, r0
 8014a9c:	68f8      	ldr	r0, [r7, #12]
 8014a9e:	f000 fa2f 	bl	8014f00 <SCSI_CheckAddressRange>
 8014aa2:	4603      	mov	r3, r0
 8014aa4:	2b00      	cmp	r3, #0
 8014aa6:	da02      	bge.n	8014aae <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014aa8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aac:	e02c      	b.n	8014b08 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8014aae:	697a      	ldr	r2, [r7, #20]
 8014ab0:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ab4:	4413      	add	r3, r2
 8014ab6:	681a      	ldr	r2, [r3, #0]
 8014ab8:	6979      	ldr	r1, [r7, #20]
 8014aba:	f248 0370 	movw	r3, #32880	; 0x8070
 8014abe:	440b      	add	r3, r1
 8014ac0:	6819      	ldr	r1, [r3, #0]
 8014ac2:	6978      	ldr	r0, [r7, #20]
 8014ac4:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ac8:	4403      	add	r3, r0
 8014aca:	881b      	ldrh	r3, [r3, #0]
 8014acc:	fb03 f301 	mul.w	r3, r3, r1
 8014ad0:	429a      	cmp	r2, r3
 8014ad2:	d00c      	beq.n	8014aee <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014ad4:	697a      	ldr	r2, [r7, #20]
 8014ad6:	f248 031d 	movw	r3, #32797	; 0x801d
 8014ada:	4413      	add	r3, r2
 8014adc:	7819      	ldrb	r1, [r3, #0]
 8014ade:	2320      	movs	r3, #32
 8014ae0:	2205      	movs	r2, #5
 8014ae2:	68f8      	ldr	r0, [r7, #12]
 8014ae4:	f7ff fdd2 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014ae8:	f04f 33ff 	mov.w	r3, #4294967295
 8014aec:	e00c      	b.n	8014b08 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8014aee:	697b      	ldr	r3, [r7, #20]
 8014af0:	2202      	movs	r2, #2
 8014af2:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8014af4:	697b      	ldr	r3, [r7, #20]
 8014af6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8014afa:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8014afc:	7afb      	ldrb	r3, [r7, #11]
 8014afe:	4619      	mov	r1, r3
 8014b00:	68f8      	ldr	r0, [r7, #12]
 8014b02:	f000 fa21 	bl	8014f48 <SCSI_ProcessRead>
 8014b06:	4603      	mov	r3, r0
}
 8014b08:	4618      	mov	r0, r3
 8014b0a:	3718      	adds	r7, #24
 8014b0c:	46bd      	mov	sp, r7
 8014b0e:	bd80      	pop	{r7, pc}

08014b10 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014b10:	b580      	push	{r7, lr}
 8014b12:	b086      	sub	sp, #24
 8014b14:	af00      	add	r7, sp, #0
 8014b16:	60f8      	str	r0, [r7, #12]
 8014b18:	460b      	mov	r3, r1
 8014b1a:	607a      	str	r2, [r7, #4]
 8014b1c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b1e:	68fb      	ldr	r3, [r7, #12]
 8014b20:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b24:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014b26:	697b      	ldr	r3, [r7, #20]
 8014b28:	7a1b      	ldrb	r3, [r3, #8]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	f040 80be 	bne.w	8014cac <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014b30:	697a      	ldr	r2, [r7, #20]
 8014b32:	f248 0318 	movw	r3, #32792	; 0x8018
 8014b36:	4413      	add	r3, r2
 8014b38:	681b      	ldr	r3, [r3, #0]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d10c      	bne.n	8014b58 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b3e:	697a      	ldr	r2, [r7, #20]
 8014b40:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b44:	4413      	add	r3, r2
 8014b46:	7819      	ldrb	r1, [r3, #0]
 8014b48:	2320      	movs	r3, #32
 8014b4a:	2205      	movs	r2, #5
 8014b4c:	68f8      	ldr	r0, [r7, #12]
 8014b4e:	f7ff fd9d 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014b52:	f04f 33ff 	mov.w	r3, #4294967295
 8014b56:	e0af      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014b58:	697a      	ldr	r2, [r7, #20]
 8014b5a:	f248 031c 	movw	r3, #32796	; 0x801c
 8014b5e:	4413      	add	r3, r2
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	b25b      	sxtb	r3, r3
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	da0c      	bge.n	8014b82 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014b68:	697a      	ldr	r2, [r7, #20]
 8014b6a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014b6e:	4413      	add	r3, r2
 8014b70:	7819      	ldrb	r1, [r3, #0]
 8014b72:	2320      	movs	r3, #32
 8014b74:	2205      	movs	r2, #5
 8014b76:	68f8      	ldr	r0, [r7, #12]
 8014b78:	f7ff fd88 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014b7c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b80:	e09a      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014b82:	68fb      	ldr	r3, [r7, #12]
 8014b84:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b88:	689b      	ldr	r3, [r3, #8]
 8014b8a:	7afa      	ldrb	r2, [r7, #11]
 8014b8c:	4610      	mov	r0, r2
 8014b8e:	4798      	blx	r3
 8014b90:	4603      	mov	r3, r0
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d008      	beq.n	8014ba8 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b96:	7af9      	ldrb	r1, [r7, #11]
 8014b98:	233a      	movs	r3, #58	; 0x3a
 8014b9a:	2202      	movs	r2, #2
 8014b9c:	68f8      	ldr	r0, [r7, #12]
 8014b9e:	f7ff fd75 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014ba2:	f04f 33ff 	mov.w	r3, #4294967295
 8014ba6:	e087      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014bae:	68db      	ldr	r3, [r3, #12]
 8014bb0:	7afa      	ldrb	r2, [r7, #11]
 8014bb2:	4610      	mov	r0, r2
 8014bb4:	4798      	blx	r3
 8014bb6:	4603      	mov	r3, r0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d008      	beq.n	8014bce <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014bbc:	7af9      	ldrb	r1, [r7, #11]
 8014bbe:	2327      	movs	r3, #39	; 0x27
 8014bc0:	2202      	movs	r2, #2
 8014bc2:	68f8      	ldr	r0, [r7, #12]
 8014bc4:	f7ff fd62 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014bc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014bcc:	e074      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bce:	687b      	ldr	r3, [r7, #4]
 8014bd0:	3302      	adds	r3, #2
 8014bd2:	781b      	ldrb	r3, [r3, #0]
 8014bd4:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014bd6:	687b      	ldr	r3, [r7, #4]
 8014bd8:	3303      	adds	r3, #3
 8014bda:	781b      	ldrb	r3, [r3, #0]
 8014bdc:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bde:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	3304      	adds	r3, #4
 8014be4:	781b      	ldrb	r3, [r3, #0]
 8014be6:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014be8:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014bea:	687a      	ldr	r2, [r7, #4]
 8014bec:	3205      	adds	r2, #5
 8014bee:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014bf0:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014bf2:	6979      	ldr	r1, [r7, #20]
 8014bf4:	f248 036c 	movw	r3, #32876	; 0x806c
 8014bf8:	440b      	add	r3, r1
 8014bfa:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014bfc:	687b      	ldr	r3, [r7, #4]
 8014bfe:	3307      	adds	r3, #7
 8014c00:	781b      	ldrb	r3, [r3, #0]
 8014c02:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8014c04:	687a      	ldr	r2, [r7, #4]
 8014c06:	3208      	adds	r2, #8
 8014c08:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8014c0a:	431a      	orrs	r2, r3
 8014c0c:	6979      	ldr	r1, [r7, #20]
 8014c0e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c12:	440b      	add	r3, r1
 8014c14:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014c16:	697a      	ldr	r2, [r7, #20]
 8014c18:	f248 036c 	movw	r3, #32876	; 0x806c
 8014c1c:	4413      	add	r3, r2
 8014c1e:	6818      	ldr	r0, [r3, #0]
 8014c20:	697a      	ldr	r2, [r7, #20]
 8014c22:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c26:	4413      	add	r3, r2
 8014c28:	681b      	ldr	r3, [r3, #0]
 8014c2a:	7af9      	ldrb	r1, [r7, #11]
 8014c2c:	4602      	mov	r2, r0
 8014c2e:	68f8      	ldr	r0, [r7, #12]
 8014c30:	f000 f966 	bl	8014f00 <SCSI_CheckAddressRange>
 8014c34:	4603      	mov	r3, r0
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	da02      	bge.n	8014c40 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014c3a:	f04f 33ff 	mov.w	r3, #4294967295
 8014c3e:	e03b      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014c40:	697a      	ldr	r2, [r7, #20]
 8014c42:	f248 0370 	movw	r3, #32880	; 0x8070
 8014c46:	4413      	add	r3, r2
 8014c48:	681a      	ldr	r2, [r3, #0]
 8014c4a:	6979      	ldr	r1, [r7, #20]
 8014c4c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c50:	440b      	add	r3, r1
 8014c52:	881b      	ldrh	r3, [r3, #0]
 8014c54:	fb03 f302 	mul.w	r3, r3, r2
 8014c58:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014c5a:	697a      	ldr	r2, [r7, #20]
 8014c5c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014c60:	4413      	add	r3, r2
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	693a      	ldr	r2, [r7, #16]
 8014c66:	429a      	cmp	r2, r3
 8014c68:	d00c      	beq.n	8014c84 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014c6a:	697a      	ldr	r2, [r7, #20]
 8014c6c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014c70:	4413      	add	r3, r2
 8014c72:	7819      	ldrb	r1, [r3, #0]
 8014c74:	2320      	movs	r3, #32
 8014c76:	2205      	movs	r2, #5
 8014c78:	68f8      	ldr	r0, [r7, #12]
 8014c7a:	f7ff fd07 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8014c82:	e019      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014c84:	693b      	ldr	r3, [r7, #16]
 8014c86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014c8a:	bf28      	it	cs
 8014c8c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014c90:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014c92:	697b      	ldr	r3, [r7, #20]
 8014c94:	2201      	movs	r2, #1
 8014c96:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014c98:	697b      	ldr	r3, [r7, #20]
 8014c9a:	f103 0210 	add.w	r2, r3, #16
 8014c9e:	693b      	ldr	r3, [r7, #16]
 8014ca0:	2101      	movs	r1, #1
 8014ca2:	68f8      	ldr	r0, [r7, #12]
 8014ca4:	f004 fb19 	bl	80192da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	e005      	b.n	8014cb8 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 8014cac:	7afb      	ldrb	r3, [r7, #11]
 8014cae:	4619      	mov	r1, r3
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f000 f9d7 	bl	8015064 <SCSI_ProcessWrite>
 8014cb6:	4603      	mov	r3, r0
}
 8014cb8:	4618      	mov	r0, r3
 8014cba:	3718      	adds	r7, #24
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bd80      	pop	{r7, pc}

08014cc0 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014cc0:	b580      	push	{r7, lr}
 8014cc2:	b086      	sub	sp, #24
 8014cc4:	af00      	add	r7, sp, #0
 8014cc6:	60f8      	str	r0, [r7, #12]
 8014cc8:	460b      	mov	r3, r1
 8014cca:	607a      	str	r2, [r7, #4]
 8014ccc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014cd4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8014cd6:	697b      	ldr	r3, [r7, #20]
 8014cd8:	7a1b      	ldrb	r3, [r3, #8]
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	f040 80ce 	bne.w	8014e7c <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8014ce0:	697a      	ldr	r2, [r7, #20]
 8014ce2:	f248 0318 	movw	r3, #32792	; 0x8018
 8014ce6:	4413      	add	r3, r2
 8014ce8:	681b      	ldr	r3, [r3, #0]
 8014cea:	2b00      	cmp	r3, #0
 8014cec:	d10c      	bne.n	8014d08 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014cee:	697a      	ldr	r2, [r7, #20]
 8014cf0:	f248 031d 	movw	r3, #32797	; 0x801d
 8014cf4:	4413      	add	r3, r2
 8014cf6:	7819      	ldrb	r1, [r3, #0]
 8014cf8:	2320      	movs	r3, #32
 8014cfa:	2205      	movs	r2, #5
 8014cfc:	68f8      	ldr	r0, [r7, #12]
 8014cfe:	f7ff fcc5 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014d02:	f04f 33ff 	mov.w	r3, #4294967295
 8014d06:	e0bf      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8014d08:	697a      	ldr	r2, [r7, #20]
 8014d0a:	f248 031c 	movw	r3, #32796	; 0x801c
 8014d0e:	4413      	add	r3, r2
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	b25b      	sxtb	r3, r3
 8014d14:	2b00      	cmp	r3, #0
 8014d16:	da0c      	bge.n	8014d32 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014d18:	697a      	ldr	r2, [r7, #20]
 8014d1a:	f248 031d 	movw	r3, #32797	; 0x801d
 8014d1e:	4413      	add	r3, r2
 8014d20:	7819      	ldrb	r1, [r3, #0]
 8014d22:	2320      	movs	r3, #32
 8014d24:	2205      	movs	r2, #5
 8014d26:	68f8      	ldr	r0, [r7, #12]
 8014d28:	f7ff fcb0 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014d2c:	f04f 33ff 	mov.w	r3, #4294967295
 8014d30:	e0aa      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d38:	689b      	ldr	r3, [r3, #8]
 8014d3a:	7afa      	ldrb	r2, [r7, #11]
 8014d3c:	4610      	mov	r0, r2
 8014d3e:	4798      	blx	r3
 8014d40:	4603      	mov	r3, r0
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d00b      	beq.n	8014d5e <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014d46:	7af9      	ldrb	r1, [r7, #11]
 8014d48:	233a      	movs	r3, #58	; 0x3a
 8014d4a:	2202      	movs	r2, #2
 8014d4c:	68f8      	ldr	r0, [r7, #12]
 8014d4e:	f7ff fc9d 	bl	801468c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d52:	697b      	ldr	r3, [r7, #20]
 8014d54:	2205      	movs	r2, #5
 8014d56:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d58:	f04f 33ff 	mov.w	r3, #4294967295
 8014d5c:	e094      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8014d5e:	68fb      	ldr	r3, [r7, #12]
 8014d60:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014d64:	68db      	ldr	r3, [r3, #12]
 8014d66:	7afa      	ldrb	r2, [r7, #11]
 8014d68:	4610      	mov	r0, r2
 8014d6a:	4798      	blx	r3
 8014d6c:	4603      	mov	r3, r0
 8014d6e:	2b00      	cmp	r3, #0
 8014d70:	d00b      	beq.n	8014d8a <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8014d72:	7af9      	ldrb	r1, [r7, #11]
 8014d74:	2327      	movs	r3, #39	; 0x27
 8014d76:	2202      	movs	r2, #2
 8014d78:	68f8      	ldr	r0, [r7, #12]
 8014d7a:	f7ff fc87 	bl	801468c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 8014d7e:	697b      	ldr	r3, [r7, #20]
 8014d80:	2205      	movs	r2, #5
 8014d82:	721a      	strb	r2, [r3, #8]
      return -1;
 8014d84:	f04f 33ff 	mov.w	r3, #4294967295
 8014d88:	e07e      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	3302      	adds	r3, #2
 8014d8e:	781b      	ldrb	r3, [r3, #0]
 8014d90:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	3303      	adds	r3, #3
 8014d96:	781b      	ldrb	r3, [r3, #0]
 8014d98:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014d9a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	3304      	adds	r3, #4
 8014da0:	781b      	ldrb	r3, [r3, #0]
 8014da2:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8014da4:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8014da6:	687a      	ldr	r2, [r7, #4]
 8014da8:	3205      	adds	r2, #5
 8014daa:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8014dac:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8014dae:	6979      	ldr	r1, [r7, #20]
 8014db0:	f248 036c 	movw	r3, #32876	; 0x806c
 8014db4:	440b      	add	r3, r1
 8014db6:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3306      	adds	r3, #6
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8014dc0:	687b      	ldr	r3, [r7, #4]
 8014dc2:	3307      	adds	r3, #7
 8014dc4:	781b      	ldrb	r3, [r3, #0]
 8014dc6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014dc8:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	3308      	adds	r3, #8
 8014dce:	781b      	ldrb	r3, [r3, #0]
 8014dd0:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8014dd2:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8014dd4:	687a      	ldr	r2, [r7, #4]
 8014dd6:	3209      	adds	r2, #9
 8014dd8:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 8014dda:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8014ddc:	6979      	ldr	r1, [r7, #20]
 8014dde:	f248 0370 	movw	r3, #32880	; 0x8070
 8014de2:	440b      	add	r3, r1
 8014de4:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8014de6:	697a      	ldr	r2, [r7, #20]
 8014de8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014dec:	4413      	add	r3, r2
 8014dee:	6818      	ldr	r0, [r3, #0]
 8014df0:	697a      	ldr	r2, [r7, #20]
 8014df2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014df6:	4413      	add	r3, r2
 8014df8:	681b      	ldr	r3, [r3, #0]
 8014dfa:	7af9      	ldrb	r1, [r7, #11]
 8014dfc:	4602      	mov	r2, r0
 8014dfe:	68f8      	ldr	r0, [r7, #12]
 8014e00:	f000 f87e 	bl	8014f00 <SCSI_CheckAddressRange>
 8014e04:	4603      	mov	r3, r0
 8014e06:	2b00      	cmp	r3, #0
 8014e08:	da02      	bge.n	8014e10 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8014e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8014e0e:	e03b      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014e10:	697a      	ldr	r2, [r7, #20]
 8014e12:	f248 0370 	movw	r3, #32880	; 0x8070
 8014e16:	4413      	add	r3, r2
 8014e18:	681a      	ldr	r2, [r3, #0]
 8014e1a:	6979      	ldr	r1, [r7, #20]
 8014e1c:	f248 0364 	movw	r3, #32868	; 0x8064
 8014e20:	440b      	add	r3, r1
 8014e22:	881b      	ldrh	r3, [r3, #0]
 8014e24:	fb03 f302 	mul.w	r3, r3, r2
 8014e28:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8014e2a:	697a      	ldr	r2, [r7, #20]
 8014e2c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014e30:	4413      	add	r3, r2
 8014e32:	681b      	ldr	r3, [r3, #0]
 8014e34:	693a      	ldr	r2, [r7, #16]
 8014e36:	429a      	cmp	r2, r3
 8014e38:	d00c      	beq.n	8014e54 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e3a:	697a      	ldr	r2, [r7, #20]
 8014e3c:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e40:	4413      	add	r3, r2
 8014e42:	7819      	ldrb	r1, [r3, #0]
 8014e44:	2320      	movs	r3, #32
 8014e46:	2205      	movs	r2, #5
 8014e48:	68f8      	ldr	r0, [r7, #12]
 8014e4a:	f7ff fc1f 	bl	801468c <SCSI_SenseCode>
      return -1;
 8014e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014e52:	e019      	b.n	8014e88 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8014e54:	693b      	ldr	r3, [r7, #16]
 8014e56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014e5a:	bf28      	it	cs
 8014e5c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014e60:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8014e62:	697b      	ldr	r3, [r7, #20]
 8014e64:	2201      	movs	r2, #1
 8014e66:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8014e68:	697b      	ldr	r3, [r7, #20]
 8014e6a:	f103 0210 	add.w	r2, r3, #16
 8014e6e:	693b      	ldr	r3, [r7, #16]
 8014e70:	2101      	movs	r1, #1
 8014e72:	68f8      	ldr	r0, [r7, #12]
 8014e74:	f004 fa31 	bl	80192da <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8014e78:	2300      	movs	r3, #0
 8014e7a:	e005      	b.n	8014e88 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 8014e7c:	7afb      	ldrb	r3, [r7, #11]
 8014e7e:	4619      	mov	r1, r3
 8014e80:	68f8      	ldr	r0, [r7, #12]
 8014e82:	f000 f8ef 	bl	8015064 <SCSI_ProcessWrite>
 8014e86:	4603      	mov	r3, r0
}
 8014e88:	4618      	mov	r0, r3
 8014e8a:	3718      	adds	r7, #24
 8014e8c:	46bd      	mov	sp, r7
 8014e8e:	bd80      	pop	{r7, pc}

08014e90 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014e90:	b580      	push	{r7, lr}
 8014e92:	b086      	sub	sp, #24
 8014e94:	af00      	add	r7, sp, #0
 8014e96:	60f8      	str	r0, [r7, #12]
 8014e98:	460b      	mov	r3, r1
 8014e9a:	607a      	str	r2, [r7, #4]
 8014e9c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014e9e:	68fb      	ldr	r3, [r7, #12]
 8014ea0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014ea4:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	3301      	adds	r3, #1
 8014eaa:	781b      	ldrb	r3, [r3, #0]
 8014eac:	f003 0302 	and.w	r3, r3, #2
 8014eb0:	2b00      	cmp	r3, #0
 8014eb2:	d008      	beq.n	8014ec6 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014eb4:	7af9      	ldrb	r1, [r7, #11]
 8014eb6:	2324      	movs	r3, #36	; 0x24
 8014eb8:	2205      	movs	r2, #5
 8014eba:	68f8      	ldr	r0, [r7, #12]
 8014ebc:	f7ff fbe6 	bl	801468c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8014ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8014ec4:	e018      	b.n	8014ef8 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8014ec6:	697a      	ldr	r2, [r7, #20]
 8014ec8:	f248 036c 	movw	r3, #32876	; 0x806c
 8014ecc:	4413      	add	r3, r2
 8014ece:	6818      	ldr	r0, [r3, #0]
 8014ed0:	697a      	ldr	r2, [r7, #20]
 8014ed2:	f248 0370 	movw	r3, #32880	; 0x8070
 8014ed6:	4413      	add	r3, r2
 8014ed8:	681b      	ldr	r3, [r3, #0]
 8014eda:	7af9      	ldrb	r1, [r7, #11]
 8014edc:	4602      	mov	r2, r0
 8014ede:	68f8      	ldr	r0, [r7, #12]
 8014ee0:	f000 f80e 	bl	8014f00 <SCSI_CheckAddressRange>
 8014ee4:	4603      	mov	r3, r0
 8014ee6:	2b00      	cmp	r3, #0
 8014ee8:	da02      	bge.n	8014ef0 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 8014eea:	f04f 33ff 	mov.w	r3, #4294967295
 8014eee:	e003      	b.n	8014ef8 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8014ef0:	697b      	ldr	r3, [r7, #20]
 8014ef2:	2200      	movs	r2, #0
 8014ef4:	60da      	str	r2, [r3, #12]

  return 0;
 8014ef6:	2300      	movs	r3, #0
}
 8014ef8:	4618      	mov	r0, r3
 8014efa:	3718      	adds	r7, #24
 8014efc:	46bd      	mov	sp, r7
 8014efe:	bd80      	pop	{r7, pc}

08014f00 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8014f00:	b580      	push	{r7, lr}
 8014f02:	b086      	sub	sp, #24
 8014f04:	af00      	add	r7, sp, #0
 8014f06:	60f8      	str	r0, [r7, #12]
 8014f08:	607a      	str	r2, [r7, #4]
 8014f0a:	603b      	str	r3, [r7, #0]
 8014f0c:	460b      	mov	r3, r1
 8014f0e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f16:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8014f18:	687a      	ldr	r2, [r7, #4]
 8014f1a:	683b      	ldr	r3, [r7, #0]
 8014f1c:	441a      	add	r2, r3
 8014f1e:	6979      	ldr	r1, [r7, #20]
 8014f20:	f248 0368 	movw	r3, #32872	; 0x8068
 8014f24:	440b      	add	r3, r1
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	429a      	cmp	r2, r3
 8014f2a:	d908      	bls.n	8014f3e <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8014f2c:	7af9      	ldrb	r1, [r7, #11]
 8014f2e:	2321      	movs	r3, #33	; 0x21
 8014f30:	2205      	movs	r2, #5
 8014f32:	68f8      	ldr	r0, [r7, #12]
 8014f34:	f7ff fbaa 	bl	801468c <SCSI_SenseCode>
    return -1;
 8014f38:	f04f 33ff 	mov.w	r3, #4294967295
 8014f3c:	e000      	b.n	8014f40 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 8014f3e:	2300      	movs	r3, #0
}
 8014f40:	4618      	mov	r0, r3
 8014f42:	3718      	adds	r7, #24
 8014f44:	46bd      	mov	sp, r7
 8014f46:	bd80      	pop	{r7, pc}

08014f48 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8014f48:	b5b0      	push	{r4, r5, r7, lr}
 8014f4a:	b084      	sub	sp, #16
 8014f4c:	af00      	add	r7, sp, #0
 8014f4e:	6078      	str	r0, [r7, #4]
 8014f50:	460b      	mov	r3, r1
 8014f52:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f54:	687b      	ldr	r3, [r7, #4]
 8014f56:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f5a:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8014f5c:	68fa      	ldr	r2, [r7, #12]
 8014f5e:	f248 0370 	movw	r3, #32880	; 0x8070
 8014f62:	4413      	add	r3, r2
 8014f64:	681a      	ldr	r2, [r3, #0]
 8014f66:	68f9      	ldr	r1, [r7, #12]
 8014f68:	f248 0364 	movw	r3, #32868	; 0x8064
 8014f6c:	440b      	add	r3, r1
 8014f6e:	881b      	ldrh	r3, [r3, #0]
 8014f70:	fb03 f302 	mul.w	r3, r3, r2
 8014f74:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8014f76:	68bb      	ldr	r3, [r7, #8]
 8014f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8014f7c:	bf28      	it	cs
 8014f7e:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8014f82:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014f8a:	691c      	ldr	r4, [r3, #16]
 8014f8c:	68fb      	ldr	r3, [r7, #12]
 8014f8e:	f103 0110 	add.w	r1, r3, #16
 8014f92:	68fa      	ldr	r2, [r7, #12]
 8014f94:	f248 036c 	movw	r3, #32876	; 0x806c
 8014f98:	4413      	add	r3, r2
 8014f9a:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8014f9c:	68fa      	ldr	r2, [r7, #12]
 8014f9e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fa2:	4413      	add	r3, r2
 8014fa4:	881b      	ldrh	r3, [r3, #0]
 8014fa6:	461a      	mov	r2, r3
 8014fa8:	68bb      	ldr	r3, [r7, #8]
 8014faa:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8014fae:	b29b      	uxth	r3, r3
 8014fb0:	78f8      	ldrb	r0, [r7, #3]
 8014fb2:	462a      	mov	r2, r5
 8014fb4:	47a0      	blx	r4
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	da08      	bge.n	8014fce <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8014fbc:	78f9      	ldrb	r1, [r7, #3]
 8014fbe:	2311      	movs	r3, #17
 8014fc0:	2204      	movs	r2, #4
 8014fc2:	6878      	ldr	r0, [r7, #4]
 8014fc4:	f7ff fb62 	bl	801468c <SCSI_SenseCode>
    return -1;
 8014fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8014fcc:	e046      	b.n	801505c <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f103 0210 	add.w	r2, r3, #16
 8014fd4:	68bb      	ldr	r3, [r7, #8]
 8014fd6:	2181      	movs	r1, #129	; 0x81
 8014fd8:	6878      	ldr	r0, [r7, #4]
 8014fda:	f004 f95d 	bl	8019298 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8014fde:	68fa      	ldr	r2, [r7, #12]
 8014fe0:	f248 036c 	movw	r3, #32876	; 0x806c
 8014fe4:	4413      	add	r3, r2
 8014fe6:	681a      	ldr	r2, [r3, #0]
 8014fe8:	68f9      	ldr	r1, [r7, #12]
 8014fea:	f248 0364 	movw	r3, #32868	; 0x8064
 8014fee:	440b      	add	r3, r1
 8014ff0:	881b      	ldrh	r3, [r3, #0]
 8014ff2:	4619      	mov	r1, r3
 8014ff4:	68bb      	ldr	r3, [r7, #8]
 8014ff6:	fbb3 f3f1 	udiv	r3, r3, r1
 8014ffa:	441a      	add	r2, r3
 8014ffc:	68f9      	ldr	r1, [r7, #12]
 8014ffe:	f248 036c 	movw	r3, #32876	; 0x806c
 8015002:	440b      	add	r3, r1
 8015004:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015006:	68fa      	ldr	r2, [r7, #12]
 8015008:	f248 0370 	movw	r3, #32880	; 0x8070
 801500c:	4413      	add	r3, r2
 801500e:	681a      	ldr	r2, [r3, #0]
 8015010:	68f9      	ldr	r1, [r7, #12]
 8015012:	f248 0364 	movw	r3, #32868	; 0x8064
 8015016:	440b      	add	r3, r1
 8015018:	881b      	ldrh	r3, [r3, #0]
 801501a:	4619      	mov	r1, r3
 801501c:	68bb      	ldr	r3, [r7, #8]
 801501e:	fbb3 f3f1 	udiv	r3, r3, r1
 8015022:	1ad2      	subs	r2, r2, r3
 8015024:	68f9      	ldr	r1, [r7, #12]
 8015026:	f248 0370 	movw	r3, #32880	; 0x8070
 801502a:	440b      	add	r3, r1
 801502c:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 801502e:	68fa      	ldr	r2, [r7, #12]
 8015030:	f248 0338 	movw	r3, #32824	; 0x8038
 8015034:	4413      	add	r3, r2
 8015036:	681a      	ldr	r2, [r3, #0]
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	1ad2      	subs	r2, r2, r3
 801503c:	68f9      	ldr	r1, [r7, #12]
 801503e:	f248 0338 	movw	r3, #32824	; 0x8038
 8015042:	440b      	add	r3, r1
 8015044:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015046:	68fa      	ldr	r2, [r7, #12]
 8015048:	f248 0370 	movw	r3, #32880	; 0x8070
 801504c:	4413      	add	r3, r2
 801504e:	681b      	ldr	r3, [r3, #0]
 8015050:	2b00      	cmp	r3, #0
 8015052:	d102      	bne.n	801505a <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	2203      	movs	r2, #3
 8015058:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 801505a:	2300      	movs	r3, #0
}
 801505c:	4618      	mov	r0, r3
 801505e:	3710      	adds	r7, #16
 8015060:	46bd      	mov	sp, r7
 8015062:	bdb0      	pop	{r4, r5, r7, pc}

08015064 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 8015064:	b5b0      	push	{r4, r5, r7, lr}
 8015066:	b084      	sub	sp, #16
 8015068:	af00      	add	r7, sp, #0
 801506a:	6078      	str	r0, [r7, #4]
 801506c:	460b      	mov	r3, r1
 801506e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015076:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015078:	68fa      	ldr	r2, [r7, #12]
 801507a:	f248 0370 	movw	r3, #32880	; 0x8070
 801507e:	4413      	add	r3, r2
 8015080:	681a      	ldr	r2, [r3, #0]
 8015082:	68f9      	ldr	r1, [r7, #12]
 8015084:	f248 0364 	movw	r3, #32868	; 0x8064
 8015088:	440b      	add	r3, r1
 801508a:	881b      	ldrh	r3, [r3, #0]
 801508c:	fb03 f302 	mul.w	r3, r3, r2
 8015090:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8015092:	68bb      	ldr	r3, [r7, #8]
 8015094:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015098:	bf28      	it	cs
 801509a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801509e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80150a0:	687b      	ldr	r3, [r7, #4]
 80150a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80150a6:	695c      	ldr	r4, [r3, #20]
 80150a8:	68fb      	ldr	r3, [r7, #12]
 80150aa:	f103 0110 	add.w	r1, r3, #16
 80150ae:	68fa      	ldr	r2, [r7, #12]
 80150b0:	f248 036c 	movw	r3, #32876	; 0x806c
 80150b4:	4413      	add	r3, r2
 80150b6:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 80150b8:	68fa      	ldr	r2, [r7, #12]
 80150ba:	f248 0364 	movw	r3, #32868	; 0x8064
 80150be:	4413      	add	r3, r2
 80150c0:	881b      	ldrh	r3, [r3, #0]
 80150c2:	461a      	mov	r2, r3
 80150c4:	68bb      	ldr	r3, [r7, #8]
 80150c6:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 80150ca:	b29b      	uxth	r3, r3
 80150cc:	78f8      	ldrb	r0, [r7, #3]
 80150ce:	462a      	mov	r2, r5
 80150d0:	47a0      	blx	r4
 80150d2:	4603      	mov	r3, r0
 80150d4:	2b00      	cmp	r3, #0
 80150d6:	da08      	bge.n	80150ea <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 80150d8:	78f9      	ldrb	r1, [r7, #3]
 80150da:	2303      	movs	r3, #3
 80150dc:	2204      	movs	r2, #4
 80150de:	6878      	ldr	r0, [r7, #4]
 80150e0:	f7ff fad4 	bl	801468c <SCSI_SenseCode>
    return -1;
 80150e4:	f04f 33ff 	mov.w	r3, #4294967295
 80150e8:	e05a      	b.n	80151a0 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 80150ea:	68fa      	ldr	r2, [r7, #12]
 80150ec:	f248 036c 	movw	r3, #32876	; 0x806c
 80150f0:	4413      	add	r3, r2
 80150f2:	681a      	ldr	r2, [r3, #0]
 80150f4:	68f9      	ldr	r1, [r7, #12]
 80150f6:	f248 0364 	movw	r3, #32868	; 0x8064
 80150fa:	440b      	add	r3, r1
 80150fc:	881b      	ldrh	r3, [r3, #0]
 80150fe:	4619      	mov	r1, r3
 8015100:	68bb      	ldr	r3, [r7, #8]
 8015102:	fbb3 f3f1 	udiv	r3, r3, r1
 8015106:	441a      	add	r2, r3
 8015108:	68f9      	ldr	r1, [r7, #12]
 801510a:	f248 036c 	movw	r3, #32876	; 0x806c
 801510e:	440b      	add	r3, r1
 8015110:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015112:	68fa      	ldr	r2, [r7, #12]
 8015114:	f248 0370 	movw	r3, #32880	; 0x8070
 8015118:	4413      	add	r3, r2
 801511a:	681a      	ldr	r2, [r3, #0]
 801511c:	68f9      	ldr	r1, [r7, #12]
 801511e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015122:	440b      	add	r3, r1
 8015124:	881b      	ldrh	r3, [r3, #0]
 8015126:	4619      	mov	r1, r3
 8015128:	68bb      	ldr	r3, [r7, #8]
 801512a:	fbb3 f3f1 	udiv	r3, r3, r1
 801512e:	1ad2      	subs	r2, r2, r3
 8015130:	68f9      	ldr	r1, [r7, #12]
 8015132:	f248 0370 	movw	r3, #32880	; 0x8070
 8015136:	440b      	add	r3, r1
 8015138:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 801513a:	68fa      	ldr	r2, [r7, #12]
 801513c:	f248 0338 	movw	r3, #32824	; 0x8038
 8015140:	4413      	add	r3, r2
 8015142:	681a      	ldr	r2, [r3, #0]
 8015144:	68bb      	ldr	r3, [r7, #8]
 8015146:	1ad2      	subs	r2, r2, r3
 8015148:	68f9      	ldr	r1, [r7, #12]
 801514a:	f248 0338 	movw	r3, #32824	; 0x8038
 801514e:	440b      	add	r3, r1
 8015150:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 8015152:	68fa      	ldr	r2, [r7, #12]
 8015154:	f248 0370 	movw	r3, #32880	; 0x8070
 8015158:	4413      	add	r3, r2
 801515a:	681b      	ldr	r3, [r3, #0]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d104      	bne.n	801516a <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8015160:	2100      	movs	r1, #0
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f7fe fde2 	bl	8013d2c <MSC_BOT_SendCSW>
 8015168:	e019      	b.n	801519e <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 801516a:	68fa      	ldr	r2, [r7, #12]
 801516c:	f248 0370 	movw	r3, #32880	; 0x8070
 8015170:	4413      	add	r3, r2
 8015172:	681a      	ldr	r2, [r3, #0]
 8015174:	68f9      	ldr	r1, [r7, #12]
 8015176:	f248 0364 	movw	r3, #32868	; 0x8064
 801517a:	440b      	add	r3, r1
 801517c:	881b      	ldrh	r3, [r3, #0]
 801517e:	fb03 f302 	mul.w	r3, r3, r2
 8015182:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015186:	bf28      	it	cs
 8015188:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801518c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 801518e:	68fb      	ldr	r3, [r7, #12]
 8015190:	f103 0210 	add.w	r2, r3, #16
 8015194:	68bb      	ldr	r3, [r7, #8]
 8015196:	2101      	movs	r1, #1
 8015198:	6878      	ldr	r0, [r7, #4]
 801519a:	f004 f89e 	bl	80192da <USBD_LL_PrepareReceive>
  }

  return 0;
 801519e:	2300      	movs	r3, #0
}
 80151a0:	4618      	mov	r0, r3
 80151a2:	3710      	adds	r7, #16
 80151a4:	46bd      	mov	sp, r7
 80151a6:	bdb0      	pop	{r4, r5, r7, pc}

080151a8 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 80151a8:	b480      	push	{r7}
 80151aa:	b087      	sub	sp, #28
 80151ac:	af00      	add	r7, sp, #0
 80151ae:	60f8      	str	r0, [r7, #12]
 80151b0:	60b9      	str	r1, [r7, #8]
 80151b2:	4613      	mov	r3, r2
 80151b4:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 80151b6:	88fb      	ldrh	r3, [r7, #6]
 80151b8:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 80151ba:	8afa      	ldrh	r2, [r7, #22]
 80151bc:	68fb      	ldr	r3, [r7, #12]
 80151be:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 80151c0:	e00b      	b.n	80151da <SCSI_UpdateBotData+0x32>
  {
    len--;
 80151c2:	8afb      	ldrh	r3, [r7, #22]
 80151c4:	3b01      	subs	r3, #1
 80151c6:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 80151c8:	8afb      	ldrh	r3, [r7, #22]
 80151ca:	68ba      	ldr	r2, [r7, #8]
 80151cc:	441a      	add	r2, r3
 80151ce:	8afb      	ldrh	r3, [r7, #22]
 80151d0:	7811      	ldrb	r1, [r2, #0]
 80151d2:	68fa      	ldr	r2, [r7, #12]
 80151d4:	4413      	add	r3, r2
 80151d6:	460a      	mov	r2, r1
 80151d8:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 80151da:	8afb      	ldrh	r3, [r7, #22]
 80151dc:	2b00      	cmp	r3, #0
 80151de:	d1f0      	bne.n	80151c2 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 80151e0:	2300      	movs	r3, #0
}
 80151e2:	4618      	mov	r0, r3
 80151e4:	371c      	adds	r7, #28
 80151e6:	46bd      	mov	sp, r7
 80151e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ec:	4770      	bx	lr

080151ee <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80151ee:	b580      	push	{r7, lr}
 80151f0:	b086      	sub	sp, #24
 80151f2:	af00      	add	r7, sp, #0
 80151f4:	60f8      	str	r0, [r7, #12]
 80151f6:	60b9      	str	r1, [r7, #8]
 80151f8:	4613      	mov	r3, r2
 80151fa:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80151fc:	68fb      	ldr	r3, [r7, #12]
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d101      	bne.n	8015206 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015202:	2303      	movs	r3, #3
 8015204:	e025      	b.n	8015252 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801520c:	2b00      	cmp	r3, #0
 801520e:	d003      	beq.n	8015218 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015210:	68fb      	ldr	r3, [r7, #12]
 8015212:	2200      	movs	r2, #0
 8015214:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015218:	68fb      	ldr	r3, [r7, #12]
 801521a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 801521e:	2b00      	cmp	r3, #0
 8015220:	d003      	beq.n	801522a <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015222:	68fb      	ldr	r3, [r7, #12]
 8015224:	2200      	movs	r2, #0
 8015226:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 801522a:	68bb      	ldr	r3, [r7, #8]
 801522c:	2b00      	cmp	r3, #0
 801522e:	d003      	beq.n	8015238 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015230:	68fb      	ldr	r3, [r7, #12]
 8015232:	68ba      	ldr	r2, [r7, #8]
 8015234:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015238:	68fb      	ldr	r3, [r7, #12]
 801523a:	2201      	movs	r2, #1
 801523c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015240:	68fb      	ldr	r3, [r7, #12]
 8015242:	79fa      	ldrb	r2, [r7, #7]
 8015244:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015246:	68f8      	ldr	r0, [r7, #12]
 8015248:	f003 fece 	bl	8018fe8 <USBD_LL_Init>
 801524c:	4603      	mov	r3, r0
 801524e:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015250:	7dfb      	ldrb	r3, [r7, #23]
}
 8015252:	4618      	mov	r0, r3
 8015254:	3718      	adds	r7, #24
 8015256:	46bd      	mov	sp, r7
 8015258:	bd80      	pop	{r7, pc}

0801525a <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 801525a:	b580      	push	{r7, lr}
 801525c:	b084      	sub	sp, #16
 801525e:	af00      	add	r7, sp, #0
 8015260:	6078      	str	r0, [r7, #4]
 8015262:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015264:	2300      	movs	r3, #0
 8015266:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015268:	683b      	ldr	r3, [r7, #0]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d101      	bne.n	8015272 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 801526e:	2303      	movs	r3, #3
 8015270:	e010      	b.n	8015294 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	683a      	ldr	r2, [r7, #0]
 8015276:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015282:	f107 020e 	add.w	r2, r7, #14
 8015286:	4610      	mov	r0, r2
 8015288:	4798      	blx	r3
 801528a:	4602      	mov	r2, r0
 801528c:	687b      	ldr	r3, [r7, #4]
 801528e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015292:	2300      	movs	r3, #0
}
 8015294:	4618      	mov	r0, r3
 8015296:	3710      	adds	r7, #16
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80152a4:	6878      	ldr	r0, [r7, #4]
 80152a6:	f003 feef 	bl	8019088 <USBD_LL_Start>
 80152aa:	4603      	mov	r3, r0
}
 80152ac:	4618      	mov	r0, r3
 80152ae:	3708      	adds	r7, #8
 80152b0:	46bd      	mov	sp, r7
 80152b2:	bd80      	pop	{r7, pc}

080152b4 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80152b4:	b480      	push	{r7}
 80152b6:	b083      	sub	sp, #12
 80152b8:	af00      	add	r7, sp, #0
 80152ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80152bc:	2300      	movs	r3, #0
}
 80152be:	4618      	mov	r0, r3
 80152c0:	370c      	adds	r7, #12
 80152c2:	46bd      	mov	sp, r7
 80152c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152c8:	4770      	bx	lr

080152ca <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80152ca:	b580      	push	{r7, lr}
 80152cc:	b084      	sub	sp, #16
 80152ce:	af00      	add	r7, sp, #0
 80152d0:	6078      	str	r0, [r7, #4]
 80152d2:	460b      	mov	r3, r1
 80152d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80152d6:	2303      	movs	r3, #3
 80152d8:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152e0:	2b00      	cmp	r3, #0
 80152e2:	d009      	beq.n	80152f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80152ea:	681b      	ldr	r3, [r3, #0]
 80152ec:	78fa      	ldrb	r2, [r7, #3]
 80152ee:	4611      	mov	r1, r2
 80152f0:	6878      	ldr	r0, [r7, #4]
 80152f2:	4798      	blx	r3
 80152f4:	4603      	mov	r3, r0
 80152f6:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80152f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80152fa:	4618      	mov	r0, r3
 80152fc:	3710      	adds	r7, #16
 80152fe:	46bd      	mov	sp, r7
 8015300:	bd80      	pop	{r7, pc}

08015302 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015302:	b580      	push	{r7, lr}
 8015304:	b082      	sub	sp, #8
 8015306:	af00      	add	r7, sp, #0
 8015308:	6078      	str	r0, [r7, #4]
 801530a:	460b      	mov	r3, r1
 801530c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015314:	2b00      	cmp	r3, #0
 8015316:	d007      	beq.n	8015328 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801531e:	685b      	ldr	r3, [r3, #4]
 8015320:	78fa      	ldrb	r2, [r7, #3]
 8015322:	4611      	mov	r1, r2
 8015324:	6878      	ldr	r0, [r7, #4]
 8015326:	4798      	blx	r3
  }

  return USBD_OK;
 8015328:	2300      	movs	r3, #0
}
 801532a:	4618      	mov	r0, r3
 801532c:	3708      	adds	r7, #8
 801532e:	46bd      	mov	sp, r7
 8015330:	bd80      	pop	{r7, pc}

08015332 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015332:	b580      	push	{r7, lr}
 8015334:	b084      	sub	sp, #16
 8015336:	af00      	add	r7, sp, #0
 8015338:	6078      	str	r0, [r7, #4]
 801533a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015342:	6839      	ldr	r1, [r7, #0]
 8015344:	4618      	mov	r0, r3
 8015346:	f000 ff2b 	bl	80161a0 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	2201      	movs	r2, #1
 801534e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015358:	461a      	mov	r2, r3
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015366:	f003 031f 	and.w	r3, r3, #31
 801536a:	2b01      	cmp	r3, #1
 801536c:	d00e      	beq.n	801538c <USBD_LL_SetupStage+0x5a>
 801536e:	2b01      	cmp	r3, #1
 8015370:	d302      	bcc.n	8015378 <USBD_LL_SetupStage+0x46>
 8015372:	2b02      	cmp	r3, #2
 8015374:	d014      	beq.n	80153a0 <USBD_LL_SetupStage+0x6e>
 8015376:	e01d      	b.n	80153b4 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015378:	687b      	ldr	r3, [r7, #4]
 801537a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 801537e:	4619      	mov	r1, r3
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f000 fa17 	bl	80157b4 <USBD_StdDevReq>
 8015386:	4603      	mov	r3, r0
 8015388:	73fb      	strb	r3, [r7, #15]
      break;
 801538a:	e020      	b.n	80153ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015392:	4619      	mov	r1, r3
 8015394:	6878      	ldr	r0, [r7, #4]
 8015396:	f000 fa7b 	bl	8015890 <USBD_StdItfReq>
 801539a:	4603      	mov	r3, r0
 801539c:	73fb      	strb	r3, [r7, #15]
      break;
 801539e:	e016      	b.n	80153ce <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80153a6:	4619      	mov	r1, r3
 80153a8:	6878      	ldr	r0, [r7, #4]
 80153aa:	f000 fab7 	bl	801591c <USBD_StdEPReq>
 80153ae:	4603      	mov	r3, r0
 80153b0:	73fb      	strb	r3, [r7, #15]
      break;
 80153b2:	e00c      	b.n	80153ce <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80153ba:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80153be:	b2db      	uxtb	r3, r3
 80153c0:	4619      	mov	r1, r3
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f003 fedf 	bl	8019186 <USBD_LL_StallEP>
 80153c8:	4603      	mov	r3, r0
 80153ca:	73fb      	strb	r3, [r7, #15]
      break;
 80153cc:	bf00      	nop
  }

  return ret;
 80153ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80153d0:	4618      	mov	r0, r3
 80153d2:	3710      	adds	r7, #16
 80153d4:	46bd      	mov	sp, r7
 80153d6:	bd80      	pop	{r7, pc}

080153d8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80153d8:	b580      	push	{r7, lr}
 80153da:	b086      	sub	sp, #24
 80153dc:	af00      	add	r7, sp, #0
 80153de:	60f8      	str	r0, [r7, #12]
 80153e0:	460b      	mov	r3, r1
 80153e2:	607a      	str	r2, [r7, #4]
 80153e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80153e6:	7afb      	ldrb	r3, [r7, #11]
 80153e8:	2b00      	cmp	r3, #0
 80153ea:	d137      	bne.n	801545c <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 80153ec:	68fb      	ldr	r3, [r7, #12]
 80153ee:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80153f2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80153fa:	2b03      	cmp	r3, #3
 80153fc:	d14a      	bne.n	8015494 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80153fe:	693b      	ldr	r3, [r7, #16]
 8015400:	689a      	ldr	r2, [r3, #8]
 8015402:	693b      	ldr	r3, [r7, #16]
 8015404:	68db      	ldr	r3, [r3, #12]
 8015406:	429a      	cmp	r2, r3
 8015408:	d913      	bls.n	8015432 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 801540a:	693b      	ldr	r3, [r7, #16]
 801540c:	689a      	ldr	r2, [r3, #8]
 801540e:	693b      	ldr	r3, [r7, #16]
 8015410:	68db      	ldr	r3, [r3, #12]
 8015412:	1ad2      	subs	r2, r2, r3
 8015414:	693b      	ldr	r3, [r7, #16]
 8015416:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015418:	693b      	ldr	r3, [r7, #16]
 801541a:	68da      	ldr	r2, [r3, #12]
 801541c:	693b      	ldr	r3, [r7, #16]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	4293      	cmp	r3, r2
 8015422:	bf28      	it	cs
 8015424:	4613      	movcs	r3, r2
 8015426:	461a      	mov	r2, r3
 8015428:	6879      	ldr	r1, [r7, #4]
 801542a:	68f8      	ldr	r0, [r7, #12]
 801542c:	f000 ff8f 	bl	801634e <USBD_CtlContinueRx>
 8015430:	e030      	b.n	8015494 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015432:	68fb      	ldr	r3, [r7, #12]
 8015434:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	2b00      	cmp	r3, #0
 801543c:	d00a      	beq.n	8015454 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 801543e:	68fb      	ldr	r3, [r7, #12]
 8015440:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015444:	2b03      	cmp	r3, #3
 8015446:	d105      	bne.n	8015454 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015448:	68fb      	ldr	r3, [r7, #12]
 801544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801544e:	691b      	ldr	r3, [r3, #16]
 8015450:	68f8      	ldr	r0, [r7, #12]
 8015452:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015454:	68f8      	ldr	r0, [r7, #12]
 8015456:	f000 ff8b 	bl	8016370 <USBD_CtlSendStatus>
 801545a:	e01b      	b.n	8015494 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 801545c:	68fb      	ldr	r3, [r7, #12]
 801545e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015462:	699b      	ldr	r3, [r3, #24]
 8015464:	2b00      	cmp	r3, #0
 8015466:	d013      	beq.n	8015490 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015468:	68fb      	ldr	r3, [r7, #12]
 801546a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 801546e:	2b03      	cmp	r3, #3
 8015470:	d10e      	bne.n	8015490 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015472:	68fb      	ldr	r3, [r7, #12]
 8015474:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015478:	699b      	ldr	r3, [r3, #24]
 801547a:	7afa      	ldrb	r2, [r7, #11]
 801547c:	4611      	mov	r1, r2
 801547e:	68f8      	ldr	r0, [r7, #12]
 8015480:	4798      	blx	r3
 8015482:	4603      	mov	r3, r0
 8015484:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015486:	7dfb      	ldrb	r3, [r7, #23]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d003      	beq.n	8015494 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 801548c:	7dfb      	ldrb	r3, [r7, #23]
 801548e:	e002      	b.n	8015496 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015490:	2303      	movs	r3, #3
 8015492:	e000      	b.n	8015496 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015494:	2300      	movs	r3, #0
}
 8015496:	4618      	mov	r0, r3
 8015498:	3718      	adds	r7, #24
 801549a:	46bd      	mov	sp, r7
 801549c:	bd80      	pop	{r7, pc}

0801549e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 801549e:	b580      	push	{r7, lr}
 80154a0:	b086      	sub	sp, #24
 80154a2:	af00      	add	r7, sp, #0
 80154a4:	60f8      	str	r0, [r7, #12]
 80154a6:	460b      	mov	r3, r1
 80154a8:	607a      	str	r2, [r7, #4]
 80154aa:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80154ac:	7afb      	ldrb	r3, [r7, #11]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d16a      	bne.n	8015588 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 80154b2:	68fb      	ldr	r3, [r7, #12]
 80154b4:	3314      	adds	r3, #20
 80154b6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80154b8:	68fb      	ldr	r3, [r7, #12]
 80154ba:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80154be:	2b02      	cmp	r3, #2
 80154c0:	d155      	bne.n	801556e <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	689a      	ldr	r2, [r3, #8]
 80154c6:	693b      	ldr	r3, [r7, #16]
 80154c8:	68db      	ldr	r3, [r3, #12]
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d914      	bls.n	80154f8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80154ce:	693b      	ldr	r3, [r7, #16]
 80154d0:	689a      	ldr	r2, [r3, #8]
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	68db      	ldr	r3, [r3, #12]
 80154d6:	1ad2      	subs	r2, r2, r3
 80154d8:	693b      	ldr	r3, [r7, #16]
 80154da:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80154dc:	693b      	ldr	r3, [r7, #16]
 80154de:	689b      	ldr	r3, [r3, #8]
 80154e0:	461a      	mov	r2, r3
 80154e2:	6879      	ldr	r1, [r7, #4]
 80154e4:	68f8      	ldr	r0, [r7, #12]
 80154e6:	f000 ff21 	bl	801632c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80154ea:	2300      	movs	r3, #0
 80154ec:	2200      	movs	r2, #0
 80154ee:	2100      	movs	r1, #0
 80154f0:	68f8      	ldr	r0, [r7, #12]
 80154f2:	f003 fef2 	bl	80192da <USBD_LL_PrepareReceive>
 80154f6:	e03a      	b.n	801556e <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	68da      	ldr	r2, [r3, #12]
 80154fc:	693b      	ldr	r3, [r7, #16]
 80154fe:	689b      	ldr	r3, [r3, #8]
 8015500:	429a      	cmp	r2, r3
 8015502:	d11c      	bne.n	801553e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	685a      	ldr	r2, [r3, #4]
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 801550c:	429a      	cmp	r2, r3
 801550e:	d316      	bcc.n	801553e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015510:	693b      	ldr	r3, [r7, #16]
 8015512:	685a      	ldr	r2, [r3, #4]
 8015514:	68fb      	ldr	r3, [r7, #12]
 8015516:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 801551a:	429a      	cmp	r2, r3
 801551c:	d20f      	bcs.n	801553e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 801551e:	2200      	movs	r2, #0
 8015520:	2100      	movs	r1, #0
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f000 ff02 	bl	801632c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	2200      	movs	r2, #0
 801552c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015530:	2300      	movs	r3, #0
 8015532:	2200      	movs	r2, #0
 8015534:	2100      	movs	r1, #0
 8015536:	68f8      	ldr	r0, [r7, #12]
 8015538:	f003 fecf 	bl	80192da <USBD_LL_PrepareReceive>
 801553c:	e017      	b.n	801556e <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	2b00      	cmp	r3, #0
 8015548:	d00a      	beq.n	8015560 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801554a:	68fb      	ldr	r3, [r7, #12]
 801554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015550:	2b03      	cmp	r3, #3
 8015552:	d105      	bne.n	8015560 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801555a:	68db      	ldr	r3, [r3, #12]
 801555c:	68f8      	ldr	r0, [r7, #12]
 801555e:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015560:	2180      	movs	r1, #128	; 0x80
 8015562:	68f8      	ldr	r0, [r7, #12]
 8015564:	f003 fe0f 	bl	8019186 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015568:	68f8      	ldr	r0, [r7, #12]
 801556a:	f000 ff14 	bl	8016396 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 801556e:	68fb      	ldr	r3, [r7, #12]
 8015570:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015574:	2b01      	cmp	r3, #1
 8015576:	d123      	bne.n	80155c0 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015578:	68f8      	ldr	r0, [r7, #12]
 801557a:	f7ff fe9b 	bl	80152b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 801557e:	68fb      	ldr	r3, [r7, #12]
 8015580:	2200      	movs	r2, #0
 8015582:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015586:	e01b      	b.n	80155c0 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015588:	68fb      	ldr	r3, [r7, #12]
 801558a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801558e:	695b      	ldr	r3, [r3, #20]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d013      	beq.n	80155bc <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015594:	68fb      	ldr	r3, [r7, #12]
 8015596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 801559a:	2b03      	cmp	r3, #3
 801559c:	d10e      	bne.n	80155bc <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 801559e:	68fb      	ldr	r3, [r7, #12]
 80155a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80155a4:	695b      	ldr	r3, [r3, #20]
 80155a6:	7afa      	ldrb	r2, [r7, #11]
 80155a8:	4611      	mov	r1, r2
 80155aa:	68f8      	ldr	r0, [r7, #12]
 80155ac:	4798      	blx	r3
 80155ae:	4603      	mov	r3, r0
 80155b0:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 80155b2:	7dfb      	ldrb	r3, [r7, #23]
 80155b4:	2b00      	cmp	r3, #0
 80155b6:	d003      	beq.n	80155c0 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 80155b8:	7dfb      	ldrb	r3, [r7, #23]
 80155ba:	e002      	b.n	80155c2 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80155bc:	2303      	movs	r3, #3
 80155be:	e000      	b.n	80155c2 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 80155c0:	2300      	movs	r3, #0
}
 80155c2:	4618      	mov	r0, r3
 80155c4:	3718      	adds	r7, #24
 80155c6:	46bd      	mov	sp, r7
 80155c8:	bd80      	pop	{r7, pc}

080155ca <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80155ca:	b580      	push	{r7, lr}
 80155cc:	b082      	sub	sp, #8
 80155ce:	af00      	add	r7, sp, #0
 80155d0:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	2201      	movs	r2, #1
 80155d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	2200      	movs	r2, #0
 80155de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	2200      	movs	r2, #0
 80155e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80155e8:	687b      	ldr	r3, [r7, #4]
 80155ea:	2200      	movs	r2, #0
 80155ec:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 80155f0:	687b      	ldr	r3, [r7, #4]
 80155f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80155f6:	2b00      	cmp	r3, #0
 80155f8:	d009      	beq.n	801560e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	687a      	ldr	r2, [r7, #4]
 8015604:	6852      	ldr	r2, [r2, #4]
 8015606:	b2d2      	uxtb	r2, r2
 8015608:	4611      	mov	r1, r2
 801560a:	6878      	ldr	r0, [r7, #4]
 801560c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801560e:	2340      	movs	r3, #64	; 0x40
 8015610:	2200      	movs	r2, #0
 8015612:	2100      	movs	r1, #0
 8015614:	6878      	ldr	r0, [r7, #4]
 8015616:	f003 fd52 	bl	80190be <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	2201      	movs	r2, #1
 801561e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2240      	movs	r2, #64	; 0x40
 8015626:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801562a:	2340      	movs	r3, #64	; 0x40
 801562c:	2200      	movs	r2, #0
 801562e:	2180      	movs	r1, #128	; 0x80
 8015630:	6878      	ldr	r0, [r7, #4]
 8015632:	f003 fd44 	bl	80190be <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015636:	687b      	ldr	r3, [r7, #4]
 8015638:	2201      	movs	r2, #1
 801563a:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	2240      	movs	r2, #64	; 0x40
 8015640:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015642:	2300      	movs	r3, #0
}
 8015644:	4618      	mov	r0, r3
 8015646:	3708      	adds	r7, #8
 8015648:	46bd      	mov	sp, r7
 801564a:	bd80      	pop	{r7, pc}

0801564c <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801564c:	b480      	push	{r7}
 801564e:	b083      	sub	sp, #12
 8015650:	af00      	add	r7, sp, #0
 8015652:	6078      	str	r0, [r7, #4]
 8015654:	460b      	mov	r3, r1
 8015656:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015658:	687b      	ldr	r3, [r7, #4]
 801565a:	78fa      	ldrb	r2, [r7, #3]
 801565c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801565e:	2300      	movs	r3, #0
}
 8015660:	4618      	mov	r0, r3
 8015662:	370c      	adds	r7, #12
 8015664:	46bd      	mov	sp, r7
 8015666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801566a:	4770      	bx	lr

0801566c <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801566c:	b480      	push	{r7}
 801566e:	b083      	sub	sp, #12
 8015670:	af00      	add	r7, sp, #0
 8015672:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 801567a:	687b      	ldr	r3, [r7, #4]
 801567c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	2204      	movs	r2, #4
 8015684:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015688:	2300      	movs	r3, #0
}
 801568a:	4618      	mov	r0, r3
 801568c:	370c      	adds	r7, #12
 801568e:	46bd      	mov	sp, r7
 8015690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015694:	4770      	bx	lr

08015696 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015696:	b480      	push	{r7}
 8015698:	b083      	sub	sp, #12
 801569a:	af00      	add	r7, sp, #0
 801569c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156a4:	2b04      	cmp	r3, #4
 80156a6:	d105      	bne.n	80156b4 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 80156ae:	687b      	ldr	r3, [r7, #4]
 80156b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80156b4:	2300      	movs	r3, #0
}
 80156b6:	4618      	mov	r0, r3
 80156b8:	370c      	adds	r7, #12
 80156ba:	46bd      	mov	sp, r7
 80156bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80156c0:	4770      	bx	lr

080156c2 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80156c2:	b580      	push	{r7, lr}
 80156c4:	b082      	sub	sp, #8
 80156c6:	af00      	add	r7, sp, #0
 80156c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80156ca:	687b      	ldr	r3, [r7, #4]
 80156cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80156d0:	2b03      	cmp	r3, #3
 80156d2:	d10b      	bne.n	80156ec <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156da:	69db      	ldr	r3, [r3, #28]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d005      	beq.n	80156ec <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80156e0:	687b      	ldr	r3, [r7, #4]
 80156e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80156e6:	69db      	ldr	r3, [r3, #28]
 80156e8:	6878      	ldr	r0, [r7, #4]
 80156ea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80156ec:	2300      	movs	r3, #0
}
 80156ee:	4618      	mov	r0, r3
 80156f0:	3708      	adds	r7, #8
 80156f2:	46bd      	mov	sp, r7
 80156f4:	bd80      	pop	{r7, pc}

080156f6 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80156f6:	b480      	push	{r7}
 80156f8:	b083      	sub	sp, #12
 80156fa:	af00      	add	r7, sp, #0
 80156fc:	6078      	str	r0, [r7, #4]
 80156fe:	460b      	mov	r3, r1
 8015700:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015702:	2300      	movs	r3, #0
}
 8015704:	4618      	mov	r0, r3
 8015706:	370c      	adds	r7, #12
 8015708:	46bd      	mov	sp, r7
 801570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801570e:	4770      	bx	lr

08015710 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015710:	b480      	push	{r7}
 8015712:	b083      	sub	sp, #12
 8015714:	af00      	add	r7, sp, #0
 8015716:	6078      	str	r0, [r7, #4]
 8015718:	460b      	mov	r3, r1
 801571a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 801571c:	2300      	movs	r3, #0
}
 801571e:	4618      	mov	r0, r3
 8015720:	370c      	adds	r7, #12
 8015722:	46bd      	mov	sp, r7
 8015724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015728:	4770      	bx	lr

0801572a <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801572a:	b480      	push	{r7}
 801572c:	b083      	sub	sp, #12
 801572e:	af00      	add	r7, sp, #0
 8015730:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	370c      	adds	r7, #12
 8015738:	46bd      	mov	sp, r7
 801573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573e:	4770      	bx	lr

08015740 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015740:	b580      	push	{r7, lr}
 8015742:	b082      	sub	sp, #8
 8015744:	af00      	add	r7, sp, #0
 8015746:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015748:	687b      	ldr	r3, [r7, #4]
 801574a:	2201      	movs	r2, #1
 801574c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015756:	2b00      	cmp	r3, #0
 8015758:	d009      	beq.n	801576e <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 801575a:	687b      	ldr	r3, [r7, #4]
 801575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	687a      	ldr	r2, [r7, #4]
 8015764:	6852      	ldr	r2, [r2, #4]
 8015766:	b2d2      	uxtb	r2, r2
 8015768:	4611      	mov	r1, r2
 801576a:	6878      	ldr	r0, [r7, #4]
 801576c:	4798      	blx	r3
  }

  return USBD_OK;
 801576e:	2300      	movs	r3, #0
}
 8015770:	4618      	mov	r0, r3
 8015772:	3708      	adds	r7, #8
 8015774:	46bd      	mov	sp, r7
 8015776:	bd80      	pop	{r7, pc}

08015778 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015778:	b480      	push	{r7}
 801577a:	b087      	sub	sp, #28
 801577c:	af00      	add	r7, sp, #0
 801577e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015780:	687b      	ldr	r3, [r7, #4]
 8015782:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	781b      	ldrb	r3, [r3, #0]
 8015788:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801578a:	697b      	ldr	r3, [r7, #20]
 801578c:	3301      	adds	r3, #1
 801578e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015790:	697b      	ldr	r3, [r7, #20]
 8015792:	781b      	ldrb	r3, [r3, #0]
 8015794:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015796:	8a3b      	ldrh	r3, [r7, #16]
 8015798:	021b      	lsls	r3, r3, #8
 801579a:	b21a      	sxth	r2, r3
 801579c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80157a0:	4313      	orrs	r3, r2
 80157a2:	b21b      	sxth	r3, r3
 80157a4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80157a6:	89fb      	ldrh	r3, [r7, #14]
}
 80157a8:	4618      	mov	r0, r3
 80157aa:	371c      	adds	r7, #28
 80157ac:	46bd      	mov	sp, r7
 80157ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157b2:	4770      	bx	lr

080157b4 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80157b4:	b580      	push	{r7, lr}
 80157b6:	b084      	sub	sp, #16
 80157b8:	af00      	add	r7, sp, #0
 80157ba:	6078      	str	r0, [r7, #4]
 80157bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80157be:	2300      	movs	r3, #0
 80157c0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80157c2:	683b      	ldr	r3, [r7, #0]
 80157c4:	781b      	ldrb	r3, [r3, #0]
 80157c6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80157ca:	2b20      	cmp	r3, #32
 80157cc:	d004      	beq.n	80157d8 <USBD_StdDevReq+0x24>
 80157ce:	2b40      	cmp	r3, #64	; 0x40
 80157d0:	d002      	beq.n	80157d8 <USBD_StdDevReq+0x24>
 80157d2:	2b00      	cmp	r3, #0
 80157d4:	d00a      	beq.n	80157ec <USBD_StdDevReq+0x38>
 80157d6:	e050      	b.n	801587a <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80157d8:	687b      	ldr	r3, [r7, #4]
 80157da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80157de:	689b      	ldr	r3, [r3, #8]
 80157e0:	6839      	ldr	r1, [r7, #0]
 80157e2:	6878      	ldr	r0, [r7, #4]
 80157e4:	4798      	blx	r3
 80157e6:	4603      	mov	r3, r0
 80157e8:	73fb      	strb	r3, [r7, #15]
    break;
 80157ea:	e04b      	b.n	8015884 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80157ec:	683b      	ldr	r3, [r7, #0]
 80157ee:	785b      	ldrb	r3, [r3, #1]
 80157f0:	2b09      	cmp	r3, #9
 80157f2:	d83c      	bhi.n	801586e <USBD_StdDevReq+0xba>
 80157f4:	a201      	add	r2, pc, #4	; (adr r2, 80157fc <USBD_StdDevReq+0x48>)
 80157f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157fa:	bf00      	nop
 80157fc:	08015851 	.word	0x08015851
 8015800:	08015865 	.word	0x08015865
 8015804:	0801586f 	.word	0x0801586f
 8015808:	0801585b 	.word	0x0801585b
 801580c:	0801586f 	.word	0x0801586f
 8015810:	0801582f 	.word	0x0801582f
 8015814:	08015825 	.word	0x08015825
 8015818:	0801586f 	.word	0x0801586f
 801581c:	08015847 	.word	0x08015847
 8015820:	08015839 	.word	0x08015839
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 8015824:	6839      	ldr	r1, [r7, #0]
 8015826:	6878      	ldr	r0, [r7, #4]
 8015828:	f000 f9ce 	bl	8015bc8 <USBD_GetDescriptor>
      break;
 801582c:	e024      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 801582e:	6839      	ldr	r1, [r7, #0]
 8015830:	6878      	ldr	r0, [r7, #4]
 8015832:	f000 fb33 	bl	8015e9c <USBD_SetAddress>
      break;
 8015836:	e01f      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 8015838:	6839      	ldr	r1, [r7, #0]
 801583a:	6878      	ldr	r0, [r7, #4]
 801583c:	f000 fb70 	bl	8015f20 <USBD_SetConfig>
 8015840:	4603      	mov	r3, r0
 8015842:	73fb      	strb	r3, [r7, #15]
      break;
 8015844:	e018      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 8015846:	6839      	ldr	r1, [r7, #0]
 8015848:	6878      	ldr	r0, [r7, #4]
 801584a:	f000 fc0d 	bl	8016068 <USBD_GetConfig>
      break;
 801584e:	e013      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 8015850:	6839      	ldr	r1, [r7, #0]
 8015852:	6878      	ldr	r0, [r7, #4]
 8015854:	f000 fc3c 	bl	80160d0 <USBD_GetStatus>
      break;
 8015858:	e00e      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 801585a:	6839      	ldr	r1, [r7, #0]
 801585c:	6878      	ldr	r0, [r7, #4]
 801585e:	f000 fc6a 	bl	8016136 <USBD_SetFeature>
      break;
 8015862:	e009      	b.n	8015878 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 8015864:	6839      	ldr	r1, [r7, #0]
 8015866:	6878      	ldr	r0, [r7, #4]
 8015868:	f000 fc79 	bl	801615e <USBD_ClrFeature>
      break;
 801586c:	e004      	b.n	8015878 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 801586e:	6839      	ldr	r1, [r7, #0]
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f000 fccf 	bl	8016214 <USBD_CtlError>
      break;
 8015876:	bf00      	nop
    }
    break;
 8015878:	e004      	b.n	8015884 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 801587a:	6839      	ldr	r1, [r7, #0]
 801587c:	6878      	ldr	r0, [r7, #4]
 801587e:	f000 fcc9 	bl	8016214 <USBD_CtlError>
    break;
 8015882:	bf00      	nop
  }

  return ret;
 8015884:	7bfb      	ldrb	r3, [r7, #15]
}
 8015886:	4618      	mov	r0, r3
 8015888:	3710      	adds	r7, #16
 801588a:	46bd      	mov	sp, r7
 801588c:	bd80      	pop	{r7, pc}
 801588e:	bf00      	nop

08015890 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015890:	b580      	push	{r7, lr}
 8015892:	b084      	sub	sp, #16
 8015894:	af00      	add	r7, sp, #0
 8015896:	6078      	str	r0, [r7, #4]
 8015898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801589a:	2300      	movs	r3, #0
 801589c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80158a6:	2b20      	cmp	r3, #32
 80158a8:	d003      	beq.n	80158b2 <USBD_StdItfReq+0x22>
 80158aa:	2b40      	cmp	r3, #64	; 0x40
 80158ac:	d001      	beq.n	80158b2 <USBD_StdItfReq+0x22>
 80158ae:	2b00      	cmp	r3, #0
 80158b0:	d12a      	bne.n	8015908 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 80158b2:	687b      	ldr	r3, [r7, #4]
 80158b4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158b8:	3b01      	subs	r3, #1
 80158ba:	2b02      	cmp	r3, #2
 80158bc:	d81d      	bhi.n	80158fa <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80158be:	683b      	ldr	r3, [r7, #0]
 80158c0:	889b      	ldrh	r3, [r3, #4]
 80158c2:	b2db      	uxtb	r3, r3
 80158c4:	2b01      	cmp	r3, #1
 80158c6:	d813      	bhi.n	80158f0 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80158ce:	689b      	ldr	r3, [r3, #8]
 80158d0:	6839      	ldr	r1, [r7, #0]
 80158d2:	6878      	ldr	r0, [r7, #4]
 80158d4:	4798      	blx	r3
 80158d6:	4603      	mov	r3, r0
 80158d8:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 80158da:	683b      	ldr	r3, [r7, #0]
 80158dc:	88db      	ldrh	r3, [r3, #6]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	d110      	bne.n	8015904 <USBD_StdItfReq+0x74>
 80158e2:	7bfb      	ldrb	r3, [r7, #15]
 80158e4:	2b00      	cmp	r3, #0
 80158e6:	d10d      	bne.n	8015904 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 80158e8:	6878      	ldr	r0, [r7, #4]
 80158ea:	f000 fd41 	bl	8016370 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 80158ee:	e009      	b.n	8015904 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 80158f0:	6839      	ldr	r1, [r7, #0]
 80158f2:	6878      	ldr	r0, [r7, #4]
 80158f4:	f000 fc8e 	bl	8016214 <USBD_CtlError>
      break;
 80158f8:	e004      	b.n	8015904 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 80158fa:	6839      	ldr	r1, [r7, #0]
 80158fc:	6878      	ldr	r0, [r7, #4]
 80158fe:	f000 fc89 	bl	8016214 <USBD_CtlError>
      break;
 8015902:	e000      	b.n	8015906 <USBD_StdItfReq+0x76>
      break;
 8015904:	bf00      	nop
    }
    break;
 8015906:	e004      	b.n	8015912 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8015908:	6839      	ldr	r1, [r7, #0]
 801590a:	6878      	ldr	r0, [r7, #4]
 801590c:	f000 fc82 	bl	8016214 <USBD_CtlError>
    break;
 8015910:	bf00      	nop
  }

  return ret;
 8015912:	7bfb      	ldrb	r3, [r7, #15]
}
 8015914:	4618      	mov	r0, r3
 8015916:	3710      	adds	r7, #16
 8015918:	46bd      	mov	sp, r7
 801591a:	bd80      	pop	{r7, pc}

0801591c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801591c:	b580      	push	{r7, lr}
 801591e:	b084      	sub	sp, #16
 8015920:	af00      	add	r7, sp, #0
 8015922:	6078      	str	r0, [r7, #4]
 8015924:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8015926:	2300      	movs	r3, #0
 8015928:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 801592a:	683b      	ldr	r3, [r7, #0]
 801592c:	889b      	ldrh	r3, [r3, #4]
 801592e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015930:	683b      	ldr	r3, [r7, #0]
 8015932:	781b      	ldrb	r3, [r3, #0]
 8015934:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015938:	2b20      	cmp	r3, #32
 801593a:	d004      	beq.n	8015946 <USBD_StdEPReq+0x2a>
 801593c:	2b40      	cmp	r3, #64	; 0x40
 801593e:	d002      	beq.n	8015946 <USBD_StdEPReq+0x2a>
 8015940:	2b00      	cmp	r3, #0
 8015942:	d00a      	beq.n	801595a <USBD_StdEPReq+0x3e>
 8015944:	e135      	b.n	8015bb2 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015946:	687b      	ldr	r3, [r7, #4]
 8015948:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801594c:	689b      	ldr	r3, [r3, #8]
 801594e:	6839      	ldr	r1, [r7, #0]
 8015950:	6878      	ldr	r0, [r7, #4]
 8015952:	4798      	blx	r3
 8015954:	4603      	mov	r3, r0
 8015956:	73fb      	strb	r3, [r7, #15]
    break;
 8015958:	e130      	b.n	8015bbc <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801595a:	683b      	ldr	r3, [r7, #0]
 801595c:	785b      	ldrb	r3, [r3, #1]
 801595e:	2b01      	cmp	r3, #1
 8015960:	d03e      	beq.n	80159e0 <USBD_StdEPReq+0xc4>
 8015962:	2b03      	cmp	r3, #3
 8015964:	d002      	beq.n	801596c <USBD_StdEPReq+0x50>
 8015966:	2b00      	cmp	r3, #0
 8015968:	d077      	beq.n	8015a5a <USBD_StdEPReq+0x13e>
 801596a:	e11c      	b.n	8015ba6 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015972:	2b02      	cmp	r3, #2
 8015974:	d002      	beq.n	801597c <USBD_StdEPReq+0x60>
 8015976:	2b03      	cmp	r3, #3
 8015978:	d015      	beq.n	80159a6 <USBD_StdEPReq+0x8a>
 801597a:	e02b      	b.n	80159d4 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801597c:	7bbb      	ldrb	r3, [r7, #14]
 801597e:	2b00      	cmp	r3, #0
 8015980:	d00c      	beq.n	801599c <USBD_StdEPReq+0x80>
 8015982:	7bbb      	ldrb	r3, [r7, #14]
 8015984:	2b80      	cmp	r3, #128	; 0x80
 8015986:	d009      	beq.n	801599c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8015988:	7bbb      	ldrb	r3, [r7, #14]
 801598a:	4619      	mov	r1, r3
 801598c:	6878      	ldr	r0, [r7, #4]
 801598e:	f003 fbfa 	bl	8019186 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015992:	2180      	movs	r1, #128	; 0x80
 8015994:	6878      	ldr	r0, [r7, #4]
 8015996:	f003 fbf6 	bl	8019186 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801599a:	e020      	b.n	80159de <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 801599c:	6839      	ldr	r1, [r7, #0]
 801599e:	6878      	ldr	r0, [r7, #4]
 80159a0:	f000 fc38 	bl	8016214 <USBD_CtlError>
        break;
 80159a4:	e01b      	b.n	80159de <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 80159a6:	683b      	ldr	r3, [r7, #0]
 80159a8:	885b      	ldrh	r3, [r3, #2]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d10e      	bne.n	80159cc <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80159ae:	7bbb      	ldrb	r3, [r7, #14]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d00b      	beq.n	80159cc <USBD_StdEPReq+0xb0>
 80159b4:	7bbb      	ldrb	r3, [r7, #14]
 80159b6:	2b80      	cmp	r3, #128	; 0x80
 80159b8:	d008      	beq.n	80159cc <USBD_StdEPReq+0xb0>
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	88db      	ldrh	r3, [r3, #6]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d104      	bne.n	80159cc <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 80159c2:	7bbb      	ldrb	r3, [r7, #14]
 80159c4:	4619      	mov	r1, r3
 80159c6:	6878      	ldr	r0, [r7, #4]
 80159c8:	f003 fbdd 	bl	8019186 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 80159cc:	6878      	ldr	r0, [r7, #4]
 80159ce:	f000 fccf 	bl	8016370 <USBD_CtlSendStatus>

        break;
 80159d2:	e004      	b.n	80159de <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 80159d4:	6839      	ldr	r1, [r7, #0]
 80159d6:	6878      	ldr	r0, [r7, #4]
 80159d8:	f000 fc1c 	bl	8016214 <USBD_CtlError>
        break;
 80159dc:	bf00      	nop
      }
      break;
 80159de:	e0e7      	b.n	8015bb0 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80159e6:	2b02      	cmp	r3, #2
 80159e8:	d002      	beq.n	80159f0 <USBD_StdEPReq+0xd4>
 80159ea:	2b03      	cmp	r3, #3
 80159ec:	d015      	beq.n	8015a1a <USBD_StdEPReq+0xfe>
 80159ee:	e02d      	b.n	8015a4c <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80159f0:	7bbb      	ldrb	r3, [r7, #14]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d00c      	beq.n	8015a10 <USBD_StdEPReq+0xf4>
 80159f6:	7bbb      	ldrb	r3, [r7, #14]
 80159f8:	2b80      	cmp	r3, #128	; 0x80
 80159fa:	d009      	beq.n	8015a10 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 80159fc:	7bbb      	ldrb	r3, [r7, #14]
 80159fe:	4619      	mov	r1, r3
 8015a00:	6878      	ldr	r0, [r7, #4]
 8015a02:	f003 fbc0 	bl	8019186 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a06:	2180      	movs	r1, #128	; 0x80
 8015a08:	6878      	ldr	r0, [r7, #4]
 8015a0a:	f003 fbbc 	bl	8019186 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 8015a0e:	e023      	b.n	8015a58 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8015a10:	6839      	ldr	r1, [r7, #0]
 8015a12:	6878      	ldr	r0, [r7, #4]
 8015a14:	f000 fbfe 	bl	8016214 <USBD_CtlError>
        break;
 8015a18:	e01e      	b.n	8015a58 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8015a1a:	683b      	ldr	r3, [r7, #0]
 8015a1c:	885b      	ldrh	r3, [r3, #2]
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d119      	bne.n	8015a56 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 8015a22:	7bbb      	ldrb	r3, [r7, #14]
 8015a24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d004      	beq.n	8015a36 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8015a2c:	7bbb      	ldrb	r3, [r7, #14]
 8015a2e:	4619      	mov	r1, r3
 8015a30:	6878      	ldr	r0, [r7, #4]
 8015a32:	f003 fbc7 	bl	80191c4 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 8015a36:	6878      	ldr	r0, [r7, #4]
 8015a38:	f000 fc9a 	bl	8016370 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a42:	689b      	ldr	r3, [r3, #8]
 8015a44:	6839      	ldr	r1, [r7, #0]
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	4798      	blx	r3
        }
        break;
 8015a4a:	e004      	b.n	8015a56 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 8015a4c:	6839      	ldr	r1, [r7, #0]
 8015a4e:	6878      	ldr	r0, [r7, #4]
 8015a50:	f000 fbe0 	bl	8016214 <USBD_CtlError>
        break;
 8015a54:	e000      	b.n	8015a58 <USBD_StdEPReq+0x13c>
        break;
 8015a56:	bf00      	nop
      }
      break;
 8015a58:	e0aa      	b.n	8015bb0 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a60:	2b02      	cmp	r3, #2
 8015a62:	d002      	beq.n	8015a6a <USBD_StdEPReq+0x14e>
 8015a64:	2b03      	cmp	r3, #3
 8015a66:	d032      	beq.n	8015ace <USBD_StdEPReq+0x1b2>
 8015a68:	e097      	b.n	8015b9a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8015a6a:	7bbb      	ldrb	r3, [r7, #14]
 8015a6c:	2b00      	cmp	r3, #0
 8015a6e:	d007      	beq.n	8015a80 <USBD_StdEPReq+0x164>
 8015a70:	7bbb      	ldrb	r3, [r7, #14]
 8015a72:	2b80      	cmp	r3, #128	; 0x80
 8015a74:	d004      	beq.n	8015a80 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 8015a76:	6839      	ldr	r1, [r7, #0]
 8015a78:	6878      	ldr	r0, [r7, #4]
 8015a7a:	f000 fbcb 	bl	8016214 <USBD_CtlError>
          break;
 8015a7e:	e091      	b.n	8015ba4 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015a80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015a84:	2b00      	cmp	r3, #0
 8015a86:	da0b      	bge.n	8015aa0 <USBD_StdEPReq+0x184>
 8015a88:	7bbb      	ldrb	r3, [r7, #14]
 8015a8a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015a8e:	4613      	mov	r3, r2
 8015a90:	009b      	lsls	r3, r3, #2
 8015a92:	4413      	add	r3, r2
 8015a94:	009b      	lsls	r3, r3, #2
 8015a96:	3310      	adds	r3, #16
 8015a98:	687a      	ldr	r2, [r7, #4]
 8015a9a:	4413      	add	r3, r2
 8015a9c:	3304      	adds	r3, #4
 8015a9e:	e00b      	b.n	8015ab8 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015aa0:	7bbb      	ldrb	r3, [r7, #14]
 8015aa2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015aa6:	4613      	mov	r3, r2
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	4413      	add	r3, r2
 8015aac:	009b      	lsls	r3, r3, #2
 8015aae:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015ab2:	687a      	ldr	r2, [r7, #4]
 8015ab4:	4413      	add	r3, r2
 8015ab6:	3304      	adds	r3, #4
 8015ab8:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 8015aba:	68bb      	ldr	r3, [r7, #8]
 8015abc:	2200      	movs	r2, #0
 8015abe:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015ac0:	68bb      	ldr	r3, [r7, #8]
 8015ac2:	2202      	movs	r2, #2
 8015ac4:	4619      	mov	r1, r3
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 fc15 	bl	80162f6 <USBD_CtlSendData>
        break;
 8015acc:	e06a      	b.n	8015ba4 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 8015ace:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015ad2:	2b00      	cmp	r3, #0
 8015ad4:	da11      	bge.n	8015afa <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8015ad6:	7bbb      	ldrb	r3, [r7, #14]
 8015ad8:	f003 020f 	and.w	r2, r3, #15
 8015adc:	6879      	ldr	r1, [r7, #4]
 8015ade:	4613      	mov	r3, r2
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	4413      	add	r3, r2
 8015ae4:	009b      	lsls	r3, r3, #2
 8015ae6:	440b      	add	r3, r1
 8015ae8:	3324      	adds	r3, #36	; 0x24
 8015aea:	881b      	ldrh	r3, [r3, #0]
 8015aec:	2b00      	cmp	r3, #0
 8015aee:	d117      	bne.n	8015b20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015af0:	6839      	ldr	r1, [r7, #0]
 8015af2:	6878      	ldr	r0, [r7, #4]
 8015af4:	f000 fb8e 	bl	8016214 <USBD_CtlError>
            break;
 8015af8:	e054      	b.n	8015ba4 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8015afa:	7bbb      	ldrb	r3, [r7, #14]
 8015afc:	f003 020f 	and.w	r2, r3, #15
 8015b00:	6879      	ldr	r1, [r7, #4]
 8015b02:	4613      	mov	r3, r2
 8015b04:	009b      	lsls	r3, r3, #2
 8015b06:	4413      	add	r3, r2
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	440b      	add	r3, r1
 8015b0c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8015b10:	881b      	ldrh	r3, [r3, #0]
 8015b12:	2b00      	cmp	r3, #0
 8015b14:	d104      	bne.n	8015b20 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8015b16:	6839      	ldr	r1, [r7, #0]
 8015b18:	6878      	ldr	r0, [r7, #4]
 8015b1a:	f000 fb7b 	bl	8016214 <USBD_CtlError>
            break;
 8015b1e:	e041      	b.n	8015ba4 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	da0b      	bge.n	8015b40 <USBD_StdEPReq+0x224>
 8015b28:	7bbb      	ldrb	r3, [r7, #14]
 8015b2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015b2e:	4613      	mov	r3, r2
 8015b30:	009b      	lsls	r3, r3, #2
 8015b32:	4413      	add	r3, r2
 8015b34:	009b      	lsls	r3, r3, #2
 8015b36:	3310      	adds	r3, #16
 8015b38:	687a      	ldr	r2, [r7, #4]
 8015b3a:	4413      	add	r3, r2
 8015b3c:	3304      	adds	r3, #4
 8015b3e:	e00b      	b.n	8015b58 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8015b40:	7bbb      	ldrb	r3, [r7, #14]
 8015b42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8015b46:	4613      	mov	r3, r2
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	4413      	add	r3, r2
 8015b4c:	009b      	lsls	r3, r3, #2
 8015b4e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8015b52:	687a      	ldr	r2, [r7, #4]
 8015b54:	4413      	add	r3, r2
 8015b56:	3304      	adds	r3, #4
 8015b58:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8015b5a:	7bbb      	ldrb	r3, [r7, #14]
 8015b5c:	2b00      	cmp	r3, #0
 8015b5e:	d002      	beq.n	8015b66 <USBD_StdEPReq+0x24a>
 8015b60:	7bbb      	ldrb	r3, [r7, #14]
 8015b62:	2b80      	cmp	r3, #128	; 0x80
 8015b64:	d103      	bne.n	8015b6e <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 8015b66:	68bb      	ldr	r3, [r7, #8]
 8015b68:	2200      	movs	r2, #0
 8015b6a:	601a      	str	r2, [r3, #0]
 8015b6c:	e00e      	b.n	8015b8c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8015b6e:	7bbb      	ldrb	r3, [r7, #14]
 8015b70:	4619      	mov	r1, r3
 8015b72:	6878      	ldr	r0, [r7, #4]
 8015b74:	f003 fb45 	bl	8019202 <USBD_LL_IsStallEP>
 8015b78:	4603      	mov	r3, r0
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d003      	beq.n	8015b86 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 8015b7e:	68bb      	ldr	r3, [r7, #8]
 8015b80:	2201      	movs	r2, #1
 8015b82:	601a      	str	r2, [r3, #0]
 8015b84:	e002      	b.n	8015b8c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8015b86:	68bb      	ldr	r3, [r7, #8]
 8015b88:	2200      	movs	r2, #0
 8015b8a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8015b8c:	68bb      	ldr	r3, [r7, #8]
 8015b8e:	2202      	movs	r2, #2
 8015b90:	4619      	mov	r1, r3
 8015b92:	6878      	ldr	r0, [r7, #4]
 8015b94:	f000 fbaf 	bl	80162f6 <USBD_CtlSendData>
          break;
 8015b98:	e004      	b.n	8015ba4 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 8015b9a:	6839      	ldr	r1, [r7, #0]
 8015b9c:	6878      	ldr	r0, [r7, #4]
 8015b9e:	f000 fb39 	bl	8016214 <USBD_CtlError>
        break;
 8015ba2:	bf00      	nop
      }
      break;
 8015ba4:	e004      	b.n	8015bb0 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8015ba6:	6839      	ldr	r1, [r7, #0]
 8015ba8:	6878      	ldr	r0, [r7, #4]
 8015baa:	f000 fb33 	bl	8016214 <USBD_CtlError>
      break;
 8015bae:	bf00      	nop
    }
    break;
 8015bb0:	e004      	b.n	8015bbc <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8015bb2:	6839      	ldr	r1, [r7, #0]
 8015bb4:	6878      	ldr	r0, [r7, #4]
 8015bb6:	f000 fb2d 	bl	8016214 <USBD_CtlError>
    break;
 8015bba:	bf00      	nop
  }

  return ret;
 8015bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8015bbe:	4618      	mov	r0, r3
 8015bc0:	3710      	adds	r7, #16
 8015bc2:	46bd      	mov	sp, r7
 8015bc4:	bd80      	pop	{r7, pc}
	...

08015bc8 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015bc8:	b580      	push	{r7, lr}
 8015bca:	b084      	sub	sp, #16
 8015bcc:	af00      	add	r7, sp, #0
 8015bce:	6078      	str	r0, [r7, #4]
 8015bd0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8015bda:	2300      	movs	r3, #0
 8015bdc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8015bde:	683b      	ldr	r3, [r7, #0]
 8015be0:	885b      	ldrh	r3, [r3, #2]
 8015be2:	0a1b      	lsrs	r3, r3, #8
 8015be4:	b29b      	uxth	r3, r3
 8015be6:	3b01      	subs	r3, #1
 8015be8:	2b06      	cmp	r3, #6
 8015bea:	f200 8128 	bhi.w	8015e3e <USBD_GetDescriptor+0x276>
 8015bee:	a201      	add	r2, pc, #4	; (adr r2, 8015bf4 <USBD_GetDescriptor+0x2c>)
 8015bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015bf4:	08015c11 	.word	0x08015c11
 8015bf8:	08015c29 	.word	0x08015c29
 8015bfc:	08015c69 	.word	0x08015c69
 8015c00:	08015e3f 	.word	0x08015e3f
 8015c04:	08015e3f 	.word	0x08015e3f
 8015c08:	08015ddf 	.word	0x08015ddf
 8015c0c:	08015e0b 	.word	0x08015e0b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	687a      	ldr	r2, [r7, #4]
 8015c1a:	7c12      	ldrb	r2, [r2, #16]
 8015c1c:	f107 0108 	add.w	r1, r7, #8
 8015c20:	4610      	mov	r0, r2
 8015c22:	4798      	blx	r3
 8015c24:	60f8      	str	r0, [r7, #12]
    break;
 8015c26:	e112      	b.n	8015e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015c28:	687b      	ldr	r3, [r7, #4]
 8015c2a:	7c1b      	ldrb	r3, [r3, #16]
 8015c2c:	2b00      	cmp	r3, #0
 8015c2e:	d10d      	bne.n	8015c4c <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015c38:	f107 0208 	add.w	r2, r7, #8
 8015c3c:	4610      	mov	r0, r2
 8015c3e:	4798      	blx	r3
 8015c40:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c42:	68fb      	ldr	r3, [r7, #12]
 8015c44:	3301      	adds	r3, #1
 8015c46:	2202      	movs	r2, #2
 8015c48:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 8015c4a:	e100      	b.n	8015e4e <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8015c4c:	687b      	ldr	r3, [r7, #4]
 8015c4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015c54:	f107 0208 	add.w	r2, r7, #8
 8015c58:	4610      	mov	r0, r2
 8015c5a:	4798      	blx	r3
 8015c5c:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8015c5e:	68fb      	ldr	r3, [r7, #12]
 8015c60:	3301      	adds	r3, #1
 8015c62:	2202      	movs	r2, #2
 8015c64:	701a      	strb	r2, [r3, #0]
    break;
 8015c66:	e0f2      	b.n	8015e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 8015c68:	683b      	ldr	r3, [r7, #0]
 8015c6a:	885b      	ldrh	r3, [r3, #2]
 8015c6c:	b2db      	uxtb	r3, r3
 8015c6e:	2b05      	cmp	r3, #5
 8015c70:	f200 80ac 	bhi.w	8015dcc <USBD_GetDescriptor+0x204>
 8015c74:	a201      	add	r2, pc, #4	; (adr r2, 8015c7c <USBD_GetDescriptor+0xb4>)
 8015c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015c7a:	bf00      	nop
 8015c7c:	08015c95 	.word	0x08015c95
 8015c80:	08015cc9 	.word	0x08015cc9
 8015c84:	08015cfd 	.word	0x08015cfd
 8015c88:	08015d31 	.word	0x08015d31
 8015c8c:	08015d65 	.word	0x08015d65
 8015c90:	08015d99 	.word	0x08015d99
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015c9a:	685b      	ldr	r3, [r3, #4]
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d00b      	beq.n	8015cb8 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	687a      	ldr	r2, [r7, #4]
 8015caa:	7c12      	ldrb	r2, [r2, #16]
 8015cac:	f107 0108 	add.w	r1, r7, #8
 8015cb0:	4610      	mov	r0, r2
 8015cb2:	4798      	blx	r3
 8015cb4:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015cb6:	e091      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015cb8:	6839      	ldr	r1, [r7, #0]
 8015cba:	6878      	ldr	r0, [r7, #4]
 8015cbc:	f000 faaa 	bl	8016214 <USBD_CtlError>
        err++;
 8015cc0:	7afb      	ldrb	r3, [r7, #11]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	72fb      	strb	r3, [r7, #11]
      break;
 8015cc6:	e089      	b.n	8015ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8015cc8:	687b      	ldr	r3, [r7, #4]
 8015cca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cce:	689b      	ldr	r3, [r3, #8]
 8015cd0:	2b00      	cmp	r3, #0
 8015cd2:	d00b      	beq.n	8015cec <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015cda:	689b      	ldr	r3, [r3, #8]
 8015cdc:	687a      	ldr	r2, [r7, #4]
 8015cde:	7c12      	ldrb	r2, [r2, #16]
 8015ce0:	f107 0108 	add.w	r1, r7, #8
 8015ce4:	4610      	mov	r0, r2
 8015ce6:	4798      	blx	r3
 8015ce8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015cea:	e077      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015cec:	6839      	ldr	r1, [r7, #0]
 8015cee:	6878      	ldr	r0, [r7, #4]
 8015cf0:	f000 fa90 	bl	8016214 <USBD_CtlError>
        err++;
 8015cf4:	7afb      	ldrb	r3, [r7, #11]
 8015cf6:	3301      	adds	r3, #1
 8015cf8:	72fb      	strb	r3, [r7, #11]
      break;
 8015cfa:	e06f      	b.n	8015ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d02:	68db      	ldr	r3, [r3, #12]
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d00b      	beq.n	8015d20 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d0e:	68db      	ldr	r3, [r3, #12]
 8015d10:	687a      	ldr	r2, [r7, #4]
 8015d12:	7c12      	ldrb	r2, [r2, #16]
 8015d14:	f107 0108 	add.w	r1, r7, #8
 8015d18:	4610      	mov	r0, r2
 8015d1a:	4798      	blx	r3
 8015d1c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d1e:	e05d      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d20:	6839      	ldr	r1, [r7, #0]
 8015d22:	6878      	ldr	r0, [r7, #4]
 8015d24:	f000 fa76 	bl	8016214 <USBD_CtlError>
        err++;
 8015d28:	7afb      	ldrb	r3, [r7, #11]
 8015d2a:	3301      	adds	r3, #1
 8015d2c:	72fb      	strb	r3, [r7, #11]
      break;
 8015d2e:	e055      	b.n	8015ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d36:	691b      	ldr	r3, [r3, #16]
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d00b      	beq.n	8015d54 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d42:	691b      	ldr	r3, [r3, #16]
 8015d44:	687a      	ldr	r2, [r7, #4]
 8015d46:	7c12      	ldrb	r2, [r2, #16]
 8015d48:	f107 0108 	add.w	r1, r7, #8
 8015d4c:	4610      	mov	r0, r2
 8015d4e:	4798      	blx	r3
 8015d50:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d52:	e043      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d54:	6839      	ldr	r1, [r7, #0]
 8015d56:	6878      	ldr	r0, [r7, #4]
 8015d58:	f000 fa5c 	bl	8016214 <USBD_CtlError>
        err++;
 8015d5c:	7afb      	ldrb	r3, [r7, #11]
 8015d5e:	3301      	adds	r3, #1
 8015d60:	72fb      	strb	r3, [r7, #11]
      break;
 8015d62:	e03b      	b.n	8015ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8015d64:	687b      	ldr	r3, [r7, #4]
 8015d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d6a:	695b      	ldr	r3, [r3, #20]
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d00b      	beq.n	8015d88 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8015d70:	687b      	ldr	r3, [r7, #4]
 8015d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d76:	695b      	ldr	r3, [r3, #20]
 8015d78:	687a      	ldr	r2, [r7, #4]
 8015d7a:	7c12      	ldrb	r2, [r2, #16]
 8015d7c:	f107 0108 	add.w	r1, r7, #8
 8015d80:	4610      	mov	r0, r2
 8015d82:	4798      	blx	r3
 8015d84:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015d86:	e029      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015d88:	6839      	ldr	r1, [r7, #0]
 8015d8a:	6878      	ldr	r0, [r7, #4]
 8015d8c:	f000 fa42 	bl	8016214 <USBD_CtlError>
        err++;
 8015d90:	7afb      	ldrb	r3, [r7, #11]
 8015d92:	3301      	adds	r3, #1
 8015d94:	72fb      	strb	r3, [r7, #11]
      break;
 8015d96:	e021      	b.n	8015ddc <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015d9e:	699b      	ldr	r3, [r3, #24]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00b      	beq.n	8015dbc <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8015da4:	687b      	ldr	r3, [r7, #4]
 8015da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8015daa:	699b      	ldr	r3, [r3, #24]
 8015dac:	687a      	ldr	r2, [r7, #4]
 8015dae:	7c12      	ldrb	r2, [r2, #16]
 8015db0:	f107 0108 	add.w	r1, r7, #8
 8015db4:	4610      	mov	r0, r2
 8015db6:	4798      	blx	r3
 8015db8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8015dba:	e00f      	b.n	8015ddc <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8015dbc:	6839      	ldr	r1, [r7, #0]
 8015dbe:	6878      	ldr	r0, [r7, #4]
 8015dc0:	f000 fa28 	bl	8016214 <USBD_CtlError>
        err++;
 8015dc4:	7afb      	ldrb	r3, [r7, #11]
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	72fb      	strb	r3, [r7, #11]
      break;
 8015dca:	e007      	b.n	8015ddc <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 8015dcc:	6839      	ldr	r1, [r7, #0]
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	f000 fa20 	bl	8016214 <USBD_CtlError>
      err++;
 8015dd4:	7afb      	ldrb	r3, [r7, #11]
 8015dd6:	3301      	adds	r3, #1
 8015dd8:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 8015dda:	bf00      	nop
    }
    break;
 8015ddc:	e037      	b.n	8015e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	7c1b      	ldrb	r3, [r3, #16]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d109      	bne.n	8015dfa <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8015de6:	687b      	ldr	r3, [r7, #4]
 8015de8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015dee:	f107 0208 	add.w	r2, r7, #8
 8015df2:	4610      	mov	r0, r2
 8015df4:	4798      	blx	r3
 8015df6:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015df8:	e029      	b.n	8015e4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015dfa:	6839      	ldr	r1, [r7, #0]
 8015dfc:	6878      	ldr	r0, [r7, #4]
 8015dfe:	f000 fa09 	bl	8016214 <USBD_CtlError>
      err++;
 8015e02:	7afb      	ldrb	r3, [r7, #11]
 8015e04:	3301      	adds	r3, #1
 8015e06:	72fb      	strb	r3, [r7, #11]
    break;
 8015e08:	e021      	b.n	8015e4e <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	7c1b      	ldrb	r3, [r3, #16]
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d10d      	bne.n	8015e2e <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015e1a:	f107 0208 	add.w	r2, r7, #8
 8015e1e:	4610      	mov	r0, r2
 8015e20:	4798      	blx	r3
 8015e22:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8015e24:	68fb      	ldr	r3, [r7, #12]
 8015e26:	3301      	adds	r3, #1
 8015e28:	2207      	movs	r2, #7
 8015e2a:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8015e2c:	e00f      	b.n	8015e4e <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 8015e2e:	6839      	ldr	r1, [r7, #0]
 8015e30:	6878      	ldr	r0, [r7, #4]
 8015e32:	f000 f9ef 	bl	8016214 <USBD_CtlError>
      err++;
 8015e36:	7afb      	ldrb	r3, [r7, #11]
 8015e38:	3301      	adds	r3, #1
 8015e3a:	72fb      	strb	r3, [r7, #11]
    break;
 8015e3c:	e007      	b.n	8015e4e <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 8015e3e:	6839      	ldr	r1, [r7, #0]
 8015e40:	6878      	ldr	r0, [r7, #4]
 8015e42:	f000 f9e7 	bl	8016214 <USBD_CtlError>
    err++;
 8015e46:	7afb      	ldrb	r3, [r7, #11]
 8015e48:	3301      	adds	r3, #1
 8015e4a:	72fb      	strb	r3, [r7, #11]
    break;
 8015e4c:	bf00      	nop
  }

  if (err != 0U)
 8015e4e:	7afb      	ldrb	r3, [r7, #11]
 8015e50:	2b00      	cmp	r3, #0
 8015e52:	d11e      	bne.n	8015e92 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 8015e54:	683b      	ldr	r3, [r7, #0]
 8015e56:	88db      	ldrh	r3, [r3, #6]
 8015e58:	2b00      	cmp	r3, #0
 8015e5a:	d016      	beq.n	8015e8a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 8015e5c:	893b      	ldrh	r3, [r7, #8]
 8015e5e:	2b00      	cmp	r3, #0
 8015e60:	d00e      	beq.n	8015e80 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 8015e62:	683b      	ldr	r3, [r7, #0]
 8015e64:	88da      	ldrh	r2, [r3, #6]
 8015e66:	893b      	ldrh	r3, [r7, #8]
 8015e68:	4293      	cmp	r3, r2
 8015e6a:	bf28      	it	cs
 8015e6c:	4613      	movcs	r3, r2
 8015e6e:	b29b      	uxth	r3, r3
 8015e70:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 8015e72:	893b      	ldrh	r3, [r7, #8]
 8015e74:	461a      	mov	r2, r3
 8015e76:	68f9      	ldr	r1, [r7, #12]
 8015e78:	6878      	ldr	r0, [r7, #4]
 8015e7a:	f000 fa3c 	bl	80162f6 <USBD_CtlSendData>
 8015e7e:	e009      	b.n	8015e94 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8015e80:	6839      	ldr	r1, [r7, #0]
 8015e82:	6878      	ldr	r0, [r7, #4]
 8015e84:	f000 f9c6 	bl	8016214 <USBD_CtlError>
 8015e88:	e004      	b.n	8015e94 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	f000 fa70 	bl	8016370 <USBD_CtlSendStatus>
 8015e90:	e000      	b.n	8015e94 <USBD_GetDescriptor+0x2cc>
    return;
 8015e92:	bf00      	nop
    }
  }
}
 8015e94:	3710      	adds	r7, #16
 8015e96:	46bd      	mov	sp, r7
 8015e98:	bd80      	pop	{r7, pc}
 8015e9a:	bf00      	nop

08015e9c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b084      	sub	sp, #16
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8015ea6:	683b      	ldr	r3, [r7, #0]
 8015ea8:	889b      	ldrh	r3, [r3, #4]
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d130      	bne.n	8015f10 <USBD_SetAddress+0x74>
 8015eae:	683b      	ldr	r3, [r7, #0]
 8015eb0:	88db      	ldrh	r3, [r3, #6]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d12c      	bne.n	8015f10 <USBD_SetAddress+0x74>
 8015eb6:	683b      	ldr	r3, [r7, #0]
 8015eb8:	885b      	ldrh	r3, [r3, #2]
 8015eba:	2b7f      	cmp	r3, #127	; 0x7f
 8015ebc:	d828      	bhi.n	8015f10 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8015ebe:	683b      	ldr	r3, [r7, #0]
 8015ec0:	885b      	ldrh	r3, [r3, #2]
 8015ec2:	b2db      	uxtb	r3, r3
 8015ec4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8015ec8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ed0:	2b03      	cmp	r3, #3
 8015ed2:	d104      	bne.n	8015ede <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8015ed4:	6839      	ldr	r1, [r7, #0]
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f99c 	bl	8016214 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015edc:	e01c      	b.n	8015f18 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	7bfa      	ldrb	r2, [r7, #15]
 8015ee2:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8015ee6:	7bfb      	ldrb	r3, [r7, #15]
 8015ee8:	4619      	mov	r1, r3
 8015eea:	6878      	ldr	r0, [r7, #4]
 8015eec:	f003 f9b5 	bl	801925a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8015ef0:	6878      	ldr	r0, [r7, #4]
 8015ef2:	f000 fa3d 	bl	8016370 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8015ef6:	7bfb      	ldrb	r3, [r7, #15]
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d004      	beq.n	8015f06 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8015efc:	687b      	ldr	r3, [r7, #4]
 8015efe:	2202      	movs	r2, #2
 8015f00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f04:	e008      	b.n	8015f18 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	2201      	movs	r2, #1
 8015f0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f0e:	e003      	b.n	8015f18 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8015f10:	6839      	ldr	r1, [r7, #0]
 8015f12:	6878      	ldr	r0, [r7, #4]
 8015f14:	f000 f97e 	bl	8016214 <USBD_CtlError>
  }
}
 8015f18:	bf00      	nop
 8015f1a:	3710      	adds	r7, #16
 8015f1c:	46bd      	mov	sp, r7
 8015f1e:	bd80      	pop	{r7, pc}

08015f20 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f20:	b580      	push	{r7, lr}
 8015f22:	b084      	sub	sp, #16
 8015f24:	af00      	add	r7, sp, #0
 8015f26:	6078      	str	r0, [r7, #4]
 8015f28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f2a:	2300      	movs	r3, #0
 8015f2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8015f2e:	683b      	ldr	r3, [r7, #0]
 8015f30:	885b      	ldrh	r3, [r3, #2]
 8015f32:	b2da      	uxtb	r2, r3
 8015f34:	4b4b      	ldr	r3, [pc, #300]	; (8016064 <USBD_SetConfig+0x144>)
 8015f36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8015f38:	4b4a      	ldr	r3, [pc, #296]	; (8016064 <USBD_SetConfig+0x144>)
 8015f3a:	781b      	ldrb	r3, [r3, #0]
 8015f3c:	2b01      	cmp	r3, #1
 8015f3e:	d905      	bls.n	8015f4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8015f40:	6839      	ldr	r1, [r7, #0]
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 f966 	bl	8016214 <USBD_CtlError>
    return USBD_FAIL;
 8015f48:	2303      	movs	r3, #3
 8015f4a:	e087      	b.n	801605c <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 8015f4c:	687b      	ldr	r3, [r7, #4]
 8015f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f52:	2b02      	cmp	r3, #2
 8015f54:	d002      	beq.n	8015f5c <USBD_SetConfig+0x3c>
 8015f56:	2b03      	cmp	r3, #3
 8015f58:	d025      	beq.n	8015fa6 <USBD_SetConfig+0x86>
 8015f5a:	e071      	b.n	8016040 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 8015f5c:	4b41      	ldr	r3, [pc, #260]	; (8016064 <USBD_SetConfig+0x144>)
 8015f5e:	781b      	ldrb	r3, [r3, #0]
 8015f60:	2b00      	cmp	r3, #0
 8015f62:	d01c      	beq.n	8015f9e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 8015f64:	4b3f      	ldr	r3, [pc, #252]	; (8016064 <USBD_SetConfig+0x144>)
 8015f66:	781b      	ldrb	r3, [r3, #0]
 8015f68:	461a      	mov	r2, r3
 8015f6a:	687b      	ldr	r3, [r7, #4]
 8015f6c:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015f6e:	4b3d      	ldr	r3, [pc, #244]	; (8016064 <USBD_SetConfig+0x144>)
 8015f70:	781b      	ldrb	r3, [r3, #0]
 8015f72:	4619      	mov	r1, r3
 8015f74:	6878      	ldr	r0, [r7, #4]
 8015f76:	f7ff f9a8 	bl	80152ca <USBD_SetClassConfig>
 8015f7a:	4603      	mov	r3, r0
 8015f7c:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 8015f7e:	7bfb      	ldrb	r3, [r7, #15]
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d004      	beq.n	8015f8e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8015f84:	6839      	ldr	r1, [r7, #0]
 8015f86:	6878      	ldr	r0, [r7, #4]
 8015f88:	f000 f944 	bl	8016214 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015f8c:	e065      	b.n	801605a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8015f8e:	6878      	ldr	r0, [r7, #4]
 8015f90:	f000 f9ee 	bl	8016370 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8015f94:	687b      	ldr	r3, [r7, #4]
 8015f96:	2203      	movs	r2, #3
 8015f98:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 8015f9c:	e05d      	b.n	801605a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8015f9e:	6878      	ldr	r0, [r7, #4]
 8015fa0:	f000 f9e6 	bl	8016370 <USBD_CtlSendStatus>
    break;
 8015fa4:	e059      	b.n	801605a <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8015fa6:	4b2f      	ldr	r3, [pc, #188]	; (8016064 <USBD_SetConfig+0x144>)
 8015fa8:	781b      	ldrb	r3, [r3, #0]
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d112      	bne.n	8015fd4 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 8015fae:	687b      	ldr	r3, [r7, #4]
 8015fb0:	2202      	movs	r2, #2
 8015fb2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8015fb6:	4b2b      	ldr	r3, [pc, #172]	; (8016064 <USBD_SetConfig+0x144>)
 8015fb8:	781b      	ldrb	r3, [r3, #0]
 8015fba:	461a      	mov	r2, r3
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8015fc0:	4b28      	ldr	r3, [pc, #160]	; (8016064 <USBD_SetConfig+0x144>)
 8015fc2:	781b      	ldrb	r3, [r3, #0]
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f7ff f99b 	bl	8015302 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f000 f9cf 	bl	8016370 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8015fd2:	e042      	b.n	801605a <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8015fd4:	4b23      	ldr	r3, [pc, #140]	; (8016064 <USBD_SetConfig+0x144>)
 8015fd6:	781b      	ldrb	r3, [r3, #0]
 8015fd8:	461a      	mov	r2, r3
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	685b      	ldr	r3, [r3, #4]
 8015fde:	429a      	cmp	r2, r3
 8015fe0:	d02a      	beq.n	8016038 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	685b      	ldr	r3, [r3, #4]
 8015fe6:	b2db      	uxtb	r3, r3
 8015fe8:	4619      	mov	r1, r3
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	f7ff f989 	bl	8015302 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8015ff0:	4b1c      	ldr	r3, [pc, #112]	; (8016064 <USBD_SetConfig+0x144>)
 8015ff2:	781b      	ldrb	r3, [r3, #0]
 8015ff4:	461a      	mov	r2, r3
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 8015ffa:	4b1a      	ldr	r3, [pc, #104]	; (8016064 <USBD_SetConfig+0x144>)
 8015ffc:	781b      	ldrb	r3, [r3, #0]
 8015ffe:	4619      	mov	r1, r3
 8016000:	6878      	ldr	r0, [r7, #4]
 8016002:	f7ff f962 	bl	80152ca <USBD_SetClassConfig>
 8016006:	4603      	mov	r3, r0
 8016008:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801600a:	7bfb      	ldrb	r3, [r7, #15]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d00f      	beq.n	8016030 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016010:	6839      	ldr	r1, [r7, #0]
 8016012:	6878      	ldr	r0, [r7, #4]
 8016014:	f000 f8fe 	bl	8016214 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016018:	687b      	ldr	r3, [r7, #4]
 801601a:	685b      	ldr	r3, [r3, #4]
 801601c:	b2db      	uxtb	r3, r3
 801601e:	4619      	mov	r1, r3
 8016020:	6878      	ldr	r0, [r7, #4]
 8016022:	f7ff f96e 	bl	8015302 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016026:	687b      	ldr	r3, [r7, #4]
 8016028:	2202      	movs	r2, #2
 801602a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801602e:	e014      	b.n	801605a <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 8016030:	6878      	ldr	r0, [r7, #4]
 8016032:	f000 f99d 	bl	8016370 <USBD_CtlSendStatus>
    break;
 8016036:	e010      	b.n	801605a <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 f999 	bl	8016370 <USBD_CtlSendStatus>
    break;
 801603e:	e00c      	b.n	801605a <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 8016040:	6839      	ldr	r1, [r7, #0]
 8016042:	6878      	ldr	r0, [r7, #4]
 8016044:	f000 f8e6 	bl	8016214 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016048:	4b06      	ldr	r3, [pc, #24]	; (8016064 <USBD_SetConfig+0x144>)
 801604a:	781b      	ldrb	r3, [r3, #0]
 801604c:	4619      	mov	r1, r3
 801604e:	6878      	ldr	r0, [r7, #4]
 8016050:	f7ff f957 	bl	8015302 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 8016054:	2303      	movs	r3, #3
 8016056:	73fb      	strb	r3, [r7, #15]
    break;
 8016058:	bf00      	nop
  }

  return ret;
 801605a:	7bfb      	ldrb	r3, [r7, #15]
}
 801605c:	4618      	mov	r0, r3
 801605e:	3710      	adds	r7, #16
 8016060:	46bd      	mov	sp, r7
 8016062:	bd80      	pop	{r7, pc}
 8016064:	24000b58 	.word	0x24000b58

08016068 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016068:	b580      	push	{r7, lr}
 801606a:	b082      	sub	sp, #8
 801606c:	af00      	add	r7, sp, #0
 801606e:	6078      	str	r0, [r7, #4]
 8016070:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8016072:	683b      	ldr	r3, [r7, #0]
 8016074:	88db      	ldrh	r3, [r3, #6]
 8016076:	2b01      	cmp	r3, #1
 8016078:	d004      	beq.n	8016084 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 801607a:	6839      	ldr	r1, [r7, #0]
 801607c:	6878      	ldr	r0, [r7, #4]
 801607e:	f000 f8c9 	bl	8016214 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8016082:	e021      	b.n	80160c8 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8016084:	687b      	ldr	r3, [r7, #4]
 8016086:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801608a:	2b01      	cmp	r3, #1
 801608c:	db17      	blt.n	80160be <USBD_GetConfig+0x56>
 801608e:	2b02      	cmp	r3, #2
 8016090:	dd02      	ble.n	8016098 <USBD_GetConfig+0x30>
 8016092:	2b03      	cmp	r3, #3
 8016094:	d00b      	beq.n	80160ae <USBD_GetConfig+0x46>
 8016096:	e012      	b.n	80160be <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2200      	movs	r2, #0
 801609c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	3308      	adds	r3, #8
 80160a2:	2201      	movs	r2, #1
 80160a4:	4619      	mov	r1, r3
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f000 f925 	bl	80162f6 <USBD_CtlSendData>
      break;
 80160ac:	e00c      	b.n	80160c8 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80160ae:	687b      	ldr	r3, [r7, #4]
 80160b0:	3304      	adds	r3, #4
 80160b2:	2201      	movs	r2, #1
 80160b4:	4619      	mov	r1, r3
 80160b6:	6878      	ldr	r0, [r7, #4]
 80160b8:	f000 f91d 	bl	80162f6 <USBD_CtlSendData>
      break;
 80160bc:	e004      	b.n	80160c8 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 80160be:	6839      	ldr	r1, [r7, #0]
 80160c0:	6878      	ldr	r0, [r7, #4]
 80160c2:	f000 f8a7 	bl	8016214 <USBD_CtlError>
      break;
 80160c6:	bf00      	nop
}
 80160c8:	bf00      	nop
 80160ca:	3708      	adds	r7, #8
 80160cc:	46bd      	mov	sp, r7
 80160ce:	bd80      	pop	{r7, pc}

080160d0 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80160d0:	b580      	push	{r7, lr}
 80160d2:	b082      	sub	sp, #8
 80160d4:	af00      	add	r7, sp, #0
 80160d6:	6078      	str	r0, [r7, #4]
 80160d8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160e0:	3b01      	subs	r3, #1
 80160e2:	2b02      	cmp	r3, #2
 80160e4:	d81e      	bhi.n	8016124 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	88db      	ldrh	r3, [r3, #6]
 80160ea:	2b02      	cmp	r3, #2
 80160ec:	d004      	beq.n	80160f8 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 80160ee:	6839      	ldr	r1, [r7, #0]
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 f88f 	bl	8016214 <USBD_CtlError>
      break;
 80160f6:	e01a      	b.n	801612e <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80160f8:	687b      	ldr	r3, [r7, #4]
 80160fa:	2201      	movs	r2, #1
 80160fc:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 80160fe:	687b      	ldr	r3, [r7, #4]
 8016100:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016104:	2b00      	cmp	r3, #0
 8016106:	d005      	beq.n	8016114 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	68db      	ldr	r3, [r3, #12]
 801610c:	f043 0202 	orr.w	r2, r3, #2
 8016110:	687b      	ldr	r3, [r7, #4]
 8016112:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	330c      	adds	r3, #12
 8016118:	2202      	movs	r2, #2
 801611a:	4619      	mov	r1, r3
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f8ea 	bl	80162f6 <USBD_CtlSendData>
    break;
 8016122:	e004      	b.n	801612e <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 8016124:	6839      	ldr	r1, [r7, #0]
 8016126:	6878      	ldr	r0, [r7, #4]
 8016128:	f000 f874 	bl	8016214 <USBD_CtlError>
    break;
 801612c:	bf00      	nop
  }
}
 801612e:	bf00      	nop
 8016130:	3708      	adds	r7, #8
 8016132:	46bd      	mov	sp, r7
 8016134:	bd80      	pop	{r7, pc}

08016136 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016136:	b580      	push	{r7, lr}
 8016138:	b082      	sub	sp, #8
 801613a:	af00      	add	r7, sp, #0
 801613c:	6078      	str	r0, [r7, #4]
 801613e:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016140:	683b      	ldr	r3, [r7, #0]
 8016142:	885b      	ldrh	r3, [r3, #2]
 8016144:	2b01      	cmp	r3, #1
 8016146:	d106      	bne.n	8016156 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	2201      	movs	r2, #1
 801614c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f000 f90d 	bl	8016370 <USBD_CtlSendStatus>
  }
}
 8016156:	bf00      	nop
 8016158:	3708      	adds	r7, #8
 801615a:	46bd      	mov	sp, r7
 801615c:	bd80      	pop	{r7, pc}

0801615e <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801615e:	b580      	push	{r7, lr}
 8016160:	b082      	sub	sp, #8
 8016162:	af00      	add	r7, sp, #0
 8016164:	6078      	str	r0, [r7, #4]
 8016166:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801616e:	3b01      	subs	r3, #1
 8016170:	2b02      	cmp	r3, #2
 8016172:	d80b      	bhi.n	801618c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016174:	683b      	ldr	r3, [r7, #0]
 8016176:	885b      	ldrh	r3, [r3, #2]
 8016178:	2b01      	cmp	r3, #1
 801617a:	d10c      	bne.n	8016196 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 801617c:	687b      	ldr	r3, [r7, #4]
 801617e:	2200      	movs	r2, #0
 8016180:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016184:	6878      	ldr	r0, [r7, #4]
 8016186:	f000 f8f3 	bl	8016370 <USBD_CtlSendStatus>
      }
      break;
 801618a:	e004      	b.n	8016196 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 801618c:	6839      	ldr	r1, [r7, #0]
 801618e:	6878      	ldr	r0, [r7, #4]
 8016190:	f000 f840 	bl	8016214 <USBD_CtlError>
      break;
 8016194:	e000      	b.n	8016198 <USBD_ClrFeature+0x3a>
      break;
 8016196:	bf00      	nop
  }
}
 8016198:	bf00      	nop
 801619a:	3708      	adds	r7, #8
 801619c:	46bd      	mov	sp, r7
 801619e:	bd80      	pop	{r7, pc}

080161a0 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80161a0:	b580      	push	{r7, lr}
 80161a2:	b084      	sub	sp, #16
 80161a4:	af00      	add	r7, sp, #0
 80161a6:	6078      	str	r0, [r7, #4]
 80161a8:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80161ae:	68fb      	ldr	r3, [r7, #12]
 80161b0:	781a      	ldrb	r2, [r3, #0]
 80161b2:	687b      	ldr	r3, [r7, #4]
 80161b4:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80161b6:	68fb      	ldr	r3, [r7, #12]
 80161b8:	3301      	adds	r3, #1
 80161ba:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80161bc:	68fb      	ldr	r3, [r7, #12]
 80161be:	781a      	ldrb	r2, [r3, #0]
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80161c4:	68fb      	ldr	r3, [r7, #12]
 80161c6:	3301      	adds	r3, #1
 80161c8:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80161ca:	68f8      	ldr	r0, [r7, #12]
 80161cc:	f7ff fad4 	bl	8015778 <SWAPBYTE>
 80161d0:	4603      	mov	r3, r0
 80161d2:	461a      	mov	r2, r3
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80161d8:	68fb      	ldr	r3, [r7, #12]
 80161da:	3301      	adds	r3, #1
 80161dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161de:	68fb      	ldr	r3, [r7, #12]
 80161e0:	3301      	adds	r3, #1
 80161e2:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80161e4:	68f8      	ldr	r0, [r7, #12]
 80161e6:	f7ff fac7 	bl	8015778 <SWAPBYTE>
 80161ea:	4603      	mov	r3, r0
 80161ec:	461a      	mov	r2, r3
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80161f2:	68fb      	ldr	r3, [r7, #12]
 80161f4:	3301      	adds	r3, #1
 80161f6:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	3301      	adds	r3, #1
 80161fc:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80161fe:	68f8      	ldr	r0, [r7, #12]
 8016200:	f7ff faba 	bl	8015778 <SWAPBYTE>
 8016204:	4603      	mov	r3, r0
 8016206:	461a      	mov	r2, r3
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	80da      	strh	r2, [r3, #6]
}
 801620c:	bf00      	nop
 801620e:	3710      	adds	r7, #16
 8016210:	46bd      	mov	sp, r7
 8016212:	bd80      	pop	{r7, pc}

08016214 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
 801621a:	6078      	str	r0, [r7, #4]
 801621c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 801621e:	2180      	movs	r1, #128	; 0x80
 8016220:	6878      	ldr	r0, [r7, #4]
 8016222:	f002 ffb0 	bl	8019186 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016226:	2100      	movs	r1, #0
 8016228:	6878      	ldr	r0, [r7, #4]
 801622a:	f002 ffac 	bl	8019186 <USBD_LL_StallEP>
}
 801622e:	bf00      	nop
 8016230:	3708      	adds	r7, #8
 8016232:	46bd      	mov	sp, r7
 8016234:	bd80      	pop	{r7, pc}

08016236 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016236:	b580      	push	{r7, lr}
 8016238:	b086      	sub	sp, #24
 801623a:	af00      	add	r7, sp, #0
 801623c:	60f8      	str	r0, [r7, #12]
 801623e:	60b9      	str	r1, [r7, #8]
 8016240:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016242:	2300      	movs	r3, #0
 8016244:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016246:	68fb      	ldr	r3, [r7, #12]
 8016248:	2b00      	cmp	r3, #0
 801624a:	d036      	beq.n	80162ba <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 801624c:	68fb      	ldr	r3, [r7, #12]
 801624e:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016250:	6938      	ldr	r0, [r7, #16]
 8016252:	f000 f836 	bl	80162c2 <USBD_GetLen>
 8016256:	4603      	mov	r3, r0
 8016258:	3301      	adds	r3, #1
 801625a:	b29b      	uxth	r3, r3
 801625c:	005b      	lsls	r3, r3, #1
 801625e:	b29a      	uxth	r2, r3
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016264:	7dfb      	ldrb	r3, [r7, #23]
 8016266:	68ba      	ldr	r2, [r7, #8]
 8016268:	4413      	add	r3, r2
 801626a:	687a      	ldr	r2, [r7, #4]
 801626c:	7812      	ldrb	r2, [r2, #0]
 801626e:	701a      	strb	r2, [r3, #0]
  idx++;
 8016270:	7dfb      	ldrb	r3, [r7, #23]
 8016272:	3301      	adds	r3, #1
 8016274:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016276:	7dfb      	ldrb	r3, [r7, #23]
 8016278:	68ba      	ldr	r2, [r7, #8]
 801627a:	4413      	add	r3, r2
 801627c:	2203      	movs	r2, #3
 801627e:	701a      	strb	r2, [r3, #0]
  idx++;
 8016280:	7dfb      	ldrb	r3, [r7, #23]
 8016282:	3301      	adds	r3, #1
 8016284:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016286:	e013      	b.n	80162b0 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016288:	7dfb      	ldrb	r3, [r7, #23]
 801628a:	68ba      	ldr	r2, [r7, #8]
 801628c:	4413      	add	r3, r2
 801628e:	693a      	ldr	r2, [r7, #16]
 8016290:	7812      	ldrb	r2, [r2, #0]
 8016292:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016294:	693b      	ldr	r3, [r7, #16]
 8016296:	3301      	adds	r3, #1
 8016298:	613b      	str	r3, [r7, #16]
    idx++;
 801629a:	7dfb      	ldrb	r3, [r7, #23]
 801629c:	3301      	adds	r3, #1
 801629e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80162a0:	7dfb      	ldrb	r3, [r7, #23]
 80162a2:	68ba      	ldr	r2, [r7, #8]
 80162a4:	4413      	add	r3, r2
 80162a6:	2200      	movs	r2, #0
 80162a8:	701a      	strb	r2, [r3, #0]
    idx++;
 80162aa:	7dfb      	ldrb	r3, [r7, #23]
 80162ac:	3301      	adds	r3, #1
 80162ae:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80162b0:	693b      	ldr	r3, [r7, #16]
 80162b2:	781b      	ldrb	r3, [r3, #0]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d1e7      	bne.n	8016288 <USBD_GetString+0x52>
 80162b8:	e000      	b.n	80162bc <USBD_GetString+0x86>
    return;
 80162ba:	bf00      	nop
  }
}
 80162bc:	3718      	adds	r7, #24
 80162be:	46bd      	mov	sp, r7
 80162c0:	bd80      	pop	{r7, pc}

080162c2 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80162c2:	b480      	push	{r7}
 80162c4:	b085      	sub	sp, #20
 80162c6:	af00      	add	r7, sp, #0
 80162c8:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80162ca:	2300      	movs	r3, #0
 80162cc:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80162ce:	687b      	ldr	r3, [r7, #4]
 80162d0:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80162d2:	e005      	b.n	80162e0 <USBD_GetLen+0x1e>
  {
    len++;
 80162d4:	7bfb      	ldrb	r3, [r7, #15]
 80162d6:	3301      	adds	r3, #1
 80162d8:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80162da:	68bb      	ldr	r3, [r7, #8]
 80162dc:	3301      	adds	r3, #1
 80162de:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80162e0:	68bb      	ldr	r3, [r7, #8]
 80162e2:	781b      	ldrb	r3, [r3, #0]
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d1f5      	bne.n	80162d4 <USBD_GetLen+0x12>
  }

  return len;
 80162e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80162ea:	4618      	mov	r0, r3
 80162ec:	3714      	adds	r7, #20
 80162ee:	46bd      	mov	sp, r7
 80162f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f4:	4770      	bx	lr

080162f6 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80162f6:	b580      	push	{r7, lr}
 80162f8:	b084      	sub	sp, #16
 80162fa:	af00      	add	r7, sp, #0
 80162fc:	60f8      	str	r0, [r7, #12]
 80162fe:	60b9      	str	r1, [r7, #8]
 8016300:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	2202      	movs	r2, #2
 8016306:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 801630a:	68fb      	ldr	r3, [r7, #12]
 801630c:	687a      	ldr	r2, [r7, #4]
 801630e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016310:	68fb      	ldr	r3, [r7, #12]
 8016312:	687a      	ldr	r2, [r7, #4]
 8016314:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	68ba      	ldr	r2, [r7, #8]
 801631a:	2100      	movs	r1, #0
 801631c:	68f8      	ldr	r0, [r7, #12]
 801631e:	f002 ffbb 	bl	8019298 <USBD_LL_Transmit>

  return USBD_OK;
 8016322:	2300      	movs	r3, #0
}
 8016324:	4618      	mov	r0, r3
 8016326:	3710      	adds	r7, #16
 8016328:	46bd      	mov	sp, r7
 801632a:	bd80      	pop	{r7, pc}

0801632c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b084      	sub	sp, #16
 8016330:	af00      	add	r7, sp, #0
 8016332:	60f8      	str	r0, [r7, #12]
 8016334:	60b9      	str	r1, [r7, #8]
 8016336:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	68ba      	ldr	r2, [r7, #8]
 801633c:	2100      	movs	r1, #0
 801633e:	68f8      	ldr	r0, [r7, #12]
 8016340:	f002 ffaa 	bl	8019298 <USBD_LL_Transmit>

  return USBD_OK;
 8016344:	2300      	movs	r3, #0
}
 8016346:	4618      	mov	r0, r3
 8016348:	3710      	adds	r7, #16
 801634a:	46bd      	mov	sp, r7
 801634c:	bd80      	pop	{r7, pc}

0801634e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801634e:	b580      	push	{r7, lr}
 8016350:	b084      	sub	sp, #16
 8016352:	af00      	add	r7, sp, #0
 8016354:	60f8      	str	r0, [r7, #12]
 8016356:	60b9      	str	r1, [r7, #8]
 8016358:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	68ba      	ldr	r2, [r7, #8]
 801635e:	2100      	movs	r1, #0
 8016360:	68f8      	ldr	r0, [r7, #12]
 8016362:	f002 ffba 	bl	80192da <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016366:	2300      	movs	r3, #0
}
 8016368:	4618      	mov	r0, r3
 801636a:	3710      	adds	r7, #16
 801636c:	46bd      	mov	sp, r7
 801636e:	bd80      	pop	{r7, pc}

08016370 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016370:	b580      	push	{r7, lr}
 8016372:	b082      	sub	sp, #8
 8016374:	af00      	add	r7, sp, #0
 8016376:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	2204      	movs	r2, #4
 801637c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016380:	2300      	movs	r3, #0
 8016382:	2200      	movs	r2, #0
 8016384:	2100      	movs	r1, #0
 8016386:	6878      	ldr	r0, [r7, #4]
 8016388:	f002 ff86 	bl	8019298 <USBD_LL_Transmit>

  return USBD_OK;
 801638c:	2300      	movs	r3, #0
}
 801638e:	4618      	mov	r0, r3
 8016390:	3708      	adds	r7, #8
 8016392:	46bd      	mov	sp, r7
 8016394:	bd80      	pop	{r7, pc}

08016396 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016396:	b580      	push	{r7, lr}
 8016398:	b082      	sub	sp, #8
 801639a:	af00      	add	r7, sp, #0
 801639c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2205      	movs	r2, #5
 80163a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80163a6:	2300      	movs	r3, #0
 80163a8:	2200      	movs	r2, #0
 80163aa:	2100      	movs	r1, #0
 80163ac:	6878      	ldr	r0, [r7, #4]
 80163ae:	f002 ff94 	bl	80192da <USBD_LL_PrepareReceive>

  return USBD_OK;
 80163b2:	2300      	movs	r3, #0
}
 80163b4:	4618      	mov	r0, r3
 80163b6:	3708      	adds	r7, #8
 80163b8:	46bd      	mov	sp, r7
 80163ba:	bd80      	pop	{r7, pc}

080163bc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80163bc:	b580      	push	{r7, lr}
 80163be:	b084      	sub	sp, #16
 80163c0:	af00      	add	r7, sp, #0
 80163c2:	4603      	mov	r3, r0
 80163c4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80163c6:	79fb      	ldrb	r3, [r7, #7]
 80163c8:	4a08      	ldr	r2, [pc, #32]	; (80163ec <disk_status+0x30>)
 80163ca:	009b      	lsls	r3, r3, #2
 80163cc:	4413      	add	r3, r2
 80163ce:	685b      	ldr	r3, [r3, #4]
 80163d0:	685b      	ldr	r3, [r3, #4]
 80163d2:	79fa      	ldrb	r2, [r7, #7]
 80163d4:	4905      	ldr	r1, [pc, #20]	; (80163ec <disk_status+0x30>)
 80163d6:	440a      	add	r2, r1
 80163d8:	7a12      	ldrb	r2, [r2, #8]
 80163da:	4610      	mov	r0, r2
 80163dc:	4798      	blx	r3
 80163de:	4603      	mov	r3, r0
 80163e0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80163e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80163e4:	4618      	mov	r0, r3
 80163e6:	3710      	adds	r7, #16
 80163e8:	46bd      	mov	sp, r7
 80163ea:	bd80      	pop	{r7, pc}
 80163ec:	24000b84 	.word	0x24000b84

080163f0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80163f0:	b580      	push	{r7, lr}
 80163f2:	b084      	sub	sp, #16
 80163f4:	af00      	add	r7, sp, #0
 80163f6:	4603      	mov	r3, r0
 80163f8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80163fa:	2300      	movs	r3, #0
 80163fc:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80163fe:	79fb      	ldrb	r3, [r7, #7]
 8016400:	4a0d      	ldr	r2, [pc, #52]	; (8016438 <disk_initialize+0x48>)
 8016402:	5cd3      	ldrb	r3, [r2, r3]
 8016404:	2b00      	cmp	r3, #0
 8016406:	d111      	bne.n	801642c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016408:	79fb      	ldrb	r3, [r7, #7]
 801640a:	4a0b      	ldr	r2, [pc, #44]	; (8016438 <disk_initialize+0x48>)
 801640c:	2101      	movs	r1, #1
 801640e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016410:	79fb      	ldrb	r3, [r7, #7]
 8016412:	4a09      	ldr	r2, [pc, #36]	; (8016438 <disk_initialize+0x48>)
 8016414:	009b      	lsls	r3, r3, #2
 8016416:	4413      	add	r3, r2
 8016418:	685b      	ldr	r3, [r3, #4]
 801641a:	681b      	ldr	r3, [r3, #0]
 801641c:	79fa      	ldrb	r2, [r7, #7]
 801641e:	4906      	ldr	r1, [pc, #24]	; (8016438 <disk_initialize+0x48>)
 8016420:	440a      	add	r2, r1
 8016422:	7a12      	ldrb	r2, [r2, #8]
 8016424:	4610      	mov	r0, r2
 8016426:	4798      	blx	r3
 8016428:	4603      	mov	r3, r0
 801642a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 801642c:	7bfb      	ldrb	r3, [r7, #15]
}
 801642e:	4618      	mov	r0, r3
 8016430:	3710      	adds	r7, #16
 8016432:	46bd      	mov	sp, r7
 8016434:	bd80      	pop	{r7, pc}
 8016436:	bf00      	nop
 8016438:	24000b84 	.word	0x24000b84

0801643c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 801643c:	b590      	push	{r4, r7, lr}
 801643e:	b087      	sub	sp, #28
 8016440:	af00      	add	r7, sp, #0
 8016442:	60b9      	str	r1, [r7, #8]
 8016444:	607a      	str	r2, [r7, #4]
 8016446:	603b      	str	r3, [r7, #0]
 8016448:	4603      	mov	r3, r0
 801644a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 801644c:	7bfb      	ldrb	r3, [r7, #15]
 801644e:	4a0a      	ldr	r2, [pc, #40]	; (8016478 <disk_read+0x3c>)
 8016450:	009b      	lsls	r3, r3, #2
 8016452:	4413      	add	r3, r2
 8016454:	685b      	ldr	r3, [r3, #4]
 8016456:	689c      	ldr	r4, [r3, #8]
 8016458:	7bfb      	ldrb	r3, [r7, #15]
 801645a:	4a07      	ldr	r2, [pc, #28]	; (8016478 <disk_read+0x3c>)
 801645c:	4413      	add	r3, r2
 801645e:	7a18      	ldrb	r0, [r3, #8]
 8016460:	683b      	ldr	r3, [r7, #0]
 8016462:	687a      	ldr	r2, [r7, #4]
 8016464:	68b9      	ldr	r1, [r7, #8]
 8016466:	47a0      	blx	r4
 8016468:	4603      	mov	r3, r0
 801646a:	75fb      	strb	r3, [r7, #23]
  return res;
 801646c:	7dfb      	ldrb	r3, [r7, #23]
}
 801646e:	4618      	mov	r0, r3
 8016470:	371c      	adds	r7, #28
 8016472:	46bd      	mov	sp, r7
 8016474:	bd90      	pop	{r4, r7, pc}
 8016476:	bf00      	nop
 8016478:	24000b84 	.word	0x24000b84

0801647c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 801647c:	b590      	push	{r4, r7, lr}
 801647e:	b087      	sub	sp, #28
 8016480:	af00      	add	r7, sp, #0
 8016482:	60b9      	str	r1, [r7, #8]
 8016484:	607a      	str	r2, [r7, #4]
 8016486:	603b      	str	r3, [r7, #0]
 8016488:	4603      	mov	r3, r0
 801648a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 801648c:	7bfb      	ldrb	r3, [r7, #15]
 801648e:	4a0a      	ldr	r2, [pc, #40]	; (80164b8 <disk_write+0x3c>)
 8016490:	009b      	lsls	r3, r3, #2
 8016492:	4413      	add	r3, r2
 8016494:	685b      	ldr	r3, [r3, #4]
 8016496:	68dc      	ldr	r4, [r3, #12]
 8016498:	7bfb      	ldrb	r3, [r7, #15]
 801649a:	4a07      	ldr	r2, [pc, #28]	; (80164b8 <disk_write+0x3c>)
 801649c:	4413      	add	r3, r2
 801649e:	7a18      	ldrb	r0, [r3, #8]
 80164a0:	683b      	ldr	r3, [r7, #0]
 80164a2:	687a      	ldr	r2, [r7, #4]
 80164a4:	68b9      	ldr	r1, [r7, #8]
 80164a6:	47a0      	blx	r4
 80164a8:	4603      	mov	r3, r0
 80164aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80164ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80164ae:	4618      	mov	r0, r3
 80164b0:	371c      	adds	r7, #28
 80164b2:	46bd      	mov	sp, r7
 80164b4:	bd90      	pop	{r4, r7, pc}
 80164b6:	bf00      	nop
 80164b8:	24000b84 	.word	0x24000b84

080164bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80164bc:	b580      	push	{r7, lr}
 80164be:	b084      	sub	sp, #16
 80164c0:	af00      	add	r7, sp, #0
 80164c2:	4603      	mov	r3, r0
 80164c4:	603a      	str	r2, [r7, #0]
 80164c6:	71fb      	strb	r3, [r7, #7]
 80164c8:	460b      	mov	r3, r1
 80164ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80164cc:	79fb      	ldrb	r3, [r7, #7]
 80164ce:	4a09      	ldr	r2, [pc, #36]	; (80164f4 <disk_ioctl+0x38>)
 80164d0:	009b      	lsls	r3, r3, #2
 80164d2:	4413      	add	r3, r2
 80164d4:	685b      	ldr	r3, [r3, #4]
 80164d6:	691b      	ldr	r3, [r3, #16]
 80164d8:	79fa      	ldrb	r2, [r7, #7]
 80164da:	4906      	ldr	r1, [pc, #24]	; (80164f4 <disk_ioctl+0x38>)
 80164dc:	440a      	add	r2, r1
 80164de:	7a10      	ldrb	r0, [r2, #8]
 80164e0:	79b9      	ldrb	r1, [r7, #6]
 80164e2:	683a      	ldr	r2, [r7, #0]
 80164e4:	4798      	blx	r3
 80164e6:	4603      	mov	r3, r0
 80164e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80164ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80164ec:	4618      	mov	r0, r3
 80164ee:	3710      	adds	r7, #16
 80164f0:	46bd      	mov	sp, r7
 80164f2:	bd80      	pop	{r7, pc}
 80164f4:	24000b84 	.word	0x24000b84

080164f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80164f8:	b480      	push	{r7}
 80164fa:	b085      	sub	sp, #20
 80164fc:	af00      	add	r7, sp, #0
 80164fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	3301      	adds	r3, #1
 8016504:	781b      	ldrb	r3, [r3, #0]
 8016506:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016508:	89fb      	ldrh	r3, [r7, #14]
 801650a:	021b      	lsls	r3, r3, #8
 801650c:	b21a      	sxth	r2, r3
 801650e:	687b      	ldr	r3, [r7, #4]
 8016510:	781b      	ldrb	r3, [r3, #0]
 8016512:	b21b      	sxth	r3, r3
 8016514:	4313      	orrs	r3, r2
 8016516:	b21b      	sxth	r3, r3
 8016518:	81fb      	strh	r3, [r7, #14]
	return rv;
 801651a:	89fb      	ldrh	r3, [r7, #14]
}
 801651c:	4618      	mov	r0, r3
 801651e:	3714      	adds	r7, #20
 8016520:	46bd      	mov	sp, r7
 8016522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016526:	4770      	bx	lr

08016528 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016528:	b480      	push	{r7}
 801652a:	b085      	sub	sp, #20
 801652c:	af00      	add	r7, sp, #0
 801652e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	3303      	adds	r3, #3
 8016534:	781b      	ldrb	r3, [r3, #0]
 8016536:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016538:	68fb      	ldr	r3, [r7, #12]
 801653a:	021b      	lsls	r3, r3, #8
 801653c:	687a      	ldr	r2, [r7, #4]
 801653e:	3202      	adds	r2, #2
 8016540:	7812      	ldrb	r2, [r2, #0]
 8016542:	4313      	orrs	r3, r2
 8016544:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016546:	68fb      	ldr	r3, [r7, #12]
 8016548:	021b      	lsls	r3, r3, #8
 801654a:	687a      	ldr	r2, [r7, #4]
 801654c:	3201      	adds	r2, #1
 801654e:	7812      	ldrb	r2, [r2, #0]
 8016550:	4313      	orrs	r3, r2
 8016552:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	021b      	lsls	r3, r3, #8
 8016558:	687a      	ldr	r2, [r7, #4]
 801655a:	7812      	ldrb	r2, [r2, #0]
 801655c:	4313      	orrs	r3, r2
 801655e:	60fb      	str	r3, [r7, #12]
	return rv;
 8016560:	68fb      	ldr	r3, [r7, #12]
}
 8016562:	4618      	mov	r0, r3
 8016564:	3714      	adds	r7, #20
 8016566:	46bd      	mov	sp, r7
 8016568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801656c:	4770      	bx	lr

0801656e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 801656e:	b480      	push	{r7}
 8016570:	b083      	sub	sp, #12
 8016572:	af00      	add	r7, sp, #0
 8016574:	6078      	str	r0, [r7, #4]
 8016576:	460b      	mov	r3, r1
 8016578:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	1c5a      	adds	r2, r3, #1
 801657e:	607a      	str	r2, [r7, #4]
 8016580:	887a      	ldrh	r2, [r7, #2]
 8016582:	b2d2      	uxtb	r2, r2
 8016584:	701a      	strb	r2, [r3, #0]
 8016586:	887b      	ldrh	r3, [r7, #2]
 8016588:	0a1b      	lsrs	r3, r3, #8
 801658a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	1c5a      	adds	r2, r3, #1
 8016590:	607a      	str	r2, [r7, #4]
 8016592:	887a      	ldrh	r2, [r7, #2]
 8016594:	b2d2      	uxtb	r2, r2
 8016596:	701a      	strb	r2, [r3, #0]
}
 8016598:	bf00      	nop
 801659a:	370c      	adds	r7, #12
 801659c:	46bd      	mov	sp, r7
 801659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a2:	4770      	bx	lr

080165a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80165a4:	b480      	push	{r7}
 80165a6:	b083      	sub	sp, #12
 80165a8:	af00      	add	r7, sp, #0
 80165aa:	6078      	str	r0, [r7, #4]
 80165ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	1c5a      	adds	r2, r3, #1
 80165b2:	607a      	str	r2, [r7, #4]
 80165b4:	683a      	ldr	r2, [r7, #0]
 80165b6:	b2d2      	uxtb	r2, r2
 80165b8:	701a      	strb	r2, [r3, #0]
 80165ba:	683b      	ldr	r3, [r7, #0]
 80165bc:	0a1b      	lsrs	r3, r3, #8
 80165be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80165c0:	687b      	ldr	r3, [r7, #4]
 80165c2:	1c5a      	adds	r2, r3, #1
 80165c4:	607a      	str	r2, [r7, #4]
 80165c6:	683a      	ldr	r2, [r7, #0]
 80165c8:	b2d2      	uxtb	r2, r2
 80165ca:	701a      	strb	r2, [r3, #0]
 80165cc:	683b      	ldr	r3, [r7, #0]
 80165ce:	0a1b      	lsrs	r3, r3, #8
 80165d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	1c5a      	adds	r2, r3, #1
 80165d6:	607a      	str	r2, [r7, #4]
 80165d8:	683a      	ldr	r2, [r7, #0]
 80165da:	b2d2      	uxtb	r2, r2
 80165dc:	701a      	strb	r2, [r3, #0]
 80165de:	683b      	ldr	r3, [r7, #0]
 80165e0:	0a1b      	lsrs	r3, r3, #8
 80165e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	1c5a      	adds	r2, r3, #1
 80165e8:	607a      	str	r2, [r7, #4]
 80165ea:	683a      	ldr	r2, [r7, #0]
 80165ec:	b2d2      	uxtb	r2, r2
 80165ee:	701a      	strb	r2, [r3, #0]
}
 80165f0:	bf00      	nop
 80165f2:	370c      	adds	r7, #12
 80165f4:	46bd      	mov	sp, r7
 80165f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165fa:	4770      	bx	lr

080165fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80165fc:	b480      	push	{r7}
 80165fe:	b087      	sub	sp, #28
 8016600:	af00      	add	r7, sp, #0
 8016602:	60f8      	str	r0, [r7, #12]
 8016604:	60b9      	str	r1, [r7, #8]
 8016606:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016608:	68fb      	ldr	r3, [r7, #12]
 801660a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 801660c:	68bb      	ldr	r3, [r7, #8]
 801660e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	2b00      	cmp	r3, #0
 8016614:	d00d      	beq.n	8016632 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016616:	693a      	ldr	r2, [r7, #16]
 8016618:	1c53      	adds	r3, r2, #1
 801661a:	613b      	str	r3, [r7, #16]
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	1c59      	adds	r1, r3, #1
 8016620:	6179      	str	r1, [r7, #20]
 8016622:	7812      	ldrb	r2, [r2, #0]
 8016624:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016626:	687b      	ldr	r3, [r7, #4]
 8016628:	3b01      	subs	r3, #1
 801662a:	607b      	str	r3, [r7, #4]
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d1f1      	bne.n	8016616 <mem_cpy+0x1a>
	}
}
 8016632:	bf00      	nop
 8016634:	371c      	adds	r7, #28
 8016636:	46bd      	mov	sp, r7
 8016638:	f85d 7b04 	ldr.w	r7, [sp], #4
 801663c:	4770      	bx	lr

0801663e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 801663e:	b480      	push	{r7}
 8016640:	b087      	sub	sp, #28
 8016642:	af00      	add	r7, sp, #0
 8016644:	60f8      	str	r0, [r7, #12]
 8016646:	60b9      	str	r1, [r7, #8]
 8016648:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 801664e:	697b      	ldr	r3, [r7, #20]
 8016650:	1c5a      	adds	r2, r3, #1
 8016652:	617a      	str	r2, [r7, #20]
 8016654:	68ba      	ldr	r2, [r7, #8]
 8016656:	b2d2      	uxtb	r2, r2
 8016658:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 801665a:	687b      	ldr	r3, [r7, #4]
 801665c:	3b01      	subs	r3, #1
 801665e:	607b      	str	r3, [r7, #4]
 8016660:	687b      	ldr	r3, [r7, #4]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d1f3      	bne.n	801664e <mem_set+0x10>
}
 8016666:	bf00      	nop
 8016668:	371c      	adds	r7, #28
 801666a:	46bd      	mov	sp, r7
 801666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016670:	4770      	bx	lr

08016672 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016672:	b480      	push	{r7}
 8016674:	b089      	sub	sp, #36	; 0x24
 8016676:	af00      	add	r7, sp, #0
 8016678:	60f8      	str	r0, [r7, #12]
 801667a:	60b9      	str	r1, [r7, #8]
 801667c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 801667e:	68fb      	ldr	r3, [r7, #12]
 8016680:	61fb      	str	r3, [r7, #28]
 8016682:	68bb      	ldr	r3, [r7, #8]
 8016684:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016686:	2300      	movs	r3, #0
 8016688:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 801668a:	69fb      	ldr	r3, [r7, #28]
 801668c:	1c5a      	adds	r2, r3, #1
 801668e:	61fa      	str	r2, [r7, #28]
 8016690:	781b      	ldrb	r3, [r3, #0]
 8016692:	4619      	mov	r1, r3
 8016694:	69bb      	ldr	r3, [r7, #24]
 8016696:	1c5a      	adds	r2, r3, #1
 8016698:	61ba      	str	r2, [r7, #24]
 801669a:	781b      	ldrb	r3, [r3, #0]
 801669c:	1acb      	subs	r3, r1, r3
 801669e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80166a0:	687b      	ldr	r3, [r7, #4]
 80166a2:	3b01      	subs	r3, #1
 80166a4:	607b      	str	r3, [r7, #4]
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	2b00      	cmp	r3, #0
 80166aa:	d002      	beq.n	80166b2 <mem_cmp+0x40>
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d0eb      	beq.n	801668a <mem_cmp+0x18>

	return r;
 80166b2:	697b      	ldr	r3, [r7, #20]
}
 80166b4:	4618      	mov	r0, r3
 80166b6:	3724      	adds	r7, #36	; 0x24
 80166b8:	46bd      	mov	sp, r7
 80166ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166be:	4770      	bx	lr

080166c0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80166c0:	b480      	push	{r7}
 80166c2:	b083      	sub	sp, #12
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80166ca:	e002      	b.n	80166d2 <chk_chr+0x12>
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	3301      	adds	r3, #1
 80166d0:	607b      	str	r3, [r7, #4]
 80166d2:	687b      	ldr	r3, [r7, #4]
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	2b00      	cmp	r3, #0
 80166d8:	d005      	beq.n	80166e6 <chk_chr+0x26>
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	781b      	ldrb	r3, [r3, #0]
 80166de:	461a      	mov	r2, r3
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	4293      	cmp	r3, r2
 80166e4:	d1f2      	bne.n	80166cc <chk_chr+0xc>
	return *str;
 80166e6:	687b      	ldr	r3, [r7, #4]
 80166e8:	781b      	ldrb	r3, [r3, #0]
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	370c      	adds	r7, #12
 80166ee:	46bd      	mov	sp, r7
 80166f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166f4:	4770      	bx	lr
	...

080166f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80166f8:	b480      	push	{r7}
 80166fa:	b085      	sub	sp, #20
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016702:	2300      	movs	r3, #0
 8016704:	60bb      	str	r3, [r7, #8]
 8016706:	68bb      	ldr	r3, [r7, #8]
 8016708:	60fb      	str	r3, [r7, #12]
 801670a:	e029      	b.n	8016760 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 801670c:	4a27      	ldr	r2, [pc, #156]	; (80167ac <chk_lock+0xb4>)
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	011b      	lsls	r3, r3, #4
 8016712:	4413      	add	r3, r2
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d01d      	beq.n	8016756 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801671a:	4a24      	ldr	r2, [pc, #144]	; (80167ac <chk_lock+0xb4>)
 801671c:	68fb      	ldr	r3, [r7, #12]
 801671e:	011b      	lsls	r3, r3, #4
 8016720:	4413      	add	r3, r2
 8016722:	681a      	ldr	r2, [r3, #0]
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	681b      	ldr	r3, [r3, #0]
 8016728:	429a      	cmp	r2, r3
 801672a:	d116      	bne.n	801675a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 801672c:	4a1f      	ldr	r2, [pc, #124]	; (80167ac <chk_lock+0xb4>)
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	011b      	lsls	r3, r3, #4
 8016732:	4413      	add	r3, r2
 8016734:	3304      	adds	r3, #4
 8016736:	681a      	ldr	r2, [r3, #0]
 8016738:	687b      	ldr	r3, [r7, #4]
 801673a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 801673c:	429a      	cmp	r2, r3
 801673e:	d10c      	bne.n	801675a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016740:	4a1a      	ldr	r2, [pc, #104]	; (80167ac <chk_lock+0xb4>)
 8016742:	68fb      	ldr	r3, [r7, #12]
 8016744:	011b      	lsls	r3, r3, #4
 8016746:	4413      	add	r3, r2
 8016748:	3308      	adds	r3, #8
 801674a:	681a      	ldr	r2, [r3, #0]
 801674c:	687b      	ldr	r3, [r7, #4]
 801674e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016750:	429a      	cmp	r2, r3
 8016752:	d102      	bne.n	801675a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016754:	e007      	b.n	8016766 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016756:	2301      	movs	r3, #1
 8016758:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 801675a:	68fb      	ldr	r3, [r7, #12]
 801675c:	3301      	adds	r3, #1
 801675e:	60fb      	str	r3, [r7, #12]
 8016760:	68fb      	ldr	r3, [r7, #12]
 8016762:	2b01      	cmp	r3, #1
 8016764:	d9d2      	bls.n	801670c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016766:	68fb      	ldr	r3, [r7, #12]
 8016768:	2b02      	cmp	r3, #2
 801676a:	d109      	bne.n	8016780 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 801676c:	68bb      	ldr	r3, [r7, #8]
 801676e:	2b00      	cmp	r3, #0
 8016770:	d102      	bne.n	8016778 <chk_lock+0x80>
 8016772:	683b      	ldr	r3, [r7, #0]
 8016774:	2b02      	cmp	r3, #2
 8016776:	d101      	bne.n	801677c <chk_lock+0x84>
 8016778:	2300      	movs	r3, #0
 801677a:	e010      	b.n	801679e <chk_lock+0xa6>
 801677c:	2312      	movs	r3, #18
 801677e:	e00e      	b.n	801679e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8016780:	683b      	ldr	r3, [r7, #0]
 8016782:	2b00      	cmp	r3, #0
 8016784:	d108      	bne.n	8016798 <chk_lock+0xa0>
 8016786:	4a09      	ldr	r2, [pc, #36]	; (80167ac <chk_lock+0xb4>)
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	011b      	lsls	r3, r3, #4
 801678c:	4413      	add	r3, r2
 801678e:	330c      	adds	r3, #12
 8016790:	881b      	ldrh	r3, [r3, #0]
 8016792:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016796:	d101      	bne.n	801679c <chk_lock+0xa4>
 8016798:	2310      	movs	r3, #16
 801679a:	e000      	b.n	801679e <chk_lock+0xa6>
 801679c:	2300      	movs	r3, #0
}
 801679e:	4618      	mov	r0, r3
 80167a0:	3714      	adds	r7, #20
 80167a2:	46bd      	mov	sp, r7
 80167a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167a8:	4770      	bx	lr
 80167aa:	bf00      	nop
 80167ac:	24000b64 	.word	0x24000b64

080167b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 80167b0:	b480      	push	{r7}
 80167b2:	b083      	sub	sp, #12
 80167b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80167b6:	2300      	movs	r3, #0
 80167b8:	607b      	str	r3, [r7, #4]
 80167ba:	e002      	b.n	80167c2 <enq_lock+0x12>
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	3301      	adds	r3, #1
 80167c0:	607b      	str	r3, [r7, #4]
 80167c2:	687b      	ldr	r3, [r7, #4]
 80167c4:	2b01      	cmp	r3, #1
 80167c6:	d806      	bhi.n	80167d6 <enq_lock+0x26>
 80167c8:	4a09      	ldr	r2, [pc, #36]	; (80167f0 <enq_lock+0x40>)
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	011b      	lsls	r3, r3, #4
 80167ce:	4413      	add	r3, r2
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	d1f2      	bne.n	80167bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	2b02      	cmp	r3, #2
 80167da:	bf14      	ite	ne
 80167dc:	2301      	movne	r3, #1
 80167de:	2300      	moveq	r3, #0
 80167e0:	b2db      	uxtb	r3, r3
}
 80167e2:	4618      	mov	r0, r3
 80167e4:	370c      	adds	r7, #12
 80167e6:	46bd      	mov	sp, r7
 80167e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167ec:	4770      	bx	lr
 80167ee:	bf00      	nop
 80167f0:	24000b64 	.word	0x24000b64

080167f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80167f4:	b480      	push	{r7}
 80167f6:	b085      	sub	sp, #20
 80167f8:	af00      	add	r7, sp, #0
 80167fa:	6078      	str	r0, [r7, #4]
 80167fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80167fe:	2300      	movs	r3, #0
 8016800:	60fb      	str	r3, [r7, #12]
 8016802:	e01f      	b.n	8016844 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8016804:	4a41      	ldr	r2, [pc, #260]	; (801690c <inc_lock+0x118>)
 8016806:	68fb      	ldr	r3, [r7, #12]
 8016808:	011b      	lsls	r3, r3, #4
 801680a:	4413      	add	r3, r2
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	429a      	cmp	r2, r3
 8016814:	d113      	bne.n	801683e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8016816:	4a3d      	ldr	r2, [pc, #244]	; (801690c <inc_lock+0x118>)
 8016818:	68fb      	ldr	r3, [r7, #12]
 801681a:	011b      	lsls	r3, r3, #4
 801681c:	4413      	add	r3, r2
 801681e:	3304      	adds	r3, #4
 8016820:	681a      	ldr	r2, [r3, #0]
 8016822:	687b      	ldr	r3, [r7, #4]
 8016824:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8016826:	429a      	cmp	r2, r3
 8016828:	d109      	bne.n	801683e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 801682a:	4a38      	ldr	r2, [pc, #224]	; (801690c <inc_lock+0x118>)
 801682c:	68fb      	ldr	r3, [r7, #12]
 801682e:	011b      	lsls	r3, r3, #4
 8016830:	4413      	add	r3, r2
 8016832:	3308      	adds	r3, #8
 8016834:	681a      	ldr	r2, [r3, #0]
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 801683a:	429a      	cmp	r2, r3
 801683c:	d006      	beq.n	801684c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	3301      	adds	r3, #1
 8016842:	60fb      	str	r3, [r7, #12]
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	2b01      	cmp	r3, #1
 8016848:	d9dc      	bls.n	8016804 <inc_lock+0x10>
 801684a:	e000      	b.n	801684e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 801684c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 801684e:	68fb      	ldr	r3, [r7, #12]
 8016850:	2b02      	cmp	r3, #2
 8016852:	d132      	bne.n	80168ba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8016854:	2300      	movs	r3, #0
 8016856:	60fb      	str	r3, [r7, #12]
 8016858:	e002      	b.n	8016860 <inc_lock+0x6c>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	3301      	adds	r3, #1
 801685e:	60fb      	str	r3, [r7, #12]
 8016860:	68fb      	ldr	r3, [r7, #12]
 8016862:	2b01      	cmp	r3, #1
 8016864:	d806      	bhi.n	8016874 <inc_lock+0x80>
 8016866:	4a29      	ldr	r2, [pc, #164]	; (801690c <inc_lock+0x118>)
 8016868:	68fb      	ldr	r3, [r7, #12]
 801686a:	011b      	lsls	r3, r3, #4
 801686c:	4413      	add	r3, r2
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2b00      	cmp	r3, #0
 8016872:	d1f2      	bne.n	801685a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8016874:	68fb      	ldr	r3, [r7, #12]
 8016876:	2b02      	cmp	r3, #2
 8016878:	d101      	bne.n	801687e <inc_lock+0x8a>
 801687a:	2300      	movs	r3, #0
 801687c:	e040      	b.n	8016900 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	681a      	ldr	r2, [r3, #0]
 8016882:	4922      	ldr	r1, [pc, #136]	; (801690c <inc_lock+0x118>)
 8016884:	68fb      	ldr	r3, [r7, #12]
 8016886:	011b      	lsls	r3, r3, #4
 8016888:	440b      	add	r3, r1
 801688a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	689a      	ldr	r2, [r3, #8]
 8016890:	491e      	ldr	r1, [pc, #120]	; (801690c <inc_lock+0x118>)
 8016892:	68fb      	ldr	r3, [r7, #12]
 8016894:	011b      	lsls	r3, r3, #4
 8016896:	440b      	add	r3, r1
 8016898:	3304      	adds	r3, #4
 801689a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	695a      	ldr	r2, [r3, #20]
 80168a0:	491a      	ldr	r1, [pc, #104]	; (801690c <inc_lock+0x118>)
 80168a2:	68fb      	ldr	r3, [r7, #12]
 80168a4:	011b      	lsls	r3, r3, #4
 80168a6:	440b      	add	r3, r1
 80168a8:	3308      	adds	r3, #8
 80168aa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 80168ac:	4a17      	ldr	r2, [pc, #92]	; (801690c <inc_lock+0x118>)
 80168ae:	68fb      	ldr	r3, [r7, #12]
 80168b0:	011b      	lsls	r3, r3, #4
 80168b2:	4413      	add	r3, r2
 80168b4:	330c      	adds	r3, #12
 80168b6:	2200      	movs	r2, #0
 80168b8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 80168ba:	683b      	ldr	r3, [r7, #0]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d009      	beq.n	80168d4 <inc_lock+0xe0>
 80168c0:	4a12      	ldr	r2, [pc, #72]	; (801690c <inc_lock+0x118>)
 80168c2:	68fb      	ldr	r3, [r7, #12]
 80168c4:	011b      	lsls	r3, r3, #4
 80168c6:	4413      	add	r3, r2
 80168c8:	330c      	adds	r3, #12
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d001      	beq.n	80168d4 <inc_lock+0xe0>
 80168d0:	2300      	movs	r3, #0
 80168d2:	e015      	b.n	8016900 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80168d4:	683b      	ldr	r3, [r7, #0]
 80168d6:	2b00      	cmp	r3, #0
 80168d8:	d108      	bne.n	80168ec <inc_lock+0xf8>
 80168da:	4a0c      	ldr	r2, [pc, #48]	; (801690c <inc_lock+0x118>)
 80168dc:	68fb      	ldr	r3, [r7, #12]
 80168de:	011b      	lsls	r3, r3, #4
 80168e0:	4413      	add	r3, r2
 80168e2:	330c      	adds	r3, #12
 80168e4:	881b      	ldrh	r3, [r3, #0]
 80168e6:	3301      	adds	r3, #1
 80168e8:	b29a      	uxth	r2, r3
 80168ea:	e001      	b.n	80168f0 <inc_lock+0xfc>
 80168ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80168f0:	4906      	ldr	r1, [pc, #24]	; (801690c <inc_lock+0x118>)
 80168f2:	68fb      	ldr	r3, [r7, #12]
 80168f4:	011b      	lsls	r3, r3, #4
 80168f6:	440b      	add	r3, r1
 80168f8:	330c      	adds	r3, #12
 80168fa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80168fc:	68fb      	ldr	r3, [r7, #12]
 80168fe:	3301      	adds	r3, #1
}
 8016900:	4618      	mov	r0, r3
 8016902:	3714      	adds	r7, #20
 8016904:	46bd      	mov	sp, r7
 8016906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801690a:	4770      	bx	lr
 801690c:	24000b64 	.word	0x24000b64

08016910 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8016910:	b480      	push	{r7}
 8016912:	b085      	sub	sp, #20
 8016914:	af00      	add	r7, sp, #0
 8016916:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	3b01      	subs	r3, #1
 801691c:	607b      	str	r3, [r7, #4]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	2b01      	cmp	r3, #1
 8016922:	d825      	bhi.n	8016970 <dec_lock+0x60>
		n = Files[i].ctr;
 8016924:	4a17      	ldr	r2, [pc, #92]	; (8016984 <dec_lock+0x74>)
 8016926:	687b      	ldr	r3, [r7, #4]
 8016928:	011b      	lsls	r3, r3, #4
 801692a:	4413      	add	r3, r2
 801692c:	330c      	adds	r3, #12
 801692e:	881b      	ldrh	r3, [r3, #0]
 8016930:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8016932:	89fb      	ldrh	r3, [r7, #14]
 8016934:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8016938:	d101      	bne.n	801693e <dec_lock+0x2e>
 801693a:	2300      	movs	r3, #0
 801693c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801693e:	89fb      	ldrh	r3, [r7, #14]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d002      	beq.n	801694a <dec_lock+0x3a>
 8016944:	89fb      	ldrh	r3, [r7, #14]
 8016946:	3b01      	subs	r3, #1
 8016948:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 801694a:	4a0e      	ldr	r2, [pc, #56]	; (8016984 <dec_lock+0x74>)
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	011b      	lsls	r3, r3, #4
 8016950:	4413      	add	r3, r2
 8016952:	330c      	adds	r3, #12
 8016954:	89fa      	ldrh	r2, [r7, #14]
 8016956:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8016958:	89fb      	ldrh	r3, [r7, #14]
 801695a:	2b00      	cmp	r3, #0
 801695c:	d105      	bne.n	801696a <dec_lock+0x5a>
 801695e:	4a09      	ldr	r2, [pc, #36]	; (8016984 <dec_lock+0x74>)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	011b      	lsls	r3, r3, #4
 8016964:	4413      	add	r3, r2
 8016966:	2200      	movs	r2, #0
 8016968:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 801696a:	2300      	movs	r3, #0
 801696c:	737b      	strb	r3, [r7, #13]
 801696e:	e001      	b.n	8016974 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8016970:	2302      	movs	r3, #2
 8016972:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8016974:	7b7b      	ldrb	r3, [r7, #13]
}
 8016976:	4618      	mov	r0, r3
 8016978:	3714      	adds	r7, #20
 801697a:	46bd      	mov	sp, r7
 801697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016980:	4770      	bx	lr
 8016982:	bf00      	nop
 8016984:	24000b64 	.word	0x24000b64

08016988 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8016988:	b480      	push	{r7}
 801698a:	b085      	sub	sp, #20
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8016990:	2300      	movs	r3, #0
 8016992:	60fb      	str	r3, [r7, #12]
 8016994:	e010      	b.n	80169b8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8016996:	4a0d      	ldr	r2, [pc, #52]	; (80169cc <clear_lock+0x44>)
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	011b      	lsls	r3, r3, #4
 801699c:	4413      	add	r3, r2
 801699e:	681b      	ldr	r3, [r3, #0]
 80169a0:	687a      	ldr	r2, [r7, #4]
 80169a2:	429a      	cmp	r2, r3
 80169a4:	d105      	bne.n	80169b2 <clear_lock+0x2a>
 80169a6:	4a09      	ldr	r2, [pc, #36]	; (80169cc <clear_lock+0x44>)
 80169a8:	68fb      	ldr	r3, [r7, #12]
 80169aa:	011b      	lsls	r3, r3, #4
 80169ac:	4413      	add	r3, r2
 80169ae:	2200      	movs	r2, #0
 80169b0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 80169b2:	68fb      	ldr	r3, [r7, #12]
 80169b4:	3301      	adds	r3, #1
 80169b6:	60fb      	str	r3, [r7, #12]
 80169b8:	68fb      	ldr	r3, [r7, #12]
 80169ba:	2b01      	cmp	r3, #1
 80169bc:	d9eb      	bls.n	8016996 <clear_lock+0xe>
	}
}
 80169be:	bf00      	nop
 80169c0:	3714      	adds	r7, #20
 80169c2:	46bd      	mov	sp, r7
 80169c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169c8:	4770      	bx	lr
 80169ca:	bf00      	nop
 80169cc:	24000b64 	.word	0x24000b64

080169d0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 80169d0:	b580      	push	{r7, lr}
 80169d2:	b086      	sub	sp, #24
 80169d4:	af00      	add	r7, sp, #0
 80169d6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 80169d8:	2300      	movs	r3, #0
 80169da:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	78db      	ldrb	r3, [r3, #3]
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d034      	beq.n	8016a4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80169e8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	7858      	ldrb	r0, [r3, #1]
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80169f4:	2301      	movs	r3, #1
 80169f6:	697a      	ldr	r2, [r7, #20]
 80169f8:	f7ff fd40 	bl	801647c <disk_write>
 80169fc:	4603      	mov	r3, r0
 80169fe:	2b00      	cmp	r3, #0
 8016a00:	d002      	beq.n	8016a08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8016a02:	2301      	movs	r3, #1
 8016a04:	73fb      	strb	r3, [r7, #15]
 8016a06:	e022      	b.n	8016a4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2200      	movs	r2, #0
 8016a0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	6a1b      	ldr	r3, [r3, #32]
 8016a12:	697a      	ldr	r2, [r7, #20]
 8016a14:	1ad2      	subs	r2, r2, r3
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	699b      	ldr	r3, [r3, #24]
 8016a1a:	429a      	cmp	r2, r3
 8016a1c:	d217      	bcs.n	8016a4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	789b      	ldrb	r3, [r3, #2]
 8016a22:	613b      	str	r3, [r7, #16]
 8016a24:	e010      	b.n	8016a48 <sync_window+0x78>
					wsect += fs->fsize;
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	699b      	ldr	r3, [r3, #24]
 8016a2a:	697a      	ldr	r2, [r7, #20]
 8016a2c:	4413      	add	r3, r2
 8016a2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	7858      	ldrb	r0, [r3, #1]
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a3a:	2301      	movs	r3, #1
 8016a3c:	697a      	ldr	r2, [r7, #20]
 8016a3e:	f7ff fd1d 	bl	801647c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	3b01      	subs	r3, #1
 8016a46:	613b      	str	r3, [r7, #16]
 8016a48:	693b      	ldr	r3, [r7, #16]
 8016a4a:	2b01      	cmp	r3, #1
 8016a4c:	d8eb      	bhi.n	8016a26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8016a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016a50:	4618      	mov	r0, r3
 8016a52:	3718      	adds	r7, #24
 8016a54:	46bd      	mov	sp, r7
 8016a56:	bd80      	pop	{r7, pc}

08016a58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8016a58:	b580      	push	{r7, lr}
 8016a5a:	b084      	sub	sp, #16
 8016a5c:	af00      	add	r7, sp, #0
 8016a5e:	6078      	str	r0, [r7, #4]
 8016a60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8016a62:	2300      	movs	r3, #0
 8016a64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016a6a:	683a      	ldr	r2, [r7, #0]
 8016a6c:	429a      	cmp	r2, r3
 8016a6e:	d01b      	beq.n	8016aa8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8016a70:	6878      	ldr	r0, [r7, #4]
 8016a72:	f7ff ffad 	bl	80169d0 <sync_window>
 8016a76:	4603      	mov	r3, r0
 8016a78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8016a7a:	7bfb      	ldrb	r3, [r7, #15]
 8016a7c:	2b00      	cmp	r3, #0
 8016a7e:	d113      	bne.n	8016aa8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	7858      	ldrb	r0, [r3, #1]
 8016a84:	687b      	ldr	r3, [r7, #4]
 8016a86:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016a8a:	2301      	movs	r3, #1
 8016a8c:	683a      	ldr	r2, [r7, #0]
 8016a8e:	f7ff fcd5 	bl	801643c <disk_read>
 8016a92:	4603      	mov	r3, r0
 8016a94:	2b00      	cmp	r3, #0
 8016a96:	d004      	beq.n	8016aa2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8016a98:	f04f 33ff 	mov.w	r3, #4294967295
 8016a9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8016a9e:	2301      	movs	r3, #1
 8016aa0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8016aa2:	687b      	ldr	r3, [r7, #4]
 8016aa4:	683a      	ldr	r2, [r7, #0]
 8016aa6:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8016aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8016aaa:	4618      	mov	r0, r3
 8016aac:	3710      	adds	r7, #16
 8016aae:	46bd      	mov	sp, r7
 8016ab0:	bd80      	pop	{r7, pc}
	...

08016ab4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8016ab4:	b580      	push	{r7, lr}
 8016ab6:	b084      	sub	sp, #16
 8016ab8:	af00      	add	r7, sp, #0
 8016aba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8016abc:	6878      	ldr	r0, [r7, #4]
 8016abe:	f7ff ff87 	bl	80169d0 <sync_window>
 8016ac2:	4603      	mov	r3, r0
 8016ac4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8016ac6:	7bfb      	ldrb	r3, [r7, #15]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d158      	bne.n	8016b7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	781b      	ldrb	r3, [r3, #0]
 8016ad0:	2b03      	cmp	r3, #3
 8016ad2:	d148      	bne.n	8016b66 <sync_fs+0xb2>
 8016ad4:	687b      	ldr	r3, [r7, #4]
 8016ad6:	791b      	ldrb	r3, [r3, #4]
 8016ad8:	2b01      	cmp	r3, #1
 8016ada:	d144      	bne.n	8016b66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	3330      	adds	r3, #48	; 0x30
 8016ae0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016ae4:	2100      	movs	r1, #0
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	f7ff fda9 	bl	801663e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	3330      	adds	r3, #48	; 0x30
 8016af0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8016af4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8016af8:	4618      	mov	r0, r3
 8016afa:	f7ff fd38 	bl	801656e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	3330      	adds	r3, #48	; 0x30
 8016b02:	4921      	ldr	r1, [pc, #132]	; (8016b88 <sync_fs+0xd4>)
 8016b04:	4618      	mov	r0, r3
 8016b06:	f7ff fd4d 	bl	80165a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	3330      	adds	r3, #48	; 0x30
 8016b0e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8016b12:	491e      	ldr	r1, [pc, #120]	; (8016b8c <sync_fs+0xd8>)
 8016b14:	4618      	mov	r0, r3
 8016b16:	f7ff fd45 	bl	80165a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8016b1a:	687b      	ldr	r3, [r7, #4]
 8016b1c:	3330      	adds	r3, #48	; 0x30
 8016b1e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8016b22:	687b      	ldr	r3, [r7, #4]
 8016b24:	691b      	ldr	r3, [r3, #16]
 8016b26:	4619      	mov	r1, r3
 8016b28:	4610      	mov	r0, r2
 8016b2a:	f7ff fd3b 	bl	80165a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	3330      	adds	r3, #48	; 0x30
 8016b32:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	68db      	ldr	r3, [r3, #12]
 8016b3a:	4619      	mov	r1, r3
 8016b3c:	4610      	mov	r0, r2
 8016b3e:	f7ff fd31 	bl	80165a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8016b42:	687b      	ldr	r3, [r7, #4]
 8016b44:	69db      	ldr	r3, [r3, #28]
 8016b46:	1c5a      	adds	r2, r3, #1
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8016b4c:	687b      	ldr	r3, [r7, #4]
 8016b4e:	7858      	ldrb	r0, [r3, #1]
 8016b50:	687b      	ldr	r3, [r7, #4]
 8016b52:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8016b56:	687b      	ldr	r3, [r7, #4]
 8016b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8016b5a:	2301      	movs	r3, #1
 8016b5c:	f7ff fc8e 	bl	801647c <disk_write>
			fs->fsi_flag = 0;
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	2200      	movs	r2, #0
 8016b64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8016b66:	687b      	ldr	r3, [r7, #4]
 8016b68:	785b      	ldrb	r3, [r3, #1]
 8016b6a:	2200      	movs	r2, #0
 8016b6c:	2100      	movs	r1, #0
 8016b6e:	4618      	mov	r0, r3
 8016b70:	f7ff fca4 	bl	80164bc <disk_ioctl>
 8016b74:	4603      	mov	r3, r0
 8016b76:	2b00      	cmp	r3, #0
 8016b78:	d001      	beq.n	8016b7e <sync_fs+0xca>
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8016b7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3710      	adds	r7, #16
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	41615252 	.word	0x41615252
 8016b8c:	61417272 	.word	0x61417272

08016b90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8016b90:	b480      	push	{r7}
 8016b92:	b083      	sub	sp, #12
 8016b94:	af00      	add	r7, sp, #0
 8016b96:	6078      	str	r0, [r7, #4]
 8016b98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	3b02      	subs	r3, #2
 8016b9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8016ba0:	687b      	ldr	r3, [r7, #4]
 8016ba2:	695b      	ldr	r3, [r3, #20]
 8016ba4:	3b02      	subs	r3, #2
 8016ba6:	683a      	ldr	r2, [r7, #0]
 8016ba8:	429a      	cmp	r2, r3
 8016baa:	d301      	bcc.n	8016bb0 <clust2sect+0x20>
 8016bac:	2300      	movs	r3, #0
 8016bae:	e008      	b.n	8016bc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8016bb0:	687b      	ldr	r3, [r7, #4]
 8016bb2:	895b      	ldrh	r3, [r3, #10]
 8016bb4:	461a      	mov	r2, r3
 8016bb6:	683b      	ldr	r3, [r7, #0]
 8016bb8:	fb03 f202 	mul.w	r2, r3, r2
 8016bbc:	687b      	ldr	r3, [r7, #4]
 8016bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016bc0:	4413      	add	r3, r2
}
 8016bc2:	4618      	mov	r0, r3
 8016bc4:	370c      	adds	r7, #12
 8016bc6:	46bd      	mov	sp, r7
 8016bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bcc:	4770      	bx	lr

08016bce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8016bce:	b580      	push	{r7, lr}
 8016bd0:	b086      	sub	sp, #24
 8016bd2:	af00      	add	r7, sp, #0
 8016bd4:	6078      	str	r0, [r7, #4]
 8016bd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8016bd8:	687b      	ldr	r3, [r7, #4]
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8016bde:	683b      	ldr	r3, [r7, #0]
 8016be0:	2b01      	cmp	r3, #1
 8016be2:	d904      	bls.n	8016bee <get_fat+0x20>
 8016be4:	693b      	ldr	r3, [r7, #16]
 8016be6:	695b      	ldr	r3, [r3, #20]
 8016be8:	683a      	ldr	r2, [r7, #0]
 8016bea:	429a      	cmp	r2, r3
 8016bec:	d302      	bcc.n	8016bf4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8016bee:	2301      	movs	r3, #1
 8016bf0:	617b      	str	r3, [r7, #20]
 8016bf2:	e08c      	b.n	8016d0e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8016bf4:	f04f 33ff 	mov.w	r3, #4294967295
 8016bf8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8016bfa:	693b      	ldr	r3, [r7, #16]
 8016bfc:	781b      	ldrb	r3, [r3, #0]
 8016bfe:	2b02      	cmp	r3, #2
 8016c00:	d045      	beq.n	8016c8e <get_fat+0xc0>
 8016c02:	2b03      	cmp	r3, #3
 8016c04:	d05d      	beq.n	8016cc2 <get_fat+0xf4>
 8016c06:	2b01      	cmp	r3, #1
 8016c08:	d177      	bne.n	8016cfa <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8016c0a:	683b      	ldr	r3, [r7, #0]
 8016c0c:	60fb      	str	r3, [r7, #12]
 8016c0e:	68fb      	ldr	r3, [r7, #12]
 8016c10:	085b      	lsrs	r3, r3, #1
 8016c12:	68fa      	ldr	r2, [r7, #12]
 8016c14:	4413      	add	r3, r2
 8016c16:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c18:	693b      	ldr	r3, [r7, #16]
 8016c1a:	6a1a      	ldr	r2, [r3, #32]
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	0a5b      	lsrs	r3, r3, #9
 8016c20:	4413      	add	r3, r2
 8016c22:	4619      	mov	r1, r3
 8016c24:	6938      	ldr	r0, [r7, #16]
 8016c26:	f7ff ff17 	bl	8016a58 <move_window>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	2b00      	cmp	r3, #0
 8016c2e:	d167      	bne.n	8016d00 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8016c30:	68fb      	ldr	r3, [r7, #12]
 8016c32:	1c5a      	adds	r2, r3, #1
 8016c34:	60fa      	str	r2, [r7, #12]
 8016c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c3a:	693a      	ldr	r2, [r7, #16]
 8016c3c:	4413      	add	r3, r2
 8016c3e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c42:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	6a1a      	ldr	r2, [r3, #32]
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	0a5b      	lsrs	r3, r3, #9
 8016c4c:	4413      	add	r3, r2
 8016c4e:	4619      	mov	r1, r3
 8016c50:	6938      	ldr	r0, [r7, #16]
 8016c52:	f7ff ff01 	bl	8016a58 <move_window>
 8016c56:	4603      	mov	r3, r0
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d153      	bne.n	8016d04 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 8016c5c:	68fb      	ldr	r3, [r7, #12]
 8016c5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016c62:	693a      	ldr	r2, [r7, #16]
 8016c64:	4413      	add	r3, r2
 8016c66:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016c6a:	021b      	lsls	r3, r3, #8
 8016c6c:	461a      	mov	r2, r3
 8016c6e:	68bb      	ldr	r3, [r7, #8]
 8016c70:	4313      	orrs	r3, r2
 8016c72:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8016c74:	683b      	ldr	r3, [r7, #0]
 8016c76:	f003 0301 	and.w	r3, r3, #1
 8016c7a:	2b00      	cmp	r3, #0
 8016c7c:	d002      	beq.n	8016c84 <get_fat+0xb6>
 8016c7e:	68bb      	ldr	r3, [r7, #8]
 8016c80:	091b      	lsrs	r3, r3, #4
 8016c82:	e002      	b.n	8016c8a <get_fat+0xbc>
 8016c84:	68bb      	ldr	r3, [r7, #8]
 8016c86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8016c8a:	617b      	str	r3, [r7, #20]
			break;
 8016c8c:	e03f      	b.n	8016d0e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	6a1a      	ldr	r2, [r3, #32]
 8016c92:	683b      	ldr	r3, [r7, #0]
 8016c94:	0a1b      	lsrs	r3, r3, #8
 8016c96:	4413      	add	r3, r2
 8016c98:	4619      	mov	r1, r3
 8016c9a:	6938      	ldr	r0, [r7, #16]
 8016c9c:	f7ff fedc 	bl	8016a58 <move_window>
 8016ca0:	4603      	mov	r3, r0
 8016ca2:	2b00      	cmp	r3, #0
 8016ca4:	d130      	bne.n	8016d08 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016cac:	683b      	ldr	r3, [r7, #0]
 8016cae:	005b      	lsls	r3, r3, #1
 8016cb0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016cb4:	4413      	add	r3, r2
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f7ff fc1e 	bl	80164f8 <ld_word>
 8016cbc:	4603      	mov	r3, r0
 8016cbe:	617b      	str	r3, [r7, #20]
			break;
 8016cc0:	e025      	b.n	8016d0e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016cc2:	693b      	ldr	r3, [r7, #16]
 8016cc4:	6a1a      	ldr	r2, [r3, #32]
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	09db      	lsrs	r3, r3, #7
 8016cca:	4413      	add	r3, r2
 8016ccc:	4619      	mov	r1, r3
 8016cce:	6938      	ldr	r0, [r7, #16]
 8016cd0:	f7ff fec2 	bl	8016a58 <move_window>
 8016cd4:	4603      	mov	r3, r0
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d118      	bne.n	8016d0c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8016cda:	693b      	ldr	r3, [r7, #16]
 8016cdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	009b      	lsls	r3, r3, #2
 8016ce4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016ce8:	4413      	add	r3, r2
 8016cea:	4618      	mov	r0, r3
 8016cec:	f7ff fc1c 	bl	8016528 <ld_dword>
 8016cf0:	4603      	mov	r3, r0
 8016cf2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8016cf6:	617b      	str	r3, [r7, #20]
			break;
 8016cf8:	e009      	b.n	8016d0e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	617b      	str	r3, [r7, #20]
 8016cfe:	e006      	b.n	8016d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d00:	bf00      	nop
 8016d02:	e004      	b.n	8016d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8016d04:	bf00      	nop
 8016d06:	e002      	b.n	8016d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8016d08:	bf00      	nop
 8016d0a:	e000      	b.n	8016d0e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8016d0c:	bf00      	nop
		}
	}

	return val;
 8016d0e:	697b      	ldr	r3, [r7, #20]
}
 8016d10:	4618      	mov	r0, r3
 8016d12:	3718      	adds	r7, #24
 8016d14:	46bd      	mov	sp, r7
 8016d16:	bd80      	pop	{r7, pc}

08016d18 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8016d18:	b590      	push	{r4, r7, lr}
 8016d1a:	b089      	sub	sp, #36	; 0x24
 8016d1c:	af00      	add	r7, sp, #0
 8016d1e:	60f8      	str	r0, [r7, #12]
 8016d20:	60b9      	str	r1, [r7, #8]
 8016d22:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8016d24:	2302      	movs	r3, #2
 8016d26:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8016d28:	68bb      	ldr	r3, [r7, #8]
 8016d2a:	2b01      	cmp	r3, #1
 8016d2c:	f240 80d6 	bls.w	8016edc <put_fat+0x1c4>
 8016d30:	68fb      	ldr	r3, [r7, #12]
 8016d32:	695b      	ldr	r3, [r3, #20]
 8016d34:	68ba      	ldr	r2, [r7, #8]
 8016d36:	429a      	cmp	r2, r3
 8016d38:	f080 80d0 	bcs.w	8016edc <put_fat+0x1c4>
		switch (fs->fs_type) {
 8016d3c:	68fb      	ldr	r3, [r7, #12]
 8016d3e:	781b      	ldrb	r3, [r3, #0]
 8016d40:	2b02      	cmp	r3, #2
 8016d42:	d073      	beq.n	8016e2c <put_fat+0x114>
 8016d44:	2b03      	cmp	r3, #3
 8016d46:	f000 8091 	beq.w	8016e6c <put_fat+0x154>
 8016d4a:	2b01      	cmp	r3, #1
 8016d4c:	f040 80c6 	bne.w	8016edc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8016d50:	68bb      	ldr	r3, [r7, #8]
 8016d52:	61bb      	str	r3, [r7, #24]
 8016d54:	69bb      	ldr	r3, [r7, #24]
 8016d56:	085b      	lsrs	r3, r3, #1
 8016d58:	69ba      	ldr	r2, [r7, #24]
 8016d5a:	4413      	add	r3, r2
 8016d5c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016d5e:	68fb      	ldr	r3, [r7, #12]
 8016d60:	6a1a      	ldr	r2, [r3, #32]
 8016d62:	69bb      	ldr	r3, [r7, #24]
 8016d64:	0a5b      	lsrs	r3, r3, #9
 8016d66:	4413      	add	r3, r2
 8016d68:	4619      	mov	r1, r3
 8016d6a:	68f8      	ldr	r0, [r7, #12]
 8016d6c:	f7ff fe74 	bl	8016a58 <move_window>
 8016d70:	4603      	mov	r3, r0
 8016d72:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016d74:	7ffb      	ldrb	r3, [r7, #31]
 8016d76:	2b00      	cmp	r3, #0
 8016d78:	f040 80a9 	bne.w	8016ece <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 8016d7c:	68fb      	ldr	r3, [r7, #12]
 8016d7e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016d82:	69bb      	ldr	r3, [r7, #24]
 8016d84:	1c59      	adds	r1, r3, #1
 8016d86:	61b9      	str	r1, [r7, #24]
 8016d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016d8c:	4413      	add	r3, r2
 8016d8e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8016d90:	68bb      	ldr	r3, [r7, #8]
 8016d92:	f003 0301 	and.w	r3, r3, #1
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d00d      	beq.n	8016db6 <put_fat+0x9e>
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	781b      	ldrb	r3, [r3, #0]
 8016d9e:	b25b      	sxtb	r3, r3
 8016da0:	f003 030f 	and.w	r3, r3, #15
 8016da4:	b25a      	sxtb	r2, r3
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	b2db      	uxtb	r3, r3
 8016daa:	011b      	lsls	r3, r3, #4
 8016dac:	b25b      	sxtb	r3, r3
 8016dae:	4313      	orrs	r3, r2
 8016db0:	b25b      	sxtb	r3, r3
 8016db2:	b2db      	uxtb	r3, r3
 8016db4:	e001      	b.n	8016dba <put_fat+0xa2>
 8016db6:	687b      	ldr	r3, [r7, #4]
 8016db8:	b2db      	uxtb	r3, r3
 8016dba:	697a      	ldr	r2, [r7, #20]
 8016dbc:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016dbe:	68fb      	ldr	r3, [r7, #12]
 8016dc0:	2201      	movs	r2, #1
 8016dc2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8016dc4:	68fb      	ldr	r3, [r7, #12]
 8016dc6:	6a1a      	ldr	r2, [r3, #32]
 8016dc8:	69bb      	ldr	r3, [r7, #24]
 8016dca:	0a5b      	lsrs	r3, r3, #9
 8016dcc:	4413      	add	r3, r2
 8016dce:	4619      	mov	r1, r3
 8016dd0:	68f8      	ldr	r0, [r7, #12]
 8016dd2:	f7ff fe41 	bl	8016a58 <move_window>
 8016dd6:	4603      	mov	r3, r0
 8016dd8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016dda:	7ffb      	ldrb	r3, [r7, #31]
 8016ddc:	2b00      	cmp	r3, #0
 8016dde:	d178      	bne.n	8016ed2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8016de0:	68fb      	ldr	r3, [r7, #12]
 8016de2:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016de6:	69bb      	ldr	r3, [r7, #24]
 8016de8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8016dec:	4413      	add	r3, r2
 8016dee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8016df0:	68bb      	ldr	r3, [r7, #8]
 8016df2:	f003 0301 	and.w	r3, r3, #1
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d003      	beq.n	8016e02 <put_fat+0xea>
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	091b      	lsrs	r3, r3, #4
 8016dfe:	b2db      	uxtb	r3, r3
 8016e00:	e00e      	b.n	8016e20 <put_fat+0x108>
 8016e02:	697b      	ldr	r3, [r7, #20]
 8016e04:	781b      	ldrb	r3, [r3, #0]
 8016e06:	b25b      	sxtb	r3, r3
 8016e08:	f023 030f 	bic.w	r3, r3, #15
 8016e0c:	b25a      	sxtb	r2, r3
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	0a1b      	lsrs	r3, r3, #8
 8016e12:	b25b      	sxtb	r3, r3
 8016e14:	f003 030f 	and.w	r3, r3, #15
 8016e18:	b25b      	sxtb	r3, r3
 8016e1a:	4313      	orrs	r3, r2
 8016e1c:	b25b      	sxtb	r3, r3
 8016e1e:	b2db      	uxtb	r3, r3
 8016e20:	697a      	ldr	r2, [r7, #20]
 8016e22:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8016e24:	68fb      	ldr	r3, [r7, #12]
 8016e26:	2201      	movs	r2, #1
 8016e28:	70da      	strb	r2, [r3, #3]
			break;
 8016e2a:	e057      	b.n	8016edc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8016e2c:	68fb      	ldr	r3, [r7, #12]
 8016e2e:	6a1a      	ldr	r2, [r3, #32]
 8016e30:	68bb      	ldr	r3, [r7, #8]
 8016e32:	0a1b      	lsrs	r3, r3, #8
 8016e34:	4413      	add	r3, r2
 8016e36:	4619      	mov	r1, r3
 8016e38:	68f8      	ldr	r0, [r7, #12]
 8016e3a:	f7ff fe0d 	bl	8016a58 <move_window>
 8016e3e:	4603      	mov	r3, r0
 8016e40:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e42:	7ffb      	ldrb	r3, [r7, #31]
 8016e44:	2b00      	cmp	r3, #0
 8016e46:	d146      	bne.n	8016ed6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e4e:	68bb      	ldr	r3, [r7, #8]
 8016e50:	005b      	lsls	r3, r3, #1
 8016e52:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8016e56:	4413      	add	r3, r2
 8016e58:	687a      	ldr	r2, [r7, #4]
 8016e5a:	b292      	uxth	r2, r2
 8016e5c:	4611      	mov	r1, r2
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f7ff fb85 	bl	801656e <st_word>
			fs->wflag = 1;
 8016e64:	68fb      	ldr	r3, [r7, #12]
 8016e66:	2201      	movs	r2, #1
 8016e68:	70da      	strb	r2, [r3, #3]
			break;
 8016e6a:	e037      	b.n	8016edc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8016e6c:	68fb      	ldr	r3, [r7, #12]
 8016e6e:	6a1a      	ldr	r2, [r3, #32]
 8016e70:	68bb      	ldr	r3, [r7, #8]
 8016e72:	09db      	lsrs	r3, r3, #7
 8016e74:	4413      	add	r3, r2
 8016e76:	4619      	mov	r1, r3
 8016e78:	68f8      	ldr	r0, [r7, #12]
 8016e7a:	f7ff fded 	bl	8016a58 <move_window>
 8016e7e:	4603      	mov	r3, r0
 8016e80:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8016e82:	7ffb      	ldrb	r3, [r7, #31]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d128      	bne.n	8016eda <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016e94:	68bb      	ldr	r3, [r7, #8]
 8016e96:	009b      	lsls	r3, r3, #2
 8016e98:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016e9c:	4413      	add	r3, r2
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	f7ff fb42 	bl	8016528 <ld_dword>
 8016ea4:	4603      	mov	r3, r0
 8016ea6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8016eaa:	4323      	orrs	r3, r4
 8016eac:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8016eae:	68fb      	ldr	r3, [r7, #12]
 8016eb0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8016eb4:	68bb      	ldr	r3, [r7, #8]
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8016ebc:	4413      	add	r3, r2
 8016ebe:	6879      	ldr	r1, [r7, #4]
 8016ec0:	4618      	mov	r0, r3
 8016ec2:	f7ff fb6f 	bl	80165a4 <st_dword>
			fs->wflag = 1;
 8016ec6:	68fb      	ldr	r3, [r7, #12]
 8016ec8:	2201      	movs	r2, #1
 8016eca:	70da      	strb	r2, [r3, #3]
			break;
 8016ecc:	e006      	b.n	8016edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016ece:	bf00      	nop
 8016ed0:	e004      	b.n	8016edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016ed2:	bf00      	nop
 8016ed4:	e002      	b.n	8016edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016ed6:	bf00      	nop
 8016ed8:	e000      	b.n	8016edc <put_fat+0x1c4>
			if (res != FR_OK) break;
 8016eda:	bf00      	nop
		}
	}
	return res;
 8016edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8016ede:	4618      	mov	r0, r3
 8016ee0:	3724      	adds	r7, #36	; 0x24
 8016ee2:	46bd      	mov	sp, r7
 8016ee4:	bd90      	pop	{r4, r7, pc}

08016ee6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8016ee6:	b580      	push	{r7, lr}
 8016ee8:	b088      	sub	sp, #32
 8016eea:	af00      	add	r7, sp, #0
 8016eec:	60f8      	str	r0, [r7, #12]
 8016eee:	60b9      	str	r1, [r7, #8]
 8016ef0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8016ef2:	2300      	movs	r3, #0
 8016ef4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8016ef6:	68fb      	ldr	r3, [r7, #12]
 8016ef8:	681b      	ldr	r3, [r3, #0]
 8016efa:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8016efc:	68bb      	ldr	r3, [r7, #8]
 8016efe:	2b01      	cmp	r3, #1
 8016f00:	d904      	bls.n	8016f0c <remove_chain+0x26>
 8016f02:	69bb      	ldr	r3, [r7, #24]
 8016f04:	695b      	ldr	r3, [r3, #20]
 8016f06:	68ba      	ldr	r2, [r7, #8]
 8016f08:	429a      	cmp	r2, r3
 8016f0a:	d301      	bcc.n	8016f10 <remove_chain+0x2a>
 8016f0c:	2302      	movs	r3, #2
 8016f0e:	e04b      	b.n	8016fa8 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8016f10:	687b      	ldr	r3, [r7, #4]
 8016f12:	2b00      	cmp	r3, #0
 8016f14:	d00c      	beq.n	8016f30 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8016f16:	f04f 32ff 	mov.w	r2, #4294967295
 8016f1a:	6879      	ldr	r1, [r7, #4]
 8016f1c:	69b8      	ldr	r0, [r7, #24]
 8016f1e:	f7ff fefb 	bl	8016d18 <put_fat>
 8016f22:	4603      	mov	r3, r0
 8016f24:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8016f26:	7ffb      	ldrb	r3, [r7, #31]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d001      	beq.n	8016f30 <remove_chain+0x4a>
 8016f2c:	7ffb      	ldrb	r3, [r7, #31]
 8016f2e:	e03b      	b.n	8016fa8 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8016f30:	68b9      	ldr	r1, [r7, #8]
 8016f32:	68f8      	ldr	r0, [r7, #12]
 8016f34:	f7ff fe4b 	bl	8016bce <get_fat>
 8016f38:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8016f3a:	697b      	ldr	r3, [r7, #20]
 8016f3c:	2b00      	cmp	r3, #0
 8016f3e:	d031      	beq.n	8016fa4 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8016f40:	697b      	ldr	r3, [r7, #20]
 8016f42:	2b01      	cmp	r3, #1
 8016f44:	d101      	bne.n	8016f4a <remove_chain+0x64>
 8016f46:	2302      	movs	r3, #2
 8016f48:	e02e      	b.n	8016fa8 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8016f4a:	697b      	ldr	r3, [r7, #20]
 8016f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016f50:	d101      	bne.n	8016f56 <remove_chain+0x70>
 8016f52:	2301      	movs	r3, #1
 8016f54:	e028      	b.n	8016fa8 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8016f56:	2200      	movs	r2, #0
 8016f58:	68b9      	ldr	r1, [r7, #8]
 8016f5a:	69b8      	ldr	r0, [r7, #24]
 8016f5c:	f7ff fedc 	bl	8016d18 <put_fat>
 8016f60:	4603      	mov	r3, r0
 8016f62:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8016f64:	7ffb      	ldrb	r3, [r7, #31]
 8016f66:	2b00      	cmp	r3, #0
 8016f68:	d001      	beq.n	8016f6e <remove_chain+0x88>
 8016f6a:	7ffb      	ldrb	r3, [r7, #31]
 8016f6c:	e01c      	b.n	8016fa8 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8016f6e:	69bb      	ldr	r3, [r7, #24]
 8016f70:	691a      	ldr	r2, [r3, #16]
 8016f72:	69bb      	ldr	r3, [r7, #24]
 8016f74:	695b      	ldr	r3, [r3, #20]
 8016f76:	3b02      	subs	r3, #2
 8016f78:	429a      	cmp	r2, r3
 8016f7a:	d20b      	bcs.n	8016f94 <remove_chain+0xae>
			fs->free_clst++;
 8016f7c:	69bb      	ldr	r3, [r7, #24]
 8016f7e:	691b      	ldr	r3, [r3, #16]
 8016f80:	1c5a      	adds	r2, r3, #1
 8016f82:	69bb      	ldr	r3, [r7, #24]
 8016f84:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8016f86:	69bb      	ldr	r3, [r7, #24]
 8016f88:	791b      	ldrb	r3, [r3, #4]
 8016f8a:	f043 0301 	orr.w	r3, r3, #1
 8016f8e:	b2da      	uxtb	r2, r3
 8016f90:	69bb      	ldr	r3, [r7, #24]
 8016f92:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8016f94:	697b      	ldr	r3, [r7, #20]
 8016f96:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8016f98:	69bb      	ldr	r3, [r7, #24]
 8016f9a:	695b      	ldr	r3, [r3, #20]
 8016f9c:	68ba      	ldr	r2, [r7, #8]
 8016f9e:	429a      	cmp	r2, r3
 8016fa0:	d3c6      	bcc.n	8016f30 <remove_chain+0x4a>
 8016fa2:	e000      	b.n	8016fa6 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8016fa4:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8016fa6:	2300      	movs	r3, #0
}
 8016fa8:	4618      	mov	r0, r3
 8016faa:	3720      	adds	r7, #32
 8016fac:	46bd      	mov	sp, r7
 8016fae:	bd80      	pop	{r7, pc}

08016fb0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8016fb0:	b580      	push	{r7, lr}
 8016fb2:	b088      	sub	sp, #32
 8016fb4:	af00      	add	r7, sp, #0
 8016fb6:	6078      	str	r0, [r7, #4]
 8016fb8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8016fc0:	683b      	ldr	r3, [r7, #0]
 8016fc2:	2b00      	cmp	r3, #0
 8016fc4:	d10d      	bne.n	8016fe2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8016fc6:	693b      	ldr	r3, [r7, #16]
 8016fc8:	68db      	ldr	r3, [r3, #12]
 8016fca:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8016fcc:	69bb      	ldr	r3, [r7, #24]
 8016fce:	2b00      	cmp	r3, #0
 8016fd0:	d004      	beq.n	8016fdc <create_chain+0x2c>
 8016fd2:	693b      	ldr	r3, [r7, #16]
 8016fd4:	695b      	ldr	r3, [r3, #20]
 8016fd6:	69ba      	ldr	r2, [r7, #24]
 8016fd8:	429a      	cmp	r2, r3
 8016fda:	d31b      	bcc.n	8017014 <create_chain+0x64>
 8016fdc:	2301      	movs	r3, #1
 8016fde:	61bb      	str	r3, [r7, #24]
 8016fe0:	e018      	b.n	8017014 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8016fe2:	6839      	ldr	r1, [r7, #0]
 8016fe4:	6878      	ldr	r0, [r7, #4]
 8016fe6:	f7ff fdf2 	bl	8016bce <get_fat>
 8016fea:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8016fec:	68fb      	ldr	r3, [r7, #12]
 8016fee:	2b01      	cmp	r3, #1
 8016ff0:	d801      	bhi.n	8016ff6 <create_chain+0x46>
 8016ff2:	2301      	movs	r3, #1
 8016ff4:	e070      	b.n	80170d8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8016ff6:	68fb      	ldr	r3, [r7, #12]
 8016ff8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016ffc:	d101      	bne.n	8017002 <create_chain+0x52>
 8016ffe:	68fb      	ldr	r3, [r7, #12]
 8017000:	e06a      	b.n	80170d8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017002:	693b      	ldr	r3, [r7, #16]
 8017004:	695b      	ldr	r3, [r3, #20]
 8017006:	68fa      	ldr	r2, [r7, #12]
 8017008:	429a      	cmp	r2, r3
 801700a:	d201      	bcs.n	8017010 <create_chain+0x60>
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	e063      	b.n	80170d8 <create_chain+0x128>
		scl = clst;
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017014:	69bb      	ldr	r3, [r7, #24]
 8017016:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017018:	69fb      	ldr	r3, [r7, #28]
 801701a:	3301      	adds	r3, #1
 801701c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801701e:	693b      	ldr	r3, [r7, #16]
 8017020:	695b      	ldr	r3, [r3, #20]
 8017022:	69fa      	ldr	r2, [r7, #28]
 8017024:	429a      	cmp	r2, r3
 8017026:	d307      	bcc.n	8017038 <create_chain+0x88>
				ncl = 2;
 8017028:	2302      	movs	r3, #2
 801702a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 801702c:	69fa      	ldr	r2, [r7, #28]
 801702e:	69bb      	ldr	r3, [r7, #24]
 8017030:	429a      	cmp	r2, r3
 8017032:	d901      	bls.n	8017038 <create_chain+0x88>
 8017034:	2300      	movs	r3, #0
 8017036:	e04f      	b.n	80170d8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8017038:	69f9      	ldr	r1, [r7, #28]
 801703a:	6878      	ldr	r0, [r7, #4]
 801703c:	f7ff fdc7 	bl	8016bce <get_fat>
 8017040:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8017042:	68fb      	ldr	r3, [r7, #12]
 8017044:	2b00      	cmp	r3, #0
 8017046:	d00e      	beq.n	8017066 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8017048:	68fb      	ldr	r3, [r7, #12]
 801704a:	2b01      	cmp	r3, #1
 801704c:	d003      	beq.n	8017056 <create_chain+0xa6>
 801704e:	68fb      	ldr	r3, [r7, #12]
 8017050:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017054:	d101      	bne.n	801705a <create_chain+0xaa>
 8017056:	68fb      	ldr	r3, [r7, #12]
 8017058:	e03e      	b.n	80170d8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 801705a:	69fa      	ldr	r2, [r7, #28]
 801705c:	69bb      	ldr	r3, [r7, #24]
 801705e:	429a      	cmp	r2, r3
 8017060:	d1da      	bne.n	8017018 <create_chain+0x68>
 8017062:	2300      	movs	r3, #0
 8017064:	e038      	b.n	80170d8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8017066:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8017068:	f04f 32ff 	mov.w	r2, #4294967295
 801706c:	69f9      	ldr	r1, [r7, #28]
 801706e:	6938      	ldr	r0, [r7, #16]
 8017070:	f7ff fe52 	bl	8016d18 <put_fat>
 8017074:	4603      	mov	r3, r0
 8017076:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8017078:	7dfb      	ldrb	r3, [r7, #23]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d109      	bne.n	8017092 <create_chain+0xe2>
 801707e:	683b      	ldr	r3, [r7, #0]
 8017080:	2b00      	cmp	r3, #0
 8017082:	d006      	beq.n	8017092 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017084:	69fa      	ldr	r2, [r7, #28]
 8017086:	6839      	ldr	r1, [r7, #0]
 8017088:	6938      	ldr	r0, [r7, #16]
 801708a:	f7ff fe45 	bl	8016d18 <put_fat>
 801708e:	4603      	mov	r3, r0
 8017090:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017092:	7dfb      	ldrb	r3, [r7, #23]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d116      	bne.n	80170c6 <create_chain+0x116>
		fs->last_clst = ncl;
 8017098:	693b      	ldr	r3, [r7, #16]
 801709a:	69fa      	ldr	r2, [r7, #28]
 801709c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801709e:	693b      	ldr	r3, [r7, #16]
 80170a0:	691a      	ldr	r2, [r3, #16]
 80170a2:	693b      	ldr	r3, [r7, #16]
 80170a4:	695b      	ldr	r3, [r3, #20]
 80170a6:	3b02      	subs	r3, #2
 80170a8:	429a      	cmp	r2, r3
 80170aa:	d804      	bhi.n	80170b6 <create_chain+0x106>
 80170ac:	693b      	ldr	r3, [r7, #16]
 80170ae:	691b      	ldr	r3, [r3, #16]
 80170b0:	1e5a      	subs	r2, r3, #1
 80170b2:	693b      	ldr	r3, [r7, #16]
 80170b4:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 80170b6:	693b      	ldr	r3, [r7, #16]
 80170b8:	791b      	ldrb	r3, [r3, #4]
 80170ba:	f043 0301 	orr.w	r3, r3, #1
 80170be:	b2da      	uxtb	r2, r3
 80170c0:	693b      	ldr	r3, [r7, #16]
 80170c2:	711a      	strb	r2, [r3, #4]
 80170c4:	e007      	b.n	80170d6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80170c6:	7dfb      	ldrb	r3, [r7, #23]
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d102      	bne.n	80170d2 <create_chain+0x122>
 80170cc:	f04f 33ff 	mov.w	r3, #4294967295
 80170d0:	e000      	b.n	80170d4 <create_chain+0x124>
 80170d2:	2301      	movs	r3, #1
 80170d4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80170d6:	69fb      	ldr	r3, [r7, #28]
}
 80170d8:	4618      	mov	r0, r3
 80170da:	3720      	adds	r7, #32
 80170dc:	46bd      	mov	sp, r7
 80170de:	bd80      	pop	{r7, pc}

080170e0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80170e0:	b480      	push	{r7}
 80170e2:	b087      	sub	sp, #28
 80170e4:	af00      	add	r7, sp, #0
 80170e6:	6078      	str	r0, [r7, #4]
 80170e8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80170f0:	687b      	ldr	r3, [r7, #4]
 80170f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80170f4:	3304      	adds	r3, #4
 80170f6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80170f8:	683b      	ldr	r3, [r7, #0]
 80170fa:	0a5b      	lsrs	r3, r3, #9
 80170fc:	68fa      	ldr	r2, [r7, #12]
 80170fe:	8952      	ldrh	r2, [r2, #10]
 8017100:	fbb3 f3f2 	udiv	r3, r3, r2
 8017104:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017106:	693b      	ldr	r3, [r7, #16]
 8017108:	1d1a      	adds	r2, r3, #4
 801710a:	613a      	str	r2, [r7, #16]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017110:	68bb      	ldr	r3, [r7, #8]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d101      	bne.n	801711a <clmt_clust+0x3a>
 8017116:	2300      	movs	r3, #0
 8017118:	e010      	b.n	801713c <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801711a:	697a      	ldr	r2, [r7, #20]
 801711c:	68bb      	ldr	r3, [r7, #8]
 801711e:	429a      	cmp	r2, r3
 8017120:	d307      	bcc.n	8017132 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 8017122:	697a      	ldr	r2, [r7, #20]
 8017124:	68bb      	ldr	r3, [r7, #8]
 8017126:	1ad3      	subs	r3, r2, r3
 8017128:	617b      	str	r3, [r7, #20]
 801712a:	693b      	ldr	r3, [r7, #16]
 801712c:	3304      	adds	r3, #4
 801712e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017130:	e7e9      	b.n	8017106 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 8017132:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8017134:	693b      	ldr	r3, [r7, #16]
 8017136:	681a      	ldr	r2, [r3, #0]
 8017138:	697b      	ldr	r3, [r7, #20]
 801713a:	4413      	add	r3, r2
}
 801713c:	4618      	mov	r0, r3
 801713e:	371c      	adds	r7, #28
 8017140:	46bd      	mov	sp, r7
 8017142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017146:	4770      	bx	lr

08017148 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8017148:	b580      	push	{r7, lr}
 801714a:	b086      	sub	sp, #24
 801714c:	af00      	add	r7, sp, #0
 801714e:	6078      	str	r0, [r7, #4]
 8017150:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8017152:	687b      	ldr	r3, [r7, #4]
 8017154:	681b      	ldr	r3, [r3, #0]
 8017156:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8017158:	683b      	ldr	r3, [r7, #0]
 801715a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 801715e:	d204      	bcs.n	801716a <dir_sdi+0x22>
 8017160:	683b      	ldr	r3, [r7, #0]
 8017162:	f003 031f 	and.w	r3, r3, #31
 8017166:	2b00      	cmp	r3, #0
 8017168:	d001      	beq.n	801716e <dir_sdi+0x26>
		return FR_INT_ERR;
 801716a:	2302      	movs	r3, #2
 801716c:	e063      	b.n	8017236 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 801716e:	687b      	ldr	r3, [r7, #4]
 8017170:	683a      	ldr	r2, [r7, #0]
 8017172:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	689b      	ldr	r3, [r3, #8]
 8017178:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 801717a:	697b      	ldr	r3, [r7, #20]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d106      	bne.n	801718e <dir_sdi+0x46>
 8017180:	693b      	ldr	r3, [r7, #16]
 8017182:	781b      	ldrb	r3, [r3, #0]
 8017184:	2b02      	cmp	r3, #2
 8017186:	d902      	bls.n	801718e <dir_sdi+0x46>
		clst = fs->dirbase;
 8017188:	693b      	ldr	r3, [r7, #16]
 801718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801718c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 801718e:	697b      	ldr	r3, [r7, #20]
 8017190:	2b00      	cmp	r3, #0
 8017192:	d10c      	bne.n	80171ae <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017194:	683b      	ldr	r3, [r7, #0]
 8017196:	095b      	lsrs	r3, r3, #5
 8017198:	693a      	ldr	r2, [r7, #16]
 801719a:	8912      	ldrh	r2, [r2, #8]
 801719c:	4293      	cmp	r3, r2
 801719e:	d301      	bcc.n	80171a4 <dir_sdi+0x5c>
 80171a0:	2302      	movs	r3, #2
 80171a2:	e048      	b.n	8017236 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 80171a4:	693b      	ldr	r3, [r7, #16]
 80171a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80171a8:	687b      	ldr	r3, [r7, #4]
 80171aa:	61da      	str	r2, [r3, #28]
 80171ac:	e029      	b.n	8017202 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80171ae:	693b      	ldr	r3, [r7, #16]
 80171b0:	895b      	ldrh	r3, [r3, #10]
 80171b2:	025b      	lsls	r3, r3, #9
 80171b4:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80171b6:	e019      	b.n	80171ec <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	6979      	ldr	r1, [r7, #20]
 80171bc:	4618      	mov	r0, r3
 80171be:	f7ff fd06 	bl	8016bce <get_fat>
 80171c2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80171c4:	697b      	ldr	r3, [r7, #20]
 80171c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80171ca:	d101      	bne.n	80171d0 <dir_sdi+0x88>
 80171cc:	2301      	movs	r3, #1
 80171ce:	e032      	b.n	8017236 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80171d0:	697b      	ldr	r3, [r7, #20]
 80171d2:	2b01      	cmp	r3, #1
 80171d4:	d904      	bls.n	80171e0 <dir_sdi+0x98>
 80171d6:	693b      	ldr	r3, [r7, #16]
 80171d8:	695b      	ldr	r3, [r3, #20]
 80171da:	697a      	ldr	r2, [r7, #20]
 80171dc:	429a      	cmp	r2, r3
 80171de:	d301      	bcc.n	80171e4 <dir_sdi+0x9c>
 80171e0:	2302      	movs	r3, #2
 80171e2:	e028      	b.n	8017236 <dir_sdi+0xee>
			ofs -= csz;
 80171e4:	683a      	ldr	r2, [r7, #0]
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	1ad3      	subs	r3, r2, r3
 80171ea:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80171ec:	683a      	ldr	r2, [r7, #0]
 80171ee:	68fb      	ldr	r3, [r7, #12]
 80171f0:	429a      	cmp	r2, r3
 80171f2:	d2e1      	bcs.n	80171b8 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80171f4:	6979      	ldr	r1, [r7, #20]
 80171f6:	6938      	ldr	r0, [r7, #16]
 80171f8:	f7ff fcca 	bl	8016b90 <clust2sect>
 80171fc:	4602      	mov	r2, r0
 80171fe:	687b      	ldr	r3, [r7, #4]
 8017200:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	697a      	ldr	r2, [r7, #20]
 8017206:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	69db      	ldr	r3, [r3, #28]
 801720c:	2b00      	cmp	r3, #0
 801720e:	d101      	bne.n	8017214 <dir_sdi+0xcc>
 8017210:	2302      	movs	r3, #2
 8017212:	e010      	b.n	8017236 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	69da      	ldr	r2, [r3, #28]
 8017218:	683b      	ldr	r3, [r7, #0]
 801721a:	0a5b      	lsrs	r3, r3, #9
 801721c:	441a      	add	r2, r3
 801721e:	687b      	ldr	r3, [r7, #4]
 8017220:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017222:	693b      	ldr	r3, [r7, #16]
 8017224:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017228:	683b      	ldr	r3, [r7, #0]
 801722a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801722e:	441a      	add	r2, r3
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017234:	2300      	movs	r3, #0
}
 8017236:	4618      	mov	r0, r3
 8017238:	3718      	adds	r7, #24
 801723a:	46bd      	mov	sp, r7
 801723c:	bd80      	pop	{r7, pc}

0801723e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 801723e:	b580      	push	{r7, lr}
 8017240:	b086      	sub	sp, #24
 8017242:	af00      	add	r7, sp, #0
 8017244:	6078      	str	r0, [r7, #4]
 8017246:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	695b      	ldr	r3, [r3, #20]
 8017252:	3320      	adds	r3, #32
 8017254:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017256:	687b      	ldr	r3, [r7, #4]
 8017258:	69db      	ldr	r3, [r3, #28]
 801725a:	2b00      	cmp	r3, #0
 801725c:	d003      	beq.n	8017266 <dir_next+0x28>
 801725e:	68bb      	ldr	r3, [r7, #8]
 8017260:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017264:	d301      	bcc.n	801726a <dir_next+0x2c>
 8017266:	2304      	movs	r3, #4
 8017268:	e0aa      	b.n	80173c0 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 801726a:	68bb      	ldr	r3, [r7, #8]
 801726c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017270:	2b00      	cmp	r3, #0
 8017272:	f040 8098 	bne.w	80173a6 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	69db      	ldr	r3, [r3, #28]
 801727a:	1c5a      	adds	r2, r3, #1
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	699b      	ldr	r3, [r3, #24]
 8017284:	2b00      	cmp	r3, #0
 8017286:	d10b      	bne.n	80172a0 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017288:	68bb      	ldr	r3, [r7, #8]
 801728a:	095b      	lsrs	r3, r3, #5
 801728c:	68fa      	ldr	r2, [r7, #12]
 801728e:	8912      	ldrh	r2, [r2, #8]
 8017290:	4293      	cmp	r3, r2
 8017292:	f0c0 8088 	bcc.w	80173a6 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	2200      	movs	r2, #0
 801729a:	61da      	str	r2, [r3, #28]
 801729c:	2304      	movs	r3, #4
 801729e:	e08f      	b.n	80173c0 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80172a0:	68bb      	ldr	r3, [r7, #8]
 80172a2:	0a5b      	lsrs	r3, r3, #9
 80172a4:	68fa      	ldr	r2, [r7, #12]
 80172a6:	8952      	ldrh	r2, [r2, #10]
 80172a8:	3a01      	subs	r2, #1
 80172aa:	4013      	ands	r3, r2
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d17a      	bne.n	80173a6 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80172b0:	687a      	ldr	r2, [r7, #4]
 80172b2:	687b      	ldr	r3, [r7, #4]
 80172b4:	699b      	ldr	r3, [r3, #24]
 80172b6:	4619      	mov	r1, r3
 80172b8:	4610      	mov	r0, r2
 80172ba:	f7ff fc88 	bl	8016bce <get_fat>
 80172be:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80172c0:	697b      	ldr	r3, [r7, #20]
 80172c2:	2b01      	cmp	r3, #1
 80172c4:	d801      	bhi.n	80172ca <dir_next+0x8c>
 80172c6:	2302      	movs	r3, #2
 80172c8:	e07a      	b.n	80173c0 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80172ca:	697b      	ldr	r3, [r7, #20]
 80172cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80172d0:	d101      	bne.n	80172d6 <dir_next+0x98>
 80172d2:	2301      	movs	r3, #1
 80172d4:	e074      	b.n	80173c0 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	695b      	ldr	r3, [r3, #20]
 80172da:	697a      	ldr	r2, [r7, #20]
 80172dc:	429a      	cmp	r2, r3
 80172de:	d358      	bcc.n	8017392 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	2b00      	cmp	r3, #0
 80172e4:	d104      	bne.n	80172f0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	2200      	movs	r2, #0
 80172ea:	61da      	str	r2, [r3, #28]
 80172ec:	2304      	movs	r3, #4
 80172ee:	e067      	b.n	80173c0 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80172f0:	687a      	ldr	r2, [r7, #4]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	699b      	ldr	r3, [r3, #24]
 80172f6:	4619      	mov	r1, r3
 80172f8:	4610      	mov	r0, r2
 80172fa:	f7ff fe59 	bl	8016fb0 <create_chain>
 80172fe:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017300:	697b      	ldr	r3, [r7, #20]
 8017302:	2b00      	cmp	r3, #0
 8017304:	d101      	bne.n	801730a <dir_next+0xcc>
 8017306:	2307      	movs	r3, #7
 8017308:	e05a      	b.n	80173c0 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 801730a:	697b      	ldr	r3, [r7, #20]
 801730c:	2b01      	cmp	r3, #1
 801730e:	d101      	bne.n	8017314 <dir_next+0xd6>
 8017310:	2302      	movs	r3, #2
 8017312:	e055      	b.n	80173c0 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017314:	697b      	ldr	r3, [r7, #20]
 8017316:	f1b3 3fff 	cmp.w	r3, #4294967295
 801731a:	d101      	bne.n	8017320 <dir_next+0xe2>
 801731c:	2301      	movs	r3, #1
 801731e:	e04f      	b.n	80173c0 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017320:	68f8      	ldr	r0, [r7, #12]
 8017322:	f7ff fb55 	bl	80169d0 <sync_window>
 8017326:	4603      	mov	r3, r0
 8017328:	2b00      	cmp	r3, #0
 801732a:	d001      	beq.n	8017330 <dir_next+0xf2>
 801732c:	2301      	movs	r3, #1
 801732e:	e047      	b.n	80173c0 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017330:	68fb      	ldr	r3, [r7, #12]
 8017332:	3330      	adds	r3, #48	; 0x30
 8017334:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017338:	2100      	movs	r1, #0
 801733a:	4618      	mov	r0, r3
 801733c:	f7ff f97f 	bl	801663e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017340:	2300      	movs	r3, #0
 8017342:	613b      	str	r3, [r7, #16]
 8017344:	6979      	ldr	r1, [r7, #20]
 8017346:	68f8      	ldr	r0, [r7, #12]
 8017348:	f7ff fc22 	bl	8016b90 <clust2sect>
 801734c:	4602      	mov	r2, r0
 801734e:	68fb      	ldr	r3, [r7, #12]
 8017350:	62da      	str	r2, [r3, #44]	; 0x2c
 8017352:	e012      	b.n	801737a <dir_next+0x13c>
						fs->wflag = 1;
 8017354:	68fb      	ldr	r3, [r7, #12]
 8017356:	2201      	movs	r2, #1
 8017358:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 801735a:	68f8      	ldr	r0, [r7, #12]
 801735c:	f7ff fb38 	bl	80169d0 <sync_window>
 8017360:	4603      	mov	r3, r0
 8017362:	2b00      	cmp	r3, #0
 8017364:	d001      	beq.n	801736a <dir_next+0x12c>
 8017366:	2301      	movs	r3, #1
 8017368:	e02a      	b.n	80173c0 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 801736a:	693b      	ldr	r3, [r7, #16]
 801736c:	3301      	adds	r3, #1
 801736e:	613b      	str	r3, [r7, #16]
 8017370:	68fb      	ldr	r3, [r7, #12]
 8017372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017374:	1c5a      	adds	r2, r3, #1
 8017376:	68fb      	ldr	r3, [r7, #12]
 8017378:	62da      	str	r2, [r3, #44]	; 0x2c
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	895b      	ldrh	r3, [r3, #10]
 801737e:	461a      	mov	r2, r3
 8017380:	693b      	ldr	r3, [r7, #16]
 8017382:	4293      	cmp	r3, r2
 8017384:	d3e6      	bcc.n	8017354 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017386:	68fb      	ldr	r3, [r7, #12]
 8017388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801738a:	693b      	ldr	r3, [r7, #16]
 801738c:	1ad2      	subs	r2, r2, r3
 801738e:	68fb      	ldr	r3, [r7, #12]
 8017390:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017392:	687b      	ldr	r3, [r7, #4]
 8017394:	697a      	ldr	r2, [r7, #20]
 8017396:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017398:	6979      	ldr	r1, [r7, #20]
 801739a:	68f8      	ldr	r0, [r7, #12]
 801739c:	f7ff fbf8 	bl	8016b90 <clust2sect>
 80173a0:	4602      	mov	r2, r0
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	68ba      	ldr	r2, [r7, #8]
 80173aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80173ac:	68fb      	ldr	r3, [r7, #12]
 80173ae:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80173b2:	68bb      	ldr	r3, [r7, #8]
 80173b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80173b8:	441a      	add	r2, r3
 80173ba:	687b      	ldr	r3, [r7, #4]
 80173bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80173be:	2300      	movs	r3, #0
}
 80173c0:	4618      	mov	r0, r3
 80173c2:	3718      	adds	r7, #24
 80173c4:	46bd      	mov	sp, r7
 80173c6:	bd80      	pop	{r7, pc}

080173c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80173c8:	b580      	push	{r7, lr}
 80173ca:	b086      	sub	sp, #24
 80173cc:	af00      	add	r7, sp, #0
 80173ce:	6078      	str	r0, [r7, #4]
 80173d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80173d2:	687b      	ldr	r3, [r7, #4]
 80173d4:	681b      	ldr	r3, [r3, #0]
 80173d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80173d8:	2100      	movs	r1, #0
 80173da:	6878      	ldr	r0, [r7, #4]
 80173dc:	f7ff feb4 	bl	8017148 <dir_sdi>
 80173e0:	4603      	mov	r3, r0
 80173e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80173e4:	7dfb      	ldrb	r3, [r7, #23]
 80173e6:	2b00      	cmp	r3, #0
 80173e8:	d12b      	bne.n	8017442 <dir_alloc+0x7a>
		n = 0;
 80173ea:	2300      	movs	r3, #0
 80173ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80173ee:	687b      	ldr	r3, [r7, #4]
 80173f0:	69db      	ldr	r3, [r3, #28]
 80173f2:	4619      	mov	r1, r3
 80173f4:	68f8      	ldr	r0, [r7, #12]
 80173f6:	f7ff fb2f 	bl	8016a58 <move_window>
 80173fa:	4603      	mov	r3, r0
 80173fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80173fe:	7dfb      	ldrb	r3, [r7, #23]
 8017400:	2b00      	cmp	r3, #0
 8017402:	d11d      	bne.n	8017440 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	6a1b      	ldr	r3, [r3, #32]
 8017408:	781b      	ldrb	r3, [r3, #0]
 801740a:	2be5      	cmp	r3, #229	; 0xe5
 801740c:	d004      	beq.n	8017418 <dir_alloc+0x50>
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	6a1b      	ldr	r3, [r3, #32]
 8017412:	781b      	ldrb	r3, [r3, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	d107      	bne.n	8017428 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017418:	693b      	ldr	r3, [r7, #16]
 801741a:	3301      	adds	r3, #1
 801741c:	613b      	str	r3, [r7, #16]
 801741e:	693a      	ldr	r2, [r7, #16]
 8017420:	683b      	ldr	r3, [r7, #0]
 8017422:	429a      	cmp	r2, r3
 8017424:	d102      	bne.n	801742c <dir_alloc+0x64>
 8017426:	e00c      	b.n	8017442 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017428:	2300      	movs	r3, #0
 801742a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 801742c:	2101      	movs	r1, #1
 801742e:	6878      	ldr	r0, [r7, #4]
 8017430:	f7ff ff05 	bl	801723e <dir_next>
 8017434:	4603      	mov	r3, r0
 8017436:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017438:	7dfb      	ldrb	r3, [r7, #23]
 801743a:	2b00      	cmp	r3, #0
 801743c:	d0d7      	beq.n	80173ee <dir_alloc+0x26>
 801743e:	e000      	b.n	8017442 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017440:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017442:	7dfb      	ldrb	r3, [r7, #23]
 8017444:	2b04      	cmp	r3, #4
 8017446:	d101      	bne.n	801744c <dir_alloc+0x84>
 8017448:	2307      	movs	r3, #7
 801744a:	75fb      	strb	r3, [r7, #23]
	return res;
 801744c:	7dfb      	ldrb	r3, [r7, #23]
}
 801744e:	4618      	mov	r0, r3
 8017450:	3718      	adds	r7, #24
 8017452:	46bd      	mov	sp, r7
 8017454:	bd80      	pop	{r7, pc}

08017456 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017456:	b580      	push	{r7, lr}
 8017458:	b084      	sub	sp, #16
 801745a:	af00      	add	r7, sp, #0
 801745c:	6078      	str	r0, [r7, #4]
 801745e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017460:	683b      	ldr	r3, [r7, #0]
 8017462:	331a      	adds	r3, #26
 8017464:	4618      	mov	r0, r3
 8017466:	f7ff f847 	bl	80164f8 <ld_word>
 801746a:	4603      	mov	r3, r0
 801746c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	781b      	ldrb	r3, [r3, #0]
 8017472:	2b03      	cmp	r3, #3
 8017474:	d109      	bne.n	801748a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017476:	683b      	ldr	r3, [r7, #0]
 8017478:	3314      	adds	r3, #20
 801747a:	4618      	mov	r0, r3
 801747c:	f7ff f83c 	bl	80164f8 <ld_word>
 8017480:	4603      	mov	r3, r0
 8017482:	041b      	lsls	r3, r3, #16
 8017484:	68fa      	ldr	r2, [r7, #12]
 8017486:	4313      	orrs	r3, r2
 8017488:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 801748a:	68fb      	ldr	r3, [r7, #12]
}
 801748c:	4618      	mov	r0, r3
 801748e:	3710      	adds	r7, #16
 8017490:	46bd      	mov	sp, r7
 8017492:	bd80      	pop	{r7, pc}

08017494 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017494:	b580      	push	{r7, lr}
 8017496:	b084      	sub	sp, #16
 8017498:	af00      	add	r7, sp, #0
 801749a:	60f8      	str	r0, [r7, #12]
 801749c:	60b9      	str	r1, [r7, #8]
 801749e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80174a0:	68bb      	ldr	r3, [r7, #8]
 80174a2:	331a      	adds	r3, #26
 80174a4:	687a      	ldr	r2, [r7, #4]
 80174a6:	b292      	uxth	r2, r2
 80174a8:	4611      	mov	r1, r2
 80174aa:	4618      	mov	r0, r3
 80174ac:	f7ff f85f 	bl	801656e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	781b      	ldrb	r3, [r3, #0]
 80174b4:	2b03      	cmp	r3, #3
 80174b6:	d109      	bne.n	80174cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80174b8:	68bb      	ldr	r3, [r7, #8]
 80174ba:	f103 0214 	add.w	r2, r3, #20
 80174be:	687b      	ldr	r3, [r7, #4]
 80174c0:	0c1b      	lsrs	r3, r3, #16
 80174c2:	b29b      	uxth	r3, r3
 80174c4:	4619      	mov	r1, r3
 80174c6:	4610      	mov	r0, r2
 80174c8:	f7ff f851 	bl	801656e <st_word>
	}
}
 80174cc:	bf00      	nop
 80174ce:	3710      	adds	r7, #16
 80174d0:	46bd      	mov	sp, r7
 80174d2:	bd80      	pop	{r7, pc}

080174d4 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 80174d4:	b580      	push	{r7, lr}
 80174d6:	b086      	sub	sp, #24
 80174d8:	af00      	add	r7, sp, #0
 80174da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	681b      	ldr	r3, [r3, #0]
 80174e0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80174e2:	2100      	movs	r1, #0
 80174e4:	6878      	ldr	r0, [r7, #4]
 80174e6:	f7ff fe2f 	bl	8017148 <dir_sdi>
 80174ea:	4603      	mov	r3, r0
 80174ec:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80174ee:	7dfb      	ldrb	r3, [r7, #23]
 80174f0:	2b00      	cmp	r3, #0
 80174f2:	d001      	beq.n	80174f8 <dir_find+0x24>
 80174f4:	7dfb      	ldrb	r3, [r7, #23]
 80174f6:	e03e      	b.n	8017576 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	69db      	ldr	r3, [r3, #28]
 80174fc:	4619      	mov	r1, r3
 80174fe:	6938      	ldr	r0, [r7, #16]
 8017500:	f7ff faaa 	bl	8016a58 <move_window>
 8017504:	4603      	mov	r3, r0
 8017506:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017508:	7dfb      	ldrb	r3, [r7, #23]
 801750a:	2b00      	cmp	r3, #0
 801750c:	d12f      	bne.n	801756e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	6a1b      	ldr	r3, [r3, #32]
 8017512:	781b      	ldrb	r3, [r3, #0]
 8017514:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017516:	7bfb      	ldrb	r3, [r7, #15]
 8017518:	2b00      	cmp	r3, #0
 801751a:	d102      	bne.n	8017522 <dir_find+0x4e>
 801751c:	2304      	movs	r3, #4
 801751e:	75fb      	strb	r3, [r7, #23]
 8017520:	e028      	b.n	8017574 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017522:	687b      	ldr	r3, [r7, #4]
 8017524:	6a1b      	ldr	r3, [r3, #32]
 8017526:	330b      	adds	r3, #11
 8017528:	781b      	ldrb	r3, [r3, #0]
 801752a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801752e:	b2da      	uxtb	r2, r3
 8017530:	687b      	ldr	r3, [r7, #4]
 8017532:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017534:	687b      	ldr	r3, [r7, #4]
 8017536:	6a1b      	ldr	r3, [r3, #32]
 8017538:	330b      	adds	r3, #11
 801753a:	781b      	ldrb	r3, [r3, #0]
 801753c:	f003 0308 	and.w	r3, r3, #8
 8017540:	2b00      	cmp	r3, #0
 8017542:	d10a      	bne.n	801755a <dir_find+0x86>
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6a18      	ldr	r0, [r3, #32]
 8017548:	687b      	ldr	r3, [r7, #4]
 801754a:	3324      	adds	r3, #36	; 0x24
 801754c:	220b      	movs	r2, #11
 801754e:	4619      	mov	r1, r3
 8017550:	f7ff f88f 	bl	8016672 <mem_cmp>
 8017554:	4603      	mov	r3, r0
 8017556:	2b00      	cmp	r3, #0
 8017558:	d00b      	beq.n	8017572 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 801755a:	2100      	movs	r1, #0
 801755c:	6878      	ldr	r0, [r7, #4]
 801755e:	f7ff fe6e 	bl	801723e <dir_next>
 8017562:	4603      	mov	r3, r0
 8017564:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017566:	7dfb      	ldrb	r3, [r7, #23]
 8017568:	2b00      	cmp	r3, #0
 801756a:	d0c5      	beq.n	80174f8 <dir_find+0x24>
 801756c:	e002      	b.n	8017574 <dir_find+0xa0>
		if (res != FR_OK) break;
 801756e:	bf00      	nop
 8017570:	e000      	b.n	8017574 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017572:	bf00      	nop

	return res;
 8017574:	7dfb      	ldrb	r3, [r7, #23]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3718      	adds	r7, #24
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b084      	sub	sp, #16
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017586:	687b      	ldr	r3, [r7, #4]
 8017588:	681b      	ldr	r3, [r3, #0]
 801758a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 801758c:	2101      	movs	r1, #1
 801758e:	6878      	ldr	r0, [r7, #4]
 8017590:	f7ff ff1a 	bl	80173c8 <dir_alloc>
 8017594:	4603      	mov	r3, r0
 8017596:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017598:	7bfb      	ldrb	r3, [r7, #15]
 801759a:	2b00      	cmp	r3, #0
 801759c:	d11c      	bne.n	80175d8 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	69db      	ldr	r3, [r3, #28]
 80175a2:	4619      	mov	r1, r3
 80175a4:	68b8      	ldr	r0, [r7, #8]
 80175a6:	f7ff fa57 	bl	8016a58 <move_window>
 80175aa:	4603      	mov	r3, r0
 80175ac:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80175ae:	7bfb      	ldrb	r3, [r7, #15]
 80175b0:	2b00      	cmp	r3, #0
 80175b2:	d111      	bne.n	80175d8 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	6a1b      	ldr	r3, [r3, #32]
 80175b8:	2220      	movs	r2, #32
 80175ba:	2100      	movs	r1, #0
 80175bc:	4618      	mov	r0, r3
 80175be:	f7ff f83e 	bl	801663e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	6a18      	ldr	r0, [r3, #32]
 80175c6:	687b      	ldr	r3, [r7, #4]
 80175c8:	3324      	adds	r3, #36	; 0x24
 80175ca:	220b      	movs	r2, #11
 80175cc:	4619      	mov	r1, r3
 80175ce:	f7ff f815 	bl	80165fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 80175d2:	68bb      	ldr	r3, [r7, #8]
 80175d4:	2201      	movs	r2, #1
 80175d6:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80175d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3710      	adds	r7, #16
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
	...

080175e4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80175e4:	b580      	push	{r7, lr}
 80175e6:	b088      	sub	sp, #32
 80175e8:	af00      	add	r7, sp, #0
 80175ea:	6078      	str	r0, [r7, #4]
 80175ec:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80175ee:	683b      	ldr	r3, [r7, #0]
 80175f0:	681b      	ldr	r3, [r3, #0]
 80175f2:	60fb      	str	r3, [r7, #12]
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	3324      	adds	r3, #36	; 0x24
 80175f8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80175fa:	220b      	movs	r2, #11
 80175fc:	2120      	movs	r1, #32
 80175fe:	68b8      	ldr	r0, [r7, #8]
 8017600:	f7ff f81d 	bl	801663e <mem_set>
	si = i = 0; ni = 8;
 8017604:	2300      	movs	r3, #0
 8017606:	613b      	str	r3, [r7, #16]
 8017608:	693b      	ldr	r3, [r7, #16]
 801760a:	617b      	str	r3, [r7, #20]
 801760c:	2308      	movs	r3, #8
 801760e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017610:	697b      	ldr	r3, [r7, #20]
 8017612:	1c5a      	adds	r2, r3, #1
 8017614:	617a      	str	r2, [r7, #20]
 8017616:	68fa      	ldr	r2, [r7, #12]
 8017618:	4413      	add	r3, r2
 801761a:	781b      	ldrb	r3, [r3, #0]
 801761c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 801761e:	7ffb      	ldrb	r3, [r7, #31]
 8017620:	2b20      	cmp	r3, #32
 8017622:	d94e      	bls.n	80176c2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017624:	7ffb      	ldrb	r3, [r7, #31]
 8017626:	2b2f      	cmp	r3, #47	; 0x2f
 8017628:	d006      	beq.n	8017638 <create_name+0x54>
 801762a:	7ffb      	ldrb	r3, [r7, #31]
 801762c:	2b5c      	cmp	r3, #92	; 0x5c
 801762e:	d110      	bne.n	8017652 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017630:	e002      	b.n	8017638 <create_name+0x54>
 8017632:	697b      	ldr	r3, [r7, #20]
 8017634:	3301      	adds	r3, #1
 8017636:	617b      	str	r3, [r7, #20]
 8017638:	68fa      	ldr	r2, [r7, #12]
 801763a:	697b      	ldr	r3, [r7, #20]
 801763c:	4413      	add	r3, r2
 801763e:	781b      	ldrb	r3, [r3, #0]
 8017640:	2b2f      	cmp	r3, #47	; 0x2f
 8017642:	d0f6      	beq.n	8017632 <create_name+0x4e>
 8017644:	68fa      	ldr	r2, [r7, #12]
 8017646:	697b      	ldr	r3, [r7, #20]
 8017648:	4413      	add	r3, r2
 801764a:	781b      	ldrb	r3, [r3, #0]
 801764c:	2b5c      	cmp	r3, #92	; 0x5c
 801764e:	d0f0      	beq.n	8017632 <create_name+0x4e>
			break;
 8017650:	e038      	b.n	80176c4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017652:	7ffb      	ldrb	r3, [r7, #31]
 8017654:	2b2e      	cmp	r3, #46	; 0x2e
 8017656:	d003      	beq.n	8017660 <create_name+0x7c>
 8017658:	693a      	ldr	r2, [r7, #16]
 801765a:	69bb      	ldr	r3, [r7, #24]
 801765c:	429a      	cmp	r2, r3
 801765e:	d30c      	bcc.n	801767a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017660:	69bb      	ldr	r3, [r7, #24]
 8017662:	2b0b      	cmp	r3, #11
 8017664:	d002      	beq.n	801766c <create_name+0x88>
 8017666:	7ffb      	ldrb	r3, [r7, #31]
 8017668:	2b2e      	cmp	r3, #46	; 0x2e
 801766a:	d001      	beq.n	8017670 <create_name+0x8c>
 801766c:	2306      	movs	r3, #6
 801766e:	e044      	b.n	80176fa <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017670:	2308      	movs	r3, #8
 8017672:	613b      	str	r3, [r7, #16]
 8017674:	230b      	movs	r3, #11
 8017676:	61bb      	str	r3, [r7, #24]
			continue;
 8017678:	e022      	b.n	80176c0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 801767a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 801767e:	2b00      	cmp	r3, #0
 8017680:	da04      	bge.n	801768c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017682:	7ffb      	ldrb	r3, [r7, #31]
 8017684:	3b80      	subs	r3, #128	; 0x80
 8017686:	4a1f      	ldr	r2, [pc, #124]	; (8017704 <create_name+0x120>)
 8017688:	5cd3      	ldrb	r3, [r2, r3]
 801768a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 801768c:	7ffb      	ldrb	r3, [r7, #31]
 801768e:	4619      	mov	r1, r3
 8017690:	481d      	ldr	r0, [pc, #116]	; (8017708 <create_name+0x124>)
 8017692:	f7ff f815 	bl	80166c0 <chk_chr>
 8017696:	4603      	mov	r3, r0
 8017698:	2b00      	cmp	r3, #0
 801769a:	d001      	beq.n	80176a0 <create_name+0xbc>
 801769c:	2306      	movs	r3, #6
 801769e:	e02c      	b.n	80176fa <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 80176a0:	7ffb      	ldrb	r3, [r7, #31]
 80176a2:	2b60      	cmp	r3, #96	; 0x60
 80176a4:	d905      	bls.n	80176b2 <create_name+0xce>
 80176a6:	7ffb      	ldrb	r3, [r7, #31]
 80176a8:	2b7a      	cmp	r3, #122	; 0x7a
 80176aa:	d802      	bhi.n	80176b2 <create_name+0xce>
 80176ac:	7ffb      	ldrb	r3, [r7, #31]
 80176ae:	3b20      	subs	r3, #32
 80176b0:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 80176b2:	693b      	ldr	r3, [r7, #16]
 80176b4:	1c5a      	adds	r2, r3, #1
 80176b6:	613a      	str	r2, [r7, #16]
 80176b8:	68ba      	ldr	r2, [r7, #8]
 80176ba:	4413      	add	r3, r2
 80176bc:	7ffa      	ldrb	r2, [r7, #31]
 80176be:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 80176c0:	e7a6      	b.n	8017610 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 80176c2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 80176c4:	68fa      	ldr	r2, [r7, #12]
 80176c6:	697b      	ldr	r3, [r7, #20]
 80176c8:	441a      	add	r2, r3
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 80176ce:	693b      	ldr	r3, [r7, #16]
 80176d0:	2b00      	cmp	r3, #0
 80176d2:	d101      	bne.n	80176d8 <create_name+0xf4>
 80176d4:	2306      	movs	r3, #6
 80176d6:	e010      	b.n	80176fa <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	781b      	ldrb	r3, [r3, #0]
 80176dc:	2be5      	cmp	r3, #229	; 0xe5
 80176de:	d102      	bne.n	80176e6 <create_name+0x102>
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	2205      	movs	r2, #5
 80176e4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80176e6:	7ffb      	ldrb	r3, [r7, #31]
 80176e8:	2b20      	cmp	r3, #32
 80176ea:	d801      	bhi.n	80176f0 <create_name+0x10c>
 80176ec:	2204      	movs	r2, #4
 80176ee:	e000      	b.n	80176f2 <create_name+0x10e>
 80176f0:	2200      	movs	r2, #0
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	330b      	adds	r3, #11
 80176f6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80176f8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80176fa:	4618      	mov	r0, r3
 80176fc:	3720      	adds	r7, #32
 80176fe:	46bd      	mov	sp, r7
 8017700:	bd80      	pop	{r7, pc}
 8017702:	bf00      	nop
 8017704:	0801af28 	.word	0x0801af28
 8017708:	0801ae4c 	.word	0x0801ae4c

0801770c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 801770c:	b580      	push	{r7, lr}
 801770e:	b086      	sub	sp, #24
 8017710:	af00      	add	r7, sp, #0
 8017712:	6078      	str	r0, [r7, #4]
 8017714:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 801771a:	693b      	ldr	r3, [r7, #16]
 801771c:	681b      	ldr	r3, [r3, #0]
 801771e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017720:	e002      	b.n	8017728 <follow_path+0x1c>
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	3301      	adds	r3, #1
 8017726:	603b      	str	r3, [r7, #0]
 8017728:	683b      	ldr	r3, [r7, #0]
 801772a:	781b      	ldrb	r3, [r3, #0]
 801772c:	2b2f      	cmp	r3, #47	; 0x2f
 801772e:	d0f8      	beq.n	8017722 <follow_path+0x16>
 8017730:	683b      	ldr	r3, [r7, #0]
 8017732:	781b      	ldrb	r3, [r3, #0]
 8017734:	2b5c      	cmp	r3, #92	; 0x5c
 8017736:	d0f4      	beq.n	8017722 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017738:	693b      	ldr	r3, [r7, #16]
 801773a:	2200      	movs	r2, #0
 801773c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 801773e:	683b      	ldr	r3, [r7, #0]
 8017740:	781b      	ldrb	r3, [r3, #0]
 8017742:	2b1f      	cmp	r3, #31
 8017744:	d80a      	bhi.n	801775c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017746:	687b      	ldr	r3, [r7, #4]
 8017748:	2280      	movs	r2, #128	; 0x80
 801774a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 801774e:	2100      	movs	r1, #0
 8017750:	6878      	ldr	r0, [r7, #4]
 8017752:	f7ff fcf9 	bl	8017148 <dir_sdi>
 8017756:	4603      	mov	r3, r0
 8017758:	75fb      	strb	r3, [r7, #23]
 801775a:	e043      	b.n	80177e4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 801775c:	463b      	mov	r3, r7
 801775e:	4619      	mov	r1, r3
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f7ff ff3f 	bl	80175e4 <create_name>
 8017766:	4603      	mov	r3, r0
 8017768:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 801776a:	7dfb      	ldrb	r3, [r7, #23]
 801776c:	2b00      	cmp	r3, #0
 801776e:	d134      	bne.n	80177da <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017770:	6878      	ldr	r0, [r7, #4]
 8017772:	f7ff feaf 	bl	80174d4 <dir_find>
 8017776:	4603      	mov	r3, r0
 8017778:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8017780:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8017782:	7dfb      	ldrb	r3, [r7, #23]
 8017784:	2b00      	cmp	r3, #0
 8017786:	d00a      	beq.n	801779e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8017788:	7dfb      	ldrb	r3, [r7, #23]
 801778a:	2b04      	cmp	r3, #4
 801778c:	d127      	bne.n	80177de <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801778e:	7afb      	ldrb	r3, [r7, #11]
 8017790:	f003 0304 	and.w	r3, r3, #4
 8017794:	2b00      	cmp	r3, #0
 8017796:	d122      	bne.n	80177de <follow_path+0xd2>
 8017798:	2305      	movs	r3, #5
 801779a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801779c:	e01f      	b.n	80177de <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801779e:	7afb      	ldrb	r3, [r7, #11]
 80177a0:	f003 0304 	and.w	r3, r3, #4
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d11c      	bne.n	80177e2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	799b      	ldrb	r3, [r3, #6]
 80177ac:	f003 0310 	and.w	r3, r3, #16
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d102      	bne.n	80177ba <follow_path+0xae>
				res = FR_NO_PATH; break;
 80177b4:	2305      	movs	r3, #5
 80177b6:	75fb      	strb	r3, [r7, #23]
 80177b8:	e014      	b.n	80177e4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80177ba:	68fb      	ldr	r3, [r7, #12]
 80177bc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	695b      	ldr	r3, [r3, #20]
 80177c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80177c8:	4413      	add	r3, r2
 80177ca:	4619      	mov	r1, r3
 80177cc:	68f8      	ldr	r0, [r7, #12]
 80177ce:	f7ff fe42 	bl	8017456 <ld_clust>
 80177d2:	4602      	mov	r2, r0
 80177d4:	693b      	ldr	r3, [r7, #16]
 80177d6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80177d8:	e7c0      	b.n	801775c <follow_path+0x50>
			if (res != FR_OK) break;
 80177da:	bf00      	nop
 80177dc:	e002      	b.n	80177e4 <follow_path+0xd8>
				break;
 80177de:	bf00      	nop
 80177e0:	e000      	b.n	80177e4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80177e2:	bf00      	nop
			}
		}
	}

	return res;
 80177e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80177e6:	4618      	mov	r0, r3
 80177e8:	3718      	adds	r7, #24
 80177ea:	46bd      	mov	sp, r7
 80177ec:	bd80      	pop	{r7, pc}

080177ee <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80177ee:	b480      	push	{r7}
 80177f0:	b087      	sub	sp, #28
 80177f2:	af00      	add	r7, sp, #0
 80177f4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80177f6:	f04f 33ff 	mov.w	r3, #4294967295
 80177fa:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	2b00      	cmp	r3, #0
 8017802:	d031      	beq.n	8017868 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8017804:	687b      	ldr	r3, [r7, #4]
 8017806:	681b      	ldr	r3, [r3, #0]
 8017808:	617b      	str	r3, [r7, #20]
 801780a:	e002      	b.n	8017812 <get_ldnumber+0x24>
 801780c:	697b      	ldr	r3, [r7, #20]
 801780e:	3301      	adds	r3, #1
 8017810:	617b      	str	r3, [r7, #20]
 8017812:	697b      	ldr	r3, [r7, #20]
 8017814:	781b      	ldrb	r3, [r3, #0]
 8017816:	2b20      	cmp	r3, #32
 8017818:	d903      	bls.n	8017822 <get_ldnumber+0x34>
 801781a:	697b      	ldr	r3, [r7, #20]
 801781c:	781b      	ldrb	r3, [r3, #0]
 801781e:	2b3a      	cmp	r3, #58	; 0x3a
 8017820:	d1f4      	bne.n	801780c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8017822:	697b      	ldr	r3, [r7, #20]
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	2b3a      	cmp	r3, #58	; 0x3a
 8017828:	d11c      	bne.n	8017864 <get_ldnumber+0x76>
			tp = *path;
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8017830:	68fb      	ldr	r3, [r7, #12]
 8017832:	1c5a      	adds	r2, r3, #1
 8017834:	60fa      	str	r2, [r7, #12]
 8017836:	781b      	ldrb	r3, [r3, #0]
 8017838:	3b30      	subs	r3, #48	; 0x30
 801783a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 801783c:	68bb      	ldr	r3, [r7, #8]
 801783e:	2b09      	cmp	r3, #9
 8017840:	d80e      	bhi.n	8017860 <get_ldnumber+0x72>
 8017842:	68fa      	ldr	r2, [r7, #12]
 8017844:	697b      	ldr	r3, [r7, #20]
 8017846:	429a      	cmp	r2, r3
 8017848:	d10a      	bne.n	8017860 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 801784a:	68bb      	ldr	r3, [r7, #8]
 801784c:	2b00      	cmp	r3, #0
 801784e:	d107      	bne.n	8017860 <get_ldnumber+0x72>
					vol = (int)i;
 8017850:	68bb      	ldr	r3, [r7, #8]
 8017852:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8017854:	697b      	ldr	r3, [r7, #20]
 8017856:	3301      	adds	r3, #1
 8017858:	617b      	str	r3, [r7, #20]
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	697a      	ldr	r2, [r7, #20]
 801785e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8017860:	693b      	ldr	r3, [r7, #16]
 8017862:	e002      	b.n	801786a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8017864:	2300      	movs	r3, #0
 8017866:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8017868:	693b      	ldr	r3, [r7, #16]
}
 801786a:	4618      	mov	r0, r3
 801786c:	371c      	adds	r7, #28
 801786e:	46bd      	mov	sp, r7
 8017870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017874:	4770      	bx	lr
	...

08017878 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8017878:	b580      	push	{r7, lr}
 801787a:	b082      	sub	sp, #8
 801787c:	af00      	add	r7, sp, #0
 801787e:	6078      	str	r0, [r7, #4]
 8017880:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8017882:	687b      	ldr	r3, [r7, #4]
 8017884:	2200      	movs	r2, #0
 8017886:	70da      	strb	r2, [r3, #3]
 8017888:	687b      	ldr	r3, [r7, #4]
 801788a:	f04f 32ff 	mov.w	r2, #4294967295
 801788e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8017890:	6839      	ldr	r1, [r7, #0]
 8017892:	6878      	ldr	r0, [r7, #4]
 8017894:	f7ff f8e0 	bl	8016a58 <move_window>
 8017898:	4603      	mov	r3, r0
 801789a:	2b00      	cmp	r3, #0
 801789c:	d001      	beq.n	80178a2 <check_fs+0x2a>
 801789e:	2304      	movs	r3, #4
 80178a0:	e038      	b.n	8017914 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	3330      	adds	r3, #48	; 0x30
 80178a6:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80178aa:	4618      	mov	r0, r3
 80178ac:	f7fe fe24 	bl	80164f8 <ld_word>
 80178b0:	4603      	mov	r3, r0
 80178b2:	461a      	mov	r2, r3
 80178b4:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80178b8:	429a      	cmp	r2, r3
 80178ba:	d001      	beq.n	80178c0 <check_fs+0x48>
 80178bc:	2303      	movs	r3, #3
 80178be:	e029      	b.n	8017914 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80178c0:	687b      	ldr	r3, [r7, #4]
 80178c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178c6:	2be9      	cmp	r3, #233	; 0xe9
 80178c8:	d009      	beq.n	80178de <check_fs+0x66>
 80178ca:	687b      	ldr	r3, [r7, #4]
 80178cc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80178d0:	2beb      	cmp	r3, #235	; 0xeb
 80178d2:	d11e      	bne.n	8017912 <check_fs+0x9a>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80178da:	2b90      	cmp	r3, #144	; 0x90
 80178dc:	d119      	bne.n	8017912 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80178de:	687b      	ldr	r3, [r7, #4]
 80178e0:	3330      	adds	r3, #48	; 0x30
 80178e2:	3336      	adds	r3, #54	; 0x36
 80178e4:	4618      	mov	r0, r3
 80178e6:	f7fe fe1f 	bl	8016528 <ld_dword>
 80178ea:	4603      	mov	r3, r0
 80178ec:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80178f0:	4a0a      	ldr	r2, [pc, #40]	; (801791c <check_fs+0xa4>)
 80178f2:	4293      	cmp	r3, r2
 80178f4:	d101      	bne.n	80178fa <check_fs+0x82>
 80178f6:	2300      	movs	r3, #0
 80178f8:	e00c      	b.n	8017914 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	3330      	adds	r3, #48	; 0x30
 80178fe:	3352      	adds	r3, #82	; 0x52
 8017900:	4618      	mov	r0, r3
 8017902:	f7fe fe11 	bl	8016528 <ld_dword>
 8017906:	4602      	mov	r2, r0
 8017908:	4b05      	ldr	r3, [pc, #20]	; (8017920 <check_fs+0xa8>)
 801790a:	429a      	cmp	r2, r3
 801790c:	d101      	bne.n	8017912 <check_fs+0x9a>
 801790e:	2300      	movs	r3, #0
 8017910:	e000      	b.n	8017914 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8017912:	2302      	movs	r3, #2
}
 8017914:	4618      	mov	r0, r3
 8017916:	3708      	adds	r7, #8
 8017918:	46bd      	mov	sp, r7
 801791a:	bd80      	pop	{r7, pc}
 801791c:	00544146 	.word	0x00544146
 8017920:	33544146 	.word	0x33544146

08017924 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8017924:	b580      	push	{r7, lr}
 8017926:	b096      	sub	sp, #88	; 0x58
 8017928:	af00      	add	r7, sp, #0
 801792a:	60f8      	str	r0, [r7, #12]
 801792c:	60b9      	str	r1, [r7, #8]
 801792e:	4613      	mov	r3, r2
 8017930:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8017932:	68bb      	ldr	r3, [r7, #8]
 8017934:	2200      	movs	r2, #0
 8017936:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8017938:	68f8      	ldr	r0, [r7, #12]
 801793a:	f7ff ff58 	bl	80177ee <get_ldnumber>
 801793e:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8017940:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017942:	2b00      	cmp	r3, #0
 8017944:	da01      	bge.n	801794a <find_volume+0x26>
 8017946:	230b      	movs	r3, #11
 8017948:	e22e      	b.n	8017da8 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801794a:	4aa8      	ldr	r2, [pc, #672]	; (8017bec <find_volume+0x2c8>)
 801794c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801794e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017952:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8017954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017956:	2b00      	cmp	r3, #0
 8017958:	d101      	bne.n	801795e <find_volume+0x3a>
 801795a:	230c      	movs	r3, #12
 801795c:	e224      	b.n	8017da8 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 801795e:	68bb      	ldr	r3, [r7, #8]
 8017960:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017962:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8017964:	79fb      	ldrb	r3, [r7, #7]
 8017966:	f023 0301 	bic.w	r3, r3, #1
 801796a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 801796c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801796e:	781b      	ldrb	r3, [r3, #0]
 8017970:	2b00      	cmp	r3, #0
 8017972:	d01a      	beq.n	80179aa <find_volume+0x86>
		stat = disk_status(fs->drv);
 8017974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017976:	785b      	ldrb	r3, [r3, #1]
 8017978:	4618      	mov	r0, r3
 801797a:	f7fe fd1f 	bl	80163bc <disk_status>
 801797e:	4603      	mov	r3, r0
 8017980:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8017984:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	2b00      	cmp	r3, #0
 801798e:	d10c      	bne.n	80179aa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8017990:	79fb      	ldrb	r3, [r7, #7]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d007      	beq.n	80179a6 <find_volume+0x82>
 8017996:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801799a:	f003 0304 	and.w	r3, r3, #4
 801799e:	2b00      	cmp	r3, #0
 80179a0:	d001      	beq.n	80179a6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80179a2:	230a      	movs	r3, #10
 80179a4:	e200      	b.n	8017da8 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 80179a6:	2300      	movs	r3, #0
 80179a8:	e1fe      	b.n	8017da8 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80179aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ac:	2200      	movs	r2, #0
 80179ae:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80179b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80179b2:	b2da      	uxtb	r2, r3
 80179b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179b6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80179b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80179ba:	785b      	ldrb	r3, [r3, #1]
 80179bc:	4618      	mov	r0, r3
 80179be:	f7fe fd17 	bl	80163f0 <disk_initialize>
 80179c2:	4603      	mov	r3, r0
 80179c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80179c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179cc:	f003 0301 	and.w	r3, r3, #1
 80179d0:	2b00      	cmp	r3, #0
 80179d2:	d001      	beq.n	80179d8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80179d4:	2303      	movs	r3, #3
 80179d6:	e1e7      	b.n	8017da8 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80179d8:	79fb      	ldrb	r3, [r7, #7]
 80179da:	2b00      	cmp	r3, #0
 80179dc:	d007      	beq.n	80179ee <find_volume+0xca>
 80179de:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80179e2:	f003 0304 	and.w	r3, r3, #4
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d001      	beq.n	80179ee <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80179ea:	230a      	movs	r3, #10
 80179ec:	e1dc      	b.n	8017da8 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80179ee:	2300      	movs	r3, #0
 80179f0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80179f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80179f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80179f6:	f7ff ff3f 	bl	8017878 <check_fs>
 80179fa:	4603      	mov	r3, r0
 80179fc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8017a00:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a04:	2b02      	cmp	r3, #2
 8017a06:	d14b      	bne.n	8017aa0 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a08:	2300      	movs	r3, #0
 8017a0a:	643b      	str	r3, [r7, #64]	; 0x40
 8017a0c:	e01f      	b.n	8017a4e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8017a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017a10:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017a14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a16:	011b      	lsls	r3, r3, #4
 8017a18:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8017a1c:	4413      	add	r3, r2
 8017a1e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8017a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a22:	3304      	adds	r3, #4
 8017a24:	781b      	ldrb	r3, [r3, #0]
 8017a26:	2b00      	cmp	r3, #0
 8017a28:	d006      	beq.n	8017a38 <find_volume+0x114>
 8017a2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a2c:	3308      	adds	r3, #8
 8017a2e:	4618      	mov	r0, r3
 8017a30:	f7fe fd7a 	bl	8016528 <ld_dword>
 8017a34:	4602      	mov	r2, r0
 8017a36:	e000      	b.n	8017a3a <find_volume+0x116>
 8017a38:	2200      	movs	r2, #0
 8017a3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a3c:	009b      	lsls	r3, r3, #2
 8017a3e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8017a42:	440b      	add	r3, r1
 8017a44:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8017a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a4a:	3301      	adds	r3, #1
 8017a4c:	643b      	str	r3, [r7, #64]	; 0x40
 8017a4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a50:	2b03      	cmp	r3, #3
 8017a52:	d9dc      	bls.n	8017a0e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8017a54:	2300      	movs	r3, #0
 8017a56:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8017a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d002      	beq.n	8017a64 <find_volume+0x140>
 8017a5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a60:	3b01      	subs	r3, #1
 8017a62:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8017a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a66:	009b      	lsls	r3, r3, #2
 8017a68:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8017a6c:	4413      	add	r3, r2
 8017a6e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8017a72:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8017a74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017a76:	2b00      	cmp	r3, #0
 8017a78:	d005      	beq.n	8017a86 <find_volume+0x162>
 8017a7a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017a7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017a7e:	f7ff fefb 	bl	8017878 <check_fs>
 8017a82:	4603      	mov	r3, r0
 8017a84:	e000      	b.n	8017a88 <find_volume+0x164>
 8017a86:	2303      	movs	r3, #3
 8017a88:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8017a8c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017a90:	2b01      	cmp	r3, #1
 8017a92:	d905      	bls.n	8017aa0 <find_volume+0x17c>
 8017a94:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a96:	3301      	adds	r3, #1
 8017a98:	643b      	str	r3, [r7, #64]	; 0x40
 8017a9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8017a9c:	2b03      	cmp	r3, #3
 8017a9e:	d9e1      	bls.n	8017a64 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8017aa0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017aa4:	2b04      	cmp	r3, #4
 8017aa6:	d101      	bne.n	8017aac <find_volume+0x188>
 8017aa8:	2301      	movs	r3, #1
 8017aaa:	e17d      	b.n	8017da8 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8017aac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017ab0:	2b01      	cmp	r3, #1
 8017ab2:	d901      	bls.n	8017ab8 <find_volume+0x194>
 8017ab4:	230d      	movs	r3, #13
 8017ab6:	e177      	b.n	8017da8 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8017ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aba:	3330      	adds	r3, #48	; 0x30
 8017abc:	330b      	adds	r3, #11
 8017abe:	4618      	mov	r0, r3
 8017ac0:	f7fe fd1a 	bl	80164f8 <ld_word>
 8017ac4:	4603      	mov	r3, r0
 8017ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017aca:	d001      	beq.n	8017ad0 <find_volume+0x1ac>
 8017acc:	230d      	movs	r3, #13
 8017ace:	e16b      	b.n	8017da8 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8017ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ad2:	3330      	adds	r3, #48	; 0x30
 8017ad4:	3316      	adds	r3, #22
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	f7fe fd0e 	bl	80164f8 <ld_word>
 8017adc:	4603      	mov	r3, r0
 8017ade:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8017ae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017ae2:	2b00      	cmp	r3, #0
 8017ae4:	d106      	bne.n	8017af4 <find_volume+0x1d0>
 8017ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ae8:	3330      	adds	r3, #48	; 0x30
 8017aea:	3324      	adds	r3, #36	; 0x24
 8017aec:	4618      	mov	r0, r3
 8017aee:	f7fe fd1b 	bl	8016528 <ld_dword>
 8017af2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8017af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8017af8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8017afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017afc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8017b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b02:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8017b04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b06:	789b      	ldrb	r3, [r3, #2]
 8017b08:	2b01      	cmp	r3, #1
 8017b0a:	d005      	beq.n	8017b18 <find_volume+0x1f4>
 8017b0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b0e:	789b      	ldrb	r3, [r3, #2]
 8017b10:	2b02      	cmp	r3, #2
 8017b12:	d001      	beq.n	8017b18 <find_volume+0x1f4>
 8017b14:	230d      	movs	r3, #13
 8017b16:	e147      	b.n	8017da8 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8017b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b1a:	789b      	ldrb	r3, [r3, #2]
 8017b1c:	461a      	mov	r2, r3
 8017b1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017b20:	fb02 f303 	mul.w	r3, r2, r3
 8017b24:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8017b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8017b2c:	b29a      	uxth	r2, r3
 8017b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b30:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8017b32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b34:	895b      	ldrh	r3, [r3, #10]
 8017b36:	2b00      	cmp	r3, #0
 8017b38:	d008      	beq.n	8017b4c <find_volume+0x228>
 8017b3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b3c:	895b      	ldrh	r3, [r3, #10]
 8017b3e:	461a      	mov	r2, r3
 8017b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b42:	895b      	ldrh	r3, [r3, #10]
 8017b44:	3b01      	subs	r3, #1
 8017b46:	4013      	ands	r3, r2
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d001      	beq.n	8017b50 <find_volume+0x22c>
 8017b4c:	230d      	movs	r3, #13
 8017b4e:	e12b      	b.n	8017da8 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8017b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b52:	3330      	adds	r3, #48	; 0x30
 8017b54:	3311      	adds	r3, #17
 8017b56:	4618      	mov	r0, r3
 8017b58:	f7fe fcce 	bl	80164f8 <ld_word>
 8017b5c:	4603      	mov	r3, r0
 8017b5e:	461a      	mov	r2, r3
 8017b60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b62:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8017b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b66:	891b      	ldrh	r3, [r3, #8]
 8017b68:	f003 030f 	and.w	r3, r3, #15
 8017b6c:	b29b      	uxth	r3, r3
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d001      	beq.n	8017b76 <find_volume+0x252>
 8017b72:	230d      	movs	r3, #13
 8017b74:	e118      	b.n	8017da8 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8017b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b78:	3330      	adds	r3, #48	; 0x30
 8017b7a:	3313      	adds	r3, #19
 8017b7c:	4618      	mov	r0, r3
 8017b7e:	f7fe fcbb 	bl	80164f8 <ld_word>
 8017b82:	4603      	mov	r3, r0
 8017b84:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8017b86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d106      	bne.n	8017b9a <find_volume+0x276>
 8017b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b8e:	3330      	adds	r3, #48	; 0x30
 8017b90:	3320      	adds	r3, #32
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7fe fcc8 	bl	8016528 <ld_dword>
 8017b98:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8017b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b9c:	3330      	adds	r3, #48	; 0x30
 8017b9e:	330e      	adds	r3, #14
 8017ba0:	4618      	mov	r0, r3
 8017ba2:	f7fe fca9 	bl	80164f8 <ld_word>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8017baa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8017bac:	2b00      	cmp	r3, #0
 8017bae:	d101      	bne.n	8017bb4 <find_volume+0x290>
 8017bb0:	230d      	movs	r3, #13
 8017bb2:	e0f9      	b.n	8017da8 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8017bb4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017bb8:	4413      	add	r3, r2
 8017bba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017bbc:	8912      	ldrh	r2, [r2, #8]
 8017bbe:	0912      	lsrs	r2, r2, #4
 8017bc0:	b292      	uxth	r2, r2
 8017bc2:	4413      	add	r3, r2
 8017bc4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8017bc6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bca:	429a      	cmp	r2, r3
 8017bcc:	d201      	bcs.n	8017bd2 <find_volume+0x2ae>
 8017bce:	230d      	movs	r3, #13
 8017bd0:	e0ea      	b.n	8017da8 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8017bd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8017bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017bd6:	1ad3      	subs	r3, r2, r3
 8017bd8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017bda:	8952      	ldrh	r2, [r2, #10]
 8017bdc:	fbb3 f3f2 	udiv	r3, r3, r2
 8017be0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8017be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017be4:	2b00      	cmp	r3, #0
 8017be6:	d103      	bne.n	8017bf0 <find_volume+0x2cc>
 8017be8:	230d      	movs	r3, #13
 8017bea:	e0dd      	b.n	8017da8 <find_volume+0x484>
 8017bec:	24000b5c 	.word	0x24000b5c
		fmt = FS_FAT32;
 8017bf0:	2303      	movs	r3, #3
 8017bf2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8017bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017bf8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8017bfc:	4293      	cmp	r3, r2
 8017bfe:	d802      	bhi.n	8017c06 <find_volume+0x2e2>
 8017c00:	2302      	movs	r3, #2
 8017c02:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8017c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c08:	f640 72f5 	movw	r2, #4085	; 0xff5
 8017c0c:	4293      	cmp	r3, r2
 8017c0e:	d802      	bhi.n	8017c16 <find_volume+0x2f2>
 8017c10:	2301      	movs	r3, #1
 8017c12:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8017c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c18:	1c9a      	adds	r2, r3, #2
 8017c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8017c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c20:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c22:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8017c24:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017c26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017c28:	441a      	add	r2, r3
 8017c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c2c:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8017c2e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8017c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017c32:	441a      	add	r2, r3
 8017c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c36:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8017c38:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c3c:	2b03      	cmp	r3, #3
 8017c3e:	d11e      	bne.n	8017c7e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8017c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c42:	3330      	adds	r3, #48	; 0x30
 8017c44:	332a      	adds	r3, #42	; 0x2a
 8017c46:	4618      	mov	r0, r3
 8017c48:	f7fe fc56 	bl	80164f8 <ld_word>
 8017c4c:	4603      	mov	r3, r0
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d001      	beq.n	8017c56 <find_volume+0x332>
 8017c52:	230d      	movs	r3, #13
 8017c54:	e0a8      	b.n	8017da8 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8017c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c58:	891b      	ldrh	r3, [r3, #8]
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d001      	beq.n	8017c62 <find_volume+0x33e>
 8017c5e:	230d      	movs	r3, #13
 8017c60:	e0a2      	b.n	8017da8 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8017c62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c64:	3330      	adds	r3, #48	; 0x30
 8017c66:	332c      	adds	r3, #44	; 0x2c
 8017c68:	4618      	mov	r0, r3
 8017c6a:	f7fe fc5d 	bl	8016528 <ld_dword>
 8017c6e:	4602      	mov	r2, r0
 8017c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c72:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8017c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c76:	695b      	ldr	r3, [r3, #20]
 8017c78:	009b      	lsls	r3, r3, #2
 8017c7a:	647b      	str	r3, [r7, #68]	; 0x44
 8017c7c:	e01f      	b.n	8017cbe <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8017c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c80:	891b      	ldrh	r3, [r3, #8]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d101      	bne.n	8017c8a <find_volume+0x366>
 8017c86:	230d      	movs	r3, #13
 8017c88:	e08e      	b.n	8017da8 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8017c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c8c:	6a1a      	ldr	r2, [r3, #32]
 8017c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8017c90:	441a      	add	r2, r3
 8017c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c94:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8017c96:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017c9a:	2b02      	cmp	r3, #2
 8017c9c:	d103      	bne.n	8017ca6 <find_volume+0x382>
 8017c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca0:	695b      	ldr	r3, [r3, #20]
 8017ca2:	005b      	lsls	r3, r3, #1
 8017ca4:	e00a      	b.n	8017cbc <find_volume+0x398>
 8017ca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca8:	695a      	ldr	r2, [r3, #20]
 8017caa:	4613      	mov	r3, r2
 8017cac:	005b      	lsls	r3, r3, #1
 8017cae:	4413      	add	r3, r2
 8017cb0:	085a      	lsrs	r2, r3, #1
 8017cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb4:	695b      	ldr	r3, [r3, #20]
 8017cb6:	f003 0301 	and.w	r3, r3, #1
 8017cba:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8017cbc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8017cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cc0:	699a      	ldr	r2, [r3, #24]
 8017cc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8017cc4:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8017cc8:	0a5b      	lsrs	r3, r3, #9
 8017cca:	429a      	cmp	r2, r3
 8017ccc:	d201      	bcs.n	8017cd2 <find_volume+0x3ae>
 8017cce:	230d      	movs	r3, #13
 8017cd0:	e06a      	b.n	8017da8 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8017cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cd4:	f04f 32ff 	mov.w	r2, #4294967295
 8017cd8:	611a      	str	r2, [r3, #16]
 8017cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cdc:	691a      	ldr	r2, [r3, #16]
 8017cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8017ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ce4:	2280      	movs	r2, #128	; 0x80
 8017ce6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8017ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8017cec:	2b03      	cmp	r3, #3
 8017cee:	d149      	bne.n	8017d84 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8017cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cf2:	3330      	adds	r3, #48	; 0x30
 8017cf4:	3330      	adds	r3, #48	; 0x30
 8017cf6:	4618      	mov	r0, r3
 8017cf8:	f7fe fbfe 	bl	80164f8 <ld_word>
 8017cfc:	4603      	mov	r3, r0
 8017cfe:	2b01      	cmp	r3, #1
 8017d00:	d140      	bne.n	8017d84 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8017d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8017d04:	3301      	adds	r3, #1
 8017d06:	4619      	mov	r1, r3
 8017d08:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017d0a:	f7fe fea5 	bl	8016a58 <move_window>
 8017d0e:	4603      	mov	r3, r0
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d137      	bne.n	8017d84 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8017d14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d16:	2200      	movs	r2, #0
 8017d18:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8017d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d1c:	3330      	adds	r3, #48	; 0x30
 8017d1e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017d22:	4618      	mov	r0, r3
 8017d24:	f7fe fbe8 	bl	80164f8 <ld_word>
 8017d28:	4603      	mov	r3, r0
 8017d2a:	461a      	mov	r2, r3
 8017d2c:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8017d30:	429a      	cmp	r2, r3
 8017d32:	d127      	bne.n	8017d84 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8017d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d36:	3330      	adds	r3, #48	; 0x30
 8017d38:	4618      	mov	r0, r3
 8017d3a:	f7fe fbf5 	bl	8016528 <ld_dword>
 8017d3e:	4602      	mov	r2, r0
 8017d40:	4b1b      	ldr	r3, [pc, #108]	; (8017db0 <find_volume+0x48c>)
 8017d42:	429a      	cmp	r2, r3
 8017d44:	d11e      	bne.n	8017d84 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8017d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d48:	3330      	adds	r3, #48	; 0x30
 8017d4a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017d4e:	4618      	mov	r0, r3
 8017d50:	f7fe fbea 	bl	8016528 <ld_dword>
 8017d54:	4602      	mov	r2, r0
 8017d56:	4b17      	ldr	r3, [pc, #92]	; (8017db4 <find_volume+0x490>)
 8017d58:	429a      	cmp	r2, r3
 8017d5a:	d113      	bne.n	8017d84 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8017d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d5e:	3330      	adds	r3, #48	; 0x30
 8017d60:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8017d64:	4618      	mov	r0, r3
 8017d66:	f7fe fbdf 	bl	8016528 <ld_dword>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d6e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8017d70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d72:	3330      	adds	r3, #48	; 0x30
 8017d74:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8017d78:	4618      	mov	r0, r3
 8017d7a:	f7fe fbd5 	bl	8016528 <ld_dword>
 8017d7e:	4602      	mov	r2, r0
 8017d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d82:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8017d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d86:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8017d8a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8017d8c:	4b0a      	ldr	r3, [pc, #40]	; (8017db8 <find_volume+0x494>)
 8017d8e:	881b      	ldrh	r3, [r3, #0]
 8017d90:	3301      	adds	r3, #1
 8017d92:	b29a      	uxth	r2, r3
 8017d94:	4b08      	ldr	r3, [pc, #32]	; (8017db8 <find_volume+0x494>)
 8017d96:	801a      	strh	r2, [r3, #0]
 8017d98:	4b07      	ldr	r3, [pc, #28]	; (8017db8 <find_volume+0x494>)
 8017d9a:	881a      	ldrh	r2, [r3, #0]
 8017d9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d9e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8017da0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8017da2:	f7fe fdf1 	bl	8016988 <clear_lock>
#endif
	return FR_OK;
 8017da6:	2300      	movs	r3, #0
}
 8017da8:	4618      	mov	r0, r3
 8017daa:	3758      	adds	r7, #88	; 0x58
 8017dac:	46bd      	mov	sp, r7
 8017dae:	bd80      	pop	{r7, pc}
 8017db0:	41615252 	.word	0x41615252
 8017db4:	61417272 	.word	0x61417272
 8017db8:	24000b60 	.word	0x24000b60

08017dbc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8017dbc:	b580      	push	{r7, lr}
 8017dbe:	b084      	sub	sp, #16
 8017dc0:	af00      	add	r7, sp, #0
 8017dc2:	6078      	str	r0, [r7, #4]
 8017dc4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8017dc6:	2309      	movs	r3, #9
 8017dc8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d01c      	beq.n	8017e0a <validate+0x4e>
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	681b      	ldr	r3, [r3, #0]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d018      	beq.n	8017e0a <validate+0x4e>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	781b      	ldrb	r3, [r3, #0]
 8017dde:	2b00      	cmp	r3, #0
 8017de0:	d013      	beq.n	8017e0a <validate+0x4e>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	889a      	ldrh	r2, [r3, #4]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	88db      	ldrh	r3, [r3, #6]
 8017dec:	429a      	cmp	r2, r3
 8017dee:	d10c      	bne.n	8017e0a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	681b      	ldr	r3, [r3, #0]
 8017df4:	785b      	ldrb	r3, [r3, #1]
 8017df6:	4618      	mov	r0, r3
 8017df8:	f7fe fae0 	bl	80163bc <disk_status>
 8017dfc:	4603      	mov	r3, r0
 8017dfe:	f003 0301 	and.w	r3, r3, #1
 8017e02:	2b00      	cmp	r3, #0
 8017e04:	d101      	bne.n	8017e0a <validate+0x4e>
			res = FR_OK;
 8017e06:	2300      	movs	r3, #0
 8017e08:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8017e0a:	7bfb      	ldrb	r3, [r7, #15]
 8017e0c:	2b00      	cmp	r3, #0
 8017e0e:	d102      	bne.n	8017e16 <validate+0x5a>
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	681b      	ldr	r3, [r3, #0]
 8017e14:	e000      	b.n	8017e18 <validate+0x5c>
 8017e16:	2300      	movs	r3, #0
 8017e18:	683a      	ldr	r2, [r7, #0]
 8017e1a:	6013      	str	r3, [r2, #0]
	return res;
 8017e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e1e:	4618      	mov	r0, r3
 8017e20:	3710      	adds	r7, #16
 8017e22:	46bd      	mov	sp, r7
 8017e24:	bd80      	pop	{r7, pc}
	...

08017e28 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b088      	sub	sp, #32
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	60f8      	str	r0, [r7, #12]
 8017e30:	60b9      	str	r1, [r7, #8]
 8017e32:	4613      	mov	r3, r2
 8017e34:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8017e36:	68bb      	ldr	r3, [r7, #8]
 8017e38:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8017e3a:	f107 0310 	add.w	r3, r7, #16
 8017e3e:	4618      	mov	r0, r3
 8017e40:	f7ff fcd5 	bl	80177ee <get_ldnumber>
 8017e44:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8017e46:	69fb      	ldr	r3, [r7, #28]
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	da01      	bge.n	8017e50 <f_mount+0x28>
 8017e4c:	230b      	movs	r3, #11
 8017e4e:	e02b      	b.n	8017ea8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8017e50:	4a17      	ldr	r2, [pc, #92]	; (8017eb0 <f_mount+0x88>)
 8017e52:	69fb      	ldr	r3, [r7, #28]
 8017e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017e58:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8017e5a:	69bb      	ldr	r3, [r7, #24]
 8017e5c:	2b00      	cmp	r3, #0
 8017e5e:	d005      	beq.n	8017e6c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8017e60:	69b8      	ldr	r0, [r7, #24]
 8017e62:	f7fe fd91 	bl	8016988 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8017e66:	69bb      	ldr	r3, [r7, #24]
 8017e68:	2200      	movs	r2, #0
 8017e6a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8017e6c:	68fb      	ldr	r3, [r7, #12]
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d002      	beq.n	8017e78 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8017e72:	68fb      	ldr	r3, [r7, #12]
 8017e74:	2200      	movs	r2, #0
 8017e76:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8017e78:	68fa      	ldr	r2, [r7, #12]
 8017e7a:	490d      	ldr	r1, [pc, #52]	; (8017eb0 <f_mount+0x88>)
 8017e7c:	69fb      	ldr	r3, [r7, #28]
 8017e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d002      	beq.n	8017e8e <f_mount+0x66>
 8017e88:	79fb      	ldrb	r3, [r7, #7]
 8017e8a:	2b01      	cmp	r3, #1
 8017e8c:	d001      	beq.n	8017e92 <f_mount+0x6a>
 8017e8e:	2300      	movs	r3, #0
 8017e90:	e00a      	b.n	8017ea8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8017e92:	f107 010c 	add.w	r1, r7, #12
 8017e96:	f107 0308 	add.w	r3, r7, #8
 8017e9a:	2200      	movs	r2, #0
 8017e9c:	4618      	mov	r0, r3
 8017e9e:	f7ff fd41 	bl	8017924 <find_volume>
 8017ea2:	4603      	mov	r3, r0
 8017ea4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8017ea6:	7dfb      	ldrb	r3, [r7, #23]
}
 8017ea8:	4618      	mov	r0, r3
 8017eaa:	3720      	adds	r7, #32
 8017eac:	46bd      	mov	sp, r7
 8017eae:	bd80      	pop	{r7, pc}
 8017eb0:	24000b5c 	.word	0x24000b5c

08017eb4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b098      	sub	sp, #96	; 0x60
 8017eb8:	af00      	add	r7, sp, #0
 8017eba:	60f8      	str	r0, [r7, #12]
 8017ebc:	60b9      	str	r1, [r7, #8]
 8017ebe:	4613      	mov	r3, r2
 8017ec0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	2b00      	cmp	r3, #0
 8017ec6:	d101      	bne.n	8017ecc <f_open+0x18>
 8017ec8:	2309      	movs	r3, #9
 8017eca:	e1ad      	b.n	8018228 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8017ecc:	79fb      	ldrb	r3, [r7, #7]
 8017ece:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017ed2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8017ed4:	79fa      	ldrb	r2, [r7, #7]
 8017ed6:	f107 0110 	add.w	r1, r7, #16
 8017eda:	f107 0308 	add.w	r3, r7, #8
 8017ede:	4618      	mov	r0, r3
 8017ee0:	f7ff fd20 	bl	8017924 <find_volume>
 8017ee4:	4603      	mov	r3, r0
 8017ee6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8017eea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017eee:	2b00      	cmp	r3, #0
 8017ef0:	f040 8191 	bne.w	8018216 <f_open+0x362>
		dj.obj.fs = fs;
 8017ef4:	693b      	ldr	r3, [r7, #16]
 8017ef6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8017ef8:	68ba      	ldr	r2, [r7, #8]
 8017efa:	f107 0314 	add.w	r3, r7, #20
 8017efe:	4611      	mov	r1, r2
 8017f00:	4618      	mov	r0, r3
 8017f02:	f7ff fc03 	bl	801770c <follow_path>
 8017f06:	4603      	mov	r3, r0
 8017f08:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8017f0c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	d11a      	bne.n	8017f4a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8017f14:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8017f18:	b25b      	sxtb	r3, r3
 8017f1a:	2b00      	cmp	r3, #0
 8017f1c:	da03      	bge.n	8017f26 <f_open+0x72>
				res = FR_INVALID_NAME;
 8017f1e:	2306      	movs	r3, #6
 8017f20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f24:	e011      	b.n	8017f4a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8017f26:	79fb      	ldrb	r3, [r7, #7]
 8017f28:	f023 0301 	bic.w	r3, r3, #1
 8017f2c:	2b00      	cmp	r3, #0
 8017f2e:	bf14      	ite	ne
 8017f30:	2301      	movne	r3, #1
 8017f32:	2300      	moveq	r3, #0
 8017f34:	b2db      	uxtb	r3, r3
 8017f36:	461a      	mov	r2, r3
 8017f38:	f107 0314 	add.w	r3, r7, #20
 8017f3c:	4611      	mov	r1, r2
 8017f3e:	4618      	mov	r0, r3
 8017f40:	f7fe fbda 	bl	80166f8 <chk_lock>
 8017f44:	4603      	mov	r3, r0
 8017f46:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8017f4a:	79fb      	ldrb	r3, [r7, #7]
 8017f4c:	f003 031c 	and.w	r3, r3, #28
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d07f      	beq.n	8018054 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8017f54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f58:	2b00      	cmp	r3, #0
 8017f5a:	d017      	beq.n	8017f8c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8017f5c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017f60:	2b04      	cmp	r3, #4
 8017f62:	d10e      	bne.n	8017f82 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8017f64:	f7fe fc24 	bl	80167b0 <enq_lock>
 8017f68:	4603      	mov	r3, r0
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d006      	beq.n	8017f7c <f_open+0xc8>
 8017f6e:	f107 0314 	add.w	r3, r7, #20
 8017f72:	4618      	mov	r0, r3
 8017f74:	f7ff fb03 	bl	801757e <dir_register>
 8017f78:	4603      	mov	r3, r0
 8017f7a:	e000      	b.n	8017f7e <f_open+0xca>
 8017f7c:	2312      	movs	r3, #18
 8017f7e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8017f82:	79fb      	ldrb	r3, [r7, #7]
 8017f84:	f043 0308 	orr.w	r3, r3, #8
 8017f88:	71fb      	strb	r3, [r7, #7]
 8017f8a:	e010      	b.n	8017fae <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8017f8c:	7ebb      	ldrb	r3, [r7, #26]
 8017f8e:	f003 0311 	and.w	r3, r3, #17
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d003      	beq.n	8017f9e <f_open+0xea>
					res = FR_DENIED;
 8017f96:	2307      	movs	r3, #7
 8017f98:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8017f9c:	e007      	b.n	8017fae <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8017f9e:	79fb      	ldrb	r3, [r7, #7]
 8017fa0:	f003 0304 	and.w	r3, r3, #4
 8017fa4:	2b00      	cmp	r3, #0
 8017fa6:	d002      	beq.n	8017fae <f_open+0xfa>
 8017fa8:	2308      	movs	r3, #8
 8017faa:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8017fae:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d168      	bne.n	8018088 <f_open+0x1d4>
 8017fb6:	79fb      	ldrb	r3, [r7, #7]
 8017fb8:	f003 0308 	and.w	r3, r3, #8
 8017fbc:	2b00      	cmp	r3, #0
 8017fbe:	d063      	beq.n	8018088 <f_open+0x1d4>
				dw = GET_FATTIME();
 8017fc0:	f7fb f8fe 	bl	80131c0 <get_fattime>
 8017fc4:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8017fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fc8:	330e      	adds	r3, #14
 8017fca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017fcc:	4618      	mov	r0, r3
 8017fce:	f7fe fae9 	bl	80165a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8017fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fd4:	3316      	adds	r3, #22
 8017fd6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8017fd8:	4618      	mov	r0, r3
 8017fda:	f7fe fae3 	bl	80165a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8017fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017fe0:	330b      	adds	r3, #11
 8017fe2:	2220      	movs	r2, #32
 8017fe4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8017fe6:	693b      	ldr	r3, [r7, #16]
 8017fe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017fea:	4611      	mov	r1, r2
 8017fec:	4618      	mov	r0, r3
 8017fee:	f7ff fa32 	bl	8017456 <ld_clust>
 8017ff2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8017ff4:	693b      	ldr	r3, [r7, #16]
 8017ff6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017ff8:	2200      	movs	r2, #0
 8017ffa:	4618      	mov	r0, r3
 8017ffc:	f7ff fa4a 	bl	8017494 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018002:	331c      	adds	r3, #28
 8018004:	2100      	movs	r1, #0
 8018006:	4618      	mov	r0, r3
 8018008:	f7fe facc 	bl	80165a4 <st_dword>
					fs->wflag = 1;
 801800c:	693b      	ldr	r3, [r7, #16]
 801800e:	2201      	movs	r2, #1
 8018010:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018014:	2b00      	cmp	r3, #0
 8018016:	d037      	beq.n	8018088 <f_open+0x1d4>
						dw = fs->winsect;
 8018018:	693b      	ldr	r3, [r7, #16]
 801801a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801801c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801801e:	f107 0314 	add.w	r3, r7, #20
 8018022:	2200      	movs	r2, #0
 8018024:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8018026:	4618      	mov	r0, r3
 8018028:	f7fe ff5d 	bl	8016ee6 <remove_chain>
 801802c:	4603      	mov	r3, r0
 801802e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8018032:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018036:	2b00      	cmp	r3, #0
 8018038:	d126      	bne.n	8018088 <f_open+0x1d4>
							res = move_window(fs, dw);
 801803a:	693b      	ldr	r3, [r7, #16]
 801803c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801803e:	4618      	mov	r0, r3
 8018040:	f7fe fd0a 	bl	8016a58 <move_window>
 8018044:	4603      	mov	r3, r0
 8018046:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 801804a:	693b      	ldr	r3, [r7, #16]
 801804c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801804e:	3a01      	subs	r2, #1
 8018050:	60da      	str	r2, [r3, #12]
 8018052:	e019      	b.n	8018088 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8018054:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018058:	2b00      	cmp	r3, #0
 801805a:	d115      	bne.n	8018088 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 801805c:	7ebb      	ldrb	r3, [r7, #26]
 801805e:	f003 0310 	and.w	r3, r3, #16
 8018062:	2b00      	cmp	r3, #0
 8018064:	d003      	beq.n	801806e <f_open+0x1ba>
					res = FR_NO_FILE;
 8018066:	2304      	movs	r3, #4
 8018068:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801806c:	e00c      	b.n	8018088 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801806e:	79fb      	ldrb	r3, [r7, #7]
 8018070:	f003 0302 	and.w	r3, r3, #2
 8018074:	2b00      	cmp	r3, #0
 8018076:	d007      	beq.n	8018088 <f_open+0x1d4>
 8018078:	7ebb      	ldrb	r3, [r7, #26]
 801807a:	f003 0301 	and.w	r3, r3, #1
 801807e:	2b00      	cmp	r3, #0
 8018080:	d002      	beq.n	8018088 <f_open+0x1d4>
						res = FR_DENIED;
 8018082:	2307      	movs	r3, #7
 8018084:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018088:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801808c:	2b00      	cmp	r3, #0
 801808e:	d128      	bne.n	80180e2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018090:	79fb      	ldrb	r3, [r7, #7]
 8018092:	f003 0308 	and.w	r3, r3, #8
 8018096:	2b00      	cmp	r3, #0
 8018098:	d003      	beq.n	80180a2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801809a:	79fb      	ldrb	r3, [r7, #7]
 801809c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180a0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80180a2:	693b      	ldr	r3, [r7, #16]
 80180a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80180a6:	68fb      	ldr	r3, [r7, #12]
 80180a8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80180aa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180ac:	68fb      	ldr	r3, [r7, #12]
 80180ae:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80180b0:	79fb      	ldrb	r3, [r7, #7]
 80180b2:	f023 0301 	bic.w	r3, r3, #1
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	bf14      	ite	ne
 80180ba:	2301      	movne	r3, #1
 80180bc:	2300      	moveq	r3, #0
 80180be:	b2db      	uxtb	r3, r3
 80180c0:	461a      	mov	r2, r3
 80180c2:	f107 0314 	add.w	r3, r7, #20
 80180c6:	4611      	mov	r1, r2
 80180c8:	4618      	mov	r0, r3
 80180ca:	f7fe fb93 	bl	80167f4 <inc_lock>
 80180ce:	4602      	mov	r2, r0
 80180d0:	68fb      	ldr	r3, [r7, #12]
 80180d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	691b      	ldr	r3, [r3, #16]
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d102      	bne.n	80180e2 <f_open+0x22e>
 80180dc:	2302      	movs	r3, #2
 80180de:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80180e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80180e6:	2b00      	cmp	r3, #0
 80180e8:	f040 8095 	bne.w	8018216 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80180ec:	693b      	ldr	r3, [r7, #16]
 80180ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80180f0:	4611      	mov	r1, r2
 80180f2:	4618      	mov	r0, r3
 80180f4:	f7ff f9af 	bl	8017456 <ld_clust>
 80180f8:	4602      	mov	r2, r0
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80180fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018100:	331c      	adds	r3, #28
 8018102:	4618      	mov	r0, r3
 8018104:	f7fe fa10 	bl	8016528 <ld_dword>
 8018108:	4602      	mov	r2, r0
 801810a:	68fb      	ldr	r3, [r7, #12]
 801810c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801810e:	68fb      	ldr	r3, [r7, #12]
 8018110:	2200      	movs	r2, #0
 8018112:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018114:	693a      	ldr	r2, [r7, #16]
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801811a:	693b      	ldr	r3, [r7, #16]
 801811c:	88da      	ldrh	r2, [r3, #6]
 801811e:	68fb      	ldr	r3, [r7, #12]
 8018120:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	79fa      	ldrb	r2, [r7, #7]
 8018126:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8018128:	68fb      	ldr	r3, [r7, #12]
 801812a:	2200      	movs	r2, #0
 801812c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801812e:	68fb      	ldr	r3, [r7, #12]
 8018130:	2200      	movs	r2, #0
 8018132:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8018134:	68fb      	ldr	r3, [r7, #12]
 8018136:	2200      	movs	r2, #0
 8018138:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801813a:	68fb      	ldr	r3, [r7, #12]
 801813c:	3330      	adds	r3, #48	; 0x30
 801813e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018142:	2100      	movs	r1, #0
 8018144:	4618      	mov	r0, r3
 8018146:	f7fe fa7a 	bl	801663e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 801814a:	79fb      	ldrb	r3, [r7, #7]
 801814c:	f003 0320 	and.w	r3, r3, #32
 8018150:	2b00      	cmp	r3, #0
 8018152:	d060      	beq.n	8018216 <f_open+0x362>
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	68db      	ldr	r3, [r3, #12]
 8018158:	2b00      	cmp	r3, #0
 801815a:	d05c      	beq.n	8018216 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	68da      	ldr	r2, [r3, #12]
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8018164:	693b      	ldr	r3, [r7, #16]
 8018166:	895b      	ldrh	r3, [r3, #10]
 8018168:	025b      	lsls	r3, r3, #9
 801816a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 801816c:	68fb      	ldr	r3, [r7, #12]
 801816e:	689b      	ldr	r3, [r3, #8]
 8018170:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	68db      	ldr	r3, [r3, #12]
 8018176:	657b      	str	r3, [r7, #84]	; 0x54
 8018178:	e016      	b.n	80181a8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801817e:	4618      	mov	r0, r3
 8018180:	f7fe fd25 	bl	8016bce <get_fat>
 8018184:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018186:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018188:	2b01      	cmp	r3, #1
 801818a:	d802      	bhi.n	8018192 <f_open+0x2de>
 801818c:	2302      	movs	r3, #2
 801818e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018192:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018198:	d102      	bne.n	80181a0 <f_open+0x2ec>
 801819a:	2301      	movs	r3, #1
 801819c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80181a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181a4:	1ad3      	subs	r3, r2, r3
 80181a6:	657b      	str	r3, [r7, #84]	; 0x54
 80181a8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181ac:	2b00      	cmp	r3, #0
 80181ae:	d103      	bne.n	80181b8 <f_open+0x304>
 80181b0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80181b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80181b4:	429a      	cmp	r2, r3
 80181b6:	d8e0      	bhi.n	801817a <f_open+0x2c6>
				}
				fp->clust = clst;
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80181bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80181be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	d127      	bne.n	8018216 <f_open+0x362>
 80181c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	d022      	beq.n	8018216 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80181d0:	693b      	ldr	r3, [r7, #16]
 80181d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80181d4:	4618      	mov	r0, r3
 80181d6:	f7fe fcdb 	bl	8016b90 <clust2sect>
 80181da:	6478      	str	r0, [r7, #68]	; 0x44
 80181dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181de:	2b00      	cmp	r3, #0
 80181e0:	d103      	bne.n	80181ea <f_open+0x336>
						res = FR_INT_ERR;
 80181e2:	2302      	movs	r3, #2
 80181e4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80181e8:	e015      	b.n	8018216 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80181ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80181ec:	0a5a      	lsrs	r2, r3, #9
 80181ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80181f0:	441a      	add	r2, r3
 80181f2:	68fb      	ldr	r3, [r7, #12]
 80181f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80181f6:	693b      	ldr	r3, [r7, #16]
 80181f8:	7858      	ldrb	r0, [r3, #1]
 80181fa:	68fb      	ldr	r3, [r7, #12]
 80181fc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	6a1a      	ldr	r2, [r3, #32]
 8018204:	2301      	movs	r3, #1
 8018206:	f7fe f919 	bl	801643c <disk_read>
 801820a:	4603      	mov	r3, r0
 801820c:	2b00      	cmp	r3, #0
 801820e:	d002      	beq.n	8018216 <f_open+0x362>
 8018210:	2301      	movs	r3, #1
 8018212:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018216:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801821a:	2b00      	cmp	r3, #0
 801821c:	d002      	beq.n	8018224 <f_open+0x370>
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	2200      	movs	r2, #0
 8018222:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018224:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018228:	4618      	mov	r0, r3
 801822a:	3760      	adds	r7, #96	; 0x60
 801822c:	46bd      	mov	sp, r7
 801822e:	bd80      	pop	{r7, pc}

08018230 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018230:	b580      	push	{r7, lr}
 8018232:	b08e      	sub	sp, #56	; 0x38
 8018234:	af00      	add	r7, sp, #0
 8018236:	60f8      	str	r0, [r7, #12]
 8018238:	60b9      	str	r1, [r7, #8]
 801823a:	607a      	str	r2, [r7, #4]
 801823c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801823e:	68bb      	ldr	r3, [r7, #8]
 8018240:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018242:	683b      	ldr	r3, [r7, #0]
 8018244:	2200      	movs	r2, #0
 8018246:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018248:	68fb      	ldr	r3, [r7, #12]
 801824a:	f107 0214 	add.w	r2, r7, #20
 801824e:	4611      	mov	r1, r2
 8018250:	4618      	mov	r0, r3
 8018252:	f7ff fdb3 	bl	8017dbc <validate>
 8018256:	4603      	mov	r3, r0
 8018258:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 801825c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018260:	2b00      	cmp	r3, #0
 8018262:	d107      	bne.n	8018274 <f_read+0x44>
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	7d5b      	ldrb	r3, [r3, #21]
 8018268:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801826c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018270:	2b00      	cmp	r3, #0
 8018272:	d002      	beq.n	801827a <f_read+0x4a>
 8018274:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018278:	e115      	b.n	80184a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 801827a:	68fb      	ldr	r3, [r7, #12]
 801827c:	7d1b      	ldrb	r3, [r3, #20]
 801827e:	f003 0301 	and.w	r3, r3, #1
 8018282:	2b00      	cmp	r3, #0
 8018284:	d101      	bne.n	801828a <f_read+0x5a>
 8018286:	2307      	movs	r3, #7
 8018288:	e10d      	b.n	80184a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	68da      	ldr	r2, [r3, #12]
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	699b      	ldr	r3, [r3, #24]
 8018292:	1ad3      	subs	r3, r2, r3
 8018294:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018296:	687a      	ldr	r2, [r7, #4]
 8018298:	6a3b      	ldr	r3, [r7, #32]
 801829a:	429a      	cmp	r2, r3
 801829c:	f240 80fe 	bls.w	801849c <f_read+0x26c>
 80182a0:	6a3b      	ldr	r3, [r7, #32]
 80182a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80182a4:	e0fa      	b.n	801849c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80182a6:	68fb      	ldr	r3, [r7, #12]
 80182a8:	699b      	ldr	r3, [r3, #24]
 80182aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	f040 80c6 	bne.w	8018440 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80182b4:	68fb      	ldr	r3, [r7, #12]
 80182b6:	699b      	ldr	r3, [r3, #24]
 80182b8:	0a5b      	lsrs	r3, r3, #9
 80182ba:	697a      	ldr	r2, [r7, #20]
 80182bc:	8952      	ldrh	r2, [r2, #10]
 80182be:	3a01      	subs	r2, #1
 80182c0:	4013      	ands	r3, r2
 80182c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80182c4:	69fb      	ldr	r3, [r7, #28]
 80182c6:	2b00      	cmp	r3, #0
 80182c8:	d12f      	bne.n	801832a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80182ca:	68fb      	ldr	r3, [r7, #12]
 80182cc:	699b      	ldr	r3, [r3, #24]
 80182ce:	2b00      	cmp	r3, #0
 80182d0:	d103      	bne.n	80182da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	689b      	ldr	r3, [r3, #8]
 80182d6:	633b      	str	r3, [r7, #48]	; 0x30
 80182d8:	e013      	b.n	8018302 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80182de:	2b00      	cmp	r3, #0
 80182e0:	d007      	beq.n	80182f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	699b      	ldr	r3, [r3, #24]
 80182e6:	4619      	mov	r1, r3
 80182e8:	68f8      	ldr	r0, [r7, #12]
 80182ea:	f7fe fef9 	bl	80170e0 <clmt_clust>
 80182ee:	6338      	str	r0, [r7, #48]	; 0x30
 80182f0:	e007      	b.n	8018302 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80182f2:	68fa      	ldr	r2, [r7, #12]
 80182f4:	68fb      	ldr	r3, [r7, #12]
 80182f6:	69db      	ldr	r3, [r3, #28]
 80182f8:	4619      	mov	r1, r3
 80182fa:	4610      	mov	r0, r2
 80182fc:	f7fe fc67 	bl	8016bce <get_fat>
 8018300:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018304:	2b01      	cmp	r3, #1
 8018306:	d804      	bhi.n	8018312 <f_read+0xe2>
 8018308:	68fb      	ldr	r3, [r7, #12]
 801830a:	2202      	movs	r2, #2
 801830c:	755a      	strb	r2, [r3, #21]
 801830e:	2302      	movs	r3, #2
 8018310:	e0c9      	b.n	80184a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018318:	d104      	bne.n	8018324 <f_read+0xf4>
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	2201      	movs	r2, #1
 801831e:	755a      	strb	r2, [r3, #21]
 8018320:	2301      	movs	r3, #1
 8018322:	e0c0      	b.n	80184a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018324:	68fb      	ldr	r3, [r7, #12]
 8018326:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018328:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801832a:	697a      	ldr	r2, [r7, #20]
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	69db      	ldr	r3, [r3, #28]
 8018330:	4619      	mov	r1, r3
 8018332:	4610      	mov	r0, r2
 8018334:	f7fe fc2c 	bl	8016b90 <clust2sect>
 8018338:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801833a:	69bb      	ldr	r3, [r7, #24]
 801833c:	2b00      	cmp	r3, #0
 801833e:	d104      	bne.n	801834a <f_read+0x11a>
 8018340:	68fb      	ldr	r3, [r7, #12]
 8018342:	2202      	movs	r2, #2
 8018344:	755a      	strb	r2, [r3, #21]
 8018346:	2302      	movs	r3, #2
 8018348:	e0ad      	b.n	80184a6 <f_read+0x276>
			sect += csect;
 801834a:	69ba      	ldr	r2, [r7, #24]
 801834c:	69fb      	ldr	r3, [r7, #28]
 801834e:	4413      	add	r3, r2
 8018350:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018352:	687b      	ldr	r3, [r7, #4]
 8018354:	0a5b      	lsrs	r3, r3, #9
 8018356:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8018358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801835a:	2b00      	cmp	r3, #0
 801835c:	d039      	beq.n	80183d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 801835e:	69fa      	ldr	r2, [r7, #28]
 8018360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018362:	4413      	add	r3, r2
 8018364:	697a      	ldr	r2, [r7, #20]
 8018366:	8952      	ldrh	r2, [r2, #10]
 8018368:	4293      	cmp	r3, r2
 801836a:	d905      	bls.n	8018378 <f_read+0x148>
					cc = fs->csize - csect;
 801836c:	697b      	ldr	r3, [r7, #20]
 801836e:	895b      	ldrh	r3, [r3, #10]
 8018370:	461a      	mov	r2, r3
 8018372:	69fb      	ldr	r3, [r7, #28]
 8018374:	1ad3      	subs	r3, r2, r3
 8018376:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018378:	697b      	ldr	r3, [r7, #20]
 801837a:	7858      	ldrb	r0, [r3, #1]
 801837c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801837e:	69ba      	ldr	r2, [r7, #24]
 8018380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018382:	f7fe f85b 	bl	801643c <disk_read>
 8018386:	4603      	mov	r3, r0
 8018388:	2b00      	cmp	r3, #0
 801838a:	d004      	beq.n	8018396 <f_read+0x166>
 801838c:	68fb      	ldr	r3, [r7, #12]
 801838e:	2201      	movs	r2, #1
 8018390:	755a      	strb	r2, [r3, #21]
 8018392:	2301      	movs	r3, #1
 8018394:	e087      	b.n	80184a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	7d1b      	ldrb	r3, [r3, #20]
 801839a:	b25b      	sxtb	r3, r3
 801839c:	2b00      	cmp	r3, #0
 801839e:	da14      	bge.n	80183ca <f_read+0x19a>
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	6a1a      	ldr	r2, [r3, #32]
 80183a4:	69bb      	ldr	r3, [r7, #24]
 80183a6:	1ad3      	subs	r3, r2, r3
 80183a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80183aa:	429a      	cmp	r2, r3
 80183ac:	d90d      	bls.n	80183ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	6a1a      	ldr	r2, [r3, #32]
 80183b2:	69bb      	ldr	r3, [r7, #24]
 80183b4:	1ad3      	subs	r3, r2, r3
 80183b6:	025b      	lsls	r3, r3, #9
 80183b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80183ba:	18d0      	adds	r0, r2, r3
 80183bc:	68fb      	ldr	r3, [r7, #12]
 80183be:	3330      	adds	r3, #48	; 0x30
 80183c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80183c4:	4619      	mov	r1, r3
 80183c6:	f7fe f919 	bl	80165fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80183ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80183cc:	025b      	lsls	r3, r3, #9
 80183ce:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 80183d0:	e050      	b.n	8018474 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80183d2:	68fb      	ldr	r3, [r7, #12]
 80183d4:	6a1b      	ldr	r3, [r3, #32]
 80183d6:	69ba      	ldr	r2, [r7, #24]
 80183d8:	429a      	cmp	r2, r3
 80183da:	d02e      	beq.n	801843a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80183dc:	68fb      	ldr	r3, [r7, #12]
 80183de:	7d1b      	ldrb	r3, [r3, #20]
 80183e0:	b25b      	sxtb	r3, r3
 80183e2:	2b00      	cmp	r3, #0
 80183e4:	da18      	bge.n	8018418 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80183e6:	697b      	ldr	r3, [r7, #20]
 80183e8:	7858      	ldrb	r0, [r3, #1]
 80183ea:	68fb      	ldr	r3, [r7, #12]
 80183ec:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	6a1a      	ldr	r2, [r3, #32]
 80183f4:	2301      	movs	r3, #1
 80183f6:	f7fe f841 	bl	801647c <disk_write>
 80183fa:	4603      	mov	r3, r0
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	d004      	beq.n	801840a <f_read+0x1da>
 8018400:	68fb      	ldr	r3, [r7, #12]
 8018402:	2201      	movs	r2, #1
 8018404:	755a      	strb	r2, [r3, #21]
 8018406:	2301      	movs	r3, #1
 8018408:	e04d      	b.n	80184a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 801840a:	68fb      	ldr	r3, [r7, #12]
 801840c:	7d1b      	ldrb	r3, [r3, #20]
 801840e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018412:	b2da      	uxtb	r2, r3
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018418:	697b      	ldr	r3, [r7, #20]
 801841a:	7858      	ldrb	r0, [r3, #1]
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018422:	2301      	movs	r3, #1
 8018424:	69ba      	ldr	r2, [r7, #24]
 8018426:	f7fe f809 	bl	801643c <disk_read>
 801842a:	4603      	mov	r3, r0
 801842c:	2b00      	cmp	r3, #0
 801842e:	d004      	beq.n	801843a <f_read+0x20a>
 8018430:	68fb      	ldr	r3, [r7, #12]
 8018432:	2201      	movs	r2, #1
 8018434:	755a      	strb	r2, [r3, #21]
 8018436:	2301      	movs	r3, #1
 8018438:	e035      	b.n	80184a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	69ba      	ldr	r2, [r7, #24]
 801843e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	699b      	ldr	r3, [r3, #24]
 8018444:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018448:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 801844c:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 801844e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018450:	687b      	ldr	r3, [r7, #4]
 8018452:	429a      	cmp	r2, r3
 8018454:	d901      	bls.n	801845a <f_read+0x22a>
 8018456:	687b      	ldr	r3, [r7, #4]
 8018458:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801845a:	68fb      	ldr	r3, [r7, #12]
 801845c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018460:	68fb      	ldr	r3, [r7, #12]
 8018462:	699b      	ldr	r3, [r3, #24]
 8018464:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018468:	4413      	add	r3, r2
 801846a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801846c:	4619      	mov	r1, r3
 801846e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018470:	f7fe f8c4 	bl	80165fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018478:	4413      	add	r3, r2
 801847a:	627b      	str	r3, [r7, #36]	; 0x24
 801847c:	68fb      	ldr	r3, [r7, #12]
 801847e:	699a      	ldr	r2, [r3, #24]
 8018480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018482:	441a      	add	r2, r3
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	619a      	str	r2, [r3, #24]
 8018488:	683b      	ldr	r3, [r7, #0]
 801848a:	681a      	ldr	r2, [r3, #0]
 801848c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801848e:	441a      	add	r2, r3
 8018490:	683b      	ldr	r3, [r7, #0]
 8018492:	601a      	str	r2, [r3, #0]
 8018494:	687a      	ldr	r2, [r7, #4]
 8018496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018498:	1ad3      	subs	r3, r2, r3
 801849a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	2b00      	cmp	r3, #0
 80184a0:	f47f af01 	bne.w	80182a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80184a4:	2300      	movs	r3, #0
}
 80184a6:	4618      	mov	r0, r3
 80184a8:	3738      	adds	r7, #56	; 0x38
 80184aa:	46bd      	mov	sp, r7
 80184ac:	bd80      	pop	{r7, pc}

080184ae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80184ae:	b580      	push	{r7, lr}
 80184b0:	b08c      	sub	sp, #48	; 0x30
 80184b2:	af00      	add	r7, sp, #0
 80184b4:	60f8      	str	r0, [r7, #12]
 80184b6:	60b9      	str	r1, [r7, #8]
 80184b8:	607a      	str	r2, [r7, #4]
 80184ba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80184bc:	68bb      	ldr	r3, [r7, #8]
 80184be:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80184c0:	683b      	ldr	r3, [r7, #0]
 80184c2:	2200      	movs	r2, #0
 80184c4:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80184c6:	68fb      	ldr	r3, [r7, #12]
 80184c8:	f107 0210 	add.w	r2, r7, #16
 80184cc:	4611      	mov	r1, r2
 80184ce:	4618      	mov	r0, r3
 80184d0:	f7ff fc74 	bl	8017dbc <validate>
 80184d4:	4603      	mov	r3, r0
 80184d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80184da:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184de:	2b00      	cmp	r3, #0
 80184e0:	d107      	bne.n	80184f2 <f_write+0x44>
 80184e2:	68fb      	ldr	r3, [r7, #12]
 80184e4:	7d5b      	ldrb	r3, [r3, #21]
 80184e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80184ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d002      	beq.n	80184f8 <f_write+0x4a>
 80184f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80184f6:	e14b      	b.n	8018790 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	7d1b      	ldrb	r3, [r3, #20]
 80184fc:	f003 0302 	and.w	r3, r3, #2
 8018500:	2b00      	cmp	r3, #0
 8018502:	d101      	bne.n	8018508 <f_write+0x5a>
 8018504:	2307      	movs	r3, #7
 8018506:	e143      	b.n	8018790 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018508:	68fb      	ldr	r3, [r7, #12]
 801850a:	699a      	ldr	r2, [r3, #24]
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	441a      	add	r2, r3
 8018510:	68fb      	ldr	r3, [r7, #12]
 8018512:	699b      	ldr	r3, [r3, #24]
 8018514:	429a      	cmp	r2, r3
 8018516:	f080 812d 	bcs.w	8018774 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 801851a:	68fb      	ldr	r3, [r7, #12]
 801851c:	699b      	ldr	r3, [r3, #24]
 801851e:	43db      	mvns	r3, r3
 8018520:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018522:	e127      	b.n	8018774 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	699b      	ldr	r3, [r3, #24]
 8018528:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801852c:	2b00      	cmp	r3, #0
 801852e:	f040 80e3 	bne.w	80186f8 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018532:	68fb      	ldr	r3, [r7, #12]
 8018534:	699b      	ldr	r3, [r3, #24]
 8018536:	0a5b      	lsrs	r3, r3, #9
 8018538:	693a      	ldr	r2, [r7, #16]
 801853a:	8952      	ldrh	r2, [r2, #10]
 801853c:	3a01      	subs	r2, #1
 801853e:	4013      	ands	r3, r2
 8018540:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	2b00      	cmp	r3, #0
 8018546:	d143      	bne.n	80185d0 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	699b      	ldr	r3, [r3, #24]
 801854c:	2b00      	cmp	r3, #0
 801854e:	d10c      	bne.n	801856a <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	689b      	ldr	r3, [r3, #8]
 8018554:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018558:	2b00      	cmp	r3, #0
 801855a:	d11a      	bne.n	8018592 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	2100      	movs	r1, #0
 8018560:	4618      	mov	r0, r3
 8018562:	f7fe fd25 	bl	8016fb0 <create_chain>
 8018566:	62b8      	str	r0, [r7, #40]	; 0x28
 8018568:	e013      	b.n	8018592 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 801856a:	68fb      	ldr	r3, [r7, #12]
 801856c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801856e:	2b00      	cmp	r3, #0
 8018570:	d007      	beq.n	8018582 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018572:	68fb      	ldr	r3, [r7, #12]
 8018574:	699b      	ldr	r3, [r3, #24]
 8018576:	4619      	mov	r1, r3
 8018578:	68f8      	ldr	r0, [r7, #12]
 801857a:	f7fe fdb1 	bl	80170e0 <clmt_clust>
 801857e:	62b8      	str	r0, [r7, #40]	; 0x28
 8018580:	e007      	b.n	8018592 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018582:	68fa      	ldr	r2, [r7, #12]
 8018584:	68fb      	ldr	r3, [r7, #12]
 8018586:	69db      	ldr	r3, [r3, #28]
 8018588:	4619      	mov	r1, r3
 801858a:	4610      	mov	r0, r2
 801858c:	f7fe fd10 	bl	8016fb0 <create_chain>
 8018590:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018594:	2b00      	cmp	r3, #0
 8018596:	f000 80f2 	beq.w	801877e <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 801859a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801859c:	2b01      	cmp	r3, #1
 801859e:	d104      	bne.n	80185aa <f_write+0xfc>
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	2202      	movs	r2, #2
 80185a4:	755a      	strb	r2, [r3, #21]
 80185a6:	2302      	movs	r3, #2
 80185a8:	e0f2      	b.n	8018790 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80185aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80185ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185b0:	d104      	bne.n	80185bc <f_write+0x10e>
 80185b2:	68fb      	ldr	r3, [r7, #12]
 80185b4:	2201      	movs	r2, #1
 80185b6:	755a      	strb	r2, [r3, #21]
 80185b8:	2301      	movs	r3, #1
 80185ba:	e0e9      	b.n	8018790 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80185bc:	68fb      	ldr	r3, [r7, #12]
 80185be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185c0:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80185c2:	68fb      	ldr	r3, [r7, #12]
 80185c4:	689b      	ldr	r3, [r3, #8]
 80185c6:	2b00      	cmp	r3, #0
 80185c8:	d102      	bne.n	80185d0 <f_write+0x122>
 80185ca:	68fb      	ldr	r3, [r7, #12]
 80185cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80185ce:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	7d1b      	ldrb	r3, [r3, #20]
 80185d4:	b25b      	sxtb	r3, r3
 80185d6:	2b00      	cmp	r3, #0
 80185d8:	da18      	bge.n	801860c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80185da:	693b      	ldr	r3, [r7, #16]
 80185dc:	7858      	ldrb	r0, [r3, #1]
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80185e4:	68fb      	ldr	r3, [r7, #12]
 80185e6:	6a1a      	ldr	r2, [r3, #32]
 80185e8:	2301      	movs	r3, #1
 80185ea:	f7fd ff47 	bl	801647c <disk_write>
 80185ee:	4603      	mov	r3, r0
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d004      	beq.n	80185fe <f_write+0x150>
 80185f4:	68fb      	ldr	r3, [r7, #12]
 80185f6:	2201      	movs	r2, #1
 80185f8:	755a      	strb	r2, [r3, #21]
 80185fa:	2301      	movs	r3, #1
 80185fc:	e0c8      	b.n	8018790 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 80185fe:	68fb      	ldr	r3, [r7, #12]
 8018600:	7d1b      	ldrb	r3, [r3, #20]
 8018602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018606:	b2da      	uxtb	r2, r3
 8018608:	68fb      	ldr	r3, [r7, #12]
 801860a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 801860c:	693a      	ldr	r2, [r7, #16]
 801860e:	68fb      	ldr	r3, [r7, #12]
 8018610:	69db      	ldr	r3, [r3, #28]
 8018612:	4619      	mov	r1, r3
 8018614:	4610      	mov	r0, r2
 8018616:	f7fe fabb 	bl	8016b90 <clust2sect>
 801861a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 801861c:	697b      	ldr	r3, [r7, #20]
 801861e:	2b00      	cmp	r3, #0
 8018620:	d104      	bne.n	801862c <f_write+0x17e>
 8018622:	68fb      	ldr	r3, [r7, #12]
 8018624:	2202      	movs	r2, #2
 8018626:	755a      	strb	r2, [r3, #21]
 8018628:	2302      	movs	r3, #2
 801862a:	e0b1      	b.n	8018790 <f_write+0x2e2>
			sect += csect;
 801862c:	697a      	ldr	r2, [r7, #20]
 801862e:	69bb      	ldr	r3, [r7, #24]
 8018630:	4413      	add	r3, r2
 8018632:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	0a5b      	lsrs	r3, r3, #9
 8018638:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 801863a:	6a3b      	ldr	r3, [r7, #32]
 801863c:	2b00      	cmp	r3, #0
 801863e:	d03c      	beq.n	80186ba <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018640:	69ba      	ldr	r2, [r7, #24]
 8018642:	6a3b      	ldr	r3, [r7, #32]
 8018644:	4413      	add	r3, r2
 8018646:	693a      	ldr	r2, [r7, #16]
 8018648:	8952      	ldrh	r2, [r2, #10]
 801864a:	4293      	cmp	r3, r2
 801864c:	d905      	bls.n	801865a <f_write+0x1ac>
					cc = fs->csize - csect;
 801864e:	693b      	ldr	r3, [r7, #16]
 8018650:	895b      	ldrh	r3, [r3, #10]
 8018652:	461a      	mov	r2, r3
 8018654:	69bb      	ldr	r3, [r7, #24]
 8018656:	1ad3      	subs	r3, r2, r3
 8018658:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801865a:	693b      	ldr	r3, [r7, #16]
 801865c:	7858      	ldrb	r0, [r3, #1]
 801865e:	6a3b      	ldr	r3, [r7, #32]
 8018660:	697a      	ldr	r2, [r7, #20]
 8018662:	69f9      	ldr	r1, [r7, #28]
 8018664:	f7fd ff0a 	bl	801647c <disk_write>
 8018668:	4603      	mov	r3, r0
 801866a:	2b00      	cmp	r3, #0
 801866c:	d004      	beq.n	8018678 <f_write+0x1ca>
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	2201      	movs	r2, #1
 8018672:	755a      	strb	r2, [r3, #21]
 8018674:	2301      	movs	r3, #1
 8018676:	e08b      	b.n	8018790 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	6a1a      	ldr	r2, [r3, #32]
 801867c:	697b      	ldr	r3, [r7, #20]
 801867e:	1ad3      	subs	r3, r2, r3
 8018680:	6a3a      	ldr	r2, [r7, #32]
 8018682:	429a      	cmp	r2, r3
 8018684:	d915      	bls.n	80186b2 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	f103 0030 	add.w	r0, r3, #48	; 0x30
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	6a1a      	ldr	r2, [r3, #32]
 8018690:	697b      	ldr	r3, [r7, #20]
 8018692:	1ad3      	subs	r3, r2, r3
 8018694:	025b      	lsls	r3, r3, #9
 8018696:	69fa      	ldr	r2, [r7, #28]
 8018698:	4413      	add	r3, r2
 801869a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801869e:	4619      	mov	r1, r3
 80186a0:	f7fd ffac 	bl	80165fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80186a4:	68fb      	ldr	r3, [r7, #12]
 80186a6:	7d1b      	ldrb	r3, [r3, #20]
 80186a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80186ac:	b2da      	uxtb	r2, r3
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80186b2:	6a3b      	ldr	r3, [r7, #32]
 80186b4:	025b      	lsls	r3, r3, #9
 80186b6:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80186b8:	e03f      	b.n	801873a <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80186ba:	68fb      	ldr	r3, [r7, #12]
 80186bc:	6a1b      	ldr	r3, [r3, #32]
 80186be:	697a      	ldr	r2, [r7, #20]
 80186c0:	429a      	cmp	r2, r3
 80186c2:	d016      	beq.n	80186f2 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 80186c4:	68fb      	ldr	r3, [r7, #12]
 80186c6:	699a      	ldr	r2, [r3, #24]
 80186c8:	68fb      	ldr	r3, [r7, #12]
 80186ca:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80186cc:	429a      	cmp	r2, r3
 80186ce:	d210      	bcs.n	80186f2 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 80186d0:	693b      	ldr	r3, [r7, #16]
 80186d2:	7858      	ldrb	r0, [r3, #1]
 80186d4:	68fb      	ldr	r3, [r7, #12]
 80186d6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80186da:	2301      	movs	r3, #1
 80186dc:	697a      	ldr	r2, [r7, #20]
 80186de:	f7fd fead 	bl	801643c <disk_read>
 80186e2:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d004      	beq.n	80186f2 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	2201      	movs	r2, #1
 80186ec:	755a      	strb	r2, [r3, #21]
 80186ee:	2301      	movs	r3, #1
 80186f0:	e04e      	b.n	8018790 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	697a      	ldr	r2, [r7, #20]
 80186f6:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80186f8:	68fb      	ldr	r3, [r7, #12]
 80186fa:	699b      	ldr	r3, [r3, #24]
 80186fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018700:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018704:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	429a      	cmp	r2, r3
 801870c:	d901      	bls.n	8018712 <f_write+0x264>
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	699b      	ldr	r3, [r3, #24]
 801871c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018720:	4413      	add	r3, r2
 8018722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018724:	69f9      	ldr	r1, [r7, #28]
 8018726:	4618      	mov	r0, r3
 8018728:	f7fd ff68 	bl	80165fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	7d1b      	ldrb	r3, [r3, #20]
 8018730:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018734:	b2da      	uxtb	r2, r3
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 801873a:	69fa      	ldr	r2, [r7, #28]
 801873c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801873e:	4413      	add	r3, r2
 8018740:	61fb      	str	r3, [r7, #28]
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	699a      	ldr	r2, [r3, #24]
 8018746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018748:	441a      	add	r2, r3
 801874a:	68fb      	ldr	r3, [r7, #12]
 801874c:	619a      	str	r2, [r3, #24]
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	68da      	ldr	r2, [r3, #12]
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	699b      	ldr	r3, [r3, #24]
 8018756:	429a      	cmp	r2, r3
 8018758:	bf38      	it	cc
 801875a:	461a      	movcc	r2, r3
 801875c:	68fb      	ldr	r3, [r7, #12]
 801875e:	60da      	str	r2, [r3, #12]
 8018760:	683b      	ldr	r3, [r7, #0]
 8018762:	681a      	ldr	r2, [r3, #0]
 8018764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018766:	441a      	add	r2, r3
 8018768:	683b      	ldr	r3, [r7, #0]
 801876a:	601a      	str	r2, [r3, #0]
 801876c:	687a      	ldr	r2, [r7, #4]
 801876e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018770:	1ad3      	subs	r3, r2, r3
 8018772:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018774:	687b      	ldr	r3, [r7, #4]
 8018776:	2b00      	cmp	r3, #0
 8018778:	f47f aed4 	bne.w	8018524 <f_write+0x76>
 801877c:	e000      	b.n	8018780 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 801877e:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8018780:	68fb      	ldr	r3, [r7, #12]
 8018782:	7d1b      	ldrb	r3, [r3, #20]
 8018784:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018788:	b2da      	uxtb	r2, r3
 801878a:	68fb      	ldr	r3, [r7, #12]
 801878c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801878e:	2300      	movs	r3, #0
}
 8018790:	4618      	mov	r0, r3
 8018792:	3730      	adds	r7, #48	; 0x30
 8018794:	46bd      	mov	sp, r7
 8018796:	bd80      	pop	{r7, pc}

08018798 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8018798:	b580      	push	{r7, lr}
 801879a:	b086      	sub	sp, #24
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80187a0:	687b      	ldr	r3, [r7, #4]
 80187a2:	f107 0208 	add.w	r2, r7, #8
 80187a6:	4611      	mov	r1, r2
 80187a8:	4618      	mov	r0, r3
 80187aa:	f7ff fb07 	bl	8017dbc <validate>
 80187ae:	4603      	mov	r3, r0
 80187b0:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80187b2:	7dfb      	ldrb	r3, [r7, #23]
 80187b4:	2b00      	cmp	r3, #0
 80187b6:	d168      	bne.n	801888a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	7d1b      	ldrb	r3, [r3, #20]
 80187bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80187c0:	2b00      	cmp	r3, #0
 80187c2:	d062      	beq.n	801888a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	7d1b      	ldrb	r3, [r3, #20]
 80187c8:	b25b      	sxtb	r3, r3
 80187ca:	2b00      	cmp	r3, #0
 80187cc:	da15      	bge.n	80187fa <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80187ce:	68bb      	ldr	r3, [r7, #8]
 80187d0:	7858      	ldrb	r0, [r3, #1]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80187d8:	687b      	ldr	r3, [r7, #4]
 80187da:	6a1a      	ldr	r2, [r3, #32]
 80187dc:	2301      	movs	r3, #1
 80187de:	f7fd fe4d 	bl	801647c <disk_write>
 80187e2:	4603      	mov	r3, r0
 80187e4:	2b00      	cmp	r3, #0
 80187e6:	d001      	beq.n	80187ec <f_sync+0x54>
 80187e8:	2301      	movs	r3, #1
 80187ea:	e04f      	b.n	801888c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	7d1b      	ldrb	r3, [r3, #20]
 80187f0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80187f4:	b2da      	uxtb	r2, r3
 80187f6:	687b      	ldr	r3, [r7, #4]
 80187f8:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80187fa:	f7fa fce1 	bl	80131c0 <get_fattime>
 80187fe:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8018800:	68ba      	ldr	r2, [r7, #8]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018806:	4619      	mov	r1, r3
 8018808:	4610      	mov	r0, r2
 801880a:	f7fe f925 	bl	8016a58 <move_window>
 801880e:	4603      	mov	r3, r0
 8018810:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8018812:	7dfb      	ldrb	r3, [r7, #23]
 8018814:	2b00      	cmp	r3, #0
 8018816:	d138      	bne.n	801888a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8018818:	687b      	ldr	r3, [r7, #4]
 801881a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801881c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801881e:	68fb      	ldr	r3, [r7, #12]
 8018820:	330b      	adds	r3, #11
 8018822:	781a      	ldrb	r2, [r3, #0]
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	330b      	adds	r3, #11
 8018828:	f042 0220 	orr.w	r2, r2, #32
 801882c:	b2d2      	uxtb	r2, r2
 801882e:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8018830:	687b      	ldr	r3, [r7, #4]
 8018832:	6818      	ldr	r0, [r3, #0]
 8018834:	687b      	ldr	r3, [r7, #4]
 8018836:	689b      	ldr	r3, [r3, #8]
 8018838:	461a      	mov	r2, r3
 801883a:	68f9      	ldr	r1, [r7, #12]
 801883c:	f7fe fe2a 	bl	8017494 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	f103 021c 	add.w	r2, r3, #28
 8018846:	687b      	ldr	r3, [r7, #4]
 8018848:	68db      	ldr	r3, [r3, #12]
 801884a:	4619      	mov	r1, r3
 801884c:	4610      	mov	r0, r2
 801884e:	f7fd fea9 	bl	80165a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8018852:	68fb      	ldr	r3, [r7, #12]
 8018854:	3316      	adds	r3, #22
 8018856:	6939      	ldr	r1, [r7, #16]
 8018858:	4618      	mov	r0, r3
 801885a:	f7fd fea3 	bl	80165a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 801885e:	68fb      	ldr	r3, [r7, #12]
 8018860:	3312      	adds	r3, #18
 8018862:	2100      	movs	r1, #0
 8018864:	4618      	mov	r0, r3
 8018866:	f7fd fe82 	bl	801656e <st_word>
					fs->wflag = 1;
 801886a:	68bb      	ldr	r3, [r7, #8]
 801886c:	2201      	movs	r2, #1
 801886e:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8018870:	68bb      	ldr	r3, [r7, #8]
 8018872:	4618      	mov	r0, r3
 8018874:	f7fe f91e 	bl	8016ab4 <sync_fs>
 8018878:	4603      	mov	r3, r0
 801887a:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	7d1b      	ldrb	r3, [r3, #20]
 8018880:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8018884:	b2da      	uxtb	r2, r3
 8018886:	687b      	ldr	r3, [r7, #4]
 8018888:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801888a:	7dfb      	ldrb	r3, [r7, #23]
}
 801888c:	4618      	mov	r0, r3
 801888e:	3718      	adds	r7, #24
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}

08018894 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8018894:	b580      	push	{r7, lr}
 8018896:	b084      	sub	sp, #16
 8018898:	af00      	add	r7, sp, #0
 801889a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f7ff ff7b 	bl	8018798 <f_sync>
 80188a2:	4603      	mov	r3, r0
 80188a4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80188a6:	7bfb      	ldrb	r3, [r7, #15]
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d118      	bne.n	80188de <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	f107 0208 	add.w	r2, r7, #8
 80188b2:	4611      	mov	r1, r2
 80188b4:	4618      	mov	r0, r3
 80188b6:	f7ff fa81 	bl	8017dbc <validate>
 80188ba:	4603      	mov	r3, r0
 80188bc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80188be:	7bfb      	ldrb	r3, [r7, #15]
 80188c0:	2b00      	cmp	r3, #0
 80188c2:	d10c      	bne.n	80188de <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 80188c4:	687b      	ldr	r3, [r7, #4]
 80188c6:	691b      	ldr	r3, [r3, #16]
 80188c8:	4618      	mov	r0, r3
 80188ca:	f7fe f821 	bl	8016910 <dec_lock>
 80188ce:	4603      	mov	r3, r0
 80188d0:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80188d2:	7bfb      	ldrb	r3, [r7, #15]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d102      	bne.n	80188de <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	2200      	movs	r2, #0
 80188dc:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80188de:	7bfb      	ldrb	r3, [r7, #15]
}
 80188e0:	4618      	mov	r0, r3
 80188e2:	3710      	adds	r7, #16
 80188e4:	46bd      	mov	sp, r7
 80188e6:	bd80      	pop	{r7, pc}

080188e8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80188e8:	b480      	push	{r7}
 80188ea:	b087      	sub	sp, #28
 80188ec:	af00      	add	r7, sp, #0
 80188ee:	60f8      	str	r0, [r7, #12]
 80188f0:	60b9      	str	r1, [r7, #8]
 80188f2:	4613      	mov	r3, r2
 80188f4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80188f6:	2301      	movs	r3, #1
 80188f8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80188fa:	2300      	movs	r3, #0
 80188fc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80188fe:	4b1f      	ldr	r3, [pc, #124]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018900:	7a5b      	ldrb	r3, [r3, #9]
 8018902:	b2db      	uxtb	r3, r3
 8018904:	2b00      	cmp	r3, #0
 8018906:	d131      	bne.n	801896c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8018908:	4b1c      	ldr	r3, [pc, #112]	; (801897c <FATFS_LinkDriverEx+0x94>)
 801890a:	7a5b      	ldrb	r3, [r3, #9]
 801890c:	b2db      	uxtb	r3, r3
 801890e:	461a      	mov	r2, r3
 8018910:	4b1a      	ldr	r3, [pc, #104]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018912:	2100      	movs	r1, #0
 8018914:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8018916:	4b19      	ldr	r3, [pc, #100]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018918:	7a5b      	ldrb	r3, [r3, #9]
 801891a:	b2db      	uxtb	r3, r3
 801891c:	4a17      	ldr	r2, [pc, #92]	; (801897c <FATFS_LinkDriverEx+0x94>)
 801891e:	009b      	lsls	r3, r3, #2
 8018920:	4413      	add	r3, r2
 8018922:	68fa      	ldr	r2, [r7, #12]
 8018924:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8018926:	4b15      	ldr	r3, [pc, #84]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018928:	7a5b      	ldrb	r3, [r3, #9]
 801892a:	b2db      	uxtb	r3, r3
 801892c:	461a      	mov	r2, r3
 801892e:	4b13      	ldr	r3, [pc, #76]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018930:	4413      	add	r3, r2
 8018932:	79fa      	ldrb	r2, [r7, #7]
 8018934:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8018936:	4b11      	ldr	r3, [pc, #68]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018938:	7a5b      	ldrb	r3, [r3, #9]
 801893a:	b2db      	uxtb	r3, r3
 801893c:	1c5a      	adds	r2, r3, #1
 801893e:	b2d1      	uxtb	r1, r2
 8018940:	4a0e      	ldr	r2, [pc, #56]	; (801897c <FATFS_LinkDriverEx+0x94>)
 8018942:	7251      	strb	r1, [r2, #9]
 8018944:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8018946:	7dbb      	ldrb	r3, [r7, #22]
 8018948:	3330      	adds	r3, #48	; 0x30
 801894a:	b2da      	uxtb	r2, r3
 801894c:	68bb      	ldr	r3, [r7, #8]
 801894e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8018950:	68bb      	ldr	r3, [r7, #8]
 8018952:	3301      	adds	r3, #1
 8018954:	223a      	movs	r2, #58	; 0x3a
 8018956:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8018958:	68bb      	ldr	r3, [r7, #8]
 801895a:	3302      	adds	r3, #2
 801895c:	222f      	movs	r2, #47	; 0x2f
 801895e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8018960:	68bb      	ldr	r3, [r7, #8]
 8018962:	3303      	adds	r3, #3
 8018964:	2200      	movs	r2, #0
 8018966:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8018968:	2300      	movs	r3, #0
 801896a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801896c:	7dfb      	ldrb	r3, [r7, #23]
}
 801896e:	4618      	mov	r0, r3
 8018970:	371c      	adds	r7, #28
 8018972:	46bd      	mov	sp, r7
 8018974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018978:	4770      	bx	lr
 801897a:	bf00      	nop
 801897c:	24000b84 	.word	0x24000b84

08018980 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8018980:	b580      	push	{r7, lr}
 8018982:	b082      	sub	sp, #8
 8018984:	af00      	add	r7, sp, #0
 8018986:	6078      	str	r0, [r7, #4]
 8018988:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801898a:	2200      	movs	r2, #0
 801898c:	6839      	ldr	r1, [r7, #0]
 801898e:	6878      	ldr	r0, [r7, #4]
 8018990:	f7ff ffaa 	bl	80188e8 <FATFS_LinkDriverEx>
 8018994:	4603      	mov	r3, r0
}
 8018996:	4618      	mov	r0, r3
 8018998:	3708      	adds	r7, #8
 801899a:	46bd      	mov	sp, r7
 801899c:	bd80      	pop	{r7, pc}
	...

080189a0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80189a0:	b580      	push	{r7, lr}
 80189a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80189a4:	2200      	movs	r2, #0
 80189a6:	4913      	ldr	r1, [pc, #76]	; (80189f4 <MX_USB_DEVICE_Init+0x54>)
 80189a8:	4813      	ldr	r0, [pc, #76]	; (80189f8 <MX_USB_DEVICE_Init+0x58>)
 80189aa:	f7fc fc20 	bl	80151ee <USBD_Init>
 80189ae:	4603      	mov	r3, r0
 80189b0:	2b00      	cmp	r3, #0
 80189b2:	d001      	beq.n	80189b8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80189b4:	f7eb f8ee 	bl	8003b94 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80189b8:	4910      	ldr	r1, [pc, #64]	; (80189fc <MX_USB_DEVICE_Init+0x5c>)
 80189ba:	480f      	ldr	r0, [pc, #60]	; (80189f8 <MX_USB_DEVICE_Init+0x58>)
 80189bc:	f7fc fc4d 	bl	801525a <USBD_RegisterClass>
 80189c0:	4603      	mov	r3, r0
 80189c2:	2b00      	cmp	r3, #0
 80189c4:	d001      	beq.n	80189ca <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80189c6:	f7eb f8e5 	bl	8003b94 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80189ca:	490d      	ldr	r1, [pc, #52]	; (8018a00 <MX_USB_DEVICE_Init+0x60>)
 80189cc:	480a      	ldr	r0, [pc, #40]	; (80189f8 <MX_USB_DEVICE_Init+0x58>)
 80189ce:	f7fa fff7 	bl	80139c0 <USBD_MSC_RegisterStorage>
 80189d2:	4603      	mov	r3, r0
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d001      	beq.n	80189dc <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80189d8:	f7eb f8dc 	bl	8003b94 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80189dc:	4806      	ldr	r0, [pc, #24]	; (80189f8 <MX_USB_DEVICE_Init+0x58>)
 80189de:	f7fc fc5d 	bl	801529c <USBD_Start>
 80189e2:	4603      	mov	r3, r0
 80189e4:	2b00      	cmp	r3, #0
 80189e6:	d001      	beq.n	80189ec <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80189e8:	f7eb f8d4 	bl	8003b94 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80189ec:	f7f0 fe2e 	bl	800964c <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80189f0:	bf00      	nop
 80189f2:	bd80      	pop	{r7, pc}
 80189f4:	24000108 	.word	0x24000108
 80189f8:	24001bd4 	.word	0x24001bd4
 80189fc:	24000020 	.word	0x24000020
 8018a00:	24000158 	.word	0x24000158

08018a04 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a04:	b480      	push	{r7}
 8018a06:	b083      	sub	sp, #12
 8018a08:	af00      	add	r7, sp, #0
 8018a0a:	4603      	mov	r3, r0
 8018a0c:	6039      	str	r1, [r7, #0]
 8018a0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8018a10:	683b      	ldr	r3, [r7, #0]
 8018a12:	2212      	movs	r2, #18
 8018a14:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8018a16:	4b03      	ldr	r3, [pc, #12]	; (8018a24 <USBD_FS_DeviceDescriptor+0x20>)
}
 8018a18:	4618      	mov	r0, r3
 8018a1a:	370c      	adds	r7, #12
 8018a1c:	46bd      	mov	sp, r7
 8018a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a22:	4770      	bx	lr
 8018a24:	24000124 	.word	0x24000124

08018a28 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a28:	b480      	push	{r7}
 8018a2a:	b083      	sub	sp, #12
 8018a2c:	af00      	add	r7, sp, #0
 8018a2e:	4603      	mov	r3, r0
 8018a30:	6039      	str	r1, [r7, #0]
 8018a32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8018a34:	683b      	ldr	r3, [r7, #0]
 8018a36:	2204      	movs	r2, #4
 8018a38:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8018a3a:	4b03      	ldr	r3, [pc, #12]	; (8018a48 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8018a3c:	4618      	mov	r0, r3
 8018a3e:	370c      	adds	r7, #12
 8018a40:	46bd      	mov	sp, r7
 8018a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a46:	4770      	bx	lr
 8018a48:	24000138 	.word	0x24000138

08018a4c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a4c:	b580      	push	{r7, lr}
 8018a4e:	b082      	sub	sp, #8
 8018a50:	af00      	add	r7, sp, #0
 8018a52:	4603      	mov	r3, r0
 8018a54:	6039      	str	r1, [r7, #0]
 8018a56:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018a58:	79fb      	ldrb	r3, [r7, #7]
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	d105      	bne.n	8018a6a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a5e:	683a      	ldr	r2, [r7, #0]
 8018a60:	4907      	ldr	r1, [pc, #28]	; (8018a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a62:	4808      	ldr	r0, [pc, #32]	; (8018a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8018a64:	f7fd fbe7 	bl	8016236 <USBD_GetString>
 8018a68:	e004      	b.n	8018a74 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8018a6a:	683a      	ldr	r2, [r7, #0]
 8018a6c:	4904      	ldr	r1, [pc, #16]	; (8018a80 <USBD_FS_ProductStrDescriptor+0x34>)
 8018a6e:	4805      	ldr	r0, [pc, #20]	; (8018a84 <USBD_FS_ProductStrDescriptor+0x38>)
 8018a70:	f7fd fbe1 	bl	8016236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018a74:	4b02      	ldr	r3, [pc, #8]	; (8018a80 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	3708      	adds	r7, #8
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	24001ea4 	.word	0x24001ea4
 8018a84:	0801ae90 	.word	0x0801ae90

08018a88 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b082      	sub	sp, #8
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	4603      	mov	r3, r0
 8018a90:	6039      	str	r1, [r7, #0]
 8018a92:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8018a94:	683a      	ldr	r2, [r7, #0]
 8018a96:	4904      	ldr	r1, [pc, #16]	; (8018aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8018a98:	4804      	ldr	r0, [pc, #16]	; (8018aac <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8018a9a:	f7fd fbcc 	bl	8016236 <USBD_GetString>
  return USBD_StrDesc;
 8018a9e:	4b02      	ldr	r3, [pc, #8]	; (8018aa8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8018aa0:	4618      	mov	r0, r3
 8018aa2:	3708      	adds	r7, #8
 8018aa4:	46bd      	mov	sp, r7
 8018aa6:	bd80      	pop	{r7, pc}
 8018aa8:	24001ea4 	.word	0x24001ea4
 8018aac:	0801aea4 	.word	0x0801aea4

08018ab0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b082      	sub	sp, #8
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	4603      	mov	r3, r0
 8018ab8:	6039      	str	r1, [r7, #0]
 8018aba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	221a      	movs	r2, #26
 8018ac0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8018ac2:	f000 f843 	bl	8018b4c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8018ac6:	4b02      	ldr	r3, [pc, #8]	; (8018ad0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8018ac8:	4618      	mov	r0, r3
 8018aca:	3708      	adds	r7, #8
 8018acc:	46bd      	mov	sp, r7
 8018ace:	bd80      	pop	{r7, pc}
 8018ad0:	2400013c 	.word	0x2400013c

08018ad4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018ad4:	b580      	push	{r7, lr}
 8018ad6:	b082      	sub	sp, #8
 8018ad8:	af00      	add	r7, sp, #0
 8018ada:	4603      	mov	r3, r0
 8018adc:	6039      	str	r1, [r7, #0]
 8018ade:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8018ae0:	79fb      	ldrb	r3, [r7, #7]
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d105      	bne.n	8018af2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018ae6:	683a      	ldr	r2, [r7, #0]
 8018ae8:	4907      	ldr	r1, [pc, #28]	; (8018b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018aea:	4808      	ldr	r0, [pc, #32]	; (8018b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018aec:	f7fd fba3 	bl	8016236 <USBD_GetString>
 8018af0:	e004      	b.n	8018afc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8018af2:	683a      	ldr	r2, [r7, #0]
 8018af4:	4904      	ldr	r1, [pc, #16]	; (8018b08 <USBD_FS_ConfigStrDescriptor+0x34>)
 8018af6:	4805      	ldr	r0, [pc, #20]	; (8018b0c <USBD_FS_ConfigStrDescriptor+0x38>)
 8018af8:	f7fd fb9d 	bl	8016236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018afc:	4b02      	ldr	r3, [pc, #8]	; (8018b08 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8018afe:	4618      	mov	r0, r3
 8018b00:	3708      	adds	r7, #8
 8018b02:	46bd      	mov	sp, r7
 8018b04:	bd80      	pop	{r7, pc}
 8018b06:	bf00      	nop
 8018b08:	24001ea4 	.word	0x24001ea4
 8018b0c:	0801aeb8 	.word	0x0801aeb8

08018b10 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8018b10:	b580      	push	{r7, lr}
 8018b12:	b082      	sub	sp, #8
 8018b14:	af00      	add	r7, sp, #0
 8018b16:	4603      	mov	r3, r0
 8018b18:	6039      	str	r1, [r7, #0]
 8018b1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8018b1c:	79fb      	ldrb	r3, [r7, #7]
 8018b1e:	2b00      	cmp	r3, #0
 8018b20:	d105      	bne.n	8018b2e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b22:	683a      	ldr	r2, [r7, #0]
 8018b24:	4907      	ldr	r1, [pc, #28]	; (8018b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b26:	4808      	ldr	r0, [pc, #32]	; (8018b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b28:	f7fd fb85 	bl	8016236 <USBD_GetString>
 8018b2c:	e004      	b.n	8018b38 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8018b2e:	683a      	ldr	r2, [r7, #0]
 8018b30:	4904      	ldr	r1, [pc, #16]	; (8018b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8018b32:	4805      	ldr	r0, [pc, #20]	; (8018b48 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8018b34:	f7fd fb7f 	bl	8016236 <USBD_GetString>
  }
  return USBD_StrDesc;
 8018b38:	4b02      	ldr	r3, [pc, #8]	; (8018b44 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8018b3a:	4618      	mov	r0, r3
 8018b3c:	3708      	adds	r7, #8
 8018b3e:	46bd      	mov	sp, r7
 8018b40:	bd80      	pop	{r7, pc}
 8018b42:	bf00      	nop
 8018b44:	24001ea4 	.word	0x24001ea4
 8018b48:	0801aec4 	.word	0x0801aec4

08018b4c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8018b4c:	b580      	push	{r7, lr}
 8018b4e:	b084      	sub	sp, #16
 8018b50:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8018b52:	4b0f      	ldr	r3, [pc, #60]	; (8018b90 <Get_SerialNum+0x44>)
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8018b58:	4b0e      	ldr	r3, [pc, #56]	; (8018b94 <Get_SerialNum+0x48>)
 8018b5a:	681b      	ldr	r3, [r3, #0]
 8018b5c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8018b5e:	4b0e      	ldr	r3, [pc, #56]	; (8018b98 <Get_SerialNum+0x4c>)
 8018b60:	681b      	ldr	r3, [r3, #0]
 8018b62:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8018b64:	68fa      	ldr	r2, [r7, #12]
 8018b66:	687b      	ldr	r3, [r7, #4]
 8018b68:	4413      	add	r3, r2
 8018b6a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8018b6c:	68fb      	ldr	r3, [r7, #12]
 8018b6e:	2b00      	cmp	r3, #0
 8018b70:	d009      	beq.n	8018b86 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8018b72:	2208      	movs	r2, #8
 8018b74:	4909      	ldr	r1, [pc, #36]	; (8018b9c <Get_SerialNum+0x50>)
 8018b76:	68f8      	ldr	r0, [r7, #12]
 8018b78:	f000 f814 	bl	8018ba4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8018b7c:	2204      	movs	r2, #4
 8018b7e:	4908      	ldr	r1, [pc, #32]	; (8018ba0 <Get_SerialNum+0x54>)
 8018b80:	68b8      	ldr	r0, [r7, #8]
 8018b82:	f000 f80f 	bl	8018ba4 <IntToUnicode>
  }
}
 8018b86:	bf00      	nop
 8018b88:	3710      	adds	r7, #16
 8018b8a:	46bd      	mov	sp, r7
 8018b8c:	bd80      	pop	{r7, pc}
 8018b8e:	bf00      	nop
 8018b90:	1ff1e800 	.word	0x1ff1e800
 8018b94:	1ff1e804 	.word	0x1ff1e804
 8018b98:	1ff1e808 	.word	0x1ff1e808
 8018b9c:	2400013e 	.word	0x2400013e
 8018ba0:	2400014e 	.word	0x2400014e

08018ba4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8018ba4:	b480      	push	{r7}
 8018ba6:	b087      	sub	sp, #28
 8018ba8:	af00      	add	r7, sp, #0
 8018baa:	60f8      	str	r0, [r7, #12]
 8018bac:	60b9      	str	r1, [r7, #8]
 8018bae:	4613      	mov	r3, r2
 8018bb0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8018bb6:	2300      	movs	r3, #0
 8018bb8:	75fb      	strb	r3, [r7, #23]
 8018bba:	e027      	b.n	8018c0c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	0f1b      	lsrs	r3, r3, #28
 8018bc0:	2b09      	cmp	r3, #9
 8018bc2:	d80b      	bhi.n	8018bdc <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8018bc4:	68fb      	ldr	r3, [r7, #12]
 8018bc6:	0f1b      	lsrs	r3, r3, #28
 8018bc8:	b2da      	uxtb	r2, r3
 8018bca:	7dfb      	ldrb	r3, [r7, #23]
 8018bcc:	005b      	lsls	r3, r3, #1
 8018bce:	4619      	mov	r1, r3
 8018bd0:	68bb      	ldr	r3, [r7, #8]
 8018bd2:	440b      	add	r3, r1
 8018bd4:	3230      	adds	r2, #48	; 0x30
 8018bd6:	b2d2      	uxtb	r2, r2
 8018bd8:	701a      	strb	r2, [r3, #0]
 8018bda:	e00a      	b.n	8018bf2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8018bdc:	68fb      	ldr	r3, [r7, #12]
 8018bde:	0f1b      	lsrs	r3, r3, #28
 8018be0:	b2da      	uxtb	r2, r3
 8018be2:	7dfb      	ldrb	r3, [r7, #23]
 8018be4:	005b      	lsls	r3, r3, #1
 8018be6:	4619      	mov	r1, r3
 8018be8:	68bb      	ldr	r3, [r7, #8]
 8018bea:	440b      	add	r3, r1
 8018bec:	3237      	adds	r2, #55	; 0x37
 8018bee:	b2d2      	uxtb	r2, r2
 8018bf0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8018bf2:	68fb      	ldr	r3, [r7, #12]
 8018bf4:	011b      	lsls	r3, r3, #4
 8018bf6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8018bf8:	7dfb      	ldrb	r3, [r7, #23]
 8018bfa:	005b      	lsls	r3, r3, #1
 8018bfc:	3301      	adds	r3, #1
 8018bfe:	68ba      	ldr	r2, [r7, #8]
 8018c00:	4413      	add	r3, r2
 8018c02:	2200      	movs	r2, #0
 8018c04:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8018c06:	7dfb      	ldrb	r3, [r7, #23]
 8018c08:	3301      	adds	r3, #1
 8018c0a:	75fb      	strb	r3, [r7, #23]
 8018c0c:	7dfa      	ldrb	r2, [r7, #23]
 8018c0e:	79fb      	ldrb	r3, [r7, #7]
 8018c10:	429a      	cmp	r2, r3
 8018c12:	d3d3      	bcc.n	8018bbc <IntToUnicode+0x18>
  }
}
 8018c14:	bf00      	nop
 8018c16:	371c      	adds	r7, #28
 8018c18:	46bd      	mov	sp, r7
 8018c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c1e:	4770      	bx	lr

08018c20 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 8018c20:	b480      	push	{r7}
 8018c22:	b083      	sub	sp, #12
 8018c24:	af00      	add	r7, sp, #0
 8018c26:	4603      	mov	r3, r0
 8018c28:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 8018c2a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 8018c2c:	4618      	mov	r0, r3
 8018c2e:	370c      	adds	r7, #12
 8018c30:	46bd      	mov	sp, r7
 8018c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c36:	4770      	bx	lr

08018c38 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8018c38:	b580      	push	{r7, lr}
 8018c3a:	b08e      	sub	sp, #56	; 0x38
 8018c3c:	af00      	add	r7, sp, #0
 8018c3e:	4603      	mov	r3, r0
 8018c40:	60b9      	str	r1, [r7, #8]
 8018c42:	607a      	str	r2, [r7, #4]
 8018c44:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 8018c46:	23ff      	movs	r3, #255	; 0xff
 8018c48:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 8018c4c:	f107 0310 	add.w	r3, r7, #16
 8018c50:	4619      	mov	r1, r3
 8018c52:	480a      	ldr	r0, [pc, #40]	; (8018c7c <STORAGE_GetCapacity_FS+0x44>)
 8018c54:	f7f5 f89a 	bl	800dd8c <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 8018c58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c5a:	1e5a      	subs	r2, r3, #1
 8018c5c:	68bb      	ldr	r3, [r7, #8]
 8018c5e:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 8018c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 8018c68:	2300      	movs	r3, #0
 8018c6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 8018c6e:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 8018c72:	4618      	mov	r0, r3
 8018c74:	3738      	adds	r7, #56	; 0x38
 8018c76:	46bd      	mov	sp, r7
 8018c78:	bd80      	pop	{r7, pc}
 8018c7a:	bf00      	nop
 8018c7c:	24001470 	.word	0x24001470

08018c80 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8018c80:	b480      	push	{r7}
 8018c82:	b083      	sub	sp, #12
 8018c84:	af00      	add	r7, sp, #0
 8018c86:	4603      	mov	r3, r0
 8018c88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8018c8a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	370c      	adds	r7, #12
 8018c90:	46bd      	mov	sp, r7
 8018c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c96:	4770      	bx	lr

08018c98 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8018c98:	b480      	push	{r7}
 8018c9a:	b083      	sub	sp, #12
 8018c9c:	af00      	add	r7, sp, #0
 8018c9e:	4603      	mov	r3, r0
 8018ca0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8018ca2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	370c      	adds	r7, #12
 8018ca8:	46bd      	mov	sp, r7
 8018caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018cae:	4770      	bx	lr

08018cb0 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018cb0:	b580      	push	{r7, lr}
 8018cb2:	b088      	sub	sp, #32
 8018cb4:	af02      	add	r7, sp, #8
 8018cb6:	60b9      	str	r1, [r7, #8]
 8018cb8:	607a      	str	r2, [r7, #4]
 8018cba:	461a      	mov	r2, r3
 8018cbc:	4603      	mov	r3, r0
 8018cbe:	73fb      	strb	r3, [r7, #15]
 8018cc0:	4613      	mov	r3, r2
 8018cc2:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8018cc4:	23ff      	movs	r3, #255	; 0xff
 8018cc6:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018cc8:	89ba      	ldrh	r2, [r7, #12]
 8018cca:	f04f 33ff 	mov.w	r3, #4294967295
 8018cce:	9300      	str	r3, [sp, #0]
 8018cd0:	4613      	mov	r3, r2
 8018cd2:	687a      	ldr	r2, [r7, #4]
 8018cd4:	68b9      	ldr	r1, [r7, #8]
 8018cd6:	4809      	ldr	r0, [pc, #36]	; (8018cfc <STORAGE_Read_FS+0x4c>)
 8018cd8:	f7f3 ffca 	bl	800cc70 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018cdc:	bf00      	nop
 8018cde:	4807      	ldr	r0, [pc, #28]	; (8018cfc <STORAGE_Read_FS+0x4c>)
 8018ce0:	f7f5 f92a 	bl	800df38 <HAL_SD_GetCardState>
 8018ce4:	4603      	mov	r3, r0
 8018ce6:	2b04      	cmp	r3, #4
 8018ce8:	d1f9      	bne.n	8018cde <STORAGE_Read_FS+0x2e>
	ret = 0;
 8018cea:	2300      	movs	r3, #0
 8018cec:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018cee:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8018cf2:	4618      	mov	r0, r3
 8018cf4:	3718      	adds	r7, #24
 8018cf6:	46bd      	mov	sp, r7
 8018cf8:	bd80      	pop	{r7, pc}
 8018cfa:	bf00      	nop
 8018cfc:	24001470 	.word	0x24001470

08018d00 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8018d00:	b580      	push	{r7, lr}
 8018d02:	b088      	sub	sp, #32
 8018d04:	af02      	add	r7, sp, #8
 8018d06:	60b9      	str	r1, [r7, #8]
 8018d08:	607a      	str	r2, [r7, #4]
 8018d0a:	461a      	mov	r2, r3
 8018d0c:	4603      	mov	r3, r0
 8018d0e:	73fb      	strb	r3, [r7, #15]
 8018d10:	4613      	mov	r3, r2
 8018d12:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8018d14:	23ff      	movs	r3, #255	; 0xff
 8018d16:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8018d18:	89ba      	ldrh	r2, [r7, #12]
 8018d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8018d1e:	9300      	str	r3, [sp, #0]
 8018d20:	4613      	mov	r3, r2
 8018d22:	687a      	ldr	r2, [r7, #4]
 8018d24:	68b9      	ldr	r1, [r7, #8]
 8018d26:	4809      	ldr	r0, [pc, #36]	; (8018d4c <STORAGE_Write_FS+0x4c>)
 8018d28:	f7f4 f92c 	bl	800cf84 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 8018d2c:	bf00      	nop
 8018d2e:	4807      	ldr	r0, [pc, #28]	; (8018d4c <STORAGE_Write_FS+0x4c>)
 8018d30:	f7f5 f902 	bl	800df38 <HAL_SD_GetCardState>
 8018d34:	4603      	mov	r3, r0
 8018d36:	2b04      	cmp	r3, #4
 8018d38:	d1f9      	bne.n	8018d2e <STORAGE_Write_FS+0x2e>
	ret = 0;
 8018d3a:	2300      	movs	r3, #0
 8018d3c:	75fb      	strb	r3, [r7, #23]
	return ret;
 8018d3e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 8018d42:	4618      	mov	r0, r3
 8018d44:	3718      	adds	r7, #24
 8018d46:	46bd      	mov	sp, r7
 8018d48:	bd80      	pop	{r7, pc}
 8018d4a:	bf00      	nop
 8018d4c:	24001470 	.word	0x24001470

08018d50 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 8018d50:	b480      	push	{r7}
 8018d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 8018d54:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8018d56:	4618      	mov	r0, r3
 8018d58:	46bd      	mov	sp, r7
 8018d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d5e:	4770      	bx	lr

08018d60 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8018d60:	b580      	push	{r7, lr}
 8018d62:	b08a      	sub	sp, #40	; 0x28
 8018d64:	af00      	add	r7, sp, #0
 8018d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8018d68:	f107 0314 	add.w	r3, r7, #20
 8018d6c:	2200      	movs	r2, #0
 8018d6e:	601a      	str	r2, [r3, #0]
 8018d70:	605a      	str	r2, [r3, #4]
 8018d72:	609a      	str	r2, [r3, #8]
 8018d74:	60da      	str	r2, [r3, #12]
 8018d76:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	4a1e      	ldr	r2, [pc, #120]	; (8018df8 <HAL_PCD_MspInit+0x98>)
 8018d7e:	4293      	cmp	r3, r2
 8018d80:	d136      	bne.n	8018df0 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8018d82:	4b1e      	ldr	r3, [pc, #120]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018d84:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018d88:	4a1c      	ldr	r2, [pc, #112]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018d8a:	f043 0301 	orr.w	r3, r3, #1
 8018d8e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8018d92:	4b1a      	ldr	r3, [pc, #104]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018d94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8018d98:	f003 0301 	and.w	r3, r3, #1
 8018d9c:	613b      	str	r3, [r7, #16]
 8018d9e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8018da0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8018da4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8018da6:	2302      	movs	r3, #2
 8018da8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8018daa:	2300      	movs	r3, #0
 8018dac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8018dae:	2300      	movs	r3, #0
 8018db0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8018db2:	230a      	movs	r3, #10
 8018db4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8018db6:	f107 0314 	add.w	r3, r7, #20
 8018dba:	4619      	mov	r1, r3
 8018dbc:	4810      	ldr	r0, [pc, #64]	; (8018e00 <HAL_PCD_MspInit+0xa0>)
 8018dbe:	f7ee ff2f 	bl	8007c20 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8018dc2:	4b0e      	ldr	r3, [pc, #56]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018dc4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018dc8:	4a0c      	ldr	r2, [pc, #48]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8018dce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8018dd2:	4b0a      	ldr	r3, [pc, #40]	; (8018dfc <HAL_PCD_MspInit+0x9c>)
 8018dd4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8018dd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8018ddc:	60fb      	str	r3, [r7, #12]
 8018dde:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8018de0:	2200      	movs	r2, #0
 8018de2:	2100      	movs	r1, #0
 8018de4:	2065      	movs	r0, #101	; 0x65
 8018de6:	f7eb fcd2 	bl	800478e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8018dea:	2065      	movs	r0, #101	; 0x65
 8018dec:	f7eb fce9 	bl	80047c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8018df0:	bf00      	nop
 8018df2:	3728      	adds	r7, #40	; 0x28
 8018df4:	46bd      	mov	sp, r7
 8018df6:	bd80      	pop	{r7, pc}
 8018df8:	40080000 	.word	0x40080000
 8018dfc:	58024400 	.word	0x58024400
 8018e00:	58020000 	.word	0x58020000

08018e04 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e04:	b580      	push	{r7, lr}
 8018e06:	b082      	sub	sp, #8
 8018e08:	af00      	add	r7, sp, #0
 8018e0a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8018e0c:	687b      	ldr	r3, [r7, #4]
 8018e0e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8018e12:	687b      	ldr	r3, [r7, #4]
 8018e14:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8018e18:	4619      	mov	r1, r3
 8018e1a:	4610      	mov	r0, r2
 8018e1c:	f7fc fa89 	bl	8015332 <USBD_LL_SetupStage>
}
 8018e20:	bf00      	nop
 8018e22:	3708      	adds	r7, #8
 8018e24:	46bd      	mov	sp, r7
 8018e26:	bd80      	pop	{r7, pc}

08018e28 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e28:	b580      	push	{r7, lr}
 8018e2a:	b082      	sub	sp, #8
 8018e2c:	af00      	add	r7, sp, #0
 8018e2e:	6078      	str	r0, [r7, #4]
 8018e30:	460b      	mov	r3, r1
 8018e32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018e3a:	78fa      	ldrb	r2, [r7, #3]
 8018e3c:	6879      	ldr	r1, [r7, #4]
 8018e3e:	4613      	mov	r3, r2
 8018e40:	00db      	lsls	r3, r3, #3
 8018e42:	1a9b      	subs	r3, r3, r2
 8018e44:	009b      	lsls	r3, r3, #2
 8018e46:	440b      	add	r3, r1
 8018e48:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8018e4c:	681a      	ldr	r2, [r3, #0]
 8018e4e:	78fb      	ldrb	r3, [r7, #3]
 8018e50:	4619      	mov	r1, r3
 8018e52:	f7fc fac1 	bl	80153d8 <USBD_LL_DataOutStage>
}
 8018e56:	bf00      	nop
 8018e58:	3708      	adds	r7, #8
 8018e5a:	46bd      	mov	sp, r7
 8018e5c:	bd80      	pop	{r7, pc}

08018e5e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e5e:	b580      	push	{r7, lr}
 8018e60:	b082      	sub	sp, #8
 8018e62:	af00      	add	r7, sp, #0
 8018e64:	6078      	str	r0, [r7, #4]
 8018e66:	460b      	mov	r3, r1
 8018e68:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8018e70:	78fa      	ldrb	r2, [r7, #3]
 8018e72:	6879      	ldr	r1, [r7, #4]
 8018e74:	4613      	mov	r3, r2
 8018e76:	00db      	lsls	r3, r3, #3
 8018e78:	1a9b      	subs	r3, r3, r2
 8018e7a:	009b      	lsls	r3, r3, #2
 8018e7c:	440b      	add	r3, r1
 8018e7e:	3348      	adds	r3, #72	; 0x48
 8018e80:	681a      	ldr	r2, [r3, #0]
 8018e82:	78fb      	ldrb	r3, [r7, #3]
 8018e84:	4619      	mov	r1, r3
 8018e86:	f7fc fb0a 	bl	801549e <USBD_LL_DataInStage>
}
 8018e8a:	bf00      	nop
 8018e8c:	3708      	adds	r7, #8
 8018e8e:	46bd      	mov	sp, r7
 8018e90:	bd80      	pop	{r7, pc}

08018e92 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018e92:	b580      	push	{r7, lr}
 8018e94:	b082      	sub	sp, #8
 8018e96:	af00      	add	r7, sp, #0
 8018e98:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ea0:	4618      	mov	r0, r3
 8018ea2:	f7fc fc0e 	bl	80156c2 <USBD_LL_SOF>
}
 8018ea6:	bf00      	nop
 8018ea8:	3708      	adds	r7, #8
 8018eaa:	46bd      	mov	sp, r7
 8018eac:	bd80      	pop	{r7, pc}

08018eae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018eae:	b580      	push	{r7, lr}
 8018eb0:	b084      	sub	sp, #16
 8018eb2:	af00      	add	r7, sp, #0
 8018eb4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8018eb6:	2301      	movs	r3, #1
 8018eb8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8018eba:	687b      	ldr	r3, [r7, #4]
 8018ebc:	68db      	ldr	r3, [r3, #12]
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d102      	bne.n	8018ec8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8018ec2:	2300      	movs	r3, #0
 8018ec4:	73fb      	strb	r3, [r7, #15]
 8018ec6:	e008      	b.n	8018eda <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	2b02      	cmp	r3, #2
 8018ece:	d102      	bne.n	8018ed6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8018ed0:	2301      	movs	r3, #1
 8018ed2:	73fb      	strb	r3, [r7, #15]
 8018ed4:	e001      	b.n	8018eda <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8018ed6:	f7ea fe5d 	bl	8003b94 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ee0:	7bfa      	ldrb	r2, [r7, #15]
 8018ee2:	4611      	mov	r1, r2
 8018ee4:	4618      	mov	r0, r3
 8018ee6:	f7fc fbb1 	bl	801564c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8018eea:	687b      	ldr	r3, [r7, #4]
 8018eec:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018ef0:	4618      	mov	r0, r3
 8018ef2:	f7fc fb6a 	bl	80155ca <USBD_LL_Reset>
}
 8018ef6:	bf00      	nop
 8018ef8:	3710      	adds	r7, #16
 8018efa:	46bd      	mov	sp, r7
 8018efc:	bd80      	pop	{r7, pc}
	...

08018f00 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b082      	sub	sp, #8
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f0e:	4618      	mov	r0, r3
 8018f10:	f7fc fbac 	bl	801566c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8018f14:	687b      	ldr	r3, [r7, #4]
 8018f16:	681b      	ldr	r3, [r3, #0]
 8018f18:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8018f1c:	681b      	ldr	r3, [r3, #0]
 8018f1e:	687a      	ldr	r2, [r7, #4]
 8018f20:	6812      	ldr	r2, [r2, #0]
 8018f22:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8018f26:	f043 0301 	orr.w	r3, r3, #1
 8018f2a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8018f2c:	687b      	ldr	r3, [r7, #4]
 8018f2e:	6a1b      	ldr	r3, [r3, #32]
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d005      	beq.n	8018f40 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8018f34:	4b04      	ldr	r3, [pc, #16]	; (8018f48 <HAL_PCD_SuspendCallback+0x48>)
 8018f36:	691b      	ldr	r3, [r3, #16]
 8018f38:	4a03      	ldr	r2, [pc, #12]	; (8018f48 <HAL_PCD_SuspendCallback+0x48>)
 8018f3a:	f043 0306 	orr.w	r3, r3, #6
 8018f3e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8018f40:	bf00      	nop
 8018f42:	3708      	adds	r7, #8
 8018f44:	46bd      	mov	sp, r7
 8018f46:	bd80      	pop	{r7, pc}
 8018f48:	e000ed00 	.word	0xe000ed00

08018f4c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f4c:	b580      	push	{r7, lr}
 8018f4e:	b082      	sub	sp, #8
 8018f50:	af00      	add	r7, sp, #0
 8018f52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8018f54:	687b      	ldr	r3, [r7, #4]
 8018f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f5a:	4618      	mov	r0, r3
 8018f5c:	f7fc fb9b 	bl	8015696 <USBD_LL_Resume>
}
 8018f60:	bf00      	nop
 8018f62:	3708      	adds	r7, #8
 8018f64:	46bd      	mov	sp, r7
 8018f66:	bd80      	pop	{r7, pc}

08018f68 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f68:	b580      	push	{r7, lr}
 8018f6a:	b082      	sub	sp, #8
 8018f6c:	af00      	add	r7, sp, #0
 8018f6e:	6078      	str	r0, [r7, #4]
 8018f70:	460b      	mov	r3, r1
 8018f72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f7a:	78fa      	ldrb	r2, [r7, #3]
 8018f7c:	4611      	mov	r1, r2
 8018f7e:	4618      	mov	r0, r3
 8018f80:	f7fc fbc6 	bl	8015710 <USBD_LL_IsoOUTIncomplete>
}
 8018f84:	bf00      	nop
 8018f86:	3708      	adds	r7, #8
 8018f88:	46bd      	mov	sp, r7
 8018f8a:	bd80      	pop	{r7, pc}

08018f8c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018f8c:	b580      	push	{r7, lr}
 8018f8e:	b082      	sub	sp, #8
 8018f90:	af00      	add	r7, sp, #0
 8018f92:	6078      	str	r0, [r7, #4]
 8018f94:	460b      	mov	r3, r1
 8018f96:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018f9e:	78fa      	ldrb	r2, [r7, #3]
 8018fa0:	4611      	mov	r1, r2
 8018fa2:	4618      	mov	r0, r3
 8018fa4:	f7fc fba7 	bl	80156f6 <USBD_LL_IsoINIncomplete>
}
 8018fa8:	bf00      	nop
 8018faa:	3708      	adds	r7, #8
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}

08018fb0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fb0:	b580      	push	{r7, lr}
 8018fb2:	b082      	sub	sp, #8
 8018fb4:	af00      	add	r7, sp, #0
 8018fb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8018fb8:	687b      	ldr	r3, [r7, #4]
 8018fba:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fbe:	4618      	mov	r0, r3
 8018fc0:	f7fc fbb3 	bl	801572a <USBD_LL_DevConnected>
}
 8018fc4:	bf00      	nop
 8018fc6:	3708      	adds	r7, #8
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	bd80      	pop	{r7, pc}

08018fcc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8018fcc:	b580      	push	{r7, lr}
 8018fce:	b082      	sub	sp, #8
 8018fd0:	af00      	add	r7, sp, #0
 8018fd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8018fda:	4618      	mov	r0, r3
 8018fdc:	f7fc fbb0 	bl	8015740 <USBD_LL_DevDisconnected>
}
 8018fe0:	bf00      	nop
 8018fe2:	3708      	adds	r7, #8
 8018fe4:	46bd      	mov	sp, r7
 8018fe6:	bd80      	pop	{r7, pc}

08018fe8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8018fe8:	b580      	push	{r7, lr}
 8018fea:	b082      	sub	sp, #8
 8018fec:	af00      	add	r7, sp, #0
 8018fee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8018ff0:	687b      	ldr	r3, [r7, #4]
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d13e      	bne.n	8019076 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8018ff8:	4a21      	ldr	r2, [pc, #132]	; (8019080 <USBD_LL_Init+0x98>)
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019000:	687b      	ldr	r3, [r7, #4]
 8019002:	4a1f      	ldr	r2, [pc, #124]	; (8019080 <USBD_LL_Init+0x98>)
 8019004:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019008:	4b1d      	ldr	r3, [pc, #116]	; (8019080 <USBD_LL_Init+0x98>)
 801900a:	4a1e      	ldr	r2, [pc, #120]	; (8019084 <USBD_LL_Init+0x9c>)
 801900c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801900e:	4b1c      	ldr	r3, [pc, #112]	; (8019080 <USBD_LL_Init+0x98>)
 8019010:	2209      	movs	r2, #9
 8019012:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019014:	4b1a      	ldr	r3, [pc, #104]	; (8019080 <USBD_LL_Init+0x98>)
 8019016:	2202      	movs	r2, #2
 8019018:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801901a:	4b19      	ldr	r3, [pc, #100]	; (8019080 <USBD_LL_Init+0x98>)
 801901c:	2200      	movs	r2, #0
 801901e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8019020:	4b17      	ldr	r3, [pc, #92]	; (8019080 <USBD_LL_Init+0x98>)
 8019022:	2202      	movs	r2, #2
 8019024:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8019026:	4b16      	ldr	r3, [pc, #88]	; (8019080 <USBD_LL_Init+0x98>)
 8019028:	2200      	movs	r2, #0
 801902a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 801902c:	4b14      	ldr	r3, [pc, #80]	; (8019080 <USBD_LL_Init+0x98>)
 801902e:	2200      	movs	r2, #0
 8019030:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8019032:	4b13      	ldr	r3, [pc, #76]	; (8019080 <USBD_LL_Init+0x98>)
 8019034:	2200      	movs	r2, #0
 8019036:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8019038:	4b11      	ldr	r3, [pc, #68]	; (8019080 <USBD_LL_Init+0x98>)
 801903a:	2200      	movs	r2, #0
 801903c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801903e:	4b10      	ldr	r3, [pc, #64]	; (8019080 <USBD_LL_Init+0x98>)
 8019040:	2200      	movs	r2, #0
 8019042:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8019044:	4b0e      	ldr	r3, [pc, #56]	; (8019080 <USBD_LL_Init+0x98>)
 8019046:	2200      	movs	r2, #0
 8019048:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801904a:	480d      	ldr	r0, [pc, #52]	; (8019080 <USBD_LL_Init+0x98>)
 801904c:	f7ef f822 	bl	8008094 <HAL_PCD_Init>
 8019050:	4603      	mov	r3, r0
 8019052:	2b00      	cmp	r3, #0
 8019054:	d001      	beq.n	801905a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8019056:	f7ea fd9d 	bl	8003b94 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801905a:	2180      	movs	r1, #128	; 0x80
 801905c:	4808      	ldr	r0, [pc, #32]	; (8019080 <USBD_LL_Init+0x98>)
 801905e:	f7f0 f9e0 	bl	8009422 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8019062:	2240      	movs	r2, #64	; 0x40
 8019064:	2100      	movs	r1, #0
 8019066:	4806      	ldr	r0, [pc, #24]	; (8019080 <USBD_LL_Init+0x98>)
 8019068:	f7f0 f994 	bl	8009394 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 801906c:	2280      	movs	r2, #128	; 0x80
 801906e:	2101      	movs	r1, #1
 8019070:	4803      	ldr	r0, [pc, #12]	; (8019080 <USBD_LL_Init+0x98>)
 8019072:	f7f0 f98f 	bl	8009394 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8019076:	2300      	movs	r3, #0
}
 8019078:	4618      	mov	r0, r3
 801907a:	3708      	adds	r7, #8
 801907c:	46bd      	mov	sp, r7
 801907e:	bd80      	pop	{r7, pc}
 8019080:	240020a4 	.word	0x240020a4
 8019084:	40080000 	.word	0x40080000

08019088 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b084      	sub	sp, #16
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019090:	2300      	movs	r3, #0
 8019092:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019094:	2300      	movs	r3, #0
 8019096:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801909e:	4618      	mov	r0, r3
 80190a0:	f7ef f91c 	bl	80082dc <HAL_PCD_Start>
 80190a4:	4603      	mov	r3, r0
 80190a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190a8:	7bfb      	ldrb	r3, [r7, #15]
 80190aa:	4618      	mov	r0, r3
 80190ac:	f000 f94a 	bl	8019344 <USBD_Get_USB_Status>
 80190b0:	4603      	mov	r3, r0
 80190b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80190b4:	7bbb      	ldrb	r3, [r7, #14]
}
 80190b6:	4618      	mov	r0, r3
 80190b8:	3710      	adds	r7, #16
 80190ba:	46bd      	mov	sp, r7
 80190bc:	bd80      	pop	{r7, pc}

080190be <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80190be:	b580      	push	{r7, lr}
 80190c0:	b084      	sub	sp, #16
 80190c2:	af00      	add	r7, sp, #0
 80190c4:	6078      	str	r0, [r7, #4]
 80190c6:	4608      	mov	r0, r1
 80190c8:	4611      	mov	r1, r2
 80190ca:	461a      	mov	r2, r3
 80190cc:	4603      	mov	r3, r0
 80190ce:	70fb      	strb	r3, [r7, #3]
 80190d0:	460b      	mov	r3, r1
 80190d2:	70bb      	strb	r3, [r7, #2]
 80190d4:	4613      	mov	r3, r2
 80190d6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80190d8:	2300      	movs	r3, #0
 80190da:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80190dc:	2300      	movs	r3, #0
 80190de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80190e0:	687b      	ldr	r3, [r7, #4]
 80190e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80190e6:	78bb      	ldrb	r3, [r7, #2]
 80190e8:	883a      	ldrh	r2, [r7, #0]
 80190ea:	78f9      	ldrb	r1, [r7, #3]
 80190ec:	f7ef fd2d 	bl	8008b4a <HAL_PCD_EP_Open>
 80190f0:	4603      	mov	r3, r0
 80190f2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80190f4:	7bfb      	ldrb	r3, [r7, #15]
 80190f6:	4618      	mov	r0, r3
 80190f8:	f000 f924 	bl	8019344 <USBD_Get_USB_Status>
 80190fc:	4603      	mov	r3, r0
 80190fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019100:	7bbb      	ldrb	r3, [r7, #14]
}
 8019102:	4618      	mov	r0, r3
 8019104:	3710      	adds	r7, #16
 8019106:	46bd      	mov	sp, r7
 8019108:	bd80      	pop	{r7, pc}

0801910a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801910a:	b580      	push	{r7, lr}
 801910c:	b084      	sub	sp, #16
 801910e:	af00      	add	r7, sp, #0
 8019110:	6078      	str	r0, [r7, #4]
 8019112:	460b      	mov	r3, r1
 8019114:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019116:	2300      	movs	r3, #0
 8019118:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801911a:	2300      	movs	r3, #0
 801911c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801911e:	687b      	ldr	r3, [r7, #4]
 8019120:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019124:	78fa      	ldrb	r2, [r7, #3]
 8019126:	4611      	mov	r1, r2
 8019128:	4618      	mov	r0, r3
 801912a:	f7ef fd76 	bl	8008c1a <HAL_PCD_EP_Close>
 801912e:	4603      	mov	r3, r0
 8019130:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019132:	7bfb      	ldrb	r3, [r7, #15]
 8019134:	4618      	mov	r0, r3
 8019136:	f000 f905 	bl	8019344 <USBD_Get_USB_Status>
 801913a:	4603      	mov	r3, r0
 801913c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801913e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019140:	4618      	mov	r0, r3
 8019142:	3710      	adds	r7, #16
 8019144:	46bd      	mov	sp, r7
 8019146:	bd80      	pop	{r7, pc}

08019148 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019148:	b580      	push	{r7, lr}
 801914a:	b084      	sub	sp, #16
 801914c:	af00      	add	r7, sp, #0
 801914e:	6078      	str	r0, [r7, #4]
 8019150:	460b      	mov	r3, r1
 8019152:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019154:	2300      	movs	r3, #0
 8019156:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019158:	2300      	movs	r3, #0
 801915a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019162:	78fa      	ldrb	r2, [r7, #3]
 8019164:	4611      	mov	r1, r2
 8019166:	4618      	mov	r0, r3
 8019168:	f7ef ff08 	bl	8008f7c <HAL_PCD_EP_Flush>
 801916c:	4603      	mov	r3, r0
 801916e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019170:	7bfb      	ldrb	r3, [r7, #15]
 8019172:	4618      	mov	r0, r3
 8019174:	f000 f8e6 	bl	8019344 <USBD_Get_USB_Status>
 8019178:	4603      	mov	r3, r0
 801917a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801917c:	7bbb      	ldrb	r3, [r7, #14]
}
 801917e:	4618      	mov	r0, r3
 8019180:	3710      	adds	r7, #16
 8019182:	46bd      	mov	sp, r7
 8019184:	bd80      	pop	{r7, pc}

08019186 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019186:	b580      	push	{r7, lr}
 8019188:	b084      	sub	sp, #16
 801918a:	af00      	add	r7, sp, #0
 801918c:	6078      	str	r0, [r7, #4]
 801918e:	460b      	mov	r3, r1
 8019190:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019192:	2300      	movs	r3, #0
 8019194:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019196:	2300      	movs	r3, #0
 8019198:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801919a:	687b      	ldr	r3, [r7, #4]
 801919c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191a0:	78fa      	ldrb	r2, [r7, #3]
 80191a2:	4611      	mov	r1, r2
 80191a4:	4618      	mov	r0, r3
 80191a6:	f7ef fe2f 	bl	8008e08 <HAL_PCD_EP_SetStall>
 80191aa:	4603      	mov	r3, r0
 80191ac:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191ae:	7bfb      	ldrb	r3, [r7, #15]
 80191b0:	4618      	mov	r0, r3
 80191b2:	f000 f8c7 	bl	8019344 <USBD_Get_USB_Status>
 80191b6:	4603      	mov	r3, r0
 80191b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191ba:	7bbb      	ldrb	r3, [r7, #14]
}
 80191bc:	4618      	mov	r0, r3
 80191be:	3710      	adds	r7, #16
 80191c0:	46bd      	mov	sp, r7
 80191c2:	bd80      	pop	{r7, pc}

080191c4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80191c4:	b580      	push	{r7, lr}
 80191c6:	b084      	sub	sp, #16
 80191c8:	af00      	add	r7, sp, #0
 80191ca:	6078      	str	r0, [r7, #4]
 80191cc:	460b      	mov	r3, r1
 80191ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80191d0:	2300      	movs	r3, #0
 80191d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80191d4:	2300      	movs	r3, #0
 80191d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80191de:	78fa      	ldrb	r2, [r7, #3]
 80191e0:	4611      	mov	r1, r2
 80191e2:	4618      	mov	r0, r3
 80191e4:	f7ef fe74 	bl	8008ed0 <HAL_PCD_EP_ClrStall>
 80191e8:	4603      	mov	r3, r0
 80191ea:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80191ec:	7bfb      	ldrb	r3, [r7, #15]
 80191ee:	4618      	mov	r0, r3
 80191f0:	f000 f8a8 	bl	8019344 <USBD_Get_USB_Status>
 80191f4:	4603      	mov	r3, r0
 80191f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80191f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80191fa:	4618      	mov	r0, r3
 80191fc:	3710      	adds	r7, #16
 80191fe:	46bd      	mov	sp, r7
 8019200:	bd80      	pop	{r7, pc}

08019202 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019202:	b480      	push	{r7}
 8019204:	b085      	sub	sp, #20
 8019206:	af00      	add	r7, sp, #0
 8019208:	6078      	str	r0, [r7, #4]
 801920a:	460b      	mov	r3, r1
 801920c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019214:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019216:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801921a:	2b00      	cmp	r3, #0
 801921c:	da0b      	bge.n	8019236 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 801921e:	78fb      	ldrb	r3, [r7, #3]
 8019220:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019224:	68f9      	ldr	r1, [r7, #12]
 8019226:	4613      	mov	r3, r2
 8019228:	00db      	lsls	r3, r3, #3
 801922a:	1a9b      	subs	r3, r3, r2
 801922c:	009b      	lsls	r3, r3, #2
 801922e:	440b      	add	r3, r1
 8019230:	333e      	adds	r3, #62	; 0x3e
 8019232:	781b      	ldrb	r3, [r3, #0]
 8019234:	e00b      	b.n	801924e <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019236:	78fb      	ldrb	r3, [r7, #3]
 8019238:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801923c:	68f9      	ldr	r1, [r7, #12]
 801923e:	4613      	mov	r3, r2
 8019240:	00db      	lsls	r3, r3, #3
 8019242:	1a9b      	subs	r3, r3, r2
 8019244:	009b      	lsls	r3, r3, #2
 8019246:	440b      	add	r3, r1
 8019248:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801924c:	781b      	ldrb	r3, [r3, #0]
  }
}
 801924e:	4618      	mov	r0, r3
 8019250:	3714      	adds	r7, #20
 8019252:	46bd      	mov	sp, r7
 8019254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019258:	4770      	bx	lr

0801925a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801925a:	b580      	push	{r7, lr}
 801925c:	b084      	sub	sp, #16
 801925e:	af00      	add	r7, sp, #0
 8019260:	6078      	str	r0, [r7, #4]
 8019262:	460b      	mov	r3, r1
 8019264:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019266:	2300      	movs	r3, #0
 8019268:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801926a:	2300      	movs	r3, #0
 801926c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801926e:	687b      	ldr	r3, [r7, #4]
 8019270:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019274:	78fa      	ldrb	r2, [r7, #3]
 8019276:	4611      	mov	r1, r2
 8019278:	4618      	mov	r0, r3
 801927a:	f7ef fc41 	bl	8008b00 <HAL_PCD_SetAddress>
 801927e:	4603      	mov	r3, r0
 8019280:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019282:	7bfb      	ldrb	r3, [r7, #15]
 8019284:	4618      	mov	r0, r3
 8019286:	f000 f85d 	bl	8019344 <USBD_Get_USB_Status>
 801928a:	4603      	mov	r3, r0
 801928c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801928e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019290:	4618      	mov	r0, r3
 8019292:	3710      	adds	r7, #16
 8019294:	46bd      	mov	sp, r7
 8019296:	bd80      	pop	{r7, pc}

08019298 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	b086      	sub	sp, #24
 801929c:	af00      	add	r7, sp, #0
 801929e:	60f8      	str	r0, [r7, #12]
 80192a0:	607a      	str	r2, [r7, #4]
 80192a2:	603b      	str	r3, [r7, #0]
 80192a4:	460b      	mov	r3, r1
 80192a6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192a8:	2300      	movs	r3, #0
 80192aa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80192b0:	68fb      	ldr	r3, [r7, #12]
 80192b2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192b6:	7af9      	ldrb	r1, [r7, #11]
 80192b8:	683b      	ldr	r3, [r7, #0]
 80192ba:	687a      	ldr	r2, [r7, #4]
 80192bc:	f7ef fd5a 	bl	8008d74 <HAL_PCD_EP_Transmit>
 80192c0:	4603      	mov	r3, r0
 80192c2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80192c4:	7dfb      	ldrb	r3, [r7, #23]
 80192c6:	4618      	mov	r0, r3
 80192c8:	f000 f83c 	bl	8019344 <USBD_Get_USB_Status>
 80192cc:	4603      	mov	r3, r0
 80192ce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80192d0:	7dbb      	ldrb	r3, [r7, #22]
}
 80192d2:	4618      	mov	r0, r3
 80192d4:	3718      	adds	r7, #24
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}

080192da <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80192da:	b580      	push	{r7, lr}
 80192dc:	b086      	sub	sp, #24
 80192de:	af00      	add	r7, sp, #0
 80192e0:	60f8      	str	r0, [r7, #12]
 80192e2:	607a      	str	r2, [r7, #4]
 80192e4:	603b      	str	r3, [r7, #0]
 80192e6:	460b      	mov	r3, r1
 80192e8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80192ea:	2300      	movs	r3, #0
 80192ec:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80192ee:	2300      	movs	r3, #0
 80192f0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80192f2:	68fb      	ldr	r3, [r7, #12]
 80192f4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80192f8:	7af9      	ldrb	r1, [r7, #11]
 80192fa:	683b      	ldr	r3, [r7, #0]
 80192fc:	687a      	ldr	r2, [r7, #4]
 80192fe:	f7ef fcd6 	bl	8008cae <HAL_PCD_EP_Receive>
 8019302:	4603      	mov	r3, r0
 8019304:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019306:	7dfb      	ldrb	r3, [r7, #23]
 8019308:	4618      	mov	r0, r3
 801930a:	f000 f81b 	bl	8019344 <USBD_Get_USB_Status>
 801930e:	4603      	mov	r3, r0
 8019310:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019312:	7dbb      	ldrb	r3, [r7, #22]
}
 8019314:	4618      	mov	r0, r3
 8019316:	3718      	adds	r7, #24
 8019318:	46bd      	mov	sp, r7
 801931a:	bd80      	pop	{r7, pc}

0801931c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801931c:	b580      	push	{r7, lr}
 801931e:	b082      	sub	sp, #8
 8019320:	af00      	add	r7, sp, #0
 8019322:	6078      	str	r0, [r7, #4]
 8019324:	460b      	mov	r3, r1
 8019326:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019328:	687b      	ldr	r3, [r7, #4]
 801932a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801932e:	78fa      	ldrb	r2, [r7, #3]
 8019330:	4611      	mov	r1, r2
 8019332:	4618      	mov	r0, r3
 8019334:	f7ef fd06 	bl	8008d44 <HAL_PCD_EP_GetRxCount>
 8019338:	4603      	mov	r3, r0
}
 801933a:	4618      	mov	r0, r3
 801933c:	3708      	adds	r7, #8
 801933e:	46bd      	mov	sp, r7
 8019340:	bd80      	pop	{r7, pc}
	...

08019344 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019344:	b480      	push	{r7}
 8019346:	b085      	sub	sp, #20
 8019348:	af00      	add	r7, sp, #0
 801934a:	4603      	mov	r3, r0
 801934c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801934e:	2300      	movs	r3, #0
 8019350:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019352:	79fb      	ldrb	r3, [r7, #7]
 8019354:	2b03      	cmp	r3, #3
 8019356:	d817      	bhi.n	8019388 <USBD_Get_USB_Status+0x44>
 8019358:	a201      	add	r2, pc, #4	; (adr r2, 8019360 <USBD_Get_USB_Status+0x1c>)
 801935a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801935e:	bf00      	nop
 8019360:	08019371 	.word	0x08019371
 8019364:	08019377 	.word	0x08019377
 8019368:	0801937d 	.word	0x0801937d
 801936c:	08019383 	.word	0x08019383
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019370:	2300      	movs	r3, #0
 8019372:	73fb      	strb	r3, [r7, #15]
    break;
 8019374:	e00b      	b.n	801938e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019376:	2303      	movs	r3, #3
 8019378:	73fb      	strb	r3, [r7, #15]
    break;
 801937a:	e008      	b.n	801938e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801937c:	2301      	movs	r3, #1
 801937e:	73fb      	strb	r3, [r7, #15]
    break;
 8019380:	e005      	b.n	801938e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019382:	2303      	movs	r3, #3
 8019384:	73fb      	strb	r3, [r7, #15]
    break;
 8019386:	e002      	b.n	801938e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019388:	2303      	movs	r3, #3
 801938a:	73fb      	strb	r3, [r7, #15]
    break;
 801938c:	bf00      	nop
  }
  return usb_status;
 801938e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019390:	4618      	mov	r0, r3
 8019392:	3714      	adds	r7, #20
 8019394:	46bd      	mov	sp, r7
 8019396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801939a:	4770      	bx	lr

0801939c <__errno>:
 801939c:	4b01      	ldr	r3, [pc, #4]	; (80193a4 <__errno+0x8>)
 801939e:	6818      	ldr	r0, [r3, #0]
 80193a0:	4770      	bx	lr
 80193a2:	bf00      	nop
 80193a4:	24000178 	.word	0x24000178

080193a8 <__libc_init_array>:
 80193a8:	b570      	push	{r4, r5, r6, lr}
 80193aa:	4e0d      	ldr	r6, [pc, #52]	; (80193e0 <__libc_init_array+0x38>)
 80193ac:	4c0d      	ldr	r4, [pc, #52]	; (80193e4 <__libc_init_array+0x3c>)
 80193ae:	1ba4      	subs	r4, r4, r6
 80193b0:	10a4      	asrs	r4, r4, #2
 80193b2:	2500      	movs	r5, #0
 80193b4:	42a5      	cmp	r5, r4
 80193b6:	d109      	bne.n	80193cc <__libc_init_array+0x24>
 80193b8:	4e0b      	ldr	r6, [pc, #44]	; (80193e8 <__libc_init_array+0x40>)
 80193ba:	4c0c      	ldr	r4, [pc, #48]	; (80193ec <__libc_init_array+0x44>)
 80193bc:	f001 f97a 	bl	801a6b4 <_init>
 80193c0:	1ba4      	subs	r4, r4, r6
 80193c2:	10a4      	asrs	r4, r4, #2
 80193c4:	2500      	movs	r5, #0
 80193c6:	42a5      	cmp	r5, r4
 80193c8:	d105      	bne.n	80193d6 <__libc_init_array+0x2e>
 80193ca:	bd70      	pop	{r4, r5, r6, pc}
 80193cc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80193d0:	4798      	blx	r3
 80193d2:	3501      	adds	r5, #1
 80193d4:	e7ee      	b.n	80193b4 <__libc_init_array+0xc>
 80193d6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80193da:	4798      	blx	r3
 80193dc:	3501      	adds	r5, #1
 80193de:	e7f2      	b.n	80193c6 <__libc_init_array+0x1e>
 80193e0:	0801b06c 	.word	0x0801b06c
 80193e4:	0801b06c 	.word	0x0801b06c
 80193e8:	0801b06c 	.word	0x0801b06c
 80193ec:	0801b070 	.word	0x0801b070

080193f0 <malloc>:
 80193f0:	4b02      	ldr	r3, [pc, #8]	; (80193fc <malloc+0xc>)
 80193f2:	4601      	mov	r1, r0
 80193f4:	6818      	ldr	r0, [r3, #0]
 80193f6:	f000 b86d 	b.w	80194d4 <_malloc_r>
 80193fa:	bf00      	nop
 80193fc:	24000178 	.word	0x24000178

08019400 <free>:
 8019400:	4b02      	ldr	r3, [pc, #8]	; (801940c <free+0xc>)
 8019402:	4601      	mov	r1, r0
 8019404:	6818      	ldr	r0, [r3, #0]
 8019406:	f000 b817 	b.w	8019438 <_free_r>
 801940a:	bf00      	nop
 801940c:	24000178 	.word	0x24000178

08019410 <memcpy>:
 8019410:	b510      	push	{r4, lr}
 8019412:	1e43      	subs	r3, r0, #1
 8019414:	440a      	add	r2, r1
 8019416:	4291      	cmp	r1, r2
 8019418:	d100      	bne.n	801941c <memcpy+0xc>
 801941a:	bd10      	pop	{r4, pc}
 801941c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8019420:	f803 4f01 	strb.w	r4, [r3, #1]!
 8019424:	e7f7      	b.n	8019416 <memcpy+0x6>

08019426 <memset>:
 8019426:	4402      	add	r2, r0
 8019428:	4603      	mov	r3, r0
 801942a:	4293      	cmp	r3, r2
 801942c:	d100      	bne.n	8019430 <memset+0xa>
 801942e:	4770      	bx	lr
 8019430:	f803 1b01 	strb.w	r1, [r3], #1
 8019434:	e7f9      	b.n	801942a <memset+0x4>
	...

08019438 <_free_r>:
 8019438:	b538      	push	{r3, r4, r5, lr}
 801943a:	4605      	mov	r5, r0
 801943c:	2900      	cmp	r1, #0
 801943e:	d045      	beq.n	80194cc <_free_r+0x94>
 8019440:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019444:	1f0c      	subs	r4, r1, #4
 8019446:	2b00      	cmp	r3, #0
 8019448:	bfb8      	it	lt
 801944a:	18e4      	addlt	r4, r4, r3
 801944c:	f000 fc22 	bl	8019c94 <__malloc_lock>
 8019450:	4a1f      	ldr	r2, [pc, #124]	; (80194d0 <_free_r+0x98>)
 8019452:	6813      	ldr	r3, [r2, #0]
 8019454:	4610      	mov	r0, r2
 8019456:	b933      	cbnz	r3, 8019466 <_free_r+0x2e>
 8019458:	6063      	str	r3, [r4, #4]
 801945a:	6014      	str	r4, [r2, #0]
 801945c:	4628      	mov	r0, r5
 801945e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019462:	f000 bc18 	b.w	8019c96 <__malloc_unlock>
 8019466:	42a3      	cmp	r3, r4
 8019468:	d90c      	bls.n	8019484 <_free_r+0x4c>
 801946a:	6821      	ldr	r1, [r4, #0]
 801946c:	1862      	adds	r2, r4, r1
 801946e:	4293      	cmp	r3, r2
 8019470:	bf04      	itt	eq
 8019472:	681a      	ldreq	r2, [r3, #0]
 8019474:	685b      	ldreq	r3, [r3, #4]
 8019476:	6063      	str	r3, [r4, #4]
 8019478:	bf04      	itt	eq
 801947a:	1852      	addeq	r2, r2, r1
 801947c:	6022      	streq	r2, [r4, #0]
 801947e:	6004      	str	r4, [r0, #0]
 8019480:	e7ec      	b.n	801945c <_free_r+0x24>
 8019482:	4613      	mov	r3, r2
 8019484:	685a      	ldr	r2, [r3, #4]
 8019486:	b10a      	cbz	r2, 801948c <_free_r+0x54>
 8019488:	42a2      	cmp	r2, r4
 801948a:	d9fa      	bls.n	8019482 <_free_r+0x4a>
 801948c:	6819      	ldr	r1, [r3, #0]
 801948e:	1858      	adds	r0, r3, r1
 8019490:	42a0      	cmp	r0, r4
 8019492:	d10b      	bne.n	80194ac <_free_r+0x74>
 8019494:	6820      	ldr	r0, [r4, #0]
 8019496:	4401      	add	r1, r0
 8019498:	1858      	adds	r0, r3, r1
 801949a:	4282      	cmp	r2, r0
 801949c:	6019      	str	r1, [r3, #0]
 801949e:	d1dd      	bne.n	801945c <_free_r+0x24>
 80194a0:	6810      	ldr	r0, [r2, #0]
 80194a2:	6852      	ldr	r2, [r2, #4]
 80194a4:	605a      	str	r2, [r3, #4]
 80194a6:	4401      	add	r1, r0
 80194a8:	6019      	str	r1, [r3, #0]
 80194aa:	e7d7      	b.n	801945c <_free_r+0x24>
 80194ac:	d902      	bls.n	80194b4 <_free_r+0x7c>
 80194ae:	230c      	movs	r3, #12
 80194b0:	602b      	str	r3, [r5, #0]
 80194b2:	e7d3      	b.n	801945c <_free_r+0x24>
 80194b4:	6820      	ldr	r0, [r4, #0]
 80194b6:	1821      	adds	r1, r4, r0
 80194b8:	428a      	cmp	r2, r1
 80194ba:	bf04      	itt	eq
 80194bc:	6811      	ldreq	r1, [r2, #0]
 80194be:	6852      	ldreq	r2, [r2, #4]
 80194c0:	6062      	str	r2, [r4, #4]
 80194c2:	bf04      	itt	eq
 80194c4:	1809      	addeq	r1, r1, r0
 80194c6:	6021      	streq	r1, [r4, #0]
 80194c8:	605c      	str	r4, [r3, #4]
 80194ca:	e7c7      	b.n	801945c <_free_r+0x24>
 80194cc:	bd38      	pop	{r3, r4, r5, pc}
 80194ce:	bf00      	nop
 80194d0:	24000b90 	.word	0x24000b90

080194d4 <_malloc_r>:
 80194d4:	b570      	push	{r4, r5, r6, lr}
 80194d6:	1ccd      	adds	r5, r1, #3
 80194d8:	f025 0503 	bic.w	r5, r5, #3
 80194dc:	3508      	adds	r5, #8
 80194de:	2d0c      	cmp	r5, #12
 80194e0:	bf38      	it	cc
 80194e2:	250c      	movcc	r5, #12
 80194e4:	2d00      	cmp	r5, #0
 80194e6:	4606      	mov	r6, r0
 80194e8:	db01      	blt.n	80194ee <_malloc_r+0x1a>
 80194ea:	42a9      	cmp	r1, r5
 80194ec:	d903      	bls.n	80194f6 <_malloc_r+0x22>
 80194ee:	230c      	movs	r3, #12
 80194f0:	6033      	str	r3, [r6, #0]
 80194f2:	2000      	movs	r0, #0
 80194f4:	bd70      	pop	{r4, r5, r6, pc}
 80194f6:	f000 fbcd 	bl	8019c94 <__malloc_lock>
 80194fa:	4a21      	ldr	r2, [pc, #132]	; (8019580 <_malloc_r+0xac>)
 80194fc:	6814      	ldr	r4, [r2, #0]
 80194fe:	4621      	mov	r1, r4
 8019500:	b991      	cbnz	r1, 8019528 <_malloc_r+0x54>
 8019502:	4c20      	ldr	r4, [pc, #128]	; (8019584 <_malloc_r+0xb0>)
 8019504:	6823      	ldr	r3, [r4, #0]
 8019506:	b91b      	cbnz	r3, 8019510 <_malloc_r+0x3c>
 8019508:	4630      	mov	r0, r6
 801950a:	f000 f8b9 	bl	8019680 <_sbrk_r>
 801950e:	6020      	str	r0, [r4, #0]
 8019510:	4629      	mov	r1, r5
 8019512:	4630      	mov	r0, r6
 8019514:	f000 f8b4 	bl	8019680 <_sbrk_r>
 8019518:	1c43      	adds	r3, r0, #1
 801951a:	d124      	bne.n	8019566 <_malloc_r+0x92>
 801951c:	230c      	movs	r3, #12
 801951e:	6033      	str	r3, [r6, #0]
 8019520:	4630      	mov	r0, r6
 8019522:	f000 fbb8 	bl	8019c96 <__malloc_unlock>
 8019526:	e7e4      	b.n	80194f2 <_malloc_r+0x1e>
 8019528:	680b      	ldr	r3, [r1, #0]
 801952a:	1b5b      	subs	r3, r3, r5
 801952c:	d418      	bmi.n	8019560 <_malloc_r+0x8c>
 801952e:	2b0b      	cmp	r3, #11
 8019530:	d90f      	bls.n	8019552 <_malloc_r+0x7e>
 8019532:	600b      	str	r3, [r1, #0]
 8019534:	50cd      	str	r5, [r1, r3]
 8019536:	18cc      	adds	r4, r1, r3
 8019538:	4630      	mov	r0, r6
 801953a:	f000 fbac 	bl	8019c96 <__malloc_unlock>
 801953e:	f104 000b 	add.w	r0, r4, #11
 8019542:	1d23      	adds	r3, r4, #4
 8019544:	f020 0007 	bic.w	r0, r0, #7
 8019548:	1ac3      	subs	r3, r0, r3
 801954a:	d0d3      	beq.n	80194f4 <_malloc_r+0x20>
 801954c:	425a      	negs	r2, r3
 801954e:	50e2      	str	r2, [r4, r3]
 8019550:	e7d0      	b.n	80194f4 <_malloc_r+0x20>
 8019552:	428c      	cmp	r4, r1
 8019554:	684b      	ldr	r3, [r1, #4]
 8019556:	bf16      	itet	ne
 8019558:	6063      	strne	r3, [r4, #4]
 801955a:	6013      	streq	r3, [r2, #0]
 801955c:	460c      	movne	r4, r1
 801955e:	e7eb      	b.n	8019538 <_malloc_r+0x64>
 8019560:	460c      	mov	r4, r1
 8019562:	6849      	ldr	r1, [r1, #4]
 8019564:	e7cc      	b.n	8019500 <_malloc_r+0x2c>
 8019566:	1cc4      	adds	r4, r0, #3
 8019568:	f024 0403 	bic.w	r4, r4, #3
 801956c:	42a0      	cmp	r0, r4
 801956e:	d005      	beq.n	801957c <_malloc_r+0xa8>
 8019570:	1a21      	subs	r1, r4, r0
 8019572:	4630      	mov	r0, r6
 8019574:	f000 f884 	bl	8019680 <_sbrk_r>
 8019578:	3001      	adds	r0, #1
 801957a:	d0cf      	beq.n	801951c <_malloc_r+0x48>
 801957c:	6025      	str	r5, [r4, #0]
 801957e:	e7db      	b.n	8019538 <_malloc_r+0x64>
 8019580:	24000b90 	.word	0x24000b90
 8019584:	24000b94 	.word	0x24000b94

08019588 <iprintf>:
 8019588:	b40f      	push	{r0, r1, r2, r3}
 801958a:	4b0a      	ldr	r3, [pc, #40]	; (80195b4 <iprintf+0x2c>)
 801958c:	b513      	push	{r0, r1, r4, lr}
 801958e:	681c      	ldr	r4, [r3, #0]
 8019590:	b124      	cbz	r4, 801959c <iprintf+0x14>
 8019592:	69a3      	ldr	r3, [r4, #24]
 8019594:	b913      	cbnz	r3, 801959c <iprintf+0x14>
 8019596:	4620      	mov	r0, r4
 8019598:	f000 fa8e 	bl	8019ab8 <__sinit>
 801959c:	ab05      	add	r3, sp, #20
 801959e:	9a04      	ldr	r2, [sp, #16]
 80195a0:	68a1      	ldr	r1, [r4, #8]
 80195a2:	9301      	str	r3, [sp, #4]
 80195a4:	4620      	mov	r0, r4
 80195a6:	f000 fcf3 	bl	8019f90 <_vfiprintf_r>
 80195aa:	b002      	add	sp, #8
 80195ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195b0:	b004      	add	sp, #16
 80195b2:	4770      	bx	lr
 80195b4:	24000178 	.word	0x24000178

080195b8 <_puts_r>:
 80195b8:	b570      	push	{r4, r5, r6, lr}
 80195ba:	460e      	mov	r6, r1
 80195bc:	4605      	mov	r5, r0
 80195be:	b118      	cbz	r0, 80195c8 <_puts_r+0x10>
 80195c0:	6983      	ldr	r3, [r0, #24]
 80195c2:	b90b      	cbnz	r3, 80195c8 <_puts_r+0x10>
 80195c4:	f000 fa78 	bl	8019ab8 <__sinit>
 80195c8:	69ab      	ldr	r3, [r5, #24]
 80195ca:	68ac      	ldr	r4, [r5, #8]
 80195cc:	b913      	cbnz	r3, 80195d4 <_puts_r+0x1c>
 80195ce:	4628      	mov	r0, r5
 80195d0:	f000 fa72 	bl	8019ab8 <__sinit>
 80195d4:	4b23      	ldr	r3, [pc, #140]	; (8019664 <_puts_r+0xac>)
 80195d6:	429c      	cmp	r4, r3
 80195d8:	d117      	bne.n	801960a <_puts_r+0x52>
 80195da:	686c      	ldr	r4, [r5, #4]
 80195dc:	89a3      	ldrh	r3, [r4, #12]
 80195de:	071b      	lsls	r3, r3, #28
 80195e0:	d51d      	bpl.n	801961e <_puts_r+0x66>
 80195e2:	6923      	ldr	r3, [r4, #16]
 80195e4:	b1db      	cbz	r3, 801961e <_puts_r+0x66>
 80195e6:	3e01      	subs	r6, #1
 80195e8:	68a3      	ldr	r3, [r4, #8]
 80195ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80195ee:	3b01      	subs	r3, #1
 80195f0:	60a3      	str	r3, [r4, #8]
 80195f2:	b9e9      	cbnz	r1, 8019630 <_puts_r+0x78>
 80195f4:	2b00      	cmp	r3, #0
 80195f6:	da2e      	bge.n	8019656 <_puts_r+0x9e>
 80195f8:	4622      	mov	r2, r4
 80195fa:	210a      	movs	r1, #10
 80195fc:	4628      	mov	r0, r5
 80195fe:	f000 f8ab 	bl	8019758 <__swbuf_r>
 8019602:	3001      	adds	r0, #1
 8019604:	d011      	beq.n	801962a <_puts_r+0x72>
 8019606:	200a      	movs	r0, #10
 8019608:	e011      	b.n	801962e <_puts_r+0x76>
 801960a:	4b17      	ldr	r3, [pc, #92]	; (8019668 <_puts_r+0xb0>)
 801960c:	429c      	cmp	r4, r3
 801960e:	d101      	bne.n	8019614 <_puts_r+0x5c>
 8019610:	68ac      	ldr	r4, [r5, #8]
 8019612:	e7e3      	b.n	80195dc <_puts_r+0x24>
 8019614:	4b15      	ldr	r3, [pc, #84]	; (801966c <_puts_r+0xb4>)
 8019616:	429c      	cmp	r4, r3
 8019618:	bf08      	it	eq
 801961a:	68ec      	ldreq	r4, [r5, #12]
 801961c:	e7de      	b.n	80195dc <_puts_r+0x24>
 801961e:	4621      	mov	r1, r4
 8019620:	4628      	mov	r0, r5
 8019622:	f000 f8eb 	bl	80197fc <__swsetup_r>
 8019626:	2800      	cmp	r0, #0
 8019628:	d0dd      	beq.n	80195e6 <_puts_r+0x2e>
 801962a:	f04f 30ff 	mov.w	r0, #4294967295
 801962e:	bd70      	pop	{r4, r5, r6, pc}
 8019630:	2b00      	cmp	r3, #0
 8019632:	da04      	bge.n	801963e <_puts_r+0x86>
 8019634:	69a2      	ldr	r2, [r4, #24]
 8019636:	429a      	cmp	r2, r3
 8019638:	dc06      	bgt.n	8019648 <_puts_r+0x90>
 801963a:	290a      	cmp	r1, #10
 801963c:	d004      	beq.n	8019648 <_puts_r+0x90>
 801963e:	6823      	ldr	r3, [r4, #0]
 8019640:	1c5a      	adds	r2, r3, #1
 8019642:	6022      	str	r2, [r4, #0]
 8019644:	7019      	strb	r1, [r3, #0]
 8019646:	e7cf      	b.n	80195e8 <_puts_r+0x30>
 8019648:	4622      	mov	r2, r4
 801964a:	4628      	mov	r0, r5
 801964c:	f000 f884 	bl	8019758 <__swbuf_r>
 8019650:	3001      	adds	r0, #1
 8019652:	d1c9      	bne.n	80195e8 <_puts_r+0x30>
 8019654:	e7e9      	b.n	801962a <_puts_r+0x72>
 8019656:	6823      	ldr	r3, [r4, #0]
 8019658:	200a      	movs	r0, #10
 801965a:	1c5a      	adds	r2, r3, #1
 801965c:	6022      	str	r2, [r4, #0]
 801965e:	7018      	strb	r0, [r3, #0]
 8019660:	e7e5      	b.n	801962e <_puts_r+0x76>
 8019662:	bf00      	nop
 8019664:	0801aff0 	.word	0x0801aff0
 8019668:	0801b010 	.word	0x0801b010
 801966c:	0801afd0 	.word	0x0801afd0

08019670 <puts>:
 8019670:	4b02      	ldr	r3, [pc, #8]	; (801967c <puts+0xc>)
 8019672:	4601      	mov	r1, r0
 8019674:	6818      	ldr	r0, [r3, #0]
 8019676:	f7ff bf9f 	b.w	80195b8 <_puts_r>
 801967a:	bf00      	nop
 801967c:	24000178 	.word	0x24000178

08019680 <_sbrk_r>:
 8019680:	b538      	push	{r3, r4, r5, lr}
 8019682:	4c06      	ldr	r4, [pc, #24]	; (801969c <_sbrk_r+0x1c>)
 8019684:	2300      	movs	r3, #0
 8019686:	4605      	mov	r5, r0
 8019688:	4608      	mov	r0, r1
 801968a:	6023      	str	r3, [r4, #0]
 801968c:	f7ea fdf8 	bl	8004280 <_sbrk>
 8019690:	1c43      	adds	r3, r0, #1
 8019692:	d102      	bne.n	801969a <_sbrk_r+0x1a>
 8019694:	6823      	ldr	r3, [r4, #0]
 8019696:	b103      	cbz	r3, 801969a <_sbrk_r+0x1a>
 8019698:	602b      	str	r3, [r5, #0]
 801969a:	bd38      	pop	{r3, r4, r5, pc}
 801969c:	240024ac 	.word	0x240024ac

080196a0 <sniprintf>:
 80196a0:	b40c      	push	{r2, r3}
 80196a2:	b530      	push	{r4, r5, lr}
 80196a4:	4b17      	ldr	r3, [pc, #92]	; (8019704 <sniprintf+0x64>)
 80196a6:	1e0c      	subs	r4, r1, #0
 80196a8:	b09d      	sub	sp, #116	; 0x74
 80196aa:	681d      	ldr	r5, [r3, #0]
 80196ac:	da08      	bge.n	80196c0 <sniprintf+0x20>
 80196ae:	238b      	movs	r3, #139	; 0x8b
 80196b0:	602b      	str	r3, [r5, #0]
 80196b2:	f04f 30ff 	mov.w	r0, #4294967295
 80196b6:	b01d      	add	sp, #116	; 0x74
 80196b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80196bc:	b002      	add	sp, #8
 80196be:	4770      	bx	lr
 80196c0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80196c4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80196c8:	bf14      	ite	ne
 80196ca:	f104 33ff 	addne.w	r3, r4, #4294967295
 80196ce:	4623      	moveq	r3, r4
 80196d0:	9304      	str	r3, [sp, #16]
 80196d2:	9307      	str	r3, [sp, #28]
 80196d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80196d8:	9002      	str	r0, [sp, #8]
 80196da:	9006      	str	r0, [sp, #24]
 80196dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80196e0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80196e2:	ab21      	add	r3, sp, #132	; 0x84
 80196e4:	a902      	add	r1, sp, #8
 80196e6:	4628      	mov	r0, r5
 80196e8:	9301      	str	r3, [sp, #4]
 80196ea:	f000 fb2f 	bl	8019d4c <_svfiprintf_r>
 80196ee:	1c43      	adds	r3, r0, #1
 80196f0:	bfbc      	itt	lt
 80196f2:	238b      	movlt	r3, #139	; 0x8b
 80196f4:	602b      	strlt	r3, [r5, #0]
 80196f6:	2c00      	cmp	r4, #0
 80196f8:	d0dd      	beq.n	80196b6 <sniprintf+0x16>
 80196fa:	9b02      	ldr	r3, [sp, #8]
 80196fc:	2200      	movs	r2, #0
 80196fe:	701a      	strb	r2, [r3, #0]
 8019700:	e7d9      	b.n	80196b6 <sniprintf+0x16>
 8019702:	bf00      	nop
 8019704:	24000178 	.word	0x24000178

08019708 <siprintf>:
 8019708:	b40e      	push	{r1, r2, r3}
 801970a:	b500      	push	{lr}
 801970c:	b09c      	sub	sp, #112	; 0x70
 801970e:	ab1d      	add	r3, sp, #116	; 0x74
 8019710:	9002      	str	r0, [sp, #8]
 8019712:	9006      	str	r0, [sp, #24]
 8019714:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8019718:	4809      	ldr	r0, [pc, #36]	; (8019740 <siprintf+0x38>)
 801971a:	9107      	str	r1, [sp, #28]
 801971c:	9104      	str	r1, [sp, #16]
 801971e:	4909      	ldr	r1, [pc, #36]	; (8019744 <siprintf+0x3c>)
 8019720:	f853 2b04 	ldr.w	r2, [r3], #4
 8019724:	9105      	str	r1, [sp, #20]
 8019726:	6800      	ldr	r0, [r0, #0]
 8019728:	9301      	str	r3, [sp, #4]
 801972a:	a902      	add	r1, sp, #8
 801972c:	f000 fb0e 	bl	8019d4c <_svfiprintf_r>
 8019730:	9b02      	ldr	r3, [sp, #8]
 8019732:	2200      	movs	r2, #0
 8019734:	701a      	strb	r2, [r3, #0]
 8019736:	b01c      	add	sp, #112	; 0x70
 8019738:	f85d eb04 	ldr.w	lr, [sp], #4
 801973c:	b003      	add	sp, #12
 801973e:	4770      	bx	lr
 8019740:	24000178 	.word	0x24000178
 8019744:	ffff0208 	.word	0xffff0208

08019748 <strcpy>:
 8019748:	4603      	mov	r3, r0
 801974a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801974e:	f803 2b01 	strb.w	r2, [r3], #1
 8019752:	2a00      	cmp	r2, #0
 8019754:	d1f9      	bne.n	801974a <strcpy+0x2>
 8019756:	4770      	bx	lr

08019758 <__swbuf_r>:
 8019758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801975a:	460e      	mov	r6, r1
 801975c:	4614      	mov	r4, r2
 801975e:	4605      	mov	r5, r0
 8019760:	b118      	cbz	r0, 801976a <__swbuf_r+0x12>
 8019762:	6983      	ldr	r3, [r0, #24]
 8019764:	b90b      	cbnz	r3, 801976a <__swbuf_r+0x12>
 8019766:	f000 f9a7 	bl	8019ab8 <__sinit>
 801976a:	4b21      	ldr	r3, [pc, #132]	; (80197f0 <__swbuf_r+0x98>)
 801976c:	429c      	cmp	r4, r3
 801976e:	d12a      	bne.n	80197c6 <__swbuf_r+0x6e>
 8019770:	686c      	ldr	r4, [r5, #4]
 8019772:	69a3      	ldr	r3, [r4, #24]
 8019774:	60a3      	str	r3, [r4, #8]
 8019776:	89a3      	ldrh	r3, [r4, #12]
 8019778:	071a      	lsls	r2, r3, #28
 801977a:	d52e      	bpl.n	80197da <__swbuf_r+0x82>
 801977c:	6923      	ldr	r3, [r4, #16]
 801977e:	b363      	cbz	r3, 80197da <__swbuf_r+0x82>
 8019780:	6923      	ldr	r3, [r4, #16]
 8019782:	6820      	ldr	r0, [r4, #0]
 8019784:	1ac0      	subs	r0, r0, r3
 8019786:	6963      	ldr	r3, [r4, #20]
 8019788:	b2f6      	uxtb	r6, r6
 801978a:	4283      	cmp	r3, r0
 801978c:	4637      	mov	r7, r6
 801978e:	dc04      	bgt.n	801979a <__swbuf_r+0x42>
 8019790:	4621      	mov	r1, r4
 8019792:	4628      	mov	r0, r5
 8019794:	f000 f926 	bl	80199e4 <_fflush_r>
 8019798:	bb28      	cbnz	r0, 80197e6 <__swbuf_r+0x8e>
 801979a:	68a3      	ldr	r3, [r4, #8]
 801979c:	3b01      	subs	r3, #1
 801979e:	60a3      	str	r3, [r4, #8]
 80197a0:	6823      	ldr	r3, [r4, #0]
 80197a2:	1c5a      	adds	r2, r3, #1
 80197a4:	6022      	str	r2, [r4, #0]
 80197a6:	701e      	strb	r6, [r3, #0]
 80197a8:	6963      	ldr	r3, [r4, #20]
 80197aa:	3001      	adds	r0, #1
 80197ac:	4283      	cmp	r3, r0
 80197ae:	d004      	beq.n	80197ba <__swbuf_r+0x62>
 80197b0:	89a3      	ldrh	r3, [r4, #12]
 80197b2:	07db      	lsls	r3, r3, #31
 80197b4:	d519      	bpl.n	80197ea <__swbuf_r+0x92>
 80197b6:	2e0a      	cmp	r6, #10
 80197b8:	d117      	bne.n	80197ea <__swbuf_r+0x92>
 80197ba:	4621      	mov	r1, r4
 80197bc:	4628      	mov	r0, r5
 80197be:	f000 f911 	bl	80199e4 <_fflush_r>
 80197c2:	b190      	cbz	r0, 80197ea <__swbuf_r+0x92>
 80197c4:	e00f      	b.n	80197e6 <__swbuf_r+0x8e>
 80197c6:	4b0b      	ldr	r3, [pc, #44]	; (80197f4 <__swbuf_r+0x9c>)
 80197c8:	429c      	cmp	r4, r3
 80197ca:	d101      	bne.n	80197d0 <__swbuf_r+0x78>
 80197cc:	68ac      	ldr	r4, [r5, #8]
 80197ce:	e7d0      	b.n	8019772 <__swbuf_r+0x1a>
 80197d0:	4b09      	ldr	r3, [pc, #36]	; (80197f8 <__swbuf_r+0xa0>)
 80197d2:	429c      	cmp	r4, r3
 80197d4:	bf08      	it	eq
 80197d6:	68ec      	ldreq	r4, [r5, #12]
 80197d8:	e7cb      	b.n	8019772 <__swbuf_r+0x1a>
 80197da:	4621      	mov	r1, r4
 80197dc:	4628      	mov	r0, r5
 80197de:	f000 f80d 	bl	80197fc <__swsetup_r>
 80197e2:	2800      	cmp	r0, #0
 80197e4:	d0cc      	beq.n	8019780 <__swbuf_r+0x28>
 80197e6:	f04f 37ff 	mov.w	r7, #4294967295
 80197ea:	4638      	mov	r0, r7
 80197ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80197ee:	bf00      	nop
 80197f0:	0801aff0 	.word	0x0801aff0
 80197f4:	0801b010 	.word	0x0801b010
 80197f8:	0801afd0 	.word	0x0801afd0

080197fc <__swsetup_r>:
 80197fc:	4b32      	ldr	r3, [pc, #200]	; (80198c8 <__swsetup_r+0xcc>)
 80197fe:	b570      	push	{r4, r5, r6, lr}
 8019800:	681d      	ldr	r5, [r3, #0]
 8019802:	4606      	mov	r6, r0
 8019804:	460c      	mov	r4, r1
 8019806:	b125      	cbz	r5, 8019812 <__swsetup_r+0x16>
 8019808:	69ab      	ldr	r3, [r5, #24]
 801980a:	b913      	cbnz	r3, 8019812 <__swsetup_r+0x16>
 801980c:	4628      	mov	r0, r5
 801980e:	f000 f953 	bl	8019ab8 <__sinit>
 8019812:	4b2e      	ldr	r3, [pc, #184]	; (80198cc <__swsetup_r+0xd0>)
 8019814:	429c      	cmp	r4, r3
 8019816:	d10f      	bne.n	8019838 <__swsetup_r+0x3c>
 8019818:	686c      	ldr	r4, [r5, #4]
 801981a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801981e:	b29a      	uxth	r2, r3
 8019820:	0715      	lsls	r5, r2, #28
 8019822:	d42c      	bmi.n	801987e <__swsetup_r+0x82>
 8019824:	06d0      	lsls	r0, r2, #27
 8019826:	d411      	bmi.n	801984c <__swsetup_r+0x50>
 8019828:	2209      	movs	r2, #9
 801982a:	6032      	str	r2, [r6, #0]
 801982c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019830:	81a3      	strh	r3, [r4, #12]
 8019832:	f04f 30ff 	mov.w	r0, #4294967295
 8019836:	e03e      	b.n	80198b6 <__swsetup_r+0xba>
 8019838:	4b25      	ldr	r3, [pc, #148]	; (80198d0 <__swsetup_r+0xd4>)
 801983a:	429c      	cmp	r4, r3
 801983c:	d101      	bne.n	8019842 <__swsetup_r+0x46>
 801983e:	68ac      	ldr	r4, [r5, #8]
 8019840:	e7eb      	b.n	801981a <__swsetup_r+0x1e>
 8019842:	4b24      	ldr	r3, [pc, #144]	; (80198d4 <__swsetup_r+0xd8>)
 8019844:	429c      	cmp	r4, r3
 8019846:	bf08      	it	eq
 8019848:	68ec      	ldreq	r4, [r5, #12]
 801984a:	e7e6      	b.n	801981a <__swsetup_r+0x1e>
 801984c:	0751      	lsls	r1, r2, #29
 801984e:	d512      	bpl.n	8019876 <__swsetup_r+0x7a>
 8019850:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019852:	b141      	cbz	r1, 8019866 <__swsetup_r+0x6a>
 8019854:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019858:	4299      	cmp	r1, r3
 801985a:	d002      	beq.n	8019862 <__swsetup_r+0x66>
 801985c:	4630      	mov	r0, r6
 801985e:	f7ff fdeb 	bl	8019438 <_free_r>
 8019862:	2300      	movs	r3, #0
 8019864:	6363      	str	r3, [r4, #52]	; 0x34
 8019866:	89a3      	ldrh	r3, [r4, #12]
 8019868:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801986c:	81a3      	strh	r3, [r4, #12]
 801986e:	2300      	movs	r3, #0
 8019870:	6063      	str	r3, [r4, #4]
 8019872:	6923      	ldr	r3, [r4, #16]
 8019874:	6023      	str	r3, [r4, #0]
 8019876:	89a3      	ldrh	r3, [r4, #12]
 8019878:	f043 0308 	orr.w	r3, r3, #8
 801987c:	81a3      	strh	r3, [r4, #12]
 801987e:	6923      	ldr	r3, [r4, #16]
 8019880:	b94b      	cbnz	r3, 8019896 <__swsetup_r+0x9a>
 8019882:	89a3      	ldrh	r3, [r4, #12]
 8019884:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8019888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801988c:	d003      	beq.n	8019896 <__swsetup_r+0x9a>
 801988e:	4621      	mov	r1, r4
 8019890:	4630      	mov	r0, r6
 8019892:	f000 f9bf 	bl	8019c14 <__smakebuf_r>
 8019896:	89a2      	ldrh	r2, [r4, #12]
 8019898:	f012 0301 	ands.w	r3, r2, #1
 801989c:	d00c      	beq.n	80198b8 <__swsetup_r+0xbc>
 801989e:	2300      	movs	r3, #0
 80198a0:	60a3      	str	r3, [r4, #8]
 80198a2:	6963      	ldr	r3, [r4, #20]
 80198a4:	425b      	negs	r3, r3
 80198a6:	61a3      	str	r3, [r4, #24]
 80198a8:	6923      	ldr	r3, [r4, #16]
 80198aa:	b953      	cbnz	r3, 80198c2 <__swsetup_r+0xc6>
 80198ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80198b0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80198b4:	d1ba      	bne.n	801982c <__swsetup_r+0x30>
 80198b6:	bd70      	pop	{r4, r5, r6, pc}
 80198b8:	0792      	lsls	r2, r2, #30
 80198ba:	bf58      	it	pl
 80198bc:	6963      	ldrpl	r3, [r4, #20]
 80198be:	60a3      	str	r3, [r4, #8]
 80198c0:	e7f2      	b.n	80198a8 <__swsetup_r+0xac>
 80198c2:	2000      	movs	r0, #0
 80198c4:	e7f7      	b.n	80198b6 <__swsetup_r+0xba>
 80198c6:	bf00      	nop
 80198c8:	24000178 	.word	0x24000178
 80198cc:	0801aff0 	.word	0x0801aff0
 80198d0:	0801b010 	.word	0x0801b010
 80198d4:	0801afd0 	.word	0x0801afd0

080198d8 <__sflush_r>:
 80198d8:	898a      	ldrh	r2, [r1, #12]
 80198da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198de:	4605      	mov	r5, r0
 80198e0:	0710      	lsls	r0, r2, #28
 80198e2:	460c      	mov	r4, r1
 80198e4:	d458      	bmi.n	8019998 <__sflush_r+0xc0>
 80198e6:	684b      	ldr	r3, [r1, #4]
 80198e8:	2b00      	cmp	r3, #0
 80198ea:	dc05      	bgt.n	80198f8 <__sflush_r+0x20>
 80198ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	dc02      	bgt.n	80198f8 <__sflush_r+0x20>
 80198f2:	2000      	movs	r0, #0
 80198f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80198f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80198fa:	2e00      	cmp	r6, #0
 80198fc:	d0f9      	beq.n	80198f2 <__sflush_r+0x1a>
 80198fe:	2300      	movs	r3, #0
 8019900:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8019904:	682f      	ldr	r7, [r5, #0]
 8019906:	6a21      	ldr	r1, [r4, #32]
 8019908:	602b      	str	r3, [r5, #0]
 801990a:	d032      	beq.n	8019972 <__sflush_r+0x9a>
 801990c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801990e:	89a3      	ldrh	r3, [r4, #12]
 8019910:	075a      	lsls	r2, r3, #29
 8019912:	d505      	bpl.n	8019920 <__sflush_r+0x48>
 8019914:	6863      	ldr	r3, [r4, #4]
 8019916:	1ac0      	subs	r0, r0, r3
 8019918:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801991a:	b10b      	cbz	r3, 8019920 <__sflush_r+0x48>
 801991c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801991e:	1ac0      	subs	r0, r0, r3
 8019920:	2300      	movs	r3, #0
 8019922:	4602      	mov	r2, r0
 8019924:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8019926:	6a21      	ldr	r1, [r4, #32]
 8019928:	4628      	mov	r0, r5
 801992a:	47b0      	blx	r6
 801992c:	1c43      	adds	r3, r0, #1
 801992e:	89a3      	ldrh	r3, [r4, #12]
 8019930:	d106      	bne.n	8019940 <__sflush_r+0x68>
 8019932:	6829      	ldr	r1, [r5, #0]
 8019934:	291d      	cmp	r1, #29
 8019936:	d848      	bhi.n	80199ca <__sflush_r+0xf2>
 8019938:	4a29      	ldr	r2, [pc, #164]	; (80199e0 <__sflush_r+0x108>)
 801993a:	40ca      	lsrs	r2, r1
 801993c:	07d6      	lsls	r6, r2, #31
 801993e:	d544      	bpl.n	80199ca <__sflush_r+0xf2>
 8019940:	2200      	movs	r2, #0
 8019942:	6062      	str	r2, [r4, #4]
 8019944:	04d9      	lsls	r1, r3, #19
 8019946:	6922      	ldr	r2, [r4, #16]
 8019948:	6022      	str	r2, [r4, #0]
 801994a:	d504      	bpl.n	8019956 <__sflush_r+0x7e>
 801994c:	1c42      	adds	r2, r0, #1
 801994e:	d101      	bne.n	8019954 <__sflush_r+0x7c>
 8019950:	682b      	ldr	r3, [r5, #0]
 8019952:	b903      	cbnz	r3, 8019956 <__sflush_r+0x7e>
 8019954:	6560      	str	r0, [r4, #84]	; 0x54
 8019956:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8019958:	602f      	str	r7, [r5, #0]
 801995a:	2900      	cmp	r1, #0
 801995c:	d0c9      	beq.n	80198f2 <__sflush_r+0x1a>
 801995e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8019962:	4299      	cmp	r1, r3
 8019964:	d002      	beq.n	801996c <__sflush_r+0x94>
 8019966:	4628      	mov	r0, r5
 8019968:	f7ff fd66 	bl	8019438 <_free_r>
 801996c:	2000      	movs	r0, #0
 801996e:	6360      	str	r0, [r4, #52]	; 0x34
 8019970:	e7c0      	b.n	80198f4 <__sflush_r+0x1c>
 8019972:	2301      	movs	r3, #1
 8019974:	4628      	mov	r0, r5
 8019976:	47b0      	blx	r6
 8019978:	1c41      	adds	r1, r0, #1
 801997a:	d1c8      	bne.n	801990e <__sflush_r+0x36>
 801997c:	682b      	ldr	r3, [r5, #0]
 801997e:	2b00      	cmp	r3, #0
 8019980:	d0c5      	beq.n	801990e <__sflush_r+0x36>
 8019982:	2b1d      	cmp	r3, #29
 8019984:	d001      	beq.n	801998a <__sflush_r+0xb2>
 8019986:	2b16      	cmp	r3, #22
 8019988:	d101      	bne.n	801998e <__sflush_r+0xb6>
 801998a:	602f      	str	r7, [r5, #0]
 801998c:	e7b1      	b.n	80198f2 <__sflush_r+0x1a>
 801998e:	89a3      	ldrh	r3, [r4, #12]
 8019990:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019994:	81a3      	strh	r3, [r4, #12]
 8019996:	e7ad      	b.n	80198f4 <__sflush_r+0x1c>
 8019998:	690f      	ldr	r7, [r1, #16]
 801999a:	2f00      	cmp	r7, #0
 801999c:	d0a9      	beq.n	80198f2 <__sflush_r+0x1a>
 801999e:	0793      	lsls	r3, r2, #30
 80199a0:	680e      	ldr	r6, [r1, #0]
 80199a2:	bf08      	it	eq
 80199a4:	694b      	ldreq	r3, [r1, #20]
 80199a6:	600f      	str	r7, [r1, #0]
 80199a8:	bf18      	it	ne
 80199aa:	2300      	movne	r3, #0
 80199ac:	eba6 0807 	sub.w	r8, r6, r7
 80199b0:	608b      	str	r3, [r1, #8]
 80199b2:	f1b8 0f00 	cmp.w	r8, #0
 80199b6:	dd9c      	ble.n	80198f2 <__sflush_r+0x1a>
 80199b8:	4643      	mov	r3, r8
 80199ba:	463a      	mov	r2, r7
 80199bc:	6a21      	ldr	r1, [r4, #32]
 80199be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80199c0:	4628      	mov	r0, r5
 80199c2:	47b0      	blx	r6
 80199c4:	2800      	cmp	r0, #0
 80199c6:	dc06      	bgt.n	80199d6 <__sflush_r+0xfe>
 80199c8:	89a3      	ldrh	r3, [r4, #12]
 80199ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80199ce:	81a3      	strh	r3, [r4, #12]
 80199d0:	f04f 30ff 	mov.w	r0, #4294967295
 80199d4:	e78e      	b.n	80198f4 <__sflush_r+0x1c>
 80199d6:	4407      	add	r7, r0
 80199d8:	eba8 0800 	sub.w	r8, r8, r0
 80199dc:	e7e9      	b.n	80199b2 <__sflush_r+0xda>
 80199de:	bf00      	nop
 80199e0:	20400001 	.word	0x20400001

080199e4 <_fflush_r>:
 80199e4:	b538      	push	{r3, r4, r5, lr}
 80199e6:	690b      	ldr	r3, [r1, #16]
 80199e8:	4605      	mov	r5, r0
 80199ea:	460c      	mov	r4, r1
 80199ec:	b1db      	cbz	r3, 8019a26 <_fflush_r+0x42>
 80199ee:	b118      	cbz	r0, 80199f8 <_fflush_r+0x14>
 80199f0:	6983      	ldr	r3, [r0, #24]
 80199f2:	b90b      	cbnz	r3, 80199f8 <_fflush_r+0x14>
 80199f4:	f000 f860 	bl	8019ab8 <__sinit>
 80199f8:	4b0c      	ldr	r3, [pc, #48]	; (8019a2c <_fflush_r+0x48>)
 80199fa:	429c      	cmp	r4, r3
 80199fc:	d109      	bne.n	8019a12 <_fflush_r+0x2e>
 80199fe:	686c      	ldr	r4, [r5, #4]
 8019a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a04:	b17b      	cbz	r3, 8019a26 <_fflush_r+0x42>
 8019a06:	4621      	mov	r1, r4
 8019a08:	4628      	mov	r0, r5
 8019a0a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019a0e:	f7ff bf63 	b.w	80198d8 <__sflush_r>
 8019a12:	4b07      	ldr	r3, [pc, #28]	; (8019a30 <_fflush_r+0x4c>)
 8019a14:	429c      	cmp	r4, r3
 8019a16:	d101      	bne.n	8019a1c <_fflush_r+0x38>
 8019a18:	68ac      	ldr	r4, [r5, #8]
 8019a1a:	e7f1      	b.n	8019a00 <_fflush_r+0x1c>
 8019a1c:	4b05      	ldr	r3, [pc, #20]	; (8019a34 <_fflush_r+0x50>)
 8019a1e:	429c      	cmp	r4, r3
 8019a20:	bf08      	it	eq
 8019a22:	68ec      	ldreq	r4, [r5, #12]
 8019a24:	e7ec      	b.n	8019a00 <_fflush_r+0x1c>
 8019a26:	2000      	movs	r0, #0
 8019a28:	bd38      	pop	{r3, r4, r5, pc}
 8019a2a:	bf00      	nop
 8019a2c:	0801aff0 	.word	0x0801aff0
 8019a30:	0801b010 	.word	0x0801b010
 8019a34:	0801afd0 	.word	0x0801afd0

08019a38 <std>:
 8019a38:	2300      	movs	r3, #0
 8019a3a:	b510      	push	{r4, lr}
 8019a3c:	4604      	mov	r4, r0
 8019a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8019a42:	6083      	str	r3, [r0, #8]
 8019a44:	8181      	strh	r1, [r0, #12]
 8019a46:	6643      	str	r3, [r0, #100]	; 0x64
 8019a48:	81c2      	strh	r2, [r0, #14]
 8019a4a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019a4e:	6183      	str	r3, [r0, #24]
 8019a50:	4619      	mov	r1, r3
 8019a52:	2208      	movs	r2, #8
 8019a54:	305c      	adds	r0, #92	; 0x5c
 8019a56:	f7ff fce6 	bl	8019426 <memset>
 8019a5a:	4b05      	ldr	r3, [pc, #20]	; (8019a70 <std+0x38>)
 8019a5c:	6263      	str	r3, [r4, #36]	; 0x24
 8019a5e:	4b05      	ldr	r3, [pc, #20]	; (8019a74 <std+0x3c>)
 8019a60:	62a3      	str	r3, [r4, #40]	; 0x28
 8019a62:	4b05      	ldr	r3, [pc, #20]	; (8019a78 <std+0x40>)
 8019a64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019a66:	4b05      	ldr	r3, [pc, #20]	; (8019a7c <std+0x44>)
 8019a68:	6224      	str	r4, [r4, #32]
 8019a6a:	6323      	str	r3, [r4, #48]	; 0x30
 8019a6c:	bd10      	pop	{r4, pc}
 8019a6e:	bf00      	nop
 8019a70:	0801a4cd 	.word	0x0801a4cd
 8019a74:	0801a4ef 	.word	0x0801a4ef
 8019a78:	0801a527 	.word	0x0801a527
 8019a7c:	0801a54b 	.word	0x0801a54b

08019a80 <_cleanup_r>:
 8019a80:	4901      	ldr	r1, [pc, #4]	; (8019a88 <_cleanup_r+0x8>)
 8019a82:	f000 b885 	b.w	8019b90 <_fwalk_reent>
 8019a86:	bf00      	nop
 8019a88:	080199e5 	.word	0x080199e5

08019a8c <__sfmoreglue>:
 8019a8c:	b570      	push	{r4, r5, r6, lr}
 8019a8e:	1e4a      	subs	r2, r1, #1
 8019a90:	2568      	movs	r5, #104	; 0x68
 8019a92:	4355      	muls	r5, r2
 8019a94:	460e      	mov	r6, r1
 8019a96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8019a9a:	f7ff fd1b 	bl	80194d4 <_malloc_r>
 8019a9e:	4604      	mov	r4, r0
 8019aa0:	b140      	cbz	r0, 8019ab4 <__sfmoreglue+0x28>
 8019aa2:	2100      	movs	r1, #0
 8019aa4:	e9c0 1600 	strd	r1, r6, [r0]
 8019aa8:	300c      	adds	r0, #12
 8019aaa:	60a0      	str	r0, [r4, #8]
 8019aac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8019ab0:	f7ff fcb9 	bl	8019426 <memset>
 8019ab4:	4620      	mov	r0, r4
 8019ab6:	bd70      	pop	{r4, r5, r6, pc}

08019ab8 <__sinit>:
 8019ab8:	6983      	ldr	r3, [r0, #24]
 8019aba:	b510      	push	{r4, lr}
 8019abc:	4604      	mov	r4, r0
 8019abe:	bb33      	cbnz	r3, 8019b0e <__sinit+0x56>
 8019ac0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8019ac4:	6503      	str	r3, [r0, #80]	; 0x50
 8019ac6:	4b12      	ldr	r3, [pc, #72]	; (8019b10 <__sinit+0x58>)
 8019ac8:	4a12      	ldr	r2, [pc, #72]	; (8019b14 <__sinit+0x5c>)
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	6282      	str	r2, [r0, #40]	; 0x28
 8019ace:	4298      	cmp	r0, r3
 8019ad0:	bf04      	itt	eq
 8019ad2:	2301      	moveq	r3, #1
 8019ad4:	6183      	streq	r3, [r0, #24]
 8019ad6:	f000 f81f 	bl	8019b18 <__sfp>
 8019ada:	6060      	str	r0, [r4, #4]
 8019adc:	4620      	mov	r0, r4
 8019ade:	f000 f81b 	bl	8019b18 <__sfp>
 8019ae2:	60a0      	str	r0, [r4, #8]
 8019ae4:	4620      	mov	r0, r4
 8019ae6:	f000 f817 	bl	8019b18 <__sfp>
 8019aea:	2200      	movs	r2, #0
 8019aec:	60e0      	str	r0, [r4, #12]
 8019aee:	2104      	movs	r1, #4
 8019af0:	6860      	ldr	r0, [r4, #4]
 8019af2:	f7ff ffa1 	bl	8019a38 <std>
 8019af6:	2201      	movs	r2, #1
 8019af8:	2109      	movs	r1, #9
 8019afa:	68a0      	ldr	r0, [r4, #8]
 8019afc:	f7ff ff9c 	bl	8019a38 <std>
 8019b00:	2202      	movs	r2, #2
 8019b02:	2112      	movs	r1, #18
 8019b04:	68e0      	ldr	r0, [r4, #12]
 8019b06:	f7ff ff97 	bl	8019a38 <std>
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	61a3      	str	r3, [r4, #24]
 8019b0e:	bd10      	pop	{r4, pc}
 8019b10:	0801afcc 	.word	0x0801afcc
 8019b14:	08019a81 	.word	0x08019a81

08019b18 <__sfp>:
 8019b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019b1a:	4b1b      	ldr	r3, [pc, #108]	; (8019b88 <__sfp+0x70>)
 8019b1c:	681e      	ldr	r6, [r3, #0]
 8019b1e:	69b3      	ldr	r3, [r6, #24]
 8019b20:	4607      	mov	r7, r0
 8019b22:	b913      	cbnz	r3, 8019b2a <__sfp+0x12>
 8019b24:	4630      	mov	r0, r6
 8019b26:	f7ff ffc7 	bl	8019ab8 <__sinit>
 8019b2a:	3648      	adds	r6, #72	; 0x48
 8019b2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8019b30:	3b01      	subs	r3, #1
 8019b32:	d503      	bpl.n	8019b3c <__sfp+0x24>
 8019b34:	6833      	ldr	r3, [r6, #0]
 8019b36:	b133      	cbz	r3, 8019b46 <__sfp+0x2e>
 8019b38:	6836      	ldr	r6, [r6, #0]
 8019b3a:	e7f7      	b.n	8019b2c <__sfp+0x14>
 8019b3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8019b40:	b16d      	cbz	r5, 8019b5e <__sfp+0x46>
 8019b42:	3468      	adds	r4, #104	; 0x68
 8019b44:	e7f4      	b.n	8019b30 <__sfp+0x18>
 8019b46:	2104      	movs	r1, #4
 8019b48:	4638      	mov	r0, r7
 8019b4a:	f7ff ff9f 	bl	8019a8c <__sfmoreglue>
 8019b4e:	6030      	str	r0, [r6, #0]
 8019b50:	2800      	cmp	r0, #0
 8019b52:	d1f1      	bne.n	8019b38 <__sfp+0x20>
 8019b54:	230c      	movs	r3, #12
 8019b56:	603b      	str	r3, [r7, #0]
 8019b58:	4604      	mov	r4, r0
 8019b5a:	4620      	mov	r0, r4
 8019b5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019b5e:	4b0b      	ldr	r3, [pc, #44]	; (8019b8c <__sfp+0x74>)
 8019b60:	6665      	str	r5, [r4, #100]	; 0x64
 8019b62:	e9c4 5500 	strd	r5, r5, [r4]
 8019b66:	60a5      	str	r5, [r4, #8]
 8019b68:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8019b6c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8019b70:	2208      	movs	r2, #8
 8019b72:	4629      	mov	r1, r5
 8019b74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8019b78:	f7ff fc55 	bl	8019426 <memset>
 8019b7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8019b80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8019b84:	e7e9      	b.n	8019b5a <__sfp+0x42>
 8019b86:	bf00      	nop
 8019b88:	0801afcc 	.word	0x0801afcc
 8019b8c:	ffff0001 	.word	0xffff0001

08019b90 <_fwalk_reent>:
 8019b90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019b94:	4680      	mov	r8, r0
 8019b96:	4689      	mov	r9, r1
 8019b98:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8019b9c:	2600      	movs	r6, #0
 8019b9e:	b914      	cbnz	r4, 8019ba6 <_fwalk_reent+0x16>
 8019ba0:	4630      	mov	r0, r6
 8019ba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ba6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8019baa:	3f01      	subs	r7, #1
 8019bac:	d501      	bpl.n	8019bb2 <_fwalk_reent+0x22>
 8019bae:	6824      	ldr	r4, [r4, #0]
 8019bb0:	e7f5      	b.n	8019b9e <_fwalk_reent+0xe>
 8019bb2:	89ab      	ldrh	r3, [r5, #12]
 8019bb4:	2b01      	cmp	r3, #1
 8019bb6:	d907      	bls.n	8019bc8 <_fwalk_reent+0x38>
 8019bb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019bbc:	3301      	adds	r3, #1
 8019bbe:	d003      	beq.n	8019bc8 <_fwalk_reent+0x38>
 8019bc0:	4629      	mov	r1, r5
 8019bc2:	4640      	mov	r0, r8
 8019bc4:	47c8      	blx	r9
 8019bc6:	4306      	orrs	r6, r0
 8019bc8:	3568      	adds	r5, #104	; 0x68
 8019bca:	e7ee      	b.n	8019baa <_fwalk_reent+0x1a>

08019bcc <__swhatbuf_r>:
 8019bcc:	b570      	push	{r4, r5, r6, lr}
 8019bce:	460e      	mov	r6, r1
 8019bd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019bd4:	2900      	cmp	r1, #0
 8019bd6:	b096      	sub	sp, #88	; 0x58
 8019bd8:	4614      	mov	r4, r2
 8019bda:	461d      	mov	r5, r3
 8019bdc:	da07      	bge.n	8019bee <__swhatbuf_r+0x22>
 8019bde:	2300      	movs	r3, #0
 8019be0:	602b      	str	r3, [r5, #0]
 8019be2:	89b3      	ldrh	r3, [r6, #12]
 8019be4:	061a      	lsls	r2, r3, #24
 8019be6:	d410      	bmi.n	8019c0a <__swhatbuf_r+0x3e>
 8019be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8019bec:	e00e      	b.n	8019c0c <__swhatbuf_r+0x40>
 8019bee:	466a      	mov	r2, sp
 8019bf0:	f000 fcd2 	bl	801a598 <_fstat_r>
 8019bf4:	2800      	cmp	r0, #0
 8019bf6:	dbf2      	blt.n	8019bde <__swhatbuf_r+0x12>
 8019bf8:	9a01      	ldr	r2, [sp, #4]
 8019bfa:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8019bfe:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8019c02:	425a      	negs	r2, r3
 8019c04:	415a      	adcs	r2, r3
 8019c06:	602a      	str	r2, [r5, #0]
 8019c08:	e7ee      	b.n	8019be8 <__swhatbuf_r+0x1c>
 8019c0a:	2340      	movs	r3, #64	; 0x40
 8019c0c:	2000      	movs	r0, #0
 8019c0e:	6023      	str	r3, [r4, #0]
 8019c10:	b016      	add	sp, #88	; 0x58
 8019c12:	bd70      	pop	{r4, r5, r6, pc}

08019c14 <__smakebuf_r>:
 8019c14:	898b      	ldrh	r3, [r1, #12]
 8019c16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8019c18:	079d      	lsls	r5, r3, #30
 8019c1a:	4606      	mov	r6, r0
 8019c1c:	460c      	mov	r4, r1
 8019c1e:	d507      	bpl.n	8019c30 <__smakebuf_r+0x1c>
 8019c20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8019c24:	6023      	str	r3, [r4, #0]
 8019c26:	6123      	str	r3, [r4, #16]
 8019c28:	2301      	movs	r3, #1
 8019c2a:	6163      	str	r3, [r4, #20]
 8019c2c:	b002      	add	sp, #8
 8019c2e:	bd70      	pop	{r4, r5, r6, pc}
 8019c30:	ab01      	add	r3, sp, #4
 8019c32:	466a      	mov	r2, sp
 8019c34:	f7ff ffca 	bl	8019bcc <__swhatbuf_r>
 8019c38:	9900      	ldr	r1, [sp, #0]
 8019c3a:	4605      	mov	r5, r0
 8019c3c:	4630      	mov	r0, r6
 8019c3e:	f7ff fc49 	bl	80194d4 <_malloc_r>
 8019c42:	b948      	cbnz	r0, 8019c58 <__smakebuf_r+0x44>
 8019c44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019c48:	059a      	lsls	r2, r3, #22
 8019c4a:	d4ef      	bmi.n	8019c2c <__smakebuf_r+0x18>
 8019c4c:	f023 0303 	bic.w	r3, r3, #3
 8019c50:	f043 0302 	orr.w	r3, r3, #2
 8019c54:	81a3      	strh	r3, [r4, #12]
 8019c56:	e7e3      	b.n	8019c20 <__smakebuf_r+0xc>
 8019c58:	4b0d      	ldr	r3, [pc, #52]	; (8019c90 <__smakebuf_r+0x7c>)
 8019c5a:	62b3      	str	r3, [r6, #40]	; 0x28
 8019c5c:	89a3      	ldrh	r3, [r4, #12]
 8019c5e:	6020      	str	r0, [r4, #0]
 8019c60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019c64:	81a3      	strh	r3, [r4, #12]
 8019c66:	9b00      	ldr	r3, [sp, #0]
 8019c68:	6163      	str	r3, [r4, #20]
 8019c6a:	9b01      	ldr	r3, [sp, #4]
 8019c6c:	6120      	str	r0, [r4, #16]
 8019c6e:	b15b      	cbz	r3, 8019c88 <__smakebuf_r+0x74>
 8019c70:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8019c74:	4630      	mov	r0, r6
 8019c76:	f000 fca1 	bl	801a5bc <_isatty_r>
 8019c7a:	b128      	cbz	r0, 8019c88 <__smakebuf_r+0x74>
 8019c7c:	89a3      	ldrh	r3, [r4, #12]
 8019c7e:	f023 0303 	bic.w	r3, r3, #3
 8019c82:	f043 0301 	orr.w	r3, r3, #1
 8019c86:	81a3      	strh	r3, [r4, #12]
 8019c88:	89a3      	ldrh	r3, [r4, #12]
 8019c8a:	431d      	orrs	r5, r3
 8019c8c:	81a5      	strh	r5, [r4, #12]
 8019c8e:	e7cd      	b.n	8019c2c <__smakebuf_r+0x18>
 8019c90:	08019a81 	.word	0x08019a81

08019c94 <__malloc_lock>:
 8019c94:	4770      	bx	lr

08019c96 <__malloc_unlock>:
 8019c96:	4770      	bx	lr

08019c98 <__ssputs_r>:
 8019c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019c9c:	688e      	ldr	r6, [r1, #8]
 8019c9e:	429e      	cmp	r6, r3
 8019ca0:	4682      	mov	sl, r0
 8019ca2:	460c      	mov	r4, r1
 8019ca4:	4690      	mov	r8, r2
 8019ca6:	4699      	mov	r9, r3
 8019ca8:	d837      	bhi.n	8019d1a <__ssputs_r+0x82>
 8019caa:	898a      	ldrh	r2, [r1, #12]
 8019cac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8019cb0:	d031      	beq.n	8019d16 <__ssputs_r+0x7e>
 8019cb2:	6825      	ldr	r5, [r4, #0]
 8019cb4:	6909      	ldr	r1, [r1, #16]
 8019cb6:	1a6f      	subs	r7, r5, r1
 8019cb8:	6965      	ldr	r5, [r4, #20]
 8019cba:	2302      	movs	r3, #2
 8019cbc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019cc0:	fb95 f5f3 	sdiv	r5, r5, r3
 8019cc4:	f109 0301 	add.w	r3, r9, #1
 8019cc8:	443b      	add	r3, r7
 8019cca:	429d      	cmp	r5, r3
 8019ccc:	bf38      	it	cc
 8019cce:	461d      	movcc	r5, r3
 8019cd0:	0553      	lsls	r3, r2, #21
 8019cd2:	d530      	bpl.n	8019d36 <__ssputs_r+0x9e>
 8019cd4:	4629      	mov	r1, r5
 8019cd6:	f7ff fbfd 	bl	80194d4 <_malloc_r>
 8019cda:	4606      	mov	r6, r0
 8019cdc:	b950      	cbnz	r0, 8019cf4 <__ssputs_r+0x5c>
 8019cde:	230c      	movs	r3, #12
 8019ce0:	f8ca 3000 	str.w	r3, [sl]
 8019ce4:	89a3      	ldrh	r3, [r4, #12]
 8019ce6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019cea:	81a3      	strh	r3, [r4, #12]
 8019cec:	f04f 30ff 	mov.w	r0, #4294967295
 8019cf0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019cf4:	463a      	mov	r2, r7
 8019cf6:	6921      	ldr	r1, [r4, #16]
 8019cf8:	f7ff fb8a 	bl	8019410 <memcpy>
 8019cfc:	89a3      	ldrh	r3, [r4, #12]
 8019cfe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8019d02:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8019d06:	81a3      	strh	r3, [r4, #12]
 8019d08:	6126      	str	r6, [r4, #16]
 8019d0a:	6165      	str	r5, [r4, #20]
 8019d0c:	443e      	add	r6, r7
 8019d0e:	1bed      	subs	r5, r5, r7
 8019d10:	6026      	str	r6, [r4, #0]
 8019d12:	60a5      	str	r5, [r4, #8]
 8019d14:	464e      	mov	r6, r9
 8019d16:	454e      	cmp	r6, r9
 8019d18:	d900      	bls.n	8019d1c <__ssputs_r+0x84>
 8019d1a:	464e      	mov	r6, r9
 8019d1c:	4632      	mov	r2, r6
 8019d1e:	4641      	mov	r1, r8
 8019d20:	6820      	ldr	r0, [r4, #0]
 8019d22:	f000 fc6d 	bl	801a600 <memmove>
 8019d26:	68a3      	ldr	r3, [r4, #8]
 8019d28:	1b9b      	subs	r3, r3, r6
 8019d2a:	60a3      	str	r3, [r4, #8]
 8019d2c:	6823      	ldr	r3, [r4, #0]
 8019d2e:	441e      	add	r6, r3
 8019d30:	6026      	str	r6, [r4, #0]
 8019d32:	2000      	movs	r0, #0
 8019d34:	e7dc      	b.n	8019cf0 <__ssputs_r+0x58>
 8019d36:	462a      	mov	r2, r5
 8019d38:	f000 fc7b 	bl	801a632 <_realloc_r>
 8019d3c:	4606      	mov	r6, r0
 8019d3e:	2800      	cmp	r0, #0
 8019d40:	d1e2      	bne.n	8019d08 <__ssputs_r+0x70>
 8019d42:	6921      	ldr	r1, [r4, #16]
 8019d44:	4650      	mov	r0, sl
 8019d46:	f7ff fb77 	bl	8019438 <_free_r>
 8019d4a:	e7c8      	b.n	8019cde <__ssputs_r+0x46>

08019d4c <_svfiprintf_r>:
 8019d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d50:	461d      	mov	r5, r3
 8019d52:	898b      	ldrh	r3, [r1, #12]
 8019d54:	061f      	lsls	r7, r3, #24
 8019d56:	b09d      	sub	sp, #116	; 0x74
 8019d58:	4680      	mov	r8, r0
 8019d5a:	460c      	mov	r4, r1
 8019d5c:	4616      	mov	r6, r2
 8019d5e:	d50f      	bpl.n	8019d80 <_svfiprintf_r+0x34>
 8019d60:	690b      	ldr	r3, [r1, #16]
 8019d62:	b96b      	cbnz	r3, 8019d80 <_svfiprintf_r+0x34>
 8019d64:	2140      	movs	r1, #64	; 0x40
 8019d66:	f7ff fbb5 	bl	80194d4 <_malloc_r>
 8019d6a:	6020      	str	r0, [r4, #0]
 8019d6c:	6120      	str	r0, [r4, #16]
 8019d6e:	b928      	cbnz	r0, 8019d7c <_svfiprintf_r+0x30>
 8019d70:	230c      	movs	r3, #12
 8019d72:	f8c8 3000 	str.w	r3, [r8]
 8019d76:	f04f 30ff 	mov.w	r0, #4294967295
 8019d7a:	e0c8      	b.n	8019f0e <_svfiprintf_r+0x1c2>
 8019d7c:	2340      	movs	r3, #64	; 0x40
 8019d7e:	6163      	str	r3, [r4, #20]
 8019d80:	2300      	movs	r3, #0
 8019d82:	9309      	str	r3, [sp, #36]	; 0x24
 8019d84:	2320      	movs	r3, #32
 8019d86:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019d8a:	2330      	movs	r3, #48	; 0x30
 8019d8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019d90:	9503      	str	r5, [sp, #12]
 8019d92:	f04f 0b01 	mov.w	fp, #1
 8019d96:	4637      	mov	r7, r6
 8019d98:	463d      	mov	r5, r7
 8019d9a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019d9e:	b10b      	cbz	r3, 8019da4 <_svfiprintf_r+0x58>
 8019da0:	2b25      	cmp	r3, #37	; 0x25
 8019da2:	d13e      	bne.n	8019e22 <_svfiprintf_r+0xd6>
 8019da4:	ebb7 0a06 	subs.w	sl, r7, r6
 8019da8:	d00b      	beq.n	8019dc2 <_svfiprintf_r+0x76>
 8019daa:	4653      	mov	r3, sl
 8019dac:	4632      	mov	r2, r6
 8019dae:	4621      	mov	r1, r4
 8019db0:	4640      	mov	r0, r8
 8019db2:	f7ff ff71 	bl	8019c98 <__ssputs_r>
 8019db6:	3001      	adds	r0, #1
 8019db8:	f000 80a4 	beq.w	8019f04 <_svfiprintf_r+0x1b8>
 8019dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019dbe:	4453      	add	r3, sl
 8019dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8019dc2:	783b      	ldrb	r3, [r7, #0]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	f000 809d 	beq.w	8019f04 <_svfiprintf_r+0x1b8>
 8019dca:	2300      	movs	r3, #0
 8019dcc:	f04f 32ff 	mov.w	r2, #4294967295
 8019dd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019dd4:	9304      	str	r3, [sp, #16]
 8019dd6:	9307      	str	r3, [sp, #28]
 8019dd8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8019ddc:	931a      	str	r3, [sp, #104]	; 0x68
 8019dde:	462f      	mov	r7, r5
 8019de0:	2205      	movs	r2, #5
 8019de2:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019de6:	4850      	ldr	r0, [pc, #320]	; (8019f28 <_svfiprintf_r+0x1dc>)
 8019de8:	f7e6 fa82 	bl	80002f0 <memchr>
 8019dec:	9b04      	ldr	r3, [sp, #16]
 8019dee:	b9d0      	cbnz	r0, 8019e26 <_svfiprintf_r+0xda>
 8019df0:	06d9      	lsls	r1, r3, #27
 8019df2:	bf44      	itt	mi
 8019df4:	2220      	movmi	r2, #32
 8019df6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019dfa:	071a      	lsls	r2, r3, #28
 8019dfc:	bf44      	itt	mi
 8019dfe:	222b      	movmi	r2, #43	; 0x2b
 8019e00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8019e04:	782a      	ldrb	r2, [r5, #0]
 8019e06:	2a2a      	cmp	r2, #42	; 0x2a
 8019e08:	d015      	beq.n	8019e36 <_svfiprintf_r+0xea>
 8019e0a:	9a07      	ldr	r2, [sp, #28]
 8019e0c:	462f      	mov	r7, r5
 8019e0e:	2000      	movs	r0, #0
 8019e10:	250a      	movs	r5, #10
 8019e12:	4639      	mov	r1, r7
 8019e14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e18:	3b30      	subs	r3, #48	; 0x30
 8019e1a:	2b09      	cmp	r3, #9
 8019e1c:	d94d      	bls.n	8019eba <_svfiprintf_r+0x16e>
 8019e1e:	b1b8      	cbz	r0, 8019e50 <_svfiprintf_r+0x104>
 8019e20:	e00f      	b.n	8019e42 <_svfiprintf_r+0xf6>
 8019e22:	462f      	mov	r7, r5
 8019e24:	e7b8      	b.n	8019d98 <_svfiprintf_r+0x4c>
 8019e26:	4a40      	ldr	r2, [pc, #256]	; (8019f28 <_svfiprintf_r+0x1dc>)
 8019e28:	1a80      	subs	r0, r0, r2
 8019e2a:	fa0b f000 	lsl.w	r0, fp, r0
 8019e2e:	4318      	orrs	r0, r3
 8019e30:	9004      	str	r0, [sp, #16]
 8019e32:	463d      	mov	r5, r7
 8019e34:	e7d3      	b.n	8019dde <_svfiprintf_r+0x92>
 8019e36:	9a03      	ldr	r2, [sp, #12]
 8019e38:	1d11      	adds	r1, r2, #4
 8019e3a:	6812      	ldr	r2, [r2, #0]
 8019e3c:	9103      	str	r1, [sp, #12]
 8019e3e:	2a00      	cmp	r2, #0
 8019e40:	db01      	blt.n	8019e46 <_svfiprintf_r+0xfa>
 8019e42:	9207      	str	r2, [sp, #28]
 8019e44:	e004      	b.n	8019e50 <_svfiprintf_r+0x104>
 8019e46:	4252      	negs	r2, r2
 8019e48:	f043 0302 	orr.w	r3, r3, #2
 8019e4c:	9207      	str	r2, [sp, #28]
 8019e4e:	9304      	str	r3, [sp, #16]
 8019e50:	783b      	ldrb	r3, [r7, #0]
 8019e52:	2b2e      	cmp	r3, #46	; 0x2e
 8019e54:	d10c      	bne.n	8019e70 <_svfiprintf_r+0x124>
 8019e56:	787b      	ldrb	r3, [r7, #1]
 8019e58:	2b2a      	cmp	r3, #42	; 0x2a
 8019e5a:	d133      	bne.n	8019ec4 <_svfiprintf_r+0x178>
 8019e5c:	9b03      	ldr	r3, [sp, #12]
 8019e5e:	1d1a      	adds	r2, r3, #4
 8019e60:	681b      	ldr	r3, [r3, #0]
 8019e62:	9203      	str	r2, [sp, #12]
 8019e64:	2b00      	cmp	r3, #0
 8019e66:	bfb8      	it	lt
 8019e68:	f04f 33ff 	movlt.w	r3, #4294967295
 8019e6c:	3702      	adds	r7, #2
 8019e6e:	9305      	str	r3, [sp, #20]
 8019e70:	4d2e      	ldr	r5, [pc, #184]	; (8019f2c <_svfiprintf_r+0x1e0>)
 8019e72:	7839      	ldrb	r1, [r7, #0]
 8019e74:	2203      	movs	r2, #3
 8019e76:	4628      	mov	r0, r5
 8019e78:	f7e6 fa3a 	bl	80002f0 <memchr>
 8019e7c:	b138      	cbz	r0, 8019e8e <_svfiprintf_r+0x142>
 8019e7e:	2340      	movs	r3, #64	; 0x40
 8019e80:	1b40      	subs	r0, r0, r5
 8019e82:	fa03 f000 	lsl.w	r0, r3, r0
 8019e86:	9b04      	ldr	r3, [sp, #16]
 8019e88:	4303      	orrs	r3, r0
 8019e8a:	3701      	adds	r7, #1
 8019e8c:	9304      	str	r3, [sp, #16]
 8019e8e:	7839      	ldrb	r1, [r7, #0]
 8019e90:	4827      	ldr	r0, [pc, #156]	; (8019f30 <_svfiprintf_r+0x1e4>)
 8019e92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8019e96:	2206      	movs	r2, #6
 8019e98:	1c7e      	adds	r6, r7, #1
 8019e9a:	f7e6 fa29 	bl	80002f0 <memchr>
 8019e9e:	2800      	cmp	r0, #0
 8019ea0:	d038      	beq.n	8019f14 <_svfiprintf_r+0x1c8>
 8019ea2:	4b24      	ldr	r3, [pc, #144]	; (8019f34 <_svfiprintf_r+0x1e8>)
 8019ea4:	bb13      	cbnz	r3, 8019eec <_svfiprintf_r+0x1a0>
 8019ea6:	9b03      	ldr	r3, [sp, #12]
 8019ea8:	3307      	adds	r3, #7
 8019eaa:	f023 0307 	bic.w	r3, r3, #7
 8019eae:	3308      	adds	r3, #8
 8019eb0:	9303      	str	r3, [sp, #12]
 8019eb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019eb4:	444b      	add	r3, r9
 8019eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8019eb8:	e76d      	b.n	8019d96 <_svfiprintf_r+0x4a>
 8019eba:	fb05 3202 	mla	r2, r5, r2, r3
 8019ebe:	2001      	movs	r0, #1
 8019ec0:	460f      	mov	r7, r1
 8019ec2:	e7a6      	b.n	8019e12 <_svfiprintf_r+0xc6>
 8019ec4:	2300      	movs	r3, #0
 8019ec6:	3701      	adds	r7, #1
 8019ec8:	9305      	str	r3, [sp, #20]
 8019eca:	4619      	mov	r1, r3
 8019ecc:	250a      	movs	r5, #10
 8019ece:	4638      	mov	r0, r7
 8019ed0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019ed4:	3a30      	subs	r2, #48	; 0x30
 8019ed6:	2a09      	cmp	r2, #9
 8019ed8:	d903      	bls.n	8019ee2 <_svfiprintf_r+0x196>
 8019eda:	2b00      	cmp	r3, #0
 8019edc:	d0c8      	beq.n	8019e70 <_svfiprintf_r+0x124>
 8019ede:	9105      	str	r1, [sp, #20]
 8019ee0:	e7c6      	b.n	8019e70 <_svfiprintf_r+0x124>
 8019ee2:	fb05 2101 	mla	r1, r5, r1, r2
 8019ee6:	2301      	movs	r3, #1
 8019ee8:	4607      	mov	r7, r0
 8019eea:	e7f0      	b.n	8019ece <_svfiprintf_r+0x182>
 8019eec:	ab03      	add	r3, sp, #12
 8019eee:	9300      	str	r3, [sp, #0]
 8019ef0:	4622      	mov	r2, r4
 8019ef2:	4b11      	ldr	r3, [pc, #68]	; (8019f38 <_svfiprintf_r+0x1ec>)
 8019ef4:	a904      	add	r1, sp, #16
 8019ef6:	4640      	mov	r0, r8
 8019ef8:	f3af 8000 	nop.w
 8019efc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8019f00:	4681      	mov	r9, r0
 8019f02:	d1d6      	bne.n	8019eb2 <_svfiprintf_r+0x166>
 8019f04:	89a3      	ldrh	r3, [r4, #12]
 8019f06:	065b      	lsls	r3, r3, #25
 8019f08:	f53f af35 	bmi.w	8019d76 <_svfiprintf_r+0x2a>
 8019f0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8019f0e:	b01d      	add	sp, #116	; 0x74
 8019f10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019f14:	ab03      	add	r3, sp, #12
 8019f16:	9300      	str	r3, [sp, #0]
 8019f18:	4622      	mov	r2, r4
 8019f1a:	4b07      	ldr	r3, [pc, #28]	; (8019f38 <_svfiprintf_r+0x1ec>)
 8019f1c:	a904      	add	r1, sp, #16
 8019f1e:	4640      	mov	r0, r8
 8019f20:	f000 f9c2 	bl	801a2a8 <_printf_i>
 8019f24:	e7ea      	b.n	8019efc <_svfiprintf_r+0x1b0>
 8019f26:	bf00      	nop
 8019f28:	0801b030 	.word	0x0801b030
 8019f2c:	0801b036 	.word	0x0801b036
 8019f30:	0801b03a 	.word	0x0801b03a
 8019f34:	00000000 	.word	0x00000000
 8019f38:	08019c99 	.word	0x08019c99

08019f3c <__sfputc_r>:
 8019f3c:	6893      	ldr	r3, [r2, #8]
 8019f3e:	3b01      	subs	r3, #1
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	b410      	push	{r4}
 8019f44:	6093      	str	r3, [r2, #8]
 8019f46:	da08      	bge.n	8019f5a <__sfputc_r+0x1e>
 8019f48:	6994      	ldr	r4, [r2, #24]
 8019f4a:	42a3      	cmp	r3, r4
 8019f4c:	db01      	blt.n	8019f52 <__sfputc_r+0x16>
 8019f4e:	290a      	cmp	r1, #10
 8019f50:	d103      	bne.n	8019f5a <__sfputc_r+0x1e>
 8019f52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f56:	f7ff bbff 	b.w	8019758 <__swbuf_r>
 8019f5a:	6813      	ldr	r3, [r2, #0]
 8019f5c:	1c58      	adds	r0, r3, #1
 8019f5e:	6010      	str	r0, [r2, #0]
 8019f60:	7019      	strb	r1, [r3, #0]
 8019f62:	4608      	mov	r0, r1
 8019f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019f68:	4770      	bx	lr

08019f6a <__sfputs_r>:
 8019f6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019f6c:	4606      	mov	r6, r0
 8019f6e:	460f      	mov	r7, r1
 8019f70:	4614      	mov	r4, r2
 8019f72:	18d5      	adds	r5, r2, r3
 8019f74:	42ac      	cmp	r4, r5
 8019f76:	d101      	bne.n	8019f7c <__sfputs_r+0x12>
 8019f78:	2000      	movs	r0, #0
 8019f7a:	e007      	b.n	8019f8c <__sfputs_r+0x22>
 8019f7c:	463a      	mov	r2, r7
 8019f7e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019f82:	4630      	mov	r0, r6
 8019f84:	f7ff ffda 	bl	8019f3c <__sfputc_r>
 8019f88:	1c43      	adds	r3, r0, #1
 8019f8a:	d1f3      	bne.n	8019f74 <__sfputs_r+0xa>
 8019f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019f90 <_vfiprintf_r>:
 8019f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f94:	460c      	mov	r4, r1
 8019f96:	b09d      	sub	sp, #116	; 0x74
 8019f98:	4617      	mov	r7, r2
 8019f9a:	461d      	mov	r5, r3
 8019f9c:	4606      	mov	r6, r0
 8019f9e:	b118      	cbz	r0, 8019fa8 <_vfiprintf_r+0x18>
 8019fa0:	6983      	ldr	r3, [r0, #24]
 8019fa2:	b90b      	cbnz	r3, 8019fa8 <_vfiprintf_r+0x18>
 8019fa4:	f7ff fd88 	bl	8019ab8 <__sinit>
 8019fa8:	4b7c      	ldr	r3, [pc, #496]	; (801a19c <_vfiprintf_r+0x20c>)
 8019faa:	429c      	cmp	r4, r3
 8019fac:	d158      	bne.n	801a060 <_vfiprintf_r+0xd0>
 8019fae:	6874      	ldr	r4, [r6, #4]
 8019fb0:	89a3      	ldrh	r3, [r4, #12]
 8019fb2:	0718      	lsls	r0, r3, #28
 8019fb4:	d55e      	bpl.n	801a074 <_vfiprintf_r+0xe4>
 8019fb6:	6923      	ldr	r3, [r4, #16]
 8019fb8:	2b00      	cmp	r3, #0
 8019fba:	d05b      	beq.n	801a074 <_vfiprintf_r+0xe4>
 8019fbc:	2300      	movs	r3, #0
 8019fbe:	9309      	str	r3, [sp, #36]	; 0x24
 8019fc0:	2320      	movs	r3, #32
 8019fc2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8019fc6:	2330      	movs	r3, #48	; 0x30
 8019fc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8019fcc:	9503      	str	r5, [sp, #12]
 8019fce:	f04f 0b01 	mov.w	fp, #1
 8019fd2:	46b8      	mov	r8, r7
 8019fd4:	4645      	mov	r5, r8
 8019fd6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8019fda:	b10b      	cbz	r3, 8019fe0 <_vfiprintf_r+0x50>
 8019fdc:	2b25      	cmp	r3, #37	; 0x25
 8019fde:	d154      	bne.n	801a08a <_vfiprintf_r+0xfa>
 8019fe0:	ebb8 0a07 	subs.w	sl, r8, r7
 8019fe4:	d00b      	beq.n	8019ffe <_vfiprintf_r+0x6e>
 8019fe6:	4653      	mov	r3, sl
 8019fe8:	463a      	mov	r2, r7
 8019fea:	4621      	mov	r1, r4
 8019fec:	4630      	mov	r0, r6
 8019fee:	f7ff ffbc 	bl	8019f6a <__sfputs_r>
 8019ff2:	3001      	adds	r0, #1
 8019ff4:	f000 80c2 	beq.w	801a17c <_vfiprintf_r+0x1ec>
 8019ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019ffa:	4453      	add	r3, sl
 8019ffc:	9309      	str	r3, [sp, #36]	; 0x24
 8019ffe:	f898 3000 	ldrb.w	r3, [r8]
 801a002:	2b00      	cmp	r3, #0
 801a004:	f000 80ba 	beq.w	801a17c <_vfiprintf_r+0x1ec>
 801a008:	2300      	movs	r3, #0
 801a00a:	f04f 32ff 	mov.w	r2, #4294967295
 801a00e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a012:	9304      	str	r3, [sp, #16]
 801a014:	9307      	str	r3, [sp, #28]
 801a016:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a01a:	931a      	str	r3, [sp, #104]	; 0x68
 801a01c:	46a8      	mov	r8, r5
 801a01e:	2205      	movs	r2, #5
 801a020:	f818 1b01 	ldrb.w	r1, [r8], #1
 801a024:	485e      	ldr	r0, [pc, #376]	; (801a1a0 <_vfiprintf_r+0x210>)
 801a026:	f7e6 f963 	bl	80002f0 <memchr>
 801a02a:	9b04      	ldr	r3, [sp, #16]
 801a02c:	bb78      	cbnz	r0, 801a08e <_vfiprintf_r+0xfe>
 801a02e:	06d9      	lsls	r1, r3, #27
 801a030:	bf44      	itt	mi
 801a032:	2220      	movmi	r2, #32
 801a034:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a038:	071a      	lsls	r2, r3, #28
 801a03a:	bf44      	itt	mi
 801a03c:	222b      	movmi	r2, #43	; 0x2b
 801a03e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801a042:	782a      	ldrb	r2, [r5, #0]
 801a044:	2a2a      	cmp	r2, #42	; 0x2a
 801a046:	d02a      	beq.n	801a09e <_vfiprintf_r+0x10e>
 801a048:	9a07      	ldr	r2, [sp, #28]
 801a04a:	46a8      	mov	r8, r5
 801a04c:	2000      	movs	r0, #0
 801a04e:	250a      	movs	r5, #10
 801a050:	4641      	mov	r1, r8
 801a052:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a056:	3b30      	subs	r3, #48	; 0x30
 801a058:	2b09      	cmp	r3, #9
 801a05a:	d969      	bls.n	801a130 <_vfiprintf_r+0x1a0>
 801a05c:	b360      	cbz	r0, 801a0b8 <_vfiprintf_r+0x128>
 801a05e:	e024      	b.n	801a0aa <_vfiprintf_r+0x11a>
 801a060:	4b50      	ldr	r3, [pc, #320]	; (801a1a4 <_vfiprintf_r+0x214>)
 801a062:	429c      	cmp	r4, r3
 801a064:	d101      	bne.n	801a06a <_vfiprintf_r+0xda>
 801a066:	68b4      	ldr	r4, [r6, #8]
 801a068:	e7a2      	b.n	8019fb0 <_vfiprintf_r+0x20>
 801a06a:	4b4f      	ldr	r3, [pc, #316]	; (801a1a8 <_vfiprintf_r+0x218>)
 801a06c:	429c      	cmp	r4, r3
 801a06e:	bf08      	it	eq
 801a070:	68f4      	ldreq	r4, [r6, #12]
 801a072:	e79d      	b.n	8019fb0 <_vfiprintf_r+0x20>
 801a074:	4621      	mov	r1, r4
 801a076:	4630      	mov	r0, r6
 801a078:	f7ff fbc0 	bl	80197fc <__swsetup_r>
 801a07c:	2800      	cmp	r0, #0
 801a07e:	d09d      	beq.n	8019fbc <_vfiprintf_r+0x2c>
 801a080:	f04f 30ff 	mov.w	r0, #4294967295
 801a084:	b01d      	add	sp, #116	; 0x74
 801a086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a08a:	46a8      	mov	r8, r5
 801a08c:	e7a2      	b.n	8019fd4 <_vfiprintf_r+0x44>
 801a08e:	4a44      	ldr	r2, [pc, #272]	; (801a1a0 <_vfiprintf_r+0x210>)
 801a090:	1a80      	subs	r0, r0, r2
 801a092:	fa0b f000 	lsl.w	r0, fp, r0
 801a096:	4318      	orrs	r0, r3
 801a098:	9004      	str	r0, [sp, #16]
 801a09a:	4645      	mov	r5, r8
 801a09c:	e7be      	b.n	801a01c <_vfiprintf_r+0x8c>
 801a09e:	9a03      	ldr	r2, [sp, #12]
 801a0a0:	1d11      	adds	r1, r2, #4
 801a0a2:	6812      	ldr	r2, [r2, #0]
 801a0a4:	9103      	str	r1, [sp, #12]
 801a0a6:	2a00      	cmp	r2, #0
 801a0a8:	db01      	blt.n	801a0ae <_vfiprintf_r+0x11e>
 801a0aa:	9207      	str	r2, [sp, #28]
 801a0ac:	e004      	b.n	801a0b8 <_vfiprintf_r+0x128>
 801a0ae:	4252      	negs	r2, r2
 801a0b0:	f043 0302 	orr.w	r3, r3, #2
 801a0b4:	9207      	str	r2, [sp, #28]
 801a0b6:	9304      	str	r3, [sp, #16]
 801a0b8:	f898 3000 	ldrb.w	r3, [r8]
 801a0bc:	2b2e      	cmp	r3, #46	; 0x2e
 801a0be:	d10e      	bne.n	801a0de <_vfiprintf_r+0x14e>
 801a0c0:	f898 3001 	ldrb.w	r3, [r8, #1]
 801a0c4:	2b2a      	cmp	r3, #42	; 0x2a
 801a0c6:	d138      	bne.n	801a13a <_vfiprintf_r+0x1aa>
 801a0c8:	9b03      	ldr	r3, [sp, #12]
 801a0ca:	1d1a      	adds	r2, r3, #4
 801a0cc:	681b      	ldr	r3, [r3, #0]
 801a0ce:	9203      	str	r2, [sp, #12]
 801a0d0:	2b00      	cmp	r3, #0
 801a0d2:	bfb8      	it	lt
 801a0d4:	f04f 33ff 	movlt.w	r3, #4294967295
 801a0d8:	f108 0802 	add.w	r8, r8, #2
 801a0dc:	9305      	str	r3, [sp, #20]
 801a0de:	4d33      	ldr	r5, [pc, #204]	; (801a1ac <_vfiprintf_r+0x21c>)
 801a0e0:	f898 1000 	ldrb.w	r1, [r8]
 801a0e4:	2203      	movs	r2, #3
 801a0e6:	4628      	mov	r0, r5
 801a0e8:	f7e6 f902 	bl	80002f0 <memchr>
 801a0ec:	b140      	cbz	r0, 801a100 <_vfiprintf_r+0x170>
 801a0ee:	2340      	movs	r3, #64	; 0x40
 801a0f0:	1b40      	subs	r0, r0, r5
 801a0f2:	fa03 f000 	lsl.w	r0, r3, r0
 801a0f6:	9b04      	ldr	r3, [sp, #16]
 801a0f8:	4303      	orrs	r3, r0
 801a0fa:	f108 0801 	add.w	r8, r8, #1
 801a0fe:	9304      	str	r3, [sp, #16]
 801a100:	f898 1000 	ldrb.w	r1, [r8]
 801a104:	482a      	ldr	r0, [pc, #168]	; (801a1b0 <_vfiprintf_r+0x220>)
 801a106:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a10a:	2206      	movs	r2, #6
 801a10c:	f108 0701 	add.w	r7, r8, #1
 801a110:	f7e6 f8ee 	bl	80002f0 <memchr>
 801a114:	2800      	cmp	r0, #0
 801a116:	d037      	beq.n	801a188 <_vfiprintf_r+0x1f8>
 801a118:	4b26      	ldr	r3, [pc, #152]	; (801a1b4 <_vfiprintf_r+0x224>)
 801a11a:	bb1b      	cbnz	r3, 801a164 <_vfiprintf_r+0x1d4>
 801a11c:	9b03      	ldr	r3, [sp, #12]
 801a11e:	3307      	adds	r3, #7
 801a120:	f023 0307 	bic.w	r3, r3, #7
 801a124:	3308      	adds	r3, #8
 801a126:	9303      	str	r3, [sp, #12]
 801a128:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a12a:	444b      	add	r3, r9
 801a12c:	9309      	str	r3, [sp, #36]	; 0x24
 801a12e:	e750      	b.n	8019fd2 <_vfiprintf_r+0x42>
 801a130:	fb05 3202 	mla	r2, r5, r2, r3
 801a134:	2001      	movs	r0, #1
 801a136:	4688      	mov	r8, r1
 801a138:	e78a      	b.n	801a050 <_vfiprintf_r+0xc0>
 801a13a:	2300      	movs	r3, #0
 801a13c:	f108 0801 	add.w	r8, r8, #1
 801a140:	9305      	str	r3, [sp, #20]
 801a142:	4619      	mov	r1, r3
 801a144:	250a      	movs	r5, #10
 801a146:	4640      	mov	r0, r8
 801a148:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a14c:	3a30      	subs	r2, #48	; 0x30
 801a14e:	2a09      	cmp	r2, #9
 801a150:	d903      	bls.n	801a15a <_vfiprintf_r+0x1ca>
 801a152:	2b00      	cmp	r3, #0
 801a154:	d0c3      	beq.n	801a0de <_vfiprintf_r+0x14e>
 801a156:	9105      	str	r1, [sp, #20]
 801a158:	e7c1      	b.n	801a0de <_vfiprintf_r+0x14e>
 801a15a:	fb05 2101 	mla	r1, r5, r1, r2
 801a15e:	2301      	movs	r3, #1
 801a160:	4680      	mov	r8, r0
 801a162:	e7f0      	b.n	801a146 <_vfiprintf_r+0x1b6>
 801a164:	ab03      	add	r3, sp, #12
 801a166:	9300      	str	r3, [sp, #0]
 801a168:	4622      	mov	r2, r4
 801a16a:	4b13      	ldr	r3, [pc, #76]	; (801a1b8 <_vfiprintf_r+0x228>)
 801a16c:	a904      	add	r1, sp, #16
 801a16e:	4630      	mov	r0, r6
 801a170:	f3af 8000 	nop.w
 801a174:	f1b0 3fff 	cmp.w	r0, #4294967295
 801a178:	4681      	mov	r9, r0
 801a17a:	d1d5      	bne.n	801a128 <_vfiprintf_r+0x198>
 801a17c:	89a3      	ldrh	r3, [r4, #12]
 801a17e:	065b      	lsls	r3, r3, #25
 801a180:	f53f af7e 	bmi.w	801a080 <_vfiprintf_r+0xf0>
 801a184:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a186:	e77d      	b.n	801a084 <_vfiprintf_r+0xf4>
 801a188:	ab03      	add	r3, sp, #12
 801a18a:	9300      	str	r3, [sp, #0]
 801a18c:	4622      	mov	r2, r4
 801a18e:	4b0a      	ldr	r3, [pc, #40]	; (801a1b8 <_vfiprintf_r+0x228>)
 801a190:	a904      	add	r1, sp, #16
 801a192:	4630      	mov	r0, r6
 801a194:	f000 f888 	bl	801a2a8 <_printf_i>
 801a198:	e7ec      	b.n	801a174 <_vfiprintf_r+0x1e4>
 801a19a:	bf00      	nop
 801a19c:	0801aff0 	.word	0x0801aff0
 801a1a0:	0801b030 	.word	0x0801b030
 801a1a4:	0801b010 	.word	0x0801b010
 801a1a8:	0801afd0 	.word	0x0801afd0
 801a1ac:	0801b036 	.word	0x0801b036
 801a1b0:	0801b03a 	.word	0x0801b03a
 801a1b4:	00000000 	.word	0x00000000
 801a1b8:	08019f6b 	.word	0x08019f6b

0801a1bc <_printf_common>:
 801a1bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a1c0:	4691      	mov	r9, r2
 801a1c2:	461f      	mov	r7, r3
 801a1c4:	688a      	ldr	r2, [r1, #8]
 801a1c6:	690b      	ldr	r3, [r1, #16]
 801a1c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801a1cc:	4293      	cmp	r3, r2
 801a1ce:	bfb8      	it	lt
 801a1d0:	4613      	movlt	r3, r2
 801a1d2:	f8c9 3000 	str.w	r3, [r9]
 801a1d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801a1da:	4606      	mov	r6, r0
 801a1dc:	460c      	mov	r4, r1
 801a1de:	b112      	cbz	r2, 801a1e6 <_printf_common+0x2a>
 801a1e0:	3301      	adds	r3, #1
 801a1e2:	f8c9 3000 	str.w	r3, [r9]
 801a1e6:	6823      	ldr	r3, [r4, #0]
 801a1e8:	0699      	lsls	r1, r3, #26
 801a1ea:	bf42      	ittt	mi
 801a1ec:	f8d9 3000 	ldrmi.w	r3, [r9]
 801a1f0:	3302      	addmi	r3, #2
 801a1f2:	f8c9 3000 	strmi.w	r3, [r9]
 801a1f6:	6825      	ldr	r5, [r4, #0]
 801a1f8:	f015 0506 	ands.w	r5, r5, #6
 801a1fc:	d107      	bne.n	801a20e <_printf_common+0x52>
 801a1fe:	f104 0a19 	add.w	sl, r4, #25
 801a202:	68e3      	ldr	r3, [r4, #12]
 801a204:	f8d9 2000 	ldr.w	r2, [r9]
 801a208:	1a9b      	subs	r3, r3, r2
 801a20a:	42ab      	cmp	r3, r5
 801a20c:	dc28      	bgt.n	801a260 <_printf_common+0xa4>
 801a20e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801a212:	6822      	ldr	r2, [r4, #0]
 801a214:	3300      	adds	r3, #0
 801a216:	bf18      	it	ne
 801a218:	2301      	movne	r3, #1
 801a21a:	0692      	lsls	r2, r2, #26
 801a21c:	d42d      	bmi.n	801a27a <_printf_common+0xbe>
 801a21e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801a222:	4639      	mov	r1, r7
 801a224:	4630      	mov	r0, r6
 801a226:	47c0      	blx	r8
 801a228:	3001      	adds	r0, #1
 801a22a:	d020      	beq.n	801a26e <_printf_common+0xb2>
 801a22c:	6823      	ldr	r3, [r4, #0]
 801a22e:	68e5      	ldr	r5, [r4, #12]
 801a230:	f8d9 2000 	ldr.w	r2, [r9]
 801a234:	f003 0306 	and.w	r3, r3, #6
 801a238:	2b04      	cmp	r3, #4
 801a23a:	bf08      	it	eq
 801a23c:	1aad      	subeq	r5, r5, r2
 801a23e:	68a3      	ldr	r3, [r4, #8]
 801a240:	6922      	ldr	r2, [r4, #16]
 801a242:	bf0c      	ite	eq
 801a244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a248:	2500      	movne	r5, #0
 801a24a:	4293      	cmp	r3, r2
 801a24c:	bfc4      	itt	gt
 801a24e:	1a9b      	subgt	r3, r3, r2
 801a250:	18ed      	addgt	r5, r5, r3
 801a252:	f04f 0900 	mov.w	r9, #0
 801a256:	341a      	adds	r4, #26
 801a258:	454d      	cmp	r5, r9
 801a25a:	d11a      	bne.n	801a292 <_printf_common+0xd6>
 801a25c:	2000      	movs	r0, #0
 801a25e:	e008      	b.n	801a272 <_printf_common+0xb6>
 801a260:	2301      	movs	r3, #1
 801a262:	4652      	mov	r2, sl
 801a264:	4639      	mov	r1, r7
 801a266:	4630      	mov	r0, r6
 801a268:	47c0      	blx	r8
 801a26a:	3001      	adds	r0, #1
 801a26c:	d103      	bne.n	801a276 <_printf_common+0xba>
 801a26e:	f04f 30ff 	mov.w	r0, #4294967295
 801a272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a276:	3501      	adds	r5, #1
 801a278:	e7c3      	b.n	801a202 <_printf_common+0x46>
 801a27a:	18e1      	adds	r1, r4, r3
 801a27c:	1c5a      	adds	r2, r3, #1
 801a27e:	2030      	movs	r0, #48	; 0x30
 801a280:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801a284:	4422      	add	r2, r4
 801a286:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801a28a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801a28e:	3302      	adds	r3, #2
 801a290:	e7c5      	b.n	801a21e <_printf_common+0x62>
 801a292:	2301      	movs	r3, #1
 801a294:	4622      	mov	r2, r4
 801a296:	4639      	mov	r1, r7
 801a298:	4630      	mov	r0, r6
 801a29a:	47c0      	blx	r8
 801a29c:	3001      	adds	r0, #1
 801a29e:	d0e6      	beq.n	801a26e <_printf_common+0xb2>
 801a2a0:	f109 0901 	add.w	r9, r9, #1
 801a2a4:	e7d8      	b.n	801a258 <_printf_common+0x9c>
	...

0801a2a8 <_printf_i>:
 801a2a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a2ac:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801a2b0:	460c      	mov	r4, r1
 801a2b2:	7e09      	ldrb	r1, [r1, #24]
 801a2b4:	b085      	sub	sp, #20
 801a2b6:	296e      	cmp	r1, #110	; 0x6e
 801a2b8:	4617      	mov	r7, r2
 801a2ba:	4606      	mov	r6, r0
 801a2bc:	4698      	mov	r8, r3
 801a2be:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a2c0:	f000 80b3 	beq.w	801a42a <_printf_i+0x182>
 801a2c4:	d822      	bhi.n	801a30c <_printf_i+0x64>
 801a2c6:	2963      	cmp	r1, #99	; 0x63
 801a2c8:	d036      	beq.n	801a338 <_printf_i+0x90>
 801a2ca:	d80a      	bhi.n	801a2e2 <_printf_i+0x3a>
 801a2cc:	2900      	cmp	r1, #0
 801a2ce:	f000 80b9 	beq.w	801a444 <_printf_i+0x19c>
 801a2d2:	2958      	cmp	r1, #88	; 0x58
 801a2d4:	f000 8083 	beq.w	801a3de <_printf_i+0x136>
 801a2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a2dc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801a2e0:	e032      	b.n	801a348 <_printf_i+0xa0>
 801a2e2:	2964      	cmp	r1, #100	; 0x64
 801a2e4:	d001      	beq.n	801a2ea <_printf_i+0x42>
 801a2e6:	2969      	cmp	r1, #105	; 0x69
 801a2e8:	d1f6      	bne.n	801a2d8 <_printf_i+0x30>
 801a2ea:	6820      	ldr	r0, [r4, #0]
 801a2ec:	6813      	ldr	r3, [r2, #0]
 801a2ee:	0605      	lsls	r5, r0, #24
 801a2f0:	f103 0104 	add.w	r1, r3, #4
 801a2f4:	d52a      	bpl.n	801a34c <_printf_i+0xa4>
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	6011      	str	r1, [r2, #0]
 801a2fa:	2b00      	cmp	r3, #0
 801a2fc:	da03      	bge.n	801a306 <_printf_i+0x5e>
 801a2fe:	222d      	movs	r2, #45	; 0x2d
 801a300:	425b      	negs	r3, r3
 801a302:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801a306:	486f      	ldr	r0, [pc, #444]	; (801a4c4 <_printf_i+0x21c>)
 801a308:	220a      	movs	r2, #10
 801a30a:	e039      	b.n	801a380 <_printf_i+0xd8>
 801a30c:	2973      	cmp	r1, #115	; 0x73
 801a30e:	f000 809d 	beq.w	801a44c <_printf_i+0x1a4>
 801a312:	d808      	bhi.n	801a326 <_printf_i+0x7e>
 801a314:	296f      	cmp	r1, #111	; 0x6f
 801a316:	d020      	beq.n	801a35a <_printf_i+0xb2>
 801a318:	2970      	cmp	r1, #112	; 0x70
 801a31a:	d1dd      	bne.n	801a2d8 <_printf_i+0x30>
 801a31c:	6823      	ldr	r3, [r4, #0]
 801a31e:	f043 0320 	orr.w	r3, r3, #32
 801a322:	6023      	str	r3, [r4, #0]
 801a324:	e003      	b.n	801a32e <_printf_i+0x86>
 801a326:	2975      	cmp	r1, #117	; 0x75
 801a328:	d017      	beq.n	801a35a <_printf_i+0xb2>
 801a32a:	2978      	cmp	r1, #120	; 0x78
 801a32c:	d1d4      	bne.n	801a2d8 <_printf_i+0x30>
 801a32e:	2378      	movs	r3, #120	; 0x78
 801a330:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801a334:	4864      	ldr	r0, [pc, #400]	; (801a4c8 <_printf_i+0x220>)
 801a336:	e055      	b.n	801a3e4 <_printf_i+0x13c>
 801a338:	6813      	ldr	r3, [r2, #0]
 801a33a:	1d19      	adds	r1, r3, #4
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	6011      	str	r1, [r2, #0]
 801a340:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a344:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a348:	2301      	movs	r3, #1
 801a34a:	e08c      	b.n	801a466 <_printf_i+0x1be>
 801a34c:	681b      	ldr	r3, [r3, #0]
 801a34e:	6011      	str	r1, [r2, #0]
 801a350:	f010 0f40 	tst.w	r0, #64	; 0x40
 801a354:	bf18      	it	ne
 801a356:	b21b      	sxthne	r3, r3
 801a358:	e7cf      	b.n	801a2fa <_printf_i+0x52>
 801a35a:	6813      	ldr	r3, [r2, #0]
 801a35c:	6825      	ldr	r5, [r4, #0]
 801a35e:	1d18      	adds	r0, r3, #4
 801a360:	6010      	str	r0, [r2, #0]
 801a362:	0628      	lsls	r0, r5, #24
 801a364:	d501      	bpl.n	801a36a <_printf_i+0xc2>
 801a366:	681b      	ldr	r3, [r3, #0]
 801a368:	e002      	b.n	801a370 <_printf_i+0xc8>
 801a36a:	0668      	lsls	r0, r5, #25
 801a36c:	d5fb      	bpl.n	801a366 <_printf_i+0xbe>
 801a36e:	881b      	ldrh	r3, [r3, #0]
 801a370:	4854      	ldr	r0, [pc, #336]	; (801a4c4 <_printf_i+0x21c>)
 801a372:	296f      	cmp	r1, #111	; 0x6f
 801a374:	bf14      	ite	ne
 801a376:	220a      	movne	r2, #10
 801a378:	2208      	moveq	r2, #8
 801a37a:	2100      	movs	r1, #0
 801a37c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801a380:	6865      	ldr	r5, [r4, #4]
 801a382:	60a5      	str	r5, [r4, #8]
 801a384:	2d00      	cmp	r5, #0
 801a386:	f2c0 8095 	blt.w	801a4b4 <_printf_i+0x20c>
 801a38a:	6821      	ldr	r1, [r4, #0]
 801a38c:	f021 0104 	bic.w	r1, r1, #4
 801a390:	6021      	str	r1, [r4, #0]
 801a392:	2b00      	cmp	r3, #0
 801a394:	d13d      	bne.n	801a412 <_printf_i+0x16a>
 801a396:	2d00      	cmp	r5, #0
 801a398:	f040 808e 	bne.w	801a4b8 <_printf_i+0x210>
 801a39c:	4665      	mov	r5, ip
 801a39e:	2a08      	cmp	r2, #8
 801a3a0:	d10b      	bne.n	801a3ba <_printf_i+0x112>
 801a3a2:	6823      	ldr	r3, [r4, #0]
 801a3a4:	07db      	lsls	r3, r3, #31
 801a3a6:	d508      	bpl.n	801a3ba <_printf_i+0x112>
 801a3a8:	6923      	ldr	r3, [r4, #16]
 801a3aa:	6862      	ldr	r2, [r4, #4]
 801a3ac:	429a      	cmp	r2, r3
 801a3ae:	bfde      	ittt	le
 801a3b0:	2330      	movle	r3, #48	; 0x30
 801a3b2:	f805 3c01 	strble.w	r3, [r5, #-1]
 801a3b6:	f105 35ff 	addle.w	r5, r5, #4294967295
 801a3ba:	ebac 0305 	sub.w	r3, ip, r5
 801a3be:	6123      	str	r3, [r4, #16]
 801a3c0:	f8cd 8000 	str.w	r8, [sp]
 801a3c4:	463b      	mov	r3, r7
 801a3c6:	aa03      	add	r2, sp, #12
 801a3c8:	4621      	mov	r1, r4
 801a3ca:	4630      	mov	r0, r6
 801a3cc:	f7ff fef6 	bl	801a1bc <_printf_common>
 801a3d0:	3001      	adds	r0, #1
 801a3d2:	d14d      	bne.n	801a470 <_printf_i+0x1c8>
 801a3d4:	f04f 30ff 	mov.w	r0, #4294967295
 801a3d8:	b005      	add	sp, #20
 801a3da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a3de:	4839      	ldr	r0, [pc, #228]	; (801a4c4 <_printf_i+0x21c>)
 801a3e0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801a3e4:	6813      	ldr	r3, [r2, #0]
 801a3e6:	6821      	ldr	r1, [r4, #0]
 801a3e8:	1d1d      	adds	r5, r3, #4
 801a3ea:	681b      	ldr	r3, [r3, #0]
 801a3ec:	6015      	str	r5, [r2, #0]
 801a3ee:	060a      	lsls	r2, r1, #24
 801a3f0:	d50b      	bpl.n	801a40a <_printf_i+0x162>
 801a3f2:	07ca      	lsls	r2, r1, #31
 801a3f4:	bf44      	itt	mi
 801a3f6:	f041 0120 	orrmi.w	r1, r1, #32
 801a3fa:	6021      	strmi	r1, [r4, #0]
 801a3fc:	b91b      	cbnz	r3, 801a406 <_printf_i+0x15e>
 801a3fe:	6822      	ldr	r2, [r4, #0]
 801a400:	f022 0220 	bic.w	r2, r2, #32
 801a404:	6022      	str	r2, [r4, #0]
 801a406:	2210      	movs	r2, #16
 801a408:	e7b7      	b.n	801a37a <_printf_i+0xd2>
 801a40a:	064d      	lsls	r5, r1, #25
 801a40c:	bf48      	it	mi
 801a40e:	b29b      	uxthmi	r3, r3
 801a410:	e7ef      	b.n	801a3f2 <_printf_i+0x14a>
 801a412:	4665      	mov	r5, ip
 801a414:	fbb3 f1f2 	udiv	r1, r3, r2
 801a418:	fb02 3311 	mls	r3, r2, r1, r3
 801a41c:	5cc3      	ldrb	r3, [r0, r3]
 801a41e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801a422:	460b      	mov	r3, r1
 801a424:	2900      	cmp	r1, #0
 801a426:	d1f5      	bne.n	801a414 <_printf_i+0x16c>
 801a428:	e7b9      	b.n	801a39e <_printf_i+0xf6>
 801a42a:	6813      	ldr	r3, [r2, #0]
 801a42c:	6825      	ldr	r5, [r4, #0]
 801a42e:	6961      	ldr	r1, [r4, #20]
 801a430:	1d18      	adds	r0, r3, #4
 801a432:	6010      	str	r0, [r2, #0]
 801a434:	0628      	lsls	r0, r5, #24
 801a436:	681b      	ldr	r3, [r3, #0]
 801a438:	d501      	bpl.n	801a43e <_printf_i+0x196>
 801a43a:	6019      	str	r1, [r3, #0]
 801a43c:	e002      	b.n	801a444 <_printf_i+0x19c>
 801a43e:	066a      	lsls	r2, r5, #25
 801a440:	d5fb      	bpl.n	801a43a <_printf_i+0x192>
 801a442:	8019      	strh	r1, [r3, #0]
 801a444:	2300      	movs	r3, #0
 801a446:	6123      	str	r3, [r4, #16]
 801a448:	4665      	mov	r5, ip
 801a44a:	e7b9      	b.n	801a3c0 <_printf_i+0x118>
 801a44c:	6813      	ldr	r3, [r2, #0]
 801a44e:	1d19      	adds	r1, r3, #4
 801a450:	6011      	str	r1, [r2, #0]
 801a452:	681d      	ldr	r5, [r3, #0]
 801a454:	6862      	ldr	r2, [r4, #4]
 801a456:	2100      	movs	r1, #0
 801a458:	4628      	mov	r0, r5
 801a45a:	f7e5 ff49 	bl	80002f0 <memchr>
 801a45e:	b108      	cbz	r0, 801a464 <_printf_i+0x1bc>
 801a460:	1b40      	subs	r0, r0, r5
 801a462:	6060      	str	r0, [r4, #4]
 801a464:	6863      	ldr	r3, [r4, #4]
 801a466:	6123      	str	r3, [r4, #16]
 801a468:	2300      	movs	r3, #0
 801a46a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801a46e:	e7a7      	b.n	801a3c0 <_printf_i+0x118>
 801a470:	6923      	ldr	r3, [r4, #16]
 801a472:	462a      	mov	r2, r5
 801a474:	4639      	mov	r1, r7
 801a476:	4630      	mov	r0, r6
 801a478:	47c0      	blx	r8
 801a47a:	3001      	adds	r0, #1
 801a47c:	d0aa      	beq.n	801a3d4 <_printf_i+0x12c>
 801a47e:	6823      	ldr	r3, [r4, #0]
 801a480:	079b      	lsls	r3, r3, #30
 801a482:	d413      	bmi.n	801a4ac <_printf_i+0x204>
 801a484:	68e0      	ldr	r0, [r4, #12]
 801a486:	9b03      	ldr	r3, [sp, #12]
 801a488:	4298      	cmp	r0, r3
 801a48a:	bfb8      	it	lt
 801a48c:	4618      	movlt	r0, r3
 801a48e:	e7a3      	b.n	801a3d8 <_printf_i+0x130>
 801a490:	2301      	movs	r3, #1
 801a492:	464a      	mov	r2, r9
 801a494:	4639      	mov	r1, r7
 801a496:	4630      	mov	r0, r6
 801a498:	47c0      	blx	r8
 801a49a:	3001      	adds	r0, #1
 801a49c:	d09a      	beq.n	801a3d4 <_printf_i+0x12c>
 801a49e:	3501      	adds	r5, #1
 801a4a0:	68e3      	ldr	r3, [r4, #12]
 801a4a2:	9a03      	ldr	r2, [sp, #12]
 801a4a4:	1a9b      	subs	r3, r3, r2
 801a4a6:	42ab      	cmp	r3, r5
 801a4a8:	dcf2      	bgt.n	801a490 <_printf_i+0x1e8>
 801a4aa:	e7eb      	b.n	801a484 <_printf_i+0x1dc>
 801a4ac:	2500      	movs	r5, #0
 801a4ae:	f104 0919 	add.w	r9, r4, #25
 801a4b2:	e7f5      	b.n	801a4a0 <_printf_i+0x1f8>
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	d1ac      	bne.n	801a412 <_printf_i+0x16a>
 801a4b8:	7803      	ldrb	r3, [r0, #0]
 801a4ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801a4be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801a4c2:	e76c      	b.n	801a39e <_printf_i+0xf6>
 801a4c4:	0801b041 	.word	0x0801b041
 801a4c8:	0801b052 	.word	0x0801b052

0801a4cc <__sread>:
 801a4cc:	b510      	push	{r4, lr}
 801a4ce:	460c      	mov	r4, r1
 801a4d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a4d4:	f000 f8d4 	bl	801a680 <_read_r>
 801a4d8:	2800      	cmp	r0, #0
 801a4da:	bfab      	itete	ge
 801a4dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801a4de:	89a3      	ldrhlt	r3, [r4, #12]
 801a4e0:	181b      	addge	r3, r3, r0
 801a4e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801a4e6:	bfac      	ite	ge
 801a4e8:	6563      	strge	r3, [r4, #84]	; 0x54
 801a4ea:	81a3      	strhlt	r3, [r4, #12]
 801a4ec:	bd10      	pop	{r4, pc}

0801a4ee <__swrite>:
 801a4ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a4f2:	461f      	mov	r7, r3
 801a4f4:	898b      	ldrh	r3, [r1, #12]
 801a4f6:	05db      	lsls	r3, r3, #23
 801a4f8:	4605      	mov	r5, r0
 801a4fa:	460c      	mov	r4, r1
 801a4fc:	4616      	mov	r6, r2
 801a4fe:	d505      	bpl.n	801a50c <__swrite+0x1e>
 801a500:	2302      	movs	r3, #2
 801a502:	2200      	movs	r2, #0
 801a504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a508:	f000 f868 	bl	801a5dc <_lseek_r>
 801a50c:	89a3      	ldrh	r3, [r4, #12]
 801a50e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a512:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a516:	81a3      	strh	r3, [r4, #12]
 801a518:	4632      	mov	r2, r6
 801a51a:	463b      	mov	r3, r7
 801a51c:	4628      	mov	r0, r5
 801a51e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a522:	f000 b817 	b.w	801a554 <_write_r>

0801a526 <__sseek>:
 801a526:	b510      	push	{r4, lr}
 801a528:	460c      	mov	r4, r1
 801a52a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a52e:	f000 f855 	bl	801a5dc <_lseek_r>
 801a532:	1c43      	adds	r3, r0, #1
 801a534:	89a3      	ldrh	r3, [r4, #12]
 801a536:	bf15      	itete	ne
 801a538:	6560      	strne	r0, [r4, #84]	; 0x54
 801a53a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a53e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a542:	81a3      	strheq	r3, [r4, #12]
 801a544:	bf18      	it	ne
 801a546:	81a3      	strhne	r3, [r4, #12]
 801a548:	bd10      	pop	{r4, pc}

0801a54a <__sclose>:
 801a54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a54e:	f000 b813 	b.w	801a578 <_close_r>
	...

0801a554 <_write_r>:
 801a554:	b538      	push	{r3, r4, r5, lr}
 801a556:	4c07      	ldr	r4, [pc, #28]	; (801a574 <_write_r+0x20>)
 801a558:	4605      	mov	r5, r0
 801a55a:	4608      	mov	r0, r1
 801a55c:	4611      	mov	r1, r2
 801a55e:	2200      	movs	r2, #0
 801a560:	6022      	str	r2, [r4, #0]
 801a562:	461a      	mov	r2, r3
 801a564:	f7e9 fb47 	bl	8003bf6 <_write>
 801a568:	1c43      	adds	r3, r0, #1
 801a56a:	d102      	bne.n	801a572 <_write_r+0x1e>
 801a56c:	6823      	ldr	r3, [r4, #0]
 801a56e:	b103      	cbz	r3, 801a572 <_write_r+0x1e>
 801a570:	602b      	str	r3, [r5, #0]
 801a572:	bd38      	pop	{r3, r4, r5, pc}
 801a574:	240024ac 	.word	0x240024ac

0801a578 <_close_r>:
 801a578:	b538      	push	{r3, r4, r5, lr}
 801a57a:	4c06      	ldr	r4, [pc, #24]	; (801a594 <_close_r+0x1c>)
 801a57c:	2300      	movs	r3, #0
 801a57e:	4605      	mov	r5, r0
 801a580:	4608      	mov	r0, r1
 801a582:	6023      	str	r3, [r4, #0]
 801a584:	f7e9 fe47 	bl	8004216 <_close>
 801a588:	1c43      	adds	r3, r0, #1
 801a58a:	d102      	bne.n	801a592 <_close_r+0x1a>
 801a58c:	6823      	ldr	r3, [r4, #0]
 801a58e:	b103      	cbz	r3, 801a592 <_close_r+0x1a>
 801a590:	602b      	str	r3, [r5, #0]
 801a592:	bd38      	pop	{r3, r4, r5, pc}
 801a594:	240024ac 	.word	0x240024ac

0801a598 <_fstat_r>:
 801a598:	b538      	push	{r3, r4, r5, lr}
 801a59a:	4c07      	ldr	r4, [pc, #28]	; (801a5b8 <_fstat_r+0x20>)
 801a59c:	2300      	movs	r3, #0
 801a59e:	4605      	mov	r5, r0
 801a5a0:	4608      	mov	r0, r1
 801a5a2:	4611      	mov	r1, r2
 801a5a4:	6023      	str	r3, [r4, #0]
 801a5a6:	f7e9 fe42 	bl	800422e <_fstat>
 801a5aa:	1c43      	adds	r3, r0, #1
 801a5ac:	d102      	bne.n	801a5b4 <_fstat_r+0x1c>
 801a5ae:	6823      	ldr	r3, [r4, #0]
 801a5b0:	b103      	cbz	r3, 801a5b4 <_fstat_r+0x1c>
 801a5b2:	602b      	str	r3, [r5, #0]
 801a5b4:	bd38      	pop	{r3, r4, r5, pc}
 801a5b6:	bf00      	nop
 801a5b8:	240024ac 	.word	0x240024ac

0801a5bc <_isatty_r>:
 801a5bc:	b538      	push	{r3, r4, r5, lr}
 801a5be:	4c06      	ldr	r4, [pc, #24]	; (801a5d8 <_isatty_r+0x1c>)
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	4605      	mov	r5, r0
 801a5c4:	4608      	mov	r0, r1
 801a5c6:	6023      	str	r3, [r4, #0]
 801a5c8:	f7e9 fe41 	bl	800424e <_isatty>
 801a5cc:	1c43      	adds	r3, r0, #1
 801a5ce:	d102      	bne.n	801a5d6 <_isatty_r+0x1a>
 801a5d0:	6823      	ldr	r3, [r4, #0]
 801a5d2:	b103      	cbz	r3, 801a5d6 <_isatty_r+0x1a>
 801a5d4:	602b      	str	r3, [r5, #0]
 801a5d6:	bd38      	pop	{r3, r4, r5, pc}
 801a5d8:	240024ac 	.word	0x240024ac

0801a5dc <_lseek_r>:
 801a5dc:	b538      	push	{r3, r4, r5, lr}
 801a5de:	4c07      	ldr	r4, [pc, #28]	; (801a5fc <_lseek_r+0x20>)
 801a5e0:	4605      	mov	r5, r0
 801a5e2:	4608      	mov	r0, r1
 801a5e4:	4611      	mov	r1, r2
 801a5e6:	2200      	movs	r2, #0
 801a5e8:	6022      	str	r2, [r4, #0]
 801a5ea:	461a      	mov	r2, r3
 801a5ec:	f7e9 fe3a 	bl	8004264 <_lseek>
 801a5f0:	1c43      	adds	r3, r0, #1
 801a5f2:	d102      	bne.n	801a5fa <_lseek_r+0x1e>
 801a5f4:	6823      	ldr	r3, [r4, #0]
 801a5f6:	b103      	cbz	r3, 801a5fa <_lseek_r+0x1e>
 801a5f8:	602b      	str	r3, [r5, #0]
 801a5fa:	bd38      	pop	{r3, r4, r5, pc}
 801a5fc:	240024ac 	.word	0x240024ac

0801a600 <memmove>:
 801a600:	4288      	cmp	r0, r1
 801a602:	b510      	push	{r4, lr}
 801a604:	eb01 0302 	add.w	r3, r1, r2
 801a608:	d807      	bhi.n	801a61a <memmove+0x1a>
 801a60a:	1e42      	subs	r2, r0, #1
 801a60c:	4299      	cmp	r1, r3
 801a60e:	d00a      	beq.n	801a626 <memmove+0x26>
 801a610:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a614:	f802 4f01 	strb.w	r4, [r2, #1]!
 801a618:	e7f8      	b.n	801a60c <memmove+0xc>
 801a61a:	4283      	cmp	r3, r0
 801a61c:	d9f5      	bls.n	801a60a <memmove+0xa>
 801a61e:	1881      	adds	r1, r0, r2
 801a620:	1ad2      	subs	r2, r2, r3
 801a622:	42d3      	cmn	r3, r2
 801a624:	d100      	bne.n	801a628 <memmove+0x28>
 801a626:	bd10      	pop	{r4, pc}
 801a628:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801a62c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801a630:	e7f7      	b.n	801a622 <memmove+0x22>

0801a632 <_realloc_r>:
 801a632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a634:	4607      	mov	r7, r0
 801a636:	4614      	mov	r4, r2
 801a638:	460e      	mov	r6, r1
 801a63a:	b921      	cbnz	r1, 801a646 <_realloc_r+0x14>
 801a63c:	4611      	mov	r1, r2
 801a63e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801a642:	f7fe bf47 	b.w	80194d4 <_malloc_r>
 801a646:	b922      	cbnz	r2, 801a652 <_realloc_r+0x20>
 801a648:	f7fe fef6 	bl	8019438 <_free_r>
 801a64c:	4625      	mov	r5, r4
 801a64e:	4628      	mov	r0, r5
 801a650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a652:	f000 f827 	bl	801a6a4 <_malloc_usable_size_r>
 801a656:	42a0      	cmp	r0, r4
 801a658:	d20f      	bcs.n	801a67a <_realloc_r+0x48>
 801a65a:	4621      	mov	r1, r4
 801a65c:	4638      	mov	r0, r7
 801a65e:	f7fe ff39 	bl	80194d4 <_malloc_r>
 801a662:	4605      	mov	r5, r0
 801a664:	2800      	cmp	r0, #0
 801a666:	d0f2      	beq.n	801a64e <_realloc_r+0x1c>
 801a668:	4631      	mov	r1, r6
 801a66a:	4622      	mov	r2, r4
 801a66c:	f7fe fed0 	bl	8019410 <memcpy>
 801a670:	4631      	mov	r1, r6
 801a672:	4638      	mov	r0, r7
 801a674:	f7fe fee0 	bl	8019438 <_free_r>
 801a678:	e7e9      	b.n	801a64e <_realloc_r+0x1c>
 801a67a:	4635      	mov	r5, r6
 801a67c:	e7e7      	b.n	801a64e <_realloc_r+0x1c>
	...

0801a680 <_read_r>:
 801a680:	b538      	push	{r3, r4, r5, lr}
 801a682:	4c07      	ldr	r4, [pc, #28]	; (801a6a0 <_read_r+0x20>)
 801a684:	4605      	mov	r5, r0
 801a686:	4608      	mov	r0, r1
 801a688:	4611      	mov	r1, r2
 801a68a:	2200      	movs	r2, #0
 801a68c:	6022      	str	r2, [r4, #0]
 801a68e:	461a      	mov	r2, r3
 801a690:	f7e9 fda4 	bl	80041dc <_read>
 801a694:	1c43      	adds	r3, r0, #1
 801a696:	d102      	bne.n	801a69e <_read_r+0x1e>
 801a698:	6823      	ldr	r3, [r4, #0]
 801a69a:	b103      	cbz	r3, 801a69e <_read_r+0x1e>
 801a69c:	602b      	str	r3, [r5, #0]
 801a69e:	bd38      	pop	{r3, r4, r5, pc}
 801a6a0:	240024ac 	.word	0x240024ac

0801a6a4 <_malloc_usable_size_r>:
 801a6a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6a8:	1f18      	subs	r0, r3, #4
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	bfbc      	itt	lt
 801a6ae:	580b      	ldrlt	r3, [r1, r0]
 801a6b0:	18c0      	addlt	r0, r0, r3
 801a6b2:	4770      	bx	lr

0801a6b4 <_init>:
 801a6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6b6:	bf00      	nop
 801a6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6ba:	bc08      	pop	{r3}
 801a6bc:	469e      	mov	lr, r3
 801a6be:	4770      	bx	lr

0801a6c0 <_fini>:
 801a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a6c2:	bf00      	nop
 801a6c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a6c6:	bc08      	pop	{r3}
 801a6c8:	469e      	mov	lr, r3
 801a6ca:	4770      	bx	lr

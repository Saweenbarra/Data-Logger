
Data-Logger.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001baa4  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000adc  0801bd48  0801bd48  0002bd48  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801c824  0801c824  0003034c  2**0
                  CONTENTS
  4 .ARM          00000008  0801c824  0801c824  0002c824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801c82c  0801c82c  0003034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801c82c  0801c82c  0002c82c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801c830  0801c830  0002c830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000034c  24000000  0801c834  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000453fc  24000350  0801cb80  00030350  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2404574c  0801cb80  0003574c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0003034c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0004a485  00000000  00000000  0003037a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007c1f  00000000  00000000  0007a7ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002440  00000000  00000000  00082420  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002148  00000000  00000000  00084860  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000431dd  00000000  00000000  000869a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000282d4  00000000  00000000  000c9b85  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00178766  00000000  00000000  000f1e59  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0026a5bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a46c  00000000  00000000  0026a63c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000350 	.word	0x24000350
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801bd2c 	.word	0x0801bd2c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000354 	.word	0x24000354
 80002dc:	0801bd2c 	.word	0x0801bd2c

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b972 	b.w	800068c <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	4688      	mov	r8, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14b      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4615      	mov	r5, r2
 80003d2:	d967      	bls.n	80004a4 <__udivmoddi4+0xe4>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b14a      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003da:	f1c2 0720 	rsb	r7, r2, #32
 80003de:	fa01 f302 	lsl.w	r3, r1, r2
 80003e2:	fa20 f707 	lsr.w	r7, r0, r7
 80003e6:	4095      	lsls	r5, r2
 80003e8:	ea47 0803 	orr.w	r8, r7, r3
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80003f8:	fa1f fc85 	uxth.w	ip, r5
 80003fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000400:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000404:	fb07 f10c 	mul.w	r1, r7, ip
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18eb      	adds	r3, r5, r3
 800040e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000412:	f080 811b 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8118 	bls.w	800064c <__udivmoddi4+0x28c>
 800041c:	3f02      	subs	r7, #2
 800041e:	442b      	add	r3, r5
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0fe 	udiv	r0, r3, lr
 8000428:	fb0e 3310 	mls	r3, lr, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fc0c 	mul.w	ip, r0, ip
 8000434:	45a4      	cmp	ip, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	192c      	adds	r4, r5, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8107 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000442:	45a4      	cmp	ip, r4
 8000444:	f240 8104 	bls.w	8000650 <__udivmoddi4+0x290>
 8000448:	3802      	subs	r0, #2
 800044a:	442c      	add	r4, r5
 800044c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000450:	eba4 040c 	sub.w	r4, r4, ip
 8000454:	2700      	movs	r7, #0
 8000456:	b11e      	cbz	r6, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c6 4300 	strd	r4, r3, [r6]
 8000460:	4639      	mov	r1, r7
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d909      	bls.n	800047e <__udivmoddi4+0xbe>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80eb 	beq.w	8000646 <__udivmoddi4+0x286>
 8000470:	2700      	movs	r7, #0
 8000472:	e9c6 0100 	strd	r0, r1, [r6]
 8000476:	4638      	mov	r0, r7
 8000478:	4639      	mov	r1, r7
 800047a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047e:	fab3 f783 	clz	r7, r3
 8000482:	2f00      	cmp	r7, #0
 8000484:	d147      	bne.n	8000516 <__udivmoddi4+0x156>
 8000486:	428b      	cmp	r3, r1
 8000488:	d302      	bcc.n	8000490 <__udivmoddi4+0xd0>
 800048a:	4282      	cmp	r2, r0
 800048c:	f200 80fa 	bhi.w	8000684 <__udivmoddi4+0x2c4>
 8000490:	1a84      	subs	r4, r0, r2
 8000492:	eb61 0303 	sbc.w	r3, r1, r3
 8000496:	2001      	movs	r0, #1
 8000498:	4698      	mov	r8, r3
 800049a:	2e00      	cmp	r6, #0
 800049c:	d0e0      	beq.n	8000460 <__udivmoddi4+0xa0>
 800049e:	e9c6 4800 	strd	r4, r8, [r6]
 80004a2:	e7dd      	b.n	8000460 <__udivmoddi4+0xa0>
 80004a4:	b902      	cbnz	r2, 80004a8 <__udivmoddi4+0xe8>
 80004a6:	deff      	udf	#255	; 0xff
 80004a8:	fab2 f282 	clz	r2, r2
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	f040 808f 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b2:	1b49      	subs	r1, r1, r5
 80004b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004b8:	fa1f f885 	uxth.w	r8, r5
 80004bc:	2701      	movs	r7, #1
 80004be:	fbb1 fcfe 	udiv	ip, r1, lr
 80004c2:	0c23      	lsrs	r3, r4, #16
 80004c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80004c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004cc:	fb08 f10c 	mul.w	r1, r8, ip
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d4:	18eb      	adds	r3, r5, r3
 80004d6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4299      	cmp	r1, r3
 80004de:	f200 80cd 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004e2:	4684      	mov	ip, r0
 80004e4:	1a59      	subs	r1, r3, r1
 80004e6:	b2a3      	uxth	r3, r4
 80004e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80004f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80004f4:	fb08 f800 	mul.w	r8, r8, r0
 80004f8:	45a0      	cmp	r8, r4
 80004fa:	d907      	bls.n	800050c <__udivmoddi4+0x14c>
 80004fc:	192c      	adds	r4, r5, r4
 80004fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000502:	d202      	bcs.n	800050a <__udivmoddi4+0x14a>
 8000504:	45a0      	cmp	r8, r4
 8000506:	f200 80b6 	bhi.w	8000676 <__udivmoddi4+0x2b6>
 800050a:	4618      	mov	r0, r3
 800050c:	eba4 0408 	sub.w	r4, r4, r8
 8000510:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000514:	e79f      	b.n	8000456 <__udivmoddi4+0x96>
 8000516:	f1c7 0c20 	rsb	ip, r7, #32
 800051a:	40bb      	lsls	r3, r7
 800051c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000520:	ea4e 0e03 	orr.w	lr, lr, r3
 8000524:	fa01 f407 	lsl.w	r4, r1, r7
 8000528:	fa20 f50c 	lsr.w	r5, r0, ip
 800052c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000530:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000534:	4325      	orrs	r5, r4
 8000536:	fbb3 f9f8 	udiv	r9, r3, r8
 800053a:	0c2c      	lsrs	r4, r5, #16
 800053c:	fb08 3319 	mls	r3, r8, r9, r3
 8000540:	fa1f fa8e 	uxth.w	sl, lr
 8000544:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000548:	fb09 f40a 	mul.w	r4, r9, sl
 800054c:	429c      	cmp	r4, r3
 800054e:	fa02 f207 	lsl.w	r2, r2, r7
 8000552:	fa00 f107 	lsl.w	r1, r0, r7
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1e 0303 	adds.w	r3, lr, r3
 800055c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000560:	f080 8087 	bcs.w	8000672 <__udivmoddi4+0x2b2>
 8000564:	429c      	cmp	r4, r3
 8000566:	f240 8084 	bls.w	8000672 <__udivmoddi4+0x2b2>
 800056a:	f1a9 0902 	sub.w	r9, r9, #2
 800056e:	4473      	add	r3, lr
 8000570:	1b1b      	subs	r3, r3, r4
 8000572:	b2ad      	uxth	r5, r5
 8000574:	fbb3 f0f8 	udiv	r0, r3, r8
 8000578:	fb08 3310 	mls	r3, r8, r0, r3
 800057c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000580:	fb00 fa0a 	mul.w	sl, r0, sl
 8000584:	45a2      	cmp	sl, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1e 0404 	adds.w	r4, lr, r4
 800058c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000590:	d26b      	bcs.n	800066a <__udivmoddi4+0x2aa>
 8000592:	45a2      	cmp	sl, r4
 8000594:	d969      	bls.n	800066a <__udivmoddi4+0x2aa>
 8000596:	3802      	subs	r0, #2
 8000598:	4474      	add	r4, lr
 800059a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800059e:	fba0 8902 	umull	r8, r9, r0, r2
 80005a2:	eba4 040a 	sub.w	r4, r4, sl
 80005a6:	454c      	cmp	r4, r9
 80005a8:	46c2      	mov	sl, r8
 80005aa:	464b      	mov	r3, r9
 80005ac:	d354      	bcc.n	8000658 <__udivmoddi4+0x298>
 80005ae:	d051      	beq.n	8000654 <__udivmoddi4+0x294>
 80005b0:	2e00      	cmp	r6, #0
 80005b2:	d069      	beq.n	8000688 <__udivmoddi4+0x2c8>
 80005b4:	ebb1 050a 	subs.w	r5, r1, sl
 80005b8:	eb64 0403 	sbc.w	r4, r4, r3
 80005bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80005c0:	40fd      	lsrs	r5, r7
 80005c2:	40fc      	lsrs	r4, r7
 80005c4:	ea4c 0505 	orr.w	r5, ip, r5
 80005c8:	e9c6 5400 	strd	r5, r4, [r6]
 80005cc:	2700      	movs	r7, #0
 80005ce:	e747      	b.n	8000460 <__udivmoddi4+0xa0>
 80005d0:	f1c2 0320 	rsb	r3, r2, #32
 80005d4:	fa20 f703 	lsr.w	r7, r0, r3
 80005d8:	4095      	lsls	r5, r2
 80005da:	fa01 f002 	lsl.w	r0, r1, r2
 80005de:	fa21 f303 	lsr.w	r3, r1, r3
 80005e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80005e6:	4338      	orrs	r0, r7
 80005e8:	0c01      	lsrs	r1, r0, #16
 80005ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80005ee:	fa1f f885 	uxth.w	r8, r5
 80005f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80005f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005fa:	fb07 f308 	mul.w	r3, r7, r8
 80005fe:	428b      	cmp	r3, r1
 8000600:	fa04 f402 	lsl.w	r4, r4, r2
 8000604:	d907      	bls.n	8000616 <__udivmoddi4+0x256>
 8000606:	1869      	adds	r1, r5, r1
 8000608:	f107 3cff 	add.w	ip, r7, #4294967295
 800060c:	d22f      	bcs.n	800066e <__udivmoddi4+0x2ae>
 800060e:	428b      	cmp	r3, r1
 8000610:	d92d      	bls.n	800066e <__udivmoddi4+0x2ae>
 8000612:	3f02      	subs	r7, #2
 8000614:	4429      	add	r1, r5
 8000616:	1acb      	subs	r3, r1, r3
 8000618:	b281      	uxth	r1, r0
 800061a:	fbb3 f0fe 	udiv	r0, r3, lr
 800061e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000622:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000626:	fb00 f308 	mul.w	r3, r0, r8
 800062a:	428b      	cmp	r3, r1
 800062c:	d907      	bls.n	800063e <__udivmoddi4+0x27e>
 800062e:	1869      	adds	r1, r5, r1
 8000630:	f100 3cff 	add.w	ip, r0, #4294967295
 8000634:	d217      	bcs.n	8000666 <__udivmoddi4+0x2a6>
 8000636:	428b      	cmp	r3, r1
 8000638:	d915      	bls.n	8000666 <__udivmoddi4+0x2a6>
 800063a:	3802      	subs	r0, #2
 800063c:	4429      	add	r1, r5
 800063e:	1ac9      	subs	r1, r1, r3
 8000640:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000644:	e73b      	b.n	80004be <__udivmoddi4+0xfe>
 8000646:	4637      	mov	r7, r6
 8000648:	4630      	mov	r0, r6
 800064a:	e709      	b.n	8000460 <__udivmoddi4+0xa0>
 800064c:	4607      	mov	r7, r0
 800064e:	e6e7      	b.n	8000420 <__udivmoddi4+0x60>
 8000650:	4618      	mov	r0, r3
 8000652:	e6fb      	b.n	800044c <__udivmoddi4+0x8c>
 8000654:	4541      	cmp	r1, r8
 8000656:	d2ab      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 8000658:	ebb8 0a02 	subs.w	sl, r8, r2
 800065c:	eb69 020e 	sbc.w	r2, r9, lr
 8000660:	3801      	subs	r0, #1
 8000662:	4613      	mov	r3, r2
 8000664:	e7a4      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000666:	4660      	mov	r0, ip
 8000668:	e7e9      	b.n	800063e <__udivmoddi4+0x27e>
 800066a:	4618      	mov	r0, r3
 800066c:	e795      	b.n	800059a <__udivmoddi4+0x1da>
 800066e:	4667      	mov	r7, ip
 8000670:	e7d1      	b.n	8000616 <__udivmoddi4+0x256>
 8000672:	4681      	mov	r9, r0
 8000674:	e77c      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000676:	3802      	subs	r0, #2
 8000678:	442c      	add	r4, r5
 800067a:	e747      	b.n	800050c <__udivmoddi4+0x14c>
 800067c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000680:	442b      	add	r3, r5
 8000682:	e72f      	b.n	80004e4 <__udivmoddi4+0x124>
 8000684:	4638      	mov	r0, r7
 8000686:	e708      	b.n	800049a <__udivmoddi4+0xda>
 8000688:	4637      	mov	r7, r6
 800068a:	e6e9      	b.n	8000460 <__udivmoddi4+0xa0>

0800068c <__aeabi_idiv0>:
 800068c:	4770      	bx	lr
 800068e:	bf00      	nop

08000690 <FDCAN_Config>:
#include <myprintf.h>

int FDCAN_Flag = 0;
int CAN_Flag = 0;

void FDCAN_Config(FDCAN_HandleTypeDef *hfdcan){
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	; 0x30
 8000694:	af02      	add	r7, sp, #8
 8000696:	6078      	str	r0, [r7, #4]
	FDCAN_FilterTypeDef sFilterConfig;

	  /* Configure Rx filter */
	  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000698:	2300      	movs	r3, #0
 800069a:	60bb      	str	r3, [r7, #8]
	  sFilterConfig.FilterIndex = 0;
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
	  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80006a0:	2302      	movs	r3, #2
 80006a2:	613b      	str	r3, [r7, #16]
	  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80006a4:	2301      	movs	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
	  sFilterConfig.FilterID1 = 0x321;
 80006a8:	f240 3321 	movw	r3, #801	; 0x321
 80006ac:	61bb      	str	r3, [r7, #24]
	  sFilterConfig.FilterID2 = 0x7FF;
 80006ae:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80006b2:	61fb      	str	r3, [r7, #28]
	  if (HAL_FDCAN_ConfigFilter(hfdcan, &sFilterConfig) == HAL_OK)
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	4619      	mov	r1, r3
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f006 ffa0 	bl	8007600 <HAL_FDCAN_ConfigFilter>
	  }

	  /* Configure global filter:
	     Filter all remote frames with STD and EXT ID
	     Reject non matching frames with STD ID and EXT ID */
	  if (HAL_FDCAN_ConfigGlobalFilter(hfdcan, FDCAN_REJECT, FDCAN_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE) != HAL_OK)
 80006c0:	2300      	movs	r3, #0
 80006c2:	9300      	str	r3, [sp, #0]
 80006c4:	2300      	movs	r3, #0
 80006c6:	2202      	movs	r2, #2
 80006c8:	2102      	movs	r1, #2
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f007 f80e 	bl	80076ec <HAL_FDCAN_ConfigGlobalFilter>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <FDCAN_Config+0x4a>
	  {
	    Error_Handler();
 80006d6:	f003 fea7 	bl	8004428 <Error_Handler>
	  }
	if (HAL_FDCAN_Start(hfdcan) != HAL_OK)
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f007 f856 	bl	800778c <HAL_FDCAN_Start>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <FDCAN_Config+0x5a>
	  {
	    Error_Handler();
 80006e6:	f003 fe9f 	bl	8004428 <Error_Handler>
	  }
	if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80006ea:	2200      	movs	r2, #0
 80006ec:	2101      	movs	r1, #1
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f007 f9d6 	bl	8007aa0 <HAL_FDCAN_ActivateNotification>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <FDCAN_Config+0x6e>
	  {
	    /* Notification Error */
	    Error_Handler();
 80006fa:	f003 fe95 	bl	8004428 <Error_Handler>
	  }
	HAL_FDCAN_EnableTxDelayCompensation(hfdcan);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f007 f821 	bl	8007746 <HAL_FDCAN_EnableTxDelayCompensation>

}
 8000704:	bf00      	nop
 8000706:	3728      	adds	r7, #40	; 0x28
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}

0800070c <numPlaces>:

int numPlaces (int n) {
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	if (n < 10) return 1;
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	2b09      	cmp	r3, #9
 8000718:	dc01      	bgt.n	800071e <numPlaces+0x12>
 800071a:	2301      	movs	r3, #1
 800071c:	e030      	b.n	8000780 <numPlaces+0x74>
	if (n < 100) return 2;
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	2b63      	cmp	r3, #99	; 0x63
 8000722:	dc01      	bgt.n	8000728 <numPlaces+0x1c>
 8000724:	2302      	movs	r3, #2
 8000726:	e02b      	b.n	8000780 <numPlaces+0x74>
	if (n < 1000) return 3;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800072e:	da01      	bge.n	8000734 <numPlaces+0x28>
 8000730:	2303      	movs	r3, #3
 8000732:	e025      	b.n	8000780 <numPlaces+0x74>
	if (n < 10000) return 4;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	f242 720f 	movw	r2, #9999	; 0x270f
 800073a:	4293      	cmp	r3, r2
 800073c:	dc01      	bgt.n	8000742 <numPlaces+0x36>
 800073e:	2304      	movs	r3, #4
 8000740:	e01e      	b.n	8000780 <numPlaces+0x74>
	if (n < 100000) return 5;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <numPlaces+0x80>)
 8000746:	4293      	cmp	r3, r2
 8000748:	dc01      	bgt.n	800074e <numPlaces+0x42>
 800074a:	2305      	movs	r3, #5
 800074c:	e018      	b.n	8000780 <numPlaces+0x74>
	if (n < 1000000) return 6;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	4a0f      	ldr	r2, [pc, #60]	; (8000790 <numPlaces+0x84>)
 8000752:	4293      	cmp	r3, r2
 8000754:	dc01      	bgt.n	800075a <numPlaces+0x4e>
 8000756:	2306      	movs	r3, #6
 8000758:	e012      	b.n	8000780 <numPlaces+0x74>
	if (n < 10000000) return 7;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <numPlaces+0x88>)
 800075e:	4293      	cmp	r3, r2
 8000760:	dc01      	bgt.n	8000766 <numPlaces+0x5a>
 8000762:	2307      	movs	r3, #7
 8000764:	e00c      	b.n	8000780 <numPlaces+0x74>
	if (n < 100000000) return 8;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	4a0b      	ldr	r2, [pc, #44]	; (8000798 <numPlaces+0x8c>)
 800076a:	4293      	cmp	r3, r2
 800076c:	dc01      	bgt.n	8000772 <numPlaces+0x66>
 800076e:	2308      	movs	r3, #8
 8000770:	e006      	b.n	8000780 <numPlaces+0x74>
	if (n < 1000000000) return 9;
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	4a09      	ldr	r2, [pc, #36]	; (800079c <numPlaces+0x90>)
 8000776:	4293      	cmp	r3, r2
 8000778:	dc01      	bgt.n	800077e <numPlaces+0x72>
 800077a:	2309      	movs	r3, #9
 800077c:	e000      	b.n	8000780 <numPlaces+0x74>
	if (n < 10000000000) return 10;
 800077e:	230a      	movs	r3, #10
	if (n < 1000000000000) return 12;
	if (n < 10000000000000) return 13;
	if (n < 100000000000000) return 14;
	if (n < 1000000000000000) return 15;
	return 16;
}
 8000780:	4618      	mov	r0, r3
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	0001869f 	.word	0x0001869f
 8000790:	000f423f 	.word	0x000f423f
 8000794:	0098967f 	.word	0x0098967f
 8000798:	05f5e0ff 	.word	0x05f5e0ff
 800079c:	3b9ac9ff 	.word	0x3b9ac9ff

080007a0 <CANFD_Data_Process>:

int CANFD_Data_Process(char WriteArray[], int StrIndex){
 80007a0:	b590      	push	{r4, r7, lr}
 80007a2:	ed2d 8b02 	vpush	{d8}
 80007a6:	b0ad      	sub	sp, #180	; 0xb4
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	6039      	str	r1, [r7, #0]
	int found = 0, i = 0, size = 0;
 80007ae:	2300      	movs	r3, #0
 80007b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80007b4:	2300      	movs	r3, #0
 80007b6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007ba:	2300      	movs	r3, #0
 80007bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char inst[128];

	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 80007c0:	2300      	movs	r3, #0
 80007c2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007c6:	e014      	b.n	80007f2 <CANFD_Data_Process+0x52>
		if(CanFDFrame.id == Configs[i].id){
 80007c8:	4ba1      	ldr	r3, [pc, #644]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 80007ca:	681a      	ldr	r2, [r3, #0]
 80007cc:	49a1      	ldr	r1, [pc, #644]	; (8000a54 <CANFD_Data_Process+0x2b4>)
 80007ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007d2:	208c      	movs	r0, #140	; 0x8c
 80007d4:	fb00 f303 	mul.w	r3, r0, r3
 80007d8:	440b      	add	r3, r1
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	429a      	cmp	r2, r3
 80007de:	d103      	bne.n	80007e8 <CANFD_Data_Process+0x48>
			found = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			break;
 80007e6:	e008      	b.n	80007fa <CANFD_Data_Process+0x5a>
	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 80007e8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007ec:	3301      	adds	r3, #1
 80007ee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80007f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0e6      	beq.n	80007c8 <CANFD_Data_Process+0x28>
		}
	}

	if(found == 0){
 80007fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d11f      	bne.n	8000842 <CANFD_Data_Process+0xa2>
		for(int j = 0; j < CanFDFrame.length; j++){
 8000802:	2300      	movs	r3, #0
 8000804:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000808:	e015      	b.n	8000836 <CANFD_Data_Process+0x96>
			StrIndex += sprintf(WriteArray + StrIndex, "%X", CanFDFrame.data.bytes[j]);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	687a      	ldr	r2, [r7, #4]
 800080e:	18d0      	adds	r0, r2, r3
 8000810:	4a8f      	ldr	r2, [pc, #572]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 8000812:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000816:	4413      	add	r3, r2
 8000818:	3310      	adds	r3, #16
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	461a      	mov	r2, r3
 800081e:	498e      	ldr	r1, [pc, #568]	; (8000a58 <CANFD_Data_Process+0x2b8>)
 8000820:	f01a f9a6 	bl	801ab70 <siprintf>
 8000824:	4602      	mov	r2, r0
 8000826:	683b      	ldr	r3, [r7, #0]
 8000828:	4413      	add	r3, r2
 800082a:	603b      	str	r3, [r7, #0]
		for(int j = 0; j < CanFDFrame.length; j++){
 800082c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000830:	3301      	adds	r3, #1
 8000832:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000836:	4b86      	ldr	r3, [pc, #536]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 8000838:	689a      	ldr	r2, [r3, #8]
 800083a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800083e:	429a      	cmp	r2, r3
 8000840:	d8e3      	bhi.n	800080a <CANFD_Data_Process+0x6a>
		}
	}
	if(found == 1){
 8000842:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000846:	2b01      	cmp	r3, #1
 8000848:	f040 80fa 	bne.w	8000a40 <CANFD_Data_Process+0x2a0>
		char delim[] = " ";
 800084c:	2320      	movs	r3, #32
 800084e:	81bb      	strh	r3, [r7, #12]
		sprintf(inst,"%s",Configs[i].Intsructions);
 8000850:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000854:	228c      	movs	r2, #140	; 0x8c
 8000856:	fb02 f303 	mul.w	r3, r2, r3
 800085a:	3308      	adds	r3, #8
 800085c:	4a7d      	ldr	r2, [pc, #500]	; (8000a54 <CANFD_Data_Process+0x2b4>)
 800085e:	4413      	add	r3, r2
 8000860:	1d1a      	adds	r2, r3, #4
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4611      	mov	r1, r2
 8000868:	4618      	mov	r0, r3
 800086a:	f01a f9a1 	bl	801abb0 <strcpy>
		uint32_t k = 0, c = 0;
 800086e:	2300      	movs	r3, #0
 8000870:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    char *ptr = strtok(inst, delim);
 800087a:	f107 020c 	add.w	r2, r7, #12
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f01a f99b 	bl	801abc0 <strtok>
 800088a:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	    int digits = numPlaces(Configs[i].Distribution);
 800088e:	4a71      	ldr	r2, [pc, #452]	; (8000a54 <CANFD_Data_Process+0x2b4>)
 8000890:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000894:	218c      	movs	r1, #140	; 0x8c
 8000896:	fb01 f303 	mul.w	r3, r1, r3
 800089a:	4413      	add	r3, r2
 800089c:	3308      	adds	r3, #8
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f7ff ff33 	bl	800070c <numPlaces>
 80008a6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	    while(ptr != NULL){
 80008aa:	e0c2      	b.n	8000a32 <CANFD_Data_Process+0x292>

			size = (int)(Configs[i].Distribution/pow(10,digits - c - 1))%10;
 80008ac:	4a69      	ldr	r2, [pc, #420]	; (8000a54 <CANFD_Data_Process+0x2b4>)
 80008ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80008b2:	218c      	movs	r1, #140	; 0x8c
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	3308      	adds	r3, #8
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	ee07 3a90 	vmov	s15, r3
 80008c2:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 80008c6:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80008ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80008ce:	1ad3      	subs	r3, r2, r3
 80008d0:	3b01      	subs	r3, #1
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80008da:	eeb0 1b47 	vmov.f64	d1, d7
 80008de:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 80008e2:	f019 f99d 	bl	8019c20 <pow>
 80008e6:	eeb0 6b40 	vmov.f64	d6, d0
 80008ea:	ee88 7b06 	vdiv.f64	d7, d8, d6
 80008ee:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80008f2:	ee17 2a90 	vmov	r2, s15
 80008f6:	4b59      	ldr	r3, [pc, #356]	; (8000a5c <CANFD_Data_Process+0x2bc>)
 80008f8:	fb83 1302 	smull	r1, r3, r3, r2
 80008fc:	1099      	asrs	r1, r3, #2
 80008fe:	17d3      	asrs	r3, r2, #31
 8000900:	1ac9      	subs	r1, r1, r3
 8000902:	460b      	mov	r3, r1
 8000904:	009b      	lsls	r3, r3, #2
 8000906:	440b      	add	r3, r1
 8000908:	005b      	lsls	r3, r3, #1
 800090a:	1ad3      	subs	r3, r2, r3
 800090c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			switch(size){
 8000910:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000914:	3b01      	subs	r3, #1
 8000916:	2b07      	cmp	r3, #7
 8000918:	d878      	bhi.n	8000a0c <CANFD_Data_Process+0x26c>
 800091a:	a201      	add	r2, pc, #4	; (adr r2, 8000920 <CANFD_Data_Process+0x180>)
 800091c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000920:	08000941 	.word	0x08000941
 8000924:	08000971 	.word	0x08000971
 8000928:	08000a0d 	.word	0x08000a0d
 800092c:	080009a3 	.word	0x080009a3
 8000930:	08000a0d 	.word	0x08000a0d
 8000934:	08000a0d 	.word	0x08000a0d
 8000938:	08000a0d 	.word	0x08000a0d
 800093c:	080009d5 	.word	0x080009d5
				case 1:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.bytes[k]);
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	687a      	ldr	r2, [r7, #4]
 8000944:	18d0      	adds	r0, r2, r3
 8000946:	4a42      	ldr	r2, [pc, #264]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 8000948:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800094c:	4413      	add	r3, r2
 800094e:	3310      	adds	r3, #16
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000958:	f01a f90a 	bl	801ab70 <siprintf>
 800095c:	4602      	mov	r2, r0
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	4413      	add	r3, r2
 8000962:	603b      	str	r3, [r7, #0]
					k++;
 8000964:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000968:	3301      	adds	r3, #1
 800096a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 800096e:	e04d      	b.n	8000a0c <CANFD_Data_Process+0x26c>
				case 2:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.shorts[k/2]);
 8000970:	683b      	ldr	r3, [r7, #0]
 8000972:	687a      	ldr	r2, [r7, #4]
 8000974:	18d0      	adds	r0, r2, r3
 8000976:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800097a:	085b      	lsrs	r3, r3, #1
 800097c:	4a34      	ldr	r2, [pc, #208]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 800097e:	3308      	adds	r3, #8
 8000980:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000984:	461a      	mov	r2, r3
 8000986:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800098a:	f01a f8f1 	bl	801ab70 <siprintf>
 800098e:	4602      	mov	r2, r0
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	4413      	add	r3, r2
 8000994:	603b      	str	r3, [r7, #0]
					k+=2;
 8000996:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800099a:	3302      	adds	r3, #2
 800099c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 80009a0:	e034      	b.n	8000a0c <CANFD_Data_Process+0x26c>
				case 4:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.ints[k/4]);
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	18d0      	adds	r0, r2, r3
 80009a8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009ac:	089b      	lsrs	r3, r3, #2
 80009ae:	4a28      	ldr	r2, [pc, #160]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 80009b0:	3304      	adds	r3, #4
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	461a      	mov	r2, r3
 80009b8:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009bc:	f01a f8d8 	bl	801ab70 <siprintf>
 80009c0:	4602      	mov	r2, r0
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	4413      	add	r3, r2
 80009c6:	603b      	str	r3, [r7, #0]
					k+=4;
 80009c8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009cc:	3304      	adds	r3, #4
 80009ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 80009d2:	e01b      	b.n	8000a0c <CANFD_Data_Process+0x26c>
				case 8:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFDFrame.data.longs[k/8]);
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	18d0      	adds	r0, r2, r3
 80009da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80009de:	08db      	lsrs	r3, r3, #3
 80009e0:	4a1b      	ldr	r2, [pc, #108]	; (8000a50 <CANFD_Data_Process+0x2b0>)
 80009e2:	3302      	adds	r3, #2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	4413      	add	r3, r2
 80009e8:	e9d3 3400 	ldrd	r3, r4, [r3]
 80009ec:	461a      	mov	r2, r3
 80009ee:	4623      	mov	r3, r4
 80009f0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80009f4:	f01a f8bc 	bl	801ab70 <siprintf>
 80009f8:	4602      	mov	r2, r0
 80009fa:	683b      	ldr	r3, [r7, #0]
 80009fc:	4413      	add	r3, r2
 80009fe:	603b      	str	r3, [r7, #0]
					k+=8;
 8000a00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000a04:	3308      	adds	r3, #8
 8000a06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000a0a:	bf00      	nop
			}
			c++;
 8000a0c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000a10:	3301      	adds	r3, #1
 8000a12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    	if(c == digits){
 8000a16:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000a1a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000a1e:	429a      	cmp	r2, r3
 8000a20:	d00d      	beq.n	8000a3e <CANFD_Data_Process+0x29e>
	    		break;
	    	}
	    	ptr = strtok(NULL, delim);
 8000a22:	f107 030c 	add.w	r3, r7, #12
 8000a26:	4619      	mov	r1, r3
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f01a f8c9 	bl	801abc0 <strtok>
 8000a2e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	    while(ptr != NULL){
 8000a32:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f47f af38 	bne.w	80008ac <CANFD_Data_Process+0x10c>
 8000a3c:	e000      	b.n	8000a40 <CANFD_Data_Process+0x2a0>
	    		break;
 8000a3e:	bf00      	nop
	    }
	}
	return StrIndex;
 8000a40:	683b      	ldr	r3, [r7, #0]
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	37b4      	adds	r7, #180	; 0xb4
 8000a46:	46bd      	mov	sp, r7
 8000a48:	ecbd 8b02 	vpop	{d8}
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	24044068 	.word	0x24044068
 8000a54:	24040744 	.word	0x24040744
 8000a58:	0801bd48 	.word	0x0801bd48
 8000a5c:	66666667 	.word	0x66666667

08000a60 <CAN_Data_Process>:

int CAN_Data_Process(char WriteArray[], int StrIndex){
 8000a60:	b590      	push	{r4, r7, lr}
 8000a62:	ed2d 8b02 	vpush	{d8}
 8000a66:	b0ad      	sub	sp, #180	; 0xb4
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	6039      	str	r1, [r7, #0]
	int found = 0, i = 0, size = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8000a74:	2300      	movs	r3, #0
 8000a76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	char inst[128];

	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000a80:	2300      	movs	r3, #0
 8000a82:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000a86:	e014      	b.n	8000ab2 <CAN_Data_Process+0x52>
		if(CanFrame.id == Configs[i].id){
 8000a88:	4ba2      	ldr	r3, [pc, #648]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000a8a:	681a      	ldr	r2, [r3, #0]
 8000a8c:	49a2      	ldr	r1, [pc, #648]	; (8000d18 <CAN_Data_Process+0x2b8>)
 8000a8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000a92:	208c      	movs	r0, #140	; 0x8c
 8000a94:	fb00 f303 	mul.w	r3, r0, r3
 8000a98:	440b      	add	r3, r1
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	429a      	cmp	r2, r3
 8000a9e:	d103      	bne.n	8000aa8 <CAN_Data_Process+0x48>
			found = 1;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
			break;
 8000aa6:	e008      	b.n	8000aba <CAN_Data_Process+0x5a>
	for(i = 0; i <(sizeof(*Configs)/sizeof(ReadInstruction)); i++){
 8000aa8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000aac:	3301      	adds	r3, #1
 8000aae:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8000ab2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d0e6      	beq.n	8000a88 <CAN_Data_Process+0x28>
		}
	}

	if(found == 0){
 8000aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d120      	bne.n	8000b04 <CAN_Data_Process+0xa4>
		for(int j = 0; j < CanFrame.length; j++){
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000ac8:	e015      	b.n	8000af6 <CAN_Data_Process+0x96>
			StrIndex += sprintf(WriteArray + StrIndex, "%X", CanFrame.data.bytes[j]);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	687a      	ldr	r2, [r7, #4]
 8000ace:	18d0      	adds	r0, r2, r3
 8000ad0:	4a90      	ldr	r2, [pc, #576]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000ad2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000ad6:	4413      	add	r3, r2
 8000ad8:	3310      	adds	r3, #16
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	498f      	ldr	r1, [pc, #572]	; (8000d1c <CAN_Data_Process+0x2bc>)
 8000ae0:	f01a f846 	bl	801ab70 <siprintf>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	4413      	add	r3, r2
 8000aea:	603b      	str	r3, [r7, #0]
		for(int j = 0; j < CanFrame.length; j++){
 8000aec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000af0:	3301      	adds	r3, #1
 8000af2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8000af6:	4b87      	ldr	r3, [pc, #540]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000af8:	795b      	ldrb	r3, [r3, #5]
 8000afa:	461a      	mov	r2, r3
 8000afc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000b00:	4293      	cmp	r3, r2
 8000b02:	dbe2      	blt.n	8000aca <CAN_Data_Process+0x6a>
		  }
	}
	if(found == 1){
 8000b04:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	f040 80fb 	bne.w	8000d04 <CAN_Data_Process+0x2a4>
		char delim[] = " ";
 8000b0e:	2320      	movs	r3, #32
 8000b10:	81bb      	strh	r3, [r7, #12]
		sprintf(inst,"%s",Configs[i].Intsructions);
 8000b12:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b16:	228c      	movs	r2, #140	; 0x8c
 8000b18:	fb02 f303 	mul.w	r3, r2, r3
 8000b1c:	3308      	adds	r3, #8
 8000b1e:	4a7e      	ldr	r2, [pc, #504]	; (8000d18 <CAN_Data_Process+0x2b8>)
 8000b20:	4413      	add	r3, r2
 8000b22:	1d1a      	adds	r2, r3, #4
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f01a f840 	bl	801abb0 <strcpy>
		uint32_t k = 0, c = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000b36:	2300      	movs	r3, #0
 8000b38:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    char *ptr = strtok(inst, delim);
 8000b3c:	f107 020c 	add.w	r2, r7, #12
 8000b40:	f107 0310 	add.w	r3, r7, #16
 8000b44:	4611      	mov	r1, r2
 8000b46:	4618      	mov	r0, r3
 8000b48:	f01a f83a 	bl	801abc0 <strtok>
 8000b4c:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

	    int digits = numPlaces(Configs[i].Distribution);
 8000b50:	4a71      	ldr	r2, [pc, #452]	; (8000d18 <CAN_Data_Process+0x2b8>)
 8000b52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b56:	218c      	movs	r1, #140	; 0x8c
 8000b58:	fb01 f303 	mul.w	r3, r1, r3
 8000b5c:	4413      	add	r3, r2
 8000b5e:	3308      	adds	r3, #8
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff fdd2 	bl	800070c <numPlaces>
 8000b68:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

	    while(ptr != NULL){
 8000b6c:	e0c3      	b.n	8000cf6 <CAN_Data_Process+0x296>

			size = (int)(Configs[i].Distribution/pow(10,digits - c - 1))%10;
 8000b6e:	4a6a      	ldr	r2, [pc, #424]	; (8000d18 <CAN_Data_Process+0x2b8>)
 8000b70:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000b74:	218c      	movs	r1, #140	; 0x8c
 8000b76:	fb01 f303 	mul.w	r3, r1, r3
 8000b7a:	4413      	add	r3, r2
 8000b7c:	3308      	adds	r3, #8
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	ee07 3a90 	vmov	s15, r3
 8000b84:	eeb8 8b67 	vcvt.f64.u32	d8, s15
 8000b88:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	3b01      	subs	r3, #1
 8000b94:	ee07 3a90 	vmov	s15, r3
 8000b98:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000b9c:	eeb0 1b47 	vmov.f64	d1, d7
 8000ba0:	eeb2 0b04 	vmov.f64	d0, #36	; 0x41200000  10.0
 8000ba4:	f019 f83c 	bl	8019c20 <pow>
 8000ba8:	eeb0 6b40 	vmov.f64	d6, d0
 8000bac:	ee88 7b06 	vdiv.f64	d7, d8, d6
 8000bb0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8000bb4:	ee17 2a90 	vmov	r2, s15
 8000bb8:	4b59      	ldr	r3, [pc, #356]	; (8000d20 <CAN_Data_Process+0x2c0>)
 8000bba:	fb83 1302 	smull	r1, r3, r3, r2
 8000bbe:	1099      	asrs	r1, r3, #2
 8000bc0:	17d3      	asrs	r3, r2, #31
 8000bc2:	1ac9      	subs	r1, r1, r3
 8000bc4:	460b      	mov	r3, r1
 8000bc6:	009b      	lsls	r3, r3, #2
 8000bc8:	440b      	add	r3, r1
 8000bca:	005b      	lsls	r3, r3, #1
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

			switch(size){
 8000bd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	2b07      	cmp	r3, #7
 8000bda:	d879      	bhi.n	8000cd0 <CAN_Data_Process+0x270>
 8000bdc:	a201      	add	r2, pc, #4	; (adr r2, 8000be4 <CAN_Data_Process+0x184>)
 8000bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be2:	bf00      	nop
 8000be4:	08000c05 	.word	0x08000c05
 8000be8:	08000c35 	.word	0x08000c35
 8000bec:	08000cd1 	.word	0x08000cd1
 8000bf0:	08000c67 	.word	0x08000c67
 8000bf4:	08000cd1 	.word	0x08000cd1
 8000bf8:	08000cd1 	.word	0x08000cd1
 8000bfc:	08000cd1 	.word	0x08000cd1
 8000c00:	08000c99 	.word	0x08000c99
				case 1:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.bytes[k]);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	18d0      	adds	r0, r2, r3
 8000c0a:	4a42      	ldr	r2, [pc, #264]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000c0c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c10:	4413      	add	r3, r2
 8000c12:	3310      	adds	r3, #16
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c1c:	f019 ffa8 	bl	801ab70 <siprintf>
 8000c20:	4602      	mov	r2, r0
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	4413      	add	r3, r2
 8000c26:	603b      	str	r3, [r7, #0]
					k++;
 8000c28:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c2c:	3301      	adds	r3, #1
 8000c2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000c32:	e04d      	b.n	8000cd0 <CAN_Data_Process+0x270>
				case 2:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.shorts[k/2]);
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	687a      	ldr	r2, [r7, #4]
 8000c38:	18d0      	adds	r0, r2, r3
 8000c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	4a34      	ldr	r2, [pc, #208]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000c42:	3308      	adds	r3, #8
 8000c44:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c4e:	f019 ff8f 	bl	801ab70 <siprintf>
 8000c52:	4602      	mov	r2, r0
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	603b      	str	r3, [r7, #0]
					k+=2;
 8000c5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c5e:	3302      	adds	r3, #2
 8000c60:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000c64:	e034      	b.n	8000cd0 <CAN_Data_Process+0x270>
				case 4:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.ints[k/4]);
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	18d0      	adds	r0, r2, r3
 8000c6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c70:	089b      	lsrs	r3, r3, #2
 8000c72:	4a28      	ldr	r2, [pc, #160]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000c74:	3304      	adds	r3, #4
 8000c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c7a:	461a      	mov	r2, r3
 8000c7c:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000c80:	f019 ff76 	bl	801ab70 <siprintf>
 8000c84:	4602      	mov	r2, r0
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	603b      	str	r3, [r7, #0]
					k+=4;
 8000c8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000c90:	3304      	adds	r3, #4
 8000c92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000c96:	e01b      	b.n	8000cd0 <CAN_Data_Process+0x270>
				case 8:
					StrIndex += sprintf(WriteArray + StrIndex, ptr, CanFrame.data.longs[k/8]);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	687a      	ldr	r2, [r7, #4]
 8000c9c:	18d0      	adds	r0, r2, r3
 8000c9e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000ca2:	08db      	lsrs	r3, r3, #3
 8000ca4:	4a1b      	ldr	r2, [pc, #108]	; (8000d14 <CAN_Data_Process+0x2b4>)
 8000ca6:	3302      	adds	r3, #2
 8000ca8:	00db      	lsls	r3, r3, #3
 8000caa:	4413      	add	r3, r2
 8000cac:	e9d3 3400 	ldrd	r3, r4, [r3]
 8000cb0:	461a      	mov	r2, r3
 8000cb2:	4623      	mov	r3, r4
 8000cb4:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000cb8:	f019 ff5a 	bl	801ab70 <siprintf>
 8000cbc:	4602      	mov	r2, r0
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	603b      	str	r3, [r7, #0]
					k+=8;
 8000cc4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8000cc8:	3308      	adds	r3, #8
 8000cca:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
					break;
 8000cce:	bf00      	nop
			}
			c++;
 8000cd0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	    	if(c == digits){
 8000cda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000cde:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d00d      	beq.n	8000d02 <CAN_Data_Process+0x2a2>
	    		break;
	    	}
	    	ptr = strtok(NULL, delim);
 8000ce6:	f107 030c 	add.w	r3, r7, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	2000      	movs	r0, #0
 8000cee:	f019 ff67 	bl	801abc0 <strtok>
 8000cf2:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98
	    while(ptr != NULL){
 8000cf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	f47f af37 	bne.w	8000b6e <CAN_Data_Process+0x10e>
 8000d00:	e000      	b.n	8000d04 <CAN_Data_Process+0x2a4>
	    		break;
 8000d02:	bf00      	nop
	    }
	}
	return StrIndex;
 8000d04:	683b      	ldr	r3, [r7, #0]
}
 8000d06:	4618      	mov	r0, r3
 8000d08:	37b4      	adds	r7, #180	; 0xb4
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	ecbd 8b02 	vpop	{d8}
 8000d10:	bd90      	pop	{r4, r7, pc}
 8000d12:	bf00      	nop
 8000d14:	240440e0 	.word	0x240440e0
 8000d18:	24040744 	.word	0x24040744
 8000d1c:	0801bd48 	.word	0x0801bd48
 8000d20:	66666667 	.word	0x66666667

08000d24 <HAL_FDCAN_RxFifo0Callback>:

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan1, uint32_t RxFifo0ITs)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	6039      	str	r1, [r7, #0]
	if (HAL_FDCAN_GetRxMessage(hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000d2e:	4b62      	ldr	r3, [pc, #392]	; (8000eb8 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000d30:	4a62      	ldr	r2, [pc, #392]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d32:	2140      	movs	r1, #64	; 0x40
 8000d34:	6878      	ldr	r0, [r7, #4]
 8000d36:	f006 fd55 	bl	80077e4 <HAL_FDCAN_GetRxMessage>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	f040 80b6 	bne.w	8000eae <HAL_FDCAN_RxFifo0Callback+0x18a>
			      {
					uint32_t time = HAL_GetTick();
 8000d42:	f004 f859 	bl	8004df8 <HAL_GetTick>
 8000d46:	60f8      	str	r0, [r7, #12]
					HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8000d48:	2101      	movs	r1, #1
 8000d4a:	485d      	ldr	r0, [pc, #372]	; (8000ec0 <HAL_FDCAN_RxFifo0Callback+0x19c>)
 8000d4c:	f007 fd93 	bl	8008876 <HAL_GPIO_TogglePin>
					printf("Packet Acquired!\n");
 8000d50:	485c      	ldr	r0, [pc, #368]	; (8000ec4 <HAL_FDCAN_RxFifo0Callback+0x1a0>)
 8000d52:	f019 fec1 	bl	801aad8 <puts>
					if(RxHeader.FDFormat == FDCAN_CLASSIC_CAN){
 8000d56:	4b59      	ldr	r3, [pc, #356]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d58:	699b      	ldr	r3, [r3, #24]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d122      	bne.n	8000da4 <HAL_FDCAN_RxFifo0Callback+0x80>
						CanFrame.id = RxHeader.Identifier;
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4a59      	ldr	r2, [pc, #356]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d64:	6013      	str	r3, [r2, #0]
						CanFrame.length = RxHeader.DataLength/65536;
 8000d66:	4b55      	ldr	r3, [pc, #340]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	0c1b      	lsrs	r3, r3, #16
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4b56      	ldr	r3, [pc, #344]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d70:	715a      	strb	r2, [r3, #5]
						CanFrame.time = time;
 8000d72:	4a55      	ldr	r2, [pc, #340]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	6093      	str	r3, [r2, #8]
						CAN_Flag = 1;
 8000d78:	4b54      	ldr	r3, [pc, #336]	; (8000ecc <HAL_FDCAN_RxFifo0Callback+0x1a8>)
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	601a      	str	r2, [r3, #0]
						memcpy(CanFrame.data.bytes, RxData, CanFrame.length);
 8000d7e:	4b52      	ldr	r3, [pc, #328]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d80:	795b      	ldrb	r3, [r3, #5]
 8000d82:	461a      	mov	r2, r3
 8000d84:	494c      	ldr	r1, [pc, #304]	; (8000eb8 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000d86:	4852      	ldr	r0, [pc, #328]	; (8000ed0 <HAL_FDCAN_RxFifo0Callback+0x1ac>)
 8000d88:	f019 fd76 	bl	801a878 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8000d8c:	4b4b      	ldr	r3, [pc, #300]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000d94:	d103      	bne.n	8000d9e <HAL_FDCAN_RxFifo0Callback+0x7a>
							CanFrame.extended = 1;
 8000d96:	4b4c      	ldr	r3, [pc, #304]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	711a      	strb	r2, [r3, #4]
 8000d9c:	e002      	b.n	8000da4 <HAL_FDCAN_RxFifo0Callback+0x80>
						}
						else{
							CanFrame.extended = 0;
 8000d9e:	4b4a      	ldr	r3, [pc, #296]	; (8000ec8 <HAL_FDCAN_RxFifo0Callback+0x1a4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	711a      	strb	r2, [r3, #4]
						}
					}
					if(RxHeader.FDFormat == FDCAN_FD_CAN){
 8000da4:	4b45      	ldr	r3, [pc, #276]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000da6:	699b      	ldr	r3, [r3, #24]
 8000da8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000dac:	d17f      	bne.n	8000eae <HAL_FDCAN_RxFifo0Callback+0x18a>
						CanFDFrame.id = RxHeader.Identifier;
 8000dae:	4b43      	ldr	r3, [pc, #268]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	4a48      	ldr	r2, [pc, #288]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000db4:	6013      	str	r3, [r2, #0]

						switch(RxHeader.DataLength/65536){
 8000db6:	4b41      	ldr	r3, [pc, #260]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	0c1b      	lsrs	r3, r3, #16
 8000dbc:	3b01      	subs	r3, #1
 8000dbe:	2b0e      	cmp	r3, #14
 8000dc0:	d85c      	bhi.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
 8000dc2:	a201      	add	r2, pc, #4	; (adr r2, 8000dc8 <HAL_FDCAN_RxFifo0Callback+0xa4>)
 8000dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc8:	08000e05 	.word	0x08000e05
 8000dcc:	08000e0d 	.word	0x08000e0d
 8000dd0:	08000e15 	.word	0x08000e15
 8000dd4:	08000e1d 	.word	0x08000e1d
 8000dd8:	08000e25 	.word	0x08000e25
 8000ddc:	08000e2d 	.word	0x08000e2d
 8000de0:	08000e35 	.word	0x08000e35
 8000de4:	08000e3d 	.word	0x08000e3d
 8000de8:	08000e45 	.word	0x08000e45
 8000dec:	08000e4d 	.word	0x08000e4d
 8000df0:	08000e55 	.word	0x08000e55
 8000df4:	08000e5d 	.word	0x08000e5d
 8000df8:	08000e65 	.word	0x08000e65
 8000dfc:	08000e6d 	.word	0x08000e6d
 8000e00:	08000e75 	.word	0x08000e75
							case 1:
								CanFDFrame.length = 1;
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e06:	2201      	movs	r2, #1
 8000e08:	609a      	str	r2, [r3, #8]
								break;
 8000e0a:	e037      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 2:
								CanFDFrame.length = 2;
 8000e0c:	4b31      	ldr	r3, [pc, #196]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e0e:	2202      	movs	r2, #2
 8000e10:	609a      	str	r2, [r3, #8]
								break;
 8000e12:	e033      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 3:
								CanFDFrame.length = 3;
 8000e14:	4b2f      	ldr	r3, [pc, #188]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	609a      	str	r2, [r3, #8]
								break;
 8000e1a:	e02f      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 4:
								CanFDFrame.length = 4;
 8000e1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e1e:	2204      	movs	r2, #4
 8000e20:	609a      	str	r2, [r3, #8]
								break;
 8000e22:	e02b      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 5:
								CanFDFrame.length = 5;
 8000e24:	4b2b      	ldr	r3, [pc, #172]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e26:	2205      	movs	r2, #5
 8000e28:	609a      	str	r2, [r3, #8]
								break;
 8000e2a:	e027      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 6:
								CanFDFrame.length = 6;
 8000e2c:	4b29      	ldr	r3, [pc, #164]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e2e:	2206      	movs	r2, #6
 8000e30:	609a      	str	r2, [r3, #8]
								break;
 8000e32:	e023      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 7:
								CanFDFrame.length = 7;
 8000e34:	4b27      	ldr	r3, [pc, #156]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e36:	2207      	movs	r2, #7
 8000e38:	609a      	str	r2, [r3, #8]
								break;
 8000e3a:	e01f      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 8:
								CanFDFrame.length = 8;
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e3e:	2208      	movs	r2, #8
 8000e40:	609a      	str	r2, [r3, #8]
								break;
 8000e42:	e01b      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 9:
								CanFDFrame.length = 12;
 8000e44:	4b23      	ldr	r3, [pc, #140]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e46:	220c      	movs	r2, #12
 8000e48:	609a      	str	r2, [r3, #8]
								break;
 8000e4a:	e017      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 10:
								CanFDFrame.length = 16;
 8000e4c:	4b21      	ldr	r3, [pc, #132]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e4e:	2210      	movs	r2, #16
 8000e50:	609a      	str	r2, [r3, #8]
								break;
 8000e52:	e013      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 11:
								CanFDFrame.length = 20;
 8000e54:	4b1f      	ldr	r3, [pc, #124]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e56:	2214      	movs	r2, #20
 8000e58:	609a      	str	r2, [r3, #8]
								break;
 8000e5a:	e00f      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 12:
								CanFDFrame.length = 24;
 8000e5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e5e:	2218      	movs	r2, #24
 8000e60:	609a      	str	r2, [r3, #8]
								break;
 8000e62:	e00b      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 13:
								CanFDFrame.length = 32;
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e66:	2220      	movs	r2, #32
 8000e68:	609a      	str	r2, [r3, #8]
								break;
 8000e6a:	e007      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 14:
								CanFDFrame.length = 48;
 8000e6c:	4b19      	ldr	r3, [pc, #100]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e6e:	2230      	movs	r2, #48	; 0x30
 8000e70:	609a      	str	r2, [r3, #8]
								break;
 8000e72:	e003      	b.n	8000e7c <HAL_FDCAN_RxFifo0Callback+0x158>
							case 15:
								CanFDFrame.length = 64;
 8000e74:	4b17      	ldr	r3, [pc, #92]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e76:	2240      	movs	r2, #64	; 0x40
 8000e78:	609a      	str	r2, [r3, #8]
								break;
 8000e7a:	bf00      	nop
						}

						CanFDFrame.time = time;
 8000e7c:	4a15      	ldr	r2, [pc, #84]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	60d3      	str	r3, [r2, #12]
						FDCAN_Flag = 1;
 8000e82:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <HAL_FDCAN_RxFifo0Callback+0x1b4>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	601a      	str	r2, [r3, #0]
						memcpy(CanFDFrame.data.bytes, RxData, CanFDFrame.length);
 8000e88:	4b12      	ldr	r3, [pc, #72]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000e8a:	689b      	ldr	r3, [r3, #8]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	490a      	ldr	r1, [pc, #40]	; (8000eb8 <HAL_FDCAN_RxFifo0Callback+0x194>)
 8000e90:	4812      	ldr	r0, [pc, #72]	; (8000edc <HAL_FDCAN_RxFifo0Callback+0x1b8>)
 8000e92:	f019 fcf1 	bl	801a878 <memcpy>
						if(RxHeader.IdType == FDCAN_EXTENDED_ID){
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_FDCAN_RxFifo0Callback+0x198>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e9e:	d103      	bne.n	8000ea8 <HAL_FDCAN_RxFifo0Callback+0x184>
							CanFDFrame.extended = 1;
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	711a      	strb	r2, [r3, #4]
				  			  printf("%c",RxData[i]);
				  	  }
				  	  printf("\n");
				  	*/
			      }
}
 8000ea6:	e002      	b.n	8000eae <HAL_FDCAN_RxFifo0Callback+0x18a>
							CanFDFrame.extended = 0;
 8000ea8:	4b0a      	ldr	r3, [pc, #40]	; (8000ed4 <HAL_FDCAN_RxFifo0Callback+0x1b0>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	711a      	strb	r2, [r3, #4]
}
 8000eae:	bf00      	nop
 8000eb0:	3710      	adds	r7, #16
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	24044028 	.word	0x24044028
 8000ebc:	240440b8 	.word	0x240440b8
 8000ec0:	58020400 	.word	0x58020400
 8000ec4:	0801bd4c 	.word	0x0801bd4c
 8000ec8:	240440e0 	.word	0x240440e0
 8000ecc:	24000370 	.word	0x24000370
 8000ed0:	240440f0 	.word	0x240440f0
 8000ed4:	24044068 	.word	0x24044068
 8000ed8:	2400036c 	.word	0x2400036c
 8000edc:	24044078 	.word	0x24044078

08000ee0 <gps_msg_config>:
#include "main.h"
#include <myprintf.h>
#include <stdbool.h>
#include <buffer.h>

int gps_msg_config(UART_HandleTypeDef *huart, const char *nema, int rus1){
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b09e      	sub	sp, #120	; 0x78
 8000ee4:	af02      	add	r7, sp, #8
 8000ee6:	60f8      	str	r0, [r7, #12]
 8000ee8:	60b9      	str	r1, [r7, #8]
 8000eea:	607a      	str	r2, [r7, #4]
	if (strlen(nema) != 3) return 1;
 8000eec:	68b8      	ldr	r0, [r7, #8]
 8000eee:	f7ff f9f7 	bl	80002e0 <strlen>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d001      	beq.n	8000efc <gps_msg_config+0x1c>
 8000ef8:	2301      	movs	r3, #1
 8000efa:	e052      	b.n	8000fa2 <gps_msg_config+0xc2>


	char msg[32];
	snprintf(msg, sizeof(msg)-1,"PUBX,40,%s,0,%i,0,0,0,0", nema, rus1);
 8000efc:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	9300      	str	r3, [sp, #0]
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4a29      	ldr	r2, [pc, #164]	; (8000fac <gps_msg_config+0xcc>)
 8000f08:	211f      	movs	r1, #31
 8000f0a:	f019 fdfd 	bl	801ab08 <sniprintf>

	int checksum_int = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000f12:	2300      	movs	r3, #0
 8000f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f16:	e00b      	b.n	8000f30 <gps_msg_config+0x50>
		checksum_int ^= (unsigned char)msg[i];
 8000f18:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f1e:	4413      	add	r3, r2
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	461a      	mov	r2, r3
 8000f24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f26:	4053      	eors	r3, r2
 8000f28:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; msg[i] && i < 32; i++)
 8000f2a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f30:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f36:	4413      	add	r3, r2
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d002      	beq.n	8000f44 <gps_msg_config+0x64>
 8000f3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f40:	2b1f      	cmp	r3, #31
 8000f42:	dde9      	ble.n	8000f18 <gps_msg_config+0x38>

	char checksum[8];
	snprintf(checksum, sizeof(checksum)-1, "*%.2X", checksum_int);
 8000f44:	f107 0040 	add.w	r0, r7, #64	; 0x40
 8000f48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8000f4a:	4a19      	ldr	r2, [pc, #100]	; (8000fb0 <gps_msg_config+0xd0>)
 8000f4c:	2107      	movs	r1, #7
 8000f4e:	f019 fddb 	bl	801ab08 <sniprintf>

	char messagetosend[42];
	snprintf(messagetosend, sizeof(messagetosend)-1, "$%s%s\r\n", msg, checksum);
 8000f52:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8000f56:	f107 0014 	add.w	r0, r7, #20
 8000f5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4613      	mov	r3, r2
 8000f62:	4a14      	ldr	r2, [pc, #80]	; (8000fb4 <gps_msg_config+0xd4>)
 8000f64:	2129      	movs	r1, #41	; 0x29
 8000f66:	f019 fdcf 	bl	801ab08 <sniprintf>
	printf("\n\rSending: ");
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <gps_msg_config+0xd8>)
 8000f6c:	f019 fd40 	bl	801a9f0 <iprintf>
	printf("%s", messagetosend);
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4619      	mov	r1, r3
 8000f76:	4811      	ldr	r0, [pc, #68]	; (8000fbc <gps_msg_config+0xdc>)
 8000f78:	f019 fd3a 	bl	801a9f0 <iprintf>
	if (HAL_UART_Transmit(huart, messagetosend, strlen(messagetosend), 100) != HAL_OK){
 8000f7c:	f107 0314 	add.w	r3, r7, #20
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff f9ad 	bl	80002e0 <strlen>
 8000f86:	4603      	mov	r3, r0
 8000f88:	b29a      	uxth	r2, r3
 8000f8a:	f107 0114 	add.w	r1, r7, #20
 8000f8e:	2364      	movs	r3, #100	; 0x64
 8000f90:	68f8      	ldr	r0, [r7, #12]
 8000f92:	f00f fa18 	bl	80103c6 <HAL_UART_Transmit>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <gps_msg_config+0xc0>
		Error_Handler();
 8000f9c:	f003 fa44 	bl	8004428 <Error_Handler>
	}
	return 0;
 8000fa0:	2300      	movs	r3, #0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3770      	adds	r7, #112	; 0x70
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	0801bd60 	.word	0x0801bd60
 8000fb0:	0801bd78 	.word	0x0801bd78
 8000fb4:	0801bd80 	.word	0x0801bd80
 8000fb8:	0801bd88 	.word	0x0801bd88
 8000fbc:	0801bd94 	.word	0x0801bd94

08000fc0 <gps_rate_config>:

int gps_rate_config(UART_HandleTypeDef *huart, uint16_t measRate, uint16_t navRate, uint16_t timeRef){
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	; 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	4608      	mov	r0, r1
 8000fca:	4611      	mov	r1, r2
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4603      	mov	r3, r0
 8000fd0:	817b      	strh	r3, [r7, #10]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	813b      	strh	r3, [r7, #8]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	80fb      	strh	r3, [r7, #6]
		uint16_t length = 6;
 8000fda:	2306      	movs	r3, #6
 8000fdc:	83fb      	strh	r3, [r7, #30]
		uint8_t msg[14];
		msg[0] = 0xb5;
 8000fde:	23b5      	movs	r3, #181	; 0xb5
 8000fe0:	743b      	strb	r3, [r7, #16]
		msg[1] = 0x62;
 8000fe2:	2362      	movs	r3, #98	; 0x62
 8000fe4:	747b      	strb	r3, [r7, #17]
		msg[2] = 0x06;
 8000fe6:	2306      	movs	r3, #6
 8000fe8:	74bb      	strb	r3, [r7, #18]
		msg[3] = 0x08;
 8000fea:	2308      	movs	r3, #8
 8000fec:	74fb      	strb	r3, [r7, #19]
		msg[4] = length;
 8000fee:	8bfb      	ldrh	r3, [r7, #30]
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	753b      	strb	r3, [r7, #20]
		msg[5] = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	757b      	strb	r3, [r7, #21]
		msg[6] = measRate;
 8000ff8:	897b      	ldrh	r3, [r7, #10]
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	75bb      	strb	r3, [r7, #22]
		msg[7] = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	75fb      	strb	r3, [r7, #23]
		msg[8] = navRate;
 8001002:	893b      	ldrh	r3, [r7, #8]
 8001004:	b2db      	uxtb	r3, r3
 8001006:	763b      	strb	r3, [r7, #24]
		msg[9] = 0;
 8001008:	2300      	movs	r3, #0
 800100a:	767b      	strb	r3, [r7, #25]
		msg[10] = timeRef;
 800100c:	88fb      	ldrh	r3, [r7, #6]
 800100e:	b2db      	uxtb	r3, r3
 8001010:	76bb      	strb	r3, [r7, #26]
		msg[11] = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	76fb      	strb	r3, [r7, #27]

		uint8_t CK_A = 0;
 8001016:	2300      	movs	r3, #0
 8001018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		uint8_t CK_B = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 8001022:	2302      	movs	r3, #2
 8001024:	623b      	str	r3, [r7, #32]
 8001026:	e013      	b.n	8001050 <gps_rate_config+0x90>
	        CK_A = CK_A + msg[i];
 8001028:	f107 0210 	add.w	r2, r7, #16
 800102c:	6a3b      	ldr	r3, [r7, #32]
 800102e:	4413      	add	r3, r2
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001036:	4413      	add	r3, r2
 8001038:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	        CK_A &= 0xFF;
	        CK_B = CK_B + CK_A;
 800103c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8001040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001044:	4413      	add	r3, r2
 8001046:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		for(int i=2; i<12; i++){
 800104a:	6a3b      	ldr	r3, [r7, #32]
 800104c:	3301      	adds	r3, #1
 800104e:	623b      	str	r3, [r7, #32]
 8001050:	6a3b      	ldr	r3, [r7, #32]
 8001052:	2b0b      	cmp	r3, #11
 8001054:	dde8      	ble.n	8001028 <gps_rate_config+0x68>
	        CK_B &= 0xFF;
	    }
		msg[12] = CK_A;
 8001056:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800105a:	773b      	strb	r3, [r7, #28]
		msg[13] = CK_B;
 800105c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001060:	777b      	strb	r3, [r7, #29]

		if (HAL_UART_Transmit(huart, msg, sizeof(msg), 100) != HAL_OK){
 8001062:	f107 0110 	add.w	r1, r7, #16
 8001066:	2364      	movs	r3, #100	; 0x64
 8001068:	220e      	movs	r2, #14
 800106a:	68f8      	ldr	r0, [r7, #12]
 800106c:	f00f f9ab 	bl	80103c6 <HAL_UART_Transmit>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d003      	beq.n	800107e <gps_rate_config+0xbe>
				Error_Handler();
 8001076:	f003 f9d7 	bl	8004428 <Error_Handler>
				return 1;
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <gps_rate_config+0xc0>
			}
		return 0;
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	3728      	adds	r7, #40	; 0x28
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}

08001088 <HAL_UART_RxHalfCpltCallback>:
}

int GPS_flag1 = 0;
int GPS_flag2 = 0;

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart){
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  	/* Prevent unused argument(s) compilation warning */
  	UNUSED(huart);
  	memset(rxBuf+(BUFFLENGTH/2), 0, BUFFLENGTH/2);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_UART_RxHalfCpltCallback+0x24>)
 8001092:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8001096:	2100      	movs	r1, #0
 8001098:	4618      	mov	r0, r3
 800109a:	f019 fbf8 	bl	801a88e <memset>
  	GPS_flag1 = 1;
 800109e:	4b04      	ldr	r3, [pc, #16]	; (80010b0 <HAL_UART_RxHalfCpltCallback+0x28>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	601a      	str	r2, [r3, #0]
}
 80010a4:	bf00      	nop
 80010a6:	3708      	adds	r7, #8
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2404448a 	.word	0x2404448a
 80010b0:	24000374 	.word	0x24000374

080010b4 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
	UNUSED(huart);
	memset(rxBuf, 0, BUFFLENGTH/2);
 80010bc:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80010c0:	2100      	movs	r1, #0
 80010c2:	4805      	ldr	r0, [pc, #20]	; (80010d8 <HAL_UART_RxCpltCallback+0x24>)
 80010c4:	f019 fbe3 	bl	801a88e <memset>
	GPS_flag2 = 1;
 80010c8:	4b04      	ldr	r3, [pc, #16]	; (80010dc <HAL_UART_RxCpltCallback+0x28>)
 80010ca:	2201      	movs	r2, #1
 80010cc:	601a      	str	r2, [r3, #0]
}
 80010ce:	bf00      	nop
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2404432c 	.word	0x2404432c
 80010dc:	24000378 	.word	0x24000378

080010e0 <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 80010ec:	4b0a      	ldr	r3, [pc, #40]	; (8001118 <NRF24_DelayMicroSeconds+0x38>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a0a      	ldr	r2, [pc, #40]	; (800111c <NRF24_DelayMicroSeconds+0x3c>)
 80010f2:	fba2 2303 	umull	r2, r3, r2, r3
 80010f6:	0c9a      	lsrs	r2, r3, #18
 80010f8:	68fb      	ldr	r3, [r7, #12]
 80010fa:	fb02 f303 	mul.w	r3, r2, r3
 80010fe:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 8001100:	bf00      	nop
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1e5a      	subs	r2, r3, #1
 8001106:	60fa      	str	r2, [r7, #12]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d1fa      	bne.n	8001102 <NRF24_DelayMicroSeconds+0x22>
}
 800110c:	bf00      	nop
 800110e:	3714      	adds	r7, #20
 8001110:	46bd      	mov	sp, r7
 8001112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001116:	4770      	bx	lr
 8001118:	24000010 	.word	0x24000010
 800111c:	165e9f81 	.word	0x165e9f81

08001120 <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_SET);
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b00      	cmp	r3, #0
 800112c:	d008      	beq.n	8001140 <NRF24_csn+0x20>
 800112e:	4b0a      	ldr	r3, [pc, #40]	; (8001158 <NRF24_csn+0x38>)
 8001130:	6818      	ldr	r0, [r3, #0]
 8001132:	4b0a      	ldr	r3, [pc, #40]	; (800115c <NRF24_csn+0x3c>)
 8001134:	881b      	ldrh	r3, [r3, #0]
 8001136:	2201      	movs	r2, #1
 8001138:	4619      	mov	r1, r3
 800113a:	f007 fb83 	bl	8008844 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
}
 800113e:	e007      	b.n	8001150 <NRF24_csn+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CSN_PIN, GPIO_PIN_RESET);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <NRF24_csn+0x38>)
 8001142:	6818      	ldr	r0, [r3, #0]
 8001144:	4b05      	ldr	r3, [pc, #20]	; (800115c <NRF24_csn+0x3c>)
 8001146:	881b      	ldrh	r3, [r3, #0]
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	f007 fb7a 	bl	8008844 <HAL_GPIO_WritePin>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}
 8001158:	24000384 	.word	0x24000384
 800115c:	24000388 	.word	0x24000388

08001160 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	if(state) HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_SET);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d008      	beq.n	8001180 <NRF24_ce+0x20>
 800116e:	4b0a      	ldr	r3, [pc, #40]	; (8001198 <NRF24_ce+0x38>)
 8001170:	6818      	ldr	r0, [r3, #0]
 8001172:	4b0a      	ldr	r3, [pc, #40]	; (800119c <NRF24_ce+0x3c>)
 8001174:	881b      	ldrh	r3, [r3, #0]
 8001176:	2201      	movs	r2, #1
 8001178:	4619      	mov	r1, r3
 800117a:	f007 fb63 	bl	8008844 <HAL_GPIO_WritePin>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
}
 800117e:	e007      	b.n	8001190 <NRF24_ce+0x30>
	else HAL_GPIO_WritePin(nrf24_PORT, nrf24_CE_PIN, GPIO_PIN_RESET);
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <NRF24_ce+0x38>)
 8001182:	6818      	ldr	r0, [r3, #0]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <NRF24_ce+0x3c>)
 8001186:	881b      	ldrh	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	4619      	mov	r1, r3
 800118c:	f007 fb5a 	bl	8008844 <HAL_GPIO_WritePin>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	24000384 	.word	0x24000384
 800119c:	2400038a 	.word	0x2400038a

080011a0 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	//Put CSN low
	NRF24_csn(0);
 80011aa:	2000      	movs	r0, #0
 80011ac:	f7ff ffb8 	bl	8001120 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 80011b0:	79fb      	ldrb	r3, [r7, #7]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	2201      	movs	r2, #1
 80011c2:	480a      	ldr	r0, [pc, #40]	; (80011ec <NRF24_read_register+0x4c>)
 80011c4:	f00e f8f6 	bl	800f3b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 80011c8:	f107 030c 	add.w	r3, r7, #12
 80011cc:	1c59      	adds	r1, r3, #1
 80011ce:	2364      	movs	r3, #100	; 0x64
 80011d0:	2201      	movs	r2, #1
 80011d2:	4806      	ldr	r0, [pc, #24]	; (80011ec <NRF24_read_register+0x4c>)
 80011d4:	f00e fae0 	bl	800f798 <HAL_SPI_Receive>
	retData = spiBuf[1];
 80011d8:	7b7b      	ldrb	r3, [r7, #13]
 80011da:	73fb      	strb	r3, [r7, #15]
	//Bring CSN high
	NRF24_csn(1);
 80011dc:	2001      	movs	r0, #1
 80011de:	f7ff ff9f 	bl	8001120 <NRF24_csn>
	return retData;
 80011e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3710      	adds	r7, #16
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	2400038c 	.word	0x2400038c

080011f0 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	4603      	mov	r3, r0
 80011f8:	6039      	str	r1, [r7, #0]
 80011fa:	71fb      	strb	r3, [r7, #7]
 80011fc:	4613      	mov	r3, r2
 80011fe:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001200:	2000      	movs	r0, #0
 8001202:	f7ff ff8d 	bl	8001120 <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8001206:	79fb      	ldrb	r3, [r7, #7]
 8001208:	f003 031f 	and.w	r3, r3, #31
 800120c:	b2db      	uxtb	r3, r3
 800120e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8001210:	f107 010c 	add.w	r1, r7, #12
 8001214:	2364      	movs	r3, #100	; 0x64
 8001216:	2201      	movs	r2, #1
 8001218:	4808      	ldr	r0, [pc, #32]	; (800123c <NRF24_read_registerN+0x4c>)
 800121a:	f00e f8cb 	bl	800f3b4 <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 800121e:	79bb      	ldrb	r3, [r7, #6]
 8001220:	b29a      	uxth	r2, r3
 8001222:	2364      	movs	r3, #100	; 0x64
 8001224:	6839      	ldr	r1, [r7, #0]
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <NRF24_read_registerN+0x4c>)
 8001228:	f00e fab6 	bl	800f798 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ff77 	bl	8001120 <NRF24_csn>
}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	2400038c 	.word	0x2400038c

08001240 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	460a      	mov	r2, r1
 800124a:	71fb      	strb	r3, [r7, #7]
 800124c:	4613      	mov	r3, r2
 800124e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001250:	2000      	movs	r0, #0
 8001252:	f7ff ff65 	bl	8001120 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f043 0320 	orr.w	r3, r3, #32
 800125c:	b2db      	uxtb	r3, r3
 800125e:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8001264:	f107 010c 	add.w	r1, r7, #12
 8001268:	2364      	movs	r3, #100	; 0x64
 800126a:	2202      	movs	r2, #2
 800126c:	4804      	ldr	r0, [pc, #16]	; (8001280 <NRF24_write_register+0x40>)
 800126e:	f00e f8a1 	bl	800f3b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001272:	2001      	movs	r0, #1
 8001274:	f7ff ff54 	bl	8001120 <NRF24_csn>
}
 8001278:	bf00      	nop
 800127a:	3710      	adds	r7, #16
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400038c 	.word	0x2400038c

08001284 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	4603      	mov	r3, r0
 800128c:	6039      	str	r1, [r7, #0]
 800128e:	71fb      	strb	r3, [r7, #7]
 8001290:	4613      	mov	r3, r2
 8001292:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff ff43 	bl	8001120 <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 800129a:	79fb      	ldrb	r3, [r7, #7]
 800129c:	f043 0320 	orr.w	r3, r3, #32
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 80012a4:	f107 010c 	add.w	r1, r7, #12
 80012a8:	2364      	movs	r3, #100	; 0x64
 80012aa:	2201      	movs	r2, #1
 80012ac:	4808      	ldr	r0, [pc, #32]	; (80012d0 <NRF24_write_registerN+0x4c>)
 80012ae:	f00e f881 	bl	800f3b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 80012b2:	79bb      	ldrb	r3, [r7, #6]
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	6839      	ldr	r1, [r7, #0]
 80012ba:	4805      	ldr	r0, [pc, #20]	; (80012d0 <NRF24_write_registerN+0x4c>)
 80012bc:	f00e f87a 	bl	800f3b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 80012c0:	2001      	movs	r0, #1
 80012c2:	f7ff ff2d 	bl	8001120 <NRF24_csn>
}
 80012c6:	bf00      	nop
 80012c8:	3710      	adds	r7, #16
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	2400038c 	.word	0x2400038c

080012d4 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b084      	sub	sp, #16
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	460b      	mov	r3, r1
 80012de:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff ff1d 	bl	8001120 <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 80012e6:	23a0      	movs	r3, #160	; 0xa0
 80012e8:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 80012ea:	f107 010f 	add.w	r1, r7, #15
 80012ee:	2364      	movs	r3, #100	; 0x64
 80012f0:	2201      	movs	r2, #1
 80012f2:	4808      	ldr	r0, [pc, #32]	; (8001314 <NRF24_write_payload+0x40>)
 80012f4:	f00e f85e 	bl	800f3b4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 80012f8:	78fb      	ldrb	r3, [r7, #3]
 80012fa:	b29a      	uxth	r2, r3
 80012fc:	2364      	movs	r3, #100	; 0x64
 80012fe:	6879      	ldr	r1, [r7, #4]
 8001300:	4804      	ldr	r0, [pc, #16]	; (8001314 <NRF24_write_payload+0x40>)
 8001302:	f00e f857 	bl	800f3b4 <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8001306:	2001      	movs	r0, #1
 8001308:	f7ff ff0a 	bl	8001120 <NRF24_csn>
}
 800130c:	bf00      	nop
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	2400038c 	.word	0x2400038c

08001318 <NRF24_flush_tx>:
	NRF24_csn(1);
}

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 800131c:	21ff      	movs	r1, #255	; 0xff
 800131e:	20e1      	movs	r0, #225	; 0xe1
 8001320:	f7ff ff8e 	bl	8001240 <NRF24_write_register>
}
 8001324:	bf00      	nop
 8001326:	bd80      	pop	{r7, pc}

08001328 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 800132c:	21ff      	movs	r1, #255	; 0xff
 800132e:	20e2      	movs	r0, #226	; 0xe2
 8001330:	f7ff ff86 	bl	8001240 <NRF24_write_register>
}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}

08001338 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 800133e:	2007      	movs	r0, #7
 8001340:	f7ff ff2e 	bl	80011a0 <NRF24_read_register>
 8001344:	4603      	mov	r3, r0
 8001346:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8001348:	79fb      	ldrb	r3, [r7, #7]
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <NRF24_begin>:

//12. Begin function
void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8001354:	b082      	sub	sp, #8
 8001356:	b580      	push	{r7, lr}
 8001358:	b084      	sub	sp, #16
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	61fb      	str	r3, [r7, #28]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8001368:	4b66      	ldr	r3, [pc, #408]	; (8001504 <NRF24_begin+0x1b0>)
 800136a:	4618      	mov	r0, r3
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2288      	movs	r2, #136	; 0x88
 8001372:	4619      	mov	r1, r3
 8001374:	f019 fa80 	bl	801a878 <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8001378:	4a63      	ldr	r2, [pc, #396]	; (8001508 <NRF24_begin+0x1b4>)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 800137e:	4a63      	ldr	r2, [pc, #396]	; (800150c <NRF24_begin+0x1b8>)
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8001384:	4a62      	ldr	r2, [pc, #392]	; (8001510 <NRF24_begin+0x1bc>)
 8001386:	883b      	ldrh	r3, [r7, #0]
 8001388:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 800138a:	2001      	movs	r0, #1
 800138c:	f7ff fec8 	bl	8001120 <NRF24_csn>
	NRF24_ce(0);
 8001390:	2000      	movs	r0, #0
 8001392:	f7ff fee5 	bl	8001160 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8001396:	2005      	movs	r0, #5
 8001398:	f003 fd3a 	bl	8004e10 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 800139c:	2108      	movs	r1, #8
 800139e:	2000      	movs	r0, #0
 80013a0:	f7ff ff4e 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 80013a4:	213f      	movs	r1, #63	; 0x3f
 80013a6:	2001      	movs	r0, #1
 80013a8:	f7ff ff4a 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 80013ac:	2103      	movs	r1, #3
 80013ae:	2002      	movs	r0, #2
 80013b0:	f7ff ff46 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 80013b4:	2103      	movs	r1, #3
 80013b6:	2003      	movs	r0, #3
 80013b8:	f7ff ff42 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 80013bc:	2103      	movs	r1, #3
 80013be:	2004      	movs	r0, #4
 80013c0:	f7ff ff3e 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 80013c4:	2102      	movs	r1, #2
 80013c6:	2005      	movs	r0, #5
 80013c8:	f7ff ff3a 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 80013cc:	210f      	movs	r1, #15
 80013ce:	2006      	movs	r0, #6
 80013d0:	f7ff ff36 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 80013d4:	210e      	movs	r1, #14
 80013d6:	2007      	movs	r0, #7
 80013d8:	f7ff ff32 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 80013dc:	2100      	movs	r1, #0
 80013de:	2008      	movs	r0, #8
 80013e0:	f7ff ff2e 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 80013e4:	2100      	movs	r1, #0
 80013e6:	2009      	movs	r0, #9
 80013e8:	f7ff ff2a 	bl	8001240 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 80013ec:	23e7      	movs	r3, #231	; 0xe7
 80013ee:	733b      	strb	r3, [r7, #12]
 80013f0:	23e7      	movs	r3, #231	; 0xe7
 80013f2:	72fb      	strb	r3, [r7, #11]
 80013f4:	23e7      	movs	r3, #231	; 0xe7
 80013f6:	72bb      	strb	r3, [r7, #10]
 80013f8:	23e7      	movs	r3, #231	; 0xe7
 80013fa:	727b      	strb	r3, [r7, #9]
 80013fc:	23e7      	movs	r3, #231	; 0xe7
 80013fe:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8001400:	f107 0308 	add.w	r3, r7, #8
 8001404:	2205      	movs	r2, #5
 8001406:	4619      	mov	r1, r3
 8001408:	200a      	movs	r0, #10
 800140a:	f7ff ff3b 	bl	8001284 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 800140e:	23c2      	movs	r3, #194	; 0xc2
 8001410:	733b      	strb	r3, [r7, #12]
 8001412:	23c2      	movs	r3, #194	; 0xc2
 8001414:	72fb      	strb	r3, [r7, #11]
 8001416:	23c2      	movs	r3, #194	; 0xc2
 8001418:	72bb      	strb	r3, [r7, #10]
 800141a:	23c2      	movs	r3, #194	; 0xc2
 800141c:	727b      	strb	r3, [r7, #9]
 800141e:	23c2      	movs	r3, #194	; 0xc2
 8001420:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8001422:	f107 0308 	add.w	r3, r7, #8
 8001426:	2205      	movs	r2, #5
 8001428:	4619      	mov	r1, r3
 800142a:	200b      	movs	r0, #11
 800142c:	f7ff ff2a 	bl	8001284 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8001430:	21c3      	movs	r1, #195	; 0xc3
 8001432:	200c      	movs	r0, #12
 8001434:	f7ff ff04 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8001438:	21c4      	movs	r1, #196	; 0xc4
 800143a:	200d      	movs	r0, #13
 800143c:	f7ff ff00 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8001440:	21c5      	movs	r1, #197	; 0xc5
 8001442:	200e      	movs	r0, #14
 8001444:	f7ff fefc 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8001448:	21c6      	movs	r1, #198	; 0xc6
 800144a:	200f      	movs	r0, #15
 800144c:	f7ff fef8 	bl	8001240 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8001450:	23e7      	movs	r3, #231	; 0xe7
 8001452:	733b      	strb	r3, [r7, #12]
 8001454:	23e7      	movs	r3, #231	; 0xe7
 8001456:	72fb      	strb	r3, [r7, #11]
 8001458:	23e7      	movs	r3, #231	; 0xe7
 800145a:	72bb      	strb	r3, [r7, #10]
 800145c:	23e7      	movs	r3, #231	; 0xe7
 800145e:	727b      	strb	r3, [r7, #9]
 8001460:	23e7      	movs	r3, #231	; 0xe7
 8001462:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);
 8001464:	f107 0308 	add.w	r3, r7, #8
 8001468:	2205      	movs	r2, #5
 800146a:	4619      	mov	r1, r3
 800146c:	2010      	movs	r0, #16
 800146e:	f7ff ff09 	bl	8001284 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8001472:	2100      	movs	r1, #0
 8001474:	2011      	movs	r0, #17
 8001476:	f7ff fee3 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 800147a:	2100      	movs	r1, #0
 800147c:	2012      	movs	r0, #18
 800147e:	f7ff fedf 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8001482:	2100      	movs	r1, #0
 8001484:	2013      	movs	r0, #19
 8001486:	f7ff fedb 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 800148a:	2100      	movs	r1, #0
 800148c:	2014      	movs	r0, #20
 800148e:	f7ff fed7 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8001492:	2100      	movs	r1, #0
 8001494:	2015      	movs	r0, #21
 8001496:	f7ff fed3 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 800149a:	2100      	movs	r1, #0
 800149c:	2016      	movs	r0, #22
 800149e:	f7ff fecf 	bl	8001240 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 80014a2:	f000 fa89 	bl	80019b8 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 80014a6:	2100      	movs	r1, #0
 80014a8:	201c      	movs	r0, #28
 80014aa:	f7ff fec9 	bl	8001240 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 80014ae:	2100      	movs	r1, #0
 80014b0:	201d      	movs	r0, #29
 80014b2:	f7ff fec5 	bl	8001240 <NRF24_write_register>
	printRadioSettings();
 80014b6:	f000 fa99 	bl	80019ec <printRadioSettings>
	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 80014ba:	210f      	movs	r1, #15
 80014bc:	200f      	movs	r0, #15
 80014be:	f000 f8ad 	bl	800161c <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 80014c2:	2003      	movs	r0, #3
 80014c4:	f000 f927 	bl	8001716 <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 80014c8:	2001      	movs	r0, #1
 80014ca:	f000 f95d 	bl	8001788 <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 80014ce:	2002      	movs	r0, #2
 80014d0:	f000 f9a0 	bl	8001814 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 80014d4:	f000 f8f2 	bl	80016bc <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 80014d8:	2020      	movs	r0, #32
 80014da:	f000 f8cf 	bl	800167c <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 80014de:	f000 fa62 	bl	80019a6 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 80014e2:	204c      	movs	r0, #76	; 0x4c
 80014e4:	f000 f8b5 	bl	8001652 <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 80014e8:	f7ff ff16 	bl	8001318 <NRF24_flush_tx>
	NRF24_flush_rx();
 80014ec:	f7ff ff1c 	bl	8001328 <NRF24_flush_rx>
	
	NRF24_powerDown();
 80014f0:	f000 f9b8 	bl	8001864 <NRF24_powerDown>
	
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80014fe:	b002      	add	sp, #8
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	2400038c 	.word	0x2400038c
 8001508:	24000384 	.word	0x24000384
 800150c:	24000388 	.word	0x24000388
 8001510:	2400038a 	.word	0x2400038a

08001514 <NRF24_stopListening>:
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
}
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8001518:	2000      	movs	r0, #0
 800151a:	f7ff fe21 	bl	8001160 <NRF24_ce>
	NRF24_flush_tx();
 800151e:	f7ff fefb 	bl	8001318 <NRF24_flush_tx>
	NRF24_flush_rx();
 8001522:	f7ff ff01 	bl	8001328 <NRF24_flush_rx>
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8001538:	f000 fa35 	bl	80019a6 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 800153c:	78fb      	ldrb	r3, [r7, #3]
 800153e:	4619      	mov	r1, r3
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f000 f9ce 	bl	80018e2 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8001546:	f003 fc57 	bl	8004df8 <HAL_GetTick>
 800154a:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 800154c:	230a      	movs	r3, #10
 800154e:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8001550:	f107 030d 	add.w	r3, r7, #13
 8001554:	2201      	movs	r2, #1
 8001556:	4619      	mov	r1, r3
 8001558:	2008      	movs	r0, #8
 800155a:	f7ff fe49 	bl	80011f0 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 800155e:	f7ff feeb 	bl	8001338 <NRF24_get_status>
 8001562:	4603      	mov	r3, r0
 8001564:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8001566:	7bfb      	ldrb	r3, [r7, #15]
 8001568:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800156c:	2b00      	cmp	r3, #0
 800156e:	d107      	bne.n	8001580 <NRF24_write+0x54>
 8001570:	f003 fc42 	bl	8004df8 <HAL_GetTick>
 8001574:	4602      	mov	r2, r0
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	429a      	cmp	r2, r3
 800157e:	d8e7      	bhi.n	8001550 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8001580:	f107 010b 	add.w	r1, r7, #11
 8001584:	f107 030c 	add.w	r3, r7, #12
 8001588:	4a0c      	ldr	r2, [pc, #48]	; (80015bc <NRF24_write+0x90>)
 800158a:	4618      	mov	r0, r3
 800158c:	f000 f9d8 	bl	8001940 <NRF24_whatHappened>
	retStatus = tx_ok;
 8001590:	7b3b      	ldrb	r3, [r7, #12]
 8001592:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8001594:	4b09      	ldr	r3, [pc, #36]	; (80015bc <NRF24_write+0x90>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d005      	beq.n	80015a8 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 800159c:	f000 f886 	bl	80016ac <NRF24_getDynamicPayloadSize>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	4b06      	ldr	r3, [pc, #24]	; (80015c0 <NRF24_write+0x94>)
 80015a6:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 80015a8:	f000 f80c 	bl	80015c4 <NRF24_available>
	NRF24_flush_tx();
 80015ac:	f7ff feb4 	bl	8001318 <NRF24_flush_tx>
	return retStatus;
 80015b0:	7bbb      	ldrb	r3, [r7, #14]
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	3718      	adds	r7, #24
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}
 80015ba:	bf00      	nop
 80015bc:	2400037c 	.word	0x2400037c
 80015c0:	2400037d 	.word	0x2400037d

080015c4 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 80015c8:	2000      	movs	r0, #0
 80015ca:	f000 f95a 	bl	8001882 <NRF24_availablePipe>
 80015ce:	4603      	mov	r3, r0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <NRF24_openWritingPipe>:
	NRF24_getDynamicPayloadSize();
	return rxStatus;
}
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b084      	sub	sp, #16
 80015d8:	af00      	add	r7, sp, #0
 80015da:	e9c7 0100 	strd	r0, r1, [r7]
	NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 80015de:	463b      	mov	r3, r7
 80015e0:	2205      	movs	r2, #5
 80015e2:	4619      	mov	r1, r3
 80015e4:	200a      	movs	r0, #10
 80015e6:	f7ff fe4d 	bl	8001284 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 80015ea:	463b      	mov	r3, r7
 80015ec:	2205      	movs	r2, #5
 80015ee:	4619      	mov	r1, r3
 80015f0:	2010      	movs	r0, #16
 80015f2:	f7ff fe47 	bl	8001284 <NRF24_write_registerN>
	
	const uint8_t max_payload_size = 32;
 80015f6:	2320      	movs	r3, #32
 80015f8:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 80015fa:	4b07      	ldr	r3, [pc, #28]	; (8001618 <NRF24_openWritingPipe+0x44>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	4293      	cmp	r3, r2
 8001602:	bf28      	it	cs
 8001604:	4613      	movcs	r3, r2
 8001606:	b2db      	uxtb	r3, r3
 8001608:	4619      	mov	r1, r3
 800160a:	2011      	movs	r0, #17
 800160c:	f7ff fe18 	bl	8001240 <NRF24_write_register>
}
 8001610:	bf00      	nop
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	2400037e 	.word	0x2400037e

0800161c <NRF24_setRetries>:
	}
	
}
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
 8001622:	4603      	mov	r3, r0
 8001624:	460a      	mov	r2, r1
 8001626:	71fb      	strb	r3, [r7, #7]
 8001628:	4613      	mov	r3, r2
 800162a:	71bb      	strb	r3, [r7, #6]
	NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800162c:	79fb      	ldrb	r3, [r7, #7]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	b25a      	sxtb	r2, r3
 8001632:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	b25b      	sxtb	r3, r3
 800163c:	4313      	orrs	r3, r2
 800163e:	b25b      	sxtb	r3, r3
 8001640:	b2db      	uxtb	r3, r3
 8001642:	4619      	mov	r1, r3
 8001644:	2004      	movs	r0, #4
 8001646:	f7ff fdfb 	bl	8001240 <NRF24_write_register>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b084      	sub	sp, #16
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_channel = 127;
 800165c:	237f      	movs	r3, #127	; 0x7f
 800165e:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 8001660:	7bfa      	ldrb	r2, [r7, #15]
 8001662:	79fb      	ldrb	r3, [r7, #7]
 8001664:	4293      	cmp	r3, r2
 8001666:	bf28      	it	cs
 8001668:	4613      	movcs	r3, r2
 800166a:	b2db      	uxtb	r3, r3
 800166c:	4619      	mov	r1, r3
 800166e:	2005      	movs	r0, #5
 8001670:	f7ff fde6 	bl	8001240 <NRF24_write_register>
}
 8001674:	bf00      	nop
 8001676:	3710      	adds	r7, #16
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}

0800167c <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	const uint8_t max_payload_size = 32;
 8001686:	2320      	movs	r3, #32
 8001688:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800168a:	7bfa      	ldrb	r2, [r7, #15]
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	4293      	cmp	r3, r2
 8001690:	bf28      	it	cs
 8001692:	4613      	movcs	r3, r2
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <NRF24_setPayloadSize+0x2c>)
 8001698:	701a      	strb	r2, [r3, #0]
}
 800169a:	bf00      	nop
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	2400037e 	.word	0x2400037e

080016ac <NRF24_getDynamicPayloadSize>:
{
	return payload_size;
}
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
	return NRF24_read_register(CMD_R_RX_PL_WID);
 80016b0:	2060      	movs	r0, #96	; 0x60
 80016b2:	f7ff fd75 	bl	80011a0 <NRF24_read_register>
 80016b6:	4603      	mov	r3, r0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	bd80      	pop	{r7, pc}

080016bc <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 80016c0:	201d      	movs	r0, #29
 80016c2:	f7ff fd6d 	bl	80011a0 <NRF24_read_register>
 80016c6:	4603      	mov	r3, r0
 80016c8:	f023 0304 	bic.w	r3, r3, #4
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	4619      	mov	r1, r3
 80016d0:	201d      	movs	r0, #29
 80016d2:	f7ff fdb5 	bl	8001240 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 80016d6:	2100      	movs	r1, #0
 80016d8:	201c      	movs	r0, #28
 80016da:	f7ff fdb1 	bl	8001240 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 80016de:	4b02      	ldr	r3, [pc, #8]	; (80016e8 <NRF24_disableDynamicPayloads+0x2c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	701a      	strb	r2, [r3, #0]
}
 80016e4:	bf00      	nop
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	2400037f 	.word	0x2400037f

080016ec <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
	if ( enable )
 80016f6:	79fb      	ldrb	r3, [r7, #7]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d004      	beq.n	8001706 <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 80016fc:	213f      	movs	r1, #63	; 0x3f
 80016fe:	2001      	movs	r0, #1
 8001700:	f7ff fd9e 	bl	8001240 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 8001704:	e003      	b.n	800170e <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 8001706:	2100      	movs	r1, #0
 8001708:	2001      	movs	r0, #1
 800170a:	f7ff fd99 	bl	8001240 <NRF24_write_register>
}
 800170e:	bf00      	nop
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b084      	sub	sp, #16
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	71fb      	strb	r3, [r7, #7]
	uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001720:	2006      	movs	r0, #6
 8001722:	f7ff fd3d 	bl	80011a0 <NRF24_read_register>
 8001726:	4603      	mov	r3, r0
 8001728:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800172a:	7bfb      	ldrb	r3, [r7, #15]
 800172c:	f023 0306 	bic.w	r3, r3, #6
 8001730:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 8001732:	79fb      	ldrb	r3, [r7, #7]
 8001734:	2b03      	cmp	r3, #3
 8001736:	d104      	bne.n	8001742 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 8001738:	7bfb      	ldrb	r3, [r7, #15]
 800173a:	f043 0306 	orr.w	r3, r3, #6
 800173e:	73fb      	strb	r3, [r7, #15]
 8001740:	e019      	b.n	8001776 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 8001742:	79fb      	ldrb	r3, [r7, #7]
 8001744:	2b02      	cmp	r3, #2
 8001746:	d104      	bne.n	8001752 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 8001748:	7bfb      	ldrb	r3, [r7, #15]
 800174a:	f043 0304 	orr.w	r3, r3, #4
 800174e:	73fb      	strb	r3, [r7, #15]
 8001750:	e011      	b.n	8001776 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 8001752:	79fb      	ldrb	r3, [r7, #7]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d104      	bne.n	8001762 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 8001758:	7bfb      	ldrb	r3, [r7, #15]
 800175a:	f043 0302 	orr.w	r3, r3, #2
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	e009      	b.n	8001776 <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d006      	beq.n	8001776 <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	2b04      	cmp	r3, #4
 800176c:	d103      	bne.n	8001776 <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800176e:	7bfb      	ldrb	r3, [r7, #15]
 8001770:	f043 0306 	orr.w	r3, r3, #6
 8001774:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	4619      	mov	r1, r3
 800177a:	2006      	movs	r0, #6
 800177c:	f7ff fd60 	bl	8001240 <NRF24_write_register>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}

08001788 <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
	bool result = false;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 8001796:	2006      	movs	r0, #6
 8001798:	f7ff fd02 	bl	80011a0 <NRF24_read_register>
 800179c:	4603      	mov	r3, r0
 800179e:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 80017a0:	4b1b      	ldr	r3, [pc, #108]	; (8001810 <NRF24_setDataRate+0x88>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 80017a6:	7bbb      	ldrb	r3, [r7, #14]
 80017a8:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 80017ac:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d107      	bne.n	80017c4 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 80017b4:	4b16      	ldr	r3, [pc, #88]	; (8001810 <NRF24_setDataRate+0x88>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 80017ba:	7bbb      	ldrb	r3, [r7, #14]
 80017bc:	f043 0320 	orr.w	r3, r3, #32
 80017c0:	73bb      	strb	r3, [r7, #14]
 80017c2:	e00d      	b.n	80017e0 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d107      	bne.n	80017da <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 80017ca:	4b11      	ldr	r3, [pc, #68]	; (8001810 <NRF24_setDataRate+0x88>)
 80017cc:	2201      	movs	r2, #1
 80017ce:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 80017d0:	7bbb      	ldrb	r3, [r7, #14]
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	73bb      	strb	r3, [r7, #14]
 80017d8:	e002      	b.n	80017e0 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 80017da:	4b0d      	ldr	r3, [pc, #52]	; (8001810 <NRF24_setDataRate+0x88>)
 80017dc:	2200      	movs	r2, #0
 80017de:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 80017e0:	7bbb      	ldrb	r3, [r7, #14]
 80017e2:	4619      	mov	r1, r3
 80017e4:	2006      	movs	r0, #6
 80017e6:	f7ff fd2b 	bl	8001240 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 80017ea:	2006      	movs	r0, #6
 80017ec:	f7ff fcd8 	bl	80011a0 <NRF24_read_register>
 80017f0:	4603      	mov	r3, r0
 80017f2:	461a      	mov	r2, r3
 80017f4:	7bbb      	ldrb	r3, [r7, #14]
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d102      	bne.n	8001800 <NRF24_setDataRate+0x78>
  {
    result = true;
 80017fa:	2301      	movs	r3, #1
 80017fc:	73fb      	strb	r3, [r7, #15]
 80017fe:	e002      	b.n	8001806 <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 8001800:	4b03      	ldr	r3, [pc, #12]	; (8001810 <NRF24_setDataRate+0x88>)
 8001802:	2200      	movs	r2, #0
 8001804:	701a      	strb	r2, [r3, #0]
  }

  return result;
 8001806:	7bfb      	ldrb	r3, [r7, #15]
}
 8001808:	4618      	mov	r0, r3
 800180a:	3710      	adds	r7, #16
 800180c:	46bd      	mov	sp, r7
 800180e:	bd80      	pop	{r7, pc}
 8001810:	24000380 	.word	0x24000380

08001814 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0
 800181a:	4603      	mov	r3, r0
 800181c:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fcbe 	bl	80011a0 <NRF24_read_register>
 8001824:	4603      	mov	r3, r0
 8001826:	f023 030c 	bic.w	r3, r3, #12
 800182a:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d00f      	beq.n	8001852 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 8001832:	79fb      	ldrb	r3, [r7, #7]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d104      	bne.n	8001842 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 8001838:	7bfb      	ldrb	r3, [r7, #15]
 800183a:	f043 0308 	orr.w	r3, r3, #8
 800183e:	73fb      	strb	r3, [r7, #15]
 8001840:	e007      	b.n	8001852 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	f043 0308 	orr.w	r3, r3, #8
 8001848:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	f043 0304 	orr.w	r3, r3, #4
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 8001852:	7bfb      	ldrb	r3, [r7, #15]
 8001854:	4619      	mov	r1, r3
 8001856:	2000      	movs	r0, #0
 8001858:	f7ff fcf2 	bl	8001240 <NRF24_write_register>
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <NRF24_powerDown>:
{
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
}
//38. power down
void NRF24_powerDown(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 8001868:	2000      	movs	r0, #0
 800186a:	f7ff fc99 	bl	80011a0 <NRF24_read_register>
 800186e:	4603      	mov	r3, r0
 8001870:	f023 0302 	bic.w	r3, r3, #2
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	2000      	movs	r0, #0
 800187a:	f7ff fce1 	bl	8001240 <NRF24_write_register>
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}

08001882 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800188a:	f7ff fd55 	bl	8001338 <NRF24_get_status>
 800188e:	4603      	mov	r3, r0
 8001890:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 8001892:	7bfb      	ldrb	r3, [r7, #15]
 8001894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001898:	2b00      	cmp	r3, #0
 800189a:	bf14      	ite	ne
 800189c:	2301      	movne	r3, #1
 800189e:	2300      	moveq	r3, #0
 80018a0:	73bb      	strb	r3, [r7, #14]

  if (result)
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d017      	beq.n	80018d8 <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 80018ae:	7bfb      	ldrb	r3, [r7, #15]
 80018b0:	085b      	lsrs	r3, r3, #1
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	b2da      	uxtb	r2, r3
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 80018be:	2140      	movs	r1, #64	; 0x40
 80018c0:	2007      	movs	r0, #7
 80018c2:	f7ff fcbd 	bl	8001240 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	f003 0320 	and.w	r3, r3, #32
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 80018d0:	2120      	movs	r1, #32
 80018d2:	2007      	movs	r0, #7
 80018d4:	f7ff fcb4 	bl	8001240 <NRF24_write_register>
    }
  }
  return result;
 80018d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80018da:	4618      	mov	r0, r3
 80018dc:	3710      	adds	r7, #16
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}

080018e2 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b082      	sub	sp, #8
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
 80018ea:	460b      	mov	r3, r1
 80018ec:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f7ff fc36 	bl	8001160 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 80018f4:	2000      	movs	r0, #0
 80018f6:	f7ff fc53 	bl	80011a0 <NRF24_read_register>
 80018fa:	4603      	mov	r3, r0
 80018fc:	f043 0302 	orr.w	r3, r3, #2
 8001900:	b2db      	uxtb	r3, r3
 8001902:	f023 0301 	bic.w	r3, r3, #1
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4619      	mov	r1, r3
 800190a:	2000      	movs	r0, #0
 800190c:	f7ff fc98 	bl	8001240 <NRF24_write_register>
  NRF24_ce(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f7ff fc25 	bl	8001160 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 8001916:	2096      	movs	r0, #150	; 0x96
 8001918:	f7ff fbe2 	bl	80010e0 <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	4619      	mov	r1, r3
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f7ff fcd7 	bl	80012d4 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 8001926:	2001      	movs	r0, #1
 8001928:	f7ff fc1a 	bl	8001160 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800192c:	200f      	movs	r0, #15
 800192e:	f7ff fbd7 	bl	80010e0 <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fc14 	bl	8001160 <NRF24_ce>
}
 8001938:	bf00      	nop
 800193a:	3708      	adds	r7, #8
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800194c:	f7ff fcf4 	bl	8001338 <NRF24_get_status>
 8001950:	4603      	mov	r3, r0
 8001952:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800195a:	2170      	movs	r1, #112	; 0x70
 800195c:	2007      	movs	r0, #7
 800195e:	f7ff fc6f 	bl	8001240 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 8001962:	7dfb      	ldrb	r3, [r7, #23]
 8001964:	f003 0320 	and.w	r3, r3, #32
 8001968:	2b00      	cmp	r3, #0
 800196a:	bf14      	ite	ne
 800196c:	2301      	movne	r3, #1
 800196e:	2300      	moveq	r3, #0
 8001970:	b2da      	uxtb	r2, r3
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 8001976:	7dfb      	ldrb	r3, [r7, #23]
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2da      	uxtb	r2, r3
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800198a:	7dfb      	ldrb	r3, [r7, #23]
 800198c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001990:	2b00      	cmp	r3, #0
 8001992:	bf14      	ite	ne
 8001994:	2301      	movne	r3, #1
 8001996:	2300      	moveq	r3, #0
 8001998:	b2da      	uxtb	r2, r3
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	701a      	strb	r2, [r3, #0]
}
 800199e:	bf00      	nop
 80019a0:	3718      	adds	r7, #24
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}

080019a6 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 80019a6:	b580      	push	{r7, lr}
 80019a8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 80019aa:	2170      	movs	r1, #112	; 0x70
 80019ac:	2007      	movs	r0, #7
 80019ae:	f7ff fc47 	bl	8001240 <NRF24_write_register>
}
 80019b2:	bf00      	nop
 80019b4:	bd80      	pop	{r7, pc}
	...

080019b8 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 80019be:	2000      	movs	r0, #0
 80019c0:	f7ff fbae 	bl	8001120 <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 80019c4:	2350      	movs	r3, #80	; 0x50
 80019c6:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 80019c8:	2373      	movs	r3, #115	; 0x73
 80019ca:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 80019cc:	1d39      	adds	r1, r7, #4
 80019ce:	2364      	movs	r3, #100	; 0x64
 80019d0:	2202      	movs	r2, #2
 80019d2:	4805      	ldr	r0, [pc, #20]	; (80019e8 <NRF24_ACTIVATE_cmd+0x30>)
 80019d4:	f00d fcee 	bl	800f3b4 <HAL_SPI_Transmit>
	NRF24_csn(1);
 80019d8:	2001      	movs	r0, #1
 80019da:	f7ff fba1 	bl	8001120 <NRF24_csn>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	2400038c 	.word	0x2400038c

080019ec <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 80019ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019ee:	b0a1      	sub	sp, #132	; 0x84
 80019f0:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80019f2:	f107 0308 	add.w	r3, r7, #8
 80019f6:	4ab6      	ldr	r2, [pc, #728]	; (8001cd0 <printRadioSettings+0x2e4>)
 80019f8:	461c      	mov	r4, r3
 80019fa:	4615      	mov	r5, r2
 80019fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80019fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a08:	682b      	ldr	r3, [r5, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	8022      	strh	r2, [r4, #0]
 8001a0e:	3402      	adds	r4, #2
 8001a10:	0c1b      	lsrs	r3, r3, #16
 8001a12:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a14:	f107 0308 	add.w	r3, r7, #8
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f7fe fc61 	bl	80002e0 <strlen>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	b29a      	uxth	r2, r3
 8001a22:	f107 0108 	add.w	r1, r7, #8
 8001a26:	230a      	movs	r3, #10
 8001a28:	48aa      	ldr	r0, [pc, #680]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001a2a:	f00e fccc 	bl	80103c6 <HAL_UART_Transmit>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f7ff fbb6 	bl	80011a0 <NRF24_read_register>
 8001a34:	4603      	mov	r3, r0
 8001a36:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 8001a3a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a3e:	f003 0308 	and.w	r3, r3, #8
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d020      	beq.n	8001a88 <printRadioSettings+0x9c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 8001a46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00b      	beq.n	8001a6a <printRadioSettings+0x7e>
 8001a52:	f107 0308 	add.w	r3, r7, #8
 8001a56:	4aa0      	ldr	r2, [pc, #640]	; (8001cd8 <printRadioSettings+0x2ec>)
 8001a58:	461c      	mov	r4, r3
 8001a5a:	4615      	mov	r5, r2
 8001a5c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a5e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a60:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a64:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001a68:	e017      	b.n	8001a9a <printRadioSettings+0xae>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 8001a6a:	f107 0308 	add.w	r3, r7, #8
 8001a6e:	4a9b      	ldr	r2, [pc, #620]	; (8001cdc <printRadioSettings+0x2f0>)
 8001a70:	461c      	mov	r4, r3
 8001a72:	4615      	mov	r5, r2
 8001a74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a78:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001a7c:	c403      	stmia	r4!, {r0, r1}
 8001a7e:	8022      	strh	r2, [r4, #0]
 8001a80:	3402      	adds	r4, #2
 8001a82:	0c13      	lsrs	r3, r2, #16
 8001a84:	7023      	strb	r3, [r4, #0]
 8001a86:	e008      	b.n	8001a9a <printRadioSettings+0xae>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 8001a88:	f107 0308 	add.w	r3, r7, #8
 8001a8c:	4a94      	ldr	r2, [pc, #592]	; (8001ce0 <printRadioSettings+0x2f4>)
 8001a8e:	461c      	mov	r4, r3
 8001a90:	4615      	mov	r5, r2
 8001a92:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001a94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001a96:	682b      	ldr	r3, [r5, #0]
 8001a98:	6023      	str	r3, [r4, #0]
	}
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001a9a:	f107 0308 	add.w	r3, r7, #8
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fc1e 	bl	80002e0 <strlen>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f107 0108 	add.w	r1, r7, #8
 8001aac:	230a      	movs	r3, #10
 8001aae:	4889      	ldr	r0, [pc, #548]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001ab0:	f00e fc89 	bl	80103c6 <HAL_UART_Transmit>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	f7ff fb73 	bl	80011a0 <NRF24_read_register>
 8001aba:	4603      	mov	r3, r0
 8001abc:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ac0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ac4:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	bfcc      	ite	gt
 8001acc:	2301      	movgt	r3, #1
 8001ace:	2300      	movle	r3, #0
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ad4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ad8:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	bfcc      	ite	gt
 8001ae0:	2301      	movgt	r3, #1
 8001ae2:	2300      	movle	r3, #0
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001ae8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001aec:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	bfcc      	ite	gt
 8001af4:	2301      	movgt	r3, #1
 8001af6:	2300      	movle	r3, #0
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001afc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b00:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	bfcc      	ite	gt
 8001b08:	2301      	movgt	r3, #1
 8001b0a:	2300      	movle	r3, #0
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b10:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b14:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	bfcc      	ite	gt
 8001b1c:	2301      	movgt	r3, #1
 8001b1e:	2300      	movle	r3, #0
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b24:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b28:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	bfcc      	ite	gt
 8001b30:	2301      	movgt	r3, #1
 8001b32:	2300      	movle	r3, #0
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	f107 0008 	add.w	r0, r7, #8
 8001b3a:	9303      	str	r3, [sp, #12]
 8001b3c:	9402      	str	r4, [sp, #8]
 8001b3e:	9101      	str	r1, [sp, #4]
 8001b40:	9200      	str	r2, [sp, #0]
 8001b42:	4633      	mov	r3, r6
 8001b44:	462a      	mov	r2, r5
 8001b46:	4967      	ldr	r1, [pc, #412]	; (8001ce4 <printRadioSettings+0x2f8>)
 8001b48:	f019 f812 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	4618      	mov	r0, r3
 8001b52:	f7fe fbc5 	bl	80002e0 <strlen>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	f107 0108 	add.w	r1, r7, #8
 8001b5e:	230a      	movs	r3, #10
 8001b60:	485c      	ldr	r0, [pc, #368]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001b62:	f00e fc30 	bl	80103c6 <HAL_UART_Transmit>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 8001b66:	2002      	movs	r0, #2
 8001b68:	f7ff fb1a 	bl	80011a0 <NRF24_read_register>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b72:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b76:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bfcc      	ite	gt
 8001b7e:	2301      	movgt	r3, #1
 8001b80:	2300      	movle	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b86:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b8a:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	bfcc      	ite	gt
 8001b92:	2301      	movgt	r3, #1
 8001b94:	2300      	movle	r3, #0
 8001b96:	b2db      	uxtb	r3, r3
 8001b98:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001b9a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001b9e:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	bfcc      	ite	gt
 8001ba6:	2301      	movgt	r3, #1
 8001ba8:	2300      	movle	r3, #0
 8001baa:	b2db      	uxtb	r3, r3
 8001bac:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bae:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bb2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	bfcc      	ite	gt
 8001bba:	2301      	movgt	r3, #1
 8001bbc:	2300      	movle	r3, #0
 8001bbe:	b2db      	uxtb	r3, r3
 8001bc0:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bc2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bc6:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	bfcc      	ite	gt
 8001bce:	2301      	movgt	r3, #1
 8001bd0:	2300      	movle	r3, #0
 8001bd2:	b2db      	uxtb	r3, r3
 8001bd4:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8001bd6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001bda:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	bfcc      	ite	gt
 8001be2:	2301      	movgt	r3, #1
 8001be4:	2300      	movle	r3, #0
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	f107 0008 	add.w	r0, r7, #8
 8001bec:	9303      	str	r3, [sp, #12]
 8001bee:	9402      	str	r4, [sp, #8]
 8001bf0:	9101      	str	r1, [sp, #4]
 8001bf2:	9200      	str	r2, [sp, #0]
 8001bf4:	4633      	mov	r3, r6
 8001bf6:	462a      	mov	r2, r5
 8001bf8:	493b      	ldr	r1, [pc, #236]	; (8001ce8 <printRadioSettings+0x2fc>)
 8001bfa:	f018 ffb9 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001bfe:	f107 0308 	add.w	r3, r7, #8
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fb6c 	bl	80002e0 <strlen>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	f107 0108 	add.w	r1, r7, #8
 8001c10:	230a      	movs	r3, #10
 8001c12:	4830      	ldr	r0, [pc, #192]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001c14:	f00e fbd7 	bl	80103c6 <HAL_UART_Transmit>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 8001c18:	2003      	movs	r0, #3
 8001c1a:	f7ff fac1 	bl	80011a0 <NRF24_read_register>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 8001c28:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 8001c32:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8001c36:	f107 0308 	add.w	r3, r7, #8
 8001c3a:	492c      	ldr	r1, [pc, #176]	; (8001cec <printRadioSettings+0x300>)
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f018 ff97 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c42:	f107 0308 	add.w	r3, r7, #8
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7fe fb4a 	bl	80002e0 <strlen>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	f107 0108 	add.w	r1, r7, #8
 8001c54:	230a      	movs	r3, #10
 8001c56:	481f      	ldr	r0, [pc, #124]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001c58:	f00e fbb5 	bl	80103c6 <HAL_UART_Transmit>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 8001c5c:	2005      	movs	r0, #5
 8001c5e:	f7ff fa9f 	bl	80011a0 <NRF24_read_register>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 8001c68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001c6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001c70:	f107 0308 	add.w	r3, r7, #8
 8001c74:	491e      	ldr	r1, [pc, #120]	; (8001cf0 <printRadioSettings+0x304>)
 8001c76:	4618      	mov	r0, r3
 8001c78:	f018 ff7a 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001c7c:	f107 0308 	add.w	r3, r7, #8
 8001c80:	4618      	mov	r0, r3
 8001c82:	f7fe fb2d 	bl	80002e0 <strlen>
 8001c86:	4603      	mov	r3, r0
 8001c88:	b29a      	uxth	r2, r3
 8001c8a:	f107 0108 	add.w	r1, r7, #8
 8001c8e:	230a      	movs	r3, #10
 8001c90:	4810      	ldr	r0, [pc, #64]	; (8001cd4 <printRadioSettings+0x2e8>)
 8001c92:	f00e fb98 	bl	80103c6 <HAL_UART_Transmit>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 8001c96:	2006      	movs	r0, #6
 8001c98:	f7ff fa82 	bl	80011a0 <NRF24_read_register>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3)) sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 8001ca2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d024      	beq.n	8001cf8 <printRadioSettings+0x30c>
 8001cae:	f107 0308 	add.w	r3, r7, #8
 8001cb2:	4a10      	ldr	r2, [pc, #64]	; (8001cf4 <printRadioSettings+0x308>)
 8001cb4:	461c      	mov	r4, r3
 8001cb6:	4615      	mov	r5, r2
 8001cb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001cba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001cbc:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001cc0:	6020      	str	r0, [r4, #0]
 8001cc2:	3404      	adds	r4, #4
 8001cc4:	8021      	strh	r1, [r4, #0]
 8001cc6:	3402      	adds	r4, #2
 8001cc8:	0c0b      	lsrs	r3, r1, #16
 8001cca:	7023      	strb	r3, [r4, #0]
 8001ccc:	e023      	b.n	8001d16 <printRadioSettings+0x32a>
 8001cce:	bf00      	nop
 8001cd0:	0801bda0 	.word	0x0801bda0
 8001cd4:	24000414 	.word	0x24000414
 8001cd8:	0801bdd4 	.word	0x0801bdd4
 8001cdc:	0801bdf0 	.word	0x0801bdf0
 8001ce0:	0801be0c 	.word	0x0801be0c
 8001ce4:	0801be20 	.word	0x0801be20
 8001ce8:	0801be64 	.word	0x0801be64
 8001cec:	0801beb0 	.word	0x0801beb0
 8001cf0:	0801becc 	.word	0x0801becc
 8001cf4:	0801bee0 	.word	0x0801bee0
	else sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 8001cf8:	f107 0308 	add.w	r3, r7, #8
 8001cfc:	4a29      	ldr	r2, [pc, #164]	; (8001da4 <printRadioSettings+0x3b8>)
 8001cfe:	461c      	mov	r4, r3
 8001d00:	4615      	mov	r5, r2
 8001d02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001d0a:	6020      	str	r0, [r4, #0]
 8001d0c:	3404      	adds	r4, #4
 8001d0e:	8021      	strh	r1, [r4, #0]
 8001d10:	3402      	adds	r4, #2
 8001d12:	0c0b      	lsrs	r3, r1, #16
 8001d14:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001d16:	f107 0308 	add.w	r3, r7, #8
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fae0 	bl	80002e0 <strlen>
 8001d20:	4603      	mov	r3, r0
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f107 0108 	add.w	r1, r7, #8
 8001d28:	230a      	movs	r3, #10
 8001d2a:	481f      	ldr	r0, [pc, #124]	; (8001da8 <printRadioSettings+0x3bc>)
 8001d2c:	f00e fb4b 	bl	80103c6 <HAL_UART_Transmit>
	reg8Val &= (3 << 1);
 8001d30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d34:	f003 0306 	and.w	r3, r3, #6
 8001d38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 8001d3c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d40:	085b      	lsrs	r3, r3, #1
 8001d42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 8001d46:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d109      	bne.n	8001d62 <printRadioSettings+0x376>
 8001d4e:	f107 0308 	add.w	r3, r7, #8
 8001d52:	4a16      	ldr	r2, [pc, #88]	; (8001dac <printRadioSettings+0x3c0>)
 8001d54:	461c      	mov	r4, r3
 8001d56:	4615      	mov	r5, r2
 8001d58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d5c:	682b      	ldr	r3, [r5, #0]
 8001d5e:	6023      	str	r3, [r4, #0]
 8001d60:	e037      	b.n	8001dd2 <printRadioSettings+0x3e6>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 8001d62:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d66:	2b01      	cmp	r3, #1
 8001d68:	d109      	bne.n	8001d7e <printRadioSettings+0x392>
 8001d6a:	f107 0308 	add.w	r3, r7, #8
 8001d6e:	4a10      	ldr	r2, [pc, #64]	; (8001db0 <printRadioSettings+0x3c4>)
 8001d70:	461c      	mov	r4, r3
 8001d72:	4615      	mov	r5, r2
 8001d74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d78:	682b      	ldr	r3, [r5, #0]
 8001d7a:	6023      	str	r3, [r4, #0]
 8001d7c:	e029      	b.n	8001dd2 <printRadioSettings+0x3e6>
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 8001d7e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d118      	bne.n	8001db8 <printRadioSettings+0x3cc>
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <printRadioSettings+0x3c8>)
 8001d8c:	461c      	mov	r4, r3
 8001d8e:	4615      	mov	r5, r2
 8001d90:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d92:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	461a      	mov	r2, r3
 8001d98:	8022      	strh	r2, [r4, #0]
 8001d9a:	3402      	adds	r4, #2
 8001d9c:	0c1b      	lsrs	r3, r3, #16
 8001d9e:	7023      	strb	r3, [r4, #0]
 8001da0:	e017      	b.n	8001dd2 <printRadioSettings+0x3e6>
 8001da2:	bf00      	nop
 8001da4:	0801bef8 	.word	0x0801bef8
 8001da8:	24000414 	.word	0x24000414
 8001dac:	0801bf10 	.word	0x0801bf10
 8001db0:	0801bf24 	.word	0x0801bf24
 8001db4:	0801bf38 	.word	0x0801bf38
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 8001db8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d108      	bne.n	8001dd2 <printRadioSettings+0x3e6>
 8001dc0:	f107 0308 	add.w	r3, r7, #8
 8001dc4:	4ad7      	ldr	r2, [pc, #860]	; (8002124 <printRadioSettings+0x738>)
 8001dc6:	461c      	mov	r4, r3
 8001dc8:	4615      	mov	r5, r2
 8001dca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001dcc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001dce:	682b      	ldr	r3, [r5, #0]
 8001dd0:	8023      	strh	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001dd2:	f107 0308 	add.w	r3, r7, #8
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7fe fa82 	bl	80002e0 <strlen>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	b29a      	uxth	r2, r3
 8001de0:	f107 0108 	add.w	r1, r7, #8
 8001de4:	230a      	movs	r3, #10
 8001de6:	48d0      	ldr	r0, [pc, #832]	; (8002128 <printRadioSettings+0x73c>)
 8001de8:	f00e faed 	bl	80103c6 <HAL_UART_Transmit>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 8001dec:	463b      	mov	r3, r7
 8001dee:	2205      	movs	r2, #5
 8001df0:	4619      	mov	r1, r3
 8001df2:	200a      	movs	r0, #10
 8001df4:	f7ff f9fc 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001df8:	793b      	ldrb	r3, [r7, #4]
 8001dfa:	461c      	mov	r4, r3
 8001dfc:	78fb      	ldrb	r3, [r7, #3]
 8001dfe:	461d      	mov	r5, r3
 8001e00:	78bb      	ldrb	r3, [r7, #2]
 8001e02:	787a      	ldrb	r2, [r7, #1]
 8001e04:	7839      	ldrb	r1, [r7, #0]
 8001e06:	f107 0008 	add.w	r0, r7, #8
 8001e0a:	9102      	str	r1, [sp, #8]
 8001e0c:	9201      	str	r2, [sp, #4]
 8001e0e:	9300      	str	r3, [sp, #0]
 8001e10:	462b      	mov	r3, r5
 8001e12:	4622      	mov	r2, r4
 8001e14:	49c5      	ldr	r1, [pc, #788]	; (800212c <printRadioSettings+0x740>)
 8001e16:	f018 feab 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e1a:	f107 0308 	add.w	r3, r7, #8
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fa5e 	bl	80002e0 <strlen>
 8001e24:	4603      	mov	r3, r0
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	f107 0108 	add.w	r1, r7, #8
 8001e2c:	230a      	movs	r3, #10
 8001e2e:	48be      	ldr	r0, [pc, #760]	; (8002128 <printRadioSettings+0x73c>)
 8001e30:	f00e fac9 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 8001e34:	463b      	mov	r3, r7
 8001e36:	2205      	movs	r2, #5
 8001e38:	4619      	mov	r1, r3
 8001e3a:	200b      	movs	r0, #11
 8001e3c:	f7ff f9d8 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001e40:	793b      	ldrb	r3, [r7, #4]
 8001e42:	461c      	mov	r4, r3
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	461d      	mov	r5, r3
 8001e48:	78bb      	ldrb	r3, [r7, #2]
 8001e4a:	787a      	ldrb	r2, [r7, #1]
 8001e4c:	7839      	ldrb	r1, [r7, #0]
 8001e4e:	f107 0008 	add.w	r0, r7, #8
 8001e52:	9102      	str	r1, [sp, #8]
 8001e54:	9201      	str	r2, [sp, #4]
 8001e56:	9300      	str	r3, [sp, #0]
 8001e58:	462b      	mov	r3, r5
 8001e5a:	4622      	mov	r2, r4
 8001e5c:	49b4      	ldr	r1, [pc, #720]	; (8002130 <printRadioSettings+0x744>)
 8001e5e:	f018 fe87 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e62:	f107 0308 	add.w	r3, r7, #8
 8001e66:	4618      	mov	r0, r3
 8001e68:	f7fe fa3a 	bl	80002e0 <strlen>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	b29a      	uxth	r2, r3
 8001e70:	f107 0108 	add.w	r1, r7, #8
 8001e74:	230a      	movs	r3, #10
 8001e76:	48ac      	ldr	r0, [pc, #688]	; (8002128 <printRadioSettings+0x73c>)
 8001e78:	f00e faa5 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 8001e7c:	463b      	mov	r3, r7
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4619      	mov	r1, r3
 8001e82:	200c      	movs	r0, #12
 8001e84:	f7ff f9b4 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001e88:	783b      	ldrb	r3, [r7, #0]
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	f107 0308 	add.w	r3, r7, #8
 8001e90:	49a8      	ldr	r1, [pc, #672]	; (8002134 <printRadioSettings+0x748>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f018 fe6c 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001e98:	f107 0308 	add.w	r3, r7, #8
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fa1f 	bl	80002e0 <strlen>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	b29a      	uxth	r2, r3
 8001ea6:	f107 0108 	add.w	r1, r7, #8
 8001eaa:	230a      	movs	r3, #10
 8001eac:	489e      	ldr	r0, [pc, #632]	; (8002128 <printRadioSettings+0x73c>)
 8001eae:	f00e fa8a 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 8001eb2:	463b      	mov	r3, r7
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	4619      	mov	r1, r3
 8001eb8:	200d      	movs	r0, #13
 8001eba:	f7ff f999 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001ebe:	783b      	ldrb	r3, [r7, #0]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	f107 0308 	add.w	r3, r7, #8
 8001ec6:	499c      	ldr	r1, [pc, #624]	; (8002138 <printRadioSettings+0x74c>)
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f018 fe51 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ece:	f107 0308 	add.w	r3, r7, #8
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7fe fa04 	bl	80002e0 <strlen>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f107 0108 	add.w	r1, r7, #8
 8001ee0:	230a      	movs	r3, #10
 8001ee2:	4891      	ldr	r0, [pc, #580]	; (8002128 <printRadioSettings+0x73c>)
 8001ee4:	f00e fa6f 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 8001ee8:	463b      	mov	r3, r7
 8001eea:	2201      	movs	r2, #1
 8001eec:	4619      	mov	r1, r3
 8001eee:	200e      	movs	r0, #14
 8001ef0:	f7ff f97e 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001ef4:	783b      	ldrb	r3, [r7, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	f107 0308 	add.w	r3, r7, #8
 8001efc:	498f      	ldr	r1, [pc, #572]	; (800213c <printRadioSettings+0x750>)
 8001efe:	4618      	mov	r0, r3
 8001f00:	f018 fe36 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f04:	f107 0308 	add.w	r3, r7, #8
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe f9e9 	bl	80002e0 <strlen>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	f107 0108 	add.w	r1, r7, #8
 8001f16:	230a      	movs	r3, #10
 8001f18:	4883      	ldr	r0, [pc, #524]	; (8002128 <printRadioSettings+0x73c>)
 8001f1a:	f00e fa54 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 8001f1e:	463b      	mov	r3, r7
 8001f20:	2201      	movs	r2, #1
 8001f22:	4619      	mov	r1, r3
 8001f24:	200f      	movs	r0, #15
 8001f26:	f7ff f963 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 8001f2a:	783b      	ldrb	r3, [r7, #0]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	f107 0308 	add.w	r3, r7, #8
 8001f32:	4983      	ldr	r1, [pc, #524]	; (8002140 <printRadioSettings+0x754>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f018 fe1b 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f3a:	f107 0308 	add.w	r3, r7, #8
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe f9ce 	bl	80002e0 <strlen>
 8001f44:	4603      	mov	r3, r0
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	f107 0108 	add.w	r1, r7, #8
 8001f4c:	230a      	movs	r3, #10
 8001f4e:	4876      	ldr	r0, [pc, #472]	; (8002128 <printRadioSettings+0x73c>)
 8001f50:	f00e fa39 	bl	80103c6 <HAL_UART_Transmit>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 8001f54:	463b      	mov	r3, r7
 8001f56:	2205      	movs	r2, #5
 8001f58:	4619      	mov	r1, r3
 8001f5a:	2010      	movs	r0, #16
 8001f5c:	f7ff f948 	bl	80011f0 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 8001f60:	793b      	ldrb	r3, [r7, #4]
 8001f62:	461c      	mov	r4, r3
 8001f64:	78fb      	ldrb	r3, [r7, #3]
 8001f66:	461d      	mov	r5, r3
 8001f68:	78bb      	ldrb	r3, [r7, #2]
 8001f6a:	787a      	ldrb	r2, [r7, #1]
 8001f6c:	7839      	ldrb	r1, [r7, #0]
 8001f6e:	f107 0008 	add.w	r0, r7, #8
 8001f72:	9102      	str	r1, [sp, #8]
 8001f74:	9201      	str	r2, [sp, #4]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	462b      	mov	r3, r5
 8001f7a:	4622      	mov	r2, r4
 8001f7c:	4971      	ldr	r1, [pc, #452]	; (8002144 <printRadioSettings+0x758>)
 8001f7e:	f018 fdf7 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001f82:	f107 0308 	add.w	r3, r7, #8
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7fe f9aa 	bl	80002e0 <strlen>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f107 0108 	add.w	r1, r7, #8
 8001f94:	230a      	movs	r3, #10
 8001f96:	4864      	ldr	r0, [pc, #400]	; (8002128 <printRadioSettings+0x73c>)
 8001f98:	f00e fa15 	bl	80103c6 <HAL_UART_Transmit>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 8001f9c:	2011      	movs	r0, #17
 8001f9e:	f7ff f8ff 	bl	80011a0 <NRF24_read_register>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001fa8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fb0:	f107 0308 	add.w	r3, r7, #8
 8001fb4:	4964      	ldr	r1, [pc, #400]	; (8002148 <printRadioSettings+0x75c>)
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f018 fdda 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001fbc:	f107 0308 	add.w	r3, r7, #8
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe f98d 	bl	80002e0 <strlen>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	f107 0108 	add.w	r1, r7, #8
 8001fce:	230a      	movs	r3, #10
 8001fd0:	4855      	ldr	r0, [pc, #340]	; (8002128 <printRadioSettings+0x73c>)
 8001fd2:	f00e f9f8 	bl	80103c6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+1);
 8001fd6:	2012      	movs	r0, #18
 8001fd8:	f7ff f8e2 	bl	80011a0 <NRF24_read_register>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8001fe2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8001fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001fea:	f107 0308 	add.w	r3, r7, #8
 8001fee:	4957      	ldr	r1, [pc, #348]	; (800214c <printRadioSettings+0x760>)
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f018 fdbd 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8001ff6:	f107 0308 	add.w	r3, r7, #8
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	f7fe f970 	bl	80002e0 <strlen>
 8002000:	4603      	mov	r3, r0
 8002002:	b29a      	uxth	r2, r3
 8002004:	f107 0108 	add.w	r1, r7, #8
 8002008:	230a      	movs	r3, #10
 800200a:	4847      	ldr	r0, [pc, #284]	; (8002128 <printRadioSettings+0x73c>)
 800200c:	f00e f9db 	bl	80103c6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+2);
 8002010:	2013      	movs	r0, #19
 8002012:	f7ff f8c5 	bl	80011a0 <NRF24_read_register>
 8002016:	4603      	mov	r3, r0
 8002018:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800201c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002020:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002024:	f107 0308 	add.w	r3, r7, #8
 8002028:	4949      	ldr	r1, [pc, #292]	; (8002150 <printRadioSettings+0x764>)
 800202a:	4618      	mov	r0, r3
 800202c:	f018 fda0 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002030:	f107 0308 	add.w	r3, r7, #8
 8002034:	4618      	mov	r0, r3
 8002036:	f7fe f953 	bl	80002e0 <strlen>
 800203a:	4603      	mov	r3, r0
 800203c:	b29a      	uxth	r2, r3
 800203e:	f107 0108 	add.w	r1, r7, #8
 8002042:	230a      	movs	r3, #10
 8002044:	4838      	ldr	r0, [pc, #224]	; (8002128 <printRadioSettings+0x73c>)
 8002046:	f00e f9be 	bl	80103c6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+3);
 800204a:	2014      	movs	r0, #20
 800204c:	f7ff f8a8 	bl	80011a0 <NRF24_read_register>
 8002050:	4603      	mov	r3, r0
 8002052:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002056:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800205a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800205e:	f107 0308 	add.w	r3, r7, #8
 8002062:	493c      	ldr	r1, [pc, #240]	; (8002154 <printRadioSettings+0x768>)
 8002064:	4618      	mov	r0, r3
 8002066:	f018 fd83 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800206a:	f107 0308 	add.w	r3, r7, #8
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe f936 	bl	80002e0 <strlen>
 8002074:	4603      	mov	r3, r0
 8002076:	b29a      	uxth	r2, r3
 8002078:	f107 0108 	add.w	r1, r7, #8
 800207c:	230a      	movs	r3, #10
 800207e:	482a      	ldr	r0, [pc, #168]	; (8002128 <printRadioSettings+0x73c>)
 8002080:	f00e f9a1 	bl	80103c6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+4);
 8002084:	2015      	movs	r0, #21
 8002086:	f7ff f88b 	bl	80011a0 <NRF24_read_register>
 800208a:	4603      	mov	r3, r0
 800208c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 8002090:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002094:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002098:	f107 0308 	add.w	r3, r7, #8
 800209c:	492e      	ldr	r1, [pc, #184]	; (8002158 <printRadioSettings+0x76c>)
 800209e:	4618      	mov	r0, r3
 80020a0:	f018 fd66 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020a4:	f107 0308 	add.w	r3, r7, #8
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe f919 	bl	80002e0 <strlen>
 80020ae:	4603      	mov	r3, r0
 80020b0:	b29a      	uxth	r2, r3
 80020b2:	f107 0108 	add.w	r1, r7, #8
 80020b6:	230a      	movs	r3, #10
 80020b8:	481b      	ldr	r0, [pc, #108]	; (8002128 <printRadioSettings+0x73c>)
 80020ba:	f00e f984 	bl	80103c6 <HAL_UART_Transmit>
	
	reg8Val = NRF24_read_register(0x11+5);
 80020be:	2016      	movs	r0, #22
 80020c0:	f7ff f86e 	bl	80011a0 <NRF24_read_register>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 80020ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80020ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020d2:	f107 0308 	add.w	r3, r7, #8
 80020d6:	4921      	ldr	r1, [pc, #132]	; (800215c <printRadioSettings+0x770>)
 80020d8:	4618      	mov	r0, r3
 80020da:	f018 fd49 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80020de:	f107 0308 	add.w	r3, r7, #8
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7fe f8fc 	bl	80002e0 <strlen>
 80020e8:	4603      	mov	r3, r0
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	f107 0108 	add.w	r1, r7, #8
 80020f0:	230a      	movs	r3, #10
 80020f2:	480d      	ldr	r0, [pc, #52]	; (8002128 <printRadioSettings+0x73c>)
 80020f4:	f00e f967 	bl	80103c6 <HAL_UART_Transmit>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 80020f8:	201c      	movs	r0, #28
 80020fa:	f7ff f851 	bl	80011a0 <NRF24_read_register>
 80020fe:	4603      	mov	r3, r0
 8002100:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002104:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002108:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800210c:	2b00      	cmp	r3, #0
 800210e:	bfcc      	ite	gt
 8002110:	2301      	movgt	r3, #1
 8002112:	2300      	movle	r3, #0
 8002114:	b2db      	uxtb	r3, r3
 8002116:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002118:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800211c:	f003 0302 	and.w	r3, r3, #2
 8002120:	e01e      	b.n	8002160 <printRadioSettings+0x774>
 8002122:	bf00      	nop
 8002124:	0801bf4c 	.word	0x0801bf4c
 8002128:	24000414 	.word	0x24000414
 800212c:	0801bf60 	.word	0x0801bf60
 8002130:	0801bf90 	.word	0x0801bf90
 8002134:	0801bfc0 	.word	0x0801bfc0
 8002138:	0801bfe8 	.word	0x0801bfe8
 800213c:	0801c010 	.word	0x0801c010
 8002140:	0801c038 	.word	0x0801c038
 8002144:	0801c060 	.word	0x0801c060
 8002148:	0801c08c 	.word	0x0801c08c
 800214c:	0801c0a8 	.word	0x0801c0a8
 8002150:	0801c0c4 	.word	0x0801c0c4
 8002154:	0801c0e0 	.word	0x0801c0e0
 8002158:	0801c0fc 	.word	0x0801c0fc
 800215c:	0801c118 	.word	0x0801c118
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002160:	2b00      	cmp	r3, #0
 8002162:	bfcc      	ite	gt
 8002164:	2301      	movgt	r3, #1
 8002166:	2300      	movle	r3, #0
 8002168:	b2db      	uxtb	r3, r3
 800216a:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800216c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002170:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002174:	2b00      	cmp	r3, #0
 8002176:	bfcc      	ite	gt
 8002178:	2301      	movgt	r3, #1
 800217a:	2300      	movle	r3, #0
 800217c:	b2db      	uxtb	r3, r3
 800217e:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002180:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002184:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 8002188:	2b00      	cmp	r3, #0
 800218a:	bfcc      	ite	gt
 800218c:	2301      	movgt	r3, #1
 800218e:	2300      	movle	r3, #0
 8002190:	b2db      	uxtb	r3, r3
 8002192:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 8002194:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002198:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800219c:	2b00      	cmp	r3, #0
 800219e:	bfcc      	ite	gt
 80021a0:	2301      	movgt	r3, #1
 80021a2:	2300      	movle	r3, #0
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 80021a8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021ac:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bfcc      	ite	gt
 80021b4:	2301      	movgt	r3, #1
 80021b6:	2300      	movle	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	f107 0008 	add.w	r0, r7, #8
 80021be:	9303      	str	r3, [sp, #12]
 80021c0:	9402      	str	r4, [sp, #8]
 80021c2:	9101      	str	r1, [sp, #4]
 80021c4:	9200      	str	r2, [sp, #0]
 80021c6:	4633      	mov	r3, r6
 80021c8:	462a      	mov	r2, r5
 80021ca:	494a      	ldr	r1, [pc, #296]	; (80022f4 <printRadioSettings+0x908>)
 80021cc:	f018 fcd0 	bl	801ab70 <siprintf>
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80021d0:	f107 0308 	add.w	r3, r7, #8
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f883 	bl	80002e0 <strlen>
 80021da:	4603      	mov	r3, r0
 80021dc:	b29a      	uxth	r2, r3
 80021de:	f107 0108 	add.w	r1, r7, #8
 80021e2:	230a      	movs	r3, #10
 80021e4:	4844      	ldr	r0, [pc, #272]	; (80022f8 <printRadioSettings+0x90c>)
 80021e6:	f00e f8ee 	bl	80103c6 <HAL_UART_Transmit>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 80021ea:	201d      	movs	r0, #29
 80021ec:	f7fe ffd8 	bl	80011a0 <NRF24_read_register>
 80021f0:	4603      	mov	r3, r0
 80021f2:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 80021f6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00c      	beq.n	800221c <printRadioSettings+0x830>
 8002202:	f107 0308 	add.w	r3, r7, #8
 8002206:	4a3d      	ldr	r2, [pc, #244]	; (80022fc <printRadioSettings+0x910>)
 8002208:	461c      	mov	r4, r3
 800220a:	4615      	mov	r5, r2
 800220c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800220e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002210:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002214:	6020      	str	r0, [r4, #0]
 8002216:	3404      	adds	r4, #4
 8002218:	8021      	strh	r1, [r4, #0]
 800221a:	e00e      	b.n	800223a <printRadioSettings+0x84e>
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800221c:	f107 0308 	add.w	r3, r7, #8
 8002220:	4a37      	ldr	r2, [pc, #220]	; (8002300 <printRadioSettings+0x914>)
 8002222:	461c      	mov	r4, r3
 8002224:	4615      	mov	r5, r2
 8002226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800222a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800222e:	6020      	str	r0, [r4, #0]
 8002230:	3404      	adds	r4, #4
 8002232:	8021      	strh	r1, [r4, #0]
 8002234:	3402      	adds	r4, #2
 8002236:	0c0b      	lsrs	r3, r1, #16
 8002238:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 800223a:	f107 0308 	add.w	r3, r7, #8
 800223e:	4618      	mov	r0, r3
 8002240:	f7fe f84e 	bl	80002e0 <strlen>
 8002244:	4603      	mov	r3, r0
 8002246:	b29a      	uxth	r2, r3
 8002248:	f107 0108 	add.w	r1, r7, #8
 800224c:	230a      	movs	r3, #10
 800224e:	482a      	ldr	r0, [pc, #168]	; (80022f8 <printRadioSettings+0x90c>)
 8002250:	f00e f8b9 	bl	80103c6 <HAL_UART_Transmit>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1)) sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 8002254:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002258:	f003 0302 	and.w	r3, r3, #2
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00b      	beq.n	8002278 <printRadioSettings+0x88c>
 8002260:	f107 0308 	add.w	r3, r7, #8
 8002264:	4a27      	ldr	r2, [pc, #156]	; (8002304 <printRadioSettings+0x918>)
 8002266:	461c      	mov	r4, r3
 8002268:	4615      	mov	r5, r2
 800226a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800226c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800226e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002272:	c403      	stmia	r4!, {r0, r1}
 8002274:	8022      	strh	r2, [r4, #0]
 8002276:	e00d      	b.n	8002294 <printRadioSettings+0x8a8>
	else sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 8002278:	f107 0308 	add.w	r3, r7, #8
 800227c:	4a22      	ldr	r2, [pc, #136]	; (8002308 <printRadioSettings+0x91c>)
 800227e:	461c      	mov	r4, r3
 8002280:	4615      	mov	r5, r2
 8002282:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002286:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800228a:	c403      	stmia	r4!, {r0, r1}
 800228c:	8022      	strh	r2, [r4, #0]
 800228e:	3402      	adds	r4, #2
 8002290:	0c13      	lsrs	r3, r2, #16
 8002292:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 8002294:	f107 0308 	add.w	r3, r7, #8
 8002298:	4618      	mov	r0, r3
 800229a:	f7fe f821 	bl	80002e0 <strlen>
 800229e:	4603      	mov	r3, r0
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	f107 0108 	add.w	r1, r7, #8
 80022a6:	230a      	movs	r3, #10
 80022a8:	4813      	ldr	r0, [pc, #76]	; (80022f8 <printRadioSettings+0x90c>)
 80022aa:	f00e f88c 	bl	80103c6 <HAL_UART_Transmit>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	4a16      	ldr	r2, [pc, #88]	; (800230c <printRadioSettings+0x920>)
 80022b4:	461c      	mov	r4, r3
 80022b6:	4615      	mov	r5, r2
 80022b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022c4:	682b      	ldr	r3, [r5, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	8022      	strh	r2, [r4, #0]
 80022ca:	3402      	adds	r4, #2
 80022cc:	0c1b      	lsrs	r3, r3, #16
 80022ce:	7023      	strb	r3, [r4, #0]
	HAL_UART_Transmit(&nrf24_huart, (uint8_t *)uartTxBuf, strlen(uartTxBuf), 10);
 80022d0:	f107 0308 	add.w	r3, r7, #8
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f803 	bl	80002e0 <strlen>
 80022da:	4603      	mov	r3, r0
 80022dc:	b29a      	uxth	r2, r3
 80022de:	f107 0108 	add.w	r1, r7, #8
 80022e2:	230a      	movs	r3, #10
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <printRadioSettings+0x90c>)
 80022e6:	f00e f86e 	bl	80103c6 <HAL_UART_Transmit>
}
 80022ea:	bf00      	nop
 80022ec:	3774      	adds	r7, #116	; 0x74
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	0801c134 	.word	0x0801c134
 80022f8:	24000414 	.word	0x24000414
 80022fc:	0801c180 	.word	0x0801c180
 8002300:	0801c198 	.word	0x0801c198
 8002304:	0801c1b0 	.word	0x0801c1b0
 8002308:	0801c1cc 	.word	0x0801c1cc
 800230c:	0801bda0 	.word	0x0801bda0

08002310 <WriteToBuff>:
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
 8002318:	6039      	str	r1, [r7, #0]
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	2b01      	cmp	r3, #1
 800231e:	dd03      	ble.n	8002328 <WriteToBuff+0x18>
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002326:	db01      	blt.n	800232c <WriteToBuff+0x1c>
 8002328:	2303      	movs	r3, #3
 800232a:	e091      	b.n	8002450 <WriteToBuff+0x140>
 800232c:	4b4a      	ldr	r3, [pc, #296]	; (8002458 <WriteToBuff+0x148>)
 800232e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002338:	d23a      	bcs.n	80023b0 <WriteToBuff+0xa0>
 800233a:	4b47      	ldr	r3, [pc, #284]	; (8002458 <WriteToBuff+0x148>)
 800233c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002340:	681a      	ldr	r2, [r3, #0]
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	4413      	add	r3, r2
 8002346:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800234a:	d331      	bcc.n	80023b0 <WriteToBuff+0xa0>
 800234c:	4b42      	ldr	r3, [pc, #264]	; (8002458 <WriteToBuff+0x148>)
 800234e:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002352:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	4b3f      	ldr	r3, [pc, #252]	; (8002458 <WriteToBuff+0x148>)
 800235a:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a3d      	ldr	r2, [pc, #244]	; (8002458 <WriteToBuff+0x148>)
 8002362:	4413      	add	r3, r2
 8002364:	683a      	ldr	r2, [r7, #0]
 8002366:	6879      	ldr	r1, [r7, #4]
 8002368:	4618      	mov	r0, r3
 800236a:	f018 fa85 	bl	801a878 <memcpy>
 800236e:	4b3a      	ldr	r3, [pc, #232]	; (8002458 <WriteToBuff+0x148>)
 8002370:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	441a      	add	r2, r3
 800237a:	4b37      	ldr	r3, [pc, #220]	; (8002458 <WriteToBuff+0x148>)
 800237c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	4b36      	ldr	r3, [pc, #216]	; (800245c <WriteToBuff+0x14c>)
 8002384:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002388:	4933      	ldr	r1, [pc, #204]	; (8002458 <WriteToBuff+0x148>)
 800238a:	4835      	ldr	r0, [pc, #212]	; (8002460 <WriteToBuff+0x150>)
 800238c:	f016 fccf 	bl	8018d2e <f_write>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10a      	bne.n	80023ac <WriteToBuff+0x9c>
 8002396:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800239a:	2100      	movs	r1, #0
 800239c:	4831      	ldr	r0, [pc, #196]	; (8002464 <WriteToBuff+0x154>)
 800239e:	f018 fa76 	bl	801a88e <memset>
 80023a2:	482f      	ldr	r0, [pc, #188]	; (8002460 <WriteToBuff+0x150>)
 80023a4:	f016 fe38 	bl	8019018 <f_sync>
 80023a8:	2301      	movs	r3, #1
 80023aa:	e051      	b.n	8002450 <WriteToBuff+0x140>
 80023ac:	2304      	movs	r3, #4
 80023ae:	e04f      	b.n	8002450 <WriteToBuff+0x140>
 80023b0:	4b29      	ldr	r3, [pc, #164]	; (8002458 <WriteToBuff+0x148>)
 80023b2:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	4413      	add	r3, r2
 80023bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80023c0:	d330      	bcc.n	8002424 <WriteToBuff+0x114>
 80023c2:	4b25      	ldr	r3, [pc, #148]	; (8002458 <WriteToBuff+0x148>)
 80023c4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <WriteToBuff+0x148>)
 80023ce:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a20      	ldr	r2, [pc, #128]	; (8002458 <WriteToBuff+0x148>)
 80023d6:	4413      	add	r3, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6879      	ldr	r1, [r7, #4]
 80023dc:	4618      	mov	r0, r3
 80023de:	f018 fa4b 	bl	801a878 <memcpy>
 80023e2:	4b1d      	ldr	r3, [pc, #116]	; (8002458 <WriteToBuff+0x148>)
 80023e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	441a      	add	r2, r3
 80023ee:	4b1a      	ldr	r3, [pc, #104]	; (8002458 <WriteToBuff+0x148>)
 80023f0:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 80023f4:	601a      	str	r2, [r3, #0]
 80023f6:	4b19      	ldr	r3, [pc, #100]	; (800245c <WriteToBuff+0x14c>)
 80023f8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023fc:	4919      	ldr	r1, [pc, #100]	; (8002464 <WriteToBuff+0x154>)
 80023fe:	4818      	ldr	r0, [pc, #96]	; (8002460 <WriteToBuff+0x150>)
 8002400:	f016 fc95 	bl	8018d2e <f_write>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <WriteToBuff+0x110>
 800240a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800240e:	2100      	movs	r1, #0
 8002410:	4811      	ldr	r0, [pc, #68]	; (8002458 <WriteToBuff+0x148>)
 8002412:	f018 fa3c 	bl	801a88e <memset>
 8002416:	4812      	ldr	r0, [pc, #72]	; (8002460 <WriteToBuff+0x150>)
 8002418:	f016 fdfe 	bl	8019018 <f_sync>
 800241c:	2302      	movs	r3, #2
 800241e:	e017      	b.n	8002450 <WriteToBuff+0x140>
 8002420:	2304      	movs	r3, #4
 8002422:	e015      	b.n	8002450 <WriteToBuff+0x140>
 8002424:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <WriteToBuff+0x148>)
 8002426:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4a0a      	ldr	r2, [pc, #40]	; (8002458 <WriteToBuff+0x148>)
 800242e:	4413      	add	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6879      	ldr	r1, [r7, #4]
 8002434:	4618      	mov	r0, r3
 8002436:	f018 fa1f 	bl	801a878 <memcpy>
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <WriteToBuff+0x148>)
 800243c:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	441a      	add	r2, r3
 8002446:	4b04      	ldr	r3, [pc, #16]	; (8002458 <WriteToBuff+0x148>)
 8002448:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 800244c:	601a      	str	r2, [r3, #0]
 800244e:	2300      	movs	r3, #0
 8002450:	4618      	mov	r0, r3
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	240004a0 	.word	0x240004a0
 800245c:	240440f8 	.word	0x240440f8
 8002460:	24040510 	.word	0x24040510
 8002464:	240204a0 	.word	0x240204a0

08002468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246c:	f5ad 4dd5 	sub.w	sp, sp, #27264	; 0x6a80
 8002470:	b09e      	sub	sp, #120	; 0x78
 8002472:	af22      	add	r7, sp, #136	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002474:	f002 fc3a 	bl	8004cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002478:	f001 fb6a 	bl	8003b50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800247c:	f001 fe96 	bl	80041ac <MX_GPIO_Init>
  MX_DMA_Init();
 8002480:	f001 fe74 	bl	800416c <MX_DMA_Init>
  MX_SDMMC1_SD_Init();
 8002484:	f001 fd62 	bl	8003f4c <MX_SDMMC1_SD_Init>
  MX_FATFS_Init();
 8002488:	f011 fac8 	bl	8013a1c <MX_FATFS_Init>
  MX_USB_DEVICE_Init();
 800248c:	f016 fec8 	bl	8019220 <MX_USB_DEVICE_Init>
  MX_FDCAN1_Init();
 8002490:	f001 fc68 	bl	8003d64 <MX_FDCAN1_Init>
  MX_FDCAN2_Init();
 8002494:	f001 fccc 	bl	8003e30 <MX_FDCAN2_Init>
  MX_UART8_Init();
 8002498:	f001 fdd0 	bl	800403c <MX_UART8_Init>
  MX_USART3_UART_Init();
 800249c:	f001 fe1a 	bl	80040d4 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80024a0:	f001 fd76 	bl	8003f90 <MX_SPI1_Init>
  MX_RTC_Init();
 80024a4:	f001 fd28 	bl	8003ef8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //HAL_Delay(1000);//NEEDED FOR USB MASS STORAGE TO WORK
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80024a8:	2101      	movs	r1, #1
 80024aa:	48b9      	ldr	r0, [pc, #740]	; (8002790 <main+0x328>)
 80024ac:	f006 f9e3 	bl	8008876 <HAL_GPIO_TogglePin>
  //Telemetry
  NRF24_begin(TELE_CE_GPIO_Port, TELE_CS_Pin, TELE_CE_Pin, hspi1);
 80024b0:	4cb8      	ldr	r4, [pc, #736]	; (8002794 <main+0x32c>)
 80024b2:	4668      	mov	r0, sp
 80024b4:	1d23      	adds	r3, r4, #4
 80024b6:	2284      	movs	r2, #132	; 0x84
 80024b8:	4619      	mov	r1, r3
 80024ba:	f018 f9dd 	bl	801a878 <memcpy>
 80024be:	6823      	ldr	r3, [r4, #0]
 80024c0:	2201      	movs	r2, #1
 80024c2:	2102      	movs	r1, #2
 80024c4:	48b4      	ldr	r0, [pc, #720]	; (8002798 <main+0x330>)
 80024c6:	f7fe ff45 	bl	8001354 <NRF24_begin>
    //nrf24_DebugUART_Init(huart3);



    // TRANSMIT NO ACK //
    NRF24_stopListening();
 80024ca:	f7ff f823 	bl	8001514 <NRF24_stopListening>
    NRF24_openWritingPipe(TxpipeAddrs);
 80024ce:	4bb3      	ldr	r3, [pc, #716]	; (800279c <main+0x334>)
 80024d0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80024d4:	4618      	mov	r0, r3
 80024d6:	4621      	mov	r1, r4
 80024d8:	f7ff f87c 	bl	80015d4 <NRF24_openWritingPipe>
    NRF24_setAutoAck(false);
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff f905 	bl	80016ec <NRF24_setAutoAck>
    NRF24_setChannel(42);
 80024e2:	202a      	movs	r0, #42	; 0x2a
 80024e4:	f7ff f8b5 	bl	8001652 <NRF24_setChannel>
    NRF24_setPayloadSize(32);
 80024e8:	2020      	movs	r0, #32
 80024ea:	f7ff f8c7 	bl	800167c <NRF24_setPayloadSize>

    printRadioSettings();
 80024ee:	f7ff fa7d 	bl	80019ec <printRadioSettings>
  //END Telemetry
  printf("Starting\n");
 80024f2:	48ab      	ldr	r0, [pc, #684]	; (80027a0 <main+0x338>)
 80024f4:	f018 faf0 	bl	801aad8 <puts>
  FDCAN_Config(&hfdcan1);
 80024f8:	48aa      	ldr	r0, [pc, #680]	; (80027a4 <main+0x33c>)
 80024fa:	f7fe f8c9 	bl	8000690 <FDCAN_Config>
  //GPS DMA
  HAL_UART_Receive_DMA(&huart3, (uint8_t *)rxBuf, BUFFLENGTH);
 80024fe:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8002502:	49a9      	ldr	r1, [pc, #676]	; (80027a8 <main+0x340>)
 8002504:	48a9      	ldr	r0, [pc, #676]	; (80027ac <main+0x344>)
 8002506:	f00d fff5 	bl	80104f4 <HAL_UART_Receive_DMA>
  HAL_Delay(1000);//GPS required this in testing, maybe remove?
 800250a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800250e:	f002 fc7f 	bl	8004e10 <HAL_Delay>
  //variables required for 10Hz GPS
  uint16_t measRate = 100;
 8002512:	2364      	movs	r3, #100	; 0x64
 8002514:	f646 222a 	movw	r2, #27178	; 0x6a2a
 8002518:	443a      	add	r2, r7
 800251a:	8013      	strh	r3, [r2, #0]
  uint16_t navRate = 1;
 800251c:	2301      	movs	r3, #1
 800251e:	f646 2228 	movw	r2, #27176	; 0x6a28
 8002522:	443a      	add	r2, r7
 8002524:	8013      	strh	r3, [r2, #0]
  uint16_t timeRef = 0;
 8002526:	2300      	movs	r3, #0
 8002528:	f646 2226 	movw	r2, #27174	; 0x6a26
 800252c:	443a      	add	r2, r7
 800252e:	8013      	strh	r3, [r2, #0]
  gps_rate_config(&huart3, measRate, navRate, timeRef);
 8002530:	f646 2326 	movw	r3, #27174	; 0x6a26
 8002534:	443b      	add	r3, r7
 8002536:	881b      	ldrh	r3, [r3, #0]
 8002538:	f646 2228 	movw	r2, #27176	; 0x6a28
 800253c:	443a      	add	r2, r7
 800253e:	8812      	ldrh	r2, [r2, #0]
 8002540:	f646 212a 	movw	r1, #27178	; 0x6a2a
 8002544:	4439      	add	r1, r7
 8002546:	8809      	ldrh	r1, [r1, #0]
 8002548:	4898      	ldr	r0, [pc, #608]	; (80027ac <main+0x344>)
 800254a:	f7fe fd39 	bl	8000fc0 <gps_rate_config>

  gps_msg_config(&huart3, "DTM", 0);//ERROR
 800254e:	2200      	movs	r2, #0
 8002550:	4997      	ldr	r1, [pc, #604]	; (80027b0 <main+0x348>)
 8002552:	4896      	ldr	r0, [pc, #600]	; (80027ac <main+0x344>)
 8002554:	f7fe fcc4 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GAQ", 0);
 8002558:	2200      	movs	r2, #0
 800255a:	4996      	ldr	r1, [pc, #600]	; (80027b4 <main+0x34c>)
 800255c:	4893      	ldr	r0, [pc, #588]	; (80027ac <main+0x344>)
 800255e:	f7fe fcbf 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GBQ", 0);
 8002562:	2200      	movs	r2, #0
 8002564:	4994      	ldr	r1, [pc, #592]	; (80027b8 <main+0x350>)
 8002566:	4891      	ldr	r0, [pc, #580]	; (80027ac <main+0x344>)
 8002568:	f7fe fcba 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GBS", 0);//ERROR
 800256c:	2200      	movs	r2, #0
 800256e:	4993      	ldr	r1, [pc, #588]	; (80027bc <main+0x354>)
 8002570:	488e      	ldr	r0, [pc, #568]	; (80027ac <main+0x344>)
 8002572:	f7fe fcb5 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GGA", 0);//ERROR
 8002576:	2200      	movs	r2, #0
 8002578:	4991      	ldr	r1, [pc, #580]	; (80027c0 <main+0x358>)
 800257a:	488c      	ldr	r0, [pc, #560]	; (80027ac <main+0x344>)
 800257c:	f7fe fcb0 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GLL", 0);//ERROR
 8002580:	2200      	movs	r2, #0
 8002582:	4990      	ldr	r1, [pc, #576]	; (80027c4 <main+0x35c>)
 8002584:	4889      	ldr	r0, [pc, #548]	; (80027ac <main+0x344>)
 8002586:	f7fe fcab 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GLQ", 0);
 800258a:	2200      	movs	r2, #0
 800258c:	498e      	ldr	r1, [pc, #568]	; (80027c8 <main+0x360>)
 800258e:	4887      	ldr	r0, [pc, #540]	; (80027ac <main+0x344>)
 8002590:	f7fe fca6 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GNQ", 0);
 8002594:	2200      	movs	r2, #0
 8002596:	498d      	ldr	r1, [pc, #564]	; (80027cc <main+0x364>)
 8002598:	4884      	ldr	r0, [pc, #528]	; (80027ac <main+0x344>)
 800259a:	f7fe fca1 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GNS", 0);//ERROR
 800259e:	2200      	movs	r2, #0
 80025a0:	498b      	ldr	r1, [pc, #556]	; (80027d0 <main+0x368>)
 80025a2:	4882      	ldr	r0, [pc, #520]	; (80027ac <main+0x344>)
 80025a4:	f7fe fc9c 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GPQ", 0);
 80025a8:	2200      	movs	r2, #0
 80025aa:	498a      	ldr	r1, [pc, #552]	; (80027d4 <main+0x36c>)
 80025ac:	487f      	ldr	r0, [pc, #508]	; (80027ac <main+0x344>)
 80025ae:	f7fe fc97 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GRS", 0);//ERROR
 80025b2:	2200      	movs	r2, #0
 80025b4:	4988      	ldr	r1, [pc, #544]	; (80027d8 <main+0x370>)
 80025b6:	487d      	ldr	r0, [pc, #500]	; (80027ac <main+0x344>)
 80025b8:	f7fe fc92 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GSA", 0);//ERROR
 80025bc:	2200      	movs	r2, #0
 80025be:	4987      	ldr	r1, [pc, #540]	; (80027dc <main+0x374>)
 80025c0:	487a      	ldr	r0, [pc, #488]	; (80027ac <main+0x344>)
 80025c2:	f7fe fc8d 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GST", 0);//ERROR
 80025c6:	2200      	movs	r2, #0
 80025c8:	4985      	ldr	r1, [pc, #532]	; (80027e0 <main+0x378>)
 80025ca:	4878      	ldr	r0, [pc, #480]	; (80027ac <main+0x344>)
 80025cc:	f7fe fc88 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "GSV", 0);//ERROR
 80025d0:	2200      	movs	r2, #0
 80025d2:	4984      	ldr	r1, [pc, #528]	; (80027e4 <main+0x37c>)
 80025d4:	4875      	ldr	r0, [pc, #468]	; (80027ac <main+0x344>)
 80025d6:	f7fe fc83 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "RLM", 0);
 80025da:	2200      	movs	r2, #0
 80025dc:	4982      	ldr	r1, [pc, #520]	; (80027e8 <main+0x380>)
 80025de:	4873      	ldr	r0, [pc, #460]	; (80027ac <main+0x344>)
 80025e0:	f7fe fc7e 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "RMC", 1);//ERROR
 80025e4:	2201      	movs	r2, #1
 80025e6:	4981      	ldr	r1, [pc, #516]	; (80027ec <main+0x384>)
 80025e8:	4870      	ldr	r0, [pc, #448]	; (80027ac <main+0x344>)
 80025ea:	f7fe fc79 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "TXT", 0);
 80025ee:	2200      	movs	r2, #0
 80025f0:	497f      	ldr	r1, [pc, #508]	; (80027f0 <main+0x388>)
 80025f2:	486e      	ldr	r0, [pc, #440]	; (80027ac <main+0x344>)
 80025f4:	f7fe fc74 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "VLW", 0);//ERROR
 80025f8:	2200      	movs	r2, #0
 80025fa:	497e      	ldr	r1, [pc, #504]	; (80027f4 <main+0x38c>)
 80025fc:	486b      	ldr	r0, [pc, #428]	; (80027ac <main+0x344>)
 80025fe:	f7fe fc6f 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "VTG", 0);//ERROR
 8002602:	2200      	movs	r2, #0
 8002604:	497c      	ldr	r1, [pc, #496]	; (80027f8 <main+0x390>)
 8002606:	4869      	ldr	r0, [pc, #420]	; (80027ac <main+0x344>)
 8002608:	f7fe fc6a 	bl	8000ee0 <gps_msg_config>
  gps_msg_config(&huart3, "ZDA", 0);//ERROR
 800260c:	2200      	movs	r2, #0
 800260e:	497b      	ldr	r1, [pc, #492]	; (80027fc <main+0x394>)
 8002610:	4866      	ldr	r0, [pc, #408]	; (80027ac <main+0x344>)
 8002612:	f7fe fc65 	bl	8000ee0 <gps_msg_config>

  if(f_mount(&myFATAFS, SDPath, 1) == FR_OK){
 8002616:	2201      	movs	r2, #1
 8002618:	4979      	ldr	r1, [pc, #484]	; (8002800 <main+0x398>)
 800261a:	487a      	ldr	r0, [pc, #488]	; (8002804 <main+0x39c>)
 800261c:	f016 f844 	bl	80186a8 <f_mount>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8237 	bne.w	8002a96 <main+0x62e>
  	  //HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
  	  char Filename[20] = "test";
 8002628:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 800262c:	443a      	add	r2, r7
 800262e:	4976      	ldr	r1, [pc, #472]	; (8002808 <main+0x3a0>)
 8002630:	4613      	mov	r3, r2
 8002632:	c903      	ldmia	r1, {r0, r1}
 8002634:	6018      	str	r0, [r3, #0]
 8002636:	3304      	adds	r3, #4
 8002638:	7019      	strb	r1, [r3, #0]
 800263a:	1d53      	adds	r3, r2, #5
 800263c:	2200      	movs	r2, #0
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	605a      	str	r2, [r3, #4]
 8002642:	609a      	str	r2, [r3, #8]
 8002644:	f8c3 200b 	str.w	r2, [r3, #11]
      char FilePath[150];
      char ConfigPath[] ="Config.csv\0";
 8002648:	4b70      	ldr	r3, [pc, #448]	; (800280c <main+0x3a4>)
 800264a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800264e:	443a      	add	r2, r7
 8002650:	4413      	add	r3, r2
 8002652:	4a6f      	ldr	r2, [pc, #444]	; (8002810 <main+0x3a8>)
 8002654:	ca07      	ldmia	r2, {r0, r1, r2}
 8002656:	e883 0007 	stmia.w	r3, {r0, r1, r2}
      char ConfigParams[20000] = {0};
 800265a:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <main+0x3ac>)
 800265c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002660:	443a      	add	r2, r7
 8002662:	4413      	add	r3, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f644 6320 	movw	r3, #20000	; 0x4e20
 800266a:	461a      	mov	r2, r3
 800266c:	2100      	movs	r1, #0
 800266e:	f018 f90e 	bl	801a88e <memset>
      //Tries to open config File
      if(f_open(&Config, ConfigPath, FA_READ) == FR_NO_FILE){
 8002672:	4b66      	ldr	r3, [pc, #408]	; (800280c <main+0x3a4>)
 8002674:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002678:	443a      	add	r2, r7
 800267a:	4413      	add	r3, r2
 800267c:	2201      	movs	r2, #1
 800267e:	4619      	mov	r1, r3
 8002680:	4865      	ldr	r0, [pc, #404]	; (8002818 <main+0x3b0>)
 8002682:	f016 f857 	bl	8018734 <f_open>
 8002686:	4603      	mov	r3, r0
 8002688:	2b04      	cmp	r3, #4
 800268a:	d141      	bne.n	8002710 <main+0x2a8>
        //If file doesn't exist creates a file using hard coded defaults and passes those to internal config array
        f_open(&Config, ConfigPath, FA_WRITE | FA_CREATE_ALWAYS);
 800268c:	4b5f      	ldr	r3, [pc, #380]	; (800280c <main+0x3a4>)
 800268e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002692:	443a      	add	r2, r7
 8002694:	4413      	add	r3, r2
 8002696:	220a      	movs	r2, #10
 8002698:	4619      	mov	r1, r3
 800269a:	485f      	ldr	r0, [pc, #380]	; (8002818 <main+0x3b0>)
 800269c:	f016 f84a 	bl	8018734 <f_open>

        sprintf(ConfigParams, "ID(HEX),Device,Bytes,Distribution,Instruction,Description,\n");
 80026a0:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <main+0x3ac>)
 80026a2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80026a6:	443a      	add	r2, r7
 80026a8:	4413      	add	r3, r2
 80026aa:	4a5c      	ldr	r2, [pc, #368]	; (800281c <main+0x3b4>)
 80026ac:	461c      	mov	r4, r3
 80026ae:	4615      	mov	r5, r2
 80026b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80026ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80026bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80026c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        sprintf(ConfigParams + strlen(ConfigParams),"0x50,Datalogger,8,44,%%u %%u,FileNumber(uint32_t) CurrentMillis(uint32_t),\n");
 80026c4:	4b53      	ldr	r3, [pc, #332]	; (8002814 <main+0x3ac>)
 80026c6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80026ca:	443a      	add	r2, r7
 80026cc:	4413      	add	r3, r2
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fd fe06 	bl	80002e0 <strlen>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b4f      	ldr	r3, [pc, #316]	; (8002814 <main+0x3ac>)
 80026d8:	f646 2170 	movw	r1, #27248	; 0x6a70
 80026dc:	4439      	add	r1, r7
 80026de:	440b      	add	r3, r1
 80026e0:	4413      	add	r3, r2
 80026e2:	494f      	ldr	r1, [pc, #316]	; (8002820 <main+0x3b8>)
 80026e4:	4618      	mov	r0, r3
 80026e6:	f018 fa43 	bl	801ab70 <siprintf>

        f_write(&Config, ConfigParams, strlen(ConfigParams), &ConfByteW);
 80026ea:	4b4a      	ldr	r3, [pc, #296]	; (8002814 <main+0x3ac>)
 80026ec:	f646 2270 	movw	r2, #27248	; 0x6a70
 80026f0:	443a      	add	r2, r7
 80026f2:	4413      	add	r3, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f7fd fdf3 	bl	80002e0 <strlen>
 80026fa:	4602      	mov	r2, r0
 80026fc:	4945      	ldr	r1, [pc, #276]	; (8002814 <main+0x3ac>)
 80026fe:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002702:	443b      	add	r3, r7
 8002704:	4419      	add	r1, r3
 8002706:	4b47      	ldr	r3, [pc, #284]	; (8002824 <main+0x3bc>)
 8002708:	4843      	ldr	r0, [pc, #268]	; (8002818 <main+0x3b0>)
 800270a:	f016 fb10 	bl	8018d2e <f_write>
 800270e:	e00a      	b.n	8002726 <main+0x2be>
      }else{
        //If file does exist reads in config parameters to internal config array
        f_read(&Config, ConfigParams, sizeof(ConfigParams), &ConfByteR);
 8002710:	4940      	ldr	r1, [pc, #256]	; (8002814 <main+0x3ac>)
 8002712:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002716:	443b      	add	r3, r7
 8002718:	4419      	add	r1, r3
 800271a:	4b43      	ldr	r3, [pc, #268]	; (8002828 <main+0x3c0>)
 800271c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8002720:	483d      	ldr	r0, [pc, #244]	; (8002818 <main+0x3b0>)
 8002722:	f016 f9c5 	bl	8018ab0 <f_read>
      }
      f_close(&Config);
 8002726:	483c      	ldr	r0, [pc, #240]	; (8002818 <main+0x3b0>)
 8002728:	f016 fcf4 	bl	8019114 <f_close>
      printf("%s\n\r", ConfigParams);
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <main+0x3ac>)
 800272e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002732:	443a      	add	r2, r7
 8002734:	4413      	add	r3, r2
 8002736:	4619      	mov	r1, r3
 8002738:	483c      	ldr	r0, [pc, #240]	; (800282c <main+0x3c4>)
 800273a:	f018 f959 	bl	801a9f0 <iprintf>
      //MAKE NEW FILE INCREMENTED BY 1
      
      //Fill ReadInstructions
      const char delim[] = ",";
 800273e:	4b3c      	ldr	r3, [pc, #240]	; (8002830 <main+0x3c8>)
 8002740:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002744:	443a      	add	r2, r7
 8002746:	4413      	add	r3, r2
 8002748:	222c      	movs	r2, #44	; 0x2c
 800274a:	801a      	strh	r2, [r3, #0]
      uint32_t i = 0, j = 0;
 800274c:	2300      	movs	r3, #0
 800274e:	f646 226c 	movw	r2, #27244	; 0x6a6c
 8002752:	443a      	add	r2, r7
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	f646 2268 	movw	r2, #27240	; 0x6a68
 800275c:	443a      	add	r2, r7
 800275e:	6013      	str	r3, [r2, #0]
      char *ptr = strtok(ConfigParams, delim);
 8002760:	4a33      	ldr	r2, [pc, #204]	; (8002830 <main+0x3c8>)
 8002762:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002766:	443b      	add	r3, r7
 8002768:	441a      	add	r2, r3
 800276a:	4b2a      	ldr	r3, [pc, #168]	; (8002814 <main+0x3ac>)
 800276c:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002770:	4439      	add	r1, r7
 8002772:	440b      	add	r3, r1
 8002774:	4611      	mov	r1, r2
 8002776:	4618      	mov	r0, r3
 8002778:	f018 fa22 	bl	801abc0 <strtok>
 800277c:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002780:	443b      	add	r3, r7
 8002782:	6018      	str	r0, [r3, #0]
      //skip over header
      for(int c = 0; c < 6; c++){
 8002784:	2300      	movs	r3, #0
 8002786:	f646 2260 	movw	r2, #27232	; 0x6a60
 800278a:	443a      	add	r2, r7
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e067      	b.n	8002860 <main+0x3f8>
 8002790:	58020400 	.word	0x58020400
 8002794:	240448dc 	.word	0x240448dc
 8002798:	58020000 	.word	0x58020000
 800279c:	24000000 	.word	0x24000000
 80027a0:	0801c2e4 	.word	0x0801c2e4
 80027a4:	240447b0 	.word	0x240447b0
 80027a8:	2404432c 	.word	0x2404432c
 80027ac:	24044660 	.word	0x24044660
 80027b0:	0801c2f0 	.word	0x0801c2f0
 80027b4:	0801c2f4 	.word	0x0801c2f4
 80027b8:	0801c2f8 	.word	0x0801c2f8
 80027bc:	0801c2fc 	.word	0x0801c2fc
 80027c0:	0801c300 	.word	0x0801c300
 80027c4:	0801c304 	.word	0x0801c304
 80027c8:	0801c308 	.word	0x0801c308
 80027cc:	0801c30c 	.word	0x0801c30c
 80027d0:	0801c310 	.word	0x0801c310
 80027d4:	0801c314 	.word	0x0801c314
 80027d8:	0801c318 	.word	0x0801c318
 80027dc:	0801c31c 	.word	0x0801c31c
 80027e0:	0801c320 	.word	0x0801c320
 80027e4:	0801c324 	.word	0x0801c324
 80027e8:	0801c328 	.word	0x0801c328
 80027ec:	0801c32c 	.word	0x0801c32c
 80027f0:	0801c330 	.word	0x0801c330
 80027f4:	0801c334 	.word	0x0801c334
 80027f8:	0801c338 	.word	0x0801c338
 80027fc:	0801c33c 	.word	0x0801c33c
 8002800:	24044a0c 	.word	0x24044a0c
 8002804:	24043df8 	.word	0x24043df8
 8002808:	0801c42c 	.word	0x0801c42c
 800280c:	ffffe474 	.word	0xffffe474
 8002810:	0801c440 	.word	0x0801c440
 8002814:	ffff9628 	.word	0xffff9628
 8002818:	240440fc 	.word	0x240440fc
 800281c:	0801c340 	.word	0x0801c340
 8002820:	0801c37c 	.word	0x0801c37c
 8002824:	24043df4 	.word	0x24043df4
 8002828:	24040740 	.word	0x24040740
 800282c:	0801c3c8 	.word	0x0801c3c8
 8002830:	ffffe470 	.word	0xffffe470
    	  ptr = strtok(NULL, delim);
 8002834:	4b75      	ldr	r3, [pc, #468]	; (8002a0c <main+0x5a4>)
 8002836:	f646 2270 	movw	r2, #27248	; 0x6a70
 800283a:	443a      	add	r2, r7
 800283c:	4413      	add	r3, r2
 800283e:	4619      	mov	r1, r3
 8002840:	2000      	movs	r0, #0
 8002842:	f018 f9bd 	bl	801abc0 <strtok>
 8002846:	f646 2364 	movw	r3, #27236	; 0x6a64
 800284a:	443b      	add	r3, r7
 800284c:	6018      	str	r0, [r3, #0]
      for(int c = 0; c < 6; c++){
 800284e:	f646 2360 	movw	r3, #27232	; 0x6a60
 8002852:	443b      	add	r3, r7
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	3301      	adds	r3, #1
 8002858:	f646 2260 	movw	r2, #27232	; 0x6a60
 800285c:	443a      	add	r2, r7
 800285e:	6013      	str	r3, [r2, #0]
 8002860:	f646 2360 	movw	r3, #27232	; 0x6a60
 8002864:	443b      	add	r3, r7
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2b05      	cmp	r3, #5
 800286a:	dde3      	ble.n	8002834 <main+0x3cc>
      }
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 800286c:	e09f      	b.n	80029ae <main+0x546>
		switch(i){
 800286e:	f646 236c 	movw	r3, #27244	; 0x6a6c
 8002872:	443b      	add	r3, r7
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2b06      	cmp	r3, #6
 8002878:	f200 8083 	bhi.w	8002982 <main+0x51a>
 800287c:	a201      	add	r2, pc, #4	; (adr r2, 8002884 <main+0x41c>)
 800287e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002882:	bf00      	nop
 8002884:	080028a1 	.word	0x080028a1
 8002888:	08002983 	.word	0x08002983
 800288c:	080028cb 	.word	0x080028cb
 8002890:	080028f3 	.word	0x080028f3
 8002894:	0800291b 	.word	0x0800291b
 8002898:	08002983 	.word	0x08002983
 800289c:	08002941 	.word	0x08002941
			case 0:
				Configs[j].id = (int)strtol(ptr, NULL, 0);
 80028a0:	2200      	movs	r2, #0
 80028a2:	2100      	movs	r1, #0
 80028a4:	f646 2364 	movw	r3, #27236	; 0x6a64
 80028a8:	443b      	add	r3, r7
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	f018 fa58 	bl	801ad60 <strtol>
 80028b0:	4603      	mov	r3, r0
 80028b2:	4618      	mov	r0, r3
 80028b4:	4a56      	ldr	r2, [pc, #344]	; (8002a10 <main+0x5a8>)
 80028b6:	f646 2368 	movw	r3, #27240	; 0x6a68
 80028ba:	443b      	add	r3, r7
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	218c      	movs	r1, #140	; 0x8c
 80028c0:	fb01 f303 	mul.w	r3, r1, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	6018      	str	r0, [r3, #0]
				break;
 80028c8:	e05b      	b.n	8002982 <main+0x51a>
			case 2:
				Configs[j].Bytes = atoi(ptr);
 80028ca:	f646 2364 	movw	r3, #27236	; 0x6a64
 80028ce:	443b      	add	r3, r7
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	f017 ff92 	bl	801a7fa <atoi>
 80028d6:	4603      	mov	r3, r0
 80028d8:	4618      	mov	r0, r3
 80028da:	4a4d      	ldr	r2, [pc, #308]	; (8002a10 <main+0x5a8>)
 80028dc:	f646 2368 	movw	r3, #27240	; 0x6a68
 80028e0:	443b      	add	r3, r7
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	218c      	movs	r1, #140	; 0x8c
 80028e6:	fb01 f303 	mul.w	r3, r1, r3
 80028ea:	4413      	add	r3, r2
 80028ec:	3304      	adds	r3, #4
 80028ee:	6018      	str	r0, [r3, #0]
				break;
 80028f0:	e047      	b.n	8002982 <main+0x51a>
			case 3:
				Configs[j].Distribution = atoi(ptr);
 80028f2:	f646 2364 	movw	r3, #27236	; 0x6a64
 80028f6:	443b      	add	r3, r7
 80028f8:	6818      	ldr	r0, [r3, #0]
 80028fa:	f017 ff7e 	bl	801a7fa <atoi>
 80028fe:	4603      	mov	r3, r0
 8002900:	4618      	mov	r0, r3
 8002902:	4a43      	ldr	r2, [pc, #268]	; (8002a10 <main+0x5a8>)
 8002904:	f646 2368 	movw	r3, #27240	; 0x6a68
 8002908:	443b      	add	r3, r7
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	218c      	movs	r1, #140	; 0x8c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3308      	adds	r3, #8
 8002916:	6018      	str	r0, [r3, #0]
				break;
 8002918:	e033      	b.n	8002982 <main+0x51a>
			case 4:
				sprintf(Configs[j].Intsructions, "%s", ptr);
 800291a:	f646 2368 	movw	r3, #27240	; 0x6a68
 800291e:	443b      	add	r3, r7
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	228c      	movs	r2, #140	; 0x8c
 8002924:	fb02 f303 	mul.w	r3, r2, r3
 8002928:	3308      	adds	r3, #8
 800292a:	4a39      	ldr	r2, [pc, #228]	; (8002a10 <main+0x5a8>)
 800292c:	4413      	add	r3, r2
 800292e:	3304      	adds	r3, #4
 8002930:	f646 2264 	movw	r2, #27236	; 0x6a64
 8002934:	443a      	add	r2, r7
 8002936:	6811      	ldr	r1, [r2, #0]
 8002938:	4618      	mov	r0, r3
 800293a:	f018 f939 	bl	801abb0 <strcpy>
				break;
 800293e:	e020      	b.n	8002982 <main+0x51a>
			case 6:
				j++;
 8002940:	f646 2368 	movw	r3, #27240	; 0x6a68
 8002944:	443b      	add	r3, r7
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	3301      	adds	r3, #1
 800294a:	f646 2268 	movw	r2, #27240	; 0x6a68
 800294e:	443a      	add	r2, r7
 8002950:	6013      	str	r3, [r2, #0]
				Configs[j].id = atoi(ptr);
 8002952:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002956:	443b      	add	r3, r7
 8002958:	6818      	ldr	r0, [r3, #0]
 800295a:	f017 ff4e 	bl	801a7fa <atoi>
 800295e:	4603      	mov	r3, r0
 8002960:	4618      	mov	r0, r3
 8002962:	4a2b      	ldr	r2, [pc, #172]	; (8002a10 <main+0x5a8>)
 8002964:	f646 2368 	movw	r3, #27240	; 0x6a68
 8002968:	443b      	add	r3, r7
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	218c      	movs	r1, #140	; 0x8c
 800296e:	fb01 f303 	mul.w	r3, r1, r3
 8002972:	4413      	add	r3, r2
 8002974:	6018      	str	r0, [r3, #0]
				i = 0;
 8002976:	2300      	movs	r3, #0
 8002978:	f646 226c 	movw	r2, #27244	; 0x6a6c
 800297c:	443a      	add	r2, r7
 800297e:	6013      	str	r3, [r2, #0]
				break;
 8002980:	bf00      	nop
		}

		ptr = strtok(NULL, delim);
 8002982:	4b22      	ldr	r3, [pc, #136]	; (8002a0c <main+0x5a4>)
 8002984:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002988:	443a      	add	r2, r7
 800298a:	4413      	add	r3, r2
 800298c:	4619      	mov	r1, r3
 800298e:	2000      	movs	r0, #0
 8002990:	f018 f916 	bl	801abc0 <strtok>
 8002994:	f646 2364 	movw	r3, #27236	; 0x6a64
 8002998:	443b      	add	r3, r7
 800299a:	6018      	str	r0, [r3, #0]
		i++;
 800299c:	f646 236c 	movw	r3, #27244	; 0x6a6c
 80029a0:	443b      	add	r3, r7
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	3301      	adds	r3, #1
 80029a6:	f646 226c 	movw	r2, #27244	; 0x6a6c
 80029aa:	443a      	add	r2, r7
 80029ac:	6013      	str	r3, [r2, #0]
      while(ptr != NULL /*&& j < (sizeof(*Configs)/sizeof(ReadInstruction))*/){
 80029ae:	f646 2364 	movw	r3, #27236	; 0x6a64
 80029b2:	443b      	add	r3, r7
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	f47f af59 	bne.w	800286e <main+0x406>
      }


      strcpy(FilePath,Filename);
 80029bc:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 80029c0:	443a      	add	r2, r7
 80029c2:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <main+0x5ac>)
 80029c4:	f646 2170 	movw	r1, #27248	; 0x6a70
 80029c8:	4439      	add	r1, r7
 80029ca:	440b      	add	r3, r1
 80029cc:	4611      	mov	r1, r2
 80029ce:	4618      	mov	r0, r3
 80029d0:	f018 f8ee 	bl	801abb0 <strcpy>
      int FilePathLen = strlen(Filename);
 80029d4:	f644 63f0 	movw	r3, #20208	; 0x4ef0
 80029d8:	443b      	add	r3, r7
 80029da:	4618      	mov	r0, r3
 80029dc:	f7fd fc80 	bl	80002e0 <strlen>
 80029e0:	4603      	mov	r3, r0
 80029e2:	f646 2220 	movw	r2, #27168	; 0x6a20
 80029e6:	443a      	add	r2, r7
 80029e8:	6013      	str	r3, [r2, #0]
      sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 80029ea:	f646 2320 	movw	r3, #27168	; 0x6a20
 80029ee:	443b      	add	r3, r7
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4b08      	ldr	r3, [pc, #32]	; (8002a14 <main+0x5ac>)
 80029f4:	f646 2170 	movw	r1, #27248	; 0x6a70
 80029f8:	4439      	add	r1, r7
 80029fa:	440b      	add	r3, r1
 80029fc:	1898      	adds	r0, r3, r2
 80029fe:	4b06      	ldr	r3, [pc, #24]	; (8002a18 <main+0x5b0>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	4905      	ldr	r1, [pc, #20]	; (8002a1c <main+0x5b4>)
 8002a06:	f018 f8b3 	bl	801ab70 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 8002a0a:	e02d      	b.n	8002a68 <main+0x600>
 8002a0c:	ffffe470 	.word	0xffffe470
 8002a10:	24040744 	.word	0x24040744
 8002a14:	ffff9590 	.word	0xffff9590
 8002a18:	2400000c 	.word	0x2400000c
 8002a1c:	0801c3d0 	.word	0x0801c3d0
    	  f_close(&myFILE);
 8002a20:	48b5      	ldr	r0, [pc, #724]	; (8002cf8 <main+0x890>)
 8002a22:	f016 fb77 	bl	8019114 <f_close>
        fileNum++;
 8002a26:	4bb5      	ldr	r3, [pc, #724]	; (8002cfc <main+0x894>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4ab3      	ldr	r2, [pc, #716]	; (8002cfc <main+0x894>)
 8002a2e:	6013      	str	r3, [r2, #0]
        strcpy(FilePath,Filename);
 8002a30:	f644 62f0 	movw	r2, #20208	; 0x4ef0
 8002a34:	443a      	add	r2, r7
 8002a36:	4bb2      	ldr	r3, [pc, #712]	; (8002d00 <main+0x898>)
 8002a38:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002a3c:	4439      	add	r1, r7
 8002a3e:	440b      	add	r3, r1
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f018 f8b4 	bl	801abb0 <strcpy>
        sprintf(FilePath + FilePathLen, "%i.csv",fileNum);
 8002a48:	f646 2320 	movw	r3, #27168	; 0x6a20
 8002a4c:	443b      	add	r3, r7
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4bab      	ldr	r3, [pc, #684]	; (8002d00 <main+0x898>)
 8002a52:	f646 2170 	movw	r1, #27248	; 0x6a70
 8002a56:	4439      	add	r1, r7
 8002a58:	440b      	add	r3, r1
 8002a5a:	1898      	adds	r0, r3, r2
 8002a5c:	4ba7      	ldr	r3, [pc, #668]	; (8002cfc <main+0x894>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	461a      	mov	r2, r3
 8002a62:	49a8      	ldr	r1, [pc, #672]	; (8002d04 <main+0x89c>)
 8002a64:	f018 f884 	bl	801ab70 <siprintf>
      while(f_open(&myFILE, FilePath, FA_READ) == FR_OK){
 8002a68:	4ba5      	ldr	r3, [pc, #660]	; (8002d00 <main+0x898>)
 8002a6a:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a6e:	443a      	add	r2, r7
 8002a70:	4413      	add	r3, r2
 8002a72:	2201      	movs	r2, #1
 8002a74:	4619      	mov	r1, r3
 8002a76:	48a0      	ldr	r0, [pc, #640]	; (8002cf8 <main+0x890>)
 8002a78:	f015 fe5c 	bl	8018734 <f_open>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d0ce      	beq.n	8002a20 <main+0x5b8>
      }
      f_open(&myFILE, FilePath, FA_WRITE | FA_CREATE_ALWAYS);
 8002a82:	4b9f      	ldr	r3, [pc, #636]	; (8002d00 <main+0x898>)
 8002a84:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a88:	443a      	add	r2, r7
 8002a8a:	4413      	add	r3, r2
 8002a8c:	220a      	movs	r2, #10
 8002a8e:	4619      	mov	r1, r3
 8002a90:	4899      	ldr	r0, [pc, #612]	; (8002cf8 <main+0x890>)
 8002a92:	f015 fe4f 	bl	8018734 <f_open>
  extern int GPS_flag2;
  extern int FDCAN_Flag;
  extern int CAN_Flag;


  CAN_FD_FRAME FDBuffer[50] = {0};
 8002a96:	4b9c      	ldr	r3, [pc, #624]	; (8002d08 <main+0x8a0>)
 8002a98:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002a9c:	443a      	add	r2, r7
 8002a9e:	4413      	add	r3, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f017 fef0 	bl	801a88e <memset>
  CAN_FRAME Buffer[50] = {0};
 8002aae:	4b97      	ldr	r3, [pc, #604]	; (8002d0c <main+0x8a4>)
 8002ab0:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002ab4:	443a      	add	r2, r7
 8002ab6:	4413      	add	r3, r2
 8002ab8:	4618      	mov	r0, r3
 8002aba:	f44f 6396 	mov.w	r3, #1200	; 0x4b0
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	f017 fee4 	bl	801a88e <memset>
  uint32_t Tele_IDs[50] = {0};
 8002ac6:	4b92      	ldr	r3, [pc, #584]	; (8002d10 <main+0x8a8>)
 8002ac8:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002acc:	443a      	add	r2, r7
 8002ace:	4413      	add	r3, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	23c8      	movs	r3, #200	; 0xc8
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	f017 fed9 	bl	801a88e <memset>
  Tele_IDs[0] = 0x321;
 8002adc:	4b8c      	ldr	r3, [pc, #560]	; (8002d10 <main+0x8a8>)
 8002ade:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002ae2:	443a      	add	r2, r7
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f240 3221 	movw	r2, #801	; 0x321
 8002aea:	601a      	str	r2, [r3, #0]

  sTime.SecondFraction = 999;
 8002aec:	4b89      	ldr	r3, [pc, #548]	; (8002d14 <main+0x8ac>)
 8002aee:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002af2:	609a      	str	r2, [r3, #8]
  uint32_t LocalTime = HAL_GetTick();
 8002af4:	f002 f980 	bl	8004df8 <HAL_GetTick>
 8002af8:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002afc:	443b      	add	r3, r7
 8002afe:	6018      	str	r0, [r3, #0]
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8002b00:	2200      	movs	r2, #0
 8002b02:	4984      	ldr	r1, [pc, #528]	; (8002d14 <main+0x8ac>)
 8002b04:	4884      	ldr	r0, [pc, #528]	; (8002d18 <main+0x8b0>)
 8002b06:	f00a f9d9 	bl	800cebc <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	4983      	ldr	r1, [pc, #524]	; (8002d1c <main+0x8b4>)
 8002b0e:	4882      	ldr	r0, [pc, #520]	; (8002d18 <main+0x8b0>)
 8002b10:	f00a fab8 	bl	800d084 <HAL_RTC_GetDate>

  sTime.SubSeconds -= LocalTime % 1000;
 8002b14:	4b7f      	ldr	r3, [pc, #508]	; (8002d14 <main+0x8ac>)
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b1c:	443b      	add	r3, r7
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	4b7f      	ldr	r3, [pc, #508]	; (8002d20 <main+0x8b8>)
 8002b22:	fba3 0302 	umull	r0, r3, r3, r2
 8002b26:	099b      	lsrs	r3, r3, #6
 8002b28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b2c:	fb00 f303 	mul.w	r3, r0, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	1acb      	subs	r3, r1, r3
 8002b34:	4a77      	ldr	r2, [pc, #476]	; (8002d14 <main+0x8ac>)
 8002b36:	6053      	str	r3, [r2, #4]
  LocalTime = LocalTime/1000;
 8002b38:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b3c:	443b      	add	r3, r7
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a77      	ldr	r2, [pc, #476]	; (8002d20 <main+0x8b8>)
 8002b42:	fba2 2303 	umull	r2, r3, r2, r3
 8002b46:	099b      	lsrs	r3, r3, #6
 8002b48:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002b4c:	443a      	add	r2, r7
 8002b4e:	6013      	str	r3, [r2, #0]

  if(sTime.Seconds < LocalTime % 60){
 8002b50:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <main+0x8ac>)
 8002b52:	789b      	ldrb	r3, [r3, #2]
 8002b54:	4618      	mov	r0, r3
 8002b56:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b5a:	443b      	add	r3, r7
 8002b5c:	6819      	ldr	r1, [r3, #0]
 8002b5e:	4b71      	ldr	r3, [pc, #452]	; (8002d24 <main+0x8bc>)
 8002b60:	fba3 2301 	umull	r2, r3, r3, r1
 8002b64:	095a      	lsrs	r2, r3, #5
 8002b66:	4613      	mov	r3, r2
 8002b68:	011b      	lsls	r3, r3, #4
 8002b6a:	1a9b      	subs	r3, r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	1aca      	subs	r2, r1, r3
 8002b70:	4290      	cmp	r0, r2
 8002b72:	d20b      	bcs.n	8002b8c <main+0x724>
	  sTime.Seconds += 60;
 8002b74:	4b67      	ldr	r3, [pc, #412]	; (8002d14 <main+0x8ac>)
 8002b76:	789b      	ldrb	r3, [r3, #2]
 8002b78:	333c      	adds	r3, #60	; 0x3c
 8002b7a:	b2da      	uxtb	r2, r3
 8002b7c:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <main+0x8ac>)
 8002b7e:	709a      	strb	r2, [r3, #2]
	  sTime.Minutes -= 1;
 8002b80:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <main+0x8ac>)
 8002b82:	785b      	ldrb	r3, [r3, #1]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b2da      	uxtb	r2, r3
 8002b88:	4b62      	ldr	r3, [pc, #392]	; (8002d14 <main+0x8ac>)
 8002b8a:	705a      	strb	r2, [r3, #1]
  }
  sTime.Seconds -= LocalTime % 60;
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <main+0x8ac>)
 8002b8e:	7898      	ldrb	r0, [r3, #2]
 8002b90:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002b94:	443b      	add	r3, r7
 8002b96:	6819      	ldr	r1, [r3, #0]
 8002b98:	4b62      	ldr	r3, [pc, #392]	; (8002d24 <main+0x8bc>)
 8002b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002b9e:	095a      	lsrs	r2, r3, #5
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	011b      	lsls	r3, r3, #4
 8002ba4:	1a9b      	subs	r3, r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	1aca      	subs	r2, r1, r3
 8002baa:	b2d3      	uxtb	r3, r2
 8002bac:	1ac3      	subs	r3, r0, r3
 8002bae:	b2da      	uxtb	r2, r3
 8002bb0:	4b58      	ldr	r3, [pc, #352]	; (8002d14 <main+0x8ac>)
 8002bb2:	709a      	strb	r2, [r3, #2]
  LocalTime = LocalTime/60;
 8002bb4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002bb8:	443b      	add	r3, r7
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <main+0x8bc>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	095b      	lsrs	r3, r3, #5
 8002bc4:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002bc8:	443a      	add	r2, r7
 8002bca:	6013      	str	r3, [r2, #0]

  if(sTime.Minutes < LocalTime % 60){
 8002bcc:	4b51      	ldr	r3, [pc, #324]	; (8002d14 <main+0x8ac>)
 8002bce:	785b      	ldrb	r3, [r3, #1]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002bd6:	443b      	add	r3, r7
 8002bd8:	6819      	ldr	r1, [r3, #0]
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <main+0x8bc>)
 8002bdc:	fba3 2301 	umull	r2, r3, r3, r1
 8002be0:	095a      	lsrs	r2, r3, #5
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	1aca      	subs	r2, r1, r3
 8002bec:	4290      	cmp	r0, r2
 8002bee:	d20b      	bcs.n	8002c08 <main+0x7a0>
	  sTime.Minutes += 60;
 8002bf0:	4b48      	ldr	r3, [pc, #288]	; (8002d14 <main+0x8ac>)
 8002bf2:	785b      	ldrb	r3, [r3, #1]
 8002bf4:	333c      	adds	r3, #60	; 0x3c
 8002bf6:	b2da      	uxtb	r2, r3
 8002bf8:	4b46      	ldr	r3, [pc, #280]	; (8002d14 <main+0x8ac>)
 8002bfa:	705a      	strb	r2, [r3, #1]
	  sTime.Hours -= 1;
 8002bfc:	4b45      	ldr	r3, [pc, #276]	; (8002d14 <main+0x8ac>)
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	3b01      	subs	r3, #1
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <main+0x8ac>)
 8002c06:	701a      	strb	r2, [r3, #0]
  }
  sTime.Minutes -= LocalTime % 60;
 8002c08:	4b42      	ldr	r3, [pc, #264]	; (8002d14 <main+0x8ac>)
 8002c0a:	7858      	ldrb	r0, [r3, #1]
 8002c0c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002c10:	443b      	add	r3, r7
 8002c12:	6819      	ldr	r1, [r3, #0]
 8002c14:	4b43      	ldr	r3, [pc, #268]	; (8002d24 <main+0x8bc>)
 8002c16:	fba3 2301 	umull	r2, r3, r3, r1
 8002c1a:	095a      	lsrs	r2, r3, #5
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	1a9b      	subs	r3, r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	1aca      	subs	r2, r1, r3
 8002c26:	b2d3      	uxtb	r3, r2
 8002c28:	1ac3      	subs	r3, r0, r3
 8002c2a:	b2da      	uxtb	r2, r3
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <main+0x8ac>)
 8002c2e:	705a      	strb	r2, [r3, #1]
  LocalTime = LocalTime/60;
 8002c30:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002c34:	443b      	add	r3, r7
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a3a      	ldr	r2, [pc, #232]	; (8002d24 <main+0x8bc>)
 8002c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3e:	095b      	lsrs	r3, r3, #5
 8002c40:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8002c44:	443a      	add	r2, r7
 8002c46:	6013      	str	r3, [r2, #0]
  sTime.Hours -= LocalTime % 60;
 8002c48:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <main+0x8ac>)
 8002c4a:	7818      	ldrb	r0, [r3, #0]
 8002c4c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8002c50:	443b      	add	r3, r7
 8002c52:	6819      	ldr	r1, [r3, #0]
 8002c54:	4b33      	ldr	r3, [pc, #204]	; (8002d24 <main+0x8bc>)
 8002c56:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5a:	095a      	lsrs	r2, r3, #5
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	011b      	lsls	r3, r3, #4
 8002c60:	1a9b      	subs	r3, r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	1aca      	subs	r2, r1, r3
 8002c66:	b2d3      	uxtb	r3, r2
 8002c68:	1ac3      	subs	r3, r0, r3
 8002c6a:	b2da      	uxtb	r2, r3
 8002c6c:	4b29      	ldr	r3, [pc, #164]	; (8002d14 <main+0x8ac>)
 8002c6e:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char CanWrite[500];
  int CW = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	f646 2218 	movw	r2, #27160	; 0x6a18
 8002c76:	443a      	add	r2, r7
 8002c78:	6013      	str	r3, [r2, #0]
  char CanFDWrite[1000];
  int CFDW = 0;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	f646 2214 	movw	r2, #27156	; 0x6a14
 8002c80:	443a      	add	r2, r7
 8002c82:	6013      	str	r3, [r2, #0]
  int AllowedTele = 1;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f646 2210 	movw	r2, #27152	; 0x6a10
 8002c8a:	443a      	add	r2, r7
 8002c8c:	6013      	str	r3, [r2, #0]
  int BuffIndex = 0;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	f646 225c 	movw	r2, #27228	; 0x6a5c
 8002c94:	443a      	add	r2, r7
 8002c96:	6013      	str	r3, [r2, #0]
  int Txcnt = 0;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002c9e:	443a      	add	r2, r7
 8002ca0:	6013      	str	r3, [r2, #0]
  int TxDataSpace = 0;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f646 220c 	movw	r2, #27148	; 0x6a0c
 8002ca8:	443a      	add	r2, r7
 8002caa:	6013      	str	r3, [r2, #0]
  uint32_t LoopTime = 10; //time a loop should take (this is aguess should test avg time)
 8002cac:	230a      	movs	r3, #10
 8002cae:	f646 2208 	movw	r2, #27144	; 0x6a08
 8002cb2:	443a      	add	r2, r7
 8002cb4:	6013      	str	r3, [r2, #0]
  uint32_t StartTime = 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	f646 2204 	movw	r2, #27140	; 0x6a04
 8002cbc:	443a      	add	r2, r7
 8002cbe:	6013      	str	r3, [r2, #0]
  uint32_t EndTime = 0;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	f507 42d4 	add.w	r2, r7, #27136	; 0x6a00
 8002cc6:	6013      	str	r3, [r2, #0]
  uint32_t radiodelay = 1000;
 8002cc8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ccc:	f646 12fc 	movw	r2, #27132	; 0x69fc
 8002cd0:	443a      	add	r2, r7
 8002cd2:	6013      	str	r3, [r2, #0]
  uint32_t r_start = 0;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	f646 2254 	movw	r2, #27220	; 0x6a54
 8002cda:	443a      	add	r2, r7
 8002cdc:	6013      	str	r3, [r2, #0]
  uint32_t r_end = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	f646 12f8 	movw	r2, #27128	; 0x69f8
 8002ce4:	443a      	add	r2, r7
 8002ce6:	6013      	str	r3, [r2, #0]
  r_start = HAL_GetTick();
 8002ce8:	f002 f886 	bl	8004df8 <HAL_GetTick>
 8002cec:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002cf0:	443b      	add	r3, r7
 8002cf2:	6018      	str	r0, [r3, #0]

  while (end_flag){
 8002cf4:	f000 bf0d 	b.w	8003b12 <main+0x16aa>
 8002cf8:	24040510 	.word	0x24040510
 8002cfc:	2400000c 	.word	0x2400000c
 8002d00:	ffff9590 	.word	0xffff9590
 8002d04:	0801c3d0 	.word	0x0801c3d0
 8002d08:	ffffefe8 	.word	0xffffefe8
 8002d0c:	ffffeb38 	.word	0xffffeb38
 8002d10:	ffffea70 	.word	0xffffea70
 8002d14:	240404a4 	.word	0x240404a4
 8002d18:	2404478c 	.word	0x2404478c
 8002d1c:	240404b8 	.word	0x240404b8
 8002d20:	10624dd3 	.word	0x10624dd3
 8002d24:	88888889 	.word	0x88888889
    StartTime = HAL_GetTick();
 8002d28:	f002 f866 	bl	8004df8 <HAL_GetTick>
 8002d2c:	f646 2304 	movw	r3, #27140	; 0x6a04
 8002d30:	443b      	add	r3, r7
 8002d32:	6018      	str	r0, [r3, #0]
    
	  if(GPS_flag1){
 8002d34:	4ba5      	ldr	r3, [pc, #660]	; (8002fcc <main+0xb64>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d007      	beq.n	8002d4c <main+0x8e4>
		  WriteToBuff(rxBuf, BUFFLENGTH/2);
 8002d3c:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002d40:	48a3      	ldr	r0, [pc, #652]	; (8002fd0 <main+0xb68>)
 8002d42:	f7ff fae5 	bl	8002310 <WriteToBuff>
		  GPS_flag1=0;
 8002d46:	4ba1      	ldr	r3, [pc, #644]	; (8002fcc <main+0xb64>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	601a      	str	r2, [r3, #0]
	  }
	  
    if(GPS_flag2){
 8002d4c:	4ba1      	ldr	r3, [pc, #644]	; (8002fd4 <main+0xb6c>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d008      	beq.n	8002d66 <main+0x8fe>
		  WriteToBuff(rxBuf+BUFFLENGTH/2, BUFFLENGTH/2);
 8002d54:	4ba0      	ldr	r3, [pc, #640]	; (8002fd8 <main+0xb70>)
 8002d56:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7ff fad8 	bl	8002310 <WriteToBuff>
		  GPS_flag2=0;
 8002d60:	4b9c      	ldr	r3, [pc, #624]	; (8002fd4 <main+0xb6c>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
	  }

    r_end = HAL_GetTick();
 8002d66:	f002 f847 	bl	8004df8 <HAL_GetTick>
 8002d6a:	f646 13f8 	movw	r3, #27128	; 0x69f8
 8002d6e:	443b      	add	r3, r7
 8002d70:	6018      	str	r0, [r3, #0]
    if(r_start - r_end > radiodelay && FDBuffer[0].id != 0){
 8002d72:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002d76:	443b      	add	r3, r7
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	f646 13f8 	movw	r3, #27128	; 0x69f8
 8002d7e:	443b      	add	r3, r7
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	1ad3      	subs	r3, r2, r3
 8002d84:	f646 12fc 	movw	r2, #27132	; 0x69fc
 8002d88:	443a      	add	r2, r7
 8002d8a:	6812      	ldr	r2, [r2, #0]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	f080 82a2 	bcs.w	80032d6 <main+0xe6e>
 8002d92:	4b92      	ldr	r3, [pc, #584]	; (8002fdc <main+0xb74>)
 8002d94:	f646 2270 	movw	r2, #27248	; 0x6a70
 8002d98:	443a      	add	r2, r7
 8002d9a:	4413      	add	r3, r2
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	f000 8299 	beq.w	80032d6 <main+0xe6e>
      r_start = HAL_GetTick();
 8002da4:	f002 f828 	bl	8004df8 <HAL_GetTick>
 8002da8:	f646 2354 	movw	r3, #27220	; 0x6a54
 8002dac:	443b      	add	r3, r7
 8002dae:	6018      	str	r0, [r3, #0]
      for(int i = 0; i < AllowedTele; i++){
 8002db0:	2300      	movs	r3, #0
 8002db2:	f646 2250 	movw	r2, #27216	; 0x6a50
 8002db6:	443a      	add	r2, r7
 8002db8:	6013      	str	r3, [r2, #0]
 8002dba:	e281      	b.n	80032c0 <main+0xe58>
        //make packet (Time ID data)
        Txcnt = sprintf(myTxData,"%u %x ",FDBuffer[BuffIndex].time, FDBuffer[BuffIndex].id);
 8002dbc:	4a87      	ldr	r2, [pc, #540]	; (8002fdc <main+0xb74>)
 8002dbe:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002dc2:	443b      	add	r3, r7
 8002dc4:	441a      	add	r2, r3
 8002dc6:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002dca:	443b      	add	r3, r7
 8002dcc:	6819      	ldr	r1, [r3, #0]
 8002dce:	460b      	mov	r3, r1
 8002dd0:	009b      	lsls	r3, r3, #2
 8002dd2:	440b      	add	r3, r1
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	4413      	add	r3, r2
 8002dd8:	330c      	adds	r3, #12
 8002dda:	6818      	ldr	r0, [r3, #0]
 8002ddc:	4a7f      	ldr	r2, [pc, #508]	; (8002fdc <main+0xb74>)
 8002dde:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002de2:	443b      	add	r3, r7
 8002de4:	441a      	add	r2, r3
 8002de6:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002dea:	443b      	add	r3, r7
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	460b      	mov	r3, r1
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	4413      	add	r3, r2
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	4978      	ldr	r1, [pc, #480]	; (8002fe0 <main+0xb78>)
 8002dfe:	4879      	ldr	r0, [pc, #484]	; (8002fe4 <main+0xb7c>)
 8002e00:	f017 feb6 	bl	801ab70 <siprintf>
 8002e04:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e08:	443b      	add	r3, r7
 8002e0a:	6018      	str	r0, [r3, #0]
        TxDataSpace = 32 - Txcnt;
 8002e0c:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e10:	443b      	add	r3, r7
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f1c3 0320 	rsb	r3, r3, #32
 8002e18:	f646 220c 	movw	r2, #27148	; 0x6a0c
 8002e1c:	443a      	add	r2, r7
 8002e1e:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].length > TxDataSpace){
 8002e20:	4a6e      	ldr	r2, [pc, #440]	; (8002fdc <main+0xb74>)
 8002e22:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002e26:	443b      	add	r3, r7
 8002e28:	441a      	add	r2, r3
 8002e2a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002e2e:	443b      	add	r3, r7
 8002e30:	6819      	ldr	r1, [r3, #0]
 8002e32:	460b      	mov	r3, r1
 8002e34:	009b      	lsls	r3, r3, #2
 8002e36:	440b      	add	r3, r1
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	681a      	ldr	r2, [r3, #0]
 8002e40:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002e44:	443b      	add	r3, r7
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	f240 81b8 	bls.w	80031be <main+0xd56>
          for(int i = 0; i < TxDataSpace; i++){
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f646 224c 	movw	r2, #27212	; 0x6a4c
 8002e54:	443a      	add	r2, r7
 8002e56:	6013      	str	r3, [r2, #0]
 8002e58:	e031      	b.n	8002ebe <main+0xa56>
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 8002e5a:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e5e:	443b      	add	r3, r7
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a60      	ldr	r2, [pc, #384]	; (8002fe4 <main+0xb7c>)
 8002e64:	1898      	adds	r0, r3, r2
 8002e66:	4a5d      	ldr	r2, [pc, #372]	; (8002fdc <main+0xb74>)
 8002e68:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002e6c:	443b      	add	r3, r7
 8002e6e:	441a      	add	r2, r3
 8002e70:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002e74:	443b      	add	r3, r7
 8002e76:	6819      	ldr	r1, [r3, #0]
 8002e78:	460b      	mov	r3, r1
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	441a      	add	r2, r3
 8002e82:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002e86:	443b      	add	r3, r7
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3310      	adds	r3, #16
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	461a      	mov	r2, r3
 8002e92:	4955      	ldr	r1, [pc, #340]	; (8002fe8 <main+0xb80>)
 8002e94:	f017 fe6c 	bl	801ab70 <siprintf>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002e9e:	443b      	add	r3, r7
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4413      	add	r3, r2
 8002ea4:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002ea8:	443a      	add	r2, r7
 8002eaa:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < TxDataSpace; i++){
 8002eac:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002eb0:	443b      	add	r3, r7
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	f646 224c 	movw	r2, #27212	; 0x6a4c
 8002eba:	443a      	add	r2, r7
 8002ebc:	6013      	str	r3, [r2, #0]
 8002ebe:	f646 234c 	movw	r3, #27212	; 0x6a4c
 8002ec2:	443b      	add	r3, r7
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002eca:	443b      	add	r3, r7
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	dbc3      	blt.n	8002e5a <main+0x9f2>
          }
          NRF24_write(myTxData, 32);
 8002ed2:	2120      	movs	r1, #32
 8002ed4:	4843      	ldr	r0, [pc, #268]	; (8002fe4 <main+0xb7c>)
 8002ed6:	f7fe fb29 	bl	800152c <NRF24_write>
          Txcnt = 0;
 8002eda:	2300      	movs	r3, #0
 8002edc:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002ee0:	443a      	add	r2, r7
 8002ee2:	6013      	str	r3, [r2, #0]
          if(FDBuffer[BuffIndex].length - TxDataSpace > 32){
 8002ee4:	4a3d      	ldr	r2, [pc, #244]	; (8002fdc <main+0xb74>)
 8002ee6:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002eea:	443b      	add	r3, r7
 8002eec:	441a      	add	r2, r3
 8002eee:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002ef2:	443b      	add	r3, r7
 8002ef4:	6819      	ldr	r1, [r3, #0]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	440b      	add	r3, r1
 8002efc:	011b      	lsls	r3, r3, #4
 8002efe:	4413      	add	r3, r2
 8002f00:	3308      	adds	r3, #8
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002f08:	443b      	add	r3, r7
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b20      	cmp	r3, #32
 8002f10:	f240 80d1 	bls.w	80030b6 <main+0xc4e>
            for(int i = 0; i < 32; i++){
 8002f14:	2300      	movs	r3, #0
 8002f16:	f646 2248 	movw	r2, #27208	; 0x6a48
 8002f1a:	443a      	add	r2, r7
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	e037      	b.n	8002f90 <main+0xb28>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 8002f20:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002f24:	443b      	add	r3, r7
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a2e      	ldr	r2, [pc, #184]	; (8002fe4 <main+0xb7c>)
 8002f2a:	189c      	adds	r4, r3, r2
 8002f2c:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002f30:	443b      	add	r3, r7
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8002f38:	443b      	add	r3, r7
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	18d0      	adds	r0, r2, r3
 8002f3e:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <main+0xb74>)
 8002f40:	f646 2370 	movw	r3, #27248	; 0x6a70
 8002f44:	443b      	add	r3, r7
 8002f46:	441a      	add	r2, r3
 8002f48:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8002f4c:	443b      	add	r3, r7
 8002f4e:	6819      	ldr	r1, [r3, #0]
 8002f50:	460b      	mov	r3, r1
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	4413      	add	r3, r2
 8002f5a:	4403      	add	r3, r0
 8002f5c:	3310      	adds	r3, #16
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	4921      	ldr	r1, [pc, #132]	; (8002fe8 <main+0xb80>)
 8002f64:	4620      	mov	r0, r4
 8002f66:	f017 fe03 	bl	801ab70 <siprintf>
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002f70:	443b      	add	r3, r7
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4413      	add	r3, r2
 8002f76:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002f7a:	443a      	add	r2, r7
 8002f7c:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < 32; i++){
 8002f7e:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002f82:	443b      	add	r3, r7
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	3301      	adds	r3, #1
 8002f88:	f646 2248 	movw	r2, #27208	; 0x6a48
 8002f8c:	443a      	add	r2, r7
 8002f8e:	6013      	str	r3, [r2, #0]
 8002f90:	f646 2348 	movw	r3, #27208	; 0x6a48
 8002f94:	443b      	add	r3, r7
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b1f      	cmp	r3, #31
 8002f9a:	ddc1      	ble.n	8002f20 <main+0xab8>
            }
            Txcnt = 0;
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	f646 2258 	movw	r2, #27224	; 0x6a58
 8002fa2:	443a      	add	r2, r7
 8002fa4:	6013      	str	r3, [r2, #0]
            i++;
 8002fa6:	f646 2350 	movw	r3, #27216	; 0x6a50
 8002faa:	443b      	add	r3, r7
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	f646 2250 	movw	r2, #27216	; 0x6a50
 8002fb4:	443a      	add	r2, r7
 8002fb6:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 8002fb8:	2120      	movs	r1, #32
 8002fba:	480a      	ldr	r0, [pc, #40]	; (8002fe4 <main+0xb7c>)
 8002fbc:	f7fe fab6 	bl	800152c <NRF24_write>
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	f646 2244 	movw	r2, #27204	; 0x6a44
 8002fc6:	443a      	add	r2, r7
 8002fc8:	6013      	str	r3, [r2, #0]
 8002fca:	e049      	b.n	8003060 <main+0xbf8>
 8002fcc:	24000374 	.word	0x24000374
 8002fd0:	2404432c 	.word	0x2404432c
 8002fd4:	24000378 	.word	0x24000378
 8002fd8:	2404448a 	.word	0x2404448a
 8002fdc:	ffffefe8 	.word	0xffffefe8
 8002fe0:	0801c3d8 	.word	0x0801c3d8
 8002fe4:	240446ec 	.word	0x240446ec
 8002fe8:	0801c3e0 	.word	0x0801c3e0
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace + 32]);
 8002fec:	f646 2358 	movw	r3, #27224	; 0x6a58
 8002ff0:	443b      	add	r3, r7
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a75      	ldr	r2, [pc, #468]	; (80031cc <main+0xd64>)
 8002ff6:	189c      	adds	r4, r3, r2
 8002ff8:	f646 2344 	movw	r3, #27204	; 0x6a44
 8002ffc:	443b      	add	r3, r7
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003004:	443b      	add	r3, r7
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4413      	add	r3, r2
 800300a:	f103 0020 	add.w	r0, r3, #32
 800300e:	4a70      	ldr	r2, [pc, #448]	; (80031d0 <main+0xd68>)
 8003010:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003014:	443b      	add	r3, r7
 8003016:	441a      	add	r2, r3
 8003018:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800301c:	443b      	add	r3, r7
 800301e:	6819      	ldr	r1, [r3, #0]
 8003020:	460b      	mov	r3, r1
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	4413      	add	r3, r2
 800302a:	4403      	add	r3, r0
 800302c:	3310      	adds	r3, #16
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	461a      	mov	r2, r3
 8003032:	4968      	ldr	r1, [pc, #416]	; (80031d4 <main+0xd6c>)
 8003034:	4620      	mov	r0, r4
 8003036:	f017 fd9b 	bl	801ab70 <siprintf>
 800303a:	4602      	mov	r2, r0
 800303c:	f646 2358 	movw	r3, #27224	; 0x6a58
 8003040:	443b      	add	r3, r7
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4413      	add	r3, r2
 8003046:	f646 2258 	movw	r2, #27224	; 0x6a58
 800304a:	443a      	add	r2, r7
 800304c:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace+32; i++){
 800304e:	f646 2344 	movw	r3, #27204	; 0x6a44
 8003052:	443b      	add	r3, r7
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	f646 2244 	movw	r2, #27204	; 0x6a44
 800305c:	443a      	add	r2, r7
 800305e:	6013      	str	r3, [r2, #0]
 8003060:	4a5b      	ldr	r2, [pc, #364]	; (80031d0 <main+0xd68>)
 8003062:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003066:	443b      	add	r3, r7
 8003068:	441a      	add	r2, r3
 800306a:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800306e:	443b      	add	r3, r7
 8003070:	6819      	ldr	r1, [r3, #0]
 8003072:	460b      	mov	r3, r1
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	440b      	add	r3, r1
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	4413      	add	r3, r2
 800307c:	3308      	adds	r3, #8
 800307e:	681a      	ldr	r2, [r3, #0]
 8003080:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003084:	443b      	add	r3, r7
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f103 0220 	add.w	r2, r3, #32
 800308e:	f646 2344 	movw	r3, #27204	; 0x6a44
 8003092:	443b      	add	r3, r7
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	429a      	cmp	r2, r3
 8003098:	d8a8      	bhi.n	8002fec <main+0xb84>
            }
            i++;
 800309a:	f646 2350 	movw	r3, #27216	; 0x6a50
 800309e:	443b      	add	r3, r7
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	3301      	adds	r3, #1
 80030a4:	f646 2250 	movw	r2, #27216	; 0x6a50
 80030a8:	443a      	add	r2, r7
 80030aa:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, 32);
 80030ac:	2120      	movs	r1, #32
 80030ae:	4847      	ldr	r0, [pc, #284]	; (80031cc <main+0xd64>)
 80030b0:	f7fe fa3c 	bl	800152c <NRF24_write>
 80030b4:	e0dc      	b.n	8003270 <main+0xe08>
          }else{
            Txcnt = 0;
 80030b6:	2300      	movs	r3, #0
 80030b8:	f646 2258 	movw	r2, #27224	; 0x6a58
 80030bc:	443a      	add	r2, r7
 80030be:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 80030c0:	2300      	movs	r3, #0
 80030c2:	f646 2240 	movw	r2, #27200	; 0x6a40
 80030c6:	443a      	add	r2, r7
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e037      	b.n	800313c <main+0xcd4>
              Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i + TxDataSpace]);
 80030cc:	f646 2358 	movw	r3, #27224	; 0x6a58
 80030d0:	443b      	add	r3, r7
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a3d      	ldr	r2, [pc, #244]	; (80031cc <main+0xd64>)
 80030d6:	189c      	adds	r4, r3, r2
 80030d8:	f646 2340 	movw	r3, #27200	; 0x6a40
 80030dc:	443b      	add	r3, r7
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	f646 230c 	movw	r3, #27148	; 0x6a0c
 80030e4:	443b      	add	r3, r7
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	18d0      	adds	r0, r2, r3
 80030ea:	4a39      	ldr	r2, [pc, #228]	; (80031d0 <main+0xd68>)
 80030ec:	f646 2370 	movw	r3, #27248	; 0x6a70
 80030f0:	443b      	add	r3, r7
 80030f2:	441a      	add	r2, r3
 80030f4:	f646 235c 	movw	r3, #27228	; 0x6a5c
 80030f8:	443b      	add	r3, r7
 80030fa:	6819      	ldr	r1, [r3, #0]
 80030fc:	460b      	mov	r3, r1
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	440b      	add	r3, r1
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	4413      	add	r3, r2
 8003106:	4403      	add	r3, r0
 8003108:	3310      	adds	r3, #16
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	461a      	mov	r2, r3
 800310e:	4931      	ldr	r1, [pc, #196]	; (80031d4 <main+0xd6c>)
 8003110:	4620      	mov	r0, r4
 8003112:	f017 fd2d 	bl	801ab70 <siprintf>
 8003116:	4602      	mov	r2, r0
 8003118:	f646 2358 	movw	r3, #27224	; 0x6a58
 800311c:	443b      	add	r3, r7
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4413      	add	r3, r2
 8003122:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003126:	443a      	add	r2, r7
 8003128:	6013      	str	r3, [r2, #0]
            for(int i = 0; i < FDBuffer[BuffIndex].length - TxDataSpace; i++){
 800312a:	f646 2340 	movw	r3, #27200	; 0x6a40
 800312e:	443b      	add	r3, r7
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	f646 2240 	movw	r2, #27200	; 0x6a40
 8003138:	443a      	add	r2, r7
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	4a24      	ldr	r2, [pc, #144]	; (80031d0 <main+0xd68>)
 800313e:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003142:	443b      	add	r3, r7
 8003144:	441a      	add	r2, r3
 8003146:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800314a:	443b      	add	r3, r7
 800314c:	6819      	ldr	r1, [r3, #0]
 800314e:	460b      	mov	r3, r1
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	4413      	add	r3, r2
 8003158:	3308      	adds	r3, #8
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	f646 230c 	movw	r3, #27148	; 0x6a0c
 8003160:	443b      	add	r3, r7
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	1ad2      	subs	r2, r2, r3
 8003166:	f646 2340 	movw	r3, #27200	; 0x6a40
 800316a:	443b      	add	r3, r7
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d8ac      	bhi.n	80030cc <main+0xc64>
            }
            i++;
 8003172:	f646 2350 	movw	r3, #27216	; 0x6a50
 8003176:	443b      	add	r3, r7
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	3301      	adds	r3, #1
 800317c:	f646 2250 	movw	r2, #27216	; 0x6a50
 8003180:	443a      	add	r2, r7
 8003182:	6013      	str	r3, [r2, #0]
            NRF24_write(myTxData, FDBuffer[BuffIndex].length - TxDataSpace);
 8003184:	4a12      	ldr	r2, [pc, #72]	; (80031d0 <main+0xd68>)
 8003186:	f646 2370 	movw	r3, #27248	; 0x6a70
 800318a:	443b      	add	r3, r7
 800318c:	441a      	add	r2, r3
 800318e:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003192:	443b      	add	r3, r7
 8003194:	6819      	ldr	r1, [r3, #0]
 8003196:	460b      	mov	r3, r1
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	011b      	lsls	r3, r3, #4
 800319e:	4413      	add	r3, r2
 80031a0:	3308      	adds	r3, #8
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	f646 230c 	movw	r3, #27148	; 0x6a0c
 80031aa:	443b      	add	r3, r7
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	1ad3      	subs	r3, r2, r3
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	4619      	mov	r1, r3
 80031b6:	4805      	ldr	r0, [pc, #20]	; (80031cc <main+0xd64>)
 80031b8:	f7fe f9b8 	bl	800152c <NRF24_write>
 80031bc:	e058      	b.n	8003270 <main+0xe08>
          }
        }
        else{
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 80031be:	2300      	movs	r3, #0
 80031c0:	f646 223c 	movw	r2, #27196	; 0x6a3c
 80031c4:	443a      	add	r2, r7
 80031c6:	6013      	str	r3, [r2, #0]
 80031c8:	e038      	b.n	800323c <main+0xdd4>
 80031ca:	bf00      	nop
 80031cc:	240446ec 	.word	0x240446ec
 80031d0:	ffffefe8 	.word	0xffffefe8
 80031d4:	0801c3e0 	.word	0x0801c3e0
            Txcnt += sprintf(myTxData + Txcnt, "%c", FDBuffer[BuffIndex].data.bytes[i]);
 80031d8:	f646 2358 	movw	r3, #27224	; 0x6a58
 80031dc:	443b      	add	r3, r7
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4ab5      	ldr	r2, [pc, #724]	; (80034b8 <main+0x1050>)
 80031e2:	1898      	adds	r0, r3, r2
 80031e4:	4ab5      	ldr	r2, [pc, #724]	; (80034bc <main+0x1054>)
 80031e6:	f646 2370 	movw	r3, #27248	; 0x6a70
 80031ea:	443b      	add	r3, r7
 80031ec:	441a      	add	r2, r3
 80031ee:	f646 235c 	movw	r3, #27228	; 0x6a5c
 80031f2:	443b      	add	r3, r7
 80031f4:	6819      	ldr	r1, [r3, #0]
 80031f6:	460b      	mov	r3, r1
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	440b      	add	r3, r1
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	441a      	add	r2, r3
 8003200:	f646 233c 	movw	r3, #27196	; 0x6a3c
 8003204:	443b      	add	r3, r7
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4413      	add	r3, r2
 800320a:	3310      	adds	r3, #16
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	461a      	mov	r2, r3
 8003210:	49ab      	ldr	r1, [pc, #684]	; (80034c0 <main+0x1058>)
 8003212:	f017 fcad 	bl	801ab70 <siprintf>
 8003216:	4602      	mov	r2, r0
 8003218:	f646 2358 	movw	r3, #27224	; 0x6a58
 800321c:	443b      	add	r3, r7
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4413      	add	r3, r2
 8003222:	f646 2258 	movw	r2, #27224	; 0x6a58
 8003226:	443a      	add	r2, r7
 8003228:	6013      	str	r3, [r2, #0]
          for(int i = 0; i < FDBuffer[BuffIndex].length; i++){
 800322a:	f646 233c 	movw	r3, #27196	; 0x6a3c
 800322e:	443b      	add	r3, r7
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	3301      	adds	r3, #1
 8003234:	f646 223c 	movw	r2, #27196	; 0x6a3c
 8003238:	443a      	add	r2, r7
 800323a:	6013      	str	r3, [r2, #0]
 800323c:	4a9f      	ldr	r2, [pc, #636]	; (80034bc <main+0x1054>)
 800323e:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003242:	443b      	add	r3, r7
 8003244:	441a      	add	r2, r3
 8003246:	f646 235c 	movw	r3, #27228	; 0x6a5c
 800324a:	443b      	add	r3, r7
 800324c:	6819      	ldr	r1, [r3, #0]
 800324e:	460b      	mov	r3, r1
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3308      	adds	r3, #8
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	f646 233c 	movw	r3, #27196	; 0x6a3c
 8003260:	443b      	add	r3, r7
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	429a      	cmp	r2, r3
 8003266:	d8b7      	bhi.n	80031d8 <main+0xd70>
          }
          NRF24_write(myTxData, 32);//FDBuffer[BuffIndex].length + (32 - TxDataSpace)
 8003268:	2120      	movs	r1, #32
 800326a:	4893      	ldr	r0, [pc, #588]	; (80034b8 <main+0x1050>)
 800326c:	f7fe f95e 	bl	800152c <NRF24_write>
        }
        BuffIndex++;
 8003270:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003274:	443b      	add	r3, r7
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	3301      	adds	r3, #1
 800327a:	f646 225c 	movw	r2, #27228	; 0x6a5c
 800327e:	443a      	add	r2, r7
 8003280:	6013      	str	r3, [r2, #0]
        if(FDBuffer[BuffIndex].id == 0){
 8003282:	4a8e      	ldr	r2, [pc, #568]	; (80034bc <main+0x1054>)
 8003284:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003288:	443b      	add	r3, r7
 800328a:	441a      	add	r2, r3
 800328c:	f646 235c 	movw	r3, #27228	; 0x6a5c
 8003290:	443b      	add	r3, r7
 8003292:	6819      	ldr	r1, [r3, #0]
 8003294:	460b      	mov	r3, r1
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	011b      	lsls	r3, r3, #4
 800329c:	4413      	add	r3, r2
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d104      	bne.n	80032ae <main+0xe46>
          BuffIndex = 0;
 80032a4:	2300      	movs	r3, #0
 80032a6:	f646 225c 	movw	r2, #27228	; 0x6a5c
 80032aa:	443a      	add	r2, r7
 80032ac:	6013      	str	r3, [r2, #0]
      for(int i = 0; i < AllowedTele; i++){
 80032ae:	f646 2350 	movw	r3, #27216	; 0x6a50
 80032b2:	443b      	add	r3, r7
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	3301      	adds	r3, #1
 80032b8:	f646 2250 	movw	r2, #27216	; 0x6a50
 80032bc:	443a      	add	r2, r7
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	f646 2350 	movw	r3, #27216	; 0x6a50
 80032c4:	443b      	add	r3, r7
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	f646 2310 	movw	r3, #27152	; 0x6a10
 80032cc:	443b      	add	r3, r7
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	429a      	cmp	r2, r3
 80032d2:	f6ff ad73 	blt.w	8002dbc <main+0x954>


	  printf("Date:%u Month:%u Year:%u\n", sDate.Date, sDate.Month, sDate.Year);
	  printf("Hours:%u Minutes:%u Seconds:%u\n", sTime.Hours, sTime.Minutes, sTime.Seconds);*/

	  if(FDCAN_Flag){
 80032d6:	4b7b      	ldr	r3, [pc, #492]	; (80034c4 <main+0x105c>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 820d 	beq.w	80036fa <main+0x1292>

		  RTC_TimeTypeDef lTime = sTime;
 80032e0:	4b79      	ldr	r3, [pc, #484]	; (80034c8 <main+0x1060>)
 80032e2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80032e6:	443a      	add	r2, r7
 80032e8:	4413      	add	r3, r2
 80032ea:	4a78      	ldr	r2, [pc, #480]	; (80034cc <main+0x1064>)
 80032ec:	461c      	mov	r4, r3
 80032ee:	4615      	mov	r5, r2
 80032f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80032f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80032f4:	682b      	ldr	r3, [r5, #0]
 80032f6:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFDFrame.time;
 80032f8:	4b75      	ldr	r3, [pc, #468]	; (80034d0 <main+0x1068>)
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003300:	443a      	add	r2, r7
 8003302:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8003304:	4b70      	ldr	r3, [pc, #448]	; (80034c8 <main+0x1060>)
 8003306:	f646 2270 	movw	r2, #27248	; 0x6a70
 800330a:	443a      	add	r2, r7
 800330c:	4413      	add	r3, r2
 800330e:	6859      	ldr	r1, [r3, #4]
 8003310:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003314:	443b      	add	r3, r7
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	4b6e      	ldr	r3, [pc, #440]	; (80034d4 <main+0x106c>)
 800331a:	fba3 0302 	umull	r0, r3, r3, r2
 800331e:	099b      	lsrs	r3, r3, #6
 8003320:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003324:	fb00 f303 	mul.w	r3, r0, r3
 8003328:	1ad3      	subs	r3, r2, r3
 800332a:	18ca      	adds	r2, r1, r3
 800332c:	4b66      	ldr	r3, [pc, #408]	; (80034c8 <main+0x1060>)
 800332e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003332:	4439      	add	r1, r7
 8003334:	440b      	add	r3, r1
 8003336:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 8003338:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800333c:	443b      	add	r3, r7
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a64      	ldr	r2, [pc, #400]	; (80034d4 <main+0x106c>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	099b      	lsrs	r3, r3, #6
 8003348:	f646 221c 	movw	r2, #27164	; 0x6a1c
 800334c:	443a      	add	r2, r7
 800334e:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8003350:	4b5d      	ldr	r3, [pc, #372]	; (80034c8 <main+0x1060>)
 8003352:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003356:	443a      	add	r2, r7
 8003358:	4413      	add	r3, r2
 800335a:	7898      	ldrb	r0, [r3, #2]
 800335c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003360:	443b      	add	r3, r7
 8003362:	6819      	ldr	r1, [r3, #0]
 8003364:	4b5c      	ldr	r3, [pc, #368]	; (80034d8 <main+0x1070>)
 8003366:	fba3 2301 	umull	r2, r3, r3, r1
 800336a:	095a      	lsrs	r2, r3, #5
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	1aca      	subs	r2, r1, r3
 8003376:	b2d3      	uxtb	r3, r2
 8003378:	4403      	add	r3, r0
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b52      	ldr	r3, [pc, #328]	; (80034c8 <main+0x1060>)
 800337e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003382:	4439      	add	r1, r7
 8003384:	440b      	add	r3, r1
 8003386:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 8003388:	4b4f      	ldr	r3, [pc, #316]	; (80034c8 <main+0x1060>)
 800338a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800338e:	443a      	add	r2, r7
 8003390:	4413      	add	r3, r2
 8003392:	789b      	ldrb	r3, [r3, #2]
 8003394:	2b3b      	cmp	r3, #59	; 0x3b
 8003396:	d91b      	bls.n	80033d0 <main+0xf68>
			  lTime.Seconds -= 60;
 8003398:	4b4b      	ldr	r3, [pc, #300]	; (80034c8 <main+0x1060>)
 800339a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800339e:	443a      	add	r2, r7
 80033a0:	4413      	add	r3, r2
 80033a2:	789b      	ldrb	r3, [r3, #2]
 80033a4:	3b3c      	subs	r3, #60	; 0x3c
 80033a6:	b2da      	uxtb	r2, r3
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <main+0x1060>)
 80033aa:	f646 2170 	movw	r1, #27248	; 0x6a70
 80033ae:	4439      	add	r1, r7
 80033b0:	440b      	add	r3, r1
 80033b2:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 80033b4:	4b44      	ldr	r3, [pc, #272]	; (80034c8 <main+0x1060>)
 80033b6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033ba:	443a      	add	r2, r7
 80033bc:	4413      	add	r3, r2
 80033be:	785b      	ldrb	r3, [r3, #1]
 80033c0:	3301      	adds	r3, #1
 80033c2:	b2da      	uxtb	r2, r3
 80033c4:	4b40      	ldr	r3, [pc, #256]	; (80034c8 <main+0x1060>)
 80033c6:	f646 2170 	movw	r1, #27248	; 0x6a70
 80033ca:	4439      	add	r1, r7
 80033cc:	440b      	add	r3, r1
 80033ce:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 80033d0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80033d4:	443b      	add	r3, r7
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a3f      	ldr	r2, [pc, #252]	; (80034d8 <main+0x1070>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	095b      	lsrs	r3, r3, #5
 80033e0:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80033e4:	443a      	add	r2, r7
 80033e6:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 80033e8:	4b37      	ldr	r3, [pc, #220]	; (80034c8 <main+0x1060>)
 80033ea:	f646 2270 	movw	r2, #27248	; 0x6a70
 80033ee:	443a      	add	r2, r7
 80033f0:	4413      	add	r3, r2
 80033f2:	7858      	ldrb	r0, [r3, #1]
 80033f4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80033f8:	443b      	add	r3, r7
 80033fa:	6819      	ldr	r1, [r3, #0]
 80033fc:	4b36      	ldr	r3, [pc, #216]	; (80034d8 <main+0x1070>)
 80033fe:	fba3 2301 	umull	r2, r3, r3, r1
 8003402:	095a      	lsrs	r2, r3, #5
 8003404:	4613      	mov	r3, r2
 8003406:	011b      	lsls	r3, r3, #4
 8003408:	1a9b      	subs	r3, r3, r2
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	1aca      	subs	r2, r1, r3
 800340e:	b2d3      	uxtb	r3, r2
 8003410:	4403      	add	r3, r0
 8003412:	b2da      	uxtb	r2, r3
 8003414:	4b2c      	ldr	r3, [pc, #176]	; (80034c8 <main+0x1060>)
 8003416:	f646 2170 	movw	r1, #27248	; 0x6a70
 800341a:	4439      	add	r1, r7
 800341c:	440b      	add	r3, r1
 800341e:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8003420:	4b29      	ldr	r3, [pc, #164]	; (80034c8 <main+0x1060>)
 8003422:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003426:	443a      	add	r2, r7
 8003428:	4413      	add	r3, r2
 800342a:	785b      	ldrb	r3, [r3, #1]
 800342c:	2b3b      	cmp	r3, #59	; 0x3b
 800342e:	d91b      	bls.n	8003468 <main+0x1000>
			  lTime.Minutes -= 60;
 8003430:	4b25      	ldr	r3, [pc, #148]	; (80034c8 <main+0x1060>)
 8003432:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003436:	443a      	add	r2, r7
 8003438:	4413      	add	r3, r2
 800343a:	785b      	ldrb	r3, [r3, #1]
 800343c:	3b3c      	subs	r3, #60	; 0x3c
 800343e:	b2da      	uxtb	r2, r3
 8003440:	4b21      	ldr	r3, [pc, #132]	; (80034c8 <main+0x1060>)
 8003442:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003446:	4439      	add	r1, r7
 8003448:	440b      	add	r3, r1
 800344a:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 800344c:	4b1e      	ldr	r3, [pc, #120]	; (80034c8 <main+0x1060>)
 800344e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003452:	443a      	add	r2, r7
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	b2da      	uxtb	r2, r3
 800345c:	4b1a      	ldr	r3, [pc, #104]	; (80034c8 <main+0x1060>)
 800345e:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003462:	4439      	add	r1, r7
 8003464:	440b      	add	r3, r1
 8003466:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 8003468:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800346c:	443b      	add	r3, r7
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <main+0x1070>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	f646 221c 	movw	r2, #27164	; 0x6a1c
 800347c:	443a      	add	r2, r7
 800347e:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 8003480:	4b11      	ldr	r3, [pc, #68]	; (80034c8 <main+0x1060>)
 8003482:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003486:	443a      	add	r2, r7
 8003488:	4413      	add	r3, r2
 800348a:	7818      	ldrb	r0, [r3, #0]
 800348c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003490:	443b      	add	r3, r7
 8003492:	6819      	ldr	r1, [r3, #0]
 8003494:	4b10      	ldr	r3, [pc, #64]	; (80034d8 <main+0x1070>)
 8003496:	fba3 2301 	umull	r2, r3, r3, r1
 800349a:	095a      	lsrs	r2, r3, #5
 800349c:	4613      	mov	r3, r2
 800349e:	011b      	lsls	r3, r3, #4
 80034a0:	1a9b      	subs	r3, r3, r2
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	1aca      	subs	r2, r1, r3
 80034a6:	b2d3      	uxtb	r3, r2
 80034a8:	4403      	add	r3, r0
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	4b06      	ldr	r3, [pc, #24]	; (80034c8 <main+0x1060>)
 80034ae:	f646 2170 	movw	r1, #27248	; 0x6a70
 80034b2:	4439      	add	r1, r7
 80034b4:	440b      	add	r3, r1
 80034b6:	e011      	b.n	80034dc <main+0x1074>
 80034b8:	240446ec 	.word	0x240446ec
 80034bc:	ffffefe8 	.word	0xffffefe8
 80034c0:	0801c3e0 	.word	0x0801c3e0
 80034c4:	2400036c 	.word	0x2400036c
 80034c8:	ffffe45c 	.word	0xffffe45c
 80034cc:	240404a4 	.word	0x240404a4
 80034d0:	24044068 	.word	0x24044068
 80034d4:	10624dd3 	.word	0x10624dd3
 80034d8:	88888889 	.word	0x88888889
 80034dc:	701a      	strb	r2, [r3, #0]
      //Write to SD Card
		  //date/time, CANID, Data
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034de:	4b6d      	ldr	r3, [pc, #436]	; (8003694 <main+0x122c>)
 80034e0:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034e2:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034e4:	4b6b      	ldr	r3, [pc, #428]	; (8003694 <main+0x122c>)
 80034e6:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034e8:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034ea:	4b6a      	ldr	r3, [pc, #424]	; (8003694 <main+0x122c>)
 80034ec:	78db      	ldrb	r3, [r3, #3]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034ee:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034f0:	4b69      	ldr	r3, [pc, #420]	; (8003698 <main+0x1230>)
 80034f2:	f646 2270 	movw	r2, #27248	; 0x6a70
 80034f6:	443a      	add	r2, r7
 80034f8:	4413      	add	r3, r2
 80034fa:	781b      	ldrb	r3, [r3, #0]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80034fc:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80034fe:	4b66      	ldr	r3, [pc, #408]	; (8003698 <main+0x1230>)
 8003500:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003504:	443a      	add	r2, r7
 8003506:	4413      	add	r3, r2
 8003508:	785b      	ldrb	r3, [r3, #1]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 800350a:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800350c:	4b62      	ldr	r3, [pc, #392]	; (8003698 <main+0x1230>)
 800350e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003512:	443a      	add	r2, r7
 8003514:	4413      	add	r3, r2
 8003516:	789b      	ldrb	r3, [r3, #2]
		  CFDW = sprintf(CanFDWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003518:	461e      	mov	r6, r3
 800351a:	4b5f      	ldr	r3, [pc, #380]	; (8003698 <main+0x1230>)
 800351c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003520:	443a      	add	r2, r7
 8003522:	4413      	add	r3, r2
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	4a5d      	ldr	r2, [pc, #372]	; (800369c <main+0x1234>)
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	485d      	ldr	r0, [pc, #372]	; (80036a0 <main+0x1238>)
 800352c:	f646 2870 	movw	r8, #27248	; 0x6a70
 8003530:	44b8      	add	r8, r7
 8003532:	4440      	add	r0, r8
 8003534:	9205      	str	r2, [sp, #20]
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	9603      	str	r6, [sp, #12]
 800353a:	9502      	str	r5, [sp, #8]
 800353c:	9401      	str	r4, [sp, #4]
 800353e:	9100      	str	r1, [sp, #0]
 8003540:	4673      	mov	r3, lr
 8003542:	4662      	mov	r2, ip
 8003544:	4957      	ldr	r1, [pc, #348]	; (80036a4 <main+0x123c>)
 8003546:	f017 fb13 	bl	801ab70 <siprintf>
 800354a:	f646 2314 	movw	r3, #27156	; 0x6a14
 800354e:	443b      	add	r3, r7
 8003550:	6018      	str	r0, [r3, #0]
				  CanFDFrame.id);

		  CFDW = CANFD_Data_Process(CanFDWrite, CFDW);
 8003552:	4b53      	ldr	r3, [pc, #332]	; (80036a0 <main+0x1238>)
 8003554:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003558:	443a      	add	r2, r7
 800355a:	4413      	add	r3, r2
 800355c:	f646 2214 	movw	r2, #27156	; 0x6a14
 8003560:	443a      	add	r2, r7
 8003562:	6811      	ldr	r1, [r2, #0]
 8003564:	4618      	mov	r0, r3
 8003566:	f7fd f91b 	bl	80007a0 <CANFD_Data_Process>
 800356a:	f646 2314 	movw	r3, #27156	; 0x6a14
 800356e:	443b      	add	r3, r7
 8003570:	6018      	str	r0, [r3, #0]

		  CFDW += sprintf(CanFDWrite + CFDW, "\n\r");
 8003572:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003576:	443b      	add	r3, r7
 8003578:	681a      	ldr	r2, [r3, #0]
 800357a:	4b49      	ldr	r3, [pc, #292]	; (80036a0 <main+0x1238>)
 800357c:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003580:	4439      	add	r1, r7
 8003582:	440b      	add	r3, r1
 8003584:	4413      	add	r3, r2
 8003586:	4a48      	ldr	r2, [pc, #288]	; (80036a8 <main+0x1240>)
 8003588:	8811      	ldrh	r1, [r2, #0]
 800358a:	7892      	ldrb	r2, [r2, #2]
 800358c:	8019      	strh	r1, [r3, #0]
 800358e:	709a      	strb	r2, [r3, #2]
 8003590:	2202      	movs	r2, #2
 8003592:	f646 2314 	movw	r3, #27156	; 0x6a14
 8003596:	443b      	add	r3, r7
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4413      	add	r3, r2
 800359c:	f646 2214 	movw	r2, #27156	; 0x6a14
 80035a0:	443a      	add	r2, r7
 80035a2:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanFDWrite, CFDW);
 80035a4:	4b3e      	ldr	r3, [pc, #248]	; (80036a0 <main+0x1238>)
 80035a6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80035aa:	443a      	add	r2, r7
 80035ac:	4413      	add	r3, r2
 80035ae:	f646 2214 	movw	r2, #27156	; 0x6a14
 80035b2:	443a      	add	r2, r7
 80035b4:	6811      	ldr	r1, [r2, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fe feaa 	bl	8002310 <WriteToBuff>

      //Write to telemetry buffer
      
      for(int i = 0; i <50; i++){
 80035bc:	2300      	movs	r3, #0
 80035be:	f646 2238 	movw	r2, #27192	; 0x6a38
 80035c2:	443a      	add	r2, r7
 80035c4:	6013      	str	r3, [r2, #0]
 80035c6:	e08d      	b.n	80036e4 <main+0x127c>
        if(CanFDFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80035c8:	4b34      	ldr	r3, [pc, #208]	; (800369c <main+0x1234>)
 80035ca:	681a      	ldr	r2, [r3, #0]
 80035cc:	4b37      	ldr	r3, [pc, #220]	; (80036ac <main+0x1244>)
 80035ce:	f646 2170 	movw	r1, #27248	; 0x6a70
 80035d2:	4439      	add	r1, r7
 80035d4:	440b      	add	r3, r1
 80035d6:	f646 2138 	movw	r1, #27192	; 0x6a38
 80035da:	4439      	add	r1, r7
 80035dc:	6809      	ldr	r1, [r1, #0]
 80035de:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d175      	bne.n	80036d2 <main+0x126a>
          for(int j = 0; j < 50; j++){
 80035e6:	2300      	movs	r3, #0
 80035e8:	f646 2234 	movw	r2, #27188	; 0x6a34
 80035ec:	443a      	add	r2, r7
 80035ee:	6013      	str	r3, [r2, #0]
 80035f0:	e069      	b.n	80036c6 <main+0x125e>
            if(FDBuffer[j].id == CanFDFrame.id){
 80035f2:	4a2f      	ldr	r2, [pc, #188]	; (80036b0 <main+0x1248>)
 80035f4:	f646 2370 	movw	r3, #27248	; 0x6a70
 80035f8:	443b      	add	r3, r7
 80035fa:	441a      	add	r2, r3
 80035fc:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003600:	443b      	add	r3, r7
 8003602:	6819      	ldr	r1, [r3, #0]
 8003604:	460b      	mov	r3, r1
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	440b      	add	r3, r1
 800360a:	011b      	lsls	r3, r3, #4
 800360c:	4413      	add	r3, r2
 800360e:	681a      	ldr	r2, [r3, #0]
 8003610:	4b22      	ldr	r3, [pc, #136]	; (800369c <main+0x1234>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	429a      	cmp	r2, r3
 8003616:	d115      	bne.n	8003644 <main+0x11dc>
              FDBuffer[j] = CanFDFrame;
 8003618:	4a25      	ldr	r2, [pc, #148]	; (80036b0 <main+0x1248>)
 800361a:	f646 2370 	movw	r3, #27248	; 0x6a70
 800361e:	443b      	add	r3, r7
 8003620:	441a      	add	r2, r3
 8003622:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003626:	443b      	add	r3, r7
 8003628:	6819      	ldr	r1, [r3, #0]
 800362a:	460b      	mov	r3, r1
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	440b      	add	r3, r1
 8003630:	011b      	lsls	r3, r3, #4
 8003632:	4413      	add	r3, r2
 8003634:	4a19      	ldr	r2, [pc, #100]	; (800369c <main+0x1234>)
 8003636:	4618      	mov	r0, r3
 8003638:	4611      	mov	r1, r2
 800363a:	2350      	movs	r3, #80	; 0x50
 800363c:	461a      	mov	r2, r3
 800363e:	f017 f91b 	bl	801a878 <memcpy>
              goto TeleDoneFD;
 8003642:	e057      	b.n	80036f4 <main+0x128c>
            }
            if(FDBuffer[j].id == 0){
 8003644:	4a1a      	ldr	r2, [pc, #104]	; (80036b0 <main+0x1248>)
 8003646:	f646 2370 	movw	r3, #27248	; 0x6a70
 800364a:	443b      	add	r3, r7
 800364c:	441a      	add	r2, r3
 800364e:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003652:	443b      	add	r3, r7
 8003654:	6819      	ldr	r1, [r3, #0]
 8003656:	460b      	mov	r3, r1
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	011b      	lsls	r3, r3, #4
 800365e:	4413      	add	r3, r2
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d126      	bne.n	80036b4 <main+0x124c>
              FDBuffer[j] = CanFDFrame;
 8003666:	4a12      	ldr	r2, [pc, #72]	; (80036b0 <main+0x1248>)
 8003668:	f646 2370 	movw	r3, #27248	; 0x6a70
 800366c:	443b      	add	r3, r7
 800366e:	441a      	add	r2, r3
 8003670:	f646 2334 	movw	r3, #27188	; 0x6a34
 8003674:	443b      	add	r3, r7
 8003676:	6819      	ldr	r1, [r3, #0]
 8003678:	460b      	mov	r3, r1
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	4413      	add	r3, r2
 8003682:	4a06      	ldr	r2, [pc, #24]	; (800369c <main+0x1234>)
 8003684:	4618      	mov	r0, r3
 8003686:	4611      	mov	r1, r2
 8003688:	2350      	movs	r3, #80	; 0x50
 800368a:	461a      	mov	r2, r3
 800368c:	f017 f8f4 	bl	801a878 <memcpy>
              goto TeleDoneFD;
 8003690:	e030      	b.n	80036f4 <main+0x128c>
 8003692:	bf00      	nop
 8003694:	240404b8 	.word	0x240404b8
 8003698:	ffffe45c 	.word	0xffffe45c
 800369c:	24044068 	.word	0x24044068
 80036a0:	ffffe494 	.word	0xffffe494
 80036a4:	0801c3e4 	.word	0x0801c3e4
 80036a8:	0801c400 	.word	0x0801c400
 80036ac:	ffffea70 	.word	0xffffea70
 80036b0:	ffffefe8 	.word	0xffffefe8
          for(int j = 0; j < 50; j++){
 80036b4:	f646 2334 	movw	r3, #27188	; 0x6a34
 80036b8:	443b      	add	r3, r7
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	3301      	adds	r3, #1
 80036be:	f646 2234 	movw	r2, #27188	; 0x6a34
 80036c2:	443a      	add	r2, r7
 80036c4:	6013      	str	r3, [r2, #0]
 80036c6:	f646 2334 	movw	r3, #27188	; 0x6a34
 80036ca:	443b      	add	r3, r7
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b31      	cmp	r3, #49	; 0x31
 80036d0:	dd8f      	ble.n	80035f2 <main+0x118a>
      for(int i = 0; i <50; i++){
 80036d2:	f646 2338 	movw	r3, #27192	; 0x6a38
 80036d6:	443b      	add	r3, r7
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	f646 2238 	movw	r2, #27192	; 0x6a38
 80036e0:	443a      	add	r2, r7
 80036e2:	6013      	str	r3, [r2, #0]
 80036e4:	f646 2338 	movw	r3, #27192	; 0x6a38
 80036e8:	443b      	add	r3, r7
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2b31      	cmp	r3, #49	; 0x31
 80036ee:	f77f af6b 	ble.w	80035c8 <main+0x1160>
            }
          }
        }
      }
TeleDoneFD:
 80036f2:	bf00      	nop
		  FDCAN_Flag = 0;
 80036f4:	4bb2      	ldr	r3, [pc, #712]	; (80039c0 <main+0x1558>)
 80036f6:	2200      	movs	r2, #0
 80036f8:	601a      	str	r2, [r3, #0]
	  }
	  if(CAN_Flag){
 80036fa:	4bb2      	ldr	r3, [pc, #712]	; (80039c4 <main+0x155c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	f000 8207 	beq.w	8003b12 <main+0x16aa>

		  RTC_TimeTypeDef lTime = sTime;
 8003704:	4bb0      	ldr	r3, [pc, #704]	; (80039c8 <main+0x1560>)
 8003706:	f646 2270 	movw	r2, #27248	; 0x6a70
 800370a:	443a      	add	r2, r7
 800370c:	4413      	add	r3, r2
 800370e:	4aaf      	ldr	r2, [pc, #700]	; (80039cc <main+0x1564>)
 8003710:	461c      	mov	r4, r3
 8003712:	4615      	mov	r5, r2
 8003714:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003716:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003718:	682b      	ldr	r3, [r5, #0]
 800371a:	6023      	str	r3, [r4, #0]
		  LocalTime = CanFrame.time;
 800371c:	4bac      	ldr	r3, [pc, #688]	; (80039d0 <main+0x1568>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003724:	443a      	add	r2, r7
 8003726:	6013      	str	r3, [r2, #0]
		  lTime.SubSeconds += LocalTime % 1000;
 8003728:	4ba7      	ldr	r3, [pc, #668]	; (80039c8 <main+0x1560>)
 800372a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800372e:	443a      	add	r2, r7
 8003730:	4413      	add	r3, r2
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003738:	443b      	add	r3, r7
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	4ba5      	ldr	r3, [pc, #660]	; (80039d4 <main+0x156c>)
 800373e:	fba3 0302 	umull	r0, r3, r3, r2
 8003742:	099b      	lsrs	r3, r3, #6
 8003744:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003748:	fb00 f303 	mul.w	r3, r0, r3
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	18ca      	adds	r2, r1, r3
 8003750:	4b9d      	ldr	r3, [pc, #628]	; (80039c8 <main+0x1560>)
 8003752:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003756:	4439      	add	r1, r7
 8003758:	440b      	add	r3, r1
 800375a:	605a      	str	r2, [r3, #4]
		  LocalTime = LocalTime/1000;
 800375c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003760:	443b      	add	r3, r7
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a9b      	ldr	r2, [pc, #620]	; (80039d4 <main+0x156c>)
 8003766:	fba2 2303 	umull	r2, r3, r2, r3
 800376a:	099b      	lsrs	r3, r3, #6
 800376c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003770:	443a      	add	r2, r7
 8003772:	6013      	str	r3, [r2, #0]
		  lTime.Seconds += LocalTime % 60;
 8003774:	4b94      	ldr	r3, [pc, #592]	; (80039c8 <main+0x1560>)
 8003776:	f646 2270 	movw	r2, #27248	; 0x6a70
 800377a:	443a      	add	r2, r7
 800377c:	4413      	add	r3, r2
 800377e:	7898      	ldrb	r0, [r3, #2]
 8003780:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003784:	443b      	add	r3, r7
 8003786:	6819      	ldr	r1, [r3, #0]
 8003788:	4b93      	ldr	r3, [pc, #588]	; (80039d8 <main+0x1570>)
 800378a:	fba3 2301 	umull	r2, r3, r3, r1
 800378e:	095a      	lsrs	r2, r3, #5
 8003790:	4613      	mov	r3, r2
 8003792:	011b      	lsls	r3, r3, #4
 8003794:	1a9b      	subs	r3, r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	1aca      	subs	r2, r1, r3
 800379a:	b2d3      	uxtb	r3, r2
 800379c:	4403      	add	r3, r0
 800379e:	b2da      	uxtb	r2, r3
 80037a0:	4b89      	ldr	r3, [pc, #548]	; (80039c8 <main+0x1560>)
 80037a2:	f646 2170 	movw	r1, #27248	; 0x6a70
 80037a6:	4439      	add	r1, r7
 80037a8:	440b      	add	r3, r1
 80037aa:	709a      	strb	r2, [r3, #2]
		  if(lTime.Seconds >= 60){
 80037ac:	4b86      	ldr	r3, [pc, #536]	; (80039c8 <main+0x1560>)
 80037ae:	f646 2270 	movw	r2, #27248	; 0x6a70
 80037b2:	443a      	add	r2, r7
 80037b4:	4413      	add	r3, r2
 80037b6:	789b      	ldrb	r3, [r3, #2]
 80037b8:	2b3b      	cmp	r3, #59	; 0x3b
 80037ba:	d91b      	bls.n	80037f4 <main+0x138c>
			  lTime.Seconds -= 60;
 80037bc:	4b82      	ldr	r3, [pc, #520]	; (80039c8 <main+0x1560>)
 80037be:	f646 2270 	movw	r2, #27248	; 0x6a70
 80037c2:	443a      	add	r2, r7
 80037c4:	4413      	add	r3, r2
 80037c6:	789b      	ldrb	r3, [r3, #2]
 80037c8:	3b3c      	subs	r3, #60	; 0x3c
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	4b7e      	ldr	r3, [pc, #504]	; (80039c8 <main+0x1560>)
 80037ce:	f646 2170 	movw	r1, #27248	; 0x6a70
 80037d2:	4439      	add	r1, r7
 80037d4:	440b      	add	r3, r1
 80037d6:	709a      	strb	r2, [r3, #2]
			  lTime.Minutes += 1;
 80037d8:	4b7b      	ldr	r3, [pc, #492]	; (80039c8 <main+0x1560>)
 80037da:	f646 2270 	movw	r2, #27248	; 0x6a70
 80037de:	443a      	add	r2, r7
 80037e0:	4413      	add	r3, r2
 80037e2:	785b      	ldrb	r3, [r3, #1]
 80037e4:	3301      	adds	r3, #1
 80037e6:	b2da      	uxtb	r2, r3
 80037e8:	4b77      	ldr	r3, [pc, #476]	; (80039c8 <main+0x1560>)
 80037ea:	f646 2170 	movw	r1, #27248	; 0x6a70
 80037ee:	4439      	add	r1, r7
 80037f0:	440b      	add	r3, r1
 80037f2:	705a      	strb	r2, [r3, #1]
		  }
		  LocalTime = LocalTime/60;
 80037f4:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80037f8:	443b      	add	r3, r7
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a76      	ldr	r2, [pc, #472]	; (80039d8 <main+0x1570>)
 80037fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003802:	095b      	lsrs	r3, r3, #5
 8003804:	f646 221c 	movw	r2, #27164	; 0x6a1c
 8003808:	443a      	add	r2, r7
 800380a:	6013      	str	r3, [r2, #0]
		  lTime.Minutes += LocalTime % 60;
 800380c:	4b6e      	ldr	r3, [pc, #440]	; (80039c8 <main+0x1560>)
 800380e:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003812:	443a      	add	r2, r7
 8003814:	4413      	add	r3, r2
 8003816:	7858      	ldrb	r0, [r3, #1]
 8003818:	f646 231c 	movw	r3, #27164	; 0x6a1c
 800381c:	443b      	add	r3, r7
 800381e:	6819      	ldr	r1, [r3, #0]
 8003820:	4b6d      	ldr	r3, [pc, #436]	; (80039d8 <main+0x1570>)
 8003822:	fba3 2301 	umull	r2, r3, r3, r1
 8003826:	095a      	lsrs	r2, r3, #5
 8003828:	4613      	mov	r3, r2
 800382a:	011b      	lsls	r3, r3, #4
 800382c:	1a9b      	subs	r3, r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	1aca      	subs	r2, r1, r3
 8003832:	b2d3      	uxtb	r3, r2
 8003834:	4403      	add	r3, r0
 8003836:	b2da      	uxtb	r2, r3
 8003838:	4b63      	ldr	r3, [pc, #396]	; (80039c8 <main+0x1560>)
 800383a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800383e:	4439      	add	r1, r7
 8003840:	440b      	add	r3, r1
 8003842:	705a      	strb	r2, [r3, #1]
		  if(lTime.Minutes >= 60){
 8003844:	4b60      	ldr	r3, [pc, #384]	; (80039c8 <main+0x1560>)
 8003846:	f646 2270 	movw	r2, #27248	; 0x6a70
 800384a:	443a      	add	r2, r7
 800384c:	4413      	add	r3, r2
 800384e:	785b      	ldrb	r3, [r3, #1]
 8003850:	2b3b      	cmp	r3, #59	; 0x3b
 8003852:	d91b      	bls.n	800388c <main+0x1424>
			  lTime.Minutes -= 60;
 8003854:	4b5c      	ldr	r3, [pc, #368]	; (80039c8 <main+0x1560>)
 8003856:	f646 2270 	movw	r2, #27248	; 0x6a70
 800385a:	443a      	add	r2, r7
 800385c:	4413      	add	r3, r2
 800385e:	785b      	ldrb	r3, [r3, #1]
 8003860:	3b3c      	subs	r3, #60	; 0x3c
 8003862:	b2da      	uxtb	r2, r3
 8003864:	4b58      	ldr	r3, [pc, #352]	; (80039c8 <main+0x1560>)
 8003866:	f646 2170 	movw	r1, #27248	; 0x6a70
 800386a:	4439      	add	r1, r7
 800386c:	440b      	add	r3, r1
 800386e:	705a      	strb	r2, [r3, #1]
			  lTime.Hours += 1;
 8003870:	4b55      	ldr	r3, [pc, #340]	; (80039c8 <main+0x1560>)
 8003872:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003876:	443a      	add	r2, r7
 8003878:	4413      	add	r3, r2
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	3301      	adds	r3, #1
 800387e:	b2da      	uxtb	r2, r3
 8003880:	4b51      	ldr	r3, [pc, #324]	; (80039c8 <main+0x1560>)
 8003882:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003886:	4439      	add	r1, r7
 8003888:	440b      	add	r3, r1
 800388a:	701a      	strb	r2, [r3, #0]
		  }
		  LocalTime = LocalTime/60;
 800388c:	f646 231c 	movw	r3, #27164	; 0x6a1c
 8003890:	443b      	add	r3, r7
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a50      	ldr	r2, [pc, #320]	; (80039d8 <main+0x1570>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	f646 221c 	movw	r2, #27164	; 0x6a1c
 80038a0:	443a      	add	r2, r7
 80038a2:	6013      	str	r3, [r2, #0]
		  lTime.Hours += LocalTime % 60;
 80038a4:	4b48      	ldr	r3, [pc, #288]	; (80039c8 <main+0x1560>)
 80038a6:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038aa:	443a      	add	r2, r7
 80038ac:	4413      	add	r3, r2
 80038ae:	7818      	ldrb	r0, [r3, #0]
 80038b0:	f646 231c 	movw	r3, #27164	; 0x6a1c
 80038b4:	443b      	add	r3, r7
 80038b6:	6819      	ldr	r1, [r3, #0]
 80038b8:	4b47      	ldr	r3, [pc, #284]	; (80039d8 <main+0x1570>)
 80038ba:	fba3 2301 	umull	r2, r3, r3, r1
 80038be:	095a      	lsrs	r2, r3, #5
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	1aca      	subs	r2, r1, r3
 80038ca:	b2d3      	uxtb	r3, r2
 80038cc:	4403      	add	r3, r0
 80038ce:	b2da      	uxtb	r2, r3
 80038d0:	4b3d      	ldr	r3, [pc, #244]	; (80039c8 <main+0x1560>)
 80038d2:	f646 2170 	movw	r1, #27248	; 0x6a70
 80038d6:	4439      	add	r1, r7
 80038d8:	440b      	add	r3, r1
 80038da:	701a      	strb	r2, [r3, #0]

		  //date/time, CANID, Data
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038dc:	4b3f      	ldr	r3, [pc, #252]	; (80039dc <main+0x1574>)
 80038de:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038e0:	469c      	mov	ip, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038e2:	4b3e      	ldr	r3, [pc, #248]	; (80039dc <main+0x1574>)
 80038e4:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038e6:	469e      	mov	lr, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038e8:	4b3c      	ldr	r3, [pc, #240]	; (80039dc <main+0x1574>)
 80038ea:	78db      	ldrb	r3, [r3, #3]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038ec:	4619      	mov	r1, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038ee:	4b36      	ldr	r3, [pc, #216]	; (80039c8 <main+0x1560>)
 80038f0:	f646 2270 	movw	r2, #27248	; 0x6a70
 80038f4:	443a      	add	r2, r7
 80038f6:	4413      	add	r3, r2
 80038f8:	781b      	ldrb	r3, [r3, #0]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 80038fa:	461c      	mov	r4, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <main+0x1560>)
 80038fe:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003902:	443a      	add	r2, r7
 8003904:	4413      	add	r3, r2
 8003906:	785b      	ldrb	r3, [r3, #1]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003908:	461d      	mov	r5, r3
				  sDate.Date,sDate.Month,sDate.Year, lTime.Hours,lTime.Minutes,lTime.Seconds,lTime.SubSeconds,
 800390a:	4b2f      	ldr	r3, [pc, #188]	; (80039c8 <main+0x1560>)
 800390c:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003910:	443a      	add	r2, r7
 8003912:	4413      	add	r3, r2
 8003914:	789b      	ldrb	r3, [r3, #2]
		  CW = sprintf(CanWrite, "%u.%u.%u %u:%u:%u.%u,0x%X,",
 8003916:	461e      	mov	r6, r3
 8003918:	4b2b      	ldr	r3, [pc, #172]	; (80039c8 <main+0x1560>)
 800391a:	f646 2270 	movw	r2, #27248	; 0x6a70
 800391e:	443a      	add	r2, r7
 8003920:	4413      	add	r3, r2
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	4a2a      	ldr	r2, [pc, #168]	; (80039d0 <main+0x1568>)
 8003926:	6812      	ldr	r2, [r2, #0]
 8003928:	482d      	ldr	r0, [pc, #180]	; (80039e0 <main+0x1578>)
 800392a:	f646 2870 	movw	r8, #27248	; 0x6a70
 800392e:	44b8      	add	r8, r7
 8003930:	4440      	add	r0, r8
 8003932:	9205      	str	r2, [sp, #20]
 8003934:	9304      	str	r3, [sp, #16]
 8003936:	9603      	str	r6, [sp, #12]
 8003938:	9502      	str	r5, [sp, #8]
 800393a:	9401      	str	r4, [sp, #4]
 800393c:	9100      	str	r1, [sp, #0]
 800393e:	4673      	mov	r3, lr
 8003940:	4662      	mov	r2, ip
 8003942:	4928      	ldr	r1, [pc, #160]	; (80039e4 <main+0x157c>)
 8003944:	f017 f914 	bl	801ab70 <siprintf>
 8003948:	f646 2318 	movw	r3, #27160	; 0x6a18
 800394c:	443b      	add	r3, r7
 800394e:	6018      	str	r0, [r3, #0]
				  CanFrame.id);

		  CW = CAN_Data_Process(CanWrite, CW);
 8003950:	4b23      	ldr	r3, [pc, #140]	; (80039e0 <main+0x1578>)
 8003952:	f646 2270 	movw	r2, #27248	; 0x6a70
 8003956:	443a      	add	r2, r7
 8003958:	4413      	add	r3, r2
 800395a:	f646 2218 	movw	r2, #27160	; 0x6a18
 800395e:	443a      	add	r2, r7
 8003960:	6811      	ldr	r1, [r2, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7fd f87c 	bl	8000a60 <CAN_Data_Process>
 8003968:	f646 2318 	movw	r3, #27160	; 0x6a18
 800396c:	443b      	add	r3, r7
 800396e:	6018      	str	r0, [r3, #0]

		  CW += sprintf(CanWrite + CW, "\n\r");
 8003970:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003974:	443b      	add	r3, r7
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	4b19      	ldr	r3, [pc, #100]	; (80039e0 <main+0x1578>)
 800397a:	f646 2170 	movw	r1, #27248	; 0x6a70
 800397e:	4439      	add	r1, r7
 8003980:	440b      	add	r3, r1
 8003982:	4413      	add	r3, r2
 8003984:	4a18      	ldr	r2, [pc, #96]	; (80039e8 <main+0x1580>)
 8003986:	8811      	ldrh	r1, [r2, #0]
 8003988:	7892      	ldrb	r2, [r2, #2]
 800398a:	8019      	strh	r1, [r3, #0]
 800398c:	709a      	strb	r2, [r3, #2]
 800398e:	2202      	movs	r2, #2
 8003990:	f646 2318 	movw	r3, #27160	; 0x6a18
 8003994:	443b      	add	r3, r7
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4413      	add	r3, r2
 800399a:	f646 2218 	movw	r2, #27160	; 0x6a18
 800399e:	443a      	add	r2, r7
 80039a0:	6013      	str	r3, [r2, #0]
		  WriteToBuff(CanWrite, CW);
 80039a2:	4b0f      	ldr	r3, [pc, #60]	; (80039e0 <main+0x1578>)
 80039a4:	f646 2270 	movw	r2, #27248	; 0x6a70
 80039a8:	443a      	add	r2, r7
 80039aa:	4413      	add	r3, r2
 80039ac:	f646 2218 	movw	r2, #27160	; 0x6a18
 80039b0:	443a      	add	r2, r7
 80039b2:	6811      	ldr	r1, [r2, #0]
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7fe fcab 	bl	8002310 <WriteToBuff>

      for(int i = 0; i <50; i++){
 80039ba:	2300      	movs	r3, #0
 80039bc:	e016      	b.n	80039ec <main+0x1584>
 80039be:	bf00      	nop
 80039c0:	2400036c 	.word	0x2400036c
 80039c4:	24000370 	.word	0x24000370
 80039c8:	ffffe448 	.word	0xffffe448
 80039cc:	240404a4 	.word	0x240404a4
 80039d0:	240440e0 	.word	0x240440e0
 80039d4:	10624dd3 	.word	0x10624dd3
 80039d8:	88888889 	.word	0x88888889
 80039dc:	240404b8 	.word	0x240404b8
 80039e0:	ffffe87c 	.word	0xffffe87c
 80039e4:	0801c3e4 	.word	0x0801c3e4
 80039e8:	0801c400 	.word	0x0801c400
 80039ec:	f646 2230 	movw	r2, #27184	; 0x6a30
 80039f0:	443a      	add	r2, r7
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	e080      	b.n	8003af8 <main+0x1690>
        if(CanFrame.id == Tele_IDs[i]){ //check if frame should be checked
 80039f6:	4b4f      	ldr	r3, [pc, #316]	; (8003b34 <main+0x16cc>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	4b4f      	ldr	r3, [pc, #316]	; (8003b38 <main+0x16d0>)
 80039fc:	f646 2170 	movw	r1, #27248	; 0x6a70
 8003a00:	4439      	add	r1, r7
 8003a02:	440b      	add	r3, r1
 8003a04:	f646 2130 	movw	r1, #27184	; 0x6a30
 8003a08:	4439      	add	r1, r7
 8003a0a:	6809      	ldr	r1, [r1, #0]
 8003a0c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d168      	bne.n	8003ae6 <main+0x167e>
          for(int j = 0; j < 50; j++){
 8003a14:	2300      	movs	r3, #0
 8003a16:	f646 222c 	movw	r2, #27180	; 0x6a2c
 8003a1a:	443a      	add	r2, r7
 8003a1c:	6013      	str	r3, [r2, #0]
 8003a1e:	e05c      	b.n	8003ada <main+0x1672>
            if(Buffer[j].id == CanFrame.id){
 8003a20:	4a46      	ldr	r2, [pc, #280]	; (8003b3c <main+0x16d4>)
 8003a22:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a26:	443b      	add	r3, r7
 8003a28:	441a      	add	r2, r3
 8003a2a:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a2e:	443b      	add	r3, r7
 8003a30:	6819      	ldr	r1, [r3, #0]
 8003a32:	460b      	mov	r3, r1
 8003a34:	005b      	lsls	r3, r3, #1
 8003a36:	440b      	add	r3, r1
 8003a38:	00db      	lsls	r3, r3, #3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	4b3d      	ldr	r3, [pc, #244]	; (8003b34 <main+0x16cc>)
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d117      	bne.n	8003a76 <main+0x160e>
              Buffer[j] = CanFrame;     //if its already in the buffer replace it
 8003a46:	4a3d      	ldr	r2, [pc, #244]	; (8003b3c <main+0x16d4>)
 8003a48:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a4c:	443b      	add	r3, r7
 8003a4e:	441a      	add	r2, r3
 8003a50:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a54:	443b      	add	r3, r7
 8003a56:	6819      	ldr	r1, [r3, #0]
 8003a58:	460b      	mov	r3, r1
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	440b      	add	r3, r1
 8003a5e:	00db      	lsls	r3, r3, #3
 8003a60:	4413      	add	r3, r2
 8003a62:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <main+0x16cc>)
 8003a64:	461c      	mov	r4, r3
 8003a66:	4615      	mov	r5, r2
 8003a68:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003a6a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003a70:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003a74:	e04a      	b.n	8003b0c <main+0x16a4>
            }
            if(Buffer[j].id == 0){
 8003a76:	4a31      	ldr	r2, [pc, #196]	; (8003b3c <main+0x16d4>)
 8003a78:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a7c:	443b      	add	r3, r7
 8003a7e:	441a      	add	r2, r3
 8003a80:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003a84:	443b      	add	r3, r7
 8003a86:	6819      	ldr	r1, [r3, #0]
 8003a88:	460b      	mov	r3, r1
 8003a8a:	005b      	lsls	r3, r3, #1
 8003a8c:	440b      	add	r3, r1
 8003a8e:	00db      	lsls	r3, r3, #3
 8003a90:	4413      	add	r3, r2
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d117      	bne.n	8003ac8 <main+0x1660>
              Buffer[j] = CanFrame;     //if you get to the end of the defined packets withoout finding anything add the packet on the end
 8003a98:	4a28      	ldr	r2, [pc, #160]	; (8003b3c <main+0x16d4>)
 8003a9a:	f646 2370 	movw	r3, #27248	; 0x6a70
 8003a9e:	443b      	add	r3, r7
 8003aa0:	441a      	add	r2, r3
 8003aa2:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003aa6:	443b      	add	r3, r7
 8003aa8:	6819      	ldr	r1, [r3, #0]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	005b      	lsls	r3, r3, #1
 8003aae:	440b      	add	r3, r1
 8003ab0:	00db      	lsls	r3, r3, #3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <main+0x16cc>)
 8003ab6:	461c      	mov	r4, r3
 8003ab8:	4615      	mov	r5, r2
 8003aba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003abc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003abe:	e895 0003 	ldmia.w	r5, {r0, r1}
 8003ac2:	e884 0003 	stmia.w	r4, {r0, r1}
              goto TeleDone;
 8003ac6:	e021      	b.n	8003b0c <main+0x16a4>
          for(int j = 0; j < 50; j++){
 8003ac8:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003acc:	443b      	add	r3, r7
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	f646 222c 	movw	r2, #27180	; 0x6a2c
 8003ad6:	443a      	add	r2, r7
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	f646 232c 	movw	r3, #27180	; 0x6a2c
 8003ade:	443b      	add	r3, r7
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	2b31      	cmp	r3, #49	; 0x31
 8003ae4:	dd9c      	ble.n	8003a20 <main+0x15b8>
      for(int i = 0; i <50; i++){
 8003ae6:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003aea:	443b      	add	r3, r7
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3301      	adds	r3, #1
 8003af0:	f646 2230 	movw	r2, #27184	; 0x6a30
 8003af4:	443a      	add	r2, r7
 8003af6:	6013      	str	r3, [r2, #0]
 8003af8:	f646 2330 	movw	r3, #27184	; 0x6a30
 8003afc:	443b      	add	r3, r7
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2b31      	cmp	r3, #49	; 0x31
 8003b02:	f77f af78 	ble.w	80039f6 <main+0x158e>
            }
          }
        }
      }
      printf("couldnt track, id buffer too full :(");
 8003b06:	480e      	ldr	r0, [pc, #56]	; (8003b40 <main+0x16d8>)
 8003b08:	f016 ff72 	bl	801a9f0 <iprintf>
TeleDone:
		  CAN_Flag = 0;
 8003b0c:	4b0d      	ldr	r3, [pc, #52]	; (8003b44 <main+0x16dc>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	601a      	str	r2, [r3, #0]
  while (end_flag){
 8003b12:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <main+0x16e0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	f47f a906 	bne.w	8002d28 <main+0x8c0>
    /* USER CODE BEGIN 3 */
}

    //f_write(&myFILE, close_msg, strlen(close_msg), &testByte);
    //f_close(&myFILE);
    HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	480b      	ldr	r0, [pc, #44]	; (8003b4c <main+0x16e4>)
 8003b20:	f004 fea9 	bl	8008876 <HAL_GPIO_TogglePin>
 8003b24:	2300      	movs	r3, #0
    //printf("File closed\n");

  /* USER CODE END 3 */
}
 8003b26:	4618      	mov	r0, r3
 8003b28:	f507 47d4 	add.w	r7, r7, #27136	; 0x6a00
 8003b2c:	3770      	adds	r7, #112	; 0x70
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003b34:	240440e0 	.word	0x240440e0
 8003b38:	ffffea70 	.word	0xffffea70
 8003b3c:	ffffeb38 	.word	0xffffeb38
 8003b40:	0801c404 	.word	0x0801c404
 8003b44:	24000370 	.word	0x24000370
 8003b48:	24000008 	.word	0x24000008
 8003b4c:	58020400 	.word	0x58020400

08003b50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b0cc      	sub	sp, #304	; 0x130
 8003b54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003b56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003b5a:	224c      	movs	r2, #76	; 0x4c
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f016 fe95 	bl	801a88e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003b64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003b68:	2220      	movs	r2, #32
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f016 fe8e 	bl	801a88e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003b72:	f107 0308 	add.w	r3, r7, #8
 8003b76:	4618      	mov	r0, r3
 8003b78:	23bc      	movs	r3, #188	; 0xbc
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	f016 fe86 	bl	801a88e <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8003b82:	2002      	movs	r0, #2
 8003b84:	f006 f972 	bl	8009e6c <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b88:	1d3b      	adds	r3, r7, #4
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	4b71      	ldr	r3, [pc, #452]	; (8003d54 <SystemClock_Config+0x204>)
 8003b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b92:	4a70      	ldr	r2, [pc, #448]	; (8003d54 <SystemClock_Config+0x204>)
 8003b94:	f023 0301 	bic.w	r3, r3, #1
 8003b98:	62d3      	str	r3, [r2, #44]	; 0x2c
 8003b9a:	4b6e      	ldr	r3, [pc, #440]	; (8003d54 <SystemClock_Config+0x204>)
 8003b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9e:	f003 0201 	and.w	r2, r3, #1
 8003ba2:	1d3b      	adds	r3, r7, #4
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	4b6c      	ldr	r3, [pc, #432]	; (8003d58 <SystemClock_Config+0x208>)
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	4a6b      	ldr	r2, [pc, #428]	; (8003d58 <SystemClock_Config+0x208>)
 8003bac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003bb0:	6193      	str	r3, [r2, #24]
 8003bb2:	4b69      	ldr	r3, [pc, #420]	; (8003d58 <SystemClock_Config+0x208>)
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8003bba:	1d3b      	adds	r3, r7, #4
 8003bbc:	601a      	str	r2, [r3, #0]
 8003bbe:	1d3b      	adds	r3, r7, #4
 8003bc0:	681b      	ldr	r3, [r3, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8003bc2:	bf00      	nop
 8003bc4:	4b64      	ldr	r3, [pc, #400]	; (8003d58 <SystemClock_Config+0x208>)
 8003bc6:	699b      	ldr	r3, [r3, #24]
 8003bc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd0:	d1f8      	bne.n	8003bc4 <SystemClock_Config+0x74>
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003bd2:	f006 f8b1 	bl	8009d38 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 8003bd6:	f001 f93d 	bl	8004e54 <HAL_GetREVID>
 8003bda:	4b60      	ldr	r3, [pc, #384]	; (8003d5c <SystemClock_Config+0x20c>)
 8003bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bde:	4a5f      	ldr	r2, [pc, #380]	; (8003d5c <SystemClock_Config+0x20c>)
 8003be0:	f043 0318 	orr.w	r3, r3, #24
 8003be4:	6713      	str	r3, [r2, #112]	; 0x70
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8003be6:	4b5d      	ldr	r3, [pc, #372]	; (8003d5c <SystemClock_Config+0x20c>)
 8003be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bea:	f023 0303 	bic.w	r3, r3, #3
 8003bee:	4a5b      	ldr	r2, [pc, #364]	; (8003d5c <SystemClock_Config+0x20c>)
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8003bf6:	2325      	movs	r3, #37	; 0x25
 8003bf8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003bfc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003c00:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003c04:	2301      	movs	r3, #1
 8003c06:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c10:	2302      	movs	r3, #2
 8003c12:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003c16:	2302      	movs	r3, #2
 8003c18:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  RCC_OscInitStruct.PLL.PLLM = 2;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  RCC_OscInitStruct.PLL.PLLN = 64;
 8003c22:	2340      	movs	r3, #64	; 0x40
 8003c24:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  RCC_OscInitStruct.PLL.PLLP = 2;
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
  RCC_OscInitStruct.PLL.PLLQ = 10;
 8003c2e:	230a      	movs	r3, #10
 8003c30:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8003c34:	2302      	movs	r3, #2
 8003c36:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8003c40:	2300      	movs	r3, #0
 8003c42:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003c46:	2300      	movs	r3, #0
 8003c48:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c4c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003c50:	4618      	mov	r0, r3
 8003c52:	f006 f999 	bl	8009f88 <HAL_RCC_OscConfig>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d001      	beq.n	8003c60 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8003c5c:	f000 fbe4 	bl	8004428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c60:	233f      	movs	r3, #63	; 0x3f
 8003c62:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c66:	2303      	movs	r3, #3
 8003c68:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8003c72:	2308      	movs	r3, #8
 8003c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8003c78:	2340      	movs	r3, #64	; 0x40
 8003c7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8003c7e:	2340      	movs	r3, #64	; 0x40
 8003c80:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8003c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003c92:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8003c96:	2102      	movs	r1, #2
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f006 fd85 	bl	800a7a8 <HAL_RCC_ClockConfig>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d001      	beq.n	8003ca8 <SystemClock_Config+0x158>
  {
    Error_Handler();
 8003ca4:	f000 fbc0 	bl	8004428 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC|RCC_PERIPHCLK_USART3
 8003ca8:	f107 0308 	add.w	r3, r7, #8
 8003cac:	4a2c      	ldr	r2, [pc, #176]	; (8003d60 <SystemClock_Config+0x210>)
 8003cae:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_FDCAN|RCC_PERIPHCLK_UART8
                              |RCC_PERIPHCLK_SPI1|RCC_PERIPHCLK_SDMMC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8003cb0:	f107 0308 	add.w	r3, r7, #8
 8003cb4:	2202      	movs	r2, #2
 8003cb6:	605a      	str	r2, [r3, #4]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8003cb8:	f107 0308 	add.w	r3, r7, #8
 8003cbc:	220c      	movs	r2, #12
 8003cbe:	609a      	str	r2, [r3, #8]
  PeriphClkInitStruct.PLL2.PLL2P = 3;
 8003cc0:	f107 0308 	add.w	r3, r7, #8
 8003cc4:	2203      	movs	r2, #3
 8003cc6:	60da      	str	r2, [r3, #12]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003cc8:	f107 0308 	add.w	r3, r7, #8
 8003ccc:	2202      	movs	r2, #2
 8003cce:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLL2.PLL2R = 3;
 8003cd0:	f107 0308 	add.w	r3, r7, #8
 8003cd4:	2203      	movs	r2, #3
 8003cd6:	615a      	str	r2, [r3, #20]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003cd8:	f107 0308 	add.w	r3, r7, #8
 8003cdc:	22c0      	movs	r2, #192	; 0xc0
 8003cde:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003ce0:	f107 0308 	add.w	r3, r7, #8
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	61da      	str	r2, [r3, #28]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003ce8:	f107 0308 	add.w	r3, r7, #8
 8003cec:	2200      	movs	r2, #0
 8003cee:	621a      	str	r2, [r3, #32]
  PeriphClkInitStruct.SdmmcClockSelection = RCC_SDMMCCLKSOURCE_PLL2;
 8003cf0:	f107 0308 	add.w	r3, r7, #8
 8003cf4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003cf8:	64da      	str	r2, [r3, #76]	; 0x4c
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8003cfa:	f107 0308 	add.w	r3, r7, #8
 8003cfe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c
  PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8003d04:	f107 0308 	add.w	r3, r7, #8
 8003d08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d0c:	66da      	str	r2, [r3, #108]	; 0x6c
  PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003d0e:	f107 0308 	add.w	r3, r7, #8
 8003d12:	2200      	movs	r2, #0
 8003d14:	675a      	str	r2, [r3, #116]	; 0x74
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8003d16:	f107 0308 	add.w	r3, r7, #8
 8003d1a:	f44f 1240 	mov.w	r2, #3145728	; 0x300000
 8003d1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003d22:	f107 0308 	add.w	r3, r7, #8
 8003d26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d2a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003d2e:	f107 0308 	add.w	r3, r7, #8
 8003d32:	4618      	mov	r0, r3
 8003d34:	f007 f8e8 	bl	800af08 <HAL_RCCEx_PeriphCLKConfig>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d001      	beq.n	8003d42 <SystemClock_Config+0x1f2>
  {
    Error_Handler();
 8003d3e:	f000 fb73 	bl	8004428 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003d42:	f006 fee7 	bl	800ab14 <HAL_RCC_EnableCSS>
  /** Enable USB Voltage detector
  */
  HAL_PWREx_EnableUSBVoltageDetector();
 8003d46:	f006 f8cb 	bl	8009ee0 <HAL_PWREx_EnableUSBVoltageDetector>
}
 8003d4a:	bf00      	nop
 8003d4c:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8003d50:	46bd      	mov	sp, r7
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	58000400 	.word	0x58000400
 8003d58:	58024800 	.word	0x58024800
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	00459002 	.word	0x00459002

08003d64 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8003d68:	4b2f      	ldr	r3, [pc, #188]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d6a:	4a30      	ldr	r2, [pc, #192]	; (8003e2c <MX_FDCAN1_Init+0xc8>)
 8003d6c:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d70:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003d74:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8003d76:	4b2c      	ldr	r3, [pc, #176]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8003d7c:	4b2a      	ldr	r3, [pc, #168]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8003d82:	4b29      	ldr	r3, [pc, #164]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d84:	2200      	movs	r2, #0
 8003d86:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8003d88:	4b27      	ldr	r3, [pc, #156]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8003d8e:	4b26      	ldr	r3, [pc, #152]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d90:	2201      	movs	r2, #1
 8003d92:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 23;
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d96:	2217      	movs	r2, #23
 8003d98:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 56;
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003d9c:	2238      	movs	r2, #56	; 0x38
 8003d9e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 23;
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003da2:	2217      	movs	r2, #23
 8003da4:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8003da6:	4b20      	ldr	r3, [pc, #128]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003da8:	2201      	movs	r2, #1
 8003daa:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 5;
 8003dac:	4b1e      	ldr	r3, [pc, #120]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dae:	2205      	movs	r2, #5
 8003db0:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 10;
 8003db2:	4b1d      	ldr	r3, [pc, #116]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003db4:	220a      	movs	r2, #10
 8003db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 5;
 8003db8:	4b1b      	ldr	r3, [pc, #108]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dba:	2205      	movs	r2, #5
 8003dbc:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8003dbe:	4b1a      	ldr	r3, [pc, #104]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 2;
 8003dc4:	4b18      	ldr	r3, [pc, #96]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 2;
 8003dca:	4b17      	ldr	r3, [pc, #92]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dcc:	2202      	movs	r2, #2
 8003dce:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8003dd0:	4b15      	ldr	r3, [pc, #84]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dd2:	2240      	movs	r2, #64	; 0x40
 8003dd4:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_64;
 8003dd6:	4b14      	ldr	r3, [pc, #80]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dd8:	2212      	movs	r2, #18
 8003dda:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 8003ddc:	4b12      	ldr	r3, [pc, #72]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dde:	2200      	movs	r2, #0
 8003de0:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003de2:	4b11      	ldr	r3, [pc, #68]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003de4:	2204      	movs	r2, #4
 8003de6:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 8003de8:	4b0f      	ldr	r3, [pc, #60]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003dee:	4b0e      	ldr	r3, [pc, #56]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003df0:	2204      	movs	r2, #4
 8003df2:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8003df4:	4b0c      	ldr	r3, [pc, #48]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 0;
 8003e00:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003e02:	2200      	movs	r2, #0
 8003e04:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003e06:	4b08      	ldr	r3, [pc, #32]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003e0e:	2204      	movs	r2, #4
 8003e10:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8003e12:	4805      	ldr	r0, [pc, #20]	; (8003e28 <MX_FDCAN1_Init+0xc4>)
 8003e14:	f003 fa12 	bl	800723c <HAL_FDCAN_Init>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <MX_FDCAN1_Init+0xbe>
  {
    Error_Handler();
 8003e1e:	f000 fb03 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8003e22:	bf00      	nop
 8003e24:	bd80      	pop	{r7, pc}
 8003e26:	bf00      	nop
 8003e28:	240447b0 	.word	0x240447b0
 8003e2c:	4000a000 	.word	0x4000a000

08003e30 <MX_FDCAN2_Init>:
  * @brief FDCAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN2_Init(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN2_Init 0 */

  /* USER CODE BEGIN FDCAN2_Init 1 */

  /* USER CODE END FDCAN2_Init 1 */
  hfdcan2.Instance = FDCAN2;
 8003e34:	4b2e      	ldr	r3, [pc, #184]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e36:	4a2f      	ldr	r2, [pc, #188]	; (8003ef4 <MX_FDCAN2_Init+0xc4>)
 8003e38:	601a      	str	r2, [r3, #0]
  hfdcan2.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8003e3a:	4b2d      	ldr	r3, [pc, #180]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	609a      	str	r2, [r3, #8]
  hfdcan2.Init.Mode = FDCAN_MODE_NORMAL;
 8003e40:	4b2b      	ldr	r3, [pc, #172]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	60da      	str	r2, [r3, #12]
  hfdcan2.Init.AutoRetransmission = DISABLE;
 8003e46:	4b2a      	ldr	r3, [pc, #168]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	741a      	strb	r2, [r3, #16]
  hfdcan2.Init.TransmitPause = DISABLE;
 8003e4c:	4b28      	ldr	r3, [pc, #160]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	745a      	strb	r2, [r3, #17]
  hfdcan2.Init.ProtocolException = DISABLE;
 8003e52:	4b27      	ldr	r3, [pc, #156]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	749a      	strb	r2, [r3, #18]
  hfdcan2.Init.NominalPrescaler = 1;
 8003e58:	4b25      	ldr	r3, [pc, #148]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	615a      	str	r2, [r3, #20]
  hfdcan2.Init.NominalSyncJumpWidth = 1;
 8003e5e:	4b24      	ldr	r3, [pc, #144]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e60:	2201      	movs	r2, #1
 8003e62:	619a      	str	r2, [r3, #24]
  hfdcan2.Init.NominalTimeSeg1 = 2;
 8003e64:	4b22      	ldr	r3, [pc, #136]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e66:	2202      	movs	r2, #2
 8003e68:	61da      	str	r2, [r3, #28]
  hfdcan2.Init.NominalTimeSeg2 = 2;
 8003e6a:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e6c:	2202      	movs	r2, #2
 8003e6e:	621a      	str	r2, [r3, #32]
  hfdcan2.Init.DataPrescaler = 1;
 8003e70:	4b1f      	ldr	r3, [pc, #124]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e72:	2201      	movs	r2, #1
 8003e74:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan2.Init.DataSyncJumpWidth = 1;
 8003e76:	4b1e      	ldr	r3, [pc, #120]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e78:	2201      	movs	r2, #1
 8003e7a:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan2.Init.DataTimeSeg1 = 1;
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e7e:	2201      	movs	r2, #1
 8003e80:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan2.Init.DataTimeSeg2 = 1;
 8003e82:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e84:	2201      	movs	r2, #1
 8003e86:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan2.Init.MessageRAMOffset = 0;
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan2.Init.StdFiltersNbr = 0;
 8003e8e:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e90:	2200      	movs	r2, #0
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan2.Init.ExtFiltersNbr = 0;
 8003e94:	4b16      	ldr	r3, [pc, #88]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan2.Init.RxFifo0ElmtsNbr = 0;
 8003e9a:	4b15      	ldr	r3, [pc, #84]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan2.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ea2:	2204      	movs	r2, #4
 8003ea4:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan2.Init.RxFifo1ElmtsNbr = 0;
 8003ea6:	4b12      	ldr	r3, [pc, #72]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan2.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8003eac:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003eae:	2204      	movs	r2, #4
 8003eb0:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan2.Init.RxBuffersNbr = 0;
 8003eb2:	4b0f      	ldr	r3, [pc, #60]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan2.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003eba:	2204      	movs	r2, #4
 8003ebc:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan2.Init.TxEventsNbr = 0;
 8003ebe:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan2.Init.TxBuffersNbr = 0;
 8003ec4:	4b0a      	ldr	r3, [pc, #40]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan2.Init.TxFifoQueueElmtsNbr = 0;
 8003eca:	4b09      	ldr	r3, [pc, #36]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ecc:	2200      	movs	r2, #0
 8003ece:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan2.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8003ed0:	4b07      	ldr	r3, [pc, #28]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan2.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8003ed6:	4b06      	ldr	r3, [pc, #24]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ed8:	2204      	movs	r2, #4
 8003eda:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan2) != HAL_OK)
 8003edc:	4804      	ldr	r0, [pc, #16]	; (8003ef0 <MX_FDCAN2_Init+0xc0>)
 8003ede:	f003 f9ad 	bl	800723c <HAL_FDCAN_Init>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <MX_FDCAN2_Init+0xbc>
  {
    Error_Handler();
 8003ee8:	f000 fa9e 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN2_Init 2 */

  /* USER CODE END FDCAN2_Init 2 */

}
 8003eec:	bf00      	nop
 8003eee:	bd80      	pop	{r7, pc}
 8003ef0:	24044964 	.word	0x24044964
 8003ef4:	4000a400 	.word	0x4000a400

08003ef8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003efc:	4b11      	ldr	r3, [pc, #68]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <MX_RTC_Init+0x50>)
 8003f00:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003f02:	4b10      	ldr	r3, [pc, #64]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f04:	2200      	movs	r2, #0
 8003f06:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 1;
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 16388;
 8003f0e:	4b0d      	ldr	r3, [pc, #52]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f10:	f244 0204 	movw	r2, #16388	; 0x4004
 8003f14:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8003f1c:	4b09      	ldr	r3, [pc, #36]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f1e:	2200      	movs	r2, #0
 8003f20:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003f22:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f24:	2200      	movs	r2, #0
 8003f26:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	615a      	str	r2, [r3, #20]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003f2e:	4805      	ldr	r0, [pc, #20]	; (8003f44 <MX_RTC_Init+0x4c>)
 8003f30:	f008 feae 	bl	800cc90 <HAL_RTC_Init>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d001      	beq.n	8003f3e <MX_RTC_Init+0x46>
  {
    Error_Handler();
 8003f3a:	f000 fa75 	bl	8004428 <Error_Handler>

  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003f3e:	bf00      	nop
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	2404478c 	.word	0x2404478c
 8003f48:	58004000 	.word	0x58004000

08003f4c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8003f50:	4b0d      	ldr	r3, [pc, #52]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f52:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <MX_SDMMC1_SD_Init+0x40>)
 8003f54:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8003f5c:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f5e:	2200      	movs	r2, #0
 8003f60:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 8003f62:	4b09      	ldr	r3, [pc, #36]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f68:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8003f6a:	4b07      	ldr	r3, [pc, #28]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f70:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 8003f72:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	615a      	str	r2, [r3, #20]
  hsd1.Init.TranceiverPresent = SDMMC_TRANSCEIVER_NOT_PRESENT;
 8003f78:	4b03      	ldr	r3, [pc, #12]	; (8003f88 <MX_SDMMC1_SD_Init+0x3c>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 8003f7e:	bf00      	nop
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr
 8003f88:	2404470c 	.word	0x2404470c
 8003f8c:	52007000 	.word	0x52007000

08003f90 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f94:	4b27      	ldr	r3, [pc, #156]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003f96:	4a28      	ldr	r2, [pc, #160]	; (8004038 <MX_SPI1_Init+0xa8>)
 8003f98:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f9a:	4b26      	ldr	r3, [pc, #152]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003f9c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8003fa0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003fa2:	4b24      	ldr	r3, [pc, #144]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003fa8:	4b22      	ldr	r3, [pc, #136]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003faa:	2207      	movs	r2, #7
 8003fac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003fb4:	4b1f      	ldr	r3, [pc, #124]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003fba:	4b1e      	ldr	r3, [pc, #120]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fbc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003fc0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003fc2:	4b1c      	ldr	r3, [pc, #112]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fc4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003fc8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003fd0:	4b18      	ldr	r3, [pc, #96]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003fd6:	4b17      	ldr	r3, [pc, #92]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8003fdc:	4b15      	ldr	r3, [pc, #84]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003fe2:	4b14      	ldr	r3, [pc, #80]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003fe8:	635a      	str	r2, [r3, #52]	; 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003fec:	2200      	movs	r2, #0
 8003fee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8003ff0:	4b10      	ldr	r3, [pc, #64]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ff6:	4b0f      	ldr	r3, [pc, #60]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8003ffc:	4b0d      	ldr	r3, [pc, #52]	; (8004034 <MX_SPI1_Init+0xa4>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	645a      	str	r2, [r3, #68]	; 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <MX_SPI1_Init+0xa4>)
 8004004:	2200      	movs	r2, #0
 8004006:	649a      	str	r2, [r3, #72]	; 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <MX_SPI1_Init+0xa4>)
 800400a:	2200      	movs	r2, #0
 800400c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800400e:	4b09      	ldr	r3, [pc, #36]	; (8004034 <MX_SPI1_Init+0xa4>)
 8004010:	2200      	movs	r2, #0
 8004012:	651a      	str	r2, [r3, #80]	; 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004014:	4b07      	ldr	r3, [pc, #28]	; (8004034 <MX_SPI1_Init+0xa4>)
 8004016:	2200      	movs	r2, #0
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 800401a:	4b06      	ldr	r3, [pc, #24]	; (8004034 <MX_SPI1_Init+0xa4>)
 800401c:	2200      	movs	r2, #0
 800401e:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004020:	4804      	ldr	r0, [pc, #16]	; (8004034 <MX_SPI1_Init+0xa4>)
 8004022:	f00b f8cf 	bl	800f1c4 <HAL_SPI_Init>
 8004026:	4603      	mov	r3, r0
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 800402c:	f000 f9fc 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8004030:	bf00      	nop
 8004032:	bd80      	pop	{r7, pc}
 8004034:	240448dc 	.word	0x240448dc
 8004038:	40013000 	.word	0x40013000

0800403c <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8004040:	4b22      	ldr	r3, [pc, #136]	; (80040cc <MX_UART8_Init+0x90>)
 8004042:	4a23      	ldr	r2, [pc, #140]	; (80040d0 <MX_UART8_Init+0x94>)
 8004044:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8004046:	4b21      	ldr	r3, [pc, #132]	; (80040cc <MX_UART8_Init+0x90>)
 8004048:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800404c:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 800404e:	4b1f      	ldr	r3, [pc, #124]	; (80040cc <MX_UART8_Init+0x90>)
 8004050:	2200      	movs	r2, #0
 8004052:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8004054:	4b1d      	ldr	r3, [pc, #116]	; (80040cc <MX_UART8_Init+0x90>)
 8004056:	2200      	movs	r2, #0
 8004058:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 800405a:	4b1c      	ldr	r3, [pc, #112]	; (80040cc <MX_UART8_Init+0x90>)
 800405c:	2200      	movs	r2, #0
 800405e:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8004060:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <MX_UART8_Init+0x90>)
 8004062:	220c      	movs	r2, #12
 8004064:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004066:	4b19      	ldr	r3, [pc, #100]	; (80040cc <MX_UART8_Init+0x90>)
 8004068:	2200      	movs	r2, #0
 800406a:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <MX_UART8_Init+0x90>)
 800406e:	2200      	movs	r2, #0
 8004070:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004072:	4b16      	ldr	r3, [pc, #88]	; (80040cc <MX_UART8_Init+0x90>)
 8004074:	2200      	movs	r2, #0
 8004076:	621a      	str	r2, [r3, #32]
  huart8.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004078:	4b14      	ldr	r3, [pc, #80]	; (80040cc <MX_UART8_Init+0x90>)
 800407a:	2200      	movs	r2, #0
 800407c:	625a      	str	r2, [r3, #36]	; 0x24
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800407e:	4b13      	ldr	r3, [pc, #76]	; (80040cc <MX_UART8_Init+0x90>)
 8004080:	2200      	movs	r2, #0
 8004082:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8004084:	4811      	ldr	r0, [pc, #68]	; (80040cc <MX_UART8_Init+0x90>)
 8004086:	f00c f94e 	bl	8010326 <HAL_UART_Init>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <MX_UART8_Init+0x58>
  {
    Error_Handler();
 8004090:	f000 f9ca 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart8, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004094:	2100      	movs	r1, #0
 8004096:	480d      	ldr	r0, [pc, #52]	; (80040cc <MX_UART8_Init+0x90>)
 8004098:	f00d fad4 	bl	8011644 <HAL_UARTEx_SetTxFifoThreshold>
 800409c:	4603      	mov	r3, r0
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <MX_UART8_Init+0x6a>
  {
    Error_Handler();
 80040a2:	f000 f9c1 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart8, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80040a6:	2100      	movs	r1, #0
 80040a8:	4808      	ldr	r0, [pc, #32]	; (80040cc <MX_UART8_Init+0x90>)
 80040aa:	f00d fb09 	bl	80116c0 <HAL_UARTEx_SetRxFifoThreshold>
 80040ae:	4603      	mov	r3, r0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d001      	beq.n	80040b8 <MX_UART8_Init+0x7c>
  {
    Error_Handler();
 80040b4:	f000 f9b8 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart8) != HAL_OK)
 80040b8:	4804      	ldr	r0, [pc, #16]	; (80040cc <MX_UART8_Init+0x90>)
 80040ba:	f00d fa8a 	bl	80115d2 <HAL_UARTEx_DisableFifoMode>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <MX_UART8_Init+0x8c>
  {
    Error_Handler();
 80040c4:	f000 f9b0 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 80040c8:	bf00      	nop
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	24044850 	.word	0x24044850
 80040d0:	40007c00 	.word	0x40007c00

080040d4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80040d8:	4b22      	ldr	r3, [pc, #136]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040da:	4a23      	ldr	r2, [pc, #140]	; (8004168 <MX_USART3_UART_Init+0x94>)
 80040dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80040de:	4b21      	ldr	r3, [pc, #132]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040e0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80040e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80040ec:	4b1d      	ldr	r3, [pc, #116]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80040f2:	4b1c      	ldr	r3, [pc, #112]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040f4:	2200      	movs	r2, #0
 80040f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80040f8:	4b1a      	ldr	r3, [pc, #104]	; (8004164 <MX_USART3_UART_Init+0x90>)
 80040fa:	220c      	movs	r2, #12
 80040fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040fe:	4b19      	ldr	r3, [pc, #100]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004100:	2200      	movs	r2, #0
 8004102:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004104:	4b17      	ldr	r3, [pc, #92]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004106:	2200      	movs	r2, #0
 8004108:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800410a:	4b16      	ldr	r3, [pc, #88]	; (8004164 <MX_USART3_UART_Init+0x90>)
 800410c:	2200      	movs	r2, #0
 800410e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004112:	2200      	movs	r2, #0
 8004114:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004116:	4b13      	ldr	r3, [pc, #76]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004118:	2200      	movs	r2, #0
 800411a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800411c:	4811      	ldr	r0, [pc, #68]	; (8004164 <MX_USART3_UART_Init+0x90>)
 800411e:	f00c f902 	bl	8010326 <HAL_UART_Init>
 8004122:	4603      	mov	r3, r0
 8004124:	2b00      	cmp	r3, #0
 8004126:	d001      	beq.n	800412c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8004128:	f000 f97e 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800412c:	2100      	movs	r1, #0
 800412e:	480d      	ldr	r0, [pc, #52]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004130:	f00d fa88 	bl	8011644 <HAL_UARTEx_SetTxFifoThreshold>
 8004134:	4603      	mov	r3, r0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800413a:	f000 f975 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800413e:	2100      	movs	r1, #0
 8004140:	4808      	ldr	r0, [pc, #32]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004142:	f00d fabd 	bl	80116c0 <HAL_UARTEx_SetRxFifoThreshold>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800414c:	f000 f96c 	bl	8004428 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004150:	4804      	ldr	r0, [pc, #16]	; (8004164 <MX_USART3_UART_Init+0x90>)
 8004152:	f00d fa3e 	bl	80115d2 <HAL_UARTEx_DisableFifoMode>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800415c:	f000 f964 	bl	8004428 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004160:	bf00      	nop
 8004162:	bd80      	pop	{r7, pc}
 8004164:	24044660 	.word	0x24044660
 8004168:	40004800 	.word	0x40004800

0800416c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b082      	sub	sp, #8
 8004170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004172:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <MX_DMA_Init+0x3c>)
 8004174:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004178:	4a0b      	ldr	r2, [pc, #44]	; (80041a8 <MX_DMA_Init+0x3c>)
 800417a:	f043 0301 	orr.w	r3, r3, #1
 800417e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004182:	4b09      	ldr	r3, [pc, #36]	; (80041a8 <MX_DMA_Init+0x3c>)
 8004184:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004188:	f003 0301 	and.w	r3, r3, #1
 800418c:	607b      	str	r3, [r7, #4]
 800418e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004190:	2200      	movs	r2, #0
 8004192:	2100      	movs	r1, #0
 8004194:	200c      	movs	r0, #12
 8004196:	f000 ff44 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800419a:	200c      	movs	r0, #12
 800419c:	f000 ff5b 	bl	8005056 <HAL_NVIC_EnableIRQ>

}
 80041a0:	bf00      	nop
 80041a2:	3708      	adds	r7, #8
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}
 80041a8:	58024400 	.word	0x58024400

080041ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b08c      	sub	sp, #48	; 0x30
 80041b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b2:	f107 031c 	add.w	r3, r7, #28
 80041b6:	2200      	movs	r2, #0
 80041b8:	601a      	str	r2, [r3, #0]
 80041ba:	605a      	str	r2, [r3, #4]
 80041bc:	609a      	str	r2, [r3, #8]
 80041be:	60da      	str	r2, [r3, #12]
 80041c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80041c2:	4b6d      	ldr	r3, [pc, #436]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041c8:	4a6b      	ldr	r2, [pc, #428]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041ca:	f043 0310 	orr.w	r3, r3, #16
 80041ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041d2:	4b69      	ldr	r3, [pc, #420]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041d8:	f003 0310 	and.w	r3, r3, #16
 80041dc:	61bb      	str	r3, [r7, #24]
 80041de:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80041e0:	4b65      	ldr	r3, [pc, #404]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041e6:	4a64      	ldr	r2, [pc, #400]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041e8:	f043 0304 	orr.w	r3, r3, #4
 80041ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80041f0:	4b61      	ldr	r3, [pc, #388]	; (8004378 <MX_GPIO_Init+0x1cc>)
 80041f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80041f6:	f003 0304 	and.w	r3, r3, #4
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80041fe:	4b5e      	ldr	r3, [pc, #376]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004204:	4a5c      	ldr	r2, [pc, #368]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800420a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800420e:	4b5a      	ldr	r3, [pc, #360]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004210:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004214:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004218:	613b      	str	r3, [r7, #16]
 800421a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800421c:	4b56      	ldr	r3, [pc, #344]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800421e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004222:	4a55      	ldr	r2, [pc, #340]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004224:	f043 0301 	orr.w	r3, r3, #1
 8004228:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800422c:	4b52      	ldr	r3, [pc, #328]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800422e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004232:	f003 0301 	and.w	r3, r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
 8004238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800423a:	4b4f      	ldr	r3, [pc, #316]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004240:	4a4d      	ldr	r2, [pc, #308]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004242:	f043 0302 	orr.w	r3, r3, #2
 8004246:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800424a:	4b4b      	ldr	r3, [pc, #300]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800424c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004250:	f003 0302 	and.w	r3, r3, #2
 8004254:	60bb      	str	r3, [r7, #8]
 8004256:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004258:	4b47      	ldr	r3, [pc, #284]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800425a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800425e:	4a46      	ldr	r2, [pc, #280]	; (8004378 <MX_GPIO_Init+0x1cc>)
 8004260:	f043 0308 	orr.w	r3, r3, #8
 8004264:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004268:	4b43      	ldr	r3, [pc, #268]	; (8004378 <MX_GPIO_Init+0x1cc>)
 800426a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800426e:	f003 0308 	and.w	r3, r3, #8
 8004272:	607b      	str	r3, [r7, #4]
 8004274:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, RS_485_TX_EN_Pin|RS_485_RX_EN_Pin, GPIO_PIN_RESET);
 8004276:	2200      	movs	r2, #0
 8004278:	210c      	movs	r1, #12
 800427a:	4840      	ldr	r0, [pc, #256]	; (800437c <MX_GPIO_Init+0x1d0>)
 800427c:	f004 fae2 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TELE_CE_Pin|TELE_CS_Pin, GPIO_PIN_RESET);
 8004280:	2200      	movs	r2, #0
 8004282:	2103      	movs	r1, #3
 8004284:	483e      	ldr	r0, [pc, #248]	; (8004380 <MX_GPIO_Init+0x1d4>)
 8004286:	f004 fadd 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800428a:	2200      	movs	r2, #0
 800428c:	2101      	movs	r1, #1
 800428e:	483d      	ldr	r0, [pc, #244]	; (8004384 <MX_GPIO_Init+0x1d8>)
 8004290:	f004 fad8 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPS_RST_GPIO_Port, GPS_RST_Pin, GPIO_PIN_SET);
 8004294:	2201      	movs	r2, #1
 8004296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800429a:	483b      	ldr	r0, [pc, #236]	; (8004388 <MX_GPIO_Init+0x1dc>)
 800429c:	f004 fad2 	bl	8008844 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RS_485_TX_EN_Pin RS_485_RX_EN_Pin */
  GPIO_InitStruct.Pin = RS_485_TX_EN_Pin|RS_485_RX_EN_Pin;
 80042a0:	230c      	movs	r3, #12
 80042a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042a4:	2301      	movs	r3, #1
 80042a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80042b0:	f107 031c 	add.w	r3, r7, #28
 80042b4:	4619      	mov	r1, r3
 80042b6:	4831      	ldr	r0, [pc, #196]	; (800437c <MX_GPIO_Init+0x1d0>)
 80042b8:	f004 f8fc 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : TELE_CE_Pin TELE_CS_Pin */
  GPIO_InitStruct.Pin = TELE_CE_Pin|TELE_CS_Pin;
 80042bc:	2303      	movs	r3, #3
 80042be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042c0:	2301      	movs	r3, #1
 80042c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	2300      	movs	r3, #0
 80042ca:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042cc:	f107 031c 	add.w	r3, r7, #28
 80042d0:	4619      	mov	r1, r3
 80042d2:	482b      	ldr	r0, [pc, #172]	; (8004380 <MX_GPIO_Init+0x1d4>)
 80042d4:	f004 f8ee 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : TELE_IRQ_Pin */
  GPIO_InitStruct.Pin = TELE_IRQ_Pin;
 80042d8:	2304      	movs	r3, #4
 80042da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80042dc:	4b2b      	ldr	r3, [pc, #172]	; (800438c <MX_GPIO_Init+0x1e0>)
 80042de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e0:	2300      	movs	r3, #0
 80042e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(TELE_IRQ_GPIO_Port, &GPIO_InitStruct);
 80042e4:	f107 031c 	add.w	r3, r7, #28
 80042e8:	4619      	mov	r1, r3
 80042ea:	4825      	ldr	r0, [pc, #148]	; (8004380 <MX_GPIO_Init+0x1d4>)
 80042ec:	f004 f8e2 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80042f0:	2301      	movs	r3, #1
 80042f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80042f4:	2301      	movs	r3, #1
 80042f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f8:	2300      	movs	r3, #0
 80042fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042fc:	2300      	movs	r3, #0
 80042fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8004300:	f107 031c 	add.w	r3, r7, #28
 8004304:	4619      	mov	r1, r3
 8004306:	481f      	ldr	r0, [pc, #124]	; (8004384 <MX_GPIO_Init+0x1d8>)
 8004308:	f004 f8d4 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_INT_Pin */
  GPIO_InitStruct.Pin = BTN_INT_Pin;
 800430c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004312:	4b1e      	ldr	r3, [pc, #120]	; (800438c <MX_GPIO_Init+0x1e0>)
 8004314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004316:	2300      	movs	r3, #0
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_INT_GPIO_Port, &GPIO_InitStruct);
 800431a:	f107 031c 	add.w	r3, r7, #28
 800431e:	4619      	mov	r1, r3
 8004320:	4816      	ldr	r0, [pc, #88]	; (800437c <MX_GPIO_Init+0x1d0>)
 8004322:	f004 f8c7 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_RST_Pin */
  GPIO_InitStruct.Pin = GPS_RST_Pin;
 8004326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800432c:	2301      	movs	r3, #1
 800432e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004334:	2300      	movs	r3, #0
 8004336:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPS_RST_GPIO_Port, &GPIO_InitStruct);
 8004338:	f107 031c 	add.w	r3, r7, #28
 800433c:	4619      	mov	r1, r3
 800433e:	4812      	ldr	r0, [pc, #72]	; (8004388 <MX_GPIO_Init+0x1dc>)
 8004340:	f004 f8b8 	bl	80084b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CARD_DET_Pin */
  GPIO_InitStruct.Pin = CARD_DET_Pin;
 8004344:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800434a:	2300      	movs	r3, #0
 800434c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(CARD_DET_GPIO_Port, &GPIO_InitStruct);
 8004352:	f107 031c 	add.w	r3, r7, #28
 8004356:	4619      	mov	r1, r3
 8004358:	4809      	ldr	r0, [pc, #36]	; (8004380 <MX_GPIO_Init+0x1d4>)
 800435a:	f004 f8ab 	bl	80084b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800435e:	2200      	movs	r2, #0
 8004360:	2100      	movs	r1, #0
 8004362:	2017      	movs	r0, #23
 8004364:	f000 fe5d 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8004368:	2017      	movs	r0, #23
 800436a:	f000 fe74 	bl	8005056 <HAL_NVIC_EnableIRQ>

}
 800436e:	bf00      	nop
 8004370:	3730      	adds	r7, #48	; 0x30
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	58024400 	.word	0x58024400
 800437c:	58021000 	.word	0x58021000
 8004380:	58020000 	.word	0x58020000
 8004384:	58020400 	.word	0x58020400
 8004388:	58020c00 	.word	0x58020c00
 800438c:	11110000 	.word	0x11110000

08004390 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	80fb      	strh	r3, [r7, #6]

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

  RTC_TimeTypeDef sTime = {0};
 800439a:	f107 030c 	add.w	r3, r7, #12
 800439e:	2200      	movs	r2, #0
 80043a0:	601a      	str	r2, [r3, #0]
 80043a2:	605a      	str	r2, [r3, #4]
 80043a4:	609a      	str	r2, [r3, #8]
 80043a6:	60da      	str	r2, [r3, #12]
 80043a8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80043aa:	2300      	movs	r3, #0
 80043ac:	60bb      	str	r3, [r7, #8]
  sTime.Hours = 16;
 80043ae:	2310      	movs	r3, #16
 80043b0:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 8;
 80043b2:	2308      	movs	r3, #8
 80043b4:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 80043b6:	2300      	movs	r3, #0
 80043b8:	73bb      	strb	r3, [r7, #14]
    sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	61bb      	str	r3, [r7, #24]
    sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80043be:	2300      	movs	r3, #0
 80043c0:	61fb      	str	r3, [r7, #28]
    if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 80043c2:	f107 030c 	add.w	r3, r7, #12
 80043c6:	2200      	movs	r2, #0
 80043c8:	4619      	mov	r1, r3
 80043ca:	4810      	ldr	r0, [pc, #64]	; (800440c <HAL_GPIO_EXTI_Callback+0x7c>)
 80043cc:	f008 fcd8 	bl	800cd80 <HAL_RTC_SetTime>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d001      	beq.n	80043da <HAL_GPIO_EXTI_Callback+0x4a>
    {
      Error_Handler();
 80043d6:	f000 f827 	bl	8004428 <Error_Handler>
    }
    sDate.WeekDay = RTC_WEEKDAY_WEDNESDAY;
 80043da:	2303      	movs	r3, #3
 80043dc:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_MAY;
 80043de:	2305      	movs	r3, #5
 80043e0:	727b      	strb	r3, [r7, #9]
    sDate.Date = 19;
 80043e2:	2313      	movs	r3, #19
 80043e4:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 21;
 80043e6:	2315      	movs	r3, #21
 80043e8:	72fb      	strb	r3, [r7, #11]

    if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80043ea:	f107 0308 	add.w	r3, r7, #8
 80043ee:	2200      	movs	r2, #0
 80043f0:	4619      	mov	r1, r3
 80043f2:	4806      	ldr	r0, [pc, #24]	; (800440c <HAL_GPIO_EXTI_Callback+0x7c>)
 80043f4:	f008 fdbe 	bl	800cf74 <HAL_RTC_SetDate>
 80043f8:	4603      	mov	r3, r0
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d001      	beq.n	8004402 <HAL_GPIO_EXTI_Callback+0x72>
    {
      Error_Handler();
 80043fe:	f000 f813 	bl	8004428 <Error_Handler>
    }

}
 8004402:	bf00      	nop
 8004404:	3720      	adds	r7, #32
 8004406:	46bd      	mov	sp, r7
 8004408:	bd80      	pop	{r7, pc}
 800440a:	bf00      	nop
 800440c:	2404478c 	.word	0x2404478c

08004410 <HAL_PWR_PVDCallback>:
void HAL_PWR_PVDCallback (void)
{
 8004410:	b480      	push	{r7}
 8004412:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback can be implemented in the user file
  */
	//HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
	end_flag = 0;
 8004414:	4b03      	ldr	r3, [pc, #12]	; (8004424 <HAL_PWR_PVDCallback+0x14>)
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
}
 800441a:	bf00      	nop
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	24000008 	.word	0x24000008

08004428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800442c:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Error Handler\n");
 800442e:	4802      	ldr	r0, [pc, #8]	; (8004438 <Error_Handler+0x10>)
 8004430:	f016 fb52 	bl	801aad8 <puts>
 8004434:	e7fb      	b.n	800442e <Error_Handler+0x6>
 8004436:	bf00      	nop
 8004438:	0801c44c 	.word	0x0801c44c

0800443c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004444:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004448:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800444c:	f003 0301 	and.w	r3, r3, #1
 8004450:	2b00      	cmp	r3, #0
 8004452:	d013      	beq.n	800447c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8004454:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004458:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800445c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8004460:	2b00      	cmp	r3, #0
 8004462:	d00b      	beq.n	800447c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8004464:	e000      	b.n	8004468 <ITM_SendChar+0x2c>
    {
      __NOP();
 8004466:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8004468:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d0f9      	beq.n	8004466 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8004472:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	b2d2      	uxtb	r2, r2
 800447a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800447c:	687b      	ldr	r3, [r7, #4]
}
 800447e:	4618      	mov	r0, r3
 8004480:	370c      	adds	r7, #12
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <_write>:

#include <myprintf.h>
#include "main.h"

int _write(int file, char *ptr, int len)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b086      	sub	sp, #24
 800448e:	af00      	add	r7, sp, #0
 8004490:	60f8      	str	r0, [r7, #12]
 8004492:	60b9      	str	r1, [r7, #8]
 8004494:	607a      	str	r2, [r7, #4]
  int i=0;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]
 800449e:	e009      	b.n	80044b4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	1c5a      	adds	r2, r3, #1
 80044a4:	60ba      	str	r2, [r7, #8]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ffc7 	bl	800443c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	3301      	adds	r3, #1
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	dbf1      	blt.n	80044a0 <_write+0x16>
  return len;
 80044bc:	687b      	ldr	r3, [r7, #4]
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3718      	adds	r7, #24
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}
	...

080044c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	b084      	sub	sp, #16
 80044cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 80044ce:	f107 0308 	add.w	r3, r7, #8
 80044d2:	2200      	movs	r2, #0
 80044d4:	601a      	str	r2, [r3, #0]
 80044d6:	605a      	str	r2, [r3, #4]

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044d8:	4b13      	ldr	r3, [pc, #76]	; (8004528 <HAL_MspInit+0x60>)
 80044da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044de:	4a12      	ldr	r2, [pc, #72]	; (8004528 <HAL_MspInit+0x60>)
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_MspInit+0x60>)
 80044ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	607b      	str	r3, [r7, #4]
 80044f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_AVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_AVD_IRQn, 0, 0);
 80044f6:	2200      	movs	r2, #0
 80044f8:	2100      	movs	r1, #0
 80044fa:	2001      	movs	r0, #1
 80044fc:	f000 fd91 	bl	8005022 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_AVD_IRQn);
 8004500:	2001      	movs	r0, #1
 8004502:	f000 fda8 	bl	8005056 <HAL_NVIC_EnableIRQ>

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_6;
 8004506:	23c0      	movs	r3, #192	; 0xc0
 8004508:	60bb      	str	r3, [r7, #8]
  sConfigPVD.Mode = PWR_PVD_MODE_IT_RISING;
 800450a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800450e:	60fb      	str	r3, [r7, #12]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8004510:	f107 0308 	add.w	r3, r7, #8
 8004514:	4618      	mov	r0, r3
 8004516:	f005 fc1f 	bl	8009d58 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 800451a:	f005 fc97 	bl	8009e4c <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800451e:	bf00      	nop
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	58024400 	.word	0x58024400

0800452c <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b08c      	sub	sp, #48	; 0x30
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004534:	f107 031c 	add.w	r3, r7, #28
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	605a      	str	r2, [r3, #4]
 800453e:	609a      	str	r2, [r3, #8]
 8004540:	60da      	str	r2, [r3, #12]
 8004542:	611a      	str	r2, [r3, #16]
  if(hfdcan->Instance==FDCAN1)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a48      	ldr	r2, [pc, #288]	; (800466c <HAL_FDCAN_MspInit+0x140>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d14e      	bne.n	80045ec <HAL_FDCAN_MspInit+0xc0>
  {
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_FDCAN_CLK_ENABLED++;
 800454e:	4b48      	ldr	r3, [pc, #288]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	3301      	adds	r3, #1
 8004554:	4a46      	ldr	r2, [pc, #280]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 8004556:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004558:	4b45      	ldr	r3, [pc, #276]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d10e      	bne.n	800457e <HAL_FDCAN_MspInit+0x52>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004560:	4b44      	ldr	r3, [pc, #272]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004562:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004566:	4a43      	ldr	r2, [pc, #268]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004568:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800456c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004570:	4b40      	ldr	r3, [pc, #256]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004572:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8004576:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800457a:	61bb      	str	r3, [r7, #24]
 800457c:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800457e:	4b3d      	ldr	r3, [pc, #244]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004584:	4a3b      	ldr	r2, [pc, #236]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004586:	f043 0302 	orr.w	r3, r3, #2
 800458a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800458e:	4b39      	ldr	r3, [pc, #228]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004590:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	617b      	str	r3, [r7, #20]
 800459a:	697b      	ldr	r3, [r7, #20]
    /**FDCAN1 GPIO Configuration
    PB8     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800459c:	f44f 7340 	mov.w	r3, #768	; 0x300
 80045a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045a2:	2302      	movs	r3, #2
 80045a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a6:	2300      	movs	r3, #0
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045aa:	2303      	movs	r3, #3
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80045ae:	2309      	movs	r3, #9
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045b2:	f107 031c 	add.w	r3, r7, #28
 80045b6:	4619      	mov	r1, r3
 80045b8:	482f      	ldr	r0, [pc, #188]	; (8004678 <HAL_FDCAN_MspInit+0x14c>)
 80045ba:	f003 ff7b 	bl	80084b4 <HAL_GPIO_Init>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB8_FMP);
 80045be:	2040      	movs	r0, #64	; 0x40
 80045c0:	f004 f98e 	bl	80088e0 <HAL_I2CEx_EnableFastModePlus>

    HAL_I2CEx_EnableFastModePlus(SYSCFG_PMCR_I2C_PB9_FMP);
 80045c4:	2080      	movs	r0, #128	; 0x80
 80045c6:	f004 f98b 	bl	80088e0 <HAL_I2CEx_EnableFastModePlus>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80045ca:	2200      	movs	r2, #0
 80045cc:	2100      	movs	r1, #0
 80045ce:	2013      	movs	r0, #19
 80045d0:	f000 fd27 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80045d4:	2013      	movs	r0, #19
 80045d6:	f000 fd3e 	bl	8005056 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2100      	movs	r1, #0
 80045de:	2015      	movs	r0, #21
 80045e0:	f000 fd1f 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80045e4:	2015      	movs	r0, #21
 80045e6:	f000 fd36 	bl	8005056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN2_MspInit 1 */

  /* USER CODE END FDCAN2_MspInit 1 */
  }

}
 80045ea:	e03b      	b.n	8004664 <HAL_FDCAN_MspInit+0x138>
  else if(hfdcan->Instance==FDCAN2)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a22      	ldr	r2, [pc, #136]	; (800467c <HAL_FDCAN_MspInit+0x150>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d136      	bne.n	8004664 <HAL_FDCAN_MspInit+0x138>
    HAL_RCC_FDCAN_CLK_ENABLED++;
 80045f6:	4b1e      	ldr	r3, [pc, #120]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	3301      	adds	r3, #1
 80045fc:	4a1c      	ldr	r2, [pc, #112]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 80045fe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_FDCAN_CLK_ENABLED==1){
 8004600:	4b1b      	ldr	r3, [pc, #108]	; (8004670 <HAL_FDCAN_MspInit+0x144>)
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d10e      	bne.n	8004626 <HAL_FDCAN_MspInit+0xfa>
      __HAL_RCC_FDCAN_CLK_ENABLE();
 8004608:	4b1a      	ldr	r3, [pc, #104]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 800460a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800460e:	4a19      	ldr	r2, [pc, #100]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004610:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004614:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8004618:	4b16      	ldr	r3, [pc, #88]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 800461a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 800461e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004622:	613b      	str	r3, [r7, #16]
 8004624:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004626:	4b13      	ldr	r3, [pc, #76]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800462c:	4a11      	ldr	r2, [pc, #68]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 800462e:	f043 0302 	orr.w	r3, r3, #2
 8004632:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004636:	4b0f      	ldr	r3, [pc, #60]	; (8004674 <HAL_FDCAN_MspInit+0x148>)
 8004638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800463c:	f003 0302 	and.w	r3, r3, #2
 8004640:	60fb      	str	r3, [r7, #12]
 8004642:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004644:	2360      	movs	r3, #96	; 0x60
 8004646:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004648:	2302      	movs	r3, #2
 800464a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800464c:	2300      	movs	r3, #0
 800464e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004650:	2300      	movs	r3, #0
 8004652:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8004654:	2309      	movs	r3, #9
 8004656:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004658:	f107 031c 	add.w	r3, r7, #28
 800465c:	4619      	mov	r1, r3
 800465e:	4806      	ldr	r0, [pc, #24]	; (8004678 <HAL_FDCAN_MspInit+0x14c>)
 8004660:	f003 ff28 	bl	80084b4 <HAL_GPIO_Init>
}
 8004664:	bf00      	nop
 8004666:	3730      	adds	r7, #48	; 0x30
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}
 800466c:	4000a000 	.word	0x4000a000
 8004670:	240404bc 	.word	0x240404bc
 8004674:	58024400 	.word	0x58024400
 8004678:	58020400 	.word	0x58020400
 800467c:	4000a400 	.word	0x4000a400

08004680 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a07      	ldr	r2, [pc, #28]	; (80046ac <HAL_RTC_MspInit+0x2c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d105      	bne.n	800469e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004692:	4b07      	ldr	r3, [pc, #28]	; (80046b0 <HAL_RTC_MspInit+0x30>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	4a06      	ldr	r2, [pc, #24]	; (80046b0 <HAL_RTC_MspInit+0x30>)
 8004698:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800469c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800469e:	bf00      	nop
 80046a0:	370c      	adds	r7, #12
 80046a2:	46bd      	mov	sp, r7
 80046a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a8:	4770      	bx	lr
 80046aa:	bf00      	nop
 80046ac:	58004000 	.word	0x58004000
 80046b0:	58024400 	.word	0x58024400

080046b4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b08a      	sub	sp, #40	; 0x28
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046bc:	f107 0314 	add.w	r3, r7, #20
 80046c0:	2200      	movs	r2, #0
 80046c2:	601a      	str	r2, [r3, #0]
 80046c4:	605a      	str	r2, [r3, #4]
 80046c6:	609a      	str	r2, [r3, #8]
 80046c8:	60da      	str	r2, [r3, #12]
 80046ca:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC1)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a2e      	ldr	r2, [pc, #184]	; (800478c <HAL_SD_MspInit+0xd8>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d155      	bne.n	8004782 <HAL_SD_MspInit+0xce>
  {
  /* USER CODE BEGIN SDMMC1_MspInit 0 */

  /* USER CODE END SDMMC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_SD_MspInit+0xdc>)
 80046d8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80046dc:	4a2c      	ldr	r2, [pc, #176]	; (8004790 <HAL_SD_MspInit+0xdc>)
 80046de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046e2:	f8c2 30d4 	str.w	r3, [r2, #212]	; 0xd4
 80046e6:	4b2a      	ldr	r3, [pc, #168]	; (8004790 <HAL_SD_MspInit+0xdc>)
 80046e8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80046ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046f0:	613b      	str	r3, [r7, #16]
 80046f2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f4:	4b26      	ldr	r3, [pc, #152]	; (8004790 <HAL_SD_MspInit+0xdc>)
 80046f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80046fa:	4a25      	ldr	r2, [pc, #148]	; (8004790 <HAL_SD_MspInit+0xdc>)
 80046fc:	f043 0304 	orr.w	r3, r3, #4
 8004700:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004704:	4b22      	ldr	r3, [pc, #136]	; (8004790 <HAL_SD_MspInit+0xdc>)
 8004706:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800470a:	f003 0304 	and.w	r3, r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
 8004710:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004712:	4b1f      	ldr	r3, [pc, #124]	; (8004790 <HAL_SD_MspInit+0xdc>)
 8004714:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004718:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <HAL_SD_MspInit+0xdc>)
 800471a:	f043 0308 	orr.w	r3, r3, #8
 800471e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004722:	4b1b      	ldr	r3, [pc, #108]	; (8004790 <HAL_SD_MspInit+0xdc>)
 8004724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004728:	f003 0308 	and.w	r3, r3, #8
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDMMC1_D2
    PC11     ------> SDMMC1_D3
    PC12     ------> SDMMC1_CK
    PD2     ------> SDMMC1_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 8004730:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8004734:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004736:	2302      	movs	r3, #2
 8004738:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800473a:	2300      	movs	r3, #0
 800473c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800473e:	2303      	movs	r3, #3
 8004740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004742:	230c      	movs	r3, #12
 8004744:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004746:	f107 0314 	add.w	r3, r7, #20
 800474a:	4619      	mov	r1, r3
 800474c:	4811      	ldr	r0, [pc, #68]	; (8004794 <HAL_SD_MspInit+0xe0>)
 800474e:	f003 feb1 	bl	80084b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004752:	2304      	movs	r3, #4
 8004754:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004756:	2302      	movs	r3, #2
 8004758:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800475a:	2300      	movs	r3, #0
 800475c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475e:	2303      	movs	r3, #3
 8004760:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8004762:	230c      	movs	r3, #12
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004766:	f107 0314 	add.w	r3, r7, #20
 800476a:	4619      	mov	r1, r3
 800476c:	480a      	ldr	r0, [pc, #40]	; (8004798 <HAL_SD_MspInit+0xe4>)
 800476e:	f003 fea1 	bl	80084b4 <HAL_GPIO_Init>

    /* SDMMC1 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, 0, 0);
 8004772:	2200      	movs	r2, #0
 8004774:	2100      	movs	r1, #0
 8004776:	2031      	movs	r0, #49	; 0x31
 8004778:	f000 fc53 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 800477c:	2031      	movs	r0, #49	; 0x31
 800477e:	f000 fc6a 	bl	8005056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8004782:	bf00      	nop
 8004784:	3728      	adds	r7, #40	; 0x28
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	52007000 	.word	0x52007000
 8004790:	58024400 	.word	0x58024400
 8004794:	58020800 	.word	0x58020800
 8004798:	58020c00 	.word	0x58020c00

0800479c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b08a      	sub	sp, #40	; 0x28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a4:	f107 0314 	add.w	r3, r7, #20
 80047a8:	2200      	movs	r2, #0
 80047aa:	601a      	str	r2, [r3, #0]
 80047ac:	605a      	str	r2, [r3, #4]
 80047ae:	609a      	str	r2, [r3, #8]
 80047b0:	60da      	str	r2, [r3, #12]
 80047b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a1a      	ldr	r2, [pc, #104]	; (8004824 <HAL_SPI_MspInit+0x88>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d12d      	bne.n	800481a <HAL_SPI_MspInit+0x7e>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80047be:	4b1a      	ldr	r3, [pc, #104]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047c0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047c4:	4a18      	ldr	r2, [pc, #96]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047c6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80047ca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80047ce:	4b16      	ldr	r3, [pc, #88]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047d0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80047d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80047d8:	613b      	str	r3, [r7, #16]
 80047da:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047dc:	4b12      	ldr	r3, [pc, #72]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047e2:	4a11      	ldr	r2, [pc, #68]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047e4:	f043 0301 	orr.w	r3, r3, #1
 80047e8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80047ec:	4b0e      	ldr	r3, [pc, #56]	; (8004828 <HAL_SPI_MspInit+0x8c>)
 80047ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80047f2:	f003 0301 	and.w	r3, r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
 80047f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80047fa:	23e0      	movs	r3, #224	; 0xe0
 80047fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047fe:	2302      	movs	r3, #2
 8004800:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004802:	2300      	movs	r3, #0
 8004804:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004806:	2303      	movs	r3, #3
 8004808:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800480a:	2305      	movs	r3, #5
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800480e:	f107 0314 	add.w	r3, r7, #20
 8004812:	4619      	mov	r1, r3
 8004814:	4805      	ldr	r0, [pc, #20]	; (800482c <HAL_SPI_MspInit+0x90>)
 8004816:	f003 fe4d 	bl	80084b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800481a:	bf00      	nop
 800481c:	3728      	adds	r7, #40	; 0x28
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	40013000 	.word	0x40013000
 8004828:	58024400 	.word	0x58024400
 800482c:	58020000 	.word	0x58020000

08004830 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08c      	sub	sp, #48	; 0x30
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004838:	f107 031c 	add.w	r3, r7, #28
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	605a      	str	r2, [r3, #4]
 8004842:	609a      	str	r2, [r3, #8]
 8004844:	60da      	str	r2, [r3, #12]
 8004846:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART8)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a4b      	ldr	r2, [pc, #300]	; (800497c <HAL_UART_MspInit+0x14c>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d12e      	bne.n	80048b0 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN UART8_MspInit 0 */

  /* USER CODE END UART8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8004852:	4b4b      	ldr	r3, [pc, #300]	; (8004980 <HAL_UART_MspInit+0x150>)
 8004854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004858:	4a49      	ldr	r2, [pc, #292]	; (8004980 <HAL_UART_MspInit+0x150>)
 800485a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800485e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8004862:	4b47      	ldr	r3, [pc, #284]	; (8004980 <HAL_UART_MspInit+0x150>)
 8004864:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8004868:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800486c:	61bb      	str	r3, [r7, #24]
 800486e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004870:	4b43      	ldr	r3, [pc, #268]	; (8004980 <HAL_UART_MspInit+0x150>)
 8004872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004876:	4a42      	ldr	r2, [pc, #264]	; (8004980 <HAL_UART_MspInit+0x150>)
 8004878:	f043 0310 	orr.w	r3, r3, #16
 800487c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004880:	4b3f      	ldr	r3, [pc, #252]	; (8004980 <HAL_UART_MspInit+0x150>)
 8004882:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004886:	f003 0310 	and.w	r3, r3, #16
 800488a:	617b      	str	r3, [r7, #20]
 800488c:	697b      	ldr	r3, [r7, #20]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800488e:	2303      	movs	r3, #3
 8004890:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004892:	2302      	movs	r3, #2
 8004894:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004896:	2300      	movs	r3, #0
 8004898:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800489a:	2300      	movs	r3, #0
 800489c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800489e:	2308      	movs	r3, #8
 80048a0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80048a2:	f107 031c 	add.w	r3, r7, #28
 80048a6:	4619      	mov	r1, r3
 80048a8:	4836      	ldr	r0, [pc, #216]	; (8004984 <HAL_UART_MspInit+0x154>)
 80048aa:	f003 fe03 	bl	80084b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80048ae:	e061      	b.n	8004974 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART3)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a34      	ldr	r2, [pc, #208]	; (8004988 <HAL_UART_MspInit+0x158>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d15c      	bne.n	8004974 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART3_CLK_ENABLE();
 80048ba:	4b31      	ldr	r3, [pc, #196]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048c0:	4a2f      	ldr	r2, [pc, #188]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80048c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80048ca:	4b2d      	ldr	r3, [pc, #180]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80048d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80048d4:	613b      	str	r3, [r7, #16]
 80048d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80048d8:	4b29      	ldr	r3, [pc, #164]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048de:	4a28      	ldr	r2, [pc, #160]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048e0:	f043 0308 	orr.w	r3, r3, #8
 80048e4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048e8:	4b25      	ldr	r3, [pc, #148]	; (8004980 <HAL_UART_MspInit+0x150>)
 80048ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048ee:	f003 0308 	and.w	r3, r3, #8
 80048f2:	60fb      	str	r3, [r7, #12]
 80048f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80048f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80048fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048fc:	2302      	movs	r3, #2
 80048fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004900:	2300      	movs	r3, #0
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004904:	2300      	movs	r3, #0
 8004906:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8004908:	2307      	movs	r3, #7
 800490a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800490c:	f107 031c 	add.w	r3, r7, #28
 8004910:	4619      	mov	r1, r3
 8004912:	481e      	ldr	r0, [pc, #120]	; (800498c <HAL_UART_MspInit+0x15c>)
 8004914:	f003 fdce 	bl	80084b4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8004918:	4b1d      	ldr	r3, [pc, #116]	; (8004990 <HAL_UART_MspInit+0x160>)
 800491a:	4a1e      	ldr	r2, [pc, #120]	; (8004994 <HAL_UART_MspInit+0x164>)
 800491c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800491e:	4b1c      	ldr	r3, [pc, #112]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004920:	222d      	movs	r2, #45	; 0x2d
 8004922:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004926:	2200      	movs	r2, #0
 8004928:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800492a:	4b19      	ldr	r3, [pc, #100]	; (8004990 <HAL_UART_MspInit+0x160>)
 800492c:	2200      	movs	r2, #0
 800492e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004930:	4b17      	ldr	r3, [pc, #92]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004932:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004936:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004938:	4b15      	ldr	r3, [pc, #84]	; (8004990 <HAL_UART_MspInit+0x160>)
 800493a:	2200      	movs	r2, #0
 800493c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800493e:	4b14      	ldr	r3, [pc, #80]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004940:	2200      	movs	r2, #0
 8004942:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8004944:	4b12      	ldr	r3, [pc, #72]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004946:	f44f 7280 	mov.w	r2, #256	; 0x100
 800494a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800494c:	4b10      	ldr	r3, [pc, #64]	; (8004990 <HAL_UART_MspInit+0x160>)
 800494e:	2200      	movs	r2, #0
 8004950:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004952:	4b0f      	ldr	r3, [pc, #60]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004954:	2200      	movs	r2, #0
 8004956:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004958:	480d      	ldr	r0, [pc, #52]	; (8004990 <HAL_UART_MspInit+0x160>)
 800495a:	f000 fb97 	bl	800508c <HAL_DMA_Init>
 800495e:	4603      	mov	r3, r0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d001      	beq.n	8004968 <HAL_UART_MspInit+0x138>
      Error_Handler();
 8004964:	f7ff fd60 	bl	8004428 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a09      	ldr	r2, [pc, #36]	; (8004990 <HAL_UART_MspInit+0x160>)
 800496c:	679a      	str	r2, [r3, #120]	; 0x78
 800496e:	4a08      	ldr	r2, [pc, #32]	; (8004990 <HAL_UART_MspInit+0x160>)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6393      	str	r3, [r2, #56]	; 0x38
}
 8004974:	bf00      	nop
 8004976:	3730      	adds	r7, #48	; 0x30
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40007c00 	.word	0x40007c00
 8004980:	58024400 	.word	0x58024400
 8004984:	58021000 	.word	0x58021000
 8004988:	40004800 	.word	0x40004800
 800498c:	58020c00 	.word	0x58020c00
 8004990:	240445e8 	.word	0x240445e8
 8004994:	40020028 	.word	0x40020028

08004998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800499c:	f006 fa98 	bl	800aed0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80049a0:	e7fe      	b.n	80049a0 <NMI_Handler+0x8>

080049a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80049a2:	b480      	push	{r7}
 80049a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80049a6:	e7fe      	b.n	80049a6 <HardFault_Handler+0x4>

080049a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80049a8:	b480      	push	{r7}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80049ac:	e7fe      	b.n	80049ac <MemManage_Handler+0x4>

080049ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80049ae:	b480      	push	{r7}
 80049b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80049b2:	e7fe      	b.n	80049b2 <BusFault_Handler+0x4>

080049b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80049b4:	b480      	push	{r7}
 80049b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80049b8:	e7fe      	b.n	80049b8 <UsageFault_Handler+0x4>

080049ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80049ba:	b480      	push	{r7}
 80049bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80049be:	bf00      	nop
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr

080049c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80049c8:	b480      	push	{r7}
 80049ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	46bd      	mov	sp, r7
 80049d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d4:	4770      	bx	lr

080049d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80049d6:	b480      	push	{r7}
 80049d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr

080049e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80049e4:	b580      	push	{r7, lr}
 80049e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80049e8:	f000 f9f2 	bl	8004dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80049ec:	bf00      	nop
 80049ee:	bd80      	pop	{r7, pc}

080049f0 <PVD_AVD_IRQHandler>:

/**
  * @brief This function handles PVD and AVD interrupts through EXTI line 16.
  */
void PVD_AVD_IRQHandler(void)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_AVD_IRQn 0 */

  /* USER CODE END PVD_AVD_IRQn 0 */
  HAL_PWREx_PVD_AVD_IRQHandler();
 80049f4:	f005 fa84 	bl	8009f00 <HAL_PWREx_PVD_AVD_IRQHandler>
  /* USER CODE BEGIN PVD_AVD_IRQn 1 */

  /* USER CODE END PVD_AVD_IRQn 1 */
}
 80049f8:	bf00      	nop
 80049fa:	bd80      	pop	{r7, pc}

080049fc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8004a00:	4802      	ldr	r0, [pc, #8]	; (8004a0c <DMA1_Stream1_IRQHandler+0x10>)
 8004a02:	f001 f909 	bl	8005c18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8004a06:	bf00      	nop
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	240445e8 	.word	0x240445e8

08004a10 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004a14:	4802      	ldr	r0, [pc, #8]	; (8004a20 <FDCAN1_IT0_IRQHandler+0x10>)
 8004a16:	f003 f8bd 	bl	8007b94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8004a1a:	bf00      	nop
 8004a1c:	bd80      	pop	{r7, pc}
 8004a1e:	bf00      	nop
 8004a20:	240447b0 	.word	0x240447b0

08004a24 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8004a28:	4802      	ldr	r0, [pc, #8]	; (8004a34 <FDCAN1_IT1_IRQHandler+0x10>)
 8004a2a:	f003 f8b3 	bl	8007b94 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8004a2e:	bf00      	nop
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	240447b0 	.word	0x240447b0

08004a38 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8004a3c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004a40:	f003 ff34 	bl	80088ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004a44:	bf00      	nop
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <SDMMC1_IRQHandler>:

/**
  * @brief This function handles SDMMC1 global interrupt.
  */
void SDMMC1_IRQHandler(void)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC1_IRQn 0 */

  /* USER CODE END SDMMC1_IRQn 0 */
  HAL_SD_IRQHandler(&hsd1);
 8004a4c:	4802      	ldr	r0, [pc, #8]	; (8004a58 <SDMMC1_IRQHandler+0x10>)
 8004a4e:	f009 f9c1 	bl	800ddd4 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC1_IRQn 1 */

  /* USER CODE END SDMMC1_IRQn 1 */
}
 8004a52:	bf00      	nop
 8004a54:	bd80      	pop	{r7, pc}
 8004a56:	bf00      	nop
 8004a58:	2404470c 	.word	0x2404470c

08004a5c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8004a60:	4802      	ldr	r0, [pc, #8]	; (8004a6c <OTG_FS_IRQHandler+0x10>)
 8004a62:	f004 f8b8 	bl	8008bd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004a66:	bf00      	nop
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	24045340 	.word	0x24045340

08004a70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	617b      	str	r3, [r7, #20]
 8004a80:	e00a      	b.n	8004a98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004a82:	f3af 8000 	nop.w
 8004a86:	4601      	mov	r1, r0
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	1c5a      	adds	r2, r3, #1
 8004a8c:	60ba      	str	r2, [r7, #8]
 8004a8e:	b2ca      	uxtb	r2, r1
 8004a90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	3301      	adds	r3, #1
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	697a      	ldr	r2, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	dbf0      	blt.n	8004a82 <_read+0x12>
	}

return len;
 8004aa0:	687b      	ldr	r3, [r7, #4]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3718      	adds	r7, #24
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}

08004aaa <_close>:
	}
	return len;
}

int _close(int file)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b083      	sub	sp, #12
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
	return -1;
 8004ab2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	370c      	adds	r7, #12
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr

08004ac2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004ac2:	b480      	push	{r7}
 8004ac4:	b083      	sub	sp, #12
 8004ac6:	af00      	add	r7, sp, #0
 8004ac8:	6078      	str	r0, [r7, #4]
 8004aca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ad2:	605a      	str	r2, [r3, #4]
	return 0;
 8004ad4:	2300      	movs	r3, #0
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr

08004ae2 <_isatty>:

int _isatty(int file)
{
 8004ae2:	b480      	push	{r7}
 8004ae4:	b083      	sub	sp, #12
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
	return 1;
 8004aea:	2301      	movs	r3, #1
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
	return 0;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b086      	sub	sp, #24
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b1c:	4a14      	ldr	r2, [pc, #80]	; (8004b70 <_sbrk+0x5c>)
 8004b1e:	4b15      	ldr	r3, [pc, #84]	; (8004b74 <_sbrk+0x60>)
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b28:	4b13      	ldr	r3, [pc, #76]	; (8004b78 <_sbrk+0x64>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b30:	4b11      	ldr	r3, [pc, #68]	; (8004b78 <_sbrk+0x64>)
 8004b32:	4a12      	ldr	r2, [pc, #72]	; (8004b7c <_sbrk+0x68>)
 8004b34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b36:	4b10      	ldr	r3, [pc, #64]	; (8004b78 <_sbrk+0x64>)
 8004b38:	681a      	ldr	r2, [r3, #0]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d207      	bcs.n	8004b54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b44:	f015 fe5e 	bl	801a804 <__errno>
 8004b48:	4602      	mov	r2, r0
 8004b4a:	230c      	movs	r3, #12
 8004b4c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8004b52:	e009      	b.n	8004b68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <_sbrk+0x64>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <_sbrk+0x64>)
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4413      	add	r3, r2
 8004b62:	4a05      	ldr	r2, [pc, #20]	; (8004b78 <_sbrk+0x64>)
 8004b64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b66:	68fb      	ldr	r3, [r7, #12]
}
 8004b68:	4618      	mov	r0, r3
 8004b6a:	3718      	adds	r7, #24
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	24080000 	.word	0x24080000
 8004b74:	00000400 	.word	0x00000400
 8004b78:	240404c0 	.word	0x240404c0
 8004b7c:	24045750 	.word	0x24045750

08004b80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004b84:	4b39      	ldr	r3, [pc, #228]	; (8004c6c <SystemInit+0xec>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b8a:	4a38      	ldr	r2, [pc, #224]	; (8004c6c <SystemInit+0xec>)
 8004b8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004b90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004b94:	4b36      	ldr	r3, [pc, #216]	; (8004c70 <SystemInit+0xf0>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 030f 	and.w	r3, r3, #15
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d807      	bhi.n	8004bb0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004ba0:	4b33      	ldr	r3, [pc, #204]	; (8004c70 <SystemInit+0xf0>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f023 030f 	bic.w	r3, r3, #15
 8004ba8:	4a31      	ldr	r2, [pc, #196]	; (8004c70 <SystemInit+0xf0>)
 8004baa:	f043 0307 	orr.w	r3, r3, #7
 8004bae:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8004bb0:	4b30      	ldr	r3, [pc, #192]	; (8004c74 <SystemInit+0xf4>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a2f      	ldr	r2, [pc, #188]	; (8004c74 <SystemInit+0xf4>)
 8004bb6:	f043 0301 	orr.w	r3, r3, #1
 8004bba:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8004bbc:	4b2d      	ldr	r3, [pc, #180]	; (8004c74 <SystemInit+0xf4>)
 8004bbe:	2200      	movs	r2, #0
 8004bc0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8004bc2:	4b2c      	ldr	r3, [pc, #176]	; (8004c74 <SystemInit+0xf4>)
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	492b      	ldr	r1, [pc, #172]	; (8004c74 <SystemInit+0xf4>)
 8004bc8:	4b2b      	ldr	r3, [pc, #172]	; (8004c78 <SystemInit+0xf8>)
 8004bca:	4013      	ands	r3, r2
 8004bcc:	600b      	str	r3, [r1, #0]
  
   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8004bce:	4b28      	ldr	r3, [pc, #160]	; (8004c70 <SystemInit+0xf0>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	2b07      	cmp	r3, #7
 8004bd8:	d907      	bls.n	8004bea <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004bda:	4b25      	ldr	r3, [pc, #148]	; (8004c70 <SystemInit+0xf0>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f023 030f 	bic.w	r3, r3, #15
 8004be2:	4a23      	ldr	r2, [pc, #140]	; (8004c70 <SystemInit+0xf0>)
 8004be4:	f043 0307 	orr.w	r3, r3, #7
 8004be8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8004bea:	4b22      	ldr	r3, [pc, #136]	; (8004c74 <SystemInit+0xf4>)
 8004bec:	2200      	movs	r2, #0
 8004bee:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8004bf0:	4b20      	ldr	r3, [pc, #128]	; (8004c74 <SystemInit+0xf4>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8004bf6:	4b1f      	ldr	r3, [pc, #124]	; (8004c74 <SystemInit+0xf4>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8004bfc:	4b1d      	ldr	r3, [pc, #116]	; (8004c74 <SystemInit+0xf4>)
 8004bfe:	4a1f      	ldr	r2, [pc, #124]	; (8004c7c <SystemInit+0xfc>)
 8004c00:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8004c02:	4b1c      	ldr	r3, [pc, #112]	; (8004c74 <SystemInit+0xf4>)
 8004c04:	4a1e      	ldr	r2, [pc, #120]	; (8004c80 <SystemInit+0x100>)
 8004c06:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004c08:	4b1a      	ldr	r3, [pc, #104]	; (8004c74 <SystemInit+0xf4>)
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <SystemInit+0x104>)
 8004c0c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004c0e:	4b19      	ldr	r3, [pc, #100]	; (8004c74 <SystemInit+0xf4>)
 8004c10:	2200      	movs	r2, #0
 8004c12:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8004c14:	4b17      	ldr	r3, [pc, #92]	; (8004c74 <SystemInit+0xf4>)
 8004c16:	4a1b      	ldr	r2, [pc, #108]	; (8004c84 <SystemInit+0x104>)
 8004c18:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004c1a:	4b16      	ldr	r3, [pc, #88]	; (8004c74 <SystemInit+0xf4>)
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004c20:	4b14      	ldr	r3, [pc, #80]	; (8004c74 <SystemInit+0xf4>)
 8004c22:	4a18      	ldr	r2, [pc, #96]	; (8004c84 <SystemInit+0x104>)
 8004c24:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8004c26:	4b13      	ldr	r3, [pc, #76]	; (8004c74 <SystemInit+0xf4>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004c2c:	4b11      	ldr	r3, [pc, #68]	; (8004c74 <SystemInit+0xf4>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a10      	ldr	r2, [pc, #64]	; (8004c74 <SystemInit+0xf4>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004c38:	4b0e      	ldr	r3, [pc, #56]	; (8004c74 <SystemInit+0xf4>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <SystemInit+0x108>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b12      	ldr	r3, [pc, #72]	; (8004c8c <SystemInit+0x10c>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c4a:	d202      	bcs.n	8004c52 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004c4c:	4b10      	ldr	r3, [pc, #64]	; (8004c90 <SystemInit+0x110>)
 8004c4e:	2201      	movs	r2, #1
 8004c50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004c52:	4b10      	ldr	r3, [pc, #64]	; (8004c94 <SystemInit+0x114>)
 8004c54:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8004c58:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address for cortex-M7 ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c5a:	4b04      	ldr	r3, [pc, #16]	; (8004c6c <SystemInit+0xec>)
 8004c5c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c60:	609a      	str	r2, [r3, #8]
#endif

#endif /*DUAL_CORE && CORE_CM4*/

}
 8004c62:	bf00      	nop
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr
 8004c6c:	e000ed00 	.word	0xe000ed00
 8004c70:	52002000 	.word	0x52002000
 8004c74:	58024400 	.word	0x58024400
 8004c78:	eaf6ed7f 	.word	0xeaf6ed7f
 8004c7c:	02020200 	.word	0x02020200
 8004c80:	01ff0000 	.word	0x01ff0000
 8004c84:	01010280 	.word	0x01010280
 8004c88:	5c001000 	.word	0x5c001000
 8004c8c:	ffff0000 	.word	0xffff0000
 8004c90:	51008108 	.word	0x51008108
 8004c94:	52004000 	.word	0x52004000

08004c98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cd0 <LoopFillZerobss+0x10>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8004c9c:	f7ff ff70 	bl	8004b80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004ca0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004ca2:	e003      	b.n	8004cac <LoopCopyDataInit>

08004ca4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004ca4:	4b0b      	ldr	r3, [pc, #44]	; (8004cd4 <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 8004ca6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004ca8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004caa:	3104      	adds	r1, #4

08004cac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004cac:	480a      	ldr	r0, [pc, #40]	; (8004cd8 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8004cae:	4b0b      	ldr	r3, [pc, #44]	; (8004cdc <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8004cb0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004cb2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004cb4:	d3f6      	bcc.n	8004ca4 <CopyDataInit>
  ldr  r2, =_sbss
 8004cb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ce0 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8004cb8:	e002      	b.n	8004cc0 <LoopFillZerobss>

08004cba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004cba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004cbc:	f842 3b04 	str.w	r3, [r2], #4

08004cc0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004cc0:	4b08      	ldr	r3, [pc, #32]	; (8004ce4 <LoopFillZerobss+0x24>)
  cmp  r2, r3
 8004cc2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004cc4:	d3f9      	bcc.n	8004cba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004cc6:	f015 fda3 	bl	801a810 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cca:	f7fd fbcd 	bl	8002468 <main>
  bx  lr    
 8004cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cd0:	24080000 	.word	0x24080000
  ldr  r3, =_sidata
 8004cd4:	0801c834 	.word	0x0801c834
  ldr  r0, =_sdata
 8004cd8:	24000000 	.word	0x24000000
  ldr  r3, =_edata
 8004cdc:	2400034c 	.word	0x2400034c
  ldr  r2, =_sbss
 8004ce0:	24000350 	.word	0x24000350
  ldr  r3, = _ebss
 8004ce4:	2404574c 	.word	0x2404574c

08004ce8 <ADC3_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ce8:	e7fe      	b.n	8004ce8 <ADC3_IRQHandler>
	...

08004cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cf2:	2003      	movs	r0, #3
 8004cf4:	f000 f98a 	bl	800500c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8004cf8:	f005 ff1c 	bl	800ab34 <HAL_RCC_GetSysClockFreq>
 8004cfc:	4601      	mov	r1, r0
 8004cfe:	4b15      	ldr	r3, [pc, #84]	; (8004d54 <HAL_Init+0x68>)
 8004d00:	699b      	ldr	r3, [r3, #24]
 8004d02:	0a1b      	lsrs	r3, r3, #8
 8004d04:	f003 030f 	and.w	r3, r3, #15
 8004d08:	4a13      	ldr	r2, [pc, #76]	; (8004d58 <HAL_Init+0x6c>)
 8004d0a:	5cd3      	ldrb	r3, [r2, r3]
 8004d0c:	f003 031f 	and.w	r3, r3, #31
 8004d10:	fa21 f303 	lsr.w	r3, r1, r3
 8004d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8004d16:	4b0f      	ldr	r3, [pc, #60]	; (8004d54 <HAL_Init+0x68>)
 8004d18:	699b      	ldr	r3, [r3, #24]
 8004d1a:	f003 030f 	and.w	r3, r3, #15
 8004d1e:	4a0e      	ldr	r2, [pc, #56]	; (8004d58 <HAL_Init+0x6c>)
 8004d20:	5cd3      	ldrb	r3, [r2, r3]
 8004d22:	f003 031f 	and.w	r3, r3, #31
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	fa22 f303 	lsr.w	r3, r2, r3
 8004d2c:	4a0b      	ldr	r2, [pc, #44]	; (8004d5c <HAL_Init+0x70>)
 8004d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8004d30:	4a0b      	ldr	r2, [pc, #44]	; (8004d60 <HAL_Init+0x74>)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004d36:	2000      	movs	r0, #0
 8004d38:	f000 f814 	bl	8004d64 <HAL_InitTick>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d001      	beq.n	8004d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e002      	b.n	8004d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004d46:	f7ff fbbf 	bl	80044c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004d4a:	2300      	movs	r3, #0
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3708      	adds	r7, #8
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	58024400 	.word	0x58024400
 8004d58:	0801c540 	.word	0x0801c540
 8004d5c:	24000014 	.word	0x24000014
 8004d60:	24000010 	.word	0x24000010

08004d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b082      	sub	sp, #8
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004d6c:	4b15      	ldr	r3, [pc, #84]	; (8004dc4 <HAL_InitTick+0x60>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d101      	bne.n	8004d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e021      	b.n	8004dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004d78:	4b13      	ldr	r3, [pc, #76]	; (8004dc8 <HAL_InitTick+0x64>)
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	4b11      	ldr	r3, [pc, #68]	; (8004dc4 <HAL_InitTick+0x60>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	4619      	mov	r1, r3
 8004d82:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f000 f96f 	bl	8005072 <HAL_SYSTICK_Config>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d001      	beq.n	8004d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	e00e      	b.n	8004dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	2b0f      	cmp	r3, #15
 8004da2:	d80a      	bhi.n	8004dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004da4:	2200      	movs	r2, #0
 8004da6:	6879      	ldr	r1, [r7, #4]
 8004da8:	f04f 30ff 	mov.w	r0, #4294967295
 8004dac:	f000 f939 	bl	8005022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004db0:	4a06      	ldr	r2, [pc, #24]	; (8004dcc <HAL_InitTick+0x68>)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004db6:	2300      	movs	r3, #0
 8004db8:	e000      	b.n	8004dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8004dba:	2301      	movs	r3, #1
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3708      	adds	r7, #8
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	2400001c 	.word	0x2400001c
 8004dc8:	24000010 	.word	0x24000010
 8004dcc:	24000018 	.word	0x24000018

08004dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004dd4:	4b06      	ldr	r3, [pc, #24]	; (8004df0 <HAL_IncTick+0x20>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	461a      	mov	r2, r3
 8004dda:	4b06      	ldr	r3, [pc, #24]	; (8004df4 <HAL_IncTick+0x24>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4413      	add	r3, r2
 8004de0:	4a04      	ldr	r2, [pc, #16]	; (8004df4 <HAL_IncTick+0x24>)
 8004de2:	6013      	str	r3, [r2, #0]
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	2400001c 	.word	0x2400001c
 8004df4:	24044a04 	.word	0x24044a04

08004df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8004dfc:	4b03      	ldr	r3, [pc, #12]	; (8004e0c <HAL_GetTick+0x14>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e08:	4770      	bx	lr
 8004e0a:	bf00      	nop
 8004e0c:	24044a04 	.word	0x24044a04

08004e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004e18:	f7ff ffee 	bl	8004df8 <HAL_GetTick>
 8004e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d005      	beq.n	8004e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004e2a:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <HAL_Delay+0x40>)
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	4413      	add	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004e36:	bf00      	nop
 8004e38:	f7ff ffde 	bl	8004df8 <HAL_GetTick>
 8004e3c:	4602      	mov	r2, r0
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	68fa      	ldr	r2, [r7, #12]
 8004e44:	429a      	cmp	r2, r3
 8004e46:	d8f7      	bhi.n	8004e38 <HAL_Delay+0x28>
  {
  }
}
 8004e48:	bf00      	nop
 8004e4a:	3710      	adds	r7, #16
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bd80      	pop	{r7, pc}
 8004e50:	2400001c 	.word	0x2400001c

08004e54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004e54:	b480      	push	{r7}
 8004e56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004e58:	4b03      	ldr	r3, [pc, #12]	; (8004e68 <HAL_GetREVID+0x14>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	0c1b      	lsrs	r3, r3, #16
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr
 8004e68:	5c001000 	.word	0x5c001000

08004e6c <__NVIC_SetPriorityGrouping>:
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b085      	sub	sp, #20
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f003 0307 	and.w	r3, r3, #7
 8004e7a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <__NVIC_SetPriorityGrouping+0x40>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004e88:	4013      	ands	r3, r2
 8004e8a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004e94:	4b06      	ldr	r3, [pc, #24]	; (8004eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004e9a:	4a04      	ldr	r2, [pc, #16]	; (8004eac <__NVIC_SetPriorityGrouping+0x40>)
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	60d3      	str	r3, [r2, #12]
}
 8004ea0:	bf00      	nop
 8004ea2:	3714      	adds	r7, #20
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eaa:	4770      	bx	lr
 8004eac:	e000ed00 	.word	0xe000ed00
 8004eb0:	05fa0000 	.word	0x05fa0000

08004eb4 <__NVIC_GetPriorityGrouping>:
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004eb8:	4b04      	ldr	r3, [pc, #16]	; (8004ecc <__NVIC_GetPriorityGrouping+0x18>)
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	0a1b      	lsrs	r3, r3, #8
 8004ebe:	f003 0307 	and.w	r3, r3, #7
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eca:	4770      	bx	lr
 8004ecc:	e000ed00 	.word	0xe000ed00

08004ed0 <__NVIC_EnableIRQ>:
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004eda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	db0b      	blt.n	8004efa <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004ee2:	88fb      	ldrh	r3, [r7, #6]
 8004ee4:	f003 021f 	and.w	r2, r3, #31
 8004ee8:	4907      	ldr	r1, [pc, #28]	; (8004f08 <__NVIC_EnableIRQ+0x38>)
 8004eea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004eee:	095b      	lsrs	r3, r3, #5
 8004ef0:	2001      	movs	r0, #1
 8004ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8004ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004efa:	bf00      	nop
 8004efc:	370c      	adds	r7, #12
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	e000e100 	.word	0xe000e100

08004f0c <__NVIC_SetPriority>:
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	4603      	mov	r3, r0
 8004f14:	6039      	str	r1, [r7, #0]
 8004f16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004f18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	db0a      	blt.n	8004f36 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	b2da      	uxtb	r2, r3
 8004f24:	490c      	ldr	r1, [pc, #48]	; (8004f58 <__NVIC_SetPriority+0x4c>)
 8004f26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004f2a:	0112      	lsls	r2, r2, #4
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	440b      	add	r3, r1
 8004f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004f34:	e00a      	b.n	8004f4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004f36:	683b      	ldr	r3, [r7, #0]
 8004f38:	b2da      	uxtb	r2, r3
 8004f3a:	4908      	ldr	r1, [pc, #32]	; (8004f5c <__NVIC_SetPriority+0x50>)
 8004f3c:	88fb      	ldrh	r3, [r7, #6]
 8004f3e:	f003 030f 	and.w	r3, r3, #15
 8004f42:	3b04      	subs	r3, #4
 8004f44:	0112      	lsls	r2, r2, #4
 8004f46:	b2d2      	uxtb	r2, r2
 8004f48:	440b      	add	r3, r1
 8004f4a:	761a      	strb	r2, [r3, #24]
}
 8004f4c:	bf00      	nop
 8004f4e:	370c      	adds	r7, #12
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr
 8004f58:	e000e100 	.word	0xe000e100
 8004f5c:	e000ed00 	.word	0xe000ed00

08004f60 <NVIC_EncodePriority>:
{
 8004f60:	b480      	push	{r7}
 8004f62:	b089      	sub	sp, #36	; 0x24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	f1c3 0307 	rsb	r3, r3, #7
 8004f7a:	2b04      	cmp	r3, #4
 8004f7c:	bf28      	it	cs
 8004f7e:	2304      	movcs	r3, #4
 8004f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3304      	adds	r3, #4
 8004f86:	2b06      	cmp	r3, #6
 8004f88:	d902      	bls.n	8004f90 <NVIC_EncodePriority+0x30>
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	3b03      	subs	r3, #3
 8004f8e:	e000      	b.n	8004f92 <NVIC_EncodePriority+0x32>
 8004f90:	2300      	movs	r3, #0
 8004f92:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004f94:	f04f 32ff 	mov.w	r2, #4294967295
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9e:	43da      	mvns	r2, r3
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb2:	43d9      	mvns	r1, r3
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004fb8:	4313      	orrs	r3, r2
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3724      	adds	r7, #36	; 0x24
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <SysTick_Config>:
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	3b01      	subs	r3, #1
 8004fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004fd8:	d301      	bcc.n	8004fde <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e00f      	b.n	8004ffe <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004fde:	4a0a      	ldr	r2, [pc, #40]	; (8005008 <SysTick_Config+0x40>)
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004fe6:	210f      	movs	r1, #15
 8004fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fec:	f7ff ff8e 	bl	8004f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ff0:	4b05      	ldr	r3, [pc, #20]	; (8005008 <SysTick_Config+0x40>)
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ff6:	4b04      	ldr	r3, [pc, #16]	; (8005008 <SysTick_Config+0x40>)
 8004ff8:	2207      	movs	r2, #7
 8004ffa:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
 8005006:	bf00      	nop
 8005008:	e000e010 	.word	0xe000e010

0800500c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b082      	sub	sp, #8
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005014:	6878      	ldr	r0, [r7, #4]
 8005016:	f7ff ff29 	bl	8004e6c <__NVIC_SetPriorityGrouping>
}
 800501a:	bf00      	nop
 800501c:	3708      	adds	r7, #8
 800501e:	46bd      	mov	sp, r7
 8005020:	bd80      	pop	{r7, pc}

08005022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005022:	b580      	push	{r7, lr}
 8005024:	b086      	sub	sp, #24
 8005026:	af00      	add	r7, sp, #0
 8005028:	4603      	mov	r3, r0
 800502a:	60b9      	str	r1, [r7, #8]
 800502c:	607a      	str	r2, [r7, #4]
 800502e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005030:	f7ff ff40 	bl	8004eb4 <__NVIC_GetPriorityGrouping>
 8005034:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	68b9      	ldr	r1, [r7, #8]
 800503a:	6978      	ldr	r0, [r7, #20]
 800503c:	f7ff ff90 	bl	8004f60 <NVIC_EncodePriority>
 8005040:	4602      	mov	r2, r0
 8005042:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005046:	4611      	mov	r1, r2
 8005048:	4618      	mov	r0, r3
 800504a:	f7ff ff5f 	bl	8004f0c <__NVIC_SetPriority>
}
 800504e:	bf00      	nop
 8005050:	3718      	adds	r7, #24
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}

08005056 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	4603      	mov	r3, r0
 800505e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005060:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005064:	4618      	mov	r0, r3
 8005066:	f7ff ff33 	bl	8004ed0 <__NVIC_EnableIRQ>
}
 800506a:	bf00      	nop
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800507a:	6878      	ldr	r0, [r7, #4]
 800507c:	f7ff ffa4 	bl	8004fc8 <SysTick_Config>
 8005080:	4603      	mov	r3, r0
}
 8005082:	4618      	mov	r0, r3
 8005084:	3708      	adds	r7, #8
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
	...

0800508c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8005094:	f7ff feb0 	bl	8004df8 <HAL_GetTick>
 8005098:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d101      	bne.n	80050a4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e316      	b.n	80056d2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a66      	ldr	r2, [pc, #408]	; (8005244 <HAL_DMA_Init+0x1b8>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d04a      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a65      	ldr	r2, [pc, #404]	; (8005248 <HAL_DMA_Init+0x1bc>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d045      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a63      	ldr	r2, [pc, #396]	; (800524c <HAL_DMA_Init+0x1c0>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d040      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a62      	ldr	r2, [pc, #392]	; (8005250 <HAL_DMA_Init+0x1c4>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d03b      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a60      	ldr	r2, [pc, #384]	; (8005254 <HAL_DMA_Init+0x1c8>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d036      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a5f      	ldr	r2, [pc, #380]	; (8005258 <HAL_DMA_Init+0x1cc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d031      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a5d      	ldr	r2, [pc, #372]	; (800525c <HAL_DMA_Init+0x1d0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d02c      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a5c      	ldr	r2, [pc, #368]	; (8005260 <HAL_DMA_Init+0x1d4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d027      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a5a      	ldr	r2, [pc, #360]	; (8005264 <HAL_DMA_Init+0x1d8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d022      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a59      	ldr	r2, [pc, #356]	; (8005268 <HAL_DMA_Init+0x1dc>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d01d      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a57      	ldr	r2, [pc, #348]	; (800526c <HAL_DMA_Init+0x1e0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d018      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4a56      	ldr	r2, [pc, #344]	; (8005270 <HAL_DMA_Init+0x1e4>)
 8005118:	4293      	cmp	r3, r2
 800511a:	d013      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a54      	ldr	r2, [pc, #336]	; (8005274 <HAL_DMA_Init+0x1e8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d00e      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a53      	ldr	r2, [pc, #332]	; (8005278 <HAL_DMA_Init+0x1ec>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d009      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a51      	ldr	r2, [pc, #324]	; (800527c <HAL_DMA_Init+0x1f0>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d004      	beq.n	8005144 <HAL_DMA_Init+0xb8>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a50      	ldr	r2, [pc, #320]	; (8005280 <HAL_DMA_Init+0x1f4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d101      	bne.n	8005148 <HAL_DMA_Init+0xbc>
 8005144:	2301      	movs	r3, #1
 8005146:	e000      	b.n	800514a <HAL_DMA_Init+0xbe>
 8005148:	2300      	movs	r3, #0
 800514a:	2b00      	cmp	r3, #0
 800514c:	f000 813b 	beq.w	80053c6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2200      	movs	r2, #0
 8005154:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2202      	movs	r2, #2
 800515c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a37      	ldr	r2, [pc, #220]	; (8005244 <HAL_DMA_Init+0x1b8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d04a      	beq.n	8005200 <HAL_DMA_Init+0x174>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a36      	ldr	r2, [pc, #216]	; (8005248 <HAL_DMA_Init+0x1bc>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d045      	beq.n	8005200 <HAL_DMA_Init+0x174>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a34      	ldr	r2, [pc, #208]	; (800524c <HAL_DMA_Init+0x1c0>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d040      	beq.n	8005200 <HAL_DMA_Init+0x174>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a33      	ldr	r2, [pc, #204]	; (8005250 <HAL_DMA_Init+0x1c4>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d03b      	beq.n	8005200 <HAL_DMA_Init+0x174>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a31      	ldr	r2, [pc, #196]	; (8005254 <HAL_DMA_Init+0x1c8>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d036      	beq.n	8005200 <HAL_DMA_Init+0x174>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a30      	ldr	r2, [pc, #192]	; (8005258 <HAL_DMA_Init+0x1cc>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d031      	beq.n	8005200 <HAL_DMA_Init+0x174>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a2e      	ldr	r2, [pc, #184]	; (800525c <HAL_DMA_Init+0x1d0>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d02c      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4a2d      	ldr	r2, [pc, #180]	; (8005260 <HAL_DMA_Init+0x1d4>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d027      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	4a2b      	ldr	r2, [pc, #172]	; (8005264 <HAL_DMA_Init+0x1d8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d022      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <HAL_DMA_Init+0x1dc>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d01d      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	4a28      	ldr	r2, [pc, #160]	; (800526c <HAL_DMA_Init+0x1e0>)
 80051ca:	4293      	cmp	r3, r2
 80051cc:	d018      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a27      	ldr	r2, [pc, #156]	; (8005270 <HAL_DMA_Init+0x1e4>)
 80051d4:	4293      	cmp	r3, r2
 80051d6:	d013      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a25      	ldr	r2, [pc, #148]	; (8005274 <HAL_DMA_Init+0x1e8>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a24      	ldr	r2, [pc, #144]	; (8005278 <HAL_DMA_Init+0x1ec>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d009      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a22      	ldr	r2, [pc, #136]	; (800527c <HAL_DMA_Init+0x1f0>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_DMA_Init+0x174>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a21      	ldr	r2, [pc, #132]	; (8005280 <HAL_DMA_Init+0x1f4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d108      	bne.n	8005212 <HAL_DMA_Init+0x186>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]
 8005210:	e007      	b.n	8005222 <HAL_DMA_Init+0x196>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f022 0201 	bic.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005222:	e02f      	b.n	8005284 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005224:	f7ff fde8 	bl	8004df8 <HAL_GetTick>
 8005228:	4602      	mov	r2, r0
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	1ad3      	subs	r3, r2, r3
 800522e:	2b05      	cmp	r3, #5
 8005230:	d928      	bls.n	8005284 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2220      	movs	r2, #32
 8005236:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2203      	movs	r2, #3
 800523c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	e246      	b.n	80056d2 <HAL_DMA_Init+0x646>
 8005244:	40020010 	.word	0x40020010
 8005248:	40020028 	.word	0x40020028
 800524c:	40020040 	.word	0x40020040
 8005250:	40020058 	.word	0x40020058
 8005254:	40020070 	.word	0x40020070
 8005258:	40020088 	.word	0x40020088
 800525c:	400200a0 	.word	0x400200a0
 8005260:	400200b8 	.word	0x400200b8
 8005264:	40020410 	.word	0x40020410
 8005268:	40020428 	.word	0x40020428
 800526c:	40020440 	.word	0x40020440
 8005270:	40020458 	.word	0x40020458
 8005274:	40020470 	.word	0x40020470
 8005278:	40020488 	.word	0x40020488
 800527c:	400204a0 	.word	0x400204a0
 8005280:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1c8      	bne.n	8005224 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4b83      	ldr	r3, [pc, #524]	; (80054ac <HAL_DMA_Init+0x420>)
 800529e:	4013      	ands	r3, r2
 80052a0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80052aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052b6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052c2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a1b      	ldr	r3, [r3, #32]
 80052c8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	4313      	orrs	r3, r2
 80052ce:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d107      	bne.n	80052e8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e0:	4313      	orrs	r3, r2
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	4313      	orrs	r3, r2
 80052e6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transfering data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80052e8:	4b71      	ldr	r3, [pc, #452]	; (80054b0 <HAL_DMA_Init+0x424>)
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	4b71      	ldr	r3, [pc, #452]	; (80054b4 <HAL_DMA_Init+0x428>)
 80052ee:	4013      	ands	r3, r2
 80052f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f4:	d328      	bcc.n	8005348 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	685b      	ldr	r3, [r3, #4]
 80052fa:	2b28      	cmp	r3, #40	; 0x28
 80052fc:	d903      	bls.n	8005306 <HAL_DMA_Init+0x27a>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	2b2e      	cmp	r3, #46	; 0x2e
 8005304:	d917      	bls.n	8005336 <HAL_DMA_Init+0x2aa>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	2b3e      	cmp	r3, #62	; 0x3e
 800530c:	d903      	bls.n	8005316 <HAL_DMA_Init+0x28a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	2b42      	cmp	r3, #66	; 0x42
 8005314:	d90f      	bls.n	8005336 <HAL_DMA_Init+0x2aa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	2b46      	cmp	r3, #70	; 0x46
 800531c:	d903      	bls.n	8005326 <HAL_DMA_Init+0x29a>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	2b48      	cmp	r3, #72	; 0x48
 8005324:	d907      	bls.n	8005336 <HAL_DMA_Init+0x2aa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	2b4e      	cmp	r3, #78	; 0x4e
 800532c:	d905      	bls.n	800533a <HAL_DMA_Init+0x2ae>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b52      	cmp	r3, #82	; 0x52
 8005334:	d801      	bhi.n	800533a <HAL_DMA_Init+0x2ae>
 8005336:	2301      	movs	r3, #1
 8005338:	e000      	b.n	800533c <HAL_DMA_Init+0x2b0>
 800533a:	2300      	movs	r3, #0
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8005340:	697b      	ldr	r3, [r7, #20]
 8005342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005346:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	695b      	ldr	r3, [r3, #20]
 8005356:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f023 0307 	bic.w	r3, r3, #7
 800535e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	697a      	ldr	r2, [r7, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	2b04      	cmp	r3, #4
 8005370:	d117      	bne.n	80053a2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005376:	697a      	ldr	r2, [r7, #20]
 8005378:	4313      	orrs	r3, r2
 800537a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005380:	2b00      	cmp	r3, #0
 8005382:	d00e      	beq.n	80053a2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f001 fdcf 	bl	8006f28 <DMA_CheckFifoParam>
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d008      	beq.n	80053a2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2240      	movs	r2, #64	; 0x40
 8005394:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e197      	b.n	80056d2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	697a      	ldr	r2, [r7, #20]
 80053a8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 fd0a 	bl	8006dc4 <DMA_CalcBaseAndBitshift>
 80053b0:	4603      	mov	r3, r0
 80053b2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b8:	f003 031f 	and.w	r3, r3, #31
 80053bc:	223f      	movs	r2, #63	; 0x3f
 80053be:	409a      	lsls	r2, r3
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	609a      	str	r2, [r3, #8]
 80053c4:	e0cd      	b.n	8005562 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a3b      	ldr	r2, [pc, #236]	; (80054b8 <HAL_DMA_Init+0x42c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d022      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a39      	ldr	r2, [pc, #228]	; (80054bc <HAL_DMA_Init+0x430>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d01d      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a38      	ldr	r2, [pc, #224]	; (80054c0 <HAL_DMA_Init+0x434>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d018      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a36      	ldr	r2, [pc, #216]	; (80054c4 <HAL_DMA_Init+0x438>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d013      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a35      	ldr	r2, [pc, #212]	; (80054c8 <HAL_DMA_Init+0x43c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d00e      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a33      	ldr	r2, [pc, #204]	; (80054cc <HAL_DMA_Init+0x440>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d009      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a32      	ldr	r2, [pc, #200]	; (80054d0 <HAL_DMA_Init+0x444>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d004      	beq.n	8005416 <HAL_DMA_Init+0x38a>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a30      	ldr	r2, [pc, #192]	; (80054d4 <HAL_DMA_Init+0x448>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d101      	bne.n	800541a <HAL_DMA_Init+0x38e>
 8005416:	2301      	movs	r3, #1
 8005418:	e000      	b.n	800541c <HAL_DMA_Init+0x390>
 800541a:	2300      	movs	r3, #0
 800541c:	2b00      	cmp	r3, #0
 800541e:	f000 8097 	beq.w	8005550 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a24      	ldr	r2, [pc, #144]	; (80054b8 <HAL_DMA_Init+0x42c>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d021      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a22      	ldr	r2, [pc, #136]	; (80054bc <HAL_DMA_Init+0x430>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d01c      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a21      	ldr	r2, [pc, #132]	; (80054c0 <HAL_DMA_Init+0x434>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d017      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1f      	ldr	r2, [pc, #124]	; (80054c4 <HAL_DMA_Init+0x438>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d012      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1e      	ldr	r2, [pc, #120]	; (80054c8 <HAL_DMA_Init+0x43c>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00d      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a1c      	ldr	r2, [pc, #112]	; (80054cc <HAL_DMA_Init+0x440>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d008      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1b      	ldr	r2, [pc, #108]	; (80054d0 <HAL_DMA_Init+0x444>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d003      	beq.n	8005470 <HAL_DMA_Init+0x3e4>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_DMA_Init+0x448>)
 800546e:	4293      	cmp	r3, r2
 8005470:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	2202      	movs	r2, #2
 800547e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4b12      	ldr	r3, [pc, #72]	; (80054d8 <HAL_DMA_Init+0x44c>)
 800548e:	4013      	ands	r3, r2
 8005490:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b40      	cmp	r3, #64	; 0x40
 8005498:	d020      	beq.n	80054dc <HAL_DMA_Init+0x450>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	2b80      	cmp	r3, #128	; 0x80
 80054a0:	d102      	bne.n	80054a8 <HAL_DMA_Init+0x41c>
 80054a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054a6:	e01a      	b.n	80054de <HAL_DMA_Init+0x452>
 80054a8:	2300      	movs	r3, #0
 80054aa:	e018      	b.n	80054de <HAL_DMA_Init+0x452>
 80054ac:	fe10803f 	.word	0xfe10803f
 80054b0:	5c001000 	.word	0x5c001000
 80054b4:	ffff0000 	.word	0xffff0000
 80054b8:	58025408 	.word	0x58025408
 80054bc:	5802541c 	.word	0x5802541c
 80054c0:	58025430 	.word	0x58025430
 80054c4:	58025444 	.word	0x58025444
 80054c8:	58025458 	.word	0x58025458
 80054cc:	5802546c 	.word	0x5802546c
 80054d0:	58025480 	.word	0x58025480
 80054d4:	58025494 	.word	0x58025494
 80054d8:	fffe000f 	.word	0xfffe000f
 80054dc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054de:	687a      	ldr	r2, [r7, #4]
 80054e0:	68d2      	ldr	r2, [r2, #12]
 80054e2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80054e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80054ec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	695b      	ldr	r3, [r3, #20]
 80054f2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80054f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	699b      	ldr	r3, [r3, #24]
 80054fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80054fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	69db      	ldr	r3, [r3, #28]
 8005502:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8005504:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6a1b      	ldr	r3, [r3, #32]
 800550a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800550c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800550e:	697a      	ldr	r2, [r7, #20]
 8005510:	4313      	orrs	r3, r2
 8005512:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	697a      	ldr	r2, [r7, #20]
 800551a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	461a      	mov	r2, r3
 8005522:	4b6e      	ldr	r3, [pc, #440]	; (80056dc <HAL_DMA_Init+0x650>)
 8005524:	4413      	add	r3, r2
 8005526:	4a6e      	ldr	r2, [pc, #440]	; (80056e0 <HAL_DMA_Init+0x654>)
 8005528:	fba2 2303 	umull	r2, r3, r2, r3
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	009a      	lsls	r2, r3, #2
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f001 fc45 	bl	8006dc4 <DMA_CalcBaseAndBitshift>
 800553a:	4603      	mov	r3, r0
 800553c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005542:	f003 031f 	and.w	r3, r3, #31
 8005546:	2201      	movs	r2, #1
 8005548:	409a      	lsls	r2, r3
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	605a      	str	r2, [r3, #4]
 800554e:	e008      	b.n	8005562 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2240      	movs	r2, #64	; 0x40
 8005554:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2203      	movs	r2, #3
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	e0b7      	b.n	80056d2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a5f      	ldr	r2, [pc, #380]	; (80056e4 <HAL_DMA_Init+0x658>)
 8005568:	4293      	cmp	r3, r2
 800556a:	d072      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a5d      	ldr	r2, [pc, #372]	; (80056e8 <HAL_DMA_Init+0x65c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d06d      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4a5c      	ldr	r2, [pc, #368]	; (80056ec <HAL_DMA_Init+0x660>)
 800557c:	4293      	cmp	r3, r2
 800557e:	d068      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a5a      	ldr	r2, [pc, #360]	; (80056f0 <HAL_DMA_Init+0x664>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d063      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	4a59      	ldr	r2, [pc, #356]	; (80056f4 <HAL_DMA_Init+0x668>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d05e      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a57      	ldr	r2, [pc, #348]	; (80056f8 <HAL_DMA_Init+0x66c>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d059      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a56      	ldr	r2, [pc, #344]	; (80056fc <HAL_DMA_Init+0x670>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d054      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a54      	ldr	r2, [pc, #336]	; (8005700 <HAL_DMA_Init+0x674>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d04f      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4a53      	ldr	r2, [pc, #332]	; (8005704 <HAL_DMA_Init+0x678>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d04a      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a51      	ldr	r2, [pc, #324]	; (8005708 <HAL_DMA_Init+0x67c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d045      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a50      	ldr	r2, [pc, #320]	; (800570c <HAL_DMA_Init+0x680>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d040      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a4e      	ldr	r2, [pc, #312]	; (8005710 <HAL_DMA_Init+0x684>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d03b      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a4d      	ldr	r2, [pc, #308]	; (8005714 <HAL_DMA_Init+0x688>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d036      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a4b      	ldr	r2, [pc, #300]	; (8005718 <HAL_DMA_Init+0x68c>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d031      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a4a      	ldr	r2, [pc, #296]	; (800571c <HAL_DMA_Init+0x690>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d02c      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a48      	ldr	r2, [pc, #288]	; (8005720 <HAL_DMA_Init+0x694>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d027      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a47      	ldr	r2, [pc, #284]	; (8005724 <HAL_DMA_Init+0x698>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d022      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a45      	ldr	r2, [pc, #276]	; (8005728 <HAL_DMA_Init+0x69c>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d01d      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a44      	ldr	r2, [pc, #272]	; (800572c <HAL_DMA_Init+0x6a0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d018      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a42      	ldr	r2, [pc, #264]	; (8005730 <HAL_DMA_Init+0x6a4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d013      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a41      	ldr	r2, [pc, #260]	; (8005734 <HAL_DMA_Init+0x6a8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d00e      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a3f      	ldr	r2, [pc, #252]	; (8005738 <HAL_DMA_Init+0x6ac>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d009      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a3e      	ldr	r2, [pc, #248]	; (800573c <HAL_DMA_Init+0x6b0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d004      	beq.n	8005652 <HAL_DMA_Init+0x5c6>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a3c      	ldr	r2, [pc, #240]	; (8005740 <HAL_DMA_Init+0x6b4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d101      	bne.n	8005656 <HAL_DMA_Init+0x5ca>
 8005652:	2301      	movs	r3, #1
 8005654:	e000      	b.n	8005658 <HAL_DMA_Init+0x5cc>
 8005656:	2300      	movs	r3, #0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d032      	beq.n	80056c2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800565c:	6878      	ldr	r0, [r7, #4]
 800565e:	f001 fcdf 	bl	8007020 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d102      	bne.n	8005670 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	685a      	ldr	r2, [r3, #4]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005678:	b2d2      	uxtb	r2, r2
 800567a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005680:	687a      	ldr	r2, [r7, #4]
 8005682:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8005684:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d010      	beq.n	80056b0 <HAL_DMA_Init+0x624>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b08      	cmp	r3, #8
 8005694:	d80c      	bhi.n	80056b0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f001 fd5c 	bl	8007154 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056a0:	2200      	movs	r2, #0
 80056a2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e008      	b.n	80056c2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2200      	movs	r2, #0
 80056b4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2200      	movs	r2, #0
 80056c0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80056d0:	2300      	movs	r3, #0
}
 80056d2:	4618      	mov	r0, r3
 80056d4:	3718      	adds	r7, #24
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bd80      	pop	{r7, pc}
 80056da:	bf00      	nop
 80056dc:	a7fdabf8 	.word	0xa7fdabf8
 80056e0:	cccccccd 	.word	0xcccccccd
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
 8005724:	58025408 	.word	0x58025408
 8005728:	5802541c 	.word	0x5802541c
 800572c:	58025430 	.word	0x58025430
 8005730:	58025444 	.word	0x58025444
 8005734:	58025458 	.word	0x58025458
 8005738:	5802546c 	.word	0x5802546c
 800573c:	58025480 	.word	0x58025480
 8005740:	58025494 	.word	0x58025494

08005744 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b086      	sub	sp, #24
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	607a      	str	r2, [r7, #4]
 8005750:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005752:	2300      	movs	r3, #0
 8005754:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d101      	bne.n	8005760 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800575c:	2301      	movs	r3, #1
 800575e:	e226      	b.n	8005bae <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005766:	2b01      	cmp	r3, #1
 8005768:	d101      	bne.n	800576e <HAL_DMA_Start_IT+0x2a>
 800576a:	2302      	movs	r3, #2
 800576c:	e21f      	b.n	8005bae <HAL_DMA_Start_IT+0x46a>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	2201      	movs	r2, #1
 8005772:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b01      	cmp	r3, #1
 8005780:	f040 820a 	bne.w	8005b98 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a68      	ldr	r2, [pc, #416]	; (8005938 <HAL_DMA_Start_IT+0x1f4>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d04a      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a66      	ldr	r2, [pc, #408]	; (800593c <HAL_DMA_Start_IT+0x1f8>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d045      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a65      	ldr	r2, [pc, #404]	; (8005940 <HAL_DMA_Start_IT+0x1fc>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d040      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a63      	ldr	r2, [pc, #396]	; (8005944 <HAL_DMA_Start_IT+0x200>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d03b      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a62      	ldr	r2, [pc, #392]	; (8005948 <HAL_DMA_Start_IT+0x204>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d036      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a60      	ldr	r2, [pc, #384]	; (800594c <HAL_DMA_Start_IT+0x208>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d031      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	4a5f      	ldr	r2, [pc, #380]	; (8005950 <HAL_DMA_Start_IT+0x20c>)
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d02c      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	4a5d      	ldr	r2, [pc, #372]	; (8005954 <HAL_DMA_Start_IT+0x210>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d027      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	4a5c      	ldr	r2, [pc, #368]	; (8005958 <HAL_DMA_Start_IT+0x214>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d022      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a5a      	ldr	r2, [pc, #360]	; (800595c <HAL_DMA_Start_IT+0x218>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d01d      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	4a59      	ldr	r2, [pc, #356]	; (8005960 <HAL_DMA_Start_IT+0x21c>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d018      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a57      	ldr	r2, [pc, #348]	; (8005964 <HAL_DMA_Start_IT+0x220>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d013      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a56      	ldr	r2, [pc, #344]	; (8005968 <HAL_DMA_Start_IT+0x224>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d00e      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a54      	ldr	r2, [pc, #336]	; (800596c <HAL_DMA_Start_IT+0x228>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d009      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a53      	ldr	r2, [pc, #332]	; (8005970 <HAL_DMA_Start_IT+0x22c>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d004      	beq.n	8005832 <HAL_DMA_Start_IT+0xee>
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a51      	ldr	r2, [pc, #324]	; (8005974 <HAL_DMA_Start_IT+0x230>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d108      	bne.n	8005844 <HAL_DMA_Start_IT+0x100>
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0201 	bic.w	r2, r2, #1
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e007      	b.n	8005854 <HAL_DMA_Start_IT+0x110>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f022 0201 	bic.w	r2, r2, #1
 8005852:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	68b9      	ldr	r1, [r7, #8]
 800585a:	68f8      	ldr	r0, [r7, #12]
 800585c:	f001 f906 	bl	8006a6c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a34      	ldr	r2, [pc, #208]	; (8005938 <HAL_DMA_Start_IT+0x1f4>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d04a      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4a33      	ldr	r2, [pc, #204]	; (800593c <HAL_DMA_Start_IT+0x1f8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d045      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a31      	ldr	r2, [pc, #196]	; (8005940 <HAL_DMA_Start_IT+0x1fc>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d040      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a30      	ldr	r2, [pc, #192]	; (8005944 <HAL_DMA_Start_IT+0x200>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d03b      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a2e      	ldr	r2, [pc, #184]	; (8005948 <HAL_DMA_Start_IT+0x204>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d036      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a2d      	ldr	r2, [pc, #180]	; (800594c <HAL_DMA_Start_IT+0x208>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d031      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a2b      	ldr	r2, [pc, #172]	; (8005950 <HAL_DMA_Start_IT+0x20c>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d02c      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4a2a      	ldr	r2, [pc, #168]	; (8005954 <HAL_DMA_Start_IT+0x210>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d027      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a28      	ldr	r2, [pc, #160]	; (8005958 <HAL_DMA_Start_IT+0x214>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d022      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a27      	ldr	r2, [pc, #156]	; (800595c <HAL_DMA_Start_IT+0x218>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d01d      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a25      	ldr	r2, [pc, #148]	; (8005960 <HAL_DMA_Start_IT+0x21c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a24      	ldr	r2, [pc, #144]	; (8005964 <HAL_DMA_Start_IT+0x220>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a22      	ldr	r2, [pc, #136]	; (8005968 <HAL_DMA_Start_IT+0x224>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a21      	ldr	r2, [pc, #132]	; (800596c <HAL_DMA_Start_IT+0x228>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a1f      	ldr	r2, [pc, #124]	; (8005970 <HAL_DMA_Start_IT+0x22c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_DMA_Start_IT+0x1bc>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_DMA_Start_IT+0x230>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d101      	bne.n	8005904 <HAL_DMA_Start_IT+0x1c0>
 8005900:	2301      	movs	r3, #1
 8005902:	e000      	b.n	8005906 <HAL_DMA_Start_IT+0x1c2>
 8005904:	2300      	movs	r3, #0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d036      	beq.n	8005978 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f023 021e 	bic.w	r2, r3, #30
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f042 0216 	orr.w	r2, r2, #22
 800591c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005922:	2b00      	cmp	r3, #0
 8005924:	d03e      	beq.n	80059a4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f042 0208 	orr.w	r2, r2, #8
 8005934:	601a      	str	r2, [r3, #0]
 8005936:	e035      	b.n	80059a4 <HAL_DMA_Start_IT+0x260>
 8005938:	40020010 	.word	0x40020010
 800593c:	40020028 	.word	0x40020028
 8005940:	40020040 	.word	0x40020040
 8005944:	40020058 	.word	0x40020058
 8005948:	40020070 	.word	0x40020070
 800594c:	40020088 	.word	0x40020088
 8005950:	400200a0 	.word	0x400200a0
 8005954:	400200b8 	.word	0x400200b8
 8005958:	40020410 	.word	0x40020410
 800595c:	40020428 	.word	0x40020428
 8005960:	40020440 	.word	0x40020440
 8005964:	40020458 	.word	0x40020458
 8005968:	40020470 	.word	0x40020470
 800596c:	40020488 	.word	0x40020488
 8005970:	400204a0 	.word	0x400204a0
 8005974:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f023 020e 	bic.w	r2, r3, #14
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f042 020a 	orr.w	r2, r2, #10
 800598a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005990:	2b00      	cmp	r3, #0
 8005992:	d007      	beq.n	80059a4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f042 0204 	orr.w	r2, r2, #4
 80059a2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a83      	ldr	r2, [pc, #524]	; (8005bb8 <HAL_DMA_Start_IT+0x474>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d072      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a82      	ldr	r2, [pc, #520]	; (8005bbc <HAL_DMA_Start_IT+0x478>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d06d      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a80      	ldr	r2, [pc, #512]	; (8005bc0 <HAL_DMA_Start_IT+0x47c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d068      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	4a7f      	ldr	r2, [pc, #508]	; (8005bc4 <HAL_DMA_Start_IT+0x480>)
 80059c8:	4293      	cmp	r3, r2
 80059ca:	d063      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a7d      	ldr	r2, [pc, #500]	; (8005bc8 <HAL_DMA_Start_IT+0x484>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d05e      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a7c      	ldr	r2, [pc, #496]	; (8005bcc <HAL_DMA_Start_IT+0x488>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d059      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a7a      	ldr	r2, [pc, #488]	; (8005bd0 <HAL_DMA_Start_IT+0x48c>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d054      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a79      	ldr	r2, [pc, #484]	; (8005bd4 <HAL_DMA_Start_IT+0x490>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d04f      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a77      	ldr	r2, [pc, #476]	; (8005bd8 <HAL_DMA_Start_IT+0x494>)
 80059fa:	4293      	cmp	r3, r2
 80059fc:	d04a      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a76      	ldr	r2, [pc, #472]	; (8005bdc <HAL_DMA_Start_IT+0x498>)
 8005a04:	4293      	cmp	r3, r2
 8005a06:	d045      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a74      	ldr	r2, [pc, #464]	; (8005be0 <HAL_DMA_Start_IT+0x49c>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d040      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4a73      	ldr	r2, [pc, #460]	; (8005be4 <HAL_DMA_Start_IT+0x4a0>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d03b      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	4a71      	ldr	r2, [pc, #452]	; (8005be8 <HAL_DMA_Start_IT+0x4a4>)
 8005a22:	4293      	cmp	r3, r2
 8005a24:	d036      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a70      	ldr	r2, [pc, #448]	; (8005bec <HAL_DMA_Start_IT+0x4a8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d031      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a6e      	ldr	r2, [pc, #440]	; (8005bf0 <HAL_DMA_Start_IT+0x4ac>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d02c      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4a6d      	ldr	r2, [pc, #436]	; (8005bf4 <HAL_DMA_Start_IT+0x4b0>)
 8005a40:	4293      	cmp	r3, r2
 8005a42:	d027      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4a6b      	ldr	r2, [pc, #428]	; (8005bf8 <HAL_DMA_Start_IT+0x4b4>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d022      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4a6a      	ldr	r2, [pc, #424]	; (8005bfc <HAL_DMA_Start_IT+0x4b8>)
 8005a54:	4293      	cmp	r3, r2
 8005a56:	d01d      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	4a68      	ldr	r2, [pc, #416]	; (8005c00 <HAL_DMA_Start_IT+0x4bc>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d018      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a67      	ldr	r2, [pc, #412]	; (8005c04 <HAL_DMA_Start_IT+0x4c0>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d013      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a65      	ldr	r2, [pc, #404]	; (8005c08 <HAL_DMA_Start_IT+0x4c4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d00e      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a64      	ldr	r2, [pc, #400]	; (8005c0c <HAL_DMA_Start_IT+0x4c8>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d009      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a62      	ldr	r2, [pc, #392]	; (8005c10 <HAL_DMA_Start_IT+0x4cc>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d004      	beq.n	8005a94 <HAL_DMA_Start_IT+0x350>
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4a61      	ldr	r2, [pc, #388]	; (8005c14 <HAL_DMA_Start_IT+0x4d0>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d101      	bne.n	8005a98 <HAL_DMA_Start_IT+0x354>
 8005a94:	2301      	movs	r3, #1
 8005a96:	e000      	b.n	8005a9a <HAL_DMA_Start_IT+0x356>
 8005a98:	2300      	movs	r3, #0
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d007      	beq.n	8005abc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aba:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d007      	beq.n	8005ad4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005ace:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005ad2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a37      	ldr	r2, [pc, #220]	; (8005bb8 <HAL_DMA_Start_IT+0x474>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d04a      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a36      	ldr	r2, [pc, #216]	; (8005bbc <HAL_DMA_Start_IT+0x478>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d045      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a34      	ldr	r2, [pc, #208]	; (8005bc0 <HAL_DMA_Start_IT+0x47c>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d040      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a33      	ldr	r2, [pc, #204]	; (8005bc4 <HAL_DMA_Start_IT+0x480>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d03b      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a31      	ldr	r2, [pc, #196]	; (8005bc8 <HAL_DMA_Start_IT+0x484>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d036      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a30      	ldr	r2, [pc, #192]	; (8005bcc <HAL_DMA_Start_IT+0x488>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d031      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a2e      	ldr	r2, [pc, #184]	; (8005bd0 <HAL_DMA_Start_IT+0x48c>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d02c      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a2d      	ldr	r2, [pc, #180]	; (8005bd4 <HAL_DMA_Start_IT+0x490>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d027      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a2b      	ldr	r2, [pc, #172]	; (8005bd8 <HAL_DMA_Start_IT+0x494>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d022      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a2a      	ldr	r2, [pc, #168]	; (8005bdc <HAL_DMA_Start_IT+0x498>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d01d      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a28      	ldr	r2, [pc, #160]	; (8005be0 <HAL_DMA_Start_IT+0x49c>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d018      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a27      	ldr	r2, [pc, #156]	; (8005be4 <HAL_DMA_Start_IT+0x4a0>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d013      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a25      	ldr	r2, [pc, #148]	; (8005be8 <HAL_DMA_Start_IT+0x4a4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d00e      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a24      	ldr	r2, [pc, #144]	; (8005bec <HAL_DMA_Start_IT+0x4a8>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d009      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <HAL_DMA_Start_IT+0x4ac>)
 8005b66:	4293      	cmp	r3, r2
 8005b68:	d004      	beq.n	8005b74 <HAL_DMA_Start_IT+0x430>
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	4a21      	ldr	r2, [pc, #132]	; (8005bf4 <HAL_DMA_Start_IT+0x4b0>)
 8005b70:	4293      	cmp	r3, r2
 8005b72:	d108      	bne.n	8005b86 <HAL_DMA_Start_IT+0x442>
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	681a      	ldr	r2, [r3, #0]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0201 	orr.w	r2, r2, #1
 8005b82:	601a      	str	r2, [r3, #0]
 8005b84:	e012      	b.n	8005bac <HAL_DMA_Start_IT+0x468>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f042 0201 	orr.w	r2, r2, #1
 8005b94:	601a      	str	r2, [r3, #0]
 8005b96:	e009      	b.n	8005bac <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005ba6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8005bac:	7dfb      	ldrb	r3, [r7, #23]
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}
 8005bb6:	bf00      	nop
 8005bb8:	40020010 	.word	0x40020010
 8005bbc:	40020028 	.word	0x40020028
 8005bc0:	40020040 	.word	0x40020040
 8005bc4:	40020058 	.word	0x40020058
 8005bc8:	40020070 	.word	0x40020070
 8005bcc:	40020088 	.word	0x40020088
 8005bd0:	400200a0 	.word	0x400200a0
 8005bd4:	400200b8 	.word	0x400200b8
 8005bd8:	40020410 	.word	0x40020410
 8005bdc:	40020428 	.word	0x40020428
 8005be0:	40020440 	.word	0x40020440
 8005be4:	40020458 	.word	0x40020458
 8005be8:	40020470 	.word	0x40020470
 8005bec:	40020488 	.word	0x40020488
 8005bf0:	400204a0 	.word	0x400204a0
 8005bf4:	400204b8 	.word	0x400204b8
 8005bf8:	58025408 	.word	0x58025408
 8005bfc:	5802541c 	.word	0x5802541c
 8005c00:	58025430 	.word	0x58025430
 8005c04:	58025444 	.word	0x58025444
 8005c08:	58025458 	.word	0x58025458
 8005c0c:	5802546c 	.word	0x5802546c
 8005c10:	58025480 	.word	0x58025480
 8005c14:	58025494 	.word	0x58025494

08005c18 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b08a      	sub	sp, #40	; 0x28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005c24:	4b67      	ldr	r3, [pc, #412]	; (8005dc4 <HAL_DMA_IRQHandler+0x1ac>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a67      	ldr	r2, [pc, #412]	; (8005dc8 <HAL_DMA_IRQHandler+0x1b0>)
 8005c2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2e:	0a9b      	lsrs	r3, r3, #10
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c3c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005c44:	69fb      	ldr	r3, [r7, #28]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	4a5f      	ldr	r2, [pc, #380]	; (8005dcc <HAL_DMA_IRQHandler+0x1b4>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d04a      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8005c5a:	4293      	cmp	r3, r2
 8005c5c:	d045      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	4a5c      	ldr	r2, [pc, #368]	; (8005dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d040      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a5a      	ldr	r2, [pc, #360]	; (8005dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d03b      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a59      	ldr	r2, [pc, #356]	; (8005ddc <HAL_DMA_IRQHandler+0x1c4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d036      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	4a57      	ldr	r2, [pc, #348]	; (8005de0 <HAL_DMA_IRQHandler+0x1c8>)
 8005c82:	4293      	cmp	r3, r2
 8005c84:	d031      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a56      	ldr	r2, [pc, #344]	; (8005de4 <HAL_DMA_IRQHandler+0x1cc>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d02c      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a54      	ldr	r2, [pc, #336]	; (8005de8 <HAL_DMA_IRQHandler+0x1d0>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d027      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a53      	ldr	r2, [pc, #332]	; (8005dec <HAL_DMA_IRQHandler+0x1d4>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d022      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a51      	ldr	r2, [pc, #324]	; (8005df0 <HAL_DMA_IRQHandler+0x1d8>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d01d      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a50      	ldr	r2, [pc, #320]	; (8005df4 <HAL_DMA_IRQHandler+0x1dc>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d018      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a4e      	ldr	r2, [pc, #312]	; (8005df8 <HAL_DMA_IRQHandler+0x1e0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d013      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	4a4d      	ldr	r2, [pc, #308]	; (8005dfc <HAL_DMA_IRQHandler+0x1e4>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d00e      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	4a4b      	ldr	r2, [pc, #300]	; (8005e00 <HAL_DMA_IRQHandler+0x1e8>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d009      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a4a      	ldr	r2, [pc, #296]	; (8005e04 <HAL_DMA_IRQHandler+0x1ec>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d004      	beq.n	8005cea <HAL_DMA_IRQHandler+0xd2>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4a48      	ldr	r2, [pc, #288]	; (8005e08 <HAL_DMA_IRQHandler+0x1f0>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d101      	bne.n	8005cee <HAL_DMA_IRQHandler+0xd6>
 8005cea:	2301      	movs	r3, #1
 8005cec:	e000      	b.n	8005cf0 <HAL_DMA_IRQHandler+0xd8>
 8005cee:	2300      	movs	r3, #0
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	f000 842b 	beq.w	800654c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cfa:	f003 031f 	and.w	r3, r3, #31
 8005cfe:	2208      	movs	r2, #8
 8005d00:	409a      	lsls	r2, r3
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	4013      	ands	r3, r2
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 80a2 	beq.w	8005e50 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a2e      	ldr	r2, [pc, #184]	; (8005dcc <HAL_DMA_IRQHandler+0x1b4>)
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d04a      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a2d      	ldr	r2, [pc, #180]	; (8005dd0 <HAL_DMA_IRQHandler+0x1b8>)
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d045      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a2b      	ldr	r2, [pc, #172]	; (8005dd4 <HAL_DMA_IRQHandler+0x1bc>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d040      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4a2a      	ldr	r2, [pc, #168]	; (8005dd8 <HAL_DMA_IRQHandler+0x1c0>)
 8005d30:	4293      	cmp	r3, r2
 8005d32:	d03b      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a28      	ldr	r2, [pc, #160]	; (8005ddc <HAL_DMA_IRQHandler+0x1c4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d036      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a27      	ldr	r2, [pc, #156]	; (8005de0 <HAL_DMA_IRQHandler+0x1c8>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d031      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a25      	ldr	r2, [pc, #148]	; (8005de4 <HAL_DMA_IRQHandler+0x1cc>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d02c      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a24      	ldr	r2, [pc, #144]	; (8005de8 <HAL_DMA_IRQHandler+0x1d0>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d027      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a22      	ldr	r2, [pc, #136]	; (8005dec <HAL_DMA_IRQHandler+0x1d4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d022      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a21      	ldr	r2, [pc, #132]	; (8005df0 <HAL_DMA_IRQHandler+0x1d8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d01d      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a1f      	ldr	r2, [pc, #124]	; (8005df4 <HAL_DMA_IRQHandler+0x1dc>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d018      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1e      	ldr	r2, [pc, #120]	; (8005df8 <HAL_DMA_IRQHandler+0x1e0>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d013      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1c      	ldr	r2, [pc, #112]	; (8005dfc <HAL_DMA_IRQHandler+0x1e4>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d00e      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1b      	ldr	r2, [pc, #108]	; (8005e00 <HAL_DMA_IRQHandler+0x1e8>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d009      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a19      	ldr	r2, [pc, #100]	; (8005e04 <HAL_DMA_IRQHandler+0x1ec>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d004      	beq.n	8005dac <HAL_DMA_IRQHandler+0x194>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <HAL_DMA_IRQHandler+0x1f0>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d12f      	bne.n	8005e0c <HAL_DMA_IRQHandler+0x1f4>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 0304 	and.w	r3, r3, #4
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	bf14      	ite	ne
 8005dba:	2301      	movne	r3, #1
 8005dbc:	2300      	moveq	r3, #0
 8005dbe:	b2db      	uxtb	r3, r3
 8005dc0:	e02e      	b.n	8005e20 <HAL_DMA_IRQHandler+0x208>
 8005dc2:	bf00      	nop
 8005dc4:	24000010 	.word	0x24000010
 8005dc8:	1b4e81b5 	.word	0x1b4e81b5
 8005dcc:	40020010 	.word	0x40020010
 8005dd0:	40020028 	.word	0x40020028
 8005dd4:	40020040 	.word	0x40020040
 8005dd8:	40020058 	.word	0x40020058
 8005ddc:	40020070 	.word	0x40020070
 8005de0:	40020088 	.word	0x40020088
 8005de4:	400200a0 	.word	0x400200a0
 8005de8:	400200b8 	.word	0x400200b8
 8005dec:	40020410 	.word	0x40020410
 8005df0:	40020428 	.word	0x40020428
 8005df4:	40020440 	.word	0x40020440
 8005df8:	40020458 	.word	0x40020458
 8005dfc:	40020470 	.word	0x40020470
 8005e00:	40020488 	.word	0x40020488
 8005e04:	400204a0 	.word	0x400204a0
 8005e08:	400204b8 	.word	0x400204b8
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f003 0308 	and.w	r3, r3, #8
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d015      	beq.n	8005e50 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	f022 0204 	bic.w	r2, r2, #4
 8005e32:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e38:	f003 031f 	and.w	r3, r3, #31
 8005e3c:	2208      	movs	r2, #8
 8005e3e:	409a      	lsls	r2, r3
 8005e40:	6a3b      	ldr	r3, [r7, #32]
 8005e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e48:	f043 0201 	orr.w	r2, r3, #1
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e54:	f003 031f 	and.w	r3, r3, #31
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5e:	f003 0301 	and.w	r3, r3, #1
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d06e      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a69      	ldr	r2, [pc, #420]	; (8006010 <HAL_DMA_IRQHandler+0x3f8>)
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d04a      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a67      	ldr	r2, [pc, #412]	; (8006014 <HAL_DMA_IRQHandler+0x3fc>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d045      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	4a66      	ldr	r2, [pc, #408]	; (8006018 <HAL_DMA_IRQHandler+0x400>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d040      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	4a64      	ldr	r2, [pc, #400]	; (800601c <HAL_DMA_IRQHandler+0x404>)
 8005e8a:	4293      	cmp	r3, r2
 8005e8c:	d03b      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4a63      	ldr	r2, [pc, #396]	; (8006020 <HAL_DMA_IRQHandler+0x408>)
 8005e94:	4293      	cmp	r3, r2
 8005e96:	d036      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a61      	ldr	r2, [pc, #388]	; (8006024 <HAL_DMA_IRQHandler+0x40c>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d031      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a60      	ldr	r2, [pc, #384]	; (8006028 <HAL_DMA_IRQHandler+0x410>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d02c      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a5e      	ldr	r2, [pc, #376]	; (800602c <HAL_DMA_IRQHandler+0x414>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d027      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	4a5d      	ldr	r2, [pc, #372]	; (8006030 <HAL_DMA_IRQHandler+0x418>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d022      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	4a5b      	ldr	r2, [pc, #364]	; (8006034 <HAL_DMA_IRQHandler+0x41c>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d01d      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a5a      	ldr	r2, [pc, #360]	; (8006038 <HAL_DMA_IRQHandler+0x420>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d018      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a58      	ldr	r2, [pc, #352]	; (800603c <HAL_DMA_IRQHandler+0x424>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d013      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4a57      	ldr	r2, [pc, #348]	; (8006040 <HAL_DMA_IRQHandler+0x428>)
 8005ee4:	4293      	cmp	r3, r2
 8005ee6:	d00e      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a55      	ldr	r2, [pc, #340]	; (8006044 <HAL_DMA_IRQHandler+0x42c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d009      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a54      	ldr	r2, [pc, #336]	; (8006048 <HAL_DMA_IRQHandler+0x430>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d004      	beq.n	8005f06 <HAL_DMA_IRQHandler+0x2ee>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a52      	ldr	r2, [pc, #328]	; (800604c <HAL_DMA_IRQHandler+0x434>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d10a      	bne.n	8005f1c <HAL_DMA_IRQHandler+0x304>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	695b      	ldr	r3, [r3, #20]
 8005f0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf14      	ite	ne
 8005f14:	2301      	movne	r3, #1
 8005f16:	2300      	moveq	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	e003      	b.n	8005f24 <HAL_DMA_IRQHandler+0x30c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2300      	movs	r3, #0
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00d      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2201      	movs	r2, #1
 8005f32:	409a      	lsls	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f3c:	f043 0202 	orr.w	r2, r3, #2
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	2204      	movs	r2, #4
 8005f4e:	409a      	lsls	r2, r3
 8005f50:	69bb      	ldr	r3, [r7, #24]
 8005f52:	4013      	ands	r3, r2
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	f000 808f 	beq.w	8006078 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a2c      	ldr	r2, [pc, #176]	; (8006010 <HAL_DMA_IRQHandler+0x3f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a2a      	ldr	r2, [pc, #168]	; (8006014 <HAL_DMA_IRQHandler+0x3fc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a29      	ldr	r2, [pc, #164]	; (8006018 <HAL_DMA_IRQHandler+0x400>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a27      	ldr	r2, [pc, #156]	; (800601c <HAL_DMA_IRQHandler+0x404>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a26      	ldr	r2, [pc, #152]	; (8006020 <HAL_DMA_IRQHandler+0x408>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a24      	ldr	r2, [pc, #144]	; (8006024 <HAL_DMA_IRQHandler+0x40c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a23      	ldr	r2, [pc, #140]	; (8006028 <HAL_DMA_IRQHandler+0x410>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a21      	ldr	r2, [pc, #132]	; (800602c <HAL_DMA_IRQHandler+0x414>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a20      	ldr	r2, [pc, #128]	; (8006030 <HAL_DMA_IRQHandler+0x418>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a1e      	ldr	r2, [pc, #120]	; (8006034 <HAL_DMA_IRQHandler+0x41c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a1d      	ldr	r2, [pc, #116]	; (8006038 <HAL_DMA_IRQHandler+0x420>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a1b      	ldr	r2, [pc, #108]	; (800603c <HAL_DMA_IRQHandler+0x424>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a1a      	ldr	r2, [pc, #104]	; (8006040 <HAL_DMA_IRQHandler+0x428>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a18      	ldr	r2, [pc, #96]	; (8006044 <HAL_DMA_IRQHandler+0x42c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a17      	ldr	r2, [pc, #92]	; (8006048 <HAL_DMA_IRQHandler+0x430>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x3e2>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a15      	ldr	r2, [pc, #84]	; (800604c <HAL_DMA_IRQHandler+0x434>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d12a      	bne.n	8006050 <HAL_DMA_IRQHandler+0x438>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f003 0302 	and.w	r3, r3, #2
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e023      	b.n	8006058 <HAL_DMA_IRQHandler+0x440>
 8006010:	40020010 	.word	0x40020010
 8006014:	40020028 	.word	0x40020028
 8006018:	40020040 	.word	0x40020040
 800601c:	40020058 	.word	0x40020058
 8006020:	40020070 	.word	0x40020070
 8006024:	40020088 	.word	0x40020088
 8006028:	400200a0 	.word	0x400200a0
 800602c:	400200b8 	.word	0x400200b8
 8006030:	40020410 	.word	0x40020410
 8006034:	40020428 	.word	0x40020428
 8006038:	40020440 	.word	0x40020440
 800603c:	40020458 	.word	0x40020458
 8006040:	40020470 	.word	0x40020470
 8006044:	40020488 	.word	0x40020488
 8006048:	400204a0 	.word	0x400204a0
 800604c:	400204b8 	.word	0x400204b8
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2300      	movs	r3, #0
 8006058:	2b00      	cmp	r3, #0
 800605a:	d00d      	beq.n	8006078 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006060:	f003 031f 	and.w	r3, r3, #31
 8006064:	2204      	movs	r2, #4
 8006066:	409a      	lsls	r2, r3
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006070:	f043 0204 	orr.w	r2, r3, #4
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800607c:	f003 031f 	and.w	r3, r3, #31
 8006080:	2210      	movs	r2, #16
 8006082:	409a      	lsls	r2, r3
 8006084:	69bb      	ldr	r3, [r7, #24]
 8006086:	4013      	ands	r3, r2
 8006088:	2b00      	cmp	r3, #0
 800608a:	f000 80a6 	beq.w	80061da <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	4a85      	ldr	r2, [pc, #532]	; (80062a8 <HAL_DMA_IRQHandler+0x690>)
 8006094:	4293      	cmp	r3, r2
 8006096:	d04a      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a83      	ldr	r2, [pc, #524]	; (80062ac <HAL_DMA_IRQHandler+0x694>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d045      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a82      	ldr	r2, [pc, #520]	; (80062b0 <HAL_DMA_IRQHandler+0x698>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d040      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a80      	ldr	r2, [pc, #512]	; (80062b4 <HAL_DMA_IRQHandler+0x69c>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d03b      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a7f      	ldr	r2, [pc, #508]	; (80062b8 <HAL_DMA_IRQHandler+0x6a0>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d036      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a7d      	ldr	r2, [pc, #500]	; (80062bc <HAL_DMA_IRQHandler+0x6a4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d031      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a7c      	ldr	r2, [pc, #496]	; (80062c0 <HAL_DMA_IRQHandler+0x6a8>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d02c      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a7a      	ldr	r2, [pc, #488]	; (80062c4 <HAL_DMA_IRQHandler+0x6ac>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d027      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a79      	ldr	r2, [pc, #484]	; (80062c8 <HAL_DMA_IRQHandler+0x6b0>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d022      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a77      	ldr	r2, [pc, #476]	; (80062cc <HAL_DMA_IRQHandler+0x6b4>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d01d      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a76      	ldr	r2, [pc, #472]	; (80062d0 <HAL_DMA_IRQHandler+0x6b8>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d018      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a74      	ldr	r2, [pc, #464]	; (80062d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d013      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a73      	ldr	r2, [pc, #460]	; (80062d8 <HAL_DMA_IRQHandler+0x6c0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d00e      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a71      	ldr	r2, [pc, #452]	; (80062dc <HAL_DMA_IRQHandler+0x6c4>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d009      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	4a70      	ldr	r2, [pc, #448]	; (80062e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006120:	4293      	cmp	r3, r2
 8006122:	d004      	beq.n	800612e <HAL_DMA_IRQHandler+0x516>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a6e      	ldr	r2, [pc, #440]	; (80062e4 <HAL_DMA_IRQHandler+0x6cc>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d10a      	bne.n	8006144 <HAL_DMA_IRQHandler+0x52c>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0308 	and.w	r3, r3, #8
 8006138:	2b00      	cmp	r3, #0
 800613a:	bf14      	ite	ne
 800613c:	2301      	movne	r3, #1
 800613e:	2300      	moveq	r3, #0
 8006140:	b2db      	uxtb	r3, r3
 8006142:	e009      	b.n	8006158 <HAL_DMA_IRQHandler+0x540>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	2b00      	cmp	r3, #0
 8006150:	bf14      	ite	ne
 8006152:	2301      	movne	r3, #1
 8006154:	2300      	moveq	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	2b00      	cmp	r3, #0
 800615a:	d03e      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006160:	f003 031f 	and.w	r3, r3, #31
 8006164:	2210      	movs	r2, #16
 8006166:	409a      	lsls	r2, r3
 8006168:	6a3b      	ldr	r3, [r7, #32]
 800616a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006176:	2b00      	cmp	r3, #0
 8006178:	d018      	beq.n	80061ac <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006184:	2b00      	cmp	r3, #0
 8006186:	d108      	bne.n	800619a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800618c:	2b00      	cmp	r3, #0
 800618e:	d024      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
 8006198:	e01f      	b.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01b      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061a6:	6878      	ldr	r0, [r7, #4]
 80061a8:	4798      	blx	r3
 80061aa:	e016      	b.n	80061da <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d107      	bne.n	80061ca <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f022 0208 	bic.w	r2, r2, #8
 80061c8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d003      	beq.n	80061da <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061de:	f003 031f 	and.w	r3, r3, #31
 80061e2:	2220      	movs	r2, #32
 80061e4:	409a      	lsls	r2, r3
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	4013      	ands	r3, r2
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8110 	beq.w	8006410 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a2c      	ldr	r2, [pc, #176]	; (80062a8 <HAL_DMA_IRQHandler+0x690>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d04a      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a2b      	ldr	r2, [pc, #172]	; (80062ac <HAL_DMA_IRQHandler+0x694>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d045      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a29      	ldr	r2, [pc, #164]	; (80062b0 <HAL_DMA_IRQHandler+0x698>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d040      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a28      	ldr	r2, [pc, #160]	; (80062b4 <HAL_DMA_IRQHandler+0x69c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d03b      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a26      	ldr	r2, [pc, #152]	; (80062b8 <HAL_DMA_IRQHandler+0x6a0>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d036      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a25      	ldr	r2, [pc, #148]	; (80062bc <HAL_DMA_IRQHandler+0x6a4>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d031      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a23      	ldr	r2, [pc, #140]	; (80062c0 <HAL_DMA_IRQHandler+0x6a8>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d02c      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a22      	ldr	r2, [pc, #136]	; (80062c4 <HAL_DMA_IRQHandler+0x6ac>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d027      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a20      	ldr	r2, [pc, #128]	; (80062c8 <HAL_DMA_IRQHandler+0x6b0>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d022      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a1f      	ldr	r2, [pc, #124]	; (80062cc <HAL_DMA_IRQHandler+0x6b4>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d01d      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <HAL_DMA_IRQHandler+0x6b8>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d018      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_DMA_IRQHandler+0x6bc>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d013      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a1a      	ldr	r2, [pc, #104]	; (80062d8 <HAL_DMA_IRQHandler+0x6c0>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d00e      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a19      	ldr	r2, [pc, #100]	; (80062dc <HAL_DMA_IRQHandler+0x6c4>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d009      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a17      	ldr	r2, [pc, #92]	; (80062e0 <HAL_DMA_IRQHandler+0x6c8>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d004      	beq.n	8006290 <HAL_DMA_IRQHandler+0x678>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a16      	ldr	r2, [pc, #88]	; (80062e4 <HAL_DMA_IRQHandler+0x6cc>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d12b      	bne.n	80062e8 <HAL_DMA_IRQHandler+0x6d0>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f003 0310 	and.w	r3, r3, #16
 800629a:	2b00      	cmp	r3, #0
 800629c:	bf14      	ite	ne
 800629e:	2301      	movne	r3, #1
 80062a0:	2300      	moveq	r3, #0
 80062a2:	b2db      	uxtb	r3, r3
 80062a4:	e02a      	b.n	80062fc <HAL_DMA_IRQHandler+0x6e4>
 80062a6:	bf00      	nop
 80062a8:	40020010 	.word	0x40020010
 80062ac:	40020028 	.word	0x40020028
 80062b0:	40020040 	.word	0x40020040
 80062b4:	40020058 	.word	0x40020058
 80062b8:	40020070 	.word	0x40020070
 80062bc:	40020088 	.word	0x40020088
 80062c0:	400200a0 	.word	0x400200a0
 80062c4:	400200b8 	.word	0x400200b8
 80062c8:	40020410 	.word	0x40020410
 80062cc:	40020428 	.word	0x40020428
 80062d0:	40020440 	.word	0x40020440
 80062d4:	40020458 	.word	0x40020458
 80062d8:	40020470 	.word	0x40020470
 80062dc:	40020488 	.word	0x40020488
 80062e0:	400204a0 	.word	0x400204a0
 80062e4:	400204b8 	.word	0x400204b8
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0302 	and.w	r3, r3, #2
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	bf14      	ite	ne
 80062f6:	2301      	movne	r3, #1
 80062f8:	2300      	moveq	r3, #0
 80062fa:	b2db      	uxtb	r3, r3
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	f000 8087 	beq.w	8006410 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006306:	f003 031f 	and.w	r3, r3, #31
 800630a:	2220      	movs	r2, #32
 800630c:	409a      	lsls	r2, r3
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006318:	b2db      	uxtb	r3, r3
 800631a:	2b04      	cmp	r3, #4
 800631c:	d139      	bne.n	8006392 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f022 0216 	bic.w	r2, r2, #22
 800632c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	695a      	ldr	r2, [r3, #20]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800633c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <HAL_DMA_IRQHandler+0x736>
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	f022 0208 	bic.w	r2, r2, #8
 800635c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006362:	f003 031f 	and.w	r3, r3, #31
 8006366:	223f      	movs	r2, #63	; 0x3f
 8006368:	409a      	lsls	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	609a      	str	r2, [r3, #8]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2201      	movs	r2, #1
 800637a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          if(hdma->XferAbortCallback != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006382:	2b00      	cmp	r3, #0
 8006384:	f000 834a 	beq.w	8006a1c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800638c:	6878      	ldr	r0, [r7, #4]
 800638e:	4798      	blx	r3
          }
          return;
 8006390:	e344      	b.n	8006a1c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800639c:	2b00      	cmp	r3, #0
 800639e:	d018      	beq.n	80063d2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d108      	bne.n	80063c0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d02c      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	4798      	blx	r3
 80063be:	e027      	b.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d023      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	4798      	blx	r3
 80063d0:	e01e      	b.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10f      	bne.n	8006400 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f022 0210 	bic.w	r2, r2, #16
 80063ee:	601a      	str	r2, [r3, #0]

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          }

          if(hdma->XferCpltCallback != NULL)
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006414:	2b00      	cmp	r3, #0
 8006416:	f000 8306 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800641e:	f003 0301 	and.w	r3, r3, #1
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8088 	beq.w	8006538 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2204      	movs	r2, #4
 800642c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a7a      	ldr	r2, [pc, #488]	; (8006620 <HAL_DMA_IRQHandler+0xa08>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d04a      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4a79      	ldr	r2, [pc, #484]	; (8006624 <HAL_DMA_IRQHandler+0xa0c>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d045      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	4a77      	ldr	r2, [pc, #476]	; (8006628 <HAL_DMA_IRQHandler+0xa10>)
 800644a:	4293      	cmp	r3, r2
 800644c:	d040      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	4a76      	ldr	r2, [pc, #472]	; (800662c <HAL_DMA_IRQHandler+0xa14>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d03b      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	4a74      	ldr	r2, [pc, #464]	; (8006630 <HAL_DMA_IRQHandler+0xa18>)
 800645e:	4293      	cmp	r3, r2
 8006460:	d036      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	4a73      	ldr	r2, [pc, #460]	; (8006634 <HAL_DMA_IRQHandler+0xa1c>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d031      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	4a71      	ldr	r2, [pc, #452]	; (8006638 <HAL_DMA_IRQHandler+0xa20>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d02c      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a70      	ldr	r2, [pc, #448]	; (800663c <HAL_DMA_IRQHandler+0xa24>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d027      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	4a6e      	ldr	r2, [pc, #440]	; (8006640 <HAL_DMA_IRQHandler+0xa28>)
 8006486:	4293      	cmp	r3, r2
 8006488:	d022      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	4a6d      	ldr	r2, [pc, #436]	; (8006644 <HAL_DMA_IRQHandler+0xa2c>)
 8006490:	4293      	cmp	r3, r2
 8006492:	d01d      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a6b      	ldr	r2, [pc, #428]	; (8006648 <HAL_DMA_IRQHandler+0xa30>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d018      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a6a      	ldr	r2, [pc, #424]	; (800664c <HAL_DMA_IRQHandler+0xa34>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d013      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	4a68      	ldr	r2, [pc, #416]	; (8006650 <HAL_DMA_IRQHandler+0xa38>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d00e      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a67      	ldr	r2, [pc, #412]	; (8006654 <HAL_DMA_IRQHandler+0xa3c>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d009      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a65      	ldr	r2, [pc, #404]	; (8006658 <HAL_DMA_IRQHandler+0xa40>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d004      	beq.n	80064d0 <HAL_DMA_IRQHandler+0x8b8>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a64      	ldr	r2, [pc, #400]	; (800665c <HAL_DMA_IRQHandler+0xa44>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d108      	bne.n	80064e2 <HAL_DMA_IRQHandler+0x8ca>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f022 0201 	bic.w	r2, r2, #1
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e007      	b.n	80064f2 <HAL_DMA_IRQHandler+0x8da>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f022 0201 	bic.w	r2, r2, #1
 80064f0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	3301      	adds	r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d307      	bcc.n	800650e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0301 	and.w	r3, r3, #1
 8006508:	2b00      	cmp	r3, #0
 800650a:	d1f2      	bne.n	80064f2 <HAL_DMA_IRQHandler+0x8da>
 800650c:	e000      	b.n	8006510 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800650e:	bf00      	nop

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d004      	beq.n	8006530 <HAL_DMA_IRQHandler+0x918>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2203      	movs	r2, #3
 800652a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 800652e:	e003      	b.n	8006538 <HAL_DMA_IRQHandler+0x920>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2201      	movs	r2, #1
 8006534:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }
      }

      if(hdma->XferErrorCallback != NULL)
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800653c:	2b00      	cmp	r3, #0
 800653e:	f000 8272 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	4798      	blx	r3
 800654a:	e26c      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a43      	ldr	r2, [pc, #268]	; (8006660 <HAL_DMA_IRQHandler+0xa48>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d022      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a42      	ldr	r2, [pc, #264]	; (8006664 <HAL_DMA_IRQHandler+0xa4c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d01d      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a40      	ldr	r2, [pc, #256]	; (8006668 <HAL_DMA_IRQHandler+0xa50>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d018      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a3f      	ldr	r2, [pc, #252]	; (800666c <HAL_DMA_IRQHandler+0xa54>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d013      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a3d      	ldr	r2, [pc, #244]	; (8006670 <HAL_DMA_IRQHandler+0xa58>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d00e      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <HAL_DMA_IRQHandler+0xa5c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d009      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a3a      	ldr	r2, [pc, #232]	; (8006678 <HAL_DMA_IRQHandler+0xa60>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d004      	beq.n	800659c <HAL_DMA_IRQHandler+0x984>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a39      	ldr	r2, [pc, #228]	; (800667c <HAL_DMA_IRQHandler+0xa64>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d101      	bne.n	80065a0 <HAL_DMA_IRQHandler+0x988>
 800659c:	2301      	movs	r3, #1
 800659e:	e000      	b.n	80065a2 <HAL_DMA_IRQHandler+0x98a>
 80065a0:	2300      	movs	r3, #0
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f000 823f 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065b4:	f003 031f 	and.w	r3, r3, #31
 80065b8:	2204      	movs	r2, #4
 80065ba:	409a      	lsls	r2, r3
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	4013      	ands	r3, r2
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 80cd 	beq.w	8006760 <HAL_DMA_IRQHandler+0xb48>
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	f000 80c7 	beq.w	8006760 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065d6:	f003 031f 	and.w	r3, r3, #31
 80065da:	2204      	movs	r2, #4
 80065dc:	409a      	lsls	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d049      	beq.n	8006680 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d109      	bne.n	800660a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	f000 8210 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006608:	e20a      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	2b00      	cmp	r3, #0
 8006610:	f000 8206 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800661c:	e200      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
 800661e:	bf00      	nop
 8006620:	40020010 	.word	0x40020010
 8006624:	40020028 	.word	0x40020028
 8006628:	40020040 	.word	0x40020040
 800662c:	40020058 	.word	0x40020058
 8006630:	40020070 	.word	0x40020070
 8006634:	40020088 	.word	0x40020088
 8006638:	400200a0 	.word	0x400200a0
 800663c:	400200b8 	.word	0x400200b8
 8006640:	40020410 	.word	0x40020410
 8006644:	40020428 	.word	0x40020428
 8006648:	40020440 	.word	0x40020440
 800664c:	40020458 	.word	0x40020458
 8006650:	40020470 	.word	0x40020470
 8006654:	40020488 	.word	0x40020488
 8006658:	400204a0 	.word	0x400204a0
 800665c:	400204b8 	.word	0x400204b8
 8006660:	58025408 	.word	0x58025408
 8006664:	5802541c 	.word	0x5802541c
 8006668:	58025430 	.word	0x58025430
 800666c:	58025444 	.word	0x58025444
 8006670:	58025458 	.word	0x58025458
 8006674:	5802546c 	.word	0x5802546c
 8006678:	58025480 	.word	0x58025480
 800667c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	f003 0320 	and.w	r3, r3, #32
 8006686:	2b00      	cmp	r3, #0
 8006688:	d160      	bne.n	800674c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a8c      	ldr	r2, [pc, #560]	; (80068c0 <HAL_DMA_IRQHandler+0xca8>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d04a      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a8a      	ldr	r2, [pc, #552]	; (80068c4 <HAL_DMA_IRQHandler+0xcac>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d045      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a89      	ldr	r2, [pc, #548]	; (80068c8 <HAL_DMA_IRQHandler+0xcb0>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d040      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a87      	ldr	r2, [pc, #540]	; (80068cc <HAL_DMA_IRQHandler+0xcb4>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d03b      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a86      	ldr	r2, [pc, #536]	; (80068d0 <HAL_DMA_IRQHandler+0xcb8>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d036      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4a84      	ldr	r2, [pc, #528]	; (80068d4 <HAL_DMA_IRQHandler+0xcbc>)
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d031      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4a83      	ldr	r2, [pc, #524]	; (80068d8 <HAL_DMA_IRQHandler+0xcc0>)
 80066cc:	4293      	cmp	r3, r2
 80066ce:	d02c      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a81      	ldr	r2, [pc, #516]	; (80068dc <HAL_DMA_IRQHandler+0xcc4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d027      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a80      	ldr	r2, [pc, #512]	; (80068e0 <HAL_DMA_IRQHandler+0xcc8>)
 80066e0:	4293      	cmp	r3, r2
 80066e2:	d022      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	4a7e      	ldr	r2, [pc, #504]	; (80068e4 <HAL_DMA_IRQHandler+0xccc>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d01d      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a7d      	ldr	r2, [pc, #500]	; (80068e8 <HAL_DMA_IRQHandler+0xcd0>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d018      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4a7b      	ldr	r2, [pc, #492]	; (80068ec <HAL_DMA_IRQHandler+0xcd4>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d013      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	4a7a      	ldr	r2, [pc, #488]	; (80068f0 <HAL_DMA_IRQHandler+0xcd8>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d00e      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	4a78      	ldr	r2, [pc, #480]	; (80068f4 <HAL_DMA_IRQHandler+0xcdc>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d009      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4a77      	ldr	r2, [pc, #476]	; (80068f8 <HAL_DMA_IRQHandler+0xce0>)
 800671c:	4293      	cmp	r3, r2
 800671e:	d004      	beq.n	800672a <HAL_DMA_IRQHandler+0xb12>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a75      	ldr	r2, [pc, #468]	; (80068fc <HAL_DMA_IRQHandler+0xce4>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d108      	bne.n	800673c <HAL_DMA_IRQHandler+0xb24>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f022 0208 	bic.w	r2, r2, #8
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	e007      	b.n	800674c <HAL_DMA_IRQHandler+0xb34>
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	681a      	ldr	r2, [r3, #0]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f022 0204 	bic.w	r2, r2, #4
 800674a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006750:	2b00      	cmp	r3, #0
 8006752:	f000 8165 	beq.w	8006a20 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800675a:	6878      	ldr	r0, [r7, #4]
 800675c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800675e:	e15f      	b.n	8006a20 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006764:	f003 031f 	and.w	r3, r3, #31
 8006768:	2202      	movs	r2, #2
 800676a:	409a      	lsls	r2, r3
 800676c:	697b      	ldr	r3, [r7, #20]
 800676e:	4013      	ands	r3, r2
 8006770:	2b00      	cmp	r3, #0
 8006772:	f000 80c5 	beq.w	8006900 <HAL_DMA_IRQHandler+0xce8>
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	f000 80bf 	beq.w	8006900 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006786:	f003 031f 	and.w	r3, r3, #31
 800678a:	2202      	movs	r2, #2
 800678c:	409a      	lsls	r2, r3
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006798:	2b00      	cmp	r3, #0
 800679a:	d018      	beq.n	80067ce <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800679c:	693b      	ldr	r3, [r7, #16]
 800679e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d109      	bne.n	80067ba <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	f000 813a 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067b8:	e134      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067be:	2b00      	cmp	r3, #0
 80067c0:	f000 8130 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80067cc:	e12a      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	f003 0320 	and.w	r3, r3, #32
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d168      	bne.n	80068aa <HAL_DMA_IRQHandler+0xc92>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a38      	ldr	r2, [pc, #224]	; (80068c0 <HAL_DMA_IRQHandler+0xca8>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d04a      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a37      	ldr	r2, [pc, #220]	; (80068c4 <HAL_DMA_IRQHandler+0xcac>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d045      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a35      	ldr	r2, [pc, #212]	; (80068c8 <HAL_DMA_IRQHandler+0xcb0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d040      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a34      	ldr	r2, [pc, #208]	; (80068cc <HAL_DMA_IRQHandler+0xcb4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d03b      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a32      	ldr	r2, [pc, #200]	; (80068d0 <HAL_DMA_IRQHandler+0xcb8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d036      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a31      	ldr	r2, [pc, #196]	; (80068d4 <HAL_DMA_IRQHandler+0xcbc>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d031      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a2f      	ldr	r2, [pc, #188]	; (80068d8 <HAL_DMA_IRQHandler+0xcc0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d02c      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	4a2e      	ldr	r2, [pc, #184]	; (80068dc <HAL_DMA_IRQHandler+0xcc4>)
 8006824:	4293      	cmp	r3, r2
 8006826:	d027      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	4a2c      	ldr	r2, [pc, #176]	; (80068e0 <HAL_DMA_IRQHandler+0xcc8>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d022      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4a2b      	ldr	r2, [pc, #172]	; (80068e4 <HAL_DMA_IRQHandler+0xccc>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d01d      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	4a29      	ldr	r2, [pc, #164]	; (80068e8 <HAL_DMA_IRQHandler+0xcd0>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d018      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a28      	ldr	r2, [pc, #160]	; (80068ec <HAL_DMA_IRQHandler+0xcd4>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d013      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	4a26      	ldr	r2, [pc, #152]	; (80068f0 <HAL_DMA_IRQHandler+0xcd8>)
 8006856:	4293      	cmp	r3, r2
 8006858:	d00e      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a25      	ldr	r2, [pc, #148]	; (80068f4 <HAL_DMA_IRQHandler+0xcdc>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d009      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a23      	ldr	r2, [pc, #140]	; (80068f8 <HAL_DMA_IRQHandler+0xce0>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d004      	beq.n	8006878 <HAL_DMA_IRQHandler+0xc60>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a22      	ldr	r2, [pc, #136]	; (80068fc <HAL_DMA_IRQHandler+0xce4>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d108      	bne.n	800688a <HAL_DMA_IRQHandler+0xc72>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f022 0214 	bic.w	r2, r2, #20
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	e007      	b.n	800689a <HAL_DMA_IRQHandler+0xc82>
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 020a 	bic.w	r2, r2, #10
 8006898:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	f000 80b8 	beq.w	8006a24 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068bc:	e0b2      	b.n	8006a24 <HAL_DMA_IRQHandler+0xe0c>
 80068be:	bf00      	nop
 80068c0:	40020010 	.word	0x40020010
 80068c4:	40020028 	.word	0x40020028
 80068c8:	40020040 	.word	0x40020040
 80068cc:	40020058 	.word	0x40020058
 80068d0:	40020070 	.word	0x40020070
 80068d4:	40020088 	.word	0x40020088
 80068d8:	400200a0 	.word	0x400200a0
 80068dc:	400200b8 	.word	0x400200b8
 80068e0:	40020410 	.word	0x40020410
 80068e4:	40020428 	.word	0x40020428
 80068e8:	40020440 	.word	0x40020440
 80068ec:	40020458 	.word	0x40020458
 80068f0:	40020470 	.word	0x40020470
 80068f4:	40020488 	.word	0x40020488
 80068f8:	400204a0 	.word	0x400204a0
 80068fc:	400204b8 	.word	0x400204b8
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006904:	f003 031f 	and.w	r3, r3, #31
 8006908:	2208      	movs	r2, #8
 800690a:	409a      	lsls	r2, r3
 800690c:	697b      	ldr	r3, [r7, #20]
 800690e:	4013      	ands	r3, r2
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 8088 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f003 0308 	and.w	r3, r3, #8
 800691c:	2b00      	cmp	r3, #0
 800691e:	f000 8082 	beq.w	8006a26 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a41      	ldr	r2, [pc, #260]	; (8006a2c <HAL_DMA_IRQHandler+0xe14>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d04a      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a3f      	ldr	r2, [pc, #252]	; (8006a30 <HAL_DMA_IRQHandler+0xe18>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d045      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a3e      	ldr	r2, [pc, #248]	; (8006a34 <HAL_DMA_IRQHandler+0xe1c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d040      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	4a3c      	ldr	r2, [pc, #240]	; (8006a38 <HAL_DMA_IRQHandler+0xe20>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d03b      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a3b      	ldr	r2, [pc, #236]	; (8006a3c <HAL_DMA_IRQHandler+0xe24>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d036      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a39      	ldr	r2, [pc, #228]	; (8006a40 <HAL_DMA_IRQHandler+0xe28>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d031      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a38      	ldr	r2, [pc, #224]	; (8006a44 <HAL_DMA_IRQHandler+0xe2c>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d02c      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a36      	ldr	r2, [pc, #216]	; (8006a48 <HAL_DMA_IRQHandler+0xe30>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d027      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	4a35      	ldr	r2, [pc, #212]	; (8006a4c <HAL_DMA_IRQHandler+0xe34>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d022      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a33      	ldr	r2, [pc, #204]	; (8006a50 <HAL_DMA_IRQHandler+0xe38>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d01d      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	4a32      	ldr	r2, [pc, #200]	; (8006a54 <HAL_DMA_IRQHandler+0xe3c>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d018      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a30      	ldr	r2, [pc, #192]	; (8006a58 <HAL_DMA_IRQHandler+0xe40>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d013      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	4a2f      	ldr	r2, [pc, #188]	; (8006a5c <HAL_DMA_IRQHandler+0xe44>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d00e      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a2d      	ldr	r2, [pc, #180]	; (8006a60 <HAL_DMA_IRQHandler+0xe48>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d009      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a2c      	ldr	r2, [pc, #176]	; (8006a64 <HAL_DMA_IRQHandler+0xe4c>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d004      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xdaa>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <HAL_DMA_IRQHandler+0xe50>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d108      	bne.n	80069d4 <HAL_DMA_IRQHandler+0xdbc>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f022 021c 	bic.w	r2, r2, #28
 80069d0:	601a      	str	r2, [r3, #0]
 80069d2:	e007      	b.n	80069e4 <HAL_DMA_IRQHandler+0xdcc>
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f022 020e 	bic.w	r2, r2, #14
 80069e2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069e8:	f003 031f 	and.w	r3, r3, #31
 80069ec:	2201      	movs	r2, #1
 80069ee:	409a      	lsls	r2, r3
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2201      	movs	r2, #1
 8006a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      if (hdma->XferErrorCallback != NULL)
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d009      	beq.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a16:	6878      	ldr	r0, [r7, #4]
 8006a18:	4798      	blx	r3
 8006a1a:	e004      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006a1c:	bf00      	nop
 8006a1e:	e002      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a20:	bf00      	nop
 8006a22:	e000      	b.n	8006a26 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006a24:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006a26:	3728      	adds	r7, #40	; 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	40020010 	.word	0x40020010
 8006a30:	40020028 	.word	0x40020028
 8006a34:	40020040 	.word	0x40020040
 8006a38:	40020058 	.word	0x40020058
 8006a3c:	40020070 	.word	0x40020070
 8006a40:	40020088 	.word	0x40020088
 8006a44:	400200a0 	.word	0x400200a0
 8006a48:	400200b8 	.word	0x400200b8
 8006a4c:	40020410 	.word	0x40020410
 8006a50:	40020428 	.word	0x40020428
 8006a54:	40020440 	.word	0x40020440
 8006a58:	40020458 	.word	0x40020458
 8006a5c:	40020470 	.word	0x40020470
 8006a60:	40020488 	.word	0x40020488
 8006a64:	400204a0 	.word	0x400204a0
 8006a68:	400204b8 	.word	0x400204b8

08006a6c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a6c:	b480      	push	{r7}
 8006a6e:	b087      	sub	sp, #28
 8006a70:	af00      	add	r7, sp, #0
 8006a72:	60f8      	str	r0, [r7, #12]
 8006a74:	60b9      	str	r1, [r7, #8]
 8006a76:	607a      	str	r2, [r7, #4]
 8006a78:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a7e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a84:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4a84      	ldr	r2, [pc, #528]	; (8006c9c <DMA_SetConfig+0x230>)
 8006a8c:	4293      	cmp	r3, r2
 8006a8e:	d072      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a82      	ldr	r2, [pc, #520]	; (8006ca0 <DMA_SetConfig+0x234>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d06d      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	4a81      	ldr	r2, [pc, #516]	; (8006ca4 <DMA_SetConfig+0x238>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d068      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	4a7f      	ldr	r2, [pc, #508]	; (8006ca8 <DMA_SetConfig+0x23c>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d063      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	4a7e      	ldr	r2, [pc, #504]	; (8006cac <DMA_SetConfig+0x240>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d05e      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a7c      	ldr	r2, [pc, #496]	; (8006cb0 <DMA_SetConfig+0x244>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d059      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	4a7b      	ldr	r2, [pc, #492]	; (8006cb4 <DMA_SetConfig+0x248>)
 8006ac8:	4293      	cmp	r3, r2
 8006aca:	d054      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a79      	ldr	r2, [pc, #484]	; (8006cb8 <DMA_SetConfig+0x24c>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d04f      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a78      	ldr	r2, [pc, #480]	; (8006cbc <DMA_SetConfig+0x250>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d04a      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4a76      	ldr	r2, [pc, #472]	; (8006cc0 <DMA_SetConfig+0x254>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d045      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	4a75      	ldr	r2, [pc, #468]	; (8006cc4 <DMA_SetConfig+0x258>)
 8006af0:	4293      	cmp	r3, r2
 8006af2:	d040      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a73      	ldr	r2, [pc, #460]	; (8006cc8 <DMA_SetConfig+0x25c>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d03b      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a72      	ldr	r2, [pc, #456]	; (8006ccc <DMA_SetConfig+0x260>)
 8006b04:	4293      	cmp	r3, r2
 8006b06:	d036      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	4a70      	ldr	r2, [pc, #448]	; (8006cd0 <DMA_SetConfig+0x264>)
 8006b0e:	4293      	cmp	r3, r2
 8006b10:	d031      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4a6f      	ldr	r2, [pc, #444]	; (8006cd4 <DMA_SetConfig+0x268>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d02c      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a6d      	ldr	r2, [pc, #436]	; (8006cd8 <DMA_SetConfig+0x26c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d027      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	4a6c      	ldr	r2, [pc, #432]	; (8006cdc <DMA_SetConfig+0x270>)
 8006b2c:	4293      	cmp	r3, r2
 8006b2e:	d022      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a6a      	ldr	r2, [pc, #424]	; (8006ce0 <DMA_SetConfig+0x274>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d01d      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	4a69      	ldr	r2, [pc, #420]	; (8006ce4 <DMA_SetConfig+0x278>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d018      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	4a67      	ldr	r2, [pc, #412]	; (8006ce8 <DMA_SetConfig+0x27c>)
 8006b4a:	4293      	cmp	r3, r2
 8006b4c:	d013      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	4a66      	ldr	r2, [pc, #408]	; (8006cec <DMA_SetConfig+0x280>)
 8006b54:	4293      	cmp	r3, r2
 8006b56:	d00e      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	4a64      	ldr	r2, [pc, #400]	; (8006cf0 <DMA_SetConfig+0x284>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d009      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a63      	ldr	r2, [pc, #396]	; (8006cf4 <DMA_SetConfig+0x288>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d004      	beq.n	8006b76 <DMA_SetConfig+0x10a>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a61      	ldr	r2, [pc, #388]	; (8006cf8 <DMA_SetConfig+0x28c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d101      	bne.n	8006b7a <DMA_SetConfig+0x10e>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <DMA_SetConfig+0x110>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d00d      	beq.n	8006b9c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b84:	68fa      	ldr	r2, [r7, #12]
 8006b86:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006b88:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d004      	beq.n	8006b9c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b96:	68fa      	ldr	r2, [r7, #12]
 8006b98:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006b9a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a3e      	ldr	r2, [pc, #248]	; (8006c9c <DMA_SetConfig+0x230>)
 8006ba2:	4293      	cmp	r3, r2
 8006ba4:	d04a      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a3d      	ldr	r2, [pc, #244]	; (8006ca0 <DMA_SetConfig+0x234>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d045      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	4a3b      	ldr	r2, [pc, #236]	; (8006ca4 <DMA_SetConfig+0x238>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d040      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a3a      	ldr	r2, [pc, #232]	; (8006ca8 <DMA_SetConfig+0x23c>)
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d03b      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a38      	ldr	r2, [pc, #224]	; (8006cac <DMA_SetConfig+0x240>)
 8006bca:	4293      	cmp	r3, r2
 8006bcc:	d036      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	4a37      	ldr	r2, [pc, #220]	; (8006cb0 <DMA_SetConfig+0x244>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d031      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a35      	ldr	r2, [pc, #212]	; (8006cb4 <DMA_SetConfig+0x248>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d02c      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	4a34      	ldr	r2, [pc, #208]	; (8006cb8 <DMA_SetConfig+0x24c>)
 8006be8:	4293      	cmp	r3, r2
 8006bea:	d027      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	4a32      	ldr	r2, [pc, #200]	; (8006cbc <DMA_SetConfig+0x250>)
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d022      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	4a31      	ldr	r2, [pc, #196]	; (8006cc0 <DMA_SetConfig+0x254>)
 8006bfc:	4293      	cmp	r3, r2
 8006bfe:	d01d      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	4a2f      	ldr	r2, [pc, #188]	; (8006cc4 <DMA_SetConfig+0x258>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d018      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	4a2e      	ldr	r2, [pc, #184]	; (8006cc8 <DMA_SetConfig+0x25c>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d013      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4a2c      	ldr	r2, [pc, #176]	; (8006ccc <DMA_SetConfig+0x260>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d00e      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a2b      	ldr	r2, [pc, #172]	; (8006cd0 <DMA_SetConfig+0x264>)
 8006c24:	4293      	cmp	r3, r2
 8006c26:	d009      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a29      	ldr	r2, [pc, #164]	; (8006cd4 <DMA_SetConfig+0x268>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <DMA_SetConfig+0x1d0>
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a28      	ldr	r2, [pc, #160]	; (8006cd8 <DMA_SetConfig+0x26c>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d101      	bne.n	8006c40 <DMA_SetConfig+0x1d4>
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	e000      	b.n	8006c42 <DMA_SetConfig+0x1d6>
 8006c40:	2300      	movs	r3, #0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d05a      	beq.n	8006cfc <DMA_SetConfig+0x290>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006c4a:	f003 031f 	and.w	r3, r3, #31
 8006c4e:	223f      	movs	r2, #63	; 0x3f
 8006c50:	409a      	lsls	r2, r3
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006c64:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d108      	bne.n	8006c88 <DMA_SetConfig+0x21c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006c86:	e087      	b.n	8006d98 <DMA_SetConfig+0x32c>
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	687a      	ldr	r2, [r7, #4]
 8006c96:	60da      	str	r2, [r3, #12]
}
 8006c98:	e07e      	b.n	8006d98 <DMA_SetConfig+0x32c>
 8006c9a:	bf00      	nop
 8006c9c:	40020010 	.word	0x40020010
 8006ca0:	40020028 	.word	0x40020028
 8006ca4:	40020040 	.word	0x40020040
 8006ca8:	40020058 	.word	0x40020058
 8006cac:	40020070 	.word	0x40020070
 8006cb0:	40020088 	.word	0x40020088
 8006cb4:	400200a0 	.word	0x400200a0
 8006cb8:	400200b8 	.word	0x400200b8
 8006cbc:	40020410 	.word	0x40020410
 8006cc0:	40020428 	.word	0x40020428
 8006cc4:	40020440 	.word	0x40020440
 8006cc8:	40020458 	.word	0x40020458
 8006ccc:	40020470 	.word	0x40020470
 8006cd0:	40020488 	.word	0x40020488
 8006cd4:	400204a0 	.word	0x400204a0
 8006cd8:	400204b8 	.word	0x400204b8
 8006cdc:	58025408 	.word	0x58025408
 8006ce0:	5802541c 	.word	0x5802541c
 8006ce4:	58025430 	.word	0x58025430
 8006ce8:	58025444 	.word	0x58025444
 8006cec:	58025458 	.word	0x58025458
 8006cf0:	5802546c 	.word	0x5802546c
 8006cf4:	58025480 	.word	0x58025480
 8006cf8:	58025494 	.word	0x58025494
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	4a28      	ldr	r2, [pc, #160]	; (8006da4 <DMA_SetConfig+0x338>)
 8006d02:	4293      	cmp	r3, r2
 8006d04:	d022      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a27      	ldr	r2, [pc, #156]	; (8006da8 <DMA_SetConfig+0x33c>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d01d      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a25      	ldr	r2, [pc, #148]	; (8006dac <DMA_SetConfig+0x340>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d018      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4a24      	ldr	r2, [pc, #144]	; (8006db0 <DMA_SetConfig+0x344>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d013      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <DMA_SetConfig+0x348>)
 8006d2a:	4293      	cmp	r3, r2
 8006d2c:	d00e      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	4a21      	ldr	r2, [pc, #132]	; (8006db8 <DMA_SetConfig+0x34c>)
 8006d34:	4293      	cmp	r3, r2
 8006d36:	d009      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	4a1f      	ldr	r2, [pc, #124]	; (8006dbc <DMA_SetConfig+0x350>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d004      	beq.n	8006d4c <DMA_SetConfig+0x2e0>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a1e      	ldr	r2, [pc, #120]	; (8006dc0 <DMA_SetConfig+0x354>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d101      	bne.n	8006d50 <DMA_SetConfig+0x2e4>
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e000      	b.n	8006d52 <DMA_SetConfig+0x2e6>
 8006d50:	2300      	movs	r3, #0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d020      	beq.n	8006d98 <DMA_SetConfig+0x32c>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d5a:	f003 031f 	and.w	r3, r3, #31
 8006d5e:	2201      	movs	r2, #1
 8006d60:	409a      	lsls	r2, r3
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	683a      	ldr	r2, [r7, #0]
 8006d6c:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	689b      	ldr	r3, [r3, #8]
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d108      	bne.n	8006d88 <DMA_SetConfig+0x31c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	687a      	ldr	r2, [r7, #4]
 8006d7c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	60da      	str	r2, [r3, #12]
}
 8006d86:	e007      	b.n	8006d98 <DMA_SetConfig+0x32c>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68ba      	ldr	r2, [r7, #8]
 8006d8e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	687a      	ldr	r2, [r7, #4]
 8006d96:	60da      	str	r2, [r3, #12]
}
 8006d98:	bf00      	nop
 8006d9a:	371c      	adds	r7, #28
 8006d9c:	46bd      	mov	sp, r7
 8006d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da2:	4770      	bx	lr
 8006da4:	58025408 	.word	0x58025408
 8006da8:	5802541c 	.word	0x5802541c
 8006dac:	58025430 	.word	0x58025430
 8006db0:	58025444 	.word	0x58025444
 8006db4:	58025458 	.word	0x58025458
 8006db8:	5802546c 	.word	0x5802546c
 8006dbc:	58025480 	.word	0x58025480
 8006dc0:	58025494 	.word	0x58025494

08006dc4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a42      	ldr	r2, [pc, #264]	; (8006edc <DMA_CalcBaseAndBitshift+0x118>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d04a      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a41      	ldr	r2, [pc, #260]	; (8006ee0 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d045      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a3f      	ldr	r2, [pc, #252]	; (8006ee4 <DMA_CalcBaseAndBitshift+0x120>)
 8006de6:	4293      	cmp	r3, r2
 8006de8:	d040      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	4a3e      	ldr	r2, [pc, #248]	; (8006ee8 <DMA_CalcBaseAndBitshift+0x124>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d03b      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	4a3c      	ldr	r2, [pc, #240]	; (8006eec <DMA_CalcBaseAndBitshift+0x128>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d036      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	4a3b      	ldr	r2, [pc, #236]	; (8006ef0 <DMA_CalcBaseAndBitshift+0x12c>)
 8006e04:	4293      	cmp	r3, r2
 8006e06:	d031      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a39      	ldr	r2, [pc, #228]	; (8006ef4 <DMA_CalcBaseAndBitshift+0x130>)
 8006e0e:	4293      	cmp	r3, r2
 8006e10:	d02c      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	4a38      	ldr	r2, [pc, #224]	; (8006ef8 <DMA_CalcBaseAndBitshift+0x134>)
 8006e18:	4293      	cmp	r3, r2
 8006e1a:	d027      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	4a36      	ldr	r2, [pc, #216]	; (8006efc <DMA_CalcBaseAndBitshift+0x138>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d022      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	4a35      	ldr	r2, [pc, #212]	; (8006f00 <DMA_CalcBaseAndBitshift+0x13c>)
 8006e2c:	4293      	cmp	r3, r2
 8006e2e:	d01d      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a33      	ldr	r2, [pc, #204]	; (8006f04 <DMA_CalcBaseAndBitshift+0x140>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d018      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	4a32      	ldr	r2, [pc, #200]	; (8006f08 <DMA_CalcBaseAndBitshift+0x144>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d013      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	4a30      	ldr	r2, [pc, #192]	; (8006f0c <DMA_CalcBaseAndBitshift+0x148>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00e      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	4a2f      	ldr	r2, [pc, #188]	; (8006f10 <DMA_CalcBaseAndBitshift+0x14c>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d009      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	4a2d      	ldr	r2, [pc, #180]	; (8006f14 <DMA_CalcBaseAndBitshift+0x150>)
 8006e5e:	4293      	cmp	r3, r2
 8006e60:	d004      	beq.n	8006e6c <DMA_CalcBaseAndBitshift+0xa8>
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4a2c      	ldr	r2, [pc, #176]	; (8006f18 <DMA_CalcBaseAndBitshift+0x154>)
 8006e68:	4293      	cmp	r3, r2
 8006e6a:	d101      	bne.n	8006e70 <DMA_CalcBaseAndBitshift+0xac>
 8006e6c:	2301      	movs	r3, #1
 8006e6e:	e000      	b.n	8006e72 <DMA_CalcBaseAndBitshift+0xae>
 8006e70:	2300      	movs	r3, #0
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d024      	beq.n	8006ec0 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	3b10      	subs	r3, #16
 8006e7e:	4a27      	ldr	r2, [pc, #156]	; (8006f1c <DMA_CalcBaseAndBitshift+0x158>)
 8006e80:	fba2 2303 	umull	r2, r3, r2, r3
 8006e84:	091b      	lsrs	r3, r3, #4
 8006e86:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f003 0307 	and.w	r3, r3, #7
 8006e8e:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <DMA_CalcBaseAndBitshift+0x15c>)
 8006e90:	5cd3      	ldrb	r3, [r2, r3]
 8006e92:	461a      	mov	r2, r3
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2b03      	cmp	r3, #3
 8006e9c:	d908      	bls.n	8006eb0 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	4b1f      	ldr	r3, [pc, #124]	; (8006f24 <DMA_CalcBaseAndBitshift+0x160>)
 8006ea6:	4013      	ands	r3, r2
 8006ea8:	1d1a      	adds	r2, r3, #4
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	659a      	str	r2, [r3, #88]	; 0x58
 8006eae:	e00d      	b.n	8006ecc <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4b1b      	ldr	r3, [pc, #108]	; (8006f24 <DMA_CalcBaseAndBitshift+0x160>)
 8006eb8:	4013      	ands	r3, r2
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6593      	str	r3, [r2, #88]	; 0x58
 8006ebe:	e005      	b.n	8006ecc <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006ed0:	4618      	mov	r0, r3
 8006ed2:	3714      	adds	r7, #20
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr
 8006edc:	40020010 	.word	0x40020010
 8006ee0:	40020028 	.word	0x40020028
 8006ee4:	40020040 	.word	0x40020040
 8006ee8:	40020058 	.word	0x40020058
 8006eec:	40020070 	.word	0x40020070
 8006ef0:	40020088 	.word	0x40020088
 8006ef4:	400200a0 	.word	0x400200a0
 8006ef8:	400200b8 	.word	0x400200b8
 8006efc:	40020410 	.word	0x40020410
 8006f00:	40020428 	.word	0x40020428
 8006f04:	40020440 	.word	0x40020440
 8006f08:	40020458 	.word	0x40020458
 8006f0c:	40020470 	.word	0x40020470
 8006f10:	40020488 	.word	0x40020488
 8006f14:	400204a0 	.word	0x400204a0
 8006f18:	400204b8 	.word	0x400204b8
 8006f1c:	aaaaaaab 	.word	0xaaaaaaab
 8006f20:	0801c550 	.word	0x0801c550
 8006f24:	fffffc00 	.word	0xfffffc00

08006f28 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006f28:	b480      	push	{r7}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d120      	bne.n	8006f7e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f40:	2b03      	cmp	r3, #3
 8006f42:	d858      	bhi.n	8006ff6 <DMA_CheckFifoParam+0xce>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <DMA_CheckFifoParam+0x24>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f5d 	.word	0x08006f5d
 8006f50:	08006f6f 	.word	0x08006f6f
 8006f54:	08006f5d 	.word	0x08006f5d
 8006f58:	08006ff7 	.word	0x08006ff7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f60:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d048      	beq.n	8006ffa <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f6c:	e045      	b.n	8006ffa <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f72:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006f76:	d142      	bne.n	8006ffe <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006f7c:	e03f      	b.n	8006ffe <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	699b      	ldr	r3, [r3, #24]
 8006f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f86:	d123      	bne.n	8006fd0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d838      	bhi.n	8007002 <DMA_CheckFifoParam+0xda>
 8006f90:	a201      	add	r2, pc, #4	; (adr r2, 8006f98 <DMA_CheckFifoParam+0x70>)
 8006f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f96:	bf00      	nop
 8006f98:	08006fa9 	.word	0x08006fa9
 8006f9c:	08006faf 	.word	0x08006faf
 8006fa0:	08006fa9 	.word	0x08006fa9
 8006fa4:	08006fc1 	.word	0x08006fc1
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	73fb      	strb	r3, [r7, #15]
        break;
 8006fac:	e030      	b.n	8007010 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d025      	beq.n	8007006 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fbe:	e022      	b.n	8007006 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006fc8:	d11f      	bne.n	800700a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8006fce:	e01c      	b.n	800700a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd4:	2b02      	cmp	r3, #2
 8006fd6:	d902      	bls.n	8006fde <DMA_CheckFifoParam+0xb6>
 8006fd8:	2b03      	cmp	r3, #3
 8006fda:	d003      	beq.n	8006fe4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006fdc:	e018      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	73fb      	strb	r3, [r7, #15]
        break;
 8006fe2:	e015      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d00e      	beq.n	800700e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8006ff0:	2301      	movs	r3, #1
 8006ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff4:	e00b      	b.n	800700e <DMA_CheckFifoParam+0xe6>
        break;
 8006ff6:	bf00      	nop
 8006ff8:	e00a      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        break;
 8006ffa:	bf00      	nop
 8006ffc:	e008      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        break;
 8006ffe:	bf00      	nop
 8007000:	e006      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        break;
 8007002:	bf00      	nop
 8007004:	e004      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        break;
 8007006:	bf00      	nop
 8007008:	e002      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
        break;
 800700a:	bf00      	nop
 800700c:	e000      	b.n	8007010 <DMA_CheckFifoParam+0xe8>
    break;
 800700e:	bf00      	nop
    }
  }

  return status;
 8007010:	7bfb      	ldrb	r3, [r7, #15]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3714      	adds	r7, #20
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop

08007020 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007020:	b480      	push	{r7}
 8007022:	b085      	sub	sp, #20
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	4a38      	ldr	r2, [pc, #224]	; (8007114 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007034:	4293      	cmp	r3, r2
 8007036:	d022      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4a36      	ldr	r2, [pc, #216]	; (8007118 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800703e:	4293      	cmp	r3, r2
 8007040:	d01d      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4a35      	ldr	r2, [pc, #212]	; (800711c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8007048:	4293      	cmp	r3, r2
 800704a:	d018      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a33      	ldr	r2, [pc, #204]	; (8007120 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d013      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a32      	ldr	r2, [pc, #200]	; (8007124 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d00e      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	4a30      	ldr	r2, [pc, #192]	; (8007128 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8007066:	4293      	cmp	r3, r2
 8007068:	d009      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a2f      	ldr	r2, [pc, #188]	; (800712c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007070:	4293      	cmp	r3, r2
 8007072:	d004      	beq.n	800707e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	4a2d      	ldr	r2, [pc, #180]	; (8007130 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800707a:	4293      	cmp	r3, r2
 800707c:	d101      	bne.n	8007082 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007082:	2300      	movs	r3, #0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	3b08      	subs	r3, #8
 8007090:	4a28      	ldr	r2, [pc, #160]	; (8007134 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007092:	fba2 2303 	umull	r2, r3, r2, r3
 8007096:	091b      	lsrs	r3, r3, #4
 8007098:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4b26      	ldr	r3, [pc, #152]	; (8007138 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800709e:	4413      	add	r3, r2
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	461a      	mov	r2, r3
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a24      	ldr	r2, [pc, #144]	; (800713c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80070ac:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f003 031f 	and.w	r3, r3, #31
 80070b4:	2201      	movs	r2, #1
 80070b6:	409a      	lsls	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80070bc:	e024      	b.n	8007108 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	3b10      	subs	r3, #16
 80070c6:	4a1e      	ldr	r2, [pc, #120]	; (8007140 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80070c8:	fba2 2303 	umull	r2, r3, r2, r3
 80070cc:	091b      	lsrs	r3, r3, #4
 80070ce:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	4a1c      	ldr	r2, [pc, #112]	; (8007144 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80070d4:	4293      	cmp	r3, r2
 80070d6:	d806      	bhi.n	80070e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80070d8:	68bb      	ldr	r3, [r7, #8]
 80070da:	4a1b      	ldr	r2, [pc, #108]	; (8007148 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d902      	bls.n	80070e6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	3308      	adds	r3, #8
 80070e4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80070e6:	68fa      	ldr	r2, [r7, #12]
 80070e8:	4b18      	ldr	r3, [pc, #96]	; (800714c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80070ea:	4413      	add	r3, r2
 80070ec:	009b      	lsls	r3, r3, #2
 80070ee:	461a      	mov	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a16      	ldr	r2, [pc, #88]	; (8007150 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80070f8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	f003 031f 	and.w	r3, r3, #31
 8007100:	2201      	movs	r2, #1
 8007102:	409a      	lsls	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007108:	bf00      	nop
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	58025408 	.word	0x58025408
 8007118:	5802541c 	.word	0x5802541c
 800711c:	58025430 	.word	0x58025430
 8007120:	58025444 	.word	0x58025444
 8007124:	58025458 	.word	0x58025458
 8007128:	5802546c 	.word	0x5802546c
 800712c:	58025480 	.word	0x58025480
 8007130:	58025494 	.word	0x58025494
 8007134:	cccccccd 	.word	0xcccccccd
 8007138:	16009600 	.word	0x16009600
 800713c:	58025880 	.word	0x58025880
 8007140:	aaaaaaab 	.word	0xaaaaaaab
 8007144:	400204b8 	.word	0x400204b8
 8007148:	4002040f 	.word	0x4002040f
 800714c:	10008200 	.word	0x10008200
 8007150:	40020880 	.word	0x40020880

08007154 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007154:	b480      	push	{r7}
 8007156:	b085      	sub	sp, #20
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	b2db      	uxtb	r3, r3
 8007162:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d04a      	beq.n	8007200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b08      	cmp	r3, #8
 800716e:	d847      	bhi.n	8007200 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a25      	ldr	r2, [pc, #148]	; (800720c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d022      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	4a24      	ldr	r2, [pc, #144]	; (8007210 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007180:	4293      	cmp	r3, r2
 8007182:	d01d      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	4a22      	ldr	r2, [pc, #136]	; (8007214 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800718a:	4293      	cmp	r3, r2
 800718c:	d018      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	4a21      	ldr	r2, [pc, #132]	; (8007218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007194:	4293      	cmp	r3, r2
 8007196:	d013      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	4a1f      	ldr	r2, [pc, #124]	; (800721c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00e      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	4a1e      	ldr	r2, [pc, #120]	; (8007220 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80071a8:	4293      	cmp	r3, r2
 80071aa:	d009      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	4a1c      	ldr	r2, [pc, #112]	; (8007224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80071b2:	4293      	cmp	r3, r2
 80071b4:	d004      	beq.n	80071c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	4a1b      	ldr	r2, [pc, #108]	; (8007228 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d101      	bne.n	80071c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80071c0:	2301      	movs	r3, #1
 80071c2:	e000      	b.n	80071c6 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80071c4:	2300      	movs	r3, #0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00a      	beq.n	80071e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80071ca:	68fa      	ldr	r2, [r7, #12]
 80071cc:	4b17      	ldr	r3, [pc, #92]	; (800722c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	461a      	mov	r2, r3
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a15      	ldr	r2, [pc, #84]	; (8007230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80071dc:	671a      	str	r2, [r3, #112]	; 0x70
 80071de:	e009      	b.n	80071f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80071e0:	68fa      	ldr	r2, [r7, #12]
 80071e2:	4b14      	ldr	r3, [pc, #80]	; (8007234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80071e4:	4413      	add	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	461a      	mov	r2, r3
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a11      	ldr	r2, [pc, #68]	; (8007238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80071f2:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	3b01      	subs	r3, #1
 80071f8:	2201      	movs	r2, #1
 80071fa:	409a      	lsls	r2, r3
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8007200:	bf00      	nop
 8007202:	3714      	adds	r7, #20
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	58025408 	.word	0x58025408
 8007210:	5802541c 	.word	0x5802541c
 8007214:	58025430 	.word	0x58025430
 8007218:	58025444 	.word	0x58025444
 800721c:	58025458 	.word	0x58025458
 8007220:	5802546c 	.word	0x5802546c
 8007224:	58025480 	.word	0x58025480
 8007228:	58025494 	.word	0x58025494
 800722c:	1600963f 	.word	0x1600963f
 8007230:	58025940 	.word	0x58025940
 8007234:	1000823f 	.word	0x1000823f
 8007238:	40020940 	.word	0x40020940

0800723c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b098      	sub	sp, #96	; 0x60
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8007244:	4a84      	ldr	r2, [pc, #528]	; (8007458 <HAL_FDCAN_Init+0x21c>)
 8007246:	f107 030c 	add.w	r3, r7, #12
 800724a:	4611      	mov	r1, r2
 800724c:	224c      	movs	r2, #76	; 0x4c
 800724e:	4618      	mov	r0, r3
 8007250:	f013 fb12 	bl	801a878 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d101      	bne.n	800725e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 800725a:	2301      	movs	r3, #1
 800725c:	e1ca      	b.n	80075f4 <HAL_FDCAN_Init+0x3b8>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	4a7e      	ldr	r2, [pc, #504]	; (800745c <HAL_FDCAN_Init+0x220>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d106      	bne.n	8007276 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007270:	461a      	mov	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b00      	cmp	r3, #0
 8007280:	d106      	bne.n	8007290 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f7fd f94e 	bl	800452c <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	699a      	ldr	r2, [r3, #24]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0210 	bic.w	r2, r2, #16
 800729e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072a0:	f7fd fdaa 	bl	8004df8 <HAL_GetTick>
 80072a4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80072a6:	e014      	b.n	80072d2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072a8:	f7fd fda6 	bl	8004df8 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b0a      	cmp	r3, #10
 80072b4:	d90d      	bls.n	80072d2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80072bc:	f043 0201 	orr.w	r2, r3, #1
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2203      	movs	r2, #3
 80072ca:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80072ce:	2301      	movs	r3, #1
 80072d0:	e190      	b.n	80075f4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	699b      	ldr	r3, [r3, #24]
 80072d8:	f003 0308 	and.w	r3, r3, #8
 80072dc:	2b08      	cmp	r3, #8
 80072de:	d0e3      	beq.n	80072a8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80072f0:	f7fd fd82 	bl	8004df8 <HAL_GetTick>
 80072f4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80072f6:	e014      	b.n	8007322 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80072f8:	f7fd fd7e 	bl	8004df8 <HAL_GetTick>
 80072fc:	4602      	mov	r2, r0
 80072fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	2b0a      	cmp	r3, #10
 8007304:	d90d      	bls.n	8007322 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800730c:	f043 0201 	orr.w	r2, r3, #1
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2203      	movs	r2, #3
 800731a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e168      	b.n	80075f4 <HAL_FDCAN_Init+0x3b8>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	f003 0301 	and.w	r3, r3, #1
 800732c:	2b00      	cmp	r3, #0
 800732e:	d0e3      	beq.n	80072f8 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	699a      	ldr	r2, [r3, #24]
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f042 0202 	orr.w	r2, r2, #2
 800733e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	7c1b      	ldrb	r3, [r3, #16]
 8007344:	2b01      	cmp	r3, #1
 8007346:	d108      	bne.n	800735a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	699a      	ldr	r2, [r3, #24]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007356:	619a      	str	r2, [r3, #24]
 8007358:	e007      	b.n	800736a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	699a      	ldr	r2, [r3, #24]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007368:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	7c5b      	ldrb	r3, [r3, #17]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d108      	bne.n	8007384 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	699a      	ldr	r2, [r3, #24]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007380:	619a      	str	r2, [r3, #24]
 8007382:	e007      	b.n	8007394 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	699a      	ldr	r2, [r3, #24]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007392:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	7c9b      	ldrb	r3, [r3, #18]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d108      	bne.n	80073ae <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	699a      	ldr	r2, [r3, #24]
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073aa:	619a      	str	r2, [r3, #24]
 80073ac:	e007      	b.n	80073be <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	699a      	ldr	r2, [r3, #24]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80073bc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	699b      	ldr	r3, [r3, #24]
 80073c4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	430a      	orrs	r2, r1
 80073d2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 80073e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	691a      	ldr	r2, [r3, #16]
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	f022 0210 	bic.w	r2, r2, #16
 80073f2:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	2b01      	cmp	r3, #1
 80073fa:	d108      	bne.n	800740e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699a      	ldr	r2, [r3, #24]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0204 	orr.w	r2, r2, #4
 800740a:	619a      	str	r2, [r3, #24]
 800740c:	e030      	b.n	8007470 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68db      	ldr	r3, [r3, #12]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d02c      	beq.n	8007470 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d020      	beq.n	8007460 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	699a      	ldr	r2, [r3, #24]
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800742c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	691a      	ldr	r2, [r3, #16]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f042 0210 	orr.w	r2, r2, #16
 800743c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	2b03      	cmp	r3, #3
 8007444:	d114      	bne.n	8007470 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	699a      	ldr	r2, [r3, #24]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f042 0220 	orr.w	r2, r2, #32
 8007454:	619a      	str	r2, [r3, #24]
 8007456:	e00b      	b.n	8007470 <HAL_FDCAN_Init+0x234>
 8007458:	0801c45c 	.word	0x0801c45c
 800745c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0220 	orr.w	r2, r2, #32
 800746e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	699b      	ldr	r3, [r3, #24]
 8007474:	3b01      	subs	r3, #1
 8007476:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
 800747c:	3b01      	subs	r3, #1
 800747e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007480:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8007488:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	3b01      	subs	r3, #1
 8007492:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8007498:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800749a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80074a4:	d115      	bne.n	80074d2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b0:	3b01      	subs	r3, #1
 80074b2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074b4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ba:	3b01      	subs	r3, #1
 80074bc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 80074be:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c6:	3b01      	subs	r3, #1
 80074c8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 80074ce:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 80074d0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	430a      	orrs	r2, r1
 80074ec:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80074f8:	4413      	add	r3, r2
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d012      	beq.n	8007524 <HAL_FDCAN_Init+0x2e8>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8007506:	f023 0107 	bic.w	r1, r3, #7
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007514:	4413      	add	r3, r2
 8007516:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	430a      	orrs	r2, r1
 8007520:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007528:	2b00      	cmp	r3, #0
 800752a:	d012      	beq.n	8007552 <HAL_FDCAN_Init+0x316>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007534:	f023 0107 	bic.w	r1, r3, #7
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800753c:	009b      	lsls	r3, r3, #2
 800753e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007542:	4413      	add	r3, r2
 8007544:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	430a      	orrs	r2, r1
 800754e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007556:	2b00      	cmp	r3, #0
 8007558:	d013      	beq.n	8007582 <HAL_FDCAN_Init+0x346>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007562:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800756a:	009b      	lsls	r3, r3, #2
 800756c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8007570:	4413      	add	r3, r2
 8007572:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8007576:	011a      	lsls	r2, r3, #4
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	430a      	orrs	r2, r1
 800757e:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007586:	2b00      	cmp	r3, #0
 8007588:	d013      	beq.n	80075b2 <HAL_FDCAN_Init+0x376>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8007592:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800759a:	009b      	lsls	r3, r3, #2
 800759c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80075a0:	4413      	add	r3, r2
 80075a2:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80075a6:	021a      	lsls	r2, r3, #8
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	430a      	orrs	r2, r1
 80075ae:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a11      	ldr	r2, [pc, #68]	; (80075fc <HAL_FDCAN_Init+0x3c0>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d107      	bne.n	80075cc <HAL_FDCAN_Init+0x390>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	685b      	ldr	r3, [r3, #4]
 80075c0:	689a      	ldr	r2, [r3, #8]
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	f022 0203 	bic.w	r2, r2, #3
 80075ca:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2200      	movs	r2, #0
 80075d8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2201      	movs	r2, #1
 80075e0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 fddf 	bl	80081a8 <FDCAN_CalcultateRamBlockAddresses>
 80075ea:	4603      	mov	r3, r0
 80075ec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 80075f0:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 80075f4:	4618      	mov	r0, r3
 80075f6:	3760      	adds	r7, #96	; 0x60
 80075f8:	46bd      	mov	sp, r7
 80075fa:	bd80      	pop	{r7, pc}
 80075fc:	4000a000 	.word	0x4000a000

08007600 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8007600:	b480      	push	{r7}
 8007602:	b087      	sub	sp, #28
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007610:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007612:	7bfb      	ldrb	r3, [r7, #15]
 8007614:	2b01      	cmp	r3, #1
 8007616:	d002      	beq.n	800761e <HAL_FDCAN_ConfigFilter+0x1e>
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d157      	bne.n	80076ce <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800761e:	683b      	ldr	r3, [r7, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d12b      	bne.n	800767e <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	68db      	ldr	r3, [r3, #12]
 800762a:	2b07      	cmp	r3, #7
 800762c:	d10d      	bne.n	800764a <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	691b      	ldr	r3, [r3, #16]
 8007632:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 800763a:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8007640:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 8007642:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 8007646:	617b      	str	r3, [r7, #20]
 8007648:	e00e      	b.n	8007668 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800764a:	683b      	ldr	r3, [r7, #0]
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8007650:	683b      	ldr	r3, [r7, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007656:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	691b      	ldr	r3, [r3, #16]
 800765c:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 800765e:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800766c:	683b      	ldr	r3, [r7, #0]
 800766e:	685b      	ldr	r3, [r3, #4]
 8007670:	009b      	lsls	r3, r3, #2
 8007672:	4413      	add	r3, r2
 8007674:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	601a      	str	r2, [r3, #0]
 800767c:	e025      	b.n	80076ca <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800767e:	683b      	ldr	r3, [r7, #0]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	075a      	lsls	r2, r3, #29
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	68db      	ldr	r3, [r3, #12]
 8007690:	2b07      	cmp	r3, #7
 8007692:	d103      	bne.n	800769c <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	613b      	str	r3, [r7, #16]
 800769a:	e006      	b.n	80076aa <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	079a      	lsls	r2, r3, #30
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	695b      	ldr	r3, [r3, #20]
 80076a6:	4313      	orrs	r3, r2
 80076a8:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	00db      	lsls	r3, r3, #3
 80076b4:	4413      	add	r3, r2
 80076b6:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80076be:	68bb      	ldr	r3, [r7, #8]
 80076c0:	3304      	adds	r3, #4
 80076c2:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80076c4:	68bb      	ldr	r3, [r7, #8]
 80076c6:	693a      	ldr	r2, [r7, #16]
 80076c8:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80076ca:	2300      	movs	r3, #0
 80076cc:	e008      	b.n	80076e0 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80076d4:	f043 0202 	orr.w	r2, r3, #2
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80076de:	2301      	movs	r3, #1
  }
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b085      	sub	sp, #20
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	60f8      	str	r0, [r7, #12]
 80076f4:	60b9      	str	r1, [r7, #8]
 80076f6:	607a      	str	r2, [r7, #4]
 80076f8:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b01      	cmp	r3, #1
 8007704:	d110      	bne.n	8007728 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800770e:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8007714:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 800771c:	69ba      	ldr	r2, [r7, #24]
 800771e:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8007720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	e008      	b.n	800773a <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800772e:	f043 0204 	orr.w	r2, r3, #4
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007738:	2301      	movs	r3, #1
  }
}
 800773a:	4618      	mov	r0, r3
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr

08007746 <HAL_FDCAN_EnableTxDelayCompensation>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_EnableTxDelayCompensation(FDCAN_HandleTypeDef *hfdcan)
{
 8007746:	b480      	push	{r7}
 8007748:	b083      	sub	sp, #12
 800774a:	af00      	add	r7, sp, #0
 800774c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b01      	cmp	r3, #1
 8007758:	d109      	bne.n	800776e <HAL_FDCAN_EnableTxDelayCompensation+0x28>
  {
    /* Enable transmitter delay compensation */
    SET_BIT(hfdcan->Instance->DBTP, FDCAN_DBTP_TDC);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	68da      	ldr	r2, [r3, #12]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8007768:	60da      	str	r2, [r3, #12]

    /* Return function status */
    return HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	e008      	b.n	8007780 <HAL_FDCAN_EnableTxDelayCompensation+0x3a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007774:	f043 0204 	orr.w	r2, r3, #4
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800777e:	2301      	movs	r3, #1
  }
}
 8007780:	4618      	mov	r0, r3
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800779a:	b2db      	uxtb	r3, r3
 800779c:	2b01      	cmp	r3, #1
 800779e:	d111      	bne.n	80077c4 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	699a      	ldr	r2, [r3, #24]
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	f022 0201 	bic.w	r2, r2, #1
 80077b6:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	e008      	b.n	80077d6 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80077ca:	f043 0204 	orr.w	r2, r3, #4
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
  }
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	370c      	adds	r7, #12
 80077da:	46bd      	mov	sp, r7
 80077dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e0:	4770      	bx	lr
	...

080077e4 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b08b      	sub	sp, #44	; 0x2c
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	60f8      	str	r0, [r7, #12]
 80077ec:	60b9      	str	r1, [r7, #8]
 80077ee:	607a      	str	r2, [r7, #4]
 80077f0:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80077f2:	2300      	movs	r3, #0
 80077f4:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80077fc:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80077fe:	7efb      	ldrb	r3, [r7, #27]
 8007800:	2b02      	cmp	r3, #2
 8007802:	f040 813b 	bne.w	8007a7c <HAL_FDCAN_GetRxMessage+0x298>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007806:	68bb      	ldr	r3, [r7, #8]
 8007808:	2b40      	cmp	r3, #64	; 0x40
 800780a:	d145      	bne.n	8007898 <HAL_FDCAN_GetRxMessage+0xb4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007814:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007818:	2b00      	cmp	r3, #0
 800781a:	d109      	bne.n	8007830 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007822:	f043 0220 	orr.w	r2, r3, #32
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	e12e      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007838:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800783c:	2b00      	cmp	r3, #0
 800783e:	d109      	bne.n	8007854 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007846:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007850:	2301      	movs	r3, #1
 8007852:	e11c      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800785c:	0e1b      	lsrs	r3, r3, #24
 800785e:	f003 0301 	and.w	r3, r3, #1
 8007862:	2b01      	cmp	r3, #1
 8007864:	d103      	bne.n	800786e <HAL_FDCAN_GetRxMessage+0x8a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007876:	0a1b      	lsrs	r3, r3, #8
 8007878:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800787c:	69fa      	ldr	r2, [r7, #28]
 800787e:	4413      	add	r3, r2
 8007880:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788a:	69f9      	ldr	r1, [r7, #28]
 800788c:	fb01 f303 	mul.w	r3, r1, r3
 8007890:	009b      	lsls	r3, r3, #2
 8007892:	4413      	add	r3, r2
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
 8007896:	e061      	b.n	800795c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	2b41      	cmp	r3, #65	; 0x41
 800789c:	d145      	bne.n	800792a <HAL_FDCAN_GetRxMessage+0x146>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80078a6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d109      	bne.n	80078c2 <HAL_FDCAN_GetRxMessage+0xde>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078b4:	f043 0220 	orr.w	r2, r3, #32
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e0e5      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d109      	bne.n	80078e6 <HAL_FDCAN_GetRxMessage+0x102>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80078d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	e0d3      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80078ee:	0e1b      	lsrs	r3, r3, #24
 80078f0:	f003 0301 	and.w	r3, r3, #1
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	d103      	bne.n	8007900 <HAL_FDCAN_GetRxMessage+0x11c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
            GetIndex = 1U;
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007908:	0a1b      	lsrs	r3, r3, #8
 800790a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800790e:	69fa      	ldr	r2, [r7, #28]
 8007910:	4413      	add	r3, r2
 8007912:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800791c:	69f9      	ldr	r1, [r7, #28]
 800791e:	fb01 f303 	mul.w	r3, r1, r3
 8007922:	009b      	lsls	r3, r3, #2
 8007924:	4413      	add	r3, r2
 8007926:	627b      	str	r3, [r7, #36]	; 0x24
 8007928:	e018      	b.n	800795c <HAL_FDCAN_GetRxMessage+0x178>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800792e:	68ba      	ldr	r2, [r7, #8]
 8007930:	429a      	cmp	r2, r3
 8007932:	d309      	bcc.n	8007948 <HAL_FDCAN_GetRxMessage+0x164>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800793a:	f043 0220 	orr.w	r2, r3, #32
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	e0a2      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007950:	68b9      	ldr	r1, [r7, #8]
 8007952:	fb01 f303 	mul.w	r3, r1, r3
 8007956:	009b      	lsls	r3, r3, #2
 8007958:	4413      	add	r3, r2
 800795a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d107      	bne.n	8007980 <HAL_FDCAN_GetRxMessage+0x19c>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8007970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	0c9b      	lsrs	r3, r3, #18
 8007976:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	601a      	str	r2, [r3, #0]
 800797e:	e005      	b.n	800798c <HAL_FDCAN_GetRxMessage+0x1a8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8007980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800798c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8007998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80079a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079a6:	3304      	adds	r3, #4
 80079a8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80079aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	b29a      	uxth	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 80079b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 80079c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 80079cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	0e1b      	lsrs	r3, r3, #24
 80079de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 80079e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	0fda      	lsrs	r2, r3, #31
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80079f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f2:	3304      	adds	r3, #4
 80079f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80079f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80079fa:	2300      	movs	r3, #0
 80079fc:	623b      	str	r3, [r7, #32]
 80079fe:	e00a      	b.n	8007a16 <HAL_FDCAN_GetRxMessage+0x232>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8007a00:	697a      	ldr	r2, [r7, #20]
 8007a02:	6a3b      	ldr	r3, [r7, #32]
 8007a04:	441a      	add	r2, r3
 8007a06:	6839      	ldr	r1, [r7, #0]
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	440b      	add	r3, r1
 8007a0c:	7812      	ldrb	r2, [r2, #0]
 8007a0e:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8007a10:	6a3b      	ldr	r3, [r7, #32]
 8007a12:	3301      	adds	r3, #1
 8007a14:	623b      	str	r3, [r7, #32]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	68db      	ldr	r3, [r3, #12]
 8007a1a:	0c1b      	lsrs	r3, r3, #16
 8007a1c:	4a1f      	ldr	r2, [pc, #124]	; (8007a9c <HAL_FDCAN_GetRxMessage+0x2b8>)
 8007a1e:	5cd3      	ldrb	r3, [r2, r3]
 8007a20:	461a      	mov	r2, r3
 8007a22:	6a3b      	ldr	r3, [r7, #32]
 8007a24:	4293      	cmp	r3, r2
 8007a26:	d3eb      	bcc.n	8007a00 <HAL_FDCAN_GetRxMessage+0x21c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b40      	cmp	r3, #64	; 0x40
 8007a2c:	d105      	bne.n	8007a3a <HAL_FDCAN_GetRxMessage+0x256>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69fa      	ldr	r2, [r7, #28]
 8007a34:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8007a38:	e01e      	b.n	8007a78 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	2b41      	cmp	r3, #65	; 0x41
 8007a3e:	d105      	bne.n	8007a4c <HAL_FDCAN_GetRxMessage+0x268>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	69fa      	ldr	r2, [r7, #28]
 8007a46:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8007a4a:	e015      	b.n	8007a78 <HAL_FDCAN_GetRxMessage+0x294>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	2b1f      	cmp	r3, #31
 8007a50:	d808      	bhi.n	8007a64 <HAL_FDCAN_GetRxMessage+0x280>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	2101      	movs	r1, #1
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	fa01 f202 	lsl.w	r2, r1, r2
 8007a5e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8007a62:	e009      	b.n	8007a78 <HAL_FDCAN_GetRxMessage+0x294>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	f003 021f 	and.w	r2, r3, #31
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2101      	movs	r1, #1
 8007a70:	fa01 f202 	lsl.w	r2, r1, r2
 8007a74:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	e008      	b.n	8007a8e <HAL_FDCAN_GetRxMessage+0x2aa>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007a82:	f043 0208 	orr.w	r2, r3, #8
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007a8c:	2301      	movs	r3, #1
  }
}
 8007a8e:	4618      	mov	r0, r3
 8007a90:	372c      	adds	r7, #44	; 0x2c
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr
 8007a9a:	bf00      	nop
 8007a9c:	0801c558 	.word	0x0801c558

08007aa0 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8007aa0:	b480      	push	{r7}
 8007aa2:	b087      	sub	sp, #28
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	60f8      	str	r0, [r7, #12]
 8007aa8:	60b9      	str	r1, [r7, #8]
 8007aaa:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8007ab2:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d002      	beq.n	8007ac0 <HAL_FDCAN_ActivateNotification+0x20>
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d155      	bne.n	8007b6c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	4013      	ands	r3, r2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d108      	bne.n	8007ae0 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	f042 0201 	orr.w	r2, r2, #1
 8007adc:	65da      	str	r2, [r3, #92]	; 0x5c
 8007ade:	e014      	b.n	8007b0a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	4013      	ands	r3, r2
 8007aea:	68ba      	ldr	r2, [r7, #8]
 8007aec:	429a      	cmp	r2, r3
 8007aee:	d108      	bne.n	8007b02 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f042 0202 	orr.w	r2, r2, #2
 8007afe:	65da      	str	r2, [r3, #92]	; 0x5c
 8007b00:	e003      	b.n	8007b0a <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	2203      	movs	r2, #3
 8007b08:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8007b0a:	68bb      	ldr	r3, [r7, #8]
 8007b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d009      	beq.n	8007b28 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occure if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	430a      	orrs	r2, r1
 8007b24:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d009      	beq.n	8007b46 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occure if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	687a      	ldr	r2, [r7, #4]
 8007b40:	430a      	orrs	r2, r1
 8007b42:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	4b0f      	ldr	r3, [pc, #60]	; (8007b8c <HAL_FDCAN_ActivateNotification+0xec>)
 8007b50:	4013      	ands	r3, r2
 8007b52:	68fa      	ldr	r2, [r7, #12]
 8007b54:	6812      	ldr	r2, [r2, #0]
 8007b56:	430b      	orrs	r3, r1
 8007b58:	6553      	str	r3, [r2, #84]	; 0x54
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007b5c:	695a      	ldr	r2, [r3, #20]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	0f9b      	lsrs	r3, r3, #30
 8007b62:	490b      	ldr	r1, [pc, #44]	; (8007b90 <HAL_FDCAN_ActivateNotification+0xf0>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	e008      	b.n	8007b7e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007b72:	f043 0202 	orr.w	r2, r3, #2
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
  }
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	371c      	adds	r7, #28
 8007b82:	46bd      	mov	sp, r7
 8007b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b88:	4770      	bx	lr
 8007b8a:	bf00      	nop
 8007b8c:	3fcfffff 	.word	0x3fcfffff
 8007b90:	4000a800 	.word	0x4000a800

08007b94 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b092      	sub	sp, #72	; 0x48
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  uint32_t TTDistErrors;
  uint32_t TTFatalErrors;
  uint32_t SWTime;
  uint32_t SWCycleCount;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8007b9c:	4b90      	ldr	r3, [pc, #576]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	079b      	lsls	r3, r3, #30
 8007ba2:	647b      	str	r3, [r7, #68]	; 0x44
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8007ba4:	4b8e      	ldr	r3, [pc, #568]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007ba6:	695b      	ldr	r3, [r3, #20]
 8007ba8:	079b      	lsls	r3, r3, #30
 8007baa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007bac:	4013      	ands	r3, r2
 8007bae:	647b      	str	r3, [r7, #68]	; 0x44
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bb6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007bba:	643b      	str	r3, [r7, #64]	; 0x40
  TxEventFifoITs &= hfdcan->Instance->IE;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bc4:	4013      	ands	r3, r2
 8007bc6:	643b      	str	r3, [r7, #64]	; 0x40
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bce:	f003 030f 	and.w	r3, r3, #15
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bda:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007bdc:	4013      	ands	r3, r2
 8007bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007be6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bea:	63bb      	str	r3, [r7, #56]	; 0x38
  RxFifo1ITs &= hfdcan->Instance->IE;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	63bb      	str	r3, [r7, #56]	; 0x38
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bfe:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8007c02:	637b      	str	r3, [r7, #52]	; 0x34
  Errors &= hfdcan->Instance->IE;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007c0c:	4013      	ands	r3, r2
 8007c0e:	637b      	str	r3, [r7, #52]	; 0x34
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c16:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8007c1a:	633b      	str	r3, [r7, #48]	; 0x30
  ErrorStatusITs &= hfdcan->Instance->IE;
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c24:	4013      	ands	r3, r2
 8007c26:	633b      	str	r3, [r7, #48]	; 0x30

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d011      	beq.n	8007c5a <HAL_FDCAN_IRQHandler+0xc6>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00a      	beq.n	8007c5a <HAL_FDCAN_IRQHandler+0xc6>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007c4c:	651a      	str	r2, [r3, #80]	; 0x50
 8007c4e:	4b64      	ldr	r3, [pc, #400]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007c50:	2200      	movs	r2, #0
 8007c52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8007c54:	6878      	ldr	r0, [r7, #4]
 8007c56:	f000 fa5a 	bl	800810e <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01e      	beq.n	8007ca6 <HAL_FDCAN_IRQHandler+0x112>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d017      	beq.n	8007ca6 <HAL_FDCAN_IRQHandler+0x112>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8007c7e:	62fb      	str	r3, [r7, #44]	; 0x2c
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007c96:	651a      	str	r2, [r3, #80]	; 0x50
 8007c98:	4b51      	ldr	r3, [pc, #324]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8007c9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f000 fa0b 	bl	80080bc <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8007ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d00d      	beq.n	8007cc8 <HAL_FDCAN_IRQHandler+0x134>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cb2:	4b4c      	ldr	r3, [pc, #304]	; (8007de4 <HAL_FDCAN_IRQHandler+0x250>)
 8007cb4:	400b      	ands	r3, r1
 8007cb6:	6513      	str	r3, [r2, #80]	; 0x50
 8007cb8:	4a49      	ldr	r2, [pc, #292]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cbc:	0f9b      	lsrs	r3, r3, #30
 8007cbe:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8007cc0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007cc2:	6878      	ldr	r0, [r7, #4]
 8007cc4:	f000 f9c4 	bl	8008050 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8007cc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00d      	beq.n	8007cea <HAL_FDCAN_IRQHandler+0x156>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007cd4:	4b43      	ldr	r3, [pc, #268]	; (8007de4 <HAL_FDCAN_IRQHandler+0x250>)
 8007cd6:	400b      	ands	r3, r1
 8007cd8:	6513      	str	r3, [r2, #80]	; 0x50
 8007cda:	4a41      	ldr	r2, [pc, #260]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007cdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cde:	0f9b      	lsrs	r3, r3, #30
 8007ce0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8007ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 f9be 	bl	8008066 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8007cea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00d      	beq.n	8007d0c <HAL_FDCAN_IRQHandler+0x178>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007cf6:	4b3b      	ldr	r3, [pc, #236]	; (8007de4 <HAL_FDCAN_IRQHandler+0x250>)
 8007cf8:	400b      	ands	r3, r1
 8007cfa:	6513      	str	r3, [r2, #80]	; 0x50
 8007cfc:	4a38      	ldr	r2, [pc, #224]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007cfe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d00:	0f9b      	lsrs	r3, r3, #30
 8007d02:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8007d04:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f7f9 f80c 	bl	8000d24 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d00d      	beq.n	8007d2e <HAL_FDCAN_IRQHandler+0x19a>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681a      	ldr	r2, [r3, #0]
 8007d16:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d18:	4b32      	ldr	r3, [pc, #200]	; (8007de4 <HAL_FDCAN_IRQHandler+0x250>)
 8007d1a:	400b      	ands	r3, r1
 8007d1c:	6513      	str	r3, [r2, #80]	; 0x50
 8007d1e:	4a30      	ldr	r2, [pc, #192]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007d20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d22:	0f9b      	lsrs	r3, r3, #30
 8007d24:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8007d26:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 f9a7 	bl	800807c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d011      	beq.n	8007d60 <HAL_FDCAN_IRQHandler+0x1cc>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d00a      	beq.n	8007d60 <HAL_FDCAN_IRQHandler+0x1cc>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d52:	651a      	str	r2, [r3, #80]	; 0x50
 8007d54:	4b22      	ldr	r3, [pc, #136]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007d56:	2200      	movs	r2, #0
 8007d58:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 f999 	bl	8008092 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d66:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d01e      	beq.n	8007dac <HAL_FDCAN_IRQHandler+0x218>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d017      	beq.n	8007dac <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007d84:	62bb      	str	r3, [r7, #40]	; 0x28
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007d90:	4013      	ands	r3, r2
 8007d92:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d9c:	651a      	str	r2, [r3, #80]	; 0x50
 8007d9e:	4b10      	ldr	r3, [pc, #64]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8007da4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f000 f97d 	bl	80080a6 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d016      	beq.n	8007de8 <HAL_FDCAN_IRQHandler+0x254>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != 0U)
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dc0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00f      	beq.n	8007de8 <HAL_FDCAN_IRQHandler+0x254>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8007dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8007dd2:	4b03      	ldr	r3, [pc, #12]	; (8007de0 <HAL_FDCAN_IRQHandler+0x24c>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f97a 	bl	80080d2 <HAL_FDCAN_RxBufferNewMessageCallback>
 8007dde:	e003      	b.n	8007de8 <HAL_FDCAN_IRQHandler+0x254>
 8007de0:	4000a800 	.word	0x4000a800
 8007de4:	3fcfffff 	.word	0x3fcfffff
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d011      	beq.n	8007e1a <HAL_FDCAN_IRQHandler+0x286>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d00a      	beq.n	8007e1a <HAL_FDCAN_IRQHandler+0x286>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007e0c:	651a      	str	r2, [r3, #80]	; 0x50
 8007e0e:	4b8d      	ldr	r3, [pc, #564]	; (8008044 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8007e14:	6878      	ldr	r0, [r7, #4]
 8007e16:	f000 f966 	bl	80080e6 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d011      	beq.n	8007e4c <HAL_FDCAN_IRQHandler+0x2b8>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d00a      	beq.n	8007e4c <HAL_FDCAN_IRQHandler+0x2b8>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8007e3e:	651a      	str	r2, [r3, #80]	; 0x50
 8007e40:	4b80      	ldr	r3, [pc, #512]	; (8008044 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e42:	2200      	movs	r2, #0
 8007e44:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f000 f957 	bl	80080fa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <HAL_FDCAN_IRQHandler+0x2f4>
  {
    if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d00f      	beq.n	8007e88 <HAL_FDCAN_IRQHandler+0x2f4>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007e70:	651a      	str	r2, [r3, #80]	; 0x50
 8007e72:	4b74      	ldr	r3, [pc, #464]	; (8008044 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007e7e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8007e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d00d      	beq.n	8007eaa <HAL_FDCAN_IRQHandler+0x316>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681a      	ldr	r2, [r3, #0]
 8007e92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e94:	4b6c      	ldr	r3, [pc, #432]	; (8008048 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007e96:	400b      	ands	r3, r1
 8007e98:	6513      	str	r3, [r2, #80]	; 0x50
 8007e9a:	4a6a      	ldr	r2, [pc, #424]	; (8008044 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e9e:	0f9b      	lsrs	r3, r3, #30
 8007ea0:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8007ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ea4:	6878      	ldr	r0, [r7, #4]
 8007ea6:	f000 f946 	bl	8008136 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8007eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d011      	beq.n	8007ed4 <HAL_FDCAN_IRQHandler+0x340>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8007eb6:	4b64      	ldr	r3, [pc, #400]	; (8008048 <HAL_FDCAN_IRQHandler+0x4b4>)
 8007eb8:	400b      	ands	r3, r1
 8007eba:	6513      	str	r3, [r2, #80]	; 0x50
 8007ebc:	4a61      	ldr	r2, [pc, #388]	; (8008044 <HAL_FDCAN_IRQHandler+0x4b0>)
 8007ebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ec0:	0f9b      	lsrs	r3, r3, #30
 8007ec2:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8007eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ecc:	431a      	orrs	r2, r3
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a5c      	ldr	r2, [pc, #368]	; (800804c <HAL_FDCAN_IRQHandler+0x4b8>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	f040 80a6 	bne.w	800802c <HAL_FDCAN_IRQHandler+0x498>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	685b      	ldr	r3, [r3, #4]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	f000 809e 	beq.w	800802c <HAL_FDCAN_IRQHandler+0x498>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	685b      	ldr	r3, [r3, #4]
 8007ef4:	6a1b      	ldr	r3, [r3, #32]
 8007ef6:	f003 030f 	and.w	r3, r3, #15
 8007efa:	627b      	str	r3, [r7, #36]	; 0x24
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f04:	4013      	ands	r3, r2
 8007f06:	627b      	str	r3, [r7, #36]	; 0x24
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	6a1b      	ldr	r3, [r3, #32]
 8007f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f12:	623b      	str	r3, [r7, #32]
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	4013      	ands	r3, r2
 8007f1e:	623b      	str	r3, [r7, #32]
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	6a1b      	ldr	r3, [r3, #32]
 8007f26:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8007f2a:	61fb      	str	r3, [r7, #28]
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f32:	69fa      	ldr	r2, [r7, #28]
 8007f34:	4013      	ands	r3, r2
 8007f36:	61fb      	str	r3, [r7, #28]
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	685b      	ldr	r3, [r3, #4]
 8007f3c:	6a1b      	ldr	r3, [r3, #32]
 8007f3e:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8007f42:	61bb      	str	r3, [r7, #24]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	69ba      	ldr	r2, [r7, #24]
 8007f4c:	4013      	ands	r3, r2
 8007f4e:	61bb      	str	r3, [r7, #24]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	6a1b      	ldr	r3, [r3, #32]
 8007f56:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8007f5a:	617b      	str	r3, [r7, #20]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	685b      	ldr	r3, [r3, #4]
 8007f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f62:	697a      	ldr	r2, [r7, #20]
 8007f64:	4013      	ands	r3, r2
 8007f66:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8007f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d007      	beq.n	8007f7e <HAL_FDCAN_IRQHandler+0x3ea>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f74:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8007f76:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 f8e7 	bl	800814c <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d007      	beq.n	8007f94 <HAL_FDCAN_IRQHandler+0x400>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	685b      	ldr	r3, [r3, #4]
 8007f88:	6a3a      	ldr	r2, [r7, #32]
 8007f8a:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8007f8c:	6a39      	ldr	r1, [r7, #32]
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 f8e7 	bl	8008162 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (__HAL_FDCAN_TT_GET_IT_SOURCE(hfdcan, FDCAN_TT_IT_STOP_WATCH) != 0U)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	685b      	ldr	r3, [r3, #4]
 8007f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d01b      	beq.n	8007fda <HAL_FDCAN_IRQHandler+0x446>
      {
        if (__HAL_FDCAN_TT_GET_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH) != 0U)
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	685b      	ldr	r3, [r3, #4]
 8007fa6:	6a1b      	ldr	r3, [r3, #32]
 8007fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d014      	beq.n	8007fda <HAL_FDCAN_IRQHandler+0x446>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fb6:	0c1b      	lsrs	r3, r3, #16
 8007fb8:	b29b      	uxth	r3, r3
 8007fba:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	685b      	ldr	r3, [r3, #4]
 8007fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fc2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007fc6:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	2240      	movs	r2, #64	; 0x40
 8007fce:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8007fd0:	68fa      	ldr	r2, [r7, #12]
 8007fd2:	6939      	ldr	r1, [r7, #16]
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 f8cf 	bl	8008178 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d007      	beq.n	8007ff0 <HAL_FDCAN_IRQHandler+0x45c>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	685b      	ldr	r3, [r3, #4]
 8007fe4:	69fa      	ldr	r2, [r7, #28]
 8007fe6:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8007fe8:	69f9      	ldr	r1, [r7, #28]
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 f8d0 	bl	8008190 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d00b      	beq.n	800800e <HAL_FDCAN_IRQHandler+0x47a>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	685b      	ldr	r3, [r3, #4]
 8007ffa:	69ba      	ldr	r2, [r7, #24]
 8007ffc:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	431a      	orrs	r2, r3
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d00b      	beq.n	800802c <HAL_FDCAN_IRQHandler+0x498>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	697a      	ldr	r2, [r7, #20]
 800801a:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	431a      	orrs	r2, r3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d002      	beq.n	800803c <HAL_FDCAN_IRQHandler+0x4a8>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f873 	bl	8008122 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800803c:	bf00      	nop
 800803e:	3748      	adds	r7, #72	; 0x48
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}
 8008044:	4000a800 	.word	0x4000a800
 8008048:	3fcfffff 	.word	0x3fcfffff
 800804c:	4000a000 	.word	0x4000a000

08008050 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800805a:	bf00      	nop
 800805c:	370c      	adds	r7, #12
 800805e:	46bd      	mov	sp, r7
 8008060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008064:	4770      	bx	lr

08008066 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8008066:	b480      	push	{r7}
 8008068:	b083      	sub	sp, #12
 800806a:	af00      	add	r7, sp, #0
 800806c:	6078      	str	r0, [r7, #4]
 800806e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800807c:	b480      	push	{r7}
 800807e:	b083      	sub	sp, #12
 8008080:	af00      	add	r7, sp, #0
 8008082:	6078      	str	r0, [r7, #4]
 8008084:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8008086:	bf00      	nop
 8008088:	370c      	adds	r7, #12
 800808a:	46bd      	mov	sp, r7
 800808c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008090:	4770      	bx	lr

08008092 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008092:	b480      	push	{r7}
 8008094:	b083      	sub	sp, #12
 8008096:	af00      	add	r7, sp, #0
 8008098:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800809a:	bf00      	nop
 800809c:	370c      	adds	r7, #12
 800809e:	46bd      	mov	sp, r7
 80080a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a4:	4770      	bx	lr

080080a6 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80080a6:	b480      	push	{r7}
 80080a8:	b083      	sub	sp, #12
 80080aa:	af00      	add	r7, sp, #0
 80080ac:	6078      	str	r0, [r7, #4]
 80080ae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 80080b0:	bf00      	nop
 80080b2:	370c      	adds	r7, #12
 80080b4:	46bd      	mov	sp, r7
 80080b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ba:	4770      	bx	lr

080080bc <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 80080bc:	b480      	push	{r7}
 80080be:	b083      	sub	sp, #12
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr

08008136 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8008136:	b480      	push	{r7}
 8008138:	b083      	sub	sp, #12
 800813a:	af00      	add	r7, sp, #0
 800813c:	6078      	str	r0, [r7, #4]
 800813e:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8008140:	bf00      	nop
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800814c:	b480      	push	{r7}
 800814e:	b083      	sub	sp, #12
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
 8008154:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800816c:	bf00      	nop
 800816e:	370c      	adds	r7, #12
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8008184:	bf00      	nop
 8008186:	3714      	adds	r7, #20
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800819a:	bf00      	nop
 800819c:	370c      	adds	r7, #12
 800819e:	46bd      	mov	sp, r7
 80081a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a4:	4770      	bx	lr
	...

080081a8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80081a8:	b480      	push	{r7}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081b4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80081be:	4ba7      	ldr	r3, [pc, #668]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80081c0:	4013      	ands	r3, r2
 80081c2:	68ba      	ldr	r2, [r7, #8]
 80081c4:	0091      	lsls	r1, r2, #2
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	6812      	ldr	r2, [r2, #0]
 80081ca:	430b      	orrs	r3, r1
 80081cc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e0:	041a      	lsls	r2, r3, #16
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	430a      	orrs	r2, r1
 80081e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081f0:	68ba      	ldr	r2, [r7, #8]
 80081f2:	4413      	add	r3, r2
 80081f4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80081fe:	4b97      	ldr	r3, [pc, #604]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008200:	4013      	ands	r3, r2
 8008202:	68ba      	ldr	r2, [r7, #8]
 8008204:	0091      	lsls	r1, r2, #2
 8008206:	687a      	ldr	r2, [r7, #4]
 8008208:	6812      	ldr	r2, [r2, #0]
 800820a:	430b      	orrs	r3, r1
 800820c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008218:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008220:	041a      	lsls	r2, r3, #16
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	430a      	orrs	r2, r1
 8008228:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008230:	005b      	lsls	r3, r3, #1
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	4413      	add	r3, r2
 8008236:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008240:	4b86      	ldr	r3, [pc, #536]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008242:	4013      	ands	r3, r2
 8008244:	68ba      	ldr	r2, [r7, #8]
 8008246:	0091      	lsls	r1, r2, #2
 8008248:	687a      	ldr	r2, [r7, #4]
 800824a:	6812      	ldr	r2, [r2, #0]
 800824c:	430b      	orrs	r3, r1
 800824e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800825a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008262:	041a      	lsls	r2, r3, #16
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	430a      	orrs	r2, r1
 800826a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	687a      	ldr	r2, [r7, #4]
 8008274:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8008276:	fb02 f303 	mul.w	r3, r2, r3
 800827a:	68ba      	ldr	r2, [r7, #8]
 800827c:	4413      	add	r3, r2
 800827e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8008288:	4b74      	ldr	r3, [pc, #464]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800828a:	4013      	ands	r3, r2
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	0091      	lsls	r1, r2, #2
 8008290:	687a      	ldr	r2, [r7, #4]
 8008292:	6812      	ldr	r2, [r2, #0]
 8008294:	430b      	orrs	r3, r1
 8008296:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80082a2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082aa:	041a      	lsls	r2, r3, #16
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	430a      	orrs	r2, r1
 80082b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80082ba:	687a      	ldr	r2, [r7, #4]
 80082bc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80082be:	fb02 f303 	mul.w	r3, r2, r3
 80082c2:	68ba      	ldr	r2, [r7, #8]
 80082c4:	4413      	add	r3, r2
 80082c6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80082d0:	4b62      	ldr	r3, [pc, #392]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082d2:	4013      	ands	r3, r2
 80082d4:	68ba      	ldr	r2, [r7, #8]
 80082d6:	0091      	lsls	r1, r2, #2
 80082d8:	687a      	ldr	r2, [r7, #4]
 80082da:	6812      	ldr	r2, [r2, #0]
 80082dc:	430b      	orrs	r3, r1
 80082de:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082e6:	687a      	ldr	r2, [r7, #4]
 80082e8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80082ea:	fb02 f303 	mul.w	r3, r2, r3
 80082ee:	68ba      	ldr	r2, [r7, #8]
 80082f0:	4413      	add	r3, r2
 80082f2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80082fc:	4b57      	ldr	r3, [pc, #348]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 80082fe:	4013      	ands	r3, r2
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	0091      	lsls	r1, r2, #2
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6812      	ldr	r2, [r2, #0]
 8008308:	430b      	orrs	r3, r1
 800830a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008316:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800831e:	041a      	lsls	r2, r3, #16
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	430a      	orrs	r2, r1
 8008326:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800832e:	005b      	lsls	r3, r3, #1
 8008330:	68ba      	ldr	r2, [r7, #8]
 8008332:	4413      	add	r3, r2
 8008334:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800833e:	4b47      	ldr	r3, [pc, #284]	; (800845c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8008340:	4013      	ands	r3, r2
 8008342:	68ba      	ldr	r2, [r7, #8]
 8008344:	0091      	lsls	r1, r2, #2
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6812      	ldr	r2, [r2, #0]
 800834a:	430b      	orrs	r3, r1
 800834c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008358:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008360:	041a      	lsls	r2, r3, #16
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	430a      	orrs	r2, r1
 8008368:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008374:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837c:	061a      	lsls	r2, r3, #24
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	430a      	orrs	r2, r1
 8008384:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800838c:	4b34      	ldr	r3, [pc, #208]	; (8008460 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800838e:	4413      	add	r3, r2
 8008390:	009a      	lsls	r2, r3, #2
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839e:	009b      	lsls	r3, r3, #2
 80083a0:	441a      	add	r2, r3
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083ae:	00db      	lsls	r3, r3, #3
 80083b0:	441a      	add	r2, r3
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083be:	6879      	ldr	r1, [r7, #4]
 80083c0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 80083c2:	fb01 f303 	mul.w	r3, r1, r3
 80083c6:	009b      	lsls	r3, r3, #2
 80083c8:	441a      	add	r2, r3
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80083d6:	6879      	ldr	r1, [r7, #4]
 80083d8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 80083da:	fb01 f303 	mul.w	r3, r1, r3
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	441a      	add	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ee:	6879      	ldr	r1, [r7, #4]
 80083f0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80083f2:	fb01 f303 	mul.w	r3, r1, r3
 80083f6:	009b      	lsls	r3, r3, #2
 80083f8:	441a      	add	r2, r3
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800840a:	00db      	lsls	r3, r3, #3
 800840c:	441a      	add	r2, r3
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800841e:	6879      	ldr	r1, [r7, #4]
 8008420:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8008422:	fb01 f303 	mul.w	r3, r1, r3
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	441a      	add	r2, r3
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800843a:	6879      	ldr	r1, [r7, #4]
 800843c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800843e:	fb01 f303 	mul.w	r3, r1, r3
 8008442:	009b      	lsls	r3, r3, #2
 8008444:	441a      	add	r2, r3
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008452:	4a04      	ldr	r2, [pc, #16]	; (8008464 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d915      	bls.n	8008484 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8008458:	e006      	b.n	8008468 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800845a:	bf00      	nop
 800845c:	ffff0003 	.word	0xffff0003
 8008460:	10002b00 	.word	0x10002b00
 8008464:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800846e:	f043 0220 	orr.w	r2, r3, #32
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	2203      	movs	r2, #3
 800847c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8008480:	2301      	movs	r3, #1
 8008482:	e010      	b.n	80084a6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e005      	b.n	8008498 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2200      	movs	r2, #0
 8008490:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3304      	adds	r3, #4
 8008496:	60fb      	str	r3, [r7, #12]
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d3f3      	bcc.n	800848c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 80084a4:	2300      	movs	r3, #0
}
 80084a6:	4618      	mov	r0, r3
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop

080084b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80084b4:	b480      	push	{r7}
 80084b6:	b089      	sub	sp, #36	; 0x24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
 80084bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80084be:	2300      	movs	r3, #0
 80084c0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80084c2:	4b89      	ldr	r3, [pc, #548]	; (80086e8 <HAL_GPIO_Init+0x234>)
 80084c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80084c6:	e194      	b.n	80087f2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	2101      	movs	r1, #1
 80084ce:	69fb      	ldr	r3, [r7, #28]
 80084d0:	fa01 f303 	lsl.w	r3, r1, r3
 80084d4:	4013      	ands	r3, r2
 80084d6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	f000 8186 	beq.w	80087ec <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	2b01      	cmp	r3, #1
 80084e6:	d00b      	beq.n	8008500 <HAL_GPIO_Init+0x4c>
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	2b02      	cmp	r3, #2
 80084ee:	d007      	beq.n	8008500 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80084f4:	2b11      	cmp	r3, #17
 80084f6:	d003      	beq.n	8008500 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	685b      	ldr	r3, [r3, #4]
 80084fc:	2b12      	cmp	r3, #18
 80084fe:	d130      	bne.n	8008562 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	005b      	lsls	r3, r3, #1
 800850a:	2203      	movs	r2, #3
 800850c:	fa02 f303 	lsl.w	r3, r2, r3
 8008510:	43db      	mvns	r3, r3
 8008512:	69ba      	ldr	r2, [r7, #24]
 8008514:	4013      	ands	r3, r2
 8008516:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	68da      	ldr	r2, [r3, #12]
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	005b      	lsls	r3, r3, #1
 8008520:	fa02 f303 	lsl.w	r3, r2, r3
 8008524:	69ba      	ldr	r2, [r7, #24]
 8008526:	4313      	orrs	r3, r2
 8008528:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	69ba      	ldr	r2, [r7, #24]
 800852e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	685b      	ldr	r3, [r3, #4]
 8008534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008536:	2201      	movs	r2, #1
 8008538:	69fb      	ldr	r3, [r7, #28]
 800853a:	fa02 f303 	lsl.w	r3, r2, r3
 800853e:	43db      	mvns	r3, r3
 8008540:	69ba      	ldr	r2, [r7, #24]
 8008542:	4013      	ands	r3, r2
 8008544:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	091b      	lsrs	r3, r3, #4
 800854c:	f003 0201 	and.w	r2, r3, #1
 8008550:	69fb      	ldr	r3, [r7, #28]
 8008552:	fa02 f303 	lsl.w	r3, r2, r3
 8008556:	69ba      	ldr	r2, [r7, #24]
 8008558:	4313      	orrs	r3, r2
 800855a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	69ba      	ldr	r2, [r7, #24]
 8008560:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	68db      	ldr	r3, [r3, #12]
 8008566:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	005b      	lsls	r3, r3, #1
 800856c:	2203      	movs	r2, #3
 800856e:	fa02 f303 	lsl.w	r3, r2, r3
 8008572:	43db      	mvns	r3, r3
 8008574:	69ba      	ldr	r2, [r7, #24]
 8008576:	4013      	ands	r3, r2
 8008578:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800857a:	683b      	ldr	r3, [r7, #0]
 800857c:	689a      	ldr	r2, [r3, #8]
 800857e:	69fb      	ldr	r3, [r7, #28]
 8008580:	005b      	lsls	r3, r3, #1
 8008582:	fa02 f303 	lsl.w	r3, r2, r3
 8008586:	69ba      	ldr	r2, [r7, #24]
 8008588:	4313      	orrs	r3, r2
 800858a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	69ba      	ldr	r2, [r7, #24]
 8008590:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685b      	ldr	r3, [r3, #4]
 8008596:	2b02      	cmp	r3, #2
 8008598:	d003      	beq.n	80085a2 <HAL_GPIO_Init+0xee>
 800859a:	683b      	ldr	r3, [r7, #0]
 800859c:	685b      	ldr	r3, [r3, #4]
 800859e:	2b12      	cmp	r3, #18
 80085a0:	d123      	bne.n	80085ea <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	08da      	lsrs	r2, r3, #3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3208      	adds	r2, #8
 80085aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80085b0:	69fb      	ldr	r3, [r7, #28]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	009b      	lsls	r3, r3, #2
 80085b8:	220f      	movs	r2, #15
 80085ba:	fa02 f303 	lsl.w	r3, r2, r3
 80085be:	43db      	mvns	r3, r3
 80085c0:	69ba      	ldr	r2, [r7, #24]
 80085c2:	4013      	ands	r3, r2
 80085c4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691a      	ldr	r2, [r3, #16]
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	f003 0307 	and.w	r3, r3, #7
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	fa02 f303 	lsl.w	r3, r2, r3
 80085d6:	69ba      	ldr	r2, [r7, #24]
 80085d8:	4313      	orrs	r3, r2
 80085da:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80085dc:	69fb      	ldr	r3, [r7, #28]
 80085de:	08da      	lsrs	r2, r3, #3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	3208      	adds	r2, #8
 80085e4:	69b9      	ldr	r1, [r7, #24]
 80085e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	005b      	lsls	r3, r3, #1
 80085f4:	2203      	movs	r2, #3
 80085f6:	fa02 f303 	lsl.w	r3, r2, r3
 80085fa:	43db      	mvns	r3, r3
 80085fc:	69ba      	ldr	r2, [r7, #24]
 80085fe:	4013      	ands	r3, r2
 8008600:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	f003 0203 	and.w	r2, r3, #3
 800860a:	69fb      	ldr	r3, [r7, #28]
 800860c:	005b      	lsls	r3, r3, #1
 800860e:	fa02 f303 	lsl.w	r3, r2, r3
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	4313      	orrs	r3, r2
 8008616:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	69ba      	ldr	r2, [r7, #24]
 800861c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	685b      	ldr	r3, [r3, #4]
 8008622:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008626:	2b00      	cmp	r3, #0
 8008628:	f000 80e0 	beq.w	80087ec <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800862c:	4b2f      	ldr	r3, [pc, #188]	; (80086ec <HAL_GPIO_Init+0x238>)
 800862e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008632:	4a2e      	ldr	r2, [pc, #184]	; (80086ec <HAL_GPIO_Init+0x238>)
 8008634:	f043 0302 	orr.w	r3, r3, #2
 8008638:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800863c:	4b2b      	ldr	r3, [pc, #172]	; (80086ec <HAL_GPIO_Init+0x238>)
 800863e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800864a:	4a29      	ldr	r2, [pc, #164]	; (80086f0 <HAL_GPIO_Init+0x23c>)
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	089b      	lsrs	r3, r3, #2
 8008650:	3302      	adds	r3, #2
 8008652:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008656:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008658:	69fb      	ldr	r3, [r7, #28]
 800865a:	f003 0303 	and.w	r3, r3, #3
 800865e:	009b      	lsls	r3, r3, #2
 8008660:	220f      	movs	r2, #15
 8008662:	fa02 f303 	lsl.w	r3, r2, r3
 8008666:	43db      	mvns	r3, r3
 8008668:	69ba      	ldr	r2, [r7, #24]
 800866a:	4013      	ands	r3, r2
 800866c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	4a20      	ldr	r2, [pc, #128]	; (80086f4 <HAL_GPIO_Init+0x240>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d052      	beq.n	800871c <HAL_GPIO_Init+0x268>
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	4a1f      	ldr	r2, [pc, #124]	; (80086f8 <HAL_GPIO_Init+0x244>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d031      	beq.n	80086e2 <HAL_GPIO_Init+0x22e>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	4a1e      	ldr	r2, [pc, #120]	; (80086fc <HAL_GPIO_Init+0x248>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d02b      	beq.n	80086de <HAL_GPIO_Init+0x22a>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	4a1d      	ldr	r2, [pc, #116]	; (8008700 <HAL_GPIO_Init+0x24c>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d025      	beq.n	80086da <HAL_GPIO_Init+0x226>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	4a1c      	ldr	r2, [pc, #112]	; (8008704 <HAL_GPIO_Init+0x250>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d01f      	beq.n	80086d6 <HAL_GPIO_Init+0x222>
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	4a1b      	ldr	r2, [pc, #108]	; (8008708 <HAL_GPIO_Init+0x254>)
 800869a:	4293      	cmp	r3, r2
 800869c:	d019      	beq.n	80086d2 <HAL_GPIO_Init+0x21e>
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	4a1a      	ldr	r2, [pc, #104]	; (800870c <HAL_GPIO_Init+0x258>)
 80086a2:	4293      	cmp	r3, r2
 80086a4:	d013      	beq.n	80086ce <HAL_GPIO_Init+0x21a>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	4a19      	ldr	r2, [pc, #100]	; (8008710 <HAL_GPIO_Init+0x25c>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d00d      	beq.n	80086ca <HAL_GPIO_Init+0x216>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	4a18      	ldr	r2, [pc, #96]	; (8008714 <HAL_GPIO_Init+0x260>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d007      	beq.n	80086c6 <HAL_GPIO_Init+0x212>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	4a17      	ldr	r2, [pc, #92]	; (8008718 <HAL_GPIO_Init+0x264>)
 80086ba:	4293      	cmp	r3, r2
 80086bc:	d101      	bne.n	80086c2 <HAL_GPIO_Init+0x20e>
 80086be:	2309      	movs	r3, #9
 80086c0:	e02d      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086c2:	230a      	movs	r3, #10
 80086c4:	e02b      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086c6:	2308      	movs	r3, #8
 80086c8:	e029      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086ca:	2307      	movs	r3, #7
 80086cc:	e027      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086ce:	2306      	movs	r3, #6
 80086d0:	e025      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086d2:	2305      	movs	r3, #5
 80086d4:	e023      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086d6:	2304      	movs	r3, #4
 80086d8:	e021      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086da:	2303      	movs	r3, #3
 80086dc:	e01f      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086de:	2302      	movs	r3, #2
 80086e0:	e01d      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086e2:	2301      	movs	r3, #1
 80086e4:	e01b      	b.n	800871e <HAL_GPIO_Init+0x26a>
 80086e6:	bf00      	nop
 80086e8:	58000080 	.word	0x58000080
 80086ec:	58024400 	.word	0x58024400
 80086f0:	58000400 	.word	0x58000400
 80086f4:	58020000 	.word	0x58020000
 80086f8:	58020400 	.word	0x58020400
 80086fc:	58020800 	.word	0x58020800
 8008700:	58020c00 	.word	0x58020c00
 8008704:	58021000 	.word	0x58021000
 8008708:	58021400 	.word	0x58021400
 800870c:	58021800 	.word	0x58021800
 8008710:	58021c00 	.word	0x58021c00
 8008714:	58022000 	.word	0x58022000
 8008718:	58022400 	.word	0x58022400
 800871c:	2300      	movs	r3, #0
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	f002 0203 	and.w	r2, r2, #3
 8008724:	0092      	lsls	r2, r2, #2
 8008726:	4093      	lsls	r3, r2
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	4313      	orrs	r3, r2
 800872c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800872e:	4938      	ldr	r1, [pc, #224]	; (8008810 <HAL_GPIO_Init+0x35c>)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	3302      	adds	r3, #2
 8008736:	69ba      	ldr	r2, [r7, #24]
 8008738:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	43db      	mvns	r3, r3
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	4013      	ands	r3, r2
 800874a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	685b      	ldr	r3, [r3, #4]
 8008750:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8008758:	69ba      	ldr	r2, [r7, #24]
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	4313      	orrs	r3, r2
 800875e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	69ba      	ldr	r2, [r7, #24]
 8008764:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8008766:	697b      	ldr	r3, [r7, #20]
 8008768:	685b      	ldr	r3, [r3, #4]
 800876a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800876c:	693b      	ldr	r3, [r7, #16]
 800876e:	43db      	mvns	r3, r3
 8008770:	69ba      	ldr	r2, [r7, #24]
 8008772:	4013      	ands	r3, r2
 8008774:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685b      	ldr	r3, [r3, #4]
 800877a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8008782:	69ba      	ldr	r2, [r7, #24]
 8008784:	693b      	ldr	r3, [r7, #16]
 8008786:	4313      	orrs	r3, r2
 8008788:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	69ba      	ldr	r2, [r7, #24]
 800878e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008790:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8008798:	693b      	ldr	r3, [r7, #16]
 800879a:	43db      	mvns	r3, r3
 800879c:	69ba      	ldr	r2, [r7, #24]
 800879e:	4013      	ands	r3, r2
 80087a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	685b      	ldr	r3, [r3, #4]
 80087a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	4313      	orrs	r3, r2
 80087b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80087b6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087ba:	69bb      	ldr	r3, [r7, #24]
 80087bc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80087be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	43db      	mvns	r3, r3
 80087ca:	69ba      	ldr	r2, [r7, #24]
 80087cc:	4013      	ands	r3, r2
 80087ce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 80087dc:	69ba      	ldr	r2, [r7, #24]
 80087de:	693b      	ldr	r3, [r7, #16]
 80087e0:	4313      	orrs	r3, r2
 80087e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80087e4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 80087ec:	69fb      	ldr	r3, [r7, #28]
 80087ee:	3301      	adds	r3, #1
 80087f0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	681a      	ldr	r2, [r3, #0]
 80087f6:	69fb      	ldr	r3, [r7, #28]
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	f47f ae63 	bne.w	80084c8 <HAL_GPIO_Init+0x14>
  }
}
 8008802:	bf00      	nop
 8008804:	3724      	adds	r7, #36	; 0x24
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr
 800880e:	bf00      	nop
 8008810:	58000400 	.word	0x58000400

08008814 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008814:	b480      	push	{r7}
 8008816:	b085      	sub	sp, #20
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
 800881c:	460b      	mov	r3, r1
 800881e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	887b      	ldrh	r3, [r7, #2]
 8008826:	4013      	ands	r3, r2
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800882c:	2301      	movs	r3, #1
 800882e:	73fb      	strb	r3, [r7, #15]
 8008830:	e001      	b.n	8008836 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008832:	2300      	movs	r3, #0
 8008834:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008836:	7bfb      	ldrb	r3, [r7, #15]
}
 8008838:	4618      	mov	r0, r3
 800883a:	3714      	adds	r7, #20
 800883c:	46bd      	mov	sp, r7
 800883e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008842:	4770      	bx	lr

08008844 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008844:	b480      	push	{r7}
 8008846:	b083      	sub	sp, #12
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
 800884c:	460b      	mov	r3, r1
 800884e:	807b      	strh	r3, [r7, #2]
 8008850:	4613      	mov	r3, r2
 8008852:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008854:	787b      	ldrb	r3, [r7, #1]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d003      	beq.n	8008862 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800885a:	887a      	ldrh	r2, [r7, #2]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008860:	e003      	b.n	800886a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008862:	887b      	ldrh	r3, [r7, #2]
 8008864:	041a      	lsls	r2, r3, #16
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	619a      	str	r2, [r3, #24]
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	460b      	mov	r3, r1
 8008880:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	695a      	ldr	r2, [r3, #20]
 8008886:	887b      	ldrh	r3, [r7, #2]
 8008888:	401a      	ands	r2, r3
 800888a:	887b      	ldrh	r3, [r7, #2]
 800888c:	429a      	cmp	r2, r3
 800888e:	d104      	bne.n	800889a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008890:	887b      	ldrh	r3, [r7, #2]
 8008892:	041a      	lsls	r2, r3, #16
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8008898:	e002      	b.n	80088a0 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800889a:	887a      	ldrh	r2, [r7, #2]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	619a      	str	r2, [r3, #24]
}
 80088a0:	bf00      	nop
 80088a2:	370c      	adds	r7, #12
 80088a4:	46bd      	mov	sp, r7
 80088a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088aa:	4770      	bx	lr

080088ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	b082      	sub	sp, #8
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	4603      	mov	r3, r0
 80088b4:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 80088b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80088ba:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80088be:	88fb      	ldrh	r3, [r7, #6]
 80088c0:	4013      	ands	r3, r2
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d008      	beq.n	80088d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80088c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80088ca:	88fb      	ldrh	r3, [r7, #6]
 80088cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80088d0:	88fb      	ldrh	r3, [r7, #6]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f7fb fd5c 	bl	8004390 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80088d8:	bf00      	nop
 80088da:	3708      	adds	r7, #8
 80088dc:	46bd      	mov	sp, r7
 80088de:	bd80      	pop	{r7, pc}

080088e0 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C5 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C5 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b085      	sub	sp, #20
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80088e8:	4b0d      	ldr	r3, [pc, #52]	; (8008920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088ee:	4a0c      	ldr	r2, [pc, #48]	; (8008920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088f0:	f043 0302 	orr.w	r3, r3, #2
 80088f4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80088f8:	4b09      	ldr	r3, [pc, #36]	; (8008920 <HAL_I2CEx_EnableFastModePlus+0x40>)
 80088fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088fe:	f003 0302 	and.w	r3, r3, #2
 8008902:	60fb      	str	r3, [r7, #12]
 8008904:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->PMCR, (uint32_t)ConfigFastModePlus);
 8008906:	4b07      	ldr	r3, [pc, #28]	; (8008924 <HAL_I2CEx_EnableFastModePlus+0x44>)
 8008908:	685a      	ldr	r2, [r3, #4]
 800890a:	4906      	ldr	r1, [pc, #24]	; (8008924 <HAL_I2CEx_EnableFastModePlus+0x44>)
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	4313      	orrs	r3, r2
 8008910:	604b      	str	r3, [r1, #4]
}
 8008912:	bf00      	nop
 8008914:	3714      	adds	r7, #20
 8008916:	46bd      	mov	sp, r7
 8008918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	58024400 	.word	0x58024400
 8008924:	58000400 	.word	0x58000400

08008928 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8008928:	b5f0      	push	{r4, r5, r6, r7, lr}
 800892a:	b08f      	sub	sp, #60	; 0x3c
 800892c:	af0a      	add	r7, sp, #40	; 0x28
 800892e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d101      	bne.n	800893a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8008936:	2301      	movs	r3, #1
 8008938:	e116      	b.n	8008b68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b00      	cmp	r3, #0
 800894a:	d106      	bne.n	800895a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	2200      	movs	r2, #0
 8008950:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f010 fe43 	bl	80195e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2203      	movs	r2, #3
 800895e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8008962:	68bb      	ldr	r3, [r7, #8]
 8008964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008966:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800896a:	2b00      	cmp	r3, #0
 800896c:	d102      	bne.n	8008974 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4618      	mov	r0, r3
 800897a:	f009 fe48 	bl	801260e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	603b      	str	r3, [r7, #0]
 8008984:	687e      	ldr	r6, [r7, #4]
 8008986:	466d      	mov	r5, sp
 8008988:	f106 0410 	add.w	r4, r6, #16
 800898c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800898e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008990:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008992:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008994:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008998:	e885 0003 	stmia.w	r5, {r0, r1}
 800899c:	1d33      	adds	r3, r6, #4
 800899e:	cb0e      	ldmia	r3, {r1, r2, r3}
 80089a0:	6838      	ldr	r0, [r7, #0]
 80089a2:	f009 fd1f 	bl	80123e4 <USB_CoreInit>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d005      	beq.n	80089b8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2202      	movs	r2, #2
 80089b0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e0d7      	b.n	8008b68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	2100      	movs	r1, #0
 80089be:	4618      	mov	r0, r3
 80089c0:	f009 fe36 	bl	8012630 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80089c4:	2300      	movs	r3, #0
 80089c6:	73fb      	strb	r3, [r7, #15]
 80089c8:	e04a      	b.n	8008a60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80089ca:	7bfa      	ldrb	r2, [r7, #15]
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	4613      	mov	r3, r2
 80089d0:	00db      	lsls	r3, r3, #3
 80089d2:	1a9b      	subs	r3, r3, r2
 80089d4:	009b      	lsls	r3, r3, #2
 80089d6:	440b      	add	r3, r1
 80089d8:	333d      	adds	r3, #61	; 0x3d
 80089da:	2201      	movs	r2, #1
 80089dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80089de:	7bfa      	ldrb	r2, [r7, #15]
 80089e0:	6879      	ldr	r1, [r7, #4]
 80089e2:	4613      	mov	r3, r2
 80089e4:	00db      	lsls	r3, r3, #3
 80089e6:	1a9b      	subs	r3, r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	440b      	add	r3, r1
 80089ec:	333c      	adds	r3, #60	; 0x3c
 80089ee:	7bfa      	ldrb	r2, [r7, #15]
 80089f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80089f2:	7bfa      	ldrb	r2, [r7, #15]
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
 80089f6:	b298      	uxth	r0, r3
 80089f8:	6879      	ldr	r1, [r7, #4]
 80089fa:	4613      	mov	r3, r2
 80089fc:	00db      	lsls	r3, r3, #3
 80089fe:	1a9b      	subs	r3, r3, r2
 8008a00:	009b      	lsls	r3, r3, #2
 8008a02:	440b      	add	r3, r1
 8008a04:	3342      	adds	r3, #66	; 0x42
 8008a06:	4602      	mov	r2, r0
 8008a08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8008a0a:	7bfa      	ldrb	r2, [r7, #15]
 8008a0c:	6879      	ldr	r1, [r7, #4]
 8008a0e:	4613      	mov	r3, r2
 8008a10:	00db      	lsls	r3, r3, #3
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	009b      	lsls	r3, r3, #2
 8008a16:	440b      	add	r3, r1
 8008a18:	333f      	adds	r3, #63	; 0x3f
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8008a1e:	7bfa      	ldrb	r2, [r7, #15]
 8008a20:	6879      	ldr	r1, [r7, #4]
 8008a22:	4613      	mov	r3, r2
 8008a24:	00db      	lsls	r3, r3, #3
 8008a26:	1a9b      	subs	r3, r3, r2
 8008a28:	009b      	lsls	r3, r3, #2
 8008a2a:	440b      	add	r3, r1
 8008a2c:	3344      	adds	r3, #68	; 0x44
 8008a2e:	2200      	movs	r2, #0
 8008a30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8008a32:	7bfa      	ldrb	r2, [r7, #15]
 8008a34:	6879      	ldr	r1, [r7, #4]
 8008a36:	4613      	mov	r3, r2
 8008a38:	00db      	lsls	r3, r3, #3
 8008a3a:	1a9b      	subs	r3, r3, r2
 8008a3c:	009b      	lsls	r3, r3, #2
 8008a3e:	440b      	add	r3, r1
 8008a40:	3348      	adds	r3, #72	; 0x48
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8008a46:	7bfa      	ldrb	r2, [r7, #15]
 8008a48:	6879      	ldr	r1, [r7, #4]
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	00db      	lsls	r3, r3, #3
 8008a4e:	1a9b      	subs	r3, r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	3350      	adds	r3, #80	; 0x50
 8008a56:	2200      	movs	r2, #0
 8008a58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a5a:	7bfb      	ldrb	r3, [r7, #15]
 8008a5c:	3301      	adds	r3, #1
 8008a5e:	73fb      	strb	r3, [r7, #15]
 8008a60:	7bfa      	ldrb	r2, [r7, #15]
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	429a      	cmp	r2, r3
 8008a68:	d3af      	bcc.n	80089ca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]
 8008a6e:	e044      	b.n	8008afa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8008a70:	7bfa      	ldrb	r2, [r7, #15]
 8008a72:	6879      	ldr	r1, [r7, #4]
 8008a74:	4613      	mov	r3, r2
 8008a76:	00db      	lsls	r3, r3, #3
 8008a78:	1a9b      	subs	r3, r3, r2
 8008a7a:	009b      	lsls	r3, r3, #2
 8008a7c:	440b      	add	r3, r1
 8008a7e:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8008a82:	2200      	movs	r2, #0
 8008a84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8008a86:	7bfa      	ldrb	r2, [r7, #15]
 8008a88:	6879      	ldr	r1, [r7, #4]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	00db      	lsls	r3, r3, #3
 8008a8e:	1a9b      	subs	r3, r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	440b      	add	r3, r1
 8008a94:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8008a9c:	7bfa      	ldrb	r2, [r7, #15]
 8008a9e:	6879      	ldr	r1, [r7, #4]
 8008aa0:	4613      	mov	r3, r2
 8008aa2:	00db      	lsls	r3, r3, #3
 8008aa4:	1a9b      	subs	r3, r3, r2
 8008aa6:	009b      	lsls	r3, r3, #2
 8008aa8:	440b      	add	r3, r1
 8008aaa:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8008aae:	2200      	movs	r2, #0
 8008ab0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8008ab2:	7bfa      	ldrb	r2, [r7, #15]
 8008ab4:	6879      	ldr	r1, [r7, #4]
 8008ab6:	4613      	mov	r3, r2
 8008ab8:	00db      	lsls	r3, r3, #3
 8008aba:	1a9b      	subs	r3, r3, r2
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	440b      	add	r3, r1
 8008ac0:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8008ac8:	7bfa      	ldrb	r2, [r7, #15]
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	00db      	lsls	r3, r3, #3
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8008ada:	2200      	movs	r2, #0
 8008adc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8008ade:	7bfa      	ldrb	r2, [r7, #15]
 8008ae0:	6879      	ldr	r1, [r7, #4]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	00db      	lsls	r3, r3, #3
 8008ae6:	1a9b      	subs	r3, r3, r2
 8008ae8:	009b      	lsls	r3, r3, #2
 8008aea:	440b      	add	r3, r1
 8008aec:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8008af0:	2200      	movs	r2, #0
 8008af2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8008af4:	7bfb      	ldrb	r3, [r7, #15]
 8008af6:	3301      	adds	r3, #1
 8008af8:	73fb      	strb	r3, [r7, #15]
 8008afa:	7bfa      	ldrb	r2, [r7, #15]
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d3b5      	bcc.n	8008a70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	603b      	str	r3, [r7, #0]
 8008b0a:	687e      	ldr	r6, [r7, #4]
 8008b0c:	466d      	mov	r5, sp
 8008b0e:	f106 0410 	add.w	r4, r6, #16
 8008b12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8008b18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8008b1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8008b1e:	e885 0003 	stmia.w	r5, {r0, r1}
 8008b22:	1d33      	adds	r3, r6, #4
 8008b24:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008b26:	6838      	ldr	r0, [r7, #0]
 8008b28:	f009 fdac 	bl	8012684 <USB_DevInit>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d005      	beq.n	8008b3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	2202      	movs	r2, #2
 8008b36:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e014      	b.n	8008b68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	2200      	movs	r2, #0
 8008b42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2201      	movs	r2, #1
 8008b4a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b52:	2b01      	cmp	r3, #1
 8008b54:	d102      	bne.n	8008b5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f001 f8be 	bl	8009cd8 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4618      	mov	r0, r3
 8008b62:	f00a fdeb 	bl	801373c <USB_DevDisconnect>

  return HAL_OK;
 8008b66:	2300      	movs	r3, #0
}
 8008b68:	4618      	mov	r0, r3
 8008b6a:	3714      	adds	r7, #20
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008b70 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b084      	sub	sp, #16
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */

  __HAL_LOCK(hpcd);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	d101      	bne.n	8008b8c <HAL_PCD_Start+0x1c>
 8008b88:	2302      	movs	r3, #2
 8008b8a:	e020      	b.n	8008bce <HAL_PCD_Start+0x5e>
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2201      	movs	r2, #1
 8008b90:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d109      	bne.n	8008bb0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d005      	beq.n	8008bb0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ba8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
  (void)USB_DevConnect(hpcd->Instance);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	f00a fda9 	bl	801370c <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	f009 fd14 	bl	80125ec <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8008bcc:	2300      	movs	r3, #0
}
 8008bce:	4618      	mov	r0, r3
 8008bd0:	3710      	adds	r7, #16
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8008bd6:	b590      	push	{r4, r7, lr}
 8008bd8:	b08d      	sub	sp, #52	; 0x34
 8008bda:	af00      	add	r7, sp, #0
 8008bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	61fb      	str	r3, [r7, #28]
  uint32_t i, ep_intr, epint, epnum;
  uint32_t fifoemptymsk, temp;
  USB_OTG_EPTypeDef *ep;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4618      	mov	r0, r3
 8008bee:	f00a fe50 	bl	8013892 <USB_GetMode>
 8008bf2:	4603      	mov	r3, r0
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	f040 83ca 	bne.w	800938e <HAL_PCD_IRQHandler+0x7b8>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	4618      	mov	r0, r3
 8008c00:	f00a fdb4 	bl	801376c <USB_ReadInterrupts>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 83c0 	beq.w	800938c <HAL_PCD_IRQHandler+0x7b6>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f00a fdab 	bl	801376c <USB_ReadInterrupts>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f003 0302 	and.w	r3, r3, #2
 8008c1c:	2b02      	cmp	r3, #2
 8008c1e:	d107      	bne.n	8008c30 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	695a      	ldr	r2, [r3, #20]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f002 0202 	and.w	r2, r2, #2
 8008c2e:	615a      	str	r2, [r3, #20]
    }

     /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f00a fd99 	bl	801376c <USB_ReadInterrupts>
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	f003 0310 	and.w	r3, r3, #16
 8008c40:	2b10      	cmp	r3, #16
 8008c42:	d161      	bne.n	8008d08 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	699a      	ldr	r2, [r3, #24]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f022 0210 	bic.w	r2, r2, #16
 8008c52:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8008c54:	6a3b      	ldr	r3, [r7, #32]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8008c5a:	69bb      	ldr	r3, [r7, #24]
 8008c5c:	f003 020f 	and.w	r2, r3, #15
 8008c60:	4613      	mov	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	1a9b      	subs	r3, r3, r2
 8008c66:	009b      	lsls	r3, r3, #2
 8008c68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	4413      	add	r3, r2
 8008c70:	3304      	adds	r3, #4
 8008c72:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8008c74:	69bb      	ldr	r3, [r7, #24]
 8008c76:	0c5b      	lsrs	r3, r3, #17
 8008c78:	f003 030f 	and.w	r3, r3, #15
 8008c7c:	2b02      	cmp	r3, #2
 8008c7e:	d124      	bne.n	8008cca <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8008c80:	69ba      	ldr	r2, [r7, #24]
 8008c82:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8008c86:	4013      	ands	r3, r2
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d035      	beq.n	8008cf8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8008c90:	69bb      	ldr	r3, [r7, #24]
 8008c92:	091b      	lsrs	r3, r3, #4
 8008c94:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8008c96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	6a38      	ldr	r0, [r7, #32]
 8008ca0:	f00a fc11 	bl	80134c6 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ca4:	697b      	ldr	r3, [r7, #20]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	69bb      	ldr	r3, [r7, #24]
 8008caa:	091b      	lsrs	r3, r3, #4
 8008cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cb0:	441a      	add	r2, r3
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008cb6:	697b      	ldr	r3, [r7, #20]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	091b      	lsrs	r3, r3, #4
 8008cbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cc2:	441a      	add	r2, r3
 8008cc4:	697b      	ldr	r3, [r7, #20]
 8008cc6:	619a      	str	r2, [r3, #24]
 8008cc8:	e016      	b.n	8008cf8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	0c5b      	lsrs	r3, r3, #17
 8008cce:	f003 030f 	and.w	r3, r3, #15
 8008cd2:	2b06      	cmp	r3, #6
 8008cd4:	d110      	bne.n	8008cf8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008cdc:	2208      	movs	r2, #8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	6a38      	ldr	r0, [r7, #32]
 8008ce2:	f00a fbf0 	bl	80134c6 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	699a      	ldr	r2, [r3, #24]
 8008cea:	69bb      	ldr	r3, [r7, #24]
 8008cec:	091b      	lsrs	r3, r3, #4
 8008cee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008cf2:	441a      	add	r2, r3
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	619a      	str	r2, [r3, #24]
      }
      else
      {
        /* ... */
      }
      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	699a      	ldr	r2, [r3, #24]
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f042 0210 	orr.w	r2, r2, #16
 8008d06:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f00a fd2d 	bl	801376c <USB_ReadInterrupts>
 8008d12:	4603      	mov	r3, r0
 8008d14:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008d18:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008d1c:	d16e      	bne.n	8008dfc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4618      	mov	r0, r3
 8008d28:	f00a fd33 	bl	8013792 <USB_ReadDevAllOutEpInterrupt>
 8008d2c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8008d2e:	e062      	b.n	8008df6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8008d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d32:	f003 0301 	and.w	r3, r3, #1
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d057      	beq.n	8008dea <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d40:	b2d2      	uxtb	r2, r2
 8008d42:	4611      	mov	r1, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	f00a fd58 	bl	80137fa <USB_ReadDevOutEPInterrupt>
 8008d4a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	f003 0301 	and.w	r3, r3, #1
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d00c      	beq.n	8008d70 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	015a      	lsls	r2, r3, #5
 8008d5a:	69fb      	ldr	r3, [r7, #28]
 8008d5c:	4413      	add	r3, r2
 8008d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d62:	461a      	mov	r2, r3
 8008d64:	2301      	movs	r3, #1
 8008d66:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8008d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fe0a 	bl	8009984 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8008d70:	693b      	ldr	r3, [r7, #16]
 8008d72:	f003 0308 	and.w	r3, r3, #8
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d00c      	beq.n	8008d94 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	69fb      	ldr	r3, [r7, #28]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d86:	461a      	mov	r2, r3
 8008d88:	2308      	movs	r3, #8
 8008d8a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8008d8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f000 ff04 	bl	8009b9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	f003 0310 	and.w	r3, r3, #16
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d008      	beq.n	8008db0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	69fb      	ldr	r3, [r7, #28]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008daa:	461a      	mov	r2, r3
 8008dac:	2310      	movs	r3, #16
 8008dae:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	f003 0320 	and.w	r3, r3, #32
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d008      	beq.n	8008dcc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8008dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dbc:	015a      	lsls	r2, r3, #5
 8008dbe:	69fb      	ldr	r3, [r7, #28]
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	2320      	movs	r3, #32
 8008dca:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8008dcc:	693b      	ldr	r3, [r7, #16]
 8008dce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d009      	beq.n	8008dea <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8008dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd8:	015a      	lsls	r2, r3, #5
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	4413      	add	r3, r2
 8008dde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de2:	461a      	mov	r2, r3
 8008de4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008de8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8008dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dec:	3301      	adds	r3, #1
 8008dee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008df0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df2:	085b      	lsrs	r3, r3, #1
 8008df4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d199      	bne.n	8008d30 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4618      	mov	r0, r3
 8008e02:	f00a fcb3 	bl	801376c <USB_ReadInterrupts>
 8008e06:	4603      	mov	r3, r0
 8008e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008e0c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e10:	f040 80c0 	bne.w	8008f94 <HAL_PCD_IRQHandler+0x3be>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4618      	mov	r0, r3
 8008e1a:	f00a fcd4 	bl	80137c6 <USB_ReadDevAllInEpInterrupt>
 8008e1e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8008e20:	2300      	movs	r3, #0
 8008e22:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8008e24:	e0b2      	b.n	8008f8c <HAL_PCD_IRQHandler+0x3b6>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8008e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e28:	f003 0301 	and.w	r3, r3, #1
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	f000 80a7 	beq.w	8008f80 <HAL_PCD_IRQHandler+0x3aa>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e38:	b2d2      	uxtb	r2, r2
 8008e3a:	4611      	mov	r1, r2
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f00a fcfa 	bl	8013836 <USB_ReadDevInEPInterrupt>
 8008e42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d057      	beq.n	8008efe <HAL_PCD_IRQHandler+0x328>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8008e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e50:	f003 030f 	and.w	r3, r3, #15
 8008e54:	2201      	movs	r2, #1
 8008e56:	fa02 f303 	lsl.w	r3, r2, r3
 8008e5a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8008e5c:	69fb      	ldr	r3, [r7, #28]
 8008e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	43db      	mvns	r3, r3
 8008e68:	69f9      	ldr	r1, [r7, #28]
 8008e6a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008e6e:	4013      	ands	r3, r2
 8008e70:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8008e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	461a      	mov	r2, r3
 8008e80:	2301      	movs	r3, #1
 8008e82:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	691b      	ldr	r3, [r3, #16]
 8008e88:	2b01      	cmp	r3, #1
 8008e8a:	d132      	bne.n	8008ef2 <HAL_PCD_IRQHandler+0x31c>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8008e8c:	6879      	ldr	r1, [r7, #4]
 8008e8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e90:	4613      	mov	r3, r2
 8008e92:	00db      	lsls	r3, r3, #3
 8008e94:	1a9b      	subs	r3, r3, r2
 8008e96:	009b      	lsls	r3, r3, #2
 8008e98:	440b      	add	r3, r1
 8008e9a:	3348      	adds	r3, #72	; 0x48
 8008e9c:	6819      	ldr	r1, [r3, #0]
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	00db      	lsls	r3, r3, #3
 8008ea6:	1a9b      	subs	r3, r3, r2
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	4403      	add	r3, r0
 8008eac:	3344      	adds	r3, #68	; 0x44
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4419      	add	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008eb6:	4613      	mov	r3, r2
 8008eb8:	00db      	lsls	r3, r3, #3
 8008eba:	1a9b      	subs	r3, r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4403      	add	r3, r0
 8008ec0:	3348      	adds	r3, #72	; 0x48
 8008ec2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8008ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d113      	bne.n	8008ef2 <HAL_PCD_IRQHandler+0x31c>
 8008eca:	6879      	ldr	r1, [r7, #4]
 8008ecc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ece:	4613      	mov	r3, r2
 8008ed0:	00db      	lsls	r3, r3, #3
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	440b      	add	r3, r1
 8008ed8:	3350      	adds	r3, #80	; 0x50
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d108      	bne.n	8008ef2 <HAL_PCD_IRQHandler+0x31c>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6818      	ldr	r0, [r3, #0]
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8008eea:	461a      	mov	r2, r3
 8008eec:	2101      	movs	r1, #1
 8008eee:	f00a fd03 	bl	80138f8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8008ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ef4:	b2db      	uxtb	r3, r3
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f010 fbf0 	bl	80196de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d008      	beq.n	8008f1a <HAL_PCD_IRQHandler+0x344>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8008f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f0a:	015a      	lsls	r2, r3, #5
 8008f0c:	69fb      	ldr	r3, [r7, #28]
 8008f0e:	4413      	add	r3, r2
 8008f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f14:	461a      	mov	r2, r3
 8008f16:	2308      	movs	r3, #8
 8008f18:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f003 0310 	and.w	r3, r3, #16
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d008      	beq.n	8008f36 <HAL_PCD_IRQHandler+0x360>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8008f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f26:	015a      	lsls	r2, r3, #5
 8008f28:	69fb      	ldr	r3, [r7, #28]
 8008f2a:	4413      	add	r3, r2
 8008f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f30:	461a      	mov	r2, r3
 8008f32:	2310      	movs	r3, #16
 8008f34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8008f36:	693b      	ldr	r3, [r7, #16]
 8008f38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d008      	beq.n	8008f52 <HAL_PCD_IRQHandler+0x37c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8008f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	69fb      	ldr	r3, [r7, #28]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	2340      	movs	r3, #64	; 0x40
 8008f50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	f003 0302 	and.w	r3, r3, #2
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d008      	beq.n	8008f6e <HAL_PCD_IRQHandler+0x398>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8008f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	69fb      	ldr	r3, [r7, #28]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	461a      	mov	r2, r3
 8008f6a:	2302      	movs	r3, #2
 8008f6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8008f6e:	693b      	ldr	r3, [r7, #16]
 8008f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d003      	beq.n	8008f80 <HAL_PCD_IRQHandler+0x3aa>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8008f78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fc75 	bl	800986a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8008f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f82:	3301      	adds	r3, #1
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8008f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f88:	085b      	lsrs	r3, r3, #1
 8008f8a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8008f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	f47f af49 	bne.w	8008e26 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f00a fbe7 	bl	801376c <USB_ReadInterrupts>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008fa8:	d122      	bne.n	8008ff0 <HAL_PCD_IRQHandler+0x41a>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8008faa:	69fb      	ldr	r3, [r7, #28]
 8008fac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	69fa      	ldr	r2, [r7, #28]
 8008fb4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fb8:	f023 0301 	bic.w	r3, r3, #1
 8008fbc:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8008fc4:	2b01      	cmp	r3, #1
 8008fc6:	d108      	bne.n	8008fda <HAL_PCD_IRQHandler+0x404>
      {
        hpcd->LPM_State = LPM_L0;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8008fd0:	2100      	movs	r1, #0
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 fea4 	bl	8009d20 <HAL_PCDEx_LPM_Callback>
 8008fd8:	e002      	b.n	8008fe0 <HAL_PCD_IRQHandler+0x40a>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f010 fbf6 	bl	80197cc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	695a      	ldr	r2, [r3, #20]
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8008fee:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f00a fbb9 	bl	801376c <USB_ReadInterrupts>
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009000:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009004:	d112      	bne.n	800902c <HAL_PCD_IRQHandler+0x456>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8009006:	69fb      	ldr	r3, [r7, #28]
 8009008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800900c:	689b      	ldr	r3, [r3, #8]
 800900e:	f003 0301 	and.w	r3, r3, #1
 8009012:	2b01      	cmp	r3, #1
 8009014:	d102      	bne.n	800901c <HAL_PCD_IRQHandler+0x446>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f010 fbb2 	bl	8019780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	695a      	ldr	r2, [r3, #20]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800902a:	615a      	str	r2, [r3, #20]
    }
    
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4618      	mov	r0, r3
 8009032:	f00a fb9b 	bl	801376c <USB_ReadInterrupts>
 8009036:	4603      	mov	r3, r0
 8009038:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800903c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009040:	d121      	bne.n	8009086 <HAL_PCD_IRQHandler+0x4b0>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	695a      	ldr	r2, [r3, #20]
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8009050:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8009058:	2b00      	cmp	r3, #0
 800905a:	d111      	bne.n	8009080 <HAL_PCD_IRQHandler+0x4aa>
      {
        hpcd->LPM_State = LPM_L1;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800906a:	089b      	lsrs	r3, r3, #2
 800906c:	f003 020f 	and.w	r2, r3, #15
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8009076:	2101      	movs	r1, #1
 8009078:	6878      	ldr	r0, [r7, #4]
 800907a:	f000 fe51 	bl	8009d20 <HAL_PCDEx_LPM_Callback>
 800907e:	e002      	b.n	8009086 <HAL_PCD_IRQHandler+0x4b0>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f010 fb7d 	bl	8019780 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4618      	mov	r0, r3
 800908c:	f00a fb6e 	bl	801376c <USB_ReadInterrupts>
 8009090:	4603      	mov	r3, r0
 8009092:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009096:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800909a:	f040 80c7 	bne.w	800922c <HAL_PCD_IRQHandler+0x656>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800909e:	69fb      	ldr	r3, [r7, #28]
 80090a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	69fa      	ldr	r2, [r7, #28]
 80090a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80090ac:	f023 0301 	bic.w	r3, r3, #1
 80090b0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	2110      	movs	r1, #16
 80090b8:	4618      	mov	r0, r3
 80090ba:	f009 fc41 	bl	8012940 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80090be:	2300      	movs	r3, #0
 80090c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80090c2:	e056      	b.n	8009172 <HAL_PCD_IRQHandler+0x59c>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80090c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090c6:	015a      	lsls	r2, r3, #5
 80090c8:	69fb      	ldr	r3, [r7, #28]
 80090ca:	4413      	add	r3, r2
 80090cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d0:	461a      	mov	r2, r3
 80090d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80090d6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80090d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090da:	015a      	lsls	r2, r3, #5
 80090dc:	69fb      	ldr	r3, [r7, #28]
 80090de:	4413      	add	r3, r2
 80090e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80090e8:	0151      	lsls	r1, r2, #5
 80090ea:	69fa      	ldr	r2, [r7, #28]
 80090ec:	440a      	add	r2, r1
 80090ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80090f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80090f6:	6013      	str	r3, [r2, #0]
        USBx_INEP(i)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80090f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090fa:	015a      	lsls	r2, r3, #5
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	4413      	add	r3, r2
 8009100:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009108:	0151      	lsls	r1, r2, #5
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	440a      	add	r2, r1
 800910e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009112:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009116:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8009118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009124:	461a      	mov	r2, r3
 8009126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800912a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800912c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800912e:	015a      	lsls	r2, r3, #5
 8009130:	69fb      	ldr	r3, [r7, #28]
 8009132:	4413      	add	r3, r2
 8009134:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800913c:	0151      	lsls	r1, r2, #5
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	440a      	add	r2, r1
 8009142:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009146:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800914a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800914c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800914e:	015a      	lsls	r2, r3, #5
 8009150:	69fb      	ldr	r3, [r7, #28]
 8009152:	4413      	add	r3, r2
 8009154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800915c:	0151      	lsls	r1, r2, #5
 800915e:	69fa      	ldr	r2, [r7, #28]
 8009160:	440a      	add	r2, r1
 8009162:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009166:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800916a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800916c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916e:	3301      	adds	r3, #1
 8009170:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009178:	429a      	cmp	r2, r3
 800917a:	d3a3      	bcc.n	80090c4 <HAL_PCD_IRQHandler+0x4ee>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800917c:	69fb      	ldr	r3, [r7, #28]
 800917e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009182:	69db      	ldr	r3, [r3, #28]
 8009184:	69fa      	ldr	r2, [r7, #28]
 8009186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800918a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800918e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d016      	beq.n	80091c6 <HAL_PCD_IRQHandler+0x5f0>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8009198:	69fb      	ldr	r3, [r7, #28]
 800919a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091a2:	69fa      	ldr	r2, [r7, #28]
 80091a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091a8:	f043 030b 	orr.w	r3, r3, #11
 80091ac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80091b0:	69fb      	ldr	r3, [r7, #28]
 80091b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091b8:	69fa      	ldr	r2, [r7, #28]
 80091ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091be:	f043 030b 	orr.w	r3, r3, #11
 80091c2:	6453      	str	r3, [r2, #68]	; 0x44
 80091c4:	e015      	b.n	80091f2 <HAL_PCD_IRQHandler+0x61c>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80091c6:	69fb      	ldr	r3, [r7, #28]
 80091c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091cc:	695a      	ldr	r2, [r3, #20]
 80091ce:	69fb      	ldr	r3, [r7, #28]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d4:	4619      	mov	r1, r3
 80091d6:	f242 032b 	movw	r3, #8235	; 0x202b
 80091da:	4313      	orrs	r3, r2
 80091dc:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80091de:	69fb      	ldr	r3, [r7, #28]
 80091e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091e4:	691b      	ldr	r3, [r3, #16]
 80091e6:	69fa      	ldr	r2, [r7, #28]
 80091e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091ec:	f043 030b 	orr.w	r3, r3, #11
 80091f0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80091f2:	69fb      	ldr	r3, [r7, #28]
 80091f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	69fa      	ldr	r2, [r7, #28]
 80091fc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009200:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8009204:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6818      	ldr	r0, [r3, #0]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8009216:	461a      	mov	r2, r3
 8009218:	f00a fb6e 	bl	80138f8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	695a      	ldr	r2, [r3, #20]
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800922a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	4618      	mov	r0, r3
 8009232:	f00a fa9b 	bl	801376c <USB_ReadInterrupts>
 8009236:	4603      	mov	r3, r0
 8009238:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800923c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009240:	d124      	bne.n	800928c <HAL_PCD_IRQHandler+0x6b6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4618      	mov	r0, r3
 8009248:	f00a fb32 	bl	80138b0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4618      	mov	r0, r3
 8009252:	f009 fbd6 	bl	8012a02 <USB_GetDevSpeed>
 8009256:	4603      	mov	r3, r0
 8009258:	461a      	mov	r2, r3
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681c      	ldr	r4, [r3, #0]
 8009262:	f001 fdd9 	bl	800ae18 <HAL_RCC_GetHCLKFreq>
 8009266:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800926c:	b2db      	uxtb	r3, r3
 800926e:	461a      	mov	r2, r3
 8009270:	4620      	mov	r0, r4
 8009272:	f009 f919 	bl	80124a8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f010 fa59 	bl	801972e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	695a      	ldr	r2, [r3, #20]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800928a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4618      	mov	r0, r3
 8009292:	f00a fa6b 	bl	801376c <USB_ReadInterrupts>
 8009296:	4603      	mov	r3, r0
 8009298:	f003 0308 	and.w	r3, r3, #8
 800929c:	2b08      	cmp	r3, #8
 800929e:	d10a      	bne.n	80092b6 <HAL_PCD_IRQHandler+0x6e0>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80092a0:	6878      	ldr	r0, [r7, #4]
 80092a2:	f010 fa36 	bl	8019712 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	695a      	ldr	r2, [r3, #20]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f002 0208 	and.w	r2, r2, #8
 80092b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4618      	mov	r0, r3
 80092bc:	f00a fa56 	bl	801376c <USB_ReadInterrupts>
 80092c0:	4603      	mov	r3, r0
 80092c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80092c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092ca:	d10f      	bne.n	80092ec <HAL_PCD_IRQHandler+0x716>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80092cc:	2300      	movs	r3, #0
 80092ce:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80092d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d2:	b2db      	uxtb	r3, r3
 80092d4:	4619      	mov	r1, r3
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f010 fa98 	bl	801980c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	695a      	ldr	r2, [r3, #20]
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80092ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4618      	mov	r0, r3
 80092f2:	f00a fa3b 	bl	801376c <USB_ReadInterrupts>
 80092f6:	4603      	mov	r3, r0
 80092f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009300:	d10f      	bne.n	8009322 <HAL_PCD_IRQHandler+0x74c>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8009302:	2300      	movs	r3, #0
 8009304:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	b2db      	uxtb	r3, r3
 800930a:	4619      	mov	r1, r3
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f010 fa6b 	bl	80197e8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	695a      	ldr	r2, [r3, #20]
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8009320:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	4618      	mov	r0, r3
 8009328:	f00a fa20 	bl	801376c <USB_ReadInterrupts>
 800932c:	4603      	mov	r3, r0
 800932e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009332:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009336:	d10a      	bne.n	800934e <HAL_PCD_IRQHandler+0x778>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f010 fa79 	bl	8019830 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	695a      	ldr	r2, [r3, #20]
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800934c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4618      	mov	r0, r3
 8009354:	f00a fa0a 	bl	801376c <USB_ReadInterrupts>
 8009358:	4603      	mov	r3, r0
 800935a:	f003 0304 	and.w	r3, r3, #4
 800935e:	2b04      	cmp	r3, #4
 8009360:	d115      	bne.n	800938e <HAL_PCD_IRQHandler+0x7b8>
    {
      temp = hpcd->Instance->GOTGINT;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800936a:	69bb      	ldr	r3, [r7, #24]
 800936c:	f003 0304 	and.w	r3, r3, #4
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_PCD_IRQHandler+0x7a4>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f010 fa69 	bl	801984c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	6859      	ldr	r1, [r3, #4]
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	69ba      	ldr	r2, [r7, #24]
 8009386:	430a      	orrs	r2, r1
 8009388:	605a      	str	r2, [r3, #4]
 800938a:	e000      	b.n	800938e <HAL_PCD_IRQHandler+0x7b8>
      return;
 800938c:	bf00      	nop
    }
  }
}
 800938e:	3734      	adds	r7, #52	; 0x34
 8009390:	46bd      	mov	sp, r7
 8009392:	bd90      	pop	{r4, r7, pc}

08009394 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b082      	sub	sp, #8
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
 800939c:	460b      	mov	r3, r1
 800939e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	d101      	bne.n	80093ae <HAL_PCD_SetAddress+0x1a>
 80093aa:	2302      	movs	r3, #2
 80093ac:	e013      	b.n	80093d6 <HAL_PCD_SetAddress+0x42>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	78fa      	ldrb	r2, [r7, #3]
 80093ba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	78fa      	ldrb	r2, [r7, #3]
 80093c4:	4611      	mov	r1, r2
 80093c6:	4618      	mov	r0, r3
 80093c8:	f00a f97a 	bl	80136c0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 80093d4:	2300      	movs	r3, #0
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3708      	adds	r7, #8
 80093da:	46bd      	mov	sp, r7
 80093dc:	bd80      	pop	{r7, pc}

080093de <HAL_PCD_EP_Open>:
  * @param  ep_mps endpoint max packet size
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80093de:	b580      	push	{r7, lr}
 80093e0:	b084      	sub	sp, #16
 80093e2:	af00      	add	r7, sp, #0
 80093e4:	6078      	str	r0, [r7, #4]
 80093e6:	4608      	mov	r0, r1
 80093e8:	4611      	mov	r1, r2
 80093ea:	461a      	mov	r2, r3
 80093ec:	4603      	mov	r3, r0
 80093ee:	70fb      	strb	r3, [r7, #3]
 80093f0:	460b      	mov	r3, r1
 80093f2:	803b      	strh	r3, [r7, #0]
 80093f4:	4613      	mov	r3, r2
 80093f6:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80093f8:	2300      	movs	r3, #0
 80093fa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80093fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009400:	2b00      	cmp	r3, #0
 8009402:	da0f      	bge.n	8009424 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009404:	78fb      	ldrb	r3, [r7, #3]
 8009406:	f003 020f 	and.w	r2, r3, #15
 800940a:	4613      	mov	r3, r2
 800940c:	00db      	lsls	r3, r3, #3
 800940e:	1a9b      	subs	r3, r3, r2
 8009410:	009b      	lsls	r3, r3, #2
 8009412:	3338      	adds	r3, #56	; 0x38
 8009414:	687a      	ldr	r2, [r7, #4]
 8009416:	4413      	add	r3, r2
 8009418:	3304      	adds	r3, #4
 800941a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	2201      	movs	r2, #1
 8009420:	705a      	strb	r2, [r3, #1]
 8009422:	e00f      	b.n	8009444 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009424:	78fb      	ldrb	r3, [r7, #3]
 8009426:	f003 020f 	and.w	r2, r3, #15
 800942a:	4613      	mov	r3, r2
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	1a9b      	subs	r3, r3, r2
 8009430:	009b      	lsls	r3, r3, #2
 8009432:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	4413      	add	r3, r2
 800943a:	3304      	adds	r3, #4
 800943c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800943e:	68fb      	ldr	r3, [r7, #12]
 8009440:	2200      	movs	r2, #0
 8009442:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	f003 030f 	and.w	r3, r3, #15
 800944a:	b2da      	uxtb	r2, r3
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8009450:	883a      	ldrh	r2, [r7, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	78ba      	ldrb	r2, [r7, #2]
 800945a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	785b      	ldrb	r3, [r3, #1]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d004      	beq.n	800946e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	b29a      	uxth	r2, r3
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800946e:	78bb      	ldrb	r3, [r7, #2]
 8009470:	2b02      	cmp	r3, #2
 8009472:	d102      	bne.n	800947a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	2200      	movs	r2, #0
 8009478:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009480:	2b01      	cmp	r3, #1
 8009482:	d101      	bne.n	8009488 <HAL_PCD_EP_Open+0xaa>
 8009484:	2302      	movs	r3, #2
 8009486:	e00e      	b.n	80094a6 <HAL_PCD_EP_Open+0xc8>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2201      	movs	r2, #1
 800948c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68f9      	ldr	r1, [r7, #12]
 8009496:	4618      	mov	r0, r3
 8009498:	f009 fad8 	bl	8012a4c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2200      	movs	r2, #0
 80094a0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80094a4:	7afb      	ldrb	r3, [r7, #11]
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3710      	adds	r7, #16
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}

080094ae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80094ae:	b580      	push	{r7, lr}
 80094b0:	b084      	sub	sp, #16
 80094b2:	af00      	add	r7, sp, #0
 80094b4:	6078      	str	r0, [r7, #4]
 80094b6:	460b      	mov	r3, r1
 80094b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80094ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	da0f      	bge.n	80094e2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80094c2:	78fb      	ldrb	r3, [r7, #3]
 80094c4:	f003 020f 	and.w	r2, r3, #15
 80094c8:	4613      	mov	r3, r2
 80094ca:	00db      	lsls	r3, r3, #3
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	3338      	adds	r3, #56	; 0x38
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	4413      	add	r3, r2
 80094d6:	3304      	adds	r3, #4
 80094d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2201      	movs	r2, #1
 80094de:	705a      	strb	r2, [r3, #1]
 80094e0:	e00f      	b.n	8009502 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80094e2:	78fb      	ldrb	r3, [r7, #3]
 80094e4:	f003 020f 	and.w	r2, r3, #15
 80094e8:	4613      	mov	r3, r2
 80094ea:	00db      	lsls	r3, r3, #3
 80094ec:	1a9b      	subs	r3, r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80094f4:	687a      	ldr	r2, [r7, #4]
 80094f6:	4413      	add	r3, r2
 80094f8:	3304      	adds	r3, #4
 80094fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2200      	movs	r2, #0
 8009500:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8009502:	78fb      	ldrb	r3, [r7, #3]
 8009504:	f003 030f 	and.w	r3, r3, #15
 8009508:	b2da      	uxtb	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009514:	2b01      	cmp	r3, #1
 8009516:	d101      	bne.n	800951c <HAL_PCD_EP_Close+0x6e>
 8009518:	2302      	movs	r3, #2
 800951a:	e00e      	b.n	800953a <HAL_PCD_EP_Close+0x8c>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2201      	movs	r2, #1
 8009520:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	68f9      	ldr	r1, [r7, #12]
 800952a:	4618      	mov	r0, r3
 800952c:	f009 fb16 	bl	8012b5c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3710      	adds	r7, #16
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}

08009542 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009542:	b580      	push	{r7, lr}
 8009544:	b086      	sub	sp, #24
 8009546:	af00      	add	r7, sp, #0
 8009548:	60f8      	str	r0, [r7, #12]
 800954a:	607a      	str	r2, [r7, #4]
 800954c:	603b      	str	r3, [r7, #0]
 800954e:	460b      	mov	r3, r1
 8009550:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8009552:	7afb      	ldrb	r3, [r7, #11]
 8009554:	f003 020f 	and.w	r2, r3, #15
 8009558:	4613      	mov	r3, r2
 800955a:	00db      	lsls	r3, r3, #3
 800955c:	1a9b      	subs	r3, r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8009564:	68fa      	ldr	r2, [r7, #12]
 8009566:	4413      	add	r3, r2
 8009568:	3304      	adds	r3, #4
 800956a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800956c:	697b      	ldr	r3, [r7, #20]
 800956e:	687a      	ldr	r2, [r7, #4]
 8009570:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009572:	697b      	ldr	r3, [r7, #20]
 8009574:	683a      	ldr	r2, [r7, #0]
 8009576:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	2200      	movs	r2, #0
 800957c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 800957e:	697b      	ldr	r3, [r7, #20]
 8009580:	2200      	movs	r2, #0
 8009582:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009584:	7afb      	ldrb	r3, [r7, #11]
 8009586:	f003 030f 	and.w	r3, r3, #15
 800958a:	b2da      	uxtb	r2, r3
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	691b      	ldr	r3, [r3, #16]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d102      	bne.n	800959e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	697b      	ldr	r3, [r7, #20]
 800959c:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800959e:	7afb      	ldrb	r3, [r7, #11]
 80095a0:	f003 030f 	and.w	r3, r3, #15
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d109      	bne.n	80095bc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6818      	ldr	r0, [r3, #0]
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	691b      	ldr	r3, [r3, #16]
 80095b0:	b2db      	uxtb	r3, r3
 80095b2:	461a      	mov	r2, r3
 80095b4:	6979      	ldr	r1, [r7, #20]
 80095b6:	f009 fdf9 	bl	80131ac <USB_EP0StartXfer>
 80095ba:	e008      	b.n	80095ce <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	6818      	ldr	r0, [r3, #0]
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	b2db      	uxtb	r3, r3
 80095c6:	461a      	mov	r2, r3
 80095c8:	6979      	ldr	r1, [r7, #20]
 80095ca:	f009 fba3 	bl	8012d14 <USB_EPStartXfer>
  }

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80095d8:	b480      	push	{r7}
 80095da:	b083      	sub	sp, #12
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	460b      	mov	r3, r1
 80095e2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80095e4:	78fb      	ldrb	r3, [r7, #3]
 80095e6:	f003 020f 	and.w	r2, r3, #15
 80095ea:	6879      	ldr	r1, [r7, #4]
 80095ec:	4613      	mov	r3, r2
 80095ee:	00db      	lsls	r3, r3, #3
 80095f0:	1a9b      	subs	r3, r3, r2
 80095f2:	009b      	lsls	r3, r3, #2
 80095f4:	440b      	add	r3, r1
 80095f6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80095fa:	681b      	ldr	r3, [r3, #0]
}
 80095fc:	4618      	mov	r0, r3
 80095fe:	370c      	adds	r7, #12
 8009600:	46bd      	mov	sp, r7
 8009602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009606:	4770      	bx	lr

08009608 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8009608:	b580      	push	{r7, lr}
 800960a:	b086      	sub	sp, #24
 800960c:	af00      	add	r7, sp, #0
 800960e:	60f8      	str	r0, [r7, #12]
 8009610:	607a      	str	r2, [r7, #4]
 8009612:	603b      	str	r3, [r7, #0]
 8009614:	460b      	mov	r3, r1
 8009616:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8009618:	7afb      	ldrb	r3, [r7, #11]
 800961a:	f003 020f 	and.w	r2, r3, #15
 800961e:	4613      	mov	r3, r2
 8009620:	00db      	lsls	r3, r3, #3
 8009622:	1a9b      	subs	r3, r3, r2
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	3338      	adds	r3, #56	; 0x38
 8009628:	68fa      	ldr	r2, [r7, #12]
 800962a:	4413      	add	r3, r2
 800962c:	3304      	adds	r3, #4
 800962e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	687a      	ldr	r2, [r7, #4]
 8009634:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8009636:	697b      	ldr	r3, [r7, #20]
 8009638:	683a      	ldr	r2, [r7, #0]
 800963a:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	2200      	movs	r2, #0
 8009640:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8009642:	697b      	ldr	r3, [r7, #20]
 8009644:	2201      	movs	r2, #1
 8009646:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009648:	7afb      	ldrb	r3, [r7, #11]
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	b2da      	uxtb	r2, r3
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	691b      	ldr	r3, [r3, #16]
 8009658:	2b01      	cmp	r3, #1
 800965a:	d102      	bne.n	8009662 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	697b      	ldr	r3, [r7, #20]
 8009660:	611a      	str	r2, [r3, #16]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009662:	7afb      	ldrb	r3, [r7, #11]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	2b00      	cmp	r3, #0
 800966a:	d109      	bne.n	8009680 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	6818      	ldr	r0, [r3, #0]
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	691b      	ldr	r3, [r3, #16]
 8009674:	b2db      	uxtb	r3, r3
 8009676:	461a      	mov	r2, r3
 8009678:	6979      	ldr	r1, [r7, #20]
 800967a:	f009 fd97 	bl	80131ac <USB_EP0StartXfer>
 800967e:	e008      	b.n	8009692 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	6818      	ldr	r0, [r3, #0]
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	b2db      	uxtb	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	6979      	ldr	r1, [r7, #20]
 800968e:	f009 fb41 	bl	8012d14 <USB_EPStartXfer>
  }

  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3718      	adds	r7, #24
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	460b      	mov	r3, r1
 80096a6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80096a8:	78fb      	ldrb	r3, [r7, #3]
 80096aa:	f003 020f 	and.w	r2, r3, #15
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	685b      	ldr	r3, [r3, #4]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d901      	bls.n	80096ba <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80096b6:	2301      	movs	r3, #1
 80096b8:	e050      	b.n	800975c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80096ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80096be:	2b00      	cmp	r3, #0
 80096c0:	da0f      	bge.n	80096e2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80096c2:	78fb      	ldrb	r3, [r7, #3]
 80096c4:	f003 020f 	and.w	r2, r3, #15
 80096c8:	4613      	mov	r3, r2
 80096ca:	00db      	lsls	r3, r3, #3
 80096cc:	1a9b      	subs	r3, r3, r2
 80096ce:	009b      	lsls	r3, r3, #2
 80096d0:	3338      	adds	r3, #56	; 0x38
 80096d2:	687a      	ldr	r2, [r7, #4]
 80096d4:	4413      	add	r3, r2
 80096d6:	3304      	adds	r3, #4
 80096d8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	2201      	movs	r2, #1
 80096de:	705a      	strb	r2, [r3, #1]
 80096e0:	e00d      	b.n	80096fe <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80096e2:	78fa      	ldrb	r2, [r7, #3]
 80096e4:	4613      	mov	r3, r2
 80096e6:	00db      	lsls	r3, r3, #3
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	4413      	add	r3, r2
 80096f4:	3304      	adds	r3, #4
 80096f6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	2200      	movs	r2, #0
 80096fc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	2201      	movs	r2, #1
 8009702:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8009704:	78fb      	ldrb	r3, [r7, #3]
 8009706:	f003 030f 	and.w	r3, r3, #15
 800970a:	b2da      	uxtb	r2, r3
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009716:	2b01      	cmp	r3, #1
 8009718:	d101      	bne.n	800971e <HAL_PCD_EP_SetStall+0x82>
 800971a:	2302      	movs	r3, #2
 800971c:	e01e      	b.n	800975c <HAL_PCD_EP_SetStall+0xc0>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2201      	movs	r2, #1
 8009722:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	68f9      	ldr	r1, [r7, #12]
 800972c:	4618      	mov	r0, r3
 800972e:	f009 fef3 	bl	8013518 <USB_EPSetStall>
  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8009732:	78fb      	ldrb	r3, [r7, #3]
 8009734:	f003 030f 	and.w	r3, r3, #15
 8009738:	2b00      	cmp	r3, #0
 800973a:	d10a      	bne.n	8009752 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6818      	ldr	r0, [r3, #0]
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	b2d9      	uxtb	r1, r3
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 800974c:	461a      	mov	r2, r3
 800974e:	f00a f8d3 	bl	80138f8 <USB_EP0_OutStart>
  }
  __HAL_UNLOCK(hpcd);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800975a:	2300      	movs	r3, #0
}
 800975c:	4618      	mov	r0, r3
 800975e:	3710      	adds	r7, #16
 8009760:	46bd      	mov	sp, r7
 8009762:	bd80      	pop	{r7, pc}

08009764 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009764:	b580      	push	{r7, lr}
 8009766:	b084      	sub	sp, #16
 8009768:	af00      	add	r7, sp, #0
 800976a:	6078      	str	r0, [r7, #4]
 800976c:	460b      	mov	r3, r1
 800976e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8009770:	78fb      	ldrb	r3, [r7, #3]
 8009772:	f003 020f 	and.w	r2, r3, #15
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	685b      	ldr	r3, [r3, #4]
 800977a:	429a      	cmp	r2, r3
 800977c:	d901      	bls.n	8009782 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800977e:	2301      	movs	r3, #1
 8009780:	e042      	b.n	8009808 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8009782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009786:	2b00      	cmp	r3, #0
 8009788:	da0f      	bge.n	80097aa <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800978a:	78fb      	ldrb	r3, [r7, #3]
 800978c:	f003 020f 	and.w	r2, r3, #15
 8009790:	4613      	mov	r3, r2
 8009792:	00db      	lsls	r3, r3, #3
 8009794:	1a9b      	subs	r3, r3, r2
 8009796:	009b      	lsls	r3, r3, #2
 8009798:	3338      	adds	r3, #56	; 0x38
 800979a:	687a      	ldr	r2, [r7, #4]
 800979c:	4413      	add	r3, r2
 800979e:	3304      	adds	r3, #4
 80097a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2201      	movs	r2, #1
 80097a6:	705a      	strb	r2, [r3, #1]
 80097a8:	e00f      	b.n	80097ca <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80097aa:	78fb      	ldrb	r3, [r7, #3]
 80097ac:	f003 020f 	and.w	r2, r3, #15
 80097b0:	4613      	mov	r3, r2
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80097bc:	687a      	ldr	r2, [r7, #4]
 80097be:	4413      	add	r3, r2
 80097c0:	3304      	adds	r3, #4
 80097c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	2200      	movs	r2, #0
 80097c8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80097d0:	78fb      	ldrb	r3, [r7, #3]
 80097d2:	f003 030f 	and.w	r3, r3, #15
 80097d6:	b2da      	uxtb	r2, r3
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	d101      	bne.n	80097ea <HAL_PCD_EP_ClrStall+0x86>
 80097e6:	2302      	movs	r3, #2
 80097e8:	e00e      	b.n	8009808 <HAL_PCD_EP_ClrStall+0xa4>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	68f9      	ldr	r1, [r7, #12]
 80097f8:	4618      	mov	r0, r3
 80097fa:	f009 fefb 	bl	80135f4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	2200      	movs	r2, #0
 8009802:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009806:	2300      	movs	r3, #0
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b082      	sub	sp, #8
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
 8009818:	460b      	mov	r3, r1
 800981a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8009822:	2b01      	cmp	r3, #1
 8009824:	d101      	bne.n	800982a <HAL_PCD_EP_Flush+0x1a>
 8009826:	2302      	movs	r3, #2
 8009828:	e01b      	b.n	8009862 <HAL_PCD_EP_Flush+0x52>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2201      	movs	r2, #1
 800982e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  if ((ep_addr & 0x80U) == 0x80U)
 8009832:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009836:	2b00      	cmp	r3, #0
 8009838:	da09      	bge.n	800984e <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681a      	ldr	r2, [r3, #0]
 800983e:	78fb      	ldrb	r3, [r7, #3]
 8009840:	f003 030f 	and.w	r3, r3, #15
 8009844:	4619      	mov	r1, r3
 8009846:	4610      	mov	r0, r2
 8009848:	f009 f87a 	bl	8012940 <USB_FlushTxFifo>
 800984c:	e004      	b.n	8009858 <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	4618      	mov	r0, r3
 8009854:	f009 f89a 	bl	801298c <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8009860:	2300      	movs	r3, #0
}
 8009862:	4618      	mov	r0, r3
 8009864:	3708      	adds	r7, #8
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}

0800986a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800986a:	b580      	push	{r7, lr}
 800986c:	b08a      	sub	sp, #40	; 0x28
 800986e:	af02      	add	r7, sp, #8
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	4613      	mov	r3, r2
 8009882:	00db      	lsls	r3, r3, #3
 8009884:	1a9b      	subs	r3, r3, r2
 8009886:	009b      	lsls	r3, r3, #2
 8009888:	3338      	adds	r3, #56	; 0x38
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	4413      	add	r3, r2
 800988e:	3304      	adds	r3, #4
 8009890:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	699a      	ldr	r2, [r3, #24]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	695b      	ldr	r3, [r3, #20]
 800989a:	429a      	cmp	r2, r3
 800989c:	d901      	bls.n	80098a2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800989e:	2301      	movs	r3, #1
 80098a0:	e06c      	b.n	800997c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	695a      	ldr	r2, [r3, #20]
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	699b      	ldr	r3, [r3, #24]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	69fa      	ldr	r2, [r7, #28]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d902      	bls.n	80098be <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	3303      	adds	r3, #3
 80098c2:	089b      	lsrs	r3, r3, #2
 80098c4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80098c6:	e02b      	b.n	8009920 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	695a      	ldr	r2, [r3, #20]
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	699b      	ldr	r3, [r3, #24]
 80098d0:	1ad3      	subs	r3, r2, r3
 80098d2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	689b      	ldr	r3, [r3, #8]
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d902      	bls.n	80098e4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	689b      	ldr	r3, [r3, #8]
 80098e2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	3303      	adds	r3, #3
 80098e8:	089b      	lsrs	r3, r3, #2
 80098ea:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	68d9      	ldr	r1, [r3, #12]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	b2da      	uxtb	r2, r3
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4603      	mov	r3, r0
 8009902:	6978      	ldr	r0, [r7, #20]
 8009904:	f009 fdaa 	bl	801345c <USB_WritePacket>

    ep->xfer_buff  += len;
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	68da      	ldr	r2, [r3, #12]
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	441a      	add	r2, r3
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	699a      	ldr	r2, [r3, #24]
 8009918:	69fb      	ldr	r3, [r7, #28]
 800991a:	441a      	add	r2, r3
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800992c:	699b      	ldr	r3, [r3, #24]
 800992e:	b29b      	uxth	r3, r3
 8009930:	69ba      	ldr	r2, [r7, #24]
 8009932:	429a      	cmp	r2, r3
 8009934:	d809      	bhi.n	800994a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	699a      	ldr	r2, [r3, #24]
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800993e:	429a      	cmp	r2, r3
 8009940:	d203      	bcs.n	800994a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	695b      	ldr	r3, [r3, #20]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d1be      	bne.n	80098c8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	695a      	ldr	r2, [r3, #20]
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	429a      	cmp	r2, r3
 8009954:	d811      	bhi.n	800997a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	f003 030f 	and.w	r3, r3, #15
 800995c:	2201      	movs	r2, #1
 800995e:	fa02 f303 	lsl.w	r3, r2, r3
 8009962:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800996a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	43db      	mvns	r3, r3
 8009970:	6939      	ldr	r1, [r7, #16]
 8009972:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009976:	4013      	ands	r3, r2
 8009978:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800997a:	2300      	movs	r3, #0
}
 800997c:	4618      	mov	r0, r3
 800997e:	3720      	adds	r7, #32
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	6078      	str	r0, [r7, #4]
 800998c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009998:	697b      	ldr	r3, [r7, #20]
 800999a:	333c      	adds	r3, #60	; 0x3c
 800999c:	3304      	adds	r3, #4
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80099a2:	683b      	ldr	r3, [r7, #0]
 80099a4:	015a      	lsls	r2, r3, #5
 80099a6:	693b      	ldr	r3, [r7, #16]
 80099a8:	4413      	add	r3, r2
 80099aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099ae:	689b      	ldr	r3, [r3, #8]
 80099b0:	60bb      	str	r3, [r7, #8]

  if (hpcd->Init.dma_enable == 1U)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	691b      	ldr	r3, [r3, #16]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	f040 80a0 	bne.w	8009afc <PCD_EP_OutXfrComplete_int+0x178>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	f003 0308 	and.w	r3, r3, #8
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d015      	beq.n	80099f2 <PCD_EP_OutXfrComplete_int+0x6e>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	4a72      	ldr	r2, [pc, #456]	; (8009b94 <PCD_EP_OutXfrComplete_int+0x210>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	f240 80dd 	bls.w	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	f000 80d7 	beq.w	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80099e8:	461a      	mov	r2, r3
 80099ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80099ee:	6093      	str	r3, [r2, #8]
 80099f0:	e0cb      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f003 0320 	and.w	r3, r3, #32
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d009      	beq.n	8009a10 <PCD_EP_OutXfrComplete_int+0x8c>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	015a      	lsls	r2, r3, #5
 8009a00:	693b      	ldr	r3, [r7, #16]
 8009a02:	4413      	add	r3, r2
 8009a04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a08:	461a      	mov	r2, r3
 8009a0a:	2320      	movs	r3, #32
 8009a0c:	6093      	str	r3, [r2, #8]
 8009a0e:	e0bc      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	f040 80b7 	bne.w	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	4a5d      	ldr	r2, [pc, #372]	; (8009b94 <PCD_EP_OutXfrComplete_int+0x210>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d90f      	bls.n	8009a44 <PCD_EP_OutXfrComplete_int+0xc0>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009a24:	68bb      	ldr	r3, [r7, #8]
 8009a26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00a      	beq.n	8009a44 <PCD_EP_OutXfrComplete_int+0xc0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009a2e:	683b      	ldr	r3, [r7, #0]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a40:	6093      	str	r3, [r2, #8]
 8009a42:	e0a2      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        /* out data packet received over EP0 */
        hpcd->OUT_ep[epnum].xfer_count =
          hpcd->OUT_ep[epnum].maxpacket -
 8009a44:	6879      	ldr	r1, [r7, #4]
 8009a46:	683a      	ldr	r2, [r7, #0]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	00db      	lsls	r3, r3, #3
 8009a4c:	1a9b      	subs	r3, r3, r2
 8009a4e:	009b      	lsls	r3, r3, #2
 8009a50:	440b      	add	r3, r1
 8009a52:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009a56:	681a      	ldr	r2, [r3, #0]
          (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	0159      	lsls	r1, r3, #5
 8009a5c:	693b      	ldr	r3, [r7, #16]
 8009a5e:	440b      	add	r3, r1
 8009a60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009a64:	691b      	ldr	r3, [r3, #16]
 8009a66:	f3c3 0312 	ubfx	r3, r3, #0, #19
          hpcd->OUT_ep[epnum].maxpacket -
 8009a6a:	1ad1      	subs	r1, r2, r3
        hpcd->OUT_ep[epnum].xfer_count =
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	683a      	ldr	r2, [r7, #0]
 8009a70:	4613      	mov	r3, r2
 8009a72:	00db      	lsls	r3, r3, #3
 8009a74:	1a9b      	subs	r3, r3, r2
 8009a76:	009b      	lsls	r3, r3, #2
 8009a78:	4403      	add	r3, r0
 8009a7a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8009a7e:	6019      	str	r1, [r3, #0]

        hpcd->OUT_ep[epnum].xfer_buff += hpcd->OUT_ep[epnum].maxpacket;
 8009a80:	6879      	ldr	r1, [r7, #4]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	4613      	mov	r3, r2
 8009a86:	00db      	lsls	r3, r3, #3
 8009a88:	1a9b      	subs	r3, r3, r2
 8009a8a:	009b      	lsls	r3, r3, #2
 8009a8c:	440b      	add	r3, r1
 8009a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009a92:	6819      	ldr	r1, [r3, #0]
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	683a      	ldr	r2, [r7, #0]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	00db      	lsls	r3, r3, #3
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	4403      	add	r3, r0
 8009aa2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	4419      	add	r1, r3
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	683a      	ldr	r2, [r7, #0]
 8009aae:	4613      	mov	r3, r2
 8009ab0:	00db      	lsls	r3, r3, #3
 8009ab2:	1a9b      	subs	r3, r3, r2
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	4403      	add	r3, r0
 8009ab8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8009abc:	6019      	str	r1, [r3, #0]

        if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d114      	bne.n	8009aee <PCD_EP_OutXfrComplete_int+0x16a>
 8009ac4:	6879      	ldr	r1, [r7, #4]
 8009ac6:	683a      	ldr	r2, [r7, #0]
 8009ac8:	4613      	mov	r3, r2
 8009aca:	00db      	lsls	r3, r3, #3
 8009acc:	1a9b      	subs	r3, r3, r2
 8009ace:	009b      	lsls	r3, r3, #2
 8009ad0:	440b      	add	r3, r1
 8009ad2:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d108      	bne.n	8009aee <PCD_EP_OutXfrComplete_int+0x16a>
        {
          /* this is ZLP, so prepare EP0 for next setup */
          (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6818      	ldr	r0, [r3, #0]
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	2101      	movs	r1, #1
 8009aea:	f009 ff05 	bl	80138f8 <USB_EP0_OutStart>
        }
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009aee:	683b      	ldr	r3, [r7, #0]
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	4619      	mov	r1, r3
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f00f fdd7 	bl	80196a8 <HAL_PCD_DataOutStageCallback>
 8009afa:	e046      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8009afc:	68fb      	ldr	r3, [r7, #12]
 8009afe:	4a26      	ldr	r2, [pc, #152]	; (8009b98 <PCD_EP_OutXfrComplete_int+0x214>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d124      	bne.n	8009b4e <PCD_EP_OutXfrComplete_int+0x1ca>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8009b04:	68bb      	ldr	r3, [r7, #8]
 8009b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d00a      	beq.n	8009b24 <PCD_EP_OutXfrComplete_int+0x1a0>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009b0e:	683b      	ldr	r3, [r7, #0]
 8009b10:	015a      	lsls	r2, r3, #5
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	4413      	add	r3, r2
 8009b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009b20:	6093      	str	r3, [r2, #8]
 8009b22:	e032      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8009b24:	68bb      	ldr	r3, [r7, #8]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d008      	beq.n	8009b40 <PCD_EP_OutXfrComplete_int+0x1bc>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	693b      	ldr	r3, [r7, #16]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2320      	movs	r3, #32
 8009b3e:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b40:	683b      	ldr	r3, [r7, #0]
 8009b42:	b2db      	uxtb	r3, r3
 8009b44:	4619      	mov	r1, r3
 8009b46:	6878      	ldr	r0, [r7, #4]
 8009b48:	f00f fdae 	bl	80196a8 <HAL_PCD_DataOutStageCallback>
 8009b4c:	e01d      	b.n	8009b8a <PCD_EP_OutXfrComplete_int+0x206>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8009b4e:	683b      	ldr	r3, [r7, #0]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	d114      	bne.n	8009b7e <PCD_EP_OutXfrComplete_int+0x1fa>
 8009b54:	6879      	ldr	r1, [r7, #4]
 8009b56:	683a      	ldr	r2, [r7, #0]
 8009b58:	4613      	mov	r3, r2
 8009b5a:	00db      	lsls	r3, r3, #3
 8009b5c:	1a9b      	subs	r3, r3, r2
 8009b5e:	009b      	lsls	r3, r3, #2
 8009b60:	440b      	add	r3, r1
 8009b62:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d108      	bne.n	8009b7e <PCD_EP_OutXfrComplete_int+0x1fa>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6818      	ldr	r0, [r3, #0]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009b76:	461a      	mov	r2, r3
 8009b78:	2100      	movs	r1, #0
 8009b7a:	f009 febd 	bl	80138f8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	4619      	mov	r1, r3
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f00f fd8f 	bl	80196a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8009b8a:	2300      	movs	r3, #0
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3718      	adds	r7, #24
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	4f54300a 	.word	0x4f54300a
 8009b98:	4f54310a 	.word	0x4f54310a

08009b9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8009b9c:	b580      	push	{r7, lr}
 8009b9e:	b086      	sub	sp, #24
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
 8009ba4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bac:	697b      	ldr	r3, [r7, #20]
 8009bae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009bb0:	697b      	ldr	r3, [r7, #20]
 8009bb2:	333c      	adds	r3, #60	; 0x3c
 8009bb4:	3304      	adds	r3, #4
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8009bba:	683b      	ldr	r3, [r7, #0]
 8009bbc:	015a      	lsls	r2, r3, #5
 8009bbe:	693b      	ldr	r3, [r7, #16]
 8009bc0:	4413      	add	r3, r2
 8009bc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bc6:	689b      	ldr	r3, [r3, #8]
 8009bc8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	4a15      	ldr	r2, [pc, #84]	; (8009c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d90e      	bls.n	8009bf0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d009      	beq.n	8009bf0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	015a      	lsls	r2, r3, #5
 8009be0:	693b      	ldr	r3, [r7, #16]
 8009be2:	4413      	add	r3, r2
 8009be4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009be8:	461a      	mov	r2, r3
 8009bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009bee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f00f fd47 	bl	8019684 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	4a0a      	ldr	r2, [pc, #40]	; (8009c24 <PCD_EP_OutSetupPacket_int+0x88>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d90c      	bls.n	8009c18 <PCD_EP_OutSetupPacket_int+0x7c>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	691b      	ldr	r3, [r3, #16]
 8009c02:	2b01      	cmp	r3, #1
 8009c04:	d108      	bne.n	8009c18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6818      	ldr	r0, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8009c10:	461a      	mov	r2, r3
 8009c12:	2101      	movs	r1, #1
 8009c14:	f009 fe70 	bl	80138f8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8009c18:	2300      	movs	r3, #0
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	3718      	adds	r7, #24
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd80      	pop	{r7, pc}
 8009c22:	bf00      	nop
 8009c24:	4f54300a 	.word	0x4f54300a

08009c28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8009c28:	b480      	push	{r7}
 8009c2a:	b085      	sub	sp, #20
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
 8009c30:	460b      	mov	r3, r1
 8009c32:	70fb      	strb	r3, [r7, #3]
 8009c34:	4613      	mov	r3, r2
 8009c36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8009c40:	78fb      	ldrb	r3, [r7, #3]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d107      	bne.n	8009c56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8009c46:	883b      	ldrh	r3, [r7, #0]
 8009c48:	0419      	lsls	r1, r3, #16
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	68ba      	ldr	r2, [r7, #8]
 8009c50:	430a      	orrs	r2, r1
 8009c52:	629a      	str	r2, [r3, #40]	; 0x28
 8009c54:	e028      	b.n	8009ca8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c5c:	0c1b      	lsrs	r3, r3, #16
 8009c5e:	68ba      	ldr	r2, [r7, #8]
 8009c60:	4413      	add	r3, r2
 8009c62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c64:	2300      	movs	r3, #0
 8009c66:	73fb      	strb	r3, [r7, #15]
 8009c68:	e00d      	b.n	8009c86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681a      	ldr	r2, [r3, #0]
 8009c6e:	7bfb      	ldrb	r3, [r7, #15]
 8009c70:	3340      	adds	r3, #64	; 0x40
 8009c72:	009b      	lsls	r3, r3, #2
 8009c74:	4413      	add	r3, r2
 8009c76:	685b      	ldr	r3, [r3, #4]
 8009c78:	0c1b      	lsrs	r3, r3, #16
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8009c80:	7bfb      	ldrb	r3, [r7, #15]
 8009c82:	3301      	adds	r3, #1
 8009c84:	73fb      	strb	r3, [r7, #15]
 8009c86:	7bfa      	ldrb	r2, [r7, #15]
 8009c88:	78fb      	ldrb	r3, [r7, #3]
 8009c8a:	3b01      	subs	r3, #1
 8009c8c:	429a      	cmp	r2, r3
 8009c8e:	d3ec      	bcc.n	8009c6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8009c90:	883b      	ldrh	r3, [r7, #0]
 8009c92:	0418      	lsls	r0, r3, #16
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6819      	ldr	r1, [r3, #0]
 8009c98:	78fb      	ldrb	r3, [r7, #3]
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	4302      	orrs	r2, r0
 8009ca0:	3340      	adds	r3, #64	; 0x40
 8009ca2:	009b      	lsls	r3, r3, #2
 8009ca4:	440b      	add	r3, r1
 8009ca6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ca8:	2300      	movs	r3, #0
}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3714      	adds	r7, #20
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb4:	4770      	bx	lr

08009cb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8009cb6:	b480      	push	{r7}
 8009cb8:	b083      	sub	sp, #12
 8009cba:	af00      	add	r7, sp, #0
 8009cbc:	6078      	str	r0, [r7, #4]
 8009cbe:	460b      	mov	r3, r1
 8009cc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	887a      	ldrh	r2, [r7, #2]
 8009cc8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009cca:	2300      	movs	r3, #0
}
 8009ccc:	4618      	mov	r0, r3
 8009cce:	370c      	adds	r7, #12
 8009cd0:	46bd      	mov	sp, r7
 8009cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd6:	4770      	bx	lr

08009cd8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b085      	sub	sp, #20
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2200      	movs	r2, #0
 8009cf2:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8009d02:	68fb      	ldr	r3, [r7, #12]
 8009d04:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009d06:	4b05      	ldr	r3, [pc, #20]	; (8009d1c <HAL_PCDEx_ActivateLPM+0x44>)
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr
 8009d1c:	10000003 	.word	0x10000003

08009d20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b083      	sub	sp, #12
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	460b      	mov	r3, r1
 8009d2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8009d2c:	bf00      	nop
 8009d2e:	370c      	adds	r7, #12
 8009d30:	46bd      	mov	sp, r7
 8009d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d36:	4770      	bx	lr

08009d38 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009d38:	b480      	push	{r7}
 8009d3a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009d3c:	4b05      	ldr	r3, [pc, #20]	; (8009d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	4a04      	ldr	r2, [pc, #16]	; (8009d54 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d46:	6013      	str	r3, [r2, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d50:	4770      	bx	lr
 8009d52:	bf00      	nop
 8009d54:	58024800 	.word	0x58024800

08009d58 <HAL_PWR_ConfigPVD>:
  *         driver. All combination are allowed: wake up only Cortex-M7, wake up
  *         only Cortex-M4 or wake up Cortex-M7 and Cortex-M4.
  * @retval None.
  */
void HAL_PWR_ConfigPVD (PWR_PVDTypeDef *sConfigPVD)
{
 8009d58:	b480      	push	{r7}
 8009d5a:	b083      	sub	sp, #12
 8009d5c:	af00      	add	r7, sp, #0
 8009d5e:	6078      	str	r0, [r7, #4]
  /* Check the PVD configuration parameter */
  if (sConfigPVD == NULL)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d069      	beq.n	8009e3a <HAL_PWR_ConfigPVD+0xe2>
  /* Check the parameters */
  assert_param (IS_PWR_PVD_LEVEL (sConfigPVD->PVDLevel));
  assert_param (IS_PWR_PVD_MODE (sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG (PWR->CR1, PWR_CR1_PLS, sConfigPVD->PVDLevel);
 8009d66:	4b38      	ldr	r3, [pc, #224]	; (8009e48 <HAL_PWR_ConfigPVD+0xf0>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	4935      	ldr	r1, [pc, #212]	; (8009e48 <HAL_PWR_ConfigPVD+0xf0>)
 8009d74:	4313      	orrs	r3, r2
 8009d76:	600b      	str	r3, [r1, #0]

  /* Clear previous config */
#if !defined (DUAL_CORE)
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT ();
 8009d78:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009d80:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d88:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  __HAL_PWR_PVD_EXTI_DISABLE_IT ();
 8009d8c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d94:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009d98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* !defined (DUAL_CORE) */

  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE ();
 8009da0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dae:	6013      	str	r3, [r2, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE ();
 8009db0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dbe:	6053      	str	r3, [r2, #4]

#if !defined (DUAL_CORE)
  /* Interrupt mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	685b      	ldr	r3, [r3, #4]
 8009dc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d009      	beq.n	8009de0 <HAL_PWR_ConfigPVD+0x88>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT ();
 8009dcc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009dd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009dd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009dd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ddc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  }

  /* Event mode configuration */
  if ((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d009      	beq.n	8009e00 <HAL_PWR_ConfigPVD+0xa8>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT ();
 8009dec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009df4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009df8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009dfc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
  }
#endif /* !defined (DUAL_CORE) */

  /* Rising edge configuration */
  if ((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	f003 0301 	and.w	r3, r3, #1
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d007      	beq.n	8009e1c <HAL_PWR_ConfigPVD+0xc4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE ();
 8009e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e1a:	6013      	str	r3, [r2, #0]
  }

  /* Falling edge configuration */
  if ((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	685b      	ldr	r3, [r3, #4]
 8009e20:	f003 0302 	and.w	r3, r3, #2
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d009      	beq.n	8009e3c <HAL_PWR_ConfigPVD+0xe4>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE ();
 8009e28:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009e36:	6053      	str	r3, [r2, #4]
 8009e38:	e000      	b.n	8009e3c <HAL_PWR_ConfigPVD+0xe4>
    return;
 8009e3a:	bf00      	nop
  }
}
 8009e3c:	370c      	adds	r7, #12
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e44:	4770      	bx	lr
 8009e46:	bf00      	nop
 8009e48:	58024800 	.word	0x58024800

08009e4c <HAL_PWR_EnablePVD>:
/**
  * @brief Enable the Programmable Voltage Detector (PVD).
  * @retval None.
  */
void HAL_PWR_EnablePVD (void)
{
 8009e4c:	b480      	push	{r7}
 8009e4e:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT (PWR->CR1, PWR_CR1_PVDEN);
 8009e50:	4b05      	ldr	r3, [pc, #20]	; (8009e68 <HAL_PWR_EnablePVD+0x1c>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	4a04      	ldr	r2, [pc, #16]	; (8009e68 <HAL_PWR_EnablePVD+0x1c>)
 8009e56:	f043 0310 	orr.w	r3, r3, #16
 8009e5a:	6013      	str	r3, [r2, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	46bd      	mov	sp, r7
 8009e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e64:	4770      	bx	lr
 8009e66:	bf00      	nop
 8009e68:	58024800 	.word	0x58024800

08009e6c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009e74:	4b19      	ldr	r3, [pc, #100]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e76:	68db      	ldr	r3, [r3, #12]
 8009e78:	f003 0304 	and.w	r3, r3, #4
 8009e7c:	2b04      	cmp	r3, #4
 8009e7e:	d00a      	beq.n	8009e96 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009e80:	4b16      	ldr	r3, [pc, #88]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e82:	68db      	ldr	r3, [r3, #12]
 8009e84:	f003 0307 	and.w	r3, r3, #7
 8009e88:	687a      	ldr	r2, [r7, #4]
 8009e8a:	429a      	cmp	r2, r3
 8009e8c:	d001      	beq.n	8009e92 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e01f      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009e92:	2300      	movs	r3, #0
 8009e94:	e01d      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009e96:	4b11      	ldr	r3, [pc, #68]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	f023 0207 	bic.w	r2, r3, #7
 8009e9e:	490f      	ldr	r1, [pc, #60]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009ea6:	f7fa ffa7 	bl	8004df8 <HAL_GetTick>
 8009eaa:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009eac:	e009      	b.n	8009ec2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009eae:	f7fa ffa3 	bl	8004df8 <HAL_GetTick>
 8009eb2:	4602      	mov	r2, r0
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	1ad3      	subs	r3, r2, r3
 8009eb8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebc:	d901      	bls.n	8009ec2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	e007      	b.n	8009ed2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009ec2:	4b06      	ldr	r3, [pc, #24]	; (8009edc <HAL_PWREx_ConfigSupply+0x70>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009eca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ece:	d1ee      	bne.n	8009eae <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009ed0:	2300      	movs	r3, #0
}
 8009ed2:	4618      	mov	r0, r3
 8009ed4:	3710      	adds	r7, #16
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	bd80      	pop	{r7, pc}
 8009eda:	bf00      	nop
 8009edc:	58024800 	.word	0x58024800

08009ee0 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009ee0:	b480      	push	{r7}
 8009ee2:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009ee6:	68db      	ldr	r3, [r3, #12]
 8009ee8:	4a04      	ldr	r2, [pc, #16]	; (8009efc <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8009eea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009eee:	60d3      	str	r3, [r2, #12]
}
 8009ef0:	bf00      	nop
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef8:	4770      	bx	lr
 8009efa:	bf00      	nop
 8009efc:	58024800 	.word	0x58024800

08009f00 <HAL_PWREx_PVD_AVD_IRQHandler>:
  * @brief  This function handles the PWR PVD/AVD interrupt request.
  * @note   This API should be called under the PVD_AVD_IRQHandler().
  * @retval None
  */
void HAL_PWREx_PVD_AVD_IRQHandler (void)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	af00      	add	r7, sp, #0
  /* Check if the Programmable Voltage Detector is enabled (PVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_PVDEN) != 0U)
 8009f04:	4b1b      	ldr	r3, [pc, #108]	; (8009f74 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	f003 0310 	and.w	r3, r3, #16
 8009f0c:	2b00      	cmp	r3, #0
 8009f0e:	d014      	beq.n	8009f3a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR D1/CD EXTI flag */
      if (__HAL_PWR_PVD_EXTI_GET_FLAG () != 0U)
 8009f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f18:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f20:	d10b      	bne.n	8009f3a <HAL_PWREx_PVD_AVD_IRQHandler+0x3a>
      {
        /* PWR PVD interrupt user callback */
        HAL_PWR_PVDCallback ();
 8009f22:	f7fa fa75 	bl	8004410 <HAL_PWR_PVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_PVD_EXTI_CLEAR_FLAG ();
 8009f26:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f2e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f36:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }
#endif /* defined (DUAL_CORE) */
  }

  /* Check if the Analog Voltage Detector is enabled (AVD) */
  if (READ_BIT (PWR->CR1, PWR_CR1_AVDEN) != 0U)
 8009f3a:	4b0e      	ldr	r3, [pc, #56]	; (8009f74 <HAL_PWREx_PVD_AVD_IRQHandler+0x74>)
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d014      	beq.n	8009f70 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
#if defined (DUAL_CORE)
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
#endif /* defined (DUAL_CORE) */
    {
      /* Check PWR EXTI D1/CD flag */
      if (__HAL_PWR_AVD_EXTI_GET_FLAG () != 0U)
 8009f46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009f52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f56:	d10b      	bne.n	8009f70 <HAL_PWREx_PVD_AVD_IRQHandler+0x70>
      {
        /* PWR AVD interrupt user callback */
        HAL_PWREx_AVDCallback ();
 8009f58:	f000 f80e 	bl	8009f78 <HAL_PWREx_AVDCallback>

        /* Clear PWR EXTI D1/CD pending bit */
        __HAL_PWR_AVD_EXTI_CLEAR_FLAG ();
 8009f5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8009f68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
        __HAL_PWR_AVD_EXTID2_CLEAR_FLAG ();
      }
    }
#endif /* defined (DUAL_CORE) */
  }
}
 8009f70:	bf00      	nop
 8009f72:	bd80      	pop	{r7, pc}
 8009f74:	58024800 	.word	0x58024800

08009f78 <HAL_PWREx_AVDCallback>:
/**
  * @brief PWR AVD interrupt callback.
  * @retval None.
  */
__weak void HAL_PWREx_AVDCallback (void)
{
 8009f78:	b480      	push	{r7}
 8009f7a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PWR_AVDCallback can be implemented in the user file
  */
}
 8009f7c:	bf00      	nop
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f84:	4770      	bx	lr
	...

08009f88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b08c      	sub	sp, #48	; 0x30
 8009f8c:	af00      	add	r7, sp, #0
 8009f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d101      	bne.n	8009f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e3ff      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f003 0301 	and.w	r3, r3, #1
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	f000 8087 	beq.w	800a0b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fa8:	4b99      	ldr	r3, [pc, #612]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 8009faa:	691b      	ldr	r3, [r3, #16]
 8009fac:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fb0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fb2:	4b97      	ldr	r3, [pc, #604]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 8009fb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fb6:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fba:	2b10      	cmp	r3, #16
 8009fbc:	d007      	beq.n	8009fce <HAL_RCC_OscConfig+0x46>
 8009fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fc0:	2b18      	cmp	r3, #24
 8009fc2:	d110      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x5e>
 8009fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fc6:	f003 0303 	and.w	r3, r3, #3
 8009fca:	2b02      	cmp	r3, #2
 8009fcc:	d10b      	bne.n	8009fe6 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fce:	4b90      	ldr	r3, [pc, #576]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d06c      	beq.n	800a0b4 <HAL_RCC_OscConfig+0x12c>
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d168      	bne.n	800a0b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	e3d9      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	685b      	ldr	r3, [r3, #4]
 8009fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fee:	d106      	bne.n	8009ffe <HAL_RCC_OscConfig+0x76>
 8009ff0:	4b87      	ldr	r3, [pc, #540]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a86      	ldr	r2, [pc, #536]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 8009ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ffa:	6013      	str	r3, [r2, #0]
 8009ffc:	e02e      	b.n	800a05c <HAL_RCC_OscConfig+0xd4>
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d10c      	bne.n	800a020 <HAL_RCC_OscConfig+0x98>
 800a006:	4b82      	ldr	r3, [pc, #520]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	4a81      	ldr	r2, [pc, #516]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a00c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	4b7f      	ldr	r3, [pc, #508]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	4a7e      	ldr	r2, [pc, #504]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a01c:	6013      	str	r3, [r2, #0]
 800a01e:	e01d      	b.n	800a05c <HAL_RCC_OscConfig+0xd4>
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	685b      	ldr	r3, [r3, #4]
 800a024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a028:	d10c      	bne.n	800a044 <HAL_RCC_OscConfig+0xbc>
 800a02a:	4b79      	ldr	r3, [pc, #484]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	4a78      	ldr	r2, [pc, #480]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a034:	6013      	str	r3, [r2, #0]
 800a036:	4b76      	ldr	r3, [pc, #472]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a75      	ldr	r2, [pc, #468]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a03c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a040:	6013      	str	r3, [r2, #0]
 800a042:	e00b      	b.n	800a05c <HAL_RCC_OscConfig+0xd4>
 800a044:	4b72      	ldr	r3, [pc, #456]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	4a71      	ldr	r2, [pc, #452]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a04a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a04e:	6013      	str	r3, [r2, #0]
 800a050:	4b6f      	ldr	r3, [pc, #444]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4a6e      	ldr	r2, [pc, #440]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a05a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d013      	beq.n	800a08c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a064:	f7fa fec8 	bl	8004df8 <HAL_GetTick>
 800a068:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a06a:	e008      	b.n	800a07e <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a06c:	f7fa fec4 	bl	8004df8 <HAL_GetTick>
 800a070:	4602      	mov	r2, r0
 800a072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a074:	1ad3      	subs	r3, r2, r3
 800a076:	2b64      	cmp	r3, #100	; 0x64
 800a078:	d901      	bls.n	800a07e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e38d      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a07e:	4b64      	ldr	r3, [pc, #400]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a086:	2b00      	cmp	r3, #0
 800a088:	d0f0      	beq.n	800a06c <HAL_RCC_OscConfig+0xe4>
 800a08a:	e014      	b.n	800a0b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a08c:	f7fa feb4 	bl	8004df8 <HAL_GetTick>
 800a090:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a092:	e008      	b.n	800a0a6 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a094:	f7fa feb0 	bl	8004df8 <HAL_GetTick>
 800a098:	4602      	mov	r2, r0
 800a09a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a09c:	1ad3      	subs	r3, r2, r3
 800a09e:	2b64      	cmp	r3, #100	; 0x64
 800a0a0:	d901      	bls.n	800a0a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800a0a2:	2303      	movs	r3, #3
 800a0a4:	e379      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a0a6:	4b5a      	ldr	r3, [pc, #360]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d1f0      	bne.n	800a094 <HAL_RCC_OscConfig+0x10c>
 800a0b2:	e000      	b.n	800a0b6 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	f003 0302 	and.w	r3, r3, #2
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 80ae 	beq.w	800a220 <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0c4:	4b52      	ldr	r3, [pc, #328]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a0c6:	691b      	ldr	r3, [r3, #16]
 800a0c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0cc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0ce:	4b50      	ldr	r3, [pc, #320]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0d2:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0d4:	6a3b      	ldr	r3, [r7, #32]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d007      	beq.n	800a0ea <HAL_RCC_OscConfig+0x162>
 800a0da:	6a3b      	ldr	r3, [r7, #32]
 800a0dc:	2b18      	cmp	r3, #24
 800a0de:	d13a      	bne.n	800a156 <HAL_RCC_OscConfig+0x1ce>
 800a0e0:	69fb      	ldr	r3, [r7, #28]
 800a0e2:	f003 0303 	and.w	r3, r3, #3
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d135      	bne.n	800a156 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0ea:	4b49      	ldr	r3, [pc, #292]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f003 0304 	and.w	r3, r3, #4
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d005      	beq.n	800a102 <HAL_RCC_OscConfig+0x17a>
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d101      	bne.n	800a102 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e34b      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a102:	f7fa fea7 	bl	8004e54 <HAL_GetREVID>
 800a106:	4602      	mov	r2, r0
 800a108:	f241 0303 	movw	r3, #4099	; 0x1003
 800a10c:	429a      	cmp	r2, r3
 800a10e:	d817      	bhi.n	800a140 <HAL_RCC_OscConfig+0x1b8>
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	691b      	ldr	r3, [r3, #16]
 800a114:	2b40      	cmp	r3, #64	; 0x40
 800a116:	d108      	bne.n	800a12a <HAL_RCC_OscConfig+0x1a2>
 800a118:	4b3d      	ldr	r3, [pc, #244]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a120:	4a3b      	ldr	r2, [pc, #236]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a126:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a128:	e07a      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a12a:	4b39      	ldr	r3, [pc, #228]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	691b      	ldr	r3, [r3, #16]
 800a136:	031b      	lsls	r3, r3, #12
 800a138:	4935      	ldr	r1, [pc, #212]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a13a:	4313      	orrs	r3, r2
 800a13c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a13e:	e06f      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a140:	4b33      	ldr	r3, [pc, #204]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a142:	685b      	ldr	r3, [r3, #4]
 800a144:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	691b      	ldr	r3, [r3, #16]
 800a14c:	061b      	lsls	r3, r3, #24
 800a14e:	4930      	ldr	r1, [pc, #192]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a150:	4313      	orrs	r3, r2
 800a152:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a154:	e064      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	68db      	ldr	r3, [r3, #12]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d045      	beq.n	800a1ea <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a15e:	4b2c      	ldr	r3, [pc, #176]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	f023 0219 	bic.w	r2, r3, #25
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	68db      	ldr	r3, [r3, #12]
 800a16a:	4929      	ldr	r1, [pc, #164]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a16c:	4313      	orrs	r3, r2
 800a16e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a170:	f7fa fe42 	bl	8004df8 <HAL_GetTick>
 800a174:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a176:	e008      	b.n	800a18a <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a178:	f7fa fe3e 	bl	8004df8 <HAL_GetTick>
 800a17c:	4602      	mov	r2, r0
 800a17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a180:	1ad3      	subs	r3, r2, r3
 800a182:	2b02      	cmp	r3, #2
 800a184:	d901      	bls.n	800a18a <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 800a186:	2303      	movs	r3, #3
 800a188:	e307      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a18a:	4b21      	ldr	r3, [pc, #132]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	f003 0304 	and.w	r3, r3, #4
 800a192:	2b00      	cmp	r3, #0
 800a194:	d0f0      	beq.n	800a178 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a196:	f7fa fe5d 	bl	8004e54 <HAL_GetREVID>
 800a19a:	4602      	mov	r2, r0
 800a19c:	f241 0303 	movw	r3, #4099	; 0x1003
 800a1a0:	429a      	cmp	r2, r3
 800a1a2:	d817      	bhi.n	800a1d4 <HAL_RCC_OscConfig+0x24c>
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	2b40      	cmp	r3, #64	; 0x40
 800a1aa:	d108      	bne.n	800a1be <HAL_RCC_OscConfig+0x236>
 800a1ac:	4b18      	ldr	r3, [pc, #96]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1b4:	4a16      	ldr	r2, [pc, #88]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1ba:	6053      	str	r3, [r2, #4]
 800a1bc:	e030      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
 800a1be:	4b14      	ldr	r3, [pc, #80]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	691b      	ldr	r3, [r3, #16]
 800a1ca:	031b      	lsls	r3, r3, #12
 800a1cc:	4910      	ldr	r1, [pc, #64]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	604b      	str	r3, [r1, #4]
 800a1d2:	e025      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
 800a1d4:	4b0e      	ldr	r3, [pc, #56]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	691b      	ldr	r3, [r3, #16]
 800a1e0:	061b      	lsls	r3, r3, #24
 800a1e2:	490b      	ldr	r1, [pc, #44]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	604b      	str	r3, [r1, #4]
 800a1e8:	e01a      	b.n	800a220 <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a1ea:	4b09      	ldr	r3, [pc, #36]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a08      	ldr	r2, [pc, #32]	; (800a210 <HAL_RCC_OscConfig+0x288>)
 800a1f0:	f023 0301 	bic.w	r3, r3, #1
 800a1f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a1f6:	f7fa fdff 	bl	8004df8 <HAL_GetTick>
 800a1fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a1fc:	e00a      	b.n	800a214 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a1fe:	f7fa fdfb 	bl	8004df8 <HAL_GetTick>
 800a202:	4602      	mov	r2, r0
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	1ad3      	subs	r3, r2, r3
 800a208:	2b02      	cmp	r3, #2
 800a20a:	d903      	bls.n	800a214 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 800a20c:	2303      	movs	r3, #3
 800a20e:	e2c4      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
 800a210:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a214:	4ba4      	ldr	r3, [pc, #656]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f003 0304 	and.w	r3, r3, #4
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d1ee      	bne.n	800a1fe <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 0310 	and.w	r3, r3, #16
 800a228:	2b00      	cmp	r3, #0
 800a22a:	f000 80a9 	beq.w	800a380 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a22e:	4b9e      	ldr	r3, [pc, #632]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a236:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a238:	4b9b      	ldr	r3, [pc, #620]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a23c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	2b08      	cmp	r3, #8
 800a242:	d007      	beq.n	800a254 <HAL_RCC_OscConfig+0x2cc>
 800a244:	69bb      	ldr	r3, [r7, #24]
 800a246:	2b18      	cmp	r3, #24
 800a248:	d13a      	bne.n	800a2c0 <HAL_RCC_OscConfig+0x338>
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f003 0303 	and.w	r3, r3, #3
 800a250:	2b01      	cmp	r3, #1
 800a252:	d135      	bne.n	800a2c0 <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a254:	4b94      	ldr	r3, [pc, #592]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <HAL_RCC_OscConfig+0x2e4>
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	69db      	ldr	r3, [r3, #28]
 800a264:	2b80      	cmp	r3, #128	; 0x80
 800a266:	d001      	beq.n	800a26c <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 800a268:	2301      	movs	r3, #1
 800a26a:	e296      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a26c:	f7fa fdf2 	bl	8004e54 <HAL_GetREVID>
 800a270:	4602      	mov	r2, r0
 800a272:	f241 0303 	movw	r3, #4099	; 0x1003
 800a276:	429a      	cmp	r2, r3
 800a278:	d817      	bhi.n	800a2aa <HAL_RCC_OscConfig+0x322>
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	2b20      	cmp	r3, #32
 800a280:	d108      	bne.n	800a294 <HAL_RCC_OscConfig+0x30c>
 800a282:	4b89      	ldr	r3, [pc, #548]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a28a:	4a87      	ldr	r2, [pc, #540]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a28c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a290:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a292:	e075      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a294:	4b84      	ldr	r3, [pc, #528]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	6a1b      	ldr	r3, [r3, #32]
 800a2a0:	069b      	lsls	r3, r3, #26
 800a2a2:	4981      	ldr	r1, [pc, #516]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2a8:	e06a      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2aa:	4b7f      	ldr	r3, [pc, #508]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	6a1b      	ldr	r3, [r3, #32]
 800a2b6:	061b      	lsls	r3, r3, #24
 800a2b8:	497b      	ldr	r1, [pc, #492]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2be:	e05f      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	69db      	ldr	r3, [r3, #28]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d042      	beq.n	800a34e <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a2c8:	4b77      	ldr	r3, [pc, #476]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	4a76      	ldr	r2, [pc, #472]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2d2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2d4:	f7fa fd90 	bl	8004df8 <HAL_GetTick>
 800a2d8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2da:	e008      	b.n	800a2ee <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a2dc:	f7fa fd8c 	bl	8004df8 <HAL_GetTick>
 800a2e0:	4602      	mov	r2, r0
 800a2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e4:	1ad3      	subs	r3, r2, r3
 800a2e6:	2b02      	cmp	r3, #2
 800a2e8:	d901      	bls.n	800a2ee <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	e255      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2ee:	4b6e      	ldr	r3, [pc, #440]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0f0      	beq.n	800a2dc <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2fa:	f7fa fdab 	bl	8004e54 <HAL_GetREVID>
 800a2fe:	4602      	mov	r2, r0
 800a300:	f241 0303 	movw	r3, #4099	; 0x1003
 800a304:	429a      	cmp	r2, r3
 800a306:	d817      	bhi.n	800a338 <HAL_RCC_OscConfig+0x3b0>
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	6a1b      	ldr	r3, [r3, #32]
 800a30c:	2b20      	cmp	r3, #32
 800a30e:	d108      	bne.n	800a322 <HAL_RCC_OscConfig+0x39a>
 800a310:	4b65      	ldr	r3, [pc, #404]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a312:	685b      	ldr	r3, [r3, #4]
 800a314:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a318:	4a63      	ldr	r2, [pc, #396]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a31a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a31e:	6053      	str	r3, [r2, #4]
 800a320:	e02e      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
 800a322:	4b61      	ldr	r3, [pc, #388]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	069b      	lsls	r3, r3, #26
 800a330:	495d      	ldr	r1, [pc, #372]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a332:	4313      	orrs	r3, r2
 800a334:	604b      	str	r3, [r1, #4]
 800a336:	e023      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
 800a338:	4b5b      	ldr	r3, [pc, #364]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6a1b      	ldr	r3, [r3, #32]
 800a344:	061b      	lsls	r3, r3, #24
 800a346:	4958      	ldr	r1, [pc, #352]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a348:	4313      	orrs	r3, r2
 800a34a:	60cb      	str	r3, [r1, #12]
 800a34c:	e018      	b.n	800a380 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a34e:	4b56      	ldr	r3, [pc, #344]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a55      	ldr	r2, [pc, #340]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a35a:	f7fa fd4d 	bl	8004df8 <HAL_GetTick>
 800a35e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a360:	e008      	b.n	800a374 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800a362:	f7fa fd49 	bl	8004df8 <HAL_GetTick>
 800a366:	4602      	mov	r2, r0
 800a368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36a:	1ad3      	subs	r3, r2, r3
 800a36c:	2b02      	cmp	r3, #2
 800a36e:	d901      	bls.n	800a374 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800a370:	2303      	movs	r3, #3
 800a372:	e212      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a374:	4b4c      	ldr	r3, [pc, #304]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d1f0      	bne.n	800a362 <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d036      	beq.n	800a3fa <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	695b      	ldr	r3, [r3, #20]
 800a390:	2b00      	cmp	r3, #0
 800a392:	d019      	beq.n	800a3c8 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a394:	4b44      	ldr	r3, [pc, #272]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a396:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a398:	4a43      	ldr	r2, [pc, #268]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a39a:	f043 0301 	orr.w	r3, r3, #1
 800a39e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3a0:	f7fa fd2a 	bl	8004df8 <HAL_GetTick>
 800a3a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3a6:	e008      	b.n	800a3ba <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3a8:	f7fa fd26 	bl	8004df8 <HAL_GetTick>
 800a3ac:	4602      	mov	r2, r0
 800a3ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3b0:	1ad3      	subs	r3, r2, r3
 800a3b2:	2b02      	cmp	r3, #2
 800a3b4:	d901      	bls.n	800a3ba <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800a3b6:	2303      	movs	r3, #3
 800a3b8:	e1ef      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3ba:	4b3b      	ldr	r3, [pc, #236]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a3bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3be:	f003 0302 	and.w	r3, r3, #2
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d0f0      	beq.n	800a3a8 <HAL_RCC_OscConfig+0x420>
 800a3c6:	e018      	b.n	800a3fa <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3c8:	4b37      	ldr	r3, [pc, #220]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a3ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3cc:	4a36      	ldr	r2, [pc, #216]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a3ce:	f023 0301 	bic.w	r3, r3, #1
 800a3d2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3d4:	f7fa fd10 	bl	8004df8 <HAL_GetTick>
 800a3d8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3da:	e008      	b.n	800a3ee <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a3dc:	f7fa fd0c 	bl	8004df8 <HAL_GetTick>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3e4:	1ad3      	subs	r3, r2, r3
 800a3e6:	2b02      	cmp	r3, #2
 800a3e8:	d901      	bls.n	800a3ee <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800a3ea:	2303      	movs	r3, #3
 800a3ec:	e1d5      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3ee:	4b2e      	ldr	r3, [pc, #184]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a3f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f2:	f003 0302 	and.w	r3, r3, #2
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d1f0      	bne.n	800a3dc <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	f003 0320 	and.w	r3, r3, #32
 800a402:	2b00      	cmp	r3, #0
 800a404:	d036      	beq.n	800a474 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	d019      	beq.n	800a442 <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a40e:	4b26      	ldr	r3, [pc, #152]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	4a25      	ldr	r2, [pc, #148]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a414:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a418:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a41a:	f7fa fced 	bl	8004df8 <HAL_GetTick>
 800a41e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a420:	e008      	b.n	800a434 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a422:	f7fa fce9 	bl	8004df8 <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	2b02      	cmp	r3, #2
 800a42e:	d901      	bls.n	800a434 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800a430:	2303      	movs	r3, #3
 800a432:	e1b2      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a434:	4b1c      	ldr	r3, [pc, #112]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d0f0      	beq.n	800a422 <HAL_RCC_OscConfig+0x49a>
 800a440:	e018      	b.n	800a474 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a442:	4b19      	ldr	r3, [pc, #100]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	4a18      	ldr	r2, [pc, #96]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a448:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a44c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a44e:	f7fa fcd3 	bl	8004df8 <HAL_GetTick>
 800a452:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a454:	e008      	b.n	800a468 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800a456:	f7fa fccf 	bl	8004df8 <HAL_GetTick>
 800a45a:	4602      	mov	r2, r0
 800a45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a45e:	1ad3      	subs	r3, r2, r3
 800a460:	2b02      	cmp	r3, #2
 800a462:	d901      	bls.n	800a468 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 800a464:	2303      	movs	r3, #3
 800a466:	e198      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a468:	4b0f      	ldr	r3, [pc, #60]	; (800a4a8 <HAL_RCC_OscConfig+0x520>)
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1f0      	bne.n	800a456 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	f003 0304 	and.w	r3, r3, #4
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	f000 8085 	beq.w	800a58c <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a482:	4b0a      	ldr	r3, [pc, #40]	; (800a4ac <HAL_RCC_OscConfig+0x524>)
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	4a09      	ldr	r2, [pc, #36]	; (800a4ac <HAL_RCC_OscConfig+0x524>)
 800a488:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a48c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a48e:	f7fa fcb3 	bl	8004df8 <HAL_GetTick>
 800a492:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a494:	e00c      	b.n	800a4b0 <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800a496:	f7fa fcaf 	bl	8004df8 <HAL_GetTick>
 800a49a:	4602      	mov	r2, r0
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	1ad3      	subs	r3, r2, r3
 800a4a0:	2b64      	cmp	r3, #100	; 0x64
 800a4a2:	d905      	bls.n	800a4b0 <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	e178      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
 800a4a8:	58024400 	.word	0x58024400
 800a4ac:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4b0:	4b96      	ldr	r3, [pc, #600]	; (800a70c <HAL_RCC_OscConfig+0x784>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d0ec      	beq.n	800a496 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	689b      	ldr	r3, [r3, #8]
 800a4c0:	2b01      	cmp	r3, #1
 800a4c2:	d106      	bne.n	800a4d2 <HAL_RCC_OscConfig+0x54a>
 800a4c4:	4b92      	ldr	r3, [pc, #584]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4c8:	4a91      	ldr	r2, [pc, #580]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4ca:	f043 0301 	orr.w	r3, r3, #1
 800a4ce:	6713      	str	r3, [r2, #112]	; 0x70
 800a4d0:	e02d      	b.n	800a52e <HAL_RCC_OscConfig+0x5a6>
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	689b      	ldr	r3, [r3, #8]
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d10c      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x56c>
 800a4da:	4b8d      	ldr	r3, [pc, #564]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4de:	4a8c      	ldr	r2, [pc, #560]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4e0:	f023 0301 	bic.w	r3, r3, #1
 800a4e4:	6713      	str	r3, [r2, #112]	; 0x70
 800a4e6:	4b8a      	ldr	r3, [pc, #552]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ea:	4a89      	ldr	r2, [pc, #548]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4ec:	f023 0304 	bic.w	r3, r3, #4
 800a4f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f2:	e01c      	b.n	800a52e <HAL_RCC_OscConfig+0x5a6>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2b05      	cmp	r3, #5
 800a4fa:	d10c      	bne.n	800a516 <HAL_RCC_OscConfig+0x58e>
 800a4fc:	4b84      	ldr	r3, [pc, #528]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	4a83      	ldr	r2, [pc, #524]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a502:	f043 0304 	orr.w	r3, r3, #4
 800a506:	6713      	str	r3, [r2, #112]	; 0x70
 800a508:	4b81      	ldr	r3, [pc, #516]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50c:	4a80      	ldr	r2, [pc, #512]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a50e:	f043 0301 	orr.w	r3, r3, #1
 800a512:	6713      	str	r3, [r2, #112]	; 0x70
 800a514:	e00b      	b.n	800a52e <HAL_RCC_OscConfig+0x5a6>
 800a516:	4b7e      	ldr	r3, [pc, #504]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a518:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a51a:	4a7d      	ldr	r2, [pc, #500]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a51c:	f023 0301 	bic.w	r3, r3, #1
 800a520:	6713      	str	r3, [r2, #112]	; 0x70
 800a522:	4b7b      	ldr	r3, [pc, #492]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a526:	4a7a      	ldr	r2, [pc, #488]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a528:	f023 0304 	bic.w	r3, r3, #4
 800a52c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	689b      	ldr	r3, [r3, #8]
 800a532:	2b00      	cmp	r3, #0
 800a534:	d015      	beq.n	800a562 <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a536:	f7fa fc5f 	bl	8004df8 <HAL_GetTick>
 800a53a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a53c:	e00a      	b.n	800a554 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a53e:	f7fa fc5b 	bl	8004df8 <HAL_GetTick>
 800a542:	4602      	mov	r2, r0
 800a544:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a546:	1ad3      	subs	r3, r2, r3
 800a548:	f241 3288 	movw	r2, #5000	; 0x1388
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d901      	bls.n	800a554 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800a550:	2303      	movs	r3, #3
 800a552:	e122      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a554:	4b6e      	ldr	r3, [pc, #440]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a558:	f003 0302 	and.w	r3, r3, #2
 800a55c:	2b00      	cmp	r3, #0
 800a55e:	d0ee      	beq.n	800a53e <HAL_RCC_OscConfig+0x5b6>
 800a560:	e014      	b.n	800a58c <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a562:	f7fa fc49 	bl	8004df8 <HAL_GetTick>
 800a566:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a568:	e00a      	b.n	800a580 <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a56a:	f7fa fc45 	bl	8004df8 <HAL_GetTick>
 800a56e:	4602      	mov	r2, r0
 800a570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a572:	1ad3      	subs	r3, r2, r3
 800a574:	f241 3288 	movw	r2, #5000	; 0x1388
 800a578:	4293      	cmp	r3, r2
 800a57a:	d901      	bls.n	800a580 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 800a57c:	2303      	movs	r3, #3
 800a57e:	e10c      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a580:	4b63      	ldr	r3, [pc, #396]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a584:	f003 0302 	and.w	r3, r3, #2
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d1ee      	bne.n	800a56a <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a590:	2b00      	cmp	r3, #0
 800a592:	f000 8101 	beq.w	800a798 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a596:	4b5e      	ldr	r3, [pc, #376]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a598:	691b      	ldr	r3, [r3, #16]
 800a59a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a59e:	2b18      	cmp	r3, #24
 800a5a0:	f000 80bc 	beq.w	800a71c <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	2b02      	cmp	r3, #2
 800a5aa:	f040 8095 	bne.w	800a6d8 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5ae:	4b58      	ldr	r3, [pc, #352]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	4a57      	ldr	r2, [pc, #348]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a5b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5ba:	f7fa fc1d 	bl	8004df8 <HAL_GetTick>
 800a5be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5c0:	e008      	b.n	800a5d4 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a5c2:	f7fa fc19 	bl	8004df8 <HAL_GetTick>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ca:	1ad3      	subs	r3, r2, r3
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d901      	bls.n	800a5d4 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 800a5d0:	2303      	movs	r3, #3
 800a5d2:	e0e2      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5d4:	4b4e      	ldr	r3, [pc, #312]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d1f0      	bne.n	800a5c2 <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a5e0:	4b4b      	ldr	r3, [pc, #300]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a5e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a5e4:	4b4b      	ldr	r3, [pc, #300]	; (800a714 <HAL_RCC_OscConfig+0x78c>)
 800a5e6:	4013      	ands	r3, r2
 800a5e8:	687a      	ldr	r2, [r7, #4]
 800a5ea:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a5ec:	687a      	ldr	r2, [r7, #4]
 800a5ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a5f0:	0112      	lsls	r2, r2, #4
 800a5f2:	430a      	orrs	r2, r1
 800a5f4:	4946      	ldr	r1, [pc, #280]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	628b      	str	r3, [r1, #40]	; 0x28
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5fe:	3b01      	subs	r3, #1
 800a600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a608:	3b01      	subs	r3, #1
 800a60a:	025b      	lsls	r3, r3, #9
 800a60c:	b29b      	uxth	r3, r3
 800a60e:	431a      	orrs	r2, r3
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a614:	3b01      	subs	r3, #1
 800a616:	041b      	lsls	r3, r3, #16
 800a618:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a61c:	431a      	orrs	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a622:	3b01      	subs	r3, #1
 800a624:	061b      	lsls	r3, r3, #24
 800a626:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a62a:	4939      	ldr	r1, [pc, #228]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a62c:	4313      	orrs	r3, r2
 800a62e:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800a630:	4b37      	ldr	r3, [pc, #220]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a634:	4a36      	ldr	r2, [pc, #216]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a636:	f023 0301 	bic.w	r3, r3, #1
 800a63a:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a63c:	4b34      	ldr	r3, [pc, #208]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a63e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a640:	4b35      	ldr	r3, [pc, #212]	; (800a718 <HAL_RCC_OscConfig+0x790>)
 800a642:	4013      	ands	r3, r2
 800a644:	687a      	ldr	r2, [r7, #4]
 800a646:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a648:	00d2      	lsls	r2, r2, #3
 800a64a:	4931      	ldr	r1, [pc, #196]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a64c:	4313      	orrs	r3, r2
 800a64e:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a650:	4b2f      	ldr	r3, [pc, #188]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a654:	f023 020c 	bic.w	r2, r3, #12
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a65c:	492c      	ldr	r1, [pc, #176]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a65e:	4313      	orrs	r3, r2
 800a660:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a662:	4b2b      	ldr	r3, [pc, #172]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a666:	f023 0202 	bic.w	r2, r3, #2
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a66e:	4928      	ldr	r1, [pc, #160]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a670:	4313      	orrs	r3, r2
 800a672:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a674:	4b26      	ldr	r3, [pc, #152]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a678:	4a25      	ldr	r2, [pc, #148]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a67a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a67e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a680:	4b23      	ldr	r3, [pc, #140]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a684:	4a22      	ldr	r2, [pc, #136]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a68a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a68c:	4b20      	ldr	r3, [pc, #128]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a68e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a690:	4a1f      	ldr	r2, [pc, #124]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a692:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800a698:	4b1d      	ldr	r3, [pc, #116]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a69a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69c:	4a1c      	ldr	r2, [pc, #112]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a69e:	f043 0301 	orr.w	r3, r3, #1
 800a6a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6a4:	4b1a      	ldr	r3, [pc, #104]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a19      	ldr	r2, [pc, #100]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a6aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6b0:	f7fa fba2 	bl	8004df8 <HAL_GetTick>
 800a6b4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6b6:	e008      	b.n	800a6ca <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6b8:	f7fa fb9e 	bl	8004df8 <HAL_GetTick>
 800a6bc:	4602      	mov	r2, r0
 800a6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6c0:	1ad3      	subs	r3, r2, r3
 800a6c2:	2b02      	cmp	r3, #2
 800a6c4:	d901      	bls.n	800a6ca <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 800a6c6:	2303      	movs	r3, #3
 800a6c8:	e067      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6ca:	4b11      	ldr	r3, [pc, #68]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d0f0      	beq.n	800a6b8 <HAL_RCC_OscConfig+0x730>
 800a6d6:	e05f      	b.n	800a798 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a6d8:	4b0d      	ldr	r3, [pc, #52]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a0c      	ldr	r2, [pc, #48]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a6de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a6e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6e4:	f7fa fb88 	bl	8004df8 <HAL_GetTick>
 800a6e8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6ea:	e008      	b.n	800a6fe <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a6ec:	f7fa fb84 	bl	8004df8 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e04d      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a6fe:	4b04      	ldr	r3, [pc, #16]	; (800a710 <HAL_RCC_OscConfig+0x788>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d1f0      	bne.n	800a6ec <HAL_RCC_OscConfig+0x764>
 800a70a:	e045      	b.n	800a798 <HAL_RCC_OscConfig+0x810>
 800a70c:	58024800 	.word	0x58024800
 800a710:	58024400 	.word	0x58024400
 800a714:	fffffc0c 	.word	0xfffffc0c
 800a718:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a71c:	4b21      	ldr	r3, [pc, #132]	; (800a7a4 <HAL_RCC_OscConfig+0x81c>)
 800a71e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a720:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a722:	4b20      	ldr	r3, [pc, #128]	; (800a7a4 <HAL_RCC_OscConfig+0x81c>)
 800a724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a726:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d031      	beq.n	800a794 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a730:	693b      	ldr	r3, [r7, #16]
 800a732:	f003 0203 	and.w	r2, r3, #3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d12a      	bne.n	800a794 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	091b      	lsrs	r3, r3, #4
 800a742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a74a:	429a      	cmp	r2, r3
 800a74c:	d122      	bne.n	800a794 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d11a      	bne.n	800a794 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	0a5b      	lsrs	r3, r3, #9
 800a762:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a76a:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a76c:	429a      	cmp	r2, r3
 800a76e:	d111      	bne.n	800a794 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	0c1b      	lsrs	r3, r3, #16
 800a774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a77c:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a77e:	429a      	cmp	r2, r3
 800a780:	d108      	bne.n	800a794 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	0e1b      	lsrs	r3, r3, #24
 800a786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a78e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a790:	429a      	cmp	r2, r3
 800a792:	d001      	beq.n	800a798 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 800a794:	2301      	movs	r3, #1
 800a796:	e000      	b.n	800a79a <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 800a798:	2300      	movs	r3, #0
}
 800a79a:	4618      	mov	r0, r3
 800a79c:	3730      	adds	r7, #48	; 0x30
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}
 800a7a2:	bf00      	nop
 800a7a4:	58024400 	.word	0x58024400

0800a7a8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b086      	sub	sp, #24
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
 800a7b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e19c      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a7bc:	4b8a      	ldr	r3, [pc, #552]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	f003 030f 	and.w	r3, r3, #15
 800a7c4:	683a      	ldr	r2, [r7, #0]
 800a7c6:	429a      	cmp	r2, r3
 800a7c8:	d910      	bls.n	800a7ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7ca:	4b87      	ldr	r3, [pc, #540]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	f023 020f 	bic.w	r2, r3, #15
 800a7d2:	4985      	ldr	r1, [pc, #532]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7da:	4b83      	ldr	r3, [pc, #524]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	f003 030f 	and.w	r3, r3, #15
 800a7e2:	683a      	ldr	r2, [r7, #0]
 800a7e4:	429a      	cmp	r2, r3
 800a7e6:	d001      	beq.n	800a7ec <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	e184      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0304 	and.w	r3, r3, #4
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d010      	beq.n	800a81a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	691a      	ldr	r2, [r3, #16]
 800a7fc:	4b7b      	ldr	r3, [pc, #492]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a804:	429a      	cmp	r2, r3
 800a806:	d908      	bls.n	800a81a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a808:	4b78      	ldr	r3, [pc, #480]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a80a:	699b      	ldr	r3, [r3, #24]
 800a80c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	691b      	ldr	r3, [r3, #16]
 800a814:	4975      	ldr	r1, [pc, #468]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a816:	4313      	orrs	r3, r2
 800a818:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f003 0308 	and.w	r3, r3, #8
 800a822:	2b00      	cmp	r3, #0
 800a824:	d010      	beq.n	800a848 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	695a      	ldr	r2, [r3, #20]
 800a82a:	4b70      	ldr	r3, [pc, #448]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a832:	429a      	cmp	r2, r3
 800a834:	d908      	bls.n	800a848 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a836:	4b6d      	ldr	r3, [pc, #436]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a838:	69db      	ldr	r3, [r3, #28]
 800a83a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	695b      	ldr	r3, [r3, #20]
 800a842:	496a      	ldr	r1, [pc, #424]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a844:	4313      	orrs	r3, r2
 800a846:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f003 0310 	and.w	r3, r3, #16
 800a850:	2b00      	cmp	r3, #0
 800a852:	d010      	beq.n	800a876 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	699a      	ldr	r2, [r3, #24]
 800a858:	4b64      	ldr	r3, [pc, #400]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a860:	429a      	cmp	r2, r3
 800a862:	d908      	bls.n	800a876 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a864:	4b61      	ldr	r3, [pc, #388]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a866:	69db      	ldr	r3, [r3, #28]
 800a868:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	699b      	ldr	r3, [r3, #24]
 800a870:	495e      	ldr	r1, [pc, #376]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a872:	4313      	orrs	r3, r2
 800a874:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f003 0320 	and.w	r3, r3, #32
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d010      	beq.n	800a8a4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	69da      	ldr	r2, [r3, #28]
 800a886:	4b59      	ldr	r3, [pc, #356]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a88e:	429a      	cmp	r2, r3
 800a890:	d908      	bls.n	800a8a4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a892:	4b56      	ldr	r3, [pc, #344]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a894:	6a1b      	ldr	r3, [r3, #32]
 800a896:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	4953      	ldr	r1, [pc, #332]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8a0:	4313      	orrs	r3, r2
 800a8a2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f003 0302 	and.w	r3, r3, #2
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d010      	beq.n	800a8d2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	68da      	ldr	r2, [r3, #12]
 800a8b4:	4b4d      	ldr	r3, [pc, #308]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8b6:	699b      	ldr	r3, [r3, #24]
 800a8b8:	f003 030f 	and.w	r3, r3, #15
 800a8bc:	429a      	cmp	r2, r3
 800a8be:	d908      	bls.n	800a8d2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a8c0:	4b4a      	ldr	r3, [pc, #296]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8c2:	699b      	ldr	r3, [r3, #24]
 800a8c4:	f023 020f 	bic.w	r2, r3, #15
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	4947      	ldr	r1, [pc, #284]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f003 0301 	and.w	r3, r3, #1
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d055      	beq.n	800a98a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a8de:	4b43      	ldr	r3, [pc, #268]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8e0:	699b      	ldr	r3, [r3, #24]
 800a8e2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	689b      	ldr	r3, [r3, #8]
 800a8ea:	4940      	ldr	r1, [pc, #256]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8ec:	4313      	orrs	r3, r2
 800a8ee:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	d107      	bne.n	800a908 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a8f8:	4b3c      	ldr	r3, [pc, #240]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a900:	2b00      	cmp	r3, #0
 800a902:	d121      	bne.n	800a948 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a904:	2301      	movs	r3, #1
 800a906:	e0f6      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	685b      	ldr	r3, [r3, #4]
 800a90c:	2b03      	cmp	r3, #3
 800a90e:	d107      	bne.n	800a920 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a910:	4b36      	ldr	r3, [pc, #216]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d115      	bne.n	800a948 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a91c:	2301      	movs	r3, #1
 800a91e:	e0ea      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	685b      	ldr	r3, [r3, #4]
 800a924:	2b01      	cmp	r3, #1
 800a926:	d107      	bne.n	800a938 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a928:	4b30      	ldr	r3, [pc, #192]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a930:	2b00      	cmp	r3, #0
 800a932:	d109      	bne.n	800a948 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e0de      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a938:	4b2c      	ldr	r3, [pc, #176]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f003 0304 	and.w	r3, r3, #4
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a944:	2301      	movs	r3, #1
 800a946:	e0d6      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a948:	4b28      	ldr	r3, [pc, #160]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a94a:	691b      	ldr	r3, [r3, #16]
 800a94c:	f023 0207 	bic.w	r2, r3, #7
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	4925      	ldr	r1, [pc, #148]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a956:	4313      	orrs	r3, r2
 800a958:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a95a:	f7fa fa4d 	bl	8004df8 <HAL_GetTick>
 800a95e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a960:	e00a      	b.n	800a978 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a962:	f7fa fa49 	bl	8004df8 <HAL_GetTick>
 800a966:	4602      	mov	r2, r0
 800a968:	697b      	ldr	r3, [r7, #20]
 800a96a:	1ad3      	subs	r3, r2, r3
 800a96c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a970:	4293      	cmp	r3, r2
 800a972:	d901      	bls.n	800a978 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a974:	2303      	movs	r3, #3
 800a976:	e0be      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a978:	4b1c      	ldr	r3, [pc, #112]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	685b      	ldr	r3, [r3, #4]
 800a984:	00db      	lsls	r3, r3, #3
 800a986:	429a      	cmp	r2, r3
 800a988:	d1eb      	bne.n	800a962 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	f003 0302 	and.w	r3, r3, #2
 800a992:	2b00      	cmp	r3, #0
 800a994:	d010      	beq.n	800a9b8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	68da      	ldr	r2, [r3, #12]
 800a99a:	4b14      	ldr	r3, [pc, #80]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a99c:	699b      	ldr	r3, [r3, #24]
 800a99e:	f003 030f 	and.w	r3, r3, #15
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d208      	bcs.n	800a9b8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9a6:	4b11      	ldr	r3, [pc, #68]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a9a8:	699b      	ldr	r3, [r3, #24]
 800a9aa:	f023 020f 	bic.w	r2, r3, #15
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	68db      	ldr	r3, [r3, #12]
 800a9b2:	490e      	ldr	r1, [pc, #56]	; (800a9ec <HAL_RCC_ClockConfig+0x244>)
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a9b8:	4b0b      	ldr	r3, [pc, #44]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	f003 030f 	and.w	r3, r3, #15
 800a9c0:	683a      	ldr	r2, [r7, #0]
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d214      	bcs.n	800a9f0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a9c6:	4b08      	ldr	r3, [pc, #32]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	f023 020f 	bic.w	r2, r3, #15
 800a9ce:	4906      	ldr	r1, [pc, #24]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a9d6:	4b04      	ldr	r3, [pc, #16]	; (800a9e8 <HAL_RCC_ClockConfig+0x240>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f003 030f 	and.w	r3, r3, #15
 800a9de:	683a      	ldr	r2, [r7, #0]
 800a9e0:	429a      	cmp	r2, r3
 800a9e2:	d005      	beq.n	800a9f0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a9e4:	2301      	movs	r3, #1
 800a9e6:	e086      	b.n	800aaf6 <HAL_RCC_ClockConfig+0x34e>
 800a9e8:	52002000 	.word	0x52002000
 800a9ec:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f003 0304 	and.w	r3, r3, #4
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d010      	beq.n	800aa1e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	691a      	ldr	r2, [r3, #16]
 800aa00:	4b3f      	ldr	r3, [pc, #252]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa02:	699b      	ldr	r3, [r3, #24]
 800aa04:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa08:	429a      	cmp	r2, r3
 800aa0a:	d208      	bcs.n	800aa1e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa0c:	4b3c      	ldr	r3, [pc, #240]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa0e:	699b      	ldr	r3, [r3, #24]
 800aa10:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	691b      	ldr	r3, [r3, #16]
 800aa18:	4939      	ldr	r1, [pc, #228]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa1a:	4313      	orrs	r3, r2
 800aa1c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f003 0308 	and.w	r3, r3, #8
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d010      	beq.n	800aa4c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	695a      	ldr	r2, [r3, #20]
 800aa2e:	4b34      	ldr	r3, [pc, #208]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa30:	69db      	ldr	r3, [r3, #28]
 800aa32:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa36:	429a      	cmp	r2, r3
 800aa38:	d208      	bcs.n	800aa4c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aa3a:	4b31      	ldr	r3, [pc, #196]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa3c:	69db      	ldr	r3, [r3, #28]
 800aa3e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	695b      	ldr	r3, [r3, #20]
 800aa46:	492e      	ldr	r1, [pc, #184]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f003 0310 	and.w	r3, r3, #16
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d010      	beq.n	800aa7a <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	699a      	ldr	r2, [r3, #24]
 800aa5c:	4b28      	ldr	r3, [pc, #160]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa5e:	69db      	ldr	r3, [r3, #28]
 800aa60:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aa64:	429a      	cmp	r2, r3
 800aa66:	d208      	bcs.n	800aa7a <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aa68:	4b25      	ldr	r3, [pc, #148]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa6a:	69db      	ldr	r3, [r3, #28]
 800aa6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	699b      	ldr	r3, [r3, #24]
 800aa74:	4922      	ldr	r1, [pc, #136]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa76:	4313      	orrs	r3, r2
 800aa78:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	f003 0320 	and.w	r3, r3, #32
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d010      	beq.n	800aaa8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	69da      	ldr	r2, [r3, #28]
 800aa8a:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d208      	bcs.n	800aaa8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800aa96:	4b1a      	ldr	r3, [pc, #104]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	69db      	ldr	r3, [r3, #28]
 800aaa2:	4917      	ldr	r1, [pc, #92]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800aaa8:	f000 f844 	bl	800ab34 <HAL_RCC_GetSysClockFreq>
 800aaac:	4601      	mov	r1, r0
 800aaae:	4b14      	ldr	r3, [pc, #80]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aab0:	699b      	ldr	r3, [r3, #24]
 800aab2:	0a1b      	lsrs	r3, r3, #8
 800aab4:	f003 030f 	and.w	r3, r3, #15
 800aab8:	4a12      	ldr	r2, [pc, #72]	; (800ab04 <HAL_RCC_ClockConfig+0x35c>)
 800aaba:	5cd3      	ldrb	r3, [r2, r3]
 800aabc:	f003 031f 	and.w	r3, r3, #31
 800aac0:	fa21 f303 	lsr.w	r3, r1, r3
 800aac4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aac6:	4b0e      	ldr	r3, [pc, #56]	; (800ab00 <HAL_RCC_ClockConfig+0x358>)
 800aac8:	699b      	ldr	r3, [r3, #24]
 800aaca:	f003 030f 	and.w	r3, r3, #15
 800aace:	4a0d      	ldr	r2, [pc, #52]	; (800ab04 <HAL_RCC_ClockConfig+0x35c>)
 800aad0:	5cd3      	ldrb	r3, [r2, r3]
 800aad2:	f003 031f 	and.w	r3, r3, #31
 800aad6:	693a      	ldr	r2, [r7, #16]
 800aad8:	fa22 f303 	lsr.w	r3, r2, r3
 800aadc:	4a0a      	ldr	r2, [pc, #40]	; (800ab08 <HAL_RCC_ClockConfig+0x360>)
 800aade:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aae0:	4a0a      	ldr	r2, [pc, #40]	; (800ab0c <HAL_RCC_ClockConfig+0x364>)
 800aae2:	693b      	ldr	r3, [r7, #16]
 800aae4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800aae6:	4b0a      	ldr	r3, [pc, #40]	; (800ab10 <HAL_RCC_ClockConfig+0x368>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7fa f93a 	bl	8004d64 <HAL_InitTick>
 800aaf0:	4603      	mov	r3, r0
 800aaf2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800aaf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3718      	adds	r7, #24
 800aafa:	46bd      	mov	sp, r7
 800aafc:	bd80      	pop	{r7, pc}
 800aafe:	bf00      	nop
 800ab00:	58024400 	.word	0x58024400
 800ab04:	0801c540 	.word	0x0801c540
 800ab08:	24000014 	.word	0x24000014
 800ab0c:	24000010 	.word	0x24000010
 800ab10:	24000018 	.word	0x24000018

0800ab14 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ab14:	b480      	push	{r7}
 800ab16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800ab18:	4b05      	ldr	r3, [pc, #20]	; (800ab30 <HAL_RCC_EnableCSS+0x1c>)
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a04      	ldr	r2, [pc, #16]	; (800ab30 <HAL_RCC_EnableCSS+0x1c>)
 800ab1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab22:	6013      	str	r3, [r2, #0]
}
 800ab24:	bf00      	nop
 800ab26:	46bd      	mov	sp, r7
 800ab28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2c:	4770      	bx	lr
 800ab2e:	bf00      	nop
 800ab30:	58024400 	.word	0x58024400

0800ab34 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab34:	b480      	push	{r7}
 800ab36:	b089      	sub	sp, #36	; 0x24
 800ab38:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab3a:	4baf      	ldr	r3, [pc, #700]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ab42:	2b18      	cmp	r3, #24
 800ab44:	f200 814e 	bhi.w	800ade4 <HAL_RCC_GetSysClockFreq+0x2b0>
 800ab48:	a201      	add	r2, pc, #4	; (adr r2, 800ab50 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ab4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab4e:	bf00      	nop
 800ab50:	0800abb5 	.word	0x0800abb5
 800ab54:	0800ade5 	.word	0x0800ade5
 800ab58:	0800ade5 	.word	0x0800ade5
 800ab5c:	0800ade5 	.word	0x0800ade5
 800ab60:	0800ade5 	.word	0x0800ade5
 800ab64:	0800ade5 	.word	0x0800ade5
 800ab68:	0800ade5 	.word	0x0800ade5
 800ab6c:	0800ade5 	.word	0x0800ade5
 800ab70:	0800abdb 	.word	0x0800abdb
 800ab74:	0800ade5 	.word	0x0800ade5
 800ab78:	0800ade5 	.word	0x0800ade5
 800ab7c:	0800ade5 	.word	0x0800ade5
 800ab80:	0800ade5 	.word	0x0800ade5
 800ab84:	0800ade5 	.word	0x0800ade5
 800ab88:	0800ade5 	.word	0x0800ade5
 800ab8c:	0800ade5 	.word	0x0800ade5
 800ab90:	0800abe1 	.word	0x0800abe1
 800ab94:	0800ade5 	.word	0x0800ade5
 800ab98:	0800ade5 	.word	0x0800ade5
 800ab9c:	0800ade5 	.word	0x0800ade5
 800aba0:	0800ade5 	.word	0x0800ade5
 800aba4:	0800ade5 	.word	0x0800ade5
 800aba8:	0800ade5 	.word	0x0800ade5
 800abac:	0800ade5 	.word	0x0800ade5
 800abb0:	0800abe7 	.word	0x0800abe7
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800abb4:	4b90      	ldr	r3, [pc, #576]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	f003 0320 	and.w	r3, r3, #32
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d009      	beq.n	800abd4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800abc0:	4b8d      	ldr	r3, [pc, #564]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	08db      	lsrs	r3, r3, #3
 800abc6:	f003 0303 	and.w	r3, r3, #3
 800abca:	4a8c      	ldr	r2, [pc, #560]	; (800adfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800abcc:	fa22 f303 	lsr.w	r3, r2, r3
 800abd0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800abd2:	e10a      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800abd4:	4b89      	ldr	r3, [pc, #548]	; (800adfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800abd6:	61bb      	str	r3, [r7, #24]
    break;
 800abd8:	e107      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800abda:	4b89      	ldr	r3, [pc, #548]	; (800ae00 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800abdc:	61bb      	str	r3, [r7, #24]
    break;
 800abde:	e104      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800abe0:	4b88      	ldr	r3, [pc, #544]	; (800ae04 <HAL_RCC_GetSysClockFreq+0x2d0>)
 800abe2:	61bb      	str	r3, [r7, #24]
    break;
 800abe4:	e101      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800abe6:	4b84      	ldr	r3, [pc, #528]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800abf0:	4b81      	ldr	r3, [pc, #516]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800abf4:	091b      	lsrs	r3, r3, #4
 800abf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800abfa:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800abfc:	4b7e      	ldr	r3, [pc, #504]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800abfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac00:	f003 0301 	and.w	r3, r3, #1
 800ac04:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800ac06:	4b7c      	ldr	r3, [pc, #496]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac0a:	08db      	lsrs	r3, r3, #3
 800ac0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	fb02 f303 	mul.w	r3, r2, r3
 800ac16:	ee07 3a90 	vmov	s15, r3
 800ac1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac1e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800ac22:	693b      	ldr	r3, [r7, #16]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	f000 80da 	beq.w	800adde <HAL_RCC_GetSysClockFreq+0x2aa>
    {
      switch (pllsource)
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2b01      	cmp	r3, #1
 800ac2e:	d05a      	beq.n	800ace6 <HAL_RCC_GetSysClockFreq+0x1b2>
 800ac30:	2b01      	cmp	r3, #1
 800ac32:	d302      	bcc.n	800ac3a <HAL_RCC_GetSysClockFreq+0x106>
 800ac34:	2b02      	cmp	r3, #2
 800ac36:	d078      	beq.n	800ad2a <HAL_RCC_GetSysClockFreq+0x1f6>
 800ac38:	e099      	b.n	800ad6e <HAL_RCC_GetSysClockFreq+0x23a>
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac3a:	4b6f      	ldr	r3, [pc, #444]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	f003 0320 	and.w	r3, r3, #32
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d02d      	beq.n	800aca2 <HAL_RCC_GetSysClockFreq+0x16e>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800ac46:	4b6c      	ldr	r3, [pc, #432]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	08db      	lsrs	r3, r3, #3
 800ac4c:	f003 0303 	and.w	r3, r3, #3
 800ac50:	4a6a      	ldr	r2, [pc, #424]	; (800adfc <HAL_RCC_GetSysClockFreq+0x2c8>)
 800ac52:	fa22 f303 	lsr.w	r3, r2, r3
 800ac56:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	ee07 3a90 	vmov	s15, r3
 800ac5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	ee07 3a90 	vmov	s15, r3
 800ac68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac6c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ac70:	4b61      	ldr	r3, [pc, #388]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ac72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac74:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ac78:	ee07 3a90 	vmov	s15, r3
 800ac7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ac80:	ed97 6a02 	vldr	s12, [r7, #8]
 800ac84:	eddf 5a60 	vldr	s11, [pc, #384]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ac88:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ac8c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ac90:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ac94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ac98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800aca0:	e087      	b.n	800adb2 <HAL_RCC_GetSysClockFreq+0x27e>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	ee07 3a90 	vmov	s15, r3
 800aca8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acac:	eddf 6a57 	vldr	s13, [pc, #348]	; 800ae0c <HAL_RCC_GetSysClockFreq+0x2d8>
 800acb0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acb4:	4b50      	ldr	r3, [pc, #320]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800acb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800acbc:	ee07 3a90 	vmov	s15, r3
 800acc0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acc4:	ed97 6a02 	vldr	s12, [r7, #8]
 800acc8:	eddf 5a4f 	vldr	s11, [pc, #316]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2d4>
 800accc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800acd0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800acd4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800acd8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800acdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ace4:	e065      	b.n	800adb2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ace6:	693b      	ldr	r3, [r7, #16]
 800ace8:	ee07 3a90 	vmov	s15, r3
 800acec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf0:	eddf 6a47 	vldr	s13, [pc, #284]	; 800ae10 <HAL_RCC_GetSysClockFreq+0x2dc>
 800acf4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acf8:	4b3f      	ldr	r3, [pc, #252]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800acfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad00:	ee07 3a90 	vmov	s15, r3
 800ad04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad08:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0c:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ad10:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad14:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad18:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad20:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad24:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad28:	e043      	b.n	800adb2 <HAL_RCC_GetSysClockFreq+0x27e>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	eddf 6a37 	vldr	s13, [pc, #220]	; 800ae14 <HAL_RCC_GetSysClockFreq+0x2e0>
 800ad38:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3c:	4b2e      	ldr	r3, [pc, #184]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ad3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad44:	ee07 3a90 	vmov	s15, r3
 800ad48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4c:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad50:	eddf 5a2d 	vldr	s11, [pc, #180]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ad54:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad58:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad60:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ad6c:	e021      	b.n	800adb2 <HAL_RCC_GetSysClockFreq+0x27e>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	ee07 3a90 	vmov	s15, r3
 800ad74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad78:	eddf 6a25 	vldr	s13, [pc, #148]	; 800ae10 <HAL_RCC_GetSysClockFreq+0x2dc>
 800ad7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad80:	4b1d      	ldr	r3, [pc, #116]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800ad82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad88:	ee07 3a90 	vmov	s15, r3
 800ad8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad90:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad94:	eddf 5a1c 	vldr	s11, [pc, #112]	; 800ae08 <HAL_RCC_GetSysClockFreq+0x2d4>
 800ad98:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adb0:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800adb2:	4b11      	ldr	r3, [pc, #68]	; (800adf8 <HAL_RCC_GetSysClockFreq+0x2c4>)
 800adb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adb6:	0a5b      	lsrs	r3, r3, #9
 800adb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800adbc:	3301      	adds	r3, #1
 800adbe:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	ee07 3a90 	vmov	s15, r3
 800adc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800adca:	edd7 6a07 	vldr	s13, [r7, #28]
 800adce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800add2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800add6:	ee17 3a90 	vmov	r3, s15
 800adda:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800addc:	e005      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>
      sysclockfreq = 0U;
 800adde:	2300      	movs	r3, #0
 800ade0:	61bb      	str	r3, [r7, #24]
    break;
 800ade2:	e002      	b.n	800adea <HAL_RCC_GetSysClockFreq+0x2b6>

  default:
    sysclockfreq = CSI_VALUE;
 800ade4:	4b06      	ldr	r3, [pc, #24]	; (800ae00 <HAL_RCC_GetSysClockFreq+0x2cc>)
 800ade6:	61bb      	str	r3, [r7, #24]
    break;
 800ade8:	bf00      	nop
  }

  return sysclockfreq;
 800adea:	69bb      	ldr	r3, [r7, #24]
}
 800adec:	4618      	mov	r0, r3
 800adee:	3724      	adds	r7, #36	; 0x24
 800adf0:	46bd      	mov	sp, r7
 800adf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf6:	4770      	bx	lr
 800adf8:	58024400 	.word	0x58024400
 800adfc:	03d09000 	.word	0x03d09000
 800ae00:	003d0900 	.word	0x003d0900
 800ae04:	017d7840 	.word	0x017d7840
 800ae08:	46000000 	.word	0x46000000
 800ae0c:	4c742400 	.word	0x4c742400
 800ae10:	4a742400 	.word	0x4a742400
 800ae14:	4bbebc20 	.word	0x4bbebc20

0800ae18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b082      	sub	sp, #8
 800ae1c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ae1e:	f7ff fe89 	bl	800ab34 <HAL_RCC_GetSysClockFreq>
 800ae22:	4601      	mov	r1, r0
 800ae24:	4b10      	ldr	r3, [pc, #64]	; (800ae68 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae26:	699b      	ldr	r3, [r3, #24]
 800ae28:	0a1b      	lsrs	r3, r3, #8
 800ae2a:	f003 030f 	and.w	r3, r3, #15
 800ae2e:	4a0f      	ldr	r2, [pc, #60]	; (800ae6c <HAL_RCC_GetHCLKFreq+0x54>)
 800ae30:	5cd3      	ldrb	r3, [r2, r3]
 800ae32:	f003 031f 	and.w	r3, r3, #31
 800ae36:	fa21 f303 	lsr.w	r3, r1, r3
 800ae3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ae3c:	4b0a      	ldr	r3, [pc, #40]	; (800ae68 <HAL_RCC_GetHCLKFreq+0x50>)
 800ae3e:	699b      	ldr	r3, [r3, #24]
 800ae40:	f003 030f 	and.w	r3, r3, #15
 800ae44:	4a09      	ldr	r2, [pc, #36]	; (800ae6c <HAL_RCC_GetHCLKFreq+0x54>)
 800ae46:	5cd3      	ldrb	r3, [r2, r3]
 800ae48:	f003 031f 	and.w	r3, r3, #31
 800ae4c:	687a      	ldr	r2, [r7, #4]
 800ae4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae52:	4a07      	ldr	r2, [pc, #28]	; (800ae70 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ae56:	4a07      	ldr	r2, [pc, #28]	; (800ae74 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ae5c:	4b04      	ldr	r3, [pc, #16]	; (800ae70 <HAL_RCC_GetHCLKFreq+0x58>)
 800ae5e:	681b      	ldr	r3, [r3, #0]
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3708      	adds	r7, #8
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	58024400 	.word	0x58024400
 800ae6c:	0801c540 	.word	0x0801c540
 800ae70:	24000014 	.word	0x24000014
 800ae74:	24000010 	.word	0x24000010

0800ae78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ae78:	b580      	push	{r7, lr}
 800ae7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ae7c:	f7ff ffcc 	bl	800ae18 <HAL_RCC_GetHCLKFreq>
 800ae80:	4601      	mov	r1, r0
 800ae82:	4b06      	ldr	r3, [pc, #24]	; (800ae9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	091b      	lsrs	r3, r3, #4
 800ae88:	f003 0307 	and.w	r3, r3, #7
 800ae8c:	4a04      	ldr	r2, [pc, #16]	; (800aea0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ae8e:	5cd3      	ldrb	r3, [r2, r3]
 800ae90:	f003 031f 	and.w	r3, r3, #31
 800ae94:	fa21 f303 	lsr.w	r3, r1, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ae98:	4618      	mov	r0, r3
 800ae9a:	bd80      	pop	{r7, pc}
 800ae9c:	58024400 	.word	0x58024400
 800aea0:	0801c540 	.word	0x0801c540

0800aea4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aea8:	f7ff ffb6 	bl	800ae18 <HAL_RCC_GetHCLKFreq>
 800aeac:	4601      	mov	r1, r0
 800aeae:	4b06      	ldr	r3, [pc, #24]	; (800aec8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	0a1b      	lsrs	r3, r3, #8
 800aeb4:	f003 0307 	and.w	r3, r3, #7
 800aeb8:	4a04      	ldr	r2, [pc, #16]	; (800aecc <HAL_RCC_GetPCLK2Freq+0x28>)
 800aeba:	5cd3      	ldrb	r3, [r2, r3]
 800aebc:	f003 031f 	and.w	r3, r3, #31
 800aec0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800aec4:	4618      	mov	r0, r3
 800aec6:	bd80      	pop	{r7, pc}
 800aec8:	58024400 	.word	0x58024400
 800aecc:	0801c540 	.word	0x0801c540

0800aed0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800aed4:	4b07      	ldr	r3, [pc, #28]	; (800aef4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aed6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800aed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aedc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aee0:	d105      	bne.n	800aeee <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CCSCallback();
 800aee2:	f000 f809 	bl	800aef8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800aee6:	4b03      	ldr	r3, [pc, #12]	; (800aef4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800aee8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800aeec:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800aeee:	bf00      	nop
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	58024400 	.word	0x58024400

0800aef8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CCSCallback(void)
{
 800aef8:	b480      	push	{r7}
 800aefa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CCSCallback could be implemented in the user file
   */
}
 800aefc:	bf00      	nop
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr
	...

0800af08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af08:	b580      	push	{r7, lr}
 800af0a:	b086      	sub	sp, #24
 800af0c:	af00      	add	r7, sp, #0
 800af0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800af10:	2300      	movs	r3, #0
 800af12:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800af14:	2300      	movs	r3, #0
 800af16:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af20:	2b00      	cmp	r3, #0
 800af22:	d03d      	beq.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af2c:	d013      	beq.n	800af56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800af2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af32:	d802      	bhi.n	800af3a <HAL_RCCEx_PeriphCLKConfig+0x32>
 800af34:	2b00      	cmp	r3, #0
 800af36:	d007      	beq.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x40>
 800af38:	e01f      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800af3a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af3e:	d013      	beq.n	800af68 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800af40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800af44:	d01c      	beq.n	800af80 <HAL_RCCEx_PeriphCLKConfig+0x78>
 800af46:	e018      	b.n	800af7a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af48:	4baf      	ldr	r3, [pc, #700]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af4c:	4aae      	ldr	r2, [pc, #696]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af52:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af54:	e015      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	3304      	adds	r3, #4
 800af5a:	2102      	movs	r1, #2
 800af5c:	4618      	mov	r0, r3
 800af5e:	f001 fd33 	bl	800c9c8 <RCCEx_PLL2_Config>
 800af62:	4603      	mov	r3, r0
 800af64:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af66:	e00c      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	3324      	adds	r3, #36	; 0x24
 800af6c:	2102      	movs	r1, #2
 800af6e:	4618      	mov	r0, r3
 800af70:	f001 fddc 	bl	800cb2c <RCCEx_PLL3_Config>
 800af74:	4603      	mov	r3, r0
 800af76:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800af78:	e003      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af7a:	2301      	movs	r3, #1
 800af7c:	75fb      	strb	r3, [r7, #23]
      break;
 800af7e:	e000      	b.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800af80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	2b00      	cmp	r3, #0
 800af86:	d109      	bne.n	800af9c <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800af88:	4b9f      	ldr	r3, [pc, #636]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af94:	499c      	ldr	r1, [pc, #624]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800af96:	4313      	orrs	r3, r2
 800af98:	650b      	str	r3, [r1, #80]	; 0x50
 800af9a:	e001      	b.n	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af9c:	7dfb      	ldrb	r3, [r7, #23]
 800af9e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d03d      	beq.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800afb0:	2b04      	cmp	r3, #4
 800afb2:	d826      	bhi.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0xfa>
 800afb4:	a201      	add	r2, pc, #4	; (adr r2, 800afbc <HAL_RCCEx_PeriphCLKConfig+0xb4>)
 800afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afba:	bf00      	nop
 800afbc:	0800afd1 	.word	0x0800afd1
 800afc0:	0800afdf 	.word	0x0800afdf
 800afc4:	0800aff1 	.word	0x0800aff1
 800afc8:	0800b009 	.word	0x0800b009
 800afcc:	0800b009 	.word	0x0800b009
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afd0:	4b8d      	ldr	r3, [pc, #564]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afd4:	4a8c      	ldr	r2, [pc, #560]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800afd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800afda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afdc:	e015      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	3304      	adds	r3, #4
 800afe2:	2100      	movs	r1, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f001 fcef 	bl	800c9c8 <RCCEx_PLL2_Config>
 800afea:	4603      	mov	r3, r0
 800afec:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800afee:	e00c      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x102>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	3324      	adds	r3, #36	; 0x24
 800aff4:	2100      	movs	r1, #0
 800aff6:	4618      	mov	r0, r3
 800aff8:	f001 fd98 	bl	800cb2c <RCCEx_PLL3_Config>
 800affc:	4603      	mov	r3, r0
 800affe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b000:	e003      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x102>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	75fb      	strb	r3, [r7, #23]
      break;
 800b006:	e000      	b.n	800b00a <HAL_RCCEx_PeriphCLKConfig+0x102>
      break;
 800b008:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d109      	bne.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x11c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b010:	4b7d      	ldr	r3, [pc, #500]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b014:	f023 0207 	bic.w	r2, r3, #7
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b01c:	497a      	ldr	r1, [pc, #488]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b01e:	4313      	orrs	r3, r2
 800b020:	650b      	str	r3, [r1, #80]	; 0x50
 800b022:	e001      	b.n	800b028 <HAL_RCCEx_PeriphCLKConfig+0x120>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b024:	7dfb      	ldrb	r3, [r7, #23]
 800b026:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b030:	2b00      	cmp	r3, #0
 800b032:	d03e      	beq.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b038:	2b80      	cmp	r3, #128	; 0x80
 800b03a:	d01c      	beq.n	800b076 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800b03c:	2b80      	cmp	r3, #128	; 0x80
 800b03e:	d804      	bhi.n	800b04a <HAL_RCCEx_PeriphCLKConfig+0x142>
 800b040:	2b00      	cmp	r3, #0
 800b042:	d008      	beq.n	800b056 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800b044:	2b40      	cmp	r3, #64	; 0x40
 800b046:	d00d      	beq.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800b048:	e01e      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x180>
 800b04a:	2bc0      	cmp	r3, #192	; 0xc0
 800b04c:	d01f      	beq.n	800b08e <HAL_RCCEx_PeriphCLKConfig+0x186>
 800b04e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b052:	d01e      	beq.n	800b092 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b054:	e018      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x180>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b056:	4b6c      	ldr	r3, [pc, #432]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b058:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b05a:	4a6b      	ldr	r2, [pc, #428]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b05c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b060:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b062:	e017      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	3304      	adds	r3, #4
 800b068:	2100      	movs	r1, #0
 800b06a:	4618      	mov	r0, r3
 800b06c:	f001 fcac 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b070:	4603      	mov	r3, r0
 800b072:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b074:	e00e      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x18c>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	3324      	adds	r3, #36	; 0x24
 800b07a:	2100      	movs	r1, #0
 800b07c:	4618      	mov	r0, r3
 800b07e:	f001 fd55 	bl	800cb2c <RCCEx_PLL3_Config>
 800b082:	4603      	mov	r3, r0
 800b084:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800b086:	e005      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
      break;
 800b08c:	e002      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800b08e:	bf00      	nop
 800b090:	e000      	b.n	800b094 <HAL_RCCEx_PeriphCLKConfig+0x18c>
      break;
 800b092:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b094:	7dfb      	ldrb	r3, [r7, #23]
 800b096:	2b00      	cmp	r3, #0
 800b098:	d109      	bne.n	800b0ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b09a:	4b5b      	ldr	r3, [pc, #364]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b09c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b09e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0a6:	4958      	ldr	r1, [pc, #352]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0a8:	4313      	orrs	r3, r2
 800b0aa:	650b      	str	r3, [r1, #80]	; 0x50
 800b0ac:	e001      	b.n	800b0b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ae:	7dfb      	ldrb	r3, [r7, #23]
 800b0b0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d044      	beq.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x240>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b0c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0c8:	d01f      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x202>
 800b0ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b0ce:	d805      	bhi.n	800b0dc <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b0d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b0d8:	d00e      	beq.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
 800b0da:	e01f      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x214>
 800b0dc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b0e0:	d01f      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x21a>
 800b0e2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b0e6:	d01e      	beq.n	800b126 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 800b0e8:	e018      	b.n	800b11c <HAL_RCCEx_PeriphCLKConfig+0x214>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0ea:	4b47      	ldr	r3, [pc, #284]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0ee:	4a46      	ldr	r2, [pc, #280]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b0f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b0f6:	e017      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	3304      	adds	r3, #4
 800b0fc:	2100      	movs	r1, #0
 800b0fe:	4618      	mov	r0, r3
 800b100:	f001 fc62 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b104:	4603      	mov	r3, r0
 800b106:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b108:	e00e      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x220>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	3324      	adds	r3, #36	; 0x24
 800b10e:	2100      	movs	r1, #0
 800b110:	4618      	mov	r0, r3
 800b112:	f001 fd0b 	bl	800cb2c <RCCEx_PLL3_Config>
 800b116:	4603      	mov	r3, r0
 800b118:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b11a:	e005      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x220>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b11c:	2301      	movs	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]
      break;
 800b120:	e002      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800b122:	bf00      	nop
 800b124:	e000      	b.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0x220>
      break;
 800b126:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d10a      	bne.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b12e:	4b36      	ldr	r3, [pc, #216]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b132:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800b13c:	4932      	ldr	r1, [pc, #200]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b13e:	4313      	orrs	r3, r2
 800b140:	658b      	str	r3, [r1, #88]	; 0x58
 800b142:	e001      	b.n	800b148 <HAL_RCCEx_PeriphCLKConfig+0x240>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b150:	2b00      	cmp	r3, #0
 800b152:	d044      	beq.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b15a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b15e:	d01f      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800b160:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b164:	d805      	bhi.n	800b172 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 800b166:	2b00      	cmp	r3, #0
 800b168:	d00a      	beq.n	800b180 <HAL_RCCEx_PeriphCLKConfig+0x278>
 800b16a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b16e:	d00e      	beq.n	800b18e <HAL_RCCEx_PeriphCLKConfig+0x286>
 800b170:	e01f      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
 800b172:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b176:	d01f      	beq.n	800b1b8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b178:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b17c:	d01e      	beq.n	800b1bc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b17e:	e018      	b.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x2aa>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b180:	4b21      	ldr	r3, [pc, #132]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b184:	4a20      	ldr	r2, [pc, #128]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b18a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b18c:	e017      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	3304      	adds	r3, #4
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f001 fc17 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800b19e:	e00e      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x2b6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	3324      	adds	r3, #36	; 0x24
 800b1a4:	2100      	movs	r1, #0
 800b1a6:	4618      	mov	r0, r3
 800b1a8:	f001 fcc0 	bl	800cb2c <RCCEx_PLL3_Config>
 800b1ac:	4603      	mov	r3, r0
 800b1ae:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800b1b0:	e005      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	75fb      	strb	r3, [r7, #23]
      break;
 800b1b6:	e002      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800b1b8:	bf00      	nop
 800b1ba:	e000      	b.n	800b1be <HAL_RCCEx_PeriphCLKConfig+0x2b6>
      break;
 800b1bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10a      	bne.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b1c4:	4b10      	ldr	r3, [pc, #64]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b1c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1c8:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1d2:	490d      	ldr	r1, [pc, #52]	; (800b208 <HAL_RCCEx_PeriphCLKConfig+0x300>)
 800b1d4:	4313      	orrs	r3, r2
 800b1d6:	658b      	str	r3, [r1, #88]	; 0x58
 800b1d8:	e001      	b.n	800b1de <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1da:	7dfb      	ldrb	r3, [r7, #23]
 800b1dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e6:	2b00      	cmp	r3, #0
 800b1e8:	d035      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800b1ea:	687b      	ldr	r3, [r7, #4]
 800b1ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b1ee:	2b10      	cmp	r3, #16
 800b1f0:	d00c      	beq.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x304>
 800b1f2:	2b10      	cmp	r3, #16
 800b1f4:	d802      	bhi.n	800b1fc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d01b      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0x32a>
 800b1fa:	e017      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b1fc:	2b20      	cmp	r3, #32
 800b1fe:	d00c      	beq.n	800b21a <HAL_RCCEx_PeriphCLKConfig+0x312>
 800b200:	2b30      	cmp	r3, #48	; 0x30
 800b202:	d018      	beq.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x32e>
 800b204:	e012      	b.n	800b22c <HAL_RCCEx_PeriphCLKConfig+0x324>
 800b206:	bf00      	nop
 800b208:	58024400 	.word	0x58024400
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b20c:	4baf      	ldr	r3, [pc, #700]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b20e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b210:	4aae      	ldr	r2, [pc, #696]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b212:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b216:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b218:	e00e      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x330>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	3304      	adds	r3, #4
 800b21e:	2102      	movs	r1, #2
 800b220:	4618      	mov	r0, r3
 800b222:	f001 fbd1 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b226:	4603      	mov	r3, r0
 800b228:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800b22a:	e005      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x330>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b22c:	2301      	movs	r3, #1
 800b22e:	75fb      	strb	r3, [r7, #23]
      break;
 800b230:	e002      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b232:	bf00      	nop
 800b234:	e000      	b.n	800b238 <HAL_RCCEx_PeriphCLKConfig+0x330>
      break;
 800b236:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b238:	7dfb      	ldrb	r3, [r7, #23]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d109      	bne.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b23e:	4ba3      	ldr	r3, [pc, #652]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b242:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b24a:	49a0      	ldr	r1, [pc, #640]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b24c:	4313      	orrs	r3, r2
 800b24e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b250:	e001      	b.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b252:	7dfb      	ldrb	r3, [r7, #23]
 800b254:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d042      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b266:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b26a:	d01f      	beq.n	800b2ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
 800b26c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b270:	d805      	bhi.n	800b27e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b272:	2b00      	cmp	r3, #0
 800b274:	d00a      	beq.n	800b28c <HAL_RCCEx_PeriphCLKConfig+0x384>
 800b276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b27a:	d00e      	beq.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x392>
 800b27c:	e01f      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
 800b27e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b282:	d01f      	beq.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 800b284:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b288:	d01e      	beq.n	800b2c8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
 800b28a:	e018      	b.n	800b2be <HAL_RCCEx_PeriphCLKConfig+0x3b6>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b28c:	4b8f      	ldr	r3, [pc, #572]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b28e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b290:	4a8e      	ldr	r2, [pc, #568]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b296:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b298:	e017      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	3304      	adds	r3, #4
 800b29e:	2100      	movs	r1, #0
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	f001 fb91 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b2aa:	e00e      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	3324      	adds	r3, #36	; 0x24
 800b2b0:	2100      	movs	r1, #0
 800b2b2:	4618      	mov	r0, r3
 800b2b4:	f001 fc3a 	bl	800cb2c <RCCEx_PLL3_Config>
 800b2b8:	4603      	mov	r3, r0
 800b2ba:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800b2bc:	e005      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b2be:	2301      	movs	r3, #1
 800b2c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b2c2:	e002      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b2c4:	bf00      	nop
 800b2c6:	e000      	b.n	800b2ca <HAL_RCCEx_PeriphCLKConfig+0x3c2>
      break;
 800b2c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b2ca:	7dfb      	ldrb	r3, [r7, #23]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d109      	bne.n	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b2d0:	4b7e      	ldr	r3, [pc, #504]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b2d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2d4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b2dc:	497b      	ldr	r1, [pc, #492]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b2de:	4313      	orrs	r3, r2
 800b2e0:	650b      	str	r3, [r1, #80]	; 0x50
 800b2e2:	e001      	b.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2e4:	7dfb      	ldrb	r3, [r7, #23]
 800b2e6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d042      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x472>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2fc:	d01b      	beq.n	800b336 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800b2fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b302:	d805      	bhi.n	800b310 <HAL_RCCEx_PeriphCLKConfig+0x408>
 800b304:	2b00      	cmp	r3, #0
 800b306:	d022      	beq.n	800b34e <HAL_RCCEx_PeriphCLKConfig+0x446>
 800b308:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b30c:	d00a      	beq.n	800b324 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 800b30e:	e01b      	b.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x440>
 800b310:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b314:	d01d      	beq.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0x44a>
 800b316:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b31a:	d01c      	beq.n	800b356 <HAL_RCCEx_PeriphCLKConfig+0x44e>
 800b31c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b320:	d01b      	beq.n	800b35a <HAL_RCCEx_PeriphCLKConfig+0x452>
 800b322:	e011      	b.n	800b348 <HAL_RCCEx_PeriphCLKConfig+0x440>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	3304      	adds	r3, #4
 800b328:	2101      	movs	r1, #1
 800b32a:	4618      	mov	r0, r3
 800b32c:	f001 fb4c 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b330:	4603      	mov	r3, r0
 800b332:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b334:	e012      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	3324      	adds	r3, #36	; 0x24
 800b33a:	2101      	movs	r1, #1
 800b33c:	4618      	mov	r0, r3
 800b33e:	f001 fbf5 	bl	800cb2c <RCCEx_PLL3_Config>
 800b342:	4603      	mov	r3, r0
 800b344:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800b346:	e009      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b348:	2301      	movs	r3, #1
 800b34a:	75fb      	strb	r3, [r7, #23]
      break;
 800b34c:	e006      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b34e:	bf00      	nop
 800b350:	e004      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b352:	bf00      	nop
 800b354:	e002      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b356:	bf00      	nop
 800b358:	e000      	b.n	800b35c <HAL_RCCEx_PeriphCLKConfig+0x454>
      break;
 800b35a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d109      	bne.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x46e>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b362:	4b5a      	ldr	r3, [pc, #360]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b366:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b36e:	4957      	ldr	r1, [pc, #348]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b370:	4313      	orrs	r3, r2
 800b372:	650b      	str	r3, [r1, #80]	; 0x50
 800b374:	e001      	b.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x472>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b382:	2b00      	cmp	r3, #0
 800b384:	d044      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x508>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b38c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b390:	d01b      	beq.n	800b3ca <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 800b392:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b396:	d805      	bhi.n	800b3a4 <HAL_RCCEx_PeriphCLKConfig+0x49c>
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d022      	beq.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b39c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3a0:	d00a      	beq.n	800b3b8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800b3a2:	e01b      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
 800b3a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b3a8:	d01d      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b3aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b3ae:	d01c      	beq.n	800b3ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
 800b3b0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b3b4:	d01b      	beq.n	800b3ee <HAL_RCCEx_PeriphCLKConfig+0x4e6>
 800b3b6:	e011      	b.n	800b3dc <HAL_RCCEx_PeriphCLKConfig+0x4d4>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	3304      	adds	r3, #4
 800b3bc:	2101      	movs	r1, #1
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f001 fb02 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b3c8:	e012      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	3324      	adds	r3, #36	; 0x24
 800b3ce:	2101      	movs	r1, #1
 800b3d0:	4618      	mov	r0, r3
 800b3d2:	f001 fbab 	bl	800cb2c <RCCEx_PLL3_Config>
 800b3d6:	4603      	mov	r3, r0
 800b3d8:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800b3da:	e009      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800b3dc:	2301      	movs	r3, #1
 800b3de:	75fb      	strb	r3, [r7, #23]
      break;
 800b3e0:	e006      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3e2:	bf00      	nop
 800b3e4:	e004      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3e6:	bf00      	nop
 800b3e8:	e002      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3ea:	bf00      	nop
 800b3ec:	e000      	b.n	800b3f0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
      break;
 800b3ee:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3f0:	7dfb      	ldrb	r3, [r7, #23]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d10a      	bne.n	800b40c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b3f6:	4b35      	ldr	r3, [pc, #212]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b3f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3fa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b404:	4931      	ldr	r1, [pc, #196]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b406:	4313      	orrs	r3, r2
 800b408:	658b      	str	r3, [r1, #88]	; 0x58
 800b40a:	e001      	b.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x508>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b40c:	7dfb      	ldrb	r3, [r7, #23]
 800b40e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d02d      	beq.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x570>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b420:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b424:	d005      	beq.n	800b432 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800b426:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b42a:	d009      	beq.n	800b440 <HAL_RCCEx_PeriphCLKConfig+0x538>
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d013      	beq.n	800b458 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800b430:	e00f      	b.n	800b452 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b432:	4b26      	ldr	r3, [pc, #152]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b436:	4a25      	ldr	r2, [pc, #148]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b43c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b43e:	e00c      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x552>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	3304      	adds	r3, #4
 800b444:	2101      	movs	r1, #1
 800b446:	4618      	mov	r0, r3
 800b448:	f001 fabe 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b44c:	4603      	mov	r3, r0
 800b44e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800b450:	e003      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x552>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b452:	2301      	movs	r3, #1
 800b454:	75fb      	strb	r3, [r7, #23]
      break;
 800b456:	e000      	b.n	800b45a <HAL_RCCEx_PeriphCLKConfig+0x552>
      break;
 800b458:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b45a:	7dfb      	ldrb	r3, [r7, #23]
 800b45c:	2b00      	cmp	r3, #0
 800b45e:	d109      	bne.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x56c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b460:	4b1a      	ldr	r3, [pc, #104]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b464:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b46c:	4917      	ldr	r1, [pc, #92]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b46e:	4313      	orrs	r3, r2
 800b470:	650b      	str	r3, [r1, #80]	; 0x50
 800b472:	e001      	b.n	800b478 <HAL_RCCEx_PeriphCLKConfig+0x570>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b474:	7dfb      	ldrb	r3, [r7, #23]
 800b476:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b480:	2b00      	cmp	r3, #0
 800b482:	d035      	beq.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b488:	2b03      	cmp	r3, #3
 800b48a:	d81b      	bhi.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
 800b48c:	a201      	add	r2, pc, #4	; (adr r2, 800b494 <HAL_RCCEx_PeriphCLKConfig+0x58c>)
 800b48e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b492:	bf00      	nop
 800b494:	0800b4d1 	.word	0x0800b4d1
 800b498:	0800b4a5 	.word	0x0800b4a5
 800b49c:	0800b4b3 	.word	0x0800b4b3
 800b4a0:	0800b4d1 	.word	0x0800b4d1
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b4a4:	4b09      	ldr	r3, [pc, #36]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b4a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b4a8:	4a08      	ldr	r2, [pc, #32]	; (800b4cc <HAL_RCCEx_PeriphCLKConfig+0x5c4>)
 800b4aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4ae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b4b0:	e00f      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	3304      	adds	r3, #4
 800b4b6:	2102      	movs	r1, #2
 800b4b8:	4618      	mov	r0, r3
 800b4ba:	f001 fa85 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b4be:	4603      	mov	r3, r0
 800b4c0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800b4c2:	e006      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	75fb      	strb	r3, [r7, #23]
      break;
 800b4c8:	e003      	b.n	800b4d2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
 800b4ca:	bf00      	nop
 800b4cc:	58024400 	.word	0x58024400
      break;
 800b4d0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4d2:	7dfb      	ldrb	r3, [r7, #23]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d109      	bne.n	800b4ec <HAL_RCCEx_PeriphCLKConfig+0x5e4>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b4d8:	4bba      	ldr	r3, [pc, #744]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b4da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4dc:	f023 0203 	bic.w	r2, r3, #3
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4e4:	49b7      	ldr	r1, [pc, #732]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b4ea:	e001      	b.n	800b4f0 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4ec:	7dfb      	ldrb	r3, [r7, #23]
 800b4ee:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	f000 8086 	beq.w	800b60a <HAL_RCCEx_PeriphCLKConfig+0x702>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4fe:	4bb2      	ldr	r3, [pc, #712]	; (800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	4ab1      	ldr	r2, [pc, #708]	; (800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b504:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b508:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b50a:	f7f9 fc75 	bl	8004df8 <HAL_GetTick>
 800b50e:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b510:	e009      	b.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b512:	f7f9 fc71 	bl	8004df8 <HAL_GetTick>
 800b516:	4602      	mov	r2, r0
 800b518:	693b      	ldr	r3, [r7, #16]
 800b51a:	1ad3      	subs	r3, r2, r3
 800b51c:	2b64      	cmp	r3, #100	; 0x64
 800b51e:	d902      	bls.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        ret = HAL_TIMEOUT;
 800b520:	2303      	movs	r3, #3
 800b522:	75fb      	strb	r3, [r7, #23]
        break;
 800b524:	e005      	b.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b526:	4ba8      	ldr	r3, [pc, #672]	; (800b7c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d0ef      	beq.n	800b512 <HAL_RCCEx_PeriphCLKConfig+0x60a>
      }
    }

    if(ret == HAL_OK)
 800b532:	7dfb      	ldrb	r3, [r7, #23]
 800b534:	2b00      	cmp	r3, #0
 800b536:	d166      	bne.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x6fe>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b538:	4ba2      	ldr	r3, [pc, #648]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b53a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b542:	4053      	eors	r3, r2
 800b544:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d013      	beq.n	800b574 <HAL_RCCEx_PeriphCLKConfig+0x66c>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b54c:	4b9d      	ldr	r3, [pc, #628]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b54e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b554:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b556:	4b9b      	ldr	r3, [pc, #620]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b55a:	4a9a      	ldr	r2, [pc, #616]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b55c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b560:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b562:	4b98      	ldr	r3, [pc, #608]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b566:	4a97      	ldr	r2, [pc, #604]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b568:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b56c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b56e:	4a95      	ldr	r2, [pc, #596]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57e:	d115      	bne.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b580:	f7f9 fc3a 	bl	8004df8 <HAL_GetTick>
 800b584:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b586:	e00b      	b.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b588:	f7f9 fc36 	bl	8004df8 <HAL_GetTick>
 800b58c:	4602      	mov	r2, r0
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	f241 3288 	movw	r2, #5000	; 0x1388
 800b596:	4293      	cmp	r3, r2
 800b598:	d902      	bls.n	800b5a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
          {
            ret = HAL_TIMEOUT;
 800b59a:	2303      	movs	r3, #3
 800b59c:	75fb      	strb	r3, [r7, #23]
            break;
 800b59e:	e005      	b.n	800b5ac <HAL_RCCEx_PeriphCLKConfig+0x6a4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5a0:	4b88      	ldr	r3, [pc, #544]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5a4:	f003 0302 	and.w	r3, r3, #2
 800b5a8:	2b00      	cmp	r3, #0
 800b5aa:	d0ed      	beq.n	800b588 <HAL_RCCEx_PeriphCLKConfig+0x680>
          }
        }
      }

      if(ret == HAL_OK)
 800b5ac:	7dfb      	ldrb	r3, [r7, #23]
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d126      	bne.n	800b600 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5c0:	d10d      	bne.n	800b5de <HAL_RCCEx_PeriphCLKConfig+0x6d6>
 800b5c2:	4b80      	ldr	r3, [pc, #512]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5c4:	691b      	ldr	r3, [r3, #16]
 800b5c6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5d0:	0919      	lsrs	r1, r3, #4
 800b5d2:	4b7e      	ldr	r3, [pc, #504]	; (800b7cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>)
 800b5d4:	400b      	ands	r3, r1
 800b5d6:	497b      	ldr	r1, [pc, #492]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5d8:	4313      	orrs	r3, r2
 800b5da:	610b      	str	r3, [r1, #16]
 800b5dc:	e005      	b.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x6e2>
 800b5de:	4b79      	ldr	r3, [pc, #484]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5e0:	691b      	ldr	r3, [r3, #16]
 800b5e2:	4a78      	ldr	r2, [pc, #480]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5e4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5e8:	6113      	str	r3, [r2, #16]
 800b5ea:	4b76      	ldr	r3, [pc, #472]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5ec:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b5f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b5f8:	4972      	ldr	r1, [pc, #456]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	670b      	str	r3, [r1, #112]	; 0x70
 800b5fe:	e004      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b600:	7dfb      	ldrb	r3, [r7, #23]
 800b602:	75bb      	strb	r3, [r7, #22]
 800b604:	e001      	b.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x702>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b606:	7dfb      	ldrb	r3, [r7, #23]
 800b608:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	f003 0301 	and.w	r3, r3, #1
 800b612:	2b00      	cmp	r3, #0
 800b614:	d07d      	beq.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x80a>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b61a:	2b28      	cmp	r3, #40	; 0x28
 800b61c:	d866      	bhi.n	800b6ec <HAL_RCCEx_PeriphCLKConfig+0x7e4>
 800b61e:	a201      	add	r2, pc, #4	; (adr r2, 800b624 <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800b620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b624:	0800b6f3 	.word	0x0800b6f3
 800b628:	0800b6ed 	.word	0x0800b6ed
 800b62c:	0800b6ed 	.word	0x0800b6ed
 800b630:	0800b6ed 	.word	0x0800b6ed
 800b634:	0800b6ed 	.word	0x0800b6ed
 800b638:	0800b6ed 	.word	0x0800b6ed
 800b63c:	0800b6ed 	.word	0x0800b6ed
 800b640:	0800b6ed 	.word	0x0800b6ed
 800b644:	0800b6c9 	.word	0x0800b6c9
 800b648:	0800b6ed 	.word	0x0800b6ed
 800b64c:	0800b6ed 	.word	0x0800b6ed
 800b650:	0800b6ed 	.word	0x0800b6ed
 800b654:	0800b6ed 	.word	0x0800b6ed
 800b658:	0800b6ed 	.word	0x0800b6ed
 800b65c:	0800b6ed 	.word	0x0800b6ed
 800b660:	0800b6ed 	.word	0x0800b6ed
 800b664:	0800b6db 	.word	0x0800b6db
 800b668:	0800b6ed 	.word	0x0800b6ed
 800b66c:	0800b6ed 	.word	0x0800b6ed
 800b670:	0800b6ed 	.word	0x0800b6ed
 800b674:	0800b6ed 	.word	0x0800b6ed
 800b678:	0800b6ed 	.word	0x0800b6ed
 800b67c:	0800b6ed 	.word	0x0800b6ed
 800b680:	0800b6ed 	.word	0x0800b6ed
 800b684:	0800b6f3 	.word	0x0800b6f3
 800b688:	0800b6ed 	.word	0x0800b6ed
 800b68c:	0800b6ed 	.word	0x0800b6ed
 800b690:	0800b6ed 	.word	0x0800b6ed
 800b694:	0800b6ed 	.word	0x0800b6ed
 800b698:	0800b6ed 	.word	0x0800b6ed
 800b69c:	0800b6ed 	.word	0x0800b6ed
 800b6a0:	0800b6ed 	.word	0x0800b6ed
 800b6a4:	0800b6f3 	.word	0x0800b6f3
 800b6a8:	0800b6ed 	.word	0x0800b6ed
 800b6ac:	0800b6ed 	.word	0x0800b6ed
 800b6b0:	0800b6ed 	.word	0x0800b6ed
 800b6b4:	0800b6ed 	.word	0x0800b6ed
 800b6b8:	0800b6ed 	.word	0x0800b6ed
 800b6bc:	0800b6ed 	.word	0x0800b6ed
 800b6c0:	0800b6ed 	.word	0x0800b6ed
 800b6c4:	0800b6f3 	.word	0x0800b6f3
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	3304      	adds	r3, #4
 800b6cc:	2101      	movs	r1, #1
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	f001 f97a 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b6d8:	e00c      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	3324      	adds	r3, #36	; 0x24
 800b6de:	2101      	movs	r1, #1
 800b6e0:	4618      	mov	r0, r3
 800b6e2:	f001 fa23 	bl	800cb2c <RCCEx_PLL3_Config>
 800b6e6:	4603      	mov	r3, r0
 800b6e8:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800b6ea:	e003      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	75fb      	strb	r3, [r7, #23]
      break;
 800b6f0:	e000      	b.n	800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x7ec>
      break;
 800b6f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b6f4:	7dfb      	ldrb	r3, [r7, #23]
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d109      	bne.n	800b70e <HAL_RCCEx_PeriphCLKConfig+0x806>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b6fa:	4b32      	ldr	r3, [pc, #200]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b6fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6fe:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b706:	492f      	ldr	r1, [pc, #188]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b708:	4313      	orrs	r3, r2
 800b70a:	654b      	str	r3, [r1, #84]	; 0x54
 800b70c:	e001      	b.n	800b712 <HAL_RCCEx_PeriphCLKConfig+0x80a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b70e:	7dfb      	ldrb	r3, [r7, #23]
 800b710:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	f003 0302 	and.w	r3, r3, #2
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d037      	beq.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x886>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b722:	2b05      	cmp	r3, #5
 800b724:	d820      	bhi.n	800b768 <HAL_RCCEx_PeriphCLKConfig+0x860>
 800b726:	a201      	add	r2, pc, #4	; (adr r2, 800b72c <HAL_RCCEx_PeriphCLKConfig+0x824>)
 800b728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b72c:	0800b76f 	.word	0x0800b76f
 800b730:	0800b745 	.word	0x0800b745
 800b734:	0800b757 	.word	0x0800b757
 800b738:	0800b76f 	.word	0x0800b76f
 800b73c:	0800b76f 	.word	0x0800b76f
 800b740:	0800b76f 	.word	0x0800b76f
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	3304      	adds	r3, #4
 800b748:	2101      	movs	r1, #1
 800b74a:	4618      	mov	r0, r3
 800b74c:	f001 f93c 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b750:	4603      	mov	r3, r0
 800b752:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b754:	e00c      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x868>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	3324      	adds	r3, #36	; 0x24
 800b75a:	2101      	movs	r1, #1
 800b75c:	4618      	mov	r0, r3
 800b75e:	f001 f9e5 	bl	800cb2c <RCCEx_PLL3_Config>
 800b762:	4603      	mov	r3, r0
 800b764:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800b766:	e003      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x868>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b768:	2301      	movs	r3, #1
 800b76a:	75fb      	strb	r3, [r7, #23]
      break;
 800b76c:	e000      	b.n	800b770 <HAL_RCCEx_PeriphCLKConfig+0x868>
      break;
 800b76e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b770:	7dfb      	ldrb	r3, [r7, #23]
 800b772:	2b00      	cmp	r3, #0
 800b774:	d109      	bne.n	800b78a <HAL_RCCEx_PeriphCLKConfig+0x882>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b776:	4b13      	ldr	r3, [pc, #76]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b77a:	f023 0207 	bic.w	r2, r3, #7
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b782:	4910      	ldr	r1, [pc, #64]	; (800b7c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>)
 800b784:	4313      	orrs	r3, r2
 800b786:	654b      	str	r3, [r1, #84]	; 0x54
 800b788:	e001      	b.n	800b78e <HAL_RCCEx_PeriphCLKConfig+0x886>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b78a:	7dfb      	ldrb	r3, [r7, #23]
 800b78c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f003 0304 	and.w	r3, r3, #4
 800b796:	2b00      	cmp	r3, #0
 800b798:	d040      	beq.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x914>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7a0:	2b05      	cmp	r3, #5
 800b7a2:	d827      	bhi.n	800b7f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>
 800b7a4:	a201      	add	r2, pc, #4	; (adr r2, 800b7ac <HAL_RCCEx_PeriphCLKConfig+0x8a4>)
 800b7a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7aa:	bf00      	nop
 800b7ac:	0800b7fb 	.word	0x0800b7fb
 800b7b0:	0800b7d1 	.word	0x0800b7d1
 800b7b4:	0800b7e3 	.word	0x0800b7e3
 800b7b8:	0800b7fb 	.word	0x0800b7fb
 800b7bc:	0800b7fb 	.word	0x0800b7fb
 800b7c0:	0800b7fb 	.word	0x0800b7fb
 800b7c4:	58024400 	.word	0x58024400
 800b7c8:	58024800 	.word	0x58024800
 800b7cc:	00ffffcf 	.word	0x00ffffcf
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	3304      	adds	r3, #4
 800b7d4:	2101      	movs	r1, #1
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	f001 f8f6 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b7e0:	e00c      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	3324      	adds	r3, #36	; 0x24
 800b7e6:	2101      	movs	r1, #1
 800b7e8:	4618      	mov	r0, r3
 800b7ea:	f001 f99f 	bl	800cb2c <RCCEx_PLL3_Config>
 800b7ee:	4603      	mov	r3, r0
 800b7f0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b7f2:	e003      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b7f4:	2301      	movs	r3, #1
 800b7f6:	75fb      	strb	r3, [r7, #23]
      break;
 800b7f8:	e000      	b.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
      break;
 800b7fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b7fc:	7dfb      	ldrb	r3, [r7, #23]
 800b7fe:	2b00      	cmp	r3, #0
 800b800:	d10a      	bne.n	800b818 <HAL_RCCEx_PeriphCLKConfig+0x910>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b802:	4bb2      	ldr	r3, [pc, #712]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b806:	f023 0207 	bic.w	r2, r3, #7
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b810:	49ae      	ldr	r1, [pc, #696]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b812:	4313      	orrs	r3, r2
 800b814:	658b      	str	r3, [r1, #88]	; 0x58
 800b816:	e001      	b.n	800b81c <HAL_RCCEx_PeriphCLKConfig+0x914>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b818:	7dfb      	ldrb	r3, [r7, #23]
 800b81a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0320 	and.w	r3, r3, #32
 800b824:	2b00      	cmp	r3, #0
 800b826:	d044      	beq.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b82e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b832:	d01b      	beq.n	800b86c <HAL_RCCEx_PeriphCLKConfig+0x964>
 800b834:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b838:	d805      	bhi.n	800b846 <HAL_RCCEx_PeriphCLKConfig+0x93e>
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d022      	beq.n	800b884 <HAL_RCCEx_PeriphCLKConfig+0x97c>
 800b83e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b842:	d00a      	beq.n	800b85a <HAL_RCCEx_PeriphCLKConfig+0x952>
 800b844:	e01b      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b84a:	d01d      	beq.n	800b888 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b84c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b850:	d01c      	beq.n	800b88c <HAL_RCCEx_PeriphCLKConfig+0x984>
 800b852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b856:	d01b      	beq.n	800b890 <HAL_RCCEx_PeriphCLKConfig+0x988>
 800b858:	e011      	b.n	800b87e <HAL_RCCEx_PeriphCLKConfig+0x976>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	3304      	adds	r3, #4
 800b85e:	2100      	movs	r1, #0
 800b860:	4618      	mov	r0, r3
 800b862:	f001 f8b1 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b866:	4603      	mov	r3, r0
 800b868:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b86a:	e012      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3324      	adds	r3, #36	; 0x24
 800b870:	2102      	movs	r1, #2
 800b872:	4618      	mov	r0, r3
 800b874:	f001 f95a 	bl	800cb2c <RCCEx_PLL3_Config>
 800b878:	4603      	mov	r3, r0
 800b87a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b87c:	e009      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b87e:	2301      	movs	r3, #1
 800b880:	75fb      	strb	r3, [r7, #23]
      break;
 800b882:	e006      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b884:	bf00      	nop
 800b886:	e004      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b888:	bf00      	nop
 800b88a:	e002      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b88c:	bf00      	nop
 800b88e:	e000      	b.n	800b892 <HAL_RCCEx_PeriphCLKConfig+0x98a>
      break;
 800b890:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b892:	7dfb      	ldrb	r3, [r7, #23]
 800b894:	2b00      	cmp	r3, #0
 800b896:	d10a      	bne.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0x9a6>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b898:	4b8c      	ldr	r3, [pc, #560]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b89a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b89c:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b8a6:	4989      	ldr	r1, [pc, #548]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b8a8:	4313      	orrs	r3, r2
 800b8aa:	654b      	str	r3, [r1, #84]	; 0x54
 800b8ac:	e001      	b.n	800b8b2 <HAL_RCCEx_PeriphCLKConfig+0x9aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8ae:	7dfb      	ldrb	r3, [r7, #23]
 800b8b0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d044      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xa40>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b8c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8c8:	d01b      	beq.n	800b902 <HAL_RCCEx_PeriphCLKConfig+0x9fa>
 800b8ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b8ce:	d805      	bhi.n	800b8dc <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d022      	beq.n	800b91a <HAL_RCCEx_PeriphCLKConfig+0xa12>
 800b8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d8:	d00a      	beq.n	800b8f0 <HAL_RCCEx_PeriphCLKConfig+0x9e8>
 800b8da:	e01b      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
 800b8dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b8e0:	d01d      	beq.n	800b91e <HAL_RCCEx_PeriphCLKConfig+0xa16>
 800b8e2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b8e6:	d01c      	beq.n	800b922 <HAL_RCCEx_PeriphCLKConfig+0xa1a>
 800b8e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b8ec:	d01b      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xa1e>
 800b8ee:	e011      	b.n	800b914 <HAL_RCCEx_PeriphCLKConfig+0xa0c>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	3304      	adds	r3, #4
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f001 f866 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b8fc:	4603      	mov	r3, r0
 800b8fe:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b900:	e012      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	3324      	adds	r3, #36	; 0x24
 800b906:	2102      	movs	r1, #2
 800b908:	4618      	mov	r0, r3
 800b90a:	f001 f90f 	bl	800cb2c <RCCEx_PLL3_Config>
 800b90e:	4603      	mov	r3, r0
 800b910:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b912:	e009      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b914:	2301      	movs	r3, #1
 800b916:	75fb      	strb	r3, [r7, #23]
      break;
 800b918:	e006      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b91a:	bf00      	nop
 800b91c:	e004      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b91e:	bf00      	nop
 800b920:	e002      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b922:	bf00      	nop
 800b924:	e000      	b.n	800b928 <HAL_RCCEx_PeriphCLKConfig+0xa20>
      break;
 800b926:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b928:	7dfb      	ldrb	r3, [r7, #23]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d10a      	bne.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xa3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b92e:	4b67      	ldr	r3, [pc, #412]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b930:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b932:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b93c:	4963      	ldr	r1, [pc, #396]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b93e:	4313      	orrs	r3, r2
 800b940:	658b      	str	r3, [r1, #88]	; 0x58
 800b942:	e001      	b.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xa40>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b950:	2b00      	cmp	r3, #0
 800b952:	d044      	beq.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b95a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b95e:	d01b      	beq.n	800b998 <HAL_RCCEx_PeriphCLKConfig+0xa90>
 800b960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b964:	d805      	bhi.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
 800b966:	2b00      	cmp	r3, #0
 800b968:	d022      	beq.n	800b9b0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
 800b96a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b96e:	d00a      	beq.n	800b986 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b970:	e01b      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
 800b972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b976:	d01d      	beq.n	800b9b4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b978:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b97c:	d01c      	beq.n	800b9b8 <HAL_RCCEx_PeriphCLKConfig+0xab0>
 800b97e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b982:	d01b      	beq.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xab4>
 800b984:	e011      	b.n	800b9aa <HAL_RCCEx_PeriphCLKConfig+0xaa2>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	3304      	adds	r3, #4
 800b98a:	2100      	movs	r1, #0
 800b98c:	4618      	mov	r0, r3
 800b98e:	f001 f81b 	bl	800c9c8 <RCCEx_PLL2_Config>
 800b992:	4603      	mov	r3, r0
 800b994:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b996:	e012      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	3324      	adds	r3, #36	; 0x24
 800b99c:	2102      	movs	r1, #2
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f001 f8c4 	bl	800cb2c <RCCEx_PLL3_Config>
 800b9a4:	4603      	mov	r3, r0
 800b9a6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b9a8:	e009      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	75fb      	strb	r3, [r7, #23]
      break;
 800b9ae:	e006      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b9b0:	bf00      	nop
 800b9b2:	e004      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b9b4:	bf00      	nop
 800b9b6:	e002      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b9b8:	bf00      	nop
 800b9ba:	e000      	b.n	800b9be <HAL_RCCEx_PeriphCLKConfig+0xab6>
      break;
 800b9bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b9be:	7dfb      	ldrb	r3, [r7, #23]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d10a      	bne.n	800b9da <HAL_RCCEx_PeriphCLKConfig+0xad2>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b9c4:	4b41      	ldr	r3, [pc, #260]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b9c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b9c8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9d2:	493e      	ldr	r1, [pc, #248]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800b9d4:	4313      	orrs	r3, r2
 800b9d6:	658b      	str	r3, [r1, #88]	; 0x58
 800b9d8:	e001      	b.n	800b9de <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9da:	7dfb      	ldrb	r3, [r7, #23]
 800b9dc:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	f003 0308 	and.w	r3, r3, #8
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d01a      	beq.n	800ba20 <HAL_RCCEx_PeriphCLKConfig+0xb18>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b9f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9f4:	d10a      	bne.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xb04>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	3324      	adds	r3, #36	; 0x24
 800b9fa:	2102      	movs	r1, #2
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 f895 	bl	800cb2c <RCCEx_PLL3_Config>
 800ba02:	4603      	mov	r3, r0
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d001      	beq.n	800ba0c <HAL_RCCEx_PeriphCLKConfig+0xb04>
        {
          status = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ba0c:	4b2f      	ldr	r3, [pc, #188]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba10:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ba1a:	492c      	ldr	r1, [pc, #176]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f003 0310 	and.w	r3, r3, #16
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d01a      	beq.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0xb5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ba36:	d10a      	bne.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xb46>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	3324      	adds	r3, #36	; 0x24
 800ba3c:	2102      	movs	r1, #2
 800ba3e:	4618      	mov	r0, r3
 800ba40:	f001 f874 	bl	800cb2c <RCCEx_PLL3_Config>
 800ba44:	4603      	mov	r3, r0
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d001      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0xb46>
      {
        status = HAL_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ba4e:	4b1f      	ldr	r3, [pc, #124]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800ba5c:	491b      	ldr	r1, [pc, #108]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d032      	beq.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba78:	d00d      	beq.n	800ba96 <HAL_RCCEx_PeriphCLKConfig+0xb8e>
 800ba7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ba7e:	d016      	beq.n	800baae <HAL_RCCEx_PeriphCLKConfig+0xba6>
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d111      	bne.n	800baa8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	3304      	adds	r3, #4
 800ba88:	2100      	movs	r1, #0
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	f000 ff9c 	bl	800c9c8 <RCCEx_PLL2_Config>
 800ba90:	4603      	mov	r3, r0
 800ba92:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ba94:	e00c      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xba8>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	3324      	adds	r3, #36	; 0x24
 800ba9a:	2102      	movs	r1, #2
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	f001 f845 	bl	800cb2c <RCCEx_PLL3_Config>
 800baa2:	4603      	mov	r3, r0
 800baa4:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800baa6:	e003      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800baa8:	2301      	movs	r3, #1
 800baaa:	75fb      	strb	r3, [r7, #23]
      break;
 800baac:	e000      	b.n	800bab0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
      break;
 800baae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bab0:	7dfb      	ldrb	r3, [r7, #23]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d10c      	bne.n	800bad0 <HAL_RCCEx_PeriphCLKConfig+0xbc8>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bab6:	4b05      	ldr	r3, [pc, #20]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800bab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800baba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bac4:	4901      	ldr	r1, [pc, #4]	; (800bacc <HAL_RCCEx_PeriphCLKConfig+0xbc4>)
 800bac6:	4313      	orrs	r3, r2
 800bac8:	658b      	str	r3, [r1, #88]	; 0x58
 800baca:	e003      	b.n	800bad4 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
 800bacc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bad0:	7dfb      	ldrb	r3, [r7, #23]
 800bad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800badc:	2b00      	cmp	r3, #0
 800bade:	d02f      	beq.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xc38>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bae6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800baea:	d00c      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800baec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800baf0:	d015      	beq.n	800bb1e <HAL_RCCEx_PeriphCLKConfig+0xc16>
 800baf2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800baf6:	d10f      	bne.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xc10>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800baf8:	4b79      	ldr	r3, [pc, #484]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bafa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bafc:	4a78      	ldr	r2, [pc, #480]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bafe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb02:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800bb04:	e00c      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xc18>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	3324      	adds	r3, #36	; 0x24
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	4618      	mov	r0, r3
 800bb0e:	f001 f80d 	bl	800cb2c <RCCEx_PLL3_Config>
 800bb12:	4603      	mov	r3, r0
 800bb14:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800bb16:	e003      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bb18:	2301      	movs	r3, #1
 800bb1a:	75fb      	strb	r3, [r7, #23]
      break;
 800bb1c:	e000      	b.n	800bb20 <HAL_RCCEx_PeriphCLKConfig+0xc18>
      break;
 800bb1e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb20:	7dfb      	ldrb	r3, [r7, #23]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d10a      	bne.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0xc34>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bb26:	4b6e      	ldr	r3, [pc, #440]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb34:	496a      	ldr	r1, [pc, #424]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb36:	4313      	orrs	r3, r2
 800bb38:	654b      	str	r3, [r1, #84]	; 0x54
 800bb3a:	e001      	b.n	800bb40 <HAL_RCCEx_PeriphCLKConfig+0xc38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb3c:	7dfb      	ldrb	r3, [r7, #23]
 800bb3e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d029      	beq.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d003      	beq.n	800bb5c <HAL_RCCEx_PeriphCLKConfig+0xc54>
 800bb54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb58:	d007      	beq.n	800bb6a <HAL_RCCEx_PeriphCLKConfig+0xc62>
 800bb5a:	e00f      	b.n	800bb7c <HAL_RCCEx_PeriphCLKConfig+0xc74>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb5c:	4b60      	ldr	r3, [pc, #384]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb60:	4a5f      	ldr	r2, [pc, #380]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bb66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb68:	e00b      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	3304      	adds	r3, #4
 800bb6e:	2102      	movs	r1, #2
 800bb70:	4618      	mov	r0, r3
 800bb72:	f000 ff29 	bl	800c9c8 <RCCEx_PLL2_Config>
 800bb76:	4603      	mov	r3, r0
 800bb78:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800bb7a:	e002      	b.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

    default:
      ret = HAL_ERROR;
 800bb7c:	2301      	movs	r3, #1
 800bb7e:	75fb      	strb	r3, [r7, #23]
      break;
 800bb80:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bb82:	7dfb      	ldrb	r3, [r7, #23]
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d109      	bne.n	800bb9c <HAL_RCCEx_PeriphCLKConfig+0xc94>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bb88:	4b55      	ldr	r3, [pc, #340]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bb94:	4952      	ldr	r1, [pc, #328]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bb96:	4313      	orrs	r3, r2
 800bb98:	64cb      	str	r3, [r1, #76]	; 0x4c
 800bb9a:	e001      	b.n	800bba0 <HAL_RCCEx_PeriphCLKConfig+0xc98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d00a      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	3324      	adds	r3, #36	; 0x24
 800bbb0:	2102      	movs	r1, #2
 800bbb2:	4618      	mov	r0, r3
 800bbb4:	f000 ffba 	bl	800cb2c <RCCEx_PLL3_Config>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d001      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      status=HAL_ERROR;
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d02f      	beq.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xd26>
  {

    switch(PeriphClkInit->RngClockSelection)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bbd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbd6:	d00c      	beq.n	800bbf2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bbd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbdc:	d802      	bhi.n	800bbe4 <HAL_RCCEx_PeriphCLKConfig+0xcdc>
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d011      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xcfe>
 800bbe2:	e00d      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
 800bbe4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbe8:	d00f      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0xd02>
 800bbea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbee:	d00e      	beq.n	800bc0e <HAL_RCCEx_PeriphCLKConfig+0xd06>
 800bbf0:	e006      	b.n	800bc00 <HAL_RCCEx_PeriphCLKConfig+0xcf8>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbf2:	4b3b      	ldr	r3, [pc, #236]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf6:	4a3a      	ldr	r2, [pc, #232]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bbf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bbfc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800bbfe:	e007      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bc00:	2301      	movs	r3, #1
 800bc02:	75fb      	strb	r3, [r7, #23]
      break;
 800bc04:	e004      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bc06:	bf00      	nop
 800bc08:	e002      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bc0a:	bf00      	nop
 800bc0c:	e000      	b.n	800bc10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
      break;
 800bc0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bc10:	7dfb      	ldrb	r3, [r7, #23]
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d109      	bne.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xd22>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bc16:	4b32      	ldr	r3, [pc, #200]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc1a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc22:	492f      	ldr	r1, [pc, #188]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc24:	4313      	orrs	r3, r2
 800bc26:	654b      	str	r3, [r1, #84]	; 0x54
 800bc28:	e001      	b.n	800bc2e <HAL_RCCEx_PeriphCLKConfig+0xd26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc2a:	7dfb      	ldrb	r3, [r7, #23]
 800bc2c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d008      	beq.n	800bc4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800bc3a:	4b29      	ldr	r3, [pc, #164]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc3e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bc46:	4926      	ldr	r1, [pc, #152]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d009      	beq.n	800bc6c <HAL_RCCEx_PeriphCLKConfig+0xd64>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800bc58:	4b21      	ldr	r3, [pc, #132]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc5a:	691b      	ldr	r3, [r3, #16]
 800bc5c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800bc66:	491e      	ldr	r1, [pc, #120]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d008      	beq.n	800bc8a <HAL_RCCEx_PeriphCLKConfig+0xd82>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bc78:	4b19      	ldr	r3, [pc, #100]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bc7c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bc84:	4916      	ldr	r1, [pc, #88]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc86:	4313      	orrs	r3, r2
 800bc88:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00d      	beq.n	800bcb2 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800bc96:	4b12      	ldr	r3, [pc, #72]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc98:	691b      	ldr	r3, [r3, #16]
 800bc9a:	4a11      	ldr	r2, [pc, #68]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bc9c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bca0:	6113      	str	r3, [r2, #16]
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bca4:	691a      	ldr	r2, [r3, #16]
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800bcac:	490c      	ldr	r1, [pc, #48]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da08      	bge.n	800bccc <HAL_RCCEx_PeriphCLKConfig+0xdc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bcba:	4b09      	ldr	r3, [pc, #36]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bcbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bcbe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcc6:	4906      	ldr	r1, [pc, #24]	; (800bce0 <HAL_RCCEx_PeriphCLKConfig+0xdd8>)
 800bcc8:	4313      	orrs	r3, r2
 800bcca:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  if (status == HAL_OK)
 800bccc:	7dbb      	ldrb	r3, [r7, #22]
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d101      	bne.n	800bcd6 <HAL_RCCEx_PeriphCLKConfig+0xdce>
  {
    return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	e000      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xdd0>
  }
  return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	58024400 	.word	0x58024400

0800bce4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b090      	sub	sp, #64	; 0x40
 800bce8:	af00      	add	r7, sp, #0
 800bcea:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcf2:	d150      	bne.n	800bd96 <HAL_RCCEx_GetPeriphCLKFreq+0xb2>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 800bcf4:	4ba1      	ldr	r3, [pc, #644]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bcf6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bcf8:	f003 0307 	and.w	r3, r3, #7
 800bcfc:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bcfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd00:	2b04      	cmp	r3, #4
 800bd02:	d844      	bhi.n	800bd8e <HAL_RCCEx_GetPeriphCLKFreq+0xaa>
 800bd04:	a201      	add	r2, pc, #4	; (adr r2, 800bd0c <HAL_RCCEx_GetPeriphCLKFreq+0x28>)
 800bd06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0a:	bf00      	nop
 800bd0c:	0800bd21 	.word	0x0800bd21
 800bd10:	0800bd31 	.word	0x0800bd31
 800bd14:	0800bd41 	.word	0x0800bd41
 800bd18:	0800bd89 	.word	0x0800bd89
 800bd1c:	0800bd51 	.word	0x0800bd51
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bd20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd24:	4618      	mov	r0, r3
 800bd26:	f000 fd03 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bd2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd2e:	e241      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd30:	f107 0318 	add.w	r3, r7, #24
 800bd34:	4618      	mov	r0, r3
 800bd36:	f000 fa63 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bd3a:	69bb      	ldr	r3, [r7, #24]
 800bd3c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd3e:	e239      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd40:	f107 030c 	add.w	r3, r7, #12
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fba7 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd4e:	e231      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bd50:	4b8a      	ldr	r3, [pc, #552]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bd52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bd58:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bd5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d102      	bne.n	800bd66 <HAL_RCCEx_GetPeriphCLKFreq+0x82>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bd60:	4b87      	ldr	r3, [pc, #540]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bd62:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bd64:	e226      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bd66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bd6c:	d102      	bne.n	800bd74 <HAL_RCCEx_GetPeriphCLKFreq+0x90>
            frequency = CSI_VALUE;
 800bd6e:	4b85      	ldr	r3, [pc, #532]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bd70:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd72:	e21f      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bd74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bd7a:	d102      	bne.n	800bd82 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
            frequency = HSE_VALUE;
 800bd7c:	4b82      	ldr	r3, [pc, #520]	; (800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bd7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd80:	e218      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bd82:	2300      	movs	r3, #0
 800bd84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd86:	e215      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bd88:	4b80      	ldr	r3, [pc, #512]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bd8a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd8c:	e212      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800bd8e:	2300      	movs	r3, #0
 800bd90:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bd92:	bf00      	nop
 800bd94:	e20e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd9c:	d14f      	bne.n	800be3e <HAL_RCCEx_GetPeriphCLKFreq+0x15a>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 800bd9e:	4b77      	ldr	r3, [pc, #476]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bda0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bda2:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800bda6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bda8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdaa:	2b80      	cmp	r3, #128	; 0x80
 800bdac:	d01c      	beq.n	800bde8 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 800bdae:	2b80      	cmp	r3, #128	; 0x80
 800bdb0:	d804      	bhi.n	800bdbc <HAL_RCCEx_GetPeriphCLKFreq+0xd8>
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d008      	beq.n	800bdc8 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>
 800bdb6:	2b40      	cmp	r3, #64	; 0x40
 800bdb8:	d00e      	beq.n	800bdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xf4>
 800bdba:	e03c      	b.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
 800bdbc:	2bc0      	cmp	r3, #192	; 0xc0
 800bdbe:	d037      	beq.n	800be30 <HAL_RCCEx_GetPeriphCLKFreq+0x14c>
 800bdc0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bdc4:	d018      	beq.n	800bdf8 <HAL_RCCEx_GetPeriphCLKFreq+0x114>
 800bdc6:	e036      	b.n	800be36 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
      {
      case 0: /* PLL1 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bdc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 fcaf 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bdd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdd6:	e1ed      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bdd8:	f107 0318 	add.w	r3, r7, #24
 800bddc:	4618      	mov	r0, r3
 800bdde:	f000 fa0f 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bde2:	69bb      	ldr	r3, [r7, #24]
 800bde4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bde6:	e1e5      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bde8:	f107 030c 	add.w	r3, r7, #12
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 fb53 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bdf6:	e1dd      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bdf8:	4b60      	ldr	r3, [pc, #384]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bdfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdfc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800be00:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800be02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be04:	2b00      	cmp	r3, #0
 800be06:	d102      	bne.n	800be0e <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800be08:	4b5d      	ldr	r3, [pc, #372]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800be0a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800be0c:	e1d2      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800be0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be10:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800be14:	d102      	bne.n	800be1c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
            frequency = CSI_VALUE;
 800be16:	4b5b      	ldr	r3, [pc, #364]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800be18:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be1a:	e1cb      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800be1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800be22:	d102      	bne.n	800be2a <HAL_RCCEx_GetPeriphCLKFreq+0x146>
            frequency = HSE_VALUE;
 800be24:	4b58      	ldr	r3, [pc, #352]	; (800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800be26:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be28:	e1c4      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800be2a:	2300      	movs	r3, #0
 800be2c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be2e:	e1c1      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800be30:	4b56      	ldr	r3, [pc, #344]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800be32:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be34:	e1be      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800be36:	2300      	movs	r3, #0
 800be38:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be3a:	bf00      	nop
 800be3c:	e1ba      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800be44:	d153      	bne.n	800beee <HAL_RCCEx_GetPeriphCLKFreq+0x20a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 800be46:	4b4d      	ldr	r3, [pc, #308]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800be48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4a:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800be4e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800be50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be56:	d01f      	beq.n	800be98 <HAL_RCCEx_GetPeriphCLKFreq+0x1b4>
 800be58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800be5c:	d805      	bhi.n	800be6a <HAL_RCCEx_GetPeriphCLKFreq+0x186>
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d00a      	beq.n	800be78 <HAL_RCCEx_GetPeriphCLKFreq+0x194>
 800be62:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be66:	d00f      	beq.n	800be88 <HAL_RCCEx_GetPeriphCLKFreq+0x1a4>
 800be68:	e03d      	b.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
 800be6a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800be6e:	d037      	beq.n	800bee0 <HAL_RCCEx_GetPeriphCLKFreq+0x1fc>
 800be70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800be74:	d018      	beq.n	800bea8 <HAL_RCCEx_GetPeriphCLKFreq+0x1c4>
 800be76:	e036      	b.n	800bee6 <HAL_RCCEx_GetPeriphCLKFreq+0x202>
      {
      case 0: /* PLL1 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800be78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fc57 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800be82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be84:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be86:	e195      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4ASEL_0: /* PLLI2 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800be88:	f107 0318 	add.w	r3, r7, #24
 800be8c:	4618      	mov	r0, r3
 800be8e:	f000 f9b7 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800be92:	69bb      	ldr	r3, [r7, #24]
 800be94:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800be96:	e18d      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_1: /* PLLI3 is the clock source for SAI4A */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800be98:	f107 030c 	add.w	r3, r7, #12
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fafb 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bea6:	e185      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4ASEL_2: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bea8:	4b34      	ldr	r3, [pc, #208]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800beaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800beac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800beb0:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800beb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d102      	bne.n	800bebe <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800beb8:	4b31      	ldr	r3, [pc, #196]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800beba:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bebc:	e17a      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bebe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bec0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bec4:	d102      	bne.n	800becc <HAL_RCCEx_GetPeriphCLKFreq+0x1e8>
            frequency = CSI_VALUE;
 800bec6:	4b2f      	ldr	r3, [pc, #188]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bec8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beca:	e173      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800becc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bece:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bed2:	d102      	bne.n	800beda <HAL_RCCEx_GetPeriphCLKFreq+0x1f6>
            frequency = HSE_VALUE;
 800bed4:	4b2c      	ldr	r3, [pc, #176]	; (800bf88 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bed8:	e16c      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bede:	e169      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4ASEL_0 | RCC_D3CCIPR_SAI4ASEL_1 ): /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bee0:	4b2a      	ldr	r3, [pc, #168]	; (800bf8c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>)
 800bee2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bee4:	e166      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bee6:	2300      	movs	r3, #0
 800bee8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800beea:	bf00      	nop
 800beec:	e162      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bef4:	d15d      	bne.n	800bfb2 <HAL_RCCEx_GetPeriphCLKFreq+0x2ce>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 800bef6:	4b21      	ldr	r3, [pc, #132]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800befa:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800befe:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 800bf00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf06:	d01f      	beq.n	800bf48 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 800bf08:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800bf0c:	d805      	bhi.n	800bf1a <HAL_RCCEx_GetPeriphCLKFreq+0x236>
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d00a      	beq.n	800bf28 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800bf12:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bf16:	d00f      	beq.n	800bf38 <HAL_RCCEx_GetPeriphCLKFreq+0x254>
 800bf18:	e047      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
 800bf1a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800bf1e:	d041      	beq.n	800bfa4 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>
 800bf20:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bf24:	d018      	beq.n	800bf58 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 800bf26:	e040      	b.n	800bfaa <HAL_RCCEx_GetPeriphCLKFreq+0x2c6>
      {
      case 0: /* PLL1 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bf28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	f000 fbff 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf36:	e13d      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_D3CCIPR_SAI4BSEL_0: /* PLLI2 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bf38:	f107 0318 	add.w	r3, r7, #24
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	f000 f95f 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf46:	e135      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_1: /* PLLI3 is the clock source for SAI4B */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bf48:	f107 030c 	add.w	r3, r7, #12
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	f000 faa3 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf56:	e12d      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_D3CCIPR_SAI4BSEL_2: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800bf58:	4b08      	ldr	r3, [pc, #32]	; (800bf7c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800bf5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800bf60:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800bf62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d102      	bne.n	800bf6e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800bf68:	4b05      	ldr	r3, [pc, #20]	; (800bf80 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800bf6a:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800bf6c:	e122      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800bf6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bf74:	d10c      	bne.n	800bf90 <HAL_RCCEx_GetPeriphCLKFreq+0x2ac>
            frequency = CSI_VALUE;
 800bf76:	4b03      	ldr	r3, [pc, #12]	; (800bf84 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800bf78:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf7a:	e11b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 800bf7c:	58024400 	.word	0x58024400
 800bf80:	03d09000 	.word	0x03d09000
 800bf84:	003d0900 	.word	0x003d0900
 800bf88:	017d7840 	.word	0x017d7840
 800bf8c:	00bb8000 	.word	0x00bb8000
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800bf90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bf96:	d102      	bne.n	800bf9e <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
            frequency = HSE_VALUE;
 800bf98:	4b89      	ldr	r3, [pc, #548]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800bf9a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bf9c:	e10a      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800bf9e:	2300      	movs	r3, #0
 800bfa0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa2:	e107      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_D3CCIPR_SAI4BSEL_0 | RCC_D3CCIPR_SAI4BSEL_1 ): /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800bfa4:	4b87      	ldr	r3, [pc, #540]	; (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800bfa6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfa8:	e104      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800bfaa:	2300      	movs	r3, #0
 800bfac:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bfae:	bf00      	nop
 800bfb0:	e100      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfb8:	d153      	bne.n	800c062 <HAL_RCCEx_GetPeriphCLKFreq+0x37e>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 800bfba:	4b83      	ldr	r3, [pc, #524]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800bfbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfbe:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800bfc2:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800bfc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfca:	d01f      	beq.n	800c00c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 800bfcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bfd0:	d805      	bhi.n	800bfde <HAL_RCCEx_GetPeriphCLKFreq+0x2fa>
 800bfd2:	2b00      	cmp	r3, #0
 800bfd4:	d00a      	beq.n	800bfec <HAL_RCCEx_GetPeriphCLKFreq+0x308>
 800bfd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfda:	d00f      	beq.n	800bffc <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 800bfdc:	e03d      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
 800bfde:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bfe2:	d037      	beq.n	800c054 <HAL_RCCEx_GetPeriphCLKFreq+0x370>
 800bfe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfe8:	d018      	beq.n	800c01c <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 800bfea:	e036      	b.n	800c05a <HAL_RCCEx_GetPeriphCLKFreq+0x376>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800bfec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bff0:	4618      	mov	r0, r3
 800bff2:	f000 fb9d 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800bff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bff8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800bffa:	e0db      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bffc:	f107 0318 	add.w	r3, r7, #24
 800c000:	4618      	mov	r0, r3
 800c002:	f000 f8fd 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c00a:	e0d3      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for I2S */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c00c:	f107 030c 	add.w	r3, r7, #12
 800c010:	4618      	mov	r0, r3
 800c012:	f000 fa41 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c01a:	e0cb      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for I2S */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c01c:	4b6a      	ldr	r3, [pc, #424]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c01e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c020:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c024:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d102      	bne.n	800c032 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c02c:	4b67      	ldr	r3, [pc, #412]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800c02e:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c030:	e0c0      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c038:	d102      	bne.n	800c040 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
            frequency = CSI_VALUE;
 800c03a:	4b65      	ldr	r3, [pc, #404]	; (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c03c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c03e:	e0b9      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c042:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c046:	d102      	bne.n	800c04e <HAL_RCCEx_GetPeriphCLKFreq+0x36a>
            frequency = HSE_VALUE;
 800c048:	4b5d      	ldr	r3, [pc, #372]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c04a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c04c:	e0b2      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c04e:	2300      	movs	r3, #0
 800c050:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c052:	e0af      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 800c054:	4b5b      	ldr	r3, [pc, #364]	; (800c1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x4e0>)
 800c056:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c058:	e0ac      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      default :
        {
          frequency = 0;
 800c05a:	2300      	movs	r3, #0
 800c05c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c05e:	bf00      	nop
 800c060:	e0a8      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800c068:	d13d      	bne.n	800c0e6 <HAL_RCCEx_GetPeriphCLKFreq+0x402>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 800c06a:	4b57      	ldr	r3, [pc, #348]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c06c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c06e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c072:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c07a:	d00c      	beq.n	800c096 <HAL_RCCEx_GetPeriphCLKFreq+0x3b2>
 800c07c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c080:	d011      	beq.n	800c0a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 800c082:	2b00      	cmp	r3, #0
 800c084:	d12b      	bne.n	800c0de <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c086:	f107 0318 	add.w	r3, r7, #24
 800c08a:	4618      	mov	r0, r3
 800c08c:	f000 f8b8 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c090:	69bb      	ldr	r3, [r7, #24]
 800c092:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c094:	e08e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c096:	f107 030c 	add.w	r3, r7, #12
 800c09a:	4618      	mov	r0, r3
 800c09c:	f000 f9fc 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c0a0:	697b      	ldr	r3, [r7, #20]
 800c0a2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0a4:	e086      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 800c0a6:	4b48      	ldr	r3, [pc, #288]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c0a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c0ae:	637b      	str	r3, [r7, #52]	; 0x34

          if(ckpclocksource== RCC_CLKPSOURCE_HSI)
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d102      	bne.n	800c0bc <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = HSI_VALUE;
 800c0b6:	4b45      	ldr	r3, [pc, #276]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800c0b8:	63fb      	str	r3, [r7, #60]	; 0x3c
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
          }

          break;
 800c0ba:	e07b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if(ckpclocksource== RCC_CLKPSOURCE_CSI)
 800c0bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c0c2:	d102      	bne.n	800c0ca <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
            frequency = CSI_VALUE;
 800c0c4:	4b42      	ldr	r3, [pc, #264]	; (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c0c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0c8:	e074      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          else if (ckpclocksource== RCC_CLKPSOURCE_HSE)
 800c0ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c0d0:	d102      	bne.n	800c0d8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f4>
            frequency = HSE_VALUE;
 800c0d2:	4b3b      	ldr	r3, [pc, #236]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c0d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0d6:	e06d      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
            frequency = 0;
 800c0d8:	2300      	movs	r3, #0
 800c0da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0dc:	e06a      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c0e2:	bf00      	nop
 800c0e4:	e066      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0ec:	d11f      	bne.n	800c12e <HAL_RCCEx_GetPeriphCLKFreq+0x44a>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 800c0ee:	4b36      	ldr	r3, [pc, #216]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c0f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0f6:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c0f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d003      	beq.n	800c106 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800c0fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c102:	d008      	beq.n	800c116 <HAL_RCCEx_GetPeriphCLKFreq+0x432>
 800c104:	e00f      	b.n	800c126 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c106:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c10a:	4618      	mov	r0, r3
 800c10c:	f000 fb10 	bl	800c730 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c112:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c114:	e04e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c116:	f107 0318 	add.w	r3, r7, #24
 800c11a:	4618      	mov	r0, r3
 800c11c:	f000 f870 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800c120:	6a3b      	ldr	r3, [r7, #32]
 800c122:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c124:	e046      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }

      default :
        {
          frequency = 0;
 800c126:	2300      	movs	r3, #0
 800c128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c12a:	bf00      	nop
 800c12c:	e042      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c134:	d13c      	bne.n	800c1b0 <HAL_RCCEx_GetPeriphCLKFreq+0x4cc>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 800c136:	4b24      	ldr	r3, [pc, #144]	; (800c1c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4e4>)
 800c138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c13a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800c13e:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 800c140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c142:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c146:	d01e      	beq.n	800c186 <HAL_RCCEx_GetPeriphCLKFreq+0x4a2>
 800c148:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c14c:	d805      	bhi.n	800c15a <HAL_RCCEx_GetPeriphCLKFreq+0x476>
 800c14e:	2b00      	cmp	r3, #0
 800c150:	d00d      	beq.n	800c16e <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
 800c152:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c156:	d00e      	beq.n	800c176 <HAL_RCCEx_GetPeriphCLKFreq+0x492>
 800c158:	e026      	b.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
 800c15a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c15e:	d01d      	beq.n	800c19c <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
 800c160:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c164:	d01d      	beq.n	800c1a2 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 800c166:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c16a:	d014      	beq.n	800c196 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800c16c:	e01c      	b.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4c4>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800c16e:	f000 f831 	bl	800c1d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800c172:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 800c174:	e01e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c176:	f107 0318 	add.w	r3, r7, #24
 800c17a:	4618      	mov	r0, r3
 800c17c:	f000 f840 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c180:	69fb      	ldr	r3, [r7, #28]
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c184:	e016      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c186:	f107 030c 	add.w	r3, r7, #12
 800c18a:	4618      	mov	r0, r3
 800c18c:	f000 f984 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c190:	693b      	ldr	r3, [r7, #16]
 800c192:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c194:	e00e      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
          frequency = HSI_VALUE;
 800c196:	4b0d      	ldr	r3, [pc, #52]	; (800c1cc <HAL_RCCEx_GetPeriphCLKFreq+0x4e8>)
 800c198:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c19a:	e00b      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
          frequency = CSI_VALUE;
 800c19c:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4ec>)
 800c19e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1a0:	e008      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
          frequency = HSE_VALUE;
 800c1a2:	4b07      	ldr	r3, [pc, #28]	; (800c1c0 <HAL_RCCEx_GetPeriphCLKFreq+0x4dc>)
 800c1a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1a6:	e005      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 800c1ac:	bf00      	nop
 800c1ae:	e001      	b.n	800c1b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
        }
      }
    }
  else
    {
      frequency = 0;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 800c1b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3740      	adds	r7, #64	; 0x40
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	017d7840 	.word	0x017d7840
 800c1c4:	00bb8000 	.word	0x00bb8000
 800c1c8:	58024400 	.word	0x58024400
 800c1cc:	03d09000 	.word	0x03d09000
 800c1d0:	003d0900 	.word	0x003d0900

0800c1d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c1d8:	f7fe fe1e 	bl	800ae18 <HAL_RCC_GetHCLKFreq>
 800c1dc:	4601      	mov	r1, r0
 800c1de:	4b06      	ldr	r3, [pc, #24]	; (800c1f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800c1e0:	6a1b      	ldr	r3, [r3, #32]
 800c1e2:	091b      	lsrs	r3, r3, #4
 800c1e4:	f003 0307 	and.w	r3, r3, #7
 800c1e8:	4a04      	ldr	r2, [pc, #16]	; (800c1fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800c1ea:	5cd3      	ldrb	r3, [r2, r3]
 800c1ec:	f003 031f 	and.w	r3, r3, #31
 800c1f0:	fa21 f303 	lsr.w	r3, r1, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	bd80      	pop	{r7, pc}
 800c1f8:	58024400 	.word	0x58024400
 800c1fc:	0801c540 	.word	0x0801c540

0800c200 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800c200:	b480      	push	{r7}
 800c202:	b089      	sub	sp, #36	; 0x24
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c208:	4b9d      	ldr	r3, [pc, #628]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c20a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800c212:	4b9b      	ldr	r3, [pc, #620]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c216:	0b1b      	lsrs	r3, r3, #12
 800c218:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c21c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c21e:	4b98      	ldr	r3, [pc, #608]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c222:	091b      	lsrs	r3, r3, #4
 800c224:	f003 0301 	and.w	r3, r3, #1
 800c228:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800c22a:	4b95      	ldr	r3, [pc, #596]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c22c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c22e:	08db      	lsrs	r3, r3, #3
 800c230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c234:	693a      	ldr	r2, [r7, #16]
 800c236:	fb02 f303 	mul.w	r3, r2, r3
 800c23a:	ee07 3a90 	vmov	s15, r3
 800c23e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c242:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800c246:	697b      	ldr	r3, [r7, #20]
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f000 810a 	beq.w	800c462 <HAL_RCCEx_GetPLL2ClockFreq+0x262>
  {
    switch (pllsource)
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	2b01      	cmp	r3, #1
 800c252:	d05a      	beq.n	800c30a <HAL_RCCEx_GetPLL2ClockFreq+0x10a>
 800c254:	2b01      	cmp	r3, #1
 800c256:	d302      	bcc.n	800c25e <HAL_RCCEx_GetPLL2ClockFreq+0x5e>
 800c258:	2b02      	cmp	r3, #2
 800c25a:	d078      	beq.n	800c34e <HAL_RCCEx_GetPLL2ClockFreq+0x14e>
 800c25c:	e099      	b.n	800c392 <HAL_RCCEx_GetPLL2ClockFreq+0x192>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c25e:	4b88      	ldr	r3, [pc, #544]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	f003 0320 	and.w	r3, r3, #32
 800c266:	2b00      	cmp	r3, #0
 800c268:	d02d      	beq.n	800c2c6 <HAL_RCCEx_GetPLL2ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c26a:	4b85      	ldr	r3, [pc, #532]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	08db      	lsrs	r3, r3, #3
 800c270:	f003 0303 	and.w	r3, r3, #3
 800c274:	4a83      	ldr	r2, [pc, #524]	; (800c484 <HAL_RCCEx_GetPLL2ClockFreq+0x284>)
 800c276:	fa22 f303 	lsr.w	r3, r2, r3
 800c27a:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	ee07 3a90 	vmov	s15, r3
 800c282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c286:	697b      	ldr	r3, [r7, #20]
 800c288:	ee07 3a90 	vmov	s15, r3
 800c28c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c290:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c294:	4b7a      	ldr	r3, [pc, #488]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c296:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c29c:	ee07 3a90 	vmov	s15, r3
 800c2a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2a4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2a8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c2ac:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2b0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2b4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2b8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c2bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c0:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c2c4:	e087      	b.n	800c3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c2c6:	697b      	ldr	r3, [r7, #20]
 800c2c8:	ee07 3a90 	vmov	s15, r3
 800c2cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c2d0:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c48c <HAL_RCCEx_GetPLL2ClockFreq+0x28c>
 800c2d4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c2d8:	4b69      	ldr	r3, [pc, #420]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c2da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c2e0:	ee07 3a90 	vmov	s15, r3
 800c2e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c2e8:	ed97 6a03 	vldr	s12, [r7, #12]
 800c2ec:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c2f0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c2f4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c2f8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c2fc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c300:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c304:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c308:	e065      	b.n	800c3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c30a:	697b      	ldr	r3, [r7, #20]
 800c30c:	ee07 3a90 	vmov	s15, r3
 800c310:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c314:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c318:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c31c:	4b58      	ldr	r3, [pc, #352]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c31e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c320:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c324:	ee07 3a90 	vmov	s15, r3
 800c328:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c32c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c330:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c334:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c338:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c33c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c340:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c344:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c348:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c34c:	e043      	b.n	800c3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c34e:	697b      	ldr	r3, [r7, #20]
 800c350:	ee07 3a90 	vmov	s15, r3
 800c354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c358:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c494 <HAL_RCCEx_GetPLL2ClockFreq+0x294>
 800c35c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c360:	4b47      	ldr	r3, [pc, #284]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c364:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c368:	ee07 3a90 	vmov	s15, r3
 800c36c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c370:	ed97 6a03 	vldr	s12, [r7, #12]
 800c374:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c378:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c37c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c380:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c384:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c38c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c390:	e021      	b.n	800c3d6 <HAL_RCCEx_GetPLL2ClockFreq+0x1d6>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800c392:	697b      	ldr	r3, [r7, #20]
 800c394:	ee07 3a90 	vmov	s15, r3
 800c398:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c39c:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c490 <HAL_RCCEx_GetPLL2ClockFreq+0x290>
 800c3a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c3a4:	4b36      	ldr	r3, [pc, #216]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c3ac:	ee07 3a90 	vmov	s15, r3
 800c3b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c3b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c3b8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c488 <HAL_RCCEx_GetPLL2ClockFreq+0x288>
 800c3bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c3c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c3c4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c3c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c3cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3d0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c3d4:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800c3d6:	4b2a      	ldr	r3, [pc, #168]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3da:	0a5b      	lsrs	r3, r3, #9
 800c3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e0:	ee07 3a90 	vmov	s15, r3
 800c3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c3e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c3ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c3f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800c3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c3f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c3fc:	ee17 2a90 	vmov	r2, s15
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800c404:	4b1e      	ldr	r3, [pc, #120]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c408:	0c1b      	lsrs	r3, r3, #16
 800c40a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c40e:	ee07 3a90 	vmov	s15, r3
 800c412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c416:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c41a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c41e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c422:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c426:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c42a:	ee17 2a90 	vmov	r2, s15
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800c432:	4b13      	ldr	r3, [pc, #76]	; (800c480 <HAL_RCCEx_GetPLL2ClockFreq+0x280>)
 800c434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c436:	0e1b      	lsrs	r3, r3, #24
 800c438:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c43c:	ee07 3a90 	vmov	s15, r3
 800c440:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c444:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c448:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c44c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c450:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c458:	ee17 2a90 	vmov	r2, s15
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800c460:	e008      	b.n	800c474 <HAL_RCCEx_GetPLL2ClockFreq+0x274>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	2200      	movs	r2, #0
 800c466:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	2200      	movs	r2, #0
 800c46c:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	609a      	str	r2, [r3, #8]
}
 800c474:	bf00      	nop
 800c476:	3724      	adds	r7, #36	; 0x24
 800c478:	46bd      	mov	sp, r7
 800c47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47e:	4770      	bx	lr
 800c480:	58024400 	.word	0x58024400
 800c484:	03d09000 	.word	0x03d09000
 800c488:	46000000 	.word	0x46000000
 800c48c:	4c742400 	.word	0x4c742400
 800c490:	4a742400 	.word	0x4a742400
 800c494:	4bbebc20 	.word	0x4bbebc20

0800c498 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800c498:	b480      	push	{r7}
 800c49a:	b089      	sub	sp, #36	; 0x24
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4a0:	4b9d      	ldr	r3, [pc, #628]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4a4:	f003 0303 	and.w	r3, r3, #3
 800c4a8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800c4aa:	4b9b      	ldr	r3, [pc, #620]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c4ae:	0d1b      	lsrs	r3, r3, #20
 800c4b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c4b4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c4b6:	4b98      	ldr	r3, [pc, #608]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4ba:	0a1b      	lsrs	r3, r3, #8
 800c4bc:	f003 0301 	and.w	r3, r3, #1
 800c4c0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800c4c2:	4b95      	ldr	r3, [pc, #596]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c4c6:	08db      	lsrs	r3, r3, #3
 800c4c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4cc:	693a      	ldr	r2, [r7, #16]
 800c4ce:	fb02 f303 	mul.w	r3, r2, r3
 800c4d2:	ee07 3a90 	vmov	s15, r3
 800c4d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c4da:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	f000 810a 	beq.w	800c6fa <HAL_RCCEx_GetPLL3ClockFreq+0x262>
  {
    switch (pllsource)
 800c4e6:	69bb      	ldr	r3, [r7, #24]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d05a      	beq.n	800c5a2 <HAL_RCCEx_GetPLL3ClockFreq+0x10a>
 800c4ec:	2b01      	cmp	r3, #1
 800c4ee:	d302      	bcc.n	800c4f6 <HAL_RCCEx_GetPLL3ClockFreq+0x5e>
 800c4f0:	2b02      	cmp	r3, #2
 800c4f2:	d078      	beq.n	800c5e6 <HAL_RCCEx_GetPLL3ClockFreq+0x14e>
 800c4f4:	e099      	b.n	800c62a <HAL_RCCEx_GetPLL3ClockFreq+0x192>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c4f6:	4b88      	ldr	r3, [pc, #544]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	f003 0320 	and.w	r3, r3, #32
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d02d      	beq.n	800c55e <HAL_RCCEx_GetPLL3ClockFreq+0xc6>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c502:	4b85      	ldr	r3, [pc, #532]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	08db      	lsrs	r3, r3, #3
 800c508:	f003 0303 	and.w	r3, r3, #3
 800c50c:	4a83      	ldr	r2, [pc, #524]	; (800c71c <HAL_RCCEx_GetPLL3ClockFreq+0x284>)
 800c50e:	fa22 f303 	lsr.w	r3, r2, r3
 800c512:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	ee07 3a90 	vmov	s15, r3
 800c51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	ee07 3a90 	vmov	s15, r3
 800c524:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c528:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c52c:	4b7a      	ldr	r3, [pc, #488]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c52e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c530:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c534:	ee07 3a90 	vmov	s15, r3
 800c538:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c53c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c540:	eddf 5a77 	vldr	s11, [pc, #476]	; 800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c544:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c548:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c54c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c550:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c554:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c558:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c55c:	e087      	b.n	800c66e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c55e:	697b      	ldr	r3, [r7, #20]
 800c560:	ee07 3a90 	vmov	s15, r3
 800c564:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c568:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800c724 <HAL_RCCEx_GetPLL3ClockFreq+0x28c>
 800c56c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c570:	4b69      	ldr	r3, [pc, #420]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c574:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c578:	ee07 3a90 	vmov	s15, r3
 800c57c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c580:	ed97 6a03 	vldr	s12, [r7, #12]
 800c584:	eddf 5a66 	vldr	s11, [pc, #408]	; 800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c588:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c58c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c590:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c594:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c598:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59c:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5a0:	e065      	b.n	800c66e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	ee07 3a90 	vmov	s15, r3
 800c5a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5ac:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c5b0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5b4:	4b58      	ldr	r3, [pc, #352]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5bc:	ee07 3a90 	vmov	s15, r3
 800c5c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c5c4:	ed97 6a03 	vldr	s12, [r7, #12]
 800c5c8:	eddf 5a55 	vldr	s11, [pc, #340]	; 800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c5cc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c5d0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c5d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c5d8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5e0:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c5e4:	e043      	b.n	800c66e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c5e6:	697b      	ldr	r3, [r7, #20]
 800c5e8:	ee07 3a90 	vmov	s15, r3
 800c5ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c5f0:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800c72c <HAL_RCCEx_GetPLL3ClockFreq+0x294>
 800c5f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c5f8:	4b47      	ldr	r3, [pc, #284]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c5fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c600:	ee07 3a90 	vmov	s15, r3
 800c604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c608:	ed97 6a03 	vldr	s12, [r7, #12]
 800c60c:	eddf 5a44 	vldr	s11, [pc, #272]	; 800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c610:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c614:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c618:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c61c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c620:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c624:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c628:	e021      	b.n	800c66e <HAL_RCCEx_GetPLL3ClockFreq+0x1d6>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800c62a:	697b      	ldr	r3, [r7, #20]
 800c62c:	ee07 3a90 	vmov	s15, r3
 800c630:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c634:	eddf 6a3c 	vldr	s13, [pc, #240]	; 800c728 <HAL_RCCEx_GetPLL3ClockFreq+0x290>
 800c638:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c63c:	4b36      	ldr	r3, [pc, #216]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c640:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c644:	ee07 3a90 	vmov	s15, r3
 800c648:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c64c:	ed97 6a03 	vldr	s12, [r7, #12]
 800c650:	eddf 5a33 	vldr	s11, [pc, #204]	; 800c720 <HAL_RCCEx_GetPLL3ClockFreq+0x288>
 800c654:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c658:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c65c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c660:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c664:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c668:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c66c:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800c66e:	4b2a      	ldr	r3, [pc, #168]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c672:	0a5b      	lsrs	r3, r3, #9
 800c674:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c678:	ee07 3a90 	vmov	s15, r3
 800c67c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c680:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c684:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c688:	edd7 6a07 	vldr	s13, [r7, #28]
 800c68c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c690:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c694:	ee17 2a90 	vmov	r2, s15
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800c69c:	4b1e      	ldr	r3, [pc, #120]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c69e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6a0:	0c1b      	lsrs	r3, r3, #16
 800c6a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6a6:	ee07 3a90 	vmov	s15, r3
 800c6aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6b6:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6c2:	ee17 2a90 	vmov	r2, s15
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800c6ca:	4b13      	ldr	r3, [pc, #76]	; (800c718 <HAL_RCCEx_GetPLL3ClockFreq+0x280>)
 800c6cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6ce:	0e1b      	lsrs	r3, r3, #24
 800c6d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c6d4:	ee07 3a90 	vmov	s15, r3
 800c6d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c6dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c6e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c6e4:	edd7 6a07 	vldr	s13, [r7, #28]
 800c6e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c6ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c6f0:	ee17 2a90 	vmov	r2, s15
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800c6f8:	e008      	b.n	800c70c <HAL_RCCEx_GetPLL3ClockFreq+0x274>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	2200      	movs	r2, #0
 800c6fe:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	2200      	movs	r2, #0
 800c704:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	609a      	str	r2, [r3, #8]
}
 800c70c:	bf00      	nop
 800c70e:	3724      	adds	r7, #36	; 0x24
 800c710:	46bd      	mov	sp, r7
 800c712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c716:	4770      	bx	lr
 800c718:	58024400 	.word	0x58024400
 800c71c:	03d09000 	.word	0x03d09000
 800c720:	46000000 	.word	0x46000000
 800c724:	4c742400 	.word	0x4c742400
 800c728:	4a742400 	.word	0x4a742400
 800c72c:	4bbebc20 	.word	0x4bbebc20

0800c730 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 800c730:	b480      	push	{r7}
 800c732:	b089      	sub	sp, #36	; 0x24
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c738:	4b9d      	ldr	r3, [pc, #628]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c73a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73c:	f003 0303 	and.w	r3, r3, #3
 800c740:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 800c742:	4b9b      	ldr	r3, [pc, #620]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c746:	091b      	lsrs	r3, r3, #4
 800c748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c74c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800c74e:	4b98      	ldr	r3, [pc, #608]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c752:	f003 0301 	and.w	r3, r3, #1
 800c756:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c758:	4b95      	ldr	r3, [pc, #596]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c75a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c75c:	08db      	lsrs	r3, r3, #3
 800c75e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c762:	693a      	ldr	r2, [r7, #16]
 800c764:	fb02 f303 	mul.w	r3, r2, r3
 800c768:	ee07 3a90 	vmov	s15, r3
 800c76c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c770:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800c774:	697b      	ldr	r3, [r7, #20]
 800c776:	2b00      	cmp	r3, #0
 800c778:	f000 810a 	beq.w	800c990 <HAL_RCCEx_GetPLL1ClockFreq+0x260>
  {
    switch (pllsource)
 800c77c:	69bb      	ldr	r3, [r7, #24]
 800c77e:	2b01      	cmp	r3, #1
 800c780:	d05a      	beq.n	800c838 <HAL_RCCEx_GetPLL1ClockFreq+0x108>
 800c782:	2b01      	cmp	r3, #1
 800c784:	d302      	bcc.n	800c78c <HAL_RCCEx_GetPLL1ClockFreq+0x5c>
 800c786:	2b02      	cmp	r3, #2
 800c788:	d078      	beq.n	800c87c <HAL_RCCEx_GetPLL1ClockFreq+0x14c>
 800c78a:	e099      	b.n	800c8c0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c78c:	4b88      	ldr	r3, [pc, #544]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	f003 0320 	and.w	r3, r3, #32
 800c794:	2b00      	cmp	r3, #0
 800c796:	d02d      	beq.n	800c7f4 <HAL_RCCEx_GetPLL1ClockFreq+0xc4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c798:	4b85      	ldr	r3, [pc, #532]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c79a:	681b      	ldr	r3, [r3, #0]
 800c79c:	08db      	lsrs	r3, r3, #3
 800c79e:	f003 0303 	and.w	r3, r3, #3
 800c7a2:	4a84      	ldr	r2, [pc, #528]	; (800c9b4 <HAL_RCCEx_GetPLL1ClockFreq+0x284>)
 800c7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800c7a8:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	ee07 3a90 	vmov	s15, r3
 800c7b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7b4:	697b      	ldr	r3, [r7, #20]
 800c7b6:	ee07 3a90 	vmov	s15, r3
 800c7ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7c2:	4b7b      	ldr	r3, [pc, #492]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7d2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c7d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c7da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c7ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800c7f2:	e087      	b.n	800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	ee07 3a90 	vmov	s15, r3
 800c7fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800c9bc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>
 800c802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c806:	4b6a      	ldr	r3, [pc, #424]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c80e:	ee07 3a90 	vmov	s15, r3
 800c812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c816:	ed97 6a03 	vldr	s12, [r7, #12]
 800c81a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c832:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c836:	e065      	b.n	800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	ee07 3a90 	vmov	s15, r3
 800c83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c842:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c84a:	4b59      	ldr	r3, [pc, #356]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c84c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c852:	ee07 3a90 	vmov	s15, r3
 800c856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800c85e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c876:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c87a:	e043      	b.n	800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c87c:	697b      	ldr	r3, [r7, #20]
 800c87e:	ee07 3a90 	vmov	s15, r3
 800c882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c886:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800c9c4 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800c88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c88e:	4b48      	ldr	r3, [pc, #288]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c896:	ee07 3a90 	vmov	s15, r3
 800c89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c8be:	e021      	b.n	800c904 <HAL_RCCEx_GetPLL1ClockFreq+0x1d4>

    default:
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c8c0:	697b      	ldr	r3, [r7, #20]
 800c8c2:	ee07 3a90 	vmov	s15, r3
 800c8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800c9c0 <HAL_RCCEx_GetPLL1ClockFreq+0x290>
 800c8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8d2:	4b37      	ldr	r3, [pc, #220]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c8d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8da:	ee07 3a90 	vmov	s15, r3
 800c8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800c8e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800c9b8 <HAL_RCCEx_GetPLL1ClockFreq+0x288>
 800c8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800c902:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 800c904:	4b2a      	ldr	r3, [pc, #168]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c908:	0a5b      	lsrs	r3, r3, #9
 800c90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c90e:	ee07 3a90 	vmov	s15, r3
 800c912:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c916:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c91a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c91e:	edd7 6a07 	vldr	s13, [r7, #28]
 800c922:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c926:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c92a:	ee17 2a90 	vmov	r2, s15
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 800c932:	4b1f      	ldr	r3, [pc, #124]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c936:	0c1b      	lsrs	r3, r3, #16
 800c938:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c93c:	ee07 3a90 	vmov	s15, r3
 800c940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c948:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c94c:	edd7 6a07 	vldr	s13, [r7, #28]
 800c950:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c958:	ee17 2a90 	vmov	r2, s15
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 800c960:	4b13      	ldr	r3, [pc, #76]	; (800c9b0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>)
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	0e1b      	lsrs	r3, r3, #24
 800c966:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c96a:	ee07 3a90 	vmov	s15, r3
 800c96e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c972:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c976:	ee37 7a87 	vadd.f32	s14, s15, s14
 800c97a:	edd7 6a07 	vldr	s13, [r7, #28]
 800c97e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c986:	ee17 2a90 	vmov	r2, s15
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800c98e:	e008      	b.n	800c9a2 <HAL_RCCEx_GetPLL1ClockFreq+0x272>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2200      	movs	r2, #0
 800c99a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2200      	movs	r2, #0
 800c9a0:	609a      	str	r2, [r3, #8]
}
 800c9a2:	bf00      	nop
 800c9a4:	3724      	adds	r7, #36	; 0x24
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ac:	4770      	bx	lr
 800c9ae:	bf00      	nop
 800c9b0:	58024400 	.word	0x58024400
 800c9b4:	03d09000 	.word	0x03d09000
 800c9b8:	46000000 	.word	0x46000000
 800c9bc:	4c742400 	.word	0x4c742400
 800c9c0:	4a742400 	.word	0x4a742400
 800c9c4:	4bbebc20 	.word	0x4bbebc20

0800c9c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c9c8:	b580      	push	{r7, lr}
 800c9ca:	b084      	sub	sp, #16
 800c9cc:	af00      	add	r7, sp, #0
 800c9ce:	6078      	str	r0, [r7, #4]
 800c9d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c9d2:	2300      	movs	r3, #0
 800c9d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c9d6:	4b53      	ldr	r3, [pc, #332]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	f003 0303 	and.w	r3, r3, #3
 800c9de:	2b03      	cmp	r3, #3
 800c9e0:	d101      	bne.n	800c9e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e099      	b.n	800cb1a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c9e6:	4b4f      	ldr	r3, [pc, #316]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800c9e8:	681b      	ldr	r3, [r3, #0]
 800c9ea:	4a4e      	ldr	r2, [pc, #312]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800c9ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c9f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c9f2:	f7f8 fa01 	bl	8004df8 <HAL_GetTick>
 800c9f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c9f8:	e008      	b.n	800ca0c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800c9fa:	f7f8 f9fd 	bl	8004df8 <HAL_GetTick>
 800c9fe:	4602      	mov	r2, r0
 800ca00:	68bb      	ldr	r3, [r7, #8]
 800ca02:	1ad3      	subs	r3, r2, r3
 800ca04:	2b02      	cmp	r3, #2
 800ca06:	d901      	bls.n	800ca0c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800ca08:	2303      	movs	r3, #3
 800ca0a:	e086      	b.n	800cb1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800ca0c:	4b45      	ldr	r3, [pc, #276]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca0e:	681b      	ldr	r3, [r3, #0]
 800ca10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d1f0      	bne.n	800c9fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800ca18:	4b42      	ldr	r3, [pc, #264]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	031b      	lsls	r3, r3, #12
 800ca26:	493f      	ldr	r1, [pc, #252]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca28:	4313      	orrs	r3, r2
 800ca2a:	628b      	str	r3, [r1, #40]	; 0x28
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	685b      	ldr	r3, [r3, #4]
 800ca30:	3b01      	subs	r3, #1
 800ca32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	689b      	ldr	r3, [r3, #8]
 800ca3a:	3b01      	subs	r3, #1
 800ca3c:	025b      	lsls	r3, r3, #9
 800ca3e:	b29b      	uxth	r3, r3
 800ca40:	431a      	orrs	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	68db      	ldr	r3, [r3, #12]
 800ca46:	3b01      	subs	r3, #1
 800ca48:	041b      	lsls	r3, r3, #16
 800ca4a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800ca4e:	431a      	orrs	r2, r3
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	691b      	ldr	r3, [r3, #16]
 800ca54:	3b01      	subs	r3, #1
 800ca56:	061b      	lsls	r3, r3, #24
 800ca58:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ca5c:	4931      	ldr	r1, [pc, #196]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca5e:	4313      	orrs	r3, r2
 800ca60:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800ca62:	4b30      	ldr	r3, [pc, #192]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca66:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	695b      	ldr	r3, [r3, #20]
 800ca6e:	492d      	ldr	r1, [pc, #180]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca70:	4313      	orrs	r3, r2
 800ca72:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800ca74:	4b2b      	ldr	r3, [pc, #172]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca78:	f023 0220 	bic.w	r2, r3, #32
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	699b      	ldr	r3, [r3, #24]
 800ca80:	4928      	ldr	r1, [pc, #160]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca82:	4313      	orrs	r3, r2
 800ca84:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800ca86:	4b27      	ldr	r3, [pc, #156]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca8a:	4a26      	ldr	r2, [pc, #152]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca8c:	f023 0310 	bic.w	r3, r3, #16
 800ca90:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800ca92:	4b24      	ldr	r3, [pc, #144]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800ca94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ca96:	4b24      	ldr	r3, [pc, #144]	; (800cb28 <RCCEx_PLL2_Config+0x160>)
 800ca98:	4013      	ands	r3, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	69d2      	ldr	r2, [r2, #28]
 800ca9e:	00d2      	lsls	r2, r2, #3
 800caa0:	4920      	ldr	r1, [pc, #128]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800caa2:	4313      	orrs	r3, r2
 800caa4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800caa6:	4b1f      	ldr	r3, [pc, #124]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800caa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caaa:	4a1e      	ldr	r2, [pc, #120]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800caac:	f043 0310 	orr.w	r3, r3, #16
 800cab0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d106      	bne.n	800cac6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800cab8:	4b1a      	ldr	r3, [pc, #104]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800caba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cabc:	4a19      	ldr	r2, [pc, #100]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cabe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800cac2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cac4:	e00f      	b.n	800cae6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cac6:	683b      	ldr	r3, [r7, #0]
 800cac8:	2b01      	cmp	r3, #1
 800caca:	d106      	bne.n	800cada <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800cacc:	4b15      	ldr	r3, [pc, #84]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cad0:	4a14      	ldr	r2, [pc, #80]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cad2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cad6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cad8:	e005      	b.n	800cae6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800cada:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	4a11      	ldr	r2, [pc, #68]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800cae4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800cae6:	4b0f      	ldr	r3, [pc, #60]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	4a0e      	ldr	r2, [pc, #56]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800caec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800caf0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800caf2:	f7f8 f981 	bl	8004df8 <HAL_GetTick>
 800caf6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800caf8:	e008      	b.n	800cb0c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800cafa:	f7f8 f97d 	bl	8004df8 <HAL_GetTick>
 800cafe:	4602      	mov	r2, r0
 800cb00:	68bb      	ldr	r3, [r7, #8]
 800cb02:	1ad3      	subs	r3, r2, r3
 800cb04:	2b02      	cmp	r3, #2
 800cb06:	d901      	bls.n	800cb0c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cb08:	2303      	movs	r3, #3
 800cb0a:	e006      	b.n	800cb1a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800cb0c:	4b05      	ldr	r3, [pc, #20]	; (800cb24 <RCCEx_PLL2_Config+0x15c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d0f0      	beq.n	800cafa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800cb18:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb1a:	4618      	mov	r0, r3
 800cb1c:	3710      	adds	r7, #16
 800cb1e:	46bd      	mov	sp, r7
 800cb20:	bd80      	pop	{r7, pc}
 800cb22:	bf00      	nop
 800cb24:	58024400 	.word	0x58024400
 800cb28:	ffff0007 	.word	0xffff0007

0800cb2c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800cb2c:	b580      	push	{r7, lr}
 800cb2e:	b084      	sub	sp, #16
 800cb30:	af00      	add	r7, sp, #0
 800cb32:	6078      	str	r0, [r7, #4]
 800cb34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800cb36:	2300      	movs	r3, #0
 800cb38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800cb3a:	4b53      	ldr	r3, [pc, #332]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb3e:	f003 0303 	and.w	r3, r3, #3
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d101      	bne.n	800cb4a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800cb46:	2301      	movs	r3, #1
 800cb48:	e099      	b.n	800cc7e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800cb4a:	4b4f      	ldr	r3, [pc, #316]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4a4e      	ldr	r2, [pc, #312]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cb54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cb56:	f7f8 f94f 	bl	8004df8 <HAL_GetTick>
 800cb5a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb5c:	e008      	b.n	800cb70 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cb5e:	f7f8 f94b 	bl	8004df8 <HAL_GetTick>
 800cb62:	4602      	mov	r2, r0
 800cb64:	68bb      	ldr	r3, [r7, #8]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d901      	bls.n	800cb70 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e086      	b.n	800cc7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800cb70:	4b45      	ldr	r3, [pc, #276]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d1f0      	bne.n	800cb5e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800cb7c:	4b42      	ldr	r3, [pc, #264]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb80:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	051b      	lsls	r3, r3, #20
 800cb8a:	493f      	ldr	r1, [pc, #252]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cb8c:	4313      	orrs	r3, r2
 800cb8e:	628b      	str	r3, [r1, #40]	; 0x28
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	3b01      	subs	r3, #1
 800cb96:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	689b      	ldr	r3, [r3, #8]
 800cb9e:	3b01      	subs	r3, #1
 800cba0:	025b      	lsls	r3, r3, #9
 800cba2:	b29b      	uxth	r3, r3
 800cba4:	431a      	orrs	r2, r3
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	3b01      	subs	r3, #1
 800cbac:	041b      	lsls	r3, r3, #16
 800cbae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800cbb2:	431a      	orrs	r2, r3
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	691b      	ldr	r3, [r3, #16]
 800cbb8:	3b01      	subs	r3, #1
 800cbba:	061b      	lsls	r3, r3, #24
 800cbbc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800cbc0:	4931      	ldr	r1, [pc, #196]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbc2:	4313      	orrs	r3, r2
 800cbc4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800cbc6:	4b30      	ldr	r3, [pc, #192]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800cbce:	687b      	ldr	r3, [r7, #4]
 800cbd0:	695b      	ldr	r3, [r3, #20]
 800cbd2:	492d      	ldr	r1, [pc, #180]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbd4:	4313      	orrs	r3, r2
 800cbd6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800cbd8:	4b2b      	ldr	r3, [pc, #172]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbdc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	4928      	ldr	r1, [pc, #160]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbe6:	4313      	orrs	r3, r2
 800cbe8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800cbea:	4b27      	ldr	r3, [pc, #156]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbee:	4a26      	ldr	r2, [pc, #152]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cbf4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800cbf6:	4b24      	ldr	r3, [pc, #144]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cbf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cbfa:	4b24      	ldr	r3, [pc, #144]	; (800cc8c <RCCEx_PLL3_Config+0x160>)
 800cbfc:	4013      	ands	r3, r2
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	69d2      	ldr	r2, [r2, #28]
 800cc02:	00d2      	lsls	r2, r2, #3
 800cc04:	4920      	ldr	r1, [pc, #128]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc06:	4313      	orrs	r3, r2
 800cc08:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800cc0a:	4b1f      	ldr	r3, [pc, #124]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc0e:	4a1e      	ldr	r2, [pc, #120]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cc14:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d106      	bne.n	800cc2a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800cc1c:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc20:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800cc26:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc28:	e00f      	b.n	800cc4a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	2b01      	cmp	r3, #1
 800cc2e:	d106      	bne.n	800cc3e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800cc30:	4b15      	ldr	r3, [pc, #84]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	4a14      	ldr	r2, [pc, #80]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc36:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800cc3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800cc3c:	e005      	b.n	800cc4a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800cc3e:	4b12      	ldr	r3, [pc, #72]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc42:	4a11      	ldr	r2, [pc, #68]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cc48:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800cc4a:	4b0f      	ldr	r3, [pc, #60]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	4a0e      	ldr	r2, [pc, #56]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cc54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cc56:	f7f8 f8cf 	bl	8004df8 <HAL_GetTick>
 800cc5a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc5c:	e008      	b.n	800cc70 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800cc5e:	f7f8 f8cb 	bl	8004df8 <HAL_GetTick>
 800cc62:	4602      	mov	r2, r0
 800cc64:	68bb      	ldr	r3, [r7, #8]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	2b02      	cmp	r3, #2
 800cc6a:	d901      	bls.n	800cc70 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800cc6c:	2303      	movs	r3, #3
 800cc6e:	e006      	b.n	800cc7e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800cc70:	4b05      	ldr	r3, [pc, #20]	; (800cc88 <RCCEx_PLL3_Config+0x15c>)
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d0f0      	beq.n	800cc5e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800cc7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3710      	adds	r7, #16
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	58024400 	.word	0x58024400
 800cc8c:	ffff0007 	.word	0xffff0007

0800cc90 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cc98:	2301      	movs	r3, #1
 800cc9a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler */
  if(hrtc != NULL)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d067      	beq.n	800cd72 <HAL_RTC_Init+0xe2>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */
    if(hrtc->State == HAL_RTC_STATE_RESET)
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800cca8:	b2db      	uxtb	r3, r3
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d106      	bne.n	800ccbc <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	2200      	movs	r2, #0
 800ccb2:	f883 2020 	strb.w	r2, [r3, #32]

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800ccb6:	6878      	ldr	r0, [r7, #4]
 800ccb8:	f7f7 fce2 	bl	8004680 <HAL_RTC_MspInit>
    }
#endif /*  (USE_HAL_RTC_REGISTER_CALLBACKS == 1) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2202      	movs	r2, #2
 800ccc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	22ca      	movs	r2, #202	; 0xca
 800ccca:	625a      	str	r2, [r3, #36]	; 0x24
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	2253      	movs	r2, #83	; 0x53
 800ccd2:	625a      	str	r2, [r3, #36]	; 0x24

   /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f000 fa49 	bl	800d16c <RTC_EnterInitMode>
 800ccda:	4603      	mov	r3, r0
 800ccdc:	73fb      	strb	r3, [r7, #15]
    if (status == HAL_OK)
 800ccde:	7bfb      	ldrb	r3, [r7, #15]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d13b      	bne.n	800cd5c <HAL_RTC_Init+0xcc>
#if defined(RTC_CR_TAMPOE)
      /* Clear RTC_CR FMT, OSEL, POL and TAMPOE Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
#else  /* RTC_CR_TAMPOE */
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL);
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6899      	ldr	r1, [r3, #8]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	4b23      	ldr	r3, [pc, #140]	; (800cd7c <HAL_RTC_Init+0xec>)
 800ccf0:	400b      	ands	r3, r1
 800ccf2:	6093      	str	r3, [r2, #8]
#endif /* RTC_CR_TAMPOE */

      /* Set RTC_CR register */
      hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	6899      	ldr	r1, [r3, #8]
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	685a      	ldr	r2, [r3, #4]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	431a      	orrs	r2, r3
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	699b      	ldr	r3, [r3, #24]
 800cd08:	431a      	orrs	r2, r3
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	430a      	orrs	r2, r1
 800cd10:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos) | (hrtc->Init.SynchPrediv << RTC_PRER_PREDIV_S_Pos);
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	689b      	ldr	r3, [r3, #8]
 800cd16:	0419      	lsls	r1, r3, #16
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	68da      	ldr	r2, [r3, #12]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	430a      	orrs	r2, r1
 800cd22:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f000 fa51 	bl	800d1cc <RTC_ExitInitMode>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	73fb      	strb	r3, [r7, #15]

      if(status == HAL_OK)
 800cd2e:	7bfb      	ldrb	r3, [r7, #15]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	d113      	bne.n	800cd5c <HAL_RTC_Init+0xcc>
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
#endif /* RTC_CR_TAMPALRM_TYPE && RTC_CR_OUT2EN && RTC_CR_TAMPALRM_PU */

#if defined(RTC_OR_ALARMOUTTYPE) && defined(RTC_OR_OUT_RMP)
        hrtc->Instance->OR &= ~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f022 0203 	bic.w	r2, r2, #3
 800cd42:	64da      	str	r2, [r3, #76]	; 0x4c
        hrtc->Instance->OR |= (hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800cd44:	687b      	ldr	r3, [r7, #4]
 800cd46:	681b      	ldr	r3, [r3, #0]
 800cd48:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	69da      	ldr	r2, [r3, #28]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	695b      	ldr	r3, [r3, #20]
 800cd52:	431a      	orrs	r2, r3
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	430a      	orrs	r2, r1
 800cd5a:	64da      	str	r2, [r3, #76]	; 0x4c
#endif /* ALARMOUTTYPE && RTC_OR_OUT_RMP */
      }
    }
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	681b      	ldr	r3, [r3, #0]
 800cd60:	22ff      	movs	r2, #255	; 0xff
 800cd62:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800cd64:	7bfb      	ldrb	r3, [r7, #15]
 800cd66:	2b00      	cmp	r3, #0
 800cd68:	d103      	bne.n	800cd72 <HAL_RTC_Init+0xe2>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
  }

  /* return status */
  return status;
 800cd72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3710      	adds	r7, #16
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bd80      	pop	{r7, pc}
 800cd7c:	ff8fffbf 	.word	0xff8fffbf

0800cd80 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cd80:	b590      	push	{r4, r7, lr}
 800cd82:	b087      	sub	sp, #28
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	60f8      	str	r0, [r7, #12]
 800cd88:	60b9      	str	r1, [r7, #8]
 800cd8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cd8c:	68fb      	ldr	r3, [r7, #12]
 800cd8e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cd92:	2b01      	cmp	r3, #1
 800cd94:	d101      	bne.n	800cd9a <HAL_RTC_SetTime+0x1a>
 800cd96:	2302      	movs	r3, #2
 800cd98:	e089      	b.n	800ceae <HAL_RTC_SetTime+0x12e>
 800cd9a:	68fb      	ldr	r3, [r7, #12]
 800cd9c:	2201      	movs	r2, #1
 800cd9e:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cda2:	68fb      	ldr	r3, [r7, #12]
 800cda4:	2202      	movs	r2, #2
 800cda6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	22ca      	movs	r2, #202	; 0xca
 800cdb0:	625a      	str	r2, [r3, #36]	; 0x24
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2253      	movs	r2, #83	; 0x53
 800cdb8:	625a      	str	r2, [r3, #36]	; 0x24
 /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800cdba:	68f8      	ldr	r0, [r7, #12]
 800cdbc:	f000 f9d6 	bl	800d16c <RTC_EnterInitMode>
 800cdc0:	4603      	mov	r3, r0
 800cdc2:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800cdc4:	7cfb      	ldrb	r3, [r7, #19]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d161      	bne.n	800ce8e <HAL_RTC_SetTime+0x10e>
  {
    if(Format == RTC_FORMAT_BIN)
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d126      	bne.n	800ce1e <HAL_RTC_SetTime+0x9e>
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800cdd0:	68fb      	ldr	r3, [r7, #12]
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	689b      	ldr	r3, [r3, #8]
 800cdd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdda:	2b00      	cmp	r3, #0
 800cddc:	d102      	bne.n	800cde4 <HAL_RTC_SetTime+0x64>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800cdde:	68bb      	ldr	r3, [r7, #8]
 800cde0:	2200      	movs	r2, #0
 800cde2:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800cde4:	68bb      	ldr	r3, [r7, #8]
 800cde6:	781b      	ldrb	r3, [r3, #0]
 800cde8:	4618      	mov	r0, r3
 800cdea:	f000 fa2d 	bl	800d248 <RTC_ByteToBcd2>
 800cdee:	4603      	mov	r3, r0
 800cdf0:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800cdf2:	68bb      	ldr	r3, [r7, #8]
 800cdf4:	785b      	ldrb	r3, [r3, #1]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 fa26 	bl	800d248 <RTC_ByteToBcd2>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce00:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ce02:	68bb      	ldr	r3, [r7, #8]
 800ce04:	789b      	ldrb	r3, [r3, #2]
 800ce06:	4618      	mov	r0, r3
 800ce08:	f000 fa1e 	bl	800d248 <RTC_ByteToBcd2>
 800ce0c:	4603      	mov	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ce0e:	ea44 0203 	orr.w	r2, r4, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ce12:	68bb      	ldr	r3, [r7, #8]
 800ce14:	78db      	ldrb	r3, [r3, #3]
 800ce16:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	617b      	str	r3, [r7, #20]
 800ce1c:	e018      	b.n	800ce50 <HAL_RTC_SetTime+0xd0>
    }
    else
    {
      if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d102      	bne.n	800ce32 <HAL_RTC_SetTime+0xb2>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 800ce2c:	68bb      	ldr	r3, [r7, #8]
 800ce2e:	2200      	movs	r2, #0
 800ce30:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	781b      	ldrb	r3, [r3, #0]
 800ce36:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ce38:	68bb      	ldr	r3, [r7, #8]
 800ce3a:	785b      	ldrb	r3, [r3, #1]
 800ce3c:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce3e:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos)  | \
 800ce40:	68ba      	ldr	r2, [r7, #8]
 800ce42:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800ce44:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 800ce46:	68bb      	ldr	r3, [r7, #8]
 800ce48:	78db      	ldrb	r3, [r3, #3]
 800ce4a:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800ce4c:	4313      	orrs	r3, r2
 800ce4e:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	681a      	ldr	r2, [r3, #0]
 800ce54:	6979      	ldr	r1, [r7, #20]
 800ce56:	4b18      	ldr	r3, [pc, #96]	; (800ceb8 <HAL_RTC_SetTime+0x138>)
 800ce58:	400b      	ands	r3, r1
 800ce5a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	681b      	ldr	r3, [r3, #0]
 800ce60:	689a      	ldr	r2, [r3, #8]
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800ce6a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800ce6c:	68fb      	ldr	r3, [r7, #12]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	6899      	ldr	r1, [r3, #8]
 800ce72:	68bb      	ldr	r3, [r7, #8]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	68bb      	ldr	r3, [r7, #8]
 800ce78:	691b      	ldr	r3, [r3, #16]
 800ce7a:	431a      	orrs	r2, r3
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	430a      	orrs	r2, r1
 800ce82:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f000 f9a1 	bl	800d1cc <RTC_ExitInitMode>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800ce8e:	68fb      	ldr	r3, [r7, #12]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	22ff      	movs	r2, #255	; 0xff
 800ce94:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800ce96:	7cfb      	ldrb	r3, [r7, #19]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	d103      	bne.n	800cea4 <HAL_RTC_SetTime+0x124>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	2201      	movs	r2, #1
 800cea0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800cea4:	68fb      	ldr	r3, [r7, #12]
 800cea6:	2200      	movs	r2, #0
 800cea8:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800ceac:	7cfb      	ldrb	r3, [r7, #19]
}
 800ceae:	4618      	mov	r0, r3
 800ceb0:	371c      	adds	r7, #28
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd90      	pop	{r4, r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	007f7f7f 	.word	0x007f7f7f

0800cebc <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cece:	68bb      	ldr	r3, [r7, #8]
 800ced0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	691b      	ldr	r3, [r3, #16]
 800ced8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800cedc:	68bb      	ldr	r3, [r7, #8]
 800cede:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681a      	ldr	r2, [r3, #0]
 800cee6:	4b22      	ldr	r3, [pc, #136]	; (800cf70 <HAL_RTC_GetTime+0xb4>)
 800cee8:	4013      	ands	r3, r2
 800ceea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	0c1b      	lsrs	r3, r3, #16
 800cef0:	b2db      	uxtb	r3, r3
 800cef2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cef6:	b2da      	uxtb	r2, r3
 800cef8:	68bb      	ldr	r3, [r7, #8]
 800cefa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800cefc:	697b      	ldr	r3, [r7, #20]
 800cefe:	0a1b      	lsrs	r3, r3, #8
 800cf00:	b2db      	uxtb	r3, r3
 800cf02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf06:	b2da      	uxtb	r2, r3
 800cf08:	68bb      	ldr	r3, [r7, #8]
 800cf0a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)((tmpreg & (RTC_TR_ST  | RTC_TR_SU))  >> RTC_TR_SU_Pos);
 800cf0c:	697b      	ldr	r3, [r7, #20]
 800cf0e:	b2db      	uxtb	r3, r3
 800cf10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf14:	b2da      	uxtb	r2, r3
 800cf16:	68bb      	ldr	r3, [r7, #8]
 800cf18:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	0d9b      	lsrs	r3, r3, #22
 800cf1e:	b2db      	uxtb	r3, r3
 800cf20:	f003 0301 	and.w	r3, r3, #1
 800cf24:	b2da      	uxtb	r2, r3
 800cf26:	68bb      	ldr	r3, [r7, #8]
 800cf28:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d11a      	bne.n	800cf66 <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours   = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800cf30:	68bb      	ldr	r3, [r7, #8]
 800cf32:	781b      	ldrb	r3, [r3, #0]
 800cf34:	4618      	mov	r0, r3
 800cf36:	f000 f9a7 	bl	800d288 <RTC_Bcd2ToByte>
 800cf3a:	4603      	mov	r3, r0
 800cf3c:	461a      	mov	r2, r3
 800cf3e:	68bb      	ldr	r3, [r7, #8]
 800cf40:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	785b      	ldrb	r3, [r3, #1]
 800cf46:	4618      	mov	r0, r3
 800cf48:	f000 f99e 	bl	800d288 <RTC_Bcd2ToByte>
 800cf4c:	4603      	mov	r3, r0
 800cf4e:	461a      	mov	r2, r3
 800cf50:	68bb      	ldr	r3, [r7, #8]
 800cf52:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800cf54:	68bb      	ldr	r3, [r7, #8]
 800cf56:	789b      	ldrb	r3, [r3, #2]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f000 f995 	bl	800d288 <RTC_Bcd2ToByte>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	461a      	mov	r2, r3
 800cf62:	68bb      	ldr	r3, [r7, #8]
 800cf64:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800cf66:	2300      	movs	r3, #0
}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}
 800cf70:	007f7f7f 	.word	0x007f7f7f

0800cf74 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800cf74:	b590      	push	{r4, r7, lr}
 800cf76:	b087      	sub	sp, #28
 800cf78:	af00      	add	r7, sp, #0
 800cf7a:	60f8      	str	r0, [r7, #12]
 800cf7c:	60b9      	str	r1, [r7, #8]
 800cf7e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800cf80:	68fb      	ldr	r3, [r7, #12]
 800cf82:	f893 3020 	ldrb.w	r3, [r3, #32]
 800cf86:	2b01      	cmp	r3, #1
 800cf88:	d101      	bne.n	800cf8e <HAL_RTC_SetDate+0x1a>
 800cf8a:	2302      	movs	r3, #2
 800cf8c:	e073      	b.n	800d076 <HAL_RTC_SetDate+0x102>
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2201      	movs	r2, #1
 800cf92:	f883 2020 	strb.w	r2, [r3, #32]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2202      	movs	r2, #2
 800cf9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10e      	bne.n	800cfc2 <HAL_RTC_SetDate+0x4e>
 800cfa4:	68bb      	ldr	r3, [r7, #8]
 800cfa6:	785b      	ldrb	r3, [r3, #1]
 800cfa8:	f003 0310 	and.w	r3, r3, #16
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d008      	beq.n	800cfc2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	785b      	ldrb	r3, [r3, #1]
 800cfb4:	f023 0310 	bic.w	r3, r3, #16
 800cfb8:	b2db      	uxtb	r3, r3
 800cfba:	330a      	adds	r3, #10
 800cfbc:	b2da      	uxtb	r2, r3
 800cfbe:	68bb      	ldr	r3, [r7, #8]
 800cfc0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d11c      	bne.n	800d002 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cfc8:	68bb      	ldr	r3, [r7, #8]
 800cfca:	78db      	ldrb	r3, [r3, #3]
 800cfcc:	4618      	mov	r0, r3
 800cfce:	f000 f93b 	bl	800d248 <RTC_ByteToBcd2>
 800cfd2:	4603      	mov	r3, r0
 800cfd4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cfd6:	68bb      	ldr	r3, [r7, #8]
 800cfd8:	785b      	ldrb	r3, [r3, #1]
 800cfda:	4618      	mov	r0, r3
 800cfdc:	f000 f934 	bl	800d248 <RTC_ByteToBcd2>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cfe4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	789b      	ldrb	r3, [r3, #2]
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 f92c 	bl	800d248 <RTC_ByteToBcd2>
 800cff0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800cff2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	781b      	ldrb	r3, [r3, #0]
 800cffa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800cffc:	4313      	orrs	r3, r2
 800cffe:	617b      	str	r3, [r7, #20]
 800d000:	e00e      	b.n	800d020 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d002:	68bb      	ldr	r3, [r7, #8]
 800d004:	78db      	ldrb	r3, [r3, #3]
 800d006:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d008:	68bb      	ldr	r3, [r7, #8]
 800d00a:	785b      	ldrb	r3, [r3, #1]
 800d00c:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d00e:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date)    << RTC_DR_DU_Pos) | \
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800d014:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800d016:	68bb      	ldr	r3, [r7, #8]
 800d018:	781b      	ldrb	r3, [r3, #0]
 800d01a:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800d01c:	4313      	orrs	r3, r2
 800d01e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800d020:	68fb      	ldr	r3, [r7, #12]
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	22ca      	movs	r2, #202	; 0xca
 800d026:	625a      	str	r2, [r3, #36]	; 0x24
 800d028:	68fb      	ldr	r3, [r7, #12]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2253      	movs	r2, #83	; 0x53
 800d02e:	625a      	str	r2, [r3, #36]	; 0x24


  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800d030:	68f8      	ldr	r0, [r7, #12]
 800d032:	f000 f89b 	bl	800d16c <RTC_EnterInitMode>
 800d036:	4603      	mov	r3, r0
 800d038:	74fb      	strb	r3, [r7, #19]
  if (status == HAL_OK)
 800d03a:	7cfb      	ldrb	r3, [r7, #19]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d10a      	bne.n	800d056 <HAL_RTC_SetDate+0xe2>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	681a      	ldr	r2, [r3, #0]
 800d044:	6979      	ldr	r1, [r7, #20]
 800d046:	4b0e      	ldr	r3, [pc, #56]	; (800d080 <HAL_RTC_SetDate+0x10c>)
 800d048:	400b      	ands	r3, r1
 800d04a:	6053      	str	r3, [r2, #4]


    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800d04c:	68f8      	ldr	r0, [r7, #12]
 800d04e:	f000 f8bd 	bl	800d1cc <RTC_ExitInitMode>
 800d052:	4603      	mov	r3, r0
 800d054:	74fb      	strb	r3, [r7, #19]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	22ff      	movs	r2, #255	; 0xff
 800d05c:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800d05e:	7cfb      	ldrb	r3, [r7, #19]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d103      	bne.n	800d06c <HAL_RTC_SetDate+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800d064:	68fb      	ldr	r3, [r7, #12]
 800d066:	2201      	movs	r2, #1
 800d068:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	2200      	movs	r2, #0
 800d070:	f883 2020 	strb.w	r2, [r3, #32]

  return status;
 800d074:	7cfb      	ldrb	r3, [r7, #19]


}
 800d076:	4618      	mov	r0, r3
 800d078:	371c      	adds	r7, #28
 800d07a:	46bd      	mov	sp, r7
 800d07c:	bd90      	pop	{r4, r7, pc}
 800d07e:	bf00      	nop
 800d080:	00ffff3f 	.word	0x00ffff3f

0800d084 <HAL_RTC_GetDate>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b086      	sub	sp, #24
 800d088:	af00      	add	r7, sp, #0
 800d08a:	60f8      	str	r0, [r7, #12]
 800d08c:	60b9      	str	r1, [r7, #8]
 800d08e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	685a      	ldr	r2, [r3, #4]
 800d096:	4b21      	ldr	r3, [pc, #132]	; (800d11c <HAL_RTC_GetDate+0x98>)
 800d098:	4013      	ands	r3, r2
 800d09a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	0c1b      	lsrs	r3, r3, #16
 800d0a0:	b2da      	uxtb	r2, r3
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800d0a6:	697b      	ldr	r3, [r7, #20]
 800d0a8:	0a1b      	lsrs	r3, r3, #8
 800d0aa:	b2db      	uxtb	r3, r3
 800d0ac:	f003 031f 	and.w	r3, r3, #31
 800d0b0:	b2da      	uxtb	r2, r3
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 800d0b6:	697b      	ldr	r3, [r7, #20]
 800d0b8:	b2db      	uxtb	r3, r3
 800d0ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d0be:	b2da      	uxtb	r2, r3
 800d0c0:	68bb      	ldr	r3, [r7, #8]
 800d0c2:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800d0c4:	697b      	ldr	r3, [r7, #20]
 800d0c6:	0b5b      	lsrs	r3, r3, #13
 800d0c8:	b2db      	uxtb	r3, r3
 800d0ca:	f003 0307 	and.w	r3, r3, #7
 800d0ce:	b2da      	uxtb	r2, r3
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d11a      	bne.n	800d110 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	78db      	ldrb	r3, [r3, #3]
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f000 f8d2 	bl	800d288 <RTC_Bcd2ToByte>
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800d0ec:	68bb      	ldr	r3, [r7, #8]
 800d0ee:	785b      	ldrb	r3, [r3, #1]
 800d0f0:	4618      	mov	r0, r3
 800d0f2:	f000 f8c9 	bl	800d288 <RTC_Bcd2ToByte>
 800d0f6:	4603      	mov	r3, r0
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	68bb      	ldr	r3, [r7, #8]
 800d0fc:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	789b      	ldrb	r3, [r3, #2]
 800d102:	4618      	mov	r0, r3
 800d104:	f000 f8c0 	bl	800d288 <RTC_Bcd2ToByte>
 800d108:	4603      	mov	r3, r0
 800d10a:	461a      	mov	r2, r3
 800d10c:	68bb      	ldr	r3, [r7, #8]
 800d10e:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800d110:	2300      	movs	r3, #0
}
 800d112:	4618      	mov	r0, r3
 800d114:	3718      	adds	r7, #24
 800d116:	46bd      	mov	sp, r7
 800d118:	bd80      	pop	{r7, pc}
 800d11a:	bf00      	nop
 800d11c:	00ffff3f 	.word	0x00ffff3f

0800d120 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800d120:	b580      	push	{r7, lr}
 800d122:	b084      	sub	sp, #16
 800d124:	af00      	add	r7, sp, #0
 800d126:	6078      	str	r0, [r7, #4]
  /* Clear RSF flag */
#if defined(RTC_ICSR_RSF)
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	68da      	ldr	r2, [r3, #12]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800d136:	60da      	str	r2, [r3, #12]
#endif /* RTC_ISR_RSF */

  tickstart = HAL_GetTick();
 800d138:	f7f7 fe5e 	bl	8004df8 <HAL_GetTick>
 800d13c:	60f8      	str	r0, [r7, #12]
  /* Wait the registers to be synchronised */
#if defined(RTC_ICSR_RSF)
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
#endif /* RTC_ICSR_RSF */
#if defined(RTC_ISR_RSF)
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d13e:	e009      	b.n	800d154 <HAL_RTC_WaitForSynchro+0x34>
#endif /* RTC_ISR_RSF */
    {
      if((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800d140:	f7f7 fe5a 	bl	8004df8 <HAL_GetTick>
 800d144:	4602      	mov	r2, r0
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	1ad3      	subs	r3, r2, r3
 800d14a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d14e:	d901      	bls.n	800d154 <HAL_RTC_WaitForSynchro+0x34>
      {
        return HAL_TIMEOUT;
 800d150:	2303      	movs	r3, #3
 800d152:	e007      	b.n	800d164 <HAL_RTC_WaitForSynchro+0x44>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	681b      	ldr	r3, [r3, #0]
 800d158:	68db      	ldr	r3, [r3, #12]
 800d15a:	f003 0320 	and.w	r3, r3, #32
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d0ee      	beq.n	800d140 <HAL_RTC_WaitForSynchro+0x20>
      }
    }

  return HAL_OK;
 800d162:	2300      	movs	r3, #0
}
 800d164:	4618      	mov	r0, r3
 800d166:	3710      	adds	r7, #16
 800d168:	46bd      	mov	sp, r7
 800d16a:	bd80      	pop	{r7, pc}

0800d16c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d174:	2300      	movs	r3, #0
 800d176:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#endif /* RTC_ICSR_INITF */
#if defined(RTC_ISR_INITF)
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	68db      	ldr	r3, [r3, #12]
 800d17e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d182:	2b00      	cmp	r3, #0
 800d184:	d11d      	bne.n	800d1c2 <RTC_EnterInitMode+0x56>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	f04f 32ff 	mov.w	r2, #4294967295
 800d18e:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 800d190:	f7f7 fe32 	bl	8004df8 <HAL_GetTick>
 800d194:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d196:	e00d      	b.n	800d1b4 <RTC_EnterInitMode+0x48>
    {
      if((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800d198:	f7f7 fe2e 	bl	8004df8 <HAL_GetTick>
 800d19c:	4602      	mov	r2, r0
 800d19e:	68bb      	ldr	r3, [r7, #8]
 800d1a0:	1ad3      	subs	r3, r2, r3
 800d1a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d1a6:	d905      	bls.n	800d1b4 <RTC_EnterInitMode+0x48>
      {
        status = HAL_TIMEOUT;
 800d1a8:	2303      	movs	r3, #3
 800d1aa:	73fb      	strb	r3, [r7, #15]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2203      	movs	r2, #3
 800d1b0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	68db      	ldr	r3, [r3, #12]
 800d1ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d0ea      	beq.n	800d198 <RTC_EnterInitMode+0x2c>
      }
    }
  }
#endif /* RTC_ISR_INITF */

  return status;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3710      	adds	r7, #16
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd80      	pop	{r7, pc}

0800d1cc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b084      	sub	sp, #16
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d1d4:	2300      	movs	r3, #0
 800d1d6:	73fb      	strb	r3, [r7, #15]
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);

#elif defined(RTC_ISR_INITF)

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ISR, RTC_ISR_INITF);
 800d1d8:	4b1a      	ldr	r3, [pc, #104]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d1da:	68db      	ldr	r3, [r3, #12]
 800d1dc:	4a19      	ldr	r2, [pc, #100]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d1de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d1e2:	60d3      	str	r3, [r2, #12]

#endif /* RTC_ISR_INITF */
  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800d1e4:	4b17      	ldr	r3, [pc, #92]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d1e6:	689b      	ldr	r3, [r3, #8]
 800d1e8:	f003 0320 	and.w	r3, r3, #32
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10c      	bne.n	800d20a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d1f0:	6878      	ldr	r0, [r7, #4]
 800d1f2:	f7ff ff95 	bl	800d120 <HAL_RTC_WaitForSynchro>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d01e      	beq.n	800d23a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	2203      	movs	r2, #3
 800d200:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d204:	2303      	movs	r3, #3
 800d206:	73fb      	strb	r3, [r7, #15]
 800d208:	e017      	b.n	800d23a <RTC_ExitInitMode+0x6e>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d20a:	4b0e      	ldr	r3, [pc, #56]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d20c:	689b      	ldr	r3, [r3, #8]
 800d20e:	4a0d      	ldr	r2, [pc, #52]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d210:	f023 0320 	bic.w	r3, r3, #32
 800d214:	6093      	str	r3, [r2, #8]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800d216:	6878      	ldr	r0, [r7, #4]
 800d218:	f7ff ff82 	bl	800d120 <HAL_RTC_WaitForSynchro>
 800d21c:	4603      	mov	r3, r0
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d005      	beq.n	800d22e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	2203      	movs	r2, #3
 800d226:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
      status = HAL_TIMEOUT;
 800d22a:	2303      	movs	r3, #3
 800d22c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800d22e:	4b05      	ldr	r3, [pc, #20]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d230:	689b      	ldr	r3, [r3, #8]
 800d232:	4a04      	ldr	r2, [pc, #16]	; (800d244 <RTC_ExitInitMode+0x78>)
 800d234:	f043 0320 	orr.w	r3, r3, #32
 800d238:	6093      	str	r3, [r2, #8]
  }

  return status;
 800d23a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d23c:	4618      	mov	r0, r3
 800d23e:	3710      	adds	r7, #16
 800d240:	46bd      	mov	sp, r7
 800d242:	bd80      	pop	{r7, pc}
 800d244:	58004000 	.word	0x58004000

0800d248 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800d248:	b480      	push	{r7}
 800d24a:	b085      	sub	sp, #20
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	4603      	mov	r3, r0
 800d250:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800d252:	2300      	movs	r3, #0
 800d254:	60fb      	str	r3, [r7, #12]
  uint8_t  bcdlow  = Value;
 800d256:	79fb      	ldrb	r3, [r7, #7]
 800d258:	72fb      	strb	r3, [r7, #11]

  while (bcdlow >= 10U)
 800d25a:	e005      	b.n	800d268 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	3301      	adds	r3, #1
 800d260:	60fb      	str	r3, [r7, #12]
    bcdlow -= 10U;
 800d262:	7afb      	ldrb	r3, [r7, #11]
 800d264:	3b0a      	subs	r3, #10
 800d266:	72fb      	strb	r3, [r7, #11]
  while (bcdlow >= 10U)
 800d268:	7afb      	ldrb	r3, [r7, #11]
 800d26a:	2b09      	cmp	r3, #9
 800d26c:	d8f6      	bhi.n	800d25c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | bcdlow);
 800d26e:	68fb      	ldr	r3, [r7, #12]
 800d270:	b2db      	uxtb	r3, r3
 800d272:	011b      	lsls	r3, r3, #4
 800d274:	b2da      	uxtb	r2, r3
 800d276:	7afb      	ldrb	r3, [r7, #11]
 800d278:	4313      	orrs	r3, r2
 800d27a:	b2db      	uxtb	r3, r3
}
 800d27c:	4618      	mov	r0, r3
 800d27e:	3714      	adds	r7, #20
 800d280:	46bd      	mov	sp, r7
 800d282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d286:	4770      	bx	lr

0800d288 <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800d288:	b480      	push	{r7}
 800d28a:	b085      	sub	sp, #20
 800d28c:	af00      	add	r7, sp, #0
 800d28e:	4603      	mov	r3, r0
 800d290:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp;
  tmp = ((Value & 0xF0U) >> 4U) * 10U;
 800d292:	79fb      	ldrb	r3, [r7, #7]
 800d294:	091b      	lsrs	r3, r3, #4
 800d296:	b2db      	uxtb	r3, r3
 800d298:	461a      	mov	r2, r3
 800d29a:	0092      	lsls	r2, r2, #2
 800d29c:	4413      	add	r3, r2
 800d29e:	005b      	lsls	r3, r3, #1
 800d2a0:	73fb      	strb	r3, [r7, #15]
  return (tmp + (Value & 0x0FU));
 800d2a2:	79fb      	ldrb	r3, [r7, #7]
 800d2a4:	f003 030f 	and.w	r3, r3, #15
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	7bfb      	ldrb	r3, [r7, #15]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	b2db      	uxtb	r3, r3
}
 800d2b0:	4618      	mov	r0, r3
 800d2b2:	3714      	adds	r7, #20
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ba:	4770      	bx	lr

0800d2bc <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 800d2bc:	b580      	push	{r7, lr}
 800d2be:	b08a      	sub	sp, #40	; 0x28
 800d2c0:	af00      	add	r7, sp, #0
 800d2c2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardStatusTypeDef CardStatus;
  uint32_t speedgrade, unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if(hsd == NULL)
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	d101      	bne.n	800d2ce <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	e07c      	b.n	800d3c8 <HAL_SD_Init+0x10c>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d2d4:	b2db      	uxtb	r3, r3
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d10c      	bne.n	800d2f4 <HAL_SD_Init+0x38>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	2200      	movs	r2, #0
 800d2de:	771a      	strb	r2, [r3, #28]

#if (USE_SD_TRANSCEIVER != 0U)
    /* Force  SDMMC_TRANSCEIVER_PRESENT for Legacy usage */
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_UNKNOWN)
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	699b      	ldr	r3, [r3, #24]
 800d2e4:	2b00      	cmp	r3, #0
 800d2e6:	d102      	bne.n	800d2ee <HAL_SD_Init+0x32>
    {
      hsd->Init.TranceiverPresent = SDMMC_TRANSCEIVER_PRESENT;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2202      	movs	r2, #2
 800d2ec:	619a      	str	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800d2ee:	6878      	ldr	r0, [r7, #4]
 800d2f0:	f7f7 f9e0 	bl	80046b4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	2203      	movs	r2, #3
 800d2f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800d2fc:	6878      	ldr	r0, [r7, #4]
 800d2fe:	f000 f867 	bl	800d3d0 <HAL_SD_InitCard>
 800d302:	4603      	mov	r3, r0
 800d304:	2b00      	cmp	r3, #0
 800d306:	d001      	beq.n	800d30c <HAL_SD_Init+0x50>
  {
    return HAL_ERROR;
 800d308:	2301      	movs	r3, #1
 800d30a:	e05d      	b.n	800d3c8 <HAL_SD_Init+0x10c>
  }

  if( HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 800d30c:	f107 0308 	add.w	r3, r7, #8
 800d310:	4619      	mov	r1, r3
 800d312:	6878      	ldr	r0, [r7, #4]
 800d314:	f001 f8ce 	bl	800e4b4 <HAL_SD_GetCardStatus>
 800d318:	4603      	mov	r3, r0
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d001      	beq.n	800d322 <HAL_SD_Init+0x66>
  {
    return HAL_ERROR;
 800d31e:	2301      	movs	r3, #1
 800d320:	e052      	b.n	800d3c8 <HAL_SD_Init+0x10c>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 800d322:	7e3b      	ldrb	r3, [r7, #24]
 800d324:	b2db      	uxtb	r3, r3
 800d326:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 800d328:	7e7b      	ldrb	r3, [r7, #25]
 800d32a:	b2db      	uxtb	r3, r3
 800d32c:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d332:	2b01      	cmp	r3, #1
 800d334:	d10a      	bne.n	800d34c <HAL_SD_Init+0x90>
 800d336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d102      	bne.n	800d342 <HAL_SD_Init+0x86>
 800d33c:	6a3b      	ldr	r3, [r7, #32]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d004      	beq.n	800d34c <HAL_SD_Init+0x90>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d348:	65da      	str	r2, [r3, #92]	; 0x5c
 800d34a:	e00b      	b.n	800d364 <HAL_SD_Init+0xa8>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d350:	2b01      	cmp	r3, #1
 800d352:	d104      	bne.n	800d35e <HAL_SD_Init+0xa2>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d35a:	65da      	str	r2, [r3, #92]	; 0x5c
 800d35c:	e002      	b.n	800d364 <HAL_SD_Init+0xa8>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2200      	movs	r2, #0
 800d362:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }
  /* Configure the bus wide */
  if(HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	68db      	ldr	r3, [r3, #12]
 800d368:	4619      	mov	r1, r3
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f001 f984 	bl	800e678 <HAL_SD_ConfigWideBusOperation>
 800d370:	4603      	mov	r3, r0
 800d372:	2b00      	cmp	r3, #0
 800d374:	d001      	beq.n	800d37a <HAL_SD_Init+0xbe>
  {
    return HAL_ERROR;
 800d376:	2301      	movs	r3, #1
 800d378:	e026      	b.n	800d3c8 <HAL_SD_Init+0x10c>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 800d37a:	f7f7 fd3d 	bl	8004df8 <HAL_GetTick>
 800d37e:	61f8      	str	r0, [r7, #28]
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d380:	e011      	b.n	800d3a6 <HAL_SD_Init+0xea>
  {
    if((HAL_GetTick()-tickstart) >=  SDMMC_DATATIMEOUT)
 800d382:	f7f7 fd39 	bl	8004df8 <HAL_GetTick>
 800d386:	4602      	mov	r2, r0
 800d388:	69fb      	ldr	r3, [r7, #28]
 800d38a:	1ad3      	subs	r3, r2, r3
 800d38c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d390:	d109      	bne.n	800d3a6 <HAL_SD_Init+0xea>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d398:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State= HAL_SD_STATE_READY;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	2201      	movs	r2, #1
 800d39e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_TIMEOUT;
 800d3a2:	2303      	movs	r3, #3
 800d3a4:	e010      	b.n	800d3c8 <HAL_SD_Init+0x10c>
  while((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 800d3a6:	6878      	ldr	r0, [r7, #4]
 800d3a8:	f001 fa10 	bl	800e7cc <HAL_SD_GetCardState>
 800d3ac:	4603      	mov	r3, r0
 800d3ae:	2b04      	cmp	r3, #4
 800d3b0:	d1e7      	bne.n	800d382 <HAL_SD_Init+0xc6>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	2201      	movs	r2, #1
 800d3c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800d3c6:	2300      	movs	r3, #0
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3728      	adds	r7, #40	; 0x28
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}

0800d3d0 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 800d3d0:	b5b0      	push	{r4, r5, r7, lr}
 800d3d2:	b08e      	sub	sp, #56	; 0x38
 800d3d4:	af04      	add	r7, sp, #16
 800d3d6:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	60bb      	str	r3, [r7, #8]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	613b      	str	r3, [r7, #16]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	617b      	str	r3, [r7, #20]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 800d3e8:	f44f 3080 	mov.w	r0, #65536	; 0x10000
 800d3ec:	f7fe fc7a 	bl	800bce4 <HAL_RCCEx_GetPeriphCLKFreq>
 800d3f0:	6278      	str	r0, [r7, #36]	; 0x24
  Init.ClockDiv = sdmmc_clk/(2U*400000U);
 800d3f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d3f4:	0a1b      	lsrs	r3, r3, #8
 800d3f6:	4a40      	ldr	r2, [pc, #256]	; (800d4f8 <HAL_SD_InitCard+0x128>)
 800d3f8:	fba2 2303 	umull	r2, r3, r2, r3
 800d3fc:	091b      	lsrs	r3, r3, #4
 800d3fe:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
  if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	699b      	ldr	r3, [r3, #24]
 800d404:	2b02      	cmp	r3, #2
 800d406:	d107      	bne.n	800d418 <HAL_SD_InitCard+0x48>
  {
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	681a      	ldr	r2, [r3, #0]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f042 0210 	orr.w	r2, r2, #16
 800d416:	601a      	str	r2, [r3, #0]
    /* Set Transceiver polarity */
    hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	681d      	ldr	r5, [r3, #0]
 800d41c:	466c      	mov	r4, sp
 800d41e:	f107 0314 	add.w	r3, r7, #20
 800d422:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800d426:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d42a:	f107 0308 	add.w	r3, r7, #8
 800d42e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800d430:	4628      	mov	r0, r5
 800d432:	f004 f9eb 	bl	801180c <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	4618      	mov	r0, r3
 800d43c:	f004 fa2e 	bl	801189c <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk/(2U*Init.ClockDiv);
 800d440:	69bb      	ldr	r3, [r7, #24]
 800d442:	005b      	lsls	r3, r3, #1
 800d444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d446:	fbb2 f3f3 	udiv	r3, r2, r3
 800d44a:	627b      	str	r3, [r7, #36]	; 0x24

  if(sdmmc_clk != 0U)
 800d44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d008      	beq.n	800d464 <HAL_SD_InitCard+0x94>
  {
    HAL_Delay(1U+ (74U*1000U/(sdmmc_clk)));
 800d452:	4a2a      	ldr	r2, [pc, #168]	; (800d4fc <HAL_SD_InitCard+0x12c>)
 800d454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d456:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45a:	3301      	adds	r3, #1
 800d45c:	4618      	mov	r0, r3
 800d45e:	f7f7 fcd7 	bl	8004e10 <HAL_Delay>
 800d462:	e002      	b.n	800d46a <HAL_SD_InitCard+0x9a>
  }
  else
  {
    HAL_Delay(2U);
 800d464:	2002      	movs	r0, #2
 800d466:	f7f7 fcd3 	bl	8004e10 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 fa8c 	bl	800e988 <SD_PowerON>
 800d470:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d472:	6a3b      	ldr	r3, [r7, #32]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d00b      	beq.n	800d490 <HAL_SD_InitCard+0xc0>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2201      	movs	r2, #1
 800d47c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d484:	6a3b      	ldr	r3, [r7, #32]
 800d486:	431a      	orrs	r2, r3
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d48c:	2301      	movs	r3, #1
 800d48e:	e02e      	b.n	800d4ee <HAL_SD_InitCard+0x11e>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f001 f9bb 	bl	800e80c <SD_InitCard>
 800d496:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	d00b      	beq.n	800d4b6 <HAL_SD_InitCard+0xe6>
  {
    hsd->State = HAL_SD_STATE_READY;
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2201      	movs	r2, #1
 800d4a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4aa:	6a3b      	ldr	r3, [r7, #32]
 800d4ac:	431a      	orrs	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d4b2:	2301      	movs	r3, #1
 800d4b4:	e01b      	b.n	800d4ee <HAL_SD_InitCard+0x11e>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 800d4be:	4618      	mov	r0, r3
 800d4c0:	f004 fa82 	bl	80119c8 <SDMMC_CmdBlockLength>
 800d4c4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800d4c6:	6a3b      	ldr	r3, [r7, #32]
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d00f      	beq.n	800d4ec <HAL_SD_InitCard+0x11c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d4cc:	687b      	ldr	r3, [r7, #4]
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a0b      	ldr	r2, [pc, #44]	; (800d500 <HAL_SD_InitCard+0x130>)
 800d4d2:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d4d8:	6a3b      	ldr	r3, [r7, #32]
 800d4da:	431a      	orrs	r2, r3
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	2201      	movs	r2, #1
 800d4e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	e000      	b.n	800d4ee <HAL_SD_InitCard+0x11e>
  }

  return HAL_OK;
 800d4ec:	2300      	movs	r3, #0
}
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	3728      	adds	r7, #40	; 0x28
 800d4f2:	46bd      	mov	sp, r7
 800d4f4:	bdb0      	pop	{r4, r5, r7, pc}
 800d4f6:	bf00      	nop
 800d4f8:	014f8b59 	.word	0x014f8b59
 800d4fc:	00012110 	.word	0x00012110
 800d500:	1fe00fff 	.word	0x1fe00fff

0800d504 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d504:	b580      	push	{r7, lr}
 800d506:	b092      	sub	sp, #72	; 0x48
 800d508:	af00      	add	r7, sp, #0
 800d50a:	60f8      	str	r0, [r7, #12]
 800d50c:	60b9      	str	r1, [r7, #8]
 800d50e:	607a      	str	r2, [r7, #4]
 800d510:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d512:	f7f7 fc71 	bl	8004df8 <HAL_GetTick>
 800d516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	2b00      	cmp	r3, #0
 800d524:	d107      	bne.n	800d536 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d52a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d532:	2301      	movs	r3, #1
 800d534:	e167      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	2b01      	cmp	r3, #1
 800d540:	f040 815a 	bne.w	800d7f8 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	2200      	movs	r2, #0
 800d548:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d54a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d54c:	683b      	ldr	r3, [r7, #0]
 800d54e:	441a      	add	r2, r3
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d554:	429a      	cmp	r2, r3
 800d556:	d907      	bls.n	800d568 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d55c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d564:	2301      	movs	r3, #1
 800d566:	e14e      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d568:	68fb      	ldr	r3, [r7, #12]
 800d56a:	2203      	movs	r2, #3
 800d56c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	2200      	movs	r2, #0
 800d576:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d57c:	2b01      	cmp	r3, #1
 800d57e:	d002      	beq.n	800d586 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 800d580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d582:	025b      	lsls	r3, r3, #9
 800d584:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d586:	f04f 33ff 	mov.w	r3, #4294967295
 800d58a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	025b      	lsls	r3, r3, #9
 800d590:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d592:	2390      	movs	r3, #144	; 0x90
 800d594:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800d596:	2302      	movs	r3, #2
 800d598:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d59a:	2300      	movs	r3, #0
 800d59c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d59e:	2300      	movs	r3, #0
 800d5a0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	681b      	ldr	r3, [r3, #0]
 800d5a6:	f107 0214 	add.w	r2, r7, #20
 800d5aa:	4611      	mov	r1, r2
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	f004 f9df 	bl	8011970 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	681b      	ldr	r3, [r3, #0]
 800d5b6:	68da      	ldr	r2, [r3, #12]
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d5c0:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	2b01      	cmp	r3, #1
 800d5c6:	d90a      	bls.n	800d5de <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	2202      	movs	r2, #2
 800d5cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5d4:	4618      	mov	r0, r3
 800d5d6:	f004 fa3d 	bl	8011a54 <SDMMC_CmdReadMultiBlock>
 800d5da:	6478      	str	r0, [r7, #68]	; 0x44
 800d5dc:	e009      	b.n	800d5f2 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	f004 fa0f 	bl	8011a0e <SDMMC_CmdReadSingleBlock>
 800d5f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d012      	beq.n	800d61e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d5f8:	68fb      	ldr	r3, [r7, #12]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	4a84      	ldr	r2, [pc, #528]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d5fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d604:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d606:	431a      	orrs	r2, r3
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	2201      	movs	r2, #1
 800d610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d614:	68fb      	ldr	r3, [r7, #12]
 800d616:	2200      	movs	r2, #0
 800d618:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d61a:	2301      	movs	r3, #1
 800d61c:	e0f3      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800d61e:	69bb      	ldr	r3, [r7, #24]
 800d620:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d622:	e058      	b.n	800d6d6 <HAL_SD_ReadBlocks+0x1d2>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= 32U))
 800d624:	68fb      	ldr	r3, [r7, #12]
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d62a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d033      	beq.n	800d69a <HAL_SD_ReadBlocks+0x196>
 800d632:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d634:	2b1f      	cmp	r3, #31
 800d636:	d930      	bls.n	800d69a <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800d638:	2300      	movs	r3, #0
 800d63a:	643b      	str	r3, [r7, #64]	; 0x40
 800d63c:	e027      	b.n	800d68e <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800d63e:	68fb      	ldr	r3, [r7, #12]
 800d640:	681b      	ldr	r3, [r3, #0]
 800d642:	4618      	mov	r0, r3
 800d644:	f004 f90c 	bl	8011860 <SDMMC_ReadFIFO>
 800d648:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800d64a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d64c:	b2da      	uxtb	r2, r3
 800d64e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d650:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d654:	3301      	adds	r3, #1
 800d656:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800d658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d65a:	0a1b      	lsrs	r3, r3, #8
 800d65c:	b2da      	uxtb	r2, r3
 800d65e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d660:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d664:	3301      	adds	r3, #1
 800d666:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800d668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d66a:	0c1b      	lsrs	r3, r3, #16
 800d66c:	b2da      	uxtb	r2, r3
 800d66e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d670:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d674:	3301      	adds	r3, #1
 800d676:	637b      	str	r3, [r7, #52]	; 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	0e1b      	lsrs	r3, r3, #24
 800d67c:	b2da      	uxtb	r2, r3
 800d67e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d680:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800d682:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d684:	3301      	adds	r3, #1
 800d686:	637b      	str	r3, [r7, #52]	; 0x34
        for(count = 0U; count < 8U; count++)
 800d688:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d68a:	3301      	adds	r3, #1
 800d68c:	643b      	str	r3, [r7, #64]	; 0x40
 800d68e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d690:	2b07      	cmp	r3, #7
 800d692:	d9d4      	bls.n	800d63e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d696:	3b20      	subs	r3, #32
 800d698:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d69a:	f7f7 fbad 	bl	8004df8 <HAL_GetTick>
 800d69e:	4602      	mov	r2, r0
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	1ad3      	subs	r3, r2, r3
 800d6a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	d902      	bls.n	800d6b0 <HAL_SD_ReadBlocks+0x1ac>
 800d6aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d112      	bne.n	800d6d6 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4a56      	ldr	r2, [pc, #344]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d6b6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d6bc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2201      	movs	r2, #1
 800d6c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d6d2:	2303      	movs	r3, #3
 800d6d4:	e097      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	681b      	ldr	r3, [r3, #0]
 800d6da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6dc:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d09f      	beq.n	800d624 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	68da      	ldr	r2, [r3, #12]
 800d6ea:	68fb      	ldr	r3, [r7, #12]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d6f2:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	681b      	ldr	r3, [r3, #0]
 800d6f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d6fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d022      	beq.n	800d748 <HAL_SD_ReadBlocks+0x244>
 800d702:	683b      	ldr	r3, [r7, #0]
 800d704:	2b01      	cmp	r3, #1
 800d706:	d91f      	bls.n	800d748 <HAL_SD_ReadBlocks+0x244>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800d708:	68fb      	ldr	r3, [r7, #12]
 800d70a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d70c:	2b03      	cmp	r3, #3
 800d70e:	d01b      	beq.n	800d748 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	4618      	mov	r0, r3
 800d716:	f004 fa07 	bl	8011b28 <SDMMC_CmdStopTransfer>
 800d71a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800d71c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d71e:	2b00      	cmp	r3, #0
 800d720:	d012      	beq.n	800d748 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d722:	68fb      	ldr	r3, [r7, #12]
 800d724:	681b      	ldr	r3, [r3, #0]
 800d726:	4a3a      	ldr	r2, [pc, #232]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d728:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d72e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d730:	431a      	orrs	r2, r3
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	2201      	movs	r2, #1
 800d73a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800d73e:	68fb      	ldr	r3, [r7, #12]
 800d740:	2200      	movs	r2, #0
 800d742:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800d744:	2301      	movs	r3, #1
 800d746:	e05e      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d74e:	f003 0308 	and.w	r3, r3, #8
 800d752:	2b00      	cmp	r3, #0
 800d754:	d012      	beq.n	800d77c <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d756:	68fb      	ldr	r3, [r7, #12]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	4a2d      	ldr	r2, [pc, #180]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d75c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800d75e:	68fb      	ldr	r3, [r7, #12]
 800d760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d762:	f043 0208 	orr.w	r2, r3, #8
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	2201      	movs	r2, #1
 800d76e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d778:	2301      	movs	r3, #1
 800d77a:	e044      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800d77c:	68fb      	ldr	r3, [r7, #12]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d782:	f003 0302 	and.w	r3, r3, #2
 800d786:	2b00      	cmp	r3, #0
 800d788:	d012      	beq.n	800d7b0 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	4a20      	ldr	r2, [pc, #128]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d790:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d796:	f043 0202 	orr.w	r2, r3, #2
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	2201      	movs	r2, #1
 800d7a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	2200      	movs	r2, #0
 800d7aa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d7ac:	2301      	movs	r3, #1
 800d7ae:	e02a      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d7b6:	f003 0320 	and.w	r3, r3, #32
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d012      	beq.n	800d7e4 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	4a13      	ldr	r2, [pc, #76]	; (800d810 <HAL_SD_ReadBlocks+0x30c>)
 800d7c4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ca:	f043 0220 	orr.w	r2, r3, #32
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	2201      	movs	r2, #1
 800d7d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	2200      	movs	r2, #0
 800d7de:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e010      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	4a0a      	ldr	r2, [pc, #40]	; (800d814 <HAL_SD_ReadBlocks+0x310>)
 800d7ea:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	2201      	movs	r2, #1
 800d7f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	e006      	b.n	800d806 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7fc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d804:	2301      	movs	r3, #1
  }
}
 800d806:	4618      	mov	r0, r3
 800d808:	3748      	adds	r7, #72	; 0x48
 800d80a:	46bd      	mov	sp, r7
 800d80c:	bd80      	pop	{r7, pc}
 800d80e:	bf00      	nop
 800d810:	1fe00fff 	.word	0x1fe00fff
 800d814:	18000f3a 	.word	0x18000f3a

0800d818 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b092      	sub	sp, #72	; 0x48
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	60f8      	str	r0, [r7, #12]
 800d820:	60b9      	str	r1, [r7, #8]
 800d822:	607a      	str	r2, [r7, #4]
 800d824:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800d826:	f7f7 fae7 	bl	8004df8 <HAL_GetTick>
 800d82a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	2b00      	cmp	r3, #0
 800d838:	d107      	bne.n	800d84a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d83e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800d842:	68fb      	ldr	r3, [r7, #12]
 800d844:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800d846:	2301      	movs	r3, #1
 800d848:	e16b      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800d850:	b2db      	uxtb	r3, r3
 800d852:	2b01      	cmp	r3, #1
 800d854:	f040 815e 	bne.w	800db14 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800d858:	68fb      	ldr	r3, [r7, #12]
 800d85a:	2200      	movs	r2, #0
 800d85c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800d85e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d860:	683b      	ldr	r3, [r7, #0]
 800d862:	441a      	add	r2, r3
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d868:	429a      	cmp	r2, r3
 800d86a:	d907      	bls.n	800d87c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d870:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800d878:	2301      	movs	r3, #1
 800d87a:	e152      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	2203      	movs	r2, #3
 800d880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	2200      	movs	r2, #0
 800d88a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800d88c:	68fb      	ldr	r3, [r7, #12]
 800d88e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d890:	2b01      	cmp	r3, #1
 800d892:	d002      	beq.n	800d89a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800d894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d896:	025b      	lsls	r3, r3, #9
 800d898:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800d89a:	f04f 33ff 	mov.w	r3, #4294967295
 800d89e:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	025b      	lsls	r3, r3, #9
 800d8a4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800d8a6:	2390      	movs	r3, #144	; 0x90
 800d8a8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800d8ae:	2300      	movs	r3, #0
 800d8b0:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800d8b2:	2300      	movs	r3, #0
 800d8b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	f107 0218 	add.w	r2, r7, #24
 800d8be:	4611      	mov	r1, r2
 800d8c0:	4618      	mov	r0, r3
 800d8c2:	f004 f855 	bl	8011970 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	68da      	ldr	r2, [r3, #12]
 800d8cc:	68fb      	ldr	r3, [r7, #12]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8d4:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800d8d6:	683b      	ldr	r3, [r7, #0]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d90a      	bls.n	800d8f2 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2220      	movs	r2, #32
 800d8e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	f004 f8f9 	bl	8011ae0 <SDMMC_CmdWriteMultiBlock>
 800d8ee:	6478      	str	r0, [r7, #68]	; 0x44
 800d8f0:	e009      	b.n	800d906 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2210      	movs	r2, #16
 800d8f6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d8fe:	4618      	mov	r0, r3
 800d900:	f004 f8cb 	bl	8011a9a <SDMMC_CmdWriteSingleBlock>
 800d904:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800d906:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d908:	2b00      	cmp	r3, #0
 800d90a:	d012      	beq.n	800d932 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	4a86      	ldr	r2, [pc, #536]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800d912:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d91a:	431a      	orrs	r2, r3
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	2201      	movs	r2, #1
 800d924:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800d92e:	2301      	movs	r3, #1
 800d930:	e0f7      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 800d932:	69fb      	ldr	r3, [r7, #28]
 800d934:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d936:	e05c      	b.n	800d9f2 <HAL_SD_WriteBlocks+0x1da>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= 32U))
 800d938:	68fb      	ldr	r3, [r7, #12]
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d93e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d942:	2b00      	cmp	r3, #0
 800d944:	d037      	beq.n	800d9b6 <HAL_SD_WriteBlocks+0x19e>
 800d946:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d948:	2b1f      	cmp	r3, #31
 800d94a:	d934      	bls.n	800d9b6 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 800d94c:	2300      	movs	r3, #0
 800d94e:	643b      	str	r3, [r7, #64]	; 0x40
 800d950:	e02b      	b.n	800d9aa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 800d952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d954:	781b      	ldrb	r3, [r3, #0]
 800d956:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d95a:	3301      	adds	r3, #1
 800d95c:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 800d95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d960:	781b      	ldrb	r3, [r3, #0]
 800d962:	021a      	lsls	r2, r3, #8
 800d964:	697b      	ldr	r3, [r7, #20]
 800d966:	4313      	orrs	r3, r2
 800d968:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d96a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d96c:	3301      	adds	r3, #1
 800d96e:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 800d970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d972:	781b      	ldrb	r3, [r3, #0]
 800d974:	041a      	lsls	r2, r3, #16
 800d976:	697b      	ldr	r3, [r7, #20]
 800d978:	4313      	orrs	r3, r2
 800d97a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d97c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d97e:	3301      	adds	r3, #1
 800d980:	637b      	str	r3, [r7, #52]	; 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 800d982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d984:	781b      	ldrb	r3, [r3, #0]
 800d986:	061a      	lsls	r2, r3, #24
 800d988:	697b      	ldr	r3, [r7, #20]
 800d98a:	4313      	orrs	r3, r2
 800d98c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 800d98e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d990:	3301      	adds	r3, #1
 800d992:	637b      	str	r3, [r7, #52]	; 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	f107 0214 	add.w	r2, r7, #20
 800d99c:	4611      	mov	r1, r2
 800d99e:	4618      	mov	r0, r3
 800d9a0:	f003 ff6b 	bl	801187a <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 800d9a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	643b      	str	r3, [r7, #64]	; 0x40
 800d9aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9ac:	2b07      	cmp	r3, #7
 800d9ae:	d9d0      	bls.n	800d952 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= 32U;
 800d9b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d9b2:	3b20      	subs	r3, #32
 800d9b4:	63fb      	str	r3, [r7, #60]	; 0x3c
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800d9b6:	f7f7 fa1f 	bl	8004df8 <HAL_GetTick>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9be:	1ad3      	subs	r3, r2, r3
 800d9c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d902      	bls.n	800d9cc <HAL_SD_WriteBlocks+0x1b4>
 800d9c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d112      	bne.n	800d9f2 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	4a56      	ldr	r2, [pc, #344]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800d9d2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d9d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d9da:	431a      	orrs	r2, r3
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	2201      	movs	r2, #1
 800d9e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	2200      	movs	r2, #0
 800d9ec:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 800d9ee:	2303      	movs	r3, #3
 800d9f0:	e097      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800d9f2:	68fb      	ldr	r3, [r7, #12]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d9f8:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d09b      	beq.n	800d938 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	681b      	ldr	r3, [r3, #0]
 800da04:	68da      	ldr	r2, [r3, #12]
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800da0e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 800da10:	68fb      	ldr	r3, [r7, #12]
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d022      	beq.n	800da64 <HAL_SD_WriteBlocks+0x24c>
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	2b01      	cmp	r3, #1
 800da22:	d91f      	bls.n	800da64 <HAL_SD_WriteBlocks+0x24c>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da28:	2b03      	cmp	r3, #3
 800da2a:	d01b      	beq.n	800da64 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800da2c:	68fb      	ldr	r3, [r7, #12]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	4618      	mov	r0, r3
 800da32:	f004 f879 	bl	8011b28 <SDMMC_CmdStopTransfer>
 800da36:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800da38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d012      	beq.n	800da64 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da3e:	68fb      	ldr	r3, [r7, #12]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	4a3a      	ldr	r2, [pc, #232]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800da44:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800da4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800da4c:	431a      	orrs	r2, r3
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 800da52:	68fb      	ldr	r3, [r7, #12]
 800da54:	2201      	movs	r2, #1
 800da56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	2200      	movs	r2, #0
 800da5e:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 800da60:	2301      	movs	r3, #1
 800da62:	e05e      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800da64:	68fb      	ldr	r3, [r7, #12]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da6a:	f003 0308 	and.w	r3, r3, #8
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d012      	beq.n	800da98 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a2d      	ldr	r2, [pc, #180]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800da78:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800da7a:	68fb      	ldr	r3, [r7, #12]
 800da7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da7e:	f043 0208 	orr.w	r2, r3, #8
 800da82:	68fb      	ldr	r3, [r7, #12]
 800da84:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800da86:	68fb      	ldr	r3, [r7, #12]
 800da88:	2201      	movs	r2, #1
 800da8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800da8e:	68fb      	ldr	r3, [r7, #12]
 800da90:	2200      	movs	r2, #0
 800da92:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800da94:	2301      	movs	r3, #1
 800da96:	e044      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800da98:	68fb      	ldr	r3, [r7, #12]
 800da9a:	681b      	ldr	r3, [r3, #0]
 800da9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800da9e:	f003 0302 	and.w	r3, r3, #2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d012      	beq.n	800dacc <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a20      	ldr	r2, [pc, #128]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800daac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800daae:	68fb      	ldr	r3, [r7, #12]
 800dab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dab2:	f043 0202 	orr.w	r2, r3, #2
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800daba:	68fb      	ldr	r3, [r7, #12]
 800dabc:	2201      	movs	r2, #1
 800dabe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	2200      	movs	r2, #0
 800dac6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dac8:	2301      	movs	r3, #1
 800daca:	e02a      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	681b      	ldr	r3, [r3, #0]
 800dad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dad2:	f003 0310 	and.w	r3, r3, #16
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d012      	beq.n	800db00 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dada:	68fb      	ldr	r3, [r7, #12]
 800dadc:	681b      	ldr	r3, [r3, #0]
 800dade:	4a13      	ldr	r2, [pc, #76]	; (800db2c <HAL_SD_WriteBlocks+0x314>)
 800dae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dae6:	f043 0210 	orr.w	r2, r3, #16
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	2201      	movs	r2, #1
 800daf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	2200      	movs	r2, #0
 800dafa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dafc:	2301      	movs	r3, #1
 800dafe:	e010      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	4a0a      	ldr	r2, [pc, #40]	; (800db30 <HAL_SD_WriteBlocks+0x318>)
 800db06:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 800db10:	2300      	movs	r3, #0
 800db12:	e006      	b.n	800db22 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db20:	2301      	movs	r3, #1
  }
}
 800db22:	4618      	mov	r0, r3
 800db24:	3748      	adds	r7, #72	; 0x48
 800db26:	46bd      	mov	sp, r7
 800db28:	bd80      	pop	{r7, pc}
 800db2a:	bf00      	nop
 800db2c:	1fe00fff 	.word	0x1fe00fff
 800db30:	18000f3a 	.word	0x18000f3a

0800db34 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b08c      	sub	sp, #48	; 0x30
 800db38:	af00      	add	r7, sp, #0
 800db3a:	60f8      	str	r0, [r7, #12]
 800db3c:	60b9      	str	r1, [r7, #8]
 800db3e:	607a      	str	r2, [r7, #4]
 800db40:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d107      	bne.n	800db5c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db50:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800db58:	2301      	movs	r3, #1
 800db5a:	e08d      	b.n	800dc78 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800db5c:	68fb      	ldr	r3, [r7, #12]
 800db5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db62:	b2db      	uxtb	r3, r3
 800db64:	2b01      	cmp	r3, #1
 800db66:	f040 8086 	bne.w	800dc76 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2200      	movs	r2, #0
 800db6e:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800db70:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	441a      	add	r2, r3
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d907      	bls.n	800db8e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db82:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800db8a:	2301      	movs	r3, #1
 800db8c:	e074      	b.n	800dc78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800db8e:	68fb      	ldr	r3, [r7, #12]
 800db90:	2203      	movs	r2, #3
 800db92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2200      	movs	r2, #0
 800db9c:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pRxBuffPtr = pData;
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	68ba      	ldr	r2, [r7, #8]
 800dba2:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	025a      	lsls	r2, r3, #9
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dbb0:	2b01      	cmp	r3, #1
 800dbb2:	d002      	beq.n	800dbba <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= 512U;
 800dbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbb6:	025b      	lsls	r3, r3, #9
 800dbb8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dbba:	f04f 33ff 	mov.w	r3, #4294967295
 800dbbe:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dbc0:	683b      	ldr	r3, [r7, #0]
 800dbc2:	025b      	lsls	r3, r3, #9
 800dbc4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dbc6:	2390      	movs	r3, #144	; 0x90
 800dbc8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800dbca:	2302      	movs	r3, #2
 800dbcc:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dbce:	2300      	movs	r3, #0
 800dbd0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f107 0210 	add.w	r2, r7, #16
 800dbde:	4611      	mov	r1, r2
 800dbe0:	4618      	mov	r0, r3
 800dbe2:	f003 fec5 	bl	8011970 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800dbe6:	68fb      	ldr	r3, [r7, #12]
 800dbe8:	681b      	ldr	r3, [r3, #0]
 800dbea:	68da      	ldr	r2, [r3, #12]
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dbf4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	68ba      	ldr	r2, [r7, #8]
 800dbfc:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	2201      	movs	r2, #1
 800dc04:	651a      	str	r2, [r3, #80]	; 0x50

    /* Read Blocks in DMA mode */
    if(NumberOfBlocks > 1U)
 800dc06:	683b      	ldr	r3, [r7, #0]
 800dc08:	2b01      	cmp	r3, #1
 800dc0a:	d90a      	bls.n	800dc22 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	2282      	movs	r2, #130	; 0x82
 800dc10:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc18:	4618      	mov	r0, r3
 800dc1a:	f003 ff1b 	bl	8011a54 <SDMMC_CmdReadMultiBlock>
 800dc1e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dc20:	e009      	b.n	800dc36 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	2281      	movs	r2, #129	; 0x81
 800dc26:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f003 feed 	bl	8011a0e <SDMMC_CmdReadSingleBlock>
 800dc34:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dc36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d012      	beq.n	800dc62 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	4a0f      	ldr	r2, [pc, #60]	; (800dc80 <HAL_SD_ReadBlocks_DMA+0x14c>)
 800dc42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dc44:	68fb      	ldr	r3, [r7, #12]
 800dc46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dc48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc4a:	431a      	orrs	r2, r3
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dc50:	68fb      	ldr	r3, [r7, #12]
 800dc52:	2201      	movs	r2, #1
 800dc54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800dc5e:	2301      	movs	r3, #1
 800dc60:	e00a      	b.n	800dc78 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 800dc70:	63da      	str	r2, [r3, #60]	; 0x3c


    return HAL_OK;
 800dc72:	2300      	movs	r3, #0
 800dc74:	e000      	b.n	800dc78 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800dc76:	2302      	movs	r3, #2
  }
}
 800dc78:	4618      	mov	r0, r3
 800dc7a:	3730      	adds	r7, #48	; 0x30
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	1fe00fff 	.word	0x1fe00fff

0800dc84 <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08c      	sub	sp, #48	; 0x30
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	2b00      	cmp	r3, #0
 800dc9a:	d107      	bne.n	800dcac <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
 800dc9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dca0:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800dca4:	68fb      	ldr	r3, [r7, #12]
 800dca6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	e08d      	b.n	800ddc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dcb2:	b2db      	uxtb	r3, r3
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	f040 8086 	bne.w	800ddc6 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	2200      	movs	r2, #0
 800dcbe:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800dcc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	441a      	add	r2, r3
 800dcc6:	68fb      	ldr	r3, [r7, #12]
 800dcc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dcca:	429a      	cmp	r2, r3
 800dccc:	d907      	bls.n	800dcde <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800dcce:	68fb      	ldr	r3, [r7, #12]
 800dcd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dcd2:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800dcda:	2301      	movs	r3, #1
 800dcdc:	e074      	b.n	800ddc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2203      	movs	r2, #3
 800dce2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	2200      	movs	r2, #0
 800dcec:	62da      	str	r2, [r3, #44]	; 0x2c

    hsd->pTxBuffPtr = pData;
 800dcee:	68fb      	ldr	r3, [r7, #12]
 800dcf0:	68ba      	ldr	r2, [r7, #8]
 800dcf2:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	025a      	lsls	r2, r3, #9
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	625a      	str	r2, [r3, #36]	; 0x24

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dd00:	2b01      	cmp	r3, #1
 800dd02:	d002      	beq.n	800dd0a <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= 512U;
 800dd04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd06:	025b      	lsls	r3, r3, #9
 800dd08:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800dd0a:	f04f 33ff 	mov.w	r3, #4294967295
 800dd0e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 800dd10:	683b      	ldr	r3, [r7, #0]
 800dd12:	025b      	lsls	r3, r3, #9
 800dd14:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800dd16:	2390      	movs	r3, #144	; 0x90
 800dd18:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800dd1e:	2300      	movs	r3, #0
 800dd20:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 800dd22:	2300      	movs	r3, #0
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	f107 0210 	add.w	r2, r7, #16
 800dd2e:	4611      	mov	r1, r2
 800dd30:	4618      	mov	r0, r3
 800dd32:	f003 fe1d 	bl	8011970 <SDMMC_ConfigData>


    __SDMMC_CMDTRANS_ENABLE( hsd->Instance);
 800dd36:	68fb      	ldr	r3, [r7, #12]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	68da      	ldr	r2, [r3, #12]
 800dd3c:	68fb      	ldr	r3, [r7, #12]
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800dd44:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	68ba      	ldr	r2, [r7, #8]
 800dd4c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 800dd4e:	68fb      	ldr	r3, [r7, #12]
 800dd50:	681b      	ldr	r3, [r3, #0]
 800dd52:	2201      	movs	r2, #1
 800dd54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800dd56:	683b      	ldr	r3, [r7, #0]
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d90a      	bls.n	800dd72 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	22a0      	movs	r2, #160	; 0xa0
 800dd60:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd68:	4618      	mov	r0, r3
 800dd6a:	f003 feb9 	bl	8011ae0 <SDMMC_CmdWriteMultiBlock>
 800dd6e:	62f8      	str	r0, [r7, #44]	; 0x2c
 800dd70:	e009      	b.n	800dd86 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 800dd72:	68fb      	ldr	r3, [r7, #12]
 800dd74:	2290      	movs	r2, #144	; 0x90
 800dd76:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 800dd78:	68fb      	ldr	r3, [r7, #12]
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dd7e:	4618      	mov	r0, r3
 800dd80:	f003 fe8b 	bl	8011a9a <SDMMC_CmdWriteSingleBlock>
 800dd84:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800dd86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d012      	beq.n	800ddb2 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	4a0f      	ldr	r2, [pc, #60]	; (800ddd0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 800dd92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dd98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd9a:	431a      	orrs	r2, r3
 800dd9c:	68fb      	ldr	r3, [r7, #12]
 800dd9e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	2201      	movs	r2, #1
 800dda4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	2200      	movs	r2, #0
 800ddac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800ddae:	2301      	movs	r3, #1
 800ddb0:	e00a      	b.n	800ddc8 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 800ddb2:	68fb      	ldr	r3, [r7, #12]
 800ddb4:	681b      	ldr	r3, [r3, #0]
 800ddb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ddb8:	68fb      	ldr	r3, [r7, #12]
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	f442 728d 	orr.w	r2, r2, #282	; 0x11a
 800ddc0:	63da      	str	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ddc2:	2300      	movs	r3, #0
 800ddc4:	e000      	b.n	800ddc8 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 800ddc6:	2302      	movs	r3, #2
  }
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	3730      	adds	r7, #48	; 0x30
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	bd80      	pop	{r7, pc}
 800ddd0:	1fe00fff 	.word	0x1fe00fff

0800ddd4 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dde0:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dde8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d008      	beq.n	800de02 <HAL_SD_IRQHandler+0x2e>
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	f003 0308 	and.w	r3, r3, #8
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d003      	beq.n	800de02 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f001 f92a 	bl	800f054 <SD_Read_IT>
 800de00:	e19a      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800de08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800de0c:	2b00      	cmp	r3, #0
 800de0e:	f000 80ac 	beq.w	800df6a <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	681b      	ldr	r3, [r3, #0]
 800de16:	f44f 7280 	mov.w	r2, #256	; 0x100
 800de1a:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT |\
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	681a      	ldr	r2, [r3, #0]
 800de26:	4b9d      	ldr	r3, [pc, #628]	; (800e09c <HAL_SD_IRQHandler+0x2c8>)
 800de28:	400b      	ands	r3, r1
 800de2a:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	681b      	ldr	r3, [r3, #0]
 800de30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	681b      	ldr	r3, [r3, #0]
 800de36:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800de3a:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	68da      	ldr	r2, [r3, #12]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800de4a:	60da      	str	r2, [r3, #12]

    if((context & SD_CONTEXT_IT) != 0U)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	f003 0308 	and.w	r3, r3, #8
 800de52:	2b00      	cmp	r3, #0
 800de54:	d038      	beq.n	800dec8 <HAL_SD_IRQHandler+0xf4>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	f003 0302 	and.w	r3, r3, #2
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d104      	bne.n	800de6a <HAL_SD_IRQHandler+0x96>
 800de60:	68fb      	ldr	r3, [r7, #12]
 800de62:	f003 0320 	and.w	r3, r3, #32
 800de66:	2b00      	cmp	r3, #0
 800de68:	d011      	beq.n	800de8e <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800de6a:	687b      	ldr	r3, [r7, #4]
 800de6c:	681b      	ldr	r3, [r3, #0]
 800de6e:	4618      	mov	r0, r3
 800de70:	f003 fe5a 	bl	8011b28 <SDMMC_CmdStopTransfer>
 800de74:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800de76:	68bb      	ldr	r3, [r7, #8]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d008      	beq.n	800de8e <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800de80:	68bb      	ldr	r3, [r7, #8]
 800de82:	431a      	orrs	r2, r3
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800de88:	6878      	ldr	r0, [r7, #4]
 800de8a:	f000 f959 	bl	800e140 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	4a83      	ldr	r2, [pc, #524]	; (800e0a0 <HAL_SD_IRQHandler+0x2cc>)
 800de94:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	2201      	movs	r2, #1
 800de9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	2200      	movs	r2, #0
 800dea2:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	f003 0301 	and.w	r3, r3, #1
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d104      	bne.n	800deb8 <HAL_SD_IRQHandler+0xe4>
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	f003 0302 	and.w	r3, r3, #2
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d003      	beq.n	800dec0 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f005 fe4b 	bl	8013b54 <HAL_SD_RxCpltCallback>
 800debe:	e13b      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f005 fe3d 	bl	8013b40 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800dec6:	e137      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
    else if((context & SD_CONTEXT_DMA) != 0U)
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dece:	2b00      	cmp	r3, #0
 800ded0:	f000 8132 	beq.w	800e138 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	681b      	ldr	r3, [r3, #0]
 800ded8:	2200      	movs	r2, #0
 800deda:	629a      	str	r2, [r3, #40]	; 0x28
      hsd->Instance->DCTRL = 0;
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2200      	movs	r2, #0
 800dee2:	62da      	str	r2, [r3, #44]	; 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	2200      	movs	r2, #0
 800deea:	651a      	str	r2, [r3, #80]	; 0x50
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	f003 0302 	and.w	r3, r3, #2
 800def2:	2b00      	cmp	r3, #0
 800def4:	d104      	bne.n	800df00 <HAL_SD_IRQHandler+0x12c>
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f003 0320 	and.w	r3, r3, #32
 800defc:	2b00      	cmp	r3, #0
 800defe:	d011      	beq.n	800df24 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	4618      	mov	r0, r3
 800df06:	f003 fe0f 	bl	8011b28 <SDMMC_CmdStopTransfer>
 800df0a:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d008      	beq.n	800df24 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800df16:	68bb      	ldr	r3, [r7, #8]
 800df18:	431a      	orrs	r2, r3
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 800df1e:	6878      	ldr	r0, [r7, #4]
 800df20:	f000 f90e 	bl	800e140 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2201      	movs	r2, #1
 800df28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	2200      	movs	r2, #0
 800df30:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800df32:	68fb      	ldr	r3, [r7, #12]
 800df34:	f003 0310 	and.w	r3, r3, #16
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d104      	bne.n	800df46 <HAL_SD_IRQHandler+0x172>
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f003 0320 	and.w	r3, r3, #32
 800df42:	2b00      	cmp	r3, #0
 800df44:	d002      	beq.n	800df4c <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f005 fdfa 	bl	8013b40 <HAL_SD_TxCpltCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800df4c:	68fb      	ldr	r3, [r7, #12]
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	d105      	bne.n	800df62 <HAL_SD_IRQHandler+0x18e>
 800df56:	68fb      	ldr	r3, [r7, #12]
 800df58:	f003 0302 	and.w	r3, r3, #2
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f000 80eb 	beq.w	800e138 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 800df62:	6878      	ldr	r0, [r7, #4]
 800df64:	f005 fdf6 	bl	8013b54 <HAL_SD_RxCpltCallback>
}
 800df68:	e0e6      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800df74:	2b00      	cmp	r3, #0
 800df76:	d008      	beq.n	800df8a <HAL_SD_IRQHandler+0x1b6>
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	f003 0308 	and.w	r3, r3, #8
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d003      	beq.n	800df8a <HAL_SD_IRQHandler+0x1b6>
    SD_Write_IT(hsd);
 800df82:	6878      	ldr	r0, [r7, #4]
 800df84:	f001 f8ac 	bl	800f0e0 <SD_Write_IT>
 800df88:	e0d6      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800df90:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800df94:	2b00      	cmp	r3, #0
 800df96:	f000 80a2 	beq.w	800e0de <HAL_SD_IRQHandler+0x30a>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfa0:	f003 0302 	and.w	r3, r3, #2
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d005      	beq.n	800dfb4 <HAL_SD_IRQHandler+0x1e0>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfac:	f043 0202 	orr.w	r2, r3, #2
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfba:	f003 0308 	and.w	r3, r3, #8
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d005      	beq.n	800dfce <HAL_SD_IRQHandler+0x1fa>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfc6:	f043 0208 	orr.w	r2, r3, #8
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfd4:	f003 0320 	and.w	r3, r3, #32
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d005      	beq.n	800dfe8 <HAL_SD_IRQHandler+0x214>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 800dfdc:	687b      	ldr	r3, [r7, #4]
 800dfde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dfe0:	f043 0220 	orr.w	r2, r3, #32
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dfee:	f003 0310 	and.w	r3, r3, #16
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d005      	beq.n	800e002 <HAL_SD_IRQHandler+0x22e>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dffa:	f043 0210 	orr.w	r2, r3, #16
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	4a26      	ldr	r2, [pc, #152]	; (800e0a0 <HAL_SD_IRQHandler+0x2cc>)
 800e008:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 800e018:	63da      	str	r2, [r3, #60]	; 0x3c
    __SDMMC_CMDTRANS_DISABLE( hsd->Instance);
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	681b      	ldr	r3, [r3, #0]
 800e01e:	68da      	ldr	r2, [r3, #12]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800e028:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	681b      	ldr	r3, [r3, #0]
 800e02e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	681b      	ldr	r3, [r3, #0]
 800e034:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e038:	62da      	str	r2, [r3, #44]	; 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	68da      	ldr	r2, [r3, #12]
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	681b      	ldr	r3, [r3, #0]
 800e044:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800e048:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	681b      	ldr	r3, [r3, #0]
 800e04e:	4618      	mov	r0, r3
 800e050:	f003 fd6a 	bl	8011b28 <SDMMC_CmdStopTransfer>
 800e054:	4602      	mov	r2, r0
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e05a:	431a      	orrs	r2, r3
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	681b      	ldr	r3, [r3, #0]
 800e064:	68da      	ldr	r2, [r3, #12]
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e06e:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e078:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	f003 0308 	and.w	r3, r3, #8
 800e080:	2b00      	cmp	r3, #0
 800e082:	d00f      	beq.n	800e0a4 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2201      	movs	r2, #1
 800e088:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2200      	movs	r2, #0
 800e090:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f854 	bl	800e140 <HAL_SD_ErrorCallback>
}
 800e098:	e04e      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
 800e09a:	bf00      	nop
 800e09c:	ffff3ec5 	.word	0xffff3ec5
 800e0a0:	18000f3a 	.word	0x18000f3a
    else if((context & SD_CONTEXT_DMA) != 0U)
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d044      	beq.n	800e138 <HAL_SD_IRQHandler+0x364>
      if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d040      	beq.n	800e138 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 800e0b6:	687b      	ldr	r3, [r7, #4]
 800e0b8:	681b      	ldr	r3, [r3, #0]
 800e0ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800e0c4:	63da      	str	r2, [r3, #60]	; 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	651a      	str	r2, [r3, #80]	; 0x50
        hsd->State = HAL_SD_STATE_READY;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	2201      	movs	r2, #1
 800e0d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_ErrorCallback(hsd);
 800e0d6:	6878      	ldr	r0, [r7, #4]
 800e0d8:	f000 f832 	bl	800e140 <HAL_SD_ErrorCallback>
}
 800e0dc:	e02c      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e0e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d025      	beq.n	800e138 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e0f4:	639a      	str	r2, [r3, #56]	; 0x38
    if(READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 800e0f6:	687b      	ldr	r3, [r7, #4]
 800e0f8:	681b      	ldr	r3, [r3, #0]
 800e0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0fc:	f003 0304 	and.w	r3, r3, #4
 800e100:	2b00      	cmp	r3, #0
 800e102:	d10c      	bne.n	800e11e <HAL_SD_IRQHandler+0x34a>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	f003 0320 	and.w	r3, r3, #32
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 800e10e:	6878      	ldr	r0, [r7, #4]
 800e110:	f001 f84e 	bl	800f1b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 800e114:	e010      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 800e116:	6878      	ldr	r0, [r7, #4]
 800e118:	f001 f836 	bl	800f188 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 800e11c:	e00c      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	f003 0320 	and.w	r3, r3, #32
 800e124:	2b00      	cmp	r3, #0
 800e126:	d003      	beq.n	800e130 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f001 f837 	bl	800f19c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 800e12e:	e003      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 800e130:	6878      	ldr	r0, [r7, #4]
 800e132:	f001 f81f 	bl	800f174 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 800e136:	e7ff      	b.n	800e138 <HAL_SD_IRQHandler+0x364>
 800e138:	bf00      	nop
 800e13a:	3710      	adds	r7, #16
 800e13c:	46bd      	mov	sp, r7
 800e13e:	bd80      	pop	{r7, pc}

0800e140 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 800e140:	b480      	push	{r7}
 800e142:	b083      	sub	sp, #12
 800e144:	af00      	add	r7, sp, #0
 800e146:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 800e148:	bf00      	nop
 800e14a:	370c      	adds	r7, #12
 800e14c:	46bd      	mov	sp, r7
 800e14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e152:	4770      	bx	lr

0800e154 <HAL_SD_DriveTransceiver_1_8V_Callback>:
  * @brief  Enable/Disable the SD Transceiver 1.8V Mode Callback.
  * @param  status: Voltage Switch State
  * @retval None
  */
__weak  void HAL_SD_DriveTransceiver_1_8V_Callback(FlagStatus status)
{
 800e154:	b480      	push	{r7}
 800e156:	b083      	sub	sp, #12
 800e158:	af00      	add	r7, sp, #0
 800e15a:	4603      	mov	r3, r0
 800e15c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(status);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_EnableTransceiver could be implemented in the user file
   */
}
 800e15e:	bf00      	nop
 800e160:	370c      	adds	r7, #12
 800e162:	46bd      	mov	sp, r7
 800e164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e168:	4770      	bx	lr
	...

0800e16c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 800e16c:	b480      	push	{r7}
 800e16e:	b083      	sub	sp, #12
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e17a:	0f9b      	lsrs	r3, r3, #30
 800e17c:	b2da      	uxtb	r2, r3
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e186:	0e9b      	lsrs	r3, r3, #26
 800e188:	b2db      	uxtb	r3, r3
 800e18a:	f003 030f 	and.w	r3, r3, #15
 800e18e:	b2da      	uxtb	r2, r3
 800e190:	683b      	ldr	r3, [r7, #0]
 800e192:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e198:	0e1b      	lsrs	r3, r3, #24
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	f003 0303 	and.w	r3, r3, #3
 800e1a0:	b2da      	uxtb	r2, r3
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1aa:	0c1b      	lsrs	r3, r3, #16
 800e1ac:	b2da      	uxtb	r2, r3
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800e1b2:	687b      	ldr	r3, [r7, #4]
 800e1b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1b6:	0a1b      	lsrs	r3, r3, #8
 800e1b8:	b2da      	uxtb	r2, r3
 800e1ba:	683b      	ldr	r3, [r7, #0]
 800e1bc:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1c2:	b2da      	uxtb	r2, r3
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1cc:	0d1b      	lsrs	r3, r3, #20
 800e1ce:	b29a      	uxth	r2, r3
 800e1d0:	683b      	ldr	r3, [r7, #0]
 800e1d2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1d8:	0c1b      	lsrs	r3, r3, #16
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	f003 030f 	and.w	r3, r3, #15
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1ea:	0bdb      	lsrs	r3, r3, #15
 800e1ec:	b2db      	uxtb	r3, r3
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	b2da      	uxtb	r2, r3
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e1fc:	0b9b      	lsrs	r3, r3, #14
 800e1fe:	b2db      	uxtb	r3, r3
 800e200:	f003 0301 	and.w	r3, r3, #1
 800e204:	b2da      	uxtb	r2, r3
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e20e:	0b5b      	lsrs	r3, r3, #13
 800e210:	b2db      	uxtb	r3, r3
 800e212:	f003 0301 	and.w	r3, r3, #1
 800e216:	b2da      	uxtb	r2, r3
 800e218:	683b      	ldr	r3, [r7, #0]
 800e21a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e220:	0b1b      	lsrs	r3, r3, #12
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 0301 	and.w	r3, r3, #1
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	683b      	ldr	r3, [r7, #0]
 800e22c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 800e22e:	683b      	ldr	r3, [r7, #0]
 800e230:	2200      	movs	r2, #0
 800e232:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d163      	bne.n	800e304 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800e23c:	687b      	ldr	r3, [r7, #4]
 800e23e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e240:	009a      	lsls	r2, r3, #2
 800e242:	f640 73fc 	movw	r3, #4092	; 0xffc
 800e246:	4013      	ands	r3, r2
 800e248:	687a      	ldr	r2, [r7, #4]
 800e24a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800e24c:	0f92      	lsrs	r2, r2, #30
 800e24e:	431a      	orrs	r2, r3
 800e250:	683b      	ldr	r3, [r7, #0]
 800e252:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 800e254:	687b      	ldr	r3, [r7, #4]
 800e256:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e258:	0edb      	lsrs	r3, r3, #27
 800e25a:	b2db      	uxtb	r3, r3
 800e25c:	f003 0307 	and.w	r3, r3, #7
 800e260:	b2da      	uxtb	r2, r3
 800e262:	683b      	ldr	r3, [r7, #0]
 800e264:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800e266:	687b      	ldr	r3, [r7, #4]
 800e268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e26a:	0e1b      	lsrs	r3, r3, #24
 800e26c:	b2db      	uxtb	r3, r3
 800e26e:	f003 0307 	and.w	r3, r3, #7
 800e272:	b2da      	uxtb	r2, r3
 800e274:	683b      	ldr	r3, [r7, #0]
 800e276:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e27c:	0d5b      	lsrs	r3, r3, #21
 800e27e:	b2db      	uxtb	r3, r3
 800e280:	f003 0307 	and.w	r3, r3, #7
 800e284:	b2da      	uxtb	r2, r3
 800e286:	683b      	ldr	r3, [r7, #0]
 800e288:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e28e:	0c9b      	lsrs	r3, r3, #18
 800e290:	b2db      	uxtb	r3, r3
 800e292:	f003 0307 	and.w	r3, r3, #7
 800e296:	b2da      	uxtb	r2, r3
 800e298:	683b      	ldr	r3, [r7, #0]
 800e29a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e2a0:	0bdb      	lsrs	r3, r3, #15
 800e2a2:	b2db      	uxtb	r3, r3
 800e2a4:	f003 0307 	and.w	r3, r3, #7
 800e2a8:	b2da      	uxtb	r2, r3
 800e2aa:	683b      	ldr	r3, [r7, #0]
 800e2ac:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800e2ae:	683b      	ldr	r3, [r7, #0]
 800e2b0:	691b      	ldr	r3, [r3, #16]
 800e2b2:	1c5a      	adds	r2, r3, #1
 800e2b4:	687b      	ldr	r3, [r7, #4]
 800e2b6:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 800e2b8:	683b      	ldr	r3, [r7, #0]
 800e2ba:	7e1b      	ldrb	r3, [r3, #24]
 800e2bc:	b2db      	uxtb	r3, r3
 800e2be:	f003 0307 	and.w	r3, r3, #7
 800e2c2:	3302      	adds	r3, #2
 800e2c4:	2201      	movs	r2, #1
 800e2c6:	fa02 f303 	lsl.w	r3, r2, r3
 800e2ca:	687a      	ldr	r2, [r7, #4]
 800e2cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800e2ce:	fb02 f203 	mul.w	r2, r2, r3
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800e2d6:	683b      	ldr	r3, [r7, #0]
 800e2d8:	7a1b      	ldrb	r3, [r3, #8]
 800e2da:	b2db      	uxtb	r3, r3
 800e2dc:	f003 030f 	and.w	r3, r3, #15
 800e2e0:	2201      	movs	r2, #1
 800e2e2:	409a      	lsls	r2, r3
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	651a      	str	r2, [r3, #80]	; 0x50

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800e2e8:	687b      	ldr	r3, [r7, #4]
 800e2ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2ec:	687a      	ldr	r2, [r7, #4]
 800e2ee:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800e2f0:	0a52      	lsrs	r2, r2, #9
 800e2f2:	fb02 f203 	mul.w	r2, r2, r3
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockSize = 512U;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e300:	659a      	str	r2, [r3, #88]	; 0x58
 800e302:	e031      	b.n	800e368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d11d      	bne.n	800e348 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e310:	041b      	lsls	r3, r3, #16
 800e312:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e31a:	0c1b      	lsrs	r3, r3, #16
 800e31c:	431a      	orrs	r2, r3
 800e31e:	683b      	ldr	r3, [r7, #0]
 800e320:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800e322:	683b      	ldr	r3, [r7, #0]
 800e324:	691b      	ldr	r3, [r3, #16]
 800e326:	3301      	adds	r3, #1
 800e328:	029a      	lsls	r2, r3, #10
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = 512U;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e33c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	659a      	str	r2, [r3, #88]	; 0x58
 800e346:	e00f      	b.n	800e368 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e348:	687b      	ldr	r3, [r7, #4]
 800e34a:	681b      	ldr	r3, [r3, #0]
 800e34c:	4a58      	ldr	r2, [pc, #352]	; (800e4b0 <HAL_SD_GetCardCSD+0x344>)
 800e34e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e354:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2201      	movs	r2, #1
 800e360:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800e364:	2301      	movs	r3, #1
 800e366:	e09d      	b.n	800e4a4 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800e368:	687b      	ldr	r3, [r7, #4]
 800e36a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e36c:	0b9b      	lsrs	r3, r3, #14
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	f003 0301 	and.w	r3, r3, #1
 800e374:	b2da      	uxtb	r2, r3
 800e376:	683b      	ldr	r3, [r7, #0]
 800e378:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e37e:	09db      	lsrs	r3, r3, #7
 800e380:	b2db      	uxtb	r3, r3
 800e382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e386:	b2da      	uxtb	r2, r3
 800e388:	683b      	ldr	r3, [r7, #0]
 800e38a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e390:	b2db      	uxtb	r3, r3
 800e392:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e396:	b2da      	uxtb	r2, r3
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3a0:	0fdb      	lsrs	r3, r3, #31
 800e3a2:	b2da      	uxtb	r2, r3
 800e3a4:	683b      	ldr	r3, [r7, #0]
 800e3a6:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ac:	0f5b      	lsrs	r3, r3, #29
 800e3ae:	b2db      	uxtb	r3, r3
 800e3b0:	f003 0303 	and.w	r3, r3, #3
 800e3b4:	b2da      	uxtb	r2, r3
 800e3b6:	683b      	ldr	r3, [r7, #0]
 800e3b8:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3be:	0e9b      	lsrs	r3, r3, #26
 800e3c0:	b2db      	uxtb	r3, r3
 800e3c2:	f003 0307 	and.w	r3, r3, #7
 800e3c6:	b2da      	uxtb	r2, r3
 800e3c8:	683b      	ldr	r3, [r7, #0]
 800e3ca:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3d0:	0d9b      	lsrs	r3, r3, #22
 800e3d2:	b2db      	uxtb	r3, r3
 800e3d4:	f003 030f 	and.w	r3, r3, #15
 800e3d8:	b2da      	uxtb	r2, r3
 800e3da:	683b      	ldr	r3, [r7, #0]
 800e3dc:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3e2:	0d5b      	lsrs	r3, r3, #21
 800e3e4:	b2db      	uxtb	r3, r3
 800e3e6:	f003 0301 	and.w	r3, r3, #1
 800e3ea:	b2da      	uxtb	r2, r3
 800e3ec:	683b      	ldr	r3, [r7, #0]
 800e3ee:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800e3f2:	683b      	ldr	r3, [r7, #0]
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3fe:	0c1b      	lsrs	r3, r3, #16
 800e400:	b2db      	uxtb	r3, r3
 800e402:	f003 0301 	and.w	r3, r3, #1
 800e406:	b2da      	uxtb	r2, r3
 800e408:	683b      	ldr	r3, [r7, #0]
 800e40a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e412:	0bdb      	lsrs	r3, r3, #15
 800e414:	b2db      	uxtb	r3, r3
 800e416:	f003 0301 	and.w	r3, r3, #1
 800e41a:	b2da      	uxtb	r2, r3
 800e41c:	683b      	ldr	r3, [r7, #0]
 800e41e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800e422:	687b      	ldr	r3, [r7, #4]
 800e424:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e426:	0b9b      	lsrs	r3, r3, #14
 800e428:	b2db      	uxtb	r3, r3
 800e42a:	f003 0301 	and.w	r3, r3, #1
 800e42e:	b2da      	uxtb	r2, r3
 800e430:	683b      	ldr	r3, [r7, #0]
 800e432:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e43a:	0b5b      	lsrs	r3, r3, #13
 800e43c:	b2db      	uxtb	r3, r3
 800e43e:	f003 0301 	and.w	r3, r3, #1
 800e442:	b2da      	uxtb	r2, r3
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e44e:	0b1b      	lsrs	r3, r3, #12
 800e450:	b2db      	uxtb	r3, r3
 800e452:	f003 0301 	and.w	r3, r3, #1
 800e456:	b2da      	uxtb	r2, r3
 800e458:	683b      	ldr	r3, [r7, #0]
 800e45a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800e45e:	687b      	ldr	r3, [r7, #4]
 800e460:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e462:	0a9b      	lsrs	r3, r3, #10
 800e464:	b2db      	uxtb	r3, r3
 800e466:	f003 0303 	and.w	r3, r3, #3
 800e46a:	b2da      	uxtb	r2, r3
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e476:	0a1b      	lsrs	r3, r3, #8
 800e478:	b2db      	uxtb	r3, r3
 800e47a:	f003 0303 	and.w	r3, r3, #3
 800e47e:	b2da      	uxtb	r2, r3
 800e480:	683b      	ldr	r3, [r7, #0]
 800e482:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e48a:	085b      	lsrs	r3, r3, #1
 800e48c:	b2db      	uxtb	r3, r3
 800e48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e492:	b2da      	uxtb	r2, r3
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800e49a:	683b      	ldr	r3, [r7, #0]
 800e49c:	2201      	movs	r2, #1
 800e49e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800e4a2:	2300      	movs	r3, #0
}
 800e4a4:	4618      	mov	r0, r3
 800e4a6:	370c      	adds	r7, #12
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4ae:	4770      	bx	lr
 800e4b0:	1fe00fff 	.word	0x1fe00fff

0800e4b4 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 800e4b4:	b580      	push	{r7, lr}
 800e4b6:	b094      	sub	sp, #80	; 0x50
 800e4b8:	af00      	add	r7, sp, #0
 800e4ba:	6078      	str	r0, [r7, #4]
 800e4bc:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  errorstate = SD_SendSDStatus(hsd, sd_status);
 800e4c4:	f107 0308 	add.w	r3, r7, #8
 800e4c8:	4619      	mov	r1, r3
 800e4ca:	6878      	ldr	r0, [r7, #4]
 800e4cc:	f000 fb64 	bl	800eb98 <SD_SendSDStatus>
 800e4d0:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e4d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d011      	beq.n	800e4fc <HAL_SD_GetCardStatus+0x48>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	4a4f      	ldr	r2, [pc, #316]	; (800e61c <HAL_SD_GetCardStatus+0x168>)
 800e4de:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e4e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e4e6:	431a      	orrs	r2, r3
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	2201      	movs	r2, #1
 800e4f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e4f4:	2301      	movs	r3, #1
 800e4f6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800e4fa:	e070      	b.n	800e5de <HAL_SD_GetCardStatus+0x12a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 800e4fc:	68bb      	ldr	r3, [r7, #8]
 800e4fe:	099b      	lsrs	r3, r3, #6
 800e500:	b2db      	uxtb	r3, r3
 800e502:	f003 0303 	and.w	r3, r3, #3
 800e506:	b2da      	uxtb	r2, r3
 800e508:	683b      	ldr	r3, [r7, #0]
 800e50a:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 800e50c:	68bb      	ldr	r3, [r7, #8]
 800e50e:	095b      	lsrs	r3, r3, #5
 800e510:	b2db      	uxtb	r3, r3
 800e512:	f003 0301 	and.w	r3, r3, #1
 800e516:	b2da      	uxtb	r2, r3
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 800e51c:	68bb      	ldr	r3, [r7, #8]
 800e51e:	0a1b      	lsrs	r3, r3, #8
 800e520:	b29b      	uxth	r3, r3
 800e522:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e526:	b29a      	uxth	r2, r3
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	0e1b      	lsrs	r3, r3, #24
 800e52c:	b29b      	uxth	r3, r3
 800e52e:	4313      	orrs	r3, r2
 800e530:	b29a      	uxth	r2, r3
 800e532:	683b      	ldr	r3, [r7, #0]
 800e534:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e536:	68fb      	ldr	r3, [r7, #12]
 800e538:	061a      	lsls	r2, r3, #24
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	021b      	lsls	r3, r3, #8
 800e53e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e542:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	0a1b      	lsrs	r3, r3, #8
 800e548:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e54c:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	0e1b      	lsrs	r3, r3, #24
 800e552:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 800e558:	693b      	ldr	r3, [r7, #16]
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 800e560:	693b      	ldr	r3, [r7, #16]
 800e562:	0a1b      	lsrs	r3, r3, #8
 800e564:	b2da      	uxtb	r2, r3
 800e566:	683b      	ldr	r3, [r7, #0]
 800e568:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 800e56a:	693b      	ldr	r3, [r7, #16]
 800e56c:	0d1b      	lsrs	r3, r3, #20
 800e56e:	b2db      	uxtb	r3, r3
 800e570:	f003 030f 	and.w	r3, r3, #15
 800e574:	b2da      	uxtb	r2, r3
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 800e57a:	693b      	ldr	r3, [r7, #16]
 800e57c:	0c1b      	lsrs	r3, r3, #16
 800e57e:	b29b      	uxth	r3, r3
 800e580:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800e584:	b29a      	uxth	r2, r3
 800e586:	697b      	ldr	r3, [r7, #20]
 800e588:	b29b      	uxth	r3, r3
 800e58a:	b2db      	uxtb	r3, r3
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	4313      	orrs	r3, r2
 800e590:	b29a      	uxth	r2, r3
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 800e596:	697b      	ldr	r3, [r7, #20]
 800e598:	0a9b      	lsrs	r3, r3, #10
 800e59a:	b2db      	uxtb	r3, r3
 800e59c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e5a0:	b2da      	uxtb	r2, r3
 800e5a2:	683b      	ldr	r3, [r7, #0]
 800e5a4:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 800e5a6:	697b      	ldr	r3, [r7, #20]
 800e5a8:	0a1b      	lsrs	r3, r3, #8
 800e5aa:	b2db      	uxtb	r3, r3
 800e5ac:	f003 0303 	and.w	r3, r3, #3
 800e5b0:	b2da      	uxtb	r2, r3
 800e5b2:	683b      	ldr	r3, [r7, #0]
 800e5b4:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 800e5b6:	697b      	ldr	r3, [r7, #20]
 800e5b8:	091b      	lsrs	r3, r3, #4
 800e5ba:	b2db      	uxtb	r3, r3
 800e5bc:	f003 030f 	and.w	r3, r3, #15
 800e5c0:	b2da      	uxtb	r2, r3
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 800e5c6:	697b      	ldr	r3, [r7, #20]
 800e5c8:	b2db      	uxtb	r3, r3
 800e5ca:	f003 030f 	and.w	r3, r3, #15
 800e5ce:	b2da      	uxtb	r2, r3
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 800e5d4:	69bb      	ldr	r3, [r7, #24]
 800e5d6:	0e1b      	lsrs	r3, r3, #24
 800e5d8:	b2da      	uxtb	r2, r3
 800e5da:	683b      	ldr	r3, [r7, #0]
 800e5dc:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	681b      	ldr	r3, [r3, #0]
 800e5e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e5e6:	4618      	mov	r0, r3
 800e5e8:	f003 f9ee 	bl	80119c8 <SDMMC_CmdBlockLength>
 800e5ec:	64b8      	str	r0, [r7, #72]	; 0x48
  if(errorstate != HAL_SD_ERROR_NONE)
 800e5ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d00d      	beq.n	800e610 <HAL_SD_GetCardStatus+0x15c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	681b      	ldr	r3, [r3, #0]
 800e5f8:	4a08      	ldr	r2, [pc, #32]	; (800e61c <HAL_SD_GetCardStatus+0x168>)
 800e5fa:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 800e5fc:	687b      	ldr	r3, [r7, #4]
 800e5fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e600:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2201      	movs	r2, #1
 800e606:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800e60a:	2301      	movs	r3, #1
 800e60c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }

  return status;
 800e610:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 800e614:	4618      	mov	r0, r3
 800e616:	3750      	adds	r7, #80	; 0x50
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}
 800e61c:	1fe00fff 	.word	0x1fe00fff

0800e620 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 800e620:	b480      	push	{r7}
 800e622:	b083      	sub	sp, #12
 800e624:	af00      	add	r7, sp, #0
 800e626:	6078      	str	r0, [r7, #4]
 800e628:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800e63a:	687b      	ldr	r3, [r7, #4]
 800e63c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800e65e:	683b      	ldr	r3, [r7, #0]
 800e660:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800e666:	683b      	ldr	r3, [r7, #0]
 800e668:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800e66a:	2300      	movs	r3, #0
}
 800e66c:	4618      	mov	r0, r3
 800e66e:	370c      	adds	r7, #12
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr

0800e678 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 800e678:	b5b0      	push	{r4, r5, r7, lr}
 800e67a:	b08e      	sub	sp, #56	; 0x38
 800e67c:	af04      	add	r7, sp, #16
 800e67e:	6078      	str	r0, [r7, #4]
 800e680:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 800e682:	2300      	movs	r3, #0
 800e684:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	2203      	movs	r2, #3
 800e68c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e690:	687b      	ldr	r3, [r7, #4]
 800e692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e694:	2b03      	cmp	r3, #3
 800e696:	d02e      	beq.n	800e6f6 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e69e:	d106      	bne.n	800e6ae <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6a4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	639a      	str	r2, [r3, #56]	; 0x38
 800e6ac:	e029      	b.n	800e702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 800e6ae:	683b      	ldr	r3, [r7, #0]
 800e6b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e6b4:	d10a      	bne.n	800e6cc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 800e6b6:	6878      	ldr	r0, [r7, #4]
 800e6b8:	f000 fb66 	bl	800ed88 <SD_WideBus_Enable>
 800e6bc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6c2:	6a3b      	ldr	r3, [r7, #32]
 800e6c4:	431a      	orrs	r2, r3
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	639a      	str	r2, [r3, #56]	; 0x38
 800e6ca:	e01a      	b.n	800e702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 800e6cc:	683b      	ldr	r3, [r7, #0]
 800e6ce:	2b00      	cmp	r3, #0
 800e6d0:	d10a      	bne.n	800e6e8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fba3 	bl	800ee1e <SD_WideBus_Disable>
 800e6d8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e6de:	6a3b      	ldr	r3, [r7, #32]
 800e6e0:	431a      	orrs	r2, r3
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	639a      	str	r2, [r3, #56]	; 0x38
 800e6e6:	e00c      	b.n	800e702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6ec:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	639a      	str	r2, [r3, #56]	; 0x38
 800e6f4:	e005      	b.n	800e702 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6fa:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800e6fe:	687b      	ldr	r3, [r7, #4]
 800e700:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e706:	2b00      	cmp	r3, #0
 800e708:	d007      	beq.n	800e71a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	681b      	ldr	r3, [r3, #0]
 800e70e:	4a2e      	ldr	r2, [pc, #184]	; (800e7c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e710:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e712:	2301      	movs	r3, #1
 800e714:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e718:	e034      	b.n	800e784 <HAL_SD_ConfigWideBusOperation+0x10c>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	60bb      	str	r3, [r7, #8]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800e720:	687b      	ldr	r3, [r7, #4]
 800e722:	689b      	ldr	r3, [r3, #8]
 800e724:	60fb      	str	r3, [r7, #12]
    Init.BusWide             = WideMode;
 800e726:	683b      	ldr	r3, [r7, #0]
 800e728:	613b      	str	r3, [r7, #16]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	691b      	ldr	r3, [r3, #16]
 800e72e:	617b      	str	r3, [r7, #20]

    /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
    if(hsd->Init.ClockDiv >= SDMMC_NSpeed_CLK_DIV)
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	695b      	ldr	r3, [r3, #20]
 800e734:	2b03      	cmp	r3, #3
 800e736:	d903      	bls.n	800e740 <HAL_SD_ConfigWideBusOperation+0xc8>
    {
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	695b      	ldr	r3, [r3, #20]
 800e73c:	61bb      	str	r3, [r7, #24]
 800e73e:	e012      	b.n	800e766 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e744:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e748:	d103      	bne.n	800e752 <HAL_SD_ConfigWideBusOperation+0xda>
    {
      /* UltraHigh speed SD card,user Clock div */
      Init.ClockDiv = hsd->Init.ClockDiv;
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	695b      	ldr	r3, [r3, #20]
 800e74e:	61bb      	str	r3, [r7, #24]
 800e750:	e009      	b.n	800e766 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 800e752:	687b      	ldr	r3, [r7, #4]
 800e754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e75a:	d102      	bne.n	800e762 <HAL_SD_ConfigWideBusOperation+0xea>
    {
      /* High speed SD card, Max Frequency = 50Mhz */
      Init.ClockDiv = SDMMC_HSpeed_CLK_DIV;
 800e75c:	2302      	movs	r3, #2
 800e75e:	61bb      	str	r3, [r7, #24]
 800e760:	e001      	b.n	800e766 <HAL_SD_ConfigWideBusOperation+0xee>
    }
    else
    {
      /* No High speed SD card, Max Frequency = 25Mhz */
      Init.ClockDiv = SDMMC_NSpeed_CLK_DIV;
 800e762:	2304      	movs	r3, #4
 800e764:	61bb      	str	r3, [r7, #24]
    }

    (void)SDMMC_Init(hsd->Instance, Init);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	681d      	ldr	r5, [r3, #0]
 800e76a:	466c      	mov	r4, sp
 800e76c:	f107 0314 	add.w	r3, r7, #20
 800e770:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800e774:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800e778:	f107 0308 	add.w	r3, r7, #8
 800e77c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800e77e:	4628      	mov	r0, r5
 800e780:	f003 f844 	bl	801180c <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	681b      	ldr	r3, [r3, #0]
 800e788:	f44f 7100 	mov.w	r1, #512	; 0x200
 800e78c:	4618      	mov	r0, r3
 800e78e:	f003 f91b 	bl	80119c8 <SDMMC_CmdBlockLength>
 800e792:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e794:	6a3b      	ldr	r3, [r7, #32]
 800e796:	2b00      	cmp	r3, #0
 800e798:	d00c      	beq.n	800e7b4 <HAL_SD_ConfigWideBusOperation+0x13c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	681b      	ldr	r3, [r3, #0]
 800e79e:	4a0a      	ldr	r2, [pc, #40]	; (800e7c8 <HAL_SD_ConfigWideBusOperation+0x150>)
 800e7a0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	431a      	orrs	r2, r3
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	2201      	movs	r2, #1
 800e7b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 800e7bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3728      	adds	r7, #40	; 0x28
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e7c8:	1fe00fff 	.word	0x1fe00fff

0800e7cc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 800e7cc:	b580      	push	{r7, lr}
 800e7ce:	b086      	sub	sp, #24
 800e7d0:	af00      	add	r7, sp, #0
 800e7d2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800e7d8:	f107 030c 	add.w	r3, r7, #12
 800e7dc:	4619      	mov	r1, r3
 800e7de:	6878      	ldr	r0, [r7, #4]
 800e7e0:	f000 faaa 	bl	800ed38 <SD_SendStatus>
 800e7e4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e7e6:	697b      	ldr	r3, [r7, #20]
 800e7e8:	2b00      	cmp	r3, #0
 800e7ea:	d005      	beq.n	800e7f8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e7f0:	697b      	ldr	r3, [r7, #20]
 800e7f2:	431a      	orrs	r2, r3
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800e7f8:	68fb      	ldr	r3, [r7, #12]
 800e7fa:	0a5b      	lsrs	r3, r3, #9
 800e7fc:	f003 030f 	and.w	r3, r3, #15
 800e800:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800e802:	693b      	ldr	r3, [r7, #16]
}
 800e804:	4618      	mov	r0, r3
 800e806:	3718      	adds	r7, #24
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 800e80c:	b590      	push	{r4, r7, lr}
 800e80e:	b091      	sub	sp, #68	; 0x44
 800e810:	af00      	add	r7, sp, #0
 800e812:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800e814:	2301      	movs	r3, #1
 800e816:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	681b      	ldr	r3, [r3, #0]
 800e81c:	4618      	mov	r0, r3
 800e81e:	f003 f84e 	bl	80118be <SDMMC_GetPowerState>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d102      	bne.n	800e82e <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800e828:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800e82c:	e0a8      	b.n	800e980 <SD_InitCard+0x174>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e832:	2b03      	cmp	r3, #3
 800e834:	d02e      	beq.n	800e894 <SD_InitCard+0x88>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	4618      	mov	r0, r3
 800e83c:	f003 fa9a 	bl	8011d74 <SDMMC_CmdSendCID>
 800e840:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <SD_InitCard+0x40>
    {
      return errorstate;
 800e848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e84a:	e099      	b.n	800e980 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2100      	movs	r1, #0
 800e852:	4618      	mov	r0, r3
 800e854:	f003 f879 	bl	801194a <SDMMC_GetResponse>
 800e858:	4602      	mov	r2, r0
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2104      	movs	r1, #4
 800e864:	4618      	mov	r0, r3
 800e866:	f003 f870 	bl	801194a <SDMMC_GetResponse>
 800e86a:	4602      	mov	r2, r0
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	2108      	movs	r1, #8
 800e876:	4618      	mov	r0, r3
 800e878:	f003 f867 	bl	801194a <SDMMC_GetResponse>
 800e87c:	4602      	mov	r2, r0
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	681b      	ldr	r3, [r3, #0]
 800e886:	210c      	movs	r1, #12
 800e888:	4618      	mov	r0, r3
 800e88a:	f003 f85e 	bl	801194a <SDMMC_GetResponse>
 800e88e:	4602      	mov	r2, r0
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	67da      	str	r2, [r3, #124]	; 0x7c
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e898:	2b03      	cmp	r3, #3
 800e89a:	d00d      	beq.n	800e8b8 <SD_InitCard+0xac>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	f107 020e 	add.w	r2, r7, #14
 800e8a4:	4611      	mov	r1, r2
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f003 faa3 	bl	8011df2 <SDMMC_CmdSetRelAdd>
 800e8ac:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d001      	beq.n	800e8b8 <SD_InitCard+0xac>
    {
      return errorstate;
 800e8b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8b6:	e063      	b.n	800e980 <SD_InitCard+0x174>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e8bc:	2b03      	cmp	r3, #3
 800e8be:	d036      	beq.n	800e92e <SD_InitCard+0x122>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800e8c0:	89fb      	ldrh	r3, [r7, #14]
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	681a      	ldr	r2, [r3, #0]
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e8d0:	041b      	lsls	r3, r3, #16
 800e8d2:	4619      	mov	r1, r3
 800e8d4:	4610      	mov	r0, r2
 800e8d6:	f003 fa6c 	bl	8011db2 <SDMMC_CmdSendCSD>
 800e8da:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800e8dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d001      	beq.n	800e8e6 <SD_InitCard+0xda>
    {
      return errorstate;
 800e8e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8e4:	e04c      	b.n	800e980 <SD_InitCard+0x174>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	681b      	ldr	r3, [r3, #0]
 800e8ea:	2100      	movs	r1, #0
 800e8ec:	4618      	mov	r0, r3
 800e8ee:	f003 f82c 	bl	801194a <SDMMC_GetResponse>
 800e8f2:	4602      	mov	r2, r0
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	2104      	movs	r1, #4
 800e8fe:	4618      	mov	r0, r3
 800e900:	f003 f823 	bl	801194a <SDMMC_GetResponse>
 800e904:	4602      	mov	r2, r0
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	2108      	movs	r1, #8
 800e910:	4618      	mov	r0, r3
 800e912:	f003 f81a 	bl	801194a <SDMMC_GetResponse>
 800e916:	4602      	mov	r2, r0
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	681b      	ldr	r3, [r3, #0]
 800e920:	210c      	movs	r1, #12
 800e922:	4618      	mov	r0, r3
 800e924:	f003 f811 	bl	801194a <SDMMC_GetResponse>
 800e928:	4602      	mov	r2, r0
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	66da      	str	r2, [r3, #108]	; 0x6c
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	2104      	movs	r1, #4
 800e934:	4618      	mov	r0, r3
 800e936:	f003 f808 	bl	801194a <SDMMC_GetResponse>
 800e93a:	4603      	mov	r3, r0
 800e93c:	0d1a      	lsrs	r2, r3, #20
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	645a      	str	r2, [r3, #68]	; 0x44

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800e942:	f107 0310 	add.w	r3, r7, #16
 800e946:	4619      	mov	r1, r3
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f7ff fc0f 	bl	800e16c <HAL_SD_GetCardCSD>
 800e94e:	4603      	mov	r3, r0
 800e950:	2b00      	cmp	r3, #0
 800e952:	d002      	beq.n	800e95a <SD_InitCard+0x14e>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800e954:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e958:	e012      	b.n	800e980 <SD_InitCard+0x174>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	6819      	ldr	r1, [r3, #0]
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e962:	041b      	lsls	r3, r3, #16
 800e964:	f04f 0400 	mov.w	r4, #0
 800e968:	461a      	mov	r2, r3
 800e96a:	4623      	mov	r3, r4
 800e96c:	4608      	mov	r0, r1
 800e96e:	f003 f917 	bl	8011ba0 <SDMMC_CmdSelDesel>
 800e972:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800e974:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e976:	2b00      	cmp	r3, #0
 800e978:	d001      	beq.n	800e97e <SD_InitCard+0x172>
  {
    return errorstate;
 800e97a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e97c:	e000      	b.n	800e980 <SD_InitCard+0x174>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800e97e:	2300      	movs	r3, #0
}
 800e980:	4618      	mov	r0, r3
 800e982:	3744      	adds	r7, #68	; 0x44
 800e984:	46bd      	mov	sp, r7
 800e986:	bd90      	pop	{r4, r7, pc}

0800e988 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800e988:	b580      	push	{r7, lr}
 800e98a:	b088      	sub	sp, #32
 800e98c:	af00      	add	r7, sp, #0
 800e98e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800e990:	2300      	movs	r3, #0
 800e992:	60fb      	str	r3, [r7, #12]
  uint32_t response = 0U, validvoltage = 0U;
 800e994:	2300      	movs	r3, #0
 800e996:	61fb      	str	r3, [r7, #28]
 800e998:	2300      	movs	r3, #0
 800e99a:	61bb      	str	r3, [r7, #24]
  uint32_t errorstate;
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
 800e99c:	f7f6 fa2c 	bl	8004df8 <HAL_GetTick>
 800e9a0:	6178      	str	r0, [r7, #20]
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	f003 f91e 	bl	8011be8 <SDMMC_CmdGoIdleState>
 800e9ac:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9ae:	693b      	ldr	r3, [r7, #16]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d001      	beq.n	800e9b8 <SD_PowerON+0x30>
  {
    return errorstate;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	e0e9      	b.n	800eb8c <SD_PowerON+0x204>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f003 f931 	bl	8011c24 <SDMMC_CmdOperCond>
 800e9c2:	6138      	str	r0, [r7, #16]
  if(errorstate != HAL_SD_ERROR_NONE)
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00d      	beq.n	800e9e6 <SD_PowerON+0x5e>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2200      	movs	r2, #0
 800e9ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4618      	mov	r0, r3
 800e9d6:	f003 f907 	bl	8011be8 <SDMMC_CmdGoIdleState>
 800e9da:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800e9dc:	693b      	ldr	r3, [r7, #16]
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d004      	beq.n	800e9ec <SD_PowerON+0x64>
    {
      return errorstate;
 800e9e2:	693b      	ldr	r3, [r7, #16]
 800e9e4:	e0d2      	b.n	800eb8c <SD_PowerON+0x204>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	2201      	movs	r2, #1
 800e9ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9f0:	2b01      	cmp	r3, #1
 800e9f2:	d137      	bne.n	800ea64 <SD_PowerON+0xdc>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	f003 f932 	bl	8011c64 <SDMMC_CmdAppCommand>
 800ea00:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d02d      	beq.n	800ea64 <SD_PowerON+0xdc>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea08:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea0c:	e0be      	b.n	800eb8c <SD_PowerON+0x204>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	2100      	movs	r1, #0
 800ea14:	4618      	mov	r0, r3
 800ea16:	f003 f925 	bl	8011c64 <SDMMC_CmdAppCommand>
 800ea1a:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea1c:	693b      	ldr	r3, [r7, #16]
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d001      	beq.n	800ea26 <SD_PowerON+0x9e>
    {
      return errorstate;
 800ea22:	693b      	ldr	r3, [r7, #16]
 800ea24:	e0b2      	b.n	800eb8c <SD_PowerON+0x204>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	681b      	ldr	r3, [r3, #0]
 800ea2a:	495a      	ldr	r1, [pc, #360]	; (800eb94 <SD_PowerON+0x20c>)
 800ea2c:	4618      	mov	r0, r3
 800ea2e:	f003 f93c 	bl	8011caa <SDMMC_CmdAppOperCommand>
 800ea32:	6138      	str	r0, [r7, #16]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	2b00      	cmp	r3, #0
 800ea38:	d002      	beq.n	800ea40 <SD_PowerON+0xb8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800ea3a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800ea3e:	e0a5      	b.n	800eb8c <SD_PowerON+0x204>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	2100      	movs	r1, #0
 800ea46:	4618      	mov	r0, r3
 800ea48:	f002 ff7f 	bl	801194a <SDMMC_GetResponse>
 800ea4c:	61f8      	str	r0, [r7, #28]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 800ea4e:	69fb      	ldr	r3, [r7, #28]
 800ea50:	0fdb      	lsrs	r3, r3, #31
 800ea52:	2b01      	cmp	r3, #1
 800ea54:	d101      	bne.n	800ea5a <SD_PowerON+0xd2>
 800ea56:	2301      	movs	r3, #1
 800ea58:	e000      	b.n	800ea5c <SD_PowerON+0xd4>
 800ea5a:	2300      	movs	r3, #0
 800ea5c:	61bb      	str	r3, [r7, #24]

    count++;
 800ea5e:	68fb      	ldr	r3, [r7, #12]
 800ea60:	3301      	adds	r3, #1
 800ea62:	60fb      	str	r3, [r7, #12]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea6a:	4293      	cmp	r3, r2
 800ea6c:	d802      	bhi.n	800ea74 <SD_PowerON+0xec>
 800ea6e:	69bb      	ldr	r3, [r7, #24]
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0cc      	beq.n	800ea0e <SD_PowerON+0x86>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800ea7a:	4293      	cmp	r3, r2
 800ea7c:	d902      	bls.n	800ea84 <SD_PowerON+0xfc>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800ea7e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ea82:	e083      	b.n	800eb8c <SD_PowerON+0x204>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800ea84:	69fb      	ldr	r3, [r7, #28]
 800ea86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800ea8a:	2b00      	cmp	r3, #0
 800ea8c:	d07d      	beq.n	800eb8a <SD_PowerON+0x202>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	2201      	movs	r2, #1
 800ea92:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_SD_TRANSCEIVER != 0U)
    if (hsd->Init.TranceiverPresent == SDMMC_TRANSCEIVER_PRESENT)
 800ea94:	687b      	ldr	r3, [r7, #4]
 800ea96:	699b      	ldr	r3, [r3, #24]
 800ea98:	2b02      	cmp	r3, #2
 800ea9a:	d176      	bne.n	800eb8a <SD_PowerON+0x202>
    {
      if((response & SD_SWITCH_1_8V_CAPACITY) == SD_SWITCH_1_8V_CAPACITY)
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d071      	beq.n	800eb8a <SD_PowerON+0x202>
      {
        hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eaac:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Start switching procedue */
        hsd->Instance->POWER |= SDMMC_POWER_VSWITCHEN;
 800eaae:	687b      	ldr	r3, [r7, #4]
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	681a      	ldr	r2, [r3, #0]
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	f042 0208 	orr.w	r2, r2, #8
 800eabc:	601a      	str	r2, [r3, #0]

        /* Send CMD11 to switch 1.8V mode */
        errorstate = SDMMC_CmdVoltageSwitch(hsd->Instance);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	681b      	ldr	r3, [r3, #0]
 800eac2:	4618      	mov	r0, r3
 800eac4:	f003 f9fc 	bl	8011ec0 <SDMMC_CmdVoltageSwitch>
 800eac8:	6138      	str	r0, [r7, #16]
        if(errorstate != HAL_SD_ERROR_NONE)
 800eaca:	693b      	ldr	r3, [r7, #16]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d00c      	beq.n	800eaea <SD_PowerON+0x162>
        {
          return errorstate;
 800ead0:	693b      	ldr	r3, [r7, #16]
 800ead2:	e05b      	b.n	800eb8c <SD_PowerON+0x204>
        }

        /* Check to CKSTOP */
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
        {
          if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ead4:	f7f6 f990 	bl	8004df8 <HAL_GetTick>
 800ead8:	4602      	mov	r2, r0
 800eada:	697b      	ldr	r3, [r7, #20]
 800eadc:	1ad3      	subs	r3, r2, r3
 800eade:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eae2:	d102      	bne.n	800eaea <SD_PowerON+0x162>
          {
            return HAL_SD_ERROR_TIMEOUT;
 800eae4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eae8:	e050      	b.n	800eb8c <SD_PowerON+0x204>
        while(( hsd->Instance->STA & SDMMC_FLAG_CKSTOP) != SDMMC_FLAG_CKSTOP)
 800eaea:	687b      	ldr	r3, [r7, #4]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eaf0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eaf4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800eaf8:	d1ec      	bne.n	800ead4 <SD_PowerON+0x14c>
          }
        }

        /* Clear CKSTOP Flag */
        hsd->Instance->ICR = SDMMC_FLAG_CKSTOP;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800eb02:	639a      	str	r2, [r3, #56]	; 0x38

        /* Check to BusyD0 */
        if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) != SDMMC_FLAG_BUSYD0)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb12:	d002      	beq.n	800eb1a <SD_PowerON+0x192>
        {
          /* Error when activate Voltage Switch in SDMMC Peripheral */
          return SDMMC_ERROR_UNSUPPORTED_FEATURE;
 800eb14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800eb18:	e038      	b.n	800eb8c <SD_PowerON+0x204>
        {
          /* Enable Transceiver Switch PIN */
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->DriveTransceiver_1_8V_Callback(SET);
#else
          HAL_SD_DriveTransceiver_1_8V_Callback(SET);
 800eb1a:	2001      	movs	r0, #1
 800eb1c:	f7ff fb1a 	bl	800e154 <HAL_SD_DriveTransceiver_1_8V_Callback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

          /* Switch ready */
          hsd->Instance->POWER |= SDMMC_POWER_VSWITCH;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	f042 0204 	orr.w	r2, r2, #4
 800eb2e:	601a      	str	r2, [r3, #0]

          /* Check VSWEND Flag */
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800eb30:	e00a      	b.n	800eb48 <SD_PowerON+0x1c0>
          {
            if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800eb32:	f7f6 f961 	bl	8004df8 <HAL_GetTick>
 800eb36:	4602      	mov	r2, r0
 800eb38:	697b      	ldr	r3, [r7, #20]
 800eb3a:	1ad3      	subs	r3, r2, r3
 800eb3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb40:	d102      	bne.n	800eb48 <SD_PowerON+0x1c0>
            {
              return HAL_SD_ERROR_TIMEOUT;
 800eb42:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eb46:	e021      	b.n	800eb8c <SD_PowerON+0x204>
          while(( hsd->Instance->STA & SDMMC_FLAG_VSWEND) != SDMMC_FLAG_VSWEND)
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb52:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800eb56:	d1ec      	bne.n	800eb32 <SD_PowerON+0x1aa>
            }
          }

          /* Clear VSWEND Flag */
          hsd->Instance->ICR = SDMMC_FLAG_VSWEND;
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	681b      	ldr	r3, [r3, #0]
 800eb5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800eb60:	639a      	str	r2, [r3, #56]	; 0x38

          /* Check BusyD0 status */
          if(( hsd->Instance->STA & SDMMC_FLAG_BUSYD0) == SDMMC_FLAG_BUSYD0)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eb6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb70:	d102      	bne.n	800eb78 <SD_PowerON+0x1f0>
          {
            /* Error when enabling 1.8V mode */
            return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800eb72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800eb76:	e009      	b.n	800eb8c <SD_PowerON+0x204>
          }
          /* Switch to 1.8V OK */

          /* Disable VSWITCH FLAG from SDMMC Peripheral */
          hsd->Instance->POWER = 0x13U;
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	681b      	ldr	r3, [r3, #0]
 800eb7c:	2213      	movs	r2, #19
 800eb7e:	601a      	str	r2, [r3, #0]

          /* Clean Status flags */
          hsd->Instance->ICR = 0xFFFFFFFFU;
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	f04f 32ff 	mov.w	r2, #4294967295
 800eb88:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 800eb8a:	2300      	movs	r3, #0
}
 800eb8c:	4618      	mov	r0, r3
 800eb8e:	3720      	adds	r7, #32
 800eb90:	46bd      	mov	sp, r7
 800eb92:	bd80      	pop	{r7, pc}
 800eb94:	c1100000 	.word	0xc1100000

0800eb98 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b08c      	sub	sp, #48	; 0x30
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eba2:	f7f6 f929 	bl	8004df8 <HAL_GetTick>
 800eba6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 800eba8:	683b      	ldr	r3, [r7, #0]
 800ebaa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	2100      	movs	r1, #0
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f002 fec9 	bl	801194a <SDMMC_GetResponse>
 800ebb8:	4603      	mov	r3, r0
 800ebba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ebbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ebc2:	d102      	bne.n	800ebca <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ebc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ebc8:	e0b0      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	681b      	ldr	r3, [r3, #0]
 800ebce:	2140      	movs	r1, #64	; 0x40
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	f002 fef9 	bl	80119c8 <SDMMC_CmdBlockLength>
 800ebd6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebd8:	6a3b      	ldr	r3, [r7, #32]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	d005      	beq.n	800ebea <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ebde:	687b      	ldr	r3, [r7, #4]
 800ebe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ebe6:	6a3b      	ldr	r3, [r7, #32]
 800ebe8:	e0a0      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681a      	ldr	r2, [r3, #0]
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ebf2:	041b      	lsls	r3, r3, #16
 800ebf4:	4619      	mov	r1, r3
 800ebf6:	4610      	mov	r0, r2
 800ebf8:	f003 f834 	bl	8011c64 <SDMMC_CmdAppCommand>
 800ebfc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ebfe:	6a3b      	ldr	r3, [r7, #32]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d005      	beq.n	800ec10 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ec0c:	6a3b      	ldr	r3, [r7, #32]
 800ec0e:	e08d      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ec10:	f04f 33ff 	mov.w	r3, #4294967295
 800ec14:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 800ec16:	2340      	movs	r3, #64	; 0x40
 800ec18:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 800ec1a:	2360      	movs	r3, #96	; 0x60
 800ec1c:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ec1e:	2302      	movs	r3, #2
 800ec20:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ec22:	2300      	movs	r3, #0
 800ec24:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ec26:	2301      	movs	r3, #1
 800ec28:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	f107 0208 	add.w	r2, r7, #8
 800ec32:	4611      	mov	r1, r2
 800ec34:	4618      	mov	r0, r3
 800ec36:	f002 fe9b 	bl	8011970 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	4618      	mov	r0, r3
 800ec40:	f003 f91c 	bl	8011e7c <SDMMC_CmdStatusRegister>
 800ec44:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ec46:	6a3b      	ldr	r3, [r7, #32]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d02b      	beq.n	800eca4 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	639a      	str	r2, [r3, #56]	; 0x38
    return errorstate;
 800ec54:	6a3b      	ldr	r3, [r7, #32]
 800ec56:	e069      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ec5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ec62:	2b00      	cmp	r3, #0
 800ec64:	d013      	beq.n	800ec8e <SD_SendSDStatus+0xf6>
    {
      for(count = 0U; count < 8U; count++)
 800ec66:	2300      	movs	r3, #0
 800ec68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec6a:	e00d      	b.n	800ec88 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	681b      	ldr	r3, [r3, #0]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f002 fdf5 	bl	8011860 <SDMMC_ReadFIFO>
 800ec76:	4602      	mov	r2, r0
 800ec78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7a:	601a      	str	r2, [r3, #0]
        pData++;
 800ec7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec7e:	3304      	adds	r3, #4
 800ec80:	62bb      	str	r3, [r7, #40]	; 0x28
      for(count = 0U; count < 8U; count++)
 800ec82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec84:	3301      	adds	r3, #1
 800ec86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ec88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec8a:	2b07      	cmp	r3, #7
 800ec8c:	d9ee      	bls.n	800ec6c <SD_SendSDStatus+0xd4>
      }
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ec8e:	f7f6 f8b3 	bl	8004df8 <HAL_GetTick>
 800ec92:	4602      	mov	r2, r0
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	1ad3      	subs	r3, r2, r3
 800ec98:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec9c:	d102      	bne.n	800eca4 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ec9e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800eca2:	e043      	b.n	800ed2c <SD_SendSDStatus+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecaa:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	d0d2      	beq.n	800ec58 <SD_SendSDStatus+0xc0>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecb8:	f003 0308 	and.w	r3, r3, #8
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d001      	beq.n	800ecc4 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 800ecc0:	2308      	movs	r3, #8
 800ecc2:	e033      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecca:	f003 0302 	and.w	r3, r3, #2
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	d001      	beq.n	800ecd6 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800ecd2:	2302      	movs	r3, #2
 800ecd4:	e02a      	b.n	800ed2c <SD_SendSDStatus+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ecdc:	f003 0320 	and.w	r3, r3, #32
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d017      	beq.n	800ed14 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 800ece4:	2320      	movs	r3, #32
 800ece6:	e021      	b.n	800ed2c <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	4618      	mov	r0, r3
 800ecee:	f002 fdb7 	bl	8011860 <SDMMC_ReadFIFO>
 800ecf2:	4602      	mov	r2, r0
 800ecf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecf6:	601a      	str	r2, [r3, #0]
    pData++;
 800ecf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ecfa:	3304      	adds	r3, #4
 800ecfc:	62bb      	str	r3, [r7, #40]	; 0x28

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ecfe:	f7f6 f87b 	bl	8004df8 <HAL_GetTick>
 800ed02:	4602      	mov	r2, r0
 800ed04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed06:	1ad3      	subs	r3, r2, r3
 800ed08:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed0c:	d102      	bne.n	800ed14 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ed0e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ed12:	e00b      	b.n	800ed2c <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ed1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800ed1e:	2b00      	cmp	r3, #0
 800ed20:	d1e2      	bne.n	800ece8 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	4a03      	ldr	r2, [pc, #12]	; (800ed34 <SD_SendSDStatus+0x19c>)
 800ed28:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 800ed2a:	2300      	movs	r3, #0
}
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	3730      	adds	r7, #48	; 0x30
 800ed30:	46bd      	mov	sp, r7
 800ed32:	bd80      	pop	{r7, pc}
 800ed34:	18000f3a 	.word	0x18000f3a

0800ed38 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 800ed38:	b580      	push	{r7, lr}
 800ed3a:	b084      	sub	sp, #16
 800ed3c:	af00      	add	r7, sp, #0
 800ed3e:	6078      	str	r0, [r7, #4]
 800ed40:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800ed42:	683b      	ldr	r3, [r7, #0]
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d102      	bne.n	800ed4e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 800ed48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ed4c:	e018      	b.n	800ed80 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	681a      	ldr	r2, [r3, #0]
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ed56:	041b      	lsls	r3, r3, #16
 800ed58:	4619      	mov	r1, r3
 800ed5a:	4610      	mov	r0, r2
 800ed5c:	f003 f86b 	bl	8011e36 <SDMMC_CmdSendStatus>
 800ed60:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ed62:	68fb      	ldr	r3, [r7, #12]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d001      	beq.n	800ed6c <SD_SendStatus+0x34>
  {
    return errorstate;
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	e009      	b.n	800ed80 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	2100      	movs	r1, #0
 800ed72:	4618      	mov	r0, r3
 800ed74:	f002 fde9 	bl	801194a <SDMMC_GetResponse>
 800ed78:	4602      	mov	r2, r0
 800ed7a:	683b      	ldr	r3, [r7, #0]
 800ed7c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800ed7e:	2300      	movs	r3, #0
}
 800ed80:	4618      	mov	r0, r3
 800ed82:	3710      	adds	r7, #16
 800ed84:	46bd      	mov	sp, r7
 800ed86:	bd80      	pop	{r7, pc}

0800ed88 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800ed88:	b580      	push	{r7, lr}
 800ed8a:	b086      	sub	sp, #24
 800ed8c:	af00      	add	r7, sp, #0
 800ed8e:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ed90:	2300      	movs	r3, #0
 800ed92:	60fb      	str	r3, [r7, #12]
 800ed94:	2300      	movs	r3, #0
 800ed96:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	681b      	ldr	r3, [r3, #0]
 800ed9c:	2100      	movs	r1, #0
 800ed9e:	4618      	mov	r0, r3
 800eda0:	f002 fdd3 	bl	801194a <SDMMC_GetResponse>
 800eda4:	4603      	mov	r3, r0
 800eda6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800edaa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800edae:	d102      	bne.n	800edb6 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800edb0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800edb4:	e02f      	b.n	800ee16 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800edb6:	f107 030c 	add.w	r3, r7, #12
 800edba:	4619      	mov	r1, r3
 800edbc:	6878      	ldr	r0, [r7, #4]
 800edbe:	f000 f879 	bl	800eeb4 <SD_FindSCR>
 800edc2:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800edc4:	697b      	ldr	r3, [r7, #20]
 800edc6:	2b00      	cmp	r3, #0
 800edc8:	d001      	beq.n	800edce <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800edca:	697b      	ldr	r3, [r7, #20]
 800edcc:	e023      	b.n	800ee16 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800edce:	693b      	ldr	r3, [r7, #16]
 800edd0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800edd4:	2b00      	cmp	r3, #0
 800edd6:	d01c      	beq.n	800ee12 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681a      	ldr	r2, [r3, #0]
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ede0:	041b      	lsls	r3, r3, #16
 800ede2:	4619      	mov	r1, r3
 800ede4:	4610      	mov	r0, r2
 800ede6:	f002 ff3d 	bl	8011c64 <SDMMC_CmdAppCommand>
 800edea:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800edec:	697b      	ldr	r3, [r7, #20]
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d001      	beq.n	800edf6 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 800edf2:	697b      	ldr	r3, [r7, #20]
 800edf4:	e00f      	b.n	800ee16 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	2102      	movs	r1, #2
 800edfc:	4618      	mov	r0, r3
 800edfe:	f002 ff74 	bl	8011cea <SDMMC_CmdBusWidth>
 800ee02:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee04:	697b      	ldr	r3, [r7, #20]
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d001      	beq.n	800ee0e <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800ee0a:	697b      	ldr	r3, [r7, #20]
 800ee0c:	e003      	b.n	800ee16 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800ee0e:	2300      	movs	r3, #0
 800ee10:	e001      	b.n	800ee16 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800ee12:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800ee16:	4618      	mov	r0, r3
 800ee18:	3718      	adds	r7, #24
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	bd80      	pop	{r7, pc}

0800ee1e <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 800ee1e:	b580      	push	{r7, lr}
 800ee20:	b086      	sub	sp, #24
 800ee22:	af00      	add	r7, sp, #0
 800ee24:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 800ee26:	2300      	movs	r3, #0
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	681b      	ldr	r3, [r3, #0]
 800ee32:	2100      	movs	r1, #0
 800ee34:	4618      	mov	r0, r3
 800ee36:	f002 fd88 	bl	801194a <SDMMC_GetResponse>
 800ee3a:	4603      	mov	r3, r0
 800ee3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ee40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ee44:	d102      	bne.n	800ee4c <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 800ee46:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee4a:	e02f      	b.n	800eeac <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800ee4c:	f107 030c 	add.w	r3, r7, #12
 800ee50:	4619      	mov	r1, r3
 800ee52:	6878      	ldr	r0, [r7, #4]
 800ee54:	f000 f82e 	bl	800eeb4 <SD_FindSCR>
 800ee58:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800ee5a:	697b      	ldr	r3, [r7, #20]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	e023      	b.n	800eeac <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d01c      	beq.n	800eea8 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	681a      	ldr	r2, [r3, #0]
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ee76:	041b      	lsls	r3, r3, #16
 800ee78:	4619      	mov	r1, r3
 800ee7a:	4610      	mov	r0, r2
 800ee7c:	f002 fef2 	bl	8011c64 <SDMMC_CmdAppCommand>
 800ee80:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee82:	697b      	ldr	r3, [r7, #20]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d001      	beq.n	800ee8c <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	e00f      	b.n	800eeac <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	2100      	movs	r1, #0
 800ee92:	4618      	mov	r0, r3
 800ee94:	f002 ff29 	bl	8011cea <SDMMC_CmdBusWidth>
 800ee98:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800ee9a:	697b      	ldr	r3, [r7, #20]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	d001      	beq.n	800eea4 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 800eea0:	697b      	ldr	r3, [r7, #20]
 800eea2:	e003      	b.n	800eeac <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 800eea4:	2300      	movs	r3, #0
 800eea6:	e001      	b.n	800eeac <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800eea8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 800eeac:	4618      	mov	r0, r3
 800eeae:	3718      	adds	r7, #24
 800eeb0:	46bd      	mov	sp, r7
 800eeb2:	bd80      	pop	{r7, pc}

0800eeb4 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b08e      	sub	sp, #56	; 0x38
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800eebe:	f7f5 ff9b 	bl	8004df8 <HAL_GetTick>
 800eec2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 800eec4:	2300      	movs	r3, #0
 800eec6:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 800eec8:	2300      	movs	r3, #0
 800eeca:	60bb      	str	r3, [r7, #8]
 800eecc:	2300      	movs	r3, #0
 800eece:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 800eed0:	683b      	ldr	r3, [r7, #0]
 800eed2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	681b      	ldr	r3, [r3, #0]
 800eed8:	2108      	movs	r1, #8
 800eeda:	4618      	mov	r0, r3
 800eedc:	f002 fd74 	bl	80119c8 <SDMMC_CmdBlockLength>
 800eee0:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800eee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d001      	beq.n	800eeec <SD_FindSCR+0x38>
  {
    return errorstate;
 800eee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeea:	e0ad      	b.n	800f048 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681a      	ldr	r2, [r3, #0]
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800eef4:	041b      	lsls	r3, r3, #16
 800eef6:	4619      	mov	r1, r3
 800eef8:	4610      	mov	r0, r2
 800eefa:	f002 feb3 	bl	8011c64 <SDMMC_CmdAppCommand>
 800eefe:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	2b00      	cmp	r3, #0
 800ef04:	d001      	beq.n	800ef0a <SD_FindSCR+0x56>
  {
    return errorstate;
 800ef06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef08:	e09e      	b.n	800f048 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800ef0a:	f04f 33ff 	mov.w	r3, #4294967295
 800ef0e:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 800ef10:	2308      	movs	r3, #8
 800ef12:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 800ef14:	2330      	movs	r3, #48	; 0x30
 800ef16:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800ef18:	2302      	movs	r3, #2
 800ef1a:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800ef1c:	2300      	movs	r3, #0
 800ef1e:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 800ef20:	2301      	movs	r3, #1
 800ef22:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	681b      	ldr	r3, [r3, #0]
 800ef28:	f107 0210 	add.w	r2, r7, #16
 800ef2c:	4611      	mov	r1, r2
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f002 fd1e 	bl	8011970 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	4618      	mov	r0, r3
 800ef3a:	f002 fef9 	bl	8011d30 <SDMMC_CmdSendSCR>
 800ef3e:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 800ef40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef42:	2b00      	cmp	r3, #0
 800ef44:	d027      	beq.n	800ef96 <SD_FindSCR+0xe2>
  {
    return errorstate;
 800ef46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef48:	e07e      	b.n	800f048 <SD_FindSCR+0x194>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
  {
    if((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	681b      	ldr	r3, [r3, #0]
 800ef4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ef50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	d113      	bne.n	800ef80 <SD_FindSCR+0xcc>
 800ef58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d110      	bne.n	800ef80 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	681b      	ldr	r3, [r3, #0]
 800ef62:	4618      	mov	r0, r3
 800ef64:	f002 fc7c 	bl	8011860 <SDMMC_ReadFIFO>
 800ef68:	4603      	mov	r3, r0
 800ef6a:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	4618      	mov	r0, r3
 800ef72:	f002 fc75 	bl	8011860 <SDMMC_ReadFIFO>
 800ef76:	4603      	mov	r3, r0
 800ef78:	60fb      	str	r3, [r7, #12]
      index++;
 800ef7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ef7c:	3301      	adds	r3, #1
 800ef7e:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800ef80:	f7f5 ff3a 	bl	8004df8 <HAL_GetTick>
 800ef84:	4602      	mov	r2, r0
 800ef86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ef88:	1ad3      	subs	r3, r2, r3
 800ef8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8e:	d102      	bne.n	800ef96 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800ef90:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ef94:	e058      	b.n	800f048 <SD_FindSCR+0x194>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND | SDMMC_FLAG_DATAEND))
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	681b      	ldr	r3, [r3, #0]
 800ef9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ef9c:	f240 532a 	movw	r3, #1322	; 0x52a
 800efa0:	4013      	ands	r3, r2
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d0d1      	beq.n	800ef4a <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efac:	f003 0308 	and.w	r3, r3, #8
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d005      	beq.n	800efc0 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	2208      	movs	r2, #8
 800efba:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800efbc:	2308      	movs	r3, #8
 800efbe:	e043      	b.n	800f048 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efc6:	f003 0302 	and.w	r3, r3, #2
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d005      	beq.n	800efda <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	2202      	movs	r2, #2
 800efd4:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 800efd6:	2302      	movs	r3, #2
 800efd8:	e036      	b.n	800f048 <SD_FindSCR+0x194>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	681b      	ldr	r3, [r3, #0]
 800efde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800efe0:	f003 0320 	and.w	r3, r3, #32
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d005      	beq.n	800eff4 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	681b      	ldr	r3, [r3, #0]
 800efec:	2220      	movs	r2, #32
 800efee:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800eff0:	2320      	movs	r3, #32
 800eff2:	e029      	b.n	800f048 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	4a15      	ldr	r2, [pc, #84]	; (800f050 <SD_FindSCR+0x19c>)
 800effa:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	061a      	lsls	r2, r3, #24
 800f000:	68fb      	ldr	r3, [r7, #12]
 800f002:	021b      	lsls	r3, r3, #8
 800f004:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f008:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	0a1b      	lsrs	r3, r3, #8
 800f00e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f012:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 800f014:	68fb      	ldr	r3, [r7, #12]
 800f016:	0e1b      	lsrs	r3, r3, #24
 800f018:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800f01a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f01c:	601a      	str	r2, [r3, #0]
    scr++;
 800f01e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f020:	3304      	adds	r3, #4
 800f022:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f024:	68bb      	ldr	r3, [r7, #8]
 800f026:	061a      	lsls	r2, r3, #24
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	021b      	lsls	r3, r3, #8
 800f02c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f030:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f032:	68bb      	ldr	r3, [r7, #8]
 800f034:	0a1b      	lsrs	r3, r3, #8
 800f036:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f03a:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 800f03c:	68bb      	ldr	r3, [r7, #8]
 800f03e:	0e1b      	lsrs	r3, r3, #24
 800f040:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 800f042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f044:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 800f046:	2300      	movs	r3, #0
}
 800f048:	4618      	mov	r0, r3
 800f04a:	3738      	adds	r7, #56	; 0x38
 800f04c:	46bd      	mov	sp, r7
 800f04e:	bd80      	pop	{r7, pc}
 800f050:	18000f3a 	.word	0x18000f3a

0800f054 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 800f054:	b580      	push	{r7, lr}
 800f056:	b086      	sub	sp, #24
 800f058:	af00      	add	r7, sp, #0
 800f05a:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f060:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= 32U)
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f066:	2b1f      	cmp	r3, #31
 800f068:	d936      	bls.n	800f0d8 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800f06a:	2300      	movs	r3, #0
 800f06c:	617b      	str	r3, [r7, #20]
 800f06e:	e027      	b.n	800f0c0 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4618      	mov	r0, r3
 800f076:	f002 fbf3 	bl	8011860 <SDMMC_ReadFIFO>
 800f07a:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	b2da      	uxtb	r2, r3
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	3301      	adds	r3, #1
 800f088:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	0a1b      	lsrs	r3, r3, #8
 800f08e:	b2da      	uxtb	r2, r3
 800f090:	693b      	ldr	r3, [r7, #16]
 800f092:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f094:	693b      	ldr	r3, [r7, #16]
 800f096:	3301      	adds	r3, #1
 800f098:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	0c1b      	lsrs	r3, r3, #16
 800f09e:	b2da      	uxtb	r2, r3
 800f0a0:	693b      	ldr	r3, [r7, #16]
 800f0a2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f0a4:	693b      	ldr	r3, [r7, #16]
 800f0a6:	3301      	adds	r3, #1
 800f0a8:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	0e1b      	lsrs	r3, r3, #24
 800f0ae:	b2da      	uxtb	r2, r3
 800f0b0:	693b      	ldr	r3, [r7, #16]
 800f0b2:	701a      	strb	r2, [r3, #0]
      tmp++;
 800f0b4:	693b      	ldr	r3, [r7, #16]
 800f0b6:	3301      	adds	r3, #1
 800f0b8:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 800f0ba:	697b      	ldr	r3, [r7, #20]
 800f0bc:	3301      	adds	r3, #1
 800f0be:	617b      	str	r3, [r7, #20]
 800f0c0:	697b      	ldr	r3, [r7, #20]
 800f0c2:	2b07      	cmp	r3, #7
 800f0c4:	d9d4      	bls.n	800f070 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	693a      	ldr	r2, [r7, #16]
 800f0ca:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize -= 32U;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f0d0:	f1a3 0220 	sub.w	r2, r3, #32
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800f0d8:	bf00      	nop
 800f0da:	3718      	adds	r7, #24
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b086      	sub	sp, #24
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  uint32_t count, data;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	6a1b      	ldr	r3, [r3, #32]
 800f0ec:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= 32U)
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0f2:	2b1f      	cmp	r3, #31
 800f0f4:	d93a      	bls.n	800f16c <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	617b      	str	r3, [r7, #20]
 800f0fa:	e02b      	b.n	800f154 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 800f0fc:	693b      	ldr	r3, [r7, #16]
 800f0fe:	781b      	ldrb	r3, [r3, #0]
 800f100:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f102:	693b      	ldr	r3, [r7, #16]
 800f104:	3301      	adds	r3, #1
 800f106:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 800f108:	693b      	ldr	r3, [r7, #16]
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	021a      	lsls	r2, r3, #8
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	4313      	orrs	r3, r2
 800f112:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f114:	693b      	ldr	r3, [r7, #16]
 800f116:	3301      	adds	r3, #1
 800f118:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 800f11a:	693b      	ldr	r3, [r7, #16]
 800f11c:	781b      	ldrb	r3, [r3, #0]
 800f11e:	041a      	lsls	r2, r3, #16
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f126:	693b      	ldr	r3, [r7, #16]
 800f128:	3301      	adds	r3, #1
 800f12a:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 800f12c:	693b      	ldr	r3, [r7, #16]
 800f12e:	781b      	ldrb	r3, [r3, #0]
 800f130:	061a      	lsls	r2, r3, #24
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	4313      	orrs	r3, r2
 800f136:	60fb      	str	r3, [r7, #12]
      tmp++;
 800f138:	693b      	ldr	r3, [r7, #16]
 800f13a:	3301      	adds	r3, #1
 800f13c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	f107 020c 	add.w	r2, r7, #12
 800f146:	4611      	mov	r1, r2
 800f148:	4618      	mov	r0, r3
 800f14a:	f002 fb96 	bl	801187a <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800f14e:	697b      	ldr	r3, [r7, #20]
 800f150:	3301      	adds	r3, #1
 800f152:	617b      	str	r3, [r7, #20]
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	2b07      	cmp	r3, #7
 800f158:	d9d0      	bls.n	800f0fc <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	693a      	ldr	r2, [r7, #16]
 800f15e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize -= 32U;
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f164:	f1a3 0220 	sub.w	r2, r3, #32
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 800f16c:	bf00      	nop
 800f16e:	3718      	adds	r7, #24
 800f170:	46bd      	mov	sp, r7
 800f172:	bd80      	pop	{r7, pc}

0800f174 <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f174:	b480      	push	{r7}
 800f176:	b083      	sub	sp, #12
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f17c:	bf00      	nop
 800f17e:	370c      	adds	r7, #12
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f188:	b480      	push	{r7}
 800f18a:	b083      	sub	sp, #12
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f190:	bf00      	nop
 800f192:	370c      	adds	r7, #12
 800f194:	46bd      	mov	sp, r7
 800f196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f19a:	4770      	bx	lr

0800f19c <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 800f19c:	b480      	push	{r7}
 800f19e:	b083      	sub	sp, #12
 800f1a0:	af00      	add	r7, sp, #0
 800f1a2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 800f1a4:	bf00      	nop
 800f1a6:	370c      	adds	r7, #12
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr

0800f1b0 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 800f1b0:	b480      	push	{r7}
 800f1b2:	b083      	sub	sp, #12
 800f1b4:	af00      	add	r7, sp, #0
 800f1b6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 800f1b8:	bf00      	nop
 800f1ba:	370c      	adds	r7, #12
 800f1bc:	46bd      	mov	sp, r7
 800f1be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c2:	4770      	bx	lr

0800f1c4 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b084      	sub	sp, #16
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  uint32_t crc_length = 0UL;
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	60fb      	str	r3, [r7, #12]
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2b00      	cmp	r3, #0
 800f1d4:	d101      	bne.n	800f1da <HAL_SPI_Init+0x16>
  {
    return HAL_ERROR;
 800f1d6:	2301      	movs	r3, #1
 800f1d8:	e0e2      	b.n	800f3a0 <HAL_SPI_Init+0x1dc>
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	2200      	movs	r2, #0
 800f1de:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	4a70      	ldr	r2, [pc, #448]	; (800f3a8 <HAL_SPI_Init+0x1e4>)
 800f1e6:	4293      	cmp	r3, r2
 800f1e8:	d00f      	beq.n	800f20a <HAL_SPI_Init+0x46>
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	681b      	ldr	r3, [r3, #0]
 800f1ee:	4a6f      	ldr	r2, [pc, #444]	; (800f3ac <HAL_SPI_Init+0x1e8>)
 800f1f0:	4293      	cmp	r3, r2
 800f1f2:	d00a      	beq.n	800f20a <HAL_SPI_Init+0x46>
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	4a6d      	ldr	r2, [pc, #436]	; (800f3b0 <HAL_SPI_Init+0x1ec>)
 800f1fa:	4293      	cmp	r3, r2
 800f1fc:	d005      	beq.n	800f20a <HAL_SPI_Init+0x46>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	2b0f      	cmp	r3, #15
 800f204:	d901      	bls.n	800f20a <HAL_SPI_Init+0x46>
  {
    return HAL_ERROR;
 800f206:	2301      	movs	r3, #1
 800f208:	e0ca      	b.n	800f3a0 <HAL_SPI_Init+0x1dc>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800f20a:	6878      	ldr	r0, [r7, #4]
 800f20c:	f001 f870 	bl	80102f0 <SPI_GetPacketSize>
 800f210:	60b8      	str	r0, [r7, #8]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	4a64      	ldr	r2, [pc, #400]	; (800f3a8 <HAL_SPI_Init+0x1e4>)
 800f218:	4293      	cmp	r3, r2
 800f21a:	d00c      	beq.n	800f236 <HAL_SPI_Init+0x72>
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	4a62      	ldr	r2, [pc, #392]	; (800f3ac <HAL_SPI_Init+0x1e8>)
 800f222:	4293      	cmp	r3, r2
 800f224:	d007      	beq.n	800f236 <HAL_SPI_Init+0x72>
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	4a61      	ldr	r2, [pc, #388]	; (800f3b0 <HAL_SPI_Init+0x1ec>)
 800f22c:	4293      	cmp	r3, r2
 800f22e:	d002      	beq.n	800f236 <HAL_SPI_Init+0x72>
 800f230:	68bb      	ldr	r3, [r7, #8]
 800f232:	2b08      	cmp	r3, #8
 800f234:	d811      	bhi.n	800f25a <HAL_SPI_Init+0x96>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800f23a:	4a5b      	ldr	r2, [pc, #364]	; (800f3a8 <HAL_SPI_Init+0x1e4>)
 800f23c:	4293      	cmp	r3, r2
 800f23e:	d009      	beq.n	800f254 <HAL_SPI_Init+0x90>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	4a59      	ldr	r2, [pc, #356]	; (800f3ac <HAL_SPI_Init+0x1e8>)
 800f246:	4293      	cmp	r3, r2
 800f248:	d004      	beq.n	800f254 <HAL_SPI_Init+0x90>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	681b      	ldr	r3, [r3, #0]
 800f24e:	4a58      	ldr	r2, [pc, #352]	; (800f3b0 <HAL_SPI_Init+0x1ec>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d104      	bne.n	800f25e <HAL_SPI_Init+0x9a>
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	2b10      	cmp	r3, #16
 800f258:	d901      	bls.n	800f25e <HAL_SPI_Init+0x9a>
  {
    return HAL_ERROR;
 800f25a:	2301      	movs	r3, #1
 800f25c:	e0a0      	b.n	800f3a0 <HAL_SPI_Init+0x1dc>
      return HAL_ERROR;
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800f25e:	687b      	ldr	r3, [r7, #4]
 800f260:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f264:	b2db      	uxtb	r3, r3
 800f266:	2b00      	cmp	r3, #0
 800f268:	d106      	bne.n	800f278 <HAL_SPI_Init+0xb4>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	2200      	movs	r2, #0
 800f26e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800f272:	6878      	ldr	r0, [r7, #4]
 800f274:	f7f5 fa92 	bl	800479c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2202      	movs	r2, #2
 800f27c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	f022 0201 	bic.w	r2, r2, #1
 800f28e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW))
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	699b      	ldr	r3, [r3, #24]
 800f294:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800f298:	d110      	bne.n	800f2bc <HAL_SPI_Init+0xf8>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f2a2:	d10b      	bne.n	800f2bc <HAL_SPI_Init+0xf8>
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d107      	bne.n	800f2bc <HAL_SPI_Init+0xf8>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	681a      	ldr	r2, [r3, #0]
 800f2b2:	687b      	ldr	r3, [r7, #4]
 800f2b4:	681b      	ldr	r3, [r3, #0]
 800f2b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800f2ba:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	69da      	ldr	r2, [r3, #28]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	68fb      	ldr	r3, [r7, #12]
 800f2c8:	431a      	orrs	r2, r3
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f2ce:	ea42 0103 	orr.w	r1, r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68da      	ldr	r2, [r3, #12]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	430a      	orrs	r2, r1
 800f2dc:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode     | hspi->Init.TIMode           | hspi->Init.NSSPolarity             |
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f2e2:	687b      	ldr	r3, [r7, #4]
 800f2e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e6:	431a      	orrs	r2, r3
 800f2e8:	687b      	ldr	r3, [r7, #4]
 800f2ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f2ec:	431a      	orrs	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	699b      	ldr	r3, [r3, #24]
 800f2f2:	431a      	orrs	r2, r3
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	691b      	ldr	r3, [r3, #16]
 800f2f8:	431a      	orrs	r2, r3
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	695b      	ldr	r3, [r3, #20]
 800f2fe:	431a      	orrs	r2, r3
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	6a1b      	ldr	r3, [r3, #32]
 800f304:	431a      	orrs	r2, r3
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	685b      	ldr	r3, [r3, #4]
 800f30a:	431a      	orrs	r2, r3
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f310:	431a      	orrs	r2, r3
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	689b      	ldr	r3, [r3, #8]
 800f316:	431a      	orrs	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f31c:	ea42 0103 	orr.w	r1, r2, r3
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	430a      	orrs	r2, r1
 800f32a:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	685b      	ldr	r3, [r3, #4]
 800f330:	2b00      	cmp	r3, #0
 800f332:	d113      	bne.n	800f35c <HAL_SPI_Init+0x198>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f346:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800f348:	687b      	ldr	r3, [r7, #4]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	689b      	ldr	r3, [r3, #8]
 800f34e:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800f35a:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	681b      	ldr	r3, [r3, #0]
 800f360:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	f022 0201 	bic.w	r2, r2, #1
 800f36a:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	685b      	ldr	r3, [r3, #4]
 800f370:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f374:	2b00      	cmp	r3, #0
 800f376:	d00a      	beq.n	800f38e <HAL_SPI_Init+0x1ca>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	68db      	ldr	r3, [r3, #12]
 800f37e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	430a      	orrs	r2, r1
 800f38c:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800f38e:	687b      	ldr	r3, [r7, #4]
 800f390:	2200      	movs	r2, #0
 800f392:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2201      	movs	r2, #1
 800f39a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800f39e:	2300      	movs	r3, #0
}
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}
 800f3a8:	40013000 	.word	0x40013000
 800f3ac:	40003800 	.word	0x40003800
 800f3b0:	40003c00 	.word	0x40003c00

0800f3b4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f3b4:	b580      	push	{r7, lr}
 800f3b6:	b08a      	sub	sp, #40	; 0x28
 800f3b8:	af02      	add	r7, sp, #8
 800f3ba:	60f8      	str	r0, [r7, #12]
 800f3bc:	60b9      	str	r1, [r7, #8]
 800f3be:	603b      	str	r3, [r7, #0]
 800f3c0:	4613      	mov	r3, r2
 800f3c2:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800f3c4:	68fb      	ldr	r3, [r7, #12]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	3320      	adds	r3, #32
 800f3ca:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f3d0:	68fb      	ldr	r3, [r7, #12]
 800f3d2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f3d6:	2b01      	cmp	r3, #1
 800f3d8:	d101      	bne.n	800f3de <HAL_SPI_Transmit+0x2a>
 800f3da:	2302      	movs	r3, #2
 800f3dc:	e1d7      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	2201      	movs	r2, #1
 800f3e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f3e6:	f7f5 fd07 	bl	8004df8 <HAL_GetTick>
 800f3ea:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f3f2:	b2db      	uxtb	r3, r3
 800f3f4:	2b01      	cmp	r3, #1
 800f3f6:	d007      	beq.n	800f408 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800f3f8:	2302      	movs	r3, #2
 800f3fa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	2200      	movs	r2, #0
 800f400:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f404:	7efb      	ldrb	r3, [r7, #27]
 800f406:	e1c2      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f408:	68bb      	ldr	r3, [r7, #8]
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d002      	beq.n	800f414 <HAL_SPI_Transmit+0x60>
 800f40e:	88fb      	ldrh	r3, [r7, #6]
 800f410:	2b00      	cmp	r3, #0
 800f412:	d107      	bne.n	800f424 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800f414:	2301      	movs	r3, #1
 800f416:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800f418:	68fb      	ldr	r3, [r7, #12]
 800f41a:	2200      	movs	r2, #0
 800f41c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f420:	7efb      	ldrb	r3, [r7, #27]
 800f422:	e1b4      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800f424:	68fb      	ldr	r3, [r7, #12]
 800f426:	2203      	movs	r2, #3
 800f428:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	2200      	movs	r2, #0
 800f430:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	68ba      	ldr	r2, [r7, #8]
 800f438:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	88fa      	ldrh	r2, [r7, #6]
 800f43e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800f442:	68fb      	ldr	r3, [r7, #12]
 800f444:	88fa      	ldrh	r2, [r7, #6]
 800f446:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800f44a:	68fb      	ldr	r3, [r7, #12]
 800f44c:	2200      	movs	r2, #0
 800f44e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	2200      	movs	r2, #0
 800f454:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2200      	movs	r2, #0
 800f45c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800f460:	68fb      	ldr	r3, [r7, #12]
 800f462:	2200      	movs	r2, #0
 800f464:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2200      	movs	r2, #0
 800f46a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f46c:	68fb      	ldr	r3, [r7, #12]
 800f46e:	689b      	ldr	r3, [r3, #8]
 800f470:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f474:	d107      	bne.n	800f486 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800f476:	68fb      	ldr	r3, [r7, #12]
 800f478:	681b      	ldr	r3, [r3, #0]
 800f47a:	681a      	ldr	r2, [r3, #0]
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	681b      	ldr	r3, [r3, #0]
 800f480:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800f484:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	681b      	ldr	r3, [r3, #0]
 800f48a:	685a      	ldr	r2, [r3, #4]
 800f48c:	4b96      	ldr	r3, [pc, #600]	; (800f6e8 <HAL_SPI_Transmit+0x334>)
 800f48e:	4013      	ands	r3, r2
 800f490:	88f9      	ldrh	r1, [r7, #6]
 800f492:	68fa      	ldr	r2, [r7, #12]
 800f494:	6812      	ldr	r2, [r2, #0]
 800f496:	430b      	orrs	r3, r1
 800f498:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f49a:	68fb      	ldr	r3, [r7, #12]
 800f49c:	681b      	ldr	r3, [r3, #0]
 800f49e:	681a      	ldr	r2, [r3, #0]
 800f4a0:	68fb      	ldr	r3, [r7, #12]
 800f4a2:	681b      	ldr	r3, [r3, #0]
 800f4a4:	f042 0201 	orr.w	r2, r2, #1
 800f4a8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f4aa:	68fb      	ldr	r3, [r7, #12]
 800f4ac:	685b      	ldr	r3, [r3, #4]
 800f4ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f4b2:	d107      	bne.n	800f4c4 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	681b      	ldr	r3, [r3, #0]
 800f4b8:	681a      	ldr	r2, [r3, #0]
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681b      	ldr	r3, [r3, #0]
 800f4be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f4c2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f4c4:	68fb      	ldr	r3, [r7, #12]
 800f4c6:	68db      	ldr	r3, [r3, #12]
 800f4c8:	2b0f      	cmp	r3, #15
 800f4ca:	d947      	bls.n	800f55c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f4cc:	e03f      	b.n	800f54e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	695b      	ldr	r3, [r3, #20]
 800f4d4:	f003 0302 	and.w	r3, r3, #2
 800f4d8:	2b02      	cmp	r3, #2
 800f4da:	d114      	bne.n	800f506 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f4dc:	68fb      	ldr	r3, [r7, #12]
 800f4de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	681b      	ldr	r3, [r3, #0]
 800f4e4:	6812      	ldr	r2, [r2, #0]
 800f4e6:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f4ec:	1d1a      	adds	r2, r3, #4
 800f4ee:	68fb      	ldr	r3, [r7, #12]
 800f4f0:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f4f8:	b29b      	uxth	r3, r3
 800f4fa:	3b01      	subs	r3, #1
 800f4fc:	b29a      	uxth	r2, r3
 800f4fe:	68fb      	ldr	r3, [r7, #12]
 800f500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f504:	e023      	b.n	800f54e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f506:	f7f5 fc77 	bl	8004df8 <HAL_GetTick>
 800f50a:	4602      	mov	r2, r0
 800f50c:	697b      	ldr	r3, [r7, #20]
 800f50e:	1ad3      	subs	r3, r2, r3
 800f510:	683a      	ldr	r2, [r7, #0]
 800f512:	429a      	cmp	r2, r3
 800f514:	d803      	bhi.n	800f51e <HAL_SPI_Transmit+0x16a>
 800f516:	683b      	ldr	r3, [r7, #0]
 800f518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f51c:	d102      	bne.n	800f524 <HAL_SPI_Transmit+0x170>
 800f51e:	683b      	ldr	r3, [r7, #0]
 800f520:	2b00      	cmp	r3, #0
 800f522:	d114      	bne.n	800f54e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f524:	68f8      	ldr	r0, [r7, #12]
 800f526:	f000 fe15 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f532:	68fb      	ldr	r3, [r7, #12]
 800f534:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f538:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f53c:	68fb      	ldr	r3, [r7, #12]
 800f53e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	2201      	movs	r2, #1
 800f546:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f54a:	2301      	movs	r3, #1
 800f54c:	e11f      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f554:	b29b      	uxth	r3, r3
 800f556:	2b00      	cmp	r3, #0
 800f558:	d1b9      	bne.n	800f4ce <HAL_SPI_Transmit+0x11a>
 800f55a:	e0f2      	b.n	800f742 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f55c:	68fb      	ldr	r3, [r7, #12]
 800f55e:	68db      	ldr	r3, [r3, #12]
 800f560:	2b07      	cmp	r3, #7
 800f562:	f240 80e7 	bls.w	800f734 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800f566:	e05d      	b.n	800f624 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f568:	68fb      	ldr	r3, [r7, #12]
 800f56a:	681b      	ldr	r3, [r3, #0]
 800f56c:	695b      	ldr	r3, [r3, #20]
 800f56e:	f003 0302 	and.w	r3, r3, #2
 800f572:	2b02      	cmp	r3, #2
 800f574:	d132      	bne.n	800f5dc <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f576:	68fb      	ldr	r3, [r7, #12]
 800f578:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f57c:	b29b      	uxth	r3, r3
 800f57e:	2b01      	cmp	r3, #1
 800f580:	d918      	bls.n	800f5b4 <HAL_SPI_Transmit+0x200>
 800f582:	68fb      	ldr	r3, [r7, #12]
 800f584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f586:	2b00      	cmp	r3, #0
 800f588:	d014      	beq.n	800f5b4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f58e:	68fb      	ldr	r3, [r7, #12]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	6812      	ldr	r2, [r2, #0]
 800f594:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f596:	68fb      	ldr	r3, [r7, #12]
 800f598:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f59a:	1d1a      	adds	r2, r3, #4
 800f59c:	68fb      	ldr	r3, [r7, #12]
 800f59e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5a6:	b29b      	uxth	r3, r3
 800f5a8:	3b02      	subs	r3, #2
 800f5aa:	b29a      	uxth	r2, r3
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f5b2:	e037      	b.n	800f624 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5b8:	881a      	ldrh	r2, [r3, #0]
 800f5ba:	69fb      	ldr	r3, [r7, #28]
 800f5bc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f5be:	68fb      	ldr	r3, [r7, #12]
 800f5c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f5c2:	1c9a      	adds	r2, r3, #2
 800f5c4:	68fb      	ldr	r3, [r7, #12]
 800f5c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f5c8:	68fb      	ldr	r3, [r7, #12]
 800f5ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f5ce:	b29b      	uxth	r3, r3
 800f5d0:	3b01      	subs	r3, #1
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f5da:	e023      	b.n	800f624 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f5dc:	f7f5 fc0c 	bl	8004df8 <HAL_GetTick>
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	697b      	ldr	r3, [r7, #20]
 800f5e4:	1ad3      	subs	r3, r2, r3
 800f5e6:	683a      	ldr	r2, [r7, #0]
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	d803      	bhi.n	800f5f4 <HAL_SPI_Transmit+0x240>
 800f5ec:	683b      	ldr	r3, [r7, #0]
 800f5ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5f2:	d102      	bne.n	800f5fa <HAL_SPI_Transmit+0x246>
 800f5f4:	683b      	ldr	r3, [r7, #0]
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	d114      	bne.n	800f624 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f5fa:	68f8      	ldr	r0, [r7, #12]
 800f5fc:	f000 fdaa 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	2200      	movs	r2, #0
 800f604:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f60e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	2201      	movs	r2, #1
 800f61c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f620:	2301      	movs	r3, #1
 800f622:	e0b4      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f624:	68fb      	ldr	r3, [r7, #12]
 800f626:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f62a:	b29b      	uxth	r3, r3
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	d19b      	bne.n	800f568 <HAL_SPI_Transmit+0x1b4>
 800f630:	e087      	b.n	800f742 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	681b      	ldr	r3, [r3, #0]
 800f636:	695b      	ldr	r3, [r3, #20]
 800f638:	f003 0302 	and.w	r3, r3, #2
 800f63c:	2b02      	cmp	r3, #2
 800f63e:	d155      	bne.n	800f6ec <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800f640:	68fb      	ldr	r3, [r7, #12]
 800f642:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f646:	b29b      	uxth	r3, r3
 800f648:	2b03      	cmp	r3, #3
 800f64a:	d918      	bls.n	800f67e <HAL_SPI_Transmit+0x2ca>
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f650:	2b40      	cmp	r3, #64	; 0x40
 800f652:	d914      	bls.n	800f67e <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800f654:	68fb      	ldr	r3, [r7, #12]
 800f656:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	681b      	ldr	r3, [r3, #0]
 800f65c:	6812      	ldr	r2, [r2, #0]
 800f65e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f664:	1d1a      	adds	r2, r3, #4
 800f666:	68fb      	ldr	r3, [r7, #12]
 800f668:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f670:	b29b      	uxth	r3, r3
 800f672:	3b04      	subs	r3, #4
 800f674:	b29a      	uxth	r2, r3
 800f676:	68fb      	ldr	r3, [r7, #12]
 800f678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f67c:	e05a      	b.n	800f734 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800f67e:	68fb      	ldr	r3, [r7, #12]
 800f680:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f684:	b29b      	uxth	r3, r3
 800f686:	2b01      	cmp	r3, #1
 800f688:	d917      	bls.n	800f6ba <HAL_SPI_Transmit+0x306>
 800f68a:	68fb      	ldr	r3, [r7, #12]
 800f68c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f68e:	2b00      	cmp	r3, #0
 800f690:	d013      	beq.n	800f6ba <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800f692:	68fb      	ldr	r3, [r7, #12]
 800f694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f696:	881a      	ldrh	r2, [r3, #0]
 800f698:	69fb      	ldr	r3, [r7, #28]
 800f69a:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6a0:	1c9a      	adds	r2, r3, #2
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800f6a6:	68fb      	ldr	r3, [r7, #12]
 800f6a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6ac:	b29b      	uxth	r3, r3
 800f6ae:	3b02      	subs	r3, #2
 800f6b0:	b29a      	uxth	r2, r3
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f6b8:	e03c      	b.n	800f734 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	3320      	adds	r3, #32
 800f6c4:	7812      	ldrb	r2, [r2, #0]
 800f6c6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800f6cc:	1c5a      	adds	r2, r3, #1
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f6d8:	b29b      	uxth	r3, r3
 800f6da:	3b01      	subs	r3, #1
 800f6dc:	b29a      	uxth	r2, r3
 800f6de:	68fb      	ldr	r3, [r7, #12]
 800f6e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800f6e4:	e026      	b.n	800f734 <HAL_SPI_Transmit+0x380>
 800f6e6:	bf00      	nop
 800f6e8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f6ec:	f7f5 fb84 	bl	8004df8 <HAL_GetTick>
 800f6f0:	4602      	mov	r2, r0
 800f6f2:	697b      	ldr	r3, [r7, #20]
 800f6f4:	1ad3      	subs	r3, r2, r3
 800f6f6:	683a      	ldr	r2, [r7, #0]
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d803      	bhi.n	800f704 <HAL_SPI_Transmit+0x350>
 800f6fc:	683b      	ldr	r3, [r7, #0]
 800f6fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f702:	d102      	bne.n	800f70a <HAL_SPI_Transmit+0x356>
 800f704:	683b      	ldr	r3, [r7, #0]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d114      	bne.n	800f734 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f70a:	68f8      	ldr	r0, [r7, #12]
 800f70c:	f000 fd22 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	2200      	movs	r2, #0
 800f714:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f71e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f722:	68fb      	ldr	r3, [r7, #12]
 800f724:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f728:	68fb      	ldr	r3, [r7, #12]
 800f72a:	2201      	movs	r2, #1
 800f72c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f730:	2301      	movs	r3, #1
 800f732:	e02c      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f73a:	b29b      	uxth	r3, r3
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f47f af78 	bne.w	800f632 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800f742:	683b      	ldr	r3, [r7, #0]
 800f744:	9300      	str	r3, [sp, #0]
 800f746:	697b      	ldr	r3, [r7, #20]
 800f748:	2200      	movs	r2, #0
 800f74a:	2108      	movs	r1, #8
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 fda1 	bl	8010294 <SPI_WaitOnFlagUntilTimeout>
 800f752:	4603      	mov	r3, r0
 800f754:	2b00      	cmp	r3, #0
 800f756:	d007      	beq.n	800f768 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f75e:	f043 0220 	orr.w	r2, r3, #32
 800f762:	68fb      	ldr	r3, [r7, #12]
 800f764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800f768:	68f8      	ldr	r0, [r7, #12]
 800f76a:	f000 fcf3 	bl	8010154 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800f76e:	68fb      	ldr	r3, [r7, #12]
 800f770:	2200      	movs	r2, #0
 800f772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800f776:	68fb      	ldr	r3, [r7, #12]
 800f778:	2201      	movs	r2, #1
 800f77a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800f77e:	68fb      	ldr	r3, [r7, #12]
 800f780:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800f788:	2301      	movs	r3, #1
 800f78a:	e000      	b.n	800f78e <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800f78c:	7efb      	ldrb	r3, [r7, #27]
}
 800f78e:	4618      	mov	r0, r3
 800f790:	3720      	adds	r7, #32
 800f792:	46bd      	mov	sp, r7
 800f794:	bd80      	pop	{r7, pc}
 800f796:	bf00      	nop

0800f798 <HAL_SPI_Receive>:
  * @param  Size   : amount of data to be received
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f798:	b580      	push	{r7, lr}
 800f79a:	b08a      	sub	sp, #40	; 0x28
 800f79c:	af02      	add	r7, sp, #8
 800f79e:	60f8      	str	r0, [r7, #12]
 800f7a0:	60b9      	str	r1, [r7, #8]
 800f7a2:	603b      	str	r3, [r7, #0]
 800f7a4:	4613      	mov	r3, r2
 800f7a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	77fb      	strb	r3, [r7, #31]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800f7ac:	68fb      	ldr	r3, [r7, #12]
 800f7ae:	681b      	ldr	r3, [r3, #0]
 800f7b0:	3330      	adds	r3, #48	; 0x30
 800f7b2:	61bb      	str	r3, [r7, #24]
#endif /* __GNUC__ */

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_RXONLY(hspi->Init.Direction));

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800f7b4:	68fb      	ldr	r3, [r7, #12]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f7bc:	d112      	bne.n	800f7e4 <HAL_SPI_Receive+0x4c>
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	689b      	ldr	r3, [r3, #8]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d10e      	bne.n	800f7e4 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	2204      	movs	r2, #4
 800f7ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800f7ce:	88fa      	ldrh	r2, [r7, #6]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	9300      	str	r3, [sp, #0]
 800f7d4:	4613      	mov	r3, r2
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	68b9      	ldr	r1, [r7, #8]
 800f7da:	68f8      	ldr	r0, [r7, #12]
 800f7dc:	f000 f9ce 	bl	800fb7c <HAL_SPI_TransmitReceive>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	e1c7      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800f7ea:	2b01      	cmp	r3, #1
 800f7ec:	d101      	bne.n	800f7f2 <HAL_SPI_Receive+0x5a>
 800f7ee:	2302      	movs	r3, #2
 800f7f0:	e1c0      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	2201      	movs	r2, #1
 800f7f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800f7fa:	f7f5 fafd 	bl	8004df8 <HAL_GetTick>
 800f7fe:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800f806:	b2db      	uxtb	r3, r3
 800f808:	2b01      	cmp	r3, #1
 800f80a:	d007      	beq.n	800f81c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_BUSY;
 800f80c:	2302      	movs	r3, #2
 800f80e:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f810:	68fb      	ldr	r3, [r7, #12]
 800f812:	2200      	movs	r2, #0
 800f814:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f818:	7ffb      	ldrb	r3, [r7, #31]
 800f81a:	e1ab      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
  }

  if ((pData == NULL) || (Size == 0UL))
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d002      	beq.n	800f828 <HAL_SPI_Receive+0x90>
 800f822:	88fb      	ldrh	r3, [r7, #6]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d107      	bne.n	800f838 <HAL_SPI_Receive+0xa0>
  {
    errorcode = HAL_ERROR;
 800f828:	2301      	movs	r3, #1
 800f82a:	77fb      	strb	r3, [r7, #31]
    __HAL_UNLOCK(hspi);
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	2200      	movs	r2, #0
 800f830:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800f834:	7ffb      	ldrb	r3, [r7, #31]
 800f836:	e19d      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800f838:	68fb      	ldr	r3, [r7, #12]
 800f83a:	2204      	movs	r2, #4
 800f83c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800f840:	68fb      	ldr	r3, [r7, #12]
 800f842:	2200      	movs	r2, #0
 800f844:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	68ba      	ldr	r2, [r7, #8]
 800f84c:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = Size;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	88fa      	ldrh	r2, [r7, #6]
 800f852:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = Size;
 800f856:	68fb      	ldr	r3, [r7, #12]
 800f858:	88fa      	ldrh	r2, [r7, #6]
 800f85a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = NULL;
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	2200      	movs	r2, #0
 800f862:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = (uint16_t) 0UL;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = (uint16_t) 0UL;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxISR       = NULL;
 800f874:	68fb      	ldr	r3, [r7, #12]
 800f876:	2200      	movs	r2, #0
 800f878:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	689b      	ldr	r3, [r3, #8]
 800f884:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800f888:	d107      	bne.n	800f89a <HAL_SPI_Receive+0x102>
  {
    SPI_1LINE_RX(hspi);
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	681a      	ldr	r2, [r3, #0]
 800f890:	68fb      	ldr	r3, [r7, #12]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800f898:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	685a      	ldr	r2, [r3, #4]
 800f8a0:	4b94      	ldr	r3, [pc, #592]	; (800faf4 <HAL_SPI_Receive+0x35c>)
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	88f9      	ldrh	r1, [r7, #6]
 800f8a6:	68fa      	ldr	r2, [r7, #12]
 800f8a8:	6812      	ldr	r2, [r2, #0]
 800f8aa:	430b      	orrs	r3, r1
 800f8ac:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	681a      	ldr	r2, [r3, #0]
 800f8b4:	68fb      	ldr	r3, [r7, #12]
 800f8b6:	681b      	ldr	r3, [r3, #0]
 800f8b8:	f042 0201 	orr.w	r2, r2, #1
 800f8bc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	685b      	ldr	r3, [r3, #4]
 800f8c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800f8c6:	d107      	bne.n	800f8d8 <HAL_SPI_Receive+0x140>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800f8c8:	68fb      	ldr	r3, [r7, #12]
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	681a      	ldr	r2, [r3, #0]
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800f8d6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	68db      	ldr	r3, [r3, #12]
 800f8dc:	2b0f      	cmp	r3, #15
 800f8de:	d948      	bls.n	800f972 <HAL_SPI_Receive+0x1da>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f8e0:	e040      	b.n	800f964 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXWNE/EOT flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL)
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	695a      	ldr	r2, [r3, #20]
 800f8e8:	f248 0308 	movw	r3, #32776	; 0x8008
 800f8ec:	4013      	ands	r3, r2
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d014      	beq.n	800f91c <HAL_SPI_Receive+0x184>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	681a      	ldr	r2, [r3, #0]
 800f8f6:	68fb      	ldr	r3, [r7, #12]
 800f8f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f8fa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f8fc:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f902:	1d1a      	adds	r2, r3, #4
 800f904:	68fb      	ldr	r3, [r7, #12]
 800f906:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount--;
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f90e:	b29b      	uxth	r3, r3
 800f910:	3b01      	subs	r3, #1
 800f912:	b29a      	uxth	r2, r3
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f91a:	e023      	b.n	800f964 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f91c:	f7f5 fa6c 	bl	8004df8 <HAL_GetTick>
 800f920:	4602      	mov	r2, r0
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	1ad3      	subs	r3, r2, r3
 800f926:	683a      	ldr	r2, [r7, #0]
 800f928:	429a      	cmp	r2, r3
 800f92a:	d803      	bhi.n	800f934 <HAL_SPI_Receive+0x19c>
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f932:	d102      	bne.n	800f93a <HAL_SPI_Receive+0x1a2>
 800f934:	683b      	ldr	r3, [r7, #0]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d114      	bne.n	800f964 <HAL_SPI_Receive+0x1cc>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800f93a:	68f8      	ldr	r0, [r7, #12]
 800f93c:	f000 fc0a 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	2200      	movs	r2, #0
 800f944:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800f948:	68fb      	ldr	r3, [r7, #12]
 800f94a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f94e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800f958:	68fb      	ldr	r3, [r7, #12]
 800f95a:	2201      	movs	r2, #1
 800f95c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800f960:	2301      	movs	r3, #1
 800f962:	e107      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800f964:	68fb      	ldr	r3, [r7, #12]
 800f966:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f96a:	b29b      	uxth	r3, r3
 800f96c:	2b00      	cmp	r3, #0
 800f96e:	d1b8      	bne.n	800f8e2 <HAL_SPI_Receive+0x14a>
 800f970:	e0ed      	b.n	800fb4e <HAL_SPI_Receive+0x3b6>
        }
      }
    }
  }
  /* Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800f972:	68fb      	ldr	r3, [r7, #12]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	2b07      	cmp	r3, #7
 800f978:	f240 80e2 	bls.w	800fb40 <HAL_SPI_Receive+0x3a8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
 800f97c:	e05b      	b.n	800fa36 <HAL_SPI_Receive+0x29e>
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800f97e:	68fb      	ldr	r3, [r7, #12]
 800f980:	681b      	ldr	r3, [r3, #0]
 800f982:	695b      	ldr	r3, [r3, #20]
 800f984:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d030      	beq.n	800f9ee <HAL_SPI_Receive+0x256>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800f98c:	68fb      	ldr	r3, [r7, #12]
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	695b      	ldr	r3, [r3, #20]
 800f992:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f996:	2b00      	cmp	r3, #0
 800f998:	d014      	beq.n	800f9c4 <HAL_SPI_Receive+0x22c>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800f99a:	68fb      	ldr	r3, [r7, #12]
 800f99c:	681a      	ldr	r2, [r3, #0]
 800f99e:	68fb      	ldr	r3, [r7, #12]
 800f9a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9a2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800f9a4:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800f9a6:	68fb      	ldr	r3, [r7, #12]
 800f9a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9aa:	1d1a      	adds	r2, r3, #4
 800f9ac:	68fb      	ldr	r3, [r7, #12]
 800f9ae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9b6:	b29b      	uxth	r3, r3
 800f9b8:	3b02      	subs	r3, #2
 800f9ba:	b29a      	uxth	r2, r3
 800f9bc:	68fb      	ldr	r3, [r7, #12]
 800f9be:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f9c2:	e038      	b.n	800fa36 <HAL_SPI_Receive+0x29e>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9c8:	69ba      	ldr	r2, [r7, #24]
 800f9ca:	8812      	ldrh	r2, [r2, #0]
 800f9cc:	b292      	uxth	r2, r2
 800f9ce:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800f9d0:	68fb      	ldr	r3, [r7, #12]
 800f9d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f9d4:	1c9a      	adds	r2, r3, #2
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f9e0:	b29b      	uxth	r3, r3
 800f9e2:	3b01      	subs	r3, #1
 800f9e4:	b29a      	uxth	r2, r3
 800f9e6:	68fb      	ldr	r3, [r7, #12]
 800f9e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f9ec:	e023      	b.n	800fa36 <HAL_SPI_Receive+0x29e>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800f9ee:	f7f5 fa03 	bl	8004df8 <HAL_GetTick>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	697b      	ldr	r3, [r7, #20]
 800f9f6:	1ad3      	subs	r3, r2, r3
 800f9f8:	683a      	ldr	r2, [r7, #0]
 800f9fa:	429a      	cmp	r2, r3
 800f9fc:	d803      	bhi.n	800fa06 <HAL_SPI_Receive+0x26e>
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa04:	d102      	bne.n	800fa0c <HAL_SPI_Receive+0x274>
 800fa06:	683b      	ldr	r3, [r7, #0]
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d114      	bne.n	800fa36 <HAL_SPI_Receive+0x29e>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fa0c:	68f8      	ldr	r0, [r7, #12]
 800fa0e:	f000 fba1 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	2200      	movs	r2, #0
 800fa16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa20:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fa24:	68fb      	ldr	r3, [r7, #12]
 800fa26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fa2a:	68fb      	ldr	r3, [r7, #12]
 800fa2c:	2201      	movs	r2, #1
 800fa2e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800fa32:	2301      	movs	r3, #1
 800fa34:	e09e      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800fa36:	68fb      	ldr	r3, [r7, #12]
 800fa38:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	2b00      	cmp	r3, #0
 800fa40:	d19d      	bne.n	800f97e <HAL_SPI_Receive+0x1e6>
 800fa42:	e084      	b.n	800fb4e <HAL_SPI_Receive+0x3b6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0UL)
    {
      /* Check the RXWNE/FRLVL flag */
      if ((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL)
 800fa44:	68fb      	ldr	r3, [r7, #12]
 800fa46:	681b      	ldr	r3, [r3, #0]
 800fa48:	695b      	ldr	r3, [r3, #20]
 800fa4a:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d052      	beq.n	800faf8 <HAL_SPI_Receive+0x360>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	695b      	ldr	r3, [r3, #20]
 800fa58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d014      	beq.n	800fa8a <HAL_SPI_Receive+0x2f2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fa60:	68fb      	ldr	r3, [r7, #12]
 800fa62:	681a      	ldr	r2, [r3, #0]
 800fa64:	68fb      	ldr	r3, [r7, #12]
 800fa66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa68:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fa6a:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa70:	1d1a      	adds	r2, r3, #4
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fa7c:	b29b      	uxth	r3, r3
 800fa7e:	3b04      	subs	r3, #4
 800fa80:	b29a      	uxth	r2, r3
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fa88:	e05a      	b.n	800fb40 <HAL_SPI_Receive+0x3a8>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 800fa8a:	68fb      	ldr	r3, [r7, #12]
 800fa8c:	681b      	ldr	r3, [r3, #0]
 800fa8e:	695b      	ldr	r3, [r3, #20]
 800fa90:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 800fa94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa98:	d914      	bls.n	800fac4 <HAL_SPI_Receive+0x32c>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fa9e:	69ba      	ldr	r2, [r7, #24]
 800faa0:	8812      	ldrh	r2, [r2, #0]
 800faa2:	b292      	uxth	r2, r2
 800faa4:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800faaa:	1c9a      	adds	r2, r3, #2
 800faac:	68fb      	ldr	r3, [r7, #12]
 800faae:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fab0:	68fb      	ldr	r3, [r7, #12]
 800fab2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fab6:	b29b      	uxth	r3, r3
 800fab8:	3b02      	subs	r3, #2
 800faba:	b29a      	uxth	r2, r3
 800fabc:	68fb      	ldr	r3, [r7, #12]
 800fabe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800fac2:	e03d      	b.n	800fb40 <HAL_SPI_Receive+0x3a8>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800fac4:	68fb      	ldr	r3, [r7, #12]
 800fac6:	681b      	ldr	r3, [r3, #0]
 800fac8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800facc:	68fb      	ldr	r3, [r7, #12]
 800face:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fad0:	7812      	ldrb	r2, [r2, #0]
 800fad2:	b2d2      	uxtb	r2, r2
 800fad4:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800fad6:	68fb      	ldr	r3, [r7, #12]
 800fad8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fada:	1c5a      	adds	r2, r3, #1
 800fadc:	68fb      	ldr	r3, [r7, #12]
 800fade:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fae0:	68fb      	ldr	r3, [r7, #12]
 800fae2:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fae6:	b29b      	uxth	r3, r3
 800fae8:	3b01      	subs	r3, #1
 800faea:	b29a      	uxth	r2, r3
 800faec:	68fb      	ldr	r3, [r7, #12]
 800faee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800faf2:	e025      	b.n	800fb40 <HAL_SPI_Receive+0x3a8>
 800faf4:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800faf8:	f7f5 f97e 	bl	8004df8 <HAL_GetTick>
 800fafc:	4602      	mov	r2, r0
 800fafe:	697b      	ldr	r3, [r7, #20]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	683a      	ldr	r2, [r7, #0]
 800fb04:	429a      	cmp	r2, r3
 800fb06:	d803      	bhi.n	800fb10 <HAL_SPI_Receive+0x378>
 800fb08:	683b      	ldr	r3, [r7, #0]
 800fb0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0e:	d102      	bne.n	800fb16 <HAL_SPI_Receive+0x37e>
 800fb10:	683b      	ldr	r3, [r7, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d114      	bne.n	800fb40 <HAL_SPI_Receive+0x3a8>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800fb16:	68f8      	ldr	r0, [r7, #12]
 800fb18:	f000 fb1c 	bl	8010154 <SPI_CloseTransfer>

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 800fb1c:	68fb      	ldr	r3, [r7, #12]
 800fb1e:	2200      	movs	r2, #0
 800fb20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fb24:	68fb      	ldr	r3, [r7, #12]
 800fb26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800fb34:	68fb      	ldr	r3, [r7, #12]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_ERROR;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e019      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
    while (hspi->RxXferCount > 0UL)
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fb46:	b29b      	uxth	r3, r3
 800fb48:	2b00      	cmp	r3, #0
 800fb4a:	f47f af7b 	bne.w	800fa44 <HAL_SPI_Receive+0x2ac>
    }
  }
#endif /* USE_SPI_CRC */

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800fb4e:	68f8      	ldr	r0, [r7, #12]
 800fb50:	f000 fb00 	bl	8010154 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	2200      	movs	r2, #0
 800fb58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800fb5c:	68fb      	ldr	r3, [r7, #12]
 800fb5e:	2201      	movs	r2, #1
 800fb60:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800fb64:	68fb      	ldr	r3, [r7, #12]
 800fb66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d001      	beq.n	800fb72 <HAL_SPI_Receive+0x3da>
  {
    return HAL_ERROR;
 800fb6e:	2301      	movs	r3, #1
 800fb70:	e000      	b.n	800fb74 <HAL_SPI_Receive+0x3dc>
  }
  return errorcode;
 800fb72:	7ffb      	ldrb	r3, [r7, #31]
}
 800fb74:	4618      	mov	r0, r3
 800fb76:	3720      	adds	r7, #32
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd80      	pop	{r7, pc}

0800fb7c <HAL_SPI_TransmitReceive>:
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800fb7c:	b580      	push	{r7, lr}
 800fb7e:	b08e      	sub	sp, #56	; 0x38
 800fb80:	af02      	add	r7, sp, #8
 800fb82:	60f8      	str	r0, [r7, #12]
 800fb84:	60b9      	str	r1, [r7, #8]
 800fb86:	607a      	str	r2, [r7, #4]
 800fb88:	807b      	strh	r3, [r7, #2]
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	681b      	ldr	r3, [r3, #0]
 800fb94:	3320      	adds	r3, #32
 800fb96:	627b      	str	r3, [r7, #36]	; 0x24
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	681b      	ldr	r3, [r3, #0]
 800fb9c:	3330      	adds	r3, #48	; 0x30
 800fb9e:	623b      	str	r3, [r7, #32]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800fba0:	68fb      	ldr	r3, [r7, #12]
 800fba2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fba6:	2b01      	cmp	r3, #1
 800fba8:	d101      	bne.n	800fbae <HAL_SPI_TransmitReceive+0x32>
 800fbaa:	2302      	movs	r3, #2
 800fbac:	e2ce      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
 800fbae:	68fb      	ldr	r3, [r7, #12]
 800fbb0:	2201      	movs	r2, #1
 800fbb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800fbb6:	f7f5 f91f 	bl	8004df8 <HAL_GetTick>
 800fbba:	61f8      	str	r0, [r7, #28]

  initial_TxXferCount = Size;
 800fbbc:	887b      	ldrh	r3, [r7, #2]
 800fbbe:	85fb      	strh	r3, [r7, #46]	; 0x2e
  initial_RxXferCount = Size;
 800fbc0:	887b      	ldrh	r3, [r7, #2]
 800fbc2:	85bb      	strh	r3, [r7, #44]	; 0x2c
  tmp_state           = hspi->State;
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fbca:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	685b      	ldr	r3, [r3, #4]
 800fbd0:	617b      	str	r3, [r7, #20]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800fbd2:	7efb      	ldrb	r3, [r7, #27]
 800fbd4:	2b01      	cmp	r3, #1
 800fbd6:	d014      	beq.n	800fc02 <HAL_SPI_TransmitReceive+0x86>
 800fbd8:	697b      	ldr	r3, [r7, #20]
 800fbda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fbde:	d106      	bne.n	800fbee <HAL_SPI_TransmitReceive+0x72>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800fbe0:	68fb      	ldr	r3, [r7, #12]
 800fbe2:	689b      	ldr	r3, [r3, #8]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d102      	bne.n	800fbee <HAL_SPI_TransmitReceive+0x72>
 800fbe8:	7efb      	ldrb	r3, [r7, #27]
 800fbea:	2b04      	cmp	r3, #4
 800fbec:	d009      	beq.n	800fc02 <HAL_SPI_TransmitReceive+0x86>
  {
    errorcode = HAL_BUSY;
 800fbee:	2302      	movs	r3, #2
 800fbf0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	2200      	movs	r2, #0
 800fbf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fbfc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc00:	e2a4      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0UL))
 800fc02:	68bb      	ldr	r3, [r7, #8]
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	d005      	beq.n	800fc14 <HAL_SPI_TransmitReceive+0x98>
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d002      	beq.n	800fc14 <HAL_SPI_TransmitReceive+0x98>
 800fc0e:	887b      	ldrh	r3, [r7, #2]
 800fc10:	2b00      	cmp	r3, #0
 800fc12:	d109      	bne.n	800fc28 <HAL_SPI_TransmitReceive+0xac>
  {
    errorcode = HAL_ERROR;
 800fc14:	2301      	movs	r3, #1
 800fc16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    __HAL_UNLOCK(hspi);
 800fc1a:	68fb      	ldr	r3, [r7, #12]
 800fc1c:	2200      	movs	r2, #0
 800fc1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800fc22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800fc26:	e291      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800fc28:	68fb      	ldr	r3, [r7, #12]
 800fc2a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800fc2e:	b2db      	uxtb	r3, r3
 800fc30:	2b04      	cmp	r3, #4
 800fc32:	d003      	beq.n	800fc3c <HAL_SPI_TransmitReceive+0xc0>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800fc34:	68fb      	ldr	r3, [r7, #12]
 800fc36:	2205      	movs	r2, #5
 800fc38:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800fc3c:	68fb      	ldr	r3, [r7, #12]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800fc44:	68fb      	ldr	r3, [r7, #12]
 800fc46:	687a      	ldr	r2, [r7, #4]
 800fc48:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferCount = Size;
 800fc4a:	68fb      	ldr	r3, [r7, #12]
 800fc4c:	887a      	ldrh	r2, [r7, #2]
 800fc4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->RxXferSize  = Size;
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	887a      	ldrh	r2, [r7, #2]
 800fc56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800fc5a:	68fb      	ldr	r3, [r7, #12]
 800fc5c:	68ba      	ldr	r2, [r7, #8]
 800fc5e:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferCount = Size;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	887a      	ldrh	r2, [r7, #2]
 800fc64:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->TxXferSize  = Size;
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	887a      	ldrh	r2, [r7, #2]
 800fc6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	2200      	movs	r2, #0
 800fc74:	671a      	str	r2, [r3, #112]	; 0x70
  hspi->TxISR       = NULL;
 800fc76:	68fb      	ldr	r3, [r7, #12]
 800fc78:	2200      	movs	r2, #0
 800fc7a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800fc7c:	68fb      	ldr	r3, [r7, #12]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685a      	ldr	r2, [r3, #4]
 800fc82:	4b9f      	ldr	r3, [pc, #636]	; (800ff00 <HAL_SPI_TransmitReceive+0x384>)
 800fc84:	4013      	ands	r3, r2
 800fc86:	8879      	ldrh	r1, [r7, #2]
 800fc88:	68fa      	ldr	r2, [r7, #12]
 800fc8a:	6812      	ldr	r2, [r2, #0]
 800fc8c:	430b      	orrs	r3, r1
 800fc8e:	6053      	str	r3, [r2, #4]

  __HAL_SPI_ENABLE(hspi);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	681a      	ldr	r2, [r3, #0]
 800fc96:	68fb      	ldr	r3, [r7, #12]
 800fc98:	681b      	ldr	r3, [r3, #0]
 800fc9a:	f042 0201 	orr.w	r2, r2, #1
 800fc9e:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800fca0:	68fb      	ldr	r3, [r7, #12]
 800fca2:	685b      	ldr	r3, [r3, #4]
 800fca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800fca8:	d107      	bne.n	800fcba <HAL_SPI_TransmitReceive+0x13e>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	681a      	ldr	r2, [r3, #0]
 800fcb0:	68fb      	ldr	r3, [r7, #12]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800fcb8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800fcba:	68fb      	ldr	r3, [r7, #12]
 800fcbc:	68db      	ldr	r3, [r3, #12]
 800fcbe:	2b0f      	cmp	r3, #15
 800fcc0:	d970      	bls.n	800fda4 <HAL_SPI_TransmitReceive+0x228>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fcc2:	e068      	b.n	800fd96 <HAL_SPI_TransmitReceive+0x21a>
    {
      /* Check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800fcc4:	68fb      	ldr	r3, [r7, #12]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	695b      	ldr	r3, [r3, #20]
 800fcca:	f003 0302 	and.w	r3, r3, #2
 800fcce:	2b02      	cmp	r3, #2
 800fcd0:	d11a      	bne.n	800fd08 <HAL_SPI_TransmitReceive+0x18c>
 800fcd2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d017      	beq.n	800fd08 <HAL_SPI_TransmitReceive+0x18c>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fcd8:	68fb      	ldr	r3, [r7, #12]
 800fcda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6812      	ldr	r2, [r2, #0]
 800fce2:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fce8:	1d1a      	adds	r2, r3, #4
 800fcea:	68fb      	ldr	r3, [r7, #12]
 800fcec:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount --;
 800fcee:	68fb      	ldr	r3, [r7, #12]
 800fcf0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	3b01      	subs	r3, #1
 800fcf8:	b29a      	uxth	r2, r3
 800fcfa:	68fb      	ldr	r3, [r7, #12]
 800fcfc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        initial_TxXferCount = hspi->TxXferCount;
 800fd00:	68fb      	ldr	r3, [r7, #12]
 800fd02:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fd06:	85fb      	strh	r3, [r7, #46]	; 0x2e
      }

      /* Check RXWNE/EOT flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_EOT)) != 0UL) && (initial_RxXferCount > 0UL))
 800fd08:	68fb      	ldr	r3, [r7, #12]
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	695a      	ldr	r2, [r3, #20]
 800fd0e:	f248 0308 	movw	r3, #32776	; 0x8008
 800fd12:	4013      	ands	r3, r2
 800fd14:	2b00      	cmp	r3, #0
 800fd16:	d01a      	beq.n	800fd4e <HAL_SPI_TransmitReceive+0x1d2>
 800fd18:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d017      	beq.n	800fd4e <HAL_SPI_TransmitReceive+0x1d2>
      {
        *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fd1e:	68fb      	ldr	r3, [r7, #12]
 800fd20:	681a      	ldr	r2, [r3, #0]
 800fd22:	68fb      	ldr	r3, [r7, #12]
 800fd24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd26:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fd28:	601a      	str	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint32_t);
 800fd2a:	68fb      	ldr	r3, [r7, #12]
 800fd2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd2e:	1d1a      	adds	r2, r3, #4
 800fd30:	68fb      	ldr	r3, [r7, #12]
 800fd32:	665a      	str	r2, [r3, #100]	; 0x64
        hspi->RxXferCount --;
 800fd34:	68fb      	ldr	r3, [r7, #12]
 800fd36:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd3a:	b29b      	uxth	r3, r3
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	b29a      	uxth	r2, r3
 800fd40:	68fb      	ldr	r3, [r7, #12]
 800fd42:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
        initial_RxXferCount = hspi->RxXferCount;
 800fd46:	68fb      	ldr	r3, [r7, #12]
 800fd48:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fd4c:	85bb      	strh	r3, [r7, #44]	; 0x2c
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800fd4e:	f7f5 f853 	bl	8004df8 <HAL_GetTick>
 800fd52:	4602      	mov	r2, r0
 800fd54:	69fb      	ldr	r3, [r7, #28]
 800fd56:	1ad3      	subs	r3, r2, r3
 800fd58:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fd5a:	429a      	cmp	r2, r3
 800fd5c:	d803      	bhi.n	800fd66 <HAL_SPI_TransmitReceive+0x1ea>
 800fd5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd64:	d102      	bne.n	800fd6c <HAL_SPI_TransmitReceive+0x1f0>
 800fd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	d114      	bne.n	800fd96 <HAL_SPI_TransmitReceive+0x21a>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fd6c:	68f8      	ldr	r0, [r7, #12]
 800fd6e:	f000 f9f1 	bl	8010154 <SPI_CloseTransfer>
      
        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	2200      	movs	r2, #0
 800fd76:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fd80:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fd8a:	68fb      	ldr	r3, [r7, #12]
 800fd8c:	2201      	movs	r2, #1
 800fd8e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800fd92:	2301      	movs	r3, #1
 800fd94:	e1da      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fd96:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	d193      	bne.n	800fcc4 <HAL_SPI_TransmitReceive+0x148>
 800fd9c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d190      	bne.n	800fcc4 <HAL_SPI_TransmitReceive+0x148>
 800fda2:	e1ac      	b.n	80100fe <HAL_SPI_TransmitReceive+0x582>
      }
    }
  }
  /* Transmit and Receive data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800fda4:	68fb      	ldr	r3, [r7, #12]
 800fda6:	68db      	ldr	r3, [r3, #12]
 800fda8:	2b07      	cmp	r3, #7
 800fdaa:	f240 81a0 	bls.w	80100ee <HAL_SPI_TransmitReceive+0x572>
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800fdae:	e0a9      	b.n	800ff04 <HAL_SPI_TransmitReceive+0x388>
    {
      /* Check TXP flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP) && (initial_TxXferCount > 0UL))
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	695b      	ldr	r3, [r3, #20]
 800fdb6:	f003 0302 	and.w	r3, r3, #2
 800fdba:	2b02      	cmp	r3, #2
 800fdbc:	d139      	bne.n	800fe32 <HAL_SPI_TransmitReceive+0x2b6>
 800fdbe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	d036      	beq.n	800fe32 <HAL_SPI_TransmitReceive+0x2b6>
      {
        if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800fdc4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800fdc6:	2b01      	cmp	r3, #1
 800fdc8:	d91c      	bls.n	800fe04 <HAL_SPI_TransmitReceive+0x288>
 800fdca:	68fb      	ldr	r3, [r7, #12]
 800fdcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d018      	beq.n	800fe04 <HAL_SPI_TransmitReceive+0x288>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800fdd2:	68fb      	ldr	r3, [r7, #12]
 800fdd4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	681b      	ldr	r3, [r3, #0]
 800fdda:	6812      	ldr	r2, [r2, #0]
 800fddc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fde2:	1d1a      	adds	r2, r3, #4
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fdee:	b29b      	uxth	r3, r3
 800fdf0:	3b02      	subs	r3, #2
 800fdf2:	b29a      	uxth	r2, r3
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fdfa:	68fb      	ldr	r3, [r7, #12]
 800fdfc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe00:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800fe02:	e016      	b.n	800fe32 <HAL_SPI_TransmitReceive+0x2b6>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe08:	881a      	ldrh	r2, [r3, #0]
 800fe0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe0c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800fe0e:	68fb      	ldr	r3, [r7, #12]
 800fe10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe12:	1c9a      	adds	r2, r3, #2
 800fe14:	68fb      	ldr	r3, [r7, #12]
 800fe16:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800fe18:	68fb      	ldr	r3, [r7, #12]
 800fe1a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe1e:	b29b      	uxth	r3, r3
 800fe20:	3b01      	subs	r3, #1
 800fe22:	b29a      	uxth	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800fe2a:	68fb      	ldr	r3, [r7, #12]
 800fe2c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fe30:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Check RXWNE/FRLVL flag */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800fe32:	68fb      	ldr	r3, [r7, #12]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	695b      	ldr	r3, [r3, #20]
 800fe38:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d03a      	beq.n	800feb6 <HAL_SPI_TransmitReceive+0x33a>
 800fe40:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d037      	beq.n	800feb6 <HAL_SPI_TransmitReceive+0x33a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800fe46:	68fb      	ldr	r3, [r7, #12]
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	695b      	ldr	r3, [r3, #20]
 800fe4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fe50:	2b00      	cmp	r3, #0
 800fe52:	d018      	beq.n	800fe86 <HAL_SPI_TransmitReceive+0x30a>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	681a      	ldr	r2, [r3, #0]
 800fe58:	68fb      	ldr	r3, [r7, #12]
 800fe5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800fe5e:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe64:	1d1a      	adds	r2, r3, #4
 800fe66:	68fb      	ldr	r3, [r7, #12]
 800fe68:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe70:	b29b      	uxth	r3, r3
 800fe72:	3b02      	subs	r3, #2
 800fe74:	b29a      	uxth	r2, r3
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800fe7c:	68fb      	ldr	r3, [r7, #12]
 800fe7e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fe82:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800fe84:	e017      	b.n	800feb6 <HAL_SPI_TransmitReceive+0x33a>
        }
        else
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800fe86:	68fb      	ldr	r3, [r7, #12]
 800fe88:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe8a:	6a3a      	ldr	r2, [r7, #32]
 800fe8c:	8812      	ldrh	r2, [r2, #0]
 800fe8e:	b292      	uxth	r2, r2
 800fe90:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800fe92:	68fb      	ldr	r3, [r7, #12]
 800fe94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fe96:	1c9a      	adds	r2, r3, #2
 800fe98:	68fb      	ldr	r3, [r7, #12]
 800fe9a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 800fe9c:	68fb      	ldr	r3, [r7, #12]
 800fe9e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800fea2:	b29b      	uxth	r3, r3
 800fea4:	3b01      	subs	r3, #1
 800fea6:	b29a      	uxth	r2, r3
 800fea8:	68fb      	ldr	r3, [r7, #12]
 800feaa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800feb4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800feb6:	f7f4 ff9f 	bl	8004df8 <HAL_GetTick>
 800feba:	4602      	mov	r2, r0
 800febc:	69fb      	ldr	r3, [r7, #28]
 800febe:	1ad3      	subs	r3, r2, r3
 800fec0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d803      	bhi.n	800fece <HAL_SPI_TransmitReceive+0x352>
 800fec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fec8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fecc:	d102      	bne.n	800fed4 <HAL_SPI_TransmitReceive+0x358>
 800fece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d117      	bne.n	800ff04 <HAL_SPI_TransmitReceive+0x388>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 800fed4:	68f8      	ldr	r0, [r7, #12]
 800fed6:	f000 f93d 	bl	8010154 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	2200      	movs	r2, #0
 800fede:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fee8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800feec:	68fb      	ldr	r3, [r7, #12]
 800feee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 800fef2:	68fb      	ldr	r3, [r7, #12]
 800fef4:	2201      	movs	r2, #1
 800fef6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 800fefa:	2301      	movs	r3, #1
 800fefc:	e126      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
 800fefe:	bf00      	nop
 800ff00:	ffff0000 	.word	0xffff0000
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 800ff04:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	f47f af52 	bne.w	800fdb0 <HAL_SPI_TransmitReceive+0x234>
 800ff0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	f47f af4e 	bne.w	800fdb0 <HAL_SPI_TransmitReceive+0x234>
 800ff14:	e0f3      	b.n	80100fe <HAL_SPI_TransmitReceive+0x582>
  else
  {
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
    {
      /* check TXP flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP)) && (initial_TxXferCount > 0UL))
 800ff16:	68fb      	ldr	r3, [r7, #12]
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	695b      	ldr	r3, [r3, #20]
 800ff1c:	f003 0302 	and.w	r3, r3, #2
 800ff20:	2b02      	cmp	r3, #2
 800ff22:	d15a      	bne.n	800ffda <HAL_SPI_TransmitReceive+0x45e>
 800ff24:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff26:	2b00      	cmp	r3, #0
 800ff28:	d057      	beq.n	800ffda <HAL_SPI_TransmitReceive+0x45e>
      {
        if ((initial_TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800ff2a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff2c:	2b03      	cmp	r3, #3
 800ff2e:	d91c      	bls.n	800ff6a <HAL_SPI_TransmitReceive+0x3ee>
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff34:	2b40      	cmp	r3, #64	; 0x40
 800ff36:	d918      	bls.n	800ff6a <HAL_SPI_TransmitReceive+0x3ee>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800ff38:	68fb      	ldr	r3, [r7, #12]
 800ff3a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ff3c:	68fb      	ldr	r3, [r7, #12]
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	6812      	ldr	r2, [r2, #0]
 800ff42:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800ff44:	68fb      	ldr	r3, [r7, #12]
 800ff46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff48:	1d1a      	adds	r2, r3, #4
 800ff4a:	68fb      	ldr	r3, [r7, #12]
 800ff4c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff54:	b29b      	uxth	r3, r3
 800ff56:	3b04      	subs	r3, #4
 800ff58:	b29a      	uxth	r2, r3
 800ff5a:	68fb      	ldr	r3, [r7, #12]
 800ff5c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff66:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ff68:	e037      	b.n	800ffda <HAL_SPI_TransmitReceive+0x45e>
        }
        else if ((initial_TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800ff6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff6c:	2b01      	cmp	r3, #1
 800ff6e:	d91b      	bls.n	800ffa8 <HAL_SPI_TransmitReceive+0x42c>
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d017      	beq.n	800ffa8 <HAL_SPI_TransmitReceive+0x42c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff7c:	881a      	ldrh	r2, [r3, #0]
 800ff7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff80:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800ff82:	68fb      	ldr	r3, [r7, #12]
 800ff84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ff86:	1c9a      	adds	r2, r3, #2
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800ff8c:	68fb      	ldr	r3, [r7, #12]
 800ff8e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ff92:	b29b      	uxth	r3, r3
 800ff94:	3b02      	subs	r3, #2
 800ff96:	b29a      	uxth	r2, r3
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffa4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800ffa6:	e018      	b.n	800ffda <HAL_SPI_TransmitReceive+0x45e>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800ffa8:	68fb      	ldr	r3, [r7, #12]
 800ffaa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	3320      	adds	r3, #32
 800ffb2:	7812      	ldrb	r2, [r2, #0]
 800ffb4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ffba:	1c5a      	adds	r2, r3, #1
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800ffc0:	68fb      	ldr	r3, [r7, #12]
 800ffc2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffc6:	b29b      	uxth	r3, r3
 800ffc8:	3b01      	subs	r3, #1
 800ffca:	b29a      	uxth	r2, r3
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
          initial_TxXferCount = hspi->TxXferCount;
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800ffd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
        }
      }

      /* Wait until RXWNE/FRLVL flag is reset */
      if (((hspi->Instance->SR & (SPI_FLAG_RXWNE | SPI_FLAG_FRLVL)) != 0UL) && (initial_RxXferCount > 0UL))
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	695b      	ldr	r3, [r3, #20]
 800ffe0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d05e      	beq.n	80100a6 <HAL_SPI_TransmitReceive+0x52a>
 800ffe8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d05b      	beq.n	80100a6 <HAL_SPI_TransmitReceive+0x52a>
      {
        if ((hspi->Instance->SR & SPI_FLAG_RXWNE) != 0UL)
 800ffee:	68fb      	ldr	r3, [r7, #12]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	695b      	ldr	r3, [r3, #20]
 800fff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d018      	beq.n	801002e <HAL_SPI_TransmitReceive+0x4b2>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800fffc:	68fb      	ldr	r3, [r7, #12]
 800fffe:	681a      	ldr	r2, [r3, #0]
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8010006:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8010008:	68fb      	ldr	r3, [r7, #12]
 801000a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801000c:	1d1a      	adds	r2, r3, #4
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)4UL;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010018:	b29b      	uxth	r3, r3
 801001a:	3b04      	subs	r3, #4
 801001c:	b29a      	uxth	r2, r3
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801002a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801002c:	e03b      	b.n	80100a6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else if ((hspi->Instance->SR & SPI_FLAG_FRLVL) > SPI_RX_FIFO_1PACKET)
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	695b      	ldr	r3, [r3, #20]
 8010034:	f403 43c0 	and.w	r3, r3, #24576	; 0x6000
 8010038:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801003c:	d918      	bls.n	8010070 <HAL_SPI_TransmitReceive+0x4f4>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801003e:	68fb      	ldr	r3, [r7, #12]
 8010040:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010042:	6a3a      	ldr	r2, [r7, #32]
 8010044:	8812      	ldrh	r2, [r2, #0]
 8010046:	b292      	uxth	r2, r2
 8010048:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801004e:	1c9a      	adds	r2, r3, #2
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount -= (uint16_t)2UL;
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801005a:	b29b      	uxth	r3, r3
 801005c:	3b02      	subs	r3, #2
 801005e:	b29a      	uxth	r2, r3
 8010060:	68fb      	ldr	r3, [r7, #12]
 8010062:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801006c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 801006e:	e01a      	b.n	80100a6 <HAL_SPI_TransmitReceive+0x52a>
        }
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8010070:	68fb      	ldr	r3, [r7, #12]
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010078:	68fb      	ldr	r3, [r7, #12]
 801007a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801007c:	7812      	ldrb	r2, [r2, #0]
 801007e:	b2d2      	uxtb	r2, r2
 8010080:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010086:	1c5a      	adds	r2, r3, #1
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	665a      	str	r2, [r3, #100]	; 0x64
          hspi->RxXferCount--;
 801008c:	68fb      	ldr	r3, [r7, #12]
 801008e:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010092:	b29b      	uxth	r3, r3
 8010094:	3b01      	subs	r3, #1
 8010096:	b29a      	uxth	r2, r3
 8010098:	68fb      	ldr	r3, [r7, #12]
 801009a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          initial_RxXferCount = hspi->RxXferCount;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80100a4:	85bb      	strh	r3, [r7, #44]	; 0x2c
        }
      }

      /* Timeout management */
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80100a6:	f7f4 fea7 	bl	8004df8 <HAL_GetTick>
 80100aa:	4602      	mov	r2, r0
 80100ac:	69fb      	ldr	r3, [r7, #28]
 80100ae:	1ad3      	subs	r3, r2, r3
 80100b0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80100b2:	429a      	cmp	r2, r3
 80100b4:	d803      	bhi.n	80100be <HAL_SPI_TransmitReceive+0x542>
 80100b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100bc:	d102      	bne.n	80100c4 <HAL_SPI_TransmitReceive+0x548>
 80100be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d114      	bne.n	80100ee <HAL_SPI_TransmitReceive+0x572>
      {
        /* Call standard close procedure with error check */
        SPI_CloseTransfer(hspi);
 80100c4:	68f8      	ldr	r0, [r7, #12]
 80100c6:	f000 f845 	bl	8010154 <SPI_CloseTransfer>

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80100ca:	68fb      	ldr	r3, [r7, #12]
 80100cc:	2200      	movs	r2, #0
 80100ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80100d8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        hspi->State = HAL_SPI_STATE_READY;
 80100e2:	68fb      	ldr	r3, [r7, #12]
 80100e4:	2201      	movs	r2, #1
 80100e6:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        return HAL_ERROR;
 80100ea:	2301      	movs	r3, #1
 80100ec:	e02e      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
    while ((initial_TxXferCount > 0UL) || (initial_RxXferCount > 0UL))
 80100ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	f47f af10 	bne.w	800ff16 <HAL_SPI_TransmitReceive+0x39a>
 80100f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	f47f af0c 	bne.w	800ff16 <HAL_SPI_TransmitReceive+0x39a>
      }
    }
  }

  /* Wait for Tx/Rx (and CRC) data to be sent/received */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80100fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010100:	9300      	str	r3, [sp, #0]
 8010102:	69fb      	ldr	r3, [r7, #28]
 8010104:	2200      	movs	r2, #0
 8010106:	2108      	movs	r1, #8
 8010108:	68f8      	ldr	r0, [r7, #12]
 801010a:	f000 f8c3 	bl	8010294 <SPI_WaitOnFlagUntilTimeout>
 801010e:	4603      	mov	r3, r0
 8010110:	2b00      	cmp	r3, #0
 8010112:	d007      	beq.n	8010124 <HAL_SPI_TransmitReceive+0x5a8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8010114:	68fb      	ldr	r3, [r7, #12]
 8010116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801011a:	f043 0220 	orr.w	r2, r3, #32
 801011e:	68fb      	ldr	r3, [r7, #12]
 8010120:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f000 f815 	bl	8010154 <SPI_CloseTransfer>

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801012a:	68fb      	ldr	r3, [r7, #12]
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	2201      	movs	r2, #1
 8010136:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010140:	2b00      	cmp	r3, #0
 8010142:	d001      	beq.n	8010148 <HAL_SPI_TransmitReceive+0x5cc>
  {
    return HAL_ERROR;
 8010144:	2301      	movs	r3, #1
 8010146:	e001      	b.n	801014c <HAL_SPI_TransmitReceive+0x5d0>
  }
  return errorcode;
 8010148:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 801014c:	4618      	mov	r0, r3
 801014e:	3730      	adds	r7, #48	; 0x30
 8010150:	46bd      	mov	sp, r7
 8010152:	bd80      	pop	{r7, pc}

08010154 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
*         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8010154:	b480      	push	{r7}
 8010156:	b085      	sub	sp, #20
 8010158:	af00      	add	r7, sp, #0
 801015a:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	695b      	ldr	r3, [r3, #20]
 8010162:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8010164:	687b      	ldr	r3, [r7, #4]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	699a      	ldr	r2, [r3, #24]
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	681b      	ldr	r3, [r3, #0]
 801016e:	f042 0208 	orr.w	r2, r2, #8
 8010172:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	699a      	ldr	r2, [r3, #24]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	f042 0210 	orr.w	r2, r2, #16
 8010182:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	681a      	ldr	r2, [r3, #0]
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	f022 0201 	bic.w	r2, r2, #1
 8010192:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | SPI_IT_FRE | SPI_IT_MODF));
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	681b      	ldr	r3, [r3, #0]
 8010198:	6919      	ldr	r1, [r3, #16]
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681a      	ldr	r2, [r3, #0]
 801019e:	4b3c      	ldr	r3, [pc, #240]	; (8010290 <SPI_CloseTransfer+0x13c>)
 80101a0:	400b      	ands	r3, r1
 80101a2:	6113      	str	r3, [r2, #16]

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	689a      	ldr	r2, [r3, #8]
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	681b      	ldr	r3, [r3, #0]
 80101ae:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80101b2:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101ba:	b2db      	uxtb	r3, r3
 80101bc:	2b04      	cmp	r3, #4
 80101be:	d014      	beq.n	80101ea <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	f003 0320 	and.w	r3, r3, #32
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d00f      	beq.n	80101ea <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80101d0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	699a      	ldr	r2, [r3, #24]
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	681b      	ldr	r3, [r3, #0]
 80101e4:	f042 0220 	orr.w	r2, r2, #32
 80101e8:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80101f0:	b2db      	uxtb	r3, r3
 80101f2:	2b03      	cmp	r3, #3
 80101f4:	d014      	beq.n	8010220 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00f      	beq.n	8010220 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8010200:	687b      	ldr	r3, [r7, #4]
 8010202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010206:	f043 0204 	orr.w	r2, r3, #4
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8010210:	687b      	ldr	r3, [r7, #4]
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	699a      	ldr	r2, [r3, #24]
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801021e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8010226:	2b00      	cmp	r3, #0
 8010228:	d00f      	beq.n	801024a <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010230:	f043 0201 	orr.w	r2, r3, #1
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	681b      	ldr	r3, [r3, #0]
 801023e:	699a      	ldr	r2, [r3, #24]
 8010240:	687b      	ldr	r3, [r7, #4]
 8010242:	681b      	ldr	r3, [r3, #0]
 8010244:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8010248:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801024a:	68fb      	ldr	r3, [r7, #12]
 801024c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8010250:	2b00      	cmp	r3, #0
 8010252:	d00f      	beq.n	8010274 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801025a:	f043 0208 	orr.w	r2, r3, #8
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8010264:	687b      	ldr	r3, [r7, #4]
 8010266:	681b      	ldr	r3, [r3, #0]
 8010268:	699a      	ldr	r2, [r3, #24]
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8010272:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2200      	movs	r2, #0
 8010278:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2200      	movs	r2, #0
 8010280:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8010284:	bf00      	nop
 8010286:	3714      	adds	r7, #20
 8010288:	46bd      	mov	sp, r7
 801028a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028e:	4770      	bx	lr
 8010290:	fffffc90 	.word	0xfffffc90

08010294 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8010294:	b580      	push	{r7, lr}
 8010296:	b084      	sub	sp, #16
 8010298:	af00      	add	r7, sp, #0
 801029a:	60f8      	str	r0, [r7, #12]
 801029c:	60b9      	str	r1, [r7, #8]
 801029e:	603b      	str	r3, [r7, #0]
 80102a0:	4613      	mov	r3, r2
 80102a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102a4:	e010      	b.n	80102c8 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80102a6:	f7f4 fda7 	bl	8004df8 <HAL_GetTick>
 80102aa:	4602      	mov	r2, r0
 80102ac:	683b      	ldr	r3, [r7, #0]
 80102ae:	1ad3      	subs	r3, r2, r3
 80102b0:	69ba      	ldr	r2, [r7, #24]
 80102b2:	429a      	cmp	r2, r3
 80102b4:	d803      	bhi.n	80102be <SPI_WaitOnFlagUntilTimeout+0x2a>
 80102b6:	69bb      	ldr	r3, [r7, #24]
 80102b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80102bc:	d102      	bne.n	80102c4 <SPI_WaitOnFlagUntilTimeout+0x30>
 80102be:	69bb      	ldr	r3, [r7, #24]
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d101      	bne.n	80102c8 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80102c4:	2303      	movs	r3, #3
 80102c6:	e00f      	b.n	80102e8 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	681b      	ldr	r3, [r3, #0]
 80102cc:	695a      	ldr	r2, [r3, #20]
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	4013      	ands	r3, r2
 80102d2:	68ba      	ldr	r2, [r7, #8]
 80102d4:	429a      	cmp	r2, r3
 80102d6:	bf0c      	ite	eq
 80102d8:	2301      	moveq	r3, #1
 80102da:	2300      	movne	r3, #0
 80102dc:	b2db      	uxtb	r3, r3
 80102de:	461a      	mov	r2, r3
 80102e0:	79fb      	ldrb	r3, [r7, #7]
 80102e2:	429a      	cmp	r2, r3
 80102e4:	d0df      	beq.n	80102a6 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 80102e6:	2300      	movs	r3, #0
}
 80102e8:	4618      	mov	r0, r3
 80102ea:	3710      	adds	r7, #16
 80102ec:	46bd      	mov	sp, r7
 80102ee:	bd80      	pop	{r7, pc}

080102f0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80102f0:	b480      	push	{r7}
 80102f2:	b085      	sub	sp, #20
 80102f4:	af00      	add	r7, sp, #0
 80102f6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80102f8:	687b      	ldr	r3, [r7, #4]
 80102fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80102fc:	095b      	lsrs	r3, r3, #5
 80102fe:	3301      	adds	r3, #1
 8010300:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	68db      	ldr	r3, [r3, #12]
 8010306:	3301      	adds	r3, #1
 8010308:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801030a:	68bb      	ldr	r3, [r7, #8]
 801030c:	3307      	adds	r3, #7
 801030e:	08db      	lsrs	r3, r3, #3
 8010310:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8010312:	68bb      	ldr	r3, [r7, #8]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	fb02 f303 	mul.w	r3, r2, r3
}
 801031a:	4618      	mov	r0, r3
 801031c:	3714      	adds	r7, #20
 801031e:	46bd      	mov	sp, r7
 8010320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010324:	4770      	bx	lr

08010326 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8010326:	b580      	push	{r7, lr}
 8010328:	b082      	sub	sp, #8
 801032a:	af00      	add	r7, sp, #0
 801032c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	2b00      	cmp	r3, #0
 8010332:	d101      	bne.n	8010338 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8010334:	2301      	movs	r3, #1
 8010336:	e042      	b.n	80103be <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	2200      	movs	r2, #0
 8010346:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801034a:	6878      	ldr	r0, [r7, #4]
 801034c:	f7f4 fa70 	bl	8004830 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8010350:	687b      	ldr	r3, [r7, #4]
 8010352:	2224      	movs	r2, #36	; 0x24
 8010354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	681a      	ldr	r2, [r3, #0]
 801035e:	687b      	ldr	r3, [r7, #4]
 8010360:	681b      	ldr	r3, [r3, #0]
 8010362:	f022 0201 	bic.w	r2, r2, #1
 8010366:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8010368:	6878      	ldr	r0, [r7, #4]
 801036a:	f000 f955 	bl	8010618 <UART_SetConfig>
 801036e:	4603      	mov	r3, r0
 8010370:	2b01      	cmp	r3, #1
 8010372:	d101      	bne.n	8010378 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8010374:	2301      	movs	r3, #1
 8010376:	e022      	b.n	80103be <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801037c:	2b00      	cmp	r3, #0
 801037e:	d002      	beq.n	8010386 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8010380:	6878      	ldr	r0, [r7, #4]
 8010382:	f000 fef9 	bl	8011178 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	681b      	ldr	r3, [r3, #0]
 801038a:	685a      	ldr	r2, [r3, #4]
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	681b      	ldr	r3, [r3, #0]
 8010390:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8010394:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	681b      	ldr	r3, [r3, #0]
 801039a:	689a      	ldr	r2, [r3, #8]
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80103a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	681a      	ldr	r2, [r3, #0]
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	681b      	ldr	r3, [r3, #0]
 80103b0:	f042 0201 	orr.w	r2, r2, #1
 80103b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80103b6:	6878      	ldr	r0, [r7, #4]
 80103b8:	f000 ff80 	bl	80112bc <UART_CheckIdleState>
 80103bc:	4603      	mov	r3, r0
}
 80103be:	4618      	mov	r0, r3
 80103c0:	3708      	adds	r7, #8
 80103c2:	46bd      	mov	sp, r7
 80103c4:	bd80      	pop	{r7, pc}

080103c6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80103c6:	b580      	push	{r7, lr}
 80103c8:	b08a      	sub	sp, #40	; 0x28
 80103ca:	af02      	add	r7, sp, #8
 80103cc:	60f8      	str	r0, [r7, #12]
 80103ce:	60b9      	str	r1, [r7, #8]
 80103d0:	603b      	str	r3, [r7, #0]
 80103d2:	4613      	mov	r3, r2
 80103d4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80103dc:	2b20      	cmp	r3, #32
 80103de:	f040 8083 	bne.w	80104e8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80103e2:	68bb      	ldr	r3, [r7, #8]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d002      	beq.n	80103ee <HAL_UART_Transmit+0x28>
 80103e8:	88fb      	ldrh	r3, [r7, #6]
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d101      	bne.n	80103f2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80103ee:	2301      	movs	r3, #1
 80103f0:	e07b      	b.n	80104ea <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80103f2:	68fb      	ldr	r3, [r7, #12]
 80103f4:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80103f8:	2b01      	cmp	r3, #1
 80103fa:	d101      	bne.n	8010400 <HAL_UART_Transmit+0x3a>
 80103fc:	2302      	movs	r3, #2
 80103fe:	e074      	b.n	80104ea <HAL_UART_Transmit+0x124>
 8010400:	68fb      	ldr	r3, [r7, #12]
 8010402:	2201      	movs	r2, #1
 8010404:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010408:	68fb      	ldr	r3, [r7, #12]
 801040a:	2200      	movs	r2, #0
 801040c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2221      	movs	r2, #33	; 0x21
 8010414:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8010418:	f7f4 fcee 	bl	8004df8 <HAL_GetTick>
 801041c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801041e:	68fb      	ldr	r3, [r7, #12]
 8010420:	88fa      	ldrh	r2, [r7, #6]
 8010422:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8010426:	68fb      	ldr	r3, [r7, #12]
 8010428:	88fa      	ldrh	r2, [r7, #6]
 801042a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801042e:	68fb      	ldr	r3, [r7, #12]
 8010430:	689b      	ldr	r3, [r3, #8]
 8010432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010436:	d108      	bne.n	801044a <HAL_UART_Transmit+0x84>
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	691b      	ldr	r3, [r3, #16]
 801043c:	2b00      	cmp	r3, #0
 801043e:	d104      	bne.n	801044a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8010440:	2300      	movs	r3, #0
 8010442:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	61bb      	str	r3, [r7, #24]
 8010448:	e003      	b.n	8010452 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 801044a:	68bb      	ldr	r3, [r7, #8]
 801044c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801044e:	2300      	movs	r3, #0
 8010450:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8010452:	68fb      	ldr	r3, [r7, #12]
 8010454:	2200      	movs	r2, #0
 8010456:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    while (huart->TxXferCount > 0U)
 801045a:	e02c      	b.n	80104b6 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801045c:	683b      	ldr	r3, [r7, #0]
 801045e:	9300      	str	r3, [sp, #0]
 8010460:	697b      	ldr	r3, [r7, #20]
 8010462:	2200      	movs	r2, #0
 8010464:	2180      	movs	r1, #128	; 0x80
 8010466:	68f8      	ldr	r0, [r7, #12]
 8010468:	f000 ff70 	bl	801134c <UART_WaitOnFlagUntilTimeout>
 801046c:	4603      	mov	r3, r0
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8010472:	2303      	movs	r3, #3
 8010474:	e039      	b.n	80104ea <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8010476:	69fb      	ldr	r3, [r7, #28]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d10b      	bne.n	8010494 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801047c:	69bb      	ldr	r3, [r7, #24]
 801047e:	881b      	ldrh	r3, [r3, #0]
 8010480:	461a      	mov	r2, r3
 8010482:	68fb      	ldr	r3, [r7, #12]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801048a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801048c:	69bb      	ldr	r3, [r7, #24]
 801048e:	3302      	adds	r3, #2
 8010490:	61bb      	str	r3, [r7, #24]
 8010492:	e007      	b.n	80104a4 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	781a      	ldrb	r2, [r3, #0]
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801049e:	69fb      	ldr	r3, [r7, #28]
 80104a0:	3301      	adds	r3, #1
 80104a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80104a4:	68fb      	ldr	r3, [r7, #12]
 80104a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80104aa:	b29b      	uxth	r3, r3
 80104ac:	3b01      	subs	r3, #1
 80104ae:	b29a      	uxth	r2, r3
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80104bc:	b29b      	uxth	r3, r3
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d1cc      	bne.n	801045c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	9300      	str	r3, [sp, #0]
 80104c6:	697b      	ldr	r3, [r7, #20]
 80104c8:	2200      	movs	r2, #0
 80104ca:	2140      	movs	r1, #64	; 0x40
 80104cc:	68f8      	ldr	r0, [r7, #12]
 80104ce:	f000 ff3d 	bl	801134c <UART_WaitOnFlagUntilTimeout>
 80104d2:	4603      	mov	r3, r0
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d001      	beq.n	80104dc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80104d8:	2303      	movs	r3, #3
 80104da:	e006      	b.n	80104ea <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	2220      	movs	r2, #32
 80104e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80104e4:	2300      	movs	r3, #0
 80104e6:	e000      	b.n	80104ea <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80104e8:	2302      	movs	r3, #2
  }
}
 80104ea:	4618      	mov	r0, r3
 80104ec:	3720      	adds	r7, #32
 80104ee:	46bd      	mov	sp, r7
 80104f0:	bd80      	pop	{r7, pc}
	...

080104f4 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	60f8      	str	r0, [r7, #12]
 80104fc:	60b9      	str	r1, [r7, #8]
 80104fe:	4613      	mov	r3, r2
 8010500:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010508:	2b20      	cmp	r3, #32
 801050a:	d170      	bne.n	80105ee <HAL_UART_Receive_DMA+0xfa>
  {
    if ((pData == NULL) || (Size == 0U))
 801050c:	68bb      	ldr	r3, [r7, #8]
 801050e:	2b00      	cmp	r3, #0
 8010510:	d002      	beq.n	8010518 <HAL_UART_Receive_DMA+0x24>
 8010512:	88fb      	ldrh	r3, [r7, #6]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d101      	bne.n	801051c <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8010518:	2301      	movs	r3, #1
 801051a:	e069      	b.n	80105f0 <HAL_UART_Receive_DMA+0xfc>
    }

    __HAL_LOCK(huart);
 801051c:	68fb      	ldr	r3, [r7, #12]
 801051e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8010522:	2b01      	cmp	r3, #1
 8010524:	d101      	bne.n	801052a <HAL_UART_Receive_DMA+0x36>
 8010526:	2302      	movs	r3, #2
 8010528:	e062      	b.n	80105f0 <HAL_UART_Receive_DMA+0xfc>
 801052a:	68fb      	ldr	r3, [r7, #12]
 801052c:	2201      	movs	r2, #1
 801052e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr = pData;
 8010532:	68fb      	ldr	r3, [r7, #12]
 8010534:	68ba      	ldr	r2, [r7, #8]
 8010536:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize = Size;
 8010538:	68fb      	ldr	r3, [r7, #12]
 801053a:	88fa      	ldrh	r2, [r7, #6]
 801053c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010540:	68fb      	ldr	r3, [r7, #12]
 8010542:	2200      	movs	r2, #0
 8010544:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8010548:	68fb      	ldr	r3, [r7, #12]
 801054a:	2222      	movs	r2, #34	; 0x22
 801054c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    if (huart->hdmarx != NULL)
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010554:	2b00      	cmp	r3, #0
 8010556:	d02c      	beq.n	80105b2 <HAL_UART_Receive_DMA+0xbe>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8010558:	68fb      	ldr	r3, [r7, #12]
 801055a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801055c:	4a26      	ldr	r2, [pc, #152]	; (80105f8 <HAL_UART_Receive_DMA+0x104>)
 801055e:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010564:	4a25      	ldr	r2, [pc, #148]	; (80105fc <HAL_UART_Receive_DMA+0x108>)
 8010566:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmarx->XferErrorCallback = UART_DMAError;
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801056c:	4a24      	ldr	r2, [pc, #144]	; (8010600 <HAL_UART_Receive_DMA+0x10c>)
 801056e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmarx->XferAbortCallback = NULL;
 8010570:	68fb      	ldr	r3, [r7, #12]
 8010572:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010574:	2200      	movs	r2, #0
 8010576:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6f98      	ldr	r0, [r3, #120]	; 0x78
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	681b      	ldr	r3, [r3, #0]
 8010580:	3324      	adds	r3, #36	; 0x24
 8010582:	4619      	mov	r1, r3
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010588:	461a      	mov	r2, r3
 801058a:	88fb      	ldrh	r3, [r7, #6]
 801058c:	f7f5 f8da 	bl	8005744 <HAL_DMA_Start_IT>
 8010590:	4603      	mov	r3, r0
 8010592:	2b00      	cmp	r3, #0
 8010594:	d00d      	beq.n	80105b2 <HAL_UART_Receive_DMA+0xbe>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	2210      	movs	r2, #16
 801059a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	2200      	movs	r2, #0
 80105a2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80105a6:	68fb      	ldr	r3, [r7, #12]
 80105a8:	2220      	movs	r2, #32
 80105aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        return HAL_ERROR;
 80105ae:	2301      	movs	r3, #1
 80105b0:	e01e      	b.n	80105f0 <HAL_UART_Receive_DMA+0xfc>
      }
    }
    __HAL_UNLOCK(huart);
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	2200      	movs	r2, #0
 80105b6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	681b      	ldr	r3, [r3, #0]
 80105be:	681a      	ldr	r2, [r3, #0]
 80105c0:	68fb      	ldr	r3, [r7, #12]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80105c8:	601a      	str	r2, [r3, #0]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80105ca:	68fb      	ldr	r3, [r7, #12]
 80105cc:	681b      	ldr	r3, [r3, #0]
 80105ce:	689a      	ldr	r2, [r3, #8]
 80105d0:	68fb      	ldr	r3, [r7, #12]
 80105d2:	681b      	ldr	r3, [r3, #0]
 80105d4:	f042 0201 	orr.w	r2, r2, #1
 80105d8:	609a      	str	r2, [r3, #8]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	681b      	ldr	r3, [r3, #0]
 80105de:	689a      	ldr	r2, [r3, #8]
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	681b      	ldr	r3, [r3, #0]
 80105e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80105e8:	609a      	str	r2, [r3, #8]

    return HAL_OK;
 80105ea:	2300      	movs	r3, #0
 80105ec:	e000      	b.n	80105f0 <HAL_UART_Receive_DMA+0xfc>
  }
  else
  {
    return HAL_BUSY;
 80105ee:	2302      	movs	r3, #2
  }
}
 80105f0:	4618      	mov	r0, r3
 80105f2:	3710      	adds	r7, #16
 80105f4:	46bd      	mov	sp, r7
 80105f6:	bd80      	pop	{r7, pc}
 80105f8:	080114d1 	.word	0x080114d1
 80105fc:	08011537 	.word	0x08011537
 8010600:	08011553 	.word	0x08011553

08010604 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8010604:	b480      	push	{r7}
 8010606:	b083      	sub	sp, #12
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801060c:	bf00      	nop
 801060e:	370c      	adds	r7, #12
 8010610:	46bd      	mov	sp, r7
 8010612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010616:	4770      	bx	lr

08010618 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8010618:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 801061c:	b08e      	sub	sp, #56	; 0x38
 801061e:	af00      	add	r7, sp, #0
 8010620:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8010622:	2300      	movs	r3, #0
 8010624:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	689a      	ldr	r2, [r3, #8]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	691b      	ldr	r3, [r3, #16]
 8010630:	431a      	orrs	r2, r3
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	695b      	ldr	r3, [r3, #20]
 8010636:	431a      	orrs	r2, r3
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	69db      	ldr	r3, [r3, #28]
 801063c:	4313      	orrs	r3, r2
 801063e:	637b      	str	r3, [r7, #52]	; 0x34
  tmpreg |= (uint32_t)huart->FifoMode;
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010644:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010646:	4313      	orrs	r3, r2
 8010648:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	681b      	ldr	r3, [r3, #0]
 801064e:	681a      	ldr	r2, [r3, #0]
 8010650:	4bc1      	ldr	r3, [pc, #772]	; (8010958 <UART_SetConfig+0x340>)
 8010652:	4013      	ands	r3, r2
 8010654:	687a      	ldr	r2, [r7, #4]
 8010656:	6812      	ldr	r2, [r2, #0]
 8010658:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801065a:	430b      	orrs	r3, r1
 801065c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801065e:	687b      	ldr	r3, [r7, #4]
 8010660:	681b      	ldr	r3, [r3, #0]
 8010662:	685b      	ldr	r3, [r3, #4]
 8010664:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	68da      	ldr	r2, [r3, #12]
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	430a      	orrs	r2, r1
 8010672:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	699b      	ldr	r3, [r3, #24]
 8010678:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801067a:	687b      	ldr	r3, [r7, #4]
 801067c:	681b      	ldr	r3, [r3, #0]
 801067e:	4ab7      	ldr	r2, [pc, #732]	; (801095c <UART_SetConfig+0x344>)
 8010680:	4293      	cmp	r3, r2
 8010682:	d004      	beq.n	801068e <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	6a1b      	ldr	r3, [r3, #32]
 8010688:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801068a:	4313      	orrs	r3, r2
 801068c:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	689a      	ldr	r2, [r3, #8]
 8010694:	4bb2      	ldr	r3, [pc, #712]	; (8010960 <UART_SetConfig+0x348>)
 8010696:	4013      	ands	r3, r2
 8010698:	687a      	ldr	r2, [r7, #4]
 801069a:	6812      	ldr	r2, [r2, #0]
 801069c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801069e:	430b      	orrs	r3, r1
 80106a0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	681b      	ldr	r3, [r3, #0]
 80106a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80106a8:	f023 010f 	bic.w	r1, r3, #15
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	681b      	ldr	r3, [r3, #0]
 80106b4:	430a      	orrs	r2, r1
 80106b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	4aa9      	ldr	r2, [pc, #676]	; (8010964 <UART_SetConfig+0x34c>)
 80106be:	4293      	cmp	r3, r2
 80106c0:	d177      	bne.n	80107b2 <UART_SetConfig+0x19a>
 80106c2:	4ba9      	ldr	r3, [pc, #676]	; (8010968 <UART_SetConfig+0x350>)
 80106c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80106c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80106ca:	2b28      	cmp	r3, #40	; 0x28
 80106cc:	d86c      	bhi.n	80107a8 <UART_SetConfig+0x190>
 80106ce:	a201      	add	r2, pc, #4	; (adr r2, 80106d4 <UART_SetConfig+0xbc>)
 80106d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106d4:	08010779 	.word	0x08010779
 80106d8:	080107a9 	.word	0x080107a9
 80106dc:	080107a9 	.word	0x080107a9
 80106e0:	080107a9 	.word	0x080107a9
 80106e4:	080107a9 	.word	0x080107a9
 80106e8:	080107a9 	.word	0x080107a9
 80106ec:	080107a9 	.word	0x080107a9
 80106f0:	080107a9 	.word	0x080107a9
 80106f4:	08010781 	.word	0x08010781
 80106f8:	080107a9 	.word	0x080107a9
 80106fc:	080107a9 	.word	0x080107a9
 8010700:	080107a9 	.word	0x080107a9
 8010704:	080107a9 	.word	0x080107a9
 8010708:	080107a9 	.word	0x080107a9
 801070c:	080107a9 	.word	0x080107a9
 8010710:	080107a9 	.word	0x080107a9
 8010714:	08010789 	.word	0x08010789
 8010718:	080107a9 	.word	0x080107a9
 801071c:	080107a9 	.word	0x080107a9
 8010720:	080107a9 	.word	0x080107a9
 8010724:	080107a9 	.word	0x080107a9
 8010728:	080107a9 	.word	0x080107a9
 801072c:	080107a9 	.word	0x080107a9
 8010730:	080107a9 	.word	0x080107a9
 8010734:	08010791 	.word	0x08010791
 8010738:	080107a9 	.word	0x080107a9
 801073c:	080107a9 	.word	0x080107a9
 8010740:	080107a9 	.word	0x080107a9
 8010744:	080107a9 	.word	0x080107a9
 8010748:	080107a9 	.word	0x080107a9
 801074c:	080107a9 	.word	0x080107a9
 8010750:	080107a9 	.word	0x080107a9
 8010754:	08010799 	.word	0x08010799
 8010758:	080107a9 	.word	0x080107a9
 801075c:	080107a9 	.word	0x080107a9
 8010760:	080107a9 	.word	0x080107a9
 8010764:	080107a9 	.word	0x080107a9
 8010768:	080107a9 	.word	0x080107a9
 801076c:	080107a9 	.word	0x080107a9
 8010770:	080107a9 	.word	0x080107a9
 8010774:	080107a1 	.word	0x080107a1
 8010778:	2301      	movs	r3, #1
 801077a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801077e:	e233      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010780:	2304      	movs	r3, #4
 8010782:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010786:	e22f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010788:	2308      	movs	r3, #8
 801078a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801078e:	e22b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010790:	2310      	movs	r3, #16
 8010792:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010796:	e227      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010798:	2320      	movs	r3, #32
 801079a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801079e:	e223      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80107a0:	2340      	movs	r3, #64	; 0x40
 80107a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107a6:	e21f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80107a8:	2380      	movs	r3, #128	; 0x80
 80107aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ae:	bf00      	nop
 80107b0:	e21a      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	4a6d      	ldr	r2, [pc, #436]	; (801096c <UART_SetConfig+0x354>)
 80107b8:	4293      	cmp	r3, r2
 80107ba:	d132      	bne.n	8010822 <UART_SetConfig+0x20a>
 80107bc:	4b6a      	ldr	r3, [pc, #424]	; (8010968 <UART_SetConfig+0x350>)
 80107be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80107c0:	f003 0307 	and.w	r3, r3, #7
 80107c4:	2b05      	cmp	r3, #5
 80107c6:	d827      	bhi.n	8010818 <UART_SetConfig+0x200>
 80107c8:	a201      	add	r2, pc, #4	; (adr r2, 80107d0 <UART_SetConfig+0x1b8>)
 80107ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ce:	bf00      	nop
 80107d0:	080107e9 	.word	0x080107e9
 80107d4:	080107f1 	.word	0x080107f1
 80107d8:	080107f9 	.word	0x080107f9
 80107dc:	08010801 	.word	0x08010801
 80107e0:	08010809 	.word	0x08010809
 80107e4:	08010811 	.word	0x08010811
 80107e8:	2300      	movs	r3, #0
 80107ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107ee:	e1fb      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80107f0:	2304      	movs	r3, #4
 80107f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107f6:	e1f7      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80107f8:	2308      	movs	r3, #8
 80107fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80107fe:	e1f3      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010800:	2310      	movs	r3, #16
 8010802:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010806:	e1ef      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010808:	2320      	movs	r3, #32
 801080a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801080e:	e1eb      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010810:	2340      	movs	r3, #64	; 0x40
 8010812:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010816:	e1e7      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010818:	2380      	movs	r3, #128	; 0x80
 801081a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801081e:	bf00      	nop
 8010820:	e1e2      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	681b      	ldr	r3, [r3, #0]
 8010826:	4a52      	ldr	r2, [pc, #328]	; (8010970 <UART_SetConfig+0x358>)
 8010828:	4293      	cmp	r3, r2
 801082a:	d132      	bne.n	8010892 <UART_SetConfig+0x27a>
 801082c:	4b4e      	ldr	r3, [pc, #312]	; (8010968 <UART_SetConfig+0x350>)
 801082e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010830:	f003 0307 	and.w	r3, r3, #7
 8010834:	2b05      	cmp	r3, #5
 8010836:	d827      	bhi.n	8010888 <UART_SetConfig+0x270>
 8010838:	a201      	add	r2, pc, #4	; (adr r2, 8010840 <UART_SetConfig+0x228>)
 801083a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801083e:	bf00      	nop
 8010840:	08010859 	.word	0x08010859
 8010844:	08010861 	.word	0x08010861
 8010848:	08010869 	.word	0x08010869
 801084c:	08010871 	.word	0x08010871
 8010850:	08010879 	.word	0x08010879
 8010854:	08010881 	.word	0x08010881
 8010858:	2300      	movs	r3, #0
 801085a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801085e:	e1c3      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010860:	2304      	movs	r3, #4
 8010862:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010866:	e1bf      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010868:	2308      	movs	r3, #8
 801086a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801086e:	e1bb      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010870:	2310      	movs	r3, #16
 8010872:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010876:	e1b7      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010878:	2320      	movs	r3, #32
 801087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801087e:	e1b3      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010880:	2340      	movs	r3, #64	; 0x40
 8010882:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010886:	e1af      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010888:	2380      	movs	r3, #128	; 0x80
 801088a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801088e:	bf00      	nop
 8010890:	e1aa      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010892:	687b      	ldr	r3, [r7, #4]
 8010894:	681b      	ldr	r3, [r3, #0]
 8010896:	4a37      	ldr	r2, [pc, #220]	; (8010974 <UART_SetConfig+0x35c>)
 8010898:	4293      	cmp	r3, r2
 801089a:	d132      	bne.n	8010902 <UART_SetConfig+0x2ea>
 801089c:	4b32      	ldr	r3, [pc, #200]	; (8010968 <UART_SetConfig+0x350>)
 801089e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80108a0:	f003 0307 	and.w	r3, r3, #7
 80108a4:	2b05      	cmp	r3, #5
 80108a6:	d827      	bhi.n	80108f8 <UART_SetConfig+0x2e0>
 80108a8:	a201      	add	r2, pc, #4	; (adr r2, 80108b0 <UART_SetConfig+0x298>)
 80108aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80108ae:	bf00      	nop
 80108b0:	080108c9 	.word	0x080108c9
 80108b4:	080108d1 	.word	0x080108d1
 80108b8:	080108d9 	.word	0x080108d9
 80108bc:	080108e1 	.word	0x080108e1
 80108c0:	080108e9 	.word	0x080108e9
 80108c4:	080108f1 	.word	0x080108f1
 80108c8:	2300      	movs	r3, #0
 80108ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ce:	e18b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108d0:	2304      	movs	r3, #4
 80108d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108d6:	e187      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108d8:	2308      	movs	r3, #8
 80108da:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108de:	e183      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108e0:	2310      	movs	r3, #16
 80108e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108e6:	e17f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108e8:	2320      	movs	r3, #32
 80108ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108ee:	e17b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108f0:	2340      	movs	r3, #64	; 0x40
 80108f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108f6:	e177      	b.n	8010be8 <UART_SetConfig+0x5d0>
 80108f8:	2380      	movs	r3, #128	; 0x80
 80108fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80108fe:	bf00      	nop
 8010900:	e172      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010902:	687b      	ldr	r3, [r7, #4]
 8010904:	681b      	ldr	r3, [r3, #0]
 8010906:	4a1c      	ldr	r2, [pc, #112]	; (8010978 <UART_SetConfig+0x360>)
 8010908:	4293      	cmp	r3, r2
 801090a:	d144      	bne.n	8010996 <UART_SetConfig+0x37e>
 801090c:	4b16      	ldr	r3, [pc, #88]	; (8010968 <UART_SetConfig+0x350>)
 801090e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010910:	f003 0307 	and.w	r3, r3, #7
 8010914:	2b05      	cmp	r3, #5
 8010916:	d839      	bhi.n	801098c <UART_SetConfig+0x374>
 8010918:	a201      	add	r2, pc, #4	; (adr r2, 8010920 <UART_SetConfig+0x308>)
 801091a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801091e:	bf00      	nop
 8010920:	08010939 	.word	0x08010939
 8010924:	08010941 	.word	0x08010941
 8010928:	08010949 	.word	0x08010949
 801092c:	08010951 	.word	0x08010951
 8010930:	0801097d 	.word	0x0801097d
 8010934:	08010985 	.word	0x08010985
 8010938:	2300      	movs	r3, #0
 801093a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801093e:	e153      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010940:	2304      	movs	r3, #4
 8010942:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010946:	e14f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010948:	2308      	movs	r3, #8
 801094a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801094e:	e14b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010950:	2310      	movs	r3, #16
 8010952:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010956:	e147      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010958:	cfff69f3 	.word	0xcfff69f3
 801095c:	58000c00 	.word	0x58000c00
 8010960:	11fff4ff 	.word	0x11fff4ff
 8010964:	40011000 	.word	0x40011000
 8010968:	58024400 	.word	0x58024400
 801096c:	40004400 	.word	0x40004400
 8010970:	40004800 	.word	0x40004800
 8010974:	40004c00 	.word	0x40004c00
 8010978:	40005000 	.word	0x40005000
 801097c:	2320      	movs	r3, #32
 801097e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010982:	e131      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010984:	2340      	movs	r3, #64	; 0x40
 8010986:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 801098a:	e12d      	b.n	8010be8 <UART_SetConfig+0x5d0>
 801098c:	2380      	movs	r3, #128	; 0x80
 801098e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010992:	bf00      	nop
 8010994:	e128      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	4ab6      	ldr	r2, [pc, #728]	; (8010c74 <UART_SetConfig+0x65c>)
 801099c:	4293      	cmp	r3, r2
 801099e:	d178      	bne.n	8010a92 <UART_SetConfig+0x47a>
 80109a0:	4bb5      	ldr	r3, [pc, #724]	; (8010c78 <UART_SetConfig+0x660>)
 80109a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80109a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80109a8:	2b28      	cmp	r3, #40	; 0x28
 80109aa:	d86d      	bhi.n	8010a88 <UART_SetConfig+0x470>
 80109ac:	a201      	add	r2, pc, #4	; (adr r2, 80109b4 <UART_SetConfig+0x39c>)
 80109ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80109b2:	bf00      	nop
 80109b4:	08010a59 	.word	0x08010a59
 80109b8:	08010a89 	.word	0x08010a89
 80109bc:	08010a89 	.word	0x08010a89
 80109c0:	08010a89 	.word	0x08010a89
 80109c4:	08010a89 	.word	0x08010a89
 80109c8:	08010a89 	.word	0x08010a89
 80109cc:	08010a89 	.word	0x08010a89
 80109d0:	08010a89 	.word	0x08010a89
 80109d4:	08010a61 	.word	0x08010a61
 80109d8:	08010a89 	.word	0x08010a89
 80109dc:	08010a89 	.word	0x08010a89
 80109e0:	08010a89 	.word	0x08010a89
 80109e4:	08010a89 	.word	0x08010a89
 80109e8:	08010a89 	.word	0x08010a89
 80109ec:	08010a89 	.word	0x08010a89
 80109f0:	08010a89 	.word	0x08010a89
 80109f4:	08010a69 	.word	0x08010a69
 80109f8:	08010a89 	.word	0x08010a89
 80109fc:	08010a89 	.word	0x08010a89
 8010a00:	08010a89 	.word	0x08010a89
 8010a04:	08010a89 	.word	0x08010a89
 8010a08:	08010a89 	.word	0x08010a89
 8010a0c:	08010a89 	.word	0x08010a89
 8010a10:	08010a89 	.word	0x08010a89
 8010a14:	08010a71 	.word	0x08010a71
 8010a18:	08010a89 	.word	0x08010a89
 8010a1c:	08010a89 	.word	0x08010a89
 8010a20:	08010a89 	.word	0x08010a89
 8010a24:	08010a89 	.word	0x08010a89
 8010a28:	08010a89 	.word	0x08010a89
 8010a2c:	08010a89 	.word	0x08010a89
 8010a30:	08010a89 	.word	0x08010a89
 8010a34:	08010a79 	.word	0x08010a79
 8010a38:	08010a89 	.word	0x08010a89
 8010a3c:	08010a89 	.word	0x08010a89
 8010a40:	08010a89 	.word	0x08010a89
 8010a44:	08010a89 	.word	0x08010a89
 8010a48:	08010a89 	.word	0x08010a89
 8010a4c:	08010a89 	.word	0x08010a89
 8010a50:	08010a89 	.word	0x08010a89
 8010a54:	08010a81 	.word	0x08010a81
 8010a58:	2301      	movs	r3, #1
 8010a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a5e:	e0c3      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a60:	2304      	movs	r3, #4
 8010a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a66:	e0bf      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a68:	2308      	movs	r3, #8
 8010a6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a6e:	e0bb      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a70:	2310      	movs	r3, #16
 8010a72:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a76:	e0b7      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a78:	2320      	movs	r3, #32
 8010a7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a7e:	e0b3      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a80:	2340      	movs	r3, #64	; 0x40
 8010a82:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a86:	e0af      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a88:	2380      	movs	r3, #128	; 0x80
 8010a8a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010a8e:	bf00      	nop
 8010a90:	e0aa      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010a92:	687b      	ldr	r3, [r7, #4]
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	4a79      	ldr	r2, [pc, #484]	; (8010c7c <UART_SetConfig+0x664>)
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	d132      	bne.n	8010b02 <UART_SetConfig+0x4ea>
 8010a9c:	4b76      	ldr	r3, [pc, #472]	; (8010c78 <UART_SetConfig+0x660>)
 8010a9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010aa0:	f003 0307 	and.w	r3, r3, #7
 8010aa4:	2b05      	cmp	r3, #5
 8010aa6:	d827      	bhi.n	8010af8 <UART_SetConfig+0x4e0>
 8010aa8:	a201      	add	r2, pc, #4	; (adr r2, 8010ab0 <UART_SetConfig+0x498>)
 8010aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010aae:	bf00      	nop
 8010ab0:	08010ac9 	.word	0x08010ac9
 8010ab4:	08010ad1 	.word	0x08010ad1
 8010ab8:	08010ad9 	.word	0x08010ad9
 8010abc:	08010ae1 	.word	0x08010ae1
 8010ac0:	08010ae9 	.word	0x08010ae9
 8010ac4:	08010af1 	.word	0x08010af1
 8010ac8:	2300      	movs	r3, #0
 8010aca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ace:	e08b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010ad0:	2304      	movs	r3, #4
 8010ad2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ad6:	e087      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010ad8:	2308      	movs	r3, #8
 8010ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ade:	e083      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010ae0:	2310      	movs	r3, #16
 8010ae2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010ae6:	e07f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010ae8:	2320      	movs	r3, #32
 8010aea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010aee:	e07b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010af0:	2340      	movs	r3, #64	; 0x40
 8010af2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010af6:	e077      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010af8:	2380      	movs	r3, #128	; 0x80
 8010afa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010afe:	bf00      	nop
 8010b00:	e072      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b02:	687b      	ldr	r3, [r7, #4]
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	4a5e      	ldr	r2, [pc, #376]	; (8010c80 <UART_SetConfig+0x668>)
 8010b08:	4293      	cmp	r3, r2
 8010b0a:	d132      	bne.n	8010b72 <UART_SetConfig+0x55a>
 8010b0c:	4b5a      	ldr	r3, [pc, #360]	; (8010c78 <UART_SetConfig+0x660>)
 8010b0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010b10:	f003 0307 	and.w	r3, r3, #7
 8010b14:	2b05      	cmp	r3, #5
 8010b16:	d827      	bhi.n	8010b68 <UART_SetConfig+0x550>
 8010b18:	a201      	add	r2, pc, #4	; (adr r2, 8010b20 <UART_SetConfig+0x508>)
 8010b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b1e:	bf00      	nop
 8010b20:	08010b39 	.word	0x08010b39
 8010b24:	08010b41 	.word	0x08010b41
 8010b28:	08010b49 	.word	0x08010b49
 8010b2c:	08010b51 	.word	0x08010b51
 8010b30:	08010b59 	.word	0x08010b59
 8010b34:	08010b61 	.word	0x08010b61
 8010b38:	2300      	movs	r3, #0
 8010b3a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b3e:	e053      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b40:	2304      	movs	r3, #4
 8010b42:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b46:	e04f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b48:	2308      	movs	r3, #8
 8010b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b4e:	e04b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b50:	2310      	movs	r3, #16
 8010b52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b56:	e047      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b58:	2320      	movs	r3, #32
 8010b5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b5e:	e043      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b60:	2340      	movs	r3, #64	; 0x40
 8010b62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b66:	e03f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b68:	2380      	movs	r3, #128	; 0x80
 8010b6a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010b6e:	bf00      	nop
 8010b70:	e03a      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	4a43      	ldr	r2, [pc, #268]	; (8010c84 <UART_SetConfig+0x66c>)
 8010b78:	4293      	cmp	r3, r2
 8010b7a:	d132      	bne.n	8010be2 <UART_SetConfig+0x5ca>
 8010b7c:	4b3e      	ldr	r3, [pc, #248]	; (8010c78 <UART_SetConfig+0x660>)
 8010b7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b80:	f003 0307 	and.w	r3, r3, #7
 8010b84:	2b05      	cmp	r3, #5
 8010b86:	d827      	bhi.n	8010bd8 <UART_SetConfig+0x5c0>
 8010b88:	a201      	add	r2, pc, #4	; (adr r2, 8010b90 <UART_SetConfig+0x578>)
 8010b8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b8e:	bf00      	nop
 8010b90:	08010ba9 	.word	0x08010ba9
 8010b94:	08010bb1 	.word	0x08010bb1
 8010b98:	08010bb9 	.word	0x08010bb9
 8010b9c:	08010bc1 	.word	0x08010bc1
 8010ba0:	08010bc9 	.word	0x08010bc9
 8010ba4:	08010bd1 	.word	0x08010bd1
 8010ba8:	2302      	movs	r3, #2
 8010baa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bae:	e01b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bb0:	2304      	movs	r3, #4
 8010bb2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bb6:	e017      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bb8:	2308      	movs	r3, #8
 8010bba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bbe:	e013      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bc0:	2310      	movs	r3, #16
 8010bc2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bc6:	e00f      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bc8:	2320      	movs	r3, #32
 8010bca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bce:	e00b      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bd0:	2340      	movs	r3, #64	; 0x40
 8010bd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bd6:	e007      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010bd8:	2380      	movs	r3, #128	; 0x80
 8010bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8010bde:	bf00      	nop
 8010be0:	e002      	b.n	8010be8 <UART_SetConfig+0x5d0>
 8010be2:	2380      	movs	r3, #128	; 0x80
 8010be4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	4a25      	ldr	r2, [pc, #148]	; (8010c84 <UART_SetConfig+0x66c>)
 8010bee:	4293      	cmp	r3, r2
 8010bf0:	f040 80b8 	bne.w	8010d64 <UART_SetConfig+0x74c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010bf8:	2b08      	cmp	r3, #8
 8010bfa:	d019      	beq.n	8010c30 <UART_SetConfig+0x618>
 8010bfc:	2b08      	cmp	r3, #8
 8010bfe:	dc04      	bgt.n	8010c0a <UART_SetConfig+0x5f2>
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d009      	beq.n	8010c18 <UART_SetConfig+0x600>
 8010c04:	2b04      	cmp	r3, #4
 8010c06:	d00b      	beq.n	8010c20 <UART_SetConfig+0x608>
 8010c08:	e042      	b.n	8010c90 <UART_SetConfig+0x678>
 8010c0a:	2b20      	cmp	r3, #32
 8010c0c:	d02b      	beq.n	8010c66 <UART_SetConfig+0x64e>
 8010c0e:	2b40      	cmp	r3, #64	; 0x40
 8010c10:	d02c      	beq.n	8010c6c <UART_SetConfig+0x654>
 8010c12:	2b10      	cmp	r3, #16
 8010c14:	d014      	beq.n	8010c40 <UART_SetConfig+0x628>
 8010c16:	e03b      	b.n	8010c90 <UART_SetConfig+0x678>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8010c18:	f7fb fadc 	bl	800c1d4 <HAL_RCCEx_GetD3PCLK1Freq>
 8010c1c:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010c1e:	e03d      	b.n	8010c9c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010c20:	f107 0314 	add.w	r3, r7, #20
 8010c24:	4618      	mov	r0, r3
 8010c26:	f7fb faeb 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c2e:	e035      	b.n	8010c9c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010c30:	f107 0308 	add.w	r3, r7, #8
 8010c34:	4618      	mov	r0, r3
 8010c36:	f7fb fc2f 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010c3a:	68fb      	ldr	r3, [r7, #12]
 8010c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c3e:	e02d      	b.n	8010c9c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c40:	4b0d      	ldr	r3, [pc, #52]	; (8010c78 <UART_SetConfig+0x660>)
 8010c42:	681b      	ldr	r3, [r3, #0]
 8010c44:	f003 0320 	and.w	r3, r3, #32
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d009      	beq.n	8010c60 <UART_SetConfig+0x648>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010c4c:	4b0a      	ldr	r3, [pc, #40]	; (8010c78 <UART_SetConfig+0x660>)
 8010c4e:	681b      	ldr	r3, [r3, #0]
 8010c50:	08db      	lsrs	r3, r3, #3
 8010c52:	f003 0303 	and.w	r3, r3, #3
 8010c56:	4a0c      	ldr	r2, [pc, #48]	; (8010c88 <UART_SetConfig+0x670>)
 8010c58:	fa22 f303 	lsr.w	r3, r2, r3
 8010c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c5e:	e01d      	b.n	8010c9c <UART_SetConfig+0x684>
          pclk = (uint32_t) HSI_VALUE;
 8010c60:	4b09      	ldr	r3, [pc, #36]	; (8010c88 <UART_SetConfig+0x670>)
 8010c62:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c64:	e01a      	b.n	8010c9c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010c66:	4b09      	ldr	r3, [pc, #36]	; (8010c8c <UART_SetConfig+0x674>)
 8010c68:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c6a:	e017      	b.n	8010c9c <UART_SetConfig+0x684>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010c70:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010c72:	e013      	b.n	8010c9c <UART_SetConfig+0x684>
 8010c74:	40011400 	.word	0x40011400
 8010c78:	58024400 	.word	0x58024400
 8010c7c:	40007800 	.word	0x40007800
 8010c80:	40007c00 	.word	0x40007c00
 8010c84:	58000c00 	.word	0x58000c00
 8010c88:	03d09000 	.word	0x03d09000
 8010c8c:	003d0900 	.word	0x003d0900
      default:
        pclk = 0U;
 8010c90:	2300      	movs	r3, #0
 8010c92:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010c94:	2301      	movs	r3, #1
 8010c96:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010c9a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	f000 824d 	beq.w	801113e <UART_SetConfig+0xb26>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ca8:	4aad      	ldr	r2, [pc, #692]	; (8010f60 <UART_SetConfig+0x948>)
 8010caa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cae:	461a      	mov	r2, r3
 8010cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8010cb6:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cb8:	687b      	ldr	r3, [r7, #4]
 8010cba:	685a      	ldr	r2, [r3, #4]
 8010cbc:	4613      	mov	r3, r2
 8010cbe:	005b      	lsls	r3, r3, #1
 8010cc0:	4413      	add	r3, r2
 8010cc2:	6a3a      	ldr	r2, [r7, #32]
 8010cc4:	429a      	cmp	r2, r3
 8010cc6:	d305      	bcc.n	8010cd4 <UART_SetConfig+0x6bc>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	685b      	ldr	r3, [r3, #4]
 8010ccc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8010cce:	6a3a      	ldr	r2, [r7, #32]
 8010cd0:	429a      	cmp	r2, r3
 8010cd2:	d903      	bls.n	8010cdc <UART_SetConfig+0x6c4>
      {
        ret = HAL_ERROR;
 8010cd4:	2301      	movs	r3, #1
 8010cd6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010cda:	e230      	b.n	801113e <UART_SetConfig+0xb26>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f04f 0100 	mov.w	r1, #0
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010ce8:	4a9d      	ldr	r2, [pc, #628]	; (8010f60 <UART_SetConfig+0x948>)
 8010cea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010cee:	b29b      	uxth	r3, r3
 8010cf0:	f04f 0400 	mov.w	r4, #0
 8010cf4:	461a      	mov	r2, r3
 8010cf6:	4623      	mov	r3, r4
 8010cf8:	f7ef fb4a 	bl	8000390 <__aeabi_uldivmod>
 8010cfc:	4603      	mov	r3, r0
 8010cfe:	460c      	mov	r4, r1
 8010d00:	4619      	mov	r1, r3
 8010d02:	4622      	mov	r2, r4
 8010d04:	f04f 0300 	mov.w	r3, #0
 8010d08:	f04f 0400 	mov.w	r4, #0
 8010d0c:	0214      	lsls	r4, r2, #8
 8010d0e:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8010d12:	020b      	lsls	r3, r1, #8
 8010d14:	687a      	ldr	r2, [r7, #4]
 8010d16:	6852      	ldr	r2, [r2, #4]
 8010d18:	0852      	lsrs	r2, r2, #1
 8010d1a:	4611      	mov	r1, r2
 8010d1c:	f04f 0200 	mov.w	r2, #0
 8010d20:	eb13 0b01 	adds.w	fp, r3, r1
 8010d24:	eb44 0c02 	adc.w	ip, r4, r2
 8010d28:	4658      	mov	r0, fp
 8010d2a:	4661      	mov	r1, ip
 8010d2c:	687b      	ldr	r3, [r7, #4]
 8010d2e:	685b      	ldr	r3, [r3, #4]
 8010d30:	f04f 0400 	mov.w	r4, #0
 8010d34:	461a      	mov	r2, r3
 8010d36:	4623      	mov	r3, r4
 8010d38:	f7ef fb2a 	bl	8000390 <__aeabi_uldivmod>
 8010d3c:	4603      	mov	r3, r0
 8010d3e:	460c      	mov	r4, r1
 8010d40:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010d48:	d308      	bcc.n	8010d5c <UART_SetConfig+0x744>
 8010d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d4c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010d50:	d204      	bcs.n	8010d5c <UART_SetConfig+0x744>
        {
          huart->Instance->BRR = usartdiv;
 8010d52:	687b      	ldr	r3, [r7, #4]
 8010d54:	681b      	ldr	r3, [r3, #0]
 8010d56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d58:	60da      	str	r2, [r3, #12]
 8010d5a:	e1f0      	b.n	801113e <UART_SetConfig+0xb26>
        }
        else
        {
          ret = HAL_ERROR;
 8010d5c:	2301      	movs	r3, #1
 8010d5e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010d62:	e1ec      	b.n	801113e <UART_SetConfig+0xb26>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	69db      	ldr	r3, [r3, #28]
 8010d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010d6c:	f040 8100 	bne.w	8010f70 <UART_SetConfig+0x958>
  {
    switch (clocksource)
 8010d70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010d74:	2b40      	cmp	r3, #64	; 0x40
 8010d76:	f200 80b7 	bhi.w	8010ee8 <UART_SetConfig+0x8d0>
 8010d7a:	a201      	add	r2, pc, #4	; (adr r2, 8010d80 <UART_SetConfig+0x768>)
 8010d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d80:	08010e85 	.word	0x08010e85
 8010d84:	08010e8d 	.word	0x08010e8d
 8010d88:	08010ee9 	.word	0x08010ee9
 8010d8c:	08010ee9 	.word	0x08010ee9
 8010d90:	08010e95 	.word	0x08010e95
 8010d94:	08010ee9 	.word	0x08010ee9
 8010d98:	08010ee9 	.word	0x08010ee9
 8010d9c:	08010ee9 	.word	0x08010ee9
 8010da0:	08010ea5 	.word	0x08010ea5
 8010da4:	08010ee9 	.word	0x08010ee9
 8010da8:	08010ee9 	.word	0x08010ee9
 8010dac:	08010ee9 	.word	0x08010ee9
 8010db0:	08010ee9 	.word	0x08010ee9
 8010db4:	08010ee9 	.word	0x08010ee9
 8010db8:	08010ee9 	.word	0x08010ee9
 8010dbc:	08010ee9 	.word	0x08010ee9
 8010dc0:	08010eb5 	.word	0x08010eb5
 8010dc4:	08010ee9 	.word	0x08010ee9
 8010dc8:	08010ee9 	.word	0x08010ee9
 8010dcc:	08010ee9 	.word	0x08010ee9
 8010dd0:	08010ee9 	.word	0x08010ee9
 8010dd4:	08010ee9 	.word	0x08010ee9
 8010dd8:	08010ee9 	.word	0x08010ee9
 8010ddc:	08010ee9 	.word	0x08010ee9
 8010de0:	08010ee9 	.word	0x08010ee9
 8010de4:	08010ee9 	.word	0x08010ee9
 8010de8:	08010ee9 	.word	0x08010ee9
 8010dec:	08010ee9 	.word	0x08010ee9
 8010df0:	08010ee9 	.word	0x08010ee9
 8010df4:	08010ee9 	.word	0x08010ee9
 8010df8:	08010ee9 	.word	0x08010ee9
 8010dfc:	08010ee9 	.word	0x08010ee9
 8010e00:	08010edb 	.word	0x08010edb
 8010e04:	08010ee9 	.word	0x08010ee9
 8010e08:	08010ee9 	.word	0x08010ee9
 8010e0c:	08010ee9 	.word	0x08010ee9
 8010e10:	08010ee9 	.word	0x08010ee9
 8010e14:	08010ee9 	.word	0x08010ee9
 8010e18:	08010ee9 	.word	0x08010ee9
 8010e1c:	08010ee9 	.word	0x08010ee9
 8010e20:	08010ee9 	.word	0x08010ee9
 8010e24:	08010ee9 	.word	0x08010ee9
 8010e28:	08010ee9 	.word	0x08010ee9
 8010e2c:	08010ee9 	.word	0x08010ee9
 8010e30:	08010ee9 	.word	0x08010ee9
 8010e34:	08010ee9 	.word	0x08010ee9
 8010e38:	08010ee9 	.word	0x08010ee9
 8010e3c:	08010ee9 	.word	0x08010ee9
 8010e40:	08010ee9 	.word	0x08010ee9
 8010e44:	08010ee9 	.word	0x08010ee9
 8010e48:	08010ee9 	.word	0x08010ee9
 8010e4c:	08010ee9 	.word	0x08010ee9
 8010e50:	08010ee9 	.word	0x08010ee9
 8010e54:	08010ee9 	.word	0x08010ee9
 8010e58:	08010ee9 	.word	0x08010ee9
 8010e5c:	08010ee9 	.word	0x08010ee9
 8010e60:	08010ee9 	.word	0x08010ee9
 8010e64:	08010ee9 	.word	0x08010ee9
 8010e68:	08010ee9 	.word	0x08010ee9
 8010e6c:	08010ee9 	.word	0x08010ee9
 8010e70:	08010ee9 	.word	0x08010ee9
 8010e74:	08010ee9 	.word	0x08010ee9
 8010e78:	08010ee9 	.word	0x08010ee9
 8010e7c:	08010ee9 	.word	0x08010ee9
 8010e80:	08010ee1 	.word	0x08010ee1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010e84:	f7f9 fff8 	bl	800ae78 <HAL_RCC_GetPCLK1Freq>
 8010e88:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e8a:	e033      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010e8c:	f7fa f80a 	bl	800aea4 <HAL_RCC_GetPCLK2Freq>
 8010e90:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8010e92:	e02f      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8010e94:	f107 0314 	add.w	r3, r7, #20
 8010e98:	4618      	mov	r0, r3
 8010e9a:	f7fb f9b1 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8010e9e:	69bb      	ldr	r3, [r7, #24]
 8010ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ea2:	e027      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8010ea4:	f107 0308 	add.w	r3, r7, #8
 8010ea8:	4618      	mov	r0, r3
 8010eaa:	f7fb faf5 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8010eae:	68fb      	ldr	r3, [r7, #12]
 8010eb0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010eb2:	e01f      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010eb4:	4b2b      	ldr	r3, [pc, #172]	; (8010f64 <UART_SetConfig+0x94c>)
 8010eb6:	681b      	ldr	r3, [r3, #0]
 8010eb8:	f003 0320 	and.w	r3, r3, #32
 8010ebc:	2b00      	cmp	r3, #0
 8010ebe:	d009      	beq.n	8010ed4 <UART_SetConfig+0x8bc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8010ec0:	4b28      	ldr	r3, [pc, #160]	; (8010f64 <UART_SetConfig+0x94c>)
 8010ec2:	681b      	ldr	r3, [r3, #0]
 8010ec4:	08db      	lsrs	r3, r3, #3
 8010ec6:	f003 0303 	and.w	r3, r3, #3
 8010eca:	4a27      	ldr	r2, [pc, #156]	; (8010f68 <UART_SetConfig+0x950>)
 8010ecc:	fa22 f303 	lsr.w	r3, r2, r3
 8010ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010ed2:	e00f      	b.n	8010ef4 <UART_SetConfig+0x8dc>
          pclk = (uint32_t) HSI_VALUE;
 8010ed4:	4b24      	ldr	r3, [pc, #144]	; (8010f68 <UART_SetConfig+0x950>)
 8010ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ed8:	e00c      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8010eda:	4b24      	ldr	r3, [pc, #144]	; (8010f6c <UART_SetConfig+0x954>)
 8010edc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ede:	e009      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010ee0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8010ee6:	e005      	b.n	8010ef4 <UART_SetConfig+0x8dc>
      default:
        pclk = 0U;
 8010ee8:	2300      	movs	r3, #0
 8010eea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8010eec:	2301      	movs	r3, #1
 8010eee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8010ef2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010ef4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ef6:	2b00      	cmp	r3, #0
 8010ef8:	f000 8121 	beq.w	801113e <UART_SetConfig+0xb26>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010f00:	4a17      	ldr	r2, [pc, #92]	; (8010f60 <UART_SetConfig+0x948>)
 8010f02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f06:	461a      	mov	r2, r3
 8010f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f0a:	fbb3 f3f2 	udiv	r3, r3, r2
 8010f0e:	005a      	lsls	r2, r3, #1
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	685b      	ldr	r3, [r3, #4]
 8010f14:	085b      	lsrs	r3, r3, #1
 8010f16:	441a      	add	r2, r3
 8010f18:	687b      	ldr	r3, [r7, #4]
 8010f1a:	685b      	ldr	r3, [r3, #4]
 8010f1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8010f20:	b29b      	uxth	r3, r3
 8010f22:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f26:	2b0f      	cmp	r3, #15
 8010f28:	d916      	bls.n	8010f58 <UART_SetConfig+0x940>
 8010f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f30:	d212      	bcs.n	8010f58 <UART_SetConfig+0x940>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f34:	b29b      	uxth	r3, r3
 8010f36:	f023 030f 	bic.w	r3, r3, #15
 8010f3a:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f3e:	085b      	lsrs	r3, r3, #1
 8010f40:	b29b      	uxth	r3, r3
 8010f42:	f003 0307 	and.w	r3, r3, #7
 8010f46:	b29a      	uxth	r2, r3
 8010f48:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8010f4a:	4313      	orrs	r3, r2
 8010f4c:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 8010f4e:	687b      	ldr	r3, [r7, #4]
 8010f50:	681b      	ldr	r3, [r3, #0]
 8010f52:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8010f54:	60da      	str	r2, [r3, #12]
 8010f56:	e0f2      	b.n	801113e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8010f58:	2301      	movs	r3, #1
 8010f5a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8010f5e:	e0ee      	b.n	801113e <UART_SetConfig+0xb26>
 8010f60:	0801c568 	.word	0x0801c568
 8010f64:	58024400 	.word	0x58024400
 8010f68:	03d09000 	.word	0x03d09000
 8010f6c:	003d0900 	.word	0x003d0900
      }
    }
  }
  else
  {
    switch (clocksource)
 8010f70:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8010f74:	2b40      	cmp	r3, #64	; 0x40
 8010f76:	f200 80b7 	bhi.w	80110e8 <UART_SetConfig+0xad0>
 8010f7a:	a201      	add	r2, pc, #4	; (adr r2, 8010f80 <UART_SetConfig+0x968>)
 8010f7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f80:	08011085 	.word	0x08011085
 8010f84:	0801108d 	.word	0x0801108d
 8010f88:	080110e9 	.word	0x080110e9
 8010f8c:	080110e9 	.word	0x080110e9
 8010f90:	08011095 	.word	0x08011095
 8010f94:	080110e9 	.word	0x080110e9
 8010f98:	080110e9 	.word	0x080110e9
 8010f9c:	080110e9 	.word	0x080110e9
 8010fa0:	080110a5 	.word	0x080110a5
 8010fa4:	080110e9 	.word	0x080110e9
 8010fa8:	080110e9 	.word	0x080110e9
 8010fac:	080110e9 	.word	0x080110e9
 8010fb0:	080110e9 	.word	0x080110e9
 8010fb4:	080110e9 	.word	0x080110e9
 8010fb8:	080110e9 	.word	0x080110e9
 8010fbc:	080110e9 	.word	0x080110e9
 8010fc0:	080110b5 	.word	0x080110b5
 8010fc4:	080110e9 	.word	0x080110e9
 8010fc8:	080110e9 	.word	0x080110e9
 8010fcc:	080110e9 	.word	0x080110e9
 8010fd0:	080110e9 	.word	0x080110e9
 8010fd4:	080110e9 	.word	0x080110e9
 8010fd8:	080110e9 	.word	0x080110e9
 8010fdc:	080110e9 	.word	0x080110e9
 8010fe0:	080110e9 	.word	0x080110e9
 8010fe4:	080110e9 	.word	0x080110e9
 8010fe8:	080110e9 	.word	0x080110e9
 8010fec:	080110e9 	.word	0x080110e9
 8010ff0:	080110e9 	.word	0x080110e9
 8010ff4:	080110e9 	.word	0x080110e9
 8010ff8:	080110e9 	.word	0x080110e9
 8010ffc:	080110e9 	.word	0x080110e9
 8011000:	080110db 	.word	0x080110db
 8011004:	080110e9 	.word	0x080110e9
 8011008:	080110e9 	.word	0x080110e9
 801100c:	080110e9 	.word	0x080110e9
 8011010:	080110e9 	.word	0x080110e9
 8011014:	080110e9 	.word	0x080110e9
 8011018:	080110e9 	.word	0x080110e9
 801101c:	080110e9 	.word	0x080110e9
 8011020:	080110e9 	.word	0x080110e9
 8011024:	080110e9 	.word	0x080110e9
 8011028:	080110e9 	.word	0x080110e9
 801102c:	080110e9 	.word	0x080110e9
 8011030:	080110e9 	.word	0x080110e9
 8011034:	080110e9 	.word	0x080110e9
 8011038:	080110e9 	.word	0x080110e9
 801103c:	080110e9 	.word	0x080110e9
 8011040:	080110e9 	.word	0x080110e9
 8011044:	080110e9 	.word	0x080110e9
 8011048:	080110e9 	.word	0x080110e9
 801104c:	080110e9 	.word	0x080110e9
 8011050:	080110e9 	.word	0x080110e9
 8011054:	080110e9 	.word	0x080110e9
 8011058:	080110e9 	.word	0x080110e9
 801105c:	080110e9 	.word	0x080110e9
 8011060:	080110e9 	.word	0x080110e9
 8011064:	080110e9 	.word	0x080110e9
 8011068:	080110e9 	.word	0x080110e9
 801106c:	080110e9 	.word	0x080110e9
 8011070:	080110e9 	.word	0x080110e9
 8011074:	080110e9 	.word	0x080110e9
 8011078:	080110e9 	.word	0x080110e9
 801107c:	080110e9 	.word	0x080110e9
 8011080:	080110e1 	.word	0x080110e1
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8011084:	f7f9 fef8 	bl	800ae78 <HAL_RCC_GetPCLK1Freq>
 8011088:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 801108a:	e033      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801108c:	f7f9 ff0a 	bl	800aea4 <HAL_RCC_GetPCLK2Freq>
 8011090:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8011092:	e02f      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011094:	f107 0314 	add.w	r3, r7, #20
 8011098:	4618      	mov	r0, r3
 801109a:	f7fb f8b1 	bl	800c200 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801109e:	69bb      	ldr	r3, [r7, #24]
 80110a0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110a2:	e027      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80110a4:	f107 0308 	add.w	r3, r7, #8
 80110a8:	4618      	mov	r0, r3
 80110aa:	f7fb f9f5 	bl	800c498 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110b2:	e01f      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80110b4:	4b2c      	ldr	r3, [pc, #176]	; (8011168 <UART_SetConfig+0xb50>)
 80110b6:	681b      	ldr	r3, [r3, #0]
 80110b8:	f003 0320 	and.w	r3, r3, #32
 80110bc:	2b00      	cmp	r3, #0
 80110be:	d009      	beq.n	80110d4 <UART_SetConfig+0xabc>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80110c0:	4b29      	ldr	r3, [pc, #164]	; (8011168 <UART_SetConfig+0xb50>)
 80110c2:	681b      	ldr	r3, [r3, #0]
 80110c4:	08db      	lsrs	r3, r3, #3
 80110c6:	f003 0303 	and.w	r3, r3, #3
 80110ca:	4a28      	ldr	r2, [pc, #160]	; (801116c <UART_SetConfig+0xb54>)
 80110cc:	fa22 f303 	lsr.w	r3, r2, r3
 80110d0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80110d2:	e00f      	b.n	80110f4 <UART_SetConfig+0xadc>
          pclk = (uint32_t) HSI_VALUE;
 80110d4:	4b25      	ldr	r3, [pc, #148]	; (801116c <UART_SetConfig+0xb54>)
 80110d6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110d8:	e00c      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80110da:	4b25      	ldr	r3, [pc, #148]	; (8011170 <UART_SetConfig+0xb58>)
 80110dc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110de:	e009      	b.n	80110f4 <UART_SetConfig+0xadc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80110e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80110e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80110e6:	e005      	b.n	80110f4 <UART_SetConfig+0xadc>
      default:
        pclk = 0U;
 80110e8:	2300      	movs	r3, #0
 80110ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80110ec:	2301      	movs	r3, #1
 80110ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80110f2:	bf00      	nop
    }

    if (pclk != 0U)
 80110f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d021      	beq.n	801113e <UART_SetConfig+0xb26>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80110fa:	687b      	ldr	r3, [r7, #4]
 80110fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fe:	4a1d      	ldr	r2, [pc, #116]	; (8011174 <UART_SetConfig+0xb5c>)
 8011100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011104:	461a      	mov	r2, r3
 8011106:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011108:	fbb3 f2f2 	udiv	r2, r3, r2
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	685b      	ldr	r3, [r3, #4]
 8011110:	085b      	lsrs	r3, r3, #1
 8011112:	441a      	add	r2, r3
 8011114:	687b      	ldr	r3, [r7, #4]
 8011116:	685b      	ldr	r3, [r3, #4]
 8011118:	fbb2 f3f3 	udiv	r3, r2, r3
 801111c:	b29b      	uxth	r3, r3
 801111e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8011120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011122:	2b0f      	cmp	r3, #15
 8011124:	d908      	bls.n	8011138 <UART_SetConfig+0xb20>
 8011126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801112c:	d204      	bcs.n	8011138 <UART_SetConfig+0xb20>
      {
        huart->Instance->BRR = usartdiv;
 801112e:	687b      	ldr	r3, [r7, #4]
 8011130:	681b      	ldr	r3, [r3, #0]
 8011132:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011134:	60da      	str	r2, [r3, #12]
 8011136:	e002      	b.n	801113e <UART_SetConfig+0xb26>
      }
      else
      {
        ret = HAL_ERROR;
 8011138:	2301      	movs	r3, #1
 801113a:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	2201      	movs	r2, #1
 8011142:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2201      	movs	r2, #1
 801114a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801114e:	687b      	ldr	r3, [r7, #4]
 8011150:	2200      	movs	r2, #0
 8011152:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 801115a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 801115e:	4618      	mov	r0, r3
 8011160:	3738      	adds	r7, #56	; 0x38
 8011162:	46bd      	mov	sp, r7
 8011164:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8011168:	58024400 	.word	0x58024400
 801116c:	03d09000 	.word	0x03d09000
 8011170:	003d0900 	.word	0x003d0900
 8011174:	0801c568 	.word	0x0801c568

08011178 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011184:	f003 0301 	and.w	r3, r3, #1
 8011188:	2b00      	cmp	r3, #0
 801118a:	d00a      	beq.n	80111a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801118c:	687b      	ldr	r3, [r7, #4]
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	685b      	ldr	r3, [r3, #4]
 8011192:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	681b      	ldr	r3, [r3, #0]
 801119e:	430a      	orrs	r2, r1
 80111a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80111a2:	687b      	ldr	r3, [r7, #4]
 80111a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111a6:	f003 0302 	and.w	r3, r3, #2
 80111aa:	2b00      	cmp	r3, #0
 80111ac:	d00a      	beq.n	80111c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80111ae:	687b      	ldr	r3, [r7, #4]
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	685b      	ldr	r3, [r3, #4]
 80111b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80111b8:	687b      	ldr	r3, [r7, #4]
 80111ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	681b      	ldr	r3, [r3, #0]
 80111c0:	430a      	orrs	r2, r1
 80111c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111c8:	f003 0304 	and.w	r3, r3, #4
 80111cc:	2b00      	cmp	r3, #0
 80111ce:	d00a      	beq.n	80111e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80111d0:	687b      	ldr	r3, [r7, #4]
 80111d2:	681b      	ldr	r3, [r3, #0]
 80111d4:	685b      	ldr	r3, [r3, #4]
 80111d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	681b      	ldr	r3, [r3, #0]
 80111e2:	430a      	orrs	r2, r1
 80111e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80111e6:	687b      	ldr	r3, [r7, #4]
 80111e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80111ea:	f003 0308 	and.w	r3, r3, #8
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d00a      	beq.n	8011208 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	681b      	ldr	r3, [r3, #0]
 8011204:	430a      	orrs	r2, r1
 8011206:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801120c:	f003 0310 	and.w	r3, r3, #16
 8011210:	2b00      	cmp	r3, #0
 8011212:	d00a      	beq.n	801122a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	689b      	ldr	r3, [r3, #8]
 801121a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	681b      	ldr	r3, [r3, #0]
 8011226:	430a      	orrs	r2, r1
 8011228:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801122a:	687b      	ldr	r3, [r7, #4]
 801122c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801122e:	f003 0320 	and.w	r3, r3, #32
 8011232:	2b00      	cmp	r3, #0
 8011234:	d00a      	beq.n	801124c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	681b      	ldr	r3, [r3, #0]
 801123a:	689b      	ldr	r3, [r3, #8]
 801123c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	681b      	ldr	r3, [r3, #0]
 8011248:	430a      	orrs	r2, r1
 801124a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011254:	2b00      	cmp	r3, #0
 8011256:	d01a      	beq.n	801128e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8011266:	687b      	ldr	r3, [r7, #4]
 8011268:	681b      	ldr	r3, [r3, #0]
 801126a:	430a      	orrs	r2, r1
 801126c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801126e:	687b      	ldr	r3, [r7, #4]
 8011270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011272:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011276:	d10a      	bne.n	801128e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	681b      	ldr	r3, [r3, #0]
 801127c:	685b      	ldr	r3, [r3, #4]
 801127e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8011282:	687b      	ldr	r3, [r7, #4]
 8011284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	681b      	ldr	r3, [r3, #0]
 801128a:	430a      	orrs	r2, r1
 801128c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801128e:	687b      	ldr	r3, [r7, #4]
 8011290:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011292:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011296:	2b00      	cmp	r3, #0
 8011298:	d00a      	beq.n	80112b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	685b      	ldr	r3, [r3, #4]
 80112a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	430a      	orrs	r2, r1
 80112ae:	605a      	str	r2, [r3, #4]
  }
}
 80112b0:	bf00      	nop
 80112b2:	370c      	adds	r7, #12
 80112b4:	46bd      	mov	sp, r7
 80112b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112ba:	4770      	bx	lr

080112bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80112bc:	b580      	push	{r7, lr}
 80112be:	b086      	sub	sp, #24
 80112c0:	af02      	add	r7, sp, #8
 80112c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	2200      	movs	r2, #0
 80112c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80112cc:	f7f3 fd94 	bl	8004df8 <HAL_GetTick>
 80112d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	681b      	ldr	r3, [r3, #0]
 80112d6:	681b      	ldr	r3, [r3, #0]
 80112d8:	f003 0308 	and.w	r3, r3, #8
 80112dc:	2b08      	cmp	r3, #8
 80112de:	d10e      	bne.n	80112fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80112e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80112e4:	9300      	str	r3, [sp, #0]
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	2200      	movs	r2, #0
 80112ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80112ee:	6878      	ldr	r0, [r7, #4]
 80112f0:	f000 f82c 	bl	801134c <UART_WaitOnFlagUntilTimeout>
 80112f4:	4603      	mov	r3, r0
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d001      	beq.n	80112fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80112fa:	2303      	movs	r3, #3
 80112fc:	e022      	b.n	8011344 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80112fe:	687b      	ldr	r3, [r7, #4]
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	681b      	ldr	r3, [r3, #0]
 8011304:	f003 0304 	and.w	r3, r3, #4
 8011308:	2b04      	cmp	r3, #4
 801130a:	d10e      	bne.n	801132a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801130c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8011310:	9300      	str	r3, [sp, #0]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	2200      	movs	r2, #0
 8011316:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801131a:	6878      	ldr	r0, [r7, #4]
 801131c:	f000 f816 	bl	801134c <UART_WaitOnFlagUntilTimeout>
 8011320:	4603      	mov	r3, r0
 8011322:	2b00      	cmp	r3, #0
 8011324:	d001      	beq.n	801132a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8011326:	2303      	movs	r3, #3
 8011328:	e00c      	b.n	8011344 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	2220      	movs	r2, #32
 801132e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8011332:	687b      	ldr	r3, [r7, #4]
 8011334:	2220      	movs	r2, #32
 8011336:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	2200      	movs	r2, #0
 801133e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011342:	2300      	movs	r3, #0
}
 8011344:	4618      	mov	r0, r3
 8011346:	3710      	adds	r7, #16
 8011348:	46bd      	mov	sp, r7
 801134a:	bd80      	pop	{r7, pc}

0801134c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801134c:	b580      	push	{r7, lr}
 801134e:	b084      	sub	sp, #16
 8011350:	af00      	add	r7, sp, #0
 8011352:	60f8      	str	r0, [r7, #12]
 8011354:	60b9      	str	r1, [r7, #8]
 8011356:	603b      	str	r3, [r7, #0]
 8011358:	4613      	mov	r3, r2
 801135a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801135c:	e062      	b.n	8011424 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801135e:	69bb      	ldr	r3, [r7, #24]
 8011360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011364:	d05e      	beq.n	8011424 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8011366:	f7f3 fd47 	bl	8004df8 <HAL_GetTick>
 801136a:	4602      	mov	r2, r0
 801136c:	683b      	ldr	r3, [r7, #0]
 801136e:	1ad3      	subs	r3, r2, r3
 8011370:	69ba      	ldr	r2, [r7, #24]
 8011372:	429a      	cmp	r2, r3
 8011374:	d302      	bcc.n	801137c <UART_WaitOnFlagUntilTimeout+0x30>
 8011376:	69bb      	ldr	r3, [r7, #24]
 8011378:	2b00      	cmp	r3, #0
 801137a:	d11d      	bne.n	80113b8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 801137c:	68fb      	ldr	r3, [r7, #12]
 801137e:	681b      	ldr	r3, [r3, #0]
 8011380:	681a      	ldr	r2, [r3, #0]
 8011382:	68fb      	ldr	r3, [r7, #12]
 8011384:	681b      	ldr	r3, [r3, #0]
 8011386:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 801138a:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801138c:	68fb      	ldr	r3, [r7, #12]
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	689a      	ldr	r2, [r3, #8]
 8011392:	68fb      	ldr	r3, [r7, #12]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	f022 0201 	bic.w	r2, r2, #1
 801139a:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 801139c:	68fb      	ldr	r3, [r7, #12]
 801139e:	2220      	movs	r2, #32
 80113a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	2220      	movs	r2, #32
 80113a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80113ac:	68fb      	ldr	r3, [r7, #12]
 80113ae:	2200      	movs	r2, #0
 80113b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80113b4:	2303      	movs	r3, #3
 80113b6:	e045      	b.n	8011444 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80113b8:	68fb      	ldr	r3, [r7, #12]
 80113ba:	681b      	ldr	r3, [r3, #0]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f003 0304 	and.w	r3, r3, #4
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	d02e      	beq.n	8011424 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80113c6:	68fb      	ldr	r3, [r7, #12]
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	69db      	ldr	r3, [r3, #28]
 80113cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80113d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80113d4:	d126      	bne.n	8011424 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80113d6:	68fb      	ldr	r3, [r7, #12]
 80113d8:	681b      	ldr	r3, [r3, #0]
 80113da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80113de:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80113e0:	68fb      	ldr	r3, [r7, #12]
 80113e2:	681b      	ldr	r3, [r3, #0]
 80113e4:	681a      	ldr	r2, [r3, #0]
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	681b      	ldr	r3, [r3, #0]
 80113ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80113ee:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	689a      	ldr	r2, [r3, #8]
 80113f6:	68fb      	ldr	r3, [r7, #12]
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	f022 0201 	bic.w	r2, r2, #1
 80113fe:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8011400:	68fb      	ldr	r3, [r7, #12]
 8011402:	2220      	movs	r2, #32
 8011404:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 8011408:	68fb      	ldr	r3, [r7, #12]
 801140a:	2220      	movs	r2, #32
 801140c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	2220      	movs	r2, #32
 8011414:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2200      	movs	r2, #0
 801141c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

          return HAL_TIMEOUT;
 8011420:	2303      	movs	r3, #3
 8011422:	e00f      	b.n	8011444 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	681b      	ldr	r3, [r3, #0]
 8011428:	69da      	ldr	r2, [r3, #28]
 801142a:	68bb      	ldr	r3, [r7, #8]
 801142c:	4013      	ands	r3, r2
 801142e:	68ba      	ldr	r2, [r7, #8]
 8011430:	429a      	cmp	r2, r3
 8011432:	bf0c      	ite	eq
 8011434:	2301      	moveq	r3, #1
 8011436:	2300      	movne	r3, #0
 8011438:	b2db      	uxtb	r3, r3
 801143a:	461a      	mov	r2, r3
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	429a      	cmp	r2, r3
 8011440:	d08d      	beq.n	801135e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011442:	2300      	movs	r3, #0
}
 8011444:	4618      	mov	r0, r3
 8011446:	3710      	adds	r7, #16
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 801144c:	b480      	push	{r7}
 801144e:	b083      	sub	sp, #12
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	681a      	ldr	r2, [r3, #0]
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	681b      	ldr	r3, [r3, #0]
 801145e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8011462:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8011464:	687b      	ldr	r3, [r7, #4]
 8011466:	681b      	ldr	r3, [r3, #0]
 8011468:	689a      	ldr	r2, [r3, #8]
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	681b      	ldr	r3, [r3, #0]
 801146e:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8011472:	609a      	str	r2, [r3, #8]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2220      	movs	r2, #32
 8011478:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 801147c:	bf00      	nop
 801147e:	370c      	adds	r7, #12
 8011480:	46bd      	mov	sp, r7
 8011482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011486:	4770      	bx	lr

08011488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8011488:	b480      	push	{r7}
 801148a:	b083      	sub	sp, #12
 801148c:	af00      	add	r7, sp, #0
 801148e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8011490:	687b      	ldr	r3, [r7, #4]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	681a      	ldr	r2, [r3, #0]
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 801149e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	6899      	ldr	r1, [r3, #8]
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	681a      	ldr	r2, [r3, #0]
 80114aa:	4b08      	ldr	r3, [pc, #32]	; (80114cc <UART_EndRxTransfer+0x44>)
 80114ac:	400b      	ands	r3, r1
 80114ae:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	2220      	movs	r2, #32
 80114b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	2200      	movs	r2, #0
 80114bc:	66da      	str	r2, [r3, #108]	; 0x6c
}
 80114be:	bf00      	nop
 80114c0:	370c      	adds	r7, #12
 80114c2:	46bd      	mov	sp, r7
 80114c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114c8:	4770      	bx	lr
 80114ca:	bf00      	nop
 80114cc:	effffffe 	.word	0xeffffffe

080114d0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80114d0:	b580      	push	{r7, lr}
 80114d2:	b084      	sub	sp, #16
 80114d4:	af00      	add	r7, sp, #0
 80114d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80114dc:	60fb      	str	r3, [r7, #12]

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	69db      	ldr	r3, [r3, #28]
 80114e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80114e6:	d01f      	beq.n	8011528 <UART_DMAReceiveCplt+0x58>
  {
    huart->RxXferCount = 0U;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	2200      	movs	r2, #0
 80114ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80114f0:	68fb      	ldr	r3, [r7, #12]
 80114f2:	681b      	ldr	r3, [r3, #0]
 80114f4:	681a      	ldr	r2, [r3, #0]
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80114fe:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	681b      	ldr	r3, [r3, #0]
 8011504:	689a      	ldr	r2, [r3, #8]
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	681b      	ldr	r3, [r3, #0]
 801150a:	f022 0201 	bic.w	r2, r2, #1
 801150e:	609a      	str	r2, [r3, #8]

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011510:	68fb      	ldr	r3, [r7, #12]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	689a      	ldr	r2, [r3, #8]
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	681b      	ldr	r3, [r3, #0]
 801151a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801151e:	609a      	str	r2, [r3, #8]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	2220      	movs	r2, #32
 8011524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 8011528:	68f8      	ldr	r0, [r7, #12]
 801152a:	f7ef fdc3 	bl	80010b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801152e:	bf00      	nop
 8011530:	3710      	adds	r7, #16
 8011532:	46bd      	mov	sp, r7
 8011534:	bd80      	pop	{r7, pc}

08011536 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011536:	b580      	push	{r7, lr}
 8011538:	b084      	sub	sp, #16
 801153a:	af00      	add	r7, sp, #0
 801153c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801153e:	687b      	ldr	r3, [r7, #4]
 8011540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011542:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 8011544:	68f8      	ldr	r0, [r7, #12]
 8011546:	f7ef fd9f 	bl	8001088 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801154a:	bf00      	nop
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}

08011552 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011552:	b580      	push	{r7, lr}
 8011554:	b086      	sub	sp, #24
 8011556:	af00      	add	r7, sp, #0
 8011558:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801155a:	687b      	ldr	r3, [r7, #4]
 801155c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801155e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011566:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011568:	697b      	ldr	r3, [r7, #20]
 801156a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801156e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8011570:	697b      	ldr	r3, [r7, #20]
 8011572:	681b      	ldr	r3, [r3, #0]
 8011574:	689b      	ldr	r3, [r3, #8]
 8011576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801157a:	2b80      	cmp	r3, #128	; 0x80
 801157c:	d109      	bne.n	8011592 <UART_DMAError+0x40>
 801157e:	693b      	ldr	r3, [r7, #16]
 8011580:	2b21      	cmp	r3, #33	; 0x21
 8011582:	d106      	bne.n	8011592 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	2200      	movs	r2, #0
 8011588:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801158c:	6978      	ldr	r0, [r7, #20]
 801158e:	f7ff ff5d 	bl	801144c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011592:	697b      	ldr	r3, [r7, #20]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801159c:	2b40      	cmp	r3, #64	; 0x40
 801159e:	d109      	bne.n	80115b4 <UART_DMAError+0x62>
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	2b22      	cmp	r3, #34	; 0x22
 80115a4:	d106      	bne.n	80115b4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	2200      	movs	r2, #0
 80115aa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 80115ae:	6978      	ldr	r0, [r7, #20]
 80115b0:	f7ff ff6a 	bl	8011488 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80115b4:	697b      	ldr	r3, [r7, #20]
 80115b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80115ba:	f043 0210 	orr.w	r2, r3, #16
 80115be:	697b      	ldr	r3, [r7, #20]
 80115c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80115c4:	6978      	ldr	r0, [r7, #20]
 80115c6:	f7ff f81d 	bl	8010604 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115ca:	bf00      	nop
 80115cc:	3718      	adds	r7, #24
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}

080115d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80115d2:	b480      	push	{r7}
 80115d4:	b085      	sub	sp, #20
 80115d6:	af00      	add	r7, sp, #0
 80115d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80115da:	687b      	ldr	r3, [r7, #4]
 80115dc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80115e0:	2b01      	cmp	r3, #1
 80115e2:	d101      	bne.n	80115e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80115e4:	2302      	movs	r3, #2
 80115e6:	e027      	b.n	8011638 <HAL_UARTEx_DisableFifoMode+0x66>
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	2201      	movs	r2, #1
 80115ec:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	2224      	movs	r2, #36	; 0x24
 80115f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	681b      	ldr	r3, [r3, #0]
 80115fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	681a      	ldr	r2, [r3, #0]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	681b      	ldr	r3, [r3, #0]
 801160a:	f022 0201 	bic.w	r2, r2, #1
 801160e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8011610:	68fb      	ldr	r3, [r7, #12]
 8011612:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8011616:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8011618:	687b      	ldr	r3, [r7, #4]
 801161a:	2200      	movs	r2, #0
 801161c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801161e:	687b      	ldr	r3, [r7, #4]
 8011620:	681b      	ldr	r3, [r3, #0]
 8011622:	68fa      	ldr	r2, [r7, #12]
 8011624:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	2220      	movs	r2, #32
 801162a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801162e:	687b      	ldr	r3, [r7, #4]
 8011630:	2200      	movs	r2, #0
 8011632:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011636:	2300      	movs	r3, #0
}
 8011638:	4618      	mov	r0, r3
 801163a:	3714      	adds	r7, #20
 801163c:	46bd      	mov	sp, r7
 801163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011642:	4770      	bx	lr

08011644 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
 801164c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8011654:	2b01      	cmp	r3, #1
 8011656:	d101      	bne.n	801165c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8011658:	2302      	movs	r3, #2
 801165a:	e02d      	b.n	80116b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2201      	movs	r2, #1
 8011660:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8011664:	687b      	ldr	r3, [r7, #4]
 8011666:	2224      	movs	r2, #36	; 0x24
 8011668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801166c:	687b      	ldr	r3, [r7, #4]
 801166e:	681b      	ldr	r3, [r3, #0]
 8011670:	681b      	ldr	r3, [r3, #0]
 8011672:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8011674:	687b      	ldr	r3, [r7, #4]
 8011676:	681b      	ldr	r3, [r3, #0]
 8011678:	681a      	ldr	r2, [r3, #0]
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	f022 0201 	bic.w	r2, r2, #1
 8011682:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	681b      	ldr	r3, [r3, #0]
 8011688:	689b      	ldr	r3, [r3, #8]
 801168a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801168e:	687b      	ldr	r3, [r7, #4]
 8011690:	681b      	ldr	r3, [r3, #0]
 8011692:	683a      	ldr	r2, [r7, #0]
 8011694:	430a      	orrs	r2, r1
 8011696:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011698:	6878      	ldr	r0, [r7, #4]
 801169a:	f000 f84f 	bl	801173c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	681b      	ldr	r3, [r3, #0]
 80116a2:	68fa      	ldr	r2, [r7, #12]
 80116a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	2220      	movs	r2, #32
 80116aa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80116ae:	687b      	ldr	r3, [r7, #4]
 80116b0:	2200      	movs	r2, #0
 80116b2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80116b6:	2300      	movs	r3, #0
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3710      	adds	r7, #16
 80116bc:	46bd      	mov	sp, r7
 80116be:	bd80      	pop	{r7, pc}

080116c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80116c0:	b580      	push	{r7, lr}
 80116c2:	b084      	sub	sp, #16
 80116c4:	af00      	add	r7, sp, #0
 80116c6:	6078      	str	r0, [r7, #4]
 80116c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d101      	bne.n	80116d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80116d4:	2302      	movs	r3, #2
 80116d6:	e02d      	b.n	8011734 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	2201      	movs	r2, #1
 80116dc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80116e0:	687b      	ldr	r3, [r7, #4]
 80116e2:	2224      	movs	r2, #36	; 0x24
 80116e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	681b      	ldr	r3, [r3, #0]
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	681b      	ldr	r3, [r3, #0]
 80116f4:	681a      	ldr	r2, [r3, #0]
 80116f6:	687b      	ldr	r3, [r7, #4]
 80116f8:	681b      	ldr	r3, [r3, #0]
 80116fa:	f022 0201 	bic.w	r2, r2, #1
 80116fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8011700:	687b      	ldr	r3, [r7, #4]
 8011702:	681b      	ldr	r3, [r3, #0]
 8011704:	689b      	ldr	r3, [r3, #8]
 8011706:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 801170a:	687b      	ldr	r3, [r7, #4]
 801170c:	681b      	ldr	r3, [r3, #0]
 801170e:	683a      	ldr	r2, [r7, #0]
 8011710:	430a      	orrs	r2, r1
 8011712:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8011714:	6878      	ldr	r0, [r7, #4]
 8011716:	f000 f811 	bl	801173c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	681b      	ldr	r3, [r3, #0]
 801171e:	68fa      	ldr	r2, [r7, #12]
 8011720:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	2220      	movs	r2, #32
 8011726:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	2200      	movs	r2, #0
 801172e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8011732:	2300      	movs	r3, #0
}
 8011734:	4618      	mov	r0, r3
 8011736:	3710      	adds	r7, #16
 8011738:	46bd      	mov	sp, r7
 801173a:	bd80      	pop	{r7, pc}

0801173c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801173c:	b480      	push	{r7}
 801173e:	b089      	sub	sp, #36	; 0x24
 8011740:	af00      	add	r7, sp, #0
 8011742:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8011744:	4a2f      	ldr	r2, [pc, #188]	; (8011804 <UARTEx_SetNbDataToProcess+0xc8>)
 8011746:	f107 0314 	add.w	r3, r7, #20
 801174a:	e892 0003 	ldmia.w	r2, {r0, r1}
 801174e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8011752:	4a2d      	ldr	r2, [pc, #180]	; (8011808 <UARTEx_SetNbDataToProcess+0xcc>)
 8011754:	f107 030c 	add.w	r3, r7, #12
 8011758:	e892 0003 	ldmia.w	r2, {r0, r1}
 801175c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8011764:	2b00      	cmp	r3, #0
 8011766:	d108      	bne.n	801177a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2201      	movs	r2, #1
 801176c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	2201      	movs	r2, #1
 8011774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8011778:	e03d      	b.n	80117f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801177a:	2310      	movs	r3, #16
 801177c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801177e:	2310      	movs	r3, #16
 8011780:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8011782:	687b      	ldr	r3, [r7, #4]
 8011784:	681b      	ldr	r3, [r3, #0]
 8011786:	689b      	ldr	r3, [r3, #8]
 8011788:	0e5b      	lsrs	r3, r3, #25
 801178a:	b2db      	uxtb	r3, r3
 801178c:	f003 0307 	and.w	r3, r3, #7
 8011790:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8011792:	687b      	ldr	r3, [r7, #4]
 8011794:	681b      	ldr	r3, [r3, #0]
 8011796:	689b      	ldr	r3, [r3, #8]
 8011798:	0f5b      	lsrs	r3, r3, #29
 801179a:	b2db      	uxtb	r3, r3
 801179c:	f003 0307 	and.w	r3, r3, #7
 80117a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80117a2:	7fbb      	ldrb	r3, [r7, #30]
 80117a4:	7f3a      	ldrb	r2, [r7, #28]
 80117a6:	f107 0120 	add.w	r1, r7, #32
 80117aa:	440a      	add	r2, r1
 80117ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80117b0:	fb02 f303 	mul.w	r3, r2, r3
 80117b4:	7f3a      	ldrb	r2, [r7, #28]
 80117b6:	f107 0120 	add.w	r1, r7, #32
 80117ba:	440a      	add	r2, r1
 80117bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80117c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80117c4:	b29a      	uxth	r2, r3
 80117c6:	687b      	ldr	r3, [r7, #4]
 80117c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80117cc:	7ffb      	ldrb	r3, [r7, #31]
 80117ce:	7f7a      	ldrb	r2, [r7, #29]
 80117d0:	f107 0120 	add.w	r1, r7, #32
 80117d4:	440a      	add	r2, r1
 80117d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80117da:	fb02 f303 	mul.w	r3, r2, r3
 80117de:	7f7a      	ldrb	r2, [r7, #29]
 80117e0:	f107 0120 	add.w	r1, r7, #32
 80117e4:	440a      	add	r2, r1
 80117e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80117ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80117ee:	b29a      	uxth	r2, r3
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80117f6:	bf00      	nop
 80117f8:	3724      	adds	r7, #36	; 0x24
 80117fa:	46bd      	mov	sp, r7
 80117fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011800:	4770      	bx	lr
 8011802:	bf00      	nop
 8011804:	0801c4a8 	.word	0x0801c4a8
 8011808:	0801c4b0 	.word	0x0801c4b0

0801180c <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 801180c:	b084      	sub	sp, #16
 801180e:	b480      	push	{r7}
 8011810:	b085      	sub	sp, #20
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	f107 001c 	add.w	r0, r7, #28
 801181a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 801181e:	2300      	movs	r3, #0
 8011820:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8011822:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      |\
 8011824:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8011826:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8011828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      |\
 801182a:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 801182c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             |\
 801182e:	431a      	orrs	r2, r3
             Init.ClockDiv
 8011830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl |\
 8011832:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8011834:	68fa      	ldr	r2, [r7, #12]
 8011836:	4313      	orrs	r3, r2
 8011838:	60fb      	str	r3, [r7, #12]
             );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	685a      	ldr	r2, [r3, #4]
 801183e:	4b07      	ldr	r3, [pc, #28]	; (801185c <SDMMC_Init+0x50>)
 8011840:	4013      	ands	r3, r2
 8011842:	68fa      	ldr	r2, [r7, #12]
 8011844:	431a      	orrs	r2, r3
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 801184a:	2300      	movs	r3, #0
}
 801184c:	4618      	mov	r0, r3
 801184e:	3714      	adds	r7, #20
 8011850:	46bd      	mov	sp, r7
 8011852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011856:	b004      	add	sp, #16
 8011858:	4770      	bx	lr
 801185a:	bf00      	nop
 801185c:	ffc02c00 	.word	0xffc02c00

08011860 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8011860:	b480      	push	{r7}
 8011862:	b083      	sub	sp, #12
 8011864:	af00      	add	r7, sp, #0
 8011866:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8011868:	687b      	ldr	r3, [r7, #4]
 801186a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 801186e:	4618      	mov	r0, r3
 8011870:	370c      	adds	r7, #12
 8011872:	46bd      	mov	sp, r7
 8011874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011878:	4770      	bx	lr

0801187a <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 801187a:	b480      	push	{r7}
 801187c:	b083      	sub	sp, #12
 801187e:	af00      	add	r7, sp, #0
 8011880:	6078      	str	r0, [r7, #4]
 8011882:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	681a      	ldr	r2, [r3, #0]
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 801188e:	2300      	movs	r3, #0
}
 8011890:	4618      	mov	r0, r3
 8011892:	370c      	adds	r7, #12
 8011894:	46bd      	mov	sp, r7
 8011896:	f85d 7b04 	ldr.w	r7, [sp], #4
 801189a:	4770      	bx	lr

0801189c <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 801189c:	b480      	push	{r7}
 801189e:	b083      	sub	sp, #12
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	f043 0203 	orr.w	r2, r3, #3
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	370c      	adds	r7, #12
 80118b6:	46bd      	mov	sp, r7
 80118b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118bc:	4770      	bx	lr

080118be <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 80118be:	b480      	push	{r7}
 80118c0:	b083      	sub	sp, #12
 80118c2:	af00      	add	r7, sp, #0
 80118c4:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	681b      	ldr	r3, [r3, #0]
 80118ca:	f003 0303 	and.w	r3, r3, #3
}
 80118ce:	4618      	mov	r0, r3
 80118d0:	370c      	adds	r7, #12
 80118d2:	46bd      	mov	sp, r7
 80118d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118d8:	4770      	bx	lr
	...

080118dc <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80118dc:	b480      	push	{r7}
 80118de:	b085      	sub	sp, #20
 80118e0:	af00      	add	r7, sp, #0
 80118e2:	6078      	str	r0, [r7, #4]
 80118e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80118e6:	2300      	movs	r3, #0
 80118e8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80118ea:	683b      	ldr	r3, [r7, #0]
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	687b      	ldr	r3, [r7, #4]
 80118f0:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80118fa:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80118fc:	683b      	ldr	r3, [r7, #0]
 80118fe:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8011900:	431a      	orrs	r2, r3
                       Command->CPSM);
 8011902:	683b      	ldr	r3, [r7, #0]
 8011904:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8011906:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8011908:	68fa      	ldr	r2, [r7, #12]
 801190a:	4313      	orrs	r3, r2
 801190c:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	68da      	ldr	r2, [r3, #12]
 8011912:	4b06      	ldr	r3, [pc, #24]	; (801192c <SDMMC_SendCommand+0x50>)
 8011914:	4013      	ands	r3, r2
 8011916:	68fa      	ldr	r2, [r7, #12]
 8011918:	431a      	orrs	r2, r3
 801191a:	687b      	ldr	r3, [r7, #4]
 801191c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801191e:	2300      	movs	r3, #0
}
 8011920:	4618      	mov	r0, r3
 8011922:	3714      	adds	r7, #20
 8011924:	46bd      	mov	sp, r7
 8011926:	f85d 7b04 	ldr.w	r7, [sp], #4
 801192a:	4770      	bx	lr
 801192c:	fffee0c0 	.word	0xfffee0c0

08011930 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8011930:	b480      	push	{r7}
 8011932:	b083      	sub	sp, #12
 8011934:	af00      	add	r7, sp, #0
 8011936:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	691b      	ldr	r3, [r3, #16]
 801193c:	b2db      	uxtb	r3, r3
}
 801193e:	4618      	mov	r0, r3
 8011940:	370c      	adds	r7, #12
 8011942:	46bd      	mov	sp, r7
 8011944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011948:	4770      	bx	lr

0801194a <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 801194a:	b480      	push	{r7}
 801194c:	b085      	sub	sp, #20
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8011954:	687b      	ldr	r3, [r7, #4]
 8011956:	3314      	adds	r3, #20
 8011958:	461a      	mov	r2, r3
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	4413      	add	r3, r2
 801195e:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8011960:	68fb      	ldr	r3, [r7, #12]
 8011962:	681b      	ldr	r3, [r3, #0]
}
 8011964:	4618      	mov	r0, r3
 8011966:	3714      	adds	r7, #20
 8011968:	46bd      	mov	sp, r7
 801196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801196e:	4770      	bx	lr

08011970 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8011970:	b480      	push	{r7}
 8011972:	b085      	sub	sp, #20
 8011974:	af00      	add	r7, sp, #0
 8011976:	6078      	str	r0, [r7, #4]
 8011978:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 801197a:	2300      	movs	r3, #0
 801197c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 801197e:	683b      	ldr	r3, [r7, #0]
 8011980:	681a      	ldr	r2, [r3, #0]
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8011986:	683b      	ldr	r3, [r7, #0]
 8011988:	685a      	ldr	r2, [r3, #4]
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 801198e:	683b      	ldr	r3, [r7, #0]
 8011990:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8011992:	683b      	ldr	r3, [r7, #0]
 8011994:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8011996:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8011998:	683b      	ldr	r3, [r7, #0]
 801199a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 801199c:	431a      	orrs	r2, r3
                       Data->DPSM);
 801199e:	683b      	ldr	r3, [r7, #0]
 80119a0:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 80119a2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80119a4:	68fa      	ldr	r2, [r7, #12]
 80119a6:	4313      	orrs	r3, r2
 80119a8:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80119ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80119b2:	68fb      	ldr	r3, [r7, #12]
 80119b4:	431a      	orrs	r2, r3
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80119ba:	2300      	movs	r3, #0

}
 80119bc:	4618      	mov	r0, r3
 80119be:	3714      	adds	r7, #20
 80119c0:	46bd      	mov	sp, r7
 80119c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119c6:	4770      	bx	lr

080119c8 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b088      	sub	sp, #32
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
 80119d0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80119d2:	683b      	ldr	r3, [r7, #0]
 80119d4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80119d6:	2310      	movs	r3, #16
 80119d8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80119da:	f44f 7380 	mov.w	r3, #256	; 0x100
 80119de:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80119e0:	2300      	movs	r3, #0
 80119e2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80119e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80119e8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80119ea:	f107 0308 	add.w	r3, r7, #8
 80119ee:	4619      	mov	r1, r3
 80119f0:	6878      	ldr	r0, [r7, #4]
 80119f2:	f7ff ff73 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80119f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80119fa:	2110      	movs	r1, #16
 80119fc:	6878      	ldr	r0, [r7, #4]
 80119fe:	f000 faaf 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011a02:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a04:	69fb      	ldr	r3, [r7, #28]
}
 8011a06:	4618      	mov	r0, r3
 8011a08:	3720      	adds	r7, #32
 8011a0a:	46bd      	mov	sp, r7
 8011a0c:	bd80      	pop	{r7, pc}

08011a0e <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a0e:	b580      	push	{r7, lr}
 8011a10:	b088      	sub	sp, #32
 8011a12:	af00      	add	r7, sp, #0
 8011a14:	6078      	str	r0, [r7, #4]
 8011a16:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a18:	683b      	ldr	r3, [r7, #0]
 8011a1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8011a1c:	2311      	movs	r3, #17
 8011a1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a24:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a26:	2300      	movs	r3, #0
 8011a28:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a2e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a30:	f107 0308 	add.w	r3, r7, #8
 8011a34:	4619      	mov	r1, r3
 8011a36:	6878      	ldr	r0, [r7, #4]
 8011a38:	f7ff ff50 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a40:	2111      	movs	r1, #17
 8011a42:	6878      	ldr	r0, [r7, #4]
 8011a44:	f000 fa8c 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011a48:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a4a:	69fb      	ldr	r3, [r7, #28]
}
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	3720      	adds	r7, #32
 8011a50:	46bd      	mov	sp, r7
 8011a52:	bd80      	pop	{r7, pc}

08011a54 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b088      	sub	sp, #32
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
 8011a5c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8011a5e:	683b      	ldr	r3, [r7, #0]
 8011a60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8011a62:	2312      	movs	r3, #18
 8011a64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011a66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011a6a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011a70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011a74:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011a76:	f107 0308 	add.w	r3, r7, #8
 8011a7a:	4619      	mov	r1, r3
 8011a7c:	6878      	ldr	r0, [r7, #4]
 8011a7e:	f7ff ff2d 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011a82:	f241 3288 	movw	r2, #5000	; 0x1388
 8011a86:	2112      	movs	r1, #18
 8011a88:	6878      	ldr	r0, [r7, #4]
 8011a8a:	f000 fa69 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011a8e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011a90:	69fb      	ldr	r3, [r7, #28]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3720      	adds	r7, #32
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b088      	sub	sp, #32
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	6078      	str	r0, [r7, #4]
 8011aa2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011aa4:	683b      	ldr	r3, [r7, #0]
 8011aa6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8011aa8:	2318      	movs	r3, #24
 8011aaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011aac:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ab0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011ab6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011aba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011abc:	f107 0308 	add.w	r3, r7, #8
 8011ac0:	4619      	mov	r1, r3
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7ff ff0a 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8011ac8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011acc:	2118      	movs	r1, #24
 8011ace:	6878      	ldr	r0, [r7, #4]
 8011ad0:	f000 fa46 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011ad4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ad6:	69fb      	ldr	r3, [r7, #28]
}
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3720      	adds	r7, #32
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd80      	pop	{r7, pc}

08011ae0 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b088      	sub	sp, #32
 8011ae4:	af00      	add	r7, sp, #0
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8011aea:	683b      	ldr	r3, [r7, #0]
 8011aec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8011aee:	2319      	movs	r3, #25
 8011af0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011af8:	2300      	movs	r3, #0
 8011afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011afc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b00:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b02:	f107 0308 	add.w	r3, r7, #8
 8011b06:	4619      	mov	r1, r3
 8011b08:	6878      	ldr	r0, [r7, #4]
 8011b0a:	f7ff fee7 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8011b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8011b12:	2119      	movs	r1, #25
 8011b14:	6878      	ldr	r0, [r7, #4]
 8011b16:	f000 fa23 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011b1a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011b1c:	69fb      	ldr	r3, [r7, #28]
}
 8011b1e:	4618      	mov	r0, r3
 8011b20:	3720      	adds	r7, #32
 8011b22:	46bd      	mov	sp, r7
 8011b24:	bd80      	pop	{r7, pc}
	...

08011b28 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8011b28:	b580      	push	{r7, lr}
 8011b2a:	b088      	sub	sp, #32
 8011b2c:	af00      	add	r7, sp, #0
 8011b2e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8011b30:	2300      	movs	r3, #0
 8011b32:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8011b34:	230c      	movs	r3, #12
 8011b36:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011b38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011b3c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011b3e:	2300      	movs	r3, #0
 8011b40:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011b42:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011b46:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	68db      	ldr	r3, [r3, #12]
 8011b4c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8011b54:	687b      	ldr	r3, [r7, #4]
 8011b56:	68db      	ldr	r3, [r3, #12]
 8011b58:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011b60:	f107 0308 	add.w	r3, r7, #8
 8011b64:	4619      	mov	r1, r3
 8011b66:	6878      	ldr	r0, [r7, #4]
 8011b68:	f7ff feb8 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8011b6c:	4a0b      	ldr	r2, [pc, #44]	; (8011b9c <SDMMC_CmdStopTransfer+0x74>)
 8011b6e:	210c      	movs	r1, #12
 8011b70:	6878      	ldr	r0, [r7, #4]
 8011b72:	f000 f9f5 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011b76:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8011b78:	687b      	ldr	r3, [r7, #4]
 8011b7a:	68db      	ldr	r3, [r3, #12]
 8011b7c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8011b84:	69fb      	ldr	r3, [r7, #28]
 8011b86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8011b8a:	d101      	bne.n	8011b90 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8011b8c:	2300      	movs	r3, #0
 8011b8e:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8011b90:	69fb      	ldr	r3, [r7, #28]
}
 8011b92:	4618      	mov	r0, r3
 8011b94:	3720      	adds	r7, #32
 8011b96:	46bd      	mov	sp, r7
 8011b98:	bd80      	pop	{r7, pc}
 8011b9a:	bf00      	nop
 8011b9c:	05f5e100 	.word	0x05f5e100

08011ba0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b08a      	sub	sp, #40	; 0x28
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	60f8      	str	r0, [r7, #12]
 8011ba8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8011bac:	683b      	ldr	r3, [r7, #0]
 8011bae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8011bb0:	2307      	movs	r3, #7
 8011bb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011bb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011bb8:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bba:	2300      	movs	r3, #0
 8011bbc:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011bc2:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011bc4:	f107 0310 	add.w	r3, r7, #16
 8011bc8:	4619      	mov	r1, r3
 8011bca:	68f8      	ldr	r0, [r7, #12]
 8011bcc:	f7ff fe86 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8011bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8011bd4:	2107      	movs	r1, #7
 8011bd6:	68f8      	ldr	r0, [r7, #12]
 8011bd8:	f000 f9c2 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011bdc:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8011bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8011be0:	4618      	mov	r0, r3
 8011be2:	3728      	adds	r7, #40	; 0x28
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8011be8:	b580      	push	{r7, lr}
 8011bea:	b088      	sub	sp, #32
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011bf0:	2300      	movs	r3, #0
 8011bf2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8011bf4:	2300      	movs	r3, #0
 8011bf6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8011bf8:	2300      	movs	r3, #0
 8011bfa:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011bfc:	2300      	movs	r3, #0
 8011bfe:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c04:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c06:	f107 0308 	add.w	r3, r7, #8
 8011c0a:	4619      	mov	r1, r3
 8011c0c:	6878      	ldr	r0, [r7, #4]
 8011c0e:	f7ff fe65 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f000 f976 	bl	8011f04 <SDMMC_GetCmdError>
 8011c18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c1a:	69fb      	ldr	r3, [r7, #28]
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3720      	adds	r7, #32
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8011c24:	b580      	push	{r7, lr}
 8011c26:	b088      	sub	sp, #32
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8011c2c:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8011c30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8011c32:	2308      	movs	r3, #8
 8011c34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c3a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c3c:	2300      	movs	r3, #0
 8011c3e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c44:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c46:	f107 0308 	add.w	r3, r7, #8
 8011c4a:	4619      	mov	r1, r3
 8011c4c:	6878      	ldr	r0, [r7, #4]
 8011c4e:	f7ff fe45 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f000 fb78 	bl	8012348 <SDMMC_GetCmdResp7>
 8011c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011c5a:	69fb      	ldr	r3, [r7, #28]
}
 8011c5c:	4618      	mov	r0, r3
 8011c5e:	3720      	adds	r7, #32
 8011c60:	46bd      	mov	sp, r7
 8011c62:	bd80      	pop	{r7, pc}

08011c64 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011c64:	b580      	push	{r7, lr}
 8011c66:	b088      	sub	sp, #32
 8011c68:	af00      	add	r7, sp, #0
 8011c6a:	6078      	str	r0, [r7, #4]
 8011c6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8011c6e:	683b      	ldr	r3, [r7, #0]
 8011c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8011c72:	2337      	movs	r3, #55	; 0x37
 8011c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011c80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011c86:	f107 0308 	add.w	r3, r7, #8
 8011c8a:	4619      	mov	r1, r3
 8011c8c:	6878      	ldr	r0, [r7, #4]
 8011c8e:	f7ff fe25 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8011c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8011c96:	2137      	movs	r1, #55	; 0x37
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f000 f961 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ca0:	69fb      	ldr	r3, [r7, #28]
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3720      	adds	r7, #32
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}

08011caa <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011caa:	b580      	push	{r7, lr}
 8011cac:	b088      	sub	sp, #32
 8011cae:	af00      	add	r7, sp, #0
 8011cb0:	6078      	str	r0, [r7, #4]
 8011cb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011cb4:	683b      	ldr	r3, [r7, #0]
 8011cb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8011cb8:	2329      	movs	r3, #41	; 0x29
 8011cba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011cc2:	2300      	movs	r3, #0
 8011cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ccc:	f107 0308 	add.w	r3, r7, #8
 8011cd0:	4619      	mov	r1, r3
 8011cd2:	6878      	ldr	r0, [r7, #4]
 8011cd4:	f7ff fe02 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8011cd8:	6878      	ldr	r0, [r7, #4]
 8011cda:	f000 fa7d 	bl	80121d8 <SDMMC_GetCmdResp3>
 8011cde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011ce0:	69fb      	ldr	r3, [r7, #28]
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3720      	adds	r7, #32
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}

08011cea <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8011cea:	b580      	push	{r7, lr}
 8011cec:	b088      	sub	sp, #32
 8011cee:	af00      	add	r7, sp, #0
 8011cf0:	6078      	str	r0, [r7, #4]
 8011cf2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8011cf4:	683b      	ldr	r3, [r7, #0]
 8011cf6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8011cf8:	2306      	movs	r3, #6
 8011cfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011cfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d02:	2300      	movs	r3, #0
 8011d04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d0c:	f107 0308 	add.w	r3, r7, #8
 8011d10:	4619      	mov	r1, r3
 8011d12:	6878      	ldr	r0, [r7, #4]
 8011d14:	f7ff fde2 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8011d18:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d1c:	2106      	movs	r1, #6
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f000 f91e 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011d24:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d26:	69fb      	ldr	r3, [r7, #28]
}
 8011d28:	4618      	mov	r0, r3
 8011d2a:	3720      	adds	r7, #32
 8011d2c:	46bd      	mov	sp, r7
 8011d2e:	bd80      	pop	{r7, pc}

08011d30 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8011d30:	b580      	push	{r7, lr}
 8011d32:	b088      	sub	sp, #32
 8011d34:	af00      	add	r7, sp, #0
 8011d36:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8011d38:	2300      	movs	r3, #0
 8011d3a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8011d3c:	2333      	movs	r3, #51	; 0x33
 8011d3e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011d40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011d44:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d46:	2300      	movs	r3, #0
 8011d48:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d4e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d50:	f107 0308 	add.w	r3, r7, #8
 8011d54:	4619      	mov	r1, r3
 8011d56:	6878      	ldr	r0, [r7, #4]
 8011d58:	f7ff fdc0 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8011d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8011d60:	2133      	movs	r1, #51	; 0x33
 8011d62:	6878      	ldr	r0, [r7, #4]
 8011d64:	f000 f8fc 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011d68:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011d6a:	69fb      	ldr	r3, [r7, #28]
}
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	3720      	adds	r7, #32
 8011d70:	46bd      	mov	sp, r7
 8011d72:	bd80      	pop	{r7, pc}

08011d74 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8011d74:	b580      	push	{r7, lr}
 8011d76:	b088      	sub	sp, #32
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8011d7c:	2300      	movs	r3, #0
 8011d7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8011d80:	2302      	movs	r3, #2
 8011d82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011d84:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011d88:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011d92:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011d94:	f107 0308 	add.w	r3, r7, #8
 8011d98:	4619      	mov	r1, r3
 8011d9a:	6878      	ldr	r0, [r7, #4]
 8011d9c:	f7ff fd9e 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011da0:	6878      	ldr	r0, [r7, #4]
 8011da2:	f000 f9cf 	bl	8012144 <SDMMC_GetCmdResp2>
 8011da6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011da8:	69fb      	ldr	r3, [r7, #28]
}
 8011daa:	4618      	mov	r0, r3
 8011dac:	3720      	adds	r7, #32
 8011dae:	46bd      	mov	sp, r7
 8011db0:	bd80      	pop	{r7, pc}

08011db2 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011db2:	b580      	push	{r7, lr}
 8011db4:	b088      	sub	sp, #32
 8011db6:	af00      	add	r7, sp, #0
 8011db8:	6078      	str	r0, [r7, #4]
 8011dba:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8011dc0:	2309      	movs	r3, #9
 8011dc2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8011dc4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8011dc8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011dd2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011dd4:	f107 0308 	add.w	r3, r7, #8
 8011dd8:	4619      	mov	r1, r3
 8011dda:	6878      	ldr	r0, [r7, #4]
 8011ddc:	f7ff fd7e 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8011de0:	6878      	ldr	r0, [r7, #4]
 8011de2:	f000 f9af 	bl	8012144 <SDMMC_GetCmdResp2>
 8011de6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011de8:	69fb      	ldr	r3, [r7, #28]
}
 8011dea:	4618      	mov	r0, r3
 8011dec:	3720      	adds	r7, #32
 8011dee:	46bd      	mov	sp, r7
 8011df0:	bd80      	pop	{r7, pc}

08011df2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8011df2:	b580      	push	{r7, lr}
 8011df4:	b088      	sub	sp, #32
 8011df6:	af00      	add	r7, sp, #0
 8011df8:	6078      	str	r0, [r7, #4]
 8011dfa:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8011e00:	2303      	movs	r3, #3
 8011e02:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e04:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e08:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e0a:	2300      	movs	r3, #0
 8011e0c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e12:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e14:	f107 0308 	add.w	r3, r7, #8
 8011e18:	4619      	mov	r1, r3
 8011e1a:	6878      	ldr	r0, [r7, #4]
 8011e1c:	f7ff fd5e 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8011e20:	683a      	ldr	r2, [r7, #0]
 8011e22:	2103      	movs	r1, #3
 8011e24:	6878      	ldr	r0, [r7, #4]
 8011e26:	f000 fa17 	bl	8012258 <SDMMC_GetCmdResp6>
 8011e2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e2c:	69fb      	ldr	r3, [r7, #28]
}
 8011e2e:	4618      	mov	r0, r3
 8011e30:	3720      	adds	r7, #32
 8011e32:	46bd      	mov	sp, r7
 8011e34:	bd80      	pop	{r7, pc}

08011e36 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8011e36:	b580      	push	{r7, lr}
 8011e38:	b088      	sub	sp, #32
 8011e3a:	af00      	add	r7, sp, #0
 8011e3c:	6078      	str	r0, [r7, #4]
 8011e3e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8011e40:	683b      	ldr	r3, [r7, #0]
 8011e42:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8011e44:	230d      	movs	r3, #13
 8011e46:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e48:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e4c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e4e:	2300      	movs	r3, #0
 8011e50:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e56:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e58:	f107 0308 	add.w	r3, r7, #8
 8011e5c:	4619      	mov	r1, r3
 8011e5e:	6878      	ldr	r0, [r7, #4]
 8011e60:	f7ff fd3c 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8011e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8011e68:	210d      	movs	r1, #13
 8011e6a:	6878      	ldr	r0, [r7, #4]
 8011e6c:	f000 f878 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011e70:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011e72:	69fb      	ldr	r3, [r7, #28]
}
 8011e74:	4618      	mov	r0, r3
 8011e76:	3720      	adds	r7, #32
 8011e78:	46bd      	mov	sp, r7
 8011e7a:	bd80      	pop	{r7, pc}

08011e7c <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8011e7c:	b580      	push	{r7, lr}
 8011e7e:	b088      	sub	sp, #32
 8011e80:	af00      	add	r7, sp, #0
 8011e82:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8011e84:	2300      	movs	r3, #0
 8011e86:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 8011e88:	230d      	movs	r3, #13
 8011e8a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011e8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011e90:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011e92:	2300      	movs	r3, #0
 8011e94:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011e9a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011e9c:	f107 0308 	add.w	r3, r7, #8
 8011ea0:	4619      	mov	r1, r3
 8011ea2:	6878      	ldr	r0, [r7, #4]
 8011ea4:	f7ff fd1a 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 8011ea8:	f241 3288 	movw	r2, #5000	; 0x1388
 8011eac:	210d      	movs	r1, #13
 8011eae:	6878      	ldr	r0, [r7, #4]
 8011eb0:	f000 f856 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011eb4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011eb6:	69fb      	ldr	r3, [r7, #28]
}
 8011eb8:	4618      	mov	r0, r3
 8011eba:	3720      	adds	r7, #32
 8011ebc:	46bd      	mov	sp, r7
 8011ebe:	bd80      	pop	{r7, pc}

08011ec0 <SDMMC_CmdVoltageSwitch>:
  *         condition register (OCR)
  * @param  None
  * @retval HAL status
  */
uint32_t SDMMC_CmdVoltageSwitch(SDMMC_TypeDef *SDMMCx)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	b088      	sub	sp, #32
 8011ec4:	af00      	add	r7, sp, #0
 8011ec6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0x00000000;
 8011ec8:	2300      	movs	r3, #0
 8011eca:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_VOLTAGE_SWITCH;
 8011ecc:	230b      	movs	r3, #11
 8011ece:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8011ed0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011ed4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8011ed6:	2300      	movs	r3, #0
 8011ed8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8011eda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8011ede:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8011ee0:	f107 0308 	add.w	r3, r7, #8
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	6878      	ldr	r0, [r7, #4]
 8011ee8:	f7ff fcf8 	bl	80118dc <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_VOLTAGE_SWITCH, SDMMC_CMDTIMEOUT);
 8011eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8011ef0:	210b      	movs	r1, #11
 8011ef2:	6878      	ldr	r0, [r7, #4]
 8011ef4:	f000 f834 	bl	8011f60 <SDMMC_GetCmdResp1>
 8011ef8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8011efa:	69fb      	ldr	r3, [r7, #28]
}
 8011efc:	4618      	mov	r0, r3
 8011efe:	3720      	adds	r7, #32
 8011f00:	46bd      	mov	sp, r7
 8011f02:	bd80      	pop	{r7, pc}

08011f04 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8011f04:	b480      	push	{r7}
 8011f06:	b085      	sub	sp, #20
 8011f08:	af00      	add	r7, sp, #0
 8011f0a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8011f0c:	4b11      	ldr	r3, [pc, #68]	; (8011f54 <SDMMC_GetCmdError+0x50>)
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	4a11      	ldr	r2, [pc, #68]	; (8011f58 <SDMMC_GetCmdError+0x54>)
 8011f12:	fba2 2303 	umull	r2, r3, r2, r3
 8011f16:	0a5b      	lsrs	r3, r3, #9
 8011f18:	f241 3288 	movw	r2, #5000	; 0x1388
 8011f1c:	fb02 f303 	mul.w	r3, r2, r3
 8011f20:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8011f22:	68fb      	ldr	r3, [r7, #12]
 8011f24:	1e5a      	subs	r2, r3, #1
 8011f26:	60fa      	str	r2, [r7, #12]
 8011f28:	2b00      	cmp	r3, #0
 8011f2a:	d102      	bne.n	8011f32 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f30:	e009      	b.n	8011f46 <SDMMC_GetCmdError+0x42>
    }

  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011f3a:	2b00      	cmp	r3, #0
 8011f3c:	d0f1      	beq.n	8011f22 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011f3e:	687b      	ldr	r3, [r7, #4]
 8011f40:	4a06      	ldr	r2, [pc, #24]	; (8011f5c <SDMMC_GetCmdError+0x58>)
 8011f42:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8011f44:	2300      	movs	r3, #0
}
 8011f46:	4618      	mov	r0, r3
 8011f48:	3714      	adds	r7, #20
 8011f4a:	46bd      	mov	sp, r7
 8011f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f50:	4770      	bx	lr
 8011f52:	bf00      	nop
 8011f54:	24000010 	.word	0x24000010
 8011f58:	10624dd3 	.word	0x10624dd3
 8011f5c:	002000c5 	.word	0x002000c5

08011f60 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8011f60:	b580      	push	{r7, lr}
 8011f62:	b088      	sub	sp, #32
 8011f64:	af00      	add	r7, sp, #0
 8011f66:	60f8      	str	r0, [r7, #12]
 8011f68:	460b      	mov	r3, r1
 8011f6a:	607a      	str	r2, [r7, #4]
 8011f6c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8011f6e:	4b70      	ldr	r3, [pc, #448]	; (8012130 <SDMMC_GetCmdResp1+0x1d0>)
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	4a70      	ldr	r2, [pc, #448]	; (8012134 <SDMMC_GetCmdResp1+0x1d4>)
 8011f74:	fba2 2303 	umull	r2, r3, r2, r3
 8011f78:	0a5a      	lsrs	r2, r3, #9
 8011f7a:	687b      	ldr	r3, [r7, #4]
 8011f7c:	fb02 f303 	mul.w	r3, r2, r3
 8011f80:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	1e5a      	subs	r2, r3, #1
 8011f86:	61fa      	str	r2, [r7, #28]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d102      	bne.n	8011f92 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8011f8c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8011f90:	e0c9      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011f96:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011f98:	69ba      	ldr	r2, [r7, #24]
 8011f9a:	4b67      	ldr	r3, [pc, #412]	; (8012138 <SDMMC_GetCmdResp1+0x1d8>)
 8011f9c:	4013      	ands	r3, r2
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d0ef      	beq.n	8011f82 <SDMMC_GetCmdResp1+0x22>
 8011fa2:	69bb      	ldr	r3, [r7, #24]
 8011fa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT | SDMMC_FLAG_BUSYD0END)) == 0U) ||
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d1ea      	bne.n	8011f82 <SDMMC_GetCmdResp1+0x22>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fb0:	f003 0304 	and.w	r3, r3, #4
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	d004      	beq.n	8011fc2 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8011fb8:	68fb      	ldr	r3, [r7, #12]
 8011fba:	2204      	movs	r2, #4
 8011fbc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8011fbe:	2304      	movs	r3, #4
 8011fc0:	e0b1      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011fc6:	f003 0301 	and.w	r3, r3, #1
 8011fca:	2b00      	cmp	r3, #0
 8011fcc:	d004      	beq.n	8011fd8 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8011fce:	68fb      	ldr	r3, [r7, #12]
 8011fd0:	2201      	movs	r2, #1
 8011fd2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fd4:	2301      	movs	r3, #1
 8011fd6:	e0a6      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8011fd8:	68fb      	ldr	r3, [r7, #12]
 8011fda:	4a58      	ldr	r2, [pc, #352]	; (801213c <SDMMC_GetCmdResp1+0x1dc>)
 8011fdc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8011fde:	68f8      	ldr	r0, [r7, #12]
 8011fe0:	f7ff fca6 	bl	8011930 <SDMMC_GetCommandResponse>
 8011fe4:	4603      	mov	r3, r0
 8011fe6:	461a      	mov	r2, r3
 8011fe8:	7afb      	ldrb	r3, [r7, #11]
 8011fea:	4293      	cmp	r3, r2
 8011fec:	d001      	beq.n	8011ff2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8011fee:	2301      	movs	r3, #1
 8011ff0:	e099      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8011ff2:	2100      	movs	r1, #0
 8011ff4:	68f8      	ldr	r0, [r7, #12]
 8011ff6:	f7ff fca8 	bl	801194a <SDMMC_GetResponse>
 8011ffa:	6178      	str	r0, [r7, #20]

  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8011ffc:	697a      	ldr	r2, [r7, #20]
 8011ffe:	4b50      	ldr	r3, [pc, #320]	; (8012140 <SDMMC_GetCmdResp1+0x1e0>)
 8012000:	4013      	ands	r3, r2
 8012002:	2b00      	cmp	r3, #0
 8012004:	d101      	bne.n	801200a <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8012006:	2300      	movs	r3, #0
 8012008:	e08d      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b00      	cmp	r3, #0
 801200e:	da02      	bge.n	8012016 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8012010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8012014:	e087      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8012016:	697b      	ldr	r3, [r7, #20]
 8012018:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801201c:	2b00      	cmp	r3, #0
 801201e:	d001      	beq.n	8012024 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8012020:	2340      	movs	r3, #64	; 0x40
 8012022:	e080      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8012024:	697b      	ldr	r3, [r7, #20]
 8012026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801202a:	2b00      	cmp	r3, #0
 801202c:	d001      	beq.n	8012032 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 801202e:	2380      	movs	r3, #128	; 0x80
 8012030:	e079      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8012032:	697b      	ldr	r3, [r7, #20]
 8012034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8012038:	2b00      	cmp	r3, #0
 801203a:	d002      	beq.n	8012042 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 801203c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8012040:	e071      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8012042:	697b      	ldr	r3, [r7, #20]
 8012044:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012048:	2b00      	cmp	r3, #0
 801204a:	d002      	beq.n	8012052 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 801204c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8012050:	e069      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8012052:	697b      	ldr	r3, [r7, #20]
 8012054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8012058:	2b00      	cmp	r3, #0
 801205a:	d002      	beq.n	8012062 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 801205c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012060:	e061      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8012062:	697b      	ldr	r3, [r7, #20]
 8012064:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8012068:	2b00      	cmp	r3, #0
 801206a:	d002      	beq.n	8012072 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 801206c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012070:	e059      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8012072:	697b      	ldr	r3, [r7, #20]
 8012074:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8012078:	2b00      	cmp	r3, #0
 801207a:	d002      	beq.n	8012082 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 801207c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012080:	e051      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8012082:	697b      	ldr	r3, [r7, #20]
 8012084:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8012088:	2b00      	cmp	r3, #0
 801208a:	d002      	beq.n	8012092 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 801208c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8012090:	e049      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8012092:	697b      	ldr	r3, [r7, #20]
 8012094:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8012098:	2b00      	cmp	r3, #0
 801209a:	d002      	beq.n	80120a2 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 801209c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80120a0:	e041      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80120a2:	697b      	ldr	r3, [r7, #20]
 80120a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d002      	beq.n	80120b2 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 80120ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80120b0:	e039      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80120b2:	697b      	ldr	r3, [r7, #20]
 80120b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80120b8:	2b00      	cmp	r3, #0
 80120ba:	d002      	beq.n	80120c2 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80120bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80120c0:	e031      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80120c2:	697b      	ldr	r3, [r7, #20]
 80120c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80120c8:	2b00      	cmp	r3, #0
 80120ca:	d002      	beq.n	80120d2 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80120cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80120d0:	e029      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80120d2:	697b      	ldr	r3, [r7, #20]
 80120d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d002      	beq.n	80120e2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80120dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80120e0:	e021      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80120e2:	697b      	ldr	r3, [r7, #20]
 80120e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d002      	beq.n	80120f2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80120ec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80120f0:	e019      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 80120f2:	697b      	ldr	r3, [r7, #20]
 80120f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d002      	beq.n	8012102 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 80120fc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8012100:	e011      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8012102:	697b      	ldr	r3, [r7, #20]
 8012104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8012108:	2b00      	cmp	r3, #0
 801210a:	d002      	beq.n	8012112 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 801210c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012110:	e009      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8012112:	697b      	ldr	r3, [r7, #20]
 8012114:	f003 0308 	and.w	r3, r3, #8
 8012118:	2b00      	cmp	r3, #0
 801211a:	d002      	beq.n	8012122 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 801211c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8012120:	e001      	b.n	8012126 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8012122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012126:	4618      	mov	r0, r3
 8012128:	3720      	adds	r7, #32
 801212a:	46bd      	mov	sp, r7
 801212c:	bd80      	pop	{r7, pc}
 801212e:	bf00      	nop
 8012130:	24000010 	.word	0x24000010
 8012134:	10624dd3 	.word	0x10624dd3
 8012138:	00200045 	.word	0x00200045
 801213c:	002000c5 	.word	0x002000c5
 8012140:	fdffe008 	.word	0xfdffe008

08012144 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8012144:	b480      	push	{r7}
 8012146:	b085      	sub	sp, #20
 8012148:	af00      	add	r7, sp, #0
 801214a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 801214c:	4b1f      	ldr	r3, [pc, #124]	; (80121cc <SDMMC_GetCmdResp2+0x88>)
 801214e:	681b      	ldr	r3, [r3, #0]
 8012150:	4a1f      	ldr	r2, [pc, #124]	; (80121d0 <SDMMC_GetCmdResp2+0x8c>)
 8012152:	fba2 2303 	umull	r2, r3, r2, r3
 8012156:	0a5b      	lsrs	r3, r3, #9
 8012158:	f241 3288 	movw	r2, #5000	; 0x1388
 801215c:	fb02 f303 	mul.w	r3, r2, r3
 8012160:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	1e5a      	subs	r2, r3, #1
 8012166:	60fa      	str	r2, [r7, #12]
 8012168:	2b00      	cmp	r3, #0
 801216a:	d102      	bne.n	8012172 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 801216c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012170:	e026      	b.n	80121c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8012172:	687b      	ldr	r3, [r7, #4]
 8012174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012176:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 801217e:	2b00      	cmp	r3, #0
 8012180:	d0ef      	beq.n	8012162 <SDMMC_GetCmdResp2+0x1e>
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012188:	2b00      	cmp	r3, #0
 801218a:	d1ea      	bne.n	8012162 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 801218c:	687b      	ldr	r3, [r7, #4]
 801218e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012190:	f003 0304 	and.w	r3, r3, #4
 8012194:	2b00      	cmp	r3, #0
 8012196:	d004      	beq.n	80121a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	2204      	movs	r2, #4
 801219c:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 801219e:	2304      	movs	r3, #4
 80121a0:	e00e      	b.n	80121c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80121a6:	f003 0301 	and.w	r3, r3, #1
 80121aa:	2b00      	cmp	r3, #0
 80121ac:	d004      	beq.n	80121b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	2201      	movs	r2, #1
 80121b2:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80121b4:	2301      	movs	r3, #1
 80121b6:	e003      	b.n	80121c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80121b8:	687b      	ldr	r3, [r7, #4]
 80121ba:	4a06      	ldr	r2, [pc, #24]	; (80121d4 <SDMMC_GetCmdResp2+0x90>)
 80121bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80121be:	2300      	movs	r3, #0
}
 80121c0:	4618      	mov	r0, r3
 80121c2:	3714      	adds	r7, #20
 80121c4:	46bd      	mov	sp, r7
 80121c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ca:	4770      	bx	lr
 80121cc:	24000010 	.word	0x24000010
 80121d0:	10624dd3 	.word	0x10624dd3
 80121d4:	002000c5 	.word	0x002000c5

080121d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 80121d8:	b480      	push	{r7}
 80121da:	b085      	sub	sp, #20
 80121dc:	af00      	add	r7, sp, #0
 80121de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80121e0:	4b1a      	ldr	r3, [pc, #104]	; (801224c <SDMMC_GetCmdResp3+0x74>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	4a1a      	ldr	r2, [pc, #104]	; (8012250 <SDMMC_GetCmdResp3+0x78>)
 80121e6:	fba2 2303 	umull	r2, r3, r2, r3
 80121ea:	0a5b      	lsrs	r3, r3, #9
 80121ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80121f0:	fb02 f303 	mul.w	r3, r2, r3
 80121f4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80121f6:	68fb      	ldr	r3, [r7, #12]
 80121f8:	1e5a      	subs	r2, r3, #1
 80121fa:	60fa      	str	r2, [r7, #12]
 80121fc:	2b00      	cmp	r3, #0
 80121fe:	d102      	bne.n	8012206 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012200:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012204:	e01b      	b.n	801223e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801220a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801220c:	68bb      	ldr	r3, [r7, #8]
 801220e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012212:	2b00      	cmp	r3, #0
 8012214:	d0ef      	beq.n	80121f6 <SDMMC_GetCmdResp3+0x1e>
 8012216:	68bb      	ldr	r3, [r7, #8]
 8012218:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801221c:	2b00      	cmp	r3, #0
 801221e:	d1ea      	bne.n	80121f6 <SDMMC_GetCmdResp3+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012220:	687b      	ldr	r3, [r7, #4]
 8012222:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012224:	f003 0304 	and.w	r3, r3, #4
 8012228:	2b00      	cmp	r3, #0
 801222a:	d004      	beq.n	8012236 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801222c:	687b      	ldr	r3, [r7, #4]
 801222e:	2204      	movs	r2, #4
 8012230:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8012232:	2304      	movs	r3, #4
 8012234:	e003      	b.n	801223e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	4a06      	ldr	r2, [pc, #24]	; (8012254 <SDMMC_GetCmdResp3+0x7c>)
 801223a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 801223c:	2300      	movs	r3, #0
}
 801223e:	4618      	mov	r0, r3
 8012240:	3714      	adds	r7, #20
 8012242:	46bd      	mov	sp, r7
 8012244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012248:	4770      	bx	lr
 801224a:	bf00      	nop
 801224c:	24000010 	.word	0x24000010
 8012250:	10624dd3 	.word	0x10624dd3
 8012254:	002000c5 	.word	0x002000c5

08012258 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8012258:	b580      	push	{r7, lr}
 801225a:	b088      	sub	sp, #32
 801225c:	af00      	add	r7, sp, #0
 801225e:	60f8      	str	r0, [r7, #12]
 8012260:	460b      	mov	r3, r1
 8012262:	607a      	str	r2, [r7, #4]
 8012264:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012266:	4b35      	ldr	r3, [pc, #212]	; (801233c <SDMMC_GetCmdResp6+0xe4>)
 8012268:	681b      	ldr	r3, [r3, #0]
 801226a:	4a35      	ldr	r2, [pc, #212]	; (8012340 <SDMMC_GetCmdResp6+0xe8>)
 801226c:	fba2 2303 	umull	r2, r3, r2, r3
 8012270:	0a5b      	lsrs	r3, r3, #9
 8012272:	f241 3288 	movw	r2, #5000	; 0x1388
 8012276:	fb02 f303 	mul.w	r3, r2, r3
 801227a:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 801227c:	69fb      	ldr	r3, [r7, #28]
 801227e:	1e5a      	subs	r2, r3, #1
 8012280:	61fa      	str	r2, [r7, #28]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d102      	bne.n	801228c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012286:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801228a:	e052      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 801228c:	68fb      	ldr	r3, [r7, #12]
 801228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012290:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8012292:	69bb      	ldr	r3, [r7, #24]
 8012294:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012298:	2b00      	cmp	r3, #0
 801229a:	d0ef      	beq.n	801227c <SDMMC_GetCmdResp6+0x24>
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d1ea      	bne.n	801227c <SDMMC_GetCmdResp6+0x24>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80122a6:	68fb      	ldr	r3, [r7, #12]
 80122a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122aa:	f003 0304 	and.w	r3, r3, #4
 80122ae:	2b00      	cmp	r3, #0
 80122b0:	d004      	beq.n	80122bc <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	2204      	movs	r2, #4
 80122b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80122b8:	2304      	movs	r3, #4
 80122ba:	e03a      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80122bc:	68fb      	ldr	r3, [r7, #12]
 80122be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80122c0:	f003 0301 	and.w	r3, r3, #1
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d004      	beq.n	80122d2 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	2201      	movs	r2, #1
 80122cc:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122ce:	2301      	movs	r3, #1
 80122d0:	e02f      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 80122d2:	68f8      	ldr	r0, [r7, #12]
 80122d4:	f7ff fb2c 	bl	8011930 <SDMMC_GetCommandResponse>
 80122d8:	4603      	mov	r3, r0
 80122da:	461a      	mov	r2, r3
 80122dc:	7afb      	ldrb	r3, [r7, #11]
 80122de:	4293      	cmp	r3, r2
 80122e0:	d001      	beq.n	80122e6 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80122e2:	2301      	movs	r3, #1
 80122e4:	e025      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80122e6:	68fb      	ldr	r3, [r7, #12]
 80122e8:	4a16      	ldr	r2, [pc, #88]	; (8012344 <SDMMC_GetCmdResp6+0xec>)
 80122ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 80122ec:	2100      	movs	r1, #0
 80122ee:	68f8      	ldr	r0, [r7, #12]
 80122f0:	f7ff fb2b 	bl	801194a <SDMMC_GetResponse>
 80122f4:	6178      	str	r0, [r7, #20]

  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d106      	bne.n	801230e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	0c1b      	lsrs	r3, r3, #16
 8012304:	b29a      	uxth	r2, r3
 8012306:	687b      	ldr	r3, [r7, #4]
 8012308:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 801230a:	2300      	movs	r3, #0
 801230c:	e011      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 801230e:	697b      	ldr	r3, [r7, #20]
 8012310:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8012314:	2b00      	cmp	r3, #0
 8012316:	d002      	beq.n	801231e <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8012318:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 801231c:	e009      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 801231e:	697b      	ldr	r3, [r7, #20]
 8012320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012324:	2b00      	cmp	r3, #0
 8012326:	d002      	beq.n	801232e <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8012328:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801232c:	e001      	b.n	8012332 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 801232e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8012332:	4618      	mov	r0, r3
 8012334:	3720      	adds	r7, #32
 8012336:	46bd      	mov	sp, r7
 8012338:	bd80      	pop	{r7, pc}
 801233a:	bf00      	nop
 801233c:	24000010 	.word	0x24000010
 8012340:	10624dd3 	.word	0x10624dd3
 8012344:	002000c5 	.word	0x002000c5

08012348 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8012350:	4b22      	ldr	r3, [pc, #136]	; (80123dc <SDMMC_GetCmdResp7+0x94>)
 8012352:	681b      	ldr	r3, [r3, #0]
 8012354:	4a22      	ldr	r2, [pc, #136]	; (80123e0 <SDMMC_GetCmdResp7+0x98>)
 8012356:	fba2 2303 	umull	r2, r3, r2, r3
 801235a:	0a5b      	lsrs	r3, r3, #9
 801235c:	f241 3288 	movw	r2, #5000	; 0x1388
 8012360:	fb02 f303 	mul.w	r3, r2, r3
 8012364:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	1e5a      	subs	r2, r3, #1
 801236a:	60fa      	str	r2, [r7, #12]
 801236c:	2b00      	cmp	r3, #0
 801236e:	d102      	bne.n	8012376 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8012370:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8012374:	e02c      	b.n	80123d0 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8012376:	687b      	ldr	r3, [r7, #4]
 8012378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801237a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801237c:	68bb      	ldr	r3, [r7, #8]
 801237e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8012382:	2b00      	cmp	r3, #0
 8012384:	d0ef      	beq.n	8012366 <SDMMC_GetCmdResp7+0x1e>
 8012386:	68bb      	ldr	r3, [r7, #8]
 8012388:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 801238c:	2b00      	cmp	r3, #0
 801238e:	d1ea      	bne.n	8012366 <SDMMC_GetCmdResp7+0x1e>

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012394:	f003 0304 	and.w	r3, r3, #4
 8012398:	2b00      	cmp	r3, #0
 801239a:	d004      	beq.n	80123a6 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2204      	movs	r2, #4
 80123a0:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80123a2:	2304      	movs	r3, #4
 80123a4:	e014      	b.n	80123d0 <SDMMC_GetCmdResp7+0x88>
  }

  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 80123a6:	687b      	ldr	r3, [r7, #4]
 80123a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123aa:	f003 0301 	and.w	r3, r3, #1
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	d004      	beq.n	80123bc <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2201      	movs	r2, #1
 80123b6:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 80123b8:	2301      	movs	r3, #1
 80123ba:	e009      	b.n	80123d0 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d002      	beq.n	80123ce <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 80123c8:	687b      	ldr	r3, [r7, #4]
 80123ca:	2240      	movs	r2, #64	; 0x40
 80123cc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80123ce:	2300      	movs	r3, #0

}
 80123d0:	4618      	mov	r0, r3
 80123d2:	3714      	adds	r7, #20
 80123d4:	46bd      	mov	sp, r7
 80123d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123da:	4770      	bx	lr
 80123dc:	24000010 	.word	0x24000010
 80123e0:	10624dd3 	.word	0x10624dd3

080123e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80123e4:	b084      	sub	sp, #16
 80123e6:	b580      	push	{r7, lr}
 80123e8:	b084      	sub	sp, #16
 80123ea:	af00      	add	r7, sp, #0
 80123ec:	6078      	str	r0, [r7, #4]
 80123ee:	f107 001c 	add.w	r0, r7, #28
 80123f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80123f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80123f8:	2b01      	cmp	r3, #1
 80123fa:	d120      	bne.n	801243e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012400:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012404:	687b      	ldr	r3, [r7, #4]
 8012406:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8012408:	687b      	ldr	r3, [r7, #4]
 801240a:	68da      	ldr	r2, [r3, #12]
 801240c:	4b25      	ldr	r3, [pc, #148]	; (80124a4 <USB_CoreInit+0xc0>)
 801240e:	4013      	ands	r3, r2
 8012410:	687a      	ldr	r2, [r7, #4]
 8012412:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	68db      	ldr	r3, [r3, #12]
 8012418:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801241c:	687b      	ldr	r3, [r7, #4]
 801241e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8012420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012422:	2b01      	cmp	r3, #1
 8012424:	d105      	bne.n	8012432 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	68db      	ldr	r3, [r3, #12]
 801242a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8012432:	6878      	ldr	r0, [r7, #4]
 8012434:	f001 fabe 	bl	80139b4 <USB_CoreReset>
 8012438:	4603      	mov	r3, r0
 801243a:	73fb      	strb	r3, [r7, #15]
 801243c:	e01a      	b.n	8012474 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	68db      	ldr	r3, [r3, #12]
 8012442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 801244a:	6878      	ldr	r0, [r7, #4]
 801244c:	f001 fab2 	bl	80139b4 <USB_CoreReset>
 8012450:	4603      	mov	r3, r0
 8012452:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8012454:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012456:	2b00      	cmp	r3, #0
 8012458:	d106      	bne.n	8012468 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801245e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	639a      	str	r2, [r3, #56]	; 0x38
 8012466:	e005      	b.n	8012474 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801246c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8012474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012476:	2b01      	cmp	r3, #1
 8012478:	d10b      	bne.n	8012492 <USB_CoreInit+0xae>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	689b      	ldr	r3, [r3, #8]
 801247e:	f043 0206 	orr.w	r2, r3, #6
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	689b      	ldr	r3, [r3, #8]
 801248a:	f043 0220 	orr.w	r2, r3, #32
 801248e:	687b      	ldr	r3, [r7, #4]
 8012490:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8012492:	7bfb      	ldrb	r3, [r7, #15]
}
 8012494:	4618      	mov	r0, r3
 8012496:	3710      	adds	r7, #16
 8012498:	46bd      	mov	sp, r7
 801249a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801249e:	b004      	add	sp, #16
 80124a0:	4770      	bx	lr
 80124a2:	bf00      	nop
 80124a4:	ffbdffbf 	.word	0xffbdffbf

080124a8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80124a8:	b480      	push	{r7}
 80124aa:	b087      	sub	sp, #28
 80124ac:	af00      	add	r7, sp, #0
 80124ae:	60f8      	str	r0, [r7, #12]
 80124b0:	60b9      	str	r1, [r7, #8]
 80124b2:	4613      	mov	r3, r2
 80124b4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80124b6:	79fb      	ldrb	r3, [r7, #7]
 80124b8:	2b02      	cmp	r3, #2
 80124ba:	d165      	bne.n	8012588 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80124bc:	68bb      	ldr	r3, [r7, #8]
 80124be:	4a41      	ldr	r2, [pc, #260]	; (80125c4 <USB_SetTurnaroundTime+0x11c>)
 80124c0:	4293      	cmp	r3, r2
 80124c2:	d906      	bls.n	80124d2 <USB_SetTurnaroundTime+0x2a>
 80124c4:	68bb      	ldr	r3, [r7, #8]
 80124c6:	4a40      	ldr	r2, [pc, #256]	; (80125c8 <USB_SetTurnaroundTime+0x120>)
 80124c8:	4293      	cmp	r3, r2
 80124ca:	d802      	bhi.n	80124d2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80124cc:	230f      	movs	r3, #15
 80124ce:	617b      	str	r3, [r7, #20]
 80124d0:	e062      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80124d2:	68bb      	ldr	r3, [r7, #8]
 80124d4:	4a3c      	ldr	r2, [pc, #240]	; (80125c8 <USB_SetTurnaroundTime+0x120>)
 80124d6:	4293      	cmp	r3, r2
 80124d8:	d906      	bls.n	80124e8 <USB_SetTurnaroundTime+0x40>
 80124da:	68bb      	ldr	r3, [r7, #8]
 80124dc:	4a3b      	ldr	r2, [pc, #236]	; (80125cc <USB_SetTurnaroundTime+0x124>)
 80124de:	4293      	cmp	r3, r2
 80124e0:	d802      	bhi.n	80124e8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80124e2:	230e      	movs	r3, #14
 80124e4:	617b      	str	r3, [r7, #20]
 80124e6:	e057      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80124e8:	68bb      	ldr	r3, [r7, #8]
 80124ea:	4a38      	ldr	r2, [pc, #224]	; (80125cc <USB_SetTurnaroundTime+0x124>)
 80124ec:	4293      	cmp	r3, r2
 80124ee:	d906      	bls.n	80124fe <USB_SetTurnaroundTime+0x56>
 80124f0:	68bb      	ldr	r3, [r7, #8]
 80124f2:	4a37      	ldr	r2, [pc, #220]	; (80125d0 <USB_SetTurnaroundTime+0x128>)
 80124f4:	4293      	cmp	r3, r2
 80124f6:	d802      	bhi.n	80124fe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80124f8:	230d      	movs	r3, #13
 80124fa:	617b      	str	r3, [r7, #20]
 80124fc:	e04c      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80124fe:	68bb      	ldr	r3, [r7, #8]
 8012500:	4a33      	ldr	r2, [pc, #204]	; (80125d0 <USB_SetTurnaroundTime+0x128>)
 8012502:	4293      	cmp	r3, r2
 8012504:	d906      	bls.n	8012514 <USB_SetTurnaroundTime+0x6c>
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	4a32      	ldr	r2, [pc, #200]	; (80125d4 <USB_SetTurnaroundTime+0x12c>)
 801250a:	4293      	cmp	r3, r2
 801250c:	d802      	bhi.n	8012514 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801250e:	230c      	movs	r3, #12
 8012510:	617b      	str	r3, [r7, #20]
 8012512:	e041      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	4a2f      	ldr	r2, [pc, #188]	; (80125d4 <USB_SetTurnaroundTime+0x12c>)
 8012518:	4293      	cmp	r3, r2
 801251a:	d906      	bls.n	801252a <USB_SetTurnaroundTime+0x82>
 801251c:	68bb      	ldr	r3, [r7, #8]
 801251e:	4a2e      	ldr	r2, [pc, #184]	; (80125d8 <USB_SetTurnaroundTime+0x130>)
 8012520:	4293      	cmp	r3, r2
 8012522:	d802      	bhi.n	801252a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8012524:	230b      	movs	r3, #11
 8012526:	617b      	str	r3, [r7, #20]
 8012528:	e036      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 801252a:	68bb      	ldr	r3, [r7, #8]
 801252c:	4a2a      	ldr	r2, [pc, #168]	; (80125d8 <USB_SetTurnaroundTime+0x130>)
 801252e:	4293      	cmp	r3, r2
 8012530:	d906      	bls.n	8012540 <USB_SetTurnaroundTime+0x98>
 8012532:	68bb      	ldr	r3, [r7, #8]
 8012534:	4a29      	ldr	r2, [pc, #164]	; (80125dc <USB_SetTurnaroundTime+0x134>)
 8012536:	4293      	cmp	r3, r2
 8012538:	d802      	bhi.n	8012540 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 801253a:	230a      	movs	r3, #10
 801253c:	617b      	str	r3, [r7, #20]
 801253e:	e02b      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	4a26      	ldr	r2, [pc, #152]	; (80125dc <USB_SetTurnaroundTime+0x134>)
 8012544:	4293      	cmp	r3, r2
 8012546:	d906      	bls.n	8012556 <USB_SetTurnaroundTime+0xae>
 8012548:	68bb      	ldr	r3, [r7, #8]
 801254a:	4a25      	ldr	r2, [pc, #148]	; (80125e0 <USB_SetTurnaroundTime+0x138>)
 801254c:	4293      	cmp	r3, r2
 801254e:	d802      	bhi.n	8012556 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8012550:	2309      	movs	r3, #9
 8012552:	617b      	str	r3, [r7, #20]
 8012554:	e020      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8012556:	68bb      	ldr	r3, [r7, #8]
 8012558:	4a21      	ldr	r2, [pc, #132]	; (80125e0 <USB_SetTurnaroundTime+0x138>)
 801255a:	4293      	cmp	r3, r2
 801255c:	d906      	bls.n	801256c <USB_SetTurnaroundTime+0xc4>
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	4a20      	ldr	r2, [pc, #128]	; (80125e4 <USB_SetTurnaroundTime+0x13c>)
 8012562:	4293      	cmp	r3, r2
 8012564:	d802      	bhi.n	801256c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8012566:	2308      	movs	r3, #8
 8012568:	617b      	str	r3, [r7, #20]
 801256a:	e015      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 801256c:	68bb      	ldr	r3, [r7, #8]
 801256e:	4a1d      	ldr	r2, [pc, #116]	; (80125e4 <USB_SetTurnaroundTime+0x13c>)
 8012570:	4293      	cmp	r3, r2
 8012572:	d906      	bls.n	8012582 <USB_SetTurnaroundTime+0xda>
 8012574:	68bb      	ldr	r3, [r7, #8]
 8012576:	4a1c      	ldr	r2, [pc, #112]	; (80125e8 <USB_SetTurnaroundTime+0x140>)
 8012578:	4293      	cmp	r3, r2
 801257a:	d802      	bhi.n	8012582 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 801257c:	2307      	movs	r3, #7
 801257e:	617b      	str	r3, [r7, #20]
 8012580:	e00a      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8012582:	2306      	movs	r3, #6
 8012584:	617b      	str	r3, [r7, #20]
 8012586:	e007      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8012588:	79fb      	ldrb	r3, [r7, #7]
 801258a:	2b00      	cmp	r3, #0
 801258c:	d102      	bne.n	8012594 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801258e:	2309      	movs	r3, #9
 8012590:	617b      	str	r3, [r7, #20]
 8012592:	e001      	b.n	8012598 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8012594:	2309      	movs	r3, #9
 8012596:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	68db      	ldr	r3, [r3, #12]
 801259c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80125a0:	68fb      	ldr	r3, [r7, #12]
 80125a2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	68da      	ldr	r2, [r3, #12]
 80125a8:	697b      	ldr	r3, [r7, #20]
 80125aa:	029b      	lsls	r3, r3, #10
 80125ac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80125b0:	431a      	orrs	r2, r3
 80125b2:	68fb      	ldr	r3, [r7, #12]
 80125b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80125b6:	2300      	movs	r3, #0
}
 80125b8:	4618      	mov	r0, r3
 80125ba:	371c      	adds	r7, #28
 80125bc:	46bd      	mov	sp, r7
 80125be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125c2:	4770      	bx	lr
 80125c4:	00d8acbf 	.word	0x00d8acbf
 80125c8:	00e4e1bf 	.word	0x00e4e1bf
 80125cc:	00f423ff 	.word	0x00f423ff
 80125d0:	0106737f 	.word	0x0106737f
 80125d4:	011a499f 	.word	0x011a499f
 80125d8:	01312cff 	.word	0x01312cff
 80125dc:	014ca43f 	.word	0x014ca43f
 80125e0:	016e35ff 	.word	0x016e35ff
 80125e4:	01a6ab1f 	.word	0x01a6ab1f
 80125e8:	01e847ff 	.word	0x01e847ff

080125ec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80125ec:	b480      	push	{r7}
 80125ee:	b083      	sub	sp, #12
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	689b      	ldr	r3, [r3, #8]
 80125f8:	f043 0201 	orr.w	r2, r3, #1
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012600:	2300      	movs	r3, #0
}
 8012602:	4618      	mov	r0, r3
 8012604:	370c      	adds	r7, #12
 8012606:	46bd      	mov	sp, r7
 8012608:	f85d 7b04 	ldr.w	r7, [sp], #4
 801260c:	4770      	bx	lr

0801260e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801260e:	b480      	push	{r7}
 8012610:	b083      	sub	sp, #12
 8012612:	af00      	add	r7, sp, #0
 8012614:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	f023 0201 	bic.w	r2, r3, #1
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8012622:	2300      	movs	r3, #0
}
 8012624:	4618      	mov	r0, r3
 8012626:	370c      	adds	r7, #12
 8012628:	46bd      	mov	sp, r7
 801262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801262e:	4770      	bx	lr

08012630 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8012630:	b580      	push	{r7, lr}
 8012632:	b082      	sub	sp, #8
 8012634:	af00      	add	r7, sp, #0
 8012636:	6078      	str	r0, [r7, #4]
 8012638:	460b      	mov	r3, r1
 801263a:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	68db      	ldr	r3, [r3, #12]
 8012640:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8012648:	78fb      	ldrb	r3, [r7, #3]
 801264a:	2b01      	cmp	r3, #1
 801264c:	d106      	bne.n	801265c <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 801264e:	687b      	ldr	r3, [r7, #4]
 8012650:	68db      	ldr	r3, [r3, #12]
 8012652:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8012656:	687b      	ldr	r3, [r7, #4]
 8012658:	60da      	str	r2, [r3, #12]
 801265a:	e00b      	b.n	8012674 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 801265c:	78fb      	ldrb	r3, [r7, #3]
 801265e:	2b00      	cmp	r3, #0
 8012660:	d106      	bne.n	8012670 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	68db      	ldr	r3, [r3, #12]
 8012666:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	60da      	str	r2, [r3, #12]
 801266e:	e001      	b.n	8012674 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8012670:	2301      	movs	r3, #1
 8012672:	e003      	b.n	801267c <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8012674:	2032      	movs	r0, #50	; 0x32
 8012676:	f7f2 fbcb 	bl	8004e10 <HAL_Delay>

  return HAL_OK;
 801267a:	2300      	movs	r3, #0
}
 801267c:	4618      	mov	r0, r3
 801267e:	3708      	adds	r7, #8
 8012680:	46bd      	mov	sp, r7
 8012682:	bd80      	pop	{r7, pc}

08012684 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8012684:	b084      	sub	sp, #16
 8012686:	b580      	push	{r7, lr}
 8012688:	b086      	sub	sp, #24
 801268a:	af00      	add	r7, sp, #0
 801268c:	6078      	str	r0, [r7, #4]
 801268e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8012692:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8012696:	2300      	movs	r3, #0
 8012698:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 801269e:	2300      	movs	r3, #0
 80126a0:	613b      	str	r3, [r7, #16]
 80126a2:	e009      	b.n	80126b8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80126a4:	687a      	ldr	r2, [r7, #4]
 80126a6:	693b      	ldr	r3, [r7, #16]
 80126a8:	3340      	adds	r3, #64	; 0x40
 80126aa:	009b      	lsls	r3, r3, #2
 80126ac:	4413      	add	r3, r2
 80126ae:	2200      	movs	r2, #0
 80126b0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80126b2:	693b      	ldr	r3, [r7, #16]
 80126b4:	3301      	adds	r3, #1
 80126b6:	613b      	str	r3, [r7, #16]
 80126b8:	693b      	ldr	r3, [r7, #16]
 80126ba:	2b0e      	cmp	r3, #14
 80126bc:	d9f2      	bls.n	80126a4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80126be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d11c      	bne.n	80126fe <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80126c4:	68fb      	ldr	r3, [r7, #12]
 80126c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80126ca:	685b      	ldr	r3, [r3, #4]
 80126cc:	68fa      	ldr	r2, [r7, #12]
 80126ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80126d2:	f043 0302 	orr.w	r3, r3, #2
 80126d6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80126dc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	681b      	ldr	r3, [r3, #0]
 80126e8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80126f0:	687b      	ldr	r3, [r7, #4]
 80126f2:	681b      	ldr	r3, [r3, #0]
 80126f4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	601a      	str	r2, [r3, #0]
 80126fc:	e005      	b.n	801270a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012702:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012710:	461a      	mov	r2, r3
 8012712:	2300      	movs	r3, #0
 8012714:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801271c:	4619      	mov	r1, r3
 801271e:	68fb      	ldr	r3, [r7, #12]
 8012720:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012724:	461a      	mov	r2, r3
 8012726:	680b      	ldr	r3, [r1, #0]
 8012728:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 801272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801272c:	2b01      	cmp	r3, #1
 801272e:	d10c      	bne.n	801274a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8012730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012732:	2b00      	cmp	r3, #0
 8012734:	d104      	bne.n	8012740 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8012736:	2100      	movs	r1, #0
 8012738:	6878      	ldr	r0, [r7, #4]
 801273a:	f000 f949 	bl	80129d0 <USB_SetDevSpeed>
 801273e:	e008      	b.n	8012752 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8012740:	2101      	movs	r1, #1
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f000 f944 	bl	80129d0 <USB_SetDevSpeed>
 8012748:	e003      	b.n	8012752 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801274a:	2103      	movs	r1, #3
 801274c:	6878      	ldr	r0, [r7, #4]
 801274e:	f000 f93f 	bl	80129d0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8012752:	2110      	movs	r1, #16
 8012754:	6878      	ldr	r0, [r7, #4]
 8012756:	f000 f8f3 	bl	8012940 <USB_FlushTxFifo>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d001      	beq.n	8012764 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8012760:	2301      	movs	r3, #1
 8012762:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f000 f911 	bl	801298c <USB_FlushRxFifo>
 801276a:	4603      	mov	r3, r0
 801276c:	2b00      	cmp	r3, #0
 801276e:	d001      	beq.n	8012774 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8012770:	2301      	movs	r3, #1
 8012772:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8012774:	68fb      	ldr	r3, [r7, #12]
 8012776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801277a:	461a      	mov	r2, r3
 801277c:	2300      	movs	r3, #0
 801277e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8012780:	68fb      	ldr	r3, [r7, #12]
 8012782:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012786:	461a      	mov	r2, r3
 8012788:	2300      	movs	r3, #0
 801278a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012792:	461a      	mov	r2, r3
 8012794:	2300      	movs	r3, #0
 8012796:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012798:	2300      	movs	r3, #0
 801279a:	613b      	str	r3, [r7, #16]
 801279c:	e043      	b.n	8012826 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801279e:	693b      	ldr	r3, [r7, #16]
 80127a0:	015a      	lsls	r2, r3, #5
 80127a2:	68fb      	ldr	r3, [r7, #12]
 80127a4:	4413      	add	r3, r2
 80127a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127aa:	681b      	ldr	r3, [r3, #0]
 80127ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80127b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80127b4:	d118      	bne.n	80127e8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80127b6:	693b      	ldr	r3, [r7, #16]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d10a      	bne.n	80127d2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	015a      	lsls	r2, r3, #5
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	4413      	add	r3, r2
 80127c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127c8:	461a      	mov	r2, r3
 80127ca:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80127ce:	6013      	str	r3, [r2, #0]
 80127d0:	e013      	b.n	80127fa <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80127d2:	693b      	ldr	r3, [r7, #16]
 80127d4:	015a      	lsls	r2, r3, #5
 80127d6:	68fb      	ldr	r3, [r7, #12]
 80127d8:	4413      	add	r3, r2
 80127da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127de:	461a      	mov	r2, r3
 80127e0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80127e4:	6013      	str	r3, [r2, #0]
 80127e6:	e008      	b.n	80127fa <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80127e8:	693b      	ldr	r3, [r7, #16]
 80127ea:	015a      	lsls	r2, r3, #5
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	4413      	add	r3, r2
 80127f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80127f4:	461a      	mov	r2, r3
 80127f6:	2300      	movs	r3, #0
 80127f8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80127fa:	693b      	ldr	r3, [r7, #16]
 80127fc:	015a      	lsls	r2, r3, #5
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	4413      	add	r3, r2
 8012802:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012806:	461a      	mov	r2, r3
 8012808:	2300      	movs	r3, #0
 801280a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	015a      	lsls	r2, r3, #5
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	4413      	add	r3, r2
 8012814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012818:	461a      	mov	r2, r3
 801281a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 801281e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8012820:	693b      	ldr	r3, [r7, #16]
 8012822:	3301      	adds	r3, #1
 8012824:	613b      	str	r3, [r7, #16]
 8012826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012828:	693a      	ldr	r2, [r7, #16]
 801282a:	429a      	cmp	r2, r3
 801282c:	d3b7      	bcc.n	801279e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801282e:	2300      	movs	r3, #0
 8012830:	613b      	str	r3, [r7, #16]
 8012832:	e043      	b.n	80128bc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	015a      	lsls	r2, r3, #5
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	4413      	add	r3, r2
 801283c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012846:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801284a:	d118      	bne.n	801287e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 801284c:	693b      	ldr	r3, [r7, #16]
 801284e:	2b00      	cmp	r3, #0
 8012850:	d10a      	bne.n	8012868 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8012852:	693b      	ldr	r3, [r7, #16]
 8012854:	015a      	lsls	r2, r3, #5
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	4413      	add	r3, r2
 801285a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801285e:	461a      	mov	r2, r3
 8012860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8012864:	6013      	str	r3, [r2, #0]
 8012866:	e013      	b.n	8012890 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8012868:	693b      	ldr	r3, [r7, #16]
 801286a:	015a      	lsls	r2, r3, #5
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	4413      	add	r3, r2
 8012870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012874:	461a      	mov	r2, r3
 8012876:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801287a:	6013      	str	r3, [r2, #0]
 801287c:	e008      	b.n	8012890 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801287e:	693b      	ldr	r3, [r7, #16]
 8012880:	015a      	lsls	r2, r3, #5
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	4413      	add	r3, r2
 8012886:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801288a:	461a      	mov	r2, r3
 801288c:	2300      	movs	r3, #0
 801288e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8012890:	693b      	ldr	r3, [r7, #16]
 8012892:	015a      	lsls	r2, r3, #5
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	4413      	add	r3, r2
 8012898:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801289c:	461a      	mov	r2, r3
 801289e:	2300      	movs	r3, #0
 80128a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80128a2:	693b      	ldr	r3, [r7, #16]
 80128a4:	015a      	lsls	r2, r3, #5
 80128a6:	68fb      	ldr	r3, [r7, #12]
 80128a8:	4413      	add	r3, r2
 80128aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80128ae:	461a      	mov	r2, r3
 80128b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80128b4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80128b6:	693b      	ldr	r3, [r7, #16]
 80128b8:	3301      	adds	r3, #1
 80128ba:	613b      	str	r3, [r7, #16]
 80128bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80128be:	693a      	ldr	r2, [r7, #16]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d3b7      	bcc.n	8012834 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80128c4:	68fb      	ldr	r3, [r7, #12]
 80128c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80128ca:	691b      	ldr	r3, [r3, #16]
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80128d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80128d6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	2200      	movs	r2, #0
 80128dc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80128de:	687b      	ldr	r3, [r7, #4]
 80128e0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80128e4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80128e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128e8:	2b00      	cmp	r3, #0
 80128ea:	d105      	bne.n	80128f8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	699b      	ldr	r3, [r3, #24]
 80128f0:	f043 0210 	orr.w	r2, r3, #16
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	699a      	ldr	r2, [r3, #24]
 80128fc:	4b0e      	ldr	r3, [pc, #56]	; (8012938 <USB_DevInit+0x2b4>)
 80128fe:	4313      	orrs	r3, r2
 8012900:	687a      	ldr	r2, [r7, #4]
 8012902:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8012904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012906:	2b00      	cmp	r3, #0
 8012908:	d005      	beq.n	8012916 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	699b      	ldr	r3, [r3, #24]
 801290e:	f043 0208 	orr.w	r2, r3, #8
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8012916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012918:	2b01      	cmp	r3, #1
 801291a:	d105      	bne.n	8012928 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 801291c:	687b      	ldr	r3, [r7, #4]
 801291e:	699a      	ldr	r2, [r3, #24]
 8012920:	4b06      	ldr	r3, [pc, #24]	; (801293c <USB_DevInit+0x2b8>)
 8012922:	4313      	orrs	r3, r2
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8012928:	7dfb      	ldrb	r3, [r7, #23]
}
 801292a:	4618      	mov	r0, r3
 801292c:	3718      	adds	r7, #24
 801292e:	46bd      	mov	sp, r7
 8012930:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8012934:	b004      	add	sp, #16
 8012936:	4770      	bx	lr
 8012938:	803c3800 	.word	0x803c3800
 801293c:	40000004 	.word	0x40000004

08012940 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8012940:	b480      	push	{r7}
 8012942:	b085      	sub	sp, #20
 8012944:	af00      	add	r7, sp, #0
 8012946:	6078      	str	r0, [r7, #4]
 8012948:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 801294a:	2300      	movs	r3, #0
 801294c:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 801294e:	683b      	ldr	r3, [r7, #0]
 8012950:	019b      	lsls	r3, r3, #6
 8012952:	f043 0220 	orr.w	r2, r3, #32
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801295a:	68fb      	ldr	r3, [r7, #12]
 801295c:	3301      	adds	r3, #1
 801295e:	60fb      	str	r3, [r7, #12]
 8012960:	68fb      	ldr	r3, [r7, #12]
 8012962:	4a09      	ldr	r2, [pc, #36]	; (8012988 <USB_FlushTxFifo+0x48>)
 8012964:	4293      	cmp	r3, r2
 8012966:	d901      	bls.n	801296c <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8012968:	2303      	movs	r3, #3
 801296a:	e006      	b.n	801297a <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	691b      	ldr	r3, [r3, #16]
 8012970:	f003 0320 	and.w	r3, r3, #32
 8012974:	2b20      	cmp	r3, #32
 8012976:	d0f0      	beq.n	801295a <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8012978:	2300      	movs	r3, #0
}
 801297a:	4618      	mov	r0, r3
 801297c:	3714      	adds	r7, #20
 801297e:	46bd      	mov	sp, r7
 8012980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012984:	4770      	bx	lr
 8012986:	bf00      	nop
 8012988:	00030d40 	.word	0x00030d40

0801298c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801298c:	b480      	push	{r7}
 801298e:	b085      	sub	sp, #20
 8012990:	af00      	add	r7, sp, #0
 8012992:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8012994:	2300      	movs	r3, #0
 8012996:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2210      	movs	r2, #16
 801299c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	3301      	adds	r3, #1
 80129a2:	60fb      	str	r3, [r7, #12]
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	4a09      	ldr	r2, [pc, #36]	; (80129cc <USB_FlushRxFifo+0x40>)
 80129a8:	4293      	cmp	r3, r2
 80129aa:	d901      	bls.n	80129b0 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80129ac:	2303      	movs	r3, #3
 80129ae:	e006      	b.n	80129be <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	691b      	ldr	r3, [r3, #16]
 80129b4:	f003 0310 	and.w	r3, r3, #16
 80129b8:	2b10      	cmp	r3, #16
 80129ba:	d0f0      	beq.n	801299e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80129bc:	2300      	movs	r3, #0
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3714      	adds	r7, #20
 80129c2:	46bd      	mov	sp, r7
 80129c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129c8:	4770      	bx	lr
 80129ca:	bf00      	nop
 80129cc:	00030d40 	.word	0x00030d40

080129d0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80129d0:	b480      	push	{r7}
 80129d2:	b085      	sub	sp, #20
 80129d4:	af00      	add	r7, sp, #0
 80129d6:	6078      	str	r0, [r7, #4]
 80129d8:	460b      	mov	r3, r1
 80129da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80129e6:	681a      	ldr	r2, [r3, #0]
 80129e8:	78fb      	ldrb	r3, [r7, #3]
 80129ea:	68f9      	ldr	r1, [r7, #12]
 80129ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80129f0:	4313      	orrs	r3, r2
 80129f2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80129f4:	2300      	movs	r3, #0
}
 80129f6:	4618      	mov	r0, r3
 80129f8:	3714      	adds	r7, #20
 80129fa:	46bd      	mov	sp, r7
 80129fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a00:	4770      	bx	lr

08012a02 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg PCD_SPEED_HIGH: High speed mode
  *            @arg PCD_SPEED_FULL: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8012a02:	b480      	push	{r7}
 8012a04:	b087      	sub	sp, #28
 8012a06:	af00      	add	r7, sp, #0
 8012a08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8012a0e:	693b      	ldr	r3, [r7, #16]
 8012a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a14:	689b      	ldr	r3, [r3, #8]
 8012a16:	f003 0306 	and.w	r3, r3, #6
 8012a1a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8012a1c:	68fb      	ldr	r3, [r7, #12]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d102      	bne.n	8012a28 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8012a22:	2300      	movs	r3, #0
 8012a24:	75fb      	strb	r3, [r7, #23]
 8012a26:	e00a      	b.n	8012a3e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8012a28:	68fb      	ldr	r3, [r7, #12]
 8012a2a:	2b02      	cmp	r3, #2
 8012a2c:	d002      	beq.n	8012a34 <USB_GetDevSpeed+0x32>
 8012a2e:	68fb      	ldr	r3, [r7, #12]
 8012a30:	2b06      	cmp	r3, #6
 8012a32:	d102      	bne.n	8012a3a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8012a34:	2302      	movs	r3, #2
 8012a36:	75fb      	strb	r3, [r7, #23]
 8012a38:	e001      	b.n	8012a3e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8012a3a:	230f      	movs	r3, #15
 8012a3c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8012a3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8012a40:	4618      	mov	r0, r3
 8012a42:	371c      	adds	r7, #28
 8012a44:	46bd      	mov	sp, r7
 8012a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a4a:	4770      	bx	lr

08012a4c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012a4c:	b480      	push	{r7}
 8012a4e:	b085      	sub	sp, #20
 8012a50:	af00      	add	r7, sp, #0
 8012a52:	6078      	str	r0, [r7, #4]
 8012a54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012a5a:	683b      	ldr	r3, [r7, #0]
 8012a5c:	781b      	ldrb	r3, [r3, #0]
 8012a5e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8012a60:	683b      	ldr	r3, [r7, #0]
 8012a62:	785b      	ldrb	r3, [r3, #1]
 8012a64:	2b01      	cmp	r3, #1
 8012a66:	d139      	bne.n	8012adc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8012a68:	68fb      	ldr	r3, [r7, #12]
 8012a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012a6e:	69da      	ldr	r2, [r3, #28]
 8012a70:	683b      	ldr	r3, [r7, #0]
 8012a72:	781b      	ldrb	r3, [r3, #0]
 8012a74:	f003 030f 	and.w	r3, r3, #15
 8012a78:	2101      	movs	r1, #1
 8012a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8012a7e:	b29b      	uxth	r3, r3
 8012a80:	68f9      	ldr	r1, [r7, #12]
 8012a82:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012a86:	4313      	orrs	r3, r2
 8012a88:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8012a8a:	68bb      	ldr	r3, [r7, #8]
 8012a8c:	015a      	lsls	r2, r3, #5
 8012a8e:	68fb      	ldr	r3, [r7, #12]
 8012a90:	4413      	add	r3, r2
 8012a92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d153      	bne.n	8012b48 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012aa0:	68bb      	ldr	r3, [r7, #8]
 8012aa2:	015a      	lsls	r2, r3, #5
 8012aa4:	68fb      	ldr	r3, [r7, #12]
 8012aa6:	4413      	add	r3, r2
 8012aa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012aac:	681a      	ldr	r2, [r3, #0]
 8012aae:	683b      	ldr	r3, [r7, #0]
 8012ab0:	689b      	ldr	r3, [r3, #8]
 8012ab2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012ab6:	683b      	ldr	r3, [r7, #0]
 8012ab8:	78db      	ldrb	r3, [r3, #3]
 8012aba:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012abc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8012abe:	68bb      	ldr	r3, [r7, #8]
 8012ac0:	059b      	lsls	r3, r3, #22
 8012ac2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8012ac4:	431a      	orrs	r2, r3
 8012ac6:	68bb      	ldr	r3, [r7, #8]
 8012ac8:	0159      	lsls	r1, r3, #5
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	440b      	add	r3, r1
 8012ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ad2:	4619      	mov	r1, r3
 8012ad4:	4b20      	ldr	r3, [pc, #128]	; (8012b58 <USB_ActivateEndpoint+0x10c>)
 8012ad6:	4313      	orrs	r3, r2
 8012ad8:	600b      	str	r3, [r1, #0]
 8012ada:	e035      	b.n	8012b48 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ae2:	69da      	ldr	r2, [r3, #28]
 8012ae4:	683b      	ldr	r3, [r7, #0]
 8012ae6:	781b      	ldrb	r3, [r3, #0]
 8012ae8:	f003 030f 	and.w	r3, r3, #15
 8012aec:	2101      	movs	r1, #1
 8012aee:	fa01 f303 	lsl.w	r3, r1, r3
 8012af2:	041b      	lsls	r3, r3, #16
 8012af4:	68f9      	ldr	r1, [r7, #12]
 8012af6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012afa:	4313      	orrs	r3, r2
 8012afc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8012afe:	68bb      	ldr	r3, [r7, #8]
 8012b00:	015a      	lsls	r2, r3, #5
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	4413      	add	r3, r2
 8012b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d119      	bne.n	8012b48 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	015a      	lsls	r2, r3, #5
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b20:	681a      	ldr	r2, [r3, #0]
 8012b22:	683b      	ldr	r3, [r7, #0]
 8012b24:	689b      	ldr	r3, [r3, #8]
 8012b26:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8012b2a:	683b      	ldr	r3, [r7, #0]
 8012b2c:	78db      	ldrb	r3, [r3, #3]
 8012b2e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8012b30:	430b      	orrs	r3, r1
 8012b32:	431a      	orrs	r2, r3
 8012b34:	68bb      	ldr	r3, [r7, #8]
 8012b36:	0159      	lsls	r1, r3, #5
 8012b38:	68fb      	ldr	r3, [r7, #12]
 8012b3a:	440b      	add	r3, r1
 8012b3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012b40:	4619      	mov	r1, r3
 8012b42:	4b05      	ldr	r3, [pc, #20]	; (8012b58 <USB_ActivateEndpoint+0x10c>)
 8012b44:	4313      	orrs	r3, r2
 8012b46:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8012b48:	2300      	movs	r3, #0
}
 8012b4a:	4618      	mov	r0, r3
 8012b4c:	3714      	adds	r7, #20
 8012b4e:	46bd      	mov	sp, r7
 8012b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b54:	4770      	bx	lr
 8012b56:	bf00      	nop
 8012b58:	10008000 	.word	0x10008000

08012b5c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8012b5c:	b480      	push	{r7}
 8012b5e:	b085      	sub	sp, #20
 8012b60:	af00      	add	r7, sp, #0
 8012b62:	6078      	str	r0, [r7, #4]
 8012b64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012b66:	687b      	ldr	r3, [r7, #4]
 8012b68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8012b6a:	683b      	ldr	r3, [r7, #0]
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8012b70:	683b      	ldr	r3, [r7, #0]
 8012b72:	785b      	ldrb	r3, [r3, #1]
 8012b74:	2b01      	cmp	r3, #1
 8012b76:	d161      	bne.n	8012c3c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8012b78:	68bb      	ldr	r3, [r7, #8]
 8012b7a:	015a      	lsls	r2, r3, #5
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	4413      	add	r3, r2
 8012b80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012b8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012b8e:	d11f      	bne.n	8012bd0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8012b90:	68bb      	ldr	r3, [r7, #8]
 8012b92:	015a      	lsls	r2, r3, #5
 8012b94:	68fb      	ldr	r3, [r7, #12]
 8012b96:	4413      	add	r3, r2
 8012b98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	68ba      	ldr	r2, [r7, #8]
 8012ba0:	0151      	lsls	r1, r2, #5
 8012ba2:	68fa      	ldr	r2, [r7, #12]
 8012ba4:	440a      	add	r2, r1
 8012ba6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012baa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012bae:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8012bb0:	68bb      	ldr	r3, [r7, #8]
 8012bb2:	015a      	lsls	r2, r3, #5
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012bbc:	681b      	ldr	r3, [r3, #0]
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	0151      	lsls	r1, r2, #5
 8012bc2:	68fa      	ldr	r2, [r7, #12]
 8012bc4:	440a      	add	r2, r1
 8012bc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012bca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012bce:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012bd0:	68fb      	ldr	r3, [r7, #12]
 8012bd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012bd8:	683b      	ldr	r3, [r7, #0]
 8012bda:	781b      	ldrb	r3, [r3, #0]
 8012bdc:	f003 030f 	and.w	r3, r3, #15
 8012be0:	2101      	movs	r1, #1
 8012be2:	fa01 f303 	lsl.w	r3, r1, r3
 8012be6:	b29b      	uxth	r3, r3
 8012be8:	43db      	mvns	r3, r3
 8012bea:	68f9      	ldr	r1, [r7, #12]
 8012bec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012bf0:	4013      	ands	r3, r2
 8012bf2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8012bf4:	68fb      	ldr	r3, [r7, #12]
 8012bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012bfa:	69da      	ldr	r2, [r3, #28]
 8012bfc:	683b      	ldr	r3, [r7, #0]
 8012bfe:	781b      	ldrb	r3, [r3, #0]
 8012c00:	f003 030f 	and.w	r3, r3, #15
 8012c04:	2101      	movs	r1, #1
 8012c06:	fa01 f303 	lsl.w	r3, r1, r3
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	43db      	mvns	r3, r3
 8012c0e:	68f9      	ldr	r1, [r7, #12]
 8012c10:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012c14:	4013      	ands	r3, r2
 8012c16:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8012c18:	68bb      	ldr	r3, [r7, #8]
 8012c1a:	015a      	lsls	r2, r3, #5
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	4413      	add	r3, r2
 8012c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c24:	681a      	ldr	r2, [r3, #0]
 8012c26:	68bb      	ldr	r3, [r7, #8]
 8012c28:	0159      	lsls	r1, r3, #5
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	440b      	add	r3, r1
 8012c2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012c32:	4619      	mov	r1, r3
 8012c34:	4b35      	ldr	r3, [pc, #212]	; (8012d0c <USB_DeactivateEndpoint+0x1b0>)
 8012c36:	4013      	ands	r3, r2
 8012c38:	600b      	str	r3, [r1, #0]
 8012c3a:	e060      	b.n	8012cfe <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8012c3c:	68bb      	ldr	r3, [r7, #8]
 8012c3e:	015a      	lsls	r2, r3, #5
 8012c40:	68fb      	ldr	r3, [r7, #12]
 8012c42:	4413      	add	r3, r2
 8012c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c48:	681b      	ldr	r3, [r3, #0]
 8012c4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8012c4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8012c52:	d11f      	bne.n	8012c94 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	015a      	lsls	r2, r3, #5
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	4413      	add	r3, r2
 8012c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	68ba      	ldr	r2, [r7, #8]
 8012c64:	0151      	lsls	r1, r2, #5
 8012c66:	68fa      	ldr	r2, [r7, #12]
 8012c68:	440a      	add	r2, r1
 8012c6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c6e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8012c72:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8012c74:	68bb      	ldr	r3, [r7, #8]
 8012c76:	015a      	lsls	r2, r3, #5
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	68ba      	ldr	r2, [r7, #8]
 8012c84:	0151      	lsls	r1, r2, #5
 8012c86:	68fa      	ldr	r2, [r7, #12]
 8012c88:	440a      	add	r2, r1
 8012c8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8012c8e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8012c92:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	f003 030f 	and.w	r3, r3, #15
 8012ca4:	2101      	movs	r1, #1
 8012ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8012caa:	041b      	lsls	r3, r3, #16
 8012cac:	43db      	mvns	r3, r3
 8012cae:	68f9      	ldr	r1, [r7, #12]
 8012cb0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cb4:	4013      	ands	r3, r2
 8012cb6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012cbe:	69da      	ldr	r2, [r3, #28]
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	781b      	ldrb	r3, [r3, #0]
 8012cc4:	f003 030f 	and.w	r3, r3, #15
 8012cc8:	2101      	movs	r1, #1
 8012cca:	fa01 f303 	lsl.w	r3, r1, r3
 8012cce:	041b      	lsls	r3, r3, #16
 8012cd0:	43db      	mvns	r3, r3
 8012cd2:	68f9      	ldr	r1, [r7, #12]
 8012cd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012cd8:	4013      	ands	r3, r2
 8012cda:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	015a      	lsls	r2, r3, #5
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	4413      	add	r3, r2
 8012ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012ce8:	681a      	ldr	r2, [r3, #0]
 8012cea:	68bb      	ldr	r3, [r7, #8]
 8012cec:	0159      	lsls	r1, r3, #5
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	440b      	add	r3, r1
 8012cf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8012cf6:	4619      	mov	r1, r3
 8012cf8:	4b05      	ldr	r3, [pc, #20]	; (8012d10 <USB_DeactivateEndpoint+0x1b4>)
 8012cfa:	4013      	ands	r3, r2
 8012cfc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	4618      	mov	r0, r3
 8012d02:	3714      	adds	r7, #20
 8012d04:	46bd      	mov	sp, r7
 8012d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d0a:	4770      	bx	lr
 8012d0c:	ec337800 	.word	0xec337800
 8012d10:	eff37800 	.word	0xeff37800

08012d14 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8012d14:	b580      	push	{r7, lr}
 8012d16:	b08a      	sub	sp, #40	; 0x28
 8012d18:	af02      	add	r7, sp, #8
 8012d1a:	60f8      	str	r0, [r7, #12]
 8012d1c:	60b9      	str	r1, [r7, #8]
 8012d1e:	4613      	mov	r3, r2
 8012d20:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8012d26:	68bb      	ldr	r3, [r7, #8]
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8012d2c:	68bb      	ldr	r3, [r7, #8]
 8012d2e:	785b      	ldrb	r3, [r3, #1]
 8012d30:	2b01      	cmp	r3, #1
 8012d32:	f040 8163 	bne.w	8012ffc <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	695b      	ldr	r3, [r3, #20]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d132      	bne.n	8012da4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	015a      	lsls	r2, r3, #5
 8012d42:	69fb      	ldr	r3, [r7, #28]
 8012d44:	4413      	add	r3, r2
 8012d46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d4a:	691a      	ldr	r2, [r3, #16]
 8012d4c:	69bb      	ldr	r3, [r7, #24]
 8012d4e:	0159      	lsls	r1, r3, #5
 8012d50:	69fb      	ldr	r3, [r7, #28]
 8012d52:	440b      	add	r3, r1
 8012d54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d58:	4619      	mov	r1, r3
 8012d5a:	4ba5      	ldr	r3, [pc, #660]	; (8012ff0 <USB_EPStartXfer+0x2dc>)
 8012d5c:	4013      	ands	r3, r2
 8012d5e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8012d60:	69bb      	ldr	r3, [r7, #24]
 8012d62:	015a      	lsls	r2, r3, #5
 8012d64:	69fb      	ldr	r3, [r7, #28]
 8012d66:	4413      	add	r3, r2
 8012d68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d6c:	691b      	ldr	r3, [r3, #16]
 8012d6e:	69ba      	ldr	r2, [r7, #24]
 8012d70:	0151      	lsls	r1, r2, #5
 8012d72:	69fa      	ldr	r2, [r7, #28]
 8012d74:	440a      	add	r2, r1
 8012d76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012d7a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012d7e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012d80:	69bb      	ldr	r3, [r7, #24]
 8012d82:	015a      	lsls	r2, r3, #5
 8012d84:	69fb      	ldr	r3, [r7, #28]
 8012d86:	4413      	add	r3, r2
 8012d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d8c:	691a      	ldr	r2, [r3, #16]
 8012d8e:	69bb      	ldr	r3, [r7, #24]
 8012d90:	0159      	lsls	r1, r3, #5
 8012d92:	69fb      	ldr	r3, [r7, #28]
 8012d94:	440b      	add	r3, r1
 8012d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012d9a:	4619      	mov	r1, r3
 8012d9c:	4b95      	ldr	r3, [pc, #596]	; (8012ff4 <USB_EPStartXfer+0x2e0>)
 8012d9e:	4013      	ands	r3, r2
 8012da0:	610b      	str	r3, [r1, #16]
 8012da2:	e074      	b.n	8012e8e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8012da4:	69bb      	ldr	r3, [r7, #24]
 8012da6:	015a      	lsls	r2, r3, #5
 8012da8:	69fb      	ldr	r3, [r7, #28]
 8012daa:	4413      	add	r3, r2
 8012dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012db0:	691a      	ldr	r2, [r3, #16]
 8012db2:	69bb      	ldr	r3, [r7, #24]
 8012db4:	0159      	lsls	r1, r3, #5
 8012db6:	69fb      	ldr	r3, [r7, #28]
 8012db8:	440b      	add	r3, r1
 8012dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dbe:	4619      	mov	r1, r3
 8012dc0:	4b8c      	ldr	r3, [pc, #560]	; (8012ff4 <USB_EPStartXfer+0x2e0>)
 8012dc2:	4013      	ands	r3, r2
 8012dc4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8012dc6:	69bb      	ldr	r3, [r7, #24]
 8012dc8:	015a      	lsls	r2, r3, #5
 8012dca:	69fb      	ldr	r3, [r7, #28]
 8012dcc:	4413      	add	r3, r2
 8012dce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012dd2:	691a      	ldr	r2, [r3, #16]
 8012dd4:	69bb      	ldr	r3, [r7, #24]
 8012dd6:	0159      	lsls	r1, r3, #5
 8012dd8:	69fb      	ldr	r3, [r7, #28]
 8012dda:	440b      	add	r3, r1
 8012ddc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012de0:	4619      	mov	r1, r3
 8012de2:	4b83      	ldr	r3, [pc, #524]	; (8012ff0 <USB_EPStartXfer+0x2dc>)
 8012de4:	4013      	ands	r3, r2
 8012de6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8012de8:	69bb      	ldr	r3, [r7, #24]
 8012dea:	015a      	lsls	r2, r3, #5
 8012dec:	69fb      	ldr	r3, [r7, #28]
 8012dee:	4413      	add	r3, r2
 8012df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012df4:	691a      	ldr	r2, [r3, #16]
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	6959      	ldr	r1, [r3, #20]
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	689b      	ldr	r3, [r3, #8]
 8012dfe:	440b      	add	r3, r1
 8012e00:	1e59      	subs	r1, r3, #1
 8012e02:	68bb      	ldr	r3, [r7, #8]
 8012e04:	689b      	ldr	r3, [r3, #8]
 8012e06:	fbb1 f3f3 	udiv	r3, r1, r3
 8012e0a:	04d9      	lsls	r1, r3, #19
 8012e0c:	4b7a      	ldr	r3, [pc, #488]	; (8012ff8 <USB_EPStartXfer+0x2e4>)
 8012e0e:	400b      	ands	r3, r1
 8012e10:	69b9      	ldr	r1, [r7, #24]
 8012e12:	0148      	lsls	r0, r1, #5
 8012e14:	69f9      	ldr	r1, [r7, #28]
 8012e16:	4401      	add	r1, r0
 8012e18:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012e1c:	4313      	orrs	r3, r2
 8012e1e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8012e20:	69bb      	ldr	r3, [r7, #24]
 8012e22:	015a      	lsls	r2, r3, #5
 8012e24:	69fb      	ldr	r3, [r7, #28]
 8012e26:	4413      	add	r3, r2
 8012e28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e2c:	691a      	ldr	r2, [r3, #16]
 8012e2e:	68bb      	ldr	r3, [r7, #8]
 8012e30:	695b      	ldr	r3, [r3, #20]
 8012e32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012e36:	69b9      	ldr	r1, [r7, #24]
 8012e38:	0148      	lsls	r0, r1, #5
 8012e3a:	69f9      	ldr	r1, [r7, #28]
 8012e3c:	4401      	add	r1, r0
 8012e3e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8012e42:	4313      	orrs	r3, r2
 8012e44:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8012e46:	68bb      	ldr	r3, [r7, #8]
 8012e48:	78db      	ldrb	r3, [r3, #3]
 8012e4a:	2b01      	cmp	r3, #1
 8012e4c:	d11f      	bne.n	8012e8e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8012e4e:	69bb      	ldr	r3, [r7, #24]
 8012e50:	015a      	lsls	r2, r3, #5
 8012e52:	69fb      	ldr	r3, [r7, #28]
 8012e54:	4413      	add	r3, r2
 8012e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e5a:	691b      	ldr	r3, [r3, #16]
 8012e5c:	69ba      	ldr	r2, [r7, #24]
 8012e5e:	0151      	lsls	r1, r2, #5
 8012e60:	69fa      	ldr	r2, [r7, #28]
 8012e62:	440a      	add	r2, r1
 8012e64:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e68:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8012e6c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8012e6e:	69bb      	ldr	r3, [r7, #24]
 8012e70:	015a      	lsls	r2, r3, #5
 8012e72:	69fb      	ldr	r3, [r7, #28]
 8012e74:	4413      	add	r3, r2
 8012e76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012e7a:	691b      	ldr	r3, [r3, #16]
 8012e7c:	69ba      	ldr	r2, [r7, #24]
 8012e7e:	0151      	lsls	r1, r2, #5
 8012e80:	69fa      	ldr	r2, [r7, #28]
 8012e82:	440a      	add	r2, r1
 8012e84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012e88:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012e8c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8012e8e:	79fb      	ldrb	r3, [r7, #7]
 8012e90:	2b01      	cmp	r3, #1
 8012e92:	d14b      	bne.n	8012f2c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8012e94:	68bb      	ldr	r3, [r7, #8]
 8012e96:	691b      	ldr	r3, [r3, #16]
 8012e98:	2b00      	cmp	r3, #0
 8012e9a:	d009      	beq.n	8012eb0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8012e9c:	69bb      	ldr	r3, [r7, #24]
 8012e9e:	015a      	lsls	r2, r3, #5
 8012ea0:	69fb      	ldr	r3, [r7, #28]
 8012ea2:	4413      	add	r3, r2
 8012ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ea8:	461a      	mov	r2, r3
 8012eaa:	68bb      	ldr	r3, [r7, #8]
 8012eac:	691b      	ldr	r3, [r3, #16]
 8012eae:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8012eb0:	68bb      	ldr	r3, [r7, #8]
 8012eb2:	78db      	ldrb	r3, [r3, #3]
 8012eb4:	2b01      	cmp	r3, #1
 8012eb6:	d128      	bne.n	8012f0a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012eb8:	69fb      	ldr	r3, [r7, #28]
 8012eba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012ebe:	689b      	ldr	r3, [r3, #8]
 8012ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012ec4:	2b00      	cmp	r3, #0
 8012ec6:	d110      	bne.n	8012eea <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012ec8:	69bb      	ldr	r3, [r7, #24]
 8012eca:	015a      	lsls	r2, r3, #5
 8012ecc:	69fb      	ldr	r3, [r7, #28]
 8012ece:	4413      	add	r3, r2
 8012ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	69ba      	ldr	r2, [r7, #24]
 8012ed8:	0151      	lsls	r1, r2, #5
 8012eda:	69fa      	ldr	r2, [r7, #28]
 8012edc:	440a      	add	r2, r1
 8012ede:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012ee2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012ee6:	6013      	str	r3, [r2, #0]
 8012ee8:	e00f      	b.n	8012f0a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012eea:	69bb      	ldr	r3, [r7, #24]
 8012eec:	015a      	lsls	r2, r3, #5
 8012eee:	69fb      	ldr	r3, [r7, #28]
 8012ef0:	4413      	add	r3, r2
 8012ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	69ba      	ldr	r2, [r7, #24]
 8012efa:	0151      	lsls	r1, r2, #5
 8012efc:	69fa      	ldr	r2, [r7, #28]
 8012efe:	440a      	add	r2, r1
 8012f00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012f08:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012f0a:	69bb      	ldr	r3, [r7, #24]
 8012f0c:	015a      	lsls	r2, r3, #5
 8012f0e:	69fb      	ldr	r3, [r7, #28]
 8012f10:	4413      	add	r3, r2
 8012f12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f16:	681b      	ldr	r3, [r3, #0]
 8012f18:	69ba      	ldr	r2, [r7, #24]
 8012f1a:	0151      	lsls	r1, r2, #5
 8012f1c:	69fa      	ldr	r2, [r7, #28]
 8012f1e:	440a      	add	r2, r1
 8012f20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012f28:	6013      	str	r3, [r2, #0]
 8012f2a:	e133      	b.n	8013194 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8012f2c:	69bb      	ldr	r3, [r7, #24]
 8012f2e:	015a      	lsls	r2, r3, #5
 8012f30:	69fb      	ldr	r3, [r7, #28]
 8012f32:	4413      	add	r3, r2
 8012f34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f38:	681b      	ldr	r3, [r3, #0]
 8012f3a:	69ba      	ldr	r2, [r7, #24]
 8012f3c:	0151      	lsls	r1, r2, #5
 8012f3e:	69fa      	ldr	r2, [r7, #28]
 8012f40:	440a      	add	r2, r1
 8012f42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012f46:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8012f4a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8012f4c:	68bb      	ldr	r3, [r7, #8]
 8012f4e:	78db      	ldrb	r3, [r3, #3]
 8012f50:	2b01      	cmp	r3, #1
 8012f52:	d015      	beq.n	8012f80 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8012f54:	68bb      	ldr	r3, [r7, #8]
 8012f56:	695b      	ldr	r3, [r3, #20]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	f000 811b 	beq.w	8013194 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8012f5e:	69fb      	ldr	r3, [r7, #28]
 8012f60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012f66:	68bb      	ldr	r3, [r7, #8]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	f003 030f 	and.w	r3, r3, #15
 8012f6e:	2101      	movs	r1, #1
 8012f70:	fa01 f303 	lsl.w	r3, r1, r3
 8012f74:	69f9      	ldr	r1, [r7, #28]
 8012f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	634b      	str	r3, [r1, #52]	; 0x34
 8012f7e:	e109      	b.n	8013194 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8012f80:	69fb      	ldr	r3, [r7, #28]
 8012f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8012f86:	689b      	ldr	r3, [r3, #8]
 8012f88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d110      	bne.n	8012fb2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8012f90:	69bb      	ldr	r3, [r7, #24]
 8012f92:	015a      	lsls	r2, r3, #5
 8012f94:	69fb      	ldr	r3, [r7, #28]
 8012f96:	4413      	add	r3, r2
 8012f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012f9c:	681b      	ldr	r3, [r3, #0]
 8012f9e:	69ba      	ldr	r2, [r7, #24]
 8012fa0:	0151      	lsls	r1, r2, #5
 8012fa2:	69fa      	ldr	r2, [r7, #28]
 8012fa4:	440a      	add	r2, r1
 8012fa6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012faa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8012fae:	6013      	str	r3, [r2, #0]
 8012fb0:	e00f      	b.n	8012fd2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8012fb2:	69bb      	ldr	r3, [r7, #24]
 8012fb4:	015a      	lsls	r2, r3, #5
 8012fb6:	69fb      	ldr	r3, [r7, #28]
 8012fb8:	4413      	add	r3, r2
 8012fba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	69ba      	ldr	r2, [r7, #24]
 8012fc2:	0151      	lsls	r1, r2, #5
 8012fc4:	69fa      	ldr	r2, [r7, #28]
 8012fc6:	440a      	add	r2, r1
 8012fc8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8012fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012fd0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	68d9      	ldr	r1, [r3, #12]
 8012fd6:	68bb      	ldr	r3, [r7, #8]
 8012fd8:	781a      	ldrb	r2, [r3, #0]
 8012fda:	68bb      	ldr	r3, [r7, #8]
 8012fdc:	695b      	ldr	r3, [r3, #20]
 8012fde:	b298      	uxth	r0, r3
 8012fe0:	79fb      	ldrb	r3, [r7, #7]
 8012fe2:	9300      	str	r3, [sp, #0]
 8012fe4:	4603      	mov	r3, r0
 8012fe6:	68f8      	ldr	r0, [r7, #12]
 8012fe8:	f000 fa38 	bl	801345c <USB_WritePacket>
 8012fec:	e0d2      	b.n	8013194 <USB_EPStartXfer+0x480>
 8012fee:	bf00      	nop
 8012ff0:	e007ffff 	.word	0xe007ffff
 8012ff4:	fff80000 	.word	0xfff80000
 8012ff8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8012ffc:	69bb      	ldr	r3, [r7, #24]
 8012ffe:	015a      	lsls	r2, r3, #5
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	4413      	add	r3, r2
 8013004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013008:	691a      	ldr	r2, [r3, #16]
 801300a:	69bb      	ldr	r3, [r7, #24]
 801300c:	0159      	lsls	r1, r3, #5
 801300e:	69fb      	ldr	r3, [r7, #28]
 8013010:	440b      	add	r3, r1
 8013012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013016:	4619      	mov	r1, r3
 8013018:	4b61      	ldr	r3, [pc, #388]	; (80131a0 <USB_EPStartXfer+0x48c>)
 801301a:	4013      	ands	r3, r2
 801301c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801301e:	69bb      	ldr	r3, [r7, #24]
 8013020:	015a      	lsls	r2, r3, #5
 8013022:	69fb      	ldr	r3, [r7, #28]
 8013024:	4413      	add	r3, r2
 8013026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801302a:	691a      	ldr	r2, [r3, #16]
 801302c:	69bb      	ldr	r3, [r7, #24]
 801302e:	0159      	lsls	r1, r3, #5
 8013030:	69fb      	ldr	r3, [r7, #28]
 8013032:	440b      	add	r3, r1
 8013034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013038:	4619      	mov	r1, r3
 801303a:	4b5a      	ldr	r3, [pc, #360]	; (80131a4 <USB_EPStartXfer+0x490>)
 801303c:	4013      	ands	r3, r2
 801303e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 8013040:	68bb      	ldr	r3, [r7, #8]
 8013042:	695b      	ldr	r3, [r3, #20]
 8013044:	2b00      	cmp	r3, #0
 8013046:	d123      	bne.n	8013090 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8013048:	69bb      	ldr	r3, [r7, #24]
 801304a:	015a      	lsls	r2, r3, #5
 801304c:	69fb      	ldr	r3, [r7, #28]
 801304e:	4413      	add	r3, r2
 8013050:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013054:	691a      	ldr	r2, [r3, #16]
 8013056:	68bb      	ldr	r3, [r7, #8]
 8013058:	689b      	ldr	r3, [r3, #8]
 801305a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801305e:	69b9      	ldr	r1, [r7, #24]
 8013060:	0148      	lsls	r0, r1, #5
 8013062:	69f9      	ldr	r1, [r7, #28]
 8013064:	4401      	add	r1, r0
 8013066:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 801306a:	4313      	orrs	r3, r2
 801306c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801306e:	69bb      	ldr	r3, [r7, #24]
 8013070:	015a      	lsls	r2, r3, #5
 8013072:	69fb      	ldr	r3, [r7, #28]
 8013074:	4413      	add	r3, r2
 8013076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801307a:	691b      	ldr	r3, [r3, #16]
 801307c:	69ba      	ldr	r2, [r7, #24]
 801307e:	0151      	lsls	r1, r2, #5
 8013080:	69fa      	ldr	r2, [r7, #28]
 8013082:	440a      	add	r2, r1
 8013084:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013088:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 801308c:	6113      	str	r3, [r2, #16]
 801308e:	e033      	b.n	80130f8 <USB_EPStartXfer+0x3e4>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8013090:	68bb      	ldr	r3, [r7, #8]
 8013092:	695a      	ldr	r2, [r3, #20]
 8013094:	68bb      	ldr	r3, [r7, #8]
 8013096:	689b      	ldr	r3, [r3, #8]
 8013098:	4413      	add	r3, r2
 801309a:	1e5a      	subs	r2, r3, #1
 801309c:	68bb      	ldr	r3, [r7, #8]
 801309e:	689b      	ldr	r3, [r3, #8]
 80130a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80130a4:	82fb      	strh	r3, [r7, #22]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80130a6:	69bb      	ldr	r3, [r7, #24]
 80130a8:	015a      	lsls	r2, r3, #5
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	4413      	add	r3, r2
 80130ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130b2:	691a      	ldr	r2, [r3, #16]
 80130b4:	8afb      	ldrh	r3, [r7, #22]
 80130b6:	04d9      	lsls	r1, r3, #19
 80130b8:	4b3b      	ldr	r3, [pc, #236]	; (80131a8 <USB_EPStartXfer+0x494>)
 80130ba:	400b      	ands	r3, r1
 80130bc:	69b9      	ldr	r1, [r7, #24]
 80130be:	0148      	lsls	r0, r1, #5
 80130c0:	69f9      	ldr	r1, [r7, #28]
 80130c2:	4401      	add	r1, r0
 80130c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80130c8:	4313      	orrs	r3, r2
 80130ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80130cc:	69bb      	ldr	r3, [r7, #24]
 80130ce:	015a      	lsls	r2, r3, #5
 80130d0:	69fb      	ldr	r3, [r7, #28]
 80130d2:	4413      	add	r3, r2
 80130d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80130d8:	691a      	ldr	r2, [r3, #16]
 80130da:	68bb      	ldr	r3, [r7, #8]
 80130dc:	689b      	ldr	r3, [r3, #8]
 80130de:	8af9      	ldrh	r1, [r7, #22]
 80130e0:	fb01 f303 	mul.w	r3, r1, r3
 80130e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80130e8:	69b9      	ldr	r1, [r7, #24]
 80130ea:	0148      	lsls	r0, r1, #5
 80130ec:	69f9      	ldr	r1, [r7, #28]
 80130ee:	4401      	add	r1, r0
 80130f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80130f4:	4313      	orrs	r3, r2
 80130f6:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80130f8:	79fb      	ldrb	r3, [r7, #7]
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d10d      	bne.n	801311a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80130fe:	68bb      	ldr	r3, [r7, #8]
 8013100:	68db      	ldr	r3, [r3, #12]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d009      	beq.n	801311a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013106:	68bb      	ldr	r3, [r7, #8]
 8013108:	68d9      	ldr	r1, [r3, #12]
 801310a:	69bb      	ldr	r3, [r7, #24]
 801310c:	015a      	lsls	r2, r3, #5
 801310e:	69fb      	ldr	r3, [r7, #28]
 8013110:	4413      	add	r3, r2
 8013112:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013116:	460a      	mov	r2, r1
 8013118:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 801311a:	68bb      	ldr	r3, [r7, #8]
 801311c:	78db      	ldrb	r3, [r3, #3]
 801311e:	2b01      	cmp	r3, #1
 8013120:	d128      	bne.n	8013174 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013122:	69fb      	ldr	r3, [r7, #28]
 8013124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013128:	689b      	ldr	r3, [r3, #8]
 801312a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801312e:	2b00      	cmp	r3, #0
 8013130:	d110      	bne.n	8013154 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8013132:	69bb      	ldr	r3, [r7, #24]
 8013134:	015a      	lsls	r2, r3, #5
 8013136:	69fb      	ldr	r3, [r7, #28]
 8013138:	4413      	add	r3, r2
 801313a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801313e:	681b      	ldr	r3, [r3, #0]
 8013140:	69ba      	ldr	r2, [r7, #24]
 8013142:	0151      	lsls	r1, r2, #5
 8013144:	69fa      	ldr	r2, [r7, #28]
 8013146:	440a      	add	r2, r1
 8013148:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801314c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013150:	6013      	str	r3, [r2, #0]
 8013152:	e00f      	b.n	8013174 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8013154:	69bb      	ldr	r3, [r7, #24]
 8013156:	015a      	lsls	r2, r3, #5
 8013158:	69fb      	ldr	r3, [r7, #28]
 801315a:	4413      	add	r3, r2
 801315c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013160:	681b      	ldr	r3, [r3, #0]
 8013162:	69ba      	ldr	r2, [r7, #24]
 8013164:	0151      	lsls	r1, r2, #5
 8013166:	69fa      	ldr	r2, [r7, #28]
 8013168:	440a      	add	r2, r1
 801316a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801316e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013172:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013174:	69bb      	ldr	r3, [r7, #24]
 8013176:	015a      	lsls	r2, r3, #5
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	4413      	add	r3, r2
 801317c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	69ba      	ldr	r2, [r7, #24]
 8013184:	0151      	lsls	r1, r2, #5
 8013186:	69fa      	ldr	r2, [r7, #28]
 8013188:	440a      	add	r2, r1
 801318a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801318e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013192:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013194:	2300      	movs	r3, #0
}
 8013196:	4618      	mov	r0, r3
 8013198:	3720      	adds	r7, #32
 801319a:	46bd      	mov	sp, r7
 801319c:	bd80      	pop	{r7, pc}
 801319e:	bf00      	nop
 80131a0:	fff80000 	.word	0xfff80000
 80131a4:	e007ffff 	.word	0xe007ffff
 80131a8:	1ff80000 	.word	0x1ff80000

080131ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80131ac:	b480      	push	{r7}
 80131ae:	b087      	sub	sp, #28
 80131b0:	af00      	add	r7, sp, #0
 80131b2:	60f8      	str	r0, [r7, #12]
 80131b4:	60b9      	str	r1, [r7, #8]
 80131b6:	4613      	mov	r3, r2
 80131b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80131be:	68bb      	ldr	r3, [r7, #8]
 80131c0:	781b      	ldrb	r3, [r3, #0]
 80131c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80131c4:	68bb      	ldr	r3, [r7, #8]
 80131c6:	785b      	ldrb	r3, [r3, #1]
 80131c8:	2b01      	cmp	r3, #1
 80131ca:	f040 80cd 	bne.w	8013368 <USB_EP0StartXfer+0x1bc>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80131ce:	68bb      	ldr	r3, [r7, #8]
 80131d0:	695b      	ldr	r3, [r3, #20]
 80131d2:	2b00      	cmp	r3, #0
 80131d4:	d132      	bne.n	801323c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80131d6:	693b      	ldr	r3, [r7, #16]
 80131d8:	015a      	lsls	r2, r3, #5
 80131da:	697b      	ldr	r3, [r7, #20]
 80131dc:	4413      	add	r3, r2
 80131de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131e2:	691a      	ldr	r2, [r3, #16]
 80131e4:	693b      	ldr	r3, [r7, #16]
 80131e6:	0159      	lsls	r1, r3, #5
 80131e8:	697b      	ldr	r3, [r7, #20]
 80131ea:	440b      	add	r3, r1
 80131ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80131f0:	4619      	mov	r1, r3
 80131f2:	4b98      	ldr	r3, [pc, #608]	; (8013454 <USB_EP0StartXfer+0x2a8>)
 80131f4:	4013      	ands	r3, r2
 80131f6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80131f8:	693b      	ldr	r3, [r7, #16]
 80131fa:	015a      	lsls	r2, r3, #5
 80131fc:	697b      	ldr	r3, [r7, #20]
 80131fe:	4413      	add	r3, r2
 8013200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013204:	691b      	ldr	r3, [r3, #16]
 8013206:	693a      	ldr	r2, [r7, #16]
 8013208:	0151      	lsls	r1, r2, #5
 801320a:	697a      	ldr	r2, [r7, #20]
 801320c:	440a      	add	r2, r1
 801320e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013212:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013216:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013218:	693b      	ldr	r3, [r7, #16]
 801321a:	015a      	lsls	r2, r3, #5
 801321c:	697b      	ldr	r3, [r7, #20]
 801321e:	4413      	add	r3, r2
 8013220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013224:	691a      	ldr	r2, [r3, #16]
 8013226:	693b      	ldr	r3, [r7, #16]
 8013228:	0159      	lsls	r1, r3, #5
 801322a:	697b      	ldr	r3, [r7, #20]
 801322c:	440b      	add	r3, r1
 801322e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013232:	4619      	mov	r1, r3
 8013234:	4b88      	ldr	r3, [pc, #544]	; (8013458 <USB_EP0StartXfer+0x2ac>)
 8013236:	4013      	ands	r3, r2
 8013238:	610b      	str	r3, [r1, #16]
 801323a:	e04e      	b.n	80132da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801323c:	693b      	ldr	r3, [r7, #16]
 801323e:	015a      	lsls	r2, r3, #5
 8013240:	697b      	ldr	r3, [r7, #20]
 8013242:	4413      	add	r3, r2
 8013244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013248:	691a      	ldr	r2, [r3, #16]
 801324a:	693b      	ldr	r3, [r7, #16]
 801324c:	0159      	lsls	r1, r3, #5
 801324e:	697b      	ldr	r3, [r7, #20]
 8013250:	440b      	add	r3, r1
 8013252:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013256:	4619      	mov	r1, r3
 8013258:	4b7f      	ldr	r3, [pc, #508]	; (8013458 <USB_EP0StartXfer+0x2ac>)
 801325a:	4013      	ands	r3, r2
 801325c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801325e:	693b      	ldr	r3, [r7, #16]
 8013260:	015a      	lsls	r2, r3, #5
 8013262:	697b      	ldr	r3, [r7, #20]
 8013264:	4413      	add	r3, r2
 8013266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801326a:	691a      	ldr	r2, [r3, #16]
 801326c:	693b      	ldr	r3, [r7, #16]
 801326e:	0159      	lsls	r1, r3, #5
 8013270:	697b      	ldr	r3, [r7, #20]
 8013272:	440b      	add	r3, r1
 8013274:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013278:	4619      	mov	r1, r3
 801327a:	4b76      	ldr	r3, [pc, #472]	; (8013454 <USB_EP0StartXfer+0x2a8>)
 801327c:	4013      	ands	r3, r2
 801327e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 8013280:	68bb      	ldr	r3, [r7, #8]
 8013282:	695a      	ldr	r2, [r3, #20]
 8013284:	68bb      	ldr	r3, [r7, #8]
 8013286:	689b      	ldr	r3, [r3, #8]
 8013288:	429a      	cmp	r2, r3
 801328a:	d903      	bls.n	8013294 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801328c:	68bb      	ldr	r3, [r7, #8]
 801328e:	689a      	ldr	r2, [r3, #8]
 8013290:	68bb      	ldr	r3, [r7, #8]
 8013292:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013294:	693b      	ldr	r3, [r7, #16]
 8013296:	015a      	lsls	r2, r3, #5
 8013298:	697b      	ldr	r3, [r7, #20]
 801329a:	4413      	add	r3, r2
 801329c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132a0:	691b      	ldr	r3, [r3, #16]
 80132a2:	693a      	ldr	r2, [r7, #16]
 80132a4:	0151      	lsls	r1, r2, #5
 80132a6:	697a      	ldr	r2, [r7, #20]
 80132a8:	440a      	add	r2, r1
 80132aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80132ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80132b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	015a      	lsls	r2, r3, #5
 80132b8:	697b      	ldr	r3, [r7, #20]
 80132ba:	4413      	add	r3, r2
 80132bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132c0:	691a      	ldr	r2, [r3, #16]
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	695b      	ldr	r3, [r3, #20]
 80132c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80132ca:	6939      	ldr	r1, [r7, #16]
 80132cc:	0148      	lsls	r0, r1, #5
 80132ce:	6979      	ldr	r1, [r7, #20]
 80132d0:	4401      	add	r1, r0
 80132d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80132d6:	4313      	orrs	r3, r2
 80132d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80132da:	79fb      	ldrb	r3, [r7, #7]
 80132dc:	2b01      	cmp	r3, #1
 80132de:	d11e      	bne.n	801331e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80132e0:	68bb      	ldr	r3, [r7, #8]
 80132e2:	691b      	ldr	r3, [r3, #16]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d009      	beq.n	80132fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80132e8:	693b      	ldr	r3, [r7, #16]
 80132ea:	015a      	lsls	r2, r3, #5
 80132ec:	697b      	ldr	r3, [r7, #20]
 80132ee:	4413      	add	r3, r2
 80132f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80132f4:	461a      	mov	r2, r3
 80132f6:	68bb      	ldr	r3, [r7, #8]
 80132f8:	691b      	ldr	r3, [r3, #16]
 80132fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80132fc:	693b      	ldr	r3, [r7, #16]
 80132fe:	015a      	lsls	r2, r3, #5
 8013300:	697b      	ldr	r3, [r7, #20]
 8013302:	4413      	add	r3, r2
 8013304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	693a      	ldr	r2, [r7, #16]
 801330c:	0151      	lsls	r1, r2, #5
 801330e:	697a      	ldr	r2, [r7, #20]
 8013310:	440a      	add	r2, r1
 8013312:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013316:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801331a:	6013      	str	r3, [r2, #0]
 801331c:	e092      	b.n	8013444 <USB_EP0StartXfer+0x298>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801331e:	693b      	ldr	r3, [r7, #16]
 8013320:	015a      	lsls	r2, r3, #5
 8013322:	697b      	ldr	r3, [r7, #20]
 8013324:	4413      	add	r3, r2
 8013326:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801332a:	681b      	ldr	r3, [r3, #0]
 801332c:	693a      	ldr	r2, [r7, #16]
 801332e:	0151      	lsls	r1, r2, #5
 8013330:	697a      	ldr	r2, [r7, #20]
 8013332:	440a      	add	r2, r1
 8013334:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013338:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801333c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801333e:	68bb      	ldr	r3, [r7, #8]
 8013340:	695b      	ldr	r3, [r3, #20]
 8013342:	2b00      	cmp	r3, #0
 8013344:	d07e      	beq.n	8013444 <USB_EP0StartXfer+0x298>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8013346:	697b      	ldr	r3, [r7, #20]
 8013348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801334c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	781b      	ldrb	r3, [r3, #0]
 8013352:	f003 030f 	and.w	r3, r3, #15
 8013356:	2101      	movs	r1, #1
 8013358:	fa01 f303 	lsl.w	r3, r1, r3
 801335c:	6979      	ldr	r1, [r7, #20]
 801335e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013362:	4313      	orrs	r3, r2
 8013364:	634b      	str	r3, [r1, #52]	; 0x34
 8013366:	e06d      	b.n	8013444 <USB_EP0StartXfer+0x298>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8013368:	693b      	ldr	r3, [r7, #16]
 801336a:	015a      	lsls	r2, r3, #5
 801336c:	697b      	ldr	r3, [r7, #20]
 801336e:	4413      	add	r3, r2
 8013370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013374:	691a      	ldr	r2, [r3, #16]
 8013376:	693b      	ldr	r3, [r7, #16]
 8013378:	0159      	lsls	r1, r3, #5
 801337a:	697b      	ldr	r3, [r7, #20]
 801337c:	440b      	add	r3, r1
 801337e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013382:	4619      	mov	r1, r3
 8013384:	4b34      	ldr	r3, [pc, #208]	; (8013458 <USB_EP0StartXfer+0x2ac>)
 8013386:	4013      	ands	r3, r2
 8013388:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801338a:	693b      	ldr	r3, [r7, #16]
 801338c:	015a      	lsls	r2, r3, #5
 801338e:	697b      	ldr	r3, [r7, #20]
 8013390:	4413      	add	r3, r2
 8013392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013396:	691a      	ldr	r2, [r3, #16]
 8013398:	693b      	ldr	r3, [r7, #16]
 801339a:	0159      	lsls	r1, r3, #5
 801339c:	697b      	ldr	r3, [r7, #20]
 801339e:	440b      	add	r3, r1
 80133a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133a4:	4619      	mov	r1, r3
 80133a6:	4b2b      	ldr	r3, [pc, #172]	; (8013454 <USB_EP0StartXfer+0x2a8>)
 80133a8:	4013      	ands	r3, r2
 80133aa:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 80133ac:	68bb      	ldr	r3, [r7, #8]
 80133ae:	695b      	ldr	r3, [r3, #20]
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d003      	beq.n	80133bc <USB_EP0StartXfer+0x210>
    {
      ep->xfer_len = ep->maxpacket;
 80133b4:	68bb      	ldr	r3, [r7, #8]
 80133b6:	689a      	ldr	r2, [r3, #8]
 80133b8:	68bb      	ldr	r3, [r7, #8]
 80133ba:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80133bc:	693b      	ldr	r3, [r7, #16]
 80133be:	015a      	lsls	r2, r3, #5
 80133c0:	697b      	ldr	r3, [r7, #20]
 80133c2:	4413      	add	r3, r2
 80133c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133c8:	691b      	ldr	r3, [r3, #16]
 80133ca:	693a      	ldr	r2, [r7, #16]
 80133cc:	0151      	lsls	r1, r2, #5
 80133ce:	697a      	ldr	r2, [r7, #20]
 80133d0:	440a      	add	r2, r1
 80133d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80133d6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80133da:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 80133dc:	693b      	ldr	r3, [r7, #16]
 80133de:	015a      	lsls	r2, r3, #5
 80133e0:	697b      	ldr	r3, [r7, #20]
 80133e2:	4413      	add	r3, r2
 80133e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80133e8:	691a      	ldr	r2, [r3, #16]
 80133ea:	68bb      	ldr	r3, [r7, #8]
 80133ec:	689b      	ldr	r3, [r3, #8]
 80133ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80133f2:	6939      	ldr	r1, [r7, #16]
 80133f4:	0148      	lsls	r0, r1, #5
 80133f6:	6979      	ldr	r1, [r7, #20]
 80133f8:	4401      	add	r1, r0
 80133fa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80133fe:	4313      	orrs	r3, r2
 8013400:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8013402:	79fb      	ldrb	r3, [r7, #7]
 8013404:	2b01      	cmp	r3, #1
 8013406:	d10d      	bne.n	8013424 <USB_EP0StartXfer+0x278>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8013408:	68bb      	ldr	r3, [r7, #8]
 801340a:	68db      	ldr	r3, [r3, #12]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d009      	beq.n	8013424 <USB_EP0StartXfer+0x278>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8013410:	68bb      	ldr	r3, [r7, #8]
 8013412:	68d9      	ldr	r1, [r3, #12]
 8013414:	693b      	ldr	r3, [r7, #16]
 8013416:	015a      	lsls	r2, r3, #5
 8013418:	697b      	ldr	r3, [r7, #20]
 801341a:	4413      	add	r3, r2
 801341c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013420:	460a      	mov	r2, r1
 8013422:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8013424:	693b      	ldr	r3, [r7, #16]
 8013426:	015a      	lsls	r2, r3, #5
 8013428:	697b      	ldr	r3, [r7, #20]
 801342a:	4413      	add	r3, r2
 801342c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013430:	681b      	ldr	r3, [r3, #0]
 8013432:	693a      	ldr	r2, [r7, #16]
 8013434:	0151      	lsls	r1, r2, #5
 8013436:	697a      	ldr	r2, [r7, #20]
 8013438:	440a      	add	r2, r1
 801343a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801343e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8013442:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	371c      	adds	r7, #28
 801344a:	46bd      	mov	sp, r7
 801344c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013450:	4770      	bx	lr
 8013452:	bf00      	nop
 8013454:	e007ffff 	.word	0xe007ffff
 8013458:	fff80000 	.word	0xfff80000

0801345c <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 801345c:	b480      	push	{r7}
 801345e:	b089      	sub	sp, #36	; 0x24
 8013460:	af00      	add	r7, sp, #0
 8013462:	60f8      	str	r0, [r7, #12]
 8013464:	60b9      	str	r1, [r7, #8]
 8013466:	4611      	mov	r1, r2
 8013468:	461a      	mov	r2, r3
 801346a:	460b      	mov	r3, r1
 801346c:	71fb      	strb	r3, [r7, #7]
 801346e:	4613      	mov	r3, r2
 8013470:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013472:	68fb      	ldr	r3, [r7, #12]
 8013474:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8013476:	68bb      	ldr	r3, [r7, #8]
 8013478:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 801347a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801347e:	2b00      	cmp	r3, #0
 8013480:	d11a      	bne.n	80134b8 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8013482:	88bb      	ldrh	r3, [r7, #4]
 8013484:	3303      	adds	r3, #3
 8013486:	089b      	lsrs	r3, r3, #2
 8013488:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 801348a:	2300      	movs	r3, #0
 801348c:	61bb      	str	r3, [r7, #24]
 801348e:	e00f      	b.n	80134b0 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8013490:	79fb      	ldrb	r3, [r7, #7]
 8013492:	031a      	lsls	r2, r3, #12
 8013494:	697b      	ldr	r3, [r7, #20]
 8013496:	4413      	add	r3, r2
 8013498:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801349c:	461a      	mov	r2, r3
 801349e:	69fb      	ldr	r3, [r7, #28]
 80134a0:	681b      	ldr	r3, [r3, #0]
 80134a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80134a4:	69fb      	ldr	r3, [r7, #28]
 80134a6:	3304      	adds	r3, #4
 80134a8:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80134aa:	69bb      	ldr	r3, [r7, #24]
 80134ac:	3301      	adds	r3, #1
 80134ae:	61bb      	str	r3, [r7, #24]
 80134b0:	69ba      	ldr	r2, [r7, #24]
 80134b2:	693b      	ldr	r3, [r7, #16]
 80134b4:	429a      	cmp	r2, r3
 80134b6:	d3eb      	bcc.n	8013490 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80134b8:	2300      	movs	r3, #0
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	3724      	adds	r7, #36	; 0x24
 80134be:	46bd      	mov	sp, r7
 80134c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c4:	4770      	bx	lr

080134c6 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80134c6:	b480      	push	{r7}
 80134c8:	b089      	sub	sp, #36	; 0x24
 80134ca:	af00      	add	r7, sp, #0
 80134cc:	60f8      	str	r0, [r7, #12]
 80134ce:	60b9      	str	r1, [r7, #8]
 80134d0:	4613      	mov	r3, r2
 80134d2:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 80134dc:	88fb      	ldrh	r3, [r7, #6]
 80134de:	3303      	adds	r3, #3
 80134e0:	089b      	lsrs	r3, r3, #2
 80134e2:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 80134e4:	2300      	movs	r3, #0
 80134e6:	61bb      	str	r3, [r7, #24]
 80134e8:	e00b      	b.n	8013502 <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80134f6:	69fb      	ldr	r3, [r7, #28]
 80134f8:	3304      	adds	r3, #4
 80134fa:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80134fc:	69bb      	ldr	r3, [r7, #24]
 80134fe:	3301      	adds	r3, #1
 8013500:	61bb      	str	r3, [r7, #24]
 8013502:	69ba      	ldr	r2, [r7, #24]
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	429a      	cmp	r2, r3
 8013508:	d3ef      	bcc.n	80134ea <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 801350a:	69fb      	ldr	r3, [r7, #28]
}
 801350c:	4618      	mov	r0, r3
 801350e:	3724      	adds	r7, #36	; 0x24
 8013510:	46bd      	mov	sp, r7
 8013512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013516:	4770      	bx	lr

08013518 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013518:	b480      	push	{r7}
 801351a:	b085      	sub	sp, #20
 801351c:	af00      	add	r7, sp, #0
 801351e:	6078      	str	r0, [r7, #4]
 8013520:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013526:	683b      	ldr	r3, [r7, #0]
 8013528:	781b      	ldrb	r3, [r3, #0]
 801352a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 801352c:	683b      	ldr	r3, [r7, #0]
 801352e:	785b      	ldrb	r3, [r3, #1]
 8013530:	2b01      	cmp	r3, #1
 8013532:	d12c      	bne.n	801358e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8013534:	68bb      	ldr	r3, [r7, #8]
 8013536:	015a      	lsls	r2, r3, #5
 8013538:	68fb      	ldr	r3, [r7, #12]
 801353a:	4413      	add	r3, r2
 801353c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013540:	681b      	ldr	r3, [r3, #0]
 8013542:	2b00      	cmp	r3, #0
 8013544:	db12      	blt.n	801356c <USB_EPSetStall+0x54>
 8013546:	68bb      	ldr	r3, [r7, #8]
 8013548:	2b00      	cmp	r3, #0
 801354a:	d00f      	beq.n	801356c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 801354c:	68bb      	ldr	r3, [r7, #8]
 801354e:	015a      	lsls	r2, r3, #5
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	4413      	add	r3, r2
 8013554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013558:	681b      	ldr	r3, [r3, #0]
 801355a:	68ba      	ldr	r2, [r7, #8]
 801355c:	0151      	lsls	r1, r2, #5
 801355e:	68fa      	ldr	r2, [r7, #12]
 8013560:	440a      	add	r2, r1
 8013562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013566:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801356a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 801356c:	68bb      	ldr	r3, [r7, #8]
 801356e:	015a      	lsls	r2, r3, #5
 8013570:	68fb      	ldr	r3, [r7, #12]
 8013572:	4413      	add	r3, r2
 8013574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	68ba      	ldr	r2, [r7, #8]
 801357c:	0151      	lsls	r1, r2, #5
 801357e:	68fa      	ldr	r2, [r7, #12]
 8013580:	440a      	add	r2, r1
 8013582:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013586:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801358a:	6013      	str	r3, [r2, #0]
 801358c:	e02b      	b.n	80135e6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	015a      	lsls	r2, r3, #5
 8013592:	68fb      	ldr	r3, [r7, #12]
 8013594:	4413      	add	r3, r2
 8013596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	2b00      	cmp	r3, #0
 801359e:	db12      	blt.n	80135c6 <USB_EPSetStall+0xae>
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00f      	beq.n	80135c6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80135a6:	68bb      	ldr	r3, [r7, #8]
 80135a8:	015a      	lsls	r2, r3, #5
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	4413      	add	r3, r2
 80135ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135b2:	681b      	ldr	r3, [r3, #0]
 80135b4:	68ba      	ldr	r2, [r7, #8]
 80135b6:	0151      	lsls	r1, r2, #5
 80135b8:	68fa      	ldr	r2, [r7, #12]
 80135ba:	440a      	add	r2, r1
 80135bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135c0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80135c4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80135c6:	68bb      	ldr	r3, [r7, #8]
 80135c8:	015a      	lsls	r2, r3, #5
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	4413      	add	r3, r2
 80135ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	68ba      	ldr	r2, [r7, #8]
 80135d6:	0151      	lsls	r1, r2, #5
 80135d8:	68fa      	ldr	r2, [r7, #12]
 80135da:	440a      	add	r2, r1
 80135dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80135e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80135e4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80135e6:	2300      	movs	r3, #0
}
 80135e8:	4618      	mov	r0, r3
 80135ea:	3714      	adds	r7, #20
 80135ec:	46bd      	mov	sp, r7
 80135ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f2:	4770      	bx	lr

080135f4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80135f4:	b480      	push	{r7}
 80135f6:	b085      	sub	sp, #20
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013602:	683b      	ldr	r3, [r7, #0]
 8013604:	781b      	ldrb	r3, [r3, #0]
 8013606:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013608:	683b      	ldr	r3, [r7, #0]
 801360a:	785b      	ldrb	r3, [r3, #1]
 801360c:	2b01      	cmp	r3, #1
 801360e:	d128      	bne.n	8013662 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	015a      	lsls	r2, r3, #5
 8013614:	68fb      	ldr	r3, [r7, #12]
 8013616:	4413      	add	r3, r2
 8013618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	68ba      	ldr	r2, [r7, #8]
 8013620:	0151      	lsls	r1, r2, #5
 8013622:	68fa      	ldr	r2, [r7, #12]
 8013624:	440a      	add	r2, r1
 8013626:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801362a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801362e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013630:	683b      	ldr	r3, [r7, #0]
 8013632:	78db      	ldrb	r3, [r3, #3]
 8013634:	2b03      	cmp	r3, #3
 8013636:	d003      	beq.n	8013640 <USB_EPClearStall+0x4c>
 8013638:	683b      	ldr	r3, [r7, #0]
 801363a:	78db      	ldrb	r3, [r3, #3]
 801363c:	2b02      	cmp	r3, #2
 801363e:	d138      	bne.n	80136b2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	015a      	lsls	r2, r3, #5
 8013644:	68fb      	ldr	r3, [r7, #12]
 8013646:	4413      	add	r3, r2
 8013648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801364c:	681b      	ldr	r3, [r3, #0]
 801364e:	68ba      	ldr	r2, [r7, #8]
 8013650:	0151      	lsls	r1, r2, #5
 8013652:	68fa      	ldr	r2, [r7, #12]
 8013654:	440a      	add	r2, r1
 8013656:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801365a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801365e:	6013      	str	r3, [r2, #0]
 8013660:	e027      	b.n	80136b2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8013662:	68bb      	ldr	r3, [r7, #8]
 8013664:	015a      	lsls	r2, r3, #5
 8013666:	68fb      	ldr	r3, [r7, #12]
 8013668:	4413      	add	r3, r2
 801366a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	68ba      	ldr	r2, [r7, #8]
 8013672:	0151      	lsls	r1, r2, #5
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	440a      	add	r2, r1
 8013678:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801367c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8013680:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8013682:	683b      	ldr	r3, [r7, #0]
 8013684:	78db      	ldrb	r3, [r3, #3]
 8013686:	2b03      	cmp	r3, #3
 8013688:	d003      	beq.n	8013692 <USB_EPClearStall+0x9e>
 801368a:	683b      	ldr	r3, [r7, #0]
 801368c:	78db      	ldrb	r3, [r3, #3]
 801368e:	2b02      	cmp	r3, #2
 8013690:	d10f      	bne.n	80136b2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8013692:	68bb      	ldr	r3, [r7, #8]
 8013694:	015a      	lsls	r2, r3, #5
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	4413      	add	r3, r2
 801369a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801369e:	681b      	ldr	r3, [r3, #0]
 80136a0:	68ba      	ldr	r2, [r7, #8]
 80136a2:	0151      	lsls	r1, r2, #5
 80136a4:	68fa      	ldr	r2, [r7, #12]
 80136a6:	440a      	add	r2, r1
 80136a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80136ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80136b0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80136b2:	2300      	movs	r3, #0
}
 80136b4:	4618      	mov	r0, r3
 80136b6:	3714      	adds	r7, #20
 80136b8:	46bd      	mov	sp, r7
 80136ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136be:	4770      	bx	lr

080136c0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80136c0:	b480      	push	{r7}
 80136c2:	b085      	sub	sp, #20
 80136c4:	af00      	add	r7, sp, #0
 80136c6:	6078      	str	r0, [r7, #4]
 80136c8:	460b      	mov	r3, r1
 80136ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80136cc:	687b      	ldr	r3, [r7, #4]
 80136ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80136d0:	68fb      	ldr	r3, [r7, #12]
 80136d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	68fa      	ldr	r2, [r7, #12]
 80136da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80136de:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80136e2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80136ea:	681a      	ldr	r2, [r3, #0]
 80136ec:	78fb      	ldrb	r3, [r7, #3]
 80136ee:	011b      	lsls	r3, r3, #4
 80136f0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80136f4:	68f9      	ldr	r1, [r7, #12]
 80136f6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80136fa:	4313      	orrs	r3, r2
 80136fc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80136fe:	2300      	movs	r3, #0
}
 8013700:	4618      	mov	r0, r3
 8013702:	3714      	adds	r7, #20
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr

0801370c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 801370c:	b580      	push	{r7, lr}
 801370e:	b084      	sub	sp, #16
 8013710:	af00      	add	r7, sp, #0
 8013712:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013714:	687b      	ldr	r3, [r7, #4]
 8013716:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801371e:	685b      	ldr	r3, [r3, #4]
 8013720:	68fa      	ldr	r2, [r7, #12]
 8013722:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013726:	f023 0302 	bic.w	r3, r3, #2
 801372a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801372c:	2003      	movs	r0, #3
 801372e:	f7f1 fb6f 	bl	8004e10 <HAL_Delay>

  return HAL_OK;
 8013732:	2300      	movs	r3, #0
}
 8013734:	4618      	mov	r0, r3
 8013736:	3710      	adds	r7, #16
 8013738:	46bd      	mov	sp, r7
 801373a:	bd80      	pop	{r7, pc}

0801373c <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 801373c:	b580      	push	{r7, lr}
 801373e:	b084      	sub	sp, #16
 8013740:	af00      	add	r7, sp, #0
 8013742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013748:	68fb      	ldr	r3, [r7, #12]
 801374a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801374e:	685b      	ldr	r3, [r3, #4]
 8013750:	68fa      	ldr	r2, [r7, #12]
 8013752:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013756:	f043 0302 	orr.w	r3, r3, #2
 801375a:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 801375c:	2003      	movs	r0, #3
 801375e:	f7f1 fb57 	bl	8004e10 <HAL_Delay>

  return HAL_OK;
 8013762:	2300      	movs	r3, #0
}
 8013764:	4618      	mov	r0, r3
 8013766:	3710      	adds	r7, #16
 8013768:	46bd      	mov	sp, r7
 801376a:	bd80      	pop	{r7, pc}

0801376c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801376c:	b480      	push	{r7}
 801376e:	b085      	sub	sp, #20
 8013770:	af00      	add	r7, sp, #0
 8013772:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	695b      	ldr	r3, [r3, #20]
 8013778:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801377a:	687b      	ldr	r3, [r7, #4]
 801377c:	699b      	ldr	r3, [r3, #24]
 801377e:	68fa      	ldr	r2, [r7, #12]
 8013780:	4013      	ands	r3, r2
 8013782:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8013784:	68fb      	ldr	r3, [r7, #12]
}
 8013786:	4618      	mov	r0, r3
 8013788:	3714      	adds	r7, #20
 801378a:	46bd      	mov	sp, r7
 801378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013790:	4770      	bx	lr

08013792 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8013792:	b480      	push	{r7}
 8013794:	b085      	sub	sp, #20
 8013796:	af00      	add	r7, sp, #0
 8013798:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801379a:	687b      	ldr	r3, [r7, #4]
 801379c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801379e:	68fb      	ldr	r3, [r7, #12]
 80137a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137a4:	699b      	ldr	r3, [r3, #24]
 80137a6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80137a8:	68fb      	ldr	r3, [r7, #12]
 80137aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ae:	69db      	ldr	r3, [r3, #28]
 80137b0:	68ba      	ldr	r2, [r7, #8]
 80137b2:	4013      	ands	r3, r2
 80137b4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80137b6:	68bb      	ldr	r3, [r7, #8]
 80137b8:	0c1b      	lsrs	r3, r3, #16
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	3714      	adds	r7, #20
 80137be:	46bd      	mov	sp, r7
 80137c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c4:	4770      	bx	lr

080137c6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80137c6:	b480      	push	{r7}
 80137c8:	b085      	sub	sp, #20
 80137ca:	af00      	add	r7, sp, #0
 80137cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80137d2:	68fb      	ldr	r3, [r7, #12]
 80137d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137d8:	699b      	ldr	r3, [r3, #24]
 80137da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80137dc:	68fb      	ldr	r3, [r7, #12]
 80137de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137e2:	69db      	ldr	r3, [r3, #28]
 80137e4:	68ba      	ldr	r2, [r7, #8]
 80137e6:	4013      	ands	r3, r2
 80137e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80137ea:	68bb      	ldr	r3, [r7, #8]
 80137ec:	b29b      	uxth	r3, r3
}
 80137ee:	4618      	mov	r0, r3
 80137f0:	3714      	adds	r7, #20
 80137f2:	46bd      	mov	sp, r7
 80137f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137f8:	4770      	bx	lr

080137fa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80137fa:	b480      	push	{r7}
 80137fc:	b085      	sub	sp, #20
 80137fe:	af00      	add	r7, sp, #0
 8013800:	6078      	str	r0, [r7, #4]
 8013802:	460b      	mov	r3, r1
 8013804:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013806:	687b      	ldr	r3, [r7, #4]
 8013808:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 801380a:	78fb      	ldrb	r3, [r7, #3]
 801380c:	015a      	lsls	r2, r3, #5
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	4413      	add	r3, r2
 8013812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013816:	689b      	ldr	r3, [r3, #8]
 8013818:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013820:	695b      	ldr	r3, [r3, #20]
 8013822:	68ba      	ldr	r2, [r7, #8]
 8013824:	4013      	ands	r3, r2
 8013826:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013828:	68bb      	ldr	r3, [r7, #8]
}
 801382a:	4618      	mov	r0, r3
 801382c:	3714      	adds	r7, #20
 801382e:	46bd      	mov	sp, r7
 8013830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013834:	4770      	bx	lr

08013836 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8013836:	b480      	push	{r7}
 8013838:	b087      	sub	sp, #28
 801383a:	af00      	add	r7, sp, #0
 801383c:	6078      	str	r0, [r7, #4]
 801383e:	460b      	mov	r3, r1
 8013840:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg, msk, emp;

  msk = USBx_DEVICE->DIEPMSK;
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801384c:	691b      	ldr	r3, [r3, #16]
 801384e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8013850:	697b      	ldr	r3, [r7, #20]
 8013852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013856:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013858:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801385a:	78fb      	ldrb	r3, [r7, #3]
 801385c:	f003 030f 	and.w	r3, r3, #15
 8013860:	68fa      	ldr	r2, [r7, #12]
 8013862:	fa22 f303 	lsr.w	r3, r2, r3
 8013866:	01db      	lsls	r3, r3, #7
 8013868:	b2db      	uxtb	r3, r3
 801386a:	693a      	ldr	r2, [r7, #16]
 801386c:	4313      	orrs	r3, r2
 801386e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8013870:	78fb      	ldrb	r3, [r7, #3]
 8013872:	015a      	lsls	r2, r3, #5
 8013874:	697b      	ldr	r3, [r7, #20]
 8013876:	4413      	add	r3, r2
 8013878:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387c:	689b      	ldr	r3, [r3, #8]
 801387e:	693a      	ldr	r2, [r7, #16]
 8013880:	4013      	ands	r3, r2
 8013882:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8013884:	68bb      	ldr	r3, [r7, #8]
}
 8013886:	4618      	mov	r0, r3
 8013888:	371c      	adds	r7, #28
 801388a:	46bd      	mov	sp, r7
 801388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013890:	4770      	bx	lr

08013892 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8013892:	b480      	push	{r7}
 8013894:	b083      	sub	sp, #12
 8013896:	af00      	add	r7, sp, #0
 8013898:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	695b      	ldr	r3, [r3, #20]
 801389e:	f003 0301 	and.w	r3, r3, #1
}
 80138a2:	4618      	mov	r0, r3
 80138a4:	370c      	adds	r7, #12
 80138a6:	46bd      	mov	sp, r7
 80138a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ac:	4770      	bx	lr
	...

080138b0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80138b0:	b480      	push	{r7}
 80138b2:	b085      	sub	sp, #20
 80138b4:	af00      	add	r7, sp, #0
 80138b6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80138b8:	687b      	ldr	r3, [r7, #4]
 80138ba:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138c2:	681a      	ldr	r2, [r3, #0]
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ca:	4619      	mov	r1, r3
 80138cc:	4b09      	ldr	r3, [pc, #36]	; (80138f4 <USB_ActivateSetup+0x44>)
 80138ce:	4013      	ands	r3, r2
 80138d0:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80138d2:	68fb      	ldr	r3, [r7, #12]
 80138d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	68fa      	ldr	r2, [r7, #12]
 80138dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80138e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80138e4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80138e6:	2300      	movs	r3, #0
}
 80138e8:	4618      	mov	r0, r3
 80138ea:	3714      	adds	r7, #20
 80138ec:	46bd      	mov	sp, r7
 80138ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138f2:	4770      	bx	lr
 80138f4:	fffff800 	.word	0xfffff800

080138f8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80138f8:	b480      	push	{r7}
 80138fa:	b087      	sub	sp, #28
 80138fc:	af00      	add	r7, sp, #0
 80138fe:	60f8      	str	r0, [r7, #12]
 8013900:	460b      	mov	r3, r1
 8013902:	607a      	str	r2, [r7, #4]
 8013904:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013906:	68fb      	ldr	r3, [r7, #12]
 8013908:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801390a:	68fb      	ldr	r3, [r7, #12]
 801390c:	333c      	adds	r3, #60	; 0x3c
 801390e:	3304      	adds	r3, #4
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8013914:	693b      	ldr	r3, [r7, #16]
 8013916:	4a26      	ldr	r2, [pc, #152]	; (80139b0 <USB_EP0_OutStart+0xb8>)
 8013918:	4293      	cmp	r3, r2
 801391a:	d90a      	bls.n	8013932 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 801391c:	697b      	ldr	r3, [r7, #20]
 801391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801392c:	d101      	bne.n	8013932 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 801392e:	2300      	movs	r3, #0
 8013930:	e037      	b.n	80139a2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8013932:	697b      	ldr	r3, [r7, #20]
 8013934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013938:	461a      	mov	r2, r3
 801393a:	2300      	movs	r3, #0
 801393c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 801393e:	697b      	ldr	r3, [r7, #20]
 8013940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013944:	691b      	ldr	r3, [r3, #16]
 8013946:	697a      	ldr	r2, [r7, #20]
 8013948:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801394c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013950:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8013952:	697b      	ldr	r3, [r7, #20]
 8013954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013958:	691b      	ldr	r3, [r3, #16]
 801395a:	697a      	ldr	r2, [r7, #20]
 801395c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013960:	f043 0318 	orr.w	r3, r3, #24
 8013964:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8013966:	697b      	ldr	r3, [r7, #20]
 8013968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396c:	691b      	ldr	r3, [r3, #16]
 801396e:	697a      	ldr	r2, [r7, #20]
 8013970:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013974:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8013978:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801397a:	7afb      	ldrb	r3, [r7, #11]
 801397c:	2b01      	cmp	r3, #1
 801397e:	d10f      	bne.n	80139a0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8013980:	697b      	ldr	r3, [r7, #20]
 8013982:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013986:	461a      	mov	r2, r3
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801398c:	697b      	ldr	r3, [r7, #20]
 801398e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013992:	681b      	ldr	r3, [r3, #0]
 8013994:	697a      	ldr	r2, [r7, #20]
 8013996:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801399a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801399e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80139a0:	2300      	movs	r3, #0
}
 80139a2:	4618      	mov	r0, r3
 80139a4:	371c      	adds	r7, #28
 80139a6:	46bd      	mov	sp, r7
 80139a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139ac:	4770      	bx	lr
 80139ae:	bf00      	nop
 80139b0:	4f54300a 	.word	0x4f54300a

080139b4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80139b4:	b480      	push	{r7}
 80139b6:	b085      	sub	sp, #20
 80139b8:	af00      	add	r7, sp, #0
 80139ba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80139bc:	2300      	movs	r3, #0
 80139be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80139c0:	68fb      	ldr	r3, [r7, #12]
 80139c2:	3301      	adds	r3, #1
 80139c4:	60fb      	str	r3, [r7, #12]
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	4a13      	ldr	r2, [pc, #76]	; (8013a18 <USB_CoreReset+0x64>)
 80139ca:	4293      	cmp	r3, r2
 80139cc:	d901      	bls.n	80139d2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80139ce:	2303      	movs	r3, #3
 80139d0:	e01b      	b.n	8013a0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	691b      	ldr	r3, [r3, #16]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	daf2      	bge.n	80139c0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80139da:	2300      	movs	r3, #0
 80139dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80139de:	687b      	ldr	r3, [r7, #4]
 80139e0:	691b      	ldr	r3, [r3, #16]
 80139e2:	f043 0201 	orr.w	r2, r3, #1
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80139ea:	68fb      	ldr	r3, [r7, #12]
 80139ec:	3301      	adds	r3, #1
 80139ee:	60fb      	str	r3, [r7, #12]
 80139f0:	68fb      	ldr	r3, [r7, #12]
 80139f2:	4a09      	ldr	r2, [pc, #36]	; (8013a18 <USB_CoreReset+0x64>)
 80139f4:	4293      	cmp	r3, r2
 80139f6:	d901      	bls.n	80139fc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80139f8:	2303      	movs	r3, #3
 80139fa:	e006      	b.n	8013a0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	691b      	ldr	r3, [r3, #16]
 8013a00:	f003 0301 	and.w	r3, r3, #1
 8013a04:	2b01      	cmp	r3, #1
 8013a06:	d0f0      	beq.n	80139ea <USB_CoreReset+0x36>

  return HAL_OK;
 8013a08:	2300      	movs	r3, #0
}
 8013a0a:	4618      	mov	r0, r3
 8013a0c:	3714      	adds	r7, #20
 8013a0e:	46bd      	mov	sp, r7
 8013a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a14:	4770      	bx	lr
 8013a16:	bf00      	nop
 8013a18:	00030d40 	.word	0x00030d40

08013a1c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8013a20:	4904      	ldr	r1, [pc, #16]	; (8013a34 <MX_FATFS_Init+0x18>)
 8013a22:	4805      	ldr	r0, [pc, #20]	; (8013a38 <MX_FATFS_Init+0x1c>)
 8013a24:	f005 fbec 	bl	8019200 <FATFS_LinkDriver>
 8013a28:	4603      	mov	r3, r0
 8013a2a:	461a      	mov	r2, r3
 8013a2c:	4b03      	ldr	r3, [pc, #12]	; (8013a3c <MX_FATFS_Init+0x20>)
 8013a2e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8013a30:	bf00      	nop
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	24044a0c 	.word	0x24044a0c
 8013a38:	0801c580 	.word	0x0801c580
 8013a3c:	24044a08 	.word	0x24044a08

08013a40 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8013a40:	b480      	push	{r7}
 8013a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8013a44:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8013a46:	4618      	mov	r0, r3
 8013a48:	46bd      	mov	sp, r7
 8013a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a4e:	4770      	bx	lr

08013a50 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 8013a50:	b580      	push	{r7, lr}
 8013a52:	b082      	sub	sp, #8
 8013a54:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8013a56:	2300      	movs	r3, #0
 8013a58:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8013a5a:	f000 f885 	bl	8013b68 <BSP_SD_IsDetected>
 8013a5e:	4603      	mov	r3, r0
 8013a60:	2b01      	cmp	r3, #1
 8013a62:	d001      	beq.n	8013a68 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8013a64:	2302      	movs	r3, #2
 8013a66:	e012      	b.n	8013a8e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 8013a68:	480b      	ldr	r0, [pc, #44]	; (8013a98 <BSP_SD_Init+0x48>)
 8013a6a:	f7f9 fc27 	bl	800d2bc <HAL_SD_Init>
 8013a6e:	4603      	mov	r3, r0
 8013a70:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8013a72:	79fb      	ldrb	r3, [r7, #7]
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d109      	bne.n	8013a8c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd1, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8013a78:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013a7c:	4806      	ldr	r0, [pc, #24]	; (8013a98 <BSP_SD_Init+0x48>)
 8013a7e:	f7fa fdfb 	bl	800e678 <HAL_SD_ConfigWideBusOperation>
 8013a82:	4603      	mov	r3, r0
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d001      	beq.n	8013a8c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8013a88:	2301      	movs	r3, #1
 8013a8a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8013a8c:	79fb      	ldrb	r3, [r7, #7]
}
 8013a8e:	4618      	mov	r0, r3
 8013a90:	3708      	adds	r7, #8
 8013a92:	46bd      	mov	sp, r7
 8013a94:	bd80      	pop	{r7, pc}
 8013a96:	bf00      	nop
 8013a98:	2404470c 	.word	0x2404470c

08013a9c <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8013a9c:	b580      	push	{r7, lr}
 8013a9e:	b086      	sub	sp, #24
 8013aa0:	af00      	add	r7, sp, #0
 8013aa2:	60f8      	str	r0, [r7, #12]
 8013aa4:	60b9      	str	r1, [r7, #8]
 8013aa6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8013aac:	687b      	ldr	r3, [r7, #4]
 8013aae:	68ba      	ldr	r2, [r7, #8]
 8013ab0:	68f9      	ldr	r1, [r7, #12]
 8013ab2:	4806      	ldr	r0, [pc, #24]	; (8013acc <BSP_SD_ReadBlocks_DMA+0x30>)
 8013ab4:	f7fa f83e 	bl	800db34 <HAL_SD_ReadBlocks_DMA>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013ac2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013ac4:	4618      	mov	r0, r3
 8013ac6:	3718      	adds	r7, #24
 8013ac8:	46bd      	mov	sp, r7
 8013aca:	bd80      	pop	{r7, pc}
 8013acc:	2404470c 	.word	0x2404470c

08013ad0 <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 8013ad0:	b580      	push	{r7, lr}
 8013ad2:	b086      	sub	sp, #24
 8013ad4:	af00      	add	r7, sp, #0
 8013ad6:	60f8      	str	r0, [r7, #12]
 8013ad8:	60b9      	str	r1, [r7, #8]
 8013ada:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8013adc:	2300      	movs	r3, #0
 8013ade:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	68ba      	ldr	r2, [r7, #8]
 8013ae4:	68f9      	ldr	r1, [r7, #12]
 8013ae6:	4806      	ldr	r0, [pc, #24]	; (8013b00 <BSP_SD_WriteBlocks_DMA+0x30>)
 8013ae8:	f7fa f8cc 	bl	800dc84 <HAL_SD_WriteBlocks_DMA>
 8013aec:	4603      	mov	r3, r0
 8013aee:	2b00      	cmp	r3, #0
 8013af0:	d001      	beq.n	8013af6 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 8013af2:	2301      	movs	r3, #1
 8013af4:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8013af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8013af8:	4618      	mov	r0, r3
 8013afa:	3718      	adds	r7, #24
 8013afc:	46bd      	mov	sp, r7
 8013afe:	bd80      	pop	{r7, pc}
 8013b00:	2404470c 	.word	0x2404470c

08013b04 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 8013b04:	b580      	push	{r7, lr}
 8013b06:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8013b08:	4805      	ldr	r0, [pc, #20]	; (8013b20 <BSP_SD_GetCardState+0x1c>)
 8013b0a:	f7fa fe5f 	bl	800e7cc <HAL_SD_GetCardState>
 8013b0e:	4603      	mov	r3, r0
 8013b10:	2b04      	cmp	r3, #4
 8013b12:	bf14      	ite	ne
 8013b14:	2301      	movne	r3, #1
 8013b16:	2300      	moveq	r3, #0
 8013b18:	b2db      	uxtb	r3, r3
}
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	bd80      	pop	{r7, pc}
 8013b1e:	bf00      	nop
 8013b20:	2404470c 	.word	0x2404470c

08013b24 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 8013b24:	b580      	push	{r7, lr}
 8013b26:	b082      	sub	sp, #8
 8013b28:	af00      	add	r7, sp, #0
 8013b2a:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 8013b2c:	6879      	ldr	r1, [r7, #4]
 8013b2e:	4803      	ldr	r0, [pc, #12]	; (8013b3c <BSP_SD_GetCardInfo+0x18>)
 8013b30:	f7fa fd76 	bl	800e620 <HAL_SD_GetCardInfo>
}
 8013b34:	bf00      	nop
 8013b36:	3708      	adds	r7, #8
 8013b38:	46bd      	mov	sp, r7
 8013b3a:	bd80      	pop	{r7, pc}
 8013b3c:	2404470c 	.word	0x2404470c

08013b40 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b082      	sub	sp, #8
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8013b48:	f000 f9a0 	bl	8013e8c <BSP_SD_WriteCpltCallback>
}
 8013b4c:	bf00      	nop
 8013b4e:	3708      	adds	r7, #8
 8013b50:	46bd      	mov	sp, r7
 8013b52:	bd80      	pop	{r7, pc}

08013b54 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8013b54:	b580      	push	{r7, lr}
 8013b56:	b082      	sub	sp, #8
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 8013b5c:	f000 f9a2 	bl	8013ea4 <BSP_SD_ReadCpltCallback>
}
 8013b60:	bf00      	nop
 8013b62:	3708      	adds	r7, #8
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b082      	sub	sp, #8
 8013b6c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 8013b6e:	2301      	movs	r3, #1
 8013b70:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8013b72:	f000 f80b 	bl	8013b8c <BSP_PlatformIsDetected>
 8013b76:	4603      	mov	r3, r0
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d101      	bne.n	8013b80 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8013b80:	79fb      	ldrb	r3, [r7, #7]
 8013b82:	b2db      	uxtb	r3, r3
}
 8013b84:	4618      	mov	r0, r3
 8013b86:	3708      	adds	r7, #8
 8013b88:	46bd      	mov	sp, r7
 8013b8a:	bd80      	pop	{r7, pc}

08013b8c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 8013b8c:	b580      	push	{r7, lr}
 8013b8e:	b082      	sub	sp, #8
 8013b90:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8013b92:	2301      	movs	r3, #1
 8013b94:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8013b96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8013b9a:	4806      	ldr	r0, [pc, #24]	; (8013bb4 <BSP_PlatformIsDetected+0x28>)
 8013b9c:	f7f4 fe3a 	bl	8008814 <HAL_GPIO_ReadPin>
 8013ba0:	4603      	mov	r3, r0
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d001      	beq.n	8013baa <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8013baa:	79fb      	ldrb	r3, [r7, #7]
}
 8013bac:	4618      	mov	r0, r3
 8013bae:	3708      	adds	r7, #8
 8013bb0:	46bd      	mov	sp, r7
 8013bb2:	bd80      	pop	{r7, pc}
 8013bb4:	58020000 	.word	0x58020000

08013bb8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 8013bb8:	b580      	push	{r7, lr}
 8013bba:	b084      	sub	sp, #16
 8013bbc:	af00      	add	r7, sp, #0
 8013bbe:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 8013bc0:	f7f1 f91a 	bl	8004df8 <HAL_GetTick>
 8013bc4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 8013bc6:	e006      	b.n	8013bd6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013bc8:	f7ff ff9c 	bl	8013b04 <BSP_SD_GetCardState>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d101      	bne.n	8013bd6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	e009      	b.n	8013bea <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 8013bd6:	f7f1 f90f 	bl	8004df8 <HAL_GetTick>
 8013bda:	4602      	mov	r2, r0
 8013bdc:	68fb      	ldr	r3, [r7, #12]
 8013bde:	1ad3      	subs	r3, r2, r3
 8013be0:	687a      	ldr	r2, [r7, #4]
 8013be2:	429a      	cmp	r2, r3
 8013be4:	d8f0      	bhi.n	8013bc8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 8013be6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013bea:	4618      	mov	r0, r3
 8013bec:	3710      	adds	r7, #16
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
	...

08013bf4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 8013bf4:	b580      	push	{r7, lr}
 8013bf6:	b082      	sub	sp, #8
 8013bf8:	af00      	add	r7, sp, #0
 8013bfa:	4603      	mov	r3, r0
 8013bfc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8013bfe:	4b0b      	ldr	r3, [pc, #44]	; (8013c2c <SD_CheckStatus+0x38>)
 8013c00:	2201      	movs	r2, #1
 8013c02:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 8013c04:	f7ff ff7e 	bl	8013b04 <BSP_SD_GetCardState>
 8013c08:	4603      	mov	r3, r0
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	d107      	bne.n	8013c1e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8013c0e:	4b07      	ldr	r3, [pc, #28]	; (8013c2c <SD_CheckStatus+0x38>)
 8013c10:	781b      	ldrb	r3, [r3, #0]
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	f023 0301 	bic.w	r3, r3, #1
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	4b04      	ldr	r3, [pc, #16]	; (8013c2c <SD_CheckStatus+0x38>)
 8013c1c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8013c1e:	4b03      	ldr	r3, [pc, #12]	; (8013c2c <SD_CheckStatus+0x38>)
 8013c20:	781b      	ldrb	r3, [r3, #0]
 8013c22:	b2db      	uxtb	r3, r3
}
 8013c24:	4618      	mov	r0, r3
 8013c26:	3708      	adds	r7, #8
 8013c28:	46bd      	mov	sp, r7
 8013c2a:	bd80      	pop	{r7, pc}
 8013c2c:	2400001d 	.word	0x2400001d

08013c30 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8013c30:	b580      	push	{r7, lr}
 8013c32:	b082      	sub	sp, #8
 8013c34:	af00      	add	r7, sp, #0
 8013c36:	4603      	mov	r3, r0
 8013c38:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8013c3a:	f7ff ff09 	bl	8013a50 <BSP_SD_Init>
 8013c3e:	4603      	mov	r3, r0
 8013c40:	2b00      	cmp	r3, #0
 8013c42:	d107      	bne.n	8013c54 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8013c44:	79fb      	ldrb	r3, [r7, #7]
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7ff ffd4 	bl	8013bf4 <SD_CheckStatus>
 8013c4c:	4603      	mov	r3, r0
 8013c4e:	461a      	mov	r2, r3
 8013c50:	4b04      	ldr	r3, [pc, #16]	; (8013c64 <SD_initialize+0x34>)
 8013c52:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8013c54:	4b03      	ldr	r3, [pc, #12]	; (8013c64 <SD_initialize+0x34>)
 8013c56:	781b      	ldrb	r3, [r3, #0]
 8013c58:	b2db      	uxtb	r3, r3
}
 8013c5a:	4618      	mov	r0, r3
 8013c5c:	3708      	adds	r7, #8
 8013c5e:	46bd      	mov	sp, r7
 8013c60:	bd80      	pop	{r7, pc}
 8013c62:	bf00      	nop
 8013c64:	2400001d 	.word	0x2400001d

08013c68 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8013c68:	b580      	push	{r7, lr}
 8013c6a:	b082      	sub	sp, #8
 8013c6c:	af00      	add	r7, sp, #0
 8013c6e:	4603      	mov	r3, r0
 8013c70:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8013c72:	79fb      	ldrb	r3, [r7, #7]
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7ff ffbd 	bl	8013bf4 <SD_CheckStatus>
 8013c7a:	4603      	mov	r3, r0
}
 8013c7c:	4618      	mov	r0, r3
 8013c7e:	3708      	adds	r7, #8
 8013c80:	46bd      	mov	sp, r7
 8013c82:	bd80      	pop	{r7, pc}

08013c84 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b086      	sub	sp, #24
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60b9      	str	r1, [r7, #8]
 8013c8c:	607a      	str	r2, [r7, #4]
 8013c8e:	603b      	str	r3, [r7, #0]
 8013c90:	4603      	mov	r3, r0
 8013c92:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013c94:	2301      	movs	r3, #1
 8013c96:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013c98:	f247 5030 	movw	r0, #30000	; 0x7530
 8013c9c:	f7ff ff8c 	bl	8013bb8 <SD_CheckStatusWithTimeout>
 8013ca0:	4603      	mov	r3, r0
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	da01      	bge.n	8013caa <SD_read+0x26>
  {
    return res;
 8013ca6:	7dfb      	ldrb	r3, [r7, #23]
 8013ca8:	e03b      	b.n	8013d22 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 8013caa:	683a      	ldr	r2, [r7, #0]
 8013cac:	6879      	ldr	r1, [r7, #4]
 8013cae:	68b8      	ldr	r0, [r7, #8]
 8013cb0:	f7ff fef4 	bl	8013a9c <BSP_SD_ReadBlocks_DMA>
 8013cb4:	4603      	mov	r3, r0
 8013cb6:	2b00      	cmp	r3, #0
 8013cb8:	d132      	bne.n	8013d20 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 8013cba:	4b1c      	ldr	r3, [pc, #112]	; (8013d2c <SD_read+0xa8>)
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 8013cc0:	f7f1 f89a 	bl	8004df8 <HAL_GetTick>
 8013cc4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013cc6:	bf00      	nop
 8013cc8:	4b18      	ldr	r3, [pc, #96]	; (8013d2c <SD_read+0xa8>)
 8013cca:	681b      	ldr	r3, [r3, #0]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d108      	bne.n	8013ce2 <SD_read+0x5e>
 8013cd0:	f7f1 f892 	bl	8004df8 <HAL_GetTick>
 8013cd4:	4602      	mov	r2, r0
 8013cd6:	693b      	ldr	r3, [r7, #16]
 8013cd8:	1ad3      	subs	r3, r2, r3
 8013cda:	f247 522f 	movw	r2, #29999	; 0x752f
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d9f2      	bls.n	8013cc8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 8013ce2:	4b12      	ldr	r3, [pc, #72]	; (8013d2c <SD_read+0xa8>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d102      	bne.n	8013cf0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 8013cea:	2301      	movs	r3, #1
 8013cec:	75fb      	strb	r3, [r7, #23]
 8013cee:	e017      	b.n	8013d20 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 8013cf0:	4b0e      	ldr	r3, [pc, #56]	; (8013d2c <SD_read+0xa8>)
 8013cf2:	2200      	movs	r2, #0
 8013cf4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013cf6:	f7f1 f87f 	bl	8004df8 <HAL_GetTick>
 8013cfa:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013cfc:	e007      	b.n	8013d0e <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013cfe:	f7ff ff01 	bl	8013b04 <BSP_SD_GetCardState>
 8013d02:	4603      	mov	r3, r0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	d102      	bne.n	8013d0e <SD_read+0x8a>
          {
            res = RES_OK;
 8013d08:	2300      	movs	r3, #0
 8013d0a:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 8013d0c:	e008      	b.n	8013d20 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013d0e:	f7f1 f873 	bl	8004df8 <HAL_GetTick>
 8013d12:	4602      	mov	r2, r0
 8013d14:	693b      	ldr	r3, [r7, #16]
 8013d16:	1ad3      	subs	r3, r2, r3
 8013d18:	f247 522f 	movw	r2, #29999	; 0x752f
 8013d1c:	4293      	cmp	r3, r2
 8013d1e:	d9ee      	bls.n	8013cfe <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8013d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8013d22:	4618      	mov	r0, r3
 8013d24:	3718      	adds	r7, #24
 8013d26:	46bd      	mov	sp, r7
 8013d28:	bd80      	pop	{r7, pc}
 8013d2a:	bf00      	nop
 8013d2c:	240404c8 	.word	0x240404c8

08013d30 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8013d30:	b580      	push	{r7, lr}
 8013d32:	b086      	sub	sp, #24
 8013d34:	af00      	add	r7, sp, #0
 8013d36:	60b9      	str	r1, [r7, #8]
 8013d38:	607a      	str	r2, [r7, #4]
 8013d3a:	603b      	str	r3, [r7, #0]
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8013d40:	2301      	movs	r3, #1
 8013d42:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8013d44:	4b24      	ldr	r3, [pc, #144]	; (8013dd8 <SD_write+0xa8>)
 8013d46:	2200      	movs	r2, #0
 8013d48:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8013d4a:	f247 5030 	movw	r0, #30000	; 0x7530
 8013d4e:	f7ff ff33 	bl	8013bb8 <SD_CheckStatusWithTimeout>
 8013d52:	4603      	mov	r3, r0
 8013d54:	2b00      	cmp	r3, #0
 8013d56:	da01      	bge.n	8013d5c <SD_write+0x2c>
  {
    return res;
 8013d58:	7dfb      	ldrb	r3, [r7, #23]
 8013d5a:	e038      	b.n	8013dce <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 8013d5c:	683a      	ldr	r2, [r7, #0]
 8013d5e:	6879      	ldr	r1, [r7, #4]
 8013d60:	68b8      	ldr	r0, [r7, #8]
 8013d62:	f7ff feb5 	bl	8013ad0 <BSP_SD_WriteBlocks_DMA>
 8013d66:	4603      	mov	r3, r0
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d12f      	bne.n	8013dcc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 8013d6c:	f7f1 f844 	bl	8004df8 <HAL_GetTick>
 8013d70:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8013d72:	bf00      	nop
 8013d74:	4b18      	ldr	r3, [pc, #96]	; (8013dd8 <SD_write+0xa8>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d108      	bne.n	8013d8e <SD_write+0x5e>
 8013d7c:	f7f1 f83c 	bl	8004df8 <HAL_GetTick>
 8013d80:	4602      	mov	r2, r0
 8013d82:	693b      	ldr	r3, [r7, #16]
 8013d84:	1ad3      	subs	r3, r2, r3
 8013d86:	f247 522f 	movw	r2, #29999	; 0x752f
 8013d8a:	4293      	cmp	r3, r2
 8013d8c:	d9f2      	bls.n	8013d74 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 8013d8e:	4b12      	ldr	r3, [pc, #72]	; (8013dd8 <SD_write+0xa8>)
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d102      	bne.n	8013d9c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8013d96:	2301      	movs	r3, #1
 8013d98:	75fb      	strb	r3, [r7, #23]
 8013d9a:	e017      	b.n	8013dcc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 8013d9c:	4b0e      	ldr	r3, [pc, #56]	; (8013dd8 <SD_write+0xa8>)
 8013d9e:	2200      	movs	r2, #0
 8013da0:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8013da2:	f7f1 f829 	bl	8004df8 <HAL_GetTick>
 8013da6:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013da8:	e007      	b.n	8013dba <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 8013daa:	f7ff feab 	bl	8013b04 <BSP_SD_GetCardState>
 8013dae:	4603      	mov	r3, r0
 8013db0:	2b00      	cmp	r3, #0
 8013db2:	d102      	bne.n	8013dba <SD_write+0x8a>
          {
            res = RES_OK;
 8013db4:	2300      	movs	r3, #0
 8013db6:	75fb      	strb	r3, [r7, #23]
            break;
 8013db8:	e008      	b.n	8013dcc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8013dba:	f7f1 f81d 	bl	8004df8 <HAL_GetTick>
 8013dbe:	4602      	mov	r2, r0
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	1ad3      	subs	r3, r2, r3
 8013dc4:	f247 522f 	movw	r2, #29999	; 0x752f
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	d9ee      	bls.n	8013daa <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 8013dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3718      	adds	r7, #24
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bd80      	pop	{r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	240404c4 	.word	0x240404c4

08013ddc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b08c      	sub	sp, #48	; 0x30
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	4603      	mov	r3, r0
 8013de4:	603a      	str	r2, [r7, #0]
 8013de6:	71fb      	strb	r3, [r7, #7]
 8013de8:	460b      	mov	r3, r1
 8013dea:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8013dec:	2301      	movs	r3, #1
 8013dee:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8013df2:	4b25      	ldr	r3, [pc, #148]	; (8013e88 <SD_ioctl+0xac>)
 8013df4:	781b      	ldrb	r3, [r3, #0]
 8013df6:	b2db      	uxtb	r3, r3
 8013df8:	f003 0301 	and.w	r3, r3, #1
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	d001      	beq.n	8013e04 <SD_ioctl+0x28>
 8013e00:	2303      	movs	r3, #3
 8013e02:	e03c      	b.n	8013e7e <SD_ioctl+0xa2>

  switch (cmd)
 8013e04:	79bb      	ldrb	r3, [r7, #6]
 8013e06:	2b03      	cmp	r3, #3
 8013e08:	d834      	bhi.n	8013e74 <SD_ioctl+0x98>
 8013e0a:	a201      	add	r2, pc, #4	; (adr r2, 8013e10 <SD_ioctl+0x34>)
 8013e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e10:	08013e21 	.word	0x08013e21
 8013e14:	08013e29 	.word	0x08013e29
 8013e18:	08013e41 	.word	0x08013e41
 8013e1c:	08013e5b 	.word	0x08013e5b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8013e20:	2300      	movs	r3, #0
 8013e22:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e26:	e028      	b.n	8013e7a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8013e28:	f107 0308 	add.w	r3, r7, #8
 8013e2c:	4618      	mov	r0, r3
 8013e2e:	f7ff fe79 	bl	8013b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8013e32:	6a3a      	ldr	r2, [r7, #32]
 8013e34:	683b      	ldr	r3, [r7, #0]
 8013e36:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013e38:	2300      	movs	r3, #0
 8013e3a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e3e:	e01c      	b.n	8013e7a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013e40:	f107 0308 	add.w	r3, r7, #8
 8013e44:	4618      	mov	r0, r3
 8013e46:	f7ff fe6d 	bl	8013b24 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8013e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4c:	b29a      	uxth	r2, r3
 8013e4e:	683b      	ldr	r3, [r7, #0]
 8013e50:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8013e52:	2300      	movs	r3, #0
 8013e54:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e58:	e00f      	b.n	8013e7a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8013e5a:	f107 0308 	add.w	r3, r7, #8
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7ff fe60 	bl	8013b24 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8013e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e66:	0a5a      	lsrs	r2, r3, #9
 8013e68:	683b      	ldr	r3, [r7, #0]
 8013e6a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8013e6c:	2300      	movs	r3, #0
 8013e6e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8013e72:	e002      	b.n	8013e7a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8013e74:	2304      	movs	r3, #4
 8013e76:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 8013e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3730      	adds	r7, #48	; 0x30
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	2400001d 	.word	0x2400001d

08013e8c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 8013e8c:	b480      	push	{r7}
 8013e8e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8013e90:	4b03      	ldr	r3, [pc, #12]	; (8013ea0 <BSP_SD_WriteCpltCallback+0x14>)
 8013e92:	2201      	movs	r2, #1
 8013e94:	601a      	str	r2, [r3, #0]
}
 8013e96:	bf00      	nop
 8013e98:	46bd      	mov	sp, r7
 8013e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e9e:	4770      	bx	lr
 8013ea0:	240404c4 	.word	0x240404c4

08013ea4 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8013ea4:	b480      	push	{r7}
 8013ea6:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8013ea8:	4b03      	ldr	r3, [pc, #12]	; (8013eb8 <BSP_SD_ReadCpltCallback+0x14>)
 8013eaa:	2201      	movs	r2, #1
 8013eac:	601a      	str	r2, [r3, #0]
}
 8013eae:	bf00      	nop
 8013eb0:	46bd      	mov	sp, r7
 8013eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013eb6:	4770      	bx	lr
 8013eb8:	240404c8 	.word	0x240404c8

08013ebc <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013ebc:	b580      	push	{r7, lr}
 8013ebe:	b084      	sub	sp, #16
 8013ec0:	af00      	add	r7, sp, #0
 8013ec2:	6078      	str	r0, [r7, #4]
 8013ec4:	460b      	mov	r3, r1
 8013ec6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_MSC_BOT_HandleTypeDef *hmsc;

  hmsc = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8013ec8:	f248 0074 	movw	r0, #32884	; 0x8074
 8013ecc:	f006 fcc4 	bl	801a858 <malloc>
 8013ed0:	4603      	mov	r3, r0
 8013ed2:	60fb      	str	r3, [r7, #12]

  if (hmsc == NULL)
 8013ed4:	68fb      	ldr	r3, [r7, #12]
 8013ed6:	2b00      	cmp	r3, #0
 8013ed8:	d105      	bne.n	8013ee6 <USBD_MSC_Init+0x2a>
  {
    pdev->pClassData = NULL;
 8013eda:	687b      	ldr	r3, [r7, #4]
 8013edc:	2200      	movs	r2, #0
 8013ede:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8013ee2:	2302      	movs	r3, #2
 8013ee4:	e034      	b.n	8013f50 <USBD_MSC_Init+0x94>
  }

  pdev->pClassData = (void *)hmsc;
 8013ee6:	687b      	ldr	r3, [r7, #4]
 8013ee8:	68fa      	ldr	r2, [r7, #12]
 8013eea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013eee:	687b      	ldr	r3, [r7, #4]
 8013ef0:	7c1b      	ldrb	r3, [r3, #16]
 8013ef2:	2b00      	cmp	r3, #0
 8013ef4:	d115      	bne.n	8013f22 <USBD_MSC_Init+0x66>
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013ef6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013efa:	2202      	movs	r2, #2
 8013efc:	2101      	movs	r1, #1
 8013efe:	6878      	ldr	r0, [r7, #4]
 8013f00:	f005 fd1d 	bl	801993e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	2201      	movs	r2, #1
 8013f08:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8013f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f10:	2202      	movs	r2, #2
 8013f12:	2181      	movs	r1, #129	; 0x81
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f005 fd12 	bl	801993e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	2201      	movs	r2, #1
 8013f1e:	871a      	strh	r2, [r3, #56]	; 0x38
 8013f20:	e012      	b.n	8013f48 <USBD_MSC_Init+0x8c>
  }
  else
  {
    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013f22:	2340      	movs	r3, #64	; 0x40
 8013f24:	2202      	movs	r2, #2
 8013f26:	2101      	movs	r1, #1
 8013f28:	6878      	ldr	r0, [r7, #4]
 8013f2a:	f005 fd08 	bl	801993e <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2201      	movs	r2, #1
 8013f32:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8013f36:	2340      	movs	r3, #64	; 0x40
 8013f38:	2202      	movs	r2, #2
 8013f3a:	2181      	movs	r1, #129	; 0x81
 8013f3c:	6878      	ldr	r0, [r7, #4]
 8013f3e:	f005 fcfe 	bl	801993e <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	2201      	movs	r2, #1
 8013f46:	871a      	strh	r2, [r3, #56]	; 0x38
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8013f48:	6878      	ldr	r0, [r7, #4]
 8013f4a:	f000 f98e 	bl	801426a <MSC_BOT_Init>

  return (uint8_t)USBD_OK;
 8013f4e:	2300      	movs	r3, #0
}
 8013f50:	4618      	mov	r0, r3
 8013f52:	3710      	adds	r7, #16
 8013f54:	46bd      	mov	sp, r7
 8013f56:	bd80      	pop	{r7, pc}

08013f58 <USBD_MSC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8013f58:	b580      	push	{r7, lr}
 8013f5a:	b082      	sub	sp, #8
 8013f5c:	af00      	add	r7, sp, #0
 8013f5e:	6078      	str	r0, [r7, #4]
 8013f60:	460b      	mov	r3, r1
 8013f62:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close MSC EPs */
  (void)USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8013f64:	2101      	movs	r1, #1
 8013f66:	6878      	ldr	r0, [r7, #4]
 8013f68:	f005 fd0f 	bl	801998a <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	2200      	movs	r2, #0
 8013f70:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8013f74:	2181      	movs	r1, #129	; 0x81
 8013f76:	6878      	ldr	r0, [r7, #4]
 8013f78:	f005 fd07 	bl	801998a <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8013f7c:	687b      	ldr	r3, [r7, #4]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	871a      	strh	r2, [r3, #56]	; 0x38

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8013f82:	6878      	ldr	r0, [r7, #4]
 8013f84:	f000 f9cf 	bl	8014326 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8013f88:	687b      	ldr	r3, [r7, #4]
 8013f8a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d009      	beq.n	8013fa6 <USBD_MSC_DeInit+0x4e>
  {
    (void)USBD_free(pdev->pClassData);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f006 fc65 	bl	801a868 <free>
    pdev->pClassData = NULL;
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	2200      	movs	r2, #0
 8013fa2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8013fa6:	2300      	movs	r3, #0
}
 8013fa8:	4618      	mov	r0, r3
 8013faa:	3708      	adds	r7, #8
 8013fac:	46bd      	mov	sp, r7
 8013fae:	bd80      	pop	{r7, pc}

08013fb0 <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8013fb0:	b580      	push	{r7, lr}
 8013fb2:	b086      	sub	sp, #24
 8013fb4:	af00      	add	r7, sp, #0
 8013fb6:	6078      	str	r0, [r7, #4]
 8013fb8:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8013fc0:	613b      	str	r3, [r7, #16]
  USBD_StatusTypeDef ret = USBD_OK;
 8013fc2:	2300      	movs	r3, #0
 8013fc4:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8013fc6:	2300      	movs	r3, #0
 8013fc8:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013fca:	683b      	ldr	r3, [r7, #0]
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8013fd2:	2b00      	cmp	r3, #0
 8013fd4:	d04d      	beq.n	8014072 <USBD_MSC_Setup+0xc2>
 8013fd6:	2b20      	cmp	r3, #32
 8013fd8:	f040 80c6 	bne.w	8014168 <USBD_MSC_Setup+0x1b8>
  {
    /* Class request */
  case USB_REQ_TYPE_CLASS:
    switch (req->bRequest)
 8013fdc:	683b      	ldr	r3, [r7, #0]
 8013fde:	785b      	ldrb	r3, [r3, #1]
 8013fe0:	2bfe      	cmp	r3, #254	; 0xfe
 8013fe2:	d002      	beq.n	8013fea <USBD_MSC_Setup+0x3a>
 8013fe4:	2bff      	cmp	r3, #255	; 0xff
 8013fe6:	d024      	beq.n	8014032 <USBD_MSC_Setup+0x82>
 8013fe8:	e03b      	b.n	8014062 <USBD_MSC_Setup+0xb2>
    {
    case BOT_GET_MAX_LUN:
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8013fea:	683b      	ldr	r3, [r7, #0]
 8013fec:	885b      	ldrh	r3, [r3, #2]
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d118      	bne.n	8014024 <USBD_MSC_Setup+0x74>
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	88db      	ldrh	r3, [r3, #6]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d114      	bne.n	8014024 <USBD_MSC_Setup+0x74>
          ((req->bmRequest & 0x80U) == 0x80U))
 8013ffa:	683b      	ldr	r3, [r7, #0]
 8013ffc:	781b      	ldrb	r3, [r3, #0]
 8013ffe:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8014000:	2b00      	cmp	r3, #0
 8014002:	da0f      	bge.n	8014024 <USBD_MSC_Setup+0x74>
      {
        hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8014004:	687b      	ldr	r3, [r7, #4]
 8014006:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801400a:	699b      	ldr	r3, [r3, #24]
 801400c:	4798      	blx	r3
 801400e:	4603      	mov	r3, r0
 8014010:	461a      	mov	r2, r3
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	601a      	str	r2, [r3, #0]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->max_lun, 1U);
 8014016:	693b      	ldr	r3, [r7, #16]
 8014018:	2201      	movs	r2, #1
 801401a:	4619      	mov	r1, r3
 801401c:	6878      	ldr	r0, [r7, #4]
 801401e:	f002 fdaa 	bl	8016b76 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014022:	e025      	b.n	8014070 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8014024:	6839      	ldr	r1, [r7, #0]
 8014026:	6878      	ldr	r0, [r7, #4]
 8014028:	f002 fd34 	bl	8016a94 <USBD_CtlError>
        ret = USBD_FAIL;
 801402c:	2303      	movs	r3, #3
 801402e:	75fb      	strb	r3, [r7, #23]
      break;
 8014030:	e01e      	b.n	8014070 <USBD_MSC_Setup+0xc0>

    case BOT_RESET :
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014032:	683b      	ldr	r3, [r7, #0]
 8014034:	885b      	ldrh	r3, [r3, #2]
 8014036:	2b00      	cmp	r3, #0
 8014038:	d10c      	bne.n	8014054 <USBD_MSC_Setup+0xa4>
 801403a:	683b      	ldr	r3, [r7, #0]
 801403c:	88db      	ldrh	r3, [r3, #6]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d108      	bne.n	8014054 <USBD_MSC_Setup+0xa4>
          ((req->bmRequest & 0x80U) != 0x80U))
 8014042:	683b      	ldr	r3, [r7, #0]
 8014044:	781b      	ldrb	r3, [r3, #0]
 8014046:	b25b      	sxtb	r3, r3
      if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8014048:	2b00      	cmp	r3, #0
 801404a:	db03      	blt.n	8014054 <USBD_MSC_Setup+0xa4>
      {
        MSC_BOT_Reset(pdev);
 801404c:	6878      	ldr	r0, [r7, #4]
 801404e:	f000 f947 	bl	80142e0 <MSC_BOT_Reset>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014052:	e00d      	b.n	8014070 <USBD_MSC_Setup+0xc0>
        USBD_CtlError(pdev, req);
 8014054:	6839      	ldr	r1, [r7, #0]
 8014056:	6878      	ldr	r0, [r7, #4]
 8014058:	f002 fd1c 	bl	8016a94 <USBD_CtlError>
        ret = USBD_FAIL;
 801405c:	2303      	movs	r3, #3
 801405e:	75fb      	strb	r3, [r7, #23]
      break;
 8014060:	e006      	b.n	8014070 <USBD_MSC_Setup+0xc0>

    default:
      USBD_CtlError(pdev, req);
 8014062:	6839      	ldr	r1, [r7, #0]
 8014064:	6878      	ldr	r0, [r7, #4]
 8014066:	f002 fd15 	bl	8016a94 <USBD_CtlError>
      ret = USBD_FAIL;
 801406a:	2303      	movs	r3, #3
 801406c:	75fb      	strb	r3, [r7, #23]
      break;
 801406e:	bf00      	nop
    }
    break;
 8014070:	e081      	b.n	8014176 <USBD_MSC_Setup+0x1c6>
    /* Interface & Endpoint request */
  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 8014072:	683b      	ldr	r3, [r7, #0]
 8014074:	785b      	ldrb	r3, [r3, #1]
 8014076:	2b0b      	cmp	r3, #11
 8014078:	d86d      	bhi.n	8014156 <USBD_MSC_Setup+0x1a6>
 801407a:	a201      	add	r2, pc, #4	; (adr r2, 8014080 <USBD_MSC_Setup+0xd0>)
 801407c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014080:	080140b1 	.word	0x080140b1
 8014084:	08014127 	.word	0x08014127
 8014088:	08014157 	.word	0x08014157
 801408c:	08014157 	.word	0x08014157
 8014090:	08014157 	.word	0x08014157
 8014094:	08014157 	.word	0x08014157
 8014098:	08014157 	.word	0x08014157
 801409c:	08014157 	.word	0x08014157
 80140a0:	08014157 	.word	0x08014157
 80140a4:	08014157 	.word	0x08014157
 80140a8:	080140d9 	.word	0x080140d9
 80140ac:	08014101 	.word	0x08014101
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140b6:	2b03      	cmp	r3, #3
 80140b8:	d107      	bne.n	80140ca <USBD_MSC_Setup+0x11a>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80140ba:	f107 030e 	add.w	r3, r7, #14
 80140be:	2202      	movs	r2, #2
 80140c0:	4619      	mov	r1, r3
 80140c2:	6878      	ldr	r0, [r7, #4]
 80140c4:	f002 fd57 	bl	8016b76 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80140c8:	e04d      	b.n	8014166 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80140ca:	6839      	ldr	r1, [r7, #0]
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f002 fce1 	bl	8016a94 <USBD_CtlError>
        ret = USBD_FAIL;
 80140d2:	2303      	movs	r3, #3
 80140d4:	75fb      	strb	r3, [r7, #23]
      break;
 80140d6:	e046      	b.n	8014166 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80140de:	2b03      	cmp	r3, #3
 80140e0:	d107      	bne.n	80140f2 <USBD_MSC_Setup+0x142>
      {
        (void)USBD_CtlSendData(pdev, (uint8_t *)&hmsc->interface, 1U);
 80140e2:	693b      	ldr	r3, [r7, #16]
 80140e4:	3304      	adds	r3, #4
 80140e6:	2201      	movs	r2, #1
 80140e8:	4619      	mov	r1, r3
 80140ea:	6878      	ldr	r0, [r7, #4]
 80140ec:	f002 fd43 	bl	8016b76 <USBD_CtlSendData>
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 80140f0:	e039      	b.n	8014166 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 80140f2:	6839      	ldr	r1, [r7, #0]
 80140f4:	6878      	ldr	r0, [r7, #4]
 80140f6:	f002 fccd 	bl	8016a94 <USBD_CtlError>
        ret = USBD_FAIL;
 80140fa:	2303      	movs	r3, #3
 80140fc:	75fb      	strb	r3, [r7, #23]
      break;
 80140fe:	e032      	b.n	8014166 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8014106:	2b03      	cmp	r3, #3
 8014108:	d106      	bne.n	8014118 <USBD_MSC_Setup+0x168>
      {
        hmsc->interface = (uint8_t)(req->wValue);
 801410a:	683b      	ldr	r3, [r7, #0]
 801410c:	885b      	ldrh	r3, [r3, #2]
 801410e:	b2db      	uxtb	r3, r3
 8014110:	461a      	mov	r2, r3
 8014112:	693b      	ldr	r3, [r7, #16]
 8014114:	605a      	str	r2, [r3, #4]
      else
      {
        USBD_CtlError(pdev, req);
        ret = USBD_FAIL;
      }
      break;
 8014116:	e026      	b.n	8014166 <USBD_MSC_Setup+0x1b6>
        USBD_CtlError(pdev, req);
 8014118:	6839      	ldr	r1, [r7, #0]
 801411a:	6878      	ldr	r0, [r7, #4]
 801411c:	f002 fcba 	bl	8016a94 <USBD_CtlError>
        ret = USBD_FAIL;
 8014120:	2303      	movs	r3, #3
 8014122:	75fb      	strb	r3, [r7, #23]
      break;
 8014124:	e01f      	b.n	8014166 <USBD_MSC_Setup+0x1b6>

    case USB_REQ_CLEAR_FEATURE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801412c:	2b03      	cmp	r3, #3
 801412e:	d119      	bne.n	8014164 <USBD_MSC_Setup+0x1b4>
      {
        if (req->wValue == USB_FEATURE_EP_HALT)
 8014130:	683b      	ldr	r3, [r7, #0]
 8014132:	885b      	ldrh	r3, [r3, #2]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d115      	bne.n	8014164 <USBD_MSC_Setup+0x1b4>
        {
          /* Flush the FIFO */
          (void)USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8014138:	683b      	ldr	r3, [r7, #0]
 801413a:	889b      	ldrh	r3, [r3, #4]
 801413c:	b2db      	uxtb	r3, r3
 801413e:	4619      	mov	r1, r3
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f005 fc41 	bl	80199c8 <USBD_LL_FlushEP>

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8014146:	683b      	ldr	r3, [r7, #0]
 8014148:	889b      	ldrh	r3, [r3, #4]
 801414a:	b2db      	uxtb	r3, r3
 801414c:	4619      	mov	r1, r3
 801414e:	6878      	ldr	r0, [r7, #4]
 8014150:	f000 fa90 	bl	8014674 <MSC_BOT_CplClrFeature>
        }
      }
      break;
 8014154:	e006      	b.n	8014164 <USBD_MSC_Setup+0x1b4>

    default:
      USBD_CtlError(pdev, req);
 8014156:	6839      	ldr	r1, [r7, #0]
 8014158:	6878      	ldr	r0, [r7, #4]
 801415a:	f002 fc9b 	bl	8016a94 <USBD_CtlError>
      ret = USBD_FAIL;
 801415e:	2303      	movs	r3, #3
 8014160:	75fb      	strb	r3, [r7, #23]
      break;
 8014162:	e000      	b.n	8014166 <USBD_MSC_Setup+0x1b6>
      break;
 8014164:	bf00      	nop
    }
    break;
 8014166:	e006      	b.n	8014176 <USBD_MSC_Setup+0x1c6>

  default:
    USBD_CtlError(pdev, req);
 8014168:	6839      	ldr	r1, [r7, #0]
 801416a:	6878      	ldr	r0, [r7, #4]
 801416c:	f002 fc92 	bl	8016a94 <USBD_CtlError>
    ret = USBD_FAIL;
 8014170:	2303      	movs	r3, #3
 8014172:	75fb      	strb	r3, [r7, #23]
    break;
 8014174:	bf00      	nop
  }

  return (uint8_t)ret;
 8014176:	7dfb      	ldrb	r3, [r7, #23]
}
 8014178:	4618      	mov	r0, r3
 801417a:	3718      	adds	r7, #24
 801417c:	46bd      	mov	sp, r7
 801417e:	bd80      	pop	{r7, pc}

08014180 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b082      	sub	sp, #8
 8014184:	af00      	add	r7, sp, #0
 8014186:	6078      	str	r0, [r7, #4]
 8014188:	460b      	mov	r3, r1
 801418a:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 801418c:	78fb      	ldrb	r3, [r7, #3]
 801418e:	4619      	mov	r1, r3
 8014190:	6878      	ldr	r0, [r7, #4]
 8014192:	f000 f8d9 	bl	8014348 <MSC_BOT_DataIn>

  return (uint8_t)USBD_OK;
 8014196:	2300      	movs	r3, #0
}
 8014198:	4618      	mov	r0, r3
 801419a:	3708      	adds	r7, #8
 801419c:	46bd      	mov	sp, r7
 801419e:	bd80      	pop	{r7, pc}

080141a0 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b082      	sub	sp, #8
 80141a4:	af00      	add	r7, sp, #0
 80141a6:	6078      	str	r0, [r7, #4]
 80141a8:	460b      	mov	r3, r1
 80141aa:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 80141ac:	78fb      	ldrb	r3, [r7, #3]
 80141ae:	4619      	mov	r1, r3
 80141b0:	6878      	ldr	r0, [r7, #4]
 80141b2:	f000 f8fd 	bl	80143b0 <MSC_BOT_DataOut>

  return (uint8_t)USBD_OK;
 80141b6:	2300      	movs	r3, #0
}
 80141b8:	4618      	mov	r0, r3
 80141ba:	3708      	adds	r7, #8
 80141bc:	46bd      	mov	sp, r7
 80141be:	bd80      	pop	{r7, pc}

080141c0 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 80141c0:	b480      	push	{r7}
 80141c2:	b083      	sub	sp, #12
 80141c4:	af00      	add	r7, sp, #0
 80141c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgHSDesc);
 80141c8:	687b      	ldr	r3, [r7, #4]
 80141ca:	2220      	movs	r2, #32
 80141cc:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 80141ce:	4b03      	ldr	r3, [pc, #12]	; (80141dc <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 80141d0:	4618      	mov	r0, r3
 80141d2:	370c      	adds	r7, #12
 80141d4:	46bd      	mov	sp, r7
 80141d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141da:	4770      	bx	lr
 80141dc:	24000058 	.word	0x24000058

080141e0 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 80141e0:	b480      	push	{r7}
 80141e2:	b083      	sub	sp, #12
 80141e4:	af00      	add	r7, sp, #0
 80141e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_CfgFSDesc);
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	2220      	movs	r2, #32
 80141ec:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 80141ee:	4b03      	ldr	r3, [pc, #12]	; (80141fc <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 80141f0:	4618      	mov	r0, r3
 80141f2:	370c      	adds	r7, #12
 80141f4:	46bd      	mov	sp, r7
 80141f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141fa:	4770      	bx	lr
 80141fc:	24000078 	.word	0x24000078

08014200 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8014200:	b480      	push	{r7}
 8014202:	b083      	sub	sp, #12
 8014204:	af00      	add	r7, sp, #0
 8014206:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	2220      	movs	r2, #32
 801420c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 801420e:	4b03      	ldr	r3, [pc, #12]	; (801421c <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8014210:	4618      	mov	r0, r3
 8014212:	370c      	adds	r7, #12
 8014214:	46bd      	mov	sp, r7
 8014216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801421a:	4770      	bx	lr
 801421c:	24000098 	.word	0x24000098

08014220 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8014220:	b480      	push	{r7}
 8014222:	b083      	sub	sp, #12
 8014224:	af00      	add	r7, sp, #0
 8014226:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_MSC_DeviceQualifierDesc);
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	220a      	movs	r2, #10
 801422c:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 801422e:	4b03      	ldr	r3, [pc, #12]	; (801423c <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8014230:	4618      	mov	r0, r3
 8014232:	370c      	adds	r7, #12
 8014234:	46bd      	mov	sp, r7
 8014236:	f85d 7b04 	ldr.w	r7, [sp], #4
 801423a:	4770      	bx	lr
 801423c:	240000b8 	.word	0x240000b8

08014240 <USBD_MSC_RegisterStorage>:
* @brief  USBD_MSC_RegisterStorage
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev, USBD_StorageTypeDef *fops)
{
 8014240:	b480      	push	{r7}
 8014242:	b083      	sub	sp, #12
 8014244:	af00      	add	r7, sp, #0
 8014246:	6078      	str	r0, [r7, #4]
 8014248:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801424a:	683b      	ldr	r3, [r7, #0]
 801424c:	2b00      	cmp	r3, #0
 801424e:	d101      	bne.n	8014254 <USBD_MSC_RegisterStorage+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8014250:	2303      	movs	r3, #3
 8014252:	e004      	b.n	801425e <USBD_MSC_RegisterStorage+0x1e>
  }

  pdev->pUserData = fops;
 8014254:	687b      	ldr	r3, [r7, #4]
 8014256:	683a      	ldr	r2, [r7, #0]
 8014258:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 801425c:	2300      	movs	r3, #0
}
 801425e:	4618      	mov	r0, r3
 8014260:	370c      	adds	r7, #12
 8014262:	46bd      	mov	sp, r7
 8014264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014268:	4770      	bx	lr

0801426a <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef *pdev)
{
 801426a:	b580      	push	{r7, lr}
 801426c:	b084      	sub	sp, #16
 801426e:	af00      	add	r7, sp, #0
 8014270:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014272:	687b      	ldr	r3, [r7, #4]
 8014274:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014278:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 801427a:	68fb      	ldr	r3, [r7, #12]
 801427c:	2200      	movs	r2, #0
 801427e:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8014280:	68fb      	ldr	r3, [r7, #12]
 8014282:	2200      	movs	r2, #0
 8014284:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 8014286:	68fa      	ldr	r2, [r7, #12]
 8014288:	f248 0361 	movw	r3, #32865	; 0x8061
 801428c:	4413      	add	r3, r2
 801428e:	2200      	movs	r2, #0
 8014290:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_sense_head = 0U;
 8014292:	68fa      	ldr	r2, [r7, #12]
 8014294:	f248 0360 	movw	r3, #32864	; 0x8060
 8014298:	4413      	add	r3, r2
 801429a:	2200      	movs	r2, #0
 801429c:	701a      	strb	r2, [r3, #0]
  hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801429e:	68fa      	ldr	r2, [r7, #12]
 80142a0:	f248 0362 	movw	r3, #32866	; 0x8062
 80142a4:	4413      	add	r3, r2
 80142a6:	2200      	movs	r2, #0
 80142a8:	701a      	strb	r2, [r3, #0]

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80142b0:	681b      	ldr	r3, [r3, #0]
 80142b2:	2000      	movs	r0, #0
 80142b4:	4798      	blx	r3

  (void)USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80142b6:	2101      	movs	r1, #1
 80142b8:	6878      	ldr	r0, [r7, #4]
 80142ba:	f005 fb85 	bl	80199c8 <USBD_LL_FlushEP>
  (void)USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80142be:	2181      	movs	r1, #129	; 0x81
 80142c0:	6878      	ldr	r0, [r7, #4]
 80142c2:	f005 fb81 	bl	80199c8 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80142c6:	68fb      	ldr	r3, [r7, #12]
 80142c8:	f248 0210 	movw	r2, #32784	; 0x8010
 80142cc:	441a      	add	r2, r3
 80142ce:	231f      	movs	r3, #31
 80142d0:	2101      	movs	r1, #1
 80142d2:	6878      	ldr	r0, [r7, #4]
 80142d4:	f005 fc41 	bl	8019b5a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 80142d8:	bf00      	nop
 80142da:	3710      	adds	r7, #16
 80142dc:	46bd      	mov	sp, r7
 80142de:	bd80      	pop	{r7, pc}

080142e0 <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef *pdev)
{
 80142e0:	b580      	push	{r7, lr}
 80142e2:	b084      	sub	sp, #16
 80142e4:	af00      	add	r7, sp, #0
 80142e6:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80142e8:	687b      	ldr	r3, [r7, #4]
 80142ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80142ee:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 80142f0:	68fb      	ldr	r3, [r7, #12]
 80142f2:	2200      	movs	r2, #0
 80142f4:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 80142f6:	68fb      	ldr	r3, [r7, #12]
 80142f8:	2201      	movs	r2, #1
 80142fa:	725a      	strb	r2, [r3, #9]

  (void)USBD_LL_ClearStallEP(pdev, MSC_EPIN_ADDR);
 80142fc:	2181      	movs	r1, #129	; 0x81
 80142fe:	6878      	ldr	r0, [r7, #4]
 8014300:	f005 fba0 	bl	8019a44 <USBD_LL_ClearStallEP>
  (void)USBD_LL_ClearStallEP(pdev, MSC_EPOUT_ADDR);
 8014304:	2101      	movs	r1, #1
 8014306:	6878      	ldr	r0, [r7, #4]
 8014308:	f005 fb9c 	bl	8019a44 <USBD_LL_ClearStallEP>

  /* Prapare EP to Receive First BOT Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	f248 0210 	movw	r2, #32784	; 0x8010
 8014312:	441a      	add	r2, r3
 8014314:	231f      	movs	r3, #31
 8014316:	2101      	movs	r1, #1
 8014318:	6878      	ldr	r0, [r7, #4]
 801431a:	f005 fc1e 	bl	8019b5a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 801431e:	bf00      	nop
 8014320:	3710      	adds	r7, #16
 8014322:	46bd      	mov	sp, r7
 8014324:	bd80      	pop	{r7, pc}

08014326 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8014326:	b480      	push	{r7}
 8014328:	b085      	sub	sp, #20
 801432a:	af00      	add	r7, sp, #0
 801432c:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801432e:	687b      	ldr	r3, [r7, #4]
 8014330:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014334:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8014336:	68fb      	ldr	r3, [r7, #12]
 8014338:	2200      	movs	r2, #0
 801433a:	721a      	strb	r2, [r3, #8]
}
 801433c:	bf00      	nop
 801433e:	3714      	adds	r7, #20
 8014340:	46bd      	mov	sp, r7
 8014342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014346:	4770      	bx	lr

08014348 <MSC_BOT_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014348:	b580      	push	{r7, lr}
 801434a:	b084      	sub	sp, #16
 801434c:	af00      	add	r7, sp, #0
 801434e:	6078      	str	r0, [r7, #4]
 8014350:	460b      	mov	r3, r1
 8014352:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801435a:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 801435c:	68fb      	ldr	r3, [r7, #12]
 801435e:	7a1b      	ldrb	r3, [r3, #8]
 8014360:	2b02      	cmp	r3, #2
 8014362:	d004      	beq.n	801436e <MSC_BOT_DataIn+0x26>
 8014364:	2b02      	cmp	r3, #2
 8014366:	db1c      	blt.n	80143a2 <MSC_BOT_DataIn+0x5a>
 8014368:	2b04      	cmp	r3, #4
 801436a:	dc1a      	bgt.n	80143a2 <MSC_BOT_DataIn+0x5a>
 801436c:	e014      	b.n	8014398 <MSC_BOT_DataIn+0x50>
  {
  case USBD_BOT_DATA_IN:
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 801436e:	68fa      	ldr	r2, [r7, #12]
 8014370:	f248 031d 	movw	r3, #32797	; 0x801d
 8014374:	4413      	add	r3, r2
 8014376:	7819      	ldrb	r1, [r3, #0]
 8014378:	68fa      	ldr	r2, [r7, #12]
 801437a:	f248 031f 	movw	r3, #32799	; 0x801f
 801437e:	4413      	add	r3, r2
 8014380:	461a      	mov	r2, r3
 8014382:	6878      	ldr	r0, [r7, #4]
 8014384:	f000 f99e 	bl	80146c4 <SCSI_ProcessCmd>
 8014388:	4603      	mov	r3, r0
 801438a:	2b00      	cmp	r3, #0
 801438c:	da0b      	bge.n	80143a6 <MSC_BOT_DataIn+0x5e>
    {
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 801438e:	2101      	movs	r1, #1
 8014390:	6878      	ldr	r0, [r7, #4]
 8014392:	f000 f90b 	bl	80145ac <MSC_BOT_SendCSW>
    }
    break;
 8014396:	e006      	b.n	80143a6 <MSC_BOT_DataIn+0x5e>

  case USBD_BOT_SEND_DATA:
  case USBD_BOT_LAST_DATA_IN:
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014398:	2100      	movs	r1, #0
 801439a:	6878      	ldr	r0, [r7, #4]
 801439c:	f000 f906 	bl	80145ac <MSC_BOT_SendCSW>
    break;
 80143a0:	e002      	b.n	80143a8 <MSC_BOT_DataIn+0x60>

  default:
    break;
 80143a2:	bf00      	nop
 80143a4:	e000      	b.n	80143a8 <MSC_BOT_DataIn+0x60>
    break;
 80143a6:	bf00      	nop
  }
}
 80143a8:	bf00      	nop
 80143aa:	3710      	adds	r7, #16
 80143ac:	46bd      	mov	sp, r7
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <MSC_BOT_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80143c2:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80143c4:	68fb      	ldr	r3, [r7, #12]
 80143c6:	7a1b      	ldrb	r3, [r3, #8]
 80143c8:	2b00      	cmp	r3, #0
 80143ca:	d002      	beq.n	80143d2 <MSC_BOT_DataOut+0x22>
 80143cc:	2b01      	cmp	r3, #1
 80143ce:	d004      	beq.n	80143da <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80143d0:	e018      	b.n	8014404 <MSC_BOT_DataOut+0x54>
      MSC_BOT_CBW_Decode(pdev);
 80143d2:	6878      	ldr	r0, [r7, #4]
 80143d4:	f000 f81a 	bl	801440c <MSC_BOT_CBW_Decode>
      break;
 80143d8:	e014      	b.n	8014404 <MSC_BOT_DataOut+0x54>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80143da:	68fa      	ldr	r2, [r7, #12]
 80143dc:	f248 031d 	movw	r3, #32797	; 0x801d
 80143e0:	4413      	add	r3, r2
 80143e2:	7819      	ldrb	r1, [r3, #0]
 80143e4:	68fa      	ldr	r2, [r7, #12]
 80143e6:	f248 031f 	movw	r3, #32799	; 0x801f
 80143ea:	4413      	add	r3, r2
 80143ec:	461a      	mov	r2, r3
 80143ee:	6878      	ldr	r0, [r7, #4]
 80143f0:	f000 f968 	bl	80146c4 <SCSI_ProcessCmd>
 80143f4:	4603      	mov	r3, r0
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	da03      	bge.n	8014402 <MSC_BOT_DataOut+0x52>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80143fa:	2101      	movs	r1, #1
 80143fc:	6878      	ldr	r0, [r7, #4]
 80143fe:	f000 f8d5 	bl	80145ac <MSC_BOT_SendCSW>
      break;
 8014402:	bf00      	nop
  }
}
 8014404:	bf00      	nop
 8014406:	3710      	adds	r7, #16
 8014408:	46bd      	mov	sp, r7
 801440a:	bd80      	pop	{r7, pc}

0801440c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef *pdev)
{
 801440c:	b580      	push	{r7, lr}
 801440e:	b084      	sub	sp, #16
 8014410:	af00      	add	r7, sp, #0
 8014412:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014414:	687b      	ldr	r3, [r7, #4]
 8014416:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801441a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 801441c:	68fa      	ldr	r2, [r7, #12]
 801441e:	f248 0314 	movw	r3, #32788	; 0x8014
 8014422:	4413      	add	r3, r2
 8014424:	681a      	ldr	r2, [r3, #0]
 8014426:	68f9      	ldr	r1, [r7, #12]
 8014428:	f248 0334 	movw	r3, #32820	; 0x8034
 801442c:	440b      	add	r3, r1
 801442e:	601a      	str	r2, [r3, #0]
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8014430:	68fa      	ldr	r2, [r7, #12]
 8014432:	f248 0318 	movw	r3, #32792	; 0x8018
 8014436:	4413      	add	r3, r2
 8014438:	681a      	ldr	r2, [r3, #0]
 801443a:	68f9      	ldr	r1, [r7, #12]
 801443c:	f248 0338 	movw	r3, #32824	; 0x8038
 8014440:	440b      	add	r3, r1
 8014442:	601a      	str	r2, [r3, #0]

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8014444:	2101      	movs	r1, #1
 8014446:	6878      	ldr	r0, [r7, #4]
 8014448:	f005 fba8 	bl	8019b9c <USBD_LL_GetRxDataSize>
 801444c:	4603      	mov	r3, r0
 801444e:	2b1f      	cmp	r3, #31
 8014450:	d11c      	bne.n	801448c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8014452:	68fa      	ldr	r2, [r7, #12]
 8014454:	f248 0310 	movw	r3, #32784	; 0x8010
 8014458:	4413      	add	r3, r2
 801445a:	681b      	ldr	r3, [r3, #0]
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 801445c:	4a38      	ldr	r2, [pc, #224]	; (8014540 <MSC_BOT_CBW_Decode+0x134>)
 801445e:	4293      	cmp	r3, r2
 8014460:	d114      	bne.n	801448c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014462:	68fa      	ldr	r2, [r7, #12]
 8014464:	f248 031d 	movw	r3, #32797	; 0x801d
 8014468:	4413      	add	r3, r2
 801446a:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 801446c:	2b01      	cmp	r3, #1
 801446e:	d80d      	bhi.n	801448c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014470:	68fa      	ldr	r2, [r7, #12]
 8014472:	f248 031e 	movw	r3, #32798	; 0x801e
 8014476:	4413      	add	r3, r2
 8014478:	781b      	ldrb	r3, [r3, #0]
 801447a:	2b00      	cmp	r3, #0
 801447c:	d006      	beq.n	801448c <MSC_BOT_CBW_Decode+0x80>
      (hmsc->cbw.bCBLength > 16U))
 801447e:	68fa      	ldr	r2, [r7, #12]
 8014480:	f248 031e 	movw	r3, #32798	; 0x801e
 8014484:	4413      	add	r3, r2
 8014486:	781b      	ldrb	r3, [r3, #0]
      (hmsc->cbw.bLUN > 1U) || (hmsc->cbw.bCBLength < 1U) ||
 8014488:	2b10      	cmp	r3, #16
 801448a:	d910      	bls.n	80144ae <MSC_BOT_CBW_Decode+0xa2>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801448c:	68fa      	ldr	r2, [r7, #12]
 801448e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014492:	4413      	add	r3, r2
 8014494:	7819      	ldrb	r1, [r3, #0]
 8014496:	2320      	movs	r3, #32
 8014498:	2205      	movs	r2, #5
 801449a:	6878      	ldr	r0, [r7, #4]
 801449c:	f000 fd36 	bl	8014f0c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 80144a0:	68fb      	ldr	r3, [r7, #12]
 80144a2:	2202      	movs	r2, #2
 80144a4:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80144a6:	6878      	ldr	r0, [r7, #4]
 80144a8:	f000 f8b2 	bl	8014610 <MSC_BOT_Abort>
 80144ac:	e044      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80144ae:	68fa      	ldr	r2, [r7, #12]
 80144b0:	f248 031d 	movw	r3, #32797	; 0x801d
 80144b4:	4413      	add	r3, r2
 80144b6:	7819      	ldrb	r1, [r3, #0]
 80144b8:	68fa      	ldr	r2, [r7, #12]
 80144ba:	f248 031f 	movw	r3, #32799	; 0x801f
 80144be:	4413      	add	r3, r2
 80144c0:	461a      	mov	r2, r3
 80144c2:	6878      	ldr	r0, [r7, #4]
 80144c4:	f000 f8fe 	bl	80146c4 <SCSI_ProcessCmd>
 80144c8:	4603      	mov	r3, r0
 80144ca:	2b00      	cmp	r3, #0
 80144cc:	da0c      	bge.n	80144e8 <MSC_BOT_CBW_Decode+0xdc>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80144ce:	68fb      	ldr	r3, [r7, #12]
 80144d0:	7a1b      	ldrb	r3, [r3, #8]
 80144d2:	2b05      	cmp	r3, #5
 80144d4:	d104      	bne.n	80144e0 <MSC_BOT_CBW_Decode+0xd4>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80144d6:	2101      	movs	r1, #1
 80144d8:	6878      	ldr	r0, [r7, #4]
 80144da:	f000 f867 	bl	80145ac <MSC_BOT_SendCSW>
 80144de:	e02b      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80144e0:	6878      	ldr	r0, [r7, #4]
 80144e2:	f000 f895 	bl	8014610 <MSC_BOT_Abort>
 80144e6:	e027      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    /* Burst xfer handled internally */
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80144e8:	68fb      	ldr	r3, [r7, #12]
 80144ea:	7a1b      	ldrb	r3, [r3, #8]
 80144ec:	2b02      	cmp	r3, #2
 80144ee:	d022      	beq.n	8014536 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80144f0:	68fb      	ldr	r3, [r7, #12]
 80144f2:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80144f4:	2b01      	cmp	r3, #1
 80144f6:	d01e      	beq.n	8014536 <MSC_BOT_CBW_Decode+0x12a>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80144f8:	68fb      	ldr	r3, [r7, #12]
 80144fa:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80144fc:	2b03      	cmp	r3, #3
 80144fe:	d01a      	beq.n	8014536 <MSC_BOT_CBW_Decode+0x12a>
    {
      if (hmsc->bot_data_length > 0U)
 8014500:	68fb      	ldr	r3, [r7, #12]
 8014502:	68db      	ldr	r3, [r3, #12]
 8014504:	2b00      	cmp	r3, #0
 8014506:	d009      	beq.n	801451c <MSC_BOT_CBW_Decode+0x110>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 8014508:	68fb      	ldr	r3, [r7, #12]
 801450a:	f103 0110 	add.w	r1, r3, #16
 801450e:	68fb      	ldr	r3, [r7, #12]
 8014510:	68db      	ldr	r3, [r3, #12]
 8014512:	461a      	mov	r2, r3
 8014514:	6878      	ldr	r0, [r7, #4]
 8014516:	f000 f815 	bl	8014544 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 801451a:	e00d      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
      }
      else if (hmsc->bot_data_length == 0U)
 801451c:	68fb      	ldr	r3, [r7, #12]
 801451e:	68db      	ldr	r3, [r3, #12]
 8014520:	2b00      	cmp	r3, #0
 8014522:	d104      	bne.n	801452e <MSC_BOT_CBW_Decode+0x122>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8014524:	2100      	movs	r1, #0
 8014526:	6878      	ldr	r0, [r7, #4]
 8014528:	f000 f840 	bl	80145ac <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 801452c:	e004      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 801452e:	6878      	ldr	r0, [r7, #4]
 8014530:	f000 f86e 	bl	8014610 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 8014534:	e000      	b.n	8014538 <MSC_BOT_CBW_Decode+0x12c>
      }
    }
    else
    {
      return;
 8014536:	bf00      	nop
    }
  }
}
 8014538:	3710      	adds	r7, #16
 801453a:	46bd      	mov	sp, r7
 801453c:	bd80      	pop	{r7, pc}
 801453e:	bf00      	nop
 8014540:	43425355 	.word	0x43425355

08014544 <MSC_BOT_SendData>:
* @param  buf: pointer to data buffer
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf, uint32_t len)
{
 8014544:	b580      	push	{r7, lr}
 8014546:	b086      	sub	sp, #24
 8014548:	af00      	add	r7, sp, #0
 801454a:	60f8      	str	r0, [r7, #12]
 801454c:	60b9      	str	r1, [r7, #8]
 801454e:	607a      	str	r2, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014556:	617b      	str	r3, [r7, #20]

  uint32_t length = MIN(hmsc->cbw.dDataLength, len);
 8014558:	697a      	ldr	r2, [r7, #20]
 801455a:	f248 0318 	movw	r3, #32792	; 0x8018
 801455e:	4413      	add	r3, r2
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	687a      	ldr	r2, [r7, #4]
 8014564:	4293      	cmp	r3, r2
 8014566:	bf28      	it	cs
 8014568:	4613      	movcs	r3, r2
 801456a:	613b      	str	r3, [r7, #16]

  hmsc->csw.dDataResidue -= len;
 801456c:	697a      	ldr	r2, [r7, #20]
 801456e:	f248 0338 	movw	r3, #32824	; 0x8038
 8014572:	4413      	add	r3, r2
 8014574:	681a      	ldr	r2, [r3, #0]
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	1ad2      	subs	r2, r2, r3
 801457a:	6979      	ldr	r1, [r7, #20]
 801457c:	f248 0338 	movw	r3, #32824	; 0x8038
 8014580:	440b      	add	r3, r1
 8014582:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8014584:	697a      	ldr	r2, [r7, #20]
 8014586:	f248 033c 	movw	r3, #32828	; 0x803c
 801458a:	4413      	add	r3, r2
 801458c:	2200      	movs	r2, #0
 801458e:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	2204      	movs	r2, #4
 8014594:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8014596:	693b      	ldr	r3, [r7, #16]
 8014598:	68ba      	ldr	r2, [r7, #8]
 801459a:	2181      	movs	r1, #129	; 0x81
 801459c:	68f8      	ldr	r0, [r7, #12]
 801459e:	f005 fabb 	bl	8019b18 <USBD_LL_Transmit>
}
 80145a2:	bf00      	nop
 80145a4:	3718      	adds	r7, #24
 80145a6:	46bd      	mov	sp, r7
 80145a8:	bd80      	pop	{r7, pc}
	...

080145ac <MSC_BOT_SendCSW>:
* @param  pdev: device instance
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef *pdev, uint8_t CSW_Status)
{
 80145ac:	b580      	push	{r7, lr}
 80145ae:	b084      	sub	sp, #16
 80145b0:	af00      	add	r7, sp, #0
 80145b2:	6078      	str	r0, [r7, #4]
 80145b4:	460b      	mov	r3, r1
 80145b6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80145be:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80145c0:	68fa      	ldr	r2, [r7, #12]
 80145c2:	f248 0330 	movw	r3, #32816	; 0x8030
 80145c6:	4413      	add	r3, r2
 80145c8:	4a10      	ldr	r2, [pc, #64]	; (801460c <MSC_BOT_SendCSW+0x60>)
 80145ca:	601a      	str	r2, [r3, #0]
  hmsc->csw.bStatus = CSW_Status;
 80145cc:	68fa      	ldr	r2, [r7, #12]
 80145ce:	f248 033c 	movw	r3, #32828	; 0x803c
 80145d2:	4413      	add	r3, r2
 80145d4:	78fa      	ldrb	r2, [r7, #3]
 80145d6:	701a      	strb	r2, [r3, #0]
  hmsc->bot_state = USBD_BOT_IDLE;
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	2200      	movs	r2, #0
 80145dc:	721a      	strb	r2, [r3, #8]

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)&hmsc->csw,
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	f248 0230 	movw	r2, #32816	; 0x8030
 80145e4:	441a      	add	r2, r3
 80145e6:	230d      	movs	r3, #13
 80145e8:	2181      	movs	r1, #129	; 0x81
 80145ea:	6878      	ldr	r0, [r7, #4]
 80145ec:	f005 fa94 	bl	8019b18 <USBD_LL_Transmit>
                         USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)&hmsc->cbw,
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	f248 0210 	movw	r2, #32784	; 0x8010
 80145f6:	441a      	add	r2, r3
 80145f8:	231f      	movs	r3, #31
 80145fa:	2101      	movs	r1, #1
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f005 faac 	bl	8019b5a <USBD_LL_PrepareReceive>
                               USBD_BOT_CBW_LENGTH);
}
 8014602:	bf00      	nop
 8014604:	3710      	adds	r7, #16
 8014606:	46bd      	mov	sp, r7
 8014608:	bd80      	pop	{r7, pc}
 801460a:	bf00      	nop
 801460c:	53425355 	.word	0x53425355

08014610 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef *pdev)
{
 8014610:	b580      	push	{r7, lr}
 8014612:	b084      	sub	sp, #16
 8014614:	af00      	add	r7, sp, #0
 8014616:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014618:	687b      	ldr	r3, [r7, #4]
 801461a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801461e:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8014620:	68fa      	ldr	r2, [r7, #12]
 8014622:	f248 031c 	movw	r3, #32796	; 0x801c
 8014626:	4413      	add	r3, r2
 8014628:	781b      	ldrb	r3, [r3, #0]
 801462a:	2b00      	cmp	r3, #0
 801462c:	d10e      	bne.n	801464c <MSC_BOT_Abort+0x3c>
      (hmsc->cbw.dDataLength != 0U) &&
 801462e:	68fa      	ldr	r2, [r7, #12]
 8014630:	f248 0318 	movw	r3, #32792	; 0x8018
 8014634:	4413      	add	r3, r2
 8014636:	681b      	ldr	r3, [r3, #0]
  if ((hmsc->cbw.bmFlags == 0U) &&
 8014638:	2b00      	cmp	r3, #0
 801463a:	d007      	beq.n	801464c <MSC_BOT_Abort+0x3c>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 801463c:	68fb      	ldr	r3, [r7, #12]
 801463e:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 8014640:	2b00      	cmp	r3, #0
 8014642:	d103      	bne.n	801464c <MSC_BOT_Abort+0x3c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014644:	2101      	movs	r1, #1
 8014646:	6878      	ldr	r0, [r7, #4]
 8014648:	f005 f9dd 	bl	8019a06 <USBD_LL_StallEP>
  }

  (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801464c:	2181      	movs	r1, #129	; 0x81
 801464e:	6878      	ldr	r0, [r7, #4]
 8014650:	f005 f9d9 	bl	8019a06 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8014654:	68fb      	ldr	r3, [r7, #12]
 8014656:	7a5b      	ldrb	r3, [r3, #9]
 8014658:	2b02      	cmp	r3, #2
 801465a:	d107      	bne.n	801466c <MSC_BOT_Abort+0x5c>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 801465c:	2181      	movs	r1, #129	; 0x81
 801465e:	6878      	ldr	r0, [r7, #4]
 8014660:	f005 f9d1 	bl	8019a06 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014664:	2101      	movs	r1, #1
 8014666:	6878      	ldr	r0, [r7, #4]
 8014668:	f005 f9cd 	bl	8019a06 <USBD_LL_StallEP>
  }
}
 801466c:	bf00      	nop
 801466e:	3710      	adds	r7, #16
 8014670:	46bd      	mov	sp, r7
 8014672:	bd80      	pop	{r7, pc}

08014674 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8014674:	b580      	push	{r7, lr}
 8014676:	b084      	sub	sp, #16
 8014678:	af00      	add	r7, sp, #0
 801467a:	6078      	str	r0, [r7, #4]
 801467c:	460b      	mov	r3, r1
 801467e:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014686:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8014688:	68fb      	ldr	r3, [r7, #12]
 801468a:	7a5b      	ldrb	r3, [r3, #9]
 801468c:	2b02      	cmp	r3, #2
 801468e:	d108      	bne.n	80146a2 <MSC_BOT_CplClrFeature+0x2e>
  {
    (void)USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8014690:	2181      	movs	r1, #129	; 0x81
 8014692:	6878      	ldr	r0, [r7, #4]
 8014694:	f005 f9b7 	bl	8019a06 <USBD_LL_StallEP>
    (void)USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8014698:	2101      	movs	r1, #1
 801469a:	6878      	ldr	r0, [r7, #4]
 801469c:	f005 f9b3 	bl	8019a06 <USBD_LL_StallEP>
 80146a0:	e00d      	b.n	80146be <MSC_BOT_CplClrFeature+0x4a>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 80146a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80146a6:	2b00      	cmp	r3, #0
 80146a8:	da08      	bge.n	80146bc <MSC_BOT_CplClrFeature+0x48>
 80146aa:	68fb      	ldr	r3, [r7, #12]
 80146ac:	7a5b      	ldrb	r3, [r3, #9]
 80146ae:	2b01      	cmp	r3, #1
 80146b0:	d004      	beq.n	80146bc <MSC_BOT_CplClrFeature+0x48>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80146b2:	2101      	movs	r1, #1
 80146b4:	6878      	ldr	r0, [r7, #4]
 80146b6:	f7ff ff79 	bl	80145ac <MSC_BOT_SendCSW>
 80146ba:	e000      	b.n	80146be <MSC_BOT_CplClrFeature+0x4a>
  }
  else
  {
    return;
 80146bc:	bf00      	nop
  }
}
 80146be:	3710      	adds	r7, #16
 80146c0:	46bd      	mov	sp, r7
 80146c2:	bd80      	pop	{r7, pc}

080146c4 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80146c4:	b580      	push	{r7, lr}
 80146c6:	b086      	sub	sp, #24
 80146c8:	af00      	add	r7, sp, #0
 80146ca:	60f8      	str	r0, [r7, #12]
 80146cc:	460b      	mov	r3, r1
 80146ce:	607a      	str	r2, [r7, #4]
 80146d0:	72fb      	strb	r3, [r7, #11]
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80146d2:	68fb      	ldr	r3, [r7, #12]
 80146d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80146d8:	613b      	str	r3, [r7, #16]

  switch (cmd[0])
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	781b      	ldrb	r3, [r3, #0]
 80146de:	2b25      	cmp	r3, #37	; 0x25
 80146e0:	d06e      	beq.n	80147c0 <SCSI_ProcessCmd+0xfc>
 80146e2:	2b25      	cmp	r3, #37	; 0x25
 80146e4:	dc11      	bgt.n	801470a <SCSI_ProcessCmd+0x46>
 80146e6:	2b1a      	cmp	r3, #26
 80146e8:	d04f      	beq.n	801478a <SCSI_ProcessCmd+0xc6>
 80146ea:	2b1a      	cmp	r3, #26
 80146ec:	dc06      	bgt.n	80146fc <SCSI_ProcessCmd+0x38>
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	d027      	beq.n	8014742 <SCSI_ProcessCmd+0x7e>
 80146f2:	2b12      	cmp	r3, #18
 80146f4:	d02e      	beq.n	8014754 <SCSI_ProcessCmd+0x90>
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d01a      	beq.n	8014730 <SCSI_ProcessCmd+0x6c>
 80146fa:	e0a0      	b.n	801483e <SCSI_ProcessCmd+0x17a>
 80146fc:	2b1e      	cmp	r3, #30
 80146fe:	d03b      	beq.n	8014778 <SCSI_ProcessCmd+0xb4>
 8014700:	2b23      	cmp	r3, #35	; 0x23
 8014702:	d054      	beq.n	80147ae <SCSI_ProcessCmd+0xea>
 8014704:	2b1b      	cmp	r3, #27
 8014706:	d02e      	beq.n	8014766 <SCSI_ProcessCmd+0xa2>
 8014708:	e099      	b.n	801483e <SCSI_ProcessCmd+0x17a>
 801470a:	2b5a      	cmp	r3, #90	; 0x5a
 801470c:	d046      	beq.n	801479c <SCSI_ProcessCmd+0xd8>
 801470e:	2b5a      	cmp	r3, #90	; 0x5a
 8014710:	dc07      	bgt.n	8014722 <SCSI_ProcessCmd+0x5e>
 8014712:	2b2a      	cmp	r3, #42	; 0x2a
 8014714:	d078      	beq.n	8014808 <SCSI_ProcessCmd+0x144>
 8014716:	2b2f      	cmp	r3, #47	; 0x2f
 8014718:	f000 8088 	beq.w	801482c <SCSI_ProcessCmd+0x168>
 801471c:	2b28      	cmp	r3, #40	; 0x28
 801471e:	d061      	beq.n	80147e4 <SCSI_ProcessCmd+0x120>
 8014720:	e08d      	b.n	801483e <SCSI_ProcessCmd+0x17a>
 8014722:	2ba8      	cmp	r3, #168	; 0xa8
 8014724:	d067      	beq.n	80147f6 <SCSI_ProcessCmd+0x132>
 8014726:	2baa      	cmp	r3, #170	; 0xaa
 8014728:	d077      	beq.n	801481a <SCSI_ProcessCmd+0x156>
 801472a:	2b9e      	cmp	r3, #158	; 0x9e
 801472c:	d051      	beq.n	80147d2 <SCSI_ProcessCmd+0x10e>
 801472e:	e086      	b.n	801483e <SCSI_ProcessCmd+0x17a>
  {
  case SCSI_TEST_UNIT_READY:
    ret = SCSI_TestUnitReady(pdev, lun, cmd);
 8014730:	7afb      	ldrb	r3, [r7, #11]
 8014732:	687a      	ldr	r2, [r7, #4]
 8014734:	4619      	mov	r1, r3
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f000 f893 	bl	8014862 <SCSI_TestUnitReady>
 801473c:	4603      	mov	r3, r0
 801473e:	75fb      	strb	r3, [r7, #23]
    break;
 8014740:	e089      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_REQUEST_SENSE:
    ret = SCSI_RequestSense(pdev, lun, cmd);
 8014742:	7afb      	ldrb	r3, [r7, #11]
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	4619      	mov	r1, r3
 8014748:	68f8      	ldr	r0, [r7, #12]
 801474a:	f000 fb47 	bl	8014ddc <SCSI_RequestSense>
 801474e:	4603      	mov	r3, r0
 8014750:	75fb      	strb	r3, [r7, #23]
    break;
 8014752:	e080      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_INQUIRY:
    ret = SCSI_Inquiry(pdev, lun, cmd);
 8014754:	7afb      	ldrb	r3, [r7, #11]
 8014756:	687a      	ldr	r2, [r7, #4]
 8014758:	4619      	mov	r1, r3
 801475a:	68f8      	ldr	r0, [r7, #12]
 801475c:	f000 f8d2 	bl	8014904 <SCSI_Inquiry>
 8014760:	4603      	mov	r3, r0
 8014762:	75fb      	strb	r3, [r7, #23]
    break;
 8014764:	e077      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_START_STOP_UNIT:
    ret = SCSI_StartStopUnit(pdev, lun, cmd);
 8014766:	7afb      	ldrb	r3, [r7, #11]
 8014768:	687a      	ldr	r2, [r7, #4]
 801476a:	4619      	mov	r1, r3
 801476c:	68f8      	ldr	r0, [r7, #12]
 801476e:	f000 fc27 	bl	8014fc0 <SCSI_StartStopUnit>
 8014772:	4603      	mov	r3, r0
 8014774:	75fb      	strb	r3, [r7, #23]
    break;
 8014776:	e06e      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_ALLOW_MEDIUM_REMOVAL:
    ret = SCSI_AllowPreventRemovable(pdev, lun, cmd);
 8014778:	7afb      	ldrb	r3, [r7, #11]
 801477a:	687a      	ldr	r2, [r7, #4]
 801477c:	4619      	mov	r1, r3
 801477e:	68f8      	ldr	r0, [r7, #12]
 8014780:	f000 fc71 	bl	8015066 <SCSI_AllowPreventRemovable>
 8014784:	4603      	mov	r3, r0
 8014786:	75fb      	strb	r3, [r7, #23]
    break;
 8014788:	e065      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE6:
    ret = SCSI_ModeSense6(pdev, lun, cmd);
 801478a:	7afb      	ldrb	r3, [r7, #11]
 801478c:	687a      	ldr	r2, [r7, #4]
 801478e:	4619      	mov	r1, r3
 8014790:	68f8      	ldr	r0, [r7, #12]
 8014792:	f000 fad7 	bl	8014d44 <SCSI_ModeSense6>
 8014796:	4603      	mov	r3, r0
 8014798:	75fb      	strb	r3, [r7, #23]
    break;
 801479a:	e05c      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_MODE_SENSE10:
    ret = SCSI_ModeSense10(pdev, lun, cmd);
 801479c:	7afb      	ldrb	r3, [r7, #11]
 801479e:	687a      	ldr	r2, [r7, #4]
 80147a0:	4619      	mov	r1, r3
 80147a2:	68f8      	ldr	r0, [r7, #12]
 80147a4:	f000 faf4 	bl	8014d90 <SCSI_ModeSense10>
 80147a8:	4603      	mov	r3, r0
 80147aa:	75fb      	strb	r3, [r7, #23]
    break;
 80147ac:	e053      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_FORMAT_CAPACITIES:
    ret = SCSI_ReadFormatCapacity(pdev, lun, cmd);
 80147ae:	7afb      	ldrb	r3, [r7, #11]
 80147b0:	687a      	ldr	r2, [r7, #4]
 80147b2:	4619      	mov	r1, r3
 80147b4:	68f8      	ldr	r0, [r7, #12]
 80147b6:	f000 fa56 	bl	8014c66 <SCSI_ReadFormatCapacity>
 80147ba:	4603      	mov	r3, r0
 80147bc:	75fb      	strb	r3, [r7, #23]
    break;
 80147be:	e04a      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY10:
    ret = SCSI_ReadCapacity10(pdev, lun, cmd);
 80147c0:	7afb      	ldrb	r3, [r7, #11]
 80147c2:	687a      	ldr	r2, [r7, #4]
 80147c4:	4619      	mov	r1, r3
 80147c6:	68f8      	ldr	r0, [r7, #12]
 80147c8:	f000 f910 	bl	80149ec <SCSI_ReadCapacity10>
 80147cc:	4603      	mov	r3, r0
 80147ce:	75fb      	strb	r3, [r7, #23]
    break;
 80147d0:	e041      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_READ_CAPACITY16:
    ret = SCSI_ReadCapacity16(pdev, lun, cmd);
 80147d2:	7afb      	ldrb	r3, [r7, #11]
 80147d4:	687a      	ldr	r2, [r7, #4]
 80147d6:	4619      	mov	r1, r3
 80147d8:	68f8      	ldr	r0, [r7, #12]
 80147da:	f000 f98b 	bl	8014af4 <SCSI_ReadCapacity16>
 80147de:	4603      	mov	r3, r0
 80147e0:	75fb      	strb	r3, [r7, #23]
    break;
 80147e2:	e038      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_READ10:
    ret = SCSI_Read10(pdev, lun, cmd);
 80147e4:	7afb      	ldrb	r3, [r7, #11]
 80147e6:	687a      	ldr	r2, [r7, #4]
 80147e8:	4619      	mov	r1, r3
 80147ea:	68f8      	ldr	r0, [r7, #12]
 80147ec:	f000 fc62 	bl	80150b4 <SCSI_Read10>
 80147f0:	4603      	mov	r3, r0
 80147f2:	75fb      	strb	r3, [r7, #23]
    break;
 80147f4:	e02f      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_READ12:
    ret = SCSI_Read12(pdev, lun, cmd);
 80147f6:	7afb      	ldrb	r3, [r7, #11]
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	4619      	mov	r1, r3
 80147fc:	68f8      	ldr	r0, [r7, #12]
 80147fe:	f000 fd0b 	bl	8015218 <SCSI_Read12>
 8014802:	4603      	mov	r3, r0
 8014804:	75fb      	strb	r3, [r7, #23]
    break;
 8014806:	e026      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE10:
    ret = SCSI_Write10(pdev, lun, cmd);
 8014808:	7afb      	ldrb	r3, [r7, #11]
 801480a:	687a      	ldr	r2, [r7, #4]
 801480c:	4619      	mov	r1, r3
 801480e:	68f8      	ldr	r0, [r7, #12]
 8014810:	f000 fdbe 	bl	8015390 <SCSI_Write10>
 8014814:	4603      	mov	r3, r0
 8014816:	75fb      	strb	r3, [r7, #23]
    break;
 8014818:	e01d      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_WRITE12:
    ret = SCSI_Write12(pdev, lun, cmd);
 801481a:	7afb      	ldrb	r3, [r7, #11]
 801481c:	687a      	ldr	r2, [r7, #4]
 801481e:	4619      	mov	r1, r3
 8014820:	68f8      	ldr	r0, [r7, #12]
 8014822:	f000 fe8d 	bl	8015540 <SCSI_Write12>
 8014826:	4603      	mov	r3, r0
 8014828:	75fb      	strb	r3, [r7, #23]
    break;
 801482a:	e014      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  case SCSI_VERIFY10:
    ret = SCSI_Verify10(pdev, lun, cmd);
 801482c:	7afb      	ldrb	r3, [r7, #11]
 801482e:	687a      	ldr	r2, [r7, #4]
 8014830:	4619      	mov	r1, r3
 8014832:	68f8      	ldr	r0, [r7, #12]
 8014834:	f000 ff6c 	bl	8015710 <SCSI_Verify10>
 8014838:	4603      	mov	r3, r0
 801483a:	75fb      	strb	r3, [r7, #23]
    break;
 801483c:	e00b      	b.n	8014856 <SCSI_ProcessCmd+0x192>

  default:
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 801483e:	7af9      	ldrb	r1, [r7, #11]
 8014840:	2320      	movs	r3, #32
 8014842:	2205      	movs	r2, #5
 8014844:	68f8      	ldr	r0, [r7, #12]
 8014846:	f000 fb61 	bl	8014f0c <SCSI_SenseCode>
    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 801484a:	693b      	ldr	r3, [r7, #16]
 801484c:	2202      	movs	r2, #2
 801484e:	725a      	strb	r2, [r3, #9]
    ret = -1;
 8014850:	23ff      	movs	r3, #255	; 0xff
 8014852:	75fb      	strb	r3, [r7, #23]
    break;
 8014854:	bf00      	nop
  }

  return ret;
 8014856:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801485a:	4618      	mov	r0, r3
 801485c:	3718      	adds	r7, #24
 801485e:	46bd      	mov	sp, r7
 8014860:	bd80      	pop	{r7, pc}

08014862 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014862:	b580      	push	{r7, lr}
 8014864:	b086      	sub	sp, #24
 8014866:	af00      	add	r7, sp, #0
 8014868:	60f8      	str	r0, [r7, #12]
 801486a:	460b      	mov	r3, r1
 801486c:	607a      	str	r2, [r7, #4]
 801486e:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014870:	68fb      	ldr	r3, [r7, #12]
 8014872:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014876:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8014878:	697a      	ldr	r2, [r7, #20]
 801487a:	f248 0318 	movw	r3, #32792	; 0x8018
 801487e:	4413      	add	r3, r2
 8014880:	681b      	ldr	r3, [r3, #0]
 8014882:	2b00      	cmp	r3, #0
 8014884:	d00c      	beq.n	80148a0 <SCSI_TestUnitReady+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014886:	697a      	ldr	r2, [r7, #20]
 8014888:	f248 031d 	movw	r3, #32797	; 0x801d
 801488c:	4413      	add	r3, r2
 801488e:	7819      	ldrb	r1, [r3, #0]
 8014890:	2320      	movs	r3, #32
 8014892:	2205      	movs	r2, #5
 8014894:	68f8      	ldr	r0, [r7, #12]
 8014896:	f000 fb39 	bl	8014f0c <SCSI_SenseCode>

    return -1;
 801489a:	f04f 33ff 	mov.w	r3, #4294967295
 801489e:	e02c      	b.n	80148fa <SCSI_TestUnitReady+0x98>
  }

  if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80148a0:	697a      	ldr	r2, [r7, #20]
 80148a2:	f248 0362 	movw	r3, #32866	; 0x8062
 80148a6:	4413      	add	r3, r2
 80148a8:	781b      	ldrb	r3, [r3, #0]
 80148aa:	2b02      	cmp	r3, #2
 80148ac:	d10b      	bne.n	80148c6 <SCSI_TestUnitReady+0x64>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148ae:	7af9      	ldrb	r1, [r7, #11]
 80148b0:	233a      	movs	r3, #58	; 0x3a
 80148b2:	2202      	movs	r2, #2
 80148b4:	68f8      	ldr	r0, [r7, #12]
 80148b6:	f000 fb29 	bl	8014f0c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	2205      	movs	r2, #5
 80148be:	721a      	strb	r2, [r3, #8]
    return -1;
 80148c0:	f04f 33ff 	mov.w	r3, #4294967295
 80148c4:	e019      	b.n	80148fa <SCSI_TestUnitReady+0x98>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80148c6:	68fb      	ldr	r3, [r7, #12]
 80148c8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80148cc:	689b      	ldr	r3, [r3, #8]
 80148ce:	7afa      	ldrb	r2, [r7, #11]
 80148d0:	4610      	mov	r0, r2
 80148d2:	4798      	blx	r3
 80148d4:	4603      	mov	r3, r0
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d00b      	beq.n	80148f2 <SCSI_TestUnitReady+0x90>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80148da:	7af9      	ldrb	r1, [r7, #11]
 80148dc:	233a      	movs	r3, #58	; 0x3a
 80148de:	2202      	movs	r2, #2
 80148e0:	68f8      	ldr	r0, [r7, #12]
 80148e2:	f000 fb13 	bl	8014f0c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 80148e6:	697b      	ldr	r3, [r7, #20]
 80148e8:	2205      	movs	r2, #5
 80148ea:	721a      	strb	r2, [r3, #8]

    return -1;
 80148ec:	f04f 33ff 	mov.w	r3, #4294967295
 80148f0:	e003      	b.n	80148fa <SCSI_TestUnitReady+0x98>
  }
  hmsc->bot_data_length = 0U;
 80148f2:	697b      	ldr	r3, [r7, #20]
 80148f4:	2200      	movs	r2, #0
 80148f6:	60da      	str	r2, [r3, #12]

  return 0;
 80148f8:	2300      	movs	r3, #0
}
 80148fa:	4618      	mov	r0, r3
 80148fc:	3718      	adds	r7, #24
 80148fe:	46bd      	mov	sp, r7
 8014900:	bd80      	pop	{r7, pc}
	...

08014904 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Inquiry(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b088      	sub	sp, #32
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	460b      	mov	r3, r1
 801490e:	607a      	str	r2, [r7, #4]
 8014910:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014918:	61bb      	str	r3, [r7, #24]

  if (hmsc->cbw.dDataLength == 0U)
 801491a:	69ba      	ldr	r2, [r7, #24]
 801491c:	f248 0318 	movw	r3, #32792	; 0x8018
 8014920:	4413      	add	r3, r2
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	2b00      	cmp	r3, #0
 8014926:	d10c      	bne.n	8014942 <SCSI_Inquiry+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014928:	69ba      	ldr	r2, [r7, #24]
 801492a:	f248 031d 	movw	r3, #32797	; 0x801d
 801492e:	4413      	add	r3, r2
 8014930:	7819      	ldrb	r1, [r3, #0]
 8014932:	2320      	movs	r3, #32
 8014934:	2205      	movs	r2, #5
 8014936:	68f8      	ldr	r0, [r7, #12]
 8014938:	f000 fae8 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 801493c:	f04f 33ff 	mov.w	r3, #4294967295
 8014940:	e04c      	b.n	80149dc <SCSI_Inquiry+0xd8>
  }

  if ((params[1] & 0x01U) != 0U) /* Evpd is set */
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	3301      	adds	r3, #1
 8014946:	781b      	ldrb	r3, [r3, #0]
 8014948:	f003 0301 	and.w	r3, r3, #1
 801494c:	2b00      	cmp	r3, #0
 801494e:	d022      	beq.n	8014996 <SCSI_Inquiry+0x92>
  {
    if (params[2] == 0U) /* Request for Supported Vital Product Data Pages*/
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	3302      	adds	r3, #2
 8014954:	781b      	ldrb	r3, [r3, #0]
 8014956:	2b00      	cmp	r3, #0
 8014958:	d105      	bne.n	8014966 <SCSI_Inquiry+0x62>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page00_Inquiry_Data, LENGTH_INQUIRY_PAGE00);
 801495a:	2206      	movs	r2, #6
 801495c:	4921      	ldr	r1, [pc, #132]	; (80149e4 <SCSI_Inquiry+0xe0>)
 801495e:	69b8      	ldr	r0, [r7, #24]
 8014960:	f001 f862 	bl	8015a28 <SCSI_UpdateBotData>
 8014964:	e039      	b.n	80149da <SCSI_Inquiry+0xd6>
    }
    else if (params[2] == 0x80U) /* Request for VPD page 0x80 Unit Serial Number */
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	3302      	adds	r3, #2
 801496a:	781b      	ldrb	r3, [r3, #0]
 801496c:	2b80      	cmp	r3, #128	; 0x80
 801496e:	d105      	bne.n	801497c <SCSI_Inquiry+0x78>
    {
      (void)SCSI_UpdateBotData(hmsc, MSC_Page80_Inquiry_Data, LENGTH_INQUIRY_PAGE80);
 8014970:	2208      	movs	r2, #8
 8014972:	491d      	ldr	r1, [pc, #116]	; (80149e8 <SCSI_Inquiry+0xe4>)
 8014974:	69b8      	ldr	r0, [r7, #24]
 8014976:	f001 f857 	bl	8015a28 <SCSI_UpdateBotData>
 801497a:	e02e      	b.n	80149da <SCSI_Inquiry+0xd6>
    }
    else /* Request Not supported */
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST,
 801497c:	69ba      	ldr	r2, [r7, #24]
 801497e:	f248 031d 	movw	r3, #32797	; 0x801d
 8014982:	4413      	add	r3, r2
 8014984:	7819      	ldrb	r1, [r3, #0]
 8014986:	2324      	movs	r3, #36	; 0x24
 8014988:	2205      	movs	r2, #5
 801498a:	68f8      	ldr	r0, [r7, #12]
 801498c:	f000 fabe 	bl	8014f0c <SCSI_SenseCode>
                     INVALID_FIELED_IN_COMMAND);

      return -1;
 8014990:	f04f 33ff 	mov.w	r3, #4294967295
 8014994:	e022      	b.n	80149dc <SCSI_Inquiry+0xd8>
    }
  }
  else
  {
    pPage = (uint8_t *)&((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 8014996:	68fb      	ldr	r3, [r7, #12]
 8014998:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801499c:	69d9      	ldr	r1, [r3, #28]
 801499e:	7afa      	ldrb	r2, [r7, #11]
 80149a0:	4613      	mov	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	4413      	add	r3, r2
 80149a6:	009b      	lsls	r3, r3, #2
 80149a8:	440b      	add	r3, r1
 80149aa:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	3304      	adds	r3, #4
 80149b0:	781b      	ldrb	r3, [r3, #0]
 80149b2:	b29b      	uxth	r3, r3
 80149b4:	3305      	adds	r3, #5
 80149b6:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80149b8:	687b      	ldr	r3, [r7, #4]
 80149ba:	3304      	adds	r3, #4
 80149bc:	781b      	ldrb	r3, [r3, #0]
 80149be:	b29b      	uxth	r3, r3
 80149c0:	8bfa      	ldrh	r2, [r7, #30]
 80149c2:	429a      	cmp	r2, r3
 80149c4:	d303      	bcc.n	80149ce <SCSI_Inquiry+0xca>
    {
      len = params[4];
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	3304      	adds	r3, #4
 80149ca:	781b      	ldrb	r3, [r3, #0]
 80149cc:	83fb      	strh	r3, [r7, #30]
    }

    (void)SCSI_UpdateBotData(hmsc, pPage, len);
 80149ce:	8bfb      	ldrh	r3, [r7, #30]
 80149d0:	461a      	mov	r2, r3
 80149d2:	6979      	ldr	r1, [r7, #20]
 80149d4:	69b8      	ldr	r0, [r7, #24]
 80149d6:	f001 f827 	bl	8015a28 <SCSI_UpdateBotData>
  }

  return 0;
 80149da:	2300      	movs	r3, #0
}
 80149dc:	4618      	mov	r0, r3
 80149de:	3720      	adds	r7, #32
 80149e0:	46bd      	mov	sp, r7
 80149e2:	bd80      	pop	{r7, pc}
 80149e4:	240000c4 	.word	0x240000c4
 80149e8:	240000cc 	.word	0x240000cc

080149ec <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80149ec:	b590      	push	{r4, r7, lr}
 80149ee:	b087      	sub	sp, #28
 80149f0:	af00      	add	r7, sp, #0
 80149f2:	60f8      	str	r0, [r7, #12]
 80149f4:	460b      	mov	r3, r1
 80149f6:	607a      	str	r2, [r7, #4]
 80149f8:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80149fa:	68fb      	ldr	r3, [r7, #12]
 80149fc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014a00:	617b      	str	r3, [r7, #20]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014a02:	68fb      	ldr	r3, [r7, #12]
 8014a04:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014a08:	685c      	ldr	r4, [r3, #4]
 8014a0a:	697a      	ldr	r2, [r7, #20]
 8014a0c:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a10:	4413      	add	r3, r2
 8014a12:	6979      	ldr	r1, [r7, #20]
 8014a14:	f248 0264 	movw	r2, #32868	; 0x8064
 8014a18:	440a      	add	r2, r1
 8014a1a:	7af8      	ldrb	r0, [r7, #11]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	47a0      	blx	r4
 8014a20:	4603      	mov	r3, r0
 8014a22:	74fb      	strb	r3, [r7, #19]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014a24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d106      	bne.n	8014a3a <SCSI_ReadCapacity10+0x4e>
 8014a2c:	697a      	ldr	r2, [r7, #20]
 8014a2e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014a32:	4413      	add	r3, r2
 8014a34:	781b      	ldrb	r3, [r3, #0]
 8014a36:	2b02      	cmp	r3, #2
 8014a38:	d108      	bne.n	8014a4c <SCSI_ReadCapacity10+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014a3a:	7af9      	ldrb	r1, [r7, #11]
 8014a3c:	233a      	movs	r3, #58	; 0x3a
 8014a3e:	2202      	movs	r2, #2
 8014a40:	68f8      	ldr	r0, [r7, #12]
 8014a42:	f000 fa63 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8014a46:	f04f 33ff 	mov.w	r3, #4294967295
 8014a4a:	e04f      	b.n	8014aec <SCSI_ReadCapacity10+0x100>
  }

  hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014a4c:	697a      	ldr	r2, [r7, #20]
 8014a4e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a52:	4413      	add	r3, r2
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	3b01      	subs	r3, #1
 8014a58:	0e1b      	lsrs	r3, r3, #24
 8014a5a:	b2da      	uxtb	r2, r3
 8014a5c:	697b      	ldr	r3, [r7, #20]
 8014a5e:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014a60:	697a      	ldr	r2, [r7, #20]
 8014a62:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a66:	4413      	add	r3, r2
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	3b01      	subs	r3, #1
 8014a6c:	0c1b      	lsrs	r3, r3, #16
 8014a6e:	b2da      	uxtb	r2, r3
 8014a70:	697b      	ldr	r3, [r7, #20]
 8014a72:	745a      	strb	r2, [r3, #17]
  hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014a74:	697a      	ldr	r2, [r7, #20]
 8014a76:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a7a:	4413      	add	r3, r2
 8014a7c:	681b      	ldr	r3, [r3, #0]
 8014a7e:	3b01      	subs	r3, #1
 8014a80:	0a1b      	lsrs	r3, r3, #8
 8014a82:	b2da      	uxtb	r2, r3
 8014a84:	697b      	ldr	r3, [r7, #20]
 8014a86:	749a      	strb	r2, [r3, #18]
  hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014a88:	697a      	ldr	r2, [r7, #20]
 8014a8a:	f248 0368 	movw	r3, #32872	; 0x8068
 8014a8e:	4413      	add	r3, r2
 8014a90:	681b      	ldr	r3, [r3, #0]
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	3b01      	subs	r3, #1
 8014a96:	b2da      	uxtb	r2, r3
 8014a98:	697b      	ldr	r3, [r7, #20]
 8014a9a:	74da      	strb	r2, [r3, #19]

  hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014a9c:	697a      	ldr	r2, [r7, #20]
 8014a9e:	f248 0364 	movw	r3, #32868	; 0x8064
 8014aa2:	4413      	add	r3, r2
 8014aa4:	881b      	ldrh	r3, [r3, #0]
 8014aa6:	161b      	asrs	r3, r3, #24
 8014aa8:	b2da      	uxtb	r2, r3
 8014aaa:	697b      	ldr	r3, [r7, #20]
 8014aac:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014aae:	697a      	ldr	r2, [r7, #20]
 8014ab0:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ab4:	4413      	add	r3, r2
 8014ab6:	881b      	ldrh	r3, [r3, #0]
 8014ab8:	141b      	asrs	r3, r3, #16
 8014aba:	b2da      	uxtb	r2, r3
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014ac0:	697a      	ldr	r2, [r7, #20]
 8014ac2:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ac6:	4413      	add	r3, r2
 8014ac8:	881b      	ldrh	r3, [r3, #0]
 8014aca:	0a1b      	lsrs	r3, r3, #8
 8014acc:	b29b      	uxth	r3, r3
 8014ace:	b2da      	uxtb	r2, r3
 8014ad0:	697b      	ldr	r3, [r7, #20]
 8014ad2:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 8014ad4:	697a      	ldr	r2, [r7, #20]
 8014ad6:	f248 0364 	movw	r3, #32868	; 0x8064
 8014ada:	4413      	add	r3, r2
 8014adc:	881b      	ldrh	r3, [r3, #0]
 8014ade:	b2da      	uxtb	r2, r3
 8014ae0:	697b      	ldr	r3, [r7, #20]
 8014ae2:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data_length = 8U;
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	2208      	movs	r2, #8
 8014ae8:	60da      	str	r2, [r3, #12]

  return 0;
 8014aea:	2300      	movs	r3, #0

}
 8014aec:	4618      	mov	r0, r3
 8014aee:	371c      	adds	r7, #28
 8014af0:	46bd      	mov	sp, r7
 8014af2:	bd90      	pop	{r4, r7, pc}

08014af4 <SCSI_ReadCapacity16>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity16(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014af4:	b590      	push	{r4, r7, lr}
 8014af6:	b089      	sub	sp, #36	; 0x24
 8014af8:	af00      	add	r7, sp, #0
 8014afa:	60f8      	str	r0, [r7, #12]
 8014afc:	460b      	mov	r3, r1
 8014afe:	607a      	str	r2, [r7, #4]
 8014b00:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint8_t idx;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014b08:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size);
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014b10:	685c      	ldr	r4, [r3, #4]
 8014b12:	69ba      	ldr	r2, [r7, #24]
 8014b14:	f248 0368 	movw	r3, #32872	; 0x8068
 8014b18:	4413      	add	r3, r2
 8014b1a:	69b9      	ldr	r1, [r7, #24]
 8014b1c:	f248 0264 	movw	r2, #32868	; 0x8064
 8014b20:	440a      	add	r2, r1
 8014b22:	7af8      	ldrb	r0, [r7, #11]
 8014b24:	4619      	mov	r1, r3
 8014b26:	47a0      	blx	r4
 8014b28:	4603      	mov	r3, r0
 8014b2a:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014b2c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014b30:	2b00      	cmp	r3, #0
 8014b32:	d106      	bne.n	8014b42 <SCSI_ReadCapacity16+0x4e>
 8014b34:	69ba      	ldr	r2, [r7, #24]
 8014b36:	f248 0362 	movw	r3, #32866	; 0x8062
 8014b3a:	4413      	add	r3, r2
 8014b3c:	781b      	ldrb	r3, [r3, #0]
 8014b3e:	2b02      	cmp	r3, #2
 8014b40:	d108      	bne.n	8014b54 <SCSI_ReadCapacity16+0x60>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014b42:	7af9      	ldrb	r1, [r7, #11]
 8014b44:	233a      	movs	r3, #58	; 0x3a
 8014b46:	2202      	movs	r2, #2
 8014b48:	68f8      	ldr	r0, [r7, #12]
 8014b4a:	f000 f9df 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8014b4e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b52:	e084      	b.n	8014c5e <SCSI_ReadCapacity16+0x16a>
  }

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b54:	687b      	ldr	r3, [r7, #4]
 8014b56:	330a      	adds	r3, #10
 8014b58:	781b      	ldrb	r3, [r3, #0]
 8014b5a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014b5c:	687b      	ldr	r3, [r7, #4]
 8014b5e:	330b      	adds	r3, #11
 8014b60:	781b      	ldrb	r3, [r3, #0]
 8014b62:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b64:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	330c      	adds	r3, #12
 8014b6a:	781b      	ldrb	r3, [r3, #0]
 8014b6c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014b6e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014b70:	687a      	ldr	r2, [r7, #4]
 8014b72:	320d      	adds	r2, #13
 8014b74:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014b76:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014b78:	69bb      	ldr	r3, [r7, #24]
 8014b7a:	60da      	str	r2, [r3, #12]

  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014b7c:	2300      	movs	r3, #0
 8014b7e:	77fb      	strb	r3, [r7, #31]
 8014b80:	e007      	b.n	8014b92 <SCSI_ReadCapacity16+0x9e>
  {
    hmsc->bot_data[idx] = 0U;
 8014b82:	7ffb      	ldrb	r3, [r7, #31]
 8014b84:	69ba      	ldr	r2, [r7, #24]
 8014b86:	4413      	add	r3, r2
 8014b88:	2200      	movs	r2, #0
 8014b8a:	741a      	strb	r2, [r3, #16]
  for (idx = 0U; idx < hmsc->bot_data_length; idx++)
 8014b8c:	7ffb      	ldrb	r3, [r7, #31]
 8014b8e:	3301      	adds	r3, #1
 8014b90:	77fb      	strb	r3, [r7, #31]
 8014b92:	7ffa      	ldrb	r2, [r7, #31]
 8014b94:	69bb      	ldr	r3, [r7, #24]
 8014b96:	68db      	ldr	r3, [r3, #12]
 8014b98:	429a      	cmp	r2, r3
 8014b9a:	d3f2      	bcc.n	8014b82 <SCSI_ReadCapacity16+0x8e>
  }

  hmsc->bot_data[4] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8014b9c:	69ba      	ldr	r2, [r7, #24]
 8014b9e:	f248 0368 	movw	r3, #32872	; 0x8068
 8014ba2:	4413      	add	r3, r2
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	3b01      	subs	r3, #1
 8014ba8:	0e1b      	lsrs	r3, r3, #24
 8014baa:	b2da      	uxtb	r2, r3
 8014bac:	69bb      	ldr	r3, [r7, #24]
 8014bae:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8014bb0:	69ba      	ldr	r2, [r7, #24]
 8014bb2:	f248 0368 	movw	r3, #32872	; 0x8068
 8014bb6:	4413      	add	r3, r2
 8014bb8:	681b      	ldr	r3, [r3, #0]
 8014bba:	3b01      	subs	r3, #1
 8014bbc:	0c1b      	lsrs	r3, r3, #16
 8014bbe:	b2da      	uxtb	r2, r3
 8014bc0:	69bb      	ldr	r3, [r7, #24]
 8014bc2:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8014bc4:	69ba      	ldr	r2, [r7, #24]
 8014bc6:	f248 0368 	movw	r3, #32872	; 0x8068
 8014bca:	4413      	add	r3, r2
 8014bcc:	681b      	ldr	r3, [r3, #0]
 8014bce:	3b01      	subs	r3, #1
 8014bd0:	0a1b      	lsrs	r3, r3, #8
 8014bd2:	b2da      	uxtb	r2, r3
 8014bd4:	69bb      	ldr	r3, [r7, #24]
 8014bd6:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8014bd8:	69ba      	ldr	r2, [r7, #24]
 8014bda:	f248 0368 	movw	r3, #32872	; 0x8068
 8014bde:	4413      	add	r3, r2
 8014be0:	681b      	ldr	r3, [r3, #0]
 8014be2:	b2db      	uxtb	r3, r3
 8014be4:	3b01      	subs	r3, #1
 8014be6:	b2da      	uxtb	r2, r3
 8014be8:	69bb      	ldr	r3, [r7, #24]
 8014bea:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 8014bec:	69ba      	ldr	r2, [r7, #24]
 8014bee:	f248 0364 	movw	r3, #32868	; 0x8064
 8014bf2:	4413      	add	r3, r2
 8014bf4:	881b      	ldrh	r3, [r3, #0]
 8014bf6:	161b      	asrs	r3, r3, #24
 8014bf8:	b2da      	uxtb	r2, r3
 8014bfa:	69bb      	ldr	r3, [r7, #24]
 8014bfc:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 8014bfe:	69ba      	ldr	r2, [r7, #24]
 8014c00:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c04:	4413      	add	r3, r2
 8014c06:	881b      	ldrh	r3, [r3, #0]
 8014c08:	141b      	asrs	r3, r3, #16
 8014c0a:	b2da      	uxtb	r2, r3
 8014c0c:	69bb      	ldr	r3, [r7, #24]
 8014c0e:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 8014c10:	69ba      	ldr	r2, [r7, #24]
 8014c12:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c16:	4413      	add	r3, r2
 8014c18:	881b      	ldrh	r3, [r3, #0]
 8014c1a:	0a1b      	lsrs	r3, r3, #8
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	b2da      	uxtb	r2, r3
 8014c20:	69bb      	ldr	r3, [r7, #24]
 8014c22:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(hmsc->scsi_blk_size);
 8014c24:	69ba      	ldr	r2, [r7, #24]
 8014c26:	f248 0364 	movw	r3, #32868	; 0x8064
 8014c2a:	4413      	add	r3, r2
 8014c2c:	881b      	ldrh	r3, [r3, #0]
 8014c2e:	b2da      	uxtb	r2, r3
 8014c30:	69bb      	ldr	r3, [r7, #24]
 8014c32:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	330a      	adds	r3, #10
 8014c38:	781b      	ldrb	r3, [r3, #0]
 8014c3a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[11] << 16) |
 8014c3c:	687b      	ldr	r3, [r7, #4]
 8014c3e:	330b      	adds	r3, #11
 8014c40:	781b      	ldrb	r3, [r3, #0]
 8014c42:	041b      	lsls	r3, r3, #16
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014c44:	431a      	orrs	r2, r3
                          ((uint32_t)params[12] <<  8) |
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	330c      	adds	r3, #12
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[11] << 16) |
 8014c4e:	4313      	orrs	r3, r2
                           (uint32_t)params[13];
 8014c50:	687a      	ldr	r2, [r7, #4]
 8014c52:	320d      	adds	r2, #13
 8014c54:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[12] <<  8) |
 8014c56:	431a      	orrs	r2, r3
  hmsc->bot_data_length = ((uint32_t)params[10] << 24) |
 8014c58:	69bb      	ldr	r3, [r7, #24]
 8014c5a:	60da      	str	r2, [r3, #12]

  return 0;
 8014c5c:	2300      	movs	r3, #0
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3724      	adds	r7, #36	; 0x24
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd90      	pop	{r4, r7, pc}

08014c66 <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014c66:	b580      	push	{r7, lr}
 8014c68:	b088      	sub	sp, #32
 8014c6a:	af00      	add	r7, sp, #0
 8014c6c:	60f8      	str	r0, [r7, #12]
 8014c6e:	460b      	mov	r3, r1
 8014c70:	607a      	str	r2, [r7, #4]
 8014c72:	72fb      	strb	r3, [r7, #11]
  UNUSED(params);
  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;
  int8_t ret;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014c74:	68fb      	ldr	r3, [r7, #12]
 8014c76:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014c7a:	61bb      	str	r3, [r7, #24]

  ret = ((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size);
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8014c82:	685b      	ldr	r3, [r3, #4]
 8014c84:	f107 0214 	add.w	r2, r7, #20
 8014c88:	f107 0110 	add.w	r1, r7, #16
 8014c8c:	7af8      	ldrb	r0, [r7, #11]
 8014c8e:	4798      	blx	r3
 8014c90:	4603      	mov	r3, r0
 8014c92:	75fb      	strb	r3, [r7, #23]

  if ((ret != 0) || (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED))
 8014c94:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	d106      	bne.n	8014caa <SCSI_ReadFormatCapacity+0x44>
 8014c9c:	69ba      	ldr	r2, [r7, #24]
 8014c9e:	f248 0362 	movw	r3, #32866	; 0x8062
 8014ca2:	4413      	add	r3, r2
 8014ca4:	781b      	ldrb	r3, [r3, #0]
 8014ca6:	2b02      	cmp	r3, #2
 8014ca8:	d108      	bne.n	8014cbc <SCSI_ReadFormatCapacity+0x56>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8014caa:	7af9      	ldrb	r1, [r7, #11]
 8014cac:	233a      	movs	r3, #58	; 0x3a
 8014cae:	2202      	movs	r2, #2
 8014cb0:	68f8      	ldr	r0, [r7, #12]
 8014cb2:	f000 f92b 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8014cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cba:	e03e      	b.n	8014d3a <SCSI_ReadFormatCapacity+0xd4>
  }

  for (i = 0U; i < 12U ; i++)
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	83fb      	strh	r3, [r7, #30]
 8014cc0:	e007      	b.n	8014cd2 <SCSI_ReadFormatCapacity+0x6c>
  {
    hmsc->bot_data[i] = 0U;
 8014cc2:	8bfb      	ldrh	r3, [r7, #30]
 8014cc4:	69ba      	ldr	r2, [r7, #24]
 8014cc6:	4413      	add	r3, r2
 8014cc8:	2200      	movs	r2, #0
 8014cca:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < 12U ; i++)
 8014ccc:	8bfb      	ldrh	r3, [r7, #30]
 8014cce:	3301      	adds	r3, #1
 8014cd0:	83fb      	strh	r3, [r7, #30]
 8014cd2:	8bfb      	ldrh	r3, [r7, #30]
 8014cd4:	2b0b      	cmp	r3, #11
 8014cd6:	d9f4      	bls.n	8014cc2 <SCSI_ReadFormatCapacity+0x5c>
  }

  hmsc->bot_data[3] = 0x08U;
 8014cd8:	69bb      	ldr	r3, [r7, #24]
 8014cda:	2208      	movs	r2, #8
 8014cdc:	74da      	strb	r2, [r3, #19]
  hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	3b01      	subs	r3, #1
 8014ce2:	0e1b      	lsrs	r3, r3, #24
 8014ce4:	b2da      	uxtb	r2, r3
 8014ce6:	69bb      	ldr	r3, [r7, #24]
 8014ce8:	751a      	strb	r2, [r3, #20]
  hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 8014cea:	693b      	ldr	r3, [r7, #16]
 8014cec:	3b01      	subs	r3, #1
 8014cee:	0c1b      	lsrs	r3, r3, #16
 8014cf0:	b2da      	uxtb	r2, r3
 8014cf2:	69bb      	ldr	r3, [r7, #24]
 8014cf4:	755a      	strb	r2, [r3, #21]
  hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 8014cf6:	693b      	ldr	r3, [r7, #16]
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	0a1b      	lsrs	r3, r3, #8
 8014cfc:	b2da      	uxtb	r2, r3
 8014cfe:	69bb      	ldr	r3, [r7, #24]
 8014d00:	759a      	strb	r2, [r3, #22]
  hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8014d02:	693b      	ldr	r3, [r7, #16]
 8014d04:	b2db      	uxtb	r3, r3
 8014d06:	3b01      	subs	r3, #1
 8014d08:	b2da      	uxtb	r2, r3
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	75da      	strb	r2, [r3, #23]

  hmsc->bot_data[8] = 0x02U;
 8014d0e:	69bb      	ldr	r3, [r7, #24]
 8014d10:	2202      	movs	r2, #2
 8014d12:	761a      	strb	r2, [r3, #24]
  hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8014d14:	8abb      	ldrh	r3, [r7, #20]
 8014d16:	141b      	asrs	r3, r3, #16
 8014d18:	b2da      	uxtb	r2, r3
 8014d1a:	69bb      	ldr	r3, [r7, #24]
 8014d1c:	765a      	strb	r2, [r3, #25]
  hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8014d1e:	8abb      	ldrh	r3, [r7, #20]
 8014d20:	0a1b      	lsrs	r3, r3, #8
 8014d22:	b29b      	uxth	r3, r3
 8014d24:	b2da      	uxtb	r2, r3
 8014d26:	69bb      	ldr	r3, [r7, #24]
 8014d28:	769a      	strb	r2, [r3, #26]
  hmsc->bot_data[11] = (uint8_t)(blk_size);
 8014d2a:	8abb      	ldrh	r3, [r7, #20]
 8014d2c:	b2da      	uxtb	r2, r3
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	76da      	strb	r2, [r3, #27]

  hmsc->bot_data_length = 12U;
 8014d32:	69bb      	ldr	r3, [r7, #24]
 8014d34:	220c      	movs	r2, #12
 8014d36:	60da      	str	r2, [r3, #12]

  return 0;
 8014d38:	2300      	movs	r3, #0
}
 8014d3a:	4618      	mov	r0, r3
 8014d3c:	3720      	adds	r7, #32
 8014d3e:	46bd      	mov	sp, r7
 8014d40:	bd80      	pop	{r7, pc}
	...

08014d44 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d44:	b580      	push	{r7, lr}
 8014d46:	b086      	sub	sp, #24
 8014d48:	af00      	add	r7, sp, #0
 8014d4a:	60f8      	str	r0, [r7, #12]
 8014d4c:	460b      	mov	r3, r1
 8014d4e:	607a      	str	r2, [r7, #4]
 8014d50:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d52:	68fb      	ldr	r3, [r7, #12]
 8014d54:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014d58:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE6_LEN;
 8014d5a:	2317      	movs	r3, #23
 8014d5c:	82fb      	strh	r3, [r7, #22]

  if (params[4] <= len)
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	3304      	adds	r3, #4
 8014d62:	781b      	ldrb	r3, [r3, #0]
 8014d64:	b29b      	uxth	r3, r3
 8014d66:	8afa      	ldrh	r2, [r7, #22]
 8014d68:	429a      	cmp	r2, r3
 8014d6a:	d303      	bcc.n	8014d74 <SCSI_ModeSense6+0x30>
  {
    len = params[4];
 8014d6c:	687b      	ldr	r3, [r7, #4]
 8014d6e:	3304      	adds	r3, #4
 8014d70:	781b      	ldrb	r3, [r3, #0]
 8014d72:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense6_data, len);
 8014d74:	8afb      	ldrh	r3, [r7, #22]
 8014d76:	461a      	mov	r2, r3
 8014d78:	4904      	ldr	r1, [pc, #16]	; (8014d8c <SCSI_ModeSense6+0x48>)
 8014d7a:	6938      	ldr	r0, [r7, #16]
 8014d7c:	f000 fe54 	bl	8015a28 <SCSI_UpdateBotData>

  return 0;
 8014d80:	2300      	movs	r3, #0
}
 8014d82:	4618      	mov	r0, r3
 8014d84:	3718      	adds	r7, #24
 8014d86:	46bd      	mov	sp, r7
 8014d88:	bd80      	pop	{r7, pc}
 8014d8a:	bf00      	nop
 8014d8c:	240000d4 	.word	0x240000d4

08014d90 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014d90:	b580      	push	{r7, lr}
 8014d92:	b086      	sub	sp, #24
 8014d94:	af00      	add	r7, sp, #0
 8014d96:	60f8      	str	r0, [r7, #12]
 8014d98:	460b      	mov	r3, r1
 8014d9a:	607a      	str	r2, [r7, #4]
 8014d9c:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014d9e:	68fb      	ldr	r3, [r7, #12]
 8014da0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014da4:	613b      	str	r3, [r7, #16]
  uint16_t len = MODE_SENSE10_LEN;
 8014da6:	231b      	movs	r3, #27
 8014da8:	82fb      	strh	r3, [r7, #22]

  if (params[8] <= len)
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	3308      	adds	r3, #8
 8014dae:	781b      	ldrb	r3, [r3, #0]
 8014db0:	b29b      	uxth	r3, r3
 8014db2:	8afa      	ldrh	r2, [r7, #22]
 8014db4:	429a      	cmp	r2, r3
 8014db6:	d303      	bcc.n	8014dc0 <SCSI_ModeSense10+0x30>
  {
    len = params[8];
 8014db8:	687b      	ldr	r3, [r7, #4]
 8014dba:	3308      	adds	r3, #8
 8014dbc:	781b      	ldrb	r3, [r3, #0]
 8014dbe:	82fb      	strh	r3, [r7, #22]
  }

  (void)SCSI_UpdateBotData(hmsc, MSC_Mode_Sense10_data, len);
 8014dc0:	8afb      	ldrh	r3, [r7, #22]
 8014dc2:	461a      	mov	r2, r3
 8014dc4:	4904      	ldr	r1, [pc, #16]	; (8014dd8 <SCSI_ModeSense10+0x48>)
 8014dc6:	6938      	ldr	r0, [r7, #16]
 8014dc8:	f000 fe2e 	bl	8015a28 <SCSI_UpdateBotData>

  return 0;
 8014dcc:	2300      	movs	r3, #0
}
 8014dce:	4618      	mov	r0, r3
 8014dd0:	3718      	adds	r7, #24
 8014dd2:	46bd      	mov	sp, r7
 8014dd4:	bd80      	pop	{r7, pc}
 8014dd6:	bf00      	nop
 8014dd8:	240000ec 	.word	0x240000ec

08014ddc <SCSI_RequestSense>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_RequestSense(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014ddc:	b580      	push	{r7, lr}
 8014dde:	b086      	sub	sp, #24
 8014de0:	af00      	add	r7, sp, #0
 8014de2:	60f8      	str	r0, [r7, #12]
 8014de4:	460b      	mov	r3, r1
 8014de6:	607a      	str	r2, [r7, #4]
 8014de8:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014dea:	68fb      	ldr	r3, [r7, #12]
 8014dec:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014df0:	613b      	str	r3, [r7, #16]

  if (hmsc->cbw.dDataLength == 0U)
 8014df2:	693a      	ldr	r2, [r7, #16]
 8014df4:	f248 0318 	movw	r3, #32792	; 0x8018
 8014df8:	4413      	add	r3, r2
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d10c      	bne.n	8014e1a <SCSI_RequestSense+0x3e>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8014e00:	693a      	ldr	r2, [r7, #16]
 8014e02:	f248 031d 	movw	r3, #32797	; 0x801d
 8014e06:	4413      	add	r3, r2
 8014e08:	7819      	ldrb	r1, [r3, #0]
 8014e0a:	2320      	movs	r3, #32
 8014e0c:	2205      	movs	r2, #5
 8014e0e:	68f8      	ldr	r0, [r7, #12]
 8014e10:	f000 f87c 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8014e14:	f04f 33ff 	mov.w	r3, #4294967295
 8014e18:	e074      	b.n	8014f04 <SCSI_RequestSense+0x128>
  }

  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014e1a:	2300      	movs	r3, #0
 8014e1c:	75fb      	strb	r3, [r7, #23]
 8014e1e:	e007      	b.n	8014e30 <SCSI_RequestSense+0x54>
  {
    hmsc->bot_data[i] = 0U;
 8014e20:	7dfb      	ldrb	r3, [r7, #23]
 8014e22:	693a      	ldr	r2, [r7, #16]
 8014e24:	4413      	add	r3, r2
 8014e26:	2200      	movs	r2, #0
 8014e28:	741a      	strb	r2, [r3, #16]
  for (i = 0U; i < REQUEST_SENSE_DATA_LEN; i++)
 8014e2a:	7dfb      	ldrb	r3, [r7, #23]
 8014e2c:	3301      	adds	r3, #1
 8014e2e:	75fb      	strb	r3, [r7, #23]
 8014e30:	7dfb      	ldrb	r3, [r7, #23]
 8014e32:	2b11      	cmp	r3, #17
 8014e34:	d9f4      	bls.n	8014e20 <SCSI_RequestSense+0x44>
  }

  hmsc->bot_data[0] = 0x70U;
 8014e36:	693b      	ldr	r3, [r7, #16]
 8014e38:	2270      	movs	r2, #112	; 0x70
 8014e3a:	741a      	strb	r2, [r3, #16]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8014e3c:	693b      	ldr	r3, [r7, #16]
 8014e3e:	220c      	movs	r2, #12
 8014e40:	75da      	strb	r2, [r3, #23]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8014e42:	693a      	ldr	r2, [r7, #16]
 8014e44:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e48:	4413      	add	r3, r2
 8014e4a:	781a      	ldrb	r2, [r3, #0]
 8014e4c:	6939      	ldr	r1, [r7, #16]
 8014e4e:	f248 0361 	movw	r3, #32865	; 0x8061
 8014e52:	440b      	add	r3, r1
 8014e54:	781b      	ldrb	r3, [r3, #0]
 8014e56:	429a      	cmp	r2, r3
 8014e58:	d045      	beq.n	8014ee6 <SCSI_RequestSense+0x10a>
  {
    hmsc->bot_data[2] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8014e5a:	693a      	ldr	r2, [r7, #16]
 8014e5c:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e60:	4413      	add	r3, r2
 8014e62:	781b      	ldrb	r3, [r3, #0]
 8014e64:	4619      	mov	r1, r3
 8014e66:	693a      	ldr	r2, [r7, #16]
 8014e68:	f241 0308 	movw	r3, #4104	; 0x1008
 8014e6c:	440b      	add	r3, r1
 8014e6e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
 8014e72:	693b      	ldr	r3, [r7, #16]
 8014e74:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[12] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8014e76:	693a      	ldr	r2, [r7, #16]
 8014e78:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e7c:	4413      	add	r3, r2
 8014e7e:	781b      	ldrb	r3, [r3, #0]
 8014e80:	4619      	mov	r1, r3
 8014e82:	693a      	ldr	r2, [r7, #16]
 8014e84:	f241 0308 	movw	r3, #4104	; 0x1008
 8014e88:	440b      	add	r3, r1
 8014e8a:	00db      	lsls	r3, r3, #3
 8014e8c:	4413      	add	r3, r2
 8014e8e:	791a      	ldrb	r2, [r3, #4]
 8014e90:	693b      	ldr	r3, [r7, #16]
 8014e92:	771a      	strb	r2, [r3, #28]
    hmsc->bot_data[13] = (uint8_t)hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8014e94:	693a      	ldr	r2, [r7, #16]
 8014e96:	f248 0360 	movw	r3, #32864	; 0x8060
 8014e9a:	4413      	add	r3, r2
 8014e9c:	781b      	ldrb	r3, [r3, #0]
 8014e9e:	4619      	mov	r1, r3
 8014ea0:	693a      	ldr	r2, [r7, #16]
 8014ea2:	f241 0308 	movw	r3, #4104	; 0x1008
 8014ea6:	440b      	add	r3, r1
 8014ea8:	00db      	lsls	r3, r3, #3
 8014eaa:	4413      	add	r3, r2
 8014eac:	795a      	ldrb	r2, [r3, #5]
 8014eae:	693b      	ldr	r3, [r7, #16]
 8014eb0:	775a      	strb	r2, [r3, #29]
    hmsc->scsi_sense_head++;
 8014eb2:	693a      	ldr	r2, [r7, #16]
 8014eb4:	f248 0360 	movw	r3, #32864	; 0x8060
 8014eb8:	4413      	add	r3, r2
 8014eba:	781b      	ldrb	r3, [r3, #0]
 8014ebc:	3301      	adds	r3, #1
 8014ebe:	b2d9      	uxtb	r1, r3
 8014ec0:	693a      	ldr	r2, [r7, #16]
 8014ec2:	f248 0360 	movw	r3, #32864	; 0x8060
 8014ec6:	4413      	add	r3, r2
 8014ec8:	460a      	mov	r2, r1
 8014eca:	701a      	strb	r2, [r3, #0]

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8014ecc:	693a      	ldr	r2, [r7, #16]
 8014ece:	f248 0360 	movw	r3, #32864	; 0x8060
 8014ed2:	4413      	add	r3, r2
 8014ed4:	781b      	ldrb	r3, [r3, #0]
 8014ed6:	2b04      	cmp	r3, #4
 8014ed8:	d105      	bne.n	8014ee6 <SCSI_RequestSense+0x10a>
    {
      hmsc->scsi_sense_head = 0U;
 8014eda:	693a      	ldr	r2, [r7, #16]
 8014edc:	f248 0360 	movw	r3, #32864	; 0x8060
 8014ee0:	4413      	add	r3, r2
 8014ee2:	2200      	movs	r2, #0
 8014ee4:	701a      	strb	r2, [r3, #0]
    }
  }

  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8014ee6:	693b      	ldr	r3, [r7, #16]
 8014ee8:	2212      	movs	r2, #18
 8014eea:	60da      	str	r2, [r3, #12]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	3304      	adds	r3, #4
 8014ef0:	781b      	ldrb	r3, [r3, #0]
 8014ef2:	2b12      	cmp	r3, #18
 8014ef4:	d805      	bhi.n	8014f02 <SCSI_RequestSense+0x126>
  {
    hmsc->bot_data_length = params[4];
 8014ef6:	687b      	ldr	r3, [r7, #4]
 8014ef8:	3304      	adds	r3, #4
 8014efa:	781b      	ldrb	r3, [r3, #0]
 8014efc:	461a      	mov	r2, r3
 8014efe:	693b      	ldr	r3, [r7, #16]
 8014f00:	60da      	str	r2, [r3, #12]
  }

  return 0;
 8014f02:	2300      	movs	r3, #0
}
 8014f04:	4618      	mov	r0, r3
 8014f06:	3718      	adds	r7, #24
 8014f08:	46bd      	mov	sp, r7
 8014f0a:	bd80      	pop	{r7, pc}

08014f0c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Code
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8014f0c:	b480      	push	{r7}
 8014f0e:	b085      	sub	sp, #20
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
 8014f14:	4608      	mov	r0, r1
 8014f16:	4611      	mov	r1, r2
 8014f18:	461a      	mov	r2, r3
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	70fb      	strb	r3, [r7, #3]
 8014f1e:	460b      	mov	r3, r1
 8014f20:	70bb      	strb	r3, [r7, #2]
 8014f22:	4613      	mov	r3, r2
 8014f24:	707b      	strb	r3, [r7, #1]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014f2c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey = sKey;
 8014f2e:	68fa      	ldr	r2, [r7, #12]
 8014f30:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f34:	4413      	add	r3, r2
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	4619      	mov	r1, r3
 8014f3a:	68fa      	ldr	r2, [r7, #12]
 8014f3c:	f241 0308 	movw	r3, #4104	; 0x1008
 8014f40:	440b      	add	r3, r1
 8014f42:	78b9      	ldrb	r1, [r7, #2]
 8014f44:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASC = ASC;
 8014f48:	68fa      	ldr	r2, [r7, #12]
 8014f4a:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f4e:	4413      	add	r3, r2
 8014f50:	781b      	ldrb	r3, [r3, #0]
 8014f52:	4619      	mov	r1, r3
 8014f54:	68fa      	ldr	r2, [r7, #12]
 8014f56:	f241 0308 	movw	r3, #4104	; 0x1008
 8014f5a:	440b      	add	r3, r1
 8014f5c:	00db      	lsls	r3, r3, #3
 8014f5e:	4413      	add	r3, r2
 8014f60:	787a      	ldrb	r2, [r7, #1]
 8014f62:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.b.ASCQ = 0U;
 8014f64:	68fa      	ldr	r2, [r7, #12]
 8014f66:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f6a:	4413      	add	r3, r2
 8014f6c:	781b      	ldrb	r3, [r3, #0]
 8014f6e:	4619      	mov	r1, r3
 8014f70:	68fa      	ldr	r2, [r7, #12]
 8014f72:	f241 0308 	movw	r3, #4104	; 0x1008
 8014f76:	440b      	add	r3, r1
 8014f78:	00db      	lsls	r3, r3, #3
 8014f7a:	4413      	add	r3, r2
 8014f7c:	2200      	movs	r2, #0
 8014f7e:	715a      	strb	r2, [r3, #5]
  hmsc->scsi_sense_tail++;
 8014f80:	68fa      	ldr	r2, [r7, #12]
 8014f82:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f86:	4413      	add	r3, r2
 8014f88:	781b      	ldrb	r3, [r3, #0]
 8014f8a:	3301      	adds	r3, #1
 8014f8c:	b2d9      	uxtb	r1, r3
 8014f8e:	68fa      	ldr	r2, [r7, #12]
 8014f90:	f248 0361 	movw	r3, #32865	; 0x8061
 8014f94:	4413      	add	r3, r2
 8014f96:	460a      	mov	r2, r1
 8014f98:	701a      	strb	r2, [r3, #0]

  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8014f9a:	68fa      	ldr	r2, [r7, #12]
 8014f9c:	f248 0361 	movw	r3, #32865	; 0x8061
 8014fa0:	4413      	add	r3, r2
 8014fa2:	781b      	ldrb	r3, [r3, #0]
 8014fa4:	2b04      	cmp	r3, #4
 8014fa6:	d105      	bne.n	8014fb4 <SCSI_SenseCode+0xa8>
  {
    hmsc->scsi_sense_tail = 0U;
 8014fa8:	68fa      	ldr	r2, [r7, #12]
 8014faa:	f248 0361 	movw	r3, #32865	; 0x8061
 8014fae:	4413      	add	r3, r2
 8014fb0:	2200      	movs	r2, #0
 8014fb2:	701a      	strb	r2, [r3, #0]
  }
}
 8014fb4:	bf00      	nop
 8014fb6:	3714      	adds	r7, #20
 8014fb8:	46bd      	mov	sp, r7
 8014fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fbe:	4770      	bx	lr

08014fc0 <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8014fc0:	b580      	push	{r7, lr}
 8014fc2:	b086      	sub	sp, #24
 8014fc4:	af00      	add	r7, sp, #0
 8014fc6:	60f8      	str	r0, [r7, #12]
 8014fc8:	460b      	mov	r3, r1
 8014fca:	607a      	str	r2, [r7, #4]
 8014fcc:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fd4:	617b      	str	r3, [r7, #20]

  if ((hmsc->scsi_medium_state == SCSI_MEDIUM_LOCKED) && ((params[4] & 0x3U) == 2U))
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	f248 0362 	movw	r3, #32866	; 0x8062
 8014fdc:	4413      	add	r3, r2
 8014fde:	781b      	ldrb	r3, [r3, #0]
 8014fe0:	2b01      	cmp	r3, #1
 8014fe2:	d10f      	bne.n	8015004 <SCSI_StartStopUnit+0x44>
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	3304      	adds	r3, #4
 8014fe8:	781b      	ldrb	r3, [r3, #0]
 8014fea:	f003 0303 	and.w	r3, r3, #3
 8014fee:	2b02      	cmp	r3, #2
 8014ff0:	d108      	bne.n	8015004 <SCSI_StartStopUnit+0x44>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8014ff2:	7af9      	ldrb	r1, [r7, #11]
 8014ff4:	2324      	movs	r3, #36	; 0x24
 8014ff6:	2205      	movs	r2, #5
 8014ff8:	68f8      	ldr	r0, [r7, #12]
 8014ffa:	f7ff ff87 	bl	8014f0c <SCSI_SenseCode>

    return -1;
 8014ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8015002:	e02c      	b.n	801505e <SCSI_StartStopUnit+0x9e>
  }

  if ((params[4] & 0x3U) == 0x1U) /* START=1 */
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	3304      	adds	r3, #4
 8015008:	781b      	ldrb	r3, [r3, #0]
 801500a:	f003 0303 	and.w	r3, r3, #3
 801500e:	2b01      	cmp	r3, #1
 8015010:	d106      	bne.n	8015020 <SCSI_StartStopUnit+0x60>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015012:	697a      	ldr	r2, [r7, #20]
 8015014:	f248 0362 	movw	r3, #32866	; 0x8062
 8015018:	4413      	add	r3, r2
 801501a:	2200      	movs	r2, #0
 801501c:	701a      	strb	r2, [r3, #0]
 801501e:	e01a      	b.n	8015056 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x2U) /* START=0 and LOEJ Load Eject=1 */
 8015020:	687b      	ldr	r3, [r7, #4]
 8015022:	3304      	adds	r3, #4
 8015024:	781b      	ldrb	r3, [r3, #0]
 8015026:	f003 0303 	and.w	r3, r3, #3
 801502a:	2b02      	cmp	r3, #2
 801502c:	d106      	bne.n	801503c <SCSI_StartStopUnit+0x7c>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_EJECTED;
 801502e:	697a      	ldr	r2, [r7, #20]
 8015030:	f248 0362 	movw	r3, #32866	; 0x8062
 8015034:	4413      	add	r3, r2
 8015036:	2202      	movs	r2, #2
 8015038:	701a      	strb	r2, [r3, #0]
 801503a:	e00c      	b.n	8015056 <SCSI_StartStopUnit+0x96>
  }
  else if ((params[4] & 0x3U) == 0x3U) /* START=1 and LOEJ Load Eject=1 */
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	3304      	adds	r3, #4
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	f003 0303 	and.w	r3, r3, #3
 8015046:	2b03      	cmp	r3, #3
 8015048:	d105      	bne.n	8015056 <SCSI_StartStopUnit+0x96>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 801504a:	697a      	ldr	r2, [r7, #20]
 801504c:	f248 0362 	movw	r3, #32866	; 0x8062
 8015050:	4413      	add	r3, r2
 8015052:	2200      	movs	r2, #0
 8015054:	701a      	strb	r2, [r3, #0]
  }
  else
  {
    /* .. */
  }
  hmsc->bot_data_length = 0U;
 8015056:	697b      	ldr	r3, [r7, #20]
 8015058:	2200      	movs	r2, #0
 801505a:	60da      	str	r2, [r3, #12]

  return 0;
 801505c:	2300      	movs	r3, #0
}
 801505e:	4618      	mov	r0, r3
 8015060:	3718      	adds	r7, #24
 8015062:	46bd      	mov	sp, r7
 8015064:	bd80      	pop	{r7, pc}

08015066 <SCSI_AllowPreventRemovable>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_AllowPreventRemovable(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015066:	b480      	push	{r7}
 8015068:	b087      	sub	sp, #28
 801506a:	af00      	add	r7, sp, #0
 801506c:	60f8      	str	r0, [r7, #12]
 801506e:	460b      	mov	r3, r1
 8015070:	607a      	str	r2, [r7, #4]
 8015072:	72fb      	strb	r3, [r7, #11]
  UNUSED(lun);
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015074:	68fb      	ldr	r3, [r7, #12]
 8015076:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801507a:	617b      	str	r3, [r7, #20]

  if (params[4] == 0U)
 801507c:	687b      	ldr	r3, [r7, #4]
 801507e:	3304      	adds	r3, #4
 8015080:	781b      	ldrb	r3, [r3, #0]
 8015082:	2b00      	cmp	r3, #0
 8015084:	d106      	bne.n	8015094 <SCSI_AllowPreventRemovable+0x2e>
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_UNLOCKED;
 8015086:	697a      	ldr	r2, [r7, #20]
 8015088:	f248 0362 	movw	r3, #32866	; 0x8062
 801508c:	4413      	add	r3, r2
 801508e:	2200      	movs	r2, #0
 8015090:	701a      	strb	r2, [r3, #0]
 8015092:	e005      	b.n	80150a0 <SCSI_AllowPreventRemovable+0x3a>
  }
  else
  {
    hmsc->scsi_medium_state = SCSI_MEDIUM_LOCKED;
 8015094:	697a      	ldr	r2, [r7, #20]
 8015096:	f248 0362 	movw	r3, #32866	; 0x8062
 801509a:	4413      	add	r3, r2
 801509c:	2201      	movs	r2, #1
 801509e:	701a      	strb	r2, [r3, #0]
  }

  hmsc->bot_data_length = 0U;
 80150a0:	697b      	ldr	r3, [r7, #20]
 80150a2:	2200      	movs	r2, #0
 80150a4:	60da      	str	r2, [r3, #12]

  return 0;
 80150a6:	2300      	movs	r3, #0
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	371c      	adds	r7, #28
 80150ac:	46bd      	mov	sp, r7
 80150ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80150b2:	4770      	bx	lr

080150b4 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 80150b4:	b580      	push	{r7, lr}
 80150b6:	b086      	sub	sp, #24
 80150b8:	af00      	add	r7, sp, #0
 80150ba:	60f8      	str	r0, [r7, #12]
 80150bc:	460b      	mov	r3, r1
 80150be:	607a      	str	r2, [r7, #4]
 80150c0:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80150c2:	68fb      	ldr	r3, [r7, #12]
 80150c4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80150c8:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80150ca:	697b      	ldr	r3, [r7, #20]
 80150cc:	7a1b      	ldrb	r3, [r3, #8]
 80150ce:	2b00      	cmp	r3, #0
 80150d0:	f040 8094 	bne.w	80151fc <SCSI_Read10+0x148>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 80150d4:	697a      	ldr	r2, [r7, #20]
 80150d6:	f248 031c 	movw	r3, #32796	; 0x801c
 80150da:	4413      	add	r3, r2
 80150dc:	781b      	ldrb	r3, [r3, #0]
 80150de:	b25b      	sxtb	r3, r3
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	db0c      	blt.n	80150fe <SCSI_Read10+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80150e4:	697a      	ldr	r2, [r7, #20]
 80150e6:	f248 031d 	movw	r3, #32797	; 0x801d
 80150ea:	4413      	add	r3, r2
 80150ec:	7819      	ldrb	r1, [r3, #0]
 80150ee:	2320      	movs	r3, #32
 80150f0:	2205      	movs	r2, #5
 80150f2:	68f8      	ldr	r0, [r7, #12]
 80150f4:	f7ff ff0a 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80150f8:	f04f 33ff 	mov.w	r3, #4294967295
 80150fc:	e088      	b.n	8015210 <SCSI_Read10+0x15c>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 80150fe:	697a      	ldr	r2, [r7, #20]
 8015100:	f248 0362 	movw	r3, #32866	; 0x8062
 8015104:	4413      	add	r3, r2
 8015106:	781b      	ldrb	r3, [r3, #0]
 8015108:	2b02      	cmp	r3, #2
 801510a:	d108      	bne.n	801511e <SCSI_Read10+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 801510c:	7af9      	ldrb	r1, [r7, #11]
 801510e:	233a      	movs	r3, #58	; 0x3a
 8015110:	2202      	movs	r2, #2
 8015112:	68f8      	ldr	r0, [r7, #12]
 8015114:	f7ff fefa 	bl	8014f0c <SCSI_SenseCode>

      return -1;
 8015118:	f04f 33ff 	mov.w	r3, #4294967295
 801511c:	e078      	b.n	8015210 <SCSI_Read10+0x15c>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 801511e:	68fb      	ldr	r3, [r7, #12]
 8015120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015124:	689b      	ldr	r3, [r3, #8]
 8015126:	7afa      	ldrb	r2, [r7, #11]
 8015128:	4610      	mov	r0, r2
 801512a:	4798      	blx	r3
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	d008      	beq.n	8015144 <SCSI_Read10+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015132:	7af9      	ldrb	r1, [r7, #11]
 8015134:	233a      	movs	r3, #58	; 0x3a
 8015136:	2202      	movs	r2, #2
 8015138:	68f8      	ldr	r0, [r7, #12]
 801513a:	f7ff fee7 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 801513e:	f04f 33ff 	mov.w	r3, #4294967295
 8015142:	e065      	b.n	8015210 <SCSI_Read10+0x15c>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	3302      	adds	r3, #2
 8015148:	781b      	ldrb	r3, [r3, #0]
 801514a:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	3303      	adds	r3, #3
 8015150:	781b      	ldrb	r3, [r3, #0]
 8015152:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015154:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	3304      	adds	r3, #4
 801515a:	781b      	ldrb	r3, [r3, #0]
 801515c:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 801515e:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015160:	687a      	ldr	r2, [r7, #4]
 8015162:	3205      	adds	r2, #5
 8015164:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8015166:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015168:	6979      	ldr	r1, [r7, #20]
 801516a:	f248 036c 	movw	r3, #32876	; 0x806c
 801516e:	440b      	add	r3, r1
 8015170:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3307      	adds	r3, #7
 8015176:	781b      	ldrb	r3, [r3, #0]
 8015178:	021b      	lsls	r3, r3, #8
 801517a:	687a      	ldr	r2, [r7, #4]
 801517c:	3208      	adds	r2, #8
 801517e:	7812      	ldrb	r2, [r2, #0]
 8015180:	431a      	orrs	r2, r3
 8015182:	6979      	ldr	r1, [r7, #20]
 8015184:	f248 0370 	movw	r3, #32880	; 0x8070
 8015188:	440b      	add	r3, r1
 801518a:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 801518c:	697a      	ldr	r2, [r7, #20]
 801518e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015192:	4413      	add	r3, r2
 8015194:	6818      	ldr	r0, [r3, #0]
 8015196:	697a      	ldr	r2, [r7, #20]
 8015198:	f248 0370 	movw	r3, #32880	; 0x8070
 801519c:	4413      	add	r3, r2
 801519e:	681b      	ldr	r3, [r3, #0]
 80151a0:	7af9      	ldrb	r1, [r7, #11]
 80151a2:	4602      	mov	r2, r0
 80151a4:	68f8      	ldr	r0, [r7, #12]
 80151a6:	f000 faeb 	bl	8015780 <SCSI_CheckAddressRange>
 80151aa:	4603      	mov	r3, r0
 80151ac:	2b00      	cmp	r3, #0
 80151ae:	da02      	bge.n	80151b6 <SCSI_Read10+0x102>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80151b0:	f04f 33ff 	mov.w	r3, #4294967295
 80151b4:	e02c      	b.n	8015210 <SCSI_Read10+0x15c>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 80151b6:	697a      	ldr	r2, [r7, #20]
 80151b8:	f248 0318 	movw	r3, #32792	; 0x8018
 80151bc:	4413      	add	r3, r2
 80151be:	681a      	ldr	r2, [r3, #0]
 80151c0:	6979      	ldr	r1, [r7, #20]
 80151c2:	f248 0370 	movw	r3, #32880	; 0x8070
 80151c6:	440b      	add	r3, r1
 80151c8:	6819      	ldr	r1, [r3, #0]
 80151ca:	6978      	ldr	r0, [r7, #20]
 80151cc:	f248 0364 	movw	r3, #32868	; 0x8064
 80151d0:	4403      	add	r3, r0
 80151d2:	881b      	ldrh	r3, [r3, #0]
 80151d4:	fb03 f301 	mul.w	r3, r3, r1
 80151d8:	429a      	cmp	r2, r3
 80151da:	d00c      	beq.n	80151f6 <SCSI_Read10+0x142>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80151dc:	697a      	ldr	r2, [r7, #20]
 80151de:	f248 031d 	movw	r3, #32797	; 0x801d
 80151e2:	4413      	add	r3, r2
 80151e4:	7819      	ldrb	r1, [r3, #0]
 80151e6:	2320      	movs	r3, #32
 80151e8:	2205      	movs	r2, #5
 80151ea:	68f8      	ldr	r0, [r7, #12]
 80151ec:	f7ff fe8e 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80151f0:	f04f 33ff 	mov.w	r3, #4294967295
 80151f4:	e00c      	b.n	8015210 <SCSI_Read10+0x15c>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 80151f6:	697b      	ldr	r3, [r7, #20]
 80151f8:	2202      	movs	r2, #2
 80151fa:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 80151fc:	697b      	ldr	r3, [r7, #20]
 80151fe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015202:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 8015204:	7afb      	ldrb	r3, [r7, #11]
 8015206:	4619      	mov	r1, r3
 8015208:	68f8      	ldr	r0, [r7, #12]
 801520a:	f000 fadd 	bl	80157c8 <SCSI_ProcessRead>
 801520e:	4603      	mov	r3, r0
}
 8015210:	4618      	mov	r0, r3
 8015212:	3718      	adds	r7, #24
 8015214:	46bd      	mov	sp, r7
 8015216:	bd80      	pop	{r7, pc}

08015218 <SCSI_Read12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015218:	b580      	push	{r7, lr}
 801521a:	b086      	sub	sp, #24
 801521c:	af00      	add	r7, sp, #0
 801521e:	60f8      	str	r0, [r7, #12]
 8015220:	460b      	mov	r3, r1
 8015222:	607a      	str	r2, [r7, #4]
 8015224:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015226:	68fb      	ldr	r3, [r7, #12]
 8015228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801522c:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 801522e:	697b      	ldr	r3, [r7, #20]
 8015230:	7a1b      	ldrb	r3, [r3, #8]
 8015232:	2b00      	cmp	r3, #0
 8015234:	f040 809e 	bne.w	8015374 <SCSI_Read12+0x15c>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8015238:	697a      	ldr	r2, [r7, #20]
 801523a:	f248 031c 	movw	r3, #32796	; 0x801c
 801523e:	4413      	add	r3, r2
 8015240:	781b      	ldrb	r3, [r3, #0]
 8015242:	b25b      	sxtb	r3, r3
 8015244:	2b00      	cmp	r3, #0
 8015246:	db0c      	blt.n	8015262 <SCSI_Read12+0x4a>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015248:	697a      	ldr	r2, [r7, #20]
 801524a:	f248 031d 	movw	r3, #32797	; 0x801d
 801524e:	4413      	add	r3, r2
 8015250:	7819      	ldrb	r1, [r3, #0]
 8015252:	2320      	movs	r3, #32
 8015254:	2205      	movs	r2, #5
 8015256:	68f8      	ldr	r0, [r7, #12]
 8015258:	f7ff fe58 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 801525c:	f04f 33ff 	mov.w	r3, #4294967295
 8015260:	e092      	b.n	8015388 <SCSI_Read12+0x170>
    }

    if (hmsc->scsi_medium_state == SCSI_MEDIUM_EJECTED)
 8015262:	697a      	ldr	r2, [r7, #20]
 8015264:	f248 0362 	movw	r3, #32866	; 0x8062
 8015268:	4413      	add	r3, r2
 801526a:	781b      	ldrb	r3, [r3, #0]
 801526c:	2b02      	cmp	r3, #2
 801526e:	d108      	bne.n	8015282 <SCSI_Read12+0x6a>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015270:	7af9      	ldrb	r1, [r7, #11]
 8015272:	233a      	movs	r3, #58	; 0x3a
 8015274:	2202      	movs	r2, #2
 8015276:	68f8      	ldr	r0, [r7, #12]
 8015278:	f7ff fe48 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 801527c:	f04f 33ff 	mov.w	r3, #4294967295
 8015280:	e082      	b.n	8015388 <SCSI_Read12+0x170>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8015282:	68fb      	ldr	r3, [r7, #12]
 8015284:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015288:	689b      	ldr	r3, [r3, #8]
 801528a:	7afa      	ldrb	r2, [r7, #11]
 801528c:	4610      	mov	r0, r2
 801528e:	4798      	blx	r3
 8015290:	4603      	mov	r3, r0
 8015292:	2b00      	cmp	r3, #0
 8015294:	d008      	beq.n	80152a8 <SCSI_Read12+0x90>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015296:	7af9      	ldrb	r1, [r7, #11]
 8015298:	233a      	movs	r3, #58	; 0x3a
 801529a:	2202      	movs	r2, #2
 801529c:	68f8      	ldr	r0, [r7, #12]
 801529e:	f7ff fe35 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80152a2:	f04f 33ff 	mov.w	r3, #4294967295
 80152a6:	e06f      	b.n	8015388 <SCSI_Read12+0x170>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	3302      	adds	r3, #2
 80152ac:	781b      	ldrb	r3, [r3, #0]
 80152ae:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 80152b0:	687b      	ldr	r3, [r7, #4]
 80152b2:	3303      	adds	r3, #3
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80152b8:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 80152ba:	687b      	ldr	r3, [r7, #4]
 80152bc:	3304      	adds	r3, #4
 80152be:	781b      	ldrb	r3, [r3, #0]
 80152c0:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 80152c2:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 80152c4:	687a      	ldr	r2, [r7, #4]
 80152c6:	3205      	adds	r2, #5
 80152c8:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 80152ca:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 80152cc:	6979      	ldr	r1, [r7, #20]
 80152ce:	f248 036c 	movw	r3, #32876	; 0x806c
 80152d2:	440b      	add	r3, r1
 80152d4:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80152d6:	687b      	ldr	r3, [r7, #4]
 80152d8:	3306      	adds	r3, #6
 80152da:	781b      	ldrb	r3, [r3, #0]
 80152dc:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 80152de:	687b      	ldr	r3, [r7, #4]
 80152e0:	3307      	adds	r3, #7
 80152e2:	781b      	ldrb	r3, [r3, #0]
 80152e4:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80152e6:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 80152e8:	687b      	ldr	r3, [r7, #4]
 80152ea:	3308      	adds	r3, #8
 80152ec:	781b      	ldrb	r3, [r3, #0]
 80152ee:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 80152f0:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 80152f2:	687a      	ldr	r2, [r7, #4]
 80152f4:	3209      	adds	r2, #9
 80152f6:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 80152f8:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 80152fa:	6979      	ldr	r1, [r7, #20]
 80152fc:	f248 0370 	movw	r3, #32880	; 0x8070
 8015300:	440b      	add	r3, r1
 8015302:	601a      	str	r2, [r3, #0]

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015304:	697a      	ldr	r2, [r7, #20]
 8015306:	f248 036c 	movw	r3, #32876	; 0x806c
 801530a:	4413      	add	r3, r2
 801530c:	6818      	ldr	r0, [r3, #0]
 801530e:	697a      	ldr	r2, [r7, #20]
 8015310:	f248 0370 	movw	r3, #32880	; 0x8070
 8015314:	4413      	add	r3, r2
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	7af9      	ldrb	r1, [r7, #11]
 801531a:	4602      	mov	r2, r0
 801531c:	68f8      	ldr	r0, [r7, #12]
 801531e:	f000 fa2f 	bl	8015780 <SCSI_CheckAddressRange>
 8015322:	4603      	mov	r3, r0
 8015324:	2b00      	cmp	r3, #0
 8015326:	da02      	bge.n	801532e <SCSI_Read12+0x116>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8015328:	f04f 33ff 	mov.w	r3, #4294967295
 801532c:	e02c      	b.n	8015388 <SCSI_Read12+0x170>
    }

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 801532e:	697a      	ldr	r2, [r7, #20]
 8015330:	f248 0318 	movw	r3, #32792	; 0x8018
 8015334:	4413      	add	r3, r2
 8015336:	681a      	ldr	r2, [r3, #0]
 8015338:	6979      	ldr	r1, [r7, #20]
 801533a:	f248 0370 	movw	r3, #32880	; 0x8070
 801533e:	440b      	add	r3, r1
 8015340:	6819      	ldr	r1, [r3, #0]
 8015342:	6978      	ldr	r0, [r7, #20]
 8015344:	f248 0364 	movw	r3, #32868	; 0x8064
 8015348:	4403      	add	r3, r0
 801534a:	881b      	ldrh	r3, [r3, #0]
 801534c:	fb03 f301 	mul.w	r3, r3, r1
 8015350:	429a      	cmp	r2, r3
 8015352:	d00c      	beq.n	801536e <SCSI_Read12+0x156>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015354:	697a      	ldr	r2, [r7, #20]
 8015356:	f248 031d 	movw	r3, #32797	; 0x801d
 801535a:	4413      	add	r3, r2
 801535c:	7819      	ldrb	r1, [r3, #0]
 801535e:	2320      	movs	r3, #32
 8015360:	2205      	movs	r2, #5
 8015362:	68f8      	ldr	r0, [r7, #12]
 8015364:	f7ff fdd2 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 8015368:	f04f 33ff 	mov.w	r3, #4294967295
 801536c:	e00c      	b.n	8015388 <SCSI_Read12+0x170>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 801536e:	697b      	ldr	r3, [r7, #20]
 8015370:	2202      	movs	r2, #2
 8015372:	721a      	strb	r2, [r3, #8]
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8015374:	697b      	ldr	r3, [r7, #20]
 8015376:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801537a:	60da      	str	r2, [r3, #12]

  return SCSI_ProcessRead(pdev, lun);
 801537c:	7afb      	ldrb	r3, [r7, #11]
 801537e:	4619      	mov	r1, r3
 8015380:	68f8      	ldr	r0, [r7, #12]
 8015382:	f000 fa21 	bl	80157c8 <SCSI_ProcessRead>
 8015386:	4603      	mov	r3, r0
}
 8015388:	4618      	mov	r0, r3
 801538a:	3718      	adds	r7, #24
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <SCSI_Write10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
 8015396:	60f8      	str	r0, [r7, #12]
 8015398:	460b      	mov	r3, r1
 801539a:	607a      	str	r2, [r7, #4]
 801539c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80153a4:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	7a1b      	ldrb	r3, [r3, #8]
 80153aa:	2b00      	cmp	r3, #0
 80153ac:	f040 80be 	bne.w	801552c <SCSI_Write10+0x19c>
  {
    if (hmsc->cbw.dDataLength == 0U)
 80153b0:	697a      	ldr	r2, [r7, #20]
 80153b2:	f248 0318 	movw	r3, #32792	; 0x8018
 80153b6:	4413      	add	r3, r2
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	2b00      	cmp	r3, #0
 80153bc:	d10c      	bne.n	80153d8 <SCSI_Write10+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80153be:	697a      	ldr	r2, [r7, #20]
 80153c0:	f248 031d 	movw	r3, #32797	; 0x801d
 80153c4:	4413      	add	r3, r2
 80153c6:	7819      	ldrb	r1, [r3, #0]
 80153c8:	2320      	movs	r3, #32
 80153ca:	2205      	movs	r2, #5
 80153cc:	68f8      	ldr	r0, [r7, #12]
 80153ce:	f7ff fd9d 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80153d2:	f04f 33ff 	mov.w	r3, #4294967295
 80153d6:	e0af      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 80153d8:	697a      	ldr	r2, [r7, #20]
 80153da:	f248 031c 	movw	r3, #32796	; 0x801c
 80153de:	4413      	add	r3, r2
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	b25b      	sxtb	r3, r3
 80153e4:	2b00      	cmp	r3, #0
 80153e6:	da0c      	bge.n	8015402 <SCSI_Write10+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80153e8:	697a      	ldr	r2, [r7, #20]
 80153ea:	f248 031d 	movw	r3, #32797	; 0x801d
 80153ee:	4413      	add	r3, r2
 80153f0:	7819      	ldrb	r1, [r3, #0]
 80153f2:	2320      	movs	r3, #32
 80153f4:	2205      	movs	r2, #5
 80153f6:	68f8      	ldr	r0, [r7, #12]
 80153f8:	f7ff fd88 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80153fc:	f04f 33ff 	mov.w	r3, #4294967295
 8015400:	e09a      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8015402:	68fb      	ldr	r3, [r7, #12]
 8015404:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015408:	689b      	ldr	r3, [r3, #8]
 801540a:	7afa      	ldrb	r2, [r7, #11]
 801540c:	4610      	mov	r0, r2
 801540e:	4798      	blx	r3
 8015410:	4603      	mov	r3, r0
 8015412:	2b00      	cmp	r3, #0
 8015414:	d008      	beq.n	8015428 <SCSI_Write10+0x98>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8015416:	7af9      	ldrb	r1, [r7, #11]
 8015418:	233a      	movs	r3, #58	; 0x3a
 801541a:	2202      	movs	r2, #2
 801541c:	68f8      	ldr	r0, [r7, #12]
 801541e:	f7ff fd75 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 8015422:	f04f 33ff 	mov.w	r3, #4294967295
 8015426:	e087      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8015428:	68fb      	ldr	r3, [r7, #12]
 801542a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801542e:	68db      	ldr	r3, [r3, #12]
 8015430:	7afa      	ldrb	r2, [r7, #11]
 8015432:	4610      	mov	r0, r2
 8015434:	4798      	blx	r3
 8015436:	4603      	mov	r3, r0
 8015438:	2b00      	cmp	r3, #0
 801543a:	d008      	beq.n	801544e <SCSI_Write10+0xbe>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 801543c:	7af9      	ldrb	r1, [r7, #11]
 801543e:	2327      	movs	r3, #39	; 0x27
 8015440:	2202      	movs	r2, #2
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7ff fd62 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 8015448:	f04f 33ff 	mov.w	r3, #4294967295
 801544c:	e074      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	3302      	adds	r3, #2
 8015452:	781b      	ldrb	r3, [r3, #0]
 8015454:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	3303      	adds	r3, #3
 801545a:	781b      	ldrb	r3, [r3, #0]
 801545c:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801545e:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	3304      	adds	r3, #4
 8015464:	781b      	ldrb	r3, [r3, #0]
 8015466:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015468:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 801546a:	687a      	ldr	r2, [r7, #4]
 801546c:	3205      	adds	r2, #5
 801546e:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8015470:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8015472:	6979      	ldr	r1, [r7, #20]
 8015474:	f248 036c 	movw	r3, #32876	; 0x806c
 8015478:	440b      	add	r3, r1
 801547a:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	3307      	adds	r3, #7
 8015480:	781b      	ldrb	r3, [r3, #0]
 8015482:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8015484:	687a      	ldr	r2, [r7, #4]
 8015486:	3208      	adds	r2, #8
 8015488:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 801548a:	431a      	orrs	r2, r3
 801548c:	6979      	ldr	r1, [r7, #20]
 801548e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015492:	440b      	add	r3, r1
 8015494:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015496:	697a      	ldr	r2, [r7, #20]
 8015498:	f248 036c 	movw	r3, #32876	; 0x806c
 801549c:	4413      	add	r3, r2
 801549e:	6818      	ldr	r0, [r3, #0]
 80154a0:	697a      	ldr	r2, [r7, #20]
 80154a2:	f248 0370 	movw	r3, #32880	; 0x8070
 80154a6:	4413      	add	r3, r2
 80154a8:	681b      	ldr	r3, [r3, #0]
 80154aa:	7af9      	ldrb	r1, [r7, #11]
 80154ac:	4602      	mov	r2, r0
 80154ae:	68f8      	ldr	r0, [r7, #12]
 80154b0:	f000 f966 	bl	8015780 <SCSI_CheckAddressRange>
 80154b4:	4603      	mov	r3, r0
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	da02      	bge.n	80154c0 <SCSI_Write10+0x130>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 80154ba:	f04f 33ff 	mov.w	r3, #4294967295
 80154be:	e03b      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80154c0:	697a      	ldr	r2, [r7, #20]
 80154c2:	f248 0370 	movw	r3, #32880	; 0x8070
 80154c6:	4413      	add	r3, r2
 80154c8:	681a      	ldr	r2, [r3, #0]
 80154ca:	6979      	ldr	r1, [r7, #20]
 80154cc:	f248 0364 	movw	r3, #32868	; 0x8064
 80154d0:	440b      	add	r3, r1
 80154d2:	881b      	ldrh	r3, [r3, #0]
 80154d4:	fb03 f302 	mul.w	r3, r3, r2
 80154d8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80154da:	697a      	ldr	r2, [r7, #20]
 80154dc:	f248 0318 	movw	r3, #32792	; 0x8018
 80154e0:	4413      	add	r3, r2
 80154e2:	681b      	ldr	r3, [r3, #0]
 80154e4:	693a      	ldr	r2, [r7, #16]
 80154e6:	429a      	cmp	r2, r3
 80154e8:	d00c      	beq.n	8015504 <SCSI_Write10+0x174>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80154ea:	697a      	ldr	r2, [r7, #20]
 80154ec:	f248 031d 	movw	r3, #32797	; 0x801d
 80154f0:	4413      	add	r3, r2
 80154f2:	7819      	ldrb	r1, [r3, #0]
 80154f4:	2320      	movs	r3, #32
 80154f6:	2205      	movs	r2, #5
 80154f8:	68f8      	ldr	r0, [r7, #12]
 80154fa:	f7ff fd07 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80154fe:	f04f 33ff 	mov.w	r3, #4294967295
 8015502:	e019      	b.n	8015538 <SCSI_Write10+0x1a8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801550a:	bf28      	it	cs
 801550c:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015510:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8015512:	697b      	ldr	r3, [r7, #20]
 8015514:	2201      	movs	r2, #1
 8015516:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8015518:	697b      	ldr	r3, [r7, #20]
 801551a:	f103 0210 	add.w	r2, r3, #16
 801551e:	693b      	ldr	r3, [r7, #16]
 8015520:	2101      	movs	r1, #1
 8015522:	68f8      	ldr	r0, [r7, #12]
 8015524:	f004 fb19 	bl	8019b5a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 8015528:	2300      	movs	r3, #0
 801552a:	e005      	b.n	8015538 <SCSI_Write10+0x1a8>
    return SCSI_ProcessWrite(pdev, lun);
 801552c:	7afb      	ldrb	r3, [r7, #11]
 801552e:	4619      	mov	r1, r3
 8015530:	68f8      	ldr	r0, [r7, #12]
 8015532:	f000 f9d7 	bl	80158e4 <SCSI_ProcessWrite>
 8015536:	4603      	mov	r3, r0
}
 8015538:	4618      	mov	r0, r3
 801553a:	3718      	adds	r7, #24
 801553c:	46bd      	mov	sp, r7
 801553e:	bd80      	pop	{r7, pc}

08015540 <SCSI_Write12>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Write12(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b086      	sub	sp, #24
 8015544:	af00      	add	r7, sp, #0
 8015546:	60f8      	str	r0, [r7, #12]
 8015548:	460b      	mov	r3, r1
 801554a:	607a      	str	r2, [r7, #4]
 801554c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015554:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8015556:	697b      	ldr	r3, [r7, #20]
 8015558:	7a1b      	ldrb	r3, [r3, #8]
 801555a:	2b00      	cmp	r3, #0
 801555c:	f040 80ce 	bne.w	80156fc <SCSI_Write12+0x1bc>
  {
    if (hmsc->cbw.dDataLength == 0U)
 8015560:	697a      	ldr	r2, [r7, #20]
 8015562:	f248 0318 	movw	r3, #32792	; 0x8018
 8015566:	4413      	add	r3, r2
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	2b00      	cmp	r3, #0
 801556c:	d10c      	bne.n	8015588 <SCSI_Write12+0x48>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 801556e:	697a      	ldr	r2, [r7, #20]
 8015570:	f248 031d 	movw	r3, #32797	; 0x801d
 8015574:	4413      	add	r3, r2
 8015576:	7819      	ldrb	r1, [r3, #0]
 8015578:	2320      	movs	r3, #32
 801557a:	2205      	movs	r2, #5
 801557c:	68f8      	ldr	r0, [r7, #12]
 801557e:	f7ff fcc5 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 8015582:	f04f 33ff 	mov.w	r3, #4294967295
 8015586:	e0bf      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8015588:	697a      	ldr	r2, [r7, #20]
 801558a:	f248 031c 	movw	r3, #32796	; 0x801c
 801558e:	4413      	add	r3, r2
 8015590:	781b      	ldrb	r3, [r3, #0]
 8015592:	b25b      	sxtb	r3, r3
 8015594:	2b00      	cmp	r3, #0
 8015596:	da0c      	bge.n	80155b2 <SCSI_Write12+0x72>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8015598:	697a      	ldr	r2, [r7, #20]
 801559a:	f248 031d 	movw	r3, #32797	; 0x801d
 801559e:	4413      	add	r3, r2
 80155a0:	7819      	ldrb	r1, [r3, #0]
 80155a2:	2320      	movs	r3, #32
 80155a4:	2205      	movs	r2, #5
 80155a6:	68f8      	ldr	r0, [r7, #12]
 80155a8:	f7ff fcb0 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80155ac:	f04f 33ff 	mov.w	r3, #4294967295
 80155b0:	e0aa      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 80155b2:	68fb      	ldr	r3, [r7, #12]
 80155b4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155b8:	689b      	ldr	r3, [r3, #8]
 80155ba:	7afa      	ldrb	r2, [r7, #11]
 80155bc:	4610      	mov	r0, r2
 80155be:	4798      	blx	r3
 80155c0:	4603      	mov	r3, r0
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d00b      	beq.n	80155de <SCSI_Write12+0x9e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 80155c6:	7af9      	ldrb	r1, [r7, #11]
 80155c8:	233a      	movs	r3, #58	; 0x3a
 80155ca:	2202      	movs	r2, #2
 80155cc:	68f8      	ldr	r0, [r7, #12]
 80155ce:	f7ff fc9d 	bl	8014f0c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	2205      	movs	r2, #5
 80155d6:	721a      	strb	r2, [r3, #8]
      return -1;
 80155d8:	f04f 33ff 	mov.w	r3, #4294967295
 80155dc:	e094      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 80155de:	68fb      	ldr	r3, [r7, #12]
 80155e0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80155e4:	68db      	ldr	r3, [r3, #12]
 80155e6:	7afa      	ldrb	r2, [r7, #11]
 80155e8:	4610      	mov	r0, r2
 80155ea:	4798      	blx	r3
 80155ec:	4603      	mov	r3, r0
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d00b      	beq.n	801560a <SCSI_Write12+0xca>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 80155f2:	7af9      	ldrb	r1, [r7, #11]
 80155f4:	2327      	movs	r3, #39	; 0x27
 80155f6:	2202      	movs	r2, #2
 80155f8:	68f8      	ldr	r0, [r7, #12]
 80155fa:	f7ff fc87 	bl	8014f0c <SCSI_SenseCode>
      hmsc->bot_state = USBD_BOT_NO_DATA;
 80155fe:	697b      	ldr	r3, [r7, #20]
 8015600:	2205      	movs	r2, #5
 8015602:	721a      	strb	r2, [r3, #8]
      return -1;
 8015604:	f04f 33ff 	mov.w	r3, #4294967295
 8015608:	e07e      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	3302      	adds	r3, #2
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	3303      	adds	r3, #3
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801561a:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	3304      	adds	r3, #4
 8015620:	781b      	ldrb	r3, [r3, #0]
 8015622:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8015624:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8015626:	687a      	ldr	r2, [r7, #4]
 8015628:	3205      	adds	r2, #5
 801562a:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 801562c:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 801562e:	6979      	ldr	r1, [r7, #20]
 8015630:	f248 036c 	movw	r3, #32876	; 0x806c
 8015634:	440b      	add	r3, r1
 8015636:	601a      	str	r2, [r3, #0]

    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015638:	687b      	ldr	r3, [r7, #4]
 801563a:	3306      	adds	r3, #6
 801563c:	781b      	ldrb	r3, [r3, #0]
 801563e:	061a      	lsls	r2, r3, #24
                         ((uint32_t)params[7] << 16) |
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	3307      	adds	r3, #7
 8015644:	781b      	ldrb	r3, [r3, #0]
 8015646:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 8015648:	431a      	orrs	r2, r3
                         ((uint32_t)params[8] << 8) |
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	3308      	adds	r3, #8
 801564e:	781b      	ldrb	r3, [r3, #0]
 8015650:	021b      	lsls	r3, r3, #8
                         ((uint32_t)params[7] << 16) |
 8015652:	4313      	orrs	r3, r2
                         (uint32_t)params[9];
 8015654:	687a      	ldr	r2, [r7, #4]
 8015656:	3209      	adds	r2, #9
 8015658:	7812      	ldrb	r2, [r2, #0]
                         ((uint32_t)params[8] << 8) |
 801565a:	431a      	orrs	r2, r3
    hmsc->scsi_blk_len = ((uint32_t)params[6] << 24) |
 801565c:	6979      	ldr	r1, [r7, #20]
 801565e:	f248 0370 	movw	r3, #32880	; 0x8070
 8015662:	440b      	add	r3, r1
 8015664:	601a      	str	r2, [r3, #0]

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8015666:	697a      	ldr	r2, [r7, #20]
 8015668:	f248 036c 	movw	r3, #32876	; 0x806c
 801566c:	4413      	add	r3, r2
 801566e:	6818      	ldr	r0, [r3, #0]
 8015670:	697a      	ldr	r2, [r7, #20]
 8015672:	f248 0370 	movw	r3, #32880	; 0x8070
 8015676:	4413      	add	r3, r2
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	7af9      	ldrb	r1, [r7, #11]
 801567c:	4602      	mov	r2, r0
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	f000 f87e 	bl	8015780 <SCSI_CheckAddressRange>
 8015684:	4603      	mov	r3, r0
 8015686:	2b00      	cmp	r3, #0
 8015688:	da02      	bge.n	8015690 <SCSI_Write12+0x150>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 801568a:	f04f 33ff 	mov.w	r3, #4294967295
 801568e:	e03b      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8015690:	697a      	ldr	r2, [r7, #20]
 8015692:	f248 0370 	movw	r3, #32880	; 0x8070
 8015696:	4413      	add	r3, r2
 8015698:	681a      	ldr	r2, [r3, #0]
 801569a:	6979      	ldr	r1, [r7, #20]
 801569c:	f248 0364 	movw	r3, #32868	; 0x8064
 80156a0:	440b      	add	r3, r1
 80156a2:	881b      	ldrh	r3, [r3, #0]
 80156a4:	fb03 f302 	mul.w	r3, r3, r2
 80156a8:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 80156aa:	697a      	ldr	r2, [r7, #20]
 80156ac:	f248 0318 	movw	r3, #32792	; 0x8018
 80156b0:	4413      	add	r3, r2
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	693a      	ldr	r2, [r7, #16]
 80156b6:	429a      	cmp	r2, r3
 80156b8:	d00c      	beq.n	80156d4 <SCSI_Write12+0x194>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 80156ba:	697a      	ldr	r2, [r7, #20]
 80156bc:	f248 031d 	movw	r3, #32797	; 0x801d
 80156c0:	4413      	add	r3, r2
 80156c2:	7819      	ldrb	r1, [r3, #0]
 80156c4:	2320      	movs	r3, #32
 80156c6:	2205      	movs	r2, #5
 80156c8:	68f8      	ldr	r0, [r7, #12]
 80156ca:	f7ff fc1f 	bl	8014f0c <SCSI_SenseCode>
      return -1;
 80156ce:	f04f 33ff 	mov.w	r3, #4294967295
 80156d2:	e019      	b.n	8015708 <SCSI_Write12+0x1c8>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80156da:	bf28      	it	cs
 80156dc:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 80156e0:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	2201      	movs	r2, #1
 80156e6:	721a      	strb	r2, [r3, #8]
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	f103 0210 	add.w	r2, r3, #16
 80156ee:	693b      	ldr	r3, [r7, #16]
 80156f0:	2101      	movs	r1, #1
 80156f2:	68f8      	ldr	r0, [r7, #12]
 80156f4:	f004 fa31 	bl	8019b5a <USBD_LL_PrepareReceive>
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }

  return 0;
 80156f8:	2300      	movs	r3, #0
 80156fa:	e005      	b.n	8015708 <SCSI_Write12+0x1c8>
    return SCSI_ProcessWrite(pdev, lun);
 80156fc:	7afb      	ldrb	r3, [r7, #11]
 80156fe:	4619      	mov	r1, r3
 8015700:	68f8      	ldr	r0, [r7, #12]
 8015702:	f000 f8ef 	bl	80158e4 <SCSI_ProcessWrite>
 8015706:	4603      	mov	r3, r0
}
 8015708:	4618      	mov	r0, r3
 801570a:	3718      	adds	r7, #24
 801570c:	46bd      	mov	sp, r7
 801570e:	bd80      	pop	{r7, pc}

08015710 <SCSI_Verify10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Verify10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8015710:	b580      	push	{r7, lr}
 8015712:	b086      	sub	sp, #24
 8015714:	af00      	add	r7, sp, #0
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	460b      	mov	r3, r1
 801571a:	607a      	str	r2, [r7, #4]
 801571c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015724:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8015726:	687b      	ldr	r3, [r7, #4]
 8015728:	3301      	adds	r3, #1
 801572a:	781b      	ldrb	r3, [r3, #0]
 801572c:	f003 0302 	and.w	r3, r3, #2
 8015730:	2b00      	cmp	r3, #0
 8015732:	d008      	beq.n	8015746 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8015734:	7af9      	ldrb	r1, [r7, #11]
 8015736:	2324      	movs	r3, #36	; 0x24
 8015738:	2205      	movs	r2, #5
 801573a:	68f8      	ldr	r0, [r7, #12]
 801573c:	f7ff fbe6 	bl	8014f0c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8015740:	f04f 33ff 	mov.w	r3, #4294967295
 8015744:	e018      	b.n	8015778 <SCSI_Verify10+0x68>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr, hmsc->scsi_blk_len) < 0)
 8015746:	697a      	ldr	r2, [r7, #20]
 8015748:	f248 036c 	movw	r3, #32876	; 0x806c
 801574c:	4413      	add	r3, r2
 801574e:	6818      	ldr	r0, [r3, #0]
 8015750:	697a      	ldr	r2, [r7, #20]
 8015752:	f248 0370 	movw	r3, #32880	; 0x8070
 8015756:	4413      	add	r3, r2
 8015758:	681b      	ldr	r3, [r3, #0]
 801575a:	7af9      	ldrb	r1, [r7, #11]
 801575c:	4602      	mov	r2, r0
 801575e:	68f8      	ldr	r0, [r7, #12]
 8015760:	f000 f80e 	bl	8015780 <SCSI_CheckAddressRange>
 8015764:	4603      	mov	r3, r0
 8015766:	2b00      	cmp	r3, #0
 8015768:	da02      	bge.n	8015770 <SCSI_Verify10+0x60>
  {
    return -1; /* error */
 801576a:	f04f 33ff 	mov.w	r3, #4294967295
 801576e:	e003      	b.n	8015778 <SCSI_Verify10+0x68>
  }

  hmsc->bot_data_length = 0U;
 8015770:	697b      	ldr	r3, [r7, #20]
 8015772:	2200      	movs	r2, #0
 8015774:	60da      	str	r2, [r3, #12]

  return 0;
 8015776:	2300      	movs	r3, #0
}
 8015778:	4618      	mov	r0, r3
 801577a:	3718      	adds	r7, #24
 801577c:	46bd      	mov	sp, r7
 801577e:	bd80      	pop	{r7, pc}

08015780 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8015780:	b580      	push	{r7, lr}
 8015782:	b086      	sub	sp, #24
 8015784:	af00      	add	r7, sp, #0
 8015786:	60f8      	str	r0, [r7, #12]
 8015788:	607a      	str	r2, [r7, #4]
 801578a:	603b      	str	r3, [r7, #0]
 801578c:	460b      	mov	r3, r1
 801578e:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015796:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8015798:	687a      	ldr	r2, [r7, #4]
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	441a      	add	r2, r3
 801579e:	6979      	ldr	r1, [r7, #20]
 80157a0:	f248 0368 	movw	r3, #32872	; 0x8068
 80157a4:	440b      	add	r3, r1
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	429a      	cmp	r2, r3
 80157aa:	d908      	bls.n	80157be <SCSI_CheckAddressRange+0x3e>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 80157ac:	7af9      	ldrb	r1, [r7, #11]
 80157ae:	2321      	movs	r3, #33	; 0x21
 80157b0:	2205      	movs	r2, #5
 80157b2:	68f8      	ldr	r0, [r7, #12]
 80157b4:	f7ff fbaa 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 80157b8:	f04f 33ff 	mov.w	r3, #4294967295
 80157bc:	e000      	b.n	80157c0 <SCSI_CheckAddressRange+0x40>
  }

  return 0;
 80157be:	2300      	movs	r3, #0
}
 80157c0:	4618      	mov	r0, r3
 80157c2:	3718      	adds	r7, #24
 80157c4:	46bd      	mov	sp, r7
 80157c6:	bd80      	pop	{r7, pc}

080157c8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80157c8:	b5b0      	push	{r4, r5, r7, lr}
 80157ca:	b084      	sub	sp, #16
 80157cc:	af00      	add	r7, sp, #0
 80157ce:	6078      	str	r0, [r7, #4]
 80157d0:	460b      	mov	r3, r1
 80157d2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80157da:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80157dc:	68fa      	ldr	r2, [r7, #12]
 80157de:	f248 0370 	movw	r3, #32880	; 0x8070
 80157e2:	4413      	add	r3, r2
 80157e4:	681a      	ldr	r2, [r3, #0]
 80157e6:	68f9      	ldr	r1, [r7, #12]
 80157e8:	f248 0364 	movw	r3, #32868	; 0x8064
 80157ec:	440b      	add	r3, r1
 80157ee:	881b      	ldrh	r3, [r3, #0]
 80157f0:	fb03 f302 	mul.w	r3, r3, r2
 80157f4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 80157f6:	68bb      	ldr	r3, [r7, #8]
 80157f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80157fc:	bf28      	it	cs
 80157fe:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015802:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 801580a:	691c      	ldr	r4, [r3, #16]
 801580c:	68fb      	ldr	r3, [r7, #12]
 801580e:	f103 0110 	add.w	r1, r3, #16
 8015812:	68fa      	ldr	r2, [r7, #12]
 8015814:	f248 036c 	movw	r3, #32876	; 0x806c
 8015818:	4413      	add	r3, r2
 801581a:	681d      	ldr	r5, [r3, #0]
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	f248 0364 	movw	r3, #32868	; 0x8064
 8015822:	4413      	add	r3, r2
 8015824:	881b      	ldrh	r3, [r3, #0]
 8015826:	461a      	mov	r2, r3
 8015828:	68bb      	ldr	r3, [r7, #8]
 801582a:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun, hmsc->bot_data,
 801582e:	b29b      	uxth	r3, r3
 8015830:	78f8      	ldrb	r0, [r7, #3]
 8015832:	462a      	mov	r2, r5
 8015834:	47a0      	blx	r4
 8015836:	4603      	mov	r3, r0
 8015838:	2b00      	cmp	r3, #0
 801583a:	da08      	bge.n	801584e <SCSI_ProcessRead+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 801583c:	78f9      	ldrb	r1, [r7, #3]
 801583e:	2311      	movs	r3, #17
 8015840:	2204      	movs	r2, #4
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f7ff fb62 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8015848:	f04f 33ff 	mov.w	r3, #4294967295
 801584c:	e046      	b.n	80158dc <SCSI_ProcessRead+0x114>
  }

  (void)USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f103 0210 	add.w	r2, r3, #16
 8015854:	68bb      	ldr	r3, [r7, #8]
 8015856:	2181      	movs	r1, #129	; 0x81
 8015858:	6878      	ldr	r0, [r7, #4]
 801585a:	f004 f95d 	bl	8019b18 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801585e:	68fa      	ldr	r2, [r7, #12]
 8015860:	f248 036c 	movw	r3, #32876	; 0x806c
 8015864:	4413      	add	r3, r2
 8015866:	681a      	ldr	r2, [r3, #0]
 8015868:	68f9      	ldr	r1, [r7, #12]
 801586a:	f248 0364 	movw	r3, #32868	; 0x8064
 801586e:	440b      	add	r3, r1
 8015870:	881b      	ldrh	r3, [r3, #0]
 8015872:	4619      	mov	r1, r3
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	fbb3 f3f1 	udiv	r3, r3, r1
 801587a:	441a      	add	r2, r3
 801587c:	68f9      	ldr	r1, [r7, #12]
 801587e:	f248 036c 	movw	r3, #32876	; 0x806c
 8015882:	440b      	add	r3, r1
 8015884:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015886:	68fa      	ldr	r2, [r7, #12]
 8015888:	f248 0370 	movw	r3, #32880	; 0x8070
 801588c:	4413      	add	r3, r2
 801588e:	681a      	ldr	r2, [r3, #0]
 8015890:	68f9      	ldr	r1, [r7, #12]
 8015892:	f248 0364 	movw	r3, #32868	; 0x8064
 8015896:	440b      	add	r3, r1
 8015898:	881b      	ldrh	r3, [r3, #0]
 801589a:	4619      	mov	r1, r3
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	fbb3 f3f1 	udiv	r3, r3, r1
 80158a2:	1ad2      	subs	r2, r2, r3
 80158a4:	68f9      	ldr	r1, [r7, #12]
 80158a6:	f248 0370 	movw	r3, #32880	; 0x8070
 80158aa:	440b      	add	r3, r1
 80158ac:	601a      	str	r2, [r3, #0]

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 80158ae:	68fa      	ldr	r2, [r7, #12]
 80158b0:	f248 0338 	movw	r3, #32824	; 0x8038
 80158b4:	4413      	add	r3, r2
 80158b6:	681a      	ldr	r2, [r3, #0]
 80158b8:	68bb      	ldr	r3, [r7, #8]
 80158ba:	1ad2      	subs	r2, r2, r3
 80158bc:	68f9      	ldr	r1, [r7, #12]
 80158be:	f248 0338 	movw	r3, #32824	; 0x8038
 80158c2:	440b      	add	r3, r1
 80158c4:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80158c6:	68fa      	ldr	r2, [r7, #12]
 80158c8:	f248 0370 	movw	r3, #32880	; 0x8070
 80158cc:	4413      	add	r3, r2
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d102      	bne.n	80158da <SCSI_ProcessRead+0x112>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 80158d4:	68fb      	ldr	r3, [r7, #12]
 80158d6:	2203      	movs	r2, #3
 80158d8:	721a      	strb	r2, [r3, #8]
  }

  return 0;
 80158da:	2300      	movs	r3, #0
}
 80158dc:	4618      	mov	r0, r3
 80158de:	3710      	adds	r7, #16
 80158e0:	46bd      	mov	sp, r7
 80158e2:	bdb0      	pop	{r4, r5, r7, pc}

080158e4 <SCSI_ProcessWrite>:
*         Handle Write Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef *pdev, uint8_t lun)
{
 80158e4:	b5b0      	push	{r4, r5, r7, lr}
 80158e6:	b084      	sub	sp, #16
 80158e8:	af00      	add	r7, sp, #0
 80158ea:	6078      	str	r0, [r7, #4]
 80158ec:	460b      	mov	r3, r1
 80158ee:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80158f6:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 80158f8:	68fa      	ldr	r2, [r7, #12]
 80158fa:	f248 0370 	movw	r3, #32880	; 0x8070
 80158fe:	4413      	add	r3, r2
 8015900:	681a      	ldr	r2, [r3, #0]
 8015902:	68f9      	ldr	r1, [r7, #12]
 8015904:	f248 0364 	movw	r3, #32868	; 0x8064
 8015908:	440b      	add	r3, r1
 801590a:	881b      	ldrh	r3, [r3, #0]
 801590c:	fb03 f302 	mul.w	r3, r3, r2
 8015910:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8015912:	68bb      	ldr	r3, [r7, #8]
 8015914:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015918:	bf28      	it	cs
 801591a:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 801591e:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8015920:	687b      	ldr	r3, [r7, #4]
 8015922:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8015926:	695c      	ldr	r4, [r3, #20]
 8015928:	68fb      	ldr	r3, [r7, #12]
 801592a:	f103 0110 	add.w	r1, r3, #16
 801592e:	68fa      	ldr	r2, [r7, #12]
 8015930:	f248 036c 	movw	r3, #32876	; 0x806c
 8015934:	4413      	add	r3, r2
 8015936:	681d      	ldr	r5, [r3, #0]
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8015938:	68fa      	ldr	r2, [r7, #12]
 801593a:	f248 0364 	movw	r3, #32868	; 0x8064
 801593e:	4413      	add	r3, r2
 8015940:	881b      	ldrh	r3, [r3, #0]
 8015942:	461a      	mov	r2, r3
 8015944:	68bb      	ldr	r3, [r7, #8]
 8015946:	fbb3 f3f2 	udiv	r3, r3, r2
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 801594a:	b29b      	uxth	r3, r3
 801594c:	78f8      	ldrb	r0, [r7, #3]
 801594e:	462a      	mov	r2, r5
 8015950:	47a0      	blx	r4
 8015952:	4603      	mov	r3, r0
 8015954:	2b00      	cmp	r3, #0
 8015956:	da08      	bge.n	801596a <SCSI_ProcessWrite+0x86>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8015958:	78f9      	ldrb	r1, [r7, #3]
 801595a:	2303      	movs	r3, #3
 801595c:	2204      	movs	r2, #4
 801595e:	6878      	ldr	r0, [r7, #4]
 8015960:	f7ff fad4 	bl	8014f0c <SCSI_SenseCode>
    return -1;
 8015964:	f04f 33ff 	mov.w	r3, #4294967295
 8015968:	e05a      	b.n	8015a20 <SCSI_ProcessWrite+0x13c>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	f248 036c 	movw	r3, #32876	; 0x806c
 8015970:	4413      	add	r3, r2
 8015972:	681a      	ldr	r2, [r3, #0]
 8015974:	68f9      	ldr	r1, [r7, #12]
 8015976:	f248 0364 	movw	r3, #32868	; 0x8064
 801597a:	440b      	add	r3, r1
 801597c:	881b      	ldrh	r3, [r3, #0]
 801597e:	4619      	mov	r1, r3
 8015980:	68bb      	ldr	r3, [r7, #8]
 8015982:	fbb3 f3f1 	udiv	r3, r3, r1
 8015986:	441a      	add	r2, r3
 8015988:	68f9      	ldr	r1, [r7, #12]
 801598a:	f248 036c 	movw	r3, #32876	; 0x806c
 801598e:	440b      	add	r3, r1
 8015990:	601a      	str	r2, [r3, #0]
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8015992:	68fa      	ldr	r2, [r7, #12]
 8015994:	f248 0370 	movw	r3, #32880	; 0x8070
 8015998:	4413      	add	r3, r2
 801599a:	681a      	ldr	r2, [r3, #0]
 801599c:	68f9      	ldr	r1, [r7, #12]
 801599e:	f248 0364 	movw	r3, #32868	; 0x8064
 80159a2:	440b      	add	r3, r1
 80159a4:	881b      	ldrh	r3, [r3, #0]
 80159a6:	4619      	mov	r1, r3
 80159a8:	68bb      	ldr	r3, [r7, #8]
 80159aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80159ae:	1ad2      	subs	r2, r2, r3
 80159b0:	68f9      	ldr	r1, [r7, #12]
 80159b2:	f248 0370 	movw	r3, #32880	; 0x8070
 80159b6:	440b      	add	r3, r1
 80159b8:	601a      	str	r2, [r3, #0]

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 80159ba:	68fa      	ldr	r2, [r7, #12]
 80159bc:	f248 0338 	movw	r3, #32824	; 0x8038
 80159c0:	4413      	add	r3, r2
 80159c2:	681a      	ldr	r2, [r3, #0]
 80159c4:	68bb      	ldr	r3, [r7, #8]
 80159c6:	1ad2      	subs	r2, r2, r3
 80159c8:	68f9      	ldr	r1, [r7, #12]
 80159ca:	f248 0338 	movw	r3, #32824	; 0x8038
 80159ce:	440b      	add	r3, r1
 80159d0:	601a      	str	r2, [r3, #0]

  if (hmsc->scsi_blk_len == 0U)
 80159d2:	68fa      	ldr	r2, [r7, #12]
 80159d4:	f248 0370 	movw	r3, #32880	; 0x8070
 80159d8:	4413      	add	r3, r2
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	2b00      	cmp	r3, #0
 80159de:	d104      	bne.n	80159ea <SCSI_ProcessWrite+0x106>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80159e0:	2100      	movs	r1, #0
 80159e2:	6878      	ldr	r0, [r7, #4]
 80159e4:	f7fe fde2 	bl	80145ac <MSC_BOT_SendCSW>
 80159e8:	e019      	b.n	8015a1e <SCSI_ProcessWrite+0x13a>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80159ea:	68fa      	ldr	r2, [r7, #12]
 80159ec:	f248 0370 	movw	r3, #32880	; 0x8070
 80159f0:	4413      	add	r3, r2
 80159f2:	681a      	ldr	r2, [r3, #0]
 80159f4:	68f9      	ldr	r1, [r7, #12]
 80159f6:	f248 0364 	movw	r3, #32868	; 0x8064
 80159fa:	440b      	add	r3, r1
 80159fc:	881b      	ldrh	r3, [r3, #0]
 80159fe:	fb03 f302 	mul.w	r3, r3, r2
 8015a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8015a06:	bf28      	it	cs
 8015a08:	f44f 4300 	movcs.w	r3, #32768	; 0x8000
 8015a0c:	60bb      	str	r3, [r7, #8]

    /* Prepare EP to Receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8015a0e:	68fb      	ldr	r3, [r7, #12]
 8015a10:	f103 0210 	add.w	r2, r3, #16
 8015a14:	68bb      	ldr	r3, [r7, #8]
 8015a16:	2101      	movs	r1, #1
 8015a18:	6878      	ldr	r0, [r7, #4]
 8015a1a:	f004 f89e 	bl	8019b5a <USBD_LL_PrepareReceive>
  }

  return 0;
 8015a1e:	2300      	movs	r3, #0
}
 8015a20:	4618      	mov	r0, r3
 8015a22:	3710      	adds	r7, #16
 8015a24:	46bd      	mov	sp, r7
 8015a26:	bdb0      	pop	{r4, r5, r7, pc}

08015a28 <SCSI_UpdateBotData>:
* @param  length: Data length
* @retval status
*/
static int8_t SCSI_UpdateBotData(USBD_MSC_BOT_HandleTypeDef *hmsc,
                                 uint8_t *pBuff, uint16_t length)
{
 8015a28:	b480      	push	{r7}
 8015a2a:	b087      	sub	sp, #28
 8015a2c:	af00      	add	r7, sp, #0
 8015a2e:	60f8      	str	r0, [r7, #12]
 8015a30:	60b9      	str	r1, [r7, #8]
 8015a32:	4613      	mov	r3, r2
 8015a34:	80fb      	strh	r3, [r7, #6]
  uint16_t len = length;
 8015a36:	88fb      	ldrh	r3, [r7, #6]
 8015a38:	82fb      	strh	r3, [r7, #22]

  hmsc->bot_data_length = len;
 8015a3a:	8afa      	ldrh	r2, [r7, #22]
 8015a3c:	68fb      	ldr	r3, [r7, #12]
 8015a3e:	60da      	str	r2, [r3, #12]

  while (len != 0U)
 8015a40:	e00b      	b.n	8015a5a <SCSI_UpdateBotData+0x32>
  {
    len--;
 8015a42:	8afb      	ldrh	r3, [r7, #22]
 8015a44:	3b01      	subs	r3, #1
 8015a46:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = pBuff[len];
 8015a48:	8afb      	ldrh	r3, [r7, #22]
 8015a4a:	68ba      	ldr	r2, [r7, #8]
 8015a4c:	441a      	add	r2, r3
 8015a4e:	8afb      	ldrh	r3, [r7, #22]
 8015a50:	7811      	ldrb	r1, [r2, #0]
 8015a52:	68fa      	ldr	r2, [r7, #12]
 8015a54:	4413      	add	r3, r2
 8015a56:	460a      	mov	r2, r1
 8015a58:	741a      	strb	r2, [r3, #16]
  while (len != 0U)
 8015a5a:	8afb      	ldrh	r3, [r7, #22]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d1f0      	bne.n	8015a42 <SCSI_UpdateBotData+0x1a>
  }

  return 0;
 8015a60:	2300      	movs	r3, #0
}
 8015a62:	4618      	mov	r0, r3
 8015a64:	371c      	adds	r7, #28
 8015a66:	46bd      	mov	sp, r7
 8015a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a6c:	4770      	bx	lr

08015a6e <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015a6e:	b580      	push	{r7, lr}
 8015a70:	b086      	sub	sp, #24
 8015a72:	af00      	add	r7, sp, #0
 8015a74:	60f8      	str	r0, [r7, #12]
 8015a76:	60b9      	str	r1, [r7, #8]
 8015a78:	4613      	mov	r3, r2
 8015a7a:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8015a7c:	68fb      	ldr	r3, [r7, #12]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	d101      	bne.n	8015a86 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8015a82:	2303      	movs	r3, #3
 8015a84:	e025      	b.n	8015ad2 <USBD_Init+0x64>
  }

  /* Unlink previous class */
  if (pdev->pClass != NULL)
 8015a86:	68fb      	ldr	r3, [r7, #12]
 8015a88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a8c:	2b00      	cmp	r3, #0
 8015a8e:	d003      	beq.n	8015a98 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8015a90:	68fb      	ldr	r3, [r7, #12]
 8015a92:	2200      	movs	r2, #0
 8015a94:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  if (pdev->pConfDesc != NULL)
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	f8d3 32cc 	ldr.w	r3, [r3, #716]	; 0x2cc
 8015a9e:	2b00      	cmp	r3, #0
 8015aa0:	d003      	beq.n	8015aaa <USBD_Init+0x3c>
  {
    pdev->pConfDesc = NULL;
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015aaa:	68bb      	ldr	r3, [r7, #8]
 8015aac:	2b00      	cmp	r3, #0
 8015aae:	d003      	beq.n	8015ab8 <USBD_Init+0x4a>
  {
    pdev->pDesc = pdesc;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	68ba      	ldr	r2, [r7, #8]
 8015ab4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	2201      	movs	r2, #1
 8015abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	79fa      	ldrb	r2, [r7, #7]
 8015ac4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8015ac6:	68f8      	ldr	r0, [r7, #12]
 8015ac8:	f003 fece 	bl	8019868 <USBD_LL_Init>
 8015acc:	4603      	mov	r3, r0
 8015ace:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3718      	adds	r7, #24
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}

08015ada <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015ada:	b580      	push	{r7, lr}
 8015adc:	b084      	sub	sp, #16
 8015ade:	af00      	add	r7, sp, #0
 8015ae0:	6078      	str	r0, [r7, #4]
 8015ae2:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8015ae4:	2300      	movs	r3, #0
 8015ae6:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8015ae8:	683b      	ldr	r3, [r7, #0]
 8015aea:	2b00      	cmp	r3, #0
 8015aec:	d101      	bne.n	8015af2 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8015aee:	2303      	movs	r3, #3
 8015af0:	e010      	b.n	8015b14 <USBD_RegisterClass+0x3a>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8015af2:	687b      	ldr	r3, [r7, #4]
 8015af4:	683a      	ldr	r2, [r7, #0]
 8015af6:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  /* Get Device Configuration Descriptor */
#ifdef USE_USB_FS
  pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
#else /* USE_USB_HS */
  pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
 8015afa:	687b      	ldr	r3, [r7, #4]
 8015afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015b02:	f107 020e 	add.w	r2, r7, #14
 8015b06:	4610      	mov	r0, r2
 8015b08:	4798      	blx	r3
 8015b0a:	4602      	mov	r2, r0
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
#endif /* USE_USB_FS */


  return USBD_OK;
 8015b12:	2300      	movs	r3, #0
}
 8015b14:	4618      	mov	r0, r3
 8015b16:	3710      	adds	r7, #16
 8015b18:	46bd      	mov	sp, r7
 8015b1a:	bd80      	pop	{r7, pc}

08015b1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8015b1c:	b580      	push	{r7, lr}
 8015b1e:	b082      	sub	sp, #8
 8015b20:	af00      	add	r7, sp, #0
 8015b22:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8015b24:	6878      	ldr	r0, [r7, #4]
 8015b26:	f003 feef 	bl	8019908 <USBD_LL_Start>
 8015b2a:	4603      	mov	r3, r0
}
 8015b2c:	4618      	mov	r0, r3
 8015b2e:	3708      	adds	r7, #8
 8015b30:	46bd      	mov	sp, r7
 8015b32:	bd80      	pop	{r7, pc}

08015b34 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8015b34:	b480      	push	{r7}
 8015b36:	b083      	sub	sp, #12
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015b3c:	2300      	movs	r3, #0
}
 8015b3e:	4618      	mov	r0, r3
 8015b40:	370c      	adds	r7, #12
 8015b42:	46bd      	mov	sp, r7
 8015b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b48:	4770      	bx	lr

08015b4a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b4a:	b580      	push	{r7, lr}
 8015b4c:	b084      	sub	sp, #16
 8015b4e:	af00      	add	r7, sp, #0
 8015b50:	6078      	str	r0, [r7, #4]
 8015b52:	460b      	mov	r3, r1
 8015b54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8015b56:	2303      	movs	r3, #3
 8015b58:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d009      	beq.n	8015b78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8015b64:	687b      	ldr	r3, [r7, #4]
 8015b66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	78fa      	ldrb	r2, [r7, #3]
 8015b6e:	4611      	mov	r1, r2
 8015b70:	6878      	ldr	r0, [r7, #4]
 8015b72:	4798      	blx	r3
 8015b74:	4603      	mov	r3, r0
 8015b76:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8015b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b7a:	4618      	mov	r0, r3
 8015b7c:	3710      	adds	r7, #16
 8015b7e:	46bd      	mov	sp, r7
 8015b80:	bd80      	pop	{r7, pc}

08015b82 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015b82:	b580      	push	{r7, lr}
 8015b84:	b082      	sub	sp, #8
 8015b86:	af00      	add	r7, sp, #0
 8015b88:	6078      	str	r0, [r7, #4]
 8015b8a:	460b      	mov	r3, r1
 8015b8c:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b94:	2b00      	cmp	r3, #0
 8015b96:	d007      	beq.n	8015ba8 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b9e:	685b      	ldr	r3, [r3, #4]
 8015ba0:	78fa      	ldrb	r2, [r7, #3]
 8015ba2:	4611      	mov	r1, r2
 8015ba4:	6878      	ldr	r0, [r7, #4]
 8015ba6:	4798      	blx	r3
  }

  return USBD_OK;
 8015ba8:	2300      	movs	r3, #0
}
 8015baa:	4618      	mov	r0, r3
 8015bac:	3708      	adds	r7, #8
 8015bae:	46bd      	mov	sp, r7
 8015bb0:	bd80      	pop	{r7, pc}

08015bb2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015bb2:	b580      	push	{r7, lr}
 8015bb4:	b084      	sub	sp, #16
 8015bb6:	af00      	add	r7, sp, #0
 8015bb8:	6078      	str	r0, [r7, #4]
 8015bba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015bbc:	687b      	ldr	r3, [r7, #4]
 8015bbe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bc2:	6839      	ldr	r1, [r7, #0]
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f000 ff2b 	bl	8016a20 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2201      	movs	r2, #1
 8015bce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8015bd8:	461a      	mov	r2, r3
 8015bda:	687b      	ldr	r3, [r7, #4]
 8015bdc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015be6:	f003 031f 	and.w	r3, r3, #31
 8015bea:	2b01      	cmp	r3, #1
 8015bec:	d00e      	beq.n	8015c0c <USBD_LL_SetupStage+0x5a>
 8015bee:	2b01      	cmp	r3, #1
 8015bf0:	d302      	bcc.n	8015bf8 <USBD_LL_SetupStage+0x46>
 8015bf2:	2b02      	cmp	r3, #2
 8015bf4:	d014      	beq.n	8015c20 <USBD_LL_SetupStage+0x6e>
 8015bf6:	e01d      	b.n	8015c34 <USBD_LL_SetupStage+0x82>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015bfe:	4619      	mov	r1, r3
 8015c00:	6878      	ldr	r0, [r7, #4]
 8015c02:	f000 fa17 	bl	8016034 <USBD_StdDevReq>
 8015c06:	4603      	mov	r3, r0
 8015c08:	73fb      	strb	r3, [r7, #15]
      break;
 8015c0a:	e020      	b.n	8015c4e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8015c0c:	687b      	ldr	r3, [r7, #4]
 8015c0e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015c12:	4619      	mov	r1, r3
 8015c14:	6878      	ldr	r0, [r7, #4]
 8015c16:	f000 fa7b 	bl	8016110 <USBD_StdItfReq>
 8015c1a:	4603      	mov	r3, r0
 8015c1c:	73fb      	strb	r3, [r7, #15]
      break;
 8015c1e:	e016      	b.n	8015c4e <USBD_LL_SetupStage+0x9c>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015c26:	4619      	mov	r1, r3
 8015c28:	6878      	ldr	r0, [r7, #4]
 8015c2a:	f000 fab7 	bl	801619c <USBD_StdEPReq>
 8015c2e:	4603      	mov	r3, r0
 8015c30:	73fb      	strb	r3, [r7, #15]
      break;
 8015c32:	e00c      	b.n	8015c4e <USBD_LL_SetupStage+0x9c>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015c3a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015c3e:	b2db      	uxtb	r3, r3
 8015c40:	4619      	mov	r1, r3
 8015c42:	6878      	ldr	r0, [r7, #4]
 8015c44:	f003 fedf 	bl	8019a06 <USBD_LL_StallEP>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	73fb      	strb	r3, [r7, #15]
      break;
 8015c4c:	bf00      	nop
  }

  return ret;
 8015c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c50:	4618      	mov	r0, r3
 8015c52:	3710      	adds	r7, #16
 8015c54:	46bd      	mov	sp, r7
 8015c56:	bd80      	pop	{r7, pc}

08015c58 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015c58:	b580      	push	{r7, lr}
 8015c5a:	b086      	sub	sp, #24
 8015c5c:	af00      	add	r7, sp, #0
 8015c5e:	60f8      	str	r0, [r7, #12]
 8015c60:	460b      	mov	r3, r1
 8015c62:	607a      	str	r2, [r7, #4]
 8015c64:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015c66:	7afb      	ldrb	r3, [r7, #11]
 8015c68:	2b00      	cmp	r3, #0
 8015c6a:	d137      	bne.n	8015cdc <USBD_LL_DataOutStage+0x84>
  {
    pep = &pdev->ep_out[0];
 8015c6c:	68fb      	ldr	r3, [r7, #12]
 8015c6e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8015c72:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015c74:	68fb      	ldr	r3, [r7, #12]
 8015c76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015c7a:	2b03      	cmp	r3, #3
 8015c7c:	d14a      	bne.n	8015d14 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8015c7e:	693b      	ldr	r3, [r7, #16]
 8015c80:	689a      	ldr	r2, [r3, #8]
 8015c82:	693b      	ldr	r3, [r7, #16]
 8015c84:	68db      	ldr	r3, [r3, #12]
 8015c86:	429a      	cmp	r2, r3
 8015c88:	d913      	bls.n	8015cb2 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015c8a:	693b      	ldr	r3, [r7, #16]
 8015c8c:	689a      	ldr	r2, [r3, #8]
 8015c8e:	693b      	ldr	r3, [r7, #16]
 8015c90:	68db      	ldr	r3, [r3, #12]
 8015c92:	1ad2      	subs	r2, r2, r3
 8015c94:	693b      	ldr	r3, [r7, #16]
 8015c96:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015c98:	693b      	ldr	r3, [r7, #16]
 8015c9a:	68da      	ldr	r2, [r3, #12]
 8015c9c:	693b      	ldr	r3, [r7, #16]
 8015c9e:	689b      	ldr	r3, [r3, #8]
 8015ca0:	4293      	cmp	r3, r2
 8015ca2:	bf28      	it	cs
 8015ca4:	4613      	movcs	r3, r2
 8015ca6:	461a      	mov	r2, r3
 8015ca8:	6879      	ldr	r1, [r7, #4]
 8015caa:	68f8      	ldr	r0, [r7, #12]
 8015cac:	f000 ff8f 	bl	8016bce <USBD_CtlContinueRx>
 8015cb0:	e030      	b.n	8015d14 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015cb2:	68fb      	ldr	r3, [r7, #12]
 8015cb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cb8:	691b      	ldr	r3, [r3, #16]
 8015cba:	2b00      	cmp	r3, #0
 8015cbc:	d00a      	beq.n	8015cd4 <USBD_LL_DataOutStage+0x7c>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015cbe:	68fb      	ldr	r3, [r7, #12]
 8015cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8015cc4:	2b03      	cmp	r3, #3
 8015cc6:	d105      	bne.n	8015cd4 <USBD_LL_DataOutStage+0x7c>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8015cc8:	68fb      	ldr	r3, [r7, #12]
 8015cca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cce:	691b      	ldr	r3, [r3, #16]
 8015cd0:	68f8      	ldr	r0, [r7, #12]
 8015cd2:	4798      	blx	r3
        }
        (void)USBD_CtlSendStatus(pdev);
 8015cd4:	68f8      	ldr	r0, [r7, #12]
 8015cd6:	f000 ff8b 	bl	8016bf0 <USBD_CtlSendStatus>
 8015cda:	e01b      	b.n	8015d14 <USBD_LL_DataOutStage+0xbc>
        (void)USBD_LL_StallEP(pdev, 0U);
      }
#endif
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015ce2:	699b      	ldr	r3, [r3, #24]
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d013      	beq.n	8015d10 <USBD_LL_DataOutStage+0xb8>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015ce8:	68fb      	ldr	r3, [r7, #12]
 8015cea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8015cee:	2b03      	cmp	r3, #3
 8015cf0:	d10e      	bne.n	8015d10 <USBD_LL_DataOutStage+0xb8>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015cf8:	699b      	ldr	r3, [r3, #24]
 8015cfa:	7afa      	ldrb	r2, [r7, #11]
 8015cfc:	4611      	mov	r1, r2
 8015cfe:	68f8      	ldr	r0, [r7, #12]
 8015d00:	4798      	blx	r3
 8015d02:	4603      	mov	r3, r0
 8015d04:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015d06:	7dfb      	ldrb	r3, [r7, #23]
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d003      	beq.n	8015d14 <USBD_LL_DataOutStage+0xbc>
    {
      return ret;
 8015d0c:	7dfb      	ldrb	r3, [r7, #23]
 8015d0e:	e002      	b.n	8015d16 <USBD_LL_DataOutStage+0xbe>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015d10:	2303      	movs	r3, #3
 8015d12:	e000      	b.n	8015d16 <USBD_LL_DataOutStage+0xbe>
  }

  return USBD_OK;
 8015d14:	2300      	movs	r3, #0
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3718      	adds	r7, #24
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	bd80      	pop	{r7, pc}

08015d1e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015d1e:	b580      	push	{r7, lr}
 8015d20:	b086      	sub	sp, #24
 8015d22:	af00      	add	r7, sp, #0
 8015d24:	60f8      	str	r0, [r7, #12]
 8015d26:	460b      	mov	r3, r1
 8015d28:	607a      	str	r2, [r7, #4]
 8015d2a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8015d2c:	7afb      	ldrb	r3, [r7, #11]
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d16a      	bne.n	8015e08 <USBD_LL_DataInStage+0xea>
  {
    pep = &pdev->ep_in[0];
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	3314      	adds	r3, #20
 8015d36:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015d3e:	2b02      	cmp	r3, #2
 8015d40:	d155      	bne.n	8015dee <USBD_LL_DataInStage+0xd0>
    {
      if (pep->rem_length > pep->maxpacket)
 8015d42:	693b      	ldr	r3, [r7, #16]
 8015d44:	689a      	ldr	r2, [r3, #8]
 8015d46:	693b      	ldr	r3, [r7, #16]
 8015d48:	68db      	ldr	r3, [r3, #12]
 8015d4a:	429a      	cmp	r2, r3
 8015d4c:	d914      	bls.n	8015d78 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8015d4e:	693b      	ldr	r3, [r7, #16]
 8015d50:	689a      	ldr	r2, [r3, #8]
 8015d52:	693b      	ldr	r3, [r7, #16]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	1ad2      	subs	r2, r2, r3
 8015d58:	693b      	ldr	r3, [r7, #16]
 8015d5a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8015d5c:	693b      	ldr	r3, [r7, #16]
 8015d5e:	689b      	ldr	r3, [r3, #8]
 8015d60:	461a      	mov	r2, r3
 8015d62:	6879      	ldr	r1, [r7, #4]
 8015d64:	68f8      	ldr	r0, [r7, #12]
 8015d66:	f000 ff21 	bl	8016bac <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
       (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015d6a:	2300      	movs	r3, #0
 8015d6c:	2200      	movs	r2, #0
 8015d6e:	2100      	movs	r1, #0
 8015d70:	68f8      	ldr	r0, [r7, #12]
 8015d72:	f003 fef2 	bl	8019b5a <USBD_LL_PrepareReceive>
 8015d76:	e03a      	b.n	8015dee <USBD_LL_DataInStage+0xd0>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8015d78:	693b      	ldr	r3, [r7, #16]
 8015d7a:	68da      	ldr	r2, [r3, #12]
 8015d7c:	693b      	ldr	r3, [r7, #16]
 8015d7e:	689b      	ldr	r3, [r3, #8]
 8015d80:	429a      	cmp	r2, r3
 8015d82:	d11c      	bne.n	8015dbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8015d84:	693b      	ldr	r3, [r7, #16]
 8015d86:	685a      	ldr	r2, [r3, #4]
 8015d88:	693b      	ldr	r3, [r7, #16]
 8015d8a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015d8c:	429a      	cmp	r2, r3
 8015d8e:	d316      	bcc.n	8015dbe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015d90:	693b      	ldr	r3, [r7, #16]
 8015d92:	685a      	ldr	r2, [r3, #4]
 8015d94:	68fb      	ldr	r3, [r7, #12]
 8015d96:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015d9a:	429a      	cmp	r2, r3
 8015d9c:	d20f      	bcs.n	8015dbe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015d9e:	2200      	movs	r2, #0
 8015da0:	2100      	movs	r1, #0
 8015da2:	68f8      	ldr	r0, [r7, #12]
 8015da4:	f000 ff02 	bl	8016bac <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015da8:	68fb      	ldr	r3, [r7, #12]
 8015daa:	2200      	movs	r2, #0
 8015dac:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015db0:	2300      	movs	r3, #0
 8015db2:	2200      	movs	r2, #0
 8015db4:	2100      	movs	r1, #0
 8015db6:	68f8      	ldr	r0, [r7, #12]
 8015db8:	f003 fecf 	bl	8019b5a <USBD_LL_PrepareReceive>
 8015dbc:	e017      	b.n	8015dee <USBD_LL_DataInStage+0xd0>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015dbe:	68fb      	ldr	r3, [r7, #12]
 8015dc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dc4:	68db      	ldr	r3, [r3, #12]
 8015dc6:	2b00      	cmp	r3, #0
 8015dc8:	d00a      	beq.n	8015de0 <USBD_LL_DataInStage+0xc2>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8015dd0:	2b03      	cmp	r3, #3
 8015dd2:	d105      	bne.n	8015de0 <USBD_LL_DataInStage+0xc2>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8015dd4:	68fb      	ldr	r3, [r7, #12]
 8015dd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015dda:	68db      	ldr	r3, [r3, #12]
 8015ddc:	68f8      	ldr	r0, [r7, #12]
 8015dde:	4798      	blx	r3
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015de0:	2180      	movs	r1, #128	; 0x80
 8015de2:	68f8      	ldr	r0, [r7, #12]
 8015de4:	f003 fe0f 	bl	8019a06 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015de8:	68f8      	ldr	r0, [r7, #12]
 8015dea:	f000 ff14 	bl	8016c16 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8015dee:	68fb      	ldr	r3, [r7, #12]
 8015df0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015df4:	2b01      	cmp	r3, #1
 8015df6:	d123      	bne.n	8015e40 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8015df8:	68f8      	ldr	r0, [r7, #12]
 8015dfa:	f7ff fe9b 	bl	8015b34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015dfe:	68fb      	ldr	r3, [r7, #12]
 8015e00:	2200      	movs	r2, #0
 8015e02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015e06:	e01b      	b.n	8015e40 <USBD_LL_DataInStage+0x122>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e08:	68fb      	ldr	r3, [r7, #12]
 8015e0a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e0e:	695b      	ldr	r3, [r3, #20]
 8015e10:	2b00      	cmp	r3, #0
 8015e12:	d013      	beq.n	8015e3c <USBD_LL_DataInStage+0x11e>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8015e1a:	2b03      	cmp	r3, #3
 8015e1c:	d10e      	bne.n	8015e3c <USBD_LL_DataInStage+0x11e>
  {
    ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8015e1e:	68fb      	ldr	r3, [r7, #12]
 8015e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e24:	695b      	ldr	r3, [r3, #20]
 8015e26:	7afa      	ldrb	r2, [r7, #11]
 8015e28:	4611      	mov	r1, r2
 8015e2a:	68f8      	ldr	r0, [r7, #12]
 8015e2c:	4798      	blx	r3
 8015e2e:	4603      	mov	r3, r0
 8015e30:	75fb      	strb	r3, [r7, #23]

    if (ret != USBD_OK)
 8015e32:	7dfb      	ldrb	r3, [r7, #23]
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d003      	beq.n	8015e40 <USBD_LL_DataInStage+0x122>
    {
      return ret;
 8015e38:	7dfb      	ldrb	r3, [r7, #23]
 8015e3a:	e002      	b.n	8015e42 <USBD_LL_DataInStage+0x124>
    }
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8015e3c:	2303      	movs	r3, #3
 8015e3e:	e000      	b.n	8015e42 <USBD_LL_DataInStage+0x124>
  }

  return USBD_OK;
 8015e40:	2300      	movs	r3, #0
}
 8015e42:	4618      	mov	r0, r3
 8015e44:	3718      	adds	r7, #24
 8015e46:	46bd      	mov	sp, r7
 8015e48:	bd80      	pop	{r7, pc}

08015e4a <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015e4a:	b580      	push	{r7, lr}
 8015e4c:	b082      	sub	sp, #8
 8015e4e:	af00      	add	r7, sp, #0
 8015e50:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	2201      	movs	r2, #1
 8015e56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015e5a:	687b      	ldr	r3, [r7, #4]
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	2200      	movs	r2, #0
 8015e66:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	2200      	movs	r2, #0
 8015e6c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData != NULL)
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8015e76:	2b00      	cmp	r3, #0
 8015e78:	d009      	beq.n	8015e8e <USBD_LL_Reset+0x44>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015e7a:	687b      	ldr	r3, [r7, #4]
 8015e7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015e80:	685b      	ldr	r3, [r3, #4]
 8015e82:	687a      	ldr	r2, [r7, #4]
 8015e84:	6852      	ldr	r2, [r2, #4]
 8015e86:	b2d2      	uxtb	r2, r2
 8015e88:	4611      	mov	r1, r2
 8015e8a:	6878      	ldr	r0, [r7, #4]
 8015e8c:	4798      	blx	r3
  }

    /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015e8e:	2340      	movs	r3, #64	; 0x40
 8015e90:	2200      	movs	r2, #0
 8015e92:	2100      	movs	r1, #0
 8015e94:	6878      	ldr	r0, [r7, #4]
 8015e96:	f003 fd52 	bl	801993e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2201      	movs	r2, #1
 8015e9e:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	2240      	movs	r2, #64	; 0x40
 8015ea6:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015eaa:	2340      	movs	r3, #64	; 0x40
 8015eac:	2200      	movs	r2, #0
 8015eae:	2180      	movs	r1, #128	; 0x80
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f003 fd44 	bl	801993e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	2201      	movs	r2, #1
 8015eba:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	2240      	movs	r2, #64	; 0x40
 8015ec0:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8015ec2:	2300      	movs	r3, #0
}
 8015ec4:	4618      	mov	r0, r3
 8015ec6:	3708      	adds	r7, #8
 8015ec8:	46bd      	mov	sp, r7
 8015eca:	bd80      	pop	{r7, pc}

08015ecc <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015ecc:	b480      	push	{r7}
 8015ece:	b083      	sub	sp, #12
 8015ed0:	af00      	add	r7, sp, #0
 8015ed2:	6078      	str	r0, [r7, #4]
 8015ed4:	460b      	mov	r3, r1
 8015ed6:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	78fa      	ldrb	r2, [r7, #3]
 8015edc:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015ede:	2300      	movs	r3, #0
}
 8015ee0:	4618      	mov	r0, r3
 8015ee2:	370c      	adds	r7, #12
 8015ee4:	46bd      	mov	sp, r7
 8015ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eea:	4770      	bx	lr

08015eec <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015eec:	b480      	push	{r7}
 8015eee:	b083      	sub	sp, #12
 8015ef0:	af00      	add	r7, sp, #0
 8015ef2:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015f00:	687b      	ldr	r3, [r7, #4]
 8015f02:	2204      	movs	r2, #4
 8015f04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015f08:	2300      	movs	r3, #0
}
 8015f0a:	4618      	mov	r0, r3
 8015f0c:	370c      	adds	r7, #12
 8015f0e:	46bd      	mov	sp, r7
 8015f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f14:	4770      	bx	lr

08015f16 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015f16:	b480      	push	{r7}
 8015f18:	b083      	sub	sp, #12
 8015f1a:	af00      	add	r7, sp, #0
 8015f1c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f24:	2b04      	cmp	r3, #4
 8015f26:	d105      	bne.n	8015f34 <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015f28:	687b      	ldr	r3, [r7, #4]
 8015f2a:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015f34:	2300      	movs	r3, #0
}
 8015f36:	4618      	mov	r0, r3
 8015f38:	370c      	adds	r7, #12
 8015f3a:	46bd      	mov	sp, r7
 8015f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f40:	4770      	bx	lr

08015f42 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015f42:	b580      	push	{r7, lr}
 8015f44:	b082      	sub	sp, #8
 8015f46:	af00      	add	r7, sp, #0
 8015f48:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015f4a:	687b      	ldr	r3, [r7, #4]
 8015f4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015f50:	2b03      	cmp	r3, #3
 8015f52:	d10b      	bne.n	8015f6c <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8015f54:	687b      	ldr	r3, [r7, #4]
 8015f56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f5a:	69db      	ldr	r3, [r3, #28]
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d005      	beq.n	8015f6c <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015f66:	69db      	ldr	r3, [r3, #28]
 8015f68:	6878      	ldr	r0, [r7, #4]
 8015f6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015f6c:	2300      	movs	r3, #0
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3708      	adds	r7, #8
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}

08015f76 <USBD_LL_IsoINIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015f76:	b480      	push	{r7}
 8015f78:	b083      	sub	sp, #12
 8015f7a:	af00      	add	r7, sp, #0
 8015f7c:	6078      	str	r0, [r7, #4]
 8015f7e:	460b      	mov	r3, r1
 8015f80:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015f82:	2300      	movs	r3, #0
}
 8015f84:	4618      	mov	r0, r3
 8015f86:	370c      	adds	r7, #12
 8015f88:	46bd      	mov	sp, r7
 8015f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8e:	4770      	bx	lr

08015f90 <USBD_LL_IsoOUTIncomplete>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015f90:	b480      	push	{r7}
 8015f92:	b083      	sub	sp, #12
 8015f94:	af00      	add	r7, sp, #0
 8015f96:	6078      	str	r0, [r7, #4]
 8015f98:	460b      	mov	r3, r1
 8015f9a:	70fb      	strb	r3, [r7, #3]
  /* Prevent unused arguments compilation warning */
  UNUSED(pdev);
  UNUSED(epnum);

  return USBD_OK;
 8015f9c:	2300      	movs	r3, #0
}
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	370c      	adds	r7, #12
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fa8:	4770      	bx	lr

08015faa <USBD_LL_DevConnected>:
*         Handle device connection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015faa:	b480      	push	{r7}
 8015fac:	b083      	sub	sp, #12
 8015fae:	af00      	add	r7, sp, #0
 8015fb0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015fb2:	2300      	movs	r3, #0
}
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	370c      	adds	r7, #12
 8015fb8:	46bd      	mov	sp, r7
 8015fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fbe:	4770      	bx	lr

08015fc0 <USBD_LL_DevDisconnected>:
*         Handle device disconnection event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015fc0:	b580      	push	{r7, lr}
 8015fc2:	b082      	sub	sp, #8
 8015fc4:	af00      	add	r7, sp, #0
 8015fc6:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015fc8:	687b      	ldr	r3, [r7, #4]
 8015fca:	2201      	movs	r2, #1
 8015fcc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d009      	beq.n	8015fee <USBD_LL_DevDisconnected+0x2e>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015fe0:	685b      	ldr	r3, [r3, #4]
 8015fe2:	687a      	ldr	r2, [r7, #4]
 8015fe4:	6852      	ldr	r2, [r2, #4]
 8015fe6:	b2d2      	uxtb	r2, r2
 8015fe8:	4611      	mov	r1, r2
 8015fea:	6878      	ldr	r0, [r7, #4]
 8015fec:	4798      	blx	r3
  }

  return USBD_OK;
 8015fee:	2300      	movs	r3, #0
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3708      	adds	r7, #8
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}

08015ff8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015ff8:	b480      	push	{r7}
 8015ffa:	b087      	sub	sp, #28
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8016004:	697b      	ldr	r3, [r7, #20]
 8016006:	781b      	ldrb	r3, [r3, #0]
 8016008:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 801600a:	697b      	ldr	r3, [r7, #20]
 801600c:	3301      	adds	r3, #1
 801600e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8016010:	697b      	ldr	r3, [r7, #20]
 8016012:	781b      	ldrb	r3, [r3, #0]
 8016014:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8016016:	8a3b      	ldrh	r3, [r7, #16]
 8016018:	021b      	lsls	r3, r3, #8
 801601a:	b21a      	sxth	r2, r3
 801601c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8016020:	4313      	orrs	r3, r2
 8016022:	b21b      	sxth	r3, r3
 8016024:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8016026:	89fb      	ldrh	r3, [r7, #14]
}
 8016028:	4618      	mov	r0, r3
 801602a:	371c      	adds	r7, #28
 801602c:	46bd      	mov	sp, r7
 801602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016032:	4770      	bx	lr

08016034 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016034:	b580      	push	{r7, lr}
 8016036:	b084      	sub	sp, #16
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801603e:	2300      	movs	r3, #0
 8016040:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	781b      	ldrb	r3, [r3, #0]
 8016046:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801604a:	2b20      	cmp	r3, #32
 801604c:	d004      	beq.n	8016058 <USBD_StdDevReq+0x24>
 801604e:	2b40      	cmp	r3, #64	; 0x40
 8016050:	d002      	beq.n	8016058 <USBD_StdDevReq+0x24>
 8016052:	2b00      	cmp	r3, #0
 8016054:	d00a      	beq.n	801606c <USBD_StdDevReq+0x38>
 8016056:	e050      	b.n	80160fa <USBD_StdDevReq+0xc6>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016058:	687b      	ldr	r3, [r7, #4]
 801605a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801605e:	689b      	ldr	r3, [r3, #8]
 8016060:	6839      	ldr	r1, [r7, #0]
 8016062:	6878      	ldr	r0, [r7, #4]
 8016064:	4798      	blx	r3
 8016066:	4603      	mov	r3, r0
 8016068:	73fb      	strb	r3, [r7, #15]
    break;
 801606a:	e04b      	b.n	8016104 <USBD_StdDevReq+0xd0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	785b      	ldrb	r3, [r3, #1]
 8016070:	2b09      	cmp	r3, #9
 8016072:	d83c      	bhi.n	80160ee <USBD_StdDevReq+0xba>
 8016074:	a201      	add	r2, pc, #4	; (adr r2, 801607c <USBD_StdDevReq+0x48>)
 8016076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801607a:	bf00      	nop
 801607c:	080160d1 	.word	0x080160d1
 8016080:	080160e5 	.word	0x080160e5
 8016084:	080160ef 	.word	0x080160ef
 8016088:	080160db 	.word	0x080160db
 801608c:	080160ef 	.word	0x080160ef
 8016090:	080160af 	.word	0x080160af
 8016094:	080160a5 	.word	0x080160a5
 8016098:	080160ef 	.word	0x080160ef
 801609c:	080160c7 	.word	0x080160c7
 80160a0:	080160b9 	.word	0x080160b9
    {
    case USB_REQ_GET_DESCRIPTOR:
      USBD_GetDescriptor(pdev, req);
 80160a4:	6839      	ldr	r1, [r7, #0]
 80160a6:	6878      	ldr	r0, [r7, #4]
 80160a8:	f000 f9ce 	bl	8016448 <USBD_GetDescriptor>
      break;
 80160ac:	e024      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress(pdev, req);
 80160ae:	6839      	ldr	r1, [r7, #0]
 80160b0:	6878      	ldr	r0, [r7, #4]
 80160b2:	f000 fb33 	bl	801671c <USBD_SetAddress>
      break;
 80160b6:	e01f      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_CONFIGURATION:
      ret = USBD_SetConfig(pdev, req);
 80160b8:	6839      	ldr	r1, [r7, #0]
 80160ba:	6878      	ldr	r0, [r7, #4]
 80160bc:	f000 fb70 	bl	80167a0 <USBD_SetConfig>
 80160c0:	4603      	mov	r3, r0
 80160c2:	73fb      	strb	r3, [r7, #15]
      break;
 80160c4:	e018      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig(pdev, req);
 80160c6:	6839      	ldr	r1, [r7, #0]
 80160c8:	6878      	ldr	r0, [r7, #4]
 80160ca:	f000 fc0d 	bl	80168e8 <USBD_GetConfig>
      break;
 80160ce:	e013      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus(pdev, req);
 80160d0:	6839      	ldr	r1, [r7, #0]
 80160d2:	6878      	ldr	r0, [r7, #4]
 80160d4:	f000 fc3c 	bl	8016950 <USBD_GetStatus>
      break;
 80160d8:	e00e      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_SET_FEATURE:
      USBD_SetFeature(pdev, req);
 80160da:	6839      	ldr	r1, [r7, #0]
 80160dc:	6878      	ldr	r0, [r7, #4]
 80160de:	f000 fc6a 	bl	80169b6 <USBD_SetFeature>
      break;
 80160e2:	e009      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature(pdev, req);
 80160e4:	6839      	ldr	r1, [r7, #0]
 80160e6:	6878      	ldr	r0, [r7, #4]
 80160e8:	f000 fc79 	bl	80169de <USBD_ClrFeature>
      break;
 80160ec:	e004      	b.n	80160f8 <USBD_StdDevReq+0xc4>

    default:
      USBD_CtlError(pdev, req);
 80160ee:	6839      	ldr	r1, [r7, #0]
 80160f0:	6878      	ldr	r0, [r7, #4]
 80160f2:	f000 fccf 	bl	8016a94 <USBD_CtlError>
      break;
 80160f6:	bf00      	nop
    }
    break;
 80160f8:	e004      	b.n	8016104 <USBD_StdDevReq+0xd0>

  default:
    USBD_CtlError(pdev, req);
 80160fa:	6839      	ldr	r1, [r7, #0]
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f000 fcc9 	bl	8016a94 <USBD_CtlError>
    break;
 8016102:	bf00      	nop
  }

  return ret;
 8016104:	7bfb      	ldrb	r3, [r7, #15]
}
 8016106:	4618      	mov	r0, r3
 8016108:	3710      	adds	r7, #16
 801610a:	46bd      	mov	sp, r7
 801610c:	bd80      	pop	{r7, pc}
 801610e:	bf00      	nop

08016110 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016110:	b580      	push	{r7, lr}
 8016112:	b084      	sub	sp, #16
 8016114:	af00      	add	r7, sp, #0
 8016116:	6078      	str	r0, [r7, #4]
 8016118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801611a:	2300      	movs	r3, #0
 801611c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	781b      	ldrb	r3, [r3, #0]
 8016122:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016126:	2b20      	cmp	r3, #32
 8016128:	d003      	beq.n	8016132 <USBD_StdItfReq+0x22>
 801612a:	2b40      	cmp	r3, #64	; 0x40
 801612c:	d001      	beq.n	8016132 <USBD_StdItfReq+0x22>
 801612e:	2b00      	cmp	r3, #0
 8016130:	d12a      	bne.n	8016188 <USBD_StdItfReq+0x78>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 8016132:	687b      	ldr	r3, [r7, #4]
 8016134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016138:	3b01      	subs	r3, #1
 801613a:	2b02      	cmp	r3, #2
 801613c:	d81d      	bhi.n	801617a <USBD_StdItfReq+0x6a>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801613e:	683b      	ldr	r3, [r7, #0]
 8016140:	889b      	ldrh	r3, [r3, #4]
 8016142:	b2db      	uxtb	r3, r3
 8016144:	2b01      	cmp	r3, #1
 8016146:	d813      	bhi.n	8016170 <USBD_StdItfReq+0x60>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8016148:	687b      	ldr	r3, [r7, #4]
 801614a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801614e:	689b      	ldr	r3, [r3, #8]
 8016150:	6839      	ldr	r1, [r7, #0]
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	4798      	blx	r3
 8016156:	4603      	mov	r3, r0
 8016158:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 801615a:	683b      	ldr	r3, [r7, #0]
 801615c:	88db      	ldrh	r3, [r3, #6]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d110      	bne.n	8016184 <USBD_StdItfReq+0x74>
 8016162:	7bfb      	ldrb	r3, [r7, #15]
 8016164:	2b00      	cmp	r3, #0
 8016166:	d10d      	bne.n	8016184 <USBD_StdItfReq+0x74>
        {
          (void)USBD_CtlSendStatus(pdev);
 8016168:	6878      	ldr	r0, [r7, #4]
 801616a:	f000 fd41 	bl	8016bf0 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 801616e:	e009      	b.n	8016184 <USBD_StdItfReq+0x74>
        USBD_CtlError(pdev, req);
 8016170:	6839      	ldr	r1, [r7, #0]
 8016172:	6878      	ldr	r0, [r7, #4]
 8016174:	f000 fc8e 	bl	8016a94 <USBD_CtlError>
      break;
 8016178:	e004      	b.n	8016184 <USBD_StdItfReq+0x74>

    default:
      USBD_CtlError(pdev, req);
 801617a:	6839      	ldr	r1, [r7, #0]
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f000 fc89 	bl	8016a94 <USBD_CtlError>
      break;
 8016182:	e000      	b.n	8016186 <USBD_StdItfReq+0x76>
      break;
 8016184:	bf00      	nop
    }
    break;
 8016186:	e004      	b.n	8016192 <USBD_StdItfReq+0x82>

  default:
    USBD_CtlError(pdev, req);
 8016188:	6839      	ldr	r1, [r7, #0]
 801618a:	6878      	ldr	r0, [r7, #4]
 801618c:	f000 fc82 	bl	8016a94 <USBD_CtlError>
    break;
 8016190:	bf00      	nop
  }

  return ret;
 8016192:	7bfb      	ldrb	r3, [r7, #15]
}
 8016194:	4618      	mov	r0, r3
 8016196:	3710      	adds	r7, #16
 8016198:	46bd      	mov	sp, r7
 801619a:	bd80      	pop	{r7, pc}

0801619c <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801619c:	b580      	push	{r7, lr}
 801619e:	b084      	sub	sp, #16
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
 80161a4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80161a6:	2300      	movs	r3, #0
 80161a8:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80161aa:	683b      	ldr	r3, [r7, #0]
 80161ac:	889b      	ldrh	r3, [r3, #4]
 80161ae:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80161b0:	683b      	ldr	r3, [r7, #0]
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80161b8:	2b20      	cmp	r3, #32
 80161ba:	d004      	beq.n	80161c6 <USBD_StdEPReq+0x2a>
 80161bc:	2b40      	cmp	r3, #64	; 0x40
 80161be:	d002      	beq.n	80161c6 <USBD_StdEPReq+0x2a>
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d00a      	beq.n	80161da <USBD_StdEPReq+0x3e>
 80161c4:	e135      	b.n	8016432 <USBD_StdEPReq+0x296>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80161cc:	689b      	ldr	r3, [r3, #8]
 80161ce:	6839      	ldr	r1, [r7, #0]
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	4798      	blx	r3
 80161d4:	4603      	mov	r3, r0
 80161d6:	73fb      	strb	r3, [r7, #15]
    break;
 80161d8:	e130      	b.n	801643c <USBD_StdEPReq+0x2a0>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 80161da:	683b      	ldr	r3, [r7, #0]
 80161dc:	785b      	ldrb	r3, [r3, #1]
 80161de:	2b01      	cmp	r3, #1
 80161e0:	d03e      	beq.n	8016260 <USBD_StdEPReq+0xc4>
 80161e2:	2b03      	cmp	r3, #3
 80161e4:	d002      	beq.n	80161ec <USBD_StdEPReq+0x50>
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	d077      	beq.n	80162da <USBD_StdEPReq+0x13e>
 80161ea:	e11c      	b.n	8016426 <USBD_StdEPReq+0x28a>
    {
    case USB_REQ_SET_FEATURE:
      switch (pdev->dev_state)
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80161f2:	2b02      	cmp	r3, #2
 80161f4:	d002      	beq.n	80161fc <USBD_StdEPReq+0x60>
 80161f6:	2b03      	cmp	r3, #3
 80161f8:	d015      	beq.n	8016226 <USBD_StdEPReq+0x8a>
 80161fa:	e02b      	b.n	8016254 <USBD_StdEPReq+0xb8>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80161fc:	7bbb      	ldrb	r3, [r7, #14]
 80161fe:	2b00      	cmp	r3, #0
 8016200:	d00c      	beq.n	801621c <USBD_StdEPReq+0x80>
 8016202:	7bbb      	ldrb	r3, [r7, #14]
 8016204:	2b80      	cmp	r3, #128	; 0x80
 8016206:	d009      	beq.n	801621c <USBD_StdEPReq+0x80>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 8016208:	7bbb      	ldrb	r3, [r7, #14]
 801620a:	4619      	mov	r1, r3
 801620c:	6878      	ldr	r0, [r7, #4]
 801620e:	f003 fbfa 	bl	8019a06 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016212:	2180      	movs	r1, #128	; 0x80
 8016214:	6878      	ldr	r0, [r7, #4]
 8016216:	f003 fbf6 	bl	8019a06 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801621a:	e020      	b.n	801625e <USBD_StdEPReq+0xc2>
          USBD_CtlError(pdev, req);
 801621c:	6839      	ldr	r1, [r7, #0]
 801621e:	6878      	ldr	r0, [r7, #4]
 8016220:	f000 fc38 	bl	8016a94 <USBD_CtlError>
        break;
 8016224:	e01b      	b.n	801625e <USBD_StdEPReq+0xc2>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 8016226:	683b      	ldr	r3, [r7, #0]
 8016228:	885b      	ldrh	r3, [r3, #2]
 801622a:	2b00      	cmp	r3, #0
 801622c:	d10e      	bne.n	801624c <USBD_StdEPReq+0xb0>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801622e:	7bbb      	ldrb	r3, [r7, #14]
 8016230:	2b00      	cmp	r3, #0
 8016232:	d00b      	beq.n	801624c <USBD_StdEPReq+0xb0>
 8016234:	7bbb      	ldrb	r3, [r7, #14]
 8016236:	2b80      	cmp	r3, #128	; 0x80
 8016238:	d008      	beq.n	801624c <USBD_StdEPReq+0xb0>
 801623a:	683b      	ldr	r3, [r7, #0]
 801623c:	88db      	ldrh	r3, [r3, #6]
 801623e:	2b00      	cmp	r3, #0
 8016240:	d104      	bne.n	801624c <USBD_StdEPReq+0xb0>
          {
            (void)USBD_LL_StallEP(pdev, ep_addr);
 8016242:	7bbb      	ldrb	r3, [r7, #14]
 8016244:	4619      	mov	r1, r3
 8016246:	6878      	ldr	r0, [r7, #4]
 8016248:	f003 fbdd 	bl	8019a06 <USBD_LL_StallEP>
          }
        }
        (void)USBD_CtlSendStatus(pdev);
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f000 fccf 	bl	8016bf0 <USBD_CtlSendStatus>

        break;
 8016252:	e004      	b.n	801625e <USBD_StdEPReq+0xc2>

      default:
        USBD_CtlError(pdev, req);
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	6878      	ldr	r0, [r7, #4]
 8016258:	f000 fc1c 	bl	8016a94 <USBD_CtlError>
        break;
 801625c:	bf00      	nop
      }
      break;
 801625e:	e0e7      	b.n	8016430 <USBD_StdEPReq+0x294>

    case USB_REQ_CLEAR_FEATURE:

      switch (pdev->dev_state)
 8016260:	687b      	ldr	r3, [r7, #4]
 8016262:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016266:	2b02      	cmp	r3, #2
 8016268:	d002      	beq.n	8016270 <USBD_StdEPReq+0xd4>
 801626a:	2b03      	cmp	r3, #3
 801626c:	d015      	beq.n	801629a <USBD_StdEPReq+0xfe>
 801626e:	e02d      	b.n	80162cc <USBD_StdEPReq+0x130>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016270:	7bbb      	ldrb	r3, [r7, #14]
 8016272:	2b00      	cmp	r3, #0
 8016274:	d00c      	beq.n	8016290 <USBD_StdEPReq+0xf4>
 8016276:	7bbb      	ldrb	r3, [r7, #14]
 8016278:	2b80      	cmp	r3, #128	; 0x80
 801627a:	d009      	beq.n	8016290 <USBD_StdEPReq+0xf4>
        {
          (void)USBD_LL_StallEP(pdev, ep_addr);
 801627c:	7bbb      	ldrb	r3, [r7, #14]
 801627e:	4619      	mov	r1, r3
 8016280:	6878      	ldr	r0, [r7, #4]
 8016282:	f003 fbc0 	bl	8019a06 <USBD_LL_StallEP>
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8016286:	2180      	movs	r1, #128	; 0x80
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	f003 fbbc 	bl	8019a06 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 801628e:	e023      	b.n	80162d8 <USBD_StdEPReq+0x13c>
          USBD_CtlError(pdev, req);
 8016290:	6839      	ldr	r1, [r7, #0]
 8016292:	6878      	ldr	r0, [r7, #4]
 8016294:	f000 fbfe 	bl	8016a94 <USBD_CtlError>
        break;
 8016298:	e01e      	b.n	80162d8 <USBD_StdEPReq+0x13c>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	885b      	ldrh	r3, [r3, #2]
 801629e:	2b00      	cmp	r3, #0
 80162a0:	d119      	bne.n	80162d6 <USBD_StdEPReq+0x13a>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 80162a2:	7bbb      	ldrb	r3, [r7, #14]
 80162a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d004      	beq.n	80162b6 <USBD_StdEPReq+0x11a>
          {
            (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80162ac:	7bbb      	ldrb	r3, [r7, #14]
 80162ae:	4619      	mov	r1, r3
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f003 fbc7 	bl	8019a44 <USBD_LL_ClearStallEP>
          }
          (void)USBD_CtlSendStatus(pdev);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f000 fc9a 	bl	8016bf0 <USBD_CtlSendStatus>
          (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80162c2:	689b      	ldr	r3, [r3, #8]
 80162c4:	6839      	ldr	r1, [r7, #0]
 80162c6:	6878      	ldr	r0, [r7, #4]
 80162c8:	4798      	blx	r3
        }
        break;
 80162ca:	e004      	b.n	80162d6 <USBD_StdEPReq+0x13a>

      default:
        USBD_CtlError(pdev, req);
 80162cc:	6839      	ldr	r1, [r7, #0]
 80162ce:	6878      	ldr	r0, [r7, #4]
 80162d0:	f000 fbe0 	bl	8016a94 <USBD_CtlError>
        break;
 80162d4:	e000      	b.n	80162d8 <USBD_StdEPReq+0x13c>
        break;
 80162d6:	bf00      	nop
      }
      break;
 80162d8:	e0aa      	b.n	8016430 <USBD_StdEPReq+0x294>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 80162da:	687b      	ldr	r3, [r7, #4]
 80162dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80162e0:	2b02      	cmp	r3, #2
 80162e2:	d002      	beq.n	80162ea <USBD_StdEPReq+0x14e>
 80162e4:	2b03      	cmp	r3, #3
 80162e6:	d032      	beq.n	801634e <USBD_StdEPReq+0x1b2>
 80162e8:	e097      	b.n	801641a <USBD_StdEPReq+0x27e>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80162ea:	7bbb      	ldrb	r3, [r7, #14]
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d007      	beq.n	8016300 <USBD_StdEPReq+0x164>
 80162f0:	7bbb      	ldrb	r3, [r7, #14]
 80162f2:	2b80      	cmp	r3, #128	; 0x80
 80162f4:	d004      	beq.n	8016300 <USBD_StdEPReq+0x164>
        {
          USBD_CtlError(pdev, req);
 80162f6:	6839      	ldr	r1, [r7, #0]
 80162f8:	6878      	ldr	r0, [r7, #4]
 80162fa:	f000 fbcb 	bl	8016a94 <USBD_CtlError>
          break;
 80162fe:	e091      	b.n	8016424 <USBD_StdEPReq+0x288>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016300:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016304:	2b00      	cmp	r3, #0
 8016306:	da0b      	bge.n	8016320 <USBD_StdEPReq+0x184>
 8016308:	7bbb      	ldrb	r3, [r7, #14]
 801630a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801630e:	4613      	mov	r3, r2
 8016310:	009b      	lsls	r3, r3, #2
 8016312:	4413      	add	r3, r2
 8016314:	009b      	lsls	r3, r3, #2
 8016316:	3310      	adds	r3, #16
 8016318:	687a      	ldr	r2, [r7, #4]
 801631a:	4413      	add	r3, r2
 801631c:	3304      	adds	r3, #4
 801631e:	e00b      	b.n	8016338 <USBD_StdEPReq+0x19c>
              &pdev->ep_out[ep_addr & 0x7FU];
 8016320:	7bbb      	ldrb	r3, [r7, #14]
 8016322:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016326:	4613      	mov	r3, r2
 8016328:	009b      	lsls	r3, r3, #2
 801632a:	4413      	add	r3, r2
 801632c:	009b      	lsls	r3, r3, #2
 801632e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8016332:	687a      	ldr	r2, [r7, #4]
 8016334:	4413      	add	r3, r2
 8016336:	3304      	adds	r3, #4
 8016338:	60bb      	str	r3, [r7, #8]

        pep->status = 0x0000U;
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	2200      	movs	r2, #0
 801633e:	601a      	str	r2, [r3, #0]

        (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016340:	68bb      	ldr	r3, [r7, #8]
 8016342:	2202      	movs	r2, #2
 8016344:	4619      	mov	r1, r3
 8016346:	6878      	ldr	r0, [r7, #4]
 8016348:	f000 fc15 	bl	8016b76 <USBD_CtlSendData>
        break;
 801634c:	e06a      	b.n	8016424 <USBD_StdEPReq+0x288>

      case USBD_STATE_CONFIGURED:
        if ((ep_addr & 0x80U) == 0x80U)
 801634e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8016352:	2b00      	cmp	r3, #0
 8016354:	da11      	bge.n	801637a <USBD_StdEPReq+0x1de>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8016356:	7bbb      	ldrb	r3, [r7, #14]
 8016358:	f003 020f 	and.w	r2, r3, #15
 801635c:	6879      	ldr	r1, [r7, #4]
 801635e:	4613      	mov	r3, r2
 8016360:	009b      	lsls	r3, r3, #2
 8016362:	4413      	add	r3, r2
 8016364:	009b      	lsls	r3, r3, #2
 8016366:	440b      	add	r3, r1
 8016368:	3324      	adds	r3, #36	; 0x24
 801636a:	881b      	ldrh	r3, [r3, #0]
 801636c:	2b00      	cmp	r3, #0
 801636e:	d117      	bne.n	80163a0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016370:	6839      	ldr	r1, [r7, #0]
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f000 fb8e 	bl	8016a94 <USBD_CtlError>
            break;
 8016378:	e054      	b.n	8016424 <USBD_StdEPReq+0x288>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801637a:	7bbb      	ldrb	r3, [r7, #14]
 801637c:	f003 020f 	and.w	r2, r3, #15
 8016380:	6879      	ldr	r1, [r7, #4]
 8016382:	4613      	mov	r3, r2
 8016384:	009b      	lsls	r3, r3, #2
 8016386:	4413      	add	r3, r2
 8016388:	009b      	lsls	r3, r3, #2
 801638a:	440b      	add	r3, r1
 801638c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8016390:	881b      	ldrh	r3, [r3, #0]
 8016392:	2b00      	cmp	r3, #0
 8016394:	d104      	bne.n	80163a0 <USBD_StdEPReq+0x204>
          {
            USBD_CtlError(pdev, req);
 8016396:	6839      	ldr	r1, [r7, #0]
 8016398:	6878      	ldr	r0, [r7, #4]
 801639a:	f000 fb7b 	bl	8016a94 <USBD_CtlError>
            break;
 801639e:	e041      	b.n	8016424 <USBD_StdEPReq+0x288>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80163a4:	2b00      	cmp	r3, #0
 80163a6:	da0b      	bge.n	80163c0 <USBD_StdEPReq+0x224>
 80163a8:	7bbb      	ldrb	r3, [r7, #14]
 80163aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80163ae:	4613      	mov	r3, r2
 80163b0:	009b      	lsls	r3, r3, #2
 80163b2:	4413      	add	r3, r2
 80163b4:	009b      	lsls	r3, r3, #2
 80163b6:	3310      	adds	r3, #16
 80163b8:	687a      	ldr	r2, [r7, #4]
 80163ba:	4413      	add	r3, r2
 80163bc:	3304      	adds	r3, #4
 80163be:	e00b      	b.n	80163d8 <USBD_StdEPReq+0x23c>
              &pdev->ep_out[ep_addr & 0x7FU];
 80163c0:	7bbb      	ldrb	r3, [r7, #14]
 80163c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80163c6:	4613      	mov	r3, r2
 80163c8:	009b      	lsls	r3, r3, #2
 80163ca:	4413      	add	r3, r2
 80163cc:	009b      	lsls	r3, r3, #2
 80163ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80163d2:	687a      	ldr	r2, [r7, #4]
 80163d4:	4413      	add	r3, r2
 80163d6:	3304      	adds	r3, #4
 80163d8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80163da:	7bbb      	ldrb	r3, [r7, #14]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d002      	beq.n	80163e6 <USBD_StdEPReq+0x24a>
 80163e0:	7bbb      	ldrb	r3, [r7, #14]
 80163e2:	2b80      	cmp	r3, #128	; 0x80
 80163e4:	d103      	bne.n	80163ee <USBD_StdEPReq+0x252>
          {
            pep->status = 0x0000U;
 80163e6:	68bb      	ldr	r3, [r7, #8]
 80163e8:	2200      	movs	r2, #0
 80163ea:	601a      	str	r2, [r3, #0]
 80163ec:	e00e      	b.n	801640c <USBD_StdEPReq+0x270>
          }
          else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80163ee:	7bbb      	ldrb	r3, [r7, #14]
 80163f0:	4619      	mov	r1, r3
 80163f2:	6878      	ldr	r0, [r7, #4]
 80163f4:	f003 fb45 	bl	8019a82 <USBD_LL_IsStallEP>
 80163f8:	4603      	mov	r3, r0
 80163fa:	2b00      	cmp	r3, #0
 80163fc:	d003      	beq.n	8016406 <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0001U;
 80163fe:	68bb      	ldr	r3, [r7, #8]
 8016400:	2201      	movs	r2, #1
 8016402:	601a      	str	r2, [r3, #0]
 8016404:	e002      	b.n	801640c <USBD_StdEPReq+0x270>
          }
          else
          {
            pep->status = 0x0000U;
 8016406:	68bb      	ldr	r3, [r7, #8]
 8016408:	2200      	movs	r2, #0
 801640a:	601a      	str	r2, [r3, #0]
          }

          (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801640c:	68bb      	ldr	r3, [r7, #8]
 801640e:	2202      	movs	r2, #2
 8016410:	4619      	mov	r1, r3
 8016412:	6878      	ldr	r0, [r7, #4]
 8016414:	f000 fbaf 	bl	8016b76 <USBD_CtlSendData>
          break;
 8016418:	e004      	b.n	8016424 <USBD_StdEPReq+0x288>

      default:
        USBD_CtlError(pdev, req);
 801641a:	6839      	ldr	r1, [r7, #0]
 801641c:	6878      	ldr	r0, [r7, #4]
 801641e:	f000 fb39 	bl	8016a94 <USBD_CtlError>
        break;
 8016422:	bf00      	nop
      }
      break;
 8016424:	e004      	b.n	8016430 <USBD_StdEPReq+0x294>

    default:
      USBD_CtlError(pdev, req);
 8016426:	6839      	ldr	r1, [r7, #0]
 8016428:	6878      	ldr	r0, [r7, #4]
 801642a:	f000 fb33 	bl	8016a94 <USBD_CtlError>
      break;
 801642e:	bf00      	nop
    }
    break;
 8016430:	e004      	b.n	801643c <USBD_StdEPReq+0x2a0>

  default:
    USBD_CtlError(pdev, req);
 8016432:	6839      	ldr	r1, [r7, #0]
 8016434:	6878      	ldr	r0, [r7, #4]
 8016436:	f000 fb2d 	bl	8016a94 <USBD_CtlError>
    break;
 801643a:	bf00      	nop
  }

  return ret;
 801643c:	7bfb      	ldrb	r3, [r7, #15]
}
 801643e:	4618      	mov	r0, r3
 8016440:	3710      	adds	r7, #16
 8016442:	46bd      	mov	sp, r7
 8016444:	bd80      	pop	{r7, pc}
	...

08016448 <USBD_GetDescriptor>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016448:	b580      	push	{r7, lr}
 801644a:	b084      	sub	sp, #16
 801644c:	af00      	add	r7, sp, #0
 801644e:	6078      	str	r0, [r7, #4]
 8016450:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8016452:	2300      	movs	r3, #0
 8016454:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8016456:	2300      	movs	r3, #0
 8016458:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801645a:	2300      	movs	r3, #0
 801645c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 801645e:	683b      	ldr	r3, [r7, #0]
 8016460:	885b      	ldrh	r3, [r3, #2]
 8016462:	0a1b      	lsrs	r3, r3, #8
 8016464:	b29b      	uxth	r3, r3
 8016466:	3b01      	subs	r3, #1
 8016468:	2b06      	cmp	r3, #6
 801646a:	f200 8128 	bhi.w	80166be <USBD_GetDescriptor+0x276>
 801646e:	a201      	add	r2, pc, #4	; (adr r2, 8016474 <USBD_GetDescriptor+0x2c>)
 8016470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016474:	08016491 	.word	0x08016491
 8016478:	080164a9 	.word	0x080164a9
 801647c:	080164e9 	.word	0x080164e9
 8016480:	080166bf 	.word	0x080166bf
 8016484:	080166bf 	.word	0x080166bf
 8016488:	0801665f 	.word	0x0801665f
 801648c:	0801668b 	.word	0x0801668b
      err++;
    }
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	687a      	ldr	r2, [r7, #4]
 801649a:	7c12      	ldrb	r2, [r2, #16]
 801649c:	f107 0108 	add.w	r1, r7, #8
 80164a0:	4610      	mov	r0, r2
 80164a2:	4798      	blx	r3
 80164a4:	60f8      	str	r0, [r7, #12]
    break;
 80164a6:	e112      	b.n	80166ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	7c1b      	ldrb	r3, [r3, #16]
 80164ac:	2b00      	cmp	r3, #0
 80164ae:	d10d      	bne.n	80164cc <USBD_GetDescriptor+0x84>
    {
      pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80164b0:	687b      	ldr	r3, [r7, #4]
 80164b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80164b8:	f107 0208 	add.w	r2, r7, #8
 80164bc:	4610      	mov	r0, r2
 80164be:	4798      	blx	r3
 80164c0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80164c2:	68fb      	ldr	r3, [r7, #12]
 80164c4:	3301      	adds	r3, #1
 80164c6:	2202      	movs	r2, #2
 80164c8:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 80164ca:	e100      	b.n	80166ce <USBD_GetDescriptor+0x286>
      pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80164d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80164d4:	f107 0208 	add.w	r2, r7, #8
 80164d8:	4610      	mov	r0, r2
 80164da:	4798      	blx	r3
 80164dc:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80164de:	68fb      	ldr	r3, [r7, #12]
 80164e0:	3301      	adds	r3, #1
 80164e2:	2202      	movs	r2, #2
 80164e4:	701a      	strb	r2, [r3, #0]
    break;
 80164e6:	e0f2      	b.n	80166ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 80164e8:	683b      	ldr	r3, [r7, #0]
 80164ea:	885b      	ldrh	r3, [r3, #2]
 80164ec:	b2db      	uxtb	r3, r3
 80164ee:	2b05      	cmp	r3, #5
 80164f0:	f200 80ac 	bhi.w	801664c <USBD_GetDescriptor+0x204>
 80164f4:	a201      	add	r2, pc, #4	; (adr r2, 80164fc <USBD_GetDescriptor+0xb4>)
 80164f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80164fa:	bf00      	nop
 80164fc:	08016515 	.word	0x08016515
 8016500:	08016549 	.word	0x08016549
 8016504:	0801657d 	.word	0x0801657d
 8016508:	080165b1 	.word	0x080165b1
 801650c:	080165e5 	.word	0x080165e5
 8016510:	08016619 	.word	0x08016619
    {
    case USBD_IDX_LANGID_STR:
      if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016514:	687b      	ldr	r3, [r7, #4]
 8016516:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	2b00      	cmp	r3, #0
 801651e:	d00b      	beq.n	8016538 <USBD_GetDescriptor+0xf0>
      {
        pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016526:	685b      	ldr	r3, [r3, #4]
 8016528:	687a      	ldr	r2, [r7, #4]
 801652a:	7c12      	ldrb	r2, [r2, #16]
 801652c:	f107 0108 	add.w	r1, r7, #8
 8016530:	4610      	mov	r0, r2
 8016532:	4798      	blx	r3
 8016534:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016536:	e091      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016538:	6839      	ldr	r1, [r7, #0]
 801653a:	6878      	ldr	r0, [r7, #4]
 801653c:	f000 faaa 	bl	8016a94 <USBD_CtlError>
        err++;
 8016540:	7afb      	ldrb	r3, [r7, #11]
 8016542:	3301      	adds	r3, #1
 8016544:	72fb      	strb	r3, [r7, #11]
      break;
 8016546:	e089      	b.n	801665c <USBD_GetDescriptor+0x214>

    case USBD_IDX_MFC_STR:
      if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801654e:	689b      	ldr	r3, [r3, #8]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d00b      	beq.n	801656c <USBD_GetDescriptor+0x124>
      {
        pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801655a:	689b      	ldr	r3, [r3, #8]
 801655c:	687a      	ldr	r2, [r7, #4]
 801655e:	7c12      	ldrb	r2, [r2, #16]
 8016560:	f107 0108 	add.w	r1, r7, #8
 8016564:	4610      	mov	r0, r2
 8016566:	4798      	blx	r3
 8016568:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801656a:	e077      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801656c:	6839      	ldr	r1, [r7, #0]
 801656e:	6878      	ldr	r0, [r7, #4]
 8016570:	f000 fa90 	bl	8016a94 <USBD_CtlError>
        err++;
 8016574:	7afb      	ldrb	r3, [r7, #11]
 8016576:	3301      	adds	r3, #1
 8016578:	72fb      	strb	r3, [r7, #11]
      break;
 801657a:	e06f      	b.n	801665c <USBD_GetDescriptor+0x214>

    case USBD_IDX_PRODUCT_STR:
      if (pdev->pDesc->GetProductStrDescriptor != NULL)
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016582:	68db      	ldr	r3, [r3, #12]
 8016584:	2b00      	cmp	r3, #0
 8016586:	d00b      	beq.n	80165a0 <USBD_GetDescriptor+0x158>
      {
        pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801658e:	68db      	ldr	r3, [r3, #12]
 8016590:	687a      	ldr	r2, [r7, #4]
 8016592:	7c12      	ldrb	r2, [r2, #16]
 8016594:	f107 0108 	add.w	r1, r7, #8
 8016598:	4610      	mov	r0, r2
 801659a:	4798      	blx	r3
 801659c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801659e:	e05d      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80165a0:	6839      	ldr	r1, [r7, #0]
 80165a2:	6878      	ldr	r0, [r7, #4]
 80165a4:	f000 fa76 	bl	8016a94 <USBD_CtlError>
        err++;
 80165a8:	7afb      	ldrb	r3, [r7, #11]
 80165aa:	3301      	adds	r3, #1
 80165ac:	72fb      	strb	r3, [r7, #11]
      break;
 80165ae:	e055      	b.n	801665c <USBD_GetDescriptor+0x214>

    case USBD_IDX_SERIAL_STR:
      if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165b6:	691b      	ldr	r3, [r3, #16]
 80165b8:	2b00      	cmp	r3, #0
 80165ba:	d00b      	beq.n	80165d4 <USBD_GetDescriptor+0x18c>
      {
        pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165c2:	691b      	ldr	r3, [r3, #16]
 80165c4:	687a      	ldr	r2, [r7, #4]
 80165c6:	7c12      	ldrb	r2, [r2, #16]
 80165c8:	f107 0108 	add.w	r1, r7, #8
 80165cc:	4610      	mov	r0, r2
 80165ce:	4798      	blx	r3
 80165d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165d2:	e043      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 80165d4:	6839      	ldr	r1, [r7, #0]
 80165d6:	6878      	ldr	r0, [r7, #4]
 80165d8:	f000 fa5c 	bl	8016a94 <USBD_CtlError>
        err++;
 80165dc:	7afb      	ldrb	r3, [r7, #11]
 80165de:	3301      	adds	r3, #1
 80165e0:	72fb      	strb	r3, [r7, #11]
      break;
 80165e2:	e03b      	b.n	801665c <USBD_GetDescriptor+0x214>

    case USBD_IDX_CONFIG_STR:
      if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165ea:	695b      	ldr	r3, [r3, #20]
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d00b      	beq.n	8016608 <USBD_GetDescriptor+0x1c0>
      {
        pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80165f0:	687b      	ldr	r3, [r7, #4]
 80165f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80165f6:	695b      	ldr	r3, [r3, #20]
 80165f8:	687a      	ldr	r2, [r7, #4]
 80165fa:	7c12      	ldrb	r2, [r2, #16]
 80165fc:	f107 0108 	add.w	r1, r7, #8
 8016600:	4610      	mov	r0, r2
 8016602:	4798      	blx	r3
 8016604:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8016606:	e029      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 8016608:	6839      	ldr	r1, [r7, #0]
 801660a:	6878      	ldr	r0, [r7, #4]
 801660c:	f000 fa42 	bl	8016a94 <USBD_CtlError>
        err++;
 8016610:	7afb      	ldrb	r3, [r7, #11]
 8016612:	3301      	adds	r3, #1
 8016614:	72fb      	strb	r3, [r7, #11]
      break;
 8016616:	e021      	b.n	801665c <USBD_GetDescriptor+0x214>

    case USBD_IDX_INTERFACE_STR:
      if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016618:	687b      	ldr	r3, [r7, #4]
 801661a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801661e:	699b      	ldr	r3, [r3, #24]
 8016620:	2b00      	cmp	r3, #0
 8016622:	d00b      	beq.n	801663c <USBD_GetDescriptor+0x1f4>
      {
        pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016624:	687b      	ldr	r3, [r7, #4]
 8016626:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801662a:	699b      	ldr	r3, [r3, #24]
 801662c:	687a      	ldr	r2, [r7, #4]
 801662e:	7c12      	ldrb	r2, [r2, #16]
 8016630:	f107 0108 	add.w	r1, r7, #8
 8016634:	4610      	mov	r0, r2
 8016636:	4798      	blx	r3
 8016638:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 801663a:	e00f      	b.n	801665c <USBD_GetDescriptor+0x214>
        USBD_CtlError(pdev, req);
 801663c:	6839      	ldr	r1, [r7, #0]
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f000 fa28 	bl	8016a94 <USBD_CtlError>
        err++;
 8016644:	7afb      	ldrb	r3, [r7, #11]
 8016646:	3301      	adds	r3, #1
 8016648:	72fb      	strb	r3, [r7, #11]
      break;
 801664a:	e007      	b.n	801665c <USBD_GetDescriptor+0x214>
      {
        USBD_CtlError(pdev, req);
        err++;
      }
#else
      USBD_CtlError(pdev, req);
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 fa20 	bl	8016a94 <USBD_CtlError>
      err++;
 8016654:	7afb      	ldrb	r3, [r7, #11]
 8016656:	3301      	adds	r3, #1
 8016658:	72fb      	strb	r3, [r7, #11]
#endif
      break;
 801665a:	bf00      	nop
    }
    break;
 801665c:	e037      	b.n	80166ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_DEVICE_QUALIFIER:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	7c1b      	ldrb	r3, [r3, #16]
 8016662:	2b00      	cmp	r3, #0
 8016664:	d109      	bne.n	801667a <USBD_GetDescriptor+0x232>
    {
      pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8016666:	687b      	ldr	r3, [r7, #4]
 8016668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801666c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801666e:	f107 0208 	add.w	r2, r7, #8
 8016672:	4610      	mov	r0, r2
 8016674:	4798      	blx	r3
 8016676:	60f8      	str	r0, [r7, #12]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 8016678:	e029      	b.n	80166ce <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 801667a:	6839      	ldr	r1, [r7, #0]
 801667c:	6878      	ldr	r0, [r7, #4]
 801667e:	f000 fa09 	bl	8016a94 <USBD_CtlError>
      err++;
 8016682:	7afb      	ldrb	r3, [r7, #11]
 8016684:	3301      	adds	r3, #1
 8016686:	72fb      	strb	r3, [r7, #11]
    break;
 8016688:	e021      	b.n	80166ce <USBD_GetDescriptor+0x286>

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	7c1b      	ldrb	r3, [r3, #16]
 801668e:	2b00      	cmp	r3, #0
 8016690:	d10d      	bne.n	80166ae <USBD_GetDescriptor+0x266>
    {
      pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8016692:	687b      	ldr	r3, [r7, #4]
 8016694:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801669a:	f107 0208 	add.w	r2, r7, #8
 801669e:	4610      	mov	r0, r2
 80166a0:	4798      	blx	r3
 80166a2:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	3301      	adds	r3, #1
 80166a8:	2207      	movs	r2, #7
 80166aa:	701a      	strb	r2, [r3, #0]
    else
    {
      USBD_CtlError(pdev, req);
      err++;
    }
    break;
 80166ac:	e00f      	b.n	80166ce <USBD_GetDescriptor+0x286>
      USBD_CtlError(pdev, req);
 80166ae:	6839      	ldr	r1, [r7, #0]
 80166b0:	6878      	ldr	r0, [r7, #4]
 80166b2:	f000 f9ef 	bl	8016a94 <USBD_CtlError>
      err++;
 80166b6:	7afb      	ldrb	r3, [r7, #11]
 80166b8:	3301      	adds	r3, #1
 80166ba:	72fb      	strb	r3, [r7, #11]
    break;
 80166bc:	e007      	b.n	80166ce <USBD_GetDescriptor+0x286>

  default:
    USBD_CtlError(pdev, req);
 80166be:	6839      	ldr	r1, [r7, #0]
 80166c0:	6878      	ldr	r0, [r7, #4]
 80166c2:	f000 f9e7 	bl	8016a94 <USBD_CtlError>
    err++;
 80166c6:	7afb      	ldrb	r3, [r7, #11]
 80166c8:	3301      	adds	r3, #1
 80166ca:	72fb      	strb	r3, [r7, #11]
    break;
 80166cc:	bf00      	nop
  }

  if (err != 0U)
 80166ce:	7afb      	ldrb	r3, [r7, #11]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d11e      	bne.n	8016712 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }
  else
  {
    if (req->wLength != 0U)
 80166d4:	683b      	ldr	r3, [r7, #0]
 80166d6:	88db      	ldrh	r3, [r3, #6]
 80166d8:	2b00      	cmp	r3, #0
 80166da:	d016      	beq.n	801670a <USBD_GetDescriptor+0x2c2>
    {
      if (len != 0U)
 80166dc:	893b      	ldrh	r3, [r7, #8]
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d00e      	beq.n	8016700 <USBD_GetDescriptor+0x2b8>
      {
        len = MIN(len, req->wLength);
 80166e2:	683b      	ldr	r3, [r7, #0]
 80166e4:	88da      	ldrh	r2, [r3, #6]
 80166e6:	893b      	ldrh	r3, [r7, #8]
 80166e8:	4293      	cmp	r3, r2
 80166ea:	bf28      	it	cs
 80166ec:	4613      	movcs	r3, r2
 80166ee:	b29b      	uxth	r3, r3
 80166f0:	813b      	strh	r3, [r7, #8]
        (void)USBD_CtlSendData(pdev, pbuf, len);
 80166f2:	893b      	ldrh	r3, [r7, #8]
 80166f4:	461a      	mov	r2, r3
 80166f6:	68f9      	ldr	r1, [r7, #12]
 80166f8:	6878      	ldr	r0, [r7, #4]
 80166fa:	f000 fa3c 	bl	8016b76 <USBD_CtlSendData>
 80166fe:	e009      	b.n	8016714 <USBD_GetDescriptor+0x2cc>
      }
      else
      {
        USBD_CtlError(pdev, req);
 8016700:	6839      	ldr	r1, [r7, #0]
 8016702:	6878      	ldr	r0, [r7, #4]
 8016704:	f000 f9c6 	bl	8016a94 <USBD_CtlError>
 8016708:	e004      	b.n	8016714 <USBD_GetDescriptor+0x2cc>
      }
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 fa70 	bl	8016bf0 <USBD_CtlSendStatus>
 8016710:	e000      	b.n	8016714 <USBD_GetDescriptor+0x2cc>
    return;
 8016712:	bf00      	nop
    }
  }
}
 8016714:	3710      	adds	r7, #16
 8016716:	46bd      	mov	sp, r7
 8016718:	bd80      	pop	{r7, pc}
 801671a:	bf00      	nop

0801671c <USBD_SetAddress>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801671c:	b580      	push	{r7, lr}
 801671e:	b084      	sub	sp, #16
 8016720:	af00      	add	r7, sp, #0
 8016722:	6078      	str	r0, [r7, #4]
 8016724:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016726:	683b      	ldr	r3, [r7, #0]
 8016728:	889b      	ldrh	r3, [r3, #4]
 801672a:	2b00      	cmp	r3, #0
 801672c:	d130      	bne.n	8016790 <USBD_SetAddress+0x74>
 801672e:	683b      	ldr	r3, [r7, #0]
 8016730:	88db      	ldrh	r3, [r3, #6]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d12c      	bne.n	8016790 <USBD_SetAddress+0x74>
 8016736:	683b      	ldr	r3, [r7, #0]
 8016738:	885b      	ldrh	r3, [r3, #2]
 801673a:	2b7f      	cmp	r3, #127	; 0x7f
 801673c:	d828      	bhi.n	8016790 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801673e:	683b      	ldr	r3, [r7, #0]
 8016740:	885b      	ldrh	r3, [r3, #2]
 8016742:	b2db      	uxtb	r3, r3
 8016744:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016748:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801674a:	687b      	ldr	r3, [r7, #4]
 801674c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016750:	2b03      	cmp	r3, #3
 8016752:	d104      	bne.n	801675e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8016754:	6839      	ldr	r1, [r7, #0]
 8016756:	6878      	ldr	r0, [r7, #4]
 8016758:	f000 f99c 	bl	8016a94 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801675c:	e01c      	b.n	8016798 <USBD_SetAddress+0x7c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	7bfa      	ldrb	r2, [r7, #15]
 8016762:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	4619      	mov	r1, r3
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f003 f9b5 	bl	8019ada <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8016770:	6878      	ldr	r0, [r7, #4]
 8016772:	f000 fa3d 	bl	8016bf0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8016776:	7bfb      	ldrb	r3, [r7, #15]
 8016778:	2b00      	cmp	r3, #0
 801677a:	d004      	beq.n	8016786 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 801677c:	687b      	ldr	r3, [r7, #4]
 801677e:	2202      	movs	r2, #2
 8016780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016784:	e008      	b.n	8016798 <USBD_SetAddress+0x7c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8016786:	687b      	ldr	r3, [r7, #4]
 8016788:	2201      	movs	r2, #1
 801678a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801678e:	e003      	b.n	8016798 <USBD_SetAddress+0x7c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8016790:	6839      	ldr	r1, [r7, #0]
 8016792:	6878      	ldr	r0, [r7, #4]
 8016794:	f000 f97e 	bl	8016a94 <USBD_CtlError>
  }
}
 8016798:	bf00      	nop
 801679a:	3710      	adds	r7, #16
 801679c:	46bd      	mov	sp, r7
 801679e:	bd80      	pop	{r7, pc}

080167a0 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80167aa:	2300      	movs	r3, #0
 80167ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	885b      	ldrh	r3, [r3, #2]
 80167b2:	b2da      	uxtb	r2, r3
 80167b4:	4b4b      	ldr	r3, [pc, #300]	; (80168e4 <USBD_SetConfig+0x144>)
 80167b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80167b8:	4b4a      	ldr	r3, [pc, #296]	; (80168e4 <USBD_SetConfig+0x144>)
 80167ba:	781b      	ldrb	r3, [r3, #0]
 80167bc:	2b01      	cmp	r3, #1
 80167be:	d905      	bls.n	80167cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80167c0:	6839      	ldr	r1, [r7, #0]
 80167c2:	6878      	ldr	r0, [r7, #4]
 80167c4:	f000 f966 	bl	8016a94 <USBD_CtlError>
    return USBD_FAIL;
 80167c8:	2303      	movs	r3, #3
 80167ca:	e087      	b.n	80168dc <USBD_SetConfig+0x13c>
  }

  switch (pdev->dev_state)
 80167cc:	687b      	ldr	r3, [r7, #4]
 80167ce:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80167d2:	2b02      	cmp	r3, #2
 80167d4:	d002      	beq.n	80167dc <USBD_SetConfig+0x3c>
 80167d6:	2b03      	cmp	r3, #3
 80167d8:	d025      	beq.n	8016826 <USBD_SetConfig+0x86>
 80167da:	e071      	b.n	80168c0 <USBD_SetConfig+0x120>
  {
  case USBD_STATE_ADDRESSED:
    if (cfgidx != 0U)
 80167dc:	4b41      	ldr	r3, [pc, #260]	; (80168e4 <USBD_SetConfig+0x144>)
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	2b00      	cmp	r3, #0
 80167e2:	d01c      	beq.n	801681e <USBD_SetConfig+0x7e>
    {
      pdev->dev_config = cfgidx;
 80167e4:	4b3f      	ldr	r3, [pc, #252]	; (80168e4 <USBD_SetConfig+0x144>)
 80167e6:	781b      	ldrb	r3, [r3, #0]
 80167e8:	461a      	mov	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	605a      	str	r2, [r3, #4]

      ret = USBD_SetClassConfig(pdev, cfgidx);
 80167ee:	4b3d      	ldr	r3, [pc, #244]	; (80168e4 <USBD_SetConfig+0x144>)
 80167f0:	781b      	ldrb	r3, [r3, #0]
 80167f2:	4619      	mov	r1, r3
 80167f4:	6878      	ldr	r0, [r7, #4]
 80167f6:	f7ff f9a8 	bl	8015b4a <USBD_SetClassConfig>
 80167fa:	4603      	mov	r3, r0
 80167fc:	73fb      	strb	r3, [r7, #15]

      if (ret != USBD_OK)
 80167fe:	7bfb      	ldrb	r3, [r7, #15]
 8016800:	2b00      	cmp	r3, #0
 8016802:	d004      	beq.n	801680e <USBD_SetConfig+0x6e>
      {
        USBD_CtlError(pdev, req);
 8016804:	6839      	ldr	r1, [r7, #0]
 8016806:	6878      	ldr	r0, [r7, #4]
 8016808:	f000 f944 	bl	8016a94 <USBD_CtlError>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 801680c:	e065      	b.n	80168da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 801680e:	6878      	ldr	r0, [r7, #4]
 8016810:	f000 f9ee 	bl	8016bf0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8016814:	687b      	ldr	r3, [r7, #4]
 8016816:	2203      	movs	r2, #3
 8016818:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 801681c:	e05d      	b.n	80168da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f000 f9e6 	bl	8016bf0 <USBD_CtlSendStatus>
    break;
 8016824:	e059      	b.n	80168da <USBD_SetConfig+0x13a>

  case USBD_STATE_CONFIGURED:
    if (cfgidx == 0U)
 8016826:	4b2f      	ldr	r3, [pc, #188]	; (80168e4 <USBD_SetConfig+0x144>)
 8016828:	781b      	ldrb	r3, [r3, #0]
 801682a:	2b00      	cmp	r3, #0
 801682c:	d112      	bne.n	8016854 <USBD_SetConfig+0xb4>
    {
      pdev->dev_state = USBD_STATE_ADDRESSED;
 801682e:	687b      	ldr	r3, [r7, #4]
 8016830:	2202      	movs	r2, #2
 8016832:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      pdev->dev_config = cfgidx;
 8016836:	4b2b      	ldr	r3, [pc, #172]	; (80168e4 <USBD_SetConfig+0x144>)
 8016838:	781b      	ldrb	r3, [r3, #0]
 801683a:	461a      	mov	r2, r3
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	605a      	str	r2, [r3, #4]
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016840:	4b28      	ldr	r3, [pc, #160]	; (80168e4 <USBD_SetConfig+0x144>)
 8016842:	781b      	ldrb	r3, [r3, #0]
 8016844:	4619      	mov	r1, r3
 8016846:	6878      	ldr	r0, [r7, #4]
 8016848:	f7ff f99b 	bl	8015b82 <USBD_ClrClassConfig>
      (void)USBD_CtlSendStatus(pdev);
 801684c:	6878      	ldr	r0, [r7, #4]
 801684e:	f000 f9cf 	bl	8016bf0 <USBD_CtlSendStatus>
    }
    else
    {
      (void)USBD_CtlSendStatus(pdev);
    }
    break;
 8016852:	e042      	b.n	80168da <USBD_SetConfig+0x13a>
    else if (cfgidx != pdev->dev_config)
 8016854:	4b23      	ldr	r3, [pc, #140]	; (80168e4 <USBD_SetConfig+0x144>)
 8016856:	781b      	ldrb	r3, [r3, #0]
 8016858:	461a      	mov	r2, r3
 801685a:	687b      	ldr	r3, [r7, #4]
 801685c:	685b      	ldr	r3, [r3, #4]
 801685e:	429a      	cmp	r2, r3
 8016860:	d02a      	beq.n	80168b8 <USBD_SetConfig+0x118>
      (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	b2db      	uxtb	r3, r3
 8016868:	4619      	mov	r1, r3
 801686a:	6878      	ldr	r0, [r7, #4]
 801686c:	f7ff f989 	bl	8015b82 <USBD_ClrClassConfig>
      pdev->dev_config = cfgidx;
 8016870:	4b1c      	ldr	r3, [pc, #112]	; (80168e4 <USBD_SetConfig+0x144>)
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	461a      	mov	r2, r3
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	605a      	str	r2, [r3, #4]
      ret = USBD_SetClassConfig(pdev, cfgidx);
 801687a:	4b1a      	ldr	r3, [pc, #104]	; (80168e4 <USBD_SetConfig+0x144>)
 801687c:	781b      	ldrb	r3, [r3, #0]
 801687e:	4619      	mov	r1, r3
 8016880:	6878      	ldr	r0, [r7, #4]
 8016882:	f7ff f962 	bl	8015b4a <USBD_SetClassConfig>
 8016886:	4603      	mov	r3, r0
 8016888:	73fb      	strb	r3, [r7, #15]
      if (ret != USBD_OK)
 801688a:	7bfb      	ldrb	r3, [r7, #15]
 801688c:	2b00      	cmp	r3, #0
 801688e:	d00f      	beq.n	80168b0 <USBD_SetConfig+0x110>
        USBD_CtlError(pdev, req);
 8016890:	6839      	ldr	r1, [r7, #0]
 8016892:	6878      	ldr	r0, [r7, #4]
 8016894:	f000 f8fe 	bl	8016a94 <USBD_CtlError>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	685b      	ldr	r3, [r3, #4]
 801689c:	b2db      	uxtb	r3, r3
 801689e:	4619      	mov	r1, r3
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f7ff f96e 	bl	8015b82 <USBD_ClrClassConfig>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80168a6:	687b      	ldr	r3, [r7, #4]
 80168a8:	2202      	movs	r2, #2
 80168aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    break;
 80168ae:	e014      	b.n	80168da <USBD_SetConfig+0x13a>
        (void)USBD_CtlSendStatus(pdev);
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f000 f99d 	bl	8016bf0 <USBD_CtlSendStatus>
    break;
 80168b6:	e010      	b.n	80168da <USBD_SetConfig+0x13a>
      (void)USBD_CtlSendStatus(pdev);
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f000 f999 	bl	8016bf0 <USBD_CtlSendStatus>
    break;
 80168be:	e00c      	b.n	80168da <USBD_SetConfig+0x13a>

  default:
    USBD_CtlError(pdev, req);
 80168c0:	6839      	ldr	r1, [r7, #0]
 80168c2:	6878      	ldr	r0, [r7, #4]
 80168c4:	f000 f8e6 	bl	8016a94 <USBD_CtlError>
    (void)USBD_ClrClassConfig(pdev, cfgidx);
 80168c8:	4b06      	ldr	r3, [pc, #24]	; (80168e4 <USBD_SetConfig+0x144>)
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	4619      	mov	r1, r3
 80168ce:	6878      	ldr	r0, [r7, #4]
 80168d0:	f7ff f957 	bl	8015b82 <USBD_ClrClassConfig>
    ret = USBD_FAIL;
 80168d4:	2303      	movs	r3, #3
 80168d6:	73fb      	strb	r3, [r7, #15]
    break;
 80168d8:	bf00      	nop
  }

  return ret;
 80168da:	7bfb      	ldrb	r3, [r7, #15]
}
 80168dc:	4618      	mov	r0, r3
 80168de:	3710      	adds	r7, #16
 80168e0:	46bd      	mov	sp, r7
 80168e2:	bd80      	pop	{r7, pc}
 80168e4:	240404cc 	.word	0x240404cc

080168e8 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168e8:	b580      	push	{r7, lr}
 80168ea:	b082      	sub	sp, #8
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
 80168f0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80168f2:	683b      	ldr	r3, [r7, #0]
 80168f4:	88db      	ldrh	r3, [r3, #6]
 80168f6:	2b01      	cmp	r3, #1
 80168f8:	d004      	beq.n	8016904 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80168fa:	6839      	ldr	r1, [r7, #0]
 80168fc:	6878      	ldr	r0, [r7, #4]
 80168fe:	f000 f8c9 	bl	8016a94 <USBD_CtlError>
    default:
      USBD_CtlError(pdev, req);
      break;
    }
  }
}
 8016902:	e021      	b.n	8016948 <USBD_GetConfig+0x60>
    switch (pdev->dev_state)
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801690a:	2b01      	cmp	r3, #1
 801690c:	db17      	blt.n	801693e <USBD_GetConfig+0x56>
 801690e:	2b02      	cmp	r3, #2
 8016910:	dd02      	ble.n	8016918 <USBD_GetConfig+0x30>
 8016912:	2b03      	cmp	r3, #3
 8016914:	d00b      	beq.n	801692e <USBD_GetConfig+0x46>
 8016916:	e012      	b.n	801693e <USBD_GetConfig+0x56>
      pdev->dev_default_config = 0U;
 8016918:	687b      	ldr	r3, [r7, #4]
 801691a:	2200      	movs	r2, #0
 801691c:	609a      	str	r2, [r3, #8]
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	3308      	adds	r3, #8
 8016922:	2201      	movs	r2, #1
 8016924:	4619      	mov	r1, r3
 8016926:	6878      	ldr	r0, [r7, #4]
 8016928:	f000 f925 	bl	8016b76 <USBD_CtlSendData>
      break;
 801692c:	e00c      	b.n	8016948 <USBD_GetConfig+0x60>
      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801692e:	687b      	ldr	r3, [r7, #4]
 8016930:	3304      	adds	r3, #4
 8016932:	2201      	movs	r2, #1
 8016934:	4619      	mov	r1, r3
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 f91d 	bl	8016b76 <USBD_CtlSendData>
      break;
 801693c:	e004      	b.n	8016948 <USBD_GetConfig+0x60>
      USBD_CtlError(pdev, req);
 801693e:	6839      	ldr	r1, [r7, #0]
 8016940:	6878      	ldr	r0, [r7, #4]
 8016942:	f000 f8a7 	bl	8016a94 <USBD_CtlError>
      break;
 8016946:	bf00      	nop
}
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
 8016958:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 801695a:	687b      	ldr	r3, [r7, #4]
 801695c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016960:	3b01      	subs	r3, #1
 8016962:	2b02      	cmp	r3, #2
 8016964:	d81e      	bhi.n	80169a4 <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wLength != 0x2U)
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	88db      	ldrh	r3, [r3, #6]
 801696a:	2b02      	cmp	r3, #2
 801696c:	d004      	beq.n	8016978 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 801696e:	6839      	ldr	r1, [r7, #0]
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f88f 	bl	8016a94 <USBD_CtlError>
      break;
 8016976:	e01a      	b.n	80169ae <USBD_GetStatus+0x5e>
    }

#if (USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8016978:	687b      	ldr	r3, [r7, #4]
 801697a:	2201      	movs	r2, #1
 801697c:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup != 0U)
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8016984:	2b00      	cmp	r3, #0
 8016986:	d005      	beq.n	8016994 <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8016988:	687b      	ldr	r3, [r7, #4]
 801698a:	68db      	ldr	r3, [r3, #12]
 801698c:	f043 0202 	orr.w	r2, r3, #2
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	60da      	str	r2, [r3, #12]
    }

    (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	330c      	adds	r3, #12
 8016998:	2202      	movs	r2, #2
 801699a:	4619      	mov	r1, r3
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f000 f8ea 	bl	8016b76 <USBD_CtlSendData>
    break;
 80169a2:	e004      	b.n	80169ae <USBD_GetStatus+0x5e>

  default:
    USBD_CtlError(pdev, req);
 80169a4:	6839      	ldr	r1, [r7, #0]
 80169a6:	6878      	ldr	r0, [r7, #4]
 80169a8:	f000 f874 	bl	8016a94 <USBD_CtlError>
    break;
 80169ac:	bf00      	nop
  }
}
 80169ae:	bf00      	nop
 80169b0:	3708      	adds	r7, #8
 80169b2:	46bd      	mov	sp, r7
 80169b4:	bd80      	pop	{r7, pc}

080169b6 <USBD_SetFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169b6:	b580      	push	{r7, lr}
 80169b8:	b082      	sub	sp, #8
 80169ba:	af00      	add	r7, sp, #0
 80169bc:	6078      	str	r0, [r7, #4]
 80169be:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169c0:	683b      	ldr	r3, [r7, #0]
 80169c2:	885b      	ldrh	r3, [r3, #2]
 80169c4:	2b01      	cmp	r3, #1
 80169c6:	d106      	bne.n	80169d6 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	2201      	movs	r2, #1
 80169cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	f000 f90d 	bl	8016bf0 <USBD_CtlSendStatus>
  }
}
 80169d6:	bf00      	nop
 80169d8:	3708      	adds	r7, #8
 80169da:	46bd      	mov	sp, r7
 80169dc:	bd80      	pop	{r7, pc}

080169de <USBD_ClrFeature>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80169de:	b580      	push	{r7, lr}
 80169e0:	b082      	sub	sp, #8
 80169e2:	af00      	add	r7, sp, #0
 80169e4:	6078      	str	r0, [r7, #4]
 80169e6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80169e8:	687b      	ldr	r3, [r7, #4]
 80169ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80169ee:	3b01      	subs	r3, #1
 80169f0:	2b02      	cmp	r3, #2
 80169f2:	d80b      	bhi.n	8016a0c <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80169f4:	683b      	ldr	r3, [r7, #0]
 80169f6:	885b      	ldrh	r3, [r3, #2]
 80169f8:	2b01      	cmp	r3, #1
 80169fa:	d10c      	bne.n	8016a16 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	2200      	movs	r2, #0
 8016a00:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f8f3 	bl	8016bf0 <USBD_CtlSendStatus>
      }
      break;
 8016a0a:	e004      	b.n	8016a16 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8016a0c:	6839      	ldr	r1, [r7, #0]
 8016a0e:	6878      	ldr	r0, [r7, #4]
 8016a10:	f000 f840 	bl	8016a94 <USBD_CtlError>
      break;
 8016a14:	e000      	b.n	8016a18 <USBD_ClrFeature+0x3a>
      break;
 8016a16:	bf00      	nop
  }
}
 8016a18:	bf00      	nop
 8016a1a:	3708      	adds	r7, #8
 8016a1c:	46bd      	mov	sp, r7
 8016a1e:	bd80      	pop	{r7, pc}

08016a20 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8016a20:	b580      	push	{r7, lr}
 8016a22:	b084      	sub	sp, #16
 8016a24:	af00      	add	r7, sp, #0
 8016a26:	6078      	str	r0, [r7, #4]
 8016a28:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8016a2a:	683b      	ldr	r3, [r7, #0]
 8016a2c:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8016a2e:	68fb      	ldr	r3, [r7, #12]
 8016a30:	781a      	ldrb	r2, [r3, #0]
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8016a36:	68fb      	ldr	r3, [r7, #12]
 8016a38:	3301      	adds	r3, #1
 8016a3a:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8016a3c:	68fb      	ldr	r3, [r7, #12]
 8016a3e:	781a      	ldrb	r2, [r3, #0]
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	3301      	adds	r3, #1
 8016a48:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8016a4a:	68f8      	ldr	r0, [r7, #12]
 8016a4c:	f7ff fad4 	bl	8015ff8 <SWAPBYTE>
 8016a50:	4603      	mov	r3, r0
 8016a52:	461a      	mov	r2, r3
 8016a54:	687b      	ldr	r3, [r7, #4]
 8016a56:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8016a58:	68fb      	ldr	r3, [r7, #12]
 8016a5a:	3301      	adds	r3, #1
 8016a5c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a5e:	68fb      	ldr	r3, [r7, #12]
 8016a60:	3301      	adds	r3, #1
 8016a62:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8016a64:	68f8      	ldr	r0, [r7, #12]
 8016a66:	f7ff fac7 	bl	8015ff8 <SWAPBYTE>
 8016a6a:	4603      	mov	r3, r0
 8016a6c:	461a      	mov	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a72:	68fb      	ldr	r3, [r7, #12]
 8016a74:	3301      	adds	r3, #1
 8016a76:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	3301      	adds	r3, #1
 8016a7c:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a7e:	68f8      	ldr	r0, [r7, #12]
 8016a80:	f7ff faba 	bl	8015ff8 <SWAPBYTE>
 8016a84:	4603      	mov	r3, r0
 8016a86:	461a      	mov	r2, r3
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	80da      	strh	r2, [r3, #6]
}
 8016a8c:	bf00      	nop
 8016a8e:	3710      	adds	r7, #16
 8016a90:	46bd      	mov	sp, r7
 8016a92:	bd80      	pop	{r7, pc}

08016a94 <USBD_CtlError>:
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a94:	b580      	push	{r7, lr}
 8016a96:	b082      	sub	sp, #8
 8016a98:	af00      	add	r7, sp, #0
 8016a9a:	6078      	str	r0, [r7, #4]
 8016a9c:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a9e:	2180      	movs	r1, #128	; 0x80
 8016aa0:	6878      	ldr	r0, [r7, #4]
 8016aa2:	f002 ffb0 	bl	8019a06 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016aa6:	2100      	movs	r1, #0
 8016aa8:	6878      	ldr	r0, [r7, #4]
 8016aaa:	f002 ffac 	bl	8019a06 <USBD_LL_StallEP>
}
 8016aae:	bf00      	nop
 8016ab0:	3708      	adds	r7, #8
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}

08016ab6 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016ab6:	b580      	push	{r7, lr}
 8016ab8:	b086      	sub	sp, #24
 8016aba:	af00      	add	r7, sp, #0
 8016abc:	60f8      	str	r0, [r7, #12]
 8016abe:	60b9      	str	r1, [r7, #8]
 8016ac0:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016ac2:	2300      	movs	r3, #0
 8016ac4:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016ac6:	68fb      	ldr	r3, [r7, #12]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d036      	beq.n	8016b3a <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016acc:	68fb      	ldr	r3, [r7, #12]
 8016ace:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016ad0:	6938      	ldr	r0, [r7, #16]
 8016ad2:	f000 f836 	bl	8016b42 <USBD_GetLen>
 8016ad6:	4603      	mov	r3, r0
 8016ad8:	3301      	adds	r3, #1
 8016ada:	b29b      	uxth	r3, r3
 8016adc:	005b      	lsls	r3, r3, #1
 8016ade:	b29a      	uxth	r2, r3
 8016ae0:	687b      	ldr	r3, [r7, #4]
 8016ae2:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016ae4:	7dfb      	ldrb	r3, [r7, #23]
 8016ae6:	68ba      	ldr	r2, [r7, #8]
 8016ae8:	4413      	add	r3, r2
 8016aea:	687a      	ldr	r2, [r7, #4]
 8016aec:	7812      	ldrb	r2, [r2, #0]
 8016aee:	701a      	strb	r2, [r3, #0]
  idx++;
 8016af0:	7dfb      	ldrb	r3, [r7, #23]
 8016af2:	3301      	adds	r3, #1
 8016af4:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016af6:	7dfb      	ldrb	r3, [r7, #23]
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	4413      	add	r3, r2
 8016afc:	2203      	movs	r2, #3
 8016afe:	701a      	strb	r2, [r3, #0]
  idx++;
 8016b00:	7dfb      	ldrb	r3, [r7, #23]
 8016b02:	3301      	adds	r3, #1
 8016b04:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016b06:	e013      	b.n	8016b30 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016b08:	7dfb      	ldrb	r3, [r7, #23]
 8016b0a:	68ba      	ldr	r2, [r7, #8]
 8016b0c:	4413      	add	r3, r2
 8016b0e:	693a      	ldr	r2, [r7, #16]
 8016b10:	7812      	ldrb	r2, [r2, #0]
 8016b12:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016b14:	693b      	ldr	r3, [r7, #16]
 8016b16:	3301      	adds	r3, #1
 8016b18:	613b      	str	r3, [r7, #16]
    idx++;
 8016b1a:	7dfb      	ldrb	r3, [r7, #23]
 8016b1c:	3301      	adds	r3, #1
 8016b1e:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016b20:	7dfb      	ldrb	r3, [r7, #23]
 8016b22:	68ba      	ldr	r2, [r7, #8]
 8016b24:	4413      	add	r3, r2
 8016b26:	2200      	movs	r2, #0
 8016b28:	701a      	strb	r2, [r3, #0]
    idx++;
 8016b2a:	7dfb      	ldrb	r3, [r7, #23]
 8016b2c:	3301      	adds	r3, #1
 8016b2e:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016b30:	693b      	ldr	r3, [r7, #16]
 8016b32:	781b      	ldrb	r3, [r3, #0]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d1e7      	bne.n	8016b08 <USBD_GetString+0x52>
 8016b38:	e000      	b.n	8016b3c <USBD_GetString+0x86>
    return;
 8016b3a:	bf00      	nop
  }
}
 8016b3c:	3718      	adds	r7, #24
 8016b3e:	46bd      	mov	sp, r7
 8016b40:	bd80      	pop	{r7, pc}

08016b42 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016b42:	b480      	push	{r7}
 8016b44:	b085      	sub	sp, #20
 8016b46:	af00      	add	r7, sp, #0
 8016b48:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016b4a:	2300      	movs	r3, #0
 8016b4c:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016b52:	e005      	b.n	8016b60 <USBD_GetLen+0x1e>
  {
    len++;
 8016b54:	7bfb      	ldrb	r3, [r7, #15]
 8016b56:	3301      	adds	r3, #1
 8016b58:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016b5a:	68bb      	ldr	r3, [r7, #8]
 8016b5c:	3301      	adds	r3, #1
 8016b5e:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016b60:	68bb      	ldr	r3, [r7, #8]
 8016b62:	781b      	ldrb	r3, [r3, #0]
 8016b64:	2b00      	cmp	r3, #0
 8016b66:	d1f5      	bne.n	8016b54 <USBD_GetLen+0x12>
  }

  return len;
 8016b68:	7bfb      	ldrb	r3, [r7, #15]
}
 8016b6a:	4618      	mov	r0, r3
 8016b6c:	3714      	adds	r7, #20
 8016b6e:	46bd      	mov	sp, r7
 8016b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b74:	4770      	bx	lr

08016b76 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b76:	b580      	push	{r7, lr}
 8016b78:	b084      	sub	sp, #16
 8016b7a:	af00      	add	r7, sp, #0
 8016b7c:	60f8      	str	r0, [r7, #12]
 8016b7e:	60b9      	str	r1, [r7, #8]
 8016b80:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b82:	68fb      	ldr	r3, [r7, #12]
 8016b84:	2202      	movs	r2, #2
 8016b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	687a      	ldr	r2, [r7, #4]
 8016b8e:	619a      	str	r2, [r3, #24]
  pdev->ep_in[0].rem_length = len;
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	687a      	ldr	r2, [r7, #4]
 8016b94:	61da      	str	r2, [r3, #28]

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68ba      	ldr	r2, [r7, #8]
 8016b9a:	2100      	movs	r1, #0
 8016b9c:	68f8      	ldr	r0, [r7, #12]
 8016b9e:	f002 ffbb 	bl	8019b18 <USBD_LL_Transmit>

  return USBD_OK;
 8016ba2:	2300      	movs	r3, #0
}
 8016ba4:	4618      	mov	r0, r3
 8016ba6:	3710      	adds	r7, #16
 8016ba8:	46bd      	mov	sp, r7
 8016baa:	bd80      	pop	{r7, pc}

08016bac <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016bac:	b580      	push	{r7, lr}
 8016bae:	b084      	sub	sp, #16
 8016bb0:	af00      	add	r7, sp, #0
 8016bb2:	60f8      	str	r0, [r7, #12]
 8016bb4:	60b9      	str	r1, [r7, #8]
 8016bb6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	68ba      	ldr	r2, [r7, #8]
 8016bbc:	2100      	movs	r1, #0
 8016bbe:	68f8      	ldr	r0, [r7, #12]
 8016bc0:	f002 ffaa 	bl	8019b18 <USBD_LL_Transmit>

  return USBD_OK;
 8016bc4:	2300      	movs	r3, #0
}
 8016bc6:	4618      	mov	r0, r3
 8016bc8:	3710      	adds	r7, #16
 8016bca:	46bd      	mov	sp, r7
 8016bcc:	bd80      	pop	{r7, pc}

08016bce <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016bce:	b580      	push	{r7, lr}
 8016bd0:	b084      	sub	sp, #16
 8016bd2:	af00      	add	r7, sp, #0
 8016bd4:	60f8      	str	r0, [r7, #12]
 8016bd6:	60b9      	str	r1, [r7, #8]
 8016bd8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016bda:	687b      	ldr	r3, [r7, #4]
 8016bdc:	68ba      	ldr	r2, [r7, #8]
 8016bde:	2100      	movs	r1, #0
 8016be0:	68f8      	ldr	r0, [r7, #12]
 8016be2:	f002 ffba 	bl	8019b5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016be6:	2300      	movs	r3, #0
}
 8016be8:	4618      	mov	r0, r3
 8016bea:	3710      	adds	r7, #16
 8016bec:	46bd      	mov	sp, r7
 8016bee:	bd80      	pop	{r7, pc}

08016bf0 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016bf0:	b580      	push	{r7, lr}
 8016bf2:	b082      	sub	sp, #8
 8016bf4:	af00      	add	r7, sp, #0
 8016bf6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	2204      	movs	r2, #4
 8016bfc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016c00:	2300      	movs	r3, #0
 8016c02:	2200      	movs	r2, #0
 8016c04:	2100      	movs	r1, #0
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	f002 ff86 	bl	8019b18 <USBD_LL_Transmit>

  return USBD_OK;
 8016c0c:	2300      	movs	r3, #0
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3708      	adds	r7, #8
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}

08016c16 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016c16:	b580      	push	{r7, lr}
 8016c18:	b082      	sub	sp, #8
 8016c1a:	af00      	add	r7, sp, #0
 8016c1c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	2205      	movs	r2, #5
 8016c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016c26:	2300      	movs	r3, #0
 8016c28:	2200      	movs	r2, #0
 8016c2a:	2100      	movs	r1, #0
 8016c2c:	6878      	ldr	r0, [r7, #4]
 8016c2e:	f002 ff94 	bl	8019b5a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016c32:	2300      	movs	r3, #0
}
 8016c34:	4618      	mov	r0, r3
 8016c36:	3708      	adds	r7, #8
 8016c38:	46bd      	mov	sp, r7
 8016c3a:	bd80      	pop	{r7, pc}

08016c3c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8016c3c:	b580      	push	{r7, lr}
 8016c3e:	b084      	sub	sp, #16
 8016c40:	af00      	add	r7, sp, #0
 8016c42:	4603      	mov	r3, r0
 8016c44:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8016c46:	79fb      	ldrb	r3, [r7, #7]
 8016c48:	4a08      	ldr	r2, [pc, #32]	; (8016c6c <disk_status+0x30>)
 8016c4a:	009b      	lsls	r3, r3, #2
 8016c4c:	4413      	add	r3, r2
 8016c4e:	685b      	ldr	r3, [r3, #4]
 8016c50:	685b      	ldr	r3, [r3, #4]
 8016c52:	79fa      	ldrb	r2, [r7, #7]
 8016c54:	4905      	ldr	r1, [pc, #20]	; (8016c6c <disk_status+0x30>)
 8016c56:	440a      	add	r2, r1
 8016c58:	7a12      	ldrb	r2, [r2, #8]
 8016c5a:	4610      	mov	r0, r2
 8016c5c:	4798      	blx	r3
 8016c5e:	4603      	mov	r3, r0
 8016c60:	73fb      	strb	r3, [r7, #15]
  return stat;
 8016c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8016c64:	4618      	mov	r0, r3
 8016c66:	3710      	adds	r7, #16
 8016c68:	46bd      	mov	sp, r7
 8016c6a:	bd80      	pop	{r7, pc}
 8016c6c:	240404f8 	.word	0x240404f8

08016c70 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8016c70:	b580      	push	{r7, lr}
 8016c72:	b084      	sub	sp, #16
 8016c74:	af00      	add	r7, sp, #0
 8016c76:	4603      	mov	r3, r0
 8016c78:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8016c7a:	2300      	movs	r3, #0
 8016c7c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8016c7e:	79fb      	ldrb	r3, [r7, #7]
 8016c80:	4a0d      	ldr	r2, [pc, #52]	; (8016cb8 <disk_initialize+0x48>)
 8016c82:	5cd3      	ldrb	r3, [r2, r3]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d111      	bne.n	8016cac <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8016c88:	79fb      	ldrb	r3, [r7, #7]
 8016c8a:	4a0b      	ldr	r2, [pc, #44]	; (8016cb8 <disk_initialize+0x48>)
 8016c8c:	2101      	movs	r1, #1
 8016c8e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8016c90:	79fb      	ldrb	r3, [r7, #7]
 8016c92:	4a09      	ldr	r2, [pc, #36]	; (8016cb8 <disk_initialize+0x48>)
 8016c94:	009b      	lsls	r3, r3, #2
 8016c96:	4413      	add	r3, r2
 8016c98:	685b      	ldr	r3, [r3, #4]
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	79fa      	ldrb	r2, [r7, #7]
 8016c9e:	4906      	ldr	r1, [pc, #24]	; (8016cb8 <disk_initialize+0x48>)
 8016ca0:	440a      	add	r2, r1
 8016ca2:	7a12      	ldrb	r2, [r2, #8]
 8016ca4:	4610      	mov	r0, r2
 8016ca6:	4798      	blx	r3
 8016ca8:	4603      	mov	r3, r0
 8016caa:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8016cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8016cae:	4618      	mov	r0, r3
 8016cb0:	3710      	adds	r7, #16
 8016cb2:	46bd      	mov	sp, r7
 8016cb4:	bd80      	pop	{r7, pc}
 8016cb6:	bf00      	nop
 8016cb8:	240404f8 	.word	0x240404f8

08016cbc <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8016cbc:	b590      	push	{r4, r7, lr}
 8016cbe:	b087      	sub	sp, #28
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	60b9      	str	r1, [r7, #8]
 8016cc4:	607a      	str	r2, [r7, #4]
 8016cc6:	603b      	str	r3, [r7, #0]
 8016cc8:	4603      	mov	r3, r0
 8016cca:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8016ccc:	7bfb      	ldrb	r3, [r7, #15]
 8016cce:	4a0a      	ldr	r2, [pc, #40]	; (8016cf8 <disk_read+0x3c>)
 8016cd0:	009b      	lsls	r3, r3, #2
 8016cd2:	4413      	add	r3, r2
 8016cd4:	685b      	ldr	r3, [r3, #4]
 8016cd6:	689c      	ldr	r4, [r3, #8]
 8016cd8:	7bfb      	ldrb	r3, [r7, #15]
 8016cda:	4a07      	ldr	r2, [pc, #28]	; (8016cf8 <disk_read+0x3c>)
 8016cdc:	4413      	add	r3, r2
 8016cde:	7a18      	ldrb	r0, [r3, #8]
 8016ce0:	683b      	ldr	r3, [r7, #0]
 8016ce2:	687a      	ldr	r2, [r7, #4]
 8016ce4:	68b9      	ldr	r1, [r7, #8]
 8016ce6:	47a0      	blx	r4
 8016ce8:	4603      	mov	r3, r0
 8016cea:	75fb      	strb	r3, [r7, #23]
  return res;
 8016cec:	7dfb      	ldrb	r3, [r7, #23]
}
 8016cee:	4618      	mov	r0, r3
 8016cf0:	371c      	adds	r7, #28
 8016cf2:	46bd      	mov	sp, r7
 8016cf4:	bd90      	pop	{r4, r7, pc}
 8016cf6:	bf00      	nop
 8016cf8:	240404f8 	.word	0x240404f8

08016cfc <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8016cfc:	b590      	push	{r4, r7, lr}
 8016cfe:	b087      	sub	sp, #28
 8016d00:	af00      	add	r7, sp, #0
 8016d02:	60b9      	str	r1, [r7, #8]
 8016d04:	607a      	str	r2, [r7, #4]
 8016d06:	603b      	str	r3, [r7, #0]
 8016d08:	4603      	mov	r3, r0
 8016d0a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8016d0c:	7bfb      	ldrb	r3, [r7, #15]
 8016d0e:	4a0a      	ldr	r2, [pc, #40]	; (8016d38 <disk_write+0x3c>)
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	4413      	add	r3, r2
 8016d14:	685b      	ldr	r3, [r3, #4]
 8016d16:	68dc      	ldr	r4, [r3, #12]
 8016d18:	7bfb      	ldrb	r3, [r7, #15]
 8016d1a:	4a07      	ldr	r2, [pc, #28]	; (8016d38 <disk_write+0x3c>)
 8016d1c:	4413      	add	r3, r2
 8016d1e:	7a18      	ldrb	r0, [r3, #8]
 8016d20:	683b      	ldr	r3, [r7, #0]
 8016d22:	687a      	ldr	r2, [r7, #4]
 8016d24:	68b9      	ldr	r1, [r7, #8]
 8016d26:	47a0      	blx	r4
 8016d28:	4603      	mov	r3, r0
 8016d2a:	75fb      	strb	r3, [r7, #23]
  return res;
 8016d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8016d2e:	4618      	mov	r0, r3
 8016d30:	371c      	adds	r7, #28
 8016d32:	46bd      	mov	sp, r7
 8016d34:	bd90      	pop	{r4, r7, pc}
 8016d36:	bf00      	nop
 8016d38:	240404f8 	.word	0x240404f8

08016d3c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8016d3c:	b580      	push	{r7, lr}
 8016d3e:	b084      	sub	sp, #16
 8016d40:	af00      	add	r7, sp, #0
 8016d42:	4603      	mov	r3, r0
 8016d44:	603a      	str	r2, [r7, #0]
 8016d46:	71fb      	strb	r3, [r7, #7]
 8016d48:	460b      	mov	r3, r1
 8016d4a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8016d4c:	79fb      	ldrb	r3, [r7, #7]
 8016d4e:	4a09      	ldr	r2, [pc, #36]	; (8016d74 <disk_ioctl+0x38>)
 8016d50:	009b      	lsls	r3, r3, #2
 8016d52:	4413      	add	r3, r2
 8016d54:	685b      	ldr	r3, [r3, #4]
 8016d56:	691b      	ldr	r3, [r3, #16]
 8016d58:	79fa      	ldrb	r2, [r7, #7]
 8016d5a:	4906      	ldr	r1, [pc, #24]	; (8016d74 <disk_ioctl+0x38>)
 8016d5c:	440a      	add	r2, r1
 8016d5e:	7a10      	ldrb	r0, [r2, #8]
 8016d60:	79b9      	ldrb	r1, [r7, #6]
 8016d62:	683a      	ldr	r2, [r7, #0]
 8016d64:	4798      	blx	r3
 8016d66:	4603      	mov	r3, r0
 8016d68:	73fb      	strb	r3, [r7, #15]
  return res;
 8016d6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	3710      	adds	r7, #16
 8016d70:	46bd      	mov	sp, r7
 8016d72:	bd80      	pop	{r7, pc}
 8016d74:	240404f8 	.word	0x240404f8

08016d78 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8016d78:	b480      	push	{r7}
 8016d7a:	b085      	sub	sp, #20
 8016d7c:	af00      	add	r7, sp, #0
 8016d7e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	3301      	adds	r3, #1
 8016d84:	781b      	ldrb	r3, [r3, #0]
 8016d86:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8016d88:	89fb      	ldrh	r3, [r7, #14]
 8016d8a:	021b      	lsls	r3, r3, #8
 8016d8c:	b21a      	sxth	r2, r3
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	781b      	ldrb	r3, [r3, #0]
 8016d92:	b21b      	sxth	r3, r3
 8016d94:	4313      	orrs	r3, r2
 8016d96:	b21b      	sxth	r3, r3
 8016d98:	81fb      	strh	r3, [r7, #14]
	return rv;
 8016d9a:	89fb      	ldrh	r3, [r7, #14]
}
 8016d9c:	4618      	mov	r0, r3
 8016d9e:	3714      	adds	r7, #20
 8016da0:	46bd      	mov	sp, r7
 8016da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da6:	4770      	bx	lr

08016da8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8016da8:	b480      	push	{r7}
 8016daa:	b085      	sub	sp, #20
 8016dac:	af00      	add	r7, sp, #0
 8016dae:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	3303      	adds	r3, #3
 8016db4:	781b      	ldrb	r3, [r3, #0]
 8016db6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8016db8:	68fb      	ldr	r3, [r7, #12]
 8016dba:	021b      	lsls	r3, r3, #8
 8016dbc:	687a      	ldr	r2, [r7, #4]
 8016dbe:	3202      	adds	r2, #2
 8016dc0:	7812      	ldrb	r2, [r2, #0]
 8016dc2:	4313      	orrs	r3, r2
 8016dc4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8016dc6:	68fb      	ldr	r3, [r7, #12]
 8016dc8:	021b      	lsls	r3, r3, #8
 8016dca:	687a      	ldr	r2, [r7, #4]
 8016dcc:	3201      	adds	r2, #1
 8016dce:	7812      	ldrb	r2, [r2, #0]
 8016dd0:	4313      	orrs	r3, r2
 8016dd2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8016dd4:	68fb      	ldr	r3, [r7, #12]
 8016dd6:	021b      	lsls	r3, r3, #8
 8016dd8:	687a      	ldr	r2, [r7, #4]
 8016dda:	7812      	ldrb	r2, [r2, #0]
 8016ddc:	4313      	orrs	r3, r2
 8016dde:	60fb      	str	r3, [r7, #12]
	return rv;
 8016de0:	68fb      	ldr	r3, [r7, #12]
}
 8016de2:	4618      	mov	r0, r3
 8016de4:	3714      	adds	r7, #20
 8016de6:	46bd      	mov	sp, r7
 8016de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dec:	4770      	bx	lr

08016dee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8016dee:	b480      	push	{r7}
 8016df0:	b083      	sub	sp, #12
 8016df2:	af00      	add	r7, sp, #0
 8016df4:	6078      	str	r0, [r7, #4]
 8016df6:	460b      	mov	r3, r1
 8016df8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	1c5a      	adds	r2, r3, #1
 8016dfe:	607a      	str	r2, [r7, #4]
 8016e00:	887a      	ldrh	r2, [r7, #2]
 8016e02:	b2d2      	uxtb	r2, r2
 8016e04:	701a      	strb	r2, [r3, #0]
 8016e06:	887b      	ldrh	r3, [r7, #2]
 8016e08:	0a1b      	lsrs	r3, r3, #8
 8016e0a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8016e0c:	687b      	ldr	r3, [r7, #4]
 8016e0e:	1c5a      	adds	r2, r3, #1
 8016e10:	607a      	str	r2, [r7, #4]
 8016e12:	887a      	ldrh	r2, [r7, #2]
 8016e14:	b2d2      	uxtb	r2, r2
 8016e16:	701a      	strb	r2, [r3, #0]
}
 8016e18:	bf00      	nop
 8016e1a:	370c      	adds	r7, #12
 8016e1c:	46bd      	mov	sp, r7
 8016e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e22:	4770      	bx	lr

08016e24 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8016e24:	b480      	push	{r7}
 8016e26:	b083      	sub	sp, #12
 8016e28:	af00      	add	r7, sp, #0
 8016e2a:	6078      	str	r0, [r7, #4]
 8016e2c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	1c5a      	adds	r2, r3, #1
 8016e32:	607a      	str	r2, [r7, #4]
 8016e34:	683a      	ldr	r2, [r7, #0]
 8016e36:	b2d2      	uxtb	r2, r2
 8016e38:	701a      	strb	r2, [r3, #0]
 8016e3a:	683b      	ldr	r3, [r7, #0]
 8016e3c:	0a1b      	lsrs	r3, r3, #8
 8016e3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	1c5a      	adds	r2, r3, #1
 8016e44:	607a      	str	r2, [r7, #4]
 8016e46:	683a      	ldr	r2, [r7, #0]
 8016e48:	b2d2      	uxtb	r2, r2
 8016e4a:	701a      	strb	r2, [r3, #0]
 8016e4c:	683b      	ldr	r3, [r7, #0]
 8016e4e:	0a1b      	lsrs	r3, r3, #8
 8016e50:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8016e52:	687b      	ldr	r3, [r7, #4]
 8016e54:	1c5a      	adds	r2, r3, #1
 8016e56:	607a      	str	r2, [r7, #4]
 8016e58:	683a      	ldr	r2, [r7, #0]
 8016e5a:	b2d2      	uxtb	r2, r2
 8016e5c:	701a      	strb	r2, [r3, #0]
 8016e5e:	683b      	ldr	r3, [r7, #0]
 8016e60:	0a1b      	lsrs	r3, r3, #8
 8016e62:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8016e64:	687b      	ldr	r3, [r7, #4]
 8016e66:	1c5a      	adds	r2, r3, #1
 8016e68:	607a      	str	r2, [r7, #4]
 8016e6a:	683a      	ldr	r2, [r7, #0]
 8016e6c:	b2d2      	uxtb	r2, r2
 8016e6e:	701a      	strb	r2, [r3, #0]
}
 8016e70:	bf00      	nop
 8016e72:	370c      	adds	r7, #12
 8016e74:	46bd      	mov	sp, r7
 8016e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e7a:	4770      	bx	lr

08016e7c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8016e7c:	b480      	push	{r7}
 8016e7e:	b087      	sub	sp, #28
 8016e80:	af00      	add	r7, sp, #0
 8016e82:	60f8      	str	r0, [r7, #12]
 8016e84:	60b9      	str	r1, [r7, #8]
 8016e86:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016e88:	68fb      	ldr	r3, [r7, #12]
 8016e8a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8016e8c:	68bb      	ldr	r3, [r7, #8]
 8016e8e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8016e90:	687b      	ldr	r3, [r7, #4]
 8016e92:	2b00      	cmp	r3, #0
 8016e94:	d00d      	beq.n	8016eb2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8016e96:	693a      	ldr	r2, [r7, #16]
 8016e98:	1c53      	adds	r3, r2, #1
 8016e9a:	613b      	str	r3, [r7, #16]
 8016e9c:	697b      	ldr	r3, [r7, #20]
 8016e9e:	1c59      	adds	r1, r3, #1
 8016ea0:	6179      	str	r1, [r7, #20]
 8016ea2:	7812      	ldrb	r2, [r2, #0]
 8016ea4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	3b01      	subs	r3, #1
 8016eaa:	607b      	str	r3, [r7, #4]
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d1f1      	bne.n	8016e96 <mem_cpy+0x1a>
	}
}
 8016eb2:	bf00      	nop
 8016eb4:	371c      	adds	r7, #28
 8016eb6:	46bd      	mov	sp, r7
 8016eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ebc:	4770      	bx	lr

08016ebe <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8016ebe:	b480      	push	{r7}
 8016ec0:	b087      	sub	sp, #28
 8016ec2:	af00      	add	r7, sp, #0
 8016ec4:	60f8      	str	r0, [r7, #12]
 8016ec6:	60b9      	str	r1, [r7, #8]
 8016ec8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8016eca:	68fb      	ldr	r3, [r7, #12]
 8016ecc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8016ece:	697b      	ldr	r3, [r7, #20]
 8016ed0:	1c5a      	adds	r2, r3, #1
 8016ed2:	617a      	str	r2, [r7, #20]
 8016ed4:	68ba      	ldr	r2, [r7, #8]
 8016ed6:	b2d2      	uxtb	r2, r2
 8016ed8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	3b01      	subs	r3, #1
 8016ede:	607b      	str	r3, [r7, #4]
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d1f3      	bne.n	8016ece <mem_set+0x10>
}
 8016ee6:	bf00      	nop
 8016ee8:	371c      	adds	r7, #28
 8016eea:	46bd      	mov	sp, r7
 8016eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef0:	4770      	bx	lr

08016ef2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8016ef2:	b480      	push	{r7}
 8016ef4:	b089      	sub	sp, #36	; 0x24
 8016ef6:	af00      	add	r7, sp, #0
 8016ef8:	60f8      	str	r0, [r7, #12]
 8016efa:	60b9      	str	r1, [r7, #8]
 8016efc:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8016efe:	68fb      	ldr	r3, [r7, #12]
 8016f00:	61fb      	str	r3, [r7, #28]
 8016f02:	68bb      	ldr	r3, [r7, #8]
 8016f04:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8016f06:	2300      	movs	r3, #0
 8016f08:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8016f0a:	69fb      	ldr	r3, [r7, #28]
 8016f0c:	1c5a      	adds	r2, r3, #1
 8016f0e:	61fa      	str	r2, [r7, #28]
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	4619      	mov	r1, r3
 8016f14:	69bb      	ldr	r3, [r7, #24]
 8016f16:	1c5a      	adds	r2, r3, #1
 8016f18:	61ba      	str	r2, [r7, #24]
 8016f1a:	781b      	ldrb	r3, [r3, #0]
 8016f1c:	1acb      	subs	r3, r1, r3
 8016f1e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8016f20:	687b      	ldr	r3, [r7, #4]
 8016f22:	3b01      	subs	r3, #1
 8016f24:	607b      	str	r3, [r7, #4]
 8016f26:	687b      	ldr	r3, [r7, #4]
 8016f28:	2b00      	cmp	r3, #0
 8016f2a:	d002      	beq.n	8016f32 <mem_cmp+0x40>
 8016f2c:	697b      	ldr	r3, [r7, #20]
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	d0eb      	beq.n	8016f0a <mem_cmp+0x18>

	return r;
 8016f32:	697b      	ldr	r3, [r7, #20]
}
 8016f34:	4618      	mov	r0, r3
 8016f36:	3724      	adds	r7, #36	; 0x24
 8016f38:	46bd      	mov	sp, r7
 8016f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f3e:	4770      	bx	lr

08016f40 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8016f40:	b480      	push	{r7}
 8016f42:	b083      	sub	sp, #12
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
 8016f48:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8016f4a:	e002      	b.n	8016f52 <chk_chr+0x12>
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	3301      	adds	r3, #1
 8016f50:	607b      	str	r3, [r7, #4]
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	781b      	ldrb	r3, [r3, #0]
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d005      	beq.n	8016f66 <chk_chr+0x26>
 8016f5a:	687b      	ldr	r3, [r7, #4]
 8016f5c:	781b      	ldrb	r3, [r3, #0]
 8016f5e:	461a      	mov	r2, r3
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	4293      	cmp	r3, r2
 8016f64:	d1f2      	bne.n	8016f4c <chk_chr+0xc>
	return *str;
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	781b      	ldrb	r3, [r3, #0]
}
 8016f6a:	4618      	mov	r0, r3
 8016f6c:	370c      	adds	r7, #12
 8016f6e:	46bd      	mov	sp, r7
 8016f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f74:	4770      	bx	lr
	...

08016f78 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8016f78:	b480      	push	{r7}
 8016f7a:	b085      	sub	sp, #20
 8016f7c:	af00      	add	r7, sp, #0
 8016f7e:	6078      	str	r0, [r7, #4]
 8016f80:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016f82:	2300      	movs	r3, #0
 8016f84:	60bb      	str	r3, [r7, #8]
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	60fb      	str	r3, [r7, #12]
 8016f8a:	e029      	b.n	8016fe0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8016f8c:	4a27      	ldr	r2, [pc, #156]	; (801702c <chk_lock+0xb4>)
 8016f8e:	68fb      	ldr	r3, [r7, #12]
 8016f90:	011b      	lsls	r3, r3, #4
 8016f92:	4413      	add	r3, r2
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d01d      	beq.n	8016fd6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016f9a:	4a24      	ldr	r2, [pc, #144]	; (801702c <chk_lock+0xb4>)
 8016f9c:	68fb      	ldr	r3, [r7, #12]
 8016f9e:	011b      	lsls	r3, r3, #4
 8016fa0:	4413      	add	r3, r2
 8016fa2:	681a      	ldr	r2, [r3, #0]
 8016fa4:	687b      	ldr	r3, [r7, #4]
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	429a      	cmp	r2, r3
 8016faa:	d116      	bne.n	8016fda <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8016fac:	4a1f      	ldr	r2, [pc, #124]	; (801702c <chk_lock+0xb4>)
 8016fae:	68fb      	ldr	r3, [r7, #12]
 8016fb0:	011b      	lsls	r3, r3, #4
 8016fb2:	4413      	add	r3, r2
 8016fb4:	3304      	adds	r3, #4
 8016fb6:	681a      	ldr	r2, [r3, #0]
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8016fbc:	429a      	cmp	r2, r3
 8016fbe:	d10c      	bne.n	8016fda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016fc0:	4a1a      	ldr	r2, [pc, #104]	; (801702c <chk_lock+0xb4>)
 8016fc2:	68fb      	ldr	r3, [r7, #12]
 8016fc4:	011b      	lsls	r3, r3, #4
 8016fc6:	4413      	add	r3, r2
 8016fc8:	3308      	adds	r3, #8
 8016fca:	681a      	ldr	r2, [r3, #0]
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8016fd0:	429a      	cmp	r2, r3
 8016fd2:	d102      	bne.n	8016fda <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8016fd4:	e007      	b.n	8016fe6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8016fd6:	2301      	movs	r3, #1
 8016fd8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	3301      	adds	r3, #1
 8016fde:	60fb      	str	r3, [r7, #12]
 8016fe0:	68fb      	ldr	r3, [r7, #12]
 8016fe2:	2b01      	cmp	r3, #1
 8016fe4:	d9d2      	bls.n	8016f8c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8016fe6:	68fb      	ldr	r3, [r7, #12]
 8016fe8:	2b02      	cmp	r3, #2
 8016fea:	d109      	bne.n	8017000 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8016fec:	68bb      	ldr	r3, [r7, #8]
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d102      	bne.n	8016ff8 <chk_lock+0x80>
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	2b02      	cmp	r3, #2
 8016ff6:	d101      	bne.n	8016ffc <chk_lock+0x84>
 8016ff8:	2300      	movs	r3, #0
 8016ffa:	e010      	b.n	801701e <chk_lock+0xa6>
 8016ffc:	2312      	movs	r3, #18
 8016ffe:	e00e      	b.n	801701e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8017000:	683b      	ldr	r3, [r7, #0]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d108      	bne.n	8017018 <chk_lock+0xa0>
 8017006:	4a09      	ldr	r2, [pc, #36]	; (801702c <chk_lock+0xb4>)
 8017008:	68fb      	ldr	r3, [r7, #12]
 801700a:	011b      	lsls	r3, r3, #4
 801700c:	4413      	add	r3, r2
 801700e:	330c      	adds	r3, #12
 8017010:	881b      	ldrh	r3, [r3, #0]
 8017012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8017016:	d101      	bne.n	801701c <chk_lock+0xa4>
 8017018:	2310      	movs	r3, #16
 801701a:	e000      	b.n	801701e <chk_lock+0xa6>
 801701c:	2300      	movs	r3, #0
}
 801701e:	4618      	mov	r0, r3
 8017020:	3714      	adds	r7, #20
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr
 801702a:	bf00      	nop
 801702c:	240404d8 	.word	0x240404d8

08017030 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8017030:	b480      	push	{r7}
 8017032:	b083      	sub	sp, #12
 8017034:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8017036:	2300      	movs	r3, #0
 8017038:	607b      	str	r3, [r7, #4]
 801703a:	e002      	b.n	8017042 <enq_lock+0x12>
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	3301      	adds	r3, #1
 8017040:	607b      	str	r3, [r7, #4]
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2b01      	cmp	r3, #1
 8017046:	d806      	bhi.n	8017056 <enq_lock+0x26>
 8017048:	4a09      	ldr	r2, [pc, #36]	; (8017070 <enq_lock+0x40>)
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	011b      	lsls	r3, r3, #4
 801704e:	4413      	add	r3, r2
 8017050:	681b      	ldr	r3, [r3, #0]
 8017052:	2b00      	cmp	r3, #0
 8017054:	d1f2      	bne.n	801703c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2b02      	cmp	r3, #2
 801705a:	bf14      	ite	ne
 801705c:	2301      	movne	r3, #1
 801705e:	2300      	moveq	r3, #0
 8017060:	b2db      	uxtb	r3, r3
}
 8017062:	4618      	mov	r0, r3
 8017064:	370c      	adds	r7, #12
 8017066:	46bd      	mov	sp, r7
 8017068:	f85d 7b04 	ldr.w	r7, [sp], #4
 801706c:	4770      	bx	lr
 801706e:	bf00      	nop
 8017070:	240404d8 	.word	0x240404d8

08017074 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8017074:	b480      	push	{r7}
 8017076:	b085      	sub	sp, #20
 8017078:	af00      	add	r7, sp, #0
 801707a:	6078      	str	r0, [r7, #4]
 801707c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801707e:	2300      	movs	r3, #0
 8017080:	60fb      	str	r3, [r7, #12]
 8017082:	e01f      	b.n	80170c4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8017084:	4a41      	ldr	r2, [pc, #260]	; (801718c <inc_lock+0x118>)
 8017086:	68fb      	ldr	r3, [r7, #12]
 8017088:	011b      	lsls	r3, r3, #4
 801708a:	4413      	add	r3, r2
 801708c:	681a      	ldr	r2, [r3, #0]
 801708e:	687b      	ldr	r3, [r7, #4]
 8017090:	681b      	ldr	r3, [r3, #0]
 8017092:	429a      	cmp	r2, r3
 8017094:	d113      	bne.n	80170be <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8017096:	4a3d      	ldr	r2, [pc, #244]	; (801718c <inc_lock+0x118>)
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	011b      	lsls	r3, r3, #4
 801709c:	4413      	add	r3, r2
 801709e:	3304      	adds	r3, #4
 80170a0:	681a      	ldr	r2, [r3, #0]
 80170a2:	687b      	ldr	r3, [r7, #4]
 80170a4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80170a6:	429a      	cmp	r2, r3
 80170a8:	d109      	bne.n	80170be <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80170aa:	4a38      	ldr	r2, [pc, #224]	; (801718c <inc_lock+0x118>)
 80170ac:	68fb      	ldr	r3, [r7, #12]
 80170ae:	011b      	lsls	r3, r3, #4
 80170b0:	4413      	add	r3, r2
 80170b2:	3308      	adds	r3, #8
 80170b4:	681a      	ldr	r2, [r3, #0]
 80170b6:	687b      	ldr	r3, [r7, #4]
 80170b8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80170ba:	429a      	cmp	r2, r3
 80170bc:	d006      	beq.n	80170cc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80170be:	68fb      	ldr	r3, [r7, #12]
 80170c0:	3301      	adds	r3, #1
 80170c2:	60fb      	str	r3, [r7, #12]
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	2b01      	cmp	r3, #1
 80170c8:	d9dc      	bls.n	8017084 <inc_lock+0x10>
 80170ca:	e000      	b.n	80170ce <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80170cc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80170ce:	68fb      	ldr	r3, [r7, #12]
 80170d0:	2b02      	cmp	r3, #2
 80170d2:	d132      	bne.n	801713a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80170d4:	2300      	movs	r3, #0
 80170d6:	60fb      	str	r3, [r7, #12]
 80170d8:	e002      	b.n	80170e0 <inc_lock+0x6c>
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	3301      	adds	r3, #1
 80170de:	60fb      	str	r3, [r7, #12]
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d806      	bhi.n	80170f4 <inc_lock+0x80>
 80170e6:	4a29      	ldr	r2, [pc, #164]	; (801718c <inc_lock+0x118>)
 80170e8:	68fb      	ldr	r3, [r7, #12]
 80170ea:	011b      	lsls	r3, r3, #4
 80170ec:	4413      	add	r3, r2
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2b00      	cmp	r3, #0
 80170f2:	d1f2      	bne.n	80170da <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80170f4:	68fb      	ldr	r3, [r7, #12]
 80170f6:	2b02      	cmp	r3, #2
 80170f8:	d101      	bne.n	80170fe <inc_lock+0x8a>
 80170fa:	2300      	movs	r3, #0
 80170fc:	e040      	b.n	8017180 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681a      	ldr	r2, [r3, #0]
 8017102:	4922      	ldr	r1, [pc, #136]	; (801718c <inc_lock+0x118>)
 8017104:	68fb      	ldr	r3, [r7, #12]
 8017106:	011b      	lsls	r3, r3, #4
 8017108:	440b      	add	r3, r1
 801710a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	689a      	ldr	r2, [r3, #8]
 8017110:	491e      	ldr	r1, [pc, #120]	; (801718c <inc_lock+0x118>)
 8017112:	68fb      	ldr	r3, [r7, #12]
 8017114:	011b      	lsls	r3, r3, #4
 8017116:	440b      	add	r3, r1
 8017118:	3304      	adds	r3, #4
 801711a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	695a      	ldr	r2, [r3, #20]
 8017120:	491a      	ldr	r1, [pc, #104]	; (801718c <inc_lock+0x118>)
 8017122:	68fb      	ldr	r3, [r7, #12]
 8017124:	011b      	lsls	r3, r3, #4
 8017126:	440b      	add	r3, r1
 8017128:	3308      	adds	r3, #8
 801712a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 801712c:	4a17      	ldr	r2, [pc, #92]	; (801718c <inc_lock+0x118>)
 801712e:	68fb      	ldr	r3, [r7, #12]
 8017130:	011b      	lsls	r3, r3, #4
 8017132:	4413      	add	r3, r2
 8017134:	330c      	adds	r3, #12
 8017136:	2200      	movs	r2, #0
 8017138:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 801713a:	683b      	ldr	r3, [r7, #0]
 801713c:	2b00      	cmp	r3, #0
 801713e:	d009      	beq.n	8017154 <inc_lock+0xe0>
 8017140:	4a12      	ldr	r2, [pc, #72]	; (801718c <inc_lock+0x118>)
 8017142:	68fb      	ldr	r3, [r7, #12]
 8017144:	011b      	lsls	r3, r3, #4
 8017146:	4413      	add	r3, r2
 8017148:	330c      	adds	r3, #12
 801714a:	881b      	ldrh	r3, [r3, #0]
 801714c:	2b00      	cmp	r3, #0
 801714e:	d001      	beq.n	8017154 <inc_lock+0xe0>
 8017150:	2300      	movs	r3, #0
 8017152:	e015      	b.n	8017180 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8017154:	683b      	ldr	r3, [r7, #0]
 8017156:	2b00      	cmp	r3, #0
 8017158:	d108      	bne.n	801716c <inc_lock+0xf8>
 801715a:	4a0c      	ldr	r2, [pc, #48]	; (801718c <inc_lock+0x118>)
 801715c:	68fb      	ldr	r3, [r7, #12]
 801715e:	011b      	lsls	r3, r3, #4
 8017160:	4413      	add	r3, r2
 8017162:	330c      	adds	r3, #12
 8017164:	881b      	ldrh	r3, [r3, #0]
 8017166:	3301      	adds	r3, #1
 8017168:	b29a      	uxth	r2, r3
 801716a:	e001      	b.n	8017170 <inc_lock+0xfc>
 801716c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8017170:	4906      	ldr	r1, [pc, #24]	; (801718c <inc_lock+0x118>)
 8017172:	68fb      	ldr	r3, [r7, #12]
 8017174:	011b      	lsls	r3, r3, #4
 8017176:	440b      	add	r3, r1
 8017178:	330c      	adds	r3, #12
 801717a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	3301      	adds	r3, #1
}
 8017180:	4618      	mov	r0, r3
 8017182:	3714      	adds	r7, #20
 8017184:	46bd      	mov	sp, r7
 8017186:	f85d 7b04 	ldr.w	r7, [sp], #4
 801718a:	4770      	bx	lr
 801718c:	240404d8 	.word	0x240404d8

08017190 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8017190:	b480      	push	{r7}
 8017192:	b085      	sub	sp, #20
 8017194:	af00      	add	r7, sp, #0
 8017196:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	3b01      	subs	r3, #1
 801719c:	607b      	str	r3, [r7, #4]
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	2b01      	cmp	r3, #1
 80171a2:	d825      	bhi.n	80171f0 <dec_lock+0x60>
		n = Files[i].ctr;
 80171a4:	4a17      	ldr	r2, [pc, #92]	; (8017204 <dec_lock+0x74>)
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	011b      	lsls	r3, r3, #4
 80171aa:	4413      	add	r3, r2
 80171ac:	330c      	adds	r3, #12
 80171ae:	881b      	ldrh	r3, [r3, #0]
 80171b0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80171b2:	89fb      	ldrh	r3, [r7, #14]
 80171b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80171b8:	d101      	bne.n	80171be <dec_lock+0x2e>
 80171ba:	2300      	movs	r3, #0
 80171bc:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80171be:	89fb      	ldrh	r3, [r7, #14]
 80171c0:	2b00      	cmp	r3, #0
 80171c2:	d002      	beq.n	80171ca <dec_lock+0x3a>
 80171c4:	89fb      	ldrh	r3, [r7, #14]
 80171c6:	3b01      	subs	r3, #1
 80171c8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80171ca:	4a0e      	ldr	r2, [pc, #56]	; (8017204 <dec_lock+0x74>)
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	011b      	lsls	r3, r3, #4
 80171d0:	4413      	add	r3, r2
 80171d2:	330c      	adds	r3, #12
 80171d4:	89fa      	ldrh	r2, [r7, #14]
 80171d6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80171d8:	89fb      	ldrh	r3, [r7, #14]
 80171da:	2b00      	cmp	r3, #0
 80171dc:	d105      	bne.n	80171ea <dec_lock+0x5a>
 80171de:	4a09      	ldr	r2, [pc, #36]	; (8017204 <dec_lock+0x74>)
 80171e0:	687b      	ldr	r3, [r7, #4]
 80171e2:	011b      	lsls	r3, r3, #4
 80171e4:	4413      	add	r3, r2
 80171e6:	2200      	movs	r2, #0
 80171e8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80171ea:	2300      	movs	r3, #0
 80171ec:	737b      	strb	r3, [r7, #13]
 80171ee:	e001      	b.n	80171f4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80171f0:	2302      	movs	r3, #2
 80171f2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80171f4:	7b7b      	ldrb	r3, [r7, #13]
}
 80171f6:	4618      	mov	r0, r3
 80171f8:	3714      	adds	r7, #20
 80171fa:	46bd      	mov	sp, r7
 80171fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017200:	4770      	bx	lr
 8017202:	bf00      	nop
 8017204:	240404d8 	.word	0x240404d8

08017208 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8017208:	b480      	push	{r7}
 801720a:	b085      	sub	sp, #20
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8017210:	2300      	movs	r3, #0
 8017212:	60fb      	str	r3, [r7, #12]
 8017214:	e010      	b.n	8017238 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8017216:	4a0d      	ldr	r2, [pc, #52]	; (801724c <clear_lock+0x44>)
 8017218:	68fb      	ldr	r3, [r7, #12]
 801721a:	011b      	lsls	r3, r3, #4
 801721c:	4413      	add	r3, r2
 801721e:	681b      	ldr	r3, [r3, #0]
 8017220:	687a      	ldr	r2, [r7, #4]
 8017222:	429a      	cmp	r2, r3
 8017224:	d105      	bne.n	8017232 <clear_lock+0x2a>
 8017226:	4a09      	ldr	r2, [pc, #36]	; (801724c <clear_lock+0x44>)
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	011b      	lsls	r3, r3, #4
 801722c:	4413      	add	r3, r2
 801722e:	2200      	movs	r2, #0
 8017230:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8017232:	68fb      	ldr	r3, [r7, #12]
 8017234:	3301      	adds	r3, #1
 8017236:	60fb      	str	r3, [r7, #12]
 8017238:	68fb      	ldr	r3, [r7, #12]
 801723a:	2b01      	cmp	r3, #1
 801723c:	d9eb      	bls.n	8017216 <clear_lock+0xe>
	}
}
 801723e:	bf00      	nop
 8017240:	3714      	adds	r7, #20
 8017242:	46bd      	mov	sp, r7
 8017244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017248:	4770      	bx	lr
 801724a:	bf00      	nop
 801724c:	240404d8 	.word	0x240404d8

08017250 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8017250:	b580      	push	{r7, lr}
 8017252:	b086      	sub	sp, #24
 8017254:	af00      	add	r7, sp, #0
 8017256:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8017258:	2300      	movs	r3, #0
 801725a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	78db      	ldrb	r3, [r3, #3]
 8017260:	2b00      	cmp	r3, #0
 8017262:	d034      	beq.n	80172ce <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8017264:	687b      	ldr	r3, [r7, #4]
 8017266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017268:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	7858      	ldrb	r0, [r3, #1]
 801726e:	687b      	ldr	r3, [r7, #4]
 8017270:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8017274:	2301      	movs	r3, #1
 8017276:	697a      	ldr	r2, [r7, #20]
 8017278:	f7ff fd40 	bl	8016cfc <disk_write>
 801727c:	4603      	mov	r3, r0
 801727e:	2b00      	cmp	r3, #0
 8017280:	d002      	beq.n	8017288 <sync_window+0x38>
			res = FR_DISK_ERR;
 8017282:	2301      	movs	r3, #1
 8017284:	73fb      	strb	r3, [r7, #15]
 8017286:	e022      	b.n	80172ce <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	2200      	movs	r2, #0
 801728c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	6a1b      	ldr	r3, [r3, #32]
 8017292:	697a      	ldr	r2, [r7, #20]
 8017294:	1ad2      	subs	r2, r2, r3
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	699b      	ldr	r3, [r3, #24]
 801729a:	429a      	cmp	r2, r3
 801729c:	d217      	bcs.n	80172ce <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	789b      	ldrb	r3, [r3, #2]
 80172a2:	613b      	str	r3, [r7, #16]
 80172a4:	e010      	b.n	80172c8 <sync_window+0x78>
					wsect += fs->fsize;
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	699b      	ldr	r3, [r3, #24]
 80172aa:	697a      	ldr	r2, [r7, #20]
 80172ac:	4413      	add	r3, r2
 80172ae:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	7858      	ldrb	r0, [r3, #1]
 80172b4:	687b      	ldr	r3, [r7, #4]
 80172b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80172ba:	2301      	movs	r3, #1
 80172bc:	697a      	ldr	r2, [r7, #20]
 80172be:	f7ff fd1d 	bl	8016cfc <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80172c2:	693b      	ldr	r3, [r7, #16]
 80172c4:	3b01      	subs	r3, #1
 80172c6:	613b      	str	r3, [r7, #16]
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	2b01      	cmp	r3, #1
 80172cc:	d8eb      	bhi.n	80172a6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80172ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80172d0:	4618      	mov	r0, r3
 80172d2:	3718      	adds	r7, #24
 80172d4:	46bd      	mov	sp, r7
 80172d6:	bd80      	pop	{r7, pc}

080172d8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80172d8:	b580      	push	{r7, lr}
 80172da:	b084      	sub	sp, #16
 80172dc:	af00      	add	r7, sp, #0
 80172de:	6078      	str	r0, [r7, #4]
 80172e0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80172e2:	2300      	movs	r3, #0
 80172e4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80172e6:	687b      	ldr	r3, [r7, #4]
 80172e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80172ea:	683a      	ldr	r2, [r7, #0]
 80172ec:	429a      	cmp	r2, r3
 80172ee:	d01b      	beq.n	8017328 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7ff ffad 	bl	8017250 <sync_window>
 80172f6:	4603      	mov	r3, r0
 80172f8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80172fa:	7bfb      	ldrb	r3, [r7, #15]
 80172fc:	2b00      	cmp	r3, #0
 80172fe:	d113      	bne.n	8017328 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	7858      	ldrb	r0, [r3, #1]
 8017304:	687b      	ldr	r3, [r7, #4]
 8017306:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801730a:	2301      	movs	r3, #1
 801730c:	683a      	ldr	r2, [r7, #0]
 801730e:	f7ff fcd5 	bl	8016cbc <disk_read>
 8017312:	4603      	mov	r3, r0
 8017314:	2b00      	cmp	r3, #0
 8017316:	d004      	beq.n	8017322 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8017318:	f04f 33ff 	mov.w	r3, #4294967295
 801731c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 801731e:	2301      	movs	r3, #1
 8017320:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	683a      	ldr	r2, [r7, #0]
 8017326:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8017328:	7bfb      	ldrb	r3, [r7, #15]
}
 801732a:	4618      	mov	r0, r3
 801732c:	3710      	adds	r7, #16
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
	...

08017334 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8017334:	b580      	push	{r7, lr}
 8017336:	b084      	sub	sp, #16
 8017338:	af00      	add	r7, sp, #0
 801733a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 801733c:	6878      	ldr	r0, [r7, #4]
 801733e:	f7ff ff87 	bl	8017250 <sync_window>
 8017342:	4603      	mov	r3, r0
 8017344:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8017346:	7bfb      	ldrb	r3, [r7, #15]
 8017348:	2b00      	cmp	r3, #0
 801734a:	d158      	bne.n	80173fe <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	781b      	ldrb	r3, [r3, #0]
 8017350:	2b03      	cmp	r3, #3
 8017352:	d148      	bne.n	80173e6 <sync_fs+0xb2>
 8017354:	687b      	ldr	r3, [r7, #4]
 8017356:	791b      	ldrb	r3, [r3, #4]
 8017358:	2b01      	cmp	r3, #1
 801735a:	d144      	bne.n	80173e6 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 801735c:	687b      	ldr	r3, [r7, #4]
 801735e:	3330      	adds	r3, #48	; 0x30
 8017360:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017364:	2100      	movs	r1, #0
 8017366:	4618      	mov	r0, r3
 8017368:	f7ff fda9 	bl	8016ebe <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801736c:	687b      	ldr	r3, [r7, #4]
 801736e:	3330      	adds	r3, #48	; 0x30
 8017370:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8017374:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8017378:	4618      	mov	r0, r3
 801737a:	f7ff fd38 	bl	8016dee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801737e:	687b      	ldr	r3, [r7, #4]
 8017380:	3330      	adds	r3, #48	; 0x30
 8017382:	4921      	ldr	r1, [pc, #132]	; (8017408 <sync_fs+0xd4>)
 8017384:	4618      	mov	r0, r3
 8017386:	f7ff fd4d 	bl	8016e24 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	3330      	adds	r3, #48	; 0x30
 801738e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8017392:	491e      	ldr	r1, [pc, #120]	; (801740c <sync_fs+0xd8>)
 8017394:	4618      	mov	r0, r3
 8017396:	f7ff fd45 	bl	8016e24 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 801739a:	687b      	ldr	r3, [r7, #4]
 801739c:	3330      	adds	r3, #48	; 0x30
 801739e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 80173a2:	687b      	ldr	r3, [r7, #4]
 80173a4:	691b      	ldr	r3, [r3, #16]
 80173a6:	4619      	mov	r1, r3
 80173a8:	4610      	mov	r0, r2
 80173aa:	f7ff fd3b 	bl	8016e24 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80173ae:	687b      	ldr	r3, [r7, #4]
 80173b0:	3330      	adds	r3, #48	; 0x30
 80173b2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	68db      	ldr	r3, [r3, #12]
 80173ba:	4619      	mov	r1, r3
 80173bc:	4610      	mov	r0, r2
 80173be:	f7ff fd31 	bl	8016e24 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	69db      	ldr	r3, [r3, #28]
 80173c6:	1c5a      	adds	r2, r3, #1
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	7858      	ldrb	r0, [r3, #1]
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80173da:	2301      	movs	r3, #1
 80173dc:	f7ff fc8e 	bl	8016cfc <disk_write>
			fs->fsi_flag = 0;
 80173e0:	687b      	ldr	r3, [r7, #4]
 80173e2:	2200      	movs	r2, #0
 80173e4:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	785b      	ldrb	r3, [r3, #1]
 80173ea:	2200      	movs	r2, #0
 80173ec:	2100      	movs	r1, #0
 80173ee:	4618      	mov	r0, r3
 80173f0:	f7ff fca4 	bl	8016d3c <disk_ioctl>
 80173f4:	4603      	mov	r3, r0
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d001      	beq.n	80173fe <sync_fs+0xca>
 80173fa:	2301      	movs	r3, #1
 80173fc:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80173fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8017400:	4618      	mov	r0, r3
 8017402:	3710      	adds	r7, #16
 8017404:	46bd      	mov	sp, r7
 8017406:	bd80      	pop	{r7, pc}
 8017408:	41615252 	.word	0x41615252
 801740c:	61417272 	.word	0x61417272

08017410 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8017410:	b480      	push	{r7}
 8017412:	b083      	sub	sp, #12
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
 8017418:	6039      	str	r1, [r7, #0]
	clst -= 2;
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	3b02      	subs	r3, #2
 801741e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8017420:	687b      	ldr	r3, [r7, #4]
 8017422:	695b      	ldr	r3, [r3, #20]
 8017424:	3b02      	subs	r3, #2
 8017426:	683a      	ldr	r2, [r7, #0]
 8017428:	429a      	cmp	r2, r3
 801742a:	d301      	bcc.n	8017430 <clust2sect+0x20>
 801742c:	2300      	movs	r3, #0
 801742e:	e008      	b.n	8017442 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	895b      	ldrh	r3, [r3, #10]
 8017434:	461a      	mov	r2, r3
 8017436:	683b      	ldr	r3, [r7, #0]
 8017438:	fb03 f202 	mul.w	r2, r3, r2
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017440:	4413      	add	r3, r2
}
 8017442:	4618      	mov	r0, r3
 8017444:	370c      	adds	r7, #12
 8017446:	46bd      	mov	sp, r7
 8017448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801744c:	4770      	bx	lr

0801744e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801744e:	b580      	push	{r7, lr}
 8017450:	b086      	sub	sp, #24
 8017452:	af00      	add	r7, sp, #0
 8017454:	6078      	str	r0, [r7, #4]
 8017456:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	681b      	ldr	r3, [r3, #0]
 801745c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801745e:	683b      	ldr	r3, [r7, #0]
 8017460:	2b01      	cmp	r3, #1
 8017462:	d904      	bls.n	801746e <get_fat+0x20>
 8017464:	693b      	ldr	r3, [r7, #16]
 8017466:	695b      	ldr	r3, [r3, #20]
 8017468:	683a      	ldr	r2, [r7, #0]
 801746a:	429a      	cmp	r2, r3
 801746c:	d302      	bcc.n	8017474 <get_fat+0x26>
		val = 1;	/* Internal error */
 801746e:	2301      	movs	r3, #1
 8017470:	617b      	str	r3, [r7, #20]
 8017472:	e08c      	b.n	801758e <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8017474:	f04f 33ff 	mov.w	r3, #4294967295
 8017478:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801747a:	693b      	ldr	r3, [r7, #16]
 801747c:	781b      	ldrb	r3, [r3, #0]
 801747e:	2b02      	cmp	r3, #2
 8017480:	d045      	beq.n	801750e <get_fat+0xc0>
 8017482:	2b03      	cmp	r3, #3
 8017484:	d05d      	beq.n	8017542 <get_fat+0xf4>
 8017486:	2b01      	cmp	r3, #1
 8017488:	d177      	bne.n	801757a <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 801748a:	683b      	ldr	r3, [r7, #0]
 801748c:	60fb      	str	r3, [r7, #12]
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	085b      	lsrs	r3, r3, #1
 8017492:	68fa      	ldr	r2, [r7, #12]
 8017494:	4413      	add	r3, r2
 8017496:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017498:	693b      	ldr	r3, [r7, #16]
 801749a:	6a1a      	ldr	r2, [r3, #32]
 801749c:	68fb      	ldr	r3, [r7, #12]
 801749e:	0a5b      	lsrs	r3, r3, #9
 80174a0:	4413      	add	r3, r2
 80174a2:	4619      	mov	r1, r3
 80174a4:	6938      	ldr	r0, [r7, #16]
 80174a6:	f7ff ff17 	bl	80172d8 <move_window>
 80174aa:	4603      	mov	r3, r0
 80174ac:	2b00      	cmp	r3, #0
 80174ae:	d167      	bne.n	8017580 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 80174b0:	68fb      	ldr	r3, [r7, #12]
 80174b2:	1c5a      	adds	r2, r3, #1
 80174b4:	60fa      	str	r2, [r7, #12]
 80174b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174ba:	693a      	ldr	r2, [r7, #16]
 80174bc:	4413      	add	r3, r2
 80174be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174c2:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80174c4:	693b      	ldr	r3, [r7, #16]
 80174c6:	6a1a      	ldr	r2, [r3, #32]
 80174c8:	68fb      	ldr	r3, [r7, #12]
 80174ca:	0a5b      	lsrs	r3, r3, #9
 80174cc:	4413      	add	r3, r2
 80174ce:	4619      	mov	r1, r3
 80174d0:	6938      	ldr	r0, [r7, #16]
 80174d2:	f7ff ff01 	bl	80172d8 <move_window>
 80174d6:	4603      	mov	r3, r0
 80174d8:	2b00      	cmp	r3, #0
 80174da:	d153      	bne.n	8017584 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 80174dc:	68fb      	ldr	r3, [r7, #12]
 80174de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80174e2:	693a      	ldr	r2, [r7, #16]
 80174e4:	4413      	add	r3, r2
 80174e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80174ea:	021b      	lsls	r3, r3, #8
 80174ec:	461a      	mov	r2, r3
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	4313      	orrs	r3, r2
 80174f2:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 80174f4:	683b      	ldr	r3, [r7, #0]
 80174f6:	f003 0301 	and.w	r3, r3, #1
 80174fa:	2b00      	cmp	r3, #0
 80174fc:	d002      	beq.n	8017504 <get_fat+0xb6>
 80174fe:	68bb      	ldr	r3, [r7, #8]
 8017500:	091b      	lsrs	r3, r3, #4
 8017502:	e002      	b.n	801750a <get_fat+0xbc>
 8017504:	68bb      	ldr	r3, [r7, #8]
 8017506:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801750a:	617b      	str	r3, [r7, #20]
			break;
 801750c:	e03f      	b.n	801758e <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 801750e:	693b      	ldr	r3, [r7, #16]
 8017510:	6a1a      	ldr	r2, [r3, #32]
 8017512:	683b      	ldr	r3, [r7, #0]
 8017514:	0a1b      	lsrs	r3, r3, #8
 8017516:	4413      	add	r3, r2
 8017518:	4619      	mov	r1, r3
 801751a:	6938      	ldr	r0, [r7, #16]
 801751c:	f7ff fedc 	bl	80172d8 <move_window>
 8017520:	4603      	mov	r3, r0
 8017522:	2b00      	cmp	r3, #0
 8017524:	d130      	bne.n	8017588 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8017526:	693b      	ldr	r3, [r7, #16]
 8017528:	f103 0230 	add.w	r2, r3, #48	; 0x30
 801752c:	683b      	ldr	r3, [r7, #0]
 801752e:	005b      	lsls	r3, r3, #1
 8017530:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8017534:	4413      	add	r3, r2
 8017536:	4618      	mov	r0, r3
 8017538:	f7ff fc1e 	bl	8016d78 <ld_word>
 801753c:	4603      	mov	r3, r0
 801753e:	617b      	str	r3, [r7, #20]
			break;
 8017540:	e025      	b.n	801758e <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8017542:	693b      	ldr	r3, [r7, #16]
 8017544:	6a1a      	ldr	r2, [r3, #32]
 8017546:	683b      	ldr	r3, [r7, #0]
 8017548:	09db      	lsrs	r3, r3, #7
 801754a:	4413      	add	r3, r2
 801754c:	4619      	mov	r1, r3
 801754e:	6938      	ldr	r0, [r7, #16]
 8017550:	f7ff fec2 	bl	80172d8 <move_window>
 8017554:	4603      	mov	r3, r0
 8017556:	2b00      	cmp	r3, #0
 8017558:	d118      	bne.n	801758c <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801755a:	693b      	ldr	r3, [r7, #16]
 801755c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	009b      	lsls	r3, r3, #2
 8017564:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8017568:	4413      	add	r3, r2
 801756a:	4618      	mov	r0, r3
 801756c:	f7ff fc1c 	bl	8016da8 <ld_dword>
 8017570:	4603      	mov	r3, r0
 8017572:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8017576:	617b      	str	r3, [r7, #20]
			break;
 8017578:	e009      	b.n	801758e <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 801757a:	2301      	movs	r3, #1
 801757c:	617b      	str	r3, [r7, #20]
 801757e:	e006      	b.n	801758e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017580:	bf00      	nop
 8017582:	e004      	b.n	801758e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8017584:	bf00      	nop
 8017586:	e002      	b.n	801758e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8017588:	bf00      	nop
 801758a:	e000      	b.n	801758e <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801758c:	bf00      	nop
		}
	}

	return val;
 801758e:	697b      	ldr	r3, [r7, #20]
}
 8017590:	4618      	mov	r0, r3
 8017592:	3718      	adds	r7, #24
 8017594:	46bd      	mov	sp, r7
 8017596:	bd80      	pop	{r7, pc}

08017598 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8017598:	b590      	push	{r4, r7, lr}
 801759a:	b089      	sub	sp, #36	; 0x24
 801759c:	af00      	add	r7, sp, #0
 801759e:	60f8      	str	r0, [r7, #12]
 80175a0:	60b9      	str	r1, [r7, #8]
 80175a2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80175a4:	2302      	movs	r3, #2
 80175a6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80175a8:	68bb      	ldr	r3, [r7, #8]
 80175aa:	2b01      	cmp	r3, #1
 80175ac:	f240 80d6 	bls.w	801775c <put_fat+0x1c4>
 80175b0:	68fb      	ldr	r3, [r7, #12]
 80175b2:	695b      	ldr	r3, [r3, #20]
 80175b4:	68ba      	ldr	r2, [r7, #8]
 80175b6:	429a      	cmp	r2, r3
 80175b8:	f080 80d0 	bcs.w	801775c <put_fat+0x1c4>
		switch (fs->fs_type) {
 80175bc:	68fb      	ldr	r3, [r7, #12]
 80175be:	781b      	ldrb	r3, [r3, #0]
 80175c0:	2b02      	cmp	r3, #2
 80175c2:	d073      	beq.n	80176ac <put_fat+0x114>
 80175c4:	2b03      	cmp	r3, #3
 80175c6:	f000 8091 	beq.w	80176ec <put_fat+0x154>
 80175ca:	2b01      	cmp	r3, #1
 80175cc:	f040 80c6 	bne.w	801775c <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80175d0:	68bb      	ldr	r3, [r7, #8]
 80175d2:	61bb      	str	r3, [r7, #24]
 80175d4:	69bb      	ldr	r3, [r7, #24]
 80175d6:	085b      	lsrs	r3, r3, #1
 80175d8:	69ba      	ldr	r2, [r7, #24]
 80175da:	4413      	add	r3, r2
 80175dc:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80175de:	68fb      	ldr	r3, [r7, #12]
 80175e0:	6a1a      	ldr	r2, [r3, #32]
 80175e2:	69bb      	ldr	r3, [r7, #24]
 80175e4:	0a5b      	lsrs	r3, r3, #9
 80175e6:	4413      	add	r3, r2
 80175e8:	4619      	mov	r1, r3
 80175ea:	68f8      	ldr	r0, [r7, #12]
 80175ec:	f7ff fe74 	bl	80172d8 <move_window>
 80175f0:	4603      	mov	r3, r0
 80175f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80175f4:	7ffb      	ldrb	r3, [r7, #31]
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	f040 80a9 	bne.w	801774e <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 80175fc:	68fb      	ldr	r3, [r7, #12]
 80175fe:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017602:	69bb      	ldr	r3, [r7, #24]
 8017604:	1c59      	adds	r1, r3, #1
 8017606:	61b9      	str	r1, [r7, #24]
 8017608:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801760c:	4413      	add	r3, r2
 801760e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8017610:	68bb      	ldr	r3, [r7, #8]
 8017612:	f003 0301 	and.w	r3, r3, #1
 8017616:	2b00      	cmp	r3, #0
 8017618:	d00d      	beq.n	8017636 <put_fat+0x9e>
 801761a:	697b      	ldr	r3, [r7, #20]
 801761c:	781b      	ldrb	r3, [r3, #0]
 801761e:	b25b      	sxtb	r3, r3
 8017620:	f003 030f 	and.w	r3, r3, #15
 8017624:	b25a      	sxtb	r2, r3
 8017626:	687b      	ldr	r3, [r7, #4]
 8017628:	b2db      	uxtb	r3, r3
 801762a:	011b      	lsls	r3, r3, #4
 801762c:	b25b      	sxtb	r3, r3
 801762e:	4313      	orrs	r3, r2
 8017630:	b25b      	sxtb	r3, r3
 8017632:	b2db      	uxtb	r3, r3
 8017634:	e001      	b.n	801763a <put_fat+0xa2>
 8017636:	687b      	ldr	r3, [r7, #4]
 8017638:	b2db      	uxtb	r3, r3
 801763a:	697a      	ldr	r2, [r7, #20]
 801763c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 801763e:	68fb      	ldr	r3, [r7, #12]
 8017640:	2201      	movs	r2, #1
 8017642:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8017644:	68fb      	ldr	r3, [r7, #12]
 8017646:	6a1a      	ldr	r2, [r3, #32]
 8017648:	69bb      	ldr	r3, [r7, #24]
 801764a:	0a5b      	lsrs	r3, r3, #9
 801764c:	4413      	add	r3, r2
 801764e:	4619      	mov	r1, r3
 8017650:	68f8      	ldr	r0, [r7, #12]
 8017652:	f7ff fe41 	bl	80172d8 <move_window>
 8017656:	4603      	mov	r3, r0
 8017658:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801765a:	7ffb      	ldrb	r3, [r7, #31]
 801765c:	2b00      	cmp	r3, #0
 801765e:	d178      	bne.n	8017752 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 8017660:	68fb      	ldr	r3, [r7, #12]
 8017662:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017666:	69bb      	ldr	r3, [r7, #24]
 8017668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801766c:	4413      	add	r3, r2
 801766e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8017670:	68bb      	ldr	r3, [r7, #8]
 8017672:	f003 0301 	and.w	r3, r3, #1
 8017676:	2b00      	cmp	r3, #0
 8017678:	d003      	beq.n	8017682 <put_fat+0xea>
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	091b      	lsrs	r3, r3, #4
 801767e:	b2db      	uxtb	r3, r3
 8017680:	e00e      	b.n	80176a0 <put_fat+0x108>
 8017682:	697b      	ldr	r3, [r7, #20]
 8017684:	781b      	ldrb	r3, [r3, #0]
 8017686:	b25b      	sxtb	r3, r3
 8017688:	f023 030f 	bic.w	r3, r3, #15
 801768c:	b25a      	sxtb	r2, r3
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	0a1b      	lsrs	r3, r3, #8
 8017692:	b25b      	sxtb	r3, r3
 8017694:	f003 030f 	and.w	r3, r3, #15
 8017698:	b25b      	sxtb	r3, r3
 801769a:	4313      	orrs	r3, r2
 801769c:	b25b      	sxtb	r3, r3
 801769e:	b2db      	uxtb	r3, r3
 80176a0:	697a      	ldr	r2, [r7, #20]
 80176a2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80176a4:	68fb      	ldr	r3, [r7, #12]
 80176a6:	2201      	movs	r2, #1
 80176a8:	70da      	strb	r2, [r3, #3]
			break;
 80176aa:	e057      	b.n	801775c <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80176ac:	68fb      	ldr	r3, [r7, #12]
 80176ae:	6a1a      	ldr	r2, [r3, #32]
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	0a1b      	lsrs	r3, r3, #8
 80176b4:	4413      	add	r3, r2
 80176b6:	4619      	mov	r1, r3
 80176b8:	68f8      	ldr	r0, [r7, #12]
 80176ba:	f7ff fe0d 	bl	80172d8 <move_window>
 80176be:	4603      	mov	r3, r0
 80176c0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80176c2:	7ffb      	ldrb	r3, [r7, #31]
 80176c4:	2b00      	cmp	r3, #0
 80176c6:	d146      	bne.n	8017756 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80176c8:	68fb      	ldr	r3, [r7, #12]
 80176ca:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80176ce:	68bb      	ldr	r3, [r7, #8]
 80176d0:	005b      	lsls	r3, r3, #1
 80176d2:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80176d6:	4413      	add	r3, r2
 80176d8:	687a      	ldr	r2, [r7, #4]
 80176da:	b292      	uxth	r2, r2
 80176dc:	4611      	mov	r1, r2
 80176de:	4618      	mov	r0, r3
 80176e0:	f7ff fb85 	bl	8016dee <st_word>
			fs->wflag = 1;
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	2201      	movs	r2, #1
 80176e8:	70da      	strb	r2, [r3, #3]
			break;
 80176ea:	e037      	b.n	801775c <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	6a1a      	ldr	r2, [r3, #32]
 80176f0:	68bb      	ldr	r3, [r7, #8]
 80176f2:	09db      	lsrs	r3, r3, #7
 80176f4:	4413      	add	r3, r2
 80176f6:	4619      	mov	r1, r3
 80176f8:	68f8      	ldr	r0, [r7, #12]
 80176fa:	f7ff fded 	bl	80172d8 <move_window>
 80176fe:	4603      	mov	r3, r0
 8017700:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8017702:	7ffb      	ldrb	r3, [r7, #31]
 8017704:	2b00      	cmp	r3, #0
 8017706:	d128      	bne.n	801775a <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8017708:	687b      	ldr	r3, [r7, #4]
 801770a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801770e:	68fb      	ldr	r3, [r7, #12]
 8017710:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017714:	68bb      	ldr	r3, [r7, #8]
 8017716:	009b      	lsls	r3, r3, #2
 8017718:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801771c:	4413      	add	r3, r2
 801771e:	4618      	mov	r0, r3
 8017720:	f7ff fb42 	bl	8016da8 <ld_dword>
 8017724:	4603      	mov	r3, r0
 8017726:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 801772a:	4323      	orrs	r3, r4
 801772c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 801772e:	68fb      	ldr	r3, [r7, #12]
 8017730:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017734:	68bb      	ldr	r3, [r7, #8]
 8017736:	009b      	lsls	r3, r3, #2
 8017738:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 801773c:	4413      	add	r3, r2
 801773e:	6879      	ldr	r1, [r7, #4]
 8017740:	4618      	mov	r0, r3
 8017742:	f7ff fb6f 	bl	8016e24 <st_dword>
			fs->wflag = 1;
 8017746:	68fb      	ldr	r3, [r7, #12]
 8017748:	2201      	movs	r2, #1
 801774a:	70da      	strb	r2, [r3, #3]
			break;
 801774c:	e006      	b.n	801775c <put_fat+0x1c4>
			if (res != FR_OK) break;
 801774e:	bf00      	nop
 8017750:	e004      	b.n	801775c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017752:	bf00      	nop
 8017754:	e002      	b.n	801775c <put_fat+0x1c4>
			if (res != FR_OK) break;
 8017756:	bf00      	nop
 8017758:	e000      	b.n	801775c <put_fat+0x1c4>
			if (res != FR_OK) break;
 801775a:	bf00      	nop
		}
	}
	return res;
 801775c:	7ffb      	ldrb	r3, [r7, #31]
}
 801775e:	4618      	mov	r0, r3
 8017760:	3724      	adds	r7, #36	; 0x24
 8017762:	46bd      	mov	sp, r7
 8017764:	bd90      	pop	{r4, r7, pc}

08017766 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8017766:	b580      	push	{r7, lr}
 8017768:	b088      	sub	sp, #32
 801776a:	af00      	add	r7, sp, #0
 801776c:	60f8      	str	r0, [r7, #12]
 801776e:	60b9      	str	r1, [r7, #8]
 8017770:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8017772:	2300      	movs	r3, #0
 8017774:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8017776:	68fb      	ldr	r3, [r7, #12]
 8017778:	681b      	ldr	r3, [r3, #0]
 801777a:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 801777c:	68bb      	ldr	r3, [r7, #8]
 801777e:	2b01      	cmp	r3, #1
 8017780:	d904      	bls.n	801778c <remove_chain+0x26>
 8017782:	69bb      	ldr	r3, [r7, #24]
 8017784:	695b      	ldr	r3, [r3, #20]
 8017786:	68ba      	ldr	r2, [r7, #8]
 8017788:	429a      	cmp	r2, r3
 801778a:	d301      	bcc.n	8017790 <remove_chain+0x2a>
 801778c:	2302      	movs	r3, #2
 801778e:	e04b      	b.n	8017828 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	2b00      	cmp	r3, #0
 8017794:	d00c      	beq.n	80177b0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8017796:	f04f 32ff 	mov.w	r2, #4294967295
 801779a:	6879      	ldr	r1, [r7, #4]
 801779c:	69b8      	ldr	r0, [r7, #24]
 801779e:	f7ff fefb 	bl	8017598 <put_fat>
 80177a2:	4603      	mov	r3, r0
 80177a4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80177a6:	7ffb      	ldrb	r3, [r7, #31]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d001      	beq.n	80177b0 <remove_chain+0x4a>
 80177ac:	7ffb      	ldrb	r3, [r7, #31]
 80177ae:	e03b      	b.n	8017828 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80177b0:	68b9      	ldr	r1, [r7, #8]
 80177b2:	68f8      	ldr	r0, [r7, #12]
 80177b4:	f7ff fe4b 	bl	801744e <get_fat>
 80177b8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80177ba:	697b      	ldr	r3, [r7, #20]
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d031      	beq.n	8017824 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80177c0:	697b      	ldr	r3, [r7, #20]
 80177c2:	2b01      	cmp	r3, #1
 80177c4:	d101      	bne.n	80177ca <remove_chain+0x64>
 80177c6:	2302      	movs	r3, #2
 80177c8:	e02e      	b.n	8017828 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 80177ca:	697b      	ldr	r3, [r7, #20]
 80177cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80177d0:	d101      	bne.n	80177d6 <remove_chain+0x70>
 80177d2:	2301      	movs	r3, #1
 80177d4:	e028      	b.n	8017828 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 80177d6:	2200      	movs	r2, #0
 80177d8:	68b9      	ldr	r1, [r7, #8]
 80177da:	69b8      	ldr	r0, [r7, #24]
 80177dc:	f7ff fedc 	bl	8017598 <put_fat>
 80177e0:	4603      	mov	r3, r0
 80177e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 80177e4:	7ffb      	ldrb	r3, [r7, #31]
 80177e6:	2b00      	cmp	r3, #0
 80177e8:	d001      	beq.n	80177ee <remove_chain+0x88>
 80177ea:	7ffb      	ldrb	r3, [r7, #31]
 80177ec:	e01c      	b.n	8017828 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80177ee:	69bb      	ldr	r3, [r7, #24]
 80177f0:	691a      	ldr	r2, [r3, #16]
 80177f2:	69bb      	ldr	r3, [r7, #24]
 80177f4:	695b      	ldr	r3, [r3, #20]
 80177f6:	3b02      	subs	r3, #2
 80177f8:	429a      	cmp	r2, r3
 80177fa:	d20b      	bcs.n	8017814 <remove_chain+0xae>
			fs->free_clst++;
 80177fc:	69bb      	ldr	r3, [r7, #24]
 80177fe:	691b      	ldr	r3, [r3, #16]
 8017800:	1c5a      	adds	r2, r3, #1
 8017802:	69bb      	ldr	r3, [r7, #24]
 8017804:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8017806:	69bb      	ldr	r3, [r7, #24]
 8017808:	791b      	ldrb	r3, [r3, #4]
 801780a:	f043 0301 	orr.w	r3, r3, #1
 801780e:	b2da      	uxtb	r2, r3
 8017810:	69bb      	ldr	r3, [r7, #24]
 8017812:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8017814:	697b      	ldr	r3, [r7, #20]
 8017816:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8017818:	69bb      	ldr	r3, [r7, #24]
 801781a:	695b      	ldr	r3, [r3, #20]
 801781c:	68ba      	ldr	r2, [r7, #8]
 801781e:	429a      	cmp	r2, r3
 8017820:	d3c6      	bcc.n	80177b0 <remove_chain+0x4a>
 8017822:	e000      	b.n	8017826 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8017824:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8017826:	2300      	movs	r3, #0
}
 8017828:	4618      	mov	r0, r3
 801782a:	3720      	adds	r7, #32
 801782c:	46bd      	mov	sp, r7
 801782e:	bd80      	pop	{r7, pc}

08017830 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8017830:	b580      	push	{r7, lr}
 8017832:	b088      	sub	sp, #32
 8017834:	af00      	add	r7, sp, #0
 8017836:	6078      	str	r0, [r7, #4]
 8017838:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	681b      	ldr	r3, [r3, #0]
 801783e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8017840:	683b      	ldr	r3, [r7, #0]
 8017842:	2b00      	cmp	r3, #0
 8017844:	d10d      	bne.n	8017862 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8017846:	693b      	ldr	r3, [r7, #16]
 8017848:	68db      	ldr	r3, [r3, #12]
 801784a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 801784c:	69bb      	ldr	r3, [r7, #24]
 801784e:	2b00      	cmp	r3, #0
 8017850:	d004      	beq.n	801785c <create_chain+0x2c>
 8017852:	693b      	ldr	r3, [r7, #16]
 8017854:	695b      	ldr	r3, [r3, #20]
 8017856:	69ba      	ldr	r2, [r7, #24]
 8017858:	429a      	cmp	r2, r3
 801785a:	d31b      	bcc.n	8017894 <create_chain+0x64>
 801785c:	2301      	movs	r3, #1
 801785e:	61bb      	str	r3, [r7, #24]
 8017860:	e018      	b.n	8017894 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8017862:	6839      	ldr	r1, [r7, #0]
 8017864:	6878      	ldr	r0, [r7, #4]
 8017866:	f7ff fdf2 	bl	801744e <get_fat>
 801786a:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 801786c:	68fb      	ldr	r3, [r7, #12]
 801786e:	2b01      	cmp	r3, #1
 8017870:	d801      	bhi.n	8017876 <create_chain+0x46>
 8017872:	2301      	movs	r3, #1
 8017874:	e070      	b.n	8017958 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8017876:	68fb      	ldr	r3, [r7, #12]
 8017878:	f1b3 3fff 	cmp.w	r3, #4294967295
 801787c:	d101      	bne.n	8017882 <create_chain+0x52>
 801787e:	68fb      	ldr	r3, [r7, #12]
 8017880:	e06a      	b.n	8017958 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8017882:	693b      	ldr	r3, [r7, #16]
 8017884:	695b      	ldr	r3, [r3, #20]
 8017886:	68fa      	ldr	r2, [r7, #12]
 8017888:	429a      	cmp	r2, r3
 801788a:	d201      	bcs.n	8017890 <create_chain+0x60>
 801788c:	68fb      	ldr	r3, [r7, #12]
 801788e:	e063      	b.n	8017958 <create_chain+0x128>
		scl = clst;
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8017894:	69bb      	ldr	r3, [r7, #24]
 8017896:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8017898:	69fb      	ldr	r3, [r7, #28]
 801789a:	3301      	adds	r3, #1
 801789c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 801789e:	693b      	ldr	r3, [r7, #16]
 80178a0:	695b      	ldr	r3, [r3, #20]
 80178a2:	69fa      	ldr	r2, [r7, #28]
 80178a4:	429a      	cmp	r2, r3
 80178a6:	d307      	bcc.n	80178b8 <create_chain+0x88>
				ncl = 2;
 80178a8:	2302      	movs	r3, #2
 80178aa:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80178ac:	69fa      	ldr	r2, [r7, #28]
 80178ae:	69bb      	ldr	r3, [r7, #24]
 80178b0:	429a      	cmp	r2, r3
 80178b2:	d901      	bls.n	80178b8 <create_chain+0x88>
 80178b4:	2300      	movs	r3, #0
 80178b6:	e04f      	b.n	8017958 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80178b8:	69f9      	ldr	r1, [r7, #28]
 80178ba:	6878      	ldr	r0, [r7, #4]
 80178bc:	f7ff fdc7 	bl	801744e <get_fat>
 80178c0:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80178c2:	68fb      	ldr	r3, [r7, #12]
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d00e      	beq.n	80178e6 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 80178c8:	68fb      	ldr	r3, [r7, #12]
 80178ca:	2b01      	cmp	r3, #1
 80178cc:	d003      	beq.n	80178d6 <create_chain+0xa6>
 80178ce:	68fb      	ldr	r3, [r7, #12]
 80178d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80178d4:	d101      	bne.n	80178da <create_chain+0xaa>
 80178d6:	68fb      	ldr	r3, [r7, #12]
 80178d8:	e03e      	b.n	8017958 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 80178da:	69fa      	ldr	r2, [r7, #28]
 80178dc:	69bb      	ldr	r3, [r7, #24]
 80178de:	429a      	cmp	r2, r3
 80178e0:	d1da      	bne.n	8017898 <create_chain+0x68>
 80178e2:	2300      	movs	r3, #0
 80178e4:	e038      	b.n	8017958 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 80178e6:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 80178e8:	f04f 32ff 	mov.w	r2, #4294967295
 80178ec:	69f9      	ldr	r1, [r7, #28]
 80178ee:	6938      	ldr	r0, [r7, #16]
 80178f0:	f7ff fe52 	bl	8017598 <put_fat>
 80178f4:	4603      	mov	r3, r0
 80178f6:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80178f8:	7dfb      	ldrb	r3, [r7, #23]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d109      	bne.n	8017912 <create_chain+0xe2>
 80178fe:	683b      	ldr	r3, [r7, #0]
 8017900:	2b00      	cmp	r3, #0
 8017902:	d006      	beq.n	8017912 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8017904:	69fa      	ldr	r2, [r7, #28]
 8017906:	6839      	ldr	r1, [r7, #0]
 8017908:	6938      	ldr	r0, [r7, #16]
 801790a:	f7ff fe45 	bl	8017598 <put_fat>
 801790e:	4603      	mov	r3, r0
 8017910:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8017912:	7dfb      	ldrb	r3, [r7, #23]
 8017914:	2b00      	cmp	r3, #0
 8017916:	d116      	bne.n	8017946 <create_chain+0x116>
		fs->last_clst = ncl;
 8017918:	693b      	ldr	r3, [r7, #16]
 801791a:	69fa      	ldr	r2, [r7, #28]
 801791c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 801791e:	693b      	ldr	r3, [r7, #16]
 8017920:	691a      	ldr	r2, [r3, #16]
 8017922:	693b      	ldr	r3, [r7, #16]
 8017924:	695b      	ldr	r3, [r3, #20]
 8017926:	3b02      	subs	r3, #2
 8017928:	429a      	cmp	r2, r3
 801792a:	d804      	bhi.n	8017936 <create_chain+0x106>
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	691b      	ldr	r3, [r3, #16]
 8017930:	1e5a      	subs	r2, r3, #1
 8017932:	693b      	ldr	r3, [r7, #16]
 8017934:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8017936:	693b      	ldr	r3, [r7, #16]
 8017938:	791b      	ldrb	r3, [r3, #4]
 801793a:	f043 0301 	orr.w	r3, r3, #1
 801793e:	b2da      	uxtb	r2, r3
 8017940:	693b      	ldr	r3, [r7, #16]
 8017942:	711a      	strb	r2, [r3, #4]
 8017944:	e007      	b.n	8017956 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8017946:	7dfb      	ldrb	r3, [r7, #23]
 8017948:	2b01      	cmp	r3, #1
 801794a:	d102      	bne.n	8017952 <create_chain+0x122>
 801794c:	f04f 33ff 	mov.w	r3, #4294967295
 8017950:	e000      	b.n	8017954 <create_chain+0x124>
 8017952:	2301      	movs	r3, #1
 8017954:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8017956:	69fb      	ldr	r3, [r7, #28]
}
 8017958:	4618      	mov	r0, r3
 801795a:	3720      	adds	r7, #32
 801795c:	46bd      	mov	sp, r7
 801795e:	bd80      	pop	{r7, pc}

08017960 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8017960:	b480      	push	{r7}
 8017962:	b087      	sub	sp, #28
 8017964:	af00      	add	r7, sp, #0
 8017966:	6078      	str	r0, [r7, #4]
 8017968:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 801796a:	687b      	ldr	r3, [r7, #4]
 801796c:	681b      	ldr	r3, [r3, #0]
 801796e:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8017970:	687b      	ldr	r3, [r7, #4]
 8017972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017974:	3304      	adds	r3, #4
 8017976:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8017978:	683b      	ldr	r3, [r7, #0]
 801797a:	0a5b      	lsrs	r3, r3, #9
 801797c:	68fa      	ldr	r2, [r7, #12]
 801797e:	8952      	ldrh	r2, [r2, #10]
 8017980:	fbb3 f3f2 	udiv	r3, r3, r2
 8017984:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8017986:	693b      	ldr	r3, [r7, #16]
 8017988:	1d1a      	adds	r2, r3, #4
 801798a:	613a      	str	r2, [r7, #16]
 801798c:	681b      	ldr	r3, [r3, #0]
 801798e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8017990:	68bb      	ldr	r3, [r7, #8]
 8017992:	2b00      	cmp	r3, #0
 8017994:	d101      	bne.n	801799a <clmt_clust+0x3a>
 8017996:	2300      	movs	r3, #0
 8017998:	e010      	b.n	80179bc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 801799a:	697a      	ldr	r2, [r7, #20]
 801799c:	68bb      	ldr	r3, [r7, #8]
 801799e:	429a      	cmp	r2, r3
 80179a0:	d307      	bcc.n	80179b2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80179a2:	697a      	ldr	r2, [r7, #20]
 80179a4:	68bb      	ldr	r3, [r7, #8]
 80179a6:	1ad3      	subs	r3, r2, r3
 80179a8:	617b      	str	r3, [r7, #20]
 80179aa:	693b      	ldr	r3, [r7, #16]
 80179ac:	3304      	adds	r3, #4
 80179ae:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80179b0:	e7e9      	b.n	8017986 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80179b2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80179b4:	693b      	ldr	r3, [r7, #16]
 80179b6:	681a      	ldr	r2, [r3, #0]
 80179b8:	697b      	ldr	r3, [r7, #20]
 80179ba:	4413      	add	r3, r2
}
 80179bc:	4618      	mov	r0, r3
 80179be:	371c      	adds	r7, #28
 80179c0:	46bd      	mov	sp, r7
 80179c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80179c6:	4770      	bx	lr

080179c8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80179c8:	b580      	push	{r7, lr}
 80179ca:	b086      	sub	sp, #24
 80179cc:	af00      	add	r7, sp, #0
 80179ce:	6078      	str	r0, [r7, #4]
 80179d0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	681b      	ldr	r3, [r3, #0]
 80179d6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80179d8:	683b      	ldr	r3, [r7, #0]
 80179da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80179de:	d204      	bcs.n	80179ea <dir_sdi+0x22>
 80179e0:	683b      	ldr	r3, [r7, #0]
 80179e2:	f003 031f 	and.w	r3, r3, #31
 80179e6:	2b00      	cmp	r3, #0
 80179e8:	d001      	beq.n	80179ee <dir_sdi+0x26>
		return FR_INT_ERR;
 80179ea:	2302      	movs	r3, #2
 80179ec:	e063      	b.n	8017ab6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	683a      	ldr	r2, [r7, #0]
 80179f2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80179f4:	687b      	ldr	r3, [r7, #4]
 80179f6:	689b      	ldr	r3, [r3, #8]
 80179f8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80179fa:	697b      	ldr	r3, [r7, #20]
 80179fc:	2b00      	cmp	r3, #0
 80179fe:	d106      	bne.n	8017a0e <dir_sdi+0x46>
 8017a00:	693b      	ldr	r3, [r7, #16]
 8017a02:	781b      	ldrb	r3, [r3, #0]
 8017a04:	2b02      	cmp	r3, #2
 8017a06:	d902      	bls.n	8017a0e <dir_sdi+0x46>
		clst = fs->dirbase;
 8017a08:	693b      	ldr	r3, [r7, #16]
 8017a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017a0c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8017a0e:	697b      	ldr	r3, [r7, #20]
 8017a10:	2b00      	cmp	r3, #0
 8017a12:	d10c      	bne.n	8017a2e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8017a14:	683b      	ldr	r3, [r7, #0]
 8017a16:	095b      	lsrs	r3, r3, #5
 8017a18:	693a      	ldr	r2, [r7, #16]
 8017a1a:	8912      	ldrh	r2, [r2, #8]
 8017a1c:	4293      	cmp	r3, r2
 8017a1e:	d301      	bcc.n	8017a24 <dir_sdi+0x5c>
 8017a20:	2302      	movs	r3, #2
 8017a22:	e048      	b.n	8017ab6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8017a24:	693b      	ldr	r3, [r7, #16]
 8017a26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	61da      	str	r2, [r3, #28]
 8017a2c:	e029      	b.n	8017a82 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8017a2e:	693b      	ldr	r3, [r7, #16]
 8017a30:	895b      	ldrh	r3, [r3, #10]
 8017a32:	025b      	lsls	r3, r3, #9
 8017a34:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017a36:	e019      	b.n	8017a6c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8017a38:	687b      	ldr	r3, [r7, #4]
 8017a3a:	6979      	ldr	r1, [r7, #20]
 8017a3c:	4618      	mov	r0, r3
 8017a3e:	f7ff fd06 	bl	801744e <get_fat>
 8017a42:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017a44:	697b      	ldr	r3, [r7, #20]
 8017a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017a4a:	d101      	bne.n	8017a50 <dir_sdi+0x88>
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	e032      	b.n	8017ab6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8017a50:	697b      	ldr	r3, [r7, #20]
 8017a52:	2b01      	cmp	r3, #1
 8017a54:	d904      	bls.n	8017a60 <dir_sdi+0x98>
 8017a56:	693b      	ldr	r3, [r7, #16]
 8017a58:	695b      	ldr	r3, [r3, #20]
 8017a5a:	697a      	ldr	r2, [r7, #20]
 8017a5c:	429a      	cmp	r2, r3
 8017a5e:	d301      	bcc.n	8017a64 <dir_sdi+0x9c>
 8017a60:	2302      	movs	r3, #2
 8017a62:	e028      	b.n	8017ab6 <dir_sdi+0xee>
			ofs -= csz;
 8017a64:	683a      	ldr	r2, [r7, #0]
 8017a66:	68fb      	ldr	r3, [r7, #12]
 8017a68:	1ad3      	subs	r3, r2, r3
 8017a6a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8017a6c:	683a      	ldr	r2, [r7, #0]
 8017a6e:	68fb      	ldr	r3, [r7, #12]
 8017a70:	429a      	cmp	r2, r3
 8017a72:	d2e1      	bcs.n	8017a38 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 8017a74:	6979      	ldr	r1, [r7, #20]
 8017a76:	6938      	ldr	r0, [r7, #16]
 8017a78:	f7ff fcca 	bl	8017410 <clust2sect>
 8017a7c:	4602      	mov	r2, r0
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	697a      	ldr	r2, [r7, #20]
 8017a86:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8017a88:	687b      	ldr	r3, [r7, #4]
 8017a8a:	69db      	ldr	r3, [r3, #28]
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d101      	bne.n	8017a94 <dir_sdi+0xcc>
 8017a90:	2302      	movs	r3, #2
 8017a92:	e010      	b.n	8017ab6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	69da      	ldr	r2, [r3, #28]
 8017a98:	683b      	ldr	r3, [r7, #0]
 8017a9a:	0a5b      	lsrs	r3, r3, #9
 8017a9c:	441a      	add	r2, r3
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8017aa2:	693b      	ldr	r3, [r7, #16]
 8017aa4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017aa8:	683b      	ldr	r3, [r7, #0]
 8017aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017aae:	441a      	add	r2, r3
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017ab4:	2300      	movs	r3, #0
}
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	3718      	adds	r7, #24
 8017aba:	46bd      	mov	sp, r7
 8017abc:	bd80      	pop	{r7, pc}

08017abe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8017abe:	b580      	push	{r7, lr}
 8017ac0:	b086      	sub	sp, #24
 8017ac2:	af00      	add	r7, sp, #0
 8017ac4:	6078      	str	r0, [r7, #4]
 8017ac6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8017ac8:	687b      	ldr	r3, [r7, #4]
 8017aca:	681b      	ldr	r3, [r3, #0]
 8017acc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8017ace:	687b      	ldr	r3, [r7, #4]
 8017ad0:	695b      	ldr	r3, [r3, #20]
 8017ad2:	3320      	adds	r3, #32
 8017ad4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8017ad6:	687b      	ldr	r3, [r7, #4]
 8017ad8:	69db      	ldr	r3, [r3, #28]
 8017ada:	2b00      	cmp	r3, #0
 8017adc:	d003      	beq.n	8017ae6 <dir_next+0x28>
 8017ade:	68bb      	ldr	r3, [r7, #8]
 8017ae0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8017ae4:	d301      	bcc.n	8017aea <dir_next+0x2c>
 8017ae6:	2304      	movs	r3, #4
 8017ae8:	e0aa      	b.n	8017c40 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8017aea:	68bb      	ldr	r3, [r7, #8]
 8017aec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017af0:	2b00      	cmp	r3, #0
 8017af2:	f040 8098 	bne.w	8017c26 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8017af6:	687b      	ldr	r3, [r7, #4]
 8017af8:	69db      	ldr	r3, [r3, #28]
 8017afa:	1c5a      	adds	r2, r3, #1
 8017afc:	687b      	ldr	r3, [r7, #4]
 8017afe:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	699b      	ldr	r3, [r3, #24]
 8017b04:	2b00      	cmp	r3, #0
 8017b06:	d10b      	bne.n	8017b20 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8017b08:	68bb      	ldr	r3, [r7, #8]
 8017b0a:	095b      	lsrs	r3, r3, #5
 8017b0c:	68fa      	ldr	r2, [r7, #12]
 8017b0e:	8912      	ldrh	r2, [r2, #8]
 8017b10:	4293      	cmp	r3, r2
 8017b12:	f0c0 8088 	bcc.w	8017c26 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	2200      	movs	r2, #0
 8017b1a:	61da      	str	r2, [r3, #28]
 8017b1c:	2304      	movs	r3, #4
 8017b1e:	e08f      	b.n	8017c40 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	0a5b      	lsrs	r3, r3, #9
 8017b24:	68fa      	ldr	r2, [r7, #12]
 8017b26:	8952      	ldrh	r2, [r2, #10]
 8017b28:	3a01      	subs	r2, #1
 8017b2a:	4013      	ands	r3, r2
 8017b2c:	2b00      	cmp	r3, #0
 8017b2e:	d17a      	bne.n	8017c26 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8017b30:	687a      	ldr	r2, [r7, #4]
 8017b32:	687b      	ldr	r3, [r7, #4]
 8017b34:	699b      	ldr	r3, [r3, #24]
 8017b36:	4619      	mov	r1, r3
 8017b38:	4610      	mov	r0, r2
 8017b3a:	f7ff fc88 	bl	801744e <get_fat>
 8017b3e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8017b40:	697b      	ldr	r3, [r7, #20]
 8017b42:	2b01      	cmp	r3, #1
 8017b44:	d801      	bhi.n	8017b4a <dir_next+0x8c>
 8017b46:	2302      	movs	r3, #2
 8017b48:	e07a      	b.n	8017c40 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8017b4a:	697b      	ldr	r3, [r7, #20]
 8017b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b50:	d101      	bne.n	8017b56 <dir_next+0x98>
 8017b52:	2301      	movs	r3, #1
 8017b54:	e074      	b.n	8017c40 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	695b      	ldr	r3, [r3, #20]
 8017b5a:	697a      	ldr	r2, [r7, #20]
 8017b5c:	429a      	cmp	r2, r3
 8017b5e:	d358      	bcc.n	8017c12 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8017b60:	683b      	ldr	r3, [r7, #0]
 8017b62:	2b00      	cmp	r3, #0
 8017b64:	d104      	bne.n	8017b70 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 8017b66:	687b      	ldr	r3, [r7, #4]
 8017b68:	2200      	movs	r2, #0
 8017b6a:	61da      	str	r2, [r3, #28]
 8017b6c:	2304      	movs	r3, #4
 8017b6e:	e067      	b.n	8017c40 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8017b70:	687a      	ldr	r2, [r7, #4]
 8017b72:	687b      	ldr	r3, [r7, #4]
 8017b74:	699b      	ldr	r3, [r3, #24]
 8017b76:	4619      	mov	r1, r3
 8017b78:	4610      	mov	r0, r2
 8017b7a:	f7ff fe59 	bl	8017830 <create_chain>
 8017b7e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8017b80:	697b      	ldr	r3, [r7, #20]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d101      	bne.n	8017b8a <dir_next+0xcc>
 8017b86:	2307      	movs	r3, #7
 8017b88:	e05a      	b.n	8017c40 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8017b8a:	697b      	ldr	r3, [r7, #20]
 8017b8c:	2b01      	cmp	r3, #1
 8017b8e:	d101      	bne.n	8017b94 <dir_next+0xd6>
 8017b90:	2302      	movs	r3, #2
 8017b92:	e055      	b.n	8017c40 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8017b94:	697b      	ldr	r3, [r7, #20]
 8017b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017b9a:	d101      	bne.n	8017ba0 <dir_next+0xe2>
 8017b9c:	2301      	movs	r3, #1
 8017b9e:	e04f      	b.n	8017c40 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8017ba0:	68f8      	ldr	r0, [r7, #12]
 8017ba2:	f7ff fb55 	bl	8017250 <sync_window>
 8017ba6:	4603      	mov	r3, r0
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	d001      	beq.n	8017bb0 <dir_next+0xf2>
 8017bac:	2301      	movs	r3, #1
 8017bae:	e047      	b.n	8017c40 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8017bb0:	68fb      	ldr	r3, [r7, #12]
 8017bb2:	3330      	adds	r3, #48	; 0x30
 8017bb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017bb8:	2100      	movs	r1, #0
 8017bba:	4618      	mov	r0, r3
 8017bbc:	f7ff f97f 	bl	8016ebe <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017bc0:	2300      	movs	r3, #0
 8017bc2:	613b      	str	r3, [r7, #16]
 8017bc4:	6979      	ldr	r1, [r7, #20]
 8017bc6:	68f8      	ldr	r0, [r7, #12]
 8017bc8:	f7ff fc22 	bl	8017410 <clust2sect>
 8017bcc:	4602      	mov	r2, r0
 8017bce:	68fb      	ldr	r3, [r7, #12]
 8017bd0:	62da      	str	r2, [r3, #44]	; 0x2c
 8017bd2:	e012      	b.n	8017bfa <dir_next+0x13c>
						fs->wflag = 1;
 8017bd4:	68fb      	ldr	r3, [r7, #12]
 8017bd6:	2201      	movs	r2, #1
 8017bd8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8017bda:	68f8      	ldr	r0, [r7, #12]
 8017bdc:	f7ff fb38 	bl	8017250 <sync_window>
 8017be0:	4603      	mov	r3, r0
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d001      	beq.n	8017bea <dir_next+0x12c>
 8017be6:	2301      	movs	r3, #1
 8017be8:	e02a      	b.n	8017c40 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8017bea:	693b      	ldr	r3, [r7, #16]
 8017bec:	3301      	adds	r3, #1
 8017bee:	613b      	str	r3, [r7, #16]
 8017bf0:	68fb      	ldr	r3, [r7, #12]
 8017bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8017bf4:	1c5a      	adds	r2, r3, #1
 8017bf6:	68fb      	ldr	r3, [r7, #12]
 8017bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	895b      	ldrh	r3, [r3, #10]
 8017bfe:	461a      	mov	r2, r3
 8017c00:	693b      	ldr	r3, [r7, #16]
 8017c02:	4293      	cmp	r3, r2
 8017c04:	d3e6      	bcc.n	8017bd4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8017c06:	68fb      	ldr	r3, [r7, #12]
 8017c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	1ad2      	subs	r2, r2, r3
 8017c0e:	68fb      	ldr	r3, [r7, #12]
 8017c10:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8017c12:	687b      	ldr	r3, [r7, #4]
 8017c14:	697a      	ldr	r2, [r7, #20]
 8017c16:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8017c18:	6979      	ldr	r1, [r7, #20]
 8017c1a:	68f8      	ldr	r0, [r7, #12]
 8017c1c:	f7ff fbf8 	bl	8017410 <clust2sect>
 8017c20:	4602      	mov	r2, r0
 8017c22:	687b      	ldr	r3, [r7, #4]
 8017c24:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8017c26:	687b      	ldr	r3, [r7, #4]
 8017c28:	68ba      	ldr	r2, [r7, #8]
 8017c2a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8017c2c:	68fb      	ldr	r3, [r7, #12]
 8017c2e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8017c32:	68bb      	ldr	r3, [r7, #8]
 8017c34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8017c38:	441a      	add	r2, r3
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8017c3e:	2300      	movs	r3, #0
}
 8017c40:	4618      	mov	r0, r3
 8017c42:	3718      	adds	r7, #24
 8017c44:	46bd      	mov	sp, r7
 8017c46:	bd80      	pop	{r7, pc}

08017c48 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8017c48:	b580      	push	{r7, lr}
 8017c4a:	b086      	sub	sp, #24
 8017c4c:	af00      	add	r7, sp, #0
 8017c4e:	6078      	str	r0, [r7, #4]
 8017c50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8017c52:	687b      	ldr	r3, [r7, #4]
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8017c58:	2100      	movs	r1, #0
 8017c5a:	6878      	ldr	r0, [r7, #4]
 8017c5c:	f7ff feb4 	bl	80179c8 <dir_sdi>
 8017c60:	4603      	mov	r3, r0
 8017c62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8017c64:	7dfb      	ldrb	r3, [r7, #23]
 8017c66:	2b00      	cmp	r3, #0
 8017c68:	d12b      	bne.n	8017cc2 <dir_alloc+0x7a>
		n = 0;
 8017c6a:	2300      	movs	r3, #0
 8017c6c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8017c6e:	687b      	ldr	r3, [r7, #4]
 8017c70:	69db      	ldr	r3, [r3, #28]
 8017c72:	4619      	mov	r1, r3
 8017c74:	68f8      	ldr	r0, [r7, #12]
 8017c76:	f7ff fb2f 	bl	80172d8 <move_window>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017c7e:	7dfb      	ldrb	r3, [r7, #23]
 8017c80:	2b00      	cmp	r3, #0
 8017c82:	d11d      	bne.n	8017cc0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8017c84:	687b      	ldr	r3, [r7, #4]
 8017c86:	6a1b      	ldr	r3, [r3, #32]
 8017c88:	781b      	ldrb	r3, [r3, #0]
 8017c8a:	2be5      	cmp	r3, #229	; 0xe5
 8017c8c:	d004      	beq.n	8017c98 <dir_alloc+0x50>
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	6a1b      	ldr	r3, [r3, #32]
 8017c92:	781b      	ldrb	r3, [r3, #0]
 8017c94:	2b00      	cmp	r3, #0
 8017c96:	d107      	bne.n	8017ca8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8017c98:	693b      	ldr	r3, [r7, #16]
 8017c9a:	3301      	adds	r3, #1
 8017c9c:	613b      	str	r3, [r7, #16]
 8017c9e:	693a      	ldr	r2, [r7, #16]
 8017ca0:	683b      	ldr	r3, [r7, #0]
 8017ca2:	429a      	cmp	r2, r3
 8017ca4:	d102      	bne.n	8017cac <dir_alloc+0x64>
 8017ca6:	e00c      	b.n	8017cc2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8017ca8:	2300      	movs	r3, #0
 8017caa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8017cac:	2101      	movs	r1, #1
 8017cae:	6878      	ldr	r0, [r7, #4]
 8017cb0:	f7ff ff05 	bl	8017abe <dir_next>
 8017cb4:	4603      	mov	r3, r0
 8017cb6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8017cb8:	7dfb      	ldrb	r3, [r7, #23]
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d0d7      	beq.n	8017c6e <dir_alloc+0x26>
 8017cbe:	e000      	b.n	8017cc2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8017cc0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8017cc2:	7dfb      	ldrb	r3, [r7, #23]
 8017cc4:	2b04      	cmp	r3, #4
 8017cc6:	d101      	bne.n	8017ccc <dir_alloc+0x84>
 8017cc8:	2307      	movs	r3, #7
 8017cca:	75fb      	strb	r3, [r7, #23]
	return res;
 8017ccc:	7dfb      	ldrb	r3, [r7, #23]
}
 8017cce:	4618      	mov	r0, r3
 8017cd0:	3718      	adds	r7, #24
 8017cd2:	46bd      	mov	sp, r7
 8017cd4:	bd80      	pop	{r7, pc}

08017cd6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8017cd6:	b580      	push	{r7, lr}
 8017cd8:	b084      	sub	sp, #16
 8017cda:	af00      	add	r7, sp, #0
 8017cdc:	6078      	str	r0, [r7, #4]
 8017cde:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8017ce0:	683b      	ldr	r3, [r7, #0]
 8017ce2:	331a      	adds	r3, #26
 8017ce4:	4618      	mov	r0, r3
 8017ce6:	f7ff f847 	bl	8016d78 <ld_word>
 8017cea:	4603      	mov	r3, r0
 8017cec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	781b      	ldrb	r3, [r3, #0]
 8017cf2:	2b03      	cmp	r3, #3
 8017cf4:	d109      	bne.n	8017d0a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8017cf6:	683b      	ldr	r3, [r7, #0]
 8017cf8:	3314      	adds	r3, #20
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff f83c 	bl	8016d78 <ld_word>
 8017d00:	4603      	mov	r3, r0
 8017d02:	041b      	lsls	r3, r3, #16
 8017d04:	68fa      	ldr	r2, [r7, #12]
 8017d06:	4313      	orrs	r3, r2
 8017d08:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8017d0a:	68fb      	ldr	r3, [r7, #12]
}
 8017d0c:	4618      	mov	r0, r3
 8017d0e:	3710      	adds	r7, #16
 8017d10:	46bd      	mov	sp, r7
 8017d12:	bd80      	pop	{r7, pc}

08017d14 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8017d14:	b580      	push	{r7, lr}
 8017d16:	b084      	sub	sp, #16
 8017d18:	af00      	add	r7, sp, #0
 8017d1a:	60f8      	str	r0, [r7, #12]
 8017d1c:	60b9      	str	r1, [r7, #8]
 8017d1e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8017d20:	68bb      	ldr	r3, [r7, #8]
 8017d22:	331a      	adds	r3, #26
 8017d24:	687a      	ldr	r2, [r7, #4]
 8017d26:	b292      	uxth	r2, r2
 8017d28:	4611      	mov	r1, r2
 8017d2a:	4618      	mov	r0, r3
 8017d2c:	f7ff f85f 	bl	8016dee <st_word>
	if (fs->fs_type == FS_FAT32) {
 8017d30:	68fb      	ldr	r3, [r7, #12]
 8017d32:	781b      	ldrb	r3, [r3, #0]
 8017d34:	2b03      	cmp	r3, #3
 8017d36:	d109      	bne.n	8017d4c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8017d38:	68bb      	ldr	r3, [r7, #8]
 8017d3a:	f103 0214 	add.w	r2, r3, #20
 8017d3e:	687b      	ldr	r3, [r7, #4]
 8017d40:	0c1b      	lsrs	r3, r3, #16
 8017d42:	b29b      	uxth	r3, r3
 8017d44:	4619      	mov	r1, r3
 8017d46:	4610      	mov	r0, r2
 8017d48:	f7ff f851 	bl	8016dee <st_word>
	}
}
 8017d4c:	bf00      	nop
 8017d4e:	3710      	adds	r7, #16
 8017d50:	46bd      	mov	sp, r7
 8017d52:	bd80      	pop	{r7, pc}

08017d54 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8017d54:	b580      	push	{r7, lr}
 8017d56:	b086      	sub	sp, #24
 8017d58:	af00      	add	r7, sp, #0
 8017d5a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017d5c:	687b      	ldr	r3, [r7, #4]
 8017d5e:	681b      	ldr	r3, [r3, #0]
 8017d60:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8017d62:	2100      	movs	r1, #0
 8017d64:	6878      	ldr	r0, [r7, #4]
 8017d66:	f7ff fe2f 	bl	80179c8 <dir_sdi>
 8017d6a:	4603      	mov	r3, r0
 8017d6c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8017d6e:	7dfb      	ldrb	r3, [r7, #23]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d001      	beq.n	8017d78 <dir_find+0x24>
 8017d74:	7dfb      	ldrb	r3, [r7, #23]
 8017d76:	e03e      	b.n	8017df6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	69db      	ldr	r3, [r3, #28]
 8017d7c:	4619      	mov	r1, r3
 8017d7e:	6938      	ldr	r0, [r7, #16]
 8017d80:	f7ff faaa 	bl	80172d8 <move_window>
 8017d84:	4603      	mov	r3, r0
 8017d86:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8017d88:	7dfb      	ldrb	r3, [r7, #23]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	d12f      	bne.n	8017dee <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	6a1b      	ldr	r3, [r3, #32]
 8017d92:	781b      	ldrb	r3, [r3, #0]
 8017d94:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8017d96:	7bfb      	ldrb	r3, [r7, #15]
 8017d98:	2b00      	cmp	r3, #0
 8017d9a:	d102      	bne.n	8017da2 <dir_find+0x4e>
 8017d9c:	2304      	movs	r3, #4
 8017d9e:	75fb      	strb	r3, [r7, #23]
 8017da0:	e028      	b.n	8017df4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	6a1b      	ldr	r3, [r3, #32]
 8017da6:	330b      	adds	r3, #11
 8017da8:	781b      	ldrb	r3, [r3, #0]
 8017daa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8017dae:	b2da      	uxtb	r2, r3
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6a1b      	ldr	r3, [r3, #32]
 8017db8:	330b      	adds	r3, #11
 8017dba:	781b      	ldrb	r3, [r3, #0]
 8017dbc:	f003 0308 	and.w	r3, r3, #8
 8017dc0:	2b00      	cmp	r3, #0
 8017dc2:	d10a      	bne.n	8017dda <dir_find+0x86>
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	6a18      	ldr	r0, [r3, #32]
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	3324      	adds	r3, #36	; 0x24
 8017dcc:	220b      	movs	r2, #11
 8017dce:	4619      	mov	r1, r3
 8017dd0:	f7ff f88f 	bl	8016ef2 <mem_cmp>
 8017dd4:	4603      	mov	r3, r0
 8017dd6:	2b00      	cmp	r3, #0
 8017dd8:	d00b      	beq.n	8017df2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8017dda:	2100      	movs	r1, #0
 8017ddc:	6878      	ldr	r0, [r7, #4]
 8017dde:	f7ff fe6e 	bl	8017abe <dir_next>
 8017de2:	4603      	mov	r3, r0
 8017de4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8017de6:	7dfb      	ldrb	r3, [r7, #23]
 8017de8:	2b00      	cmp	r3, #0
 8017dea:	d0c5      	beq.n	8017d78 <dir_find+0x24>
 8017dec:	e002      	b.n	8017df4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8017dee:	bf00      	nop
 8017df0:	e000      	b.n	8017df4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8017df2:	bf00      	nop

	return res;
 8017df4:	7dfb      	ldrb	r3, [r7, #23]
}
 8017df6:	4618      	mov	r0, r3
 8017df8:	3718      	adds	r7, #24
 8017dfa:	46bd      	mov	sp, r7
 8017dfc:	bd80      	pop	{r7, pc}

08017dfe <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8017dfe:	b580      	push	{r7, lr}
 8017e00:	b084      	sub	sp, #16
 8017e02:	af00      	add	r7, sp, #0
 8017e04:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	681b      	ldr	r3, [r3, #0]
 8017e0a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8017e0c:	2101      	movs	r1, #1
 8017e0e:	6878      	ldr	r0, [r7, #4]
 8017e10:	f7ff ff1a 	bl	8017c48 <dir_alloc>
 8017e14:	4603      	mov	r3, r0
 8017e16:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8017e18:	7bfb      	ldrb	r3, [r7, #15]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d11c      	bne.n	8017e58 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8017e1e:	687b      	ldr	r3, [r7, #4]
 8017e20:	69db      	ldr	r3, [r3, #28]
 8017e22:	4619      	mov	r1, r3
 8017e24:	68b8      	ldr	r0, [r7, #8]
 8017e26:	f7ff fa57 	bl	80172d8 <move_window>
 8017e2a:	4603      	mov	r3, r0
 8017e2c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8017e2e:	7bfb      	ldrb	r3, [r7, #15]
 8017e30:	2b00      	cmp	r3, #0
 8017e32:	d111      	bne.n	8017e58 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8017e34:	687b      	ldr	r3, [r7, #4]
 8017e36:	6a1b      	ldr	r3, [r3, #32]
 8017e38:	2220      	movs	r2, #32
 8017e3a:	2100      	movs	r1, #0
 8017e3c:	4618      	mov	r0, r3
 8017e3e:	f7ff f83e 	bl	8016ebe <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8017e42:	687b      	ldr	r3, [r7, #4]
 8017e44:	6a18      	ldr	r0, [r3, #32]
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	3324      	adds	r3, #36	; 0x24
 8017e4a:	220b      	movs	r2, #11
 8017e4c:	4619      	mov	r1, r3
 8017e4e:	f7ff f815 	bl	8016e7c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8017e52:	68bb      	ldr	r3, [r7, #8]
 8017e54:	2201      	movs	r2, #1
 8017e56:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8017e58:	7bfb      	ldrb	r3, [r7, #15]
}
 8017e5a:	4618      	mov	r0, r3
 8017e5c:	3710      	adds	r7, #16
 8017e5e:	46bd      	mov	sp, r7
 8017e60:	bd80      	pop	{r7, pc}
	...

08017e64 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8017e64:	b580      	push	{r7, lr}
 8017e66:	b088      	sub	sp, #32
 8017e68:	af00      	add	r7, sp, #0
 8017e6a:	6078      	str	r0, [r7, #4]
 8017e6c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8017e6e:	683b      	ldr	r3, [r7, #0]
 8017e70:	681b      	ldr	r3, [r3, #0]
 8017e72:	60fb      	str	r3, [r7, #12]
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	3324      	adds	r3, #36	; 0x24
 8017e78:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8017e7a:	220b      	movs	r2, #11
 8017e7c:	2120      	movs	r1, #32
 8017e7e:	68b8      	ldr	r0, [r7, #8]
 8017e80:	f7ff f81d 	bl	8016ebe <mem_set>
	si = i = 0; ni = 8;
 8017e84:	2300      	movs	r3, #0
 8017e86:	613b      	str	r3, [r7, #16]
 8017e88:	693b      	ldr	r3, [r7, #16]
 8017e8a:	617b      	str	r3, [r7, #20]
 8017e8c:	2308      	movs	r3, #8
 8017e8e:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8017e90:	697b      	ldr	r3, [r7, #20]
 8017e92:	1c5a      	adds	r2, r3, #1
 8017e94:	617a      	str	r2, [r7, #20]
 8017e96:	68fa      	ldr	r2, [r7, #12]
 8017e98:	4413      	add	r3, r2
 8017e9a:	781b      	ldrb	r3, [r3, #0]
 8017e9c:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017e9e:	7ffb      	ldrb	r3, [r7, #31]
 8017ea0:	2b20      	cmp	r3, #32
 8017ea2:	d94e      	bls.n	8017f42 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8017ea4:	7ffb      	ldrb	r3, [r7, #31]
 8017ea6:	2b2f      	cmp	r3, #47	; 0x2f
 8017ea8:	d006      	beq.n	8017eb8 <create_name+0x54>
 8017eaa:	7ffb      	ldrb	r3, [r7, #31]
 8017eac:	2b5c      	cmp	r3, #92	; 0x5c
 8017eae:	d110      	bne.n	8017ed2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8017eb0:	e002      	b.n	8017eb8 <create_name+0x54>
 8017eb2:	697b      	ldr	r3, [r7, #20]
 8017eb4:	3301      	adds	r3, #1
 8017eb6:	617b      	str	r3, [r7, #20]
 8017eb8:	68fa      	ldr	r2, [r7, #12]
 8017eba:	697b      	ldr	r3, [r7, #20]
 8017ebc:	4413      	add	r3, r2
 8017ebe:	781b      	ldrb	r3, [r3, #0]
 8017ec0:	2b2f      	cmp	r3, #47	; 0x2f
 8017ec2:	d0f6      	beq.n	8017eb2 <create_name+0x4e>
 8017ec4:	68fa      	ldr	r2, [r7, #12]
 8017ec6:	697b      	ldr	r3, [r7, #20]
 8017ec8:	4413      	add	r3, r2
 8017eca:	781b      	ldrb	r3, [r3, #0]
 8017ecc:	2b5c      	cmp	r3, #92	; 0x5c
 8017ece:	d0f0      	beq.n	8017eb2 <create_name+0x4e>
			break;
 8017ed0:	e038      	b.n	8017f44 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8017ed2:	7ffb      	ldrb	r3, [r7, #31]
 8017ed4:	2b2e      	cmp	r3, #46	; 0x2e
 8017ed6:	d003      	beq.n	8017ee0 <create_name+0x7c>
 8017ed8:	693a      	ldr	r2, [r7, #16]
 8017eda:	69bb      	ldr	r3, [r7, #24]
 8017edc:	429a      	cmp	r2, r3
 8017ede:	d30c      	bcc.n	8017efa <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8017ee0:	69bb      	ldr	r3, [r7, #24]
 8017ee2:	2b0b      	cmp	r3, #11
 8017ee4:	d002      	beq.n	8017eec <create_name+0x88>
 8017ee6:	7ffb      	ldrb	r3, [r7, #31]
 8017ee8:	2b2e      	cmp	r3, #46	; 0x2e
 8017eea:	d001      	beq.n	8017ef0 <create_name+0x8c>
 8017eec:	2306      	movs	r3, #6
 8017eee:	e044      	b.n	8017f7a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8017ef0:	2308      	movs	r3, #8
 8017ef2:	613b      	str	r3, [r7, #16]
 8017ef4:	230b      	movs	r3, #11
 8017ef6:	61bb      	str	r3, [r7, #24]
			continue;
 8017ef8:	e022      	b.n	8017f40 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8017efa:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8017efe:	2b00      	cmp	r3, #0
 8017f00:	da04      	bge.n	8017f0c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8017f02:	7ffb      	ldrb	r3, [r7, #31]
 8017f04:	3b80      	subs	r3, #128	; 0x80
 8017f06:	4a1f      	ldr	r2, [pc, #124]	; (8017f84 <create_name+0x120>)
 8017f08:	5cd3      	ldrb	r3, [r2, r3]
 8017f0a:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8017f0c:	7ffb      	ldrb	r3, [r7, #31]
 8017f0e:	4619      	mov	r1, r3
 8017f10:	481d      	ldr	r0, [pc, #116]	; (8017f88 <create_name+0x124>)
 8017f12:	f7ff f815 	bl	8016f40 <chk_chr>
 8017f16:	4603      	mov	r3, r0
 8017f18:	2b00      	cmp	r3, #0
 8017f1a:	d001      	beq.n	8017f20 <create_name+0xbc>
 8017f1c:	2306      	movs	r3, #6
 8017f1e:	e02c      	b.n	8017f7a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8017f20:	7ffb      	ldrb	r3, [r7, #31]
 8017f22:	2b60      	cmp	r3, #96	; 0x60
 8017f24:	d905      	bls.n	8017f32 <create_name+0xce>
 8017f26:	7ffb      	ldrb	r3, [r7, #31]
 8017f28:	2b7a      	cmp	r3, #122	; 0x7a
 8017f2a:	d802      	bhi.n	8017f32 <create_name+0xce>
 8017f2c:	7ffb      	ldrb	r3, [r7, #31]
 8017f2e:	3b20      	subs	r3, #32
 8017f30:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8017f32:	693b      	ldr	r3, [r7, #16]
 8017f34:	1c5a      	adds	r2, r3, #1
 8017f36:	613a      	str	r2, [r7, #16]
 8017f38:	68ba      	ldr	r2, [r7, #8]
 8017f3a:	4413      	add	r3, r2
 8017f3c:	7ffa      	ldrb	r2, [r7, #31]
 8017f3e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8017f40:	e7a6      	b.n	8017e90 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8017f42:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8017f44:	68fa      	ldr	r2, [r7, #12]
 8017f46:	697b      	ldr	r3, [r7, #20]
 8017f48:	441a      	add	r2, r3
 8017f4a:	683b      	ldr	r3, [r7, #0]
 8017f4c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8017f4e:	693b      	ldr	r3, [r7, #16]
 8017f50:	2b00      	cmp	r3, #0
 8017f52:	d101      	bne.n	8017f58 <create_name+0xf4>
 8017f54:	2306      	movs	r3, #6
 8017f56:	e010      	b.n	8017f7a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8017f58:	68bb      	ldr	r3, [r7, #8]
 8017f5a:	781b      	ldrb	r3, [r3, #0]
 8017f5c:	2be5      	cmp	r3, #229	; 0xe5
 8017f5e:	d102      	bne.n	8017f66 <create_name+0x102>
 8017f60:	68bb      	ldr	r3, [r7, #8]
 8017f62:	2205      	movs	r2, #5
 8017f64:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8017f66:	7ffb      	ldrb	r3, [r7, #31]
 8017f68:	2b20      	cmp	r3, #32
 8017f6a:	d801      	bhi.n	8017f70 <create_name+0x10c>
 8017f6c:	2204      	movs	r2, #4
 8017f6e:	e000      	b.n	8017f72 <create_name+0x10e>
 8017f70:	2200      	movs	r2, #0
 8017f72:	68bb      	ldr	r3, [r7, #8]
 8017f74:	330b      	adds	r3, #11
 8017f76:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8017f78:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8017f7a:	4618      	mov	r0, r3
 8017f7c:	3720      	adds	r7, #32
 8017f7e:	46bd      	mov	sp, r7
 8017f80:	bd80      	pop	{r7, pc}
 8017f82:	bf00      	nop
 8017f84:	0801c594 	.word	0x0801c594
 8017f88:	0801c4b8 	.word	0x0801c4b8

08017f8c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8017f8c:	b580      	push	{r7, lr}
 8017f8e:	b086      	sub	sp, #24
 8017f90:	af00      	add	r7, sp, #0
 8017f92:	6078      	str	r0, [r7, #4]
 8017f94:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8017f9a:	693b      	ldr	r3, [r7, #16]
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8017fa0:	e002      	b.n	8017fa8 <follow_path+0x1c>
 8017fa2:	683b      	ldr	r3, [r7, #0]
 8017fa4:	3301      	adds	r3, #1
 8017fa6:	603b      	str	r3, [r7, #0]
 8017fa8:	683b      	ldr	r3, [r7, #0]
 8017faa:	781b      	ldrb	r3, [r3, #0]
 8017fac:	2b2f      	cmp	r3, #47	; 0x2f
 8017fae:	d0f8      	beq.n	8017fa2 <follow_path+0x16>
 8017fb0:	683b      	ldr	r3, [r7, #0]
 8017fb2:	781b      	ldrb	r3, [r3, #0]
 8017fb4:	2b5c      	cmp	r3, #92	; 0x5c
 8017fb6:	d0f4      	beq.n	8017fa2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8017fb8:	693b      	ldr	r3, [r7, #16]
 8017fba:	2200      	movs	r2, #0
 8017fbc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8017fbe:	683b      	ldr	r3, [r7, #0]
 8017fc0:	781b      	ldrb	r3, [r3, #0]
 8017fc2:	2b1f      	cmp	r3, #31
 8017fc4:	d80a      	bhi.n	8017fdc <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	2280      	movs	r2, #128	; 0x80
 8017fca:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8017fce:	2100      	movs	r1, #0
 8017fd0:	6878      	ldr	r0, [r7, #4]
 8017fd2:	f7ff fcf9 	bl	80179c8 <dir_sdi>
 8017fd6:	4603      	mov	r3, r0
 8017fd8:	75fb      	strb	r3, [r7, #23]
 8017fda:	e043      	b.n	8018064 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8017fdc:	463b      	mov	r3, r7
 8017fde:	4619      	mov	r1, r3
 8017fe0:	6878      	ldr	r0, [r7, #4]
 8017fe2:	f7ff ff3f 	bl	8017e64 <create_name>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8017fea:	7dfb      	ldrb	r3, [r7, #23]
 8017fec:	2b00      	cmp	r3, #0
 8017fee:	d134      	bne.n	801805a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8017ff0:	6878      	ldr	r0, [r7, #4]
 8017ff2:	f7ff feaf 	bl	8017d54 <dir_find>
 8017ff6:	4603      	mov	r3, r0
 8017ff8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8017ffa:	687b      	ldr	r3, [r7, #4]
 8017ffc:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8018000:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8018002:	7dfb      	ldrb	r3, [r7, #23]
 8018004:	2b00      	cmp	r3, #0
 8018006:	d00a      	beq.n	801801e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8018008:	7dfb      	ldrb	r3, [r7, #23]
 801800a:	2b04      	cmp	r3, #4
 801800c:	d127      	bne.n	801805e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 801800e:	7afb      	ldrb	r3, [r7, #11]
 8018010:	f003 0304 	and.w	r3, r3, #4
 8018014:	2b00      	cmp	r3, #0
 8018016:	d122      	bne.n	801805e <follow_path+0xd2>
 8018018:	2305      	movs	r3, #5
 801801a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 801801c:	e01f      	b.n	801805e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801801e:	7afb      	ldrb	r3, [r7, #11]
 8018020:	f003 0304 	and.w	r3, r3, #4
 8018024:	2b00      	cmp	r3, #0
 8018026:	d11c      	bne.n	8018062 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8018028:	693b      	ldr	r3, [r7, #16]
 801802a:	799b      	ldrb	r3, [r3, #6]
 801802c:	f003 0310 	and.w	r3, r3, #16
 8018030:	2b00      	cmp	r3, #0
 8018032:	d102      	bne.n	801803a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8018034:	2305      	movs	r3, #5
 8018036:	75fb      	strb	r3, [r7, #23]
 8018038:	e014      	b.n	8018064 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 801803a:	68fb      	ldr	r3, [r7, #12]
 801803c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	695b      	ldr	r3, [r3, #20]
 8018044:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018048:	4413      	add	r3, r2
 801804a:	4619      	mov	r1, r3
 801804c:	68f8      	ldr	r0, [r7, #12]
 801804e:	f7ff fe42 	bl	8017cd6 <ld_clust>
 8018052:	4602      	mov	r2, r0
 8018054:	693b      	ldr	r3, [r7, #16]
 8018056:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8018058:	e7c0      	b.n	8017fdc <follow_path+0x50>
			if (res != FR_OK) break;
 801805a:	bf00      	nop
 801805c:	e002      	b.n	8018064 <follow_path+0xd8>
				break;
 801805e:	bf00      	nop
 8018060:	e000      	b.n	8018064 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8018062:	bf00      	nop
			}
		}
	}

	return res;
 8018064:	7dfb      	ldrb	r3, [r7, #23]
}
 8018066:	4618      	mov	r0, r3
 8018068:	3718      	adds	r7, #24
 801806a:	46bd      	mov	sp, r7
 801806c:	bd80      	pop	{r7, pc}

0801806e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 801806e:	b480      	push	{r7}
 8018070:	b087      	sub	sp, #28
 8018072:	af00      	add	r7, sp, #0
 8018074:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8018076:	f04f 33ff 	mov.w	r3, #4294967295
 801807a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	681b      	ldr	r3, [r3, #0]
 8018080:	2b00      	cmp	r3, #0
 8018082:	d031      	beq.n	80180e8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8018084:	687b      	ldr	r3, [r7, #4]
 8018086:	681b      	ldr	r3, [r3, #0]
 8018088:	617b      	str	r3, [r7, #20]
 801808a:	e002      	b.n	8018092 <get_ldnumber+0x24>
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	3301      	adds	r3, #1
 8018090:	617b      	str	r3, [r7, #20]
 8018092:	697b      	ldr	r3, [r7, #20]
 8018094:	781b      	ldrb	r3, [r3, #0]
 8018096:	2b20      	cmp	r3, #32
 8018098:	d903      	bls.n	80180a2 <get_ldnumber+0x34>
 801809a:	697b      	ldr	r3, [r7, #20]
 801809c:	781b      	ldrb	r3, [r3, #0]
 801809e:	2b3a      	cmp	r3, #58	; 0x3a
 80180a0:	d1f4      	bne.n	801808c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80180a2:	697b      	ldr	r3, [r7, #20]
 80180a4:	781b      	ldrb	r3, [r3, #0]
 80180a6:	2b3a      	cmp	r3, #58	; 0x3a
 80180a8:	d11c      	bne.n	80180e4 <get_ldnumber+0x76>
			tp = *path;
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	681b      	ldr	r3, [r3, #0]
 80180ae:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	1c5a      	adds	r2, r3, #1
 80180b4:	60fa      	str	r2, [r7, #12]
 80180b6:	781b      	ldrb	r3, [r3, #0]
 80180b8:	3b30      	subs	r3, #48	; 0x30
 80180ba:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80180bc:	68bb      	ldr	r3, [r7, #8]
 80180be:	2b09      	cmp	r3, #9
 80180c0:	d80e      	bhi.n	80180e0 <get_ldnumber+0x72>
 80180c2:	68fa      	ldr	r2, [r7, #12]
 80180c4:	697b      	ldr	r3, [r7, #20]
 80180c6:	429a      	cmp	r2, r3
 80180c8:	d10a      	bne.n	80180e0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80180ca:	68bb      	ldr	r3, [r7, #8]
 80180cc:	2b00      	cmp	r3, #0
 80180ce:	d107      	bne.n	80180e0 <get_ldnumber+0x72>
					vol = (int)i;
 80180d0:	68bb      	ldr	r3, [r7, #8]
 80180d2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80180d4:	697b      	ldr	r3, [r7, #20]
 80180d6:	3301      	adds	r3, #1
 80180d8:	617b      	str	r3, [r7, #20]
 80180da:	687b      	ldr	r3, [r7, #4]
 80180dc:	697a      	ldr	r2, [r7, #20]
 80180de:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80180e0:	693b      	ldr	r3, [r7, #16]
 80180e2:	e002      	b.n	80180ea <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80180e4:	2300      	movs	r3, #0
 80180e6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80180e8:	693b      	ldr	r3, [r7, #16]
}
 80180ea:	4618      	mov	r0, r3
 80180ec:	371c      	adds	r7, #28
 80180ee:	46bd      	mov	sp, r7
 80180f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180f4:	4770      	bx	lr
	...

080180f8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80180f8:	b580      	push	{r7, lr}
 80180fa:	b082      	sub	sp, #8
 80180fc:	af00      	add	r7, sp, #0
 80180fe:	6078      	str	r0, [r7, #4]
 8018100:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8018102:	687b      	ldr	r3, [r7, #4]
 8018104:	2200      	movs	r2, #0
 8018106:	70da      	strb	r2, [r3, #3]
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	f04f 32ff 	mov.w	r2, #4294967295
 801810e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8018110:	6839      	ldr	r1, [r7, #0]
 8018112:	6878      	ldr	r0, [r7, #4]
 8018114:	f7ff f8e0 	bl	80172d8 <move_window>
 8018118:	4603      	mov	r3, r0
 801811a:	2b00      	cmp	r3, #0
 801811c:	d001      	beq.n	8018122 <check_fs+0x2a>
 801811e:	2304      	movs	r3, #4
 8018120:	e038      	b.n	8018194 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	3330      	adds	r3, #48	; 0x30
 8018126:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801812a:	4618      	mov	r0, r3
 801812c:	f7fe fe24 	bl	8016d78 <ld_word>
 8018130:	4603      	mov	r3, r0
 8018132:	461a      	mov	r2, r3
 8018134:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8018138:	429a      	cmp	r2, r3
 801813a:	d001      	beq.n	8018140 <check_fs+0x48>
 801813c:	2303      	movs	r3, #3
 801813e:	e029      	b.n	8018194 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018146:	2be9      	cmp	r3, #233	; 0xe9
 8018148:	d009      	beq.n	801815e <check_fs+0x66>
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018150:	2beb      	cmp	r3, #235	; 0xeb
 8018152:	d11e      	bne.n	8018192 <check_fs+0x9a>
 8018154:	687b      	ldr	r3, [r7, #4]
 8018156:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 801815a:	2b90      	cmp	r3, #144	; 0x90
 801815c:	d119      	bne.n	8018192 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	3330      	adds	r3, #48	; 0x30
 8018162:	3336      	adds	r3, #54	; 0x36
 8018164:	4618      	mov	r0, r3
 8018166:	f7fe fe1f 	bl	8016da8 <ld_dword>
 801816a:	4603      	mov	r3, r0
 801816c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8018170:	4a0a      	ldr	r2, [pc, #40]	; (801819c <check_fs+0xa4>)
 8018172:	4293      	cmp	r3, r2
 8018174:	d101      	bne.n	801817a <check_fs+0x82>
 8018176:	2300      	movs	r3, #0
 8018178:	e00c      	b.n	8018194 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	3330      	adds	r3, #48	; 0x30
 801817e:	3352      	adds	r3, #82	; 0x52
 8018180:	4618      	mov	r0, r3
 8018182:	f7fe fe11 	bl	8016da8 <ld_dword>
 8018186:	4602      	mov	r2, r0
 8018188:	4b05      	ldr	r3, [pc, #20]	; (80181a0 <check_fs+0xa8>)
 801818a:	429a      	cmp	r2, r3
 801818c:	d101      	bne.n	8018192 <check_fs+0x9a>
 801818e:	2300      	movs	r3, #0
 8018190:	e000      	b.n	8018194 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8018192:	2302      	movs	r3, #2
}
 8018194:	4618      	mov	r0, r3
 8018196:	3708      	adds	r7, #8
 8018198:	46bd      	mov	sp, r7
 801819a:	bd80      	pop	{r7, pc}
 801819c:	00544146 	.word	0x00544146
 80181a0:	33544146 	.word	0x33544146

080181a4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80181a4:	b580      	push	{r7, lr}
 80181a6:	b096      	sub	sp, #88	; 0x58
 80181a8:	af00      	add	r7, sp, #0
 80181aa:	60f8      	str	r0, [r7, #12]
 80181ac:	60b9      	str	r1, [r7, #8]
 80181ae:	4613      	mov	r3, r2
 80181b0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80181b2:	68bb      	ldr	r3, [r7, #8]
 80181b4:	2200      	movs	r2, #0
 80181b6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80181b8:	68f8      	ldr	r0, [r7, #12]
 80181ba:	f7ff ff58 	bl	801806e <get_ldnumber>
 80181be:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80181c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181c2:	2b00      	cmp	r3, #0
 80181c4:	da01      	bge.n	80181ca <find_volume+0x26>
 80181c6:	230b      	movs	r3, #11
 80181c8:	e22e      	b.n	8018628 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80181ca:	4aa8      	ldr	r2, [pc, #672]	; (801846c <find_volume+0x2c8>)
 80181cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80181ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80181d2:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80181d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d101      	bne.n	80181de <find_volume+0x3a>
 80181da:	230c      	movs	r3, #12
 80181dc:	e224      	b.n	8018628 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80181de:	68bb      	ldr	r3, [r7, #8]
 80181e0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80181e2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80181e4:	79fb      	ldrb	r3, [r7, #7]
 80181e6:	f023 0301 	bic.w	r3, r3, #1
 80181ea:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80181ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181ee:	781b      	ldrb	r3, [r3, #0]
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d01a      	beq.n	801822a <find_volume+0x86>
		stat = disk_status(fs->drv);
 80181f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80181f6:	785b      	ldrb	r3, [r3, #1]
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7fe fd1f 	bl	8016c3c <disk_status>
 80181fe:	4603      	mov	r3, r0
 8018200:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8018204:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018208:	f003 0301 	and.w	r3, r3, #1
 801820c:	2b00      	cmp	r3, #0
 801820e:	d10c      	bne.n	801822a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8018210:	79fb      	ldrb	r3, [r7, #7]
 8018212:	2b00      	cmp	r3, #0
 8018214:	d007      	beq.n	8018226 <find_volume+0x82>
 8018216:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801821a:	f003 0304 	and.w	r3, r3, #4
 801821e:	2b00      	cmp	r3, #0
 8018220:	d001      	beq.n	8018226 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8018222:	230a      	movs	r3, #10
 8018224:	e200      	b.n	8018628 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8018226:	2300      	movs	r3, #0
 8018228:	e1fe      	b.n	8018628 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801822a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801822c:	2200      	movs	r2, #0
 801822e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8018230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8018232:	b2da      	uxtb	r2, r3
 8018234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018236:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8018238:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801823a:	785b      	ldrb	r3, [r3, #1]
 801823c:	4618      	mov	r0, r3
 801823e:	f7fe fd17 	bl	8016c70 <disk_initialize>
 8018242:	4603      	mov	r3, r0
 8018244:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8018248:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801824c:	f003 0301 	and.w	r3, r3, #1
 8018250:	2b00      	cmp	r3, #0
 8018252:	d001      	beq.n	8018258 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8018254:	2303      	movs	r3, #3
 8018256:	e1e7      	b.n	8018628 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8018258:	79fb      	ldrb	r3, [r7, #7]
 801825a:	2b00      	cmp	r3, #0
 801825c:	d007      	beq.n	801826e <find_volume+0xca>
 801825e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018262:	f003 0304 	and.w	r3, r3, #4
 8018266:	2b00      	cmp	r3, #0
 8018268:	d001      	beq.n	801826e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801826a:	230a      	movs	r3, #10
 801826c:	e1dc      	b.n	8018628 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 801826e:	2300      	movs	r3, #0
 8018270:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8018272:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018274:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018276:	f7ff ff3f 	bl	80180f8 <check_fs>
 801827a:	4603      	mov	r3, r0
 801827c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8018280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018284:	2b02      	cmp	r3, #2
 8018286:	d14b      	bne.n	8018320 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8018288:	2300      	movs	r3, #0
 801828a:	643b      	str	r3, [r7, #64]	; 0x40
 801828c:	e01f      	b.n	80182ce <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 801828e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018290:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018294:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018296:	011b      	lsls	r3, r3, #4
 8018298:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 801829c:	4413      	add	r3, r2
 801829e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80182a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182a2:	3304      	adds	r3, #4
 80182a4:	781b      	ldrb	r3, [r3, #0]
 80182a6:	2b00      	cmp	r3, #0
 80182a8:	d006      	beq.n	80182b8 <find_volume+0x114>
 80182aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80182ac:	3308      	adds	r3, #8
 80182ae:	4618      	mov	r0, r3
 80182b0:	f7fe fd7a 	bl	8016da8 <ld_dword>
 80182b4:	4602      	mov	r2, r0
 80182b6:	e000      	b.n	80182ba <find_volume+0x116>
 80182b8:	2200      	movs	r2, #0
 80182ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182bc:	009b      	lsls	r3, r3, #2
 80182be:	f107 0158 	add.w	r1, r7, #88	; 0x58
 80182c2:	440b      	add	r3, r1
 80182c4:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80182c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182ca:	3301      	adds	r3, #1
 80182cc:	643b      	str	r3, [r7, #64]	; 0x40
 80182ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182d0:	2b03      	cmp	r3, #3
 80182d2:	d9dc      	bls.n	801828e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80182d4:	2300      	movs	r3, #0
 80182d6:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80182d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182da:	2b00      	cmp	r3, #0
 80182dc:	d002      	beq.n	80182e4 <find_volume+0x140>
 80182de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182e0:	3b01      	subs	r3, #1
 80182e2:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80182e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80182e6:	009b      	lsls	r3, r3, #2
 80182e8:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80182ec:	4413      	add	r3, r2
 80182ee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80182f2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80182f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d005      	beq.n	8018306 <find_volume+0x162>
 80182fa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80182fc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80182fe:	f7ff fefb 	bl	80180f8 <check_fs>
 8018302:	4603      	mov	r3, r0
 8018304:	e000      	b.n	8018308 <find_volume+0x164>
 8018306:	2303      	movs	r3, #3
 8018308:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801830c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018310:	2b01      	cmp	r3, #1
 8018312:	d905      	bls.n	8018320 <find_volume+0x17c>
 8018314:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8018316:	3301      	adds	r3, #1
 8018318:	643b      	str	r3, [r7, #64]	; 0x40
 801831a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801831c:	2b03      	cmp	r3, #3
 801831e:	d9e1      	bls.n	80182e4 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8018320:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018324:	2b04      	cmp	r3, #4
 8018326:	d101      	bne.n	801832c <find_volume+0x188>
 8018328:	2301      	movs	r3, #1
 801832a:	e17d      	b.n	8018628 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801832c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8018330:	2b01      	cmp	r3, #1
 8018332:	d901      	bls.n	8018338 <find_volume+0x194>
 8018334:	230d      	movs	r3, #13
 8018336:	e177      	b.n	8018628 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8018338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801833a:	3330      	adds	r3, #48	; 0x30
 801833c:	330b      	adds	r3, #11
 801833e:	4618      	mov	r0, r3
 8018340:	f7fe fd1a 	bl	8016d78 <ld_word>
 8018344:	4603      	mov	r3, r0
 8018346:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801834a:	d001      	beq.n	8018350 <find_volume+0x1ac>
 801834c:	230d      	movs	r3, #13
 801834e:	e16b      	b.n	8018628 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8018350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018352:	3330      	adds	r3, #48	; 0x30
 8018354:	3316      	adds	r3, #22
 8018356:	4618      	mov	r0, r3
 8018358:	f7fe fd0e 	bl	8016d78 <ld_word>
 801835c:	4603      	mov	r3, r0
 801835e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8018360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018362:	2b00      	cmp	r3, #0
 8018364:	d106      	bne.n	8018374 <find_volume+0x1d0>
 8018366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018368:	3330      	adds	r3, #48	; 0x30
 801836a:	3324      	adds	r3, #36	; 0x24
 801836c:	4618      	mov	r0, r3
 801836e:	f7fe fd1b 	bl	8016da8 <ld_dword>
 8018372:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8018374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018376:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8018378:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801837a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801837c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8018380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018382:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8018384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018386:	789b      	ldrb	r3, [r3, #2]
 8018388:	2b01      	cmp	r3, #1
 801838a:	d005      	beq.n	8018398 <find_volume+0x1f4>
 801838c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801838e:	789b      	ldrb	r3, [r3, #2]
 8018390:	2b02      	cmp	r3, #2
 8018392:	d001      	beq.n	8018398 <find_volume+0x1f4>
 8018394:	230d      	movs	r3, #13
 8018396:	e147      	b.n	8018628 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8018398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801839a:	789b      	ldrb	r3, [r3, #2]
 801839c:	461a      	mov	r2, r3
 801839e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80183a0:	fb02 f303 	mul.w	r3, r2, r3
 80183a4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 80183a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80183ac:	b29a      	uxth	r2, r3
 80183ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 80183b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183b4:	895b      	ldrh	r3, [r3, #10]
 80183b6:	2b00      	cmp	r3, #0
 80183b8:	d008      	beq.n	80183cc <find_volume+0x228>
 80183ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183bc:	895b      	ldrh	r3, [r3, #10]
 80183be:	461a      	mov	r2, r3
 80183c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183c2:	895b      	ldrh	r3, [r3, #10]
 80183c4:	3b01      	subs	r3, #1
 80183c6:	4013      	ands	r3, r2
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d001      	beq.n	80183d0 <find_volume+0x22c>
 80183cc:	230d      	movs	r3, #13
 80183ce:	e12b      	b.n	8018628 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80183d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183d2:	3330      	adds	r3, #48	; 0x30
 80183d4:	3311      	adds	r3, #17
 80183d6:	4618      	mov	r0, r3
 80183d8:	f7fe fcce 	bl	8016d78 <ld_word>
 80183dc:	4603      	mov	r3, r0
 80183de:	461a      	mov	r2, r3
 80183e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80183e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183e6:	891b      	ldrh	r3, [r3, #8]
 80183e8:	f003 030f 	and.w	r3, r3, #15
 80183ec:	b29b      	uxth	r3, r3
 80183ee:	2b00      	cmp	r3, #0
 80183f0:	d001      	beq.n	80183f6 <find_volume+0x252>
 80183f2:	230d      	movs	r3, #13
 80183f4:	e118      	b.n	8018628 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80183f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80183f8:	3330      	adds	r3, #48	; 0x30
 80183fa:	3313      	adds	r3, #19
 80183fc:	4618      	mov	r0, r3
 80183fe:	f7fe fcbb 	bl	8016d78 <ld_word>
 8018402:	4603      	mov	r3, r0
 8018404:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8018406:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018408:	2b00      	cmp	r3, #0
 801840a:	d106      	bne.n	801841a <find_volume+0x276>
 801840c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801840e:	3330      	adds	r3, #48	; 0x30
 8018410:	3320      	adds	r3, #32
 8018412:	4618      	mov	r0, r3
 8018414:	f7fe fcc8 	bl	8016da8 <ld_dword>
 8018418:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801841a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801841c:	3330      	adds	r3, #48	; 0x30
 801841e:	330e      	adds	r3, #14
 8018420:	4618      	mov	r0, r3
 8018422:	f7fe fca9 	bl	8016d78 <ld_word>
 8018426:	4603      	mov	r3, r0
 8018428:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801842a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801842c:	2b00      	cmp	r3, #0
 801842e:	d101      	bne.n	8018434 <find_volume+0x290>
 8018430:	230d      	movs	r3, #13
 8018432:	e0f9      	b.n	8018628 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8018434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8018436:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018438:	4413      	add	r3, r2
 801843a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801843c:	8912      	ldrh	r2, [r2, #8]
 801843e:	0912      	lsrs	r2, r2, #4
 8018440:	b292      	uxth	r2, r2
 8018442:	4413      	add	r3, r2
 8018444:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8018446:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801844a:	429a      	cmp	r2, r3
 801844c:	d201      	bcs.n	8018452 <find_volume+0x2ae>
 801844e:	230d      	movs	r3, #13
 8018450:	e0ea      	b.n	8018628 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8018452:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8018454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018456:	1ad3      	subs	r3, r2, r3
 8018458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801845a:	8952      	ldrh	r2, [r2, #10]
 801845c:	fbb3 f3f2 	udiv	r3, r3, r2
 8018460:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8018462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018464:	2b00      	cmp	r3, #0
 8018466:	d103      	bne.n	8018470 <find_volume+0x2cc>
 8018468:	230d      	movs	r3, #13
 801846a:	e0dd      	b.n	8018628 <find_volume+0x484>
 801846c:	240404d0 	.word	0x240404d0
		fmt = FS_FAT32;
 8018470:	2303      	movs	r3, #3
 8018472:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8018476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018478:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801847c:	4293      	cmp	r3, r2
 801847e:	d802      	bhi.n	8018486 <find_volume+0x2e2>
 8018480:	2302      	movs	r3, #2
 8018482:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8018486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018488:	f640 72f5 	movw	r2, #4085	; 0xff5
 801848c:	4293      	cmp	r3, r2
 801848e:	d802      	bhi.n	8018496 <find_volume+0x2f2>
 8018490:	2301      	movs	r3, #1
 8018492:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8018496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018498:	1c9a      	adds	r2, r3, #2
 801849a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801849c:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 801849e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80184a2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 80184a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80184a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80184a8:	441a      	add	r2, r3
 80184aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184ac:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 80184ae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80184b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80184b2:	441a      	add	r2, r3
 80184b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184b6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 80184b8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80184bc:	2b03      	cmp	r3, #3
 80184be:	d11e      	bne.n	80184fe <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 80184c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184c2:	3330      	adds	r3, #48	; 0x30
 80184c4:	332a      	adds	r3, #42	; 0x2a
 80184c6:	4618      	mov	r0, r3
 80184c8:	f7fe fc56 	bl	8016d78 <ld_word>
 80184cc:	4603      	mov	r3, r0
 80184ce:	2b00      	cmp	r3, #0
 80184d0:	d001      	beq.n	80184d6 <find_volume+0x332>
 80184d2:	230d      	movs	r3, #13
 80184d4:	e0a8      	b.n	8018628 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80184d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184d8:	891b      	ldrh	r3, [r3, #8]
 80184da:	2b00      	cmp	r3, #0
 80184dc:	d001      	beq.n	80184e2 <find_volume+0x33e>
 80184de:	230d      	movs	r3, #13
 80184e0:	e0a2      	b.n	8018628 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80184e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184e4:	3330      	adds	r3, #48	; 0x30
 80184e6:	332c      	adds	r3, #44	; 0x2c
 80184e8:	4618      	mov	r0, r3
 80184ea:	f7fe fc5d 	bl	8016da8 <ld_dword>
 80184ee:	4602      	mov	r2, r0
 80184f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184f2:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80184f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80184f6:	695b      	ldr	r3, [r3, #20]
 80184f8:	009b      	lsls	r3, r3, #2
 80184fa:	647b      	str	r3, [r7, #68]	; 0x44
 80184fc:	e01f      	b.n	801853e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80184fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018500:	891b      	ldrh	r3, [r3, #8]
 8018502:	2b00      	cmp	r3, #0
 8018504:	d101      	bne.n	801850a <find_volume+0x366>
 8018506:	230d      	movs	r3, #13
 8018508:	e08e      	b.n	8018628 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801850a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801850c:	6a1a      	ldr	r2, [r3, #32]
 801850e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018510:	441a      	add	r2, r3
 8018512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018514:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8018516:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801851a:	2b02      	cmp	r3, #2
 801851c:	d103      	bne.n	8018526 <find_volume+0x382>
 801851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018520:	695b      	ldr	r3, [r3, #20]
 8018522:	005b      	lsls	r3, r3, #1
 8018524:	e00a      	b.n	801853c <find_volume+0x398>
 8018526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018528:	695a      	ldr	r2, [r3, #20]
 801852a:	4613      	mov	r3, r2
 801852c:	005b      	lsls	r3, r3, #1
 801852e:	4413      	add	r3, r2
 8018530:	085a      	lsrs	r2, r3, #1
 8018532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018534:	695b      	ldr	r3, [r3, #20]
 8018536:	f003 0301 	and.w	r3, r3, #1
 801853a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801853c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 801853e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018540:	699a      	ldr	r2, [r3, #24]
 8018542:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018544:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8018548:	0a5b      	lsrs	r3, r3, #9
 801854a:	429a      	cmp	r2, r3
 801854c:	d201      	bcs.n	8018552 <find_volume+0x3ae>
 801854e:	230d      	movs	r3, #13
 8018550:	e06a      	b.n	8018628 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8018552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018554:	f04f 32ff 	mov.w	r2, #4294967295
 8018558:	611a      	str	r2, [r3, #16]
 801855a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801855c:	691a      	ldr	r2, [r3, #16]
 801855e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018560:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8018562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018564:	2280      	movs	r2, #128	; 0x80
 8018566:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8018568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801856c:	2b03      	cmp	r3, #3
 801856e:	d149      	bne.n	8018604 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8018570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018572:	3330      	adds	r3, #48	; 0x30
 8018574:	3330      	adds	r3, #48	; 0x30
 8018576:	4618      	mov	r0, r3
 8018578:	f7fe fbfe 	bl	8016d78 <ld_word>
 801857c:	4603      	mov	r3, r0
 801857e:	2b01      	cmp	r3, #1
 8018580:	d140      	bne.n	8018604 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8018582:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8018584:	3301      	adds	r3, #1
 8018586:	4619      	mov	r1, r3
 8018588:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801858a:	f7fe fea5 	bl	80172d8 <move_window>
 801858e:	4603      	mov	r3, r0
 8018590:	2b00      	cmp	r3, #0
 8018592:	d137      	bne.n	8018604 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8018594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018596:	2200      	movs	r2, #0
 8018598:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801859a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801859c:	3330      	adds	r3, #48	; 0x30
 801859e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80185a2:	4618      	mov	r0, r3
 80185a4:	f7fe fbe8 	bl	8016d78 <ld_word>
 80185a8:	4603      	mov	r3, r0
 80185aa:	461a      	mov	r2, r3
 80185ac:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80185b0:	429a      	cmp	r2, r3
 80185b2:	d127      	bne.n	8018604 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80185b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185b6:	3330      	adds	r3, #48	; 0x30
 80185b8:	4618      	mov	r0, r3
 80185ba:	f7fe fbf5 	bl	8016da8 <ld_dword>
 80185be:	4602      	mov	r2, r0
 80185c0:	4b1b      	ldr	r3, [pc, #108]	; (8018630 <find_volume+0x48c>)
 80185c2:	429a      	cmp	r2, r3
 80185c4:	d11e      	bne.n	8018604 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80185c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185c8:	3330      	adds	r3, #48	; 0x30
 80185ca:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80185ce:	4618      	mov	r0, r3
 80185d0:	f7fe fbea 	bl	8016da8 <ld_dword>
 80185d4:	4602      	mov	r2, r0
 80185d6:	4b17      	ldr	r3, [pc, #92]	; (8018634 <find_volume+0x490>)
 80185d8:	429a      	cmp	r2, r3
 80185da:	d113      	bne.n	8018604 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80185dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185de:	3330      	adds	r3, #48	; 0x30
 80185e0:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80185e4:	4618      	mov	r0, r3
 80185e6:	f7fe fbdf 	bl	8016da8 <ld_dword>
 80185ea:	4602      	mov	r2, r0
 80185ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185ee:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80185f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80185f2:	3330      	adds	r3, #48	; 0x30
 80185f4:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80185f8:	4618      	mov	r0, r3
 80185fa:	f7fe fbd5 	bl	8016da8 <ld_dword>
 80185fe:	4602      	mov	r2, r0
 8018600:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018602:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8018604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8018606:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801860a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801860c:	4b0a      	ldr	r3, [pc, #40]	; (8018638 <find_volume+0x494>)
 801860e:	881b      	ldrh	r3, [r3, #0]
 8018610:	3301      	adds	r3, #1
 8018612:	b29a      	uxth	r2, r3
 8018614:	4b08      	ldr	r3, [pc, #32]	; (8018638 <find_volume+0x494>)
 8018616:	801a      	strh	r2, [r3, #0]
 8018618:	4b07      	ldr	r3, [pc, #28]	; (8018638 <find_volume+0x494>)
 801861a:	881a      	ldrh	r2, [r3, #0]
 801861c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801861e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8018620:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8018622:	f7fe fdf1 	bl	8017208 <clear_lock>
#endif
	return FR_OK;
 8018626:	2300      	movs	r3, #0
}
 8018628:	4618      	mov	r0, r3
 801862a:	3758      	adds	r7, #88	; 0x58
 801862c:	46bd      	mov	sp, r7
 801862e:	bd80      	pop	{r7, pc}
 8018630:	41615252 	.word	0x41615252
 8018634:	61417272 	.word	0x61417272
 8018638:	240404d4 	.word	0x240404d4

0801863c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801863c:	b580      	push	{r7, lr}
 801863e:	b084      	sub	sp, #16
 8018640:	af00      	add	r7, sp, #0
 8018642:	6078      	str	r0, [r7, #4]
 8018644:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8018646:	2309      	movs	r3, #9
 8018648:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	2b00      	cmp	r3, #0
 801864e:	d01c      	beq.n	801868a <validate+0x4e>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	2b00      	cmp	r3, #0
 8018656:	d018      	beq.n	801868a <validate+0x4e>
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	681b      	ldr	r3, [r3, #0]
 801865c:	781b      	ldrb	r3, [r3, #0]
 801865e:	2b00      	cmp	r3, #0
 8018660:	d013      	beq.n	801868a <validate+0x4e>
 8018662:	687b      	ldr	r3, [r7, #4]
 8018664:	889a      	ldrh	r2, [r3, #4]
 8018666:	687b      	ldr	r3, [r7, #4]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	88db      	ldrh	r3, [r3, #6]
 801866c:	429a      	cmp	r2, r3
 801866e:	d10c      	bne.n	801868a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8018670:	687b      	ldr	r3, [r7, #4]
 8018672:	681b      	ldr	r3, [r3, #0]
 8018674:	785b      	ldrb	r3, [r3, #1]
 8018676:	4618      	mov	r0, r3
 8018678:	f7fe fae0 	bl	8016c3c <disk_status>
 801867c:	4603      	mov	r3, r0
 801867e:	f003 0301 	and.w	r3, r3, #1
 8018682:	2b00      	cmp	r3, #0
 8018684:	d101      	bne.n	801868a <validate+0x4e>
			res = FR_OK;
 8018686:	2300      	movs	r3, #0
 8018688:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801868a:	7bfb      	ldrb	r3, [r7, #15]
 801868c:	2b00      	cmp	r3, #0
 801868e:	d102      	bne.n	8018696 <validate+0x5a>
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	e000      	b.n	8018698 <validate+0x5c>
 8018696:	2300      	movs	r3, #0
 8018698:	683a      	ldr	r2, [r7, #0]
 801869a:	6013      	str	r3, [r2, #0]
	return res;
 801869c:	7bfb      	ldrb	r3, [r7, #15]
}
 801869e:	4618      	mov	r0, r3
 80186a0:	3710      	adds	r7, #16
 80186a2:	46bd      	mov	sp, r7
 80186a4:	bd80      	pop	{r7, pc}
	...

080186a8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80186a8:	b580      	push	{r7, lr}
 80186aa:	b088      	sub	sp, #32
 80186ac:	af00      	add	r7, sp, #0
 80186ae:	60f8      	str	r0, [r7, #12]
 80186b0:	60b9      	str	r1, [r7, #8]
 80186b2:	4613      	mov	r3, r2
 80186b4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80186b6:	68bb      	ldr	r3, [r7, #8]
 80186b8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80186ba:	f107 0310 	add.w	r3, r7, #16
 80186be:	4618      	mov	r0, r3
 80186c0:	f7ff fcd5 	bl	801806e <get_ldnumber>
 80186c4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80186c6:	69fb      	ldr	r3, [r7, #28]
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	da01      	bge.n	80186d0 <f_mount+0x28>
 80186cc:	230b      	movs	r3, #11
 80186ce:	e02b      	b.n	8018728 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80186d0:	4a17      	ldr	r2, [pc, #92]	; (8018730 <f_mount+0x88>)
 80186d2:	69fb      	ldr	r3, [r7, #28]
 80186d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80186d8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80186da:	69bb      	ldr	r3, [r7, #24]
 80186dc:	2b00      	cmp	r3, #0
 80186de:	d005      	beq.n	80186ec <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80186e0:	69b8      	ldr	r0, [r7, #24]
 80186e2:	f7fe fd91 	bl	8017208 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80186e6:	69bb      	ldr	r3, [r7, #24]
 80186e8:	2200      	movs	r2, #0
 80186ea:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	2b00      	cmp	r3, #0
 80186f0:	d002      	beq.n	80186f8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80186f2:	68fb      	ldr	r3, [r7, #12]
 80186f4:	2200      	movs	r2, #0
 80186f6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80186f8:	68fa      	ldr	r2, [r7, #12]
 80186fa:	490d      	ldr	r1, [pc, #52]	; (8018730 <f_mount+0x88>)
 80186fc:	69fb      	ldr	r3, [r7, #28]
 80186fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8018702:	68fb      	ldr	r3, [r7, #12]
 8018704:	2b00      	cmp	r3, #0
 8018706:	d002      	beq.n	801870e <f_mount+0x66>
 8018708:	79fb      	ldrb	r3, [r7, #7]
 801870a:	2b01      	cmp	r3, #1
 801870c:	d001      	beq.n	8018712 <f_mount+0x6a>
 801870e:	2300      	movs	r3, #0
 8018710:	e00a      	b.n	8018728 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8018712:	f107 010c 	add.w	r1, r7, #12
 8018716:	f107 0308 	add.w	r3, r7, #8
 801871a:	2200      	movs	r2, #0
 801871c:	4618      	mov	r0, r3
 801871e:	f7ff fd41 	bl	80181a4 <find_volume>
 8018722:	4603      	mov	r3, r0
 8018724:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8018726:	7dfb      	ldrb	r3, [r7, #23]
}
 8018728:	4618      	mov	r0, r3
 801872a:	3720      	adds	r7, #32
 801872c:	46bd      	mov	sp, r7
 801872e:	bd80      	pop	{r7, pc}
 8018730:	240404d0 	.word	0x240404d0

08018734 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8018734:	b580      	push	{r7, lr}
 8018736:	b098      	sub	sp, #96	; 0x60
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	60b9      	str	r1, [r7, #8]
 801873e:	4613      	mov	r3, r2
 8018740:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8018742:	68fb      	ldr	r3, [r7, #12]
 8018744:	2b00      	cmp	r3, #0
 8018746:	d101      	bne.n	801874c <f_open+0x18>
 8018748:	2309      	movs	r3, #9
 801874a:	e1ad      	b.n	8018aa8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801874c:	79fb      	ldrb	r3, [r7, #7]
 801874e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018752:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8018754:	79fa      	ldrb	r2, [r7, #7]
 8018756:	f107 0110 	add.w	r1, r7, #16
 801875a:	f107 0308 	add.w	r3, r7, #8
 801875e:	4618      	mov	r0, r3
 8018760:	f7ff fd20 	bl	80181a4 <find_volume>
 8018764:	4603      	mov	r3, r0
 8018766:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 801876a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801876e:	2b00      	cmp	r3, #0
 8018770:	f040 8191 	bne.w	8018a96 <f_open+0x362>
		dj.obj.fs = fs;
 8018774:	693b      	ldr	r3, [r7, #16]
 8018776:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8018778:	68ba      	ldr	r2, [r7, #8]
 801877a:	f107 0314 	add.w	r3, r7, #20
 801877e:	4611      	mov	r1, r2
 8018780:	4618      	mov	r0, r3
 8018782:	f7ff fc03 	bl	8017f8c <follow_path>
 8018786:	4603      	mov	r3, r0
 8018788:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801878c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018790:	2b00      	cmp	r3, #0
 8018792:	d11a      	bne.n	80187ca <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8018794:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8018798:	b25b      	sxtb	r3, r3
 801879a:	2b00      	cmp	r3, #0
 801879c:	da03      	bge.n	80187a6 <f_open+0x72>
				res = FR_INVALID_NAME;
 801879e:	2306      	movs	r3, #6
 80187a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80187a4:	e011      	b.n	80187ca <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80187a6:	79fb      	ldrb	r3, [r7, #7]
 80187a8:	f023 0301 	bic.w	r3, r3, #1
 80187ac:	2b00      	cmp	r3, #0
 80187ae:	bf14      	ite	ne
 80187b0:	2301      	movne	r3, #1
 80187b2:	2300      	moveq	r3, #0
 80187b4:	b2db      	uxtb	r3, r3
 80187b6:	461a      	mov	r2, r3
 80187b8:	f107 0314 	add.w	r3, r7, #20
 80187bc:	4611      	mov	r1, r2
 80187be:	4618      	mov	r0, r3
 80187c0:	f7fe fbda 	bl	8016f78 <chk_lock>
 80187c4:	4603      	mov	r3, r0
 80187c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80187ca:	79fb      	ldrb	r3, [r7, #7]
 80187cc:	f003 031c 	and.w	r3, r3, #28
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d07f      	beq.n	80188d4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80187d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d017      	beq.n	801880c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80187dc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80187e0:	2b04      	cmp	r3, #4
 80187e2:	d10e      	bne.n	8018802 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80187e4:	f7fe fc24 	bl	8017030 <enq_lock>
 80187e8:	4603      	mov	r3, r0
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d006      	beq.n	80187fc <f_open+0xc8>
 80187ee:	f107 0314 	add.w	r3, r7, #20
 80187f2:	4618      	mov	r0, r3
 80187f4:	f7ff fb03 	bl	8017dfe <dir_register>
 80187f8:	4603      	mov	r3, r0
 80187fa:	e000      	b.n	80187fe <f_open+0xca>
 80187fc:	2312      	movs	r3, #18
 80187fe:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8018802:	79fb      	ldrb	r3, [r7, #7]
 8018804:	f043 0308 	orr.w	r3, r3, #8
 8018808:	71fb      	strb	r3, [r7, #7]
 801880a:	e010      	b.n	801882e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 801880c:	7ebb      	ldrb	r3, [r7, #26]
 801880e:	f003 0311 	and.w	r3, r3, #17
 8018812:	2b00      	cmp	r3, #0
 8018814:	d003      	beq.n	801881e <f_open+0xea>
					res = FR_DENIED;
 8018816:	2307      	movs	r3, #7
 8018818:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 801881c:	e007      	b.n	801882e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801881e:	79fb      	ldrb	r3, [r7, #7]
 8018820:	f003 0304 	and.w	r3, r3, #4
 8018824:	2b00      	cmp	r3, #0
 8018826:	d002      	beq.n	801882e <f_open+0xfa>
 8018828:	2308      	movs	r3, #8
 801882a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801882e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018832:	2b00      	cmp	r3, #0
 8018834:	d168      	bne.n	8018908 <f_open+0x1d4>
 8018836:	79fb      	ldrb	r3, [r7, #7]
 8018838:	f003 0308 	and.w	r3, r3, #8
 801883c:	2b00      	cmp	r3, #0
 801883e:	d063      	beq.n	8018908 <f_open+0x1d4>
				dw = GET_FATTIME();
 8018840:	f7fb f8fe 	bl	8013a40 <get_fattime>
 8018844:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8018846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018848:	330e      	adds	r3, #14
 801884a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801884c:	4618      	mov	r0, r3
 801884e:	f7fe fae9 	bl	8016e24 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8018852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018854:	3316      	adds	r3, #22
 8018856:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8018858:	4618      	mov	r0, r3
 801885a:	f7fe fae3 	bl	8016e24 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801885e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018860:	330b      	adds	r3, #11
 8018862:	2220      	movs	r2, #32
 8018864:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8018866:	693b      	ldr	r3, [r7, #16]
 8018868:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801886a:	4611      	mov	r1, r2
 801886c:	4618      	mov	r0, r3
 801886e:	f7ff fa32 	bl	8017cd6 <ld_clust>
 8018872:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8018874:	693b      	ldr	r3, [r7, #16]
 8018876:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018878:	2200      	movs	r2, #0
 801887a:	4618      	mov	r0, r3
 801887c:	f7ff fa4a 	bl	8017d14 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8018880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018882:	331c      	adds	r3, #28
 8018884:	2100      	movs	r1, #0
 8018886:	4618      	mov	r0, r3
 8018888:	f7fe facc 	bl	8016e24 <st_dword>
					fs->wflag = 1;
 801888c:	693b      	ldr	r3, [r7, #16]
 801888e:	2201      	movs	r2, #1
 8018890:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8018892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8018894:	2b00      	cmp	r3, #0
 8018896:	d037      	beq.n	8018908 <f_open+0x1d4>
						dw = fs->winsect;
 8018898:	693b      	ldr	r3, [r7, #16]
 801889a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801889c:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 801889e:	f107 0314 	add.w	r3, r7, #20
 80188a2:	2200      	movs	r2, #0
 80188a4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80188a6:	4618      	mov	r0, r3
 80188a8:	f7fe ff5d 	bl	8017766 <remove_chain>
 80188ac:	4603      	mov	r3, r0
 80188ae:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 80188b2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80188b6:	2b00      	cmp	r3, #0
 80188b8:	d126      	bne.n	8018908 <f_open+0x1d4>
							res = move_window(fs, dw);
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80188be:	4618      	mov	r0, r3
 80188c0:	f7fe fd0a 	bl	80172d8 <move_window>
 80188c4:	4603      	mov	r3, r0
 80188c6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80188ca:	693b      	ldr	r3, [r7, #16]
 80188cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80188ce:	3a01      	subs	r2, #1
 80188d0:	60da      	str	r2, [r3, #12]
 80188d2:	e019      	b.n	8018908 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80188d4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80188d8:	2b00      	cmp	r3, #0
 80188da:	d115      	bne.n	8018908 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80188dc:	7ebb      	ldrb	r3, [r7, #26]
 80188de:	f003 0310 	and.w	r3, r3, #16
 80188e2:	2b00      	cmp	r3, #0
 80188e4:	d003      	beq.n	80188ee <f_open+0x1ba>
					res = FR_NO_FILE;
 80188e6:	2304      	movs	r3, #4
 80188e8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80188ec:	e00c      	b.n	8018908 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80188ee:	79fb      	ldrb	r3, [r7, #7]
 80188f0:	f003 0302 	and.w	r3, r3, #2
 80188f4:	2b00      	cmp	r3, #0
 80188f6:	d007      	beq.n	8018908 <f_open+0x1d4>
 80188f8:	7ebb      	ldrb	r3, [r7, #26]
 80188fa:	f003 0301 	and.w	r3, r3, #1
 80188fe:	2b00      	cmp	r3, #0
 8018900:	d002      	beq.n	8018908 <f_open+0x1d4>
						res = FR_DENIED;
 8018902:	2307      	movs	r3, #7
 8018904:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8018908:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 801890c:	2b00      	cmp	r3, #0
 801890e:	d128      	bne.n	8018962 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8018910:	79fb      	ldrb	r3, [r7, #7]
 8018912:	f003 0308 	and.w	r3, r3, #8
 8018916:	2b00      	cmp	r3, #0
 8018918:	d003      	beq.n	8018922 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 801891a:	79fb      	ldrb	r3, [r7, #7]
 801891c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018920:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8018922:	693b      	ldr	r3, [r7, #16]
 8018924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8018926:	68fb      	ldr	r3, [r7, #12]
 8018928:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801892a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8018930:	79fb      	ldrb	r3, [r7, #7]
 8018932:	f023 0301 	bic.w	r3, r3, #1
 8018936:	2b00      	cmp	r3, #0
 8018938:	bf14      	ite	ne
 801893a:	2301      	movne	r3, #1
 801893c:	2300      	moveq	r3, #0
 801893e:	b2db      	uxtb	r3, r3
 8018940:	461a      	mov	r2, r3
 8018942:	f107 0314 	add.w	r3, r7, #20
 8018946:	4611      	mov	r1, r2
 8018948:	4618      	mov	r0, r3
 801894a:	f7fe fb93 	bl	8017074 <inc_lock>
 801894e:	4602      	mov	r2, r0
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8018954:	68fb      	ldr	r3, [r7, #12]
 8018956:	691b      	ldr	r3, [r3, #16]
 8018958:	2b00      	cmp	r3, #0
 801895a:	d102      	bne.n	8018962 <f_open+0x22e>
 801895c:	2302      	movs	r3, #2
 801895e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 8018962:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018966:	2b00      	cmp	r3, #0
 8018968:	f040 8095 	bne.w	8018a96 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801896c:	693b      	ldr	r3, [r7, #16]
 801896e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8018970:	4611      	mov	r1, r2
 8018972:	4618      	mov	r0, r3
 8018974:	f7ff f9af 	bl	8017cd6 <ld_clust>
 8018978:	4602      	mov	r2, r0
 801897a:	68fb      	ldr	r3, [r7, #12]
 801897c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801897e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018980:	331c      	adds	r3, #28
 8018982:	4618      	mov	r0, r3
 8018984:	f7fe fa10 	bl	8016da8 <ld_dword>
 8018988:	4602      	mov	r2, r0
 801898a:	68fb      	ldr	r3, [r7, #12]
 801898c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	2200      	movs	r2, #0
 8018992:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8018994:	693a      	ldr	r2, [r7, #16]
 8018996:	68fb      	ldr	r3, [r7, #12]
 8018998:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801899a:	693b      	ldr	r3, [r7, #16]
 801899c:	88da      	ldrh	r2, [r3, #6]
 801899e:	68fb      	ldr	r3, [r7, #12]
 80189a0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80189a2:	68fb      	ldr	r3, [r7, #12]
 80189a4:	79fa      	ldrb	r2, [r7, #7]
 80189a6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80189a8:	68fb      	ldr	r3, [r7, #12]
 80189aa:	2200      	movs	r2, #0
 80189ac:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80189ae:	68fb      	ldr	r3, [r7, #12]
 80189b0:	2200      	movs	r2, #0
 80189b2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80189b4:	68fb      	ldr	r3, [r7, #12]
 80189b6:	2200      	movs	r2, #0
 80189b8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80189ba:	68fb      	ldr	r3, [r7, #12]
 80189bc:	3330      	adds	r3, #48	; 0x30
 80189be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80189c2:	2100      	movs	r1, #0
 80189c4:	4618      	mov	r0, r3
 80189c6:	f7fe fa7a 	bl	8016ebe <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80189ca:	79fb      	ldrb	r3, [r7, #7]
 80189cc:	f003 0320 	and.w	r3, r3, #32
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d060      	beq.n	8018a96 <f_open+0x362>
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	68db      	ldr	r3, [r3, #12]
 80189d8:	2b00      	cmp	r3, #0
 80189da:	d05c      	beq.n	8018a96 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	68da      	ldr	r2, [r3, #12]
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80189e4:	693b      	ldr	r3, [r7, #16]
 80189e6:	895b      	ldrh	r3, [r3, #10]
 80189e8:	025b      	lsls	r3, r3, #9
 80189ea:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80189ec:	68fb      	ldr	r3, [r7, #12]
 80189ee:	689b      	ldr	r3, [r3, #8]
 80189f0:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	68db      	ldr	r3, [r3, #12]
 80189f6:	657b      	str	r3, [r7, #84]	; 0x54
 80189f8:	e016      	b.n	8018a28 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 80189fa:	68fb      	ldr	r3, [r7, #12]
 80189fc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80189fe:	4618      	mov	r0, r3
 8018a00:	f7fe fd25 	bl	801744e <get_fat>
 8018a04:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8018a06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018a08:	2b01      	cmp	r3, #1
 8018a0a:	d802      	bhi.n	8018a12 <f_open+0x2de>
 8018a0c:	2302      	movs	r3, #2
 8018a0e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8018a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8018a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a18:	d102      	bne.n	8018a20 <f_open+0x2ec>
 8018a1a:	2301      	movs	r3, #1
 8018a1c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8018a20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018a22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a24:	1ad3      	subs	r3, r2, r3
 8018a26:	657b      	str	r3, [r7, #84]	; 0x54
 8018a28:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a2c:	2b00      	cmp	r3, #0
 8018a2e:	d103      	bne.n	8018a38 <f_open+0x304>
 8018a30:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8018a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8018a34:	429a      	cmp	r2, r3
 8018a36:	d8e0      	bhi.n	80189fa <f_open+0x2c6>
				}
				fp->clust = clst;
 8018a38:	68fb      	ldr	r3, [r7, #12]
 8018a3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8018a3c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8018a3e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d127      	bne.n	8018a96 <f_open+0x362>
 8018a46:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a48:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018a4c:	2b00      	cmp	r3, #0
 8018a4e:	d022      	beq.n	8018a96 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8018a50:	693b      	ldr	r3, [r7, #16]
 8018a52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8018a54:	4618      	mov	r0, r3
 8018a56:	f7fe fcdb 	bl	8017410 <clust2sect>
 8018a5a:	6478      	str	r0, [r7, #68]	; 0x44
 8018a5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a5e:	2b00      	cmp	r3, #0
 8018a60:	d103      	bne.n	8018a6a <f_open+0x336>
						res = FR_INT_ERR;
 8018a62:	2302      	movs	r3, #2
 8018a64:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8018a68:	e015      	b.n	8018a96 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8018a6a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8018a6c:	0a5a      	lsrs	r2, r3, #9
 8018a6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8018a70:	441a      	add	r2, r3
 8018a72:	68fb      	ldr	r3, [r7, #12]
 8018a74:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	7858      	ldrb	r0, [r3, #1]
 8018a7a:	68fb      	ldr	r3, [r7, #12]
 8018a7c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018a80:	68fb      	ldr	r3, [r7, #12]
 8018a82:	6a1a      	ldr	r2, [r3, #32]
 8018a84:	2301      	movs	r3, #1
 8018a86:	f7fe f919 	bl	8016cbc <disk_read>
 8018a8a:	4603      	mov	r3, r0
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d002      	beq.n	8018a96 <f_open+0x362>
 8018a90:	2301      	movs	r3, #1
 8018a92:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8018a96:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8018a9a:	2b00      	cmp	r3, #0
 8018a9c:	d002      	beq.n	8018aa4 <f_open+0x370>
 8018a9e:	68fb      	ldr	r3, [r7, #12]
 8018aa0:	2200      	movs	r2, #0
 8018aa2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8018aa4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8018aa8:	4618      	mov	r0, r3
 8018aaa:	3760      	adds	r7, #96	; 0x60
 8018aac:	46bd      	mov	sp, r7
 8018aae:	bd80      	pop	{r7, pc}

08018ab0 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8018ab0:	b580      	push	{r7, lr}
 8018ab2:	b08e      	sub	sp, #56	; 0x38
 8018ab4:	af00      	add	r7, sp, #0
 8018ab6:	60f8      	str	r0, [r7, #12]
 8018ab8:	60b9      	str	r1, [r7, #8]
 8018aba:	607a      	str	r2, [r7, #4]
 8018abc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8018ac2:	683b      	ldr	r3, [r7, #0]
 8018ac4:	2200      	movs	r2, #0
 8018ac6:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	f107 0214 	add.w	r2, r7, #20
 8018ace:	4611      	mov	r1, r2
 8018ad0:	4618      	mov	r0, r3
 8018ad2:	f7ff fdb3 	bl	801863c <validate>
 8018ad6:	4603      	mov	r3, r0
 8018ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018adc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	d107      	bne.n	8018af4 <f_read+0x44>
 8018ae4:	68fb      	ldr	r3, [r7, #12]
 8018ae6:	7d5b      	ldrb	r3, [r3, #21]
 8018ae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8018aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	d002      	beq.n	8018afa <f_read+0x4a>
 8018af4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8018af8:	e115      	b.n	8018d26 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8018afa:	68fb      	ldr	r3, [r7, #12]
 8018afc:	7d1b      	ldrb	r3, [r3, #20]
 8018afe:	f003 0301 	and.w	r3, r3, #1
 8018b02:	2b00      	cmp	r3, #0
 8018b04:	d101      	bne.n	8018b0a <f_read+0x5a>
 8018b06:	2307      	movs	r3, #7
 8018b08:	e10d      	b.n	8018d26 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	68da      	ldr	r2, [r3, #12]
 8018b0e:	68fb      	ldr	r3, [r7, #12]
 8018b10:	699b      	ldr	r3, [r3, #24]
 8018b12:	1ad3      	subs	r3, r2, r3
 8018b14:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8018b16:	687a      	ldr	r2, [r7, #4]
 8018b18:	6a3b      	ldr	r3, [r7, #32]
 8018b1a:	429a      	cmp	r2, r3
 8018b1c:	f240 80fe 	bls.w	8018d1c <f_read+0x26c>
 8018b20:	6a3b      	ldr	r3, [r7, #32]
 8018b22:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8018b24:	e0fa      	b.n	8018d1c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8018b26:	68fb      	ldr	r3, [r7, #12]
 8018b28:	699b      	ldr	r3, [r3, #24]
 8018b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018b2e:	2b00      	cmp	r3, #0
 8018b30:	f040 80c6 	bne.w	8018cc0 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8018b34:	68fb      	ldr	r3, [r7, #12]
 8018b36:	699b      	ldr	r3, [r3, #24]
 8018b38:	0a5b      	lsrs	r3, r3, #9
 8018b3a:	697a      	ldr	r2, [r7, #20]
 8018b3c:	8952      	ldrh	r2, [r2, #10]
 8018b3e:	3a01      	subs	r2, #1
 8018b40:	4013      	ands	r3, r2
 8018b42:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8018b44:	69fb      	ldr	r3, [r7, #28]
 8018b46:	2b00      	cmp	r3, #0
 8018b48:	d12f      	bne.n	8018baa <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8018b4a:	68fb      	ldr	r3, [r7, #12]
 8018b4c:	699b      	ldr	r3, [r3, #24]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d103      	bne.n	8018b5a <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	689b      	ldr	r3, [r3, #8]
 8018b56:	633b      	str	r3, [r7, #48]	; 0x30
 8018b58:	e013      	b.n	8018b82 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018b5a:	68fb      	ldr	r3, [r7, #12]
 8018b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018b5e:	2b00      	cmp	r3, #0
 8018b60:	d007      	beq.n	8018b72 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018b62:	68fb      	ldr	r3, [r7, #12]
 8018b64:	699b      	ldr	r3, [r3, #24]
 8018b66:	4619      	mov	r1, r3
 8018b68:	68f8      	ldr	r0, [r7, #12]
 8018b6a:	f7fe fef9 	bl	8017960 <clmt_clust>
 8018b6e:	6338      	str	r0, [r7, #48]	; 0x30
 8018b70:	e007      	b.n	8018b82 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8018b72:	68fa      	ldr	r2, [r7, #12]
 8018b74:	68fb      	ldr	r3, [r7, #12]
 8018b76:	69db      	ldr	r3, [r3, #28]
 8018b78:	4619      	mov	r1, r3
 8018b7a:	4610      	mov	r0, r2
 8018b7c:	f7fe fc67 	bl	801744e <get_fat>
 8018b80:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8018b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b84:	2b01      	cmp	r3, #1
 8018b86:	d804      	bhi.n	8018b92 <f_read+0xe2>
 8018b88:	68fb      	ldr	r3, [r7, #12]
 8018b8a:	2202      	movs	r2, #2
 8018b8c:	755a      	strb	r2, [r3, #21]
 8018b8e:	2302      	movs	r3, #2
 8018b90:	e0c9      	b.n	8018d26 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b98:	d104      	bne.n	8018ba4 <f_read+0xf4>
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	2201      	movs	r2, #1
 8018b9e:	755a      	strb	r2, [r3, #21]
 8018ba0:	2301      	movs	r3, #1
 8018ba2:	e0c0      	b.n	8018d26 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ba8:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018baa:	697a      	ldr	r2, [r7, #20]
 8018bac:	68fb      	ldr	r3, [r7, #12]
 8018bae:	69db      	ldr	r3, [r3, #28]
 8018bb0:	4619      	mov	r1, r3
 8018bb2:	4610      	mov	r0, r2
 8018bb4:	f7fe fc2c 	bl	8017410 <clust2sect>
 8018bb8:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018bba:	69bb      	ldr	r3, [r7, #24]
 8018bbc:	2b00      	cmp	r3, #0
 8018bbe:	d104      	bne.n	8018bca <f_read+0x11a>
 8018bc0:	68fb      	ldr	r3, [r7, #12]
 8018bc2:	2202      	movs	r2, #2
 8018bc4:	755a      	strb	r2, [r3, #21]
 8018bc6:	2302      	movs	r3, #2
 8018bc8:	e0ad      	b.n	8018d26 <f_read+0x276>
			sect += csect;
 8018bca:	69ba      	ldr	r2, [r7, #24]
 8018bcc:	69fb      	ldr	r3, [r7, #28]
 8018bce:	4413      	add	r3, r2
 8018bd0:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8018bd2:	687b      	ldr	r3, [r7, #4]
 8018bd4:	0a5b      	lsrs	r3, r3, #9
 8018bd6:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8018bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bda:	2b00      	cmp	r3, #0
 8018bdc:	d039      	beq.n	8018c52 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018bde:	69fa      	ldr	r2, [r7, #28]
 8018be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018be2:	4413      	add	r3, r2
 8018be4:	697a      	ldr	r2, [r7, #20]
 8018be6:	8952      	ldrh	r2, [r2, #10]
 8018be8:	4293      	cmp	r3, r2
 8018bea:	d905      	bls.n	8018bf8 <f_read+0x148>
					cc = fs->csize - csect;
 8018bec:	697b      	ldr	r3, [r7, #20]
 8018bee:	895b      	ldrh	r3, [r3, #10]
 8018bf0:	461a      	mov	r2, r3
 8018bf2:	69fb      	ldr	r3, [r7, #28]
 8018bf4:	1ad3      	subs	r3, r2, r3
 8018bf6:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018bf8:	697b      	ldr	r3, [r7, #20]
 8018bfa:	7858      	ldrb	r0, [r3, #1]
 8018bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bfe:	69ba      	ldr	r2, [r7, #24]
 8018c00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8018c02:	f7fe f85b 	bl	8016cbc <disk_read>
 8018c06:	4603      	mov	r3, r0
 8018c08:	2b00      	cmp	r3, #0
 8018c0a:	d004      	beq.n	8018c16 <f_read+0x166>
 8018c0c:	68fb      	ldr	r3, [r7, #12]
 8018c0e:	2201      	movs	r2, #1
 8018c10:	755a      	strb	r2, [r3, #21]
 8018c12:	2301      	movs	r3, #1
 8018c14:	e087      	b.n	8018d26 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8018c16:	68fb      	ldr	r3, [r7, #12]
 8018c18:	7d1b      	ldrb	r3, [r3, #20]
 8018c1a:	b25b      	sxtb	r3, r3
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	da14      	bge.n	8018c4a <f_read+0x19a>
 8018c20:	68fb      	ldr	r3, [r7, #12]
 8018c22:	6a1a      	ldr	r2, [r3, #32]
 8018c24:	69bb      	ldr	r3, [r7, #24]
 8018c26:	1ad3      	subs	r3, r2, r3
 8018c28:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018c2a:	429a      	cmp	r2, r3
 8018c2c:	d90d      	bls.n	8018c4a <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8018c2e:	68fb      	ldr	r3, [r7, #12]
 8018c30:	6a1a      	ldr	r2, [r3, #32]
 8018c32:	69bb      	ldr	r3, [r7, #24]
 8018c34:	1ad3      	subs	r3, r2, r3
 8018c36:	025b      	lsls	r3, r3, #9
 8018c38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018c3a:	18d0      	adds	r0, r2, r3
 8018c3c:	68fb      	ldr	r3, [r7, #12]
 8018c3e:	3330      	adds	r3, #48	; 0x30
 8018c40:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018c44:	4619      	mov	r1, r3
 8018c46:	f7fe f919 	bl	8016e7c <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8018c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c4c:	025b      	lsls	r3, r3, #9
 8018c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8018c50:	e050      	b.n	8018cf4 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8018c52:	68fb      	ldr	r3, [r7, #12]
 8018c54:	6a1b      	ldr	r3, [r3, #32]
 8018c56:	69ba      	ldr	r2, [r7, #24]
 8018c58:	429a      	cmp	r2, r3
 8018c5a:	d02e      	beq.n	8018cba <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	7d1b      	ldrb	r3, [r3, #20]
 8018c60:	b25b      	sxtb	r3, r3
 8018c62:	2b00      	cmp	r3, #0
 8018c64:	da18      	bge.n	8018c98 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018c66:	697b      	ldr	r3, [r7, #20]
 8018c68:	7858      	ldrb	r0, [r3, #1]
 8018c6a:	68fb      	ldr	r3, [r7, #12]
 8018c6c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018c70:	68fb      	ldr	r3, [r7, #12]
 8018c72:	6a1a      	ldr	r2, [r3, #32]
 8018c74:	2301      	movs	r3, #1
 8018c76:	f7fe f841 	bl	8016cfc <disk_write>
 8018c7a:	4603      	mov	r3, r0
 8018c7c:	2b00      	cmp	r3, #0
 8018c7e:	d004      	beq.n	8018c8a <f_read+0x1da>
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	2201      	movs	r2, #1
 8018c84:	755a      	strb	r2, [r3, #21]
 8018c86:	2301      	movs	r3, #1
 8018c88:	e04d      	b.n	8018d26 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	7d1b      	ldrb	r3, [r3, #20]
 8018c8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018c92:	b2da      	uxtb	r2, r3
 8018c94:	68fb      	ldr	r3, [r7, #12]
 8018c96:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8018c98:	697b      	ldr	r3, [r7, #20]
 8018c9a:	7858      	ldrb	r0, [r3, #1]
 8018c9c:	68fb      	ldr	r3, [r7, #12]
 8018c9e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018ca2:	2301      	movs	r3, #1
 8018ca4:	69ba      	ldr	r2, [r7, #24]
 8018ca6:	f7fe f809 	bl	8016cbc <disk_read>
 8018caa:	4603      	mov	r3, r0
 8018cac:	2b00      	cmp	r3, #0
 8018cae:	d004      	beq.n	8018cba <f_read+0x20a>
 8018cb0:	68fb      	ldr	r3, [r7, #12]
 8018cb2:	2201      	movs	r2, #1
 8018cb4:	755a      	strb	r2, [r3, #21]
 8018cb6:	2301      	movs	r3, #1
 8018cb8:	e035      	b.n	8018d26 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8018cba:	68fb      	ldr	r3, [r7, #12]
 8018cbc:	69ba      	ldr	r2, [r7, #24]
 8018cbe:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018cc0:	68fb      	ldr	r3, [r7, #12]
 8018cc2:	699b      	ldr	r3, [r3, #24]
 8018cc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018cc8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8018cce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cd0:	687b      	ldr	r3, [r7, #4]
 8018cd2:	429a      	cmp	r2, r3
 8018cd4:	d901      	bls.n	8018cda <f_read+0x22a>
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018ce0:	68fb      	ldr	r3, [r7, #12]
 8018ce2:	699b      	ldr	r3, [r3, #24]
 8018ce4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018ce8:	4413      	add	r3, r2
 8018cea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018cec:	4619      	mov	r1, r3
 8018cee:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018cf0:	f7fe f8c4 	bl	8016e7c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8018cf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018cf8:	4413      	add	r3, r2
 8018cfa:	627b      	str	r3, [r7, #36]	; 0x24
 8018cfc:	68fb      	ldr	r3, [r7, #12]
 8018cfe:	699a      	ldr	r2, [r3, #24]
 8018d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d02:	441a      	add	r2, r3
 8018d04:	68fb      	ldr	r3, [r7, #12]
 8018d06:	619a      	str	r2, [r3, #24]
 8018d08:	683b      	ldr	r3, [r7, #0]
 8018d0a:	681a      	ldr	r2, [r3, #0]
 8018d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d0e:	441a      	add	r2, r3
 8018d10:	683b      	ldr	r3, [r7, #0]
 8018d12:	601a      	str	r2, [r3, #0]
 8018d14:	687a      	ldr	r2, [r7, #4]
 8018d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018d18:	1ad3      	subs	r3, r2, r3
 8018d1a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	2b00      	cmp	r3, #0
 8018d20:	f47f af01 	bne.w	8018b26 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8018d24:	2300      	movs	r3, #0
}
 8018d26:	4618      	mov	r0, r3
 8018d28:	3738      	adds	r7, #56	; 0x38
 8018d2a:	46bd      	mov	sp, r7
 8018d2c:	bd80      	pop	{r7, pc}

08018d2e <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8018d2e:	b580      	push	{r7, lr}
 8018d30:	b08c      	sub	sp, #48	; 0x30
 8018d32:	af00      	add	r7, sp, #0
 8018d34:	60f8      	str	r0, [r7, #12]
 8018d36:	60b9      	str	r1, [r7, #8]
 8018d38:	607a      	str	r2, [r7, #4]
 8018d3a:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8018d3c:	68bb      	ldr	r3, [r7, #8]
 8018d3e:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8018d40:	683b      	ldr	r3, [r7, #0]
 8018d42:	2200      	movs	r2, #0
 8018d44:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8018d46:	68fb      	ldr	r3, [r7, #12]
 8018d48:	f107 0210 	add.w	r2, r7, #16
 8018d4c:	4611      	mov	r1, r2
 8018d4e:	4618      	mov	r0, r3
 8018d50:	f7ff fc74 	bl	801863c <validate>
 8018d54:	4603      	mov	r3, r0
 8018d56:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8018d5a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d107      	bne.n	8018d72 <f_write+0x44>
 8018d62:	68fb      	ldr	r3, [r7, #12]
 8018d64:	7d5b      	ldrb	r3, [r3, #21]
 8018d66:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8018d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d002      	beq.n	8018d78 <f_write+0x4a>
 8018d72:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8018d76:	e14b      	b.n	8019010 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	7d1b      	ldrb	r3, [r3, #20]
 8018d7c:	f003 0302 	and.w	r3, r3, #2
 8018d80:	2b00      	cmp	r3, #0
 8018d82:	d101      	bne.n	8018d88 <f_write+0x5a>
 8018d84:	2307      	movs	r3, #7
 8018d86:	e143      	b.n	8019010 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8018d88:	68fb      	ldr	r3, [r7, #12]
 8018d8a:	699a      	ldr	r2, [r3, #24]
 8018d8c:	687b      	ldr	r3, [r7, #4]
 8018d8e:	441a      	add	r2, r3
 8018d90:	68fb      	ldr	r3, [r7, #12]
 8018d92:	699b      	ldr	r3, [r3, #24]
 8018d94:	429a      	cmp	r2, r3
 8018d96:	f080 812d 	bcs.w	8018ff4 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	699b      	ldr	r3, [r3, #24]
 8018d9e:	43db      	mvns	r3, r3
 8018da0:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8018da2:	e127      	b.n	8018ff4 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8018da4:	68fb      	ldr	r3, [r7, #12]
 8018da6:	699b      	ldr	r3, [r3, #24]
 8018da8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	f040 80e3 	bne.w	8018f78 <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8018db2:	68fb      	ldr	r3, [r7, #12]
 8018db4:	699b      	ldr	r3, [r3, #24]
 8018db6:	0a5b      	lsrs	r3, r3, #9
 8018db8:	693a      	ldr	r2, [r7, #16]
 8018dba:	8952      	ldrh	r2, [r2, #10]
 8018dbc:	3a01      	subs	r2, #1
 8018dbe:	4013      	ands	r3, r2
 8018dc0:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d143      	bne.n	8018e50 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8018dc8:	68fb      	ldr	r3, [r7, #12]
 8018dca:	699b      	ldr	r3, [r3, #24]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	d10c      	bne.n	8018dea <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8018dd0:	68fb      	ldr	r3, [r7, #12]
 8018dd2:	689b      	ldr	r3, [r3, #8]
 8018dd4:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8018dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018dd8:	2b00      	cmp	r3, #0
 8018dda:	d11a      	bne.n	8018e12 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8018ddc:	68fb      	ldr	r3, [r7, #12]
 8018dde:	2100      	movs	r1, #0
 8018de0:	4618      	mov	r0, r3
 8018de2:	f7fe fd25 	bl	8017830 <create_chain>
 8018de6:	62b8      	str	r0, [r7, #40]	; 0x28
 8018de8:	e013      	b.n	8018e12 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8018dea:	68fb      	ldr	r3, [r7, #12]
 8018dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018dee:	2b00      	cmp	r3, #0
 8018df0:	d007      	beq.n	8018e02 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8018df2:	68fb      	ldr	r3, [r7, #12]
 8018df4:	699b      	ldr	r3, [r3, #24]
 8018df6:	4619      	mov	r1, r3
 8018df8:	68f8      	ldr	r0, [r7, #12]
 8018dfa:	f7fe fdb1 	bl	8017960 <clmt_clust>
 8018dfe:	62b8      	str	r0, [r7, #40]	; 0x28
 8018e00:	e007      	b.n	8018e12 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8018e02:	68fa      	ldr	r2, [r7, #12]
 8018e04:	68fb      	ldr	r3, [r7, #12]
 8018e06:	69db      	ldr	r3, [r3, #28]
 8018e08:	4619      	mov	r1, r3
 8018e0a:	4610      	mov	r0, r2
 8018e0c:	f7fe fd10 	bl	8017830 <create_chain>
 8018e10:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e14:	2b00      	cmp	r3, #0
 8018e16:	f000 80f2 	beq.w	8018ffe <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8018e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e1c:	2b01      	cmp	r3, #1
 8018e1e:	d104      	bne.n	8018e2a <f_write+0xfc>
 8018e20:	68fb      	ldr	r3, [r7, #12]
 8018e22:	2202      	movs	r2, #2
 8018e24:	755a      	strb	r2, [r3, #21]
 8018e26:	2302      	movs	r3, #2
 8018e28:	e0f2      	b.n	8019010 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8018e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e30:	d104      	bne.n	8018e3c <f_write+0x10e>
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	2201      	movs	r2, #1
 8018e36:	755a      	strb	r2, [r3, #21]
 8018e38:	2301      	movs	r3, #1
 8018e3a:	e0e9      	b.n	8019010 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 8018e3c:	68fb      	ldr	r3, [r7, #12]
 8018e3e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e40:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8018e42:	68fb      	ldr	r3, [r7, #12]
 8018e44:	689b      	ldr	r3, [r3, #8]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d102      	bne.n	8018e50 <f_write+0x122>
 8018e4a:	68fb      	ldr	r3, [r7, #12]
 8018e4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018e4e:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8018e50:	68fb      	ldr	r3, [r7, #12]
 8018e52:	7d1b      	ldrb	r3, [r3, #20]
 8018e54:	b25b      	sxtb	r3, r3
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	da18      	bge.n	8018e8c <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018e5a:	693b      	ldr	r3, [r7, #16]
 8018e5c:	7858      	ldrb	r0, [r3, #1]
 8018e5e:	68fb      	ldr	r3, [r7, #12]
 8018e60:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	6a1a      	ldr	r2, [r3, #32]
 8018e68:	2301      	movs	r3, #1
 8018e6a:	f7fd ff47 	bl	8016cfc <disk_write>
 8018e6e:	4603      	mov	r3, r0
 8018e70:	2b00      	cmp	r3, #0
 8018e72:	d004      	beq.n	8018e7e <f_write+0x150>
 8018e74:	68fb      	ldr	r3, [r7, #12]
 8018e76:	2201      	movs	r2, #1
 8018e78:	755a      	strb	r2, [r3, #21]
 8018e7a:	2301      	movs	r3, #1
 8018e7c:	e0c8      	b.n	8019010 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8018e7e:	68fb      	ldr	r3, [r7, #12]
 8018e80:	7d1b      	ldrb	r3, [r3, #20]
 8018e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018e86:	b2da      	uxtb	r2, r3
 8018e88:	68fb      	ldr	r3, [r7, #12]
 8018e8a:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8018e8c:	693a      	ldr	r2, [r7, #16]
 8018e8e:	68fb      	ldr	r3, [r7, #12]
 8018e90:	69db      	ldr	r3, [r3, #28]
 8018e92:	4619      	mov	r1, r3
 8018e94:	4610      	mov	r0, r2
 8018e96:	f7fe fabb 	bl	8017410 <clust2sect>
 8018e9a:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8018e9c:	697b      	ldr	r3, [r7, #20]
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d104      	bne.n	8018eac <f_write+0x17e>
 8018ea2:	68fb      	ldr	r3, [r7, #12]
 8018ea4:	2202      	movs	r2, #2
 8018ea6:	755a      	strb	r2, [r3, #21]
 8018ea8:	2302      	movs	r3, #2
 8018eaa:	e0b1      	b.n	8019010 <f_write+0x2e2>
			sect += csect;
 8018eac:	697a      	ldr	r2, [r7, #20]
 8018eae:	69bb      	ldr	r3, [r7, #24]
 8018eb0:	4413      	add	r3, r2
 8018eb2:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	0a5b      	lsrs	r3, r3, #9
 8018eb8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8018eba:	6a3b      	ldr	r3, [r7, #32]
 8018ebc:	2b00      	cmp	r3, #0
 8018ebe:	d03c      	beq.n	8018f3a <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8018ec0:	69ba      	ldr	r2, [r7, #24]
 8018ec2:	6a3b      	ldr	r3, [r7, #32]
 8018ec4:	4413      	add	r3, r2
 8018ec6:	693a      	ldr	r2, [r7, #16]
 8018ec8:	8952      	ldrh	r2, [r2, #10]
 8018eca:	4293      	cmp	r3, r2
 8018ecc:	d905      	bls.n	8018eda <f_write+0x1ac>
					cc = fs->csize - csect;
 8018ece:	693b      	ldr	r3, [r7, #16]
 8018ed0:	895b      	ldrh	r3, [r3, #10]
 8018ed2:	461a      	mov	r2, r3
 8018ed4:	69bb      	ldr	r3, [r7, #24]
 8018ed6:	1ad3      	subs	r3, r2, r3
 8018ed8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8018eda:	693b      	ldr	r3, [r7, #16]
 8018edc:	7858      	ldrb	r0, [r3, #1]
 8018ede:	6a3b      	ldr	r3, [r7, #32]
 8018ee0:	697a      	ldr	r2, [r7, #20]
 8018ee2:	69f9      	ldr	r1, [r7, #28]
 8018ee4:	f7fd ff0a 	bl	8016cfc <disk_write>
 8018ee8:	4603      	mov	r3, r0
 8018eea:	2b00      	cmp	r3, #0
 8018eec:	d004      	beq.n	8018ef8 <f_write+0x1ca>
 8018eee:	68fb      	ldr	r3, [r7, #12]
 8018ef0:	2201      	movs	r2, #1
 8018ef2:	755a      	strb	r2, [r3, #21]
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	e08b      	b.n	8019010 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8018ef8:	68fb      	ldr	r3, [r7, #12]
 8018efa:	6a1a      	ldr	r2, [r3, #32]
 8018efc:	697b      	ldr	r3, [r7, #20]
 8018efe:	1ad3      	subs	r3, r2, r3
 8018f00:	6a3a      	ldr	r2, [r7, #32]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d915      	bls.n	8018f32 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8018f06:	68fb      	ldr	r3, [r7, #12]
 8018f08:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8018f0c:	68fb      	ldr	r3, [r7, #12]
 8018f0e:	6a1a      	ldr	r2, [r3, #32]
 8018f10:	697b      	ldr	r3, [r7, #20]
 8018f12:	1ad3      	subs	r3, r2, r3
 8018f14:	025b      	lsls	r3, r3, #9
 8018f16:	69fa      	ldr	r2, [r7, #28]
 8018f18:	4413      	add	r3, r2
 8018f1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018f1e:	4619      	mov	r1, r3
 8018f20:	f7fd ffac 	bl	8016e7c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8018f24:	68fb      	ldr	r3, [r7, #12]
 8018f26:	7d1b      	ldrb	r3, [r3, #20]
 8018f28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018f2c:	b2da      	uxtb	r2, r3
 8018f2e:	68fb      	ldr	r3, [r7, #12]
 8018f30:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8018f32:	6a3b      	ldr	r3, [r7, #32]
 8018f34:	025b      	lsls	r3, r3, #9
 8018f36:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 8018f38:	e03f      	b.n	8018fba <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018f3a:	68fb      	ldr	r3, [r7, #12]
 8018f3c:	6a1b      	ldr	r3, [r3, #32]
 8018f3e:	697a      	ldr	r2, [r7, #20]
 8018f40:	429a      	cmp	r2, r3
 8018f42:	d016      	beq.n	8018f72 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8018f44:	68fb      	ldr	r3, [r7, #12]
 8018f46:	699a      	ldr	r2, [r3, #24]
 8018f48:	68fb      	ldr	r3, [r7, #12]
 8018f4a:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d210      	bcs.n	8018f72 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8018f50:	693b      	ldr	r3, [r7, #16]
 8018f52:	7858      	ldrb	r0, [r3, #1]
 8018f54:	68fb      	ldr	r3, [r7, #12]
 8018f56:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8018f5a:	2301      	movs	r3, #1
 8018f5c:	697a      	ldr	r2, [r7, #20]
 8018f5e:	f7fd fead 	bl	8016cbc <disk_read>
 8018f62:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d004      	beq.n	8018f72 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 8018f68:	68fb      	ldr	r3, [r7, #12]
 8018f6a:	2201      	movs	r2, #1
 8018f6c:	755a      	strb	r2, [r3, #21]
 8018f6e:	2301      	movs	r3, #1
 8018f70:	e04e      	b.n	8019010 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8018f72:	68fb      	ldr	r3, [r7, #12]
 8018f74:	697a      	ldr	r2, [r7, #20]
 8018f76:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8018f78:	68fb      	ldr	r3, [r7, #12]
 8018f7a:	699b      	ldr	r3, [r3, #24]
 8018f7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018f80:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8018f84:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8018f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	429a      	cmp	r2, r3
 8018f8c:	d901      	bls.n	8018f92 <f_write+0x264>
 8018f8e:	687b      	ldr	r3, [r7, #4]
 8018f90:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8018f92:	68fb      	ldr	r3, [r7, #12]
 8018f94:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8018f98:	68fb      	ldr	r3, [r7, #12]
 8018f9a:	699b      	ldr	r3, [r3, #24]
 8018f9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8018fa0:	4413      	add	r3, r2
 8018fa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018fa4:	69f9      	ldr	r1, [r7, #28]
 8018fa6:	4618      	mov	r0, r3
 8018fa8:	f7fd ff68 	bl	8016e7c <mem_cpy>
		fp->flag |= FA_DIRTY;
 8018fac:	68fb      	ldr	r3, [r7, #12]
 8018fae:	7d1b      	ldrb	r3, [r3, #20]
 8018fb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8018fb4:	b2da      	uxtb	r2, r3
 8018fb6:	68fb      	ldr	r3, [r7, #12]
 8018fb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8018fba:	69fa      	ldr	r2, [r7, #28]
 8018fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fbe:	4413      	add	r3, r2
 8018fc0:	61fb      	str	r3, [r7, #28]
 8018fc2:	68fb      	ldr	r3, [r7, #12]
 8018fc4:	699a      	ldr	r2, [r3, #24]
 8018fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fc8:	441a      	add	r2, r3
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	619a      	str	r2, [r3, #24]
 8018fce:	68fb      	ldr	r3, [r7, #12]
 8018fd0:	68da      	ldr	r2, [r3, #12]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	699b      	ldr	r3, [r3, #24]
 8018fd6:	429a      	cmp	r2, r3
 8018fd8:	bf38      	it	cc
 8018fda:	461a      	movcc	r2, r3
 8018fdc:	68fb      	ldr	r3, [r7, #12]
 8018fde:	60da      	str	r2, [r3, #12]
 8018fe0:	683b      	ldr	r3, [r7, #0]
 8018fe2:	681a      	ldr	r2, [r3, #0]
 8018fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018fe6:	441a      	add	r2, r3
 8018fe8:	683b      	ldr	r3, [r7, #0]
 8018fea:	601a      	str	r2, [r3, #0]
 8018fec:	687a      	ldr	r2, [r7, #4]
 8018fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff0:	1ad3      	subs	r3, r2, r3
 8018ff2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8018ff4:	687b      	ldr	r3, [r7, #4]
 8018ff6:	2b00      	cmp	r3, #0
 8018ff8:	f47f aed4 	bne.w	8018da4 <f_write+0x76>
 8018ffc:	e000      	b.n	8019000 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8018ffe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8019000:	68fb      	ldr	r3, [r7, #12]
 8019002:	7d1b      	ldrb	r3, [r3, #20]
 8019004:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019008:	b2da      	uxtb	r2, r3
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 801900e:	2300      	movs	r3, #0
}
 8019010:	4618      	mov	r0, r3
 8019012:	3730      	adds	r7, #48	; 0x30
 8019014:	46bd      	mov	sp, r7
 8019016:	bd80      	pop	{r7, pc}

08019018 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8019018:	b580      	push	{r7, lr}
 801901a:	b086      	sub	sp, #24
 801901c:	af00      	add	r7, sp, #0
 801901e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8019020:	687b      	ldr	r3, [r7, #4]
 8019022:	f107 0208 	add.w	r2, r7, #8
 8019026:	4611      	mov	r1, r2
 8019028:	4618      	mov	r0, r3
 801902a:	f7ff fb07 	bl	801863c <validate>
 801902e:	4603      	mov	r3, r0
 8019030:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8019032:	7dfb      	ldrb	r3, [r7, #23]
 8019034:	2b00      	cmp	r3, #0
 8019036:	d168      	bne.n	801910a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8019038:	687b      	ldr	r3, [r7, #4]
 801903a:	7d1b      	ldrb	r3, [r3, #20]
 801903c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019040:	2b00      	cmp	r3, #0
 8019042:	d062      	beq.n	801910a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	7d1b      	ldrb	r3, [r3, #20]
 8019048:	b25b      	sxtb	r3, r3
 801904a:	2b00      	cmp	r3, #0
 801904c:	da15      	bge.n	801907a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 801904e:	68bb      	ldr	r3, [r7, #8]
 8019050:	7858      	ldrb	r0, [r3, #1]
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8019058:	687b      	ldr	r3, [r7, #4]
 801905a:	6a1a      	ldr	r2, [r3, #32]
 801905c:	2301      	movs	r3, #1
 801905e:	f7fd fe4d 	bl	8016cfc <disk_write>
 8019062:	4603      	mov	r3, r0
 8019064:	2b00      	cmp	r3, #0
 8019066:	d001      	beq.n	801906c <f_sync+0x54>
 8019068:	2301      	movs	r3, #1
 801906a:	e04f      	b.n	801910c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	7d1b      	ldrb	r3, [r3, #20]
 8019070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8019074:	b2da      	uxtb	r2, r3
 8019076:	687b      	ldr	r3, [r7, #4]
 8019078:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 801907a:	f7fa fce1 	bl	8013a40 <get_fattime>
 801907e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8019080:	68ba      	ldr	r2, [r7, #8]
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019086:	4619      	mov	r1, r3
 8019088:	4610      	mov	r0, r2
 801908a:	f7fe f925 	bl	80172d8 <move_window>
 801908e:	4603      	mov	r3, r0
 8019090:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8019092:	7dfb      	ldrb	r3, [r7, #23]
 8019094:	2b00      	cmp	r3, #0
 8019096:	d138      	bne.n	801910a <f_sync+0xf2>
					dir = fp->dir_ptr;
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801909c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 801909e:	68fb      	ldr	r3, [r7, #12]
 80190a0:	330b      	adds	r3, #11
 80190a2:	781a      	ldrb	r2, [r3, #0]
 80190a4:	68fb      	ldr	r3, [r7, #12]
 80190a6:	330b      	adds	r3, #11
 80190a8:	f042 0220 	orr.w	r2, r2, #32
 80190ac:	b2d2      	uxtb	r2, r2
 80190ae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80190b0:	687b      	ldr	r3, [r7, #4]
 80190b2:	6818      	ldr	r0, [r3, #0]
 80190b4:	687b      	ldr	r3, [r7, #4]
 80190b6:	689b      	ldr	r3, [r3, #8]
 80190b8:	461a      	mov	r2, r3
 80190ba:	68f9      	ldr	r1, [r7, #12]
 80190bc:	f7fe fe2a 	bl	8017d14 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80190c0:	68fb      	ldr	r3, [r7, #12]
 80190c2:	f103 021c 	add.w	r2, r3, #28
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	68db      	ldr	r3, [r3, #12]
 80190ca:	4619      	mov	r1, r3
 80190cc:	4610      	mov	r0, r2
 80190ce:	f7fd fea9 	bl	8016e24 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	3316      	adds	r3, #22
 80190d6:	6939      	ldr	r1, [r7, #16]
 80190d8:	4618      	mov	r0, r3
 80190da:	f7fd fea3 	bl	8016e24 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80190de:	68fb      	ldr	r3, [r7, #12]
 80190e0:	3312      	adds	r3, #18
 80190e2:	2100      	movs	r1, #0
 80190e4:	4618      	mov	r0, r3
 80190e6:	f7fd fe82 	bl	8016dee <st_word>
					fs->wflag = 1;
 80190ea:	68bb      	ldr	r3, [r7, #8]
 80190ec:	2201      	movs	r2, #1
 80190ee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80190f0:	68bb      	ldr	r3, [r7, #8]
 80190f2:	4618      	mov	r0, r3
 80190f4:	f7fe f91e 	bl	8017334 <sync_fs>
 80190f8:	4603      	mov	r3, r0
 80190fa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80190fc:	687b      	ldr	r3, [r7, #4]
 80190fe:	7d1b      	ldrb	r3, [r3, #20]
 8019100:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8019104:	b2da      	uxtb	r2, r3
 8019106:	687b      	ldr	r3, [r7, #4]
 8019108:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 801910a:	7dfb      	ldrb	r3, [r7, #23]
}
 801910c:	4618      	mov	r0, r3
 801910e:	3718      	adds	r7, #24
 8019110:	46bd      	mov	sp, r7
 8019112:	bd80      	pop	{r7, pc}

08019114 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8019114:	b580      	push	{r7, lr}
 8019116:	b084      	sub	sp, #16
 8019118:	af00      	add	r7, sp, #0
 801911a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f7ff ff7b 	bl	8019018 <f_sync>
 8019122:	4603      	mov	r3, r0
 8019124:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8019126:	7bfb      	ldrb	r3, [r7, #15]
 8019128:	2b00      	cmp	r3, #0
 801912a:	d118      	bne.n	801915e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 801912c:	687b      	ldr	r3, [r7, #4]
 801912e:	f107 0208 	add.w	r2, r7, #8
 8019132:	4611      	mov	r1, r2
 8019134:	4618      	mov	r0, r3
 8019136:	f7ff fa81 	bl	801863c <validate>
 801913a:	4603      	mov	r3, r0
 801913c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 801913e:	7bfb      	ldrb	r3, [r7, #15]
 8019140:	2b00      	cmp	r3, #0
 8019142:	d10c      	bne.n	801915e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8019144:	687b      	ldr	r3, [r7, #4]
 8019146:	691b      	ldr	r3, [r3, #16]
 8019148:	4618      	mov	r0, r3
 801914a:	f7fe f821 	bl	8017190 <dec_lock>
 801914e:	4603      	mov	r3, r0
 8019150:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8019152:	7bfb      	ldrb	r3, [r7, #15]
 8019154:	2b00      	cmp	r3, #0
 8019156:	d102      	bne.n	801915e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	2200      	movs	r2, #0
 801915c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 801915e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019160:	4618      	mov	r0, r3
 8019162:	3710      	adds	r7, #16
 8019164:	46bd      	mov	sp, r7
 8019166:	bd80      	pop	{r7, pc}

08019168 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8019168:	b480      	push	{r7}
 801916a:	b087      	sub	sp, #28
 801916c:	af00      	add	r7, sp, #0
 801916e:	60f8      	str	r0, [r7, #12]
 8019170:	60b9      	str	r1, [r7, #8]
 8019172:	4613      	mov	r3, r2
 8019174:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8019176:	2301      	movs	r3, #1
 8019178:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801917a:	2300      	movs	r3, #0
 801917c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801917e:	4b1f      	ldr	r3, [pc, #124]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 8019180:	7a5b      	ldrb	r3, [r3, #9]
 8019182:	b2db      	uxtb	r3, r3
 8019184:	2b00      	cmp	r3, #0
 8019186:	d131      	bne.n	80191ec <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8019188:	4b1c      	ldr	r3, [pc, #112]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 801918a:	7a5b      	ldrb	r3, [r3, #9]
 801918c:	b2db      	uxtb	r3, r3
 801918e:	461a      	mov	r2, r3
 8019190:	4b1a      	ldr	r3, [pc, #104]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 8019192:	2100      	movs	r1, #0
 8019194:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8019196:	4b19      	ldr	r3, [pc, #100]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 8019198:	7a5b      	ldrb	r3, [r3, #9]
 801919a:	b2db      	uxtb	r3, r3
 801919c:	4a17      	ldr	r2, [pc, #92]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 801919e:	009b      	lsls	r3, r3, #2
 80191a0:	4413      	add	r3, r2
 80191a2:	68fa      	ldr	r2, [r7, #12]
 80191a4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80191a6:	4b15      	ldr	r3, [pc, #84]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 80191a8:	7a5b      	ldrb	r3, [r3, #9]
 80191aa:	b2db      	uxtb	r3, r3
 80191ac:	461a      	mov	r2, r3
 80191ae:	4b13      	ldr	r3, [pc, #76]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 80191b0:	4413      	add	r3, r2
 80191b2:	79fa      	ldrb	r2, [r7, #7]
 80191b4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80191b6:	4b11      	ldr	r3, [pc, #68]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 80191b8:	7a5b      	ldrb	r3, [r3, #9]
 80191ba:	b2db      	uxtb	r3, r3
 80191bc:	1c5a      	adds	r2, r3, #1
 80191be:	b2d1      	uxtb	r1, r2
 80191c0:	4a0e      	ldr	r2, [pc, #56]	; (80191fc <FATFS_LinkDriverEx+0x94>)
 80191c2:	7251      	strb	r1, [r2, #9]
 80191c4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80191c6:	7dbb      	ldrb	r3, [r7, #22]
 80191c8:	3330      	adds	r3, #48	; 0x30
 80191ca:	b2da      	uxtb	r2, r3
 80191cc:	68bb      	ldr	r3, [r7, #8]
 80191ce:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80191d0:	68bb      	ldr	r3, [r7, #8]
 80191d2:	3301      	adds	r3, #1
 80191d4:	223a      	movs	r2, #58	; 0x3a
 80191d6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80191d8:	68bb      	ldr	r3, [r7, #8]
 80191da:	3302      	adds	r3, #2
 80191dc:	222f      	movs	r2, #47	; 0x2f
 80191de:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80191e0:	68bb      	ldr	r3, [r7, #8]
 80191e2:	3303      	adds	r3, #3
 80191e4:	2200      	movs	r2, #0
 80191e6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80191e8:	2300      	movs	r3, #0
 80191ea:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80191ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80191ee:	4618      	mov	r0, r3
 80191f0:	371c      	adds	r7, #28
 80191f2:	46bd      	mov	sp, r7
 80191f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191f8:	4770      	bx	lr
 80191fa:	bf00      	nop
 80191fc:	240404f8 	.word	0x240404f8

08019200 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8019200:	b580      	push	{r7, lr}
 8019202:	b082      	sub	sp, #8
 8019204:	af00      	add	r7, sp, #0
 8019206:	6078      	str	r0, [r7, #4]
 8019208:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801920a:	2200      	movs	r2, #0
 801920c:	6839      	ldr	r1, [r7, #0]
 801920e:	6878      	ldr	r0, [r7, #4]
 8019210:	f7ff ffaa 	bl	8019168 <FATFS_LinkDriverEx>
 8019214:	4603      	mov	r3, r0
}
 8019216:	4618      	mov	r0, r3
 8019218:	3708      	adds	r7, #8
 801921a:	46bd      	mov	sp, r7
 801921c:	bd80      	pop	{r7, pc}
	...

08019220 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8019224:	2200      	movs	r2, #0
 8019226:	4913      	ldr	r1, [pc, #76]	; (8019274 <MX_USB_DEVICE_Init+0x54>)
 8019228:	4813      	ldr	r0, [pc, #76]	; (8019278 <MX_USB_DEVICE_Init+0x58>)
 801922a:	f7fc fc20 	bl	8015a6e <USBD_Init>
 801922e:	4603      	mov	r3, r0
 8019230:	2b00      	cmp	r3, #0
 8019232:	d001      	beq.n	8019238 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8019234:	f7eb f8f8 	bl	8004428 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 8019238:	4910      	ldr	r1, [pc, #64]	; (801927c <MX_USB_DEVICE_Init+0x5c>)
 801923a:	480f      	ldr	r0, [pc, #60]	; (8019278 <MX_USB_DEVICE_Init+0x58>)
 801923c:	f7fc fc4d 	bl	8015ada <USBD_RegisterClass>
 8019240:	4603      	mov	r3, r0
 8019242:	2b00      	cmp	r3, #0
 8019244:	d001      	beq.n	801924a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8019246:	f7eb f8ef 	bl	8004428 <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 801924a:	490d      	ldr	r1, [pc, #52]	; (8019280 <MX_USB_DEVICE_Init+0x60>)
 801924c:	480a      	ldr	r0, [pc, #40]	; (8019278 <MX_USB_DEVICE_Init+0x58>)
 801924e:	f7fa fff7 	bl	8014240 <USBD_MSC_RegisterStorage>
 8019252:	4603      	mov	r3, r0
 8019254:	2b00      	cmp	r3, #0
 8019256:	d001      	beq.n	801925c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8019258:	f7eb f8e6 	bl	8004428 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801925c:	4806      	ldr	r0, [pc, #24]	; (8019278 <MX_USB_DEVICE_Init+0x58>)
 801925e:	f7fc fc5d 	bl	8015b1c <USBD_Start>
 8019262:	4603      	mov	r3, r0
 8019264:	2b00      	cmp	r3, #0
 8019266:	d001      	beq.n	801926c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8019268:	f7eb f8de 	bl	8004428 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 801926c:	f7f0 fe38 	bl	8009ee0 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019270:	bf00      	nop
 8019272:	bd80      	pop	{r7, pc}
 8019274:	24000108 	.word	0x24000108
 8019278:	24044e70 	.word	0x24044e70
 801927c:	24000020 	.word	0x24000020
 8019280:	24000158 	.word	0x24000158

08019284 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019284:	b480      	push	{r7}
 8019286:	b083      	sub	sp, #12
 8019288:	af00      	add	r7, sp, #0
 801928a:	4603      	mov	r3, r0
 801928c:	6039      	str	r1, [r7, #0]
 801928e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8019290:	683b      	ldr	r3, [r7, #0]
 8019292:	2212      	movs	r2, #18
 8019294:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019296:	4b03      	ldr	r3, [pc, #12]	; (80192a4 <USBD_FS_DeviceDescriptor+0x20>)
}
 8019298:	4618      	mov	r0, r3
 801929a:	370c      	adds	r7, #12
 801929c:	46bd      	mov	sp, r7
 801929e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192a2:	4770      	bx	lr
 80192a4:	24000124 	.word	0x24000124

080192a8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192a8:	b480      	push	{r7}
 80192aa:	b083      	sub	sp, #12
 80192ac:	af00      	add	r7, sp, #0
 80192ae:	4603      	mov	r3, r0
 80192b0:	6039      	str	r1, [r7, #0]
 80192b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80192b4:	683b      	ldr	r3, [r7, #0]
 80192b6:	2204      	movs	r2, #4
 80192b8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80192ba:	4b03      	ldr	r3, [pc, #12]	; (80192c8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80192bc:	4618      	mov	r0, r3
 80192be:	370c      	adds	r7, #12
 80192c0:	46bd      	mov	sp, r7
 80192c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80192c6:	4770      	bx	lr
 80192c8:	24000138 	.word	0x24000138

080192cc <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80192cc:	b580      	push	{r7, lr}
 80192ce:	b082      	sub	sp, #8
 80192d0:	af00      	add	r7, sp, #0
 80192d2:	4603      	mov	r3, r0
 80192d4:	6039      	str	r1, [r7, #0]
 80192d6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80192d8:	79fb      	ldrb	r3, [r7, #7]
 80192da:	2b00      	cmp	r3, #0
 80192dc:	d105      	bne.n	80192ea <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80192de:	683a      	ldr	r2, [r7, #0]
 80192e0:	4907      	ldr	r1, [pc, #28]	; (8019300 <USBD_FS_ProductStrDescriptor+0x34>)
 80192e2:	4808      	ldr	r0, [pc, #32]	; (8019304 <USBD_FS_ProductStrDescriptor+0x38>)
 80192e4:	f7fd fbe7 	bl	8016ab6 <USBD_GetString>
 80192e8:	e004      	b.n	80192f4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80192ea:	683a      	ldr	r2, [r7, #0]
 80192ec:	4904      	ldr	r1, [pc, #16]	; (8019300 <USBD_FS_ProductStrDescriptor+0x34>)
 80192ee:	4805      	ldr	r0, [pc, #20]	; (8019304 <USBD_FS_ProductStrDescriptor+0x38>)
 80192f0:	f7fd fbe1 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80192f4:	4b02      	ldr	r3, [pc, #8]	; (8019300 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80192f6:	4618      	mov	r0, r3
 80192f8:	3708      	adds	r7, #8
 80192fa:	46bd      	mov	sp, r7
 80192fc:	bd80      	pop	{r7, pc}
 80192fe:	bf00      	nop
 8019300:	24045140 	.word	0x24045140
 8019304:	0801c4fc 	.word	0x0801c4fc

08019308 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019308:	b580      	push	{r7, lr}
 801930a:	b082      	sub	sp, #8
 801930c:	af00      	add	r7, sp, #0
 801930e:	4603      	mov	r3, r0
 8019310:	6039      	str	r1, [r7, #0]
 8019312:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8019314:	683a      	ldr	r2, [r7, #0]
 8019316:	4904      	ldr	r1, [pc, #16]	; (8019328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8019318:	4804      	ldr	r0, [pc, #16]	; (801932c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801931a:	f7fd fbcc 	bl	8016ab6 <USBD_GetString>
  return USBD_StrDesc;
 801931e:	4b02      	ldr	r3, [pc, #8]	; (8019328 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8019320:	4618      	mov	r0, r3
 8019322:	3708      	adds	r7, #8
 8019324:	46bd      	mov	sp, r7
 8019326:	bd80      	pop	{r7, pc}
 8019328:	24045140 	.word	0x24045140
 801932c:	0801c510 	.word	0x0801c510

08019330 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	4603      	mov	r3, r0
 8019338:	6039      	str	r1, [r7, #0]
 801933a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 801933c:	683b      	ldr	r3, [r7, #0]
 801933e:	221a      	movs	r2, #26
 8019340:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8019342:	f000 f843 	bl	80193cc <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8019346:	4b02      	ldr	r3, [pc, #8]	; (8019350 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8019348:	4618      	mov	r0, r3
 801934a:	3708      	adds	r7, #8
 801934c:	46bd      	mov	sp, r7
 801934e:	bd80      	pop	{r7, pc}
 8019350:	2400013c 	.word	0x2400013c

08019354 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b082      	sub	sp, #8
 8019358:	af00      	add	r7, sp, #0
 801935a:	4603      	mov	r3, r0
 801935c:	6039      	str	r1, [r7, #0]
 801935e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8019360:	79fb      	ldrb	r3, [r7, #7]
 8019362:	2b00      	cmp	r3, #0
 8019364:	d105      	bne.n	8019372 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019366:	683a      	ldr	r2, [r7, #0]
 8019368:	4907      	ldr	r1, [pc, #28]	; (8019388 <USBD_FS_ConfigStrDescriptor+0x34>)
 801936a:	4808      	ldr	r0, [pc, #32]	; (801938c <USBD_FS_ConfigStrDescriptor+0x38>)
 801936c:	f7fd fba3 	bl	8016ab6 <USBD_GetString>
 8019370:	e004      	b.n	801937c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019372:	683a      	ldr	r2, [r7, #0]
 8019374:	4904      	ldr	r1, [pc, #16]	; (8019388 <USBD_FS_ConfigStrDescriptor+0x34>)
 8019376:	4805      	ldr	r0, [pc, #20]	; (801938c <USBD_FS_ConfigStrDescriptor+0x38>)
 8019378:	f7fd fb9d 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 801937c:	4b02      	ldr	r3, [pc, #8]	; (8019388 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801937e:	4618      	mov	r0, r3
 8019380:	3708      	adds	r7, #8
 8019382:	46bd      	mov	sp, r7
 8019384:	bd80      	pop	{r7, pc}
 8019386:	bf00      	nop
 8019388:	24045140 	.word	0x24045140
 801938c:	0801c524 	.word	0x0801c524

08019390 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019390:	b580      	push	{r7, lr}
 8019392:	b082      	sub	sp, #8
 8019394:	af00      	add	r7, sp, #0
 8019396:	4603      	mov	r3, r0
 8019398:	6039      	str	r1, [r7, #0]
 801939a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801939c:	79fb      	ldrb	r3, [r7, #7]
 801939e:	2b00      	cmp	r3, #0
 80193a0:	d105      	bne.n	80193ae <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80193a2:	683a      	ldr	r2, [r7, #0]
 80193a4:	4907      	ldr	r1, [pc, #28]	; (80193c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80193a6:	4808      	ldr	r0, [pc, #32]	; (80193c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80193a8:	f7fd fb85 	bl	8016ab6 <USBD_GetString>
 80193ac:	e004      	b.n	80193b8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80193ae:	683a      	ldr	r2, [r7, #0]
 80193b0:	4904      	ldr	r1, [pc, #16]	; (80193c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80193b2:	4805      	ldr	r0, [pc, #20]	; (80193c8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80193b4:	f7fd fb7f 	bl	8016ab6 <USBD_GetString>
  }
  return USBD_StrDesc;
 80193b8:	4b02      	ldr	r3, [pc, #8]	; (80193c4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80193ba:	4618      	mov	r0, r3
 80193bc:	3708      	adds	r7, #8
 80193be:	46bd      	mov	sp, r7
 80193c0:	bd80      	pop	{r7, pc}
 80193c2:	bf00      	nop
 80193c4:	24045140 	.word	0x24045140
 80193c8:	0801c530 	.word	0x0801c530

080193cc <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80193cc:	b580      	push	{r7, lr}
 80193ce:	b084      	sub	sp, #16
 80193d0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80193d2:	4b0f      	ldr	r3, [pc, #60]	; (8019410 <Get_SerialNum+0x44>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80193d8:	4b0e      	ldr	r3, [pc, #56]	; (8019414 <Get_SerialNum+0x48>)
 80193da:	681b      	ldr	r3, [r3, #0]
 80193dc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80193de:	4b0e      	ldr	r3, [pc, #56]	; (8019418 <Get_SerialNum+0x4c>)
 80193e0:	681b      	ldr	r3, [r3, #0]
 80193e2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80193e4:	68fa      	ldr	r2, [r7, #12]
 80193e6:	687b      	ldr	r3, [r7, #4]
 80193e8:	4413      	add	r3, r2
 80193ea:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80193ec:	68fb      	ldr	r3, [r7, #12]
 80193ee:	2b00      	cmp	r3, #0
 80193f0:	d009      	beq.n	8019406 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80193f2:	2208      	movs	r2, #8
 80193f4:	4909      	ldr	r1, [pc, #36]	; (801941c <Get_SerialNum+0x50>)
 80193f6:	68f8      	ldr	r0, [r7, #12]
 80193f8:	f000 f814 	bl	8019424 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80193fc:	2204      	movs	r2, #4
 80193fe:	4908      	ldr	r1, [pc, #32]	; (8019420 <Get_SerialNum+0x54>)
 8019400:	68b8      	ldr	r0, [r7, #8]
 8019402:	f000 f80f 	bl	8019424 <IntToUnicode>
  }
}
 8019406:	bf00      	nop
 8019408:	3710      	adds	r7, #16
 801940a:	46bd      	mov	sp, r7
 801940c:	bd80      	pop	{r7, pc}
 801940e:	bf00      	nop
 8019410:	1ff1e800 	.word	0x1ff1e800
 8019414:	1ff1e804 	.word	0x1ff1e804
 8019418:	1ff1e808 	.word	0x1ff1e808
 801941c:	2400013e 	.word	0x2400013e
 8019420:	2400014e 	.word	0x2400014e

08019424 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8019424:	b480      	push	{r7}
 8019426:	b087      	sub	sp, #28
 8019428:	af00      	add	r7, sp, #0
 801942a:	60f8      	str	r0, [r7, #12]
 801942c:	60b9      	str	r1, [r7, #8]
 801942e:	4613      	mov	r3, r2
 8019430:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8019432:	2300      	movs	r3, #0
 8019434:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8019436:	2300      	movs	r3, #0
 8019438:	75fb      	strb	r3, [r7, #23]
 801943a:	e027      	b.n	801948c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801943c:	68fb      	ldr	r3, [r7, #12]
 801943e:	0f1b      	lsrs	r3, r3, #28
 8019440:	2b09      	cmp	r3, #9
 8019442:	d80b      	bhi.n	801945c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8019444:	68fb      	ldr	r3, [r7, #12]
 8019446:	0f1b      	lsrs	r3, r3, #28
 8019448:	b2da      	uxtb	r2, r3
 801944a:	7dfb      	ldrb	r3, [r7, #23]
 801944c:	005b      	lsls	r3, r3, #1
 801944e:	4619      	mov	r1, r3
 8019450:	68bb      	ldr	r3, [r7, #8]
 8019452:	440b      	add	r3, r1
 8019454:	3230      	adds	r2, #48	; 0x30
 8019456:	b2d2      	uxtb	r2, r2
 8019458:	701a      	strb	r2, [r3, #0]
 801945a:	e00a      	b.n	8019472 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801945c:	68fb      	ldr	r3, [r7, #12]
 801945e:	0f1b      	lsrs	r3, r3, #28
 8019460:	b2da      	uxtb	r2, r3
 8019462:	7dfb      	ldrb	r3, [r7, #23]
 8019464:	005b      	lsls	r3, r3, #1
 8019466:	4619      	mov	r1, r3
 8019468:	68bb      	ldr	r3, [r7, #8]
 801946a:	440b      	add	r3, r1
 801946c:	3237      	adds	r2, #55	; 0x37
 801946e:	b2d2      	uxtb	r2, r2
 8019470:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8019472:	68fb      	ldr	r3, [r7, #12]
 8019474:	011b      	lsls	r3, r3, #4
 8019476:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019478:	7dfb      	ldrb	r3, [r7, #23]
 801947a:	005b      	lsls	r3, r3, #1
 801947c:	3301      	adds	r3, #1
 801947e:	68ba      	ldr	r2, [r7, #8]
 8019480:	4413      	add	r3, r2
 8019482:	2200      	movs	r2, #0
 8019484:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019486:	7dfb      	ldrb	r3, [r7, #23]
 8019488:	3301      	adds	r3, #1
 801948a:	75fb      	strb	r3, [r7, #23]
 801948c:	7dfa      	ldrb	r2, [r7, #23]
 801948e:	79fb      	ldrb	r3, [r7, #7]
 8019490:	429a      	cmp	r2, r3
 8019492:	d3d3      	bcc.n	801943c <IntToUnicode+0x18>
  }
}
 8019494:	bf00      	nop
 8019496:	371c      	adds	r7, #28
 8019498:	46bd      	mov	sp, r7
 801949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801949e:	4770      	bx	lr

080194a0 <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 80194a0:	b480      	push	{r7}
 80194a2:	b083      	sub	sp, #12
 80194a4:	af00      	add	r7, sp, #0
 80194a6:	4603      	mov	r3, r0
 80194a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
  return (USBD_OK);
 80194aa:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 80194ac:	4618      	mov	r0, r3
 80194ae:	370c      	adds	r7, #12
 80194b0:	46bd      	mov	sp, r7
 80194b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194b6:	4770      	bx	lr

080194b8 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 80194b8:	b580      	push	{r7, lr}
 80194ba:	b08e      	sub	sp, #56	; 0x38
 80194bc:	af00      	add	r7, sp, #0
 80194be:	4603      	mov	r3, r0
 80194c0:	60b9      	str	r1, [r7, #8]
 80194c2:	607a      	str	r2, [r7, #4]
 80194c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
	HAL_SD_CardInfoTypeDef info;
	  int8_t ret = -1;
 80194c6:	23ff      	movs	r3, #255	; 0xff
 80194c8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

	  HAL_SD_GetCardInfo(&hsd1, &info);
 80194cc:	f107 0310 	add.w	r3, r7, #16
 80194d0:	4619      	mov	r1, r3
 80194d2:	480a      	ldr	r0, [pc, #40]	; (80194fc <STORAGE_GetCapacity_FS+0x44>)
 80194d4:	f7f5 f8a4 	bl	800e620 <HAL_SD_GetCardInfo>

	  *block_num =  info.LogBlockNbr  - 1;
 80194d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80194da:	1e5a      	subs	r2, r3, #1
 80194dc:	68bb      	ldr	r3, [r7, #8]
 80194de:	601a      	str	r2, [r3, #0]
	  *block_size = info.LogBlockSize;
 80194e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80194e2:	b29a      	uxth	r2, r3
 80194e4:	687b      	ldr	r3, [r7, #4]
 80194e6:	801a      	strh	r2, [r3, #0]
	  ret = 0;
 80194e8:	2300      	movs	r3, #0
 80194ea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	  return ret;
 80194ee:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
  /* USER CODE END 3 */
}
 80194f2:	4618      	mov	r0, r3
 80194f4:	3738      	adds	r7, #56	; 0x38
 80194f6:	46bd      	mov	sp, r7
 80194f8:	bd80      	pop	{r7, pc}
 80194fa:	bf00      	nop
 80194fc:	2404470c 	.word	0x2404470c

08019500 <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 8019500:	b480      	push	{r7}
 8019502:	b083      	sub	sp, #12
 8019504:	af00      	add	r7, sp, #0
 8019506:	4603      	mov	r3, r0
 8019508:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801950a:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801950c:	4618      	mov	r0, r3
 801950e:	370c      	adds	r7, #12
 8019510:	46bd      	mov	sp, r7
 8019512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019516:	4770      	bx	lr

08019518 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 8019518:	b480      	push	{r7}
 801951a:	b083      	sub	sp, #12
 801951c:	af00      	add	r7, sp, #0
 801951e:	4603      	mov	r3, r0
 8019520:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8019522:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8019524:	4618      	mov	r0, r3
 8019526:	370c      	adds	r7, #12
 8019528:	46bd      	mov	sp, r7
 801952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801952e:	4770      	bx	lr

08019530 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8019530:	b580      	push	{r7, lr}
 8019532:	b088      	sub	sp, #32
 8019534:	af02      	add	r7, sp, #8
 8019536:	60b9      	str	r1, [r7, #8]
 8019538:	607a      	str	r2, [r7, #4]
 801953a:	461a      	mov	r2, r3
 801953c:	4603      	mov	r3, r0
 801953e:	73fb      	strb	r3, [r7, #15]
 8019540:	4613      	mov	r3, r2
 8019542:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	int8_t ret = -1;
 8019544:	23ff      	movs	r3, #255	; 0xff
 8019546:	75fb      	strb	r3, [r7, #23]

	HAL_SD_ReadBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8019548:	89ba      	ldrh	r2, [r7, #12]
 801954a:	f04f 33ff 	mov.w	r3, #4294967295
 801954e:	9300      	str	r3, [sp, #0]
 8019550:	4613      	mov	r3, r2
 8019552:	687a      	ldr	r2, [r7, #4]
 8019554:	68b9      	ldr	r1, [r7, #8]
 8019556:	4809      	ldr	r0, [pc, #36]	; (801957c <STORAGE_Read_FS+0x4c>)
 8019558:	f7f3 ffd4 	bl	800d504 <HAL_SD_ReadBlocks>

	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 801955c:	bf00      	nop
 801955e:	4807      	ldr	r0, [pc, #28]	; (801957c <STORAGE_Read_FS+0x4c>)
 8019560:	f7f5 f934 	bl	800e7cc <HAL_SD_GetCardState>
 8019564:	4603      	mov	r3, r0
 8019566:	2b04      	cmp	r3, #4
 8019568:	d1f9      	bne.n	801955e <STORAGE_Read_FS+0x2e>
	ret = 0;
 801956a:	2300      	movs	r3, #0
 801956c:	75fb      	strb	r3, [r7, #23]
	return ret;
 801956e:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 6 */
}
 8019572:	4618      	mov	r0, r3
 8019574:	3718      	adds	r7, #24
 8019576:	46bd      	mov	sp, r7
 8019578:	bd80      	pop	{r7, pc}
 801957a:	bf00      	nop
 801957c:	2404470c 	.word	0x2404470c

08019580 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 8019580:	b580      	push	{r7, lr}
 8019582:	b088      	sub	sp, #32
 8019584:	af02      	add	r7, sp, #8
 8019586:	60b9      	str	r1, [r7, #8]
 8019588:	607a      	str	r2, [r7, #4]
 801958a:	461a      	mov	r2, r3
 801958c:	4603      	mov	r3, r0
 801958e:	73fb      	strb	r3, [r7, #15]
 8019590:	4613      	mov	r3, r2
 8019592:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 7 */
	int8_t ret = -1;
 8019594:	23ff      	movs	r3, #255	; 0xff
 8019596:	75fb      	strb	r3, [r7, #23]

	HAL_SD_WriteBlocks(&hsd1, buf, blk_addr, blk_len, HAL_MAX_DELAY);
 8019598:	89ba      	ldrh	r2, [r7, #12]
 801959a:	f04f 33ff 	mov.w	r3, #4294967295
 801959e:	9300      	str	r3, [sp, #0]
 80195a0:	4613      	mov	r3, r2
 80195a2:	687a      	ldr	r2, [r7, #4]
 80195a4:	68b9      	ldr	r1, [r7, #8]
 80195a6:	4809      	ldr	r0, [pc, #36]	; (80195cc <STORAGE_Write_FS+0x4c>)
 80195a8:	f7f4 f936 	bl	800d818 <HAL_SD_WriteBlocks>


	/* Wait until SD card is ready to use for new operation */
	while (HAL_SD_GetCardState(&hsd1) != HAL_SD_CARD_TRANSFER){}
 80195ac:	bf00      	nop
 80195ae:	4807      	ldr	r0, [pc, #28]	; (80195cc <STORAGE_Write_FS+0x4c>)
 80195b0:	f7f5 f90c 	bl	800e7cc <HAL_SD_GetCardState>
 80195b4:	4603      	mov	r3, r0
 80195b6:	2b04      	cmp	r3, #4
 80195b8:	d1f9      	bne.n	80195ae <STORAGE_Write_FS+0x2e>
	ret = 0;
 80195ba:	2300      	movs	r3, #0
 80195bc:	75fb      	strb	r3, [r7, #23]
	return ret;
 80195be:	f997 3017 	ldrsb.w	r3, [r7, #23]
  /* USER CODE END 7 */
}
 80195c2:	4618      	mov	r0, r3
 80195c4:	3718      	adds	r7, #24
 80195c6:	46bd      	mov	sp, r7
 80195c8:	bd80      	pop	{r7, pc}
 80195ca:	bf00      	nop
 80195cc:	2404470c 	.word	0x2404470c

080195d0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80195d0:	b480      	push	{r7}
 80195d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80195d4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80195d6:	4618      	mov	r0, r3
 80195d8:	46bd      	mov	sp, r7
 80195da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195de:	4770      	bx	lr

080195e0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80195e0:	b580      	push	{r7, lr}
 80195e2:	b08a      	sub	sp, #40	; 0x28
 80195e4:	af00      	add	r7, sp, #0
 80195e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80195e8:	f107 0314 	add.w	r3, r7, #20
 80195ec:	2200      	movs	r2, #0
 80195ee:	601a      	str	r2, [r3, #0]
 80195f0:	605a      	str	r2, [r3, #4]
 80195f2:	609a      	str	r2, [r3, #8]
 80195f4:	60da      	str	r2, [r3, #12]
 80195f6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80195f8:	687b      	ldr	r3, [r7, #4]
 80195fa:	681b      	ldr	r3, [r3, #0]
 80195fc:	4a1e      	ldr	r2, [pc, #120]	; (8019678 <HAL_PCD_MspInit+0x98>)
 80195fe:	4293      	cmp	r3, r2
 8019600:	d136      	bne.n	8019670 <HAL_PCD_MspInit+0x90>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8019602:	4b1e      	ldr	r3, [pc, #120]	; (801967c <HAL_PCD_MspInit+0x9c>)
 8019604:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019608:	4a1c      	ldr	r2, [pc, #112]	; (801967c <HAL_PCD_MspInit+0x9c>)
 801960a:	f043 0301 	orr.w	r3, r3, #1
 801960e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8019612:	4b1a      	ldr	r3, [pc, #104]	; (801967c <HAL_PCD_MspInit+0x9c>)
 8019614:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8019618:	f003 0301 	and.w	r3, r3, #1
 801961c:	613b      	str	r3, [r7, #16]
 801961e:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8019620:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8019624:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8019626:	2302      	movs	r3, #2
 8019628:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801962a:	2300      	movs	r3, #0
 801962c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801962e:	2300      	movs	r3, #0
 8019630:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8019632:	230a      	movs	r3, #10
 8019634:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8019636:	f107 0314 	add.w	r3, r7, #20
 801963a:	4619      	mov	r1, r3
 801963c:	4810      	ldr	r0, [pc, #64]	; (8019680 <HAL_PCD_MspInit+0xa0>)
 801963e:	f7ee ff39 	bl	80084b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8019642:	4b0e      	ldr	r3, [pc, #56]	; (801967c <HAL_PCD_MspInit+0x9c>)
 8019644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019648:	4a0c      	ldr	r2, [pc, #48]	; (801967c <HAL_PCD_MspInit+0x9c>)
 801964a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801964e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8019652:	4b0a      	ldr	r3, [pc, #40]	; (801967c <HAL_PCD_MspInit+0x9c>)
 8019654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8019658:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801965c:	60fb      	str	r3, [r7, #12]
 801965e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8019660:	2200      	movs	r2, #0
 8019662:	2100      	movs	r1, #0
 8019664:	2065      	movs	r0, #101	; 0x65
 8019666:	f7eb fcdc 	bl	8005022 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801966a:	2065      	movs	r0, #101	; 0x65
 801966c:	f7eb fcf3 	bl	8005056 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8019670:	bf00      	nop
 8019672:	3728      	adds	r7, #40	; 0x28
 8019674:	46bd      	mov	sp, r7
 8019676:	bd80      	pop	{r7, pc}
 8019678:	40080000 	.word	0x40080000
 801967c:	58024400 	.word	0x58024400
 8019680:	58020000 	.word	0x58020000

08019684 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019684:	b580      	push	{r7, lr}
 8019686:	b082      	sub	sp, #8
 8019688:	af00      	add	r7, sp, #0
 801968a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801968c:	687b      	ldr	r3, [r7, #4]
 801968e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8019692:	687b      	ldr	r3, [r7, #4]
 8019694:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8019698:	4619      	mov	r1, r3
 801969a:	4610      	mov	r0, r2
 801969c:	f7fc fa89 	bl	8015bb2 <USBD_LL_SetupStage>
}
 80196a0:	bf00      	nop
 80196a2:	3708      	adds	r7, #8
 80196a4:	46bd      	mov	sp, r7
 80196a6:	bd80      	pop	{r7, pc}

080196a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b082      	sub	sp, #8
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	6078      	str	r0, [r7, #4]
 80196b0:	460b      	mov	r3, r1
 80196b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80196b4:	687b      	ldr	r3, [r7, #4]
 80196b6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196ba:	78fa      	ldrb	r2, [r7, #3]
 80196bc:	6879      	ldr	r1, [r7, #4]
 80196be:	4613      	mov	r3, r2
 80196c0:	00db      	lsls	r3, r3, #3
 80196c2:	1a9b      	subs	r3, r3, r2
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	440b      	add	r3, r1
 80196c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80196cc:	681a      	ldr	r2, [r3, #0]
 80196ce:	78fb      	ldrb	r3, [r7, #3]
 80196d0:	4619      	mov	r1, r3
 80196d2:	f7fc fac1 	bl	8015c58 <USBD_LL_DataOutStage>
}
 80196d6:	bf00      	nop
 80196d8:	3708      	adds	r7, #8
 80196da:	46bd      	mov	sp, r7
 80196dc:	bd80      	pop	{r7, pc}

080196de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196de:	b580      	push	{r7, lr}
 80196e0:	b082      	sub	sp, #8
 80196e2:	af00      	add	r7, sp, #0
 80196e4:	6078      	str	r0, [r7, #4]
 80196e6:	460b      	mov	r3, r1
 80196e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 80196f0:	78fa      	ldrb	r2, [r7, #3]
 80196f2:	6879      	ldr	r1, [r7, #4]
 80196f4:	4613      	mov	r3, r2
 80196f6:	00db      	lsls	r3, r3, #3
 80196f8:	1a9b      	subs	r3, r3, r2
 80196fa:	009b      	lsls	r3, r3, #2
 80196fc:	440b      	add	r3, r1
 80196fe:	3348      	adds	r3, #72	; 0x48
 8019700:	681a      	ldr	r2, [r3, #0]
 8019702:	78fb      	ldrb	r3, [r7, #3]
 8019704:	4619      	mov	r1, r3
 8019706:	f7fc fb0a 	bl	8015d1e <USBD_LL_DataInStage>
}
 801970a:	bf00      	nop
 801970c:	3708      	adds	r7, #8
 801970e:	46bd      	mov	sp, r7
 8019710:	bd80      	pop	{r7, pc}

08019712 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019712:	b580      	push	{r7, lr}
 8019714:	b082      	sub	sp, #8
 8019716:	af00      	add	r7, sp, #0
 8019718:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019720:	4618      	mov	r0, r3
 8019722:	f7fc fc0e 	bl	8015f42 <USBD_LL_SOF>
}
 8019726:	bf00      	nop
 8019728:	3708      	adds	r7, #8
 801972a:	46bd      	mov	sp, r7
 801972c:	bd80      	pop	{r7, pc}

0801972e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801972e:	b580      	push	{r7, lr}
 8019730:	b084      	sub	sp, #16
 8019732:	af00      	add	r7, sp, #0
 8019734:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019736:	2301      	movs	r3, #1
 8019738:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	68db      	ldr	r3, [r3, #12]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d102      	bne.n	8019748 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8019742:	2300      	movs	r3, #0
 8019744:	73fb      	strb	r3, [r7, #15]
 8019746:	e008      	b.n	801975a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8019748:	687b      	ldr	r3, [r7, #4]
 801974a:	68db      	ldr	r3, [r3, #12]
 801974c:	2b02      	cmp	r3, #2
 801974e:	d102      	bne.n	8019756 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8019750:	2301      	movs	r3, #1
 8019752:	73fb      	strb	r3, [r7, #15]
 8019754:	e001      	b.n	801975a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8019756:	f7ea fe67 	bl	8004428 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019760:	7bfa      	ldrb	r2, [r7, #15]
 8019762:	4611      	mov	r1, r2
 8019764:	4618      	mov	r0, r3
 8019766:	f7fc fbb1 	bl	8015ecc <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801976a:	687b      	ldr	r3, [r7, #4]
 801976c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8019770:	4618      	mov	r0, r3
 8019772:	f7fc fb6a 	bl	8015e4a <USBD_LL_Reset>
}
 8019776:	bf00      	nop
 8019778:	3710      	adds	r7, #16
 801977a:	46bd      	mov	sp, r7
 801977c:	bd80      	pop	{r7, pc}
	...

08019780 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019780:	b580      	push	{r7, lr}
 8019782:	b082      	sub	sp, #8
 8019784:	af00      	add	r7, sp, #0
 8019786:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801978e:	4618      	mov	r0, r3
 8019790:	f7fc fbac 	bl	8015eec <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801979c:	681b      	ldr	r3, [r3, #0]
 801979e:	687a      	ldr	r2, [r7, #4]
 80197a0:	6812      	ldr	r2, [r2, #0]
 80197a2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80197a6:	f043 0301 	orr.w	r3, r3, #1
 80197aa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80197ac:	687b      	ldr	r3, [r7, #4]
 80197ae:	6a1b      	ldr	r3, [r3, #32]
 80197b0:	2b00      	cmp	r3, #0
 80197b2:	d005      	beq.n	80197c0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80197b4:	4b04      	ldr	r3, [pc, #16]	; (80197c8 <HAL_PCD_SuspendCallback+0x48>)
 80197b6:	691b      	ldr	r3, [r3, #16]
 80197b8:	4a03      	ldr	r2, [pc, #12]	; (80197c8 <HAL_PCD_SuspendCallback+0x48>)
 80197ba:	f043 0306 	orr.w	r3, r3, #6
 80197be:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80197c0:	bf00      	nop
 80197c2:	3708      	adds	r7, #8
 80197c4:	46bd      	mov	sp, r7
 80197c6:	bd80      	pop	{r7, pc}
 80197c8:	e000ed00 	.word	0xe000ed00

080197cc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197cc:	b580      	push	{r7, lr}
 80197ce:	b082      	sub	sp, #8
 80197d0:	af00      	add	r7, sp, #0
 80197d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80197d4:	687b      	ldr	r3, [r7, #4]
 80197d6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197da:	4618      	mov	r0, r3
 80197dc:	f7fc fb9b 	bl	8015f16 <USBD_LL_Resume>
}
 80197e0:	bf00      	nop
 80197e2:	3708      	adds	r7, #8
 80197e4:	46bd      	mov	sp, r7
 80197e6:	bd80      	pop	{r7, pc}

080197e8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	b082      	sub	sp, #8
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
 80197f0:	460b      	mov	r3, r1
 80197f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80197f4:	687b      	ldr	r3, [r7, #4]
 80197f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80197fa:	78fa      	ldrb	r2, [r7, #3]
 80197fc:	4611      	mov	r1, r2
 80197fe:	4618      	mov	r0, r3
 8019800:	f7fc fbc6 	bl	8015f90 <USBD_LL_IsoOUTIncomplete>
}
 8019804:	bf00      	nop
 8019806:	3708      	adds	r7, #8
 8019808:	46bd      	mov	sp, r7
 801980a:	bd80      	pop	{r7, pc}

0801980c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801980c:	b580      	push	{r7, lr}
 801980e:	b082      	sub	sp, #8
 8019810:	af00      	add	r7, sp, #0
 8019812:	6078      	str	r0, [r7, #4]
 8019814:	460b      	mov	r3, r1
 8019816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801981e:	78fa      	ldrb	r2, [r7, #3]
 8019820:	4611      	mov	r1, r2
 8019822:	4618      	mov	r0, r3
 8019824:	f7fc fba7 	bl	8015f76 <USBD_LL_IsoINIncomplete>
}
 8019828:	bf00      	nop
 801982a:	3708      	adds	r7, #8
 801982c:	46bd      	mov	sp, r7
 801982e:	bd80      	pop	{r7, pc}

08019830 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019830:	b580      	push	{r7, lr}
 8019832:	b082      	sub	sp, #8
 8019834:	af00      	add	r7, sp, #0
 8019836:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8019838:	687b      	ldr	r3, [r7, #4]
 801983a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801983e:	4618      	mov	r0, r3
 8019840:	f7fc fbb3 	bl	8015faa <USBD_LL_DevConnected>
}
 8019844:	bf00      	nop
 8019846:	3708      	adds	r7, #8
 8019848:	46bd      	mov	sp, r7
 801984a:	bd80      	pop	{r7, pc}

0801984c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801984c:	b580      	push	{r7, lr}
 801984e:	b082      	sub	sp, #8
 8019850:	af00      	add	r7, sp, #0
 8019852:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 801985a:	4618      	mov	r0, r3
 801985c:	f7fc fbb0 	bl	8015fc0 <USBD_LL_DevDisconnected>
}
 8019860:	bf00      	nop
 8019862:	3708      	adds	r7, #8
 8019864:	46bd      	mov	sp, r7
 8019866:	bd80      	pop	{r7, pc}

08019868 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8019868:	b580      	push	{r7, lr}
 801986a:	b082      	sub	sp, #8
 801986c:	af00      	add	r7, sp, #0
 801986e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	781b      	ldrb	r3, [r3, #0]
 8019874:	2b00      	cmp	r3, #0
 8019876:	d13e      	bne.n	80198f6 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8019878:	4a21      	ldr	r2, [pc, #132]	; (8019900 <USBD_LL_Init+0x98>)
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8019880:	687b      	ldr	r3, [r7, #4]
 8019882:	4a1f      	ldr	r2, [pc, #124]	; (8019900 <USBD_LL_Init+0x98>)
 8019884:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8019888:	4b1d      	ldr	r3, [pc, #116]	; (8019900 <USBD_LL_Init+0x98>)
 801988a:	4a1e      	ldr	r2, [pc, #120]	; (8019904 <USBD_LL_Init+0x9c>)
 801988c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 801988e:	4b1c      	ldr	r3, [pc, #112]	; (8019900 <USBD_LL_Init+0x98>)
 8019890:	2209      	movs	r2, #9
 8019892:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8019894:	4b1a      	ldr	r3, [pc, #104]	; (8019900 <USBD_LL_Init+0x98>)
 8019896:	2202      	movs	r2, #2
 8019898:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801989a:	4b19      	ldr	r3, [pc, #100]	; (8019900 <USBD_LL_Init+0x98>)
 801989c:	2200      	movs	r2, #0
 801989e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80198a0:	4b17      	ldr	r3, [pc, #92]	; (8019900 <USBD_LL_Init+0x98>)
 80198a2:	2202      	movs	r2, #2
 80198a4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80198a6:	4b16      	ldr	r3, [pc, #88]	; (8019900 <USBD_LL_Init+0x98>)
 80198a8:	2200      	movs	r2, #0
 80198aa:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80198ac:	4b14      	ldr	r3, [pc, #80]	; (8019900 <USBD_LL_Init+0x98>)
 80198ae:	2200      	movs	r2, #0
 80198b0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80198b2:	4b13      	ldr	r3, [pc, #76]	; (8019900 <USBD_LL_Init+0x98>)
 80198b4:	2200      	movs	r2, #0
 80198b6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80198b8:	4b11      	ldr	r3, [pc, #68]	; (8019900 <USBD_LL_Init+0x98>)
 80198ba:	2200      	movs	r2, #0
 80198bc:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80198be:	4b10      	ldr	r3, [pc, #64]	; (8019900 <USBD_LL_Init+0x98>)
 80198c0:	2200      	movs	r2, #0
 80198c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80198c4:	4b0e      	ldr	r3, [pc, #56]	; (8019900 <USBD_LL_Init+0x98>)
 80198c6:	2200      	movs	r2, #0
 80198c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80198ca:	480d      	ldr	r0, [pc, #52]	; (8019900 <USBD_LL_Init+0x98>)
 80198cc:	f7ef f82c 	bl	8008928 <HAL_PCD_Init>
 80198d0:	4603      	mov	r3, r0
 80198d2:	2b00      	cmp	r3, #0
 80198d4:	d001      	beq.n	80198da <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80198d6:	f7ea fda7 	bl	8004428 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80198da:	2180      	movs	r1, #128	; 0x80
 80198dc:	4808      	ldr	r0, [pc, #32]	; (8019900 <USBD_LL_Init+0x98>)
 80198de:	f7f0 f9ea 	bl	8009cb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80198e2:	2240      	movs	r2, #64	; 0x40
 80198e4:	2100      	movs	r1, #0
 80198e6:	4806      	ldr	r0, [pc, #24]	; (8019900 <USBD_LL_Init+0x98>)
 80198e8:	f7f0 f99e 	bl	8009c28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80198ec:	2280      	movs	r2, #128	; 0x80
 80198ee:	2101      	movs	r1, #1
 80198f0:	4803      	ldr	r0, [pc, #12]	; (8019900 <USBD_LL_Init+0x98>)
 80198f2:	f7f0 f999 	bl	8009c28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80198f6:	2300      	movs	r3, #0
}
 80198f8:	4618      	mov	r0, r3
 80198fa:	3708      	adds	r7, #8
 80198fc:	46bd      	mov	sp, r7
 80198fe:	bd80      	pop	{r7, pc}
 8019900:	24045340 	.word	0x24045340
 8019904:	40080000 	.word	0x40080000

08019908 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8019908:	b580      	push	{r7, lr}
 801990a:	b084      	sub	sp, #16
 801990c:	af00      	add	r7, sp, #0
 801990e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019910:	2300      	movs	r3, #0
 8019912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019914:	2300      	movs	r3, #0
 8019916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8019918:	687b      	ldr	r3, [r7, #4]
 801991a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 801991e:	4618      	mov	r0, r3
 8019920:	f7ef f926 	bl	8008b70 <HAL_PCD_Start>
 8019924:	4603      	mov	r3, r0
 8019926:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019928:	7bfb      	ldrb	r3, [r7, #15]
 801992a:	4618      	mov	r0, r3
 801992c:	f000 f94a 	bl	8019bc4 <USBD_Get_USB_Status>
 8019930:	4603      	mov	r3, r0
 8019932:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019934:	7bbb      	ldrb	r3, [r7, #14]
}
 8019936:	4618      	mov	r0, r3
 8019938:	3710      	adds	r7, #16
 801993a:	46bd      	mov	sp, r7
 801993c:	bd80      	pop	{r7, pc}

0801993e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801993e:	b580      	push	{r7, lr}
 8019940:	b084      	sub	sp, #16
 8019942:	af00      	add	r7, sp, #0
 8019944:	6078      	str	r0, [r7, #4]
 8019946:	4608      	mov	r0, r1
 8019948:	4611      	mov	r1, r2
 801994a:	461a      	mov	r2, r3
 801994c:	4603      	mov	r3, r0
 801994e:	70fb      	strb	r3, [r7, #3]
 8019950:	460b      	mov	r3, r1
 8019952:	70bb      	strb	r3, [r7, #2]
 8019954:	4613      	mov	r3, r2
 8019956:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019958:	2300      	movs	r3, #0
 801995a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801995c:	2300      	movs	r3, #0
 801995e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8019960:	687b      	ldr	r3, [r7, #4]
 8019962:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019966:	78bb      	ldrb	r3, [r7, #2]
 8019968:	883a      	ldrh	r2, [r7, #0]
 801996a:	78f9      	ldrb	r1, [r7, #3]
 801996c:	f7ef fd37 	bl	80093de <HAL_PCD_EP_Open>
 8019970:	4603      	mov	r3, r0
 8019972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019974:	7bfb      	ldrb	r3, [r7, #15]
 8019976:	4618      	mov	r0, r3
 8019978:	f000 f924 	bl	8019bc4 <USBD_Get_USB_Status>
 801997c:	4603      	mov	r3, r0
 801997e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019980:	7bbb      	ldrb	r3, [r7, #14]
}
 8019982:	4618      	mov	r0, r3
 8019984:	3710      	adds	r7, #16
 8019986:	46bd      	mov	sp, r7
 8019988:	bd80      	pop	{r7, pc}

0801998a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801998a:	b580      	push	{r7, lr}
 801998c:	b084      	sub	sp, #16
 801998e:	af00      	add	r7, sp, #0
 8019990:	6078      	str	r0, [r7, #4]
 8019992:	460b      	mov	r3, r1
 8019994:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019996:	2300      	movs	r3, #0
 8019998:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801999a:	2300      	movs	r3, #0
 801999c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199a4:	78fa      	ldrb	r2, [r7, #3]
 80199a6:	4611      	mov	r1, r2
 80199a8:	4618      	mov	r0, r3
 80199aa:	f7ef fd80 	bl	80094ae <HAL_PCD_EP_Close>
 80199ae:	4603      	mov	r3, r0
 80199b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199b2:	7bfb      	ldrb	r3, [r7, #15]
 80199b4:	4618      	mov	r0, r3
 80199b6:	f000 f905 	bl	8019bc4 <USBD_Get_USB_Status>
 80199ba:	4603      	mov	r3, r0
 80199bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199be:	7bbb      	ldrb	r3, [r7, #14]
}
 80199c0:	4618      	mov	r0, r3
 80199c2:	3710      	adds	r7, #16
 80199c4:	46bd      	mov	sp, r7
 80199c6:	bd80      	pop	{r7, pc}

080199c8 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199c8:	b580      	push	{r7, lr}
 80199ca:	b084      	sub	sp, #16
 80199cc:	af00      	add	r7, sp, #0
 80199ce:	6078      	str	r0, [r7, #4]
 80199d0:	460b      	mov	r3, r1
 80199d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80199d4:	2300      	movs	r3, #0
 80199d6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80199d8:	2300      	movs	r3, #0
 80199da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80199e2:	78fa      	ldrb	r2, [r7, #3]
 80199e4:	4611      	mov	r1, r2
 80199e6:	4618      	mov	r0, r3
 80199e8:	f7ef ff12 	bl	8009810 <HAL_PCD_EP_Flush>
 80199ec:	4603      	mov	r3, r0
 80199ee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80199f0:	7bfb      	ldrb	r3, [r7, #15]
 80199f2:	4618      	mov	r0, r3
 80199f4:	f000 f8e6 	bl	8019bc4 <USBD_Get_USB_Status>
 80199f8:	4603      	mov	r3, r0
 80199fa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80199fc:	7bbb      	ldrb	r3, [r7, #14]
}
 80199fe:	4618      	mov	r0, r3
 8019a00:	3710      	adds	r7, #16
 8019a02:	46bd      	mov	sp, r7
 8019a04:	bd80      	pop	{r7, pc}

08019a06 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a06:	b580      	push	{r7, lr}
 8019a08:	b084      	sub	sp, #16
 8019a0a:	af00      	add	r7, sp, #0
 8019a0c:	6078      	str	r0, [r7, #4]
 8019a0e:	460b      	mov	r3, r1
 8019a10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a12:	2300      	movs	r3, #0
 8019a14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a16:	2300      	movs	r3, #0
 8019a18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019a1a:	687b      	ldr	r3, [r7, #4]
 8019a1c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a20:	78fa      	ldrb	r2, [r7, #3]
 8019a22:	4611      	mov	r1, r2
 8019a24:	4618      	mov	r0, r3
 8019a26:	f7ef fe39 	bl	800969c <HAL_PCD_EP_SetStall>
 8019a2a:	4603      	mov	r3, r0
 8019a2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a2e:	7bfb      	ldrb	r3, [r7, #15]
 8019a30:	4618      	mov	r0, r3
 8019a32:	f000 f8c7 	bl	8019bc4 <USBD_Get_USB_Status>
 8019a36:	4603      	mov	r3, r0
 8019a38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a3a:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a3c:	4618      	mov	r0, r3
 8019a3e:	3710      	adds	r7, #16
 8019a40:	46bd      	mov	sp, r7
 8019a42:	bd80      	pop	{r7, pc}

08019a44 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a44:	b580      	push	{r7, lr}
 8019a46:	b084      	sub	sp, #16
 8019a48:	af00      	add	r7, sp, #0
 8019a4a:	6078      	str	r0, [r7, #4]
 8019a4c:	460b      	mov	r3, r1
 8019a4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a50:	2300      	movs	r3, #0
 8019a52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a54:	2300      	movs	r3, #0
 8019a56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a5e:	78fa      	ldrb	r2, [r7, #3]
 8019a60:	4611      	mov	r1, r2
 8019a62:	4618      	mov	r0, r3
 8019a64:	f7ef fe7e 	bl	8009764 <HAL_PCD_EP_ClrStall>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a6c:	7bfb      	ldrb	r3, [r7, #15]
 8019a6e:	4618      	mov	r0, r3
 8019a70:	f000 f8a8 	bl	8019bc4 <USBD_Get_USB_Status>
 8019a74:	4603      	mov	r3, r0
 8019a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8019a7a:	4618      	mov	r0, r3
 8019a7c:	3710      	adds	r7, #16
 8019a7e:	46bd      	mov	sp, r7
 8019a80:	bd80      	pop	{r7, pc}

08019a82 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019a82:	b480      	push	{r7}
 8019a84:	b085      	sub	sp, #20
 8019a86:	af00      	add	r7, sp, #0
 8019a88:	6078      	str	r0, [r7, #4]
 8019a8a:	460b      	mov	r3, r1
 8019a8c:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8019a8e:	687b      	ldr	r3, [r7, #4]
 8019a90:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019a94:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8019a96:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	da0b      	bge.n	8019ab6 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8019a9e:	78fb      	ldrb	r3, [r7, #3]
 8019aa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019aa4:	68f9      	ldr	r1, [r7, #12]
 8019aa6:	4613      	mov	r3, r2
 8019aa8:	00db      	lsls	r3, r3, #3
 8019aaa:	1a9b      	subs	r3, r3, r2
 8019aac:	009b      	lsls	r3, r3, #2
 8019aae:	440b      	add	r3, r1
 8019ab0:	333e      	adds	r3, #62	; 0x3e
 8019ab2:	781b      	ldrb	r3, [r3, #0]
 8019ab4:	e00b      	b.n	8019ace <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8019ab6:	78fb      	ldrb	r3, [r7, #3]
 8019ab8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8019abc:	68f9      	ldr	r1, [r7, #12]
 8019abe:	4613      	mov	r3, r2
 8019ac0:	00db      	lsls	r3, r3, #3
 8019ac2:	1a9b      	subs	r3, r3, r2
 8019ac4:	009b      	lsls	r3, r3, #2
 8019ac6:	440b      	add	r3, r1
 8019ac8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8019acc:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019ace:	4618      	mov	r0, r3
 8019ad0:	3714      	adds	r7, #20
 8019ad2:	46bd      	mov	sp, r7
 8019ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ad8:	4770      	bx	lr

08019ada <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019ada:	b580      	push	{r7, lr}
 8019adc:	b084      	sub	sp, #16
 8019ade:	af00      	add	r7, sp, #0
 8019ae0:	6078      	str	r0, [r7, #4]
 8019ae2:	460b      	mov	r3, r1
 8019ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019ae6:	2300      	movs	r3, #0
 8019ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019aea:	2300      	movs	r3, #0
 8019aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019aee:	687b      	ldr	r3, [r7, #4]
 8019af0:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019af4:	78fa      	ldrb	r2, [r7, #3]
 8019af6:	4611      	mov	r1, r2
 8019af8:	4618      	mov	r0, r3
 8019afa:	f7ef fc4b 	bl	8009394 <HAL_PCD_SetAddress>
 8019afe:	4603      	mov	r3, r0
 8019b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b02:	7bfb      	ldrb	r3, [r7, #15]
 8019b04:	4618      	mov	r0, r3
 8019b06:	f000 f85d 	bl	8019bc4 <USBD_Get_USB_Status>
 8019b0a:	4603      	mov	r3, r0
 8019b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8019b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8019b10:	4618      	mov	r0, r3
 8019b12:	3710      	adds	r7, #16
 8019b14:	46bd      	mov	sp, r7
 8019b16:	bd80      	pop	{r7, pc}

08019b18 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b18:	b580      	push	{r7, lr}
 8019b1a:	b086      	sub	sp, #24
 8019b1c:	af00      	add	r7, sp, #0
 8019b1e:	60f8      	str	r0, [r7, #12]
 8019b20:	607a      	str	r2, [r7, #4]
 8019b22:	603b      	str	r3, [r7, #0]
 8019b24:	460b      	mov	r3, r1
 8019b26:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b28:	2300      	movs	r3, #0
 8019b2a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b2c:	2300      	movs	r3, #0
 8019b2e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019b30:	68fb      	ldr	r3, [r7, #12]
 8019b32:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019b36:	7af9      	ldrb	r1, [r7, #11]
 8019b38:	683b      	ldr	r3, [r7, #0]
 8019b3a:	687a      	ldr	r2, [r7, #4]
 8019b3c:	f7ef fd64 	bl	8009608 <HAL_PCD_EP_Transmit>
 8019b40:	4603      	mov	r3, r0
 8019b42:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b44:	7dfb      	ldrb	r3, [r7, #23]
 8019b46:	4618      	mov	r0, r3
 8019b48:	f000 f83c 	bl	8019bc4 <USBD_Get_USB_Status>
 8019b4c:	4603      	mov	r3, r0
 8019b4e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b50:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b52:	4618      	mov	r0, r3
 8019b54:	3718      	adds	r7, #24
 8019b56:	46bd      	mov	sp, r7
 8019b58:	bd80      	pop	{r7, pc}

08019b5a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8019b5a:	b580      	push	{r7, lr}
 8019b5c:	b086      	sub	sp, #24
 8019b5e:	af00      	add	r7, sp, #0
 8019b60:	60f8      	str	r0, [r7, #12]
 8019b62:	607a      	str	r2, [r7, #4]
 8019b64:	603b      	str	r3, [r7, #0]
 8019b66:	460b      	mov	r3, r1
 8019b68:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019b6a:	2300      	movs	r3, #0
 8019b6c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019b6e:	2300      	movs	r3, #0
 8019b70:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8019b78:	7af9      	ldrb	r1, [r7, #11]
 8019b7a:	683b      	ldr	r3, [r7, #0]
 8019b7c:	687a      	ldr	r2, [r7, #4]
 8019b7e:	f7ef fce0 	bl	8009542 <HAL_PCD_EP_Receive>
 8019b82:	4603      	mov	r3, r0
 8019b84:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b86:	7dfb      	ldrb	r3, [r7, #23]
 8019b88:	4618      	mov	r0, r3
 8019b8a:	f000 f81b 	bl	8019bc4 <USBD_Get_USB_Status>
 8019b8e:	4603      	mov	r3, r0
 8019b90:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8019b92:	7dbb      	ldrb	r3, [r7, #22]
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3718      	adds	r7, #24
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}

08019b9c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b9c:	b580      	push	{r7, lr}
 8019b9e:	b082      	sub	sp, #8
 8019ba0:	af00      	add	r7, sp, #0
 8019ba2:	6078      	str	r0, [r7, #4]
 8019ba4:	460b      	mov	r3, r1
 8019ba6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8019bae:	78fa      	ldrb	r2, [r7, #3]
 8019bb0:	4611      	mov	r1, r2
 8019bb2:	4618      	mov	r0, r3
 8019bb4:	f7ef fd10 	bl	80095d8 <HAL_PCD_EP_GetRxCount>
 8019bb8:	4603      	mov	r3, r0
}
 8019bba:	4618      	mov	r0, r3
 8019bbc:	3708      	adds	r7, #8
 8019bbe:	46bd      	mov	sp, r7
 8019bc0:	bd80      	pop	{r7, pc}
	...

08019bc4 <USBD_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019bc4:	b480      	push	{r7}
 8019bc6:	b085      	sub	sp, #20
 8019bc8:	af00      	add	r7, sp, #0
 8019bca:	4603      	mov	r3, r0
 8019bcc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8019bd2:	79fb      	ldrb	r3, [r7, #7]
 8019bd4:	2b03      	cmp	r3, #3
 8019bd6:	d817      	bhi.n	8019c08 <USBD_Get_USB_Status+0x44>
 8019bd8:	a201      	add	r2, pc, #4	; (adr r2, 8019be0 <USBD_Get_USB_Status+0x1c>)
 8019bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019bde:	bf00      	nop
 8019be0:	08019bf1 	.word	0x08019bf1
 8019be4:	08019bf7 	.word	0x08019bf7
 8019be8:	08019bfd 	.word	0x08019bfd
 8019bec:	08019c03 	.word	0x08019c03
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019bf0:	2300      	movs	r3, #0
 8019bf2:	73fb      	strb	r3, [r7, #15]
    break;
 8019bf4:	e00b      	b.n	8019c0e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bf6:	2303      	movs	r3, #3
 8019bf8:	73fb      	strb	r3, [r7, #15]
    break;
 8019bfa:	e008      	b.n	8019c0e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019bfc:	2301      	movs	r3, #1
 8019bfe:	73fb      	strb	r3, [r7, #15]
    break;
 8019c00:	e005      	b.n	8019c0e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019c02:	2303      	movs	r3, #3
 8019c04:	73fb      	strb	r3, [r7, #15]
    break;
 8019c06:	e002      	b.n	8019c0e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8019c08:	2303      	movs	r3, #3
 8019c0a:	73fb      	strb	r3, [r7, #15]
    break;
 8019c0c:	bf00      	nop
  }
  return usb_status;
 8019c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8019c10:	4618      	mov	r0, r3
 8019c12:	3714      	adds	r7, #20
 8019c14:	46bd      	mov	sp, r7
 8019c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1a:	4770      	bx	lr
 8019c1c:	0000      	movs	r0, r0
	...

08019c20 <pow>:
 8019c20:	b570      	push	{r4, r5, r6, lr}
 8019c22:	ed2d 8b0a 	vpush	{d8-d12}
 8019c26:	eeb0 9b40 	vmov.f64	d9, d0
 8019c2a:	eeb0 8b41 	vmov.f64	d8, d1
 8019c2e:	4c8c      	ldr	r4, [pc, #560]	; (8019e60 <pow+0x240>)
 8019c30:	b08a      	sub	sp, #40	; 0x28
 8019c32:	f000 f925 	bl	8019e80 <__ieee754_pow>
 8019c36:	f994 3000 	ldrsb.w	r3, [r4]
 8019c3a:	eeb0 ab40 	vmov.f64	d10, d0
 8019c3e:	1c5a      	adds	r2, r3, #1
 8019c40:	4626      	mov	r6, r4
 8019c42:	d04b      	beq.n	8019cdc <pow+0xbc>
 8019c44:	eeb4 8b48 	vcmp.f64	d8, d8
 8019c48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c4c:	d646      	bvs.n	8019cdc <pow+0xbc>
 8019c4e:	eeb4 9b49 	vcmp.f64	d9, d9
 8019c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c56:	d719      	bvc.n	8019c8c <pow+0x6c>
 8019c58:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c60:	d13c      	bne.n	8019cdc <pow+0xbc>
 8019c62:	2201      	movs	r2, #1
 8019c64:	9200      	str	r2, [sp, #0]
 8019c66:	497f      	ldr	r1, [pc, #508]	; (8019e64 <pow+0x244>)
 8019c68:	4a7f      	ldr	r2, [pc, #508]	; (8019e68 <pow+0x248>)
 8019c6a:	9201      	str	r2, [sp, #4]
 8019c6c:	2000      	movs	r0, #0
 8019c6e:	2200      	movs	r2, #0
 8019c70:	2b02      	cmp	r3, #2
 8019c72:	9208      	str	r2, [sp, #32]
 8019c74:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019c78:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019c7c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019c80:	d02a      	beq.n	8019cd8 <pow+0xb8>
 8019c82:	4668      	mov	r0, sp
 8019c84:	f000 fc96 	bl	801a5b4 <matherr>
 8019c88:	bb00      	cbnz	r0, 8019ccc <pow+0xac>
 8019c8a:	e04e      	b.n	8019d2a <pow+0x10a>
 8019c8c:	ed9f bb72 	vldr	d11, [pc, #456]	; 8019e58 <pow+0x238>
 8019c90:	eeb4 9b4b 	vcmp.f64	d9, d11
 8019c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019c98:	eeb0 cb4b 	vmov.f64	d12, d11
 8019c9c:	d14a      	bne.n	8019d34 <pow+0x114>
 8019c9e:	eeb4 8b4b 	vcmp.f64	d8, d11
 8019ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019ca6:	d11f      	bne.n	8019ce8 <pow+0xc8>
 8019ca8:	2201      	movs	r2, #1
 8019caa:	9200      	str	r2, [sp, #0]
 8019cac:	4a6e      	ldr	r2, [pc, #440]	; (8019e68 <pow+0x248>)
 8019cae:	9201      	str	r2, [sp, #4]
 8019cb0:	2200      	movs	r2, #0
 8019cb2:	9208      	str	r2, [sp, #32]
 8019cb4:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019cb8:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019cbc:	ed8d bb06 	vstr	d11, [sp, #24]
 8019cc0:	2b00      	cmp	r3, #0
 8019cc2:	d0de      	beq.n	8019c82 <pow+0x62>
 8019cc4:	4b67      	ldr	r3, [pc, #412]	; (8019e64 <pow+0x244>)
 8019cc6:	2200      	movs	r2, #0
 8019cc8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019ccc:	9b08      	ldr	r3, [sp, #32]
 8019cce:	b11b      	cbz	r3, 8019cd8 <pow+0xb8>
 8019cd0:	f000 fd98 	bl	801a804 <__errno>
 8019cd4:	9b08      	ldr	r3, [sp, #32]
 8019cd6:	6003      	str	r3, [r0, #0]
 8019cd8:	ed9d ab06 	vldr	d10, [sp, #24]
 8019cdc:	eeb0 0b4a 	vmov.f64	d0, d10
 8019ce0:	b00a      	add	sp, #40	; 0x28
 8019ce2:	ecbd 8b0a 	vpop	{d8-d12}
 8019ce6:	bd70      	pop	{r4, r5, r6, pc}
 8019ce8:	eeb0 0b48 	vmov.f64	d0, d8
 8019cec:	f000 fc5a 	bl	801a5a4 <finite>
 8019cf0:	2800      	cmp	r0, #0
 8019cf2:	d0f3      	beq.n	8019cdc <pow+0xbc>
 8019cf4:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8019cf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019cfc:	d5ee      	bpl.n	8019cdc <pow+0xbc>
 8019cfe:	2301      	movs	r3, #1
 8019d00:	9300      	str	r3, [sp, #0]
 8019d02:	4b59      	ldr	r3, [pc, #356]	; (8019e68 <pow+0x248>)
 8019d04:	9301      	str	r3, [sp, #4]
 8019d06:	2300      	movs	r3, #0
 8019d08:	9308      	str	r3, [sp, #32]
 8019d0a:	f994 3000 	ldrsb.w	r3, [r4]
 8019d0e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019d12:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019d16:	b913      	cbnz	r3, 8019d1e <pow+0xfe>
 8019d18:	ed8d bb06 	vstr	d11, [sp, #24]
 8019d1c:	e7b1      	b.n	8019c82 <pow+0x62>
 8019d1e:	4953      	ldr	r1, [pc, #332]	; (8019e6c <pow+0x24c>)
 8019d20:	2000      	movs	r0, #0
 8019d22:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8019d26:	2b02      	cmp	r3, #2
 8019d28:	d1ab      	bne.n	8019c82 <pow+0x62>
 8019d2a:	f000 fd6b 	bl	801a804 <__errno>
 8019d2e:	2321      	movs	r3, #33	; 0x21
 8019d30:	6003      	str	r3, [r0, #0]
 8019d32:	e7cb      	b.n	8019ccc <pow+0xac>
 8019d34:	f000 fc36 	bl	801a5a4 <finite>
 8019d38:	4605      	mov	r5, r0
 8019d3a:	2800      	cmp	r0, #0
 8019d3c:	d164      	bne.n	8019e08 <pow+0x1e8>
 8019d3e:	eeb0 0b49 	vmov.f64	d0, d9
 8019d42:	f000 fc2f 	bl	801a5a4 <finite>
 8019d46:	2800      	cmp	r0, #0
 8019d48:	d05e      	beq.n	8019e08 <pow+0x1e8>
 8019d4a:	eeb0 0b48 	vmov.f64	d0, d8
 8019d4e:	f000 fc29 	bl	801a5a4 <finite>
 8019d52:	2800      	cmp	r0, #0
 8019d54:	d058      	beq.n	8019e08 <pow+0x1e8>
 8019d56:	eeb4 ab4a 	vcmp.f64	d10, d10
 8019d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019d5e:	f994 3000 	ldrsb.w	r3, [r4]
 8019d62:	4a41      	ldr	r2, [pc, #260]	; (8019e68 <pow+0x248>)
 8019d64:	d70e      	bvc.n	8019d84 <pow+0x164>
 8019d66:	2101      	movs	r1, #1
 8019d68:	e9cd 1200 	strd	r1, r2, [sp]
 8019d6c:	9508      	str	r5, [sp, #32]
 8019d6e:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019d72:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019d76:	2b00      	cmp	r3, #0
 8019d78:	d0ce      	beq.n	8019d18 <pow+0xf8>
 8019d7a:	ee8b 7b0b 	vdiv.f64	d7, d11, d11
 8019d7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8019d82:	e7d0      	b.n	8019d26 <pow+0x106>
 8019d84:	2103      	movs	r1, #3
 8019d86:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019d8a:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 8019d8e:	ee28 8b07 	vmul.f64	d8, d8, d7
 8019d92:	e9cd 1200 	strd	r1, r2, [sp]
 8019d96:	9508      	str	r5, [sp, #32]
 8019d98:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019d9c:	b9fb      	cbnz	r3, 8019dde <pow+0x1be>
 8019d9e:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8019da2:	4b33      	ldr	r3, [pc, #204]	; (8019e70 <pow+0x250>)
 8019da4:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dac:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019db0:	d54b      	bpl.n	8019e4a <pow+0x22a>
 8019db2:	eeb0 0b48 	vmov.f64	d0, d8
 8019db6:	f000 fc07 	bl	801a5c8 <rint>
 8019dba:	eeb4 0b48 	vcmp.f64	d0, d8
 8019dbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dc2:	d004      	beq.n	8019dce <pow+0x1ae>
 8019dc4:	4b2b      	ldr	r3, [pc, #172]	; (8019e74 <pow+0x254>)
 8019dc6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8019dca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019dce:	f996 3000 	ldrsb.w	r3, [r6]
 8019dd2:	2b02      	cmp	r3, #2
 8019dd4:	d139      	bne.n	8019e4a <pow+0x22a>
 8019dd6:	f000 fd15 	bl	801a804 <__errno>
 8019dda:	2322      	movs	r3, #34	; 0x22
 8019ddc:	e7a8      	b.n	8019d30 <pow+0x110>
 8019dde:	4b26      	ldr	r3, [pc, #152]	; (8019e78 <pow+0x258>)
 8019de0:	eeb5 9bc0 	vcmpe.f64	d9, #0.0
 8019de4:	2200      	movs	r2, #0
 8019de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019dea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019dee:	d5ee      	bpl.n	8019dce <pow+0x1ae>
 8019df0:	eeb0 0b48 	vmov.f64	d0, d8
 8019df4:	f000 fbe8 	bl	801a5c8 <rint>
 8019df8:	eeb4 0b48 	vcmp.f64	d0, d8
 8019dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e00:	d0e5      	beq.n	8019dce <pow+0x1ae>
 8019e02:	2200      	movs	r2, #0
 8019e04:	4b19      	ldr	r3, [pc, #100]	; (8019e6c <pow+0x24c>)
 8019e06:	e7e0      	b.n	8019dca <pow+0x1aa>
 8019e08:	eeb5 ab40 	vcmp.f64	d10, #0.0
 8019e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019e10:	f47f af64 	bne.w	8019cdc <pow+0xbc>
 8019e14:	eeb0 0b49 	vmov.f64	d0, d9
 8019e18:	f000 fbc4 	bl	801a5a4 <finite>
 8019e1c:	2800      	cmp	r0, #0
 8019e1e:	f43f af5d 	beq.w	8019cdc <pow+0xbc>
 8019e22:	eeb0 0b48 	vmov.f64	d0, d8
 8019e26:	f000 fbbd 	bl	801a5a4 <finite>
 8019e2a:	2800      	cmp	r0, #0
 8019e2c:	f43f af56 	beq.w	8019cdc <pow+0xbc>
 8019e30:	2304      	movs	r3, #4
 8019e32:	9300      	str	r3, [sp, #0]
 8019e34:	4b0c      	ldr	r3, [pc, #48]	; (8019e68 <pow+0x248>)
 8019e36:	9301      	str	r3, [sp, #4]
 8019e38:	2300      	movs	r3, #0
 8019e3a:	9308      	str	r3, [sp, #32]
 8019e3c:	ed8d 9b02 	vstr	d9, [sp, #8]
 8019e40:	ed8d 8b04 	vstr	d8, [sp, #16]
 8019e44:	ed8d cb06 	vstr	d12, [sp, #24]
 8019e48:	e7c1      	b.n	8019dce <pow+0x1ae>
 8019e4a:	4668      	mov	r0, sp
 8019e4c:	f000 fbb2 	bl	801a5b4 <matherr>
 8019e50:	2800      	cmp	r0, #0
 8019e52:	f47f af3b 	bne.w	8019ccc <pow+0xac>
 8019e56:	e7be      	b.n	8019dd6 <pow+0x1b6>
	...
 8019e60:	24000178 	.word	0x24000178
 8019e64:	3ff00000 	.word	0x3ff00000
 8019e68:	0801c638 	.word	0x0801c638
 8019e6c:	fff00000 	.word	0xfff00000
 8019e70:	47efffff 	.word	0x47efffff
 8019e74:	c7efffff 	.word	0xc7efffff
 8019e78:	7ff00000 	.word	0x7ff00000
 8019e7c:	00000000 	.word	0x00000000

08019e80 <__ieee754_pow>:
 8019e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e84:	ec57 6b11 	vmov	r6, r7, d1
 8019e88:	ed2d 8b02 	vpush	{d8}
 8019e8c:	eeb0 8b40 	vmov.f64	d8, d0
 8019e90:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019e94:	ea58 0306 	orrs.w	r3, r8, r6
 8019e98:	b085      	sub	sp, #20
 8019e9a:	46b9      	mov	r9, r7
 8019e9c:	ee11 2a10 	vmov	r2, s2
 8019ea0:	f000 8306 	beq.w	801a4b0 <__ieee754_pow+0x630>
 8019ea4:	ee18 aa90 	vmov	sl, s17
 8019ea8:	4bb9      	ldr	r3, [pc, #740]	; (801a190 <__ieee754_pow+0x310>)
 8019eaa:	f02a 4400 	bic.w	r4, sl, #2147483648	; 0x80000000
 8019eae:	429c      	cmp	r4, r3
 8019eb0:	ee10 ba10 	vmov	fp, s0
 8019eb4:	dc0b      	bgt.n	8019ece <__ieee754_pow+0x4e>
 8019eb6:	d105      	bne.n	8019ec4 <__ieee754_pow+0x44>
 8019eb8:	f1bb 0f00 	cmp.w	fp, #0
 8019ebc:	d107      	bne.n	8019ece <__ieee754_pow+0x4e>
 8019ebe:	45a0      	cmp	r8, r4
 8019ec0:	dc0d      	bgt.n	8019ede <__ieee754_pow+0x5e>
 8019ec2:	e001      	b.n	8019ec8 <__ieee754_pow+0x48>
 8019ec4:	4598      	cmp	r8, r3
 8019ec6:	dc02      	bgt.n	8019ece <__ieee754_pow+0x4e>
 8019ec8:	4598      	cmp	r8, r3
 8019eca:	d110      	bne.n	8019eee <__ieee754_pow+0x6e>
 8019ecc:	b17a      	cbz	r2, 8019eee <__ieee754_pow+0x6e>
 8019ece:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8019ed2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8019ed6:	ea54 030b 	orrs.w	r3, r4, fp
 8019eda:	f000 82e9 	beq.w	801a4b0 <__ieee754_pow+0x630>
 8019ede:	48ad      	ldr	r0, [pc, #692]	; (801a194 <__ieee754_pow+0x314>)
 8019ee0:	b005      	add	sp, #20
 8019ee2:	ecbd 8b02 	vpop	{d8}
 8019ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019eea:	f000 bb65 	b.w	801a5b8 <nan>
 8019eee:	f1ba 0f00 	cmp.w	sl, #0
 8019ef2:	da4e      	bge.n	8019f92 <__ieee754_pow+0x112>
 8019ef4:	4ba8      	ldr	r3, [pc, #672]	; (801a198 <__ieee754_pow+0x318>)
 8019ef6:	4598      	cmp	r8, r3
 8019ef8:	dc49      	bgt.n	8019f8e <__ieee754_pow+0x10e>
 8019efa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8019efe:	4598      	cmp	r8, r3
 8019f00:	dd47      	ble.n	8019f92 <__ieee754_pow+0x112>
 8019f02:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019f06:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019f0a:	2b14      	cmp	r3, #20
 8019f0c:	dd24      	ble.n	8019f58 <__ieee754_pow+0xd8>
 8019f0e:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8019f12:	fa22 f503 	lsr.w	r5, r2, r3
 8019f16:	fa05 f303 	lsl.w	r3, r5, r3
 8019f1a:	4293      	cmp	r3, r2
 8019f1c:	d139      	bne.n	8019f92 <__ieee754_pow+0x112>
 8019f1e:	f005 0501 	and.w	r5, r5, #1
 8019f22:	f1c5 0502 	rsb	r5, r5, #2
 8019f26:	2a00      	cmp	r2, #0
 8019f28:	d15a      	bne.n	8019fe0 <__ieee754_pow+0x160>
 8019f2a:	4b99      	ldr	r3, [pc, #612]	; (801a190 <__ieee754_pow+0x310>)
 8019f2c:	4598      	cmp	r8, r3
 8019f2e:	d122      	bne.n	8019f76 <__ieee754_pow+0xf6>
 8019f30:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8019f34:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8019f38:	ea53 030b 	orrs.w	r3, r3, fp
 8019f3c:	f000 82b8 	beq.w	801a4b0 <__ieee754_pow+0x630>
 8019f40:	4b96      	ldr	r3, [pc, #600]	; (801a19c <__ieee754_pow+0x31c>)
 8019f42:	429c      	cmp	r4, r3
 8019f44:	dd27      	ble.n	8019f96 <__ieee754_pow+0x116>
 8019f46:	f1b9 0f00 	cmp.w	r9, #0
 8019f4a:	f280 82b4 	bge.w	801a4b6 <__ieee754_pow+0x636>
 8019f4e:	ed9f 7b84 	vldr	d7, [pc, #528]	; 801a160 <__ieee754_pow+0x2e0>
 8019f52:	ed8d 7b00 	vstr	d7, [sp]
 8019f56:	e026      	b.n	8019fa6 <__ieee754_pow+0x126>
 8019f58:	2a00      	cmp	r2, #0
 8019f5a:	d140      	bne.n	8019fde <__ieee754_pow+0x15e>
 8019f5c:	f1c3 0314 	rsb	r3, r3, #20
 8019f60:	fa48 f503 	asr.w	r5, r8, r3
 8019f64:	fa05 f303 	lsl.w	r3, r5, r3
 8019f68:	4543      	cmp	r3, r8
 8019f6a:	f040 82aa 	bne.w	801a4c2 <__ieee754_pow+0x642>
 8019f6e:	f005 0501 	and.w	r5, r5, #1
 8019f72:	f1c5 0502 	rsb	r5, r5, #2
 8019f76:	4b8a      	ldr	r3, [pc, #552]	; (801a1a0 <__ieee754_pow+0x320>)
 8019f78:	4598      	cmp	r8, r3
 8019f7a:	d11b      	bne.n	8019fb4 <__ieee754_pow+0x134>
 8019f7c:	f1b9 0f00 	cmp.w	r9, #0
 8019f80:	f280 829c 	bge.w	801a4bc <__ieee754_pow+0x63c>
 8019f84:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 8019f88:	ee87 7b08 	vdiv.f64	d7, d7, d8
 8019f8c:	e7e1      	b.n	8019f52 <__ieee754_pow+0xd2>
 8019f8e:	2502      	movs	r5, #2
 8019f90:	e7c9      	b.n	8019f26 <__ieee754_pow+0xa6>
 8019f92:	2500      	movs	r5, #0
 8019f94:	e7c7      	b.n	8019f26 <__ieee754_pow+0xa6>
 8019f96:	f1b9 0f00 	cmp.w	r9, #0
 8019f9a:	dad8      	bge.n	8019f4e <__ieee754_pow+0xce>
 8019f9c:	f087 4400 	eor.w	r4, r7, #2147483648	; 0x80000000
 8019fa0:	4633      	mov	r3, r6
 8019fa2:	e9cd 3400 	strd	r3, r4, [sp]
 8019fa6:	ed9d 0b00 	vldr	d0, [sp]
 8019faa:	b005      	add	sp, #20
 8019fac:	ecbd 8b02 	vpop	{d8}
 8019fb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fb4:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8019fb8:	d102      	bne.n	8019fc0 <__ieee754_pow+0x140>
 8019fba:	ee28 7b08 	vmul.f64	d7, d8, d8
 8019fbe:	e7c8      	b.n	8019f52 <__ieee754_pow+0xd2>
 8019fc0:	4b78      	ldr	r3, [pc, #480]	; (801a1a4 <__ieee754_pow+0x324>)
 8019fc2:	4599      	cmp	r9, r3
 8019fc4:	d10c      	bne.n	8019fe0 <__ieee754_pow+0x160>
 8019fc6:	f1ba 0f00 	cmp.w	sl, #0
 8019fca:	db09      	blt.n	8019fe0 <__ieee754_pow+0x160>
 8019fcc:	eeb0 0b48 	vmov.f64	d0, d8
 8019fd0:	b005      	add	sp, #20
 8019fd2:	ecbd 8b02 	vpop	{d8}
 8019fd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019fda:	f000 bad7 	b.w	801a58c <__ieee754_sqrt>
 8019fde:	2500      	movs	r5, #0
 8019fe0:	eeb0 0b48 	vmov.f64	d0, d8
 8019fe4:	f000 fad5 	bl	801a592 <fabs>
 8019fe8:	ed8d 0b00 	vstr	d0, [sp]
 8019fec:	f1bb 0f00 	cmp.w	fp, #0
 8019ff0:	d128      	bne.n	801a044 <__ieee754_pow+0x1c4>
 8019ff2:	b124      	cbz	r4, 8019ffe <__ieee754_pow+0x17e>
 8019ff4:	4b6a      	ldr	r3, [pc, #424]	; (801a1a0 <__ieee754_pow+0x320>)
 8019ff6:	f02a 4240 	bic.w	r2, sl, #3221225472	; 0xc0000000
 8019ffa:	429a      	cmp	r2, r3
 8019ffc:	d122      	bne.n	801a044 <__ieee754_pow+0x1c4>
 8019ffe:	f1b9 0f00 	cmp.w	r9, #0
 801a002:	da07      	bge.n	801a014 <__ieee754_pow+0x194>
 801a004:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a008:	ed9d 6b00 	vldr	d6, [sp]
 801a00c:	ee87 7b06 	vdiv.f64	d7, d7, d6
 801a010:	ed8d 7b00 	vstr	d7, [sp]
 801a014:	f1ba 0f00 	cmp.w	sl, #0
 801a018:	dac5      	bge.n	8019fa6 <__ieee754_pow+0x126>
 801a01a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801a01e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 801a022:	ea54 0305 	orrs.w	r3, r4, r5
 801a026:	d106      	bne.n	801a036 <__ieee754_pow+0x1b6>
 801a028:	ed9d 7b00 	vldr	d7, [sp]
 801a02c:	ee37 7b47 	vsub.f64	d7, d7, d7
 801a030:	ee87 7b07 	vdiv.f64	d7, d7, d7
 801a034:	e78d      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a036:	2d01      	cmp	r5, #1
 801a038:	d1b5      	bne.n	8019fa6 <__ieee754_pow+0x126>
 801a03a:	ed9d 7b00 	vldr	d7, [sp]
 801a03e:	eeb1 7b47 	vneg.f64	d7, d7
 801a042:	e786      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a044:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 801a048:	f10a 3aff 	add.w	sl, sl, #4294967295
 801a04c:	ea55 030a 	orrs.w	r3, r5, sl
 801a050:	d104      	bne.n	801a05c <__ieee754_pow+0x1dc>
 801a052:	ee38 8b48 	vsub.f64	d8, d8, d8
 801a056:	ee88 7b08 	vdiv.f64	d7, d8, d8
 801a05a:	e77a      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a05c:	4b52      	ldr	r3, [pc, #328]	; (801a1a8 <__ieee754_pow+0x328>)
 801a05e:	4598      	cmp	r8, r3
 801a060:	f340 80a8 	ble.w	801a1b4 <__ieee754_pow+0x334>
 801a064:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 801a068:	4598      	cmp	r8, r3
 801a06a:	dd0b      	ble.n	801a084 <__ieee754_pow+0x204>
 801a06c:	4b4b      	ldr	r3, [pc, #300]	; (801a19c <__ieee754_pow+0x31c>)
 801a06e:	429c      	cmp	r4, r3
 801a070:	dc0e      	bgt.n	801a090 <__ieee754_pow+0x210>
 801a072:	f1b9 0f00 	cmp.w	r9, #0
 801a076:	f6bf af6a 	bge.w	8019f4e <__ieee754_pow+0xce>
 801a07a:	ed9f 7b3b 	vldr	d7, [pc, #236]	; 801a168 <__ieee754_pow+0x2e8>
 801a07e:	ee27 7b07 	vmul.f64	d7, d7, d7
 801a082:	e766      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a084:	4b49      	ldr	r3, [pc, #292]	; (801a1ac <__ieee754_pow+0x32c>)
 801a086:	429c      	cmp	r4, r3
 801a088:	ddf3      	ble.n	801a072 <__ieee754_pow+0x1f2>
 801a08a:	4b45      	ldr	r3, [pc, #276]	; (801a1a0 <__ieee754_pow+0x320>)
 801a08c:	429c      	cmp	r4, r3
 801a08e:	dd03      	ble.n	801a098 <__ieee754_pow+0x218>
 801a090:	f1b9 0f00 	cmp.w	r9, #0
 801a094:	dcf1      	bgt.n	801a07a <__ieee754_pow+0x1fa>
 801a096:	e75a      	b.n	8019f4e <__ieee754_pow+0xce>
 801a098:	ed9d 7b00 	vldr	d7, [sp]
 801a09c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a0a0:	ed9f 5b33 	vldr	d5, [pc, #204]	; 801a170 <__ieee754_pow+0x2f0>
 801a0a4:	ee37 6b46 	vsub.f64	d6, d7, d6
 801a0a8:	eeb5 7b00 	vmov.f64	d7, #80	; 0x3e800000  0.250
 801a0ac:	eeb1 3b46 	vneg.f64	d3, d6
 801a0b0:	eea3 5b07 	vfma.f64	d5, d3, d7
 801a0b4:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
 801a0b8:	eea5 7b46 	vfms.f64	d7, d5, d6
 801a0bc:	ee26 5b06 	vmul.f64	d5, d6, d6
 801a0c0:	ee27 5b05 	vmul.f64	d5, d7, d5
 801a0c4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 801a178 <__ieee754_pow+0x2f8>
 801a0c8:	ee27 7b45 	vnmul.f64	d7, d7, d5
 801a0cc:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a180 <__ieee754_pow+0x300>
 801a0d0:	eea6 7b05 	vfma.f64	d7, d6, d5
 801a0d4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 801a188 <__ieee754_pow+0x308>
 801a0d8:	eeb0 4b47 	vmov.f64	d4, d7
 801a0dc:	eea6 4b05 	vfma.f64	d4, d6, d5
 801a0e0:	ec53 2b14 	vmov	r2, r3, d4
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	ec43 2b14 	vmov	d4, r2, r3
 801a0ea:	eeb0 6b44 	vmov.f64	d6, d4
 801a0ee:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a0f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a0f6:	3d01      	subs	r5, #1
 801a0f8:	ea55 030a 	orrs.w	r3, r5, sl
 801a0fc:	f04f 0200 	mov.w	r2, #0
 801a100:	463b      	mov	r3, r7
 801a102:	eebf 6b00 	vmov.f64	d6, #240	; 0xbf800000 -1.0
 801a106:	eeb7 8b00 	vmov.f64	d8, #112	; 0x3f800000  1.0
 801a10a:	ec47 6b15 	vmov	d5, r6, r7
 801a10e:	fe06 8b08 	vseleq.f64	d8, d6, d8
 801a112:	ec47 6b13 	vmov	d3, r6, r7
 801a116:	ec43 2b16 	vmov	d6, r2, r3
 801a11a:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a11e:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a122:	4b23      	ldr	r3, [pc, #140]	; (801a1b0 <__ieee754_pow+0x330>)
 801a124:	eea5 7b04 	vfma.f64	d7, d5, d4
 801a128:	ee24 6b06 	vmul.f64	d6, d4, d6
 801a12c:	ee37 5b06 	vadd.f64	d5, d7, d6
 801a130:	ee15 1a90 	vmov	r1, s11
 801a134:	4299      	cmp	r1, r3
 801a136:	ee15 2a10 	vmov	r2, s10
 801a13a:	f340 819b 	ble.w	801a474 <__ieee754_pow+0x5f4>
 801a13e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801a142:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801a146:	4313      	orrs	r3, r2
 801a148:	f000 810a 	beq.w	801a360 <__ieee754_pow+0x4e0>
 801a14c:	ed9f 7b06 	vldr	d7, [pc, #24]	; 801a168 <__ieee754_pow+0x2e8>
 801a150:	ee28 8b07 	vmul.f64	d8, d8, d7
 801a154:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a158:	e6fb      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a15a:	bf00      	nop
 801a15c:	f3af 8000 	nop.w
	...
 801a168:	8800759c 	.word	0x8800759c
 801a16c:	7e37e43c 	.word	0x7e37e43c
 801a170:	55555555 	.word	0x55555555
 801a174:	3fd55555 	.word	0x3fd55555
 801a178:	652b82fe 	.word	0x652b82fe
 801a17c:	3ff71547 	.word	0x3ff71547
 801a180:	f85ddf44 	.word	0xf85ddf44
 801a184:	3e54ae0b 	.word	0x3e54ae0b
 801a188:	60000000 	.word	0x60000000
 801a18c:	3ff71547 	.word	0x3ff71547
 801a190:	7ff00000 	.word	0x7ff00000
 801a194:	0801c6f3 	.word	0x0801c6f3
 801a198:	433fffff 	.word	0x433fffff
 801a19c:	3fefffff 	.word	0x3fefffff
 801a1a0:	3ff00000 	.word	0x3ff00000
 801a1a4:	3fe00000 	.word	0x3fe00000
 801a1a8:	41e00000 	.word	0x41e00000
 801a1ac:	3feffffe 	.word	0x3feffffe
 801a1b0:	408fffff 	.word	0x408fffff
 801a1b4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 801a1b8:	f280 80ce 	bge.w	801a358 <__ieee754_pow+0x4d8>
 801a1bc:	ed9d 6b00 	vldr	d6, [sp]
 801a1c0:	ed9f 7bc1 	vldr	d7, [pc, #772]	; 801a4c8 <__ieee754_pow+0x648>
 801a1c4:	ee26 7b07 	vmul.f64	d7, d6, d7
 801a1c8:	ed8d 7b00 	vstr	d7, [sp]
 801a1cc:	9c01      	ldr	r4, [sp, #4]
 801a1ce:	f06f 0334 	mvn.w	r3, #52	; 0x34
 801a1d2:	1521      	asrs	r1, r4, #20
 801a1d4:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 801a1d8:	4419      	add	r1, r3
 801a1da:	4be3      	ldr	r3, [pc, #908]	; (801a568 <__ieee754_pow+0x6e8>)
 801a1dc:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801a1e0:	f044 507f 	orr.w	r0, r4, #1069547520	; 0x3fc00000
 801a1e4:	429c      	cmp	r4, r3
 801a1e6:	f440 1040 	orr.w	r0, r0, #3145728	; 0x300000
 801a1ea:	dd06      	ble.n	801a1fa <__ieee754_pow+0x37a>
 801a1ec:	4bdf      	ldr	r3, [pc, #892]	; (801a56c <__ieee754_pow+0x6ec>)
 801a1ee:	429c      	cmp	r4, r3
 801a1f0:	f340 80b4 	ble.w	801a35c <__ieee754_pow+0x4dc>
 801a1f4:	3101      	adds	r1, #1
 801a1f6:	f5a0 1080 	sub.w	r0, r0, #1048576	; 0x100000
 801a1fa:	2400      	movs	r4, #0
 801a1fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a200:	eeb7 4b00 	vmov.f64	d4, #112	; 0x3f800000  1.0
 801a204:	4603      	mov	r3, r0
 801a206:	ec43 2b17 	vmov	d7, r2, r3
 801a20a:	4bd9      	ldr	r3, [pc, #868]	; (801a570 <__ieee754_pow+0x6f0>)
 801a20c:	ea4f 0cc4 	mov.w	ip, r4, lsl #3
 801a210:	4463      	add	r3, ip
 801a212:	ed93 5b00 	vldr	d5, [r3]
 801a216:	1040      	asrs	r0, r0, #1
 801a218:	ee37 2b45 	vsub.f64	d2, d7, d5
 801a21c:	ee35 6b07 	vadd.f64	d6, d5, d7
 801a220:	ee84 1b06 	vdiv.f64	d1, d4, d6
 801a224:	ee22 6b01 	vmul.f64	d6, d2, d1
 801a228:	ed8d 6b00 	vstr	d6, [sp]
 801a22c:	e9dd 8900 	ldrd	r8, r9, [sp]
 801a230:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 801a234:	f500 2000 	add.w	r0, r0, #524288	; 0x80000
 801a238:	f04f 0800 	mov.w	r8, #0
 801a23c:	eb00 4384 	add.w	r3, r0, r4, lsl #18
 801a240:	2200      	movs	r2, #0
 801a242:	ec49 8b14 	vmov	d4, r8, r9
 801a246:	ec43 2b16 	vmov	d6, r2, r3
 801a24a:	eeb1 3b44 	vneg.f64	d3, d4
 801a24e:	eea3 2b06 	vfma.f64	d2, d3, d6
 801a252:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a256:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a25a:	eea3 2b07 	vfma.f64	d2, d3, d7
 801a25e:	ed9d 7b00 	vldr	d7, [sp]
 801a262:	ee22 2b01 	vmul.f64	d2, d2, d1
 801a266:	ee27 5b07 	vmul.f64	d5, d7, d7
 801a26a:	ee37 6b04 	vadd.f64	d6, d7, d4
 801a26e:	ed9f 1b98 	vldr	d1, [pc, #608]	; 801a4d0 <__ieee754_pow+0x650>
 801a272:	ee25 0b05 	vmul.f64	d0, d5, d5
 801a276:	ee26 6b02 	vmul.f64	d6, d6, d2
 801a27a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a4d8 <__ieee754_pow+0x658>
 801a27e:	eea5 7b01 	vfma.f64	d7, d5, d1
 801a282:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801a4e0 <__ieee754_pow+0x660>
 801a286:	eea7 1b05 	vfma.f64	d1, d7, d5
 801a28a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a4e8 <__ieee754_pow+0x668>
 801a28e:	eea1 7b05 	vfma.f64	d7, d1, d5
 801a292:	ed9f 1b97 	vldr	d1, [pc, #604]	; 801a4f0 <__ieee754_pow+0x670>
 801a296:	eea7 1b05 	vfma.f64	d1, d7, d5
 801a29a:	ed9f 7b97 	vldr	d7, [pc, #604]	; 801a4f8 <__ieee754_pow+0x678>
 801a29e:	eea1 7b05 	vfma.f64	d7, d1, d5
 801a2a2:	eea0 6b07 	vfma.f64	d6, d0, d7
 801a2a6:	eeb0 7b08 	vmov.f64	d7, #8	; 0x40400000  3.0
 801a2aa:	eeb0 5b47 	vmov.f64	d5, d7
 801a2ae:	eea4 5b04 	vfma.f64	d5, d4, d4
 801a2b2:	ee35 5b06 	vadd.f64	d5, d5, d6
 801a2b6:	ed8d 5b02 	vstr	d5, [sp, #8]
 801a2ba:	f8cd 8008 	str.w	r8, [sp, #8]
 801a2be:	ed9d 5b02 	vldr	d5, [sp, #8]
 801a2c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a2c6:	eea3 7b04 	vfma.f64	d7, d3, d4
 801a2ca:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a2ce:	ed9d 6b00 	vldr	d6, [sp]
 801a2d2:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a2d6:	eea2 7b05 	vfma.f64	d7, d2, d5
 801a2da:	eeb0 6b47 	vmov.f64	d6, d7
 801a2de:	eea4 6b05 	vfma.f64	d6, d4, d5
 801a2e2:	ed8d 6b00 	vstr	d6, [sp]
 801a2e6:	f8cd 8000 	str.w	r8, [sp]
 801a2ea:	ed9d 2b00 	vldr	d2, [sp]
 801a2ee:	eeb0 6b42 	vmov.f64	d6, d2
 801a2f2:	eea3 6b05 	vfma.f64	d6, d3, d5
 801a2f6:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a2fa:	ed9f 6b81 	vldr	d6, [pc, #516]	; 801a500 <__ieee754_pow+0x680>
 801a2fe:	4b9d      	ldr	r3, [pc, #628]	; (801a574 <__ieee754_pow+0x6f4>)
 801a300:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a304:	ed9f 6b80 	vldr	d6, [pc, #512]	; 801a508 <__ieee754_pow+0x688>
 801a308:	4463      	add	r3, ip
 801a30a:	eea2 7b06 	vfma.f64	d7, d2, d6
 801a30e:	ed93 6b00 	vldr	d6, [r3]
 801a312:	4b99      	ldr	r3, [pc, #612]	; (801a578 <__ieee754_pow+0x6f8>)
 801a314:	ee37 6b06 	vadd.f64	d6, d7, d6
 801a318:	449c      	add	ip, r3
 801a31a:	ed9c 1b00 	vldr	d1, [ip]
 801a31e:	eeb0 4b46 	vmov.f64	d4, d6
 801a322:	ed9f 3b7b 	vldr	d3, [pc, #492]	; 801a510 <__ieee754_pow+0x690>
 801a326:	ee07 1a90 	vmov	s15, r1
 801a32a:	eea2 4b03 	vfma.f64	d4, d2, d3
 801a32e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a332:	ee34 4b01 	vadd.f64	d4, d4, d1
 801a336:	ee34 5b07 	vadd.f64	d5, d4, d7
 801a33a:	ed8d 5b00 	vstr	d5, [sp]
 801a33e:	f8cd 8000 	str.w	r8, [sp]
 801a342:	ed9d 4b00 	vldr	d4, [sp]
 801a346:	ee34 7b47 	vsub.f64	d7, d4, d7
 801a34a:	ee37 7b41 	vsub.f64	d7, d7, d1
 801a34e:	eea2 7b43 	vfms.f64	d7, d2, d3
 801a352:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a356:	e6ce      	b.n	801a0f6 <__ieee754_pow+0x276>
 801a358:	2300      	movs	r3, #0
 801a35a:	e73a      	b.n	801a1d2 <__ieee754_pow+0x352>
 801a35c:	2401      	movs	r4, #1
 801a35e:	e74d      	b.n	801a1fc <__ieee754_pow+0x37c>
 801a360:	ed9f 4b6d 	vldr	d4, [pc, #436]	; 801a518 <__ieee754_pow+0x698>
 801a364:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a368:	ee37 4b04 	vadd.f64	d4, d7, d4
 801a36c:	eeb4 4bc5 	vcmpe.f64	d4, d5
 801a370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a374:	f73f aeea 	bgt.w	801a14c <__ieee754_pow+0x2cc>
 801a378:	4a80      	ldr	r2, [pc, #512]	; (801a57c <__ieee754_pow+0x6fc>)
 801a37a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a37e:	4293      	cmp	r3, r2
 801a380:	f340 808e 	ble.w	801a4a0 <__ieee754_pow+0x620>
 801a384:	151b      	asrs	r3, r3, #20
 801a386:	f2a3 30fe 	subw	r0, r3, #1022	; 0x3fe
 801a38a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 801a38e:	4103      	asrs	r3, r0
 801a390:	440b      	add	r3, r1
 801a392:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a396:	487a      	ldr	r0, [pc, #488]	; (801a580 <__ieee754_pow+0x700>)
 801a398:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801a39c:	4110      	asrs	r0, r2
 801a39e:	ea23 0500 	bic.w	r5, r3, r0
 801a3a2:	f3c3 0013 	ubfx	r0, r3, #0, #20
 801a3a6:	2400      	movs	r4, #0
 801a3a8:	f440 1080 	orr.w	r0, r0, #1048576	; 0x100000
 801a3ac:	f1c2 0214 	rsb	r2, r2, #20
 801a3b0:	ec45 4b15 	vmov	d5, r4, r5
 801a3b4:	4110      	asrs	r0, r2
 801a3b6:	2900      	cmp	r1, #0
 801a3b8:	bfb8      	it	lt
 801a3ba:	4240      	neglt	r0, r0
 801a3bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a3c0:	ee36 5b07 	vadd.f64	d5, d6, d7
 801a3c4:	ec53 2b15 	vmov	r2, r3, d5
 801a3c8:	2200      	movs	r2, #0
 801a3ca:	ec43 2b15 	vmov	d5, r2, r3
 801a3ce:	ed9f 4b54 	vldr	d4, [pc, #336]	; 801a520 <__ieee754_pow+0x6a0>
 801a3d2:	ee35 6b46 	vsub.f64	d6, d5, d6
 801a3d6:	ee37 6b46 	vsub.f64	d6, d7, d6
 801a3da:	ed9f 7b53 	vldr	d7, [pc, #332]	; 801a528 <__ieee754_pow+0x6a8>
 801a3de:	ee25 7b07 	vmul.f64	d7, d5, d7
 801a3e2:	eea6 7b04 	vfma.f64	d7, d6, d4
 801a3e6:	ed9f 6b52 	vldr	d6, [pc, #328]	; 801a530 <__ieee754_pow+0x6b0>
 801a3ea:	eeb0 4b47 	vmov.f64	d4, d7
 801a3ee:	eea5 4b06 	vfma.f64	d4, d5, d6
 801a3f2:	eeb0 3b44 	vmov.f64	d3, d4
 801a3f6:	eea5 3b46 	vfms.f64	d3, d5, d6
 801a3fa:	ed9f 5b4f 	vldr	d5, [pc, #316]	; 801a538 <__ieee754_pow+0x6b8>
 801a3fe:	ee37 7b43 	vsub.f64	d7, d7, d3
 801a402:	ee24 6b04 	vmul.f64	d6, d4, d4
 801a406:	ed9f 3b4e 	vldr	d3, [pc, #312]	; 801a540 <__ieee754_pow+0x6c0>
 801a40a:	eea4 7b07 	vfma.f64	d7, d4, d7
 801a40e:	eea6 3b05 	vfma.f64	d3, d6, d5
 801a412:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801a548 <__ieee754_pow+0x6c8>
 801a416:	eea3 5b06 	vfma.f64	d5, d3, d6
 801a41a:	ed9f 3b4d 	vldr	d3, [pc, #308]	; 801a550 <__ieee754_pow+0x6d0>
 801a41e:	eea5 3b06 	vfma.f64	d3, d5, d6
 801a422:	ed9f 5b4d 	vldr	d5, [pc, #308]	; 801a558 <__ieee754_pow+0x6d8>
 801a426:	eea3 5b06 	vfma.f64	d5, d3, d6
 801a42a:	eeb0 3b44 	vmov.f64	d3, d4
 801a42e:	eea5 3b46 	vfms.f64	d3, d5, d6
 801a432:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
 801a436:	eeb0 6b43 	vmov.f64	d6, d3
 801a43a:	ee24 3b03 	vmul.f64	d3, d4, d3
 801a43e:	ee36 5b45 	vsub.f64	d5, d6, d5
 801a442:	ee83 6b05 	vdiv.f64	d6, d3, d5
 801a446:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a44a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a44e:	ee37 7b44 	vsub.f64	d7, d7, d4
 801a452:	ee36 7b47 	vsub.f64	d7, d6, d7
 801a456:	ed8d 7b00 	vstr	d7, [sp]
 801a45a:	9901      	ldr	r1, [sp, #4]
 801a45c:	eb01 5100 	add.w	r1, r1, r0, lsl #20
 801a460:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 801a464:	da1e      	bge.n	801a4a4 <__ieee754_pow+0x624>
 801a466:	eeb0 0b47 	vmov.f64	d0, d7
 801a46a:	f000 f939 	bl	801a6e0 <scalbn>
 801a46e:	ee20 7b08 	vmul.f64	d7, d0, d8
 801a472:	e56e      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a474:	4b43      	ldr	r3, [pc, #268]	; (801a584 <__ieee754_pow+0x704>)
 801a476:	f021 4000 	bic.w	r0, r1, #2147483648	; 0x80000000
 801a47a:	4298      	cmp	r0, r3
 801a47c:	f77f af7c 	ble.w	801a378 <__ieee754_pow+0x4f8>
 801a480:	4b41      	ldr	r3, [pc, #260]	; (801a588 <__ieee754_pow+0x708>)
 801a482:	440b      	add	r3, r1
 801a484:	4313      	orrs	r3, r2
 801a486:	d002      	beq.n	801a48e <__ieee754_pow+0x60e>
 801a488:	ed9f 7b35 	vldr	d7, [pc, #212]	; 801a560 <__ieee754_pow+0x6e0>
 801a48c:	e660      	b.n	801a150 <__ieee754_pow+0x2d0>
 801a48e:	ee35 5b46 	vsub.f64	d5, d5, d6
 801a492:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a496:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a49a:	f6ff af6d 	blt.w	801a378 <__ieee754_pow+0x4f8>
 801a49e:	e7f3      	b.n	801a488 <__ieee754_pow+0x608>
 801a4a0:	2000      	movs	r0, #0
 801a4a2:	e78d      	b.n	801a3c0 <__ieee754_pow+0x540>
 801a4a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a4a8:	460b      	mov	r3, r1
 801a4aa:	ec43 2b10 	vmov	d0, r2, r3
 801a4ae:	e7de      	b.n	801a46e <__ieee754_pow+0x5ee>
 801a4b0:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
 801a4b4:	e54d      	b.n	8019f52 <__ieee754_pow+0xd2>
 801a4b6:	e9cd 6700 	strd	r6, r7, [sp]
 801a4ba:	e574      	b.n	8019fa6 <__ieee754_pow+0x126>
 801a4bc:	ed8d 8b00 	vstr	d8, [sp]
 801a4c0:	e571      	b.n	8019fa6 <__ieee754_pow+0x126>
 801a4c2:	4615      	mov	r5, r2
 801a4c4:	e557      	b.n	8019f76 <__ieee754_pow+0xf6>
 801a4c6:	bf00      	nop
 801a4c8:	00000000 	.word	0x00000000
 801a4cc:	43400000 	.word	0x43400000
 801a4d0:	4a454eef 	.word	0x4a454eef
 801a4d4:	3fca7e28 	.word	0x3fca7e28
 801a4d8:	93c9db65 	.word	0x93c9db65
 801a4dc:	3fcd864a 	.word	0x3fcd864a
 801a4e0:	a91d4101 	.word	0xa91d4101
 801a4e4:	3fd17460 	.word	0x3fd17460
 801a4e8:	518f264d 	.word	0x518f264d
 801a4ec:	3fd55555 	.word	0x3fd55555
 801a4f0:	db6fabff 	.word	0xdb6fabff
 801a4f4:	3fdb6db6 	.word	0x3fdb6db6
 801a4f8:	33333303 	.word	0x33333303
 801a4fc:	3fe33333 	.word	0x3fe33333
 801a500:	dc3a03fd 	.word	0xdc3a03fd
 801a504:	3feec709 	.word	0x3feec709
 801a508:	145b01f5 	.word	0x145b01f5
 801a50c:	be3e2fe0 	.word	0xbe3e2fe0
 801a510:	e0000000 	.word	0xe0000000
 801a514:	3feec709 	.word	0x3feec709
 801a518:	652b82fe 	.word	0x652b82fe
 801a51c:	3c971547 	.word	0x3c971547
 801a520:	fefa39ef 	.word	0xfefa39ef
 801a524:	3fe62e42 	.word	0x3fe62e42
 801a528:	0ca86c39 	.word	0x0ca86c39
 801a52c:	be205c61 	.word	0xbe205c61
 801a530:	00000000 	.word	0x00000000
 801a534:	3fe62e43 	.word	0x3fe62e43
 801a538:	72bea4d0 	.word	0x72bea4d0
 801a53c:	3e663769 	.word	0x3e663769
 801a540:	c5d26bf1 	.word	0xc5d26bf1
 801a544:	bebbbd41 	.word	0xbebbbd41
 801a548:	af25de2c 	.word	0xaf25de2c
 801a54c:	3f11566a 	.word	0x3f11566a
 801a550:	16bebd93 	.word	0x16bebd93
 801a554:	bf66c16c 	.word	0xbf66c16c
 801a558:	5555553e 	.word	0x5555553e
 801a55c:	3fc55555 	.word	0x3fc55555
 801a560:	c2f8f359 	.word	0xc2f8f359
 801a564:	01a56e1f 	.word	0x01a56e1f
 801a568:	0003988e 	.word	0x0003988e
 801a56c:	000bb679 	.word	0x000bb679
 801a570:	0801c640 	.word	0x0801c640
 801a574:	0801c660 	.word	0x0801c660
 801a578:	0801c650 	.word	0x0801c650
 801a57c:	3fe00000 	.word	0x3fe00000
 801a580:	000fffff 	.word	0x000fffff
 801a584:	4090cbff 	.word	0x4090cbff
 801a588:	3f6f3400 	.word	0x3f6f3400

0801a58c <__ieee754_sqrt>:
 801a58c:	eeb1 0bc0 	vsqrt.f64	d0, d0
 801a590:	4770      	bx	lr

0801a592 <fabs>:
 801a592:	ec51 0b10 	vmov	r0, r1, d0
 801a596:	ee10 2a10 	vmov	r2, s0
 801a59a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801a59e:	ec43 2b10 	vmov	d0, r2, r3
 801a5a2:	4770      	bx	lr

0801a5a4 <finite>:
 801a5a4:	ee10 3a90 	vmov	r3, s1
 801a5a8:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801a5ac:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801a5b0:	0fc0      	lsrs	r0, r0, #31
 801a5b2:	4770      	bx	lr

0801a5b4 <matherr>:
 801a5b4:	2000      	movs	r0, #0
 801a5b6:	4770      	bx	lr

0801a5b8 <nan>:
 801a5b8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801a5c0 <nan+0x8>
 801a5bc:	4770      	bx	lr
 801a5be:	bf00      	nop
 801a5c0:	00000000 	.word	0x00000000
 801a5c4:	7ff80000 	.word	0x7ff80000

0801a5c8 <rint>:
 801a5c8:	b530      	push	{r4, r5, lr}
 801a5ca:	b085      	sub	sp, #20
 801a5cc:	ed8d 0b00 	vstr	d0, [sp]
 801a5d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 801a5d4:	f3c3 510a 	ubfx	r1, r3, #20, #11
 801a5d8:	f2a1 30ff 	subw	r0, r1, #1023	; 0x3ff
 801a5dc:	2813      	cmp	r0, #19
 801a5de:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 801a5e2:	dc5a      	bgt.n	801a69a <rint+0xd2>
 801a5e4:	2800      	cmp	r0, #0
 801a5e6:	da2f      	bge.n	801a648 <rint+0x80>
 801a5e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801a5ec:	4311      	orrs	r1, r2
 801a5ee:	d027      	beq.n	801a640 <rint+0x78>
 801a5f0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 801a5f4:	4315      	orrs	r5, r2
 801a5f6:	426a      	negs	r2, r5
 801a5f8:	432a      	orrs	r2, r5
 801a5fa:	0b12      	lsrs	r2, r2, #12
 801a5fc:	0c5b      	lsrs	r3, r3, #17
 801a5fe:	045b      	lsls	r3, r3, #17
 801a600:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 801a604:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a608:	ea42 0103 	orr.w	r1, r2, r3
 801a60c:	4b31      	ldr	r3, [pc, #196]	; (801a6d4 <rint+0x10c>)
 801a60e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a612:	ed93 6b00 	vldr	d6, [r3]
 801a616:	ec41 0b17 	vmov	d7, r0, r1
 801a61a:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a61e:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a622:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a626:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a62a:	ed8d 7b00 	vstr	d7, [sp]
 801a62e:	9b01      	ldr	r3, [sp, #4]
 801a630:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a634:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a638:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 801a63c:	e9cd 0100 	strd	r0, r1, [sp]
 801a640:	ed9d 0b00 	vldr	d0, [sp]
 801a644:	b005      	add	sp, #20
 801a646:	bd30      	pop	{r4, r5, pc}
 801a648:	4923      	ldr	r1, [pc, #140]	; (801a6d8 <rint+0x110>)
 801a64a:	4101      	asrs	r1, r0
 801a64c:	ea03 0501 	and.w	r5, r3, r1
 801a650:	4315      	orrs	r5, r2
 801a652:	d0f5      	beq.n	801a640 <rint+0x78>
 801a654:	0849      	lsrs	r1, r1, #1
 801a656:	ea03 0501 	and.w	r5, r3, r1
 801a65a:	432a      	orrs	r2, r5
 801a65c:	d00b      	beq.n	801a676 <rint+0xae>
 801a65e:	ea23 0101 	bic.w	r1, r3, r1
 801a662:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801a666:	2813      	cmp	r0, #19
 801a668:	fa43 f300 	asr.w	r3, r3, r0
 801a66c:	bf0c      	ite	eq
 801a66e:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 801a672:	2200      	movne	r2, #0
 801a674:	430b      	orrs	r3, r1
 801a676:	4619      	mov	r1, r3
 801a678:	4b16      	ldr	r3, [pc, #88]	; (801a6d4 <rint+0x10c>)
 801a67a:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 801a67e:	ed94 6b00 	vldr	d6, [r4]
 801a682:	4610      	mov	r0, r2
 801a684:	ec41 0b17 	vmov	d7, r0, r1
 801a688:	ee36 7b07 	vadd.f64	d7, d6, d7
 801a68c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a690:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a694:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a698:	e008      	b.n	801a6ac <rint+0xe4>
 801a69a:	2833      	cmp	r0, #51	; 0x33
 801a69c:	dd09      	ble.n	801a6b2 <rint+0xea>
 801a69e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 801a6a2:	d1cd      	bne.n	801a640 <rint+0x78>
 801a6a4:	ed9d 7b00 	vldr	d7, [sp]
 801a6a8:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a6ac:	ed8d 7b00 	vstr	d7, [sp]
 801a6b0:	e7c6      	b.n	801a640 <rint+0x78>
 801a6b2:	f2a1 4013 	subw	r0, r1, #1043	; 0x413
 801a6b6:	f04f 31ff 	mov.w	r1, #4294967295
 801a6ba:	40c1      	lsrs	r1, r0
 801a6bc:	420a      	tst	r2, r1
 801a6be:	d0bf      	beq.n	801a640 <rint+0x78>
 801a6c0:	0849      	lsrs	r1, r1, #1
 801a6c2:	420a      	tst	r2, r1
 801a6c4:	bf1f      	itttt	ne
 801a6c6:	ea22 0101 	bicne.w	r1, r2, r1
 801a6ca:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 801a6ce:	4102      	asrne	r2, r0
 801a6d0:	430a      	orrne	r2, r1
 801a6d2:	e7d0      	b.n	801a676 <rint+0xae>
 801a6d4:	0801c670 	.word	0x0801c670
 801a6d8:	000fffff 	.word	0x000fffff
 801a6dc:	00000000 	.word	0x00000000

0801a6e0 <scalbn>:
 801a6e0:	b500      	push	{lr}
 801a6e2:	ed2d 8b02 	vpush	{d8}
 801a6e6:	b083      	sub	sp, #12
 801a6e8:	ed8d 0b00 	vstr	d0, [sp]
 801a6ec:	9b01      	ldr	r3, [sp, #4]
 801a6ee:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a6f2:	b9a2      	cbnz	r2, 801a71e <scalbn+0x3e>
 801a6f4:	9a00      	ldr	r2, [sp, #0]
 801a6f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a6fa:	4313      	orrs	r3, r2
 801a6fc:	d03a      	beq.n	801a774 <scalbn+0x94>
 801a6fe:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 801a7b8 <scalbn+0xd8>
 801a702:	4b35      	ldr	r3, [pc, #212]	; (801a7d8 <scalbn+0xf8>)
 801a704:	ee20 7b07 	vmul.f64	d7, d0, d7
 801a708:	4298      	cmp	r0, r3
 801a70a:	ed8d 7b00 	vstr	d7, [sp]
 801a70e:	da11      	bge.n	801a734 <scalbn+0x54>
 801a710:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 801a7c0 <scalbn+0xe0>
 801a714:	ed9d 6b00 	vldr	d6, [sp]
 801a718:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a71c:	e007      	b.n	801a72e <scalbn+0x4e>
 801a71e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801a722:	428a      	cmp	r2, r1
 801a724:	d10a      	bne.n	801a73c <scalbn+0x5c>
 801a726:	ed9d 7b00 	vldr	d7, [sp]
 801a72a:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a72e:	ed8d 7b00 	vstr	d7, [sp]
 801a732:	e01f      	b.n	801a774 <scalbn+0x94>
 801a734:	9b01      	ldr	r3, [sp, #4]
 801a736:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801a73a:	3a36      	subs	r2, #54	; 0x36
 801a73c:	4402      	add	r2, r0
 801a73e:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801a742:	428a      	cmp	r2, r1
 801a744:	dd0a      	ble.n	801a75c <scalbn+0x7c>
 801a746:	ed9f 8b20 	vldr	d8, [pc, #128]	; 801a7c8 <scalbn+0xe8>
 801a74a:	eeb0 0b48 	vmov.f64	d0, d8
 801a74e:	ed9d 1b00 	vldr	d1, [sp]
 801a752:	f000 f843 	bl	801a7dc <copysign>
 801a756:	ee20 7b08 	vmul.f64	d7, d0, d8
 801a75a:	e7e8      	b.n	801a72e <scalbn+0x4e>
 801a75c:	2a00      	cmp	r2, #0
 801a75e:	dd10      	ble.n	801a782 <scalbn+0xa2>
 801a760:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a764:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a768:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a76c:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a770:	e9cd 0100 	strd	r0, r1, [sp]
 801a774:	ed9d 0b00 	vldr	d0, [sp]
 801a778:	b003      	add	sp, #12
 801a77a:	ecbd 8b02 	vpop	{d8}
 801a77e:	f85d fb04 	ldr.w	pc, [sp], #4
 801a782:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801a786:	da06      	bge.n	801a796 <scalbn+0xb6>
 801a788:	f24c 3350 	movw	r3, #50000	; 0xc350
 801a78c:	4298      	cmp	r0, r3
 801a78e:	dcda      	bgt.n	801a746 <scalbn+0x66>
 801a790:	ed9f 8b0b 	vldr	d8, [pc, #44]	; 801a7c0 <scalbn+0xe0>
 801a794:	e7d9      	b.n	801a74a <scalbn+0x6a>
 801a796:	e9dd 0100 	ldrd	r0, r1, [sp]
 801a79a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801a79e:	3236      	adds	r2, #54	; 0x36
 801a7a0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801a7a4:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801a7a8:	ec41 0b17 	vmov	d7, r0, r1
 801a7ac:	ed9f 6b08 	vldr	d6, [pc, #32]	; 801a7d0 <scalbn+0xf0>
 801a7b0:	e7b2      	b.n	801a718 <scalbn+0x38>
 801a7b2:	bf00      	nop
 801a7b4:	f3af 8000 	nop.w
 801a7b8:	00000000 	.word	0x00000000
 801a7bc:	43500000 	.word	0x43500000
 801a7c0:	c2f8f359 	.word	0xc2f8f359
 801a7c4:	01a56e1f 	.word	0x01a56e1f
 801a7c8:	8800759c 	.word	0x8800759c
 801a7cc:	7e37e43c 	.word	0x7e37e43c
 801a7d0:	00000000 	.word	0x00000000
 801a7d4:	3c900000 	.word	0x3c900000
 801a7d8:	ffff3cb0 	.word	0xffff3cb0

0801a7dc <copysign>:
 801a7dc:	ec51 0b10 	vmov	r0, r1, d0
 801a7e0:	ee11 0a90 	vmov	r0, s3
 801a7e4:	ee10 2a10 	vmov	r2, s0
 801a7e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801a7ec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 801a7f0:	ea41 0300 	orr.w	r3, r1, r0
 801a7f4:	ec43 2b10 	vmov	d0, r2, r3
 801a7f8:	4770      	bx	lr

0801a7fa <atoi>:
 801a7fa:	220a      	movs	r2, #10
 801a7fc:	2100      	movs	r1, #0
 801a7fe:	f000 baaf 	b.w	801ad60 <strtol>
	...

0801a804 <__errno>:
 801a804:	4b01      	ldr	r3, [pc, #4]	; (801a80c <__errno+0x8>)
 801a806:	6818      	ldr	r0, [r3, #0]
 801a808:	4770      	bx	lr
 801a80a:	bf00      	nop
 801a80c:	2400017c 	.word	0x2400017c

0801a810 <__libc_init_array>:
 801a810:	b570      	push	{r4, r5, r6, lr}
 801a812:	4e0d      	ldr	r6, [pc, #52]	; (801a848 <__libc_init_array+0x38>)
 801a814:	4c0d      	ldr	r4, [pc, #52]	; (801a84c <__libc_init_array+0x3c>)
 801a816:	1ba4      	subs	r4, r4, r6
 801a818:	10a4      	asrs	r4, r4, #2
 801a81a:	2500      	movs	r5, #0
 801a81c:	42a5      	cmp	r5, r4
 801a81e:	d109      	bne.n	801a834 <__libc_init_array+0x24>
 801a820:	4e0b      	ldr	r6, [pc, #44]	; (801a850 <__libc_init_array+0x40>)
 801a822:	4c0c      	ldr	r4, [pc, #48]	; (801a854 <__libc_init_array+0x44>)
 801a824:	f001 fa82 	bl	801bd2c <_init>
 801a828:	1ba4      	subs	r4, r4, r6
 801a82a:	10a4      	asrs	r4, r4, #2
 801a82c:	2500      	movs	r5, #0
 801a82e:	42a5      	cmp	r5, r4
 801a830:	d105      	bne.n	801a83e <__libc_init_array+0x2e>
 801a832:	bd70      	pop	{r4, r5, r6, pc}
 801a834:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a838:	4798      	blx	r3
 801a83a:	3501      	adds	r5, #1
 801a83c:	e7ee      	b.n	801a81c <__libc_init_array+0xc>
 801a83e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801a842:	4798      	blx	r3
 801a844:	3501      	adds	r5, #1
 801a846:	e7f2      	b.n	801a82e <__libc_init_array+0x1e>
 801a848:	0801c82c 	.word	0x0801c82c
 801a84c:	0801c82c 	.word	0x0801c82c
 801a850:	0801c82c 	.word	0x0801c82c
 801a854:	0801c830 	.word	0x0801c830

0801a858 <malloc>:
 801a858:	4b02      	ldr	r3, [pc, #8]	; (801a864 <malloc+0xc>)
 801a85a:	4601      	mov	r1, r0
 801a85c:	6818      	ldr	r0, [r3, #0]
 801a85e:	f000 b86d 	b.w	801a93c <_malloc_r>
 801a862:	bf00      	nop
 801a864:	2400017c 	.word	0x2400017c

0801a868 <free>:
 801a868:	4b02      	ldr	r3, [pc, #8]	; (801a874 <free+0xc>)
 801a86a:	4601      	mov	r1, r0
 801a86c:	6818      	ldr	r0, [r3, #0]
 801a86e:	f000 b817 	b.w	801a8a0 <_free_r>
 801a872:	bf00      	nop
 801a874:	2400017c 	.word	0x2400017c

0801a878 <memcpy>:
 801a878:	b510      	push	{r4, lr}
 801a87a:	1e43      	subs	r3, r0, #1
 801a87c:	440a      	add	r2, r1
 801a87e:	4291      	cmp	r1, r2
 801a880:	d100      	bne.n	801a884 <memcpy+0xc>
 801a882:	bd10      	pop	{r4, pc}
 801a884:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a888:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a88c:	e7f7      	b.n	801a87e <memcpy+0x6>

0801a88e <memset>:
 801a88e:	4402      	add	r2, r0
 801a890:	4603      	mov	r3, r0
 801a892:	4293      	cmp	r3, r2
 801a894:	d100      	bne.n	801a898 <memset+0xa>
 801a896:	4770      	bx	lr
 801a898:	f803 1b01 	strb.w	r1, [r3], #1
 801a89c:	e7f9      	b.n	801a892 <memset+0x4>
	...

0801a8a0 <_free_r>:
 801a8a0:	b538      	push	{r3, r4, r5, lr}
 801a8a2:	4605      	mov	r5, r0
 801a8a4:	2900      	cmp	r1, #0
 801a8a6:	d045      	beq.n	801a934 <_free_r+0x94>
 801a8a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a8ac:	1f0c      	subs	r4, r1, #4
 801a8ae:	2b00      	cmp	r3, #0
 801a8b0:	bfb8      	it	lt
 801a8b2:	18e4      	addlt	r4, r4, r3
 801a8b4:	f000 fd1e 	bl	801b2f4 <__malloc_lock>
 801a8b8:	4a1f      	ldr	r2, [pc, #124]	; (801a938 <_free_r+0x98>)
 801a8ba:	6813      	ldr	r3, [r2, #0]
 801a8bc:	4610      	mov	r0, r2
 801a8be:	b933      	cbnz	r3, 801a8ce <_free_r+0x2e>
 801a8c0:	6063      	str	r3, [r4, #4]
 801a8c2:	6014      	str	r4, [r2, #0]
 801a8c4:	4628      	mov	r0, r5
 801a8c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a8ca:	f000 bd14 	b.w	801b2f6 <__malloc_unlock>
 801a8ce:	42a3      	cmp	r3, r4
 801a8d0:	d90c      	bls.n	801a8ec <_free_r+0x4c>
 801a8d2:	6821      	ldr	r1, [r4, #0]
 801a8d4:	1862      	adds	r2, r4, r1
 801a8d6:	4293      	cmp	r3, r2
 801a8d8:	bf04      	itt	eq
 801a8da:	681a      	ldreq	r2, [r3, #0]
 801a8dc:	685b      	ldreq	r3, [r3, #4]
 801a8de:	6063      	str	r3, [r4, #4]
 801a8e0:	bf04      	itt	eq
 801a8e2:	1852      	addeq	r2, r2, r1
 801a8e4:	6022      	streq	r2, [r4, #0]
 801a8e6:	6004      	str	r4, [r0, #0]
 801a8e8:	e7ec      	b.n	801a8c4 <_free_r+0x24>
 801a8ea:	4613      	mov	r3, r2
 801a8ec:	685a      	ldr	r2, [r3, #4]
 801a8ee:	b10a      	cbz	r2, 801a8f4 <_free_r+0x54>
 801a8f0:	42a2      	cmp	r2, r4
 801a8f2:	d9fa      	bls.n	801a8ea <_free_r+0x4a>
 801a8f4:	6819      	ldr	r1, [r3, #0]
 801a8f6:	1858      	adds	r0, r3, r1
 801a8f8:	42a0      	cmp	r0, r4
 801a8fa:	d10b      	bne.n	801a914 <_free_r+0x74>
 801a8fc:	6820      	ldr	r0, [r4, #0]
 801a8fe:	4401      	add	r1, r0
 801a900:	1858      	adds	r0, r3, r1
 801a902:	4282      	cmp	r2, r0
 801a904:	6019      	str	r1, [r3, #0]
 801a906:	d1dd      	bne.n	801a8c4 <_free_r+0x24>
 801a908:	6810      	ldr	r0, [r2, #0]
 801a90a:	6852      	ldr	r2, [r2, #4]
 801a90c:	605a      	str	r2, [r3, #4]
 801a90e:	4401      	add	r1, r0
 801a910:	6019      	str	r1, [r3, #0]
 801a912:	e7d7      	b.n	801a8c4 <_free_r+0x24>
 801a914:	d902      	bls.n	801a91c <_free_r+0x7c>
 801a916:	230c      	movs	r3, #12
 801a918:	602b      	str	r3, [r5, #0]
 801a91a:	e7d3      	b.n	801a8c4 <_free_r+0x24>
 801a91c:	6820      	ldr	r0, [r4, #0]
 801a91e:	1821      	adds	r1, r4, r0
 801a920:	428a      	cmp	r2, r1
 801a922:	bf04      	itt	eq
 801a924:	6811      	ldreq	r1, [r2, #0]
 801a926:	6852      	ldreq	r2, [r2, #4]
 801a928:	6062      	str	r2, [r4, #4]
 801a92a:	bf04      	itt	eq
 801a92c:	1809      	addeq	r1, r1, r0
 801a92e:	6021      	streq	r1, [r4, #0]
 801a930:	605c      	str	r4, [r3, #4]
 801a932:	e7c7      	b.n	801a8c4 <_free_r+0x24>
 801a934:	bd38      	pop	{r3, r4, r5, pc}
 801a936:	bf00      	nop
 801a938:	24040504 	.word	0x24040504

0801a93c <_malloc_r>:
 801a93c:	b570      	push	{r4, r5, r6, lr}
 801a93e:	1ccd      	adds	r5, r1, #3
 801a940:	f025 0503 	bic.w	r5, r5, #3
 801a944:	3508      	adds	r5, #8
 801a946:	2d0c      	cmp	r5, #12
 801a948:	bf38      	it	cc
 801a94a:	250c      	movcc	r5, #12
 801a94c:	2d00      	cmp	r5, #0
 801a94e:	4606      	mov	r6, r0
 801a950:	db01      	blt.n	801a956 <_malloc_r+0x1a>
 801a952:	42a9      	cmp	r1, r5
 801a954:	d903      	bls.n	801a95e <_malloc_r+0x22>
 801a956:	230c      	movs	r3, #12
 801a958:	6033      	str	r3, [r6, #0]
 801a95a:	2000      	movs	r0, #0
 801a95c:	bd70      	pop	{r4, r5, r6, pc}
 801a95e:	f000 fcc9 	bl	801b2f4 <__malloc_lock>
 801a962:	4a21      	ldr	r2, [pc, #132]	; (801a9e8 <_malloc_r+0xac>)
 801a964:	6814      	ldr	r4, [r2, #0]
 801a966:	4621      	mov	r1, r4
 801a968:	b991      	cbnz	r1, 801a990 <_malloc_r+0x54>
 801a96a:	4c20      	ldr	r4, [pc, #128]	; (801a9ec <_malloc_r+0xb0>)
 801a96c:	6823      	ldr	r3, [r4, #0]
 801a96e:	b91b      	cbnz	r3, 801a978 <_malloc_r+0x3c>
 801a970:	4630      	mov	r0, r6
 801a972:	f000 f8b9 	bl	801aae8 <_sbrk_r>
 801a976:	6020      	str	r0, [r4, #0]
 801a978:	4629      	mov	r1, r5
 801a97a:	4630      	mov	r0, r6
 801a97c:	f000 f8b4 	bl	801aae8 <_sbrk_r>
 801a980:	1c43      	adds	r3, r0, #1
 801a982:	d124      	bne.n	801a9ce <_malloc_r+0x92>
 801a984:	230c      	movs	r3, #12
 801a986:	6033      	str	r3, [r6, #0]
 801a988:	4630      	mov	r0, r6
 801a98a:	f000 fcb4 	bl	801b2f6 <__malloc_unlock>
 801a98e:	e7e4      	b.n	801a95a <_malloc_r+0x1e>
 801a990:	680b      	ldr	r3, [r1, #0]
 801a992:	1b5b      	subs	r3, r3, r5
 801a994:	d418      	bmi.n	801a9c8 <_malloc_r+0x8c>
 801a996:	2b0b      	cmp	r3, #11
 801a998:	d90f      	bls.n	801a9ba <_malloc_r+0x7e>
 801a99a:	600b      	str	r3, [r1, #0]
 801a99c:	50cd      	str	r5, [r1, r3]
 801a99e:	18cc      	adds	r4, r1, r3
 801a9a0:	4630      	mov	r0, r6
 801a9a2:	f000 fca8 	bl	801b2f6 <__malloc_unlock>
 801a9a6:	f104 000b 	add.w	r0, r4, #11
 801a9aa:	1d23      	adds	r3, r4, #4
 801a9ac:	f020 0007 	bic.w	r0, r0, #7
 801a9b0:	1ac3      	subs	r3, r0, r3
 801a9b2:	d0d3      	beq.n	801a95c <_malloc_r+0x20>
 801a9b4:	425a      	negs	r2, r3
 801a9b6:	50e2      	str	r2, [r4, r3]
 801a9b8:	e7d0      	b.n	801a95c <_malloc_r+0x20>
 801a9ba:	428c      	cmp	r4, r1
 801a9bc:	684b      	ldr	r3, [r1, #4]
 801a9be:	bf16      	itet	ne
 801a9c0:	6063      	strne	r3, [r4, #4]
 801a9c2:	6013      	streq	r3, [r2, #0]
 801a9c4:	460c      	movne	r4, r1
 801a9c6:	e7eb      	b.n	801a9a0 <_malloc_r+0x64>
 801a9c8:	460c      	mov	r4, r1
 801a9ca:	6849      	ldr	r1, [r1, #4]
 801a9cc:	e7cc      	b.n	801a968 <_malloc_r+0x2c>
 801a9ce:	1cc4      	adds	r4, r0, #3
 801a9d0:	f024 0403 	bic.w	r4, r4, #3
 801a9d4:	42a0      	cmp	r0, r4
 801a9d6:	d005      	beq.n	801a9e4 <_malloc_r+0xa8>
 801a9d8:	1a21      	subs	r1, r4, r0
 801a9da:	4630      	mov	r0, r6
 801a9dc:	f000 f884 	bl	801aae8 <_sbrk_r>
 801a9e0:	3001      	adds	r0, #1
 801a9e2:	d0cf      	beq.n	801a984 <_malloc_r+0x48>
 801a9e4:	6025      	str	r5, [r4, #0]
 801a9e6:	e7db      	b.n	801a9a0 <_malloc_r+0x64>
 801a9e8:	24040504 	.word	0x24040504
 801a9ec:	24040508 	.word	0x24040508

0801a9f0 <iprintf>:
 801a9f0:	b40f      	push	{r0, r1, r2, r3}
 801a9f2:	4b0a      	ldr	r3, [pc, #40]	; (801aa1c <iprintf+0x2c>)
 801a9f4:	b513      	push	{r0, r1, r4, lr}
 801a9f6:	681c      	ldr	r4, [r3, #0]
 801a9f8:	b124      	cbz	r4, 801aa04 <iprintf+0x14>
 801a9fa:	69a3      	ldr	r3, [r4, #24]
 801a9fc:	b913      	cbnz	r3, 801aa04 <iprintf+0x14>
 801a9fe:	4620      	mov	r0, r4
 801aa00:	f000 fb74 	bl	801b0ec <__sinit>
 801aa04:	ab05      	add	r3, sp, #20
 801aa06:	9a04      	ldr	r2, [sp, #16]
 801aa08:	68a1      	ldr	r1, [r4, #8]
 801aa0a:	9301      	str	r3, [sp, #4]
 801aa0c:	4620      	mov	r0, r4
 801aa0e:	f000 fdef 	bl	801b5f0 <_vfiprintf_r>
 801aa12:	b002      	add	sp, #8
 801aa14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801aa18:	b004      	add	sp, #16
 801aa1a:	4770      	bx	lr
 801aa1c:	2400017c 	.word	0x2400017c

0801aa20 <_puts_r>:
 801aa20:	b570      	push	{r4, r5, r6, lr}
 801aa22:	460e      	mov	r6, r1
 801aa24:	4605      	mov	r5, r0
 801aa26:	b118      	cbz	r0, 801aa30 <_puts_r+0x10>
 801aa28:	6983      	ldr	r3, [r0, #24]
 801aa2a:	b90b      	cbnz	r3, 801aa30 <_puts_r+0x10>
 801aa2c:	f000 fb5e 	bl	801b0ec <__sinit>
 801aa30:	69ab      	ldr	r3, [r5, #24]
 801aa32:	68ac      	ldr	r4, [r5, #8]
 801aa34:	b913      	cbnz	r3, 801aa3c <_puts_r+0x1c>
 801aa36:	4628      	mov	r0, r5
 801aa38:	f000 fb58 	bl	801b0ec <__sinit>
 801aa3c:	4b23      	ldr	r3, [pc, #140]	; (801aacc <_puts_r+0xac>)
 801aa3e:	429c      	cmp	r4, r3
 801aa40:	d117      	bne.n	801aa72 <_puts_r+0x52>
 801aa42:	686c      	ldr	r4, [r5, #4]
 801aa44:	89a3      	ldrh	r3, [r4, #12]
 801aa46:	071b      	lsls	r3, r3, #28
 801aa48:	d51d      	bpl.n	801aa86 <_puts_r+0x66>
 801aa4a:	6923      	ldr	r3, [r4, #16]
 801aa4c:	b1db      	cbz	r3, 801aa86 <_puts_r+0x66>
 801aa4e:	3e01      	subs	r6, #1
 801aa50:	68a3      	ldr	r3, [r4, #8]
 801aa52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801aa56:	3b01      	subs	r3, #1
 801aa58:	60a3      	str	r3, [r4, #8]
 801aa5a:	b9e9      	cbnz	r1, 801aa98 <_puts_r+0x78>
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	da2e      	bge.n	801aabe <_puts_r+0x9e>
 801aa60:	4622      	mov	r2, r4
 801aa62:	210a      	movs	r1, #10
 801aa64:	4628      	mov	r0, r5
 801aa66:	f000 f991 	bl	801ad8c <__swbuf_r>
 801aa6a:	3001      	adds	r0, #1
 801aa6c:	d011      	beq.n	801aa92 <_puts_r+0x72>
 801aa6e:	200a      	movs	r0, #10
 801aa70:	e011      	b.n	801aa96 <_puts_r+0x76>
 801aa72:	4b17      	ldr	r3, [pc, #92]	; (801aad0 <_puts_r+0xb0>)
 801aa74:	429c      	cmp	r4, r3
 801aa76:	d101      	bne.n	801aa7c <_puts_r+0x5c>
 801aa78:	68ac      	ldr	r4, [r5, #8]
 801aa7a:	e7e3      	b.n	801aa44 <_puts_r+0x24>
 801aa7c:	4b15      	ldr	r3, [pc, #84]	; (801aad4 <_puts_r+0xb4>)
 801aa7e:	429c      	cmp	r4, r3
 801aa80:	bf08      	it	eq
 801aa82:	68ec      	ldreq	r4, [r5, #12]
 801aa84:	e7de      	b.n	801aa44 <_puts_r+0x24>
 801aa86:	4621      	mov	r1, r4
 801aa88:	4628      	mov	r0, r5
 801aa8a:	f000 f9d1 	bl	801ae30 <__swsetup_r>
 801aa8e:	2800      	cmp	r0, #0
 801aa90:	d0dd      	beq.n	801aa4e <_puts_r+0x2e>
 801aa92:	f04f 30ff 	mov.w	r0, #4294967295
 801aa96:	bd70      	pop	{r4, r5, r6, pc}
 801aa98:	2b00      	cmp	r3, #0
 801aa9a:	da04      	bge.n	801aaa6 <_puts_r+0x86>
 801aa9c:	69a2      	ldr	r2, [r4, #24]
 801aa9e:	429a      	cmp	r2, r3
 801aaa0:	dc06      	bgt.n	801aab0 <_puts_r+0x90>
 801aaa2:	290a      	cmp	r1, #10
 801aaa4:	d004      	beq.n	801aab0 <_puts_r+0x90>
 801aaa6:	6823      	ldr	r3, [r4, #0]
 801aaa8:	1c5a      	adds	r2, r3, #1
 801aaaa:	6022      	str	r2, [r4, #0]
 801aaac:	7019      	strb	r1, [r3, #0]
 801aaae:	e7cf      	b.n	801aa50 <_puts_r+0x30>
 801aab0:	4622      	mov	r2, r4
 801aab2:	4628      	mov	r0, r5
 801aab4:	f000 f96a 	bl	801ad8c <__swbuf_r>
 801aab8:	3001      	adds	r0, #1
 801aaba:	d1c9      	bne.n	801aa50 <_puts_r+0x30>
 801aabc:	e7e9      	b.n	801aa92 <_puts_r+0x72>
 801aabe:	6823      	ldr	r3, [r4, #0]
 801aac0:	200a      	movs	r0, #10
 801aac2:	1c5a      	adds	r2, r3, #1
 801aac4:	6022      	str	r2, [r4, #0]
 801aac6:	7018      	strb	r0, [r3, #0]
 801aac8:	e7e5      	b.n	801aa96 <_puts_r+0x76>
 801aaca:	bf00      	nop
 801aacc:	0801c6a4 	.word	0x0801c6a4
 801aad0:	0801c6c4 	.word	0x0801c6c4
 801aad4:	0801c684 	.word	0x0801c684

0801aad8 <puts>:
 801aad8:	4b02      	ldr	r3, [pc, #8]	; (801aae4 <puts+0xc>)
 801aada:	4601      	mov	r1, r0
 801aadc:	6818      	ldr	r0, [r3, #0]
 801aade:	f7ff bf9f 	b.w	801aa20 <_puts_r>
 801aae2:	bf00      	nop
 801aae4:	2400017c 	.word	0x2400017c

0801aae8 <_sbrk_r>:
 801aae8:	b538      	push	{r3, r4, r5, lr}
 801aaea:	4c06      	ldr	r4, [pc, #24]	; (801ab04 <_sbrk_r+0x1c>)
 801aaec:	2300      	movs	r3, #0
 801aaee:	4605      	mov	r5, r0
 801aaf0:	4608      	mov	r0, r1
 801aaf2:	6023      	str	r3, [r4, #0]
 801aaf4:	f7ea f80e 	bl	8004b14 <_sbrk>
 801aaf8:	1c43      	adds	r3, r0, #1
 801aafa:	d102      	bne.n	801ab02 <_sbrk_r+0x1a>
 801aafc:	6823      	ldr	r3, [r4, #0]
 801aafe:	b103      	cbz	r3, 801ab02 <_sbrk_r+0x1a>
 801ab00:	602b      	str	r3, [r5, #0]
 801ab02:	bd38      	pop	{r3, r4, r5, pc}
 801ab04:	24045748 	.word	0x24045748

0801ab08 <sniprintf>:
 801ab08:	b40c      	push	{r2, r3}
 801ab0a:	b530      	push	{r4, r5, lr}
 801ab0c:	4b17      	ldr	r3, [pc, #92]	; (801ab6c <sniprintf+0x64>)
 801ab0e:	1e0c      	subs	r4, r1, #0
 801ab10:	b09d      	sub	sp, #116	; 0x74
 801ab12:	681d      	ldr	r5, [r3, #0]
 801ab14:	da08      	bge.n	801ab28 <sniprintf+0x20>
 801ab16:	238b      	movs	r3, #139	; 0x8b
 801ab18:	602b      	str	r3, [r5, #0]
 801ab1a:	f04f 30ff 	mov.w	r0, #4294967295
 801ab1e:	b01d      	add	sp, #116	; 0x74
 801ab20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ab24:	b002      	add	sp, #8
 801ab26:	4770      	bx	lr
 801ab28:	f44f 7302 	mov.w	r3, #520	; 0x208
 801ab2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 801ab30:	bf14      	ite	ne
 801ab32:	f104 33ff 	addne.w	r3, r4, #4294967295
 801ab36:	4623      	moveq	r3, r4
 801ab38:	9304      	str	r3, [sp, #16]
 801ab3a:	9307      	str	r3, [sp, #28]
 801ab3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801ab40:	9002      	str	r0, [sp, #8]
 801ab42:	9006      	str	r0, [sp, #24]
 801ab44:	f8ad 3016 	strh.w	r3, [sp, #22]
 801ab48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 801ab4a:	ab21      	add	r3, sp, #132	; 0x84
 801ab4c:	a902      	add	r1, sp, #8
 801ab4e:	4628      	mov	r0, r5
 801ab50:	9301      	str	r3, [sp, #4]
 801ab52:	f000 fc2b 	bl	801b3ac <_svfiprintf_r>
 801ab56:	1c43      	adds	r3, r0, #1
 801ab58:	bfbc      	itt	lt
 801ab5a:	238b      	movlt	r3, #139	; 0x8b
 801ab5c:	602b      	strlt	r3, [r5, #0]
 801ab5e:	2c00      	cmp	r4, #0
 801ab60:	d0dd      	beq.n	801ab1e <sniprintf+0x16>
 801ab62:	9b02      	ldr	r3, [sp, #8]
 801ab64:	2200      	movs	r2, #0
 801ab66:	701a      	strb	r2, [r3, #0]
 801ab68:	e7d9      	b.n	801ab1e <sniprintf+0x16>
 801ab6a:	bf00      	nop
 801ab6c:	2400017c 	.word	0x2400017c

0801ab70 <siprintf>:
 801ab70:	b40e      	push	{r1, r2, r3}
 801ab72:	b500      	push	{lr}
 801ab74:	b09c      	sub	sp, #112	; 0x70
 801ab76:	ab1d      	add	r3, sp, #116	; 0x74
 801ab78:	9002      	str	r0, [sp, #8]
 801ab7a:	9006      	str	r0, [sp, #24]
 801ab7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801ab80:	4809      	ldr	r0, [pc, #36]	; (801aba8 <siprintf+0x38>)
 801ab82:	9107      	str	r1, [sp, #28]
 801ab84:	9104      	str	r1, [sp, #16]
 801ab86:	4909      	ldr	r1, [pc, #36]	; (801abac <siprintf+0x3c>)
 801ab88:	f853 2b04 	ldr.w	r2, [r3], #4
 801ab8c:	9105      	str	r1, [sp, #20]
 801ab8e:	6800      	ldr	r0, [r0, #0]
 801ab90:	9301      	str	r3, [sp, #4]
 801ab92:	a902      	add	r1, sp, #8
 801ab94:	f000 fc0a 	bl	801b3ac <_svfiprintf_r>
 801ab98:	9b02      	ldr	r3, [sp, #8]
 801ab9a:	2200      	movs	r2, #0
 801ab9c:	701a      	strb	r2, [r3, #0]
 801ab9e:	b01c      	add	sp, #112	; 0x70
 801aba0:	f85d eb04 	ldr.w	lr, [sp], #4
 801aba4:	b003      	add	sp, #12
 801aba6:	4770      	bx	lr
 801aba8:	2400017c 	.word	0x2400017c
 801abac:	ffff0208 	.word	0xffff0208

0801abb0 <strcpy>:
 801abb0:	4603      	mov	r3, r0
 801abb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 801abb6:	f803 2b01 	strb.w	r2, [r3], #1
 801abba:	2a00      	cmp	r2, #0
 801abbc:	d1f9      	bne.n	801abb2 <strcpy+0x2>
 801abbe:	4770      	bx	lr

0801abc0 <strtok>:
 801abc0:	4b13      	ldr	r3, [pc, #76]	; (801ac10 <strtok+0x50>)
 801abc2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801abc6:	681d      	ldr	r5, [r3, #0]
 801abc8:	6dac      	ldr	r4, [r5, #88]	; 0x58
 801abca:	4606      	mov	r6, r0
 801abcc:	460f      	mov	r7, r1
 801abce:	b9b4      	cbnz	r4, 801abfe <strtok+0x3e>
 801abd0:	2050      	movs	r0, #80	; 0x50
 801abd2:	f7ff fe41 	bl	801a858 <malloc>
 801abd6:	65a8      	str	r0, [r5, #88]	; 0x58
 801abd8:	e9c0 4400 	strd	r4, r4, [r0]
 801abdc:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801abe0:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801abe4:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 801abe8:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 801abec:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 801abf0:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 801abf4:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 801abf8:	6184      	str	r4, [r0, #24]
 801abfa:	7704      	strb	r4, [r0, #28]
 801abfc:	6244      	str	r4, [r0, #36]	; 0x24
 801abfe:	6daa      	ldr	r2, [r5, #88]	; 0x58
 801ac00:	4639      	mov	r1, r7
 801ac02:	4630      	mov	r0, r6
 801ac04:	2301      	movs	r3, #1
 801ac06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ac0a:	f000 b803 	b.w	801ac14 <__strtok_r>
 801ac0e:	bf00      	nop
 801ac10:	2400017c 	.word	0x2400017c

0801ac14 <__strtok_r>:
 801ac14:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ac16:	b918      	cbnz	r0, 801ac20 <__strtok_r+0xc>
 801ac18:	6810      	ldr	r0, [r2, #0]
 801ac1a:	b908      	cbnz	r0, 801ac20 <__strtok_r+0xc>
 801ac1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac1e:	4620      	mov	r0, r4
 801ac20:	4604      	mov	r4, r0
 801ac22:	460f      	mov	r7, r1
 801ac24:	f814 5b01 	ldrb.w	r5, [r4], #1
 801ac28:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ac2c:	b91e      	cbnz	r6, 801ac36 <__strtok_r+0x22>
 801ac2e:	b96d      	cbnz	r5, 801ac4c <__strtok_r+0x38>
 801ac30:	6015      	str	r5, [r2, #0]
 801ac32:	4628      	mov	r0, r5
 801ac34:	e7f2      	b.n	801ac1c <__strtok_r+0x8>
 801ac36:	42b5      	cmp	r5, r6
 801ac38:	d1f6      	bne.n	801ac28 <__strtok_r+0x14>
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d1ef      	bne.n	801ac1e <__strtok_r+0xa>
 801ac3e:	6014      	str	r4, [r2, #0]
 801ac40:	7003      	strb	r3, [r0, #0]
 801ac42:	e7eb      	b.n	801ac1c <__strtok_r+0x8>
 801ac44:	462b      	mov	r3, r5
 801ac46:	e00d      	b.n	801ac64 <__strtok_r+0x50>
 801ac48:	b926      	cbnz	r6, 801ac54 <__strtok_r+0x40>
 801ac4a:	461c      	mov	r4, r3
 801ac4c:	4623      	mov	r3, r4
 801ac4e:	460f      	mov	r7, r1
 801ac50:	f813 5b01 	ldrb.w	r5, [r3], #1
 801ac54:	f817 6b01 	ldrb.w	r6, [r7], #1
 801ac58:	42b5      	cmp	r5, r6
 801ac5a:	d1f5      	bne.n	801ac48 <__strtok_r+0x34>
 801ac5c:	2d00      	cmp	r5, #0
 801ac5e:	d0f1      	beq.n	801ac44 <__strtok_r+0x30>
 801ac60:	2100      	movs	r1, #0
 801ac62:	7021      	strb	r1, [r4, #0]
 801ac64:	6013      	str	r3, [r2, #0]
 801ac66:	e7d9      	b.n	801ac1c <__strtok_r+0x8>

0801ac68 <_strtol_l.isra.0>:
 801ac68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ac6c:	4680      	mov	r8, r0
 801ac6e:	4689      	mov	r9, r1
 801ac70:	4692      	mov	sl, r2
 801ac72:	461e      	mov	r6, r3
 801ac74:	460f      	mov	r7, r1
 801ac76:	463d      	mov	r5, r7
 801ac78:	9808      	ldr	r0, [sp, #32]
 801ac7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801ac7e:	f000 fabf 	bl	801b200 <__locale_ctype_ptr_l>
 801ac82:	4420      	add	r0, r4
 801ac84:	7843      	ldrb	r3, [r0, #1]
 801ac86:	f013 0308 	ands.w	r3, r3, #8
 801ac8a:	d132      	bne.n	801acf2 <_strtol_l.isra.0+0x8a>
 801ac8c:	2c2d      	cmp	r4, #45	; 0x2d
 801ac8e:	d132      	bne.n	801acf6 <_strtol_l.isra.0+0x8e>
 801ac90:	787c      	ldrb	r4, [r7, #1]
 801ac92:	1cbd      	adds	r5, r7, #2
 801ac94:	2201      	movs	r2, #1
 801ac96:	2e00      	cmp	r6, #0
 801ac98:	d05d      	beq.n	801ad56 <_strtol_l.isra.0+0xee>
 801ac9a:	2e10      	cmp	r6, #16
 801ac9c:	d109      	bne.n	801acb2 <_strtol_l.isra.0+0x4a>
 801ac9e:	2c30      	cmp	r4, #48	; 0x30
 801aca0:	d107      	bne.n	801acb2 <_strtol_l.isra.0+0x4a>
 801aca2:	782b      	ldrb	r3, [r5, #0]
 801aca4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 801aca8:	2b58      	cmp	r3, #88	; 0x58
 801acaa:	d14f      	bne.n	801ad4c <_strtol_l.isra.0+0xe4>
 801acac:	786c      	ldrb	r4, [r5, #1]
 801acae:	2610      	movs	r6, #16
 801acb0:	3502      	adds	r5, #2
 801acb2:	2a00      	cmp	r2, #0
 801acb4:	bf14      	ite	ne
 801acb6:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 801acba:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 801acbe:	2700      	movs	r7, #0
 801acc0:	fbb1 fcf6 	udiv	ip, r1, r6
 801acc4:	4638      	mov	r0, r7
 801acc6:	fb06 1e1c 	mls	lr, r6, ip, r1
 801acca:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 801acce:	2b09      	cmp	r3, #9
 801acd0:	d817      	bhi.n	801ad02 <_strtol_l.isra.0+0x9a>
 801acd2:	461c      	mov	r4, r3
 801acd4:	42a6      	cmp	r6, r4
 801acd6:	dd23      	ble.n	801ad20 <_strtol_l.isra.0+0xb8>
 801acd8:	1c7b      	adds	r3, r7, #1
 801acda:	d007      	beq.n	801acec <_strtol_l.isra.0+0x84>
 801acdc:	4584      	cmp	ip, r0
 801acde:	d31c      	bcc.n	801ad1a <_strtol_l.isra.0+0xb2>
 801ace0:	d101      	bne.n	801ace6 <_strtol_l.isra.0+0x7e>
 801ace2:	45a6      	cmp	lr, r4
 801ace4:	db19      	blt.n	801ad1a <_strtol_l.isra.0+0xb2>
 801ace6:	fb00 4006 	mla	r0, r0, r6, r4
 801acea:	2701      	movs	r7, #1
 801acec:	f815 4b01 	ldrb.w	r4, [r5], #1
 801acf0:	e7eb      	b.n	801acca <_strtol_l.isra.0+0x62>
 801acf2:	462f      	mov	r7, r5
 801acf4:	e7bf      	b.n	801ac76 <_strtol_l.isra.0+0xe>
 801acf6:	2c2b      	cmp	r4, #43	; 0x2b
 801acf8:	bf04      	itt	eq
 801acfa:	1cbd      	addeq	r5, r7, #2
 801acfc:	787c      	ldrbeq	r4, [r7, #1]
 801acfe:	461a      	mov	r2, r3
 801ad00:	e7c9      	b.n	801ac96 <_strtol_l.isra.0+0x2e>
 801ad02:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 801ad06:	2b19      	cmp	r3, #25
 801ad08:	d801      	bhi.n	801ad0e <_strtol_l.isra.0+0xa6>
 801ad0a:	3c37      	subs	r4, #55	; 0x37
 801ad0c:	e7e2      	b.n	801acd4 <_strtol_l.isra.0+0x6c>
 801ad0e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 801ad12:	2b19      	cmp	r3, #25
 801ad14:	d804      	bhi.n	801ad20 <_strtol_l.isra.0+0xb8>
 801ad16:	3c57      	subs	r4, #87	; 0x57
 801ad18:	e7dc      	b.n	801acd4 <_strtol_l.isra.0+0x6c>
 801ad1a:	f04f 37ff 	mov.w	r7, #4294967295
 801ad1e:	e7e5      	b.n	801acec <_strtol_l.isra.0+0x84>
 801ad20:	1c7b      	adds	r3, r7, #1
 801ad22:	d108      	bne.n	801ad36 <_strtol_l.isra.0+0xce>
 801ad24:	2322      	movs	r3, #34	; 0x22
 801ad26:	f8c8 3000 	str.w	r3, [r8]
 801ad2a:	4608      	mov	r0, r1
 801ad2c:	f1ba 0f00 	cmp.w	sl, #0
 801ad30:	d107      	bne.n	801ad42 <_strtol_l.isra.0+0xda>
 801ad32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad36:	b102      	cbz	r2, 801ad3a <_strtol_l.isra.0+0xd2>
 801ad38:	4240      	negs	r0, r0
 801ad3a:	f1ba 0f00 	cmp.w	sl, #0
 801ad3e:	d0f8      	beq.n	801ad32 <_strtol_l.isra.0+0xca>
 801ad40:	b10f      	cbz	r7, 801ad46 <_strtol_l.isra.0+0xde>
 801ad42:	f105 39ff 	add.w	r9, r5, #4294967295
 801ad46:	f8ca 9000 	str.w	r9, [sl]
 801ad4a:	e7f2      	b.n	801ad32 <_strtol_l.isra.0+0xca>
 801ad4c:	2430      	movs	r4, #48	; 0x30
 801ad4e:	2e00      	cmp	r6, #0
 801ad50:	d1af      	bne.n	801acb2 <_strtol_l.isra.0+0x4a>
 801ad52:	2608      	movs	r6, #8
 801ad54:	e7ad      	b.n	801acb2 <_strtol_l.isra.0+0x4a>
 801ad56:	2c30      	cmp	r4, #48	; 0x30
 801ad58:	d0a3      	beq.n	801aca2 <_strtol_l.isra.0+0x3a>
 801ad5a:	260a      	movs	r6, #10
 801ad5c:	e7a9      	b.n	801acb2 <_strtol_l.isra.0+0x4a>
	...

0801ad60 <strtol>:
 801ad60:	4b08      	ldr	r3, [pc, #32]	; (801ad84 <strtol+0x24>)
 801ad62:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801ad64:	681c      	ldr	r4, [r3, #0]
 801ad66:	4d08      	ldr	r5, [pc, #32]	; (801ad88 <strtol+0x28>)
 801ad68:	6a23      	ldr	r3, [r4, #32]
 801ad6a:	2b00      	cmp	r3, #0
 801ad6c:	bf08      	it	eq
 801ad6e:	462b      	moveq	r3, r5
 801ad70:	9300      	str	r3, [sp, #0]
 801ad72:	4613      	mov	r3, r2
 801ad74:	460a      	mov	r2, r1
 801ad76:	4601      	mov	r1, r0
 801ad78:	4620      	mov	r0, r4
 801ad7a:	f7ff ff75 	bl	801ac68 <_strtol_l.isra.0>
 801ad7e:	b003      	add	sp, #12
 801ad80:	bd30      	pop	{r4, r5, pc}
 801ad82:	bf00      	nop
 801ad84:	2400017c 	.word	0x2400017c
 801ad88:	240001e0 	.word	0x240001e0

0801ad8c <__swbuf_r>:
 801ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ad8e:	460e      	mov	r6, r1
 801ad90:	4614      	mov	r4, r2
 801ad92:	4605      	mov	r5, r0
 801ad94:	b118      	cbz	r0, 801ad9e <__swbuf_r+0x12>
 801ad96:	6983      	ldr	r3, [r0, #24]
 801ad98:	b90b      	cbnz	r3, 801ad9e <__swbuf_r+0x12>
 801ad9a:	f000 f9a7 	bl	801b0ec <__sinit>
 801ad9e:	4b21      	ldr	r3, [pc, #132]	; (801ae24 <__swbuf_r+0x98>)
 801ada0:	429c      	cmp	r4, r3
 801ada2:	d12a      	bne.n	801adfa <__swbuf_r+0x6e>
 801ada4:	686c      	ldr	r4, [r5, #4]
 801ada6:	69a3      	ldr	r3, [r4, #24]
 801ada8:	60a3      	str	r3, [r4, #8]
 801adaa:	89a3      	ldrh	r3, [r4, #12]
 801adac:	071a      	lsls	r2, r3, #28
 801adae:	d52e      	bpl.n	801ae0e <__swbuf_r+0x82>
 801adb0:	6923      	ldr	r3, [r4, #16]
 801adb2:	b363      	cbz	r3, 801ae0e <__swbuf_r+0x82>
 801adb4:	6923      	ldr	r3, [r4, #16]
 801adb6:	6820      	ldr	r0, [r4, #0]
 801adb8:	1ac0      	subs	r0, r0, r3
 801adba:	6963      	ldr	r3, [r4, #20]
 801adbc:	b2f6      	uxtb	r6, r6
 801adbe:	4283      	cmp	r3, r0
 801adc0:	4637      	mov	r7, r6
 801adc2:	dc04      	bgt.n	801adce <__swbuf_r+0x42>
 801adc4:	4621      	mov	r1, r4
 801adc6:	4628      	mov	r0, r5
 801adc8:	f000 f926 	bl	801b018 <_fflush_r>
 801adcc:	bb28      	cbnz	r0, 801ae1a <__swbuf_r+0x8e>
 801adce:	68a3      	ldr	r3, [r4, #8]
 801add0:	3b01      	subs	r3, #1
 801add2:	60a3      	str	r3, [r4, #8]
 801add4:	6823      	ldr	r3, [r4, #0]
 801add6:	1c5a      	adds	r2, r3, #1
 801add8:	6022      	str	r2, [r4, #0]
 801adda:	701e      	strb	r6, [r3, #0]
 801addc:	6963      	ldr	r3, [r4, #20]
 801adde:	3001      	adds	r0, #1
 801ade0:	4283      	cmp	r3, r0
 801ade2:	d004      	beq.n	801adee <__swbuf_r+0x62>
 801ade4:	89a3      	ldrh	r3, [r4, #12]
 801ade6:	07db      	lsls	r3, r3, #31
 801ade8:	d519      	bpl.n	801ae1e <__swbuf_r+0x92>
 801adea:	2e0a      	cmp	r6, #10
 801adec:	d117      	bne.n	801ae1e <__swbuf_r+0x92>
 801adee:	4621      	mov	r1, r4
 801adf0:	4628      	mov	r0, r5
 801adf2:	f000 f911 	bl	801b018 <_fflush_r>
 801adf6:	b190      	cbz	r0, 801ae1e <__swbuf_r+0x92>
 801adf8:	e00f      	b.n	801ae1a <__swbuf_r+0x8e>
 801adfa:	4b0b      	ldr	r3, [pc, #44]	; (801ae28 <__swbuf_r+0x9c>)
 801adfc:	429c      	cmp	r4, r3
 801adfe:	d101      	bne.n	801ae04 <__swbuf_r+0x78>
 801ae00:	68ac      	ldr	r4, [r5, #8]
 801ae02:	e7d0      	b.n	801ada6 <__swbuf_r+0x1a>
 801ae04:	4b09      	ldr	r3, [pc, #36]	; (801ae2c <__swbuf_r+0xa0>)
 801ae06:	429c      	cmp	r4, r3
 801ae08:	bf08      	it	eq
 801ae0a:	68ec      	ldreq	r4, [r5, #12]
 801ae0c:	e7cb      	b.n	801ada6 <__swbuf_r+0x1a>
 801ae0e:	4621      	mov	r1, r4
 801ae10:	4628      	mov	r0, r5
 801ae12:	f000 f80d 	bl	801ae30 <__swsetup_r>
 801ae16:	2800      	cmp	r0, #0
 801ae18:	d0cc      	beq.n	801adb4 <__swbuf_r+0x28>
 801ae1a:	f04f 37ff 	mov.w	r7, #4294967295
 801ae1e:	4638      	mov	r0, r7
 801ae20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ae22:	bf00      	nop
 801ae24:	0801c6a4 	.word	0x0801c6a4
 801ae28:	0801c6c4 	.word	0x0801c6c4
 801ae2c:	0801c684 	.word	0x0801c684

0801ae30 <__swsetup_r>:
 801ae30:	4b32      	ldr	r3, [pc, #200]	; (801aefc <__swsetup_r+0xcc>)
 801ae32:	b570      	push	{r4, r5, r6, lr}
 801ae34:	681d      	ldr	r5, [r3, #0]
 801ae36:	4606      	mov	r6, r0
 801ae38:	460c      	mov	r4, r1
 801ae3a:	b125      	cbz	r5, 801ae46 <__swsetup_r+0x16>
 801ae3c:	69ab      	ldr	r3, [r5, #24]
 801ae3e:	b913      	cbnz	r3, 801ae46 <__swsetup_r+0x16>
 801ae40:	4628      	mov	r0, r5
 801ae42:	f000 f953 	bl	801b0ec <__sinit>
 801ae46:	4b2e      	ldr	r3, [pc, #184]	; (801af00 <__swsetup_r+0xd0>)
 801ae48:	429c      	cmp	r4, r3
 801ae4a:	d10f      	bne.n	801ae6c <__swsetup_r+0x3c>
 801ae4c:	686c      	ldr	r4, [r5, #4]
 801ae4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ae52:	b29a      	uxth	r2, r3
 801ae54:	0715      	lsls	r5, r2, #28
 801ae56:	d42c      	bmi.n	801aeb2 <__swsetup_r+0x82>
 801ae58:	06d0      	lsls	r0, r2, #27
 801ae5a:	d411      	bmi.n	801ae80 <__swsetup_r+0x50>
 801ae5c:	2209      	movs	r2, #9
 801ae5e:	6032      	str	r2, [r6, #0]
 801ae60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ae64:	81a3      	strh	r3, [r4, #12]
 801ae66:	f04f 30ff 	mov.w	r0, #4294967295
 801ae6a:	e03e      	b.n	801aeea <__swsetup_r+0xba>
 801ae6c:	4b25      	ldr	r3, [pc, #148]	; (801af04 <__swsetup_r+0xd4>)
 801ae6e:	429c      	cmp	r4, r3
 801ae70:	d101      	bne.n	801ae76 <__swsetup_r+0x46>
 801ae72:	68ac      	ldr	r4, [r5, #8]
 801ae74:	e7eb      	b.n	801ae4e <__swsetup_r+0x1e>
 801ae76:	4b24      	ldr	r3, [pc, #144]	; (801af08 <__swsetup_r+0xd8>)
 801ae78:	429c      	cmp	r4, r3
 801ae7a:	bf08      	it	eq
 801ae7c:	68ec      	ldreq	r4, [r5, #12]
 801ae7e:	e7e6      	b.n	801ae4e <__swsetup_r+0x1e>
 801ae80:	0751      	lsls	r1, r2, #29
 801ae82:	d512      	bpl.n	801aeaa <__swsetup_r+0x7a>
 801ae84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801ae86:	b141      	cbz	r1, 801ae9a <__swsetup_r+0x6a>
 801ae88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801ae8c:	4299      	cmp	r1, r3
 801ae8e:	d002      	beq.n	801ae96 <__swsetup_r+0x66>
 801ae90:	4630      	mov	r0, r6
 801ae92:	f7ff fd05 	bl	801a8a0 <_free_r>
 801ae96:	2300      	movs	r3, #0
 801ae98:	6363      	str	r3, [r4, #52]	; 0x34
 801ae9a:	89a3      	ldrh	r3, [r4, #12]
 801ae9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801aea0:	81a3      	strh	r3, [r4, #12]
 801aea2:	2300      	movs	r3, #0
 801aea4:	6063      	str	r3, [r4, #4]
 801aea6:	6923      	ldr	r3, [r4, #16]
 801aea8:	6023      	str	r3, [r4, #0]
 801aeaa:	89a3      	ldrh	r3, [r4, #12]
 801aeac:	f043 0308 	orr.w	r3, r3, #8
 801aeb0:	81a3      	strh	r3, [r4, #12]
 801aeb2:	6923      	ldr	r3, [r4, #16]
 801aeb4:	b94b      	cbnz	r3, 801aeca <__swsetup_r+0x9a>
 801aeb6:	89a3      	ldrh	r3, [r4, #12]
 801aeb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801aebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801aec0:	d003      	beq.n	801aeca <__swsetup_r+0x9a>
 801aec2:	4621      	mov	r1, r4
 801aec4:	4630      	mov	r0, r6
 801aec6:	f000 f9c3 	bl	801b250 <__smakebuf_r>
 801aeca:	89a2      	ldrh	r2, [r4, #12]
 801aecc:	f012 0301 	ands.w	r3, r2, #1
 801aed0:	d00c      	beq.n	801aeec <__swsetup_r+0xbc>
 801aed2:	2300      	movs	r3, #0
 801aed4:	60a3      	str	r3, [r4, #8]
 801aed6:	6963      	ldr	r3, [r4, #20]
 801aed8:	425b      	negs	r3, r3
 801aeda:	61a3      	str	r3, [r4, #24]
 801aedc:	6923      	ldr	r3, [r4, #16]
 801aede:	b953      	cbnz	r3, 801aef6 <__swsetup_r+0xc6>
 801aee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801aee4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 801aee8:	d1ba      	bne.n	801ae60 <__swsetup_r+0x30>
 801aeea:	bd70      	pop	{r4, r5, r6, pc}
 801aeec:	0792      	lsls	r2, r2, #30
 801aeee:	bf58      	it	pl
 801aef0:	6963      	ldrpl	r3, [r4, #20]
 801aef2:	60a3      	str	r3, [r4, #8]
 801aef4:	e7f2      	b.n	801aedc <__swsetup_r+0xac>
 801aef6:	2000      	movs	r0, #0
 801aef8:	e7f7      	b.n	801aeea <__swsetup_r+0xba>
 801aefa:	bf00      	nop
 801aefc:	2400017c 	.word	0x2400017c
 801af00:	0801c6a4 	.word	0x0801c6a4
 801af04:	0801c6c4 	.word	0x0801c6c4
 801af08:	0801c684 	.word	0x0801c684

0801af0c <__sflush_r>:
 801af0c:	898a      	ldrh	r2, [r1, #12]
 801af0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801af12:	4605      	mov	r5, r0
 801af14:	0710      	lsls	r0, r2, #28
 801af16:	460c      	mov	r4, r1
 801af18:	d458      	bmi.n	801afcc <__sflush_r+0xc0>
 801af1a:	684b      	ldr	r3, [r1, #4]
 801af1c:	2b00      	cmp	r3, #0
 801af1e:	dc05      	bgt.n	801af2c <__sflush_r+0x20>
 801af20:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801af22:	2b00      	cmp	r3, #0
 801af24:	dc02      	bgt.n	801af2c <__sflush_r+0x20>
 801af26:	2000      	movs	r0, #0
 801af28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801af2c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af2e:	2e00      	cmp	r6, #0
 801af30:	d0f9      	beq.n	801af26 <__sflush_r+0x1a>
 801af32:	2300      	movs	r3, #0
 801af34:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801af38:	682f      	ldr	r7, [r5, #0]
 801af3a:	6a21      	ldr	r1, [r4, #32]
 801af3c:	602b      	str	r3, [r5, #0]
 801af3e:	d032      	beq.n	801afa6 <__sflush_r+0x9a>
 801af40:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801af42:	89a3      	ldrh	r3, [r4, #12]
 801af44:	075a      	lsls	r2, r3, #29
 801af46:	d505      	bpl.n	801af54 <__sflush_r+0x48>
 801af48:	6863      	ldr	r3, [r4, #4]
 801af4a:	1ac0      	subs	r0, r0, r3
 801af4c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801af4e:	b10b      	cbz	r3, 801af54 <__sflush_r+0x48>
 801af50:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801af52:	1ac0      	subs	r0, r0, r3
 801af54:	2300      	movs	r3, #0
 801af56:	4602      	mov	r2, r0
 801af58:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801af5a:	6a21      	ldr	r1, [r4, #32]
 801af5c:	4628      	mov	r0, r5
 801af5e:	47b0      	blx	r6
 801af60:	1c43      	adds	r3, r0, #1
 801af62:	89a3      	ldrh	r3, [r4, #12]
 801af64:	d106      	bne.n	801af74 <__sflush_r+0x68>
 801af66:	6829      	ldr	r1, [r5, #0]
 801af68:	291d      	cmp	r1, #29
 801af6a:	d848      	bhi.n	801affe <__sflush_r+0xf2>
 801af6c:	4a29      	ldr	r2, [pc, #164]	; (801b014 <__sflush_r+0x108>)
 801af6e:	40ca      	lsrs	r2, r1
 801af70:	07d6      	lsls	r6, r2, #31
 801af72:	d544      	bpl.n	801affe <__sflush_r+0xf2>
 801af74:	2200      	movs	r2, #0
 801af76:	6062      	str	r2, [r4, #4]
 801af78:	04d9      	lsls	r1, r3, #19
 801af7a:	6922      	ldr	r2, [r4, #16]
 801af7c:	6022      	str	r2, [r4, #0]
 801af7e:	d504      	bpl.n	801af8a <__sflush_r+0x7e>
 801af80:	1c42      	adds	r2, r0, #1
 801af82:	d101      	bne.n	801af88 <__sflush_r+0x7c>
 801af84:	682b      	ldr	r3, [r5, #0]
 801af86:	b903      	cbnz	r3, 801af8a <__sflush_r+0x7e>
 801af88:	6560      	str	r0, [r4, #84]	; 0x54
 801af8a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801af8c:	602f      	str	r7, [r5, #0]
 801af8e:	2900      	cmp	r1, #0
 801af90:	d0c9      	beq.n	801af26 <__sflush_r+0x1a>
 801af92:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801af96:	4299      	cmp	r1, r3
 801af98:	d002      	beq.n	801afa0 <__sflush_r+0x94>
 801af9a:	4628      	mov	r0, r5
 801af9c:	f7ff fc80 	bl	801a8a0 <_free_r>
 801afa0:	2000      	movs	r0, #0
 801afa2:	6360      	str	r0, [r4, #52]	; 0x34
 801afa4:	e7c0      	b.n	801af28 <__sflush_r+0x1c>
 801afa6:	2301      	movs	r3, #1
 801afa8:	4628      	mov	r0, r5
 801afaa:	47b0      	blx	r6
 801afac:	1c41      	adds	r1, r0, #1
 801afae:	d1c8      	bne.n	801af42 <__sflush_r+0x36>
 801afb0:	682b      	ldr	r3, [r5, #0]
 801afb2:	2b00      	cmp	r3, #0
 801afb4:	d0c5      	beq.n	801af42 <__sflush_r+0x36>
 801afb6:	2b1d      	cmp	r3, #29
 801afb8:	d001      	beq.n	801afbe <__sflush_r+0xb2>
 801afba:	2b16      	cmp	r3, #22
 801afbc:	d101      	bne.n	801afc2 <__sflush_r+0xb6>
 801afbe:	602f      	str	r7, [r5, #0]
 801afc0:	e7b1      	b.n	801af26 <__sflush_r+0x1a>
 801afc2:	89a3      	ldrh	r3, [r4, #12]
 801afc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801afc8:	81a3      	strh	r3, [r4, #12]
 801afca:	e7ad      	b.n	801af28 <__sflush_r+0x1c>
 801afcc:	690f      	ldr	r7, [r1, #16]
 801afce:	2f00      	cmp	r7, #0
 801afd0:	d0a9      	beq.n	801af26 <__sflush_r+0x1a>
 801afd2:	0793      	lsls	r3, r2, #30
 801afd4:	680e      	ldr	r6, [r1, #0]
 801afd6:	bf08      	it	eq
 801afd8:	694b      	ldreq	r3, [r1, #20]
 801afda:	600f      	str	r7, [r1, #0]
 801afdc:	bf18      	it	ne
 801afde:	2300      	movne	r3, #0
 801afe0:	eba6 0807 	sub.w	r8, r6, r7
 801afe4:	608b      	str	r3, [r1, #8]
 801afe6:	f1b8 0f00 	cmp.w	r8, #0
 801afea:	dd9c      	ble.n	801af26 <__sflush_r+0x1a>
 801afec:	4643      	mov	r3, r8
 801afee:	463a      	mov	r2, r7
 801aff0:	6a21      	ldr	r1, [r4, #32]
 801aff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801aff4:	4628      	mov	r0, r5
 801aff6:	47b0      	blx	r6
 801aff8:	2800      	cmp	r0, #0
 801affa:	dc06      	bgt.n	801b00a <__sflush_r+0xfe>
 801affc:	89a3      	ldrh	r3, [r4, #12]
 801affe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b002:	81a3      	strh	r3, [r4, #12]
 801b004:	f04f 30ff 	mov.w	r0, #4294967295
 801b008:	e78e      	b.n	801af28 <__sflush_r+0x1c>
 801b00a:	4407      	add	r7, r0
 801b00c:	eba8 0800 	sub.w	r8, r8, r0
 801b010:	e7e9      	b.n	801afe6 <__sflush_r+0xda>
 801b012:	bf00      	nop
 801b014:	20400001 	.word	0x20400001

0801b018 <_fflush_r>:
 801b018:	b538      	push	{r3, r4, r5, lr}
 801b01a:	690b      	ldr	r3, [r1, #16]
 801b01c:	4605      	mov	r5, r0
 801b01e:	460c      	mov	r4, r1
 801b020:	b1db      	cbz	r3, 801b05a <_fflush_r+0x42>
 801b022:	b118      	cbz	r0, 801b02c <_fflush_r+0x14>
 801b024:	6983      	ldr	r3, [r0, #24]
 801b026:	b90b      	cbnz	r3, 801b02c <_fflush_r+0x14>
 801b028:	f000 f860 	bl	801b0ec <__sinit>
 801b02c:	4b0c      	ldr	r3, [pc, #48]	; (801b060 <_fflush_r+0x48>)
 801b02e:	429c      	cmp	r4, r3
 801b030:	d109      	bne.n	801b046 <_fflush_r+0x2e>
 801b032:	686c      	ldr	r4, [r5, #4]
 801b034:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b038:	b17b      	cbz	r3, 801b05a <_fflush_r+0x42>
 801b03a:	4621      	mov	r1, r4
 801b03c:	4628      	mov	r0, r5
 801b03e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801b042:	f7ff bf63 	b.w	801af0c <__sflush_r>
 801b046:	4b07      	ldr	r3, [pc, #28]	; (801b064 <_fflush_r+0x4c>)
 801b048:	429c      	cmp	r4, r3
 801b04a:	d101      	bne.n	801b050 <_fflush_r+0x38>
 801b04c:	68ac      	ldr	r4, [r5, #8]
 801b04e:	e7f1      	b.n	801b034 <_fflush_r+0x1c>
 801b050:	4b05      	ldr	r3, [pc, #20]	; (801b068 <_fflush_r+0x50>)
 801b052:	429c      	cmp	r4, r3
 801b054:	bf08      	it	eq
 801b056:	68ec      	ldreq	r4, [r5, #12]
 801b058:	e7ec      	b.n	801b034 <_fflush_r+0x1c>
 801b05a:	2000      	movs	r0, #0
 801b05c:	bd38      	pop	{r3, r4, r5, pc}
 801b05e:	bf00      	nop
 801b060:	0801c6a4 	.word	0x0801c6a4
 801b064:	0801c6c4 	.word	0x0801c6c4
 801b068:	0801c684 	.word	0x0801c684

0801b06c <std>:
 801b06c:	2300      	movs	r3, #0
 801b06e:	b510      	push	{r4, lr}
 801b070:	4604      	mov	r4, r0
 801b072:	e9c0 3300 	strd	r3, r3, [r0]
 801b076:	6083      	str	r3, [r0, #8]
 801b078:	8181      	strh	r1, [r0, #12]
 801b07a:	6643      	str	r3, [r0, #100]	; 0x64
 801b07c:	81c2      	strh	r2, [r0, #14]
 801b07e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b082:	6183      	str	r3, [r0, #24]
 801b084:	4619      	mov	r1, r3
 801b086:	2208      	movs	r2, #8
 801b088:	305c      	adds	r0, #92	; 0x5c
 801b08a:	f7ff fc00 	bl	801a88e <memset>
 801b08e:	4b05      	ldr	r3, [pc, #20]	; (801b0a4 <std+0x38>)
 801b090:	6263      	str	r3, [r4, #36]	; 0x24
 801b092:	4b05      	ldr	r3, [pc, #20]	; (801b0a8 <std+0x3c>)
 801b094:	62a3      	str	r3, [r4, #40]	; 0x28
 801b096:	4b05      	ldr	r3, [pc, #20]	; (801b0ac <std+0x40>)
 801b098:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b09a:	4b05      	ldr	r3, [pc, #20]	; (801b0b0 <std+0x44>)
 801b09c:	6224      	str	r4, [r4, #32]
 801b09e:	6323      	str	r3, [r4, #48]	; 0x30
 801b0a0:	bd10      	pop	{r4, pc}
 801b0a2:	bf00      	nop
 801b0a4:	0801bb2d 	.word	0x0801bb2d
 801b0a8:	0801bb4f 	.word	0x0801bb4f
 801b0ac:	0801bb87 	.word	0x0801bb87
 801b0b0:	0801bbab 	.word	0x0801bbab

0801b0b4 <_cleanup_r>:
 801b0b4:	4901      	ldr	r1, [pc, #4]	; (801b0bc <_cleanup_r+0x8>)
 801b0b6:	f000 b885 	b.w	801b1c4 <_fwalk_reent>
 801b0ba:	bf00      	nop
 801b0bc:	0801b019 	.word	0x0801b019

0801b0c0 <__sfmoreglue>:
 801b0c0:	b570      	push	{r4, r5, r6, lr}
 801b0c2:	1e4a      	subs	r2, r1, #1
 801b0c4:	2568      	movs	r5, #104	; 0x68
 801b0c6:	4355      	muls	r5, r2
 801b0c8:	460e      	mov	r6, r1
 801b0ca:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801b0ce:	f7ff fc35 	bl	801a93c <_malloc_r>
 801b0d2:	4604      	mov	r4, r0
 801b0d4:	b140      	cbz	r0, 801b0e8 <__sfmoreglue+0x28>
 801b0d6:	2100      	movs	r1, #0
 801b0d8:	e9c0 1600 	strd	r1, r6, [r0]
 801b0dc:	300c      	adds	r0, #12
 801b0de:	60a0      	str	r0, [r4, #8]
 801b0e0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801b0e4:	f7ff fbd3 	bl	801a88e <memset>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	bd70      	pop	{r4, r5, r6, pc}

0801b0ec <__sinit>:
 801b0ec:	6983      	ldr	r3, [r0, #24]
 801b0ee:	b510      	push	{r4, lr}
 801b0f0:	4604      	mov	r4, r0
 801b0f2:	bb33      	cbnz	r3, 801b142 <__sinit+0x56>
 801b0f4:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 801b0f8:	6503      	str	r3, [r0, #80]	; 0x50
 801b0fa:	4b12      	ldr	r3, [pc, #72]	; (801b144 <__sinit+0x58>)
 801b0fc:	4a12      	ldr	r2, [pc, #72]	; (801b148 <__sinit+0x5c>)
 801b0fe:	681b      	ldr	r3, [r3, #0]
 801b100:	6282      	str	r2, [r0, #40]	; 0x28
 801b102:	4298      	cmp	r0, r3
 801b104:	bf04      	itt	eq
 801b106:	2301      	moveq	r3, #1
 801b108:	6183      	streq	r3, [r0, #24]
 801b10a:	f000 f81f 	bl	801b14c <__sfp>
 801b10e:	6060      	str	r0, [r4, #4]
 801b110:	4620      	mov	r0, r4
 801b112:	f000 f81b 	bl	801b14c <__sfp>
 801b116:	60a0      	str	r0, [r4, #8]
 801b118:	4620      	mov	r0, r4
 801b11a:	f000 f817 	bl	801b14c <__sfp>
 801b11e:	2200      	movs	r2, #0
 801b120:	60e0      	str	r0, [r4, #12]
 801b122:	2104      	movs	r1, #4
 801b124:	6860      	ldr	r0, [r4, #4]
 801b126:	f7ff ffa1 	bl	801b06c <std>
 801b12a:	2201      	movs	r2, #1
 801b12c:	2109      	movs	r1, #9
 801b12e:	68a0      	ldr	r0, [r4, #8]
 801b130:	f7ff ff9c 	bl	801b06c <std>
 801b134:	2202      	movs	r2, #2
 801b136:	2112      	movs	r1, #18
 801b138:	68e0      	ldr	r0, [r4, #12]
 801b13a:	f7ff ff97 	bl	801b06c <std>
 801b13e:	2301      	movs	r3, #1
 801b140:	61a3      	str	r3, [r4, #24]
 801b142:	bd10      	pop	{r4, pc}
 801b144:	0801c680 	.word	0x0801c680
 801b148:	0801b0b5 	.word	0x0801b0b5

0801b14c <__sfp>:
 801b14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b14e:	4b1b      	ldr	r3, [pc, #108]	; (801b1bc <__sfp+0x70>)
 801b150:	681e      	ldr	r6, [r3, #0]
 801b152:	69b3      	ldr	r3, [r6, #24]
 801b154:	4607      	mov	r7, r0
 801b156:	b913      	cbnz	r3, 801b15e <__sfp+0x12>
 801b158:	4630      	mov	r0, r6
 801b15a:	f7ff ffc7 	bl	801b0ec <__sinit>
 801b15e:	3648      	adds	r6, #72	; 0x48
 801b160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801b164:	3b01      	subs	r3, #1
 801b166:	d503      	bpl.n	801b170 <__sfp+0x24>
 801b168:	6833      	ldr	r3, [r6, #0]
 801b16a:	b133      	cbz	r3, 801b17a <__sfp+0x2e>
 801b16c:	6836      	ldr	r6, [r6, #0]
 801b16e:	e7f7      	b.n	801b160 <__sfp+0x14>
 801b170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801b174:	b16d      	cbz	r5, 801b192 <__sfp+0x46>
 801b176:	3468      	adds	r4, #104	; 0x68
 801b178:	e7f4      	b.n	801b164 <__sfp+0x18>
 801b17a:	2104      	movs	r1, #4
 801b17c:	4638      	mov	r0, r7
 801b17e:	f7ff ff9f 	bl	801b0c0 <__sfmoreglue>
 801b182:	6030      	str	r0, [r6, #0]
 801b184:	2800      	cmp	r0, #0
 801b186:	d1f1      	bne.n	801b16c <__sfp+0x20>
 801b188:	230c      	movs	r3, #12
 801b18a:	603b      	str	r3, [r7, #0]
 801b18c:	4604      	mov	r4, r0
 801b18e:	4620      	mov	r0, r4
 801b190:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b192:	4b0b      	ldr	r3, [pc, #44]	; (801b1c0 <__sfp+0x74>)
 801b194:	6665      	str	r5, [r4, #100]	; 0x64
 801b196:	e9c4 5500 	strd	r5, r5, [r4]
 801b19a:	60a5      	str	r5, [r4, #8]
 801b19c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801b1a0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 801b1a4:	2208      	movs	r2, #8
 801b1a6:	4629      	mov	r1, r5
 801b1a8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801b1ac:	f7ff fb6f 	bl	801a88e <memset>
 801b1b0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801b1b4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801b1b8:	e7e9      	b.n	801b18e <__sfp+0x42>
 801b1ba:	bf00      	nop
 801b1bc:	0801c680 	.word	0x0801c680
 801b1c0:	ffff0001 	.word	0xffff0001

0801b1c4 <_fwalk_reent>:
 801b1c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b1c8:	4680      	mov	r8, r0
 801b1ca:	4689      	mov	r9, r1
 801b1cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801b1d0:	2600      	movs	r6, #0
 801b1d2:	b914      	cbnz	r4, 801b1da <_fwalk_reent+0x16>
 801b1d4:	4630      	mov	r0, r6
 801b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b1da:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801b1de:	3f01      	subs	r7, #1
 801b1e0:	d501      	bpl.n	801b1e6 <_fwalk_reent+0x22>
 801b1e2:	6824      	ldr	r4, [r4, #0]
 801b1e4:	e7f5      	b.n	801b1d2 <_fwalk_reent+0xe>
 801b1e6:	89ab      	ldrh	r3, [r5, #12]
 801b1e8:	2b01      	cmp	r3, #1
 801b1ea:	d907      	bls.n	801b1fc <_fwalk_reent+0x38>
 801b1ec:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b1f0:	3301      	adds	r3, #1
 801b1f2:	d003      	beq.n	801b1fc <_fwalk_reent+0x38>
 801b1f4:	4629      	mov	r1, r5
 801b1f6:	4640      	mov	r0, r8
 801b1f8:	47c8      	blx	r9
 801b1fa:	4306      	orrs	r6, r0
 801b1fc:	3568      	adds	r5, #104	; 0x68
 801b1fe:	e7ee      	b.n	801b1de <_fwalk_reent+0x1a>

0801b200 <__locale_ctype_ptr_l>:
 801b200:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 801b204:	4770      	bx	lr

0801b206 <__swhatbuf_r>:
 801b206:	b570      	push	{r4, r5, r6, lr}
 801b208:	460e      	mov	r6, r1
 801b20a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b20e:	2900      	cmp	r1, #0
 801b210:	b096      	sub	sp, #88	; 0x58
 801b212:	4614      	mov	r4, r2
 801b214:	461d      	mov	r5, r3
 801b216:	da07      	bge.n	801b228 <__swhatbuf_r+0x22>
 801b218:	2300      	movs	r3, #0
 801b21a:	602b      	str	r3, [r5, #0]
 801b21c:	89b3      	ldrh	r3, [r6, #12]
 801b21e:	061a      	lsls	r2, r3, #24
 801b220:	d410      	bmi.n	801b244 <__swhatbuf_r+0x3e>
 801b222:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801b226:	e00e      	b.n	801b246 <__swhatbuf_r+0x40>
 801b228:	466a      	mov	r2, sp
 801b22a:	f000 fcf1 	bl	801bc10 <_fstat_r>
 801b22e:	2800      	cmp	r0, #0
 801b230:	dbf2      	blt.n	801b218 <__swhatbuf_r+0x12>
 801b232:	9a01      	ldr	r2, [sp, #4]
 801b234:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801b238:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801b23c:	425a      	negs	r2, r3
 801b23e:	415a      	adcs	r2, r3
 801b240:	602a      	str	r2, [r5, #0]
 801b242:	e7ee      	b.n	801b222 <__swhatbuf_r+0x1c>
 801b244:	2340      	movs	r3, #64	; 0x40
 801b246:	2000      	movs	r0, #0
 801b248:	6023      	str	r3, [r4, #0]
 801b24a:	b016      	add	sp, #88	; 0x58
 801b24c:	bd70      	pop	{r4, r5, r6, pc}
	...

0801b250 <__smakebuf_r>:
 801b250:	898b      	ldrh	r3, [r1, #12]
 801b252:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801b254:	079d      	lsls	r5, r3, #30
 801b256:	4606      	mov	r6, r0
 801b258:	460c      	mov	r4, r1
 801b25a:	d507      	bpl.n	801b26c <__smakebuf_r+0x1c>
 801b25c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801b260:	6023      	str	r3, [r4, #0]
 801b262:	6123      	str	r3, [r4, #16]
 801b264:	2301      	movs	r3, #1
 801b266:	6163      	str	r3, [r4, #20]
 801b268:	b002      	add	sp, #8
 801b26a:	bd70      	pop	{r4, r5, r6, pc}
 801b26c:	ab01      	add	r3, sp, #4
 801b26e:	466a      	mov	r2, sp
 801b270:	f7ff ffc9 	bl	801b206 <__swhatbuf_r>
 801b274:	9900      	ldr	r1, [sp, #0]
 801b276:	4605      	mov	r5, r0
 801b278:	4630      	mov	r0, r6
 801b27a:	f7ff fb5f 	bl	801a93c <_malloc_r>
 801b27e:	b948      	cbnz	r0, 801b294 <__smakebuf_r+0x44>
 801b280:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801b284:	059a      	lsls	r2, r3, #22
 801b286:	d4ef      	bmi.n	801b268 <__smakebuf_r+0x18>
 801b288:	f023 0303 	bic.w	r3, r3, #3
 801b28c:	f043 0302 	orr.w	r3, r3, #2
 801b290:	81a3      	strh	r3, [r4, #12]
 801b292:	e7e3      	b.n	801b25c <__smakebuf_r+0xc>
 801b294:	4b0d      	ldr	r3, [pc, #52]	; (801b2cc <__smakebuf_r+0x7c>)
 801b296:	62b3      	str	r3, [r6, #40]	; 0x28
 801b298:	89a3      	ldrh	r3, [r4, #12]
 801b29a:	6020      	str	r0, [r4, #0]
 801b29c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b2a0:	81a3      	strh	r3, [r4, #12]
 801b2a2:	9b00      	ldr	r3, [sp, #0]
 801b2a4:	6163      	str	r3, [r4, #20]
 801b2a6:	9b01      	ldr	r3, [sp, #4]
 801b2a8:	6120      	str	r0, [r4, #16]
 801b2aa:	b15b      	cbz	r3, 801b2c4 <__smakebuf_r+0x74>
 801b2ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b2b0:	4630      	mov	r0, r6
 801b2b2:	f000 fcbf 	bl	801bc34 <_isatty_r>
 801b2b6:	b128      	cbz	r0, 801b2c4 <__smakebuf_r+0x74>
 801b2b8:	89a3      	ldrh	r3, [r4, #12]
 801b2ba:	f023 0303 	bic.w	r3, r3, #3
 801b2be:	f043 0301 	orr.w	r3, r3, #1
 801b2c2:	81a3      	strh	r3, [r4, #12]
 801b2c4:	89a3      	ldrh	r3, [r4, #12]
 801b2c6:	431d      	orrs	r5, r3
 801b2c8:	81a5      	strh	r5, [r4, #12]
 801b2ca:	e7cd      	b.n	801b268 <__smakebuf_r+0x18>
 801b2cc:	0801b0b5 	.word	0x0801b0b5

0801b2d0 <__ascii_mbtowc>:
 801b2d0:	b082      	sub	sp, #8
 801b2d2:	b901      	cbnz	r1, 801b2d6 <__ascii_mbtowc+0x6>
 801b2d4:	a901      	add	r1, sp, #4
 801b2d6:	b142      	cbz	r2, 801b2ea <__ascii_mbtowc+0x1a>
 801b2d8:	b14b      	cbz	r3, 801b2ee <__ascii_mbtowc+0x1e>
 801b2da:	7813      	ldrb	r3, [r2, #0]
 801b2dc:	600b      	str	r3, [r1, #0]
 801b2de:	7812      	ldrb	r2, [r2, #0]
 801b2e0:	1c10      	adds	r0, r2, #0
 801b2e2:	bf18      	it	ne
 801b2e4:	2001      	movne	r0, #1
 801b2e6:	b002      	add	sp, #8
 801b2e8:	4770      	bx	lr
 801b2ea:	4610      	mov	r0, r2
 801b2ec:	e7fb      	b.n	801b2e6 <__ascii_mbtowc+0x16>
 801b2ee:	f06f 0001 	mvn.w	r0, #1
 801b2f2:	e7f8      	b.n	801b2e6 <__ascii_mbtowc+0x16>

0801b2f4 <__malloc_lock>:
 801b2f4:	4770      	bx	lr

0801b2f6 <__malloc_unlock>:
 801b2f6:	4770      	bx	lr

0801b2f8 <__ssputs_r>:
 801b2f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b2fc:	688e      	ldr	r6, [r1, #8]
 801b2fe:	429e      	cmp	r6, r3
 801b300:	4682      	mov	sl, r0
 801b302:	460c      	mov	r4, r1
 801b304:	4690      	mov	r8, r2
 801b306:	4699      	mov	r9, r3
 801b308:	d837      	bhi.n	801b37a <__ssputs_r+0x82>
 801b30a:	898a      	ldrh	r2, [r1, #12]
 801b30c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801b310:	d031      	beq.n	801b376 <__ssputs_r+0x7e>
 801b312:	6825      	ldr	r5, [r4, #0]
 801b314:	6909      	ldr	r1, [r1, #16]
 801b316:	1a6f      	subs	r7, r5, r1
 801b318:	6965      	ldr	r5, [r4, #20]
 801b31a:	2302      	movs	r3, #2
 801b31c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b320:	fb95 f5f3 	sdiv	r5, r5, r3
 801b324:	f109 0301 	add.w	r3, r9, #1
 801b328:	443b      	add	r3, r7
 801b32a:	429d      	cmp	r5, r3
 801b32c:	bf38      	it	cc
 801b32e:	461d      	movcc	r5, r3
 801b330:	0553      	lsls	r3, r2, #21
 801b332:	d530      	bpl.n	801b396 <__ssputs_r+0x9e>
 801b334:	4629      	mov	r1, r5
 801b336:	f7ff fb01 	bl	801a93c <_malloc_r>
 801b33a:	4606      	mov	r6, r0
 801b33c:	b950      	cbnz	r0, 801b354 <__ssputs_r+0x5c>
 801b33e:	230c      	movs	r3, #12
 801b340:	f8ca 3000 	str.w	r3, [sl]
 801b344:	89a3      	ldrh	r3, [r4, #12]
 801b346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b34a:	81a3      	strh	r3, [r4, #12]
 801b34c:	f04f 30ff 	mov.w	r0, #4294967295
 801b350:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b354:	463a      	mov	r2, r7
 801b356:	6921      	ldr	r1, [r4, #16]
 801b358:	f7ff fa8e 	bl	801a878 <memcpy>
 801b35c:	89a3      	ldrh	r3, [r4, #12]
 801b35e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801b362:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801b366:	81a3      	strh	r3, [r4, #12]
 801b368:	6126      	str	r6, [r4, #16]
 801b36a:	6165      	str	r5, [r4, #20]
 801b36c:	443e      	add	r6, r7
 801b36e:	1bed      	subs	r5, r5, r7
 801b370:	6026      	str	r6, [r4, #0]
 801b372:	60a5      	str	r5, [r4, #8]
 801b374:	464e      	mov	r6, r9
 801b376:	454e      	cmp	r6, r9
 801b378:	d900      	bls.n	801b37c <__ssputs_r+0x84>
 801b37a:	464e      	mov	r6, r9
 801b37c:	4632      	mov	r2, r6
 801b37e:	4641      	mov	r1, r8
 801b380:	6820      	ldr	r0, [r4, #0]
 801b382:	f000 fc79 	bl	801bc78 <memmove>
 801b386:	68a3      	ldr	r3, [r4, #8]
 801b388:	1b9b      	subs	r3, r3, r6
 801b38a:	60a3      	str	r3, [r4, #8]
 801b38c:	6823      	ldr	r3, [r4, #0]
 801b38e:	441e      	add	r6, r3
 801b390:	6026      	str	r6, [r4, #0]
 801b392:	2000      	movs	r0, #0
 801b394:	e7dc      	b.n	801b350 <__ssputs_r+0x58>
 801b396:	462a      	mov	r2, r5
 801b398:	f000 fc87 	bl	801bcaa <_realloc_r>
 801b39c:	4606      	mov	r6, r0
 801b39e:	2800      	cmp	r0, #0
 801b3a0:	d1e2      	bne.n	801b368 <__ssputs_r+0x70>
 801b3a2:	6921      	ldr	r1, [r4, #16]
 801b3a4:	4650      	mov	r0, sl
 801b3a6:	f7ff fa7b 	bl	801a8a0 <_free_r>
 801b3aa:	e7c8      	b.n	801b33e <__ssputs_r+0x46>

0801b3ac <_svfiprintf_r>:
 801b3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3b0:	461d      	mov	r5, r3
 801b3b2:	898b      	ldrh	r3, [r1, #12]
 801b3b4:	061f      	lsls	r7, r3, #24
 801b3b6:	b09d      	sub	sp, #116	; 0x74
 801b3b8:	4680      	mov	r8, r0
 801b3ba:	460c      	mov	r4, r1
 801b3bc:	4616      	mov	r6, r2
 801b3be:	d50f      	bpl.n	801b3e0 <_svfiprintf_r+0x34>
 801b3c0:	690b      	ldr	r3, [r1, #16]
 801b3c2:	b96b      	cbnz	r3, 801b3e0 <_svfiprintf_r+0x34>
 801b3c4:	2140      	movs	r1, #64	; 0x40
 801b3c6:	f7ff fab9 	bl	801a93c <_malloc_r>
 801b3ca:	6020      	str	r0, [r4, #0]
 801b3cc:	6120      	str	r0, [r4, #16]
 801b3ce:	b928      	cbnz	r0, 801b3dc <_svfiprintf_r+0x30>
 801b3d0:	230c      	movs	r3, #12
 801b3d2:	f8c8 3000 	str.w	r3, [r8]
 801b3d6:	f04f 30ff 	mov.w	r0, #4294967295
 801b3da:	e0c8      	b.n	801b56e <_svfiprintf_r+0x1c2>
 801b3dc:	2340      	movs	r3, #64	; 0x40
 801b3de:	6163      	str	r3, [r4, #20]
 801b3e0:	2300      	movs	r3, #0
 801b3e2:	9309      	str	r3, [sp, #36]	; 0x24
 801b3e4:	2320      	movs	r3, #32
 801b3e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b3ea:	2330      	movs	r3, #48	; 0x30
 801b3ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b3f0:	9503      	str	r5, [sp, #12]
 801b3f2:	f04f 0b01 	mov.w	fp, #1
 801b3f6:	4637      	mov	r7, r6
 801b3f8:	463d      	mov	r5, r7
 801b3fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b3fe:	b10b      	cbz	r3, 801b404 <_svfiprintf_r+0x58>
 801b400:	2b25      	cmp	r3, #37	; 0x25
 801b402:	d13e      	bne.n	801b482 <_svfiprintf_r+0xd6>
 801b404:	ebb7 0a06 	subs.w	sl, r7, r6
 801b408:	d00b      	beq.n	801b422 <_svfiprintf_r+0x76>
 801b40a:	4653      	mov	r3, sl
 801b40c:	4632      	mov	r2, r6
 801b40e:	4621      	mov	r1, r4
 801b410:	4640      	mov	r0, r8
 801b412:	f7ff ff71 	bl	801b2f8 <__ssputs_r>
 801b416:	3001      	adds	r0, #1
 801b418:	f000 80a4 	beq.w	801b564 <_svfiprintf_r+0x1b8>
 801b41c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b41e:	4453      	add	r3, sl
 801b420:	9309      	str	r3, [sp, #36]	; 0x24
 801b422:	783b      	ldrb	r3, [r7, #0]
 801b424:	2b00      	cmp	r3, #0
 801b426:	f000 809d 	beq.w	801b564 <_svfiprintf_r+0x1b8>
 801b42a:	2300      	movs	r3, #0
 801b42c:	f04f 32ff 	mov.w	r2, #4294967295
 801b430:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b434:	9304      	str	r3, [sp, #16]
 801b436:	9307      	str	r3, [sp, #28]
 801b438:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b43c:	931a      	str	r3, [sp, #104]	; 0x68
 801b43e:	462f      	mov	r7, r5
 801b440:	2205      	movs	r2, #5
 801b442:	f817 1b01 	ldrb.w	r1, [r7], #1
 801b446:	4850      	ldr	r0, [pc, #320]	; (801b588 <_svfiprintf_r+0x1dc>)
 801b448:	f7e4 ff52 	bl	80002f0 <memchr>
 801b44c:	9b04      	ldr	r3, [sp, #16]
 801b44e:	b9d0      	cbnz	r0, 801b486 <_svfiprintf_r+0xda>
 801b450:	06d9      	lsls	r1, r3, #27
 801b452:	bf44      	itt	mi
 801b454:	2220      	movmi	r2, #32
 801b456:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b45a:	071a      	lsls	r2, r3, #28
 801b45c:	bf44      	itt	mi
 801b45e:	222b      	movmi	r2, #43	; 0x2b
 801b460:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b464:	782a      	ldrb	r2, [r5, #0]
 801b466:	2a2a      	cmp	r2, #42	; 0x2a
 801b468:	d015      	beq.n	801b496 <_svfiprintf_r+0xea>
 801b46a:	9a07      	ldr	r2, [sp, #28]
 801b46c:	462f      	mov	r7, r5
 801b46e:	2000      	movs	r0, #0
 801b470:	250a      	movs	r5, #10
 801b472:	4639      	mov	r1, r7
 801b474:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b478:	3b30      	subs	r3, #48	; 0x30
 801b47a:	2b09      	cmp	r3, #9
 801b47c:	d94d      	bls.n	801b51a <_svfiprintf_r+0x16e>
 801b47e:	b1b8      	cbz	r0, 801b4b0 <_svfiprintf_r+0x104>
 801b480:	e00f      	b.n	801b4a2 <_svfiprintf_r+0xf6>
 801b482:	462f      	mov	r7, r5
 801b484:	e7b8      	b.n	801b3f8 <_svfiprintf_r+0x4c>
 801b486:	4a40      	ldr	r2, [pc, #256]	; (801b588 <_svfiprintf_r+0x1dc>)
 801b488:	1a80      	subs	r0, r0, r2
 801b48a:	fa0b f000 	lsl.w	r0, fp, r0
 801b48e:	4318      	orrs	r0, r3
 801b490:	9004      	str	r0, [sp, #16]
 801b492:	463d      	mov	r5, r7
 801b494:	e7d3      	b.n	801b43e <_svfiprintf_r+0x92>
 801b496:	9a03      	ldr	r2, [sp, #12]
 801b498:	1d11      	adds	r1, r2, #4
 801b49a:	6812      	ldr	r2, [r2, #0]
 801b49c:	9103      	str	r1, [sp, #12]
 801b49e:	2a00      	cmp	r2, #0
 801b4a0:	db01      	blt.n	801b4a6 <_svfiprintf_r+0xfa>
 801b4a2:	9207      	str	r2, [sp, #28]
 801b4a4:	e004      	b.n	801b4b0 <_svfiprintf_r+0x104>
 801b4a6:	4252      	negs	r2, r2
 801b4a8:	f043 0302 	orr.w	r3, r3, #2
 801b4ac:	9207      	str	r2, [sp, #28]
 801b4ae:	9304      	str	r3, [sp, #16]
 801b4b0:	783b      	ldrb	r3, [r7, #0]
 801b4b2:	2b2e      	cmp	r3, #46	; 0x2e
 801b4b4:	d10c      	bne.n	801b4d0 <_svfiprintf_r+0x124>
 801b4b6:	787b      	ldrb	r3, [r7, #1]
 801b4b8:	2b2a      	cmp	r3, #42	; 0x2a
 801b4ba:	d133      	bne.n	801b524 <_svfiprintf_r+0x178>
 801b4bc:	9b03      	ldr	r3, [sp, #12]
 801b4be:	1d1a      	adds	r2, r3, #4
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	9203      	str	r2, [sp, #12]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	bfb8      	it	lt
 801b4c8:	f04f 33ff 	movlt.w	r3, #4294967295
 801b4cc:	3702      	adds	r7, #2
 801b4ce:	9305      	str	r3, [sp, #20]
 801b4d0:	4d2e      	ldr	r5, [pc, #184]	; (801b58c <_svfiprintf_r+0x1e0>)
 801b4d2:	7839      	ldrb	r1, [r7, #0]
 801b4d4:	2203      	movs	r2, #3
 801b4d6:	4628      	mov	r0, r5
 801b4d8:	f7e4 ff0a 	bl	80002f0 <memchr>
 801b4dc:	b138      	cbz	r0, 801b4ee <_svfiprintf_r+0x142>
 801b4de:	2340      	movs	r3, #64	; 0x40
 801b4e0:	1b40      	subs	r0, r0, r5
 801b4e2:	fa03 f000 	lsl.w	r0, r3, r0
 801b4e6:	9b04      	ldr	r3, [sp, #16]
 801b4e8:	4303      	orrs	r3, r0
 801b4ea:	3701      	adds	r7, #1
 801b4ec:	9304      	str	r3, [sp, #16]
 801b4ee:	7839      	ldrb	r1, [r7, #0]
 801b4f0:	4827      	ldr	r0, [pc, #156]	; (801b590 <_svfiprintf_r+0x1e4>)
 801b4f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b4f6:	2206      	movs	r2, #6
 801b4f8:	1c7e      	adds	r6, r7, #1
 801b4fa:	f7e4 fef9 	bl	80002f0 <memchr>
 801b4fe:	2800      	cmp	r0, #0
 801b500:	d038      	beq.n	801b574 <_svfiprintf_r+0x1c8>
 801b502:	4b24      	ldr	r3, [pc, #144]	; (801b594 <_svfiprintf_r+0x1e8>)
 801b504:	bb13      	cbnz	r3, 801b54c <_svfiprintf_r+0x1a0>
 801b506:	9b03      	ldr	r3, [sp, #12]
 801b508:	3307      	adds	r3, #7
 801b50a:	f023 0307 	bic.w	r3, r3, #7
 801b50e:	3308      	adds	r3, #8
 801b510:	9303      	str	r3, [sp, #12]
 801b512:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b514:	444b      	add	r3, r9
 801b516:	9309      	str	r3, [sp, #36]	; 0x24
 801b518:	e76d      	b.n	801b3f6 <_svfiprintf_r+0x4a>
 801b51a:	fb05 3202 	mla	r2, r5, r2, r3
 801b51e:	2001      	movs	r0, #1
 801b520:	460f      	mov	r7, r1
 801b522:	e7a6      	b.n	801b472 <_svfiprintf_r+0xc6>
 801b524:	2300      	movs	r3, #0
 801b526:	3701      	adds	r7, #1
 801b528:	9305      	str	r3, [sp, #20]
 801b52a:	4619      	mov	r1, r3
 801b52c:	250a      	movs	r5, #10
 801b52e:	4638      	mov	r0, r7
 801b530:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b534:	3a30      	subs	r2, #48	; 0x30
 801b536:	2a09      	cmp	r2, #9
 801b538:	d903      	bls.n	801b542 <_svfiprintf_r+0x196>
 801b53a:	2b00      	cmp	r3, #0
 801b53c:	d0c8      	beq.n	801b4d0 <_svfiprintf_r+0x124>
 801b53e:	9105      	str	r1, [sp, #20]
 801b540:	e7c6      	b.n	801b4d0 <_svfiprintf_r+0x124>
 801b542:	fb05 2101 	mla	r1, r5, r1, r2
 801b546:	2301      	movs	r3, #1
 801b548:	4607      	mov	r7, r0
 801b54a:	e7f0      	b.n	801b52e <_svfiprintf_r+0x182>
 801b54c:	ab03      	add	r3, sp, #12
 801b54e:	9300      	str	r3, [sp, #0]
 801b550:	4622      	mov	r2, r4
 801b552:	4b11      	ldr	r3, [pc, #68]	; (801b598 <_svfiprintf_r+0x1ec>)
 801b554:	a904      	add	r1, sp, #16
 801b556:	4640      	mov	r0, r8
 801b558:	f3af 8000 	nop.w
 801b55c:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b560:	4681      	mov	r9, r0
 801b562:	d1d6      	bne.n	801b512 <_svfiprintf_r+0x166>
 801b564:	89a3      	ldrh	r3, [r4, #12]
 801b566:	065b      	lsls	r3, r3, #25
 801b568:	f53f af35 	bmi.w	801b3d6 <_svfiprintf_r+0x2a>
 801b56c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b56e:	b01d      	add	sp, #116	; 0x74
 801b570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b574:	ab03      	add	r3, sp, #12
 801b576:	9300      	str	r3, [sp, #0]
 801b578:	4622      	mov	r2, r4
 801b57a:	4b07      	ldr	r3, [pc, #28]	; (801b598 <_svfiprintf_r+0x1ec>)
 801b57c:	a904      	add	r1, sp, #16
 801b57e:	4640      	mov	r0, r8
 801b580:	f000 f9c2 	bl	801b908 <_printf_i>
 801b584:	e7ea      	b.n	801b55c <_svfiprintf_r+0x1b0>
 801b586:	bf00      	nop
 801b588:	0801c6ee 	.word	0x0801c6ee
 801b58c:	0801c6f4 	.word	0x0801c6f4
 801b590:	0801c6f8 	.word	0x0801c6f8
 801b594:	00000000 	.word	0x00000000
 801b598:	0801b2f9 	.word	0x0801b2f9

0801b59c <__sfputc_r>:
 801b59c:	6893      	ldr	r3, [r2, #8]
 801b59e:	3b01      	subs	r3, #1
 801b5a0:	2b00      	cmp	r3, #0
 801b5a2:	b410      	push	{r4}
 801b5a4:	6093      	str	r3, [r2, #8]
 801b5a6:	da08      	bge.n	801b5ba <__sfputc_r+0x1e>
 801b5a8:	6994      	ldr	r4, [r2, #24]
 801b5aa:	42a3      	cmp	r3, r4
 801b5ac:	db01      	blt.n	801b5b2 <__sfputc_r+0x16>
 801b5ae:	290a      	cmp	r1, #10
 801b5b0:	d103      	bne.n	801b5ba <__sfputc_r+0x1e>
 801b5b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5b6:	f7ff bbe9 	b.w	801ad8c <__swbuf_r>
 801b5ba:	6813      	ldr	r3, [r2, #0]
 801b5bc:	1c58      	adds	r0, r3, #1
 801b5be:	6010      	str	r0, [r2, #0]
 801b5c0:	7019      	strb	r1, [r3, #0]
 801b5c2:	4608      	mov	r0, r1
 801b5c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b5c8:	4770      	bx	lr

0801b5ca <__sfputs_r>:
 801b5ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b5cc:	4606      	mov	r6, r0
 801b5ce:	460f      	mov	r7, r1
 801b5d0:	4614      	mov	r4, r2
 801b5d2:	18d5      	adds	r5, r2, r3
 801b5d4:	42ac      	cmp	r4, r5
 801b5d6:	d101      	bne.n	801b5dc <__sfputs_r+0x12>
 801b5d8:	2000      	movs	r0, #0
 801b5da:	e007      	b.n	801b5ec <__sfputs_r+0x22>
 801b5dc:	463a      	mov	r2, r7
 801b5de:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5e2:	4630      	mov	r0, r6
 801b5e4:	f7ff ffda 	bl	801b59c <__sfputc_r>
 801b5e8:	1c43      	adds	r3, r0, #1
 801b5ea:	d1f3      	bne.n	801b5d4 <__sfputs_r+0xa>
 801b5ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b5f0 <_vfiprintf_r>:
 801b5f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b5f4:	460c      	mov	r4, r1
 801b5f6:	b09d      	sub	sp, #116	; 0x74
 801b5f8:	4617      	mov	r7, r2
 801b5fa:	461d      	mov	r5, r3
 801b5fc:	4606      	mov	r6, r0
 801b5fe:	b118      	cbz	r0, 801b608 <_vfiprintf_r+0x18>
 801b600:	6983      	ldr	r3, [r0, #24]
 801b602:	b90b      	cbnz	r3, 801b608 <_vfiprintf_r+0x18>
 801b604:	f7ff fd72 	bl	801b0ec <__sinit>
 801b608:	4b7c      	ldr	r3, [pc, #496]	; (801b7fc <_vfiprintf_r+0x20c>)
 801b60a:	429c      	cmp	r4, r3
 801b60c:	d158      	bne.n	801b6c0 <_vfiprintf_r+0xd0>
 801b60e:	6874      	ldr	r4, [r6, #4]
 801b610:	89a3      	ldrh	r3, [r4, #12]
 801b612:	0718      	lsls	r0, r3, #28
 801b614:	d55e      	bpl.n	801b6d4 <_vfiprintf_r+0xe4>
 801b616:	6923      	ldr	r3, [r4, #16]
 801b618:	2b00      	cmp	r3, #0
 801b61a:	d05b      	beq.n	801b6d4 <_vfiprintf_r+0xe4>
 801b61c:	2300      	movs	r3, #0
 801b61e:	9309      	str	r3, [sp, #36]	; 0x24
 801b620:	2320      	movs	r3, #32
 801b622:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b626:	2330      	movs	r3, #48	; 0x30
 801b628:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b62c:	9503      	str	r5, [sp, #12]
 801b62e:	f04f 0b01 	mov.w	fp, #1
 801b632:	46b8      	mov	r8, r7
 801b634:	4645      	mov	r5, r8
 801b636:	f815 3b01 	ldrb.w	r3, [r5], #1
 801b63a:	b10b      	cbz	r3, 801b640 <_vfiprintf_r+0x50>
 801b63c:	2b25      	cmp	r3, #37	; 0x25
 801b63e:	d154      	bne.n	801b6ea <_vfiprintf_r+0xfa>
 801b640:	ebb8 0a07 	subs.w	sl, r8, r7
 801b644:	d00b      	beq.n	801b65e <_vfiprintf_r+0x6e>
 801b646:	4653      	mov	r3, sl
 801b648:	463a      	mov	r2, r7
 801b64a:	4621      	mov	r1, r4
 801b64c:	4630      	mov	r0, r6
 801b64e:	f7ff ffbc 	bl	801b5ca <__sfputs_r>
 801b652:	3001      	adds	r0, #1
 801b654:	f000 80c2 	beq.w	801b7dc <_vfiprintf_r+0x1ec>
 801b658:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b65a:	4453      	add	r3, sl
 801b65c:	9309      	str	r3, [sp, #36]	; 0x24
 801b65e:	f898 3000 	ldrb.w	r3, [r8]
 801b662:	2b00      	cmp	r3, #0
 801b664:	f000 80ba 	beq.w	801b7dc <_vfiprintf_r+0x1ec>
 801b668:	2300      	movs	r3, #0
 801b66a:	f04f 32ff 	mov.w	r2, #4294967295
 801b66e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b672:	9304      	str	r3, [sp, #16]
 801b674:	9307      	str	r3, [sp, #28]
 801b676:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b67a:	931a      	str	r3, [sp, #104]	; 0x68
 801b67c:	46a8      	mov	r8, r5
 801b67e:	2205      	movs	r2, #5
 801b680:	f818 1b01 	ldrb.w	r1, [r8], #1
 801b684:	485e      	ldr	r0, [pc, #376]	; (801b800 <_vfiprintf_r+0x210>)
 801b686:	f7e4 fe33 	bl	80002f0 <memchr>
 801b68a:	9b04      	ldr	r3, [sp, #16]
 801b68c:	bb78      	cbnz	r0, 801b6ee <_vfiprintf_r+0xfe>
 801b68e:	06d9      	lsls	r1, r3, #27
 801b690:	bf44      	itt	mi
 801b692:	2220      	movmi	r2, #32
 801b694:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b698:	071a      	lsls	r2, r3, #28
 801b69a:	bf44      	itt	mi
 801b69c:	222b      	movmi	r2, #43	; 0x2b
 801b69e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801b6a2:	782a      	ldrb	r2, [r5, #0]
 801b6a4:	2a2a      	cmp	r2, #42	; 0x2a
 801b6a6:	d02a      	beq.n	801b6fe <_vfiprintf_r+0x10e>
 801b6a8:	9a07      	ldr	r2, [sp, #28]
 801b6aa:	46a8      	mov	r8, r5
 801b6ac:	2000      	movs	r0, #0
 801b6ae:	250a      	movs	r5, #10
 801b6b0:	4641      	mov	r1, r8
 801b6b2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b6b6:	3b30      	subs	r3, #48	; 0x30
 801b6b8:	2b09      	cmp	r3, #9
 801b6ba:	d969      	bls.n	801b790 <_vfiprintf_r+0x1a0>
 801b6bc:	b360      	cbz	r0, 801b718 <_vfiprintf_r+0x128>
 801b6be:	e024      	b.n	801b70a <_vfiprintf_r+0x11a>
 801b6c0:	4b50      	ldr	r3, [pc, #320]	; (801b804 <_vfiprintf_r+0x214>)
 801b6c2:	429c      	cmp	r4, r3
 801b6c4:	d101      	bne.n	801b6ca <_vfiprintf_r+0xda>
 801b6c6:	68b4      	ldr	r4, [r6, #8]
 801b6c8:	e7a2      	b.n	801b610 <_vfiprintf_r+0x20>
 801b6ca:	4b4f      	ldr	r3, [pc, #316]	; (801b808 <_vfiprintf_r+0x218>)
 801b6cc:	429c      	cmp	r4, r3
 801b6ce:	bf08      	it	eq
 801b6d0:	68f4      	ldreq	r4, [r6, #12]
 801b6d2:	e79d      	b.n	801b610 <_vfiprintf_r+0x20>
 801b6d4:	4621      	mov	r1, r4
 801b6d6:	4630      	mov	r0, r6
 801b6d8:	f7ff fbaa 	bl	801ae30 <__swsetup_r>
 801b6dc:	2800      	cmp	r0, #0
 801b6de:	d09d      	beq.n	801b61c <_vfiprintf_r+0x2c>
 801b6e0:	f04f 30ff 	mov.w	r0, #4294967295
 801b6e4:	b01d      	add	sp, #116	; 0x74
 801b6e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ea:	46a8      	mov	r8, r5
 801b6ec:	e7a2      	b.n	801b634 <_vfiprintf_r+0x44>
 801b6ee:	4a44      	ldr	r2, [pc, #272]	; (801b800 <_vfiprintf_r+0x210>)
 801b6f0:	1a80      	subs	r0, r0, r2
 801b6f2:	fa0b f000 	lsl.w	r0, fp, r0
 801b6f6:	4318      	orrs	r0, r3
 801b6f8:	9004      	str	r0, [sp, #16]
 801b6fa:	4645      	mov	r5, r8
 801b6fc:	e7be      	b.n	801b67c <_vfiprintf_r+0x8c>
 801b6fe:	9a03      	ldr	r2, [sp, #12]
 801b700:	1d11      	adds	r1, r2, #4
 801b702:	6812      	ldr	r2, [r2, #0]
 801b704:	9103      	str	r1, [sp, #12]
 801b706:	2a00      	cmp	r2, #0
 801b708:	db01      	blt.n	801b70e <_vfiprintf_r+0x11e>
 801b70a:	9207      	str	r2, [sp, #28]
 801b70c:	e004      	b.n	801b718 <_vfiprintf_r+0x128>
 801b70e:	4252      	negs	r2, r2
 801b710:	f043 0302 	orr.w	r3, r3, #2
 801b714:	9207      	str	r2, [sp, #28]
 801b716:	9304      	str	r3, [sp, #16]
 801b718:	f898 3000 	ldrb.w	r3, [r8]
 801b71c:	2b2e      	cmp	r3, #46	; 0x2e
 801b71e:	d10e      	bne.n	801b73e <_vfiprintf_r+0x14e>
 801b720:	f898 3001 	ldrb.w	r3, [r8, #1]
 801b724:	2b2a      	cmp	r3, #42	; 0x2a
 801b726:	d138      	bne.n	801b79a <_vfiprintf_r+0x1aa>
 801b728:	9b03      	ldr	r3, [sp, #12]
 801b72a:	1d1a      	adds	r2, r3, #4
 801b72c:	681b      	ldr	r3, [r3, #0]
 801b72e:	9203      	str	r2, [sp, #12]
 801b730:	2b00      	cmp	r3, #0
 801b732:	bfb8      	it	lt
 801b734:	f04f 33ff 	movlt.w	r3, #4294967295
 801b738:	f108 0802 	add.w	r8, r8, #2
 801b73c:	9305      	str	r3, [sp, #20]
 801b73e:	4d33      	ldr	r5, [pc, #204]	; (801b80c <_vfiprintf_r+0x21c>)
 801b740:	f898 1000 	ldrb.w	r1, [r8]
 801b744:	2203      	movs	r2, #3
 801b746:	4628      	mov	r0, r5
 801b748:	f7e4 fdd2 	bl	80002f0 <memchr>
 801b74c:	b140      	cbz	r0, 801b760 <_vfiprintf_r+0x170>
 801b74e:	2340      	movs	r3, #64	; 0x40
 801b750:	1b40      	subs	r0, r0, r5
 801b752:	fa03 f000 	lsl.w	r0, r3, r0
 801b756:	9b04      	ldr	r3, [sp, #16]
 801b758:	4303      	orrs	r3, r0
 801b75a:	f108 0801 	add.w	r8, r8, #1
 801b75e:	9304      	str	r3, [sp, #16]
 801b760:	f898 1000 	ldrb.w	r1, [r8]
 801b764:	482a      	ldr	r0, [pc, #168]	; (801b810 <_vfiprintf_r+0x220>)
 801b766:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b76a:	2206      	movs	r2, #6
 801b76c:	f108 0701 	add.w	r7, r8, #1
 801b770:	f7e4 fdbe 	bl	80002f0 <memchr>
 801b774:	2800      	cmp	r0, #0
 801b776:	d037      	beq.n	801b7e8 <_vfiprintf_r+0x1f8>
 801b778:	4b26      	ldr	r3, [pc, #152]	; (801b814 <_vfiprintf_r+0x224>)
 801b77a:	bb1b      	cbnz	r3, 801b7c4 <_vfiprintf_r+0x1d4>
 801b77c:	9b03      	ldr	r3, [sp, #12]
 801b77e:	3307      	adds	r3, #7
 801b780:	f023 0307 	bic.w	r3, r3, #7
 801b784:	3308      	adds	r3, #8
 801b786:	9303      	str	r3, [sp, #12]
 801b788:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b78a:	444b      	add	r3, r9
 801b78c:	9309      	str	r3, [sp, #36]	; 0x24
 801b78e:	e750      	b.n	801b632 <_vfiprintf_r+0x42>
 801b790:	fb05 3202 	mla	r2, r5, r2, r3
 801b794:	2001      	movs	r0, #1
 801b796:	4688      	mov	r8, r1
 801b798:	e78a      	b.n	801b6b0 <_vfiprintf_r+0xc0>
 801b79a:	2300      	movs	r3, #0
 801b79c:	f108 0801 	add.w	r8, r8, #1
 801b7a0:	9305      	str	r3, [sp, #20]
 801b7a2:	4619      	mov	r1, r3
 801b7a4:	250a      	movs	r5, #10
 801b7a6:	4640      	mov	r0, r8
 801b7a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b7ac:	3a30      	subs	r2, #48	; 0x30
 801b7ae:	2a09      	cmp	r2, #9
 801b7b0:	d903      	bls.n	801b7ba <_vfiprintf_r+0x1ca>
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d0c3      	beq.n	801b73e <_vfiprintf_r+0x14e>
 801b7b6:	9105      	str	r1, [sp, #20]
 801b7b8:	e7c1      	b.n	801b73e <_vfiprintf_r+0x14e>
 801b7ba:	fb05 2101 	mla	r1, r5, r1, r2
 801b7be:	2301      	movs	r3, #1
 801b7c0:	4680      	mov	r8, r0
 801b7c2:	e7f0      	b.n	801b7a6 <_vfiprintf_r+0x1b6>
 801b7c4:	ab03      	add	r3, sp, #12
 801b7c6:	9300      	str	r3, [sp, #0]
 801b7c8:	4622      	mov	r2, r4
 801b7ca:	4b13      	ldr	r3, [pc, #76]	; (801b818 <_vfiprintf_r+0x228>)
 801b7cc:	a904      	add	r1, sp, #16
 801b7ce:	4630      	mov	r0, r6
 801b7d0:	f3af 8000 	nop.w
 801b7d4:	f1b0 3fff 	cmp.w	r0, #4294967295
 801b7d8:	4681      	mov	r9, r0
 801b7da:	d1d5      	bne.n	801b788 <_vfiprintf_r+0x198>
 801b7dc:	89a3      	ldrh	r3, [r4, #12]
 801b7de:	065b      	lsls	r3, r3, #25
 801b7e0:	f53f af7e 	bmi.w	801b6e0 <_vfiprintf_r+0xf0>
 801b7e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b7e6:	e77d      	b.n	801b6e4 <_vfiprintf_r+0xf4>
 801b7e8:	ab03      	add	r3, sp, #12
 801b7ea:	9300      	str	r3, [sp, #0]
 801b7ec:	4622      	mov	r2, r4
 801b7ee:	4b0a      	ldr	r3, [pc, #40]	; (801b818 <_vfiprintf_r+0x228>)
 801b7f0:	a904      	add	r1, sp, #16
 801b7f2:	4630      	mov	r0, r6
 801b7f4:	f000 f888 	bl	801b908 <_printf_i>
 801b7f8:	e7ec      	b.n	801b7d4 <_vfiprintf_r+0x1e4>
 801b7fa:	bf00      	nop
 801b7fc:	0801c6a4 	.word	0x0801c6a4
 801b800:	0801c6ee 	.word	0x0801c6ee
 801b804:	0801c6c4 	.word	0x0801c6c4
 801b808:	0801c684 	.word	0x0801c684
 801b80c:	0801c6f4 	.word	0x0801c6f4
 801b810:	0801c6f8 	.word	0x0801c6f8
 801b814:	00000000 	.word	0x00000000
 801b818:	0801b5cb 	.word	0x0801b5cb

0801b81c <_printf_common>:
 801b81c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b820:	4691      	mov	r9, r2
 801b822:	461f      	mov	r7, r3
 801b824:	688a      	ldr	r2, [r1, #8]
 801b826:	690b      	ldr	r3, [r1, #16]
 801b828:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b82c:	4293      	cmp	r3, r2
 801b82e:	bfb8      	it	lt
 801b830:	4613      	movlt	r3, r2
 801b832:	f8c9 3000 	str.w	r3, [r9]
 801b836:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b83a:	4606      	mov	r6, r0
 801b83c:	460c      	mov	r4, r1
 801b83e:	b112      	cbz	r2, 801b846 <_printf_common+0x2a>
 801b840:	3301      	adds	r3, #1
 801b842:	f8c9 3000 	str.w	r3, [r9]
 801b846:	6823      	ldr	r3, [r4, #0]
 801b848:	0699      	lsls	r1, r3, #26
 801b84a:	bf42      	ittt	mi
 801b84c:	f8d9 3000 	ldrmi.w	r3, [r9]
 801b850:	3302      	addmi	r3, #2
 801b852:	f8c9 3000 	strmi.w	r3, [r9]
 801b856:	6825      	ldr	r5, [r4, #0]
 801b858:	f015 0506 	ands.w	r5, r5, #6
 801b85c:	d107      	bne.n	801b86e <_printf_common+0x52>
 801b85e:	f104 0a19 	add.w	sl, r4, #25
 801b862:	68e3      	ldr	r3, [r4, #12]
 801b864:	f8d9 2000 	ldr.w	r2, [r9]
 801b868:	1a9b      	subs	r3, r3, r2
 801b86a:	42ab      	cmp	r3, r5
 801b86c:	dc28      	bgt.n	801b8c0 <_printf_common+0xa4>
 801b86e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801b872:	6822      	ldr	r2, [r4, #0]
 801b874:	3300      	adds	r3, #0
 801b876:	bf18      	it	ne
 801b878:	2301      	movne	r3, #1
 801b87a:	0692      	lsls	r2, r2, #26
 801b87c:	d42d      	bmi.n	801b8da <_printf_common+0xbe>
 801b87e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b882:	4639      	mov	r1, r7
 801b884:	4630      	mov	r0, r6
 801b886:	47c0      	blx	r8
 801b888:	3001      	adds	r0, #1
 801b88a:	d020      	beq.n	801b8ce <_printf_common+0xb2>
 801b88c:	6823      	ldr	r3, [r4, #0]
 801b88e:	68e5      	ldr	r5, [r4, #12]
 801b890:	f8d9 2000 	ldr.w	r2, [r9]
 801b894:	f003 0306 	and.w	r3, r3, #6
 801b898:	2b04      	cmp	r3, #4
 801b89a:	bf08      	it	eq
 801b89c:	1aad      	subeq	r5, r5, r2
 801b89e:	68a3      	ldr	r3, [r4, #8]
 801b8a0:	6922      	ldr	r2, [r4, #16]
 801b8a2:	bf0c      	ite	eq
 801b8a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b8a8:	2500      	movne	r5, #0
 801b8aa:	4293      	cmp	r3, r2
 801b8ac:	bfc4      	itt	gt
 801b8ae:	1a9b      	subgt	r3, r3, r2
 801b8b0:	18ed      	addgt	r5, r5, r3
 801b8b2:	f04f 0900 	mov.w	r9, #0
 801b8b6:	341a      	adds	r4, #26
 801b8b8:	454d      	cmp	r5, r9
 801b8ba:	d11a      	bne.n	801b8f2 <_printf_common+0xd6>
 801b8bc:	2000      	movs	r0, #0
 801b8be:	e008      	b.n	801b8d2 <_printf_common+0xb6>
 801b8c0:	2301      	movs	r3, #1
 801b8c2:	4652      	mov	r2, sl
 801b8c4:	4639      	mov	r1, r7
 801b8c6:	4630      	mov	r0, r6
 801b8c8:	47c0      	blx	r8
 801b8ca:	3001      	adds	r0, #1
 801b8cc:	d103      	bne.n	801b8d6 <_printf_common+0xba>
 801b8ce:	f04f 30ff 	mov.w	r0, #4294967295
 801b8d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8d6:	3501      	adds	r5, #1
 801b8d8:	e7c3      	b.n	801b862 <_printf_common+0x46>
 801b8da:	18e1      	adds	r1, r4, r3
 801b8dc:	1c5a      	adds	r2, r3, #1
 801b8de:	2030      	movs	r0, #48	; 0x30
 801b8e0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b8e4:	4422      	add	r2, r4
 801b8e6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b8ea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b8ee:	3302      	adds	r3, #2
 801b8f0:	e7c5      	b.n	801b87e <_printf_common+0x62>
 801b8f2:	2301      	movs	r3, #1
 801b8f4:	4622      	mov	r2, r4
 801b8f6:	4639      	mov	r1, r7
 801b8f8:	4630      	mov	r0, r6
 801b8fa:	47c0      	blx	r8
 801b8fc:	3001      	adds	r0, #1
 801b8fe:	d0e6      	beq.n	801b8ce <_printf_common+0xb2>
 801b900:	f109 0901 	add.w	r9, r9, #1
 801b904:	e7d8      	b.n	801b8b8 <_printf_common+0x9c>
	...

0801b908 <_printf_i>:
 801b908:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801b90c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 801b910:	460c      	mov	r4, r1
 801b912:	7e09      	ldrb	r1, [r1, #24]
 801b914:	b085      	sub	sp, #20
 801b916:	296e      	cmp	r1, #110	; 0x6e
 801b918:	4617      	mov	r7, r2
 801b91a:	4606      	mov	r6, r0
 801b91c:	4698      	mov	r8, r3
 801b91e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b920:	f000 80b3 	beq.w	801ba8a <_printf_i+0x182>
 801b924:	d822      	bhi.n	801b96c <_printf_i+0x64>
 801b926:	2963      	cmp	r1, #99	; 0x63
 801b928:	d036      	beq.n	801b998 <_printf_i+0x90>
 801b92a:	d80a      	bhi.n	801b942 <_printf_i+0x3a>
 801b92c:	2900      	cmp	r1, #0
 801b92e:	f000 80b9 	beq.w	801baa4 <_printf_i+0x19c>
 801b932:	2958      	cmp	r1, #88	; 0x58
 801b934:	f000 8083 	beq.w	801ba3e <_printf_i+0x136>
 801b938:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b93c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 801b940:	e032      	b.n	801b9a8 <_printf_i+0xa0>
 801b942:	2964      	cmp	r1, #100	; 0x64
 801b944:	d001      	beq.n	801b94a <_printf_i+0x42>
 801b946:	2969      	cmp	r1, #105	; 0x69
 801b948:	d1f6      	bne.n	801b938 <_printf_i+0x30>
 801b94a:	6820      	ldr	r0, [r4, #0]
 801b94c:	6813      	ldr	r3, [r2, #0]
 801b94e:	0605      	lsls	r5, r0, #24
 801b950:	f103 0104 	add.w	r1, r3, #4
 801b954:	d52a      	bpl.n	801b9ac <_printf_i+0xa4>
 801b956:	681b      	ldr	r3, [r3, #0]
 801b958:	6011      	str	r1, [r2, #0]
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	da03      	bge.n	801b966 <_printf_i+0x5e>
 801b95e:	222d      	movs	r2, #45	; 0x2d
 801b960:	425b      	negs	r3, r3
 801b962:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 801b966:	486f      	ldr	r0, [pc, #444]	; (801bb24 <_printf_i+0x21c>)
 801b968:	220a      	movs	r2, #10
 801b96a:	e039      	b.n	801b9e0 <_printf_i+0xd8>
 801b96c:	2973      	cmp	r1, #115	; 0x73
 801b96e:	f000 809d 	beq.w	801baac <_printf_i+0x1a4>
 801b972:	d808      	bhi.n	801b986 <_printf_i+0x7e>
 801b974:	296f      	cmp	r1, #111	; 0x6f
 801b976:	d020      	beq.n	801b9ba <_printf_i+0xb2>
 801b978:	2970      	cmp	r1, #112	; 0x70
 801b97a:	d1dd      	bne.n	801b938 <_printf_i+0x30>
 801b97c:	6823      	ldr	r3, [r4, #0]
 801b97e:	f043 0320 	orr.w	r3, r3, #32
 801b982:	6023      	str	r3, [r4, #0]
 801b984:	e003      	b.n	801b98e <_printf_i+0x86>
 801b986:	2975      	cmp	r1, #117	; 0x75
 801b988:	d017      	beq.n	801b9ba <_printf_i+0xb2>
 801b98a:	2978      	cmp	r1, #120	; 0x78
 801b98c:	d1d4      	bne.n	801b938 <_printf_i+0x30>
 801b98e:	2378      	movs	r3, #120	; 0x78
 801b990:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b994:	4864      	ldr	r0, [pc, #400]	; (801bb28 <_printf_i+0x220>)
 801b996:	e055      	b.n	801ba44 <_printf_i+0x13c>
 801b998:	6813      	ldr	r3, [r2, #0]
 801b99a:	1d19      	adds	r1, r3, #4
 801b99c:	681b      	ldr	r3, [r3, #0]
 801b99e:	6011      	str	r1, [r2, #0]
 801b9a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801b9a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b9a8:	2301      	movs	r3, #1
 801b9aa:	e08c      	b.n	801bac6 <_printf_i+0x1be>
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	6011      	str	r1, [r2, #0]
 801b9b0:	f010 0f40 	tst.w	r0, #64	; 0x40
 801b9b4:	bf18      	it	ne
 801b9b6:	b21b      	sxthne	r3, r3
 801b9b8:	e7cf      	b.n	801b95a <_printf_i+0x52>
 801b9ba:	6813      	ldr	r3, [r2, #0]
 801b9bc:	6825      	ldr	r5, [r4, #0]
 801b9be:	1d18      	adds	r0, r3, #4
 801b9c0:	6010      	str	r0, [r2, #0]
 801b9c2:	0628      	lsls	r0, r5, #24
 801b9c4:	d501      	bpl.n	801b9ca <_printf_i+0xc2>
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	e002      	b.n	801b9d0 <_printf_i+0xc8>
 801b9ca:	0668      	lsls	r0, r5, #25
 801b9cc:	d5fb      	bpl.n	801b9c6 <_printf_i+0xbe>
 801b9ce:	881b      	ldrh	r3, [r3, #0]
 801b9d0:	4854      	ldr	r0, [pc, #336]	; (801bb24 <_printf_i+0x21c>)
 801b9d2:	296f      	cmp	r1, #111	; 0x6f
 801b9d4:	bf14      	ite	ne
 801b9d6:	220a      	movne	r2, #10
 801b9d8:	2208      	moveq	r2, #8
 801b9da:	2100      	movs	r1, #0
 801b9dc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b9e0:	6865      	ldr	r5, [r4, #4]
 801b9e2:	60a5      	str	r5, [r4, #8]
 801b9e4:	2d00      	cmp	r5, #0
 801b9e6:	f2c0 8095 	blt.w	801bb14 <_printf_i+0x20c>
 801b9ea:	6821      	ldr	r1, [r4, #0]
 801b9ec:	f021 0104 	bic.w	r1, r1, #4
 801b9f0:	6021      	str	r1, [r4, #0]
 801b9f2:	2b00      	cmp	r3, #0
 801b9f4:	d13d      	bne.n	801ba72 <_printf_i+0x16a>
 801b9f6:	2d00      	cmp	r5, #0
 801b9f8:	f040 808e 	bne.w	801bb18 <_printf_i+0x210>
 801b9fc:	4665      	mov	r5, ip
 801b9fe:	2a08      	cmp	r2, #8
 801ba00:	d10b      	bne.n	801ba1a <_printf_i+0x112>
 801ba02:	6823      	ldr	r3, [r4, #0]
 801ba04:	07db      	lsls	r3, r3, #31
 801ba06:	d508      	bpl.n	801ba1a <_printf_i+0x112>
 801ba08:	6923      	ldr	r3, [r4, #16]
 801ba0a:	6862      	ldr	r2, [r4, #4]
 801ba0c:	429a      	cmp	r2, r3
 801ba0e:	bfde      	ittt	le
 801ba10:	2330      	movle	r3, #48	; 0x30
 801ba12:	f805 3c01 	strble.w	r3, [r5, #-1]
 801ba16:	f105 35ff 	addle.w	r5, r5, #4294967295
 801ba1a:	ebac 0305 	sub.w	r3, ip, r5
 801ba1e:	6123      	str	r3, [r4, #16]
 801ba20:	f8cd 8000 	str.w	r8, [sp]
 801ba24:	463b      	mov	r3, r7
 801ba26:	aa03      	add	r2, sp, #12
 801ba28:	4621      	mov	r1, r4
 801ba2a:	4630      	mov	r0, r6
 801ba2c:	f7ff fef6 	bl	801b81c <_printf_common>
 801ba30:	3001      	adds	r0, #1
 801ba32:	d14d      	bne.n	801bad0 <_printf_i+0x1c8>
 801ba34:	f04f 30ff 	mov.w	r0, #4294967295
 801ba38:	b005      	add	sp, #20
 801ba3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801ba3e:	4839      	ldr	r0, [pc, #228]	; (801bb24 <_printf_i+0x21c>)
 801ba40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 801ba44:	6813      	ldr	r3, [r2, #0]
 801ba46:	6821      	ldr	r1, [r4, #0]
 801ba48:	1d1d      	adds	r5, r3, #4
 801ba4a:	681b      	ldr	r3, [r3, #0]
 801ba4c:	6015      	str	r5, [r2, #0]
 801ba4e:	060a      	lsls	r2, r1, #24
 801ba50:	d50b      	bpl.n	801ba6a <_printf_i+0x162>
 801ba52:	07ca      	lsls	r2, r1, #31
 801ba54:	bf44      	itt	mi
 801ba56:	f041 0120 	orrmi.w	r1, r1, #32
 801ba5a:	6021      	strmi	r1, [r4, #0]
 801ba5c:	b91b      	cbnz	r3, 801ba66 <_printf_i+0x15e>
 801ba5e:	6822      	ldr	r2, [r4, #0]
 801ba60:	f022 0220 	bic.w	r2, r2, #32
 801ba64:	6022      	str	r2, [r4, #0]
 801ba66:	2210      	movs	r2, #16
 801ba68:	e7b7      	b.n	801b9da <_printf_i+0xd2>
 801ba6a:	064d      	lsls	r5, r1, #25
 801ba6c:	bf48      	it	mi
 801ba6e:	b29b      	uxthmi	r3, r3
 801ba70:	e7ef      	b.n	801ba52 <_printf_i+0x14a>
 801ba72:	4665      	mov	r5, ip
 801ba74:	fbb3 f1f2 	udiv	r1, r3, r2
 801ba78:	fb02 3311 	mls	r3, r2, r1, r3
 801ba7c:	5cc3      	ldrb	r3, [r0, r3]
 801ba7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801ba82:	460b      	mov	r3, r1
 801ba84:	2900      	cmp	r1, #0
 801ba86:	d1f5      	bne.n	801ba74 <_printf_i+0x16c>
 801ba88:	e7b9      	b.n	801b9fe <_printf_i+0xf6>
 801ba8a:	6813      	ldr	r3, [r2, #0]
 801ba8c:	6825      	ldr	r5, [r4, #0]
 801ba8e:	6961      	ldr	r1, [r4, #20]
 801ba90:	1d18      	adds	r0, r3, #4
 801ba92:	6010      	str	r0, [r2, #0]
 801ba94:	0628      	lsls	r0, r5, #24
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	d501      	bpl.n	801ba9e <_printf_i+0x196>
 801ba9a:	6019      	str	r1, [r3, #0]
 801ba9c:	e002      	b.n	801baa4 <_printf_i+0x19c>
 801ba9e:	066a      	lsls	r2, r5, #25
 801baa0:	d5fb      	bpl.n	801ba9a <_printf_i+0x192>
 801baa2:	8019      	strh	r1, [r3, #0]
 801baa4:	2300      	movs	r3, #0
 801baa6:	6123      	str	r3, [r4, #16]
 801baa8:	4665      	mov	r5, ip
 801baaa:	e7b9      	b.n	801ba20 <_printf_i+0x118>
 801baac:	6813      	ldr	r3, [r2, #0]
 801baae:	1d19      	adds	r1, r3, #4
 801bab0:	6011      	str	r1, [r2, #0]
 801bab2:	681d      	ldr	r5, [r3, #0]
 801bab4:	6862      	ldr	r2, [r4, #4]
 801bab6:	2100      	movs	r1, #0
 801bab8:	4628      	mov	r0, r5
 801baba:	f7e4 fc19 	bl	80002f0 <memchr>
 801babe:	b108      	cbz	r0, 801bac4 <_printf_i+0x1bc>
 801bac0:	1b40      	subs	r0, r0, r5
 801bac2:	6060      	str	r0, [r4, #4]
 801bac4:	6863      	ldr	r3, [r4, #4]
 801bac6:	6123      	str	r3, [r4, #16]
 801bac8:	2300      	movs	r3, #0
 801baca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801bace:	e7a7      	b.n	801ba20 <_printf_i+0x118>
 801bad0:	6923      	ldr	r3, [r4, #16]
 801bad2:	462a      	mov	r2, r5
 801bad4:	4639      	mov	r1, r7
 801bad6:	4630      	mov	r0, r6
 801bad8:	47c0      	blx	r8
 801bada:	3001      	adds	r0, #1
 801badc:	d0aa      	beq.n	801ba34 <_printf_i+0x12c>
 801bade:	6823      	ldr	r3, [r4, #0]
 801bae0:	079b      	lsls	r3, r3, #30
 801bae2:	d413      	bmi.n	801bb0c <_printf_i+0x204>
 801bae4:	68e0      	ldr	r0, [r4, #12]
 801bae6:	9b03      	ldr	r3, [sp, #12]
 801bae8:	4298      	cmp	r0, r3
 801baea:	bfb8      	it	lt
 801baec:	4618      	movlt	r0, r3
 801baee:	e7a3      	b.n	801ba38 <_printf_i+0x130>
 801baf0:	2301      	movs	r3, #1
 801baf2:	464a      	mov	r2, r9
 801baf4:	4639      	mov	r1, r7
 801baf6:	4630      	mov	r0, r6
 801baf8:	47c0      	blx	r8
 801bafa:	3001      	adds	r0, #1
 801bafc:	d09a      	beq.n	801ba34 <_printf_i+0x12c>
 801bafe:	3501      	adds	r5, #1
 801bb00:	68e3      	ldr	r3, [r4, #12]
 801bb02:	9a03      	ldr	r2, [sp, #12]
 801bb04:	1a9b      	subs	r3, r3, r2
 801bb06:	42ab      	cmp	r3, r5
 801bb08:	dcf2      	bgt.n	801baf0 <_printf_i+0x1e8>
 801bb0a:	e7eb      	b.n	801bae4 <_printf_i+0x1dc>
 801bb0c:	2500      	movs	r5, #0
 801bb0e:	f104 0919 	add.w	r9, r4, #25
 801bb12:	e7f5      	b.n	801bb00 <_printf_i+0x1f8>
 801bb14:	2b00      	cmp	r3, #0
 801bb16:	d1ac      	bne.n	801ba72 <_printf_i+0x16a>
 801bb18:	7803      	ldrb	r3, [r0, #0]
 801bb1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801bb1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801bb22:	e76c      	b.n	801b9fe <_printf_i+0xf6>
 801bb24:	0801c6ff 	.word	0x0801c6ff
 801bb28:	0801c710 	.word	0x0801c710

0801bb2c <__sread>:
 801bb2c:	b510      	push	{r4, lr}
 801bb2e:	460c      	mov	r4, r1
 801bb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb34:	f000 f8e0 	bl	801bcf8 <_read_r>
 801bb38:	2800      	cmp	r0, #0
 801bb3a:	bfab      	itete	ge
 801bb3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801bb3e:	89a3      	ldrhlt	r3, [r4, #12]
 801bb40:	181b      	addge	r3, r3, r0
 801bb42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801bb46:	bfac      	ite	ge
 801bb48:	6563      	strge	r3, [r4, #84]	; 0x54
 801bb4a:	81a3      	strhlt	r3, [r4, #12]
 801bb4c:	bd10      	pop	{r4, pc}

0801bb4e <__swrite>:
 801bb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801bb52:	461f      	mov	r7, r3
 801bb54:	898b      	ldrh	r3, [r1, #12]
 801bb56:	05db      	lsls	r3, r3, #23
 801bb58:	4605      	mov	r5, r0
 801bb5a:	460c      	mov	r4, r1
 801bb5c:	4616      	mov	r6, r2
 801bb5e:	d505      	bpl.n	801bb6c <__swrite+0x1e>
 801bb60:	2302      	movs	r3, #2
 801bb62:	2200      	movs	r2, #0
 801bb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb68:	f000 f874 	bl	801bc54 <_lseek_r>
 801bb6c:	89a3      	ldrh	r3, [r4, #12]
 801bb6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bb72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801bb76:	81a3      	strh	r3, [r4, #12]
 801bb78:	4632      	mov	r2, r6
 801bb7a:	463b      	mov	r3, r7
 801bb7c:	4628      	mov	r0, r5
 801bb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801bb82:	f000 b823 	b.w	801bbcc <_write_r>

0801bb86 <__sseek>:
 801bb86:	b510      	push	{r4, lr}
 801bb88:	460c      	mov	r4, r1
 801bb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bb8e:	f000 f861 	bl	801bc54 <_lseek_r>
 801bb92:	1c43      	adds	r3, r0, #1
 801bb94:	89a3      	ldrh	r3, [r4, #12]
 801bb96:	bf15      	itete	ne
 801bb98:	6560      	strne	r0, [r4, #84]	; 0x54
 801bb9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801bb9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801bba2:	81a3      	strheq	r3, [r4, #12]
 801bba4:	bf18      	it	ne
 801bba6:	81a3      	strhne	r3, [r4, #12]
 801bba8:	bd10      	pop	{r4, pc}

0801bbaa <__sclose>:
 801bbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbae:	f000 b81f 	b.w	801bbf0 <_close_r>

0801bbb2 <__ascii_wctomb>:
 801bbb2:	b149      	cbz	r1, 801bbc8 <__ascii_wctomb+0x16>
 801bbb4:	2aff      	cmp	r2, #255	; 0xff
 801bbb6:	bf85      	ittet	hi
 801bbb8:	238a      	movhi	r3, #138	; 0x8a
 801bbba:	6003      	strhi	r3, [r0, #0]
 801bbbc:	700a      	strbls	r2, [r1, #0]
 801bbbe:	f04f 30ff 	movhi.w	r0, #4294967295
 801bbc2:	bf98      	it	ls
 801bbc4:	2001      	movls	r0, #1
 801bbc6:	4770      	bx	lr
 801bbc8:	4608      	mov	r0, r1
 801bbca:	4770      	bx	lr

0801bbcc <_write_r>:
 801bbcc:	b538      	push	{r3, r4, r5, lr}
 801bbce:	4c07      	ldr	r4, [pc, #28]	; (801bbec <_write_r+0x20>)
 801bbd0:	4605      	mov	r5, r0
 801bbd2:	4608      	mov	r0, r1
 801bbd4:	4611      	mov	r1, r2
 801bbd6:	2200      	movs	r2, #0
 801bbd8:	6022      	str	r2, [r4, #0]
 801bbda:	461a      	mov	r2, r3
 801bbdc:	f7e8 fc55 	bl	800448a <_write>
 801bbe0:	1c43      	adds	r3, r0, #1
 801bbe2:	d102      	bne.n	801bbea <_write_r+0x1e>
 801bbe4:	6823      	ldr	r3, [r4, #0]
 801bbe6:	b103      	cbz	r3, 801bbea <_write_r+0x1e>
 801bbe8:	602b      	str	r3, [r5, #0]
 801bbea:	bd38      	pop	{r3, r4, r5, pc}
 801bbec:	24045748 	.word	0x24045748

0801bbf0 <_close_r>:
 801bbf0:	b538      	push	{r3, r4, r5, lr}
 801bbf2:	4c06      	ldr	r4, [pc, #24]	; (801bc0c <_close_r+0x1c>)
 801bbf4:	2300      	movs	r3, #0
 801bbf6:	4605      	mov	r5, r0
 801bbf8:	4608      	mov	r0, r1
 801bbfa:	6023      	str	r3, [r4, #0]
 801bbfc:	f7e8 ff55 	bl	8004aaa <_close>
 801bc00:	1c43      	adds	r3, r0, #1
 801bc02:	d102      	bne.n	801bc0a <_close_r+0x1a>
 801bc04:	6823      	ldr	r3, [r4, #0]
 801bc06:	b103      	cbz	r3, 801bc0a <_close_r+0x1a>
 801bc08:	602b      	str	r3, [r5, #0]
 801bc0a:	bd38      	pop	{r3, r4, r5, pc}
 801bc0c:	24045748 	.word	0x24045748

0801bc10 <_fstat_r>:
 801bc10:	b538      	push	{r3, r4, r5, lr}
 801bc12:	4c07      	ldr	r4, [pc, #28]	; (801bc30 <_fstat_r+0x20>)
 801bc14:	2300      	movs	r3, #0
 801bc16:	4605      	mov	r5, r0
 801bc18:	4608      	mov	r0, r1
 801bc1a:	4611      	mov	r1, r2
 801bc1c:	6023      	str	r3, [r4, #0]
 801bc1e:	f7e8 ff50 	bl	8004ac2 <_fstat>
 801bc22:	1c43      	adds	r3, r0, #1
 801bc24:	d102      	bne.n	801bc2c <_fstat_r+0x1c>
 801bc26:	6823      	ldr	r3, [r4, #0]
 801bc28:	b103      	cbz	r3, 801bc2c <_fstat_r+0x1c>
 801bc2a:	602b      	str	r3, [r5, #0]
 801bc2c:	bd38      	pop	{r3, r4, r5, pc}
 801bc2e:	bf00      	nop
 801bc30:	24045748 	.word	0x24045748

0801bc34 <_isatty_r>:
 801bc34:	b538      	push	{r3, r4, r5, lr}
 801bc36:	4c06      	ldr	r4, [pc, #24]	; (801bc50 <_isatty_r+0x1c>)
 801bc38:	2300      	movs	r3, #0
 801bc3a:	4605      	mov	r5, r0
 801bc3c:	4608      	mov	r0, r1
 801bc3e:	6023      	str	r3, [r4, #0]
 801bc40:	f7e8 ff4f 	bl	8004ae2 <_isatty>
 801bc44:	1c43      	adds	r3, r0, #1
 801bc46:	d102      	bne.n	801bc4e <_isatty_r+0x1a>
 801bc48:	6823      	ldr	r3, [r4, #0]
 801bc4a:	b103      	cbz	r3, 801bc4e <_isatty_r+0x1a>
 801bc4c:	602b      	str	r3, [r5, #0]
 801bc4e:	bd38      	pop	{r3, r4, r5, pc}
 801bc50:	24045748 	.word	0x24045748

0801bc54 <_lseek_r>:
 801bc54:	b538      	push	{r3, r4, r5, lr}
 801bc56:	4c07      	ldr	r4, [pc, #28]	; (801bc74 <_lseek_r+0x20>)
 801bc58:	4605      	mov	r5, r0
 801bc5a:	4608      	mov	r0, r1
 801bc5c:	4611      	mov	r1, r2
 801bc5e:	2200      	movs	r2, #0
 801bc60:	6022      	str	r2, [r4, #0]
 801bc62:	461a      	mov	r2, r3
 801bc64:	f7e8 ff48 	bl	8004af8 <_lseek>
 801bc68:	1c43      	adds	r3, r0, #1
 801bc6a:	d102      	bne.n	801bc72 <_lseek_r+0x1e>
 801bc6c:	6823      	ldr	r3, [r4, #0]
 801bc6e:	b103      	cbz	r3, 801bc72 <_lseek_r+0x1e>
 801bc70:	602b      	str	r3, [r5, #0]
 801bc72:	bd38      	pop	{r3, r4, r5, pc}
 801bc74:	24045748 	.word	0x24045748

0801bc78 <memmove>:
 801bc78:	4288      	cmp	r0, r1
 801bc7a:	b510      	push	{r4, lr}
 801bc7c:	eb01 0302 	add.w	r3, r1, r2
 801bc80:	d807      	bhi.n	801bc92 <memmove+0x1a>
 801bc82:	1e42      	subs	r2, r0, #1
 801bc84:	4299      	cmp	r1, r3
 801bc86:	d00a      	beq.n	801bc9e <memmove+0x26>
 801bc88:	f811 4b01 	ldrb.w	r4, [r1], #1
 801bc8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 801bc90:	e7f8      	b.n	801bc84 <memmove+0xc>
 801bc92:	4283      	cmp	r3, r0
 801bc94:	d9f5      	bls.n	801bc82 <memmove+0xa>
 801bc96:	1881      	adds	r1, r0, r2
 801bc98:	1ad2      	subs	r2, r2, r3
 801bc9a:	42d3      	cmn	r3, r2
 801bc9c:	d100      	bne.n	801bca0 <memmove+0x28>
 801bc9e:	bd10      	pop	{r4, pc}
 801bca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801bca4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 801bca8:	e7f7      	b.n	801bc9a <memmove+0x22>

0801bcaa <_realloc_r>:
 801bcaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bcac:	4607      	mov	r7, r0
 801bcae:	4614      	mov	r4, r2
 801bcb0:	460e      	mov	r6, r1
 801bcb2:	b921      	cbnz	r1, 801bcbe <_realloc_r+0x14>
 801bcb4:	4611      	mov	r1, r2
 801bcb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801bcba:	f7fe be3f 	b.w	801a93c <_malloc_r>
 801bcbe:	b922      	cbnz	r2, 801bcca <_realloc_r+0x20>
 801bcc0:	f7fe fdee 	bl	801a8a0 <_free_r>
 801bcc4:	4625      	mov	r5, r4
 801bcc6:	4628      	mov	r0, r5
 801bcc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bcca:	f000 f827 	bl	801bd1c <_malloc_usable_size_r>
 801bcce:	42a0      	cmp	r0, r4
 801bcd0:	d20f      	bcs.n	801bcf2 <_realloc_r+0x48>
 801bcd2:	4621      	mov	r1, r4
 801bcd4:	4638      	mov	r0, r7
 801bcd6:	f7fe fe31 	bl	801a93c <_malloc_r>
 801bcda:	4605      	mov	r5, r0
 801bcdc:	2800      	cmp	r0, #0
 801bcde:	d0f2      	beq.n	801bcc6 <_realloc_r+0x1c>
 801bce0:	4631      	mov	r1, r6
 801bce2:	4622      	mov	r2, r4
 801bce4:	f7fe fdc8 	bl	801a878 <memcpy>
 801bce8:	4631      	mov	r1, r6
 801bcea:	4638      	mov	r0, r7
 801bcec:	f7fe fdd8 	bl	801a8a0 <_free_r>
 801bcf0:	e7e9      	b.n	801bcc6 <_realloc_r+0x1c>
 801bcf2:	4635      	mov	r5, r6
 801bcf4:	e7e7      	b.n	801bcc6 <_realloc_r+0x1c>
	...

0801bcf8 <_read_r>:
 801bcf8:	b538      	push	{r3, r4, r5, lr}
 801bcfa:	4c07      	ldr	r4, [pc, #28]	; (801bd18 <_read_r+0x20>)
 801bcfc:	4605      	mov	r5, r0
 801bcfe:	4608      	mov	r0, r1
 801bd00:	4611      	mov	r1, r2
 801bd02:	2200      	movs	r2, #0
 801bd04:	6022      	str	r2, [r4, #0]
 801bd06:	461a      	mov	r2, r3
 801bd08:	f7e8 feb2 	bl	8004a70 <_read>
 801bd0c:	1c43      	adds	r3, r0, #1
 801bd0e:	d102      	bne.n	801bd16 <_read_r+0x1e>
 801bd10:	6823      	ldr	r3, [r4, #0]
 801bd12:	b103      	cbz	r3, 801bd16 <_read_r+0x1e>
 801bd14:	602b      	str	r3, [r5, #0]
 801bd16:	bd38      	pop	{r3, r4, r5, pc}
 801bd18:	24045748 	.word	0x24045748

0801bd1c <_malloc_usable_size_r>:
 801bd1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801bd20:	1f18      	subs	r0, r3, #4
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	bfbc      	itt	lt
 801bd26:	580b      	ldrlt	r3, [r1, r0]
 801bd28:	18c0      	addlt	r0, r0, r3
 801bd2a:	4770      	bx	lr

0801bd2c <_init>:
 801bd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd2e:	bf00      	nop
 801bd30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd32:	bc08      	pop	{r3}
 801bd34:	469e      	mov	lr, r3
 801bd36:	4770      	bx	lr

0801bd38 <_fini>:
 801bd38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bd3a:	bf00      	nop
 801bd3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801bd3e:	bc08      	pop	{r3}
 801bd40:	469e      	mov	lr, r3
 801bd42:	4770      	bx	lr
